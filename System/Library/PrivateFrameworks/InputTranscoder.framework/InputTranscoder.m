const __CFString *nlp::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  char *CStringPtr;
  CFIndex Length;
  CFIndex v7;
  char *v8;

  if (this)
  {
    v4 = this;
    CStringPtr = (char *)CFStringGetCStringPtr(this, 0x8000100u);
    if (!CStringPtr)
    {
      Length = CFStringGetLength(v4);
      v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      v8 = (char *)operator new[]();
      CFStringGetCString(v4, v8, v7, 0x8000100u);
      std::string::basic_string[abi:ne180100]<0>(a2, v8);
      JUMPOUT(0x22E2B18C4);
    }
    return (const __CFString *)std::string::basic_string[abi:ne180100]<0>(a2, CStringPtr);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_228515D48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B18C4](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

CFStringRef nlp::createCFStringFromString(uint64_t a1)
{
  const UInt8 *v1;
  CFIndex v2;

  v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
      return &stru_24F112198;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x8000100u, 0);
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v1, v2, 0x8000100u, 0);
  }
  return &stru_24F112198;
}

void nlp::getFileSystemRepresentationFromCFURL(nlp *this@<X0>, _QWORD *a2@<X8>)
{
  UInt8 *v5;

  v5 = (UInt8 *)operator new[]();
  CFURLGetFileSystemRepresentation(this, 1u, v5, 1024);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)v5);
  JUMPOUT(0x22E2B18C4);
}

void sub_228515E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B18C4](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

CFPropertyListRef nlp::createDictionaryWithContentsOfURL(nlp *this, CFErrorRef *a2, __CFError **a3, __CFError **a4)
{
  return nlp::createDictionaryWithContentsOfURL(this, 0, a2, a4);
}

CFPropertyListRef nlp::createDictionaryWithContentsOfURL(CFURLRef fileURL, const __CFURL *a2, CFErrorRef *a3, __CFError **a4)
{
  int v5;
  __CFReadStream *v7;
  const __CFURL *v8;
  __CFReadStream *v9;
  const __CFURL *v10;
  CFOptionFlags v11;
  CFPropertyListRef v12;
  CFTypeID v13;
  const __CFURL *v14;

  v5 = (int)a2;
  v7 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x24BDBD240], fileURL);
  if (v7)
  {
    v9 = v7;
    if (CFReadStreamOpen(v7)
      && (!v5 ? (v11 = 0) : (v11 = 2),
          v12 = CFPropertyListCreateWithStream(0, v9, 0, v11, 0, 0),
          CFReadStreamClose(v9),
          v12))
    {
      v13 = CFGetTypeID(v12);
      if (v13 != CFDictionaryGetTypeID())
      {
        if (a3)
          *a3 = nlp::createErrorWithMessageAndURL((nlp *)CFSTR("Property list at URL is not a dictionary"), fileURL, v14);
        CFRelease(v12);
        goto LABEL_15;
      }
    }
    else
    {
      if (!a3)
      {
LABEL_15:
        v12 = 0;
        goto LABEL_16;
      }
      v12 = 0;
      *a3 = nlp::createErrorWithMessageAndURL((nlp *)CFSTR("File at URL is not a valid property list"), fileURL, v10);
    }
LABEL_16:
    CFRelease(v9);
    return v12;
  }
  v12 = 0;
  if (a3)
    *a3 = nlp::createErrorWithMessageAndURL((nlp *)CFSTR("File at URL is not readable"), fileURL, v8);
  return v12;
}

void sub_228515F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFReadStream *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFErrorRef nlp::createErrorWithMessageAndURL(nlp *this, CFURLRef anURL, const __CFURL *a3)
{
  CFStringRef v4;
  const __CFAllocator *v5;
  CFStringRef v6;
  __CFDictionary *Mutable;
  CFErrorRef v8;

  v4 = CFURLCopyPath(anURL);
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@: %@"), this, v4);
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDBD3A0], v6);
  v8 = CFErrorCreate(v5, CFSTR("com.apple.NLPUtils.ErrorDomain"), 0, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  if (v6)
    CFRelease(v6);
  if (v4)
    CFRelease(v4);
  return v8;
}

void sub_2285160BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void nlp::CFScopedPtr<__CFReadStream *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F110238, MEMORY[0x24BEDAAF0]);
}

void sub_228516274(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *InputTranscoder::RNNRecognizer::recognize@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t OutputDimension;
  _QWORD v14[2];
  unsigned int **v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v4 = a1[1];
  OutputDimension = 0;
  v14[0] = &off_24F110598;
  v14[1] = &OutputDimension;
  v15 = a1;
  v16 = v14;
  v6 = *(_QWORD **)(a2 + 8);
  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  v7 = InputTranscoder::MontrealModel::recognize(v6, *v15, v15[1] - *v15);
  v9 = v8;
  result = v16;
  if (v16 == v14)
  {
    v11 = 4;
    result = v14;
    goto LABEL_5;
  }
  if (v16)
  {
    v11 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
  }
  *a3 = v7;
  a3[1] = v9;
  v12 = OutputDimension;
  a3[2] = v4 - v5;
  a3[3] = v12;
  return result;
}

void sub_22851649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void InputTranscoder::RNNRecognizer::~RNNRecognizer(InputTranscoder::RNNRecognizer *this)
{
  JUMPOUT(0x22E2B18DCLL);
}

void std::__function::__func<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F110598;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F110598;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t OutputDimension;
  uint64_t v5;

  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  v5 = *(_QWORD *)(a1 + 16);
  **(_QWORD **)(a1 + 8) = OutputDimension;
  return InputTranscoder::MontrealModel::recognize(a2, *(unsigned int **)v5, (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
}

uint64_t std::__function::__func<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::RNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *_CFInit_Candidate(_QWORD *result)
{
  result[2] = &off_24F110628;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  return result;
}

uint64_t nlp::CFFinalize(nlp *this, const void *a2)
{
  return (**((uint64_t (***)(char *))this + 2))((char *)this + 16);
}

uint64_t _CFGetTypeID_Candidate(void)
{
  unsigned __int8 v0;

  {
    unk_253F89DC8 = 0u;
    unk_253F89DB8 = 0u;
    _CFGetTypeID_Candidate(void)::typeID = _CFRuntimeRegisterClass();
  }
  return _CFGetTypeID_Candidate(void)::typeID;
}

void sub_2285166C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _CFInit_KeyCandidate(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_24F110690;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t _CFGetTypeID_KeyCandidate(void)
{
  unsigned __int8 v0;

  {
    unk_25598A4D0 = 0u;
    unk_25598A4C0 = 0u;
    _CFGetTypeID_KeyCandidate(void)::typeID = _CFRuntimeRegisterClass();
  }
  return _CFGetTypeID_KeyCandidate(void)::typeID;
}

void sub_228516754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _CFInit_TouchTranscoder(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_24F1106E8;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t _CFGetTypeID_TouchTranscoder(void)
{
  unsigned __int8 v0;

  {
    unk_253F89E28 = 0u;
    unk_253F89E18 = 0u;
    _CFGetTypeID_TouchTranscoder(void)::typeID = _CFRuntimeRegisterClass();
  }
  return _CFGetTypeID_TouchTranscoder(void)::typeID;
}

void sub_2285167E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _CFInit_TouchTranscoderSession(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_24F110740;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t _CFGetTypeID_TouchTranscoderSession(void)
{
  unsigned __int8 v0;

  {
    unk_253F89E88 = 0u;
    unk_253F89E78 = 0u;
    _CFGetTypeID_TouchTranscoderSession(void)::typeID = _CFRuntimeRegisterClass();
  }
  return _CFGetTypeID_TouchTranscoderSession(void)::typeID;
}

void sub_22851687C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _CFInit_Decoder(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_24F110798;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t _CFGetTypeID_Decoder(void)
{
  unsigned __int8 v0;

  {
    unk_25598A530 = 0u;
    unk_25598A520 = 0u;
    _CFGetTypeID_Decoder(void)::typeID = _CFRuntimeRegisterClass();
  }
  return _CFGetTypeID_Decoder(void)::typeID;
}

void sub_228516910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Candidate::~Candidate(const void **this)
{
  const void **v2;
  uint64_t v3;

  *this = &off_24F110628;
  v2 = this + 2;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 3, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
  v3 = (uint64_t)this[1];
  this[1] = 0;
  if (v3)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)(this + 1), v3);
}

{
  const void **v2;
  uint64_t v3;

  *this = &off_24F110628;
  v2 = this + 2;
  nlp::CFScopedPtr<__CFString const*>::reset(this + 3, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(v2, 0);
  v3 = (uint64_t)this[1];
  this[1] = 0;
  if (v3)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)(this + 1), v3);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t nlp::CFType::Equal()
{
  return 0;
}

uint64_t nlp::CFType::Hash(nlp::CFType *this)
{
  return 0;
}

uint64_t nlp::CFType::CopyFormattingDesc(nlp::CFType *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t nlp::CFType::CopyDebugDesc(nlp::CFType *this)
{
  return 0;
}

void std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    if (*(char *)(a2 + 119) < 0)
      operator delete(*(void **)(a2 + 96));
    v3 = *(void **)(a2 + 56);
    if (v3)
    {
      *(_QWORD *)(a2 + 64) = v3;
      operator delete(v3);
    }
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x22E2B18DCLL);
  }
}

void KeyCandidate::~KeyCandidate(KeyCandidate *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F110690;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<InputTranscoder::KeyCandidateImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F110690;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<InputTranscoder::KeyCandidateImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x22E2B18DCLL);
}

void std::default_delete<InputTranscoder::KeyCandidateImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x22E2B18DCLL);
  }
}

void TouchTranscoder::~TouchTranscoder(TouchTranscoder *this)
{
  _QWORD *v1;
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_24F1106E8;
  v3 = (void **)*((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<InputTranscoder::TouchTranscoderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  void **v2;
  void **v3;

  *(_QWORD *)this = &off_24F1106E8;
  v3 = (void **)*((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<InputTranscoder::TouchTranscoderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x22E2B18DCLL);
}

void std::default_delete<InputTranscoder::TouchTranscoderImpl>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 59));
    std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 57));
    std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 55));
    InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration(a2);
    JUMPOUT(0x22E2B18DCLL);
  }
}

uint64_t std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration(void **this)
{
  void **v2;

  v2 = this + 52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void TouchTranscoderSession::~TouchTranscoderSession(void ***this)
{
  *this = (void **)&off_24F110740;
  std::unique_ptr<InputTranscoder::TouchTranscoderSessionImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (void **)&off_24F110740;
  std::unique_ptr<InputTranscoder::TouchTranscoderSessionImpl>::reset[abi:ne180100](this + 1, 0);
  JUMPOUT(0x22E2B18DCLL);
}

void **std::unique_ptr<InputTranscoder::TouchTranscoderSessionImpl>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    InputTranscoder::TouchTranscoderSessionImpl::~TouchTranscoderSessionImpl(result);
    JUMPOUT(0x22E2B18DCLL);
  }
  return result;
}

void InputTranscoder::TouchTranscoderSessionImpl::~TouchTranscoderSessionImpl(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*((char *)this + 863) < 0)
    operator delete(this[105]);
  if (*((char *)this + 831) < 0)
    operator delete(this[101]);
  if (*((char *)this + 807) < 0)
    operator delete(this[98]);
  if (*((char *)this + 783) < 0)
    operator delete(this[95]);
  if (*((char *)this + 759) < 0)
    operator delete(this[92]);
  if (*((char *)this + 735) < 0)
    operator delete(this[89]);
  if (*((char *)this + 711) < 0)
    operator delete(this[86]);
  v2 = this[85];
  this[85] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 16))(v2);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(this + 83));
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(this + 81));
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  this[73] = &off_24F111B88;
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(this + 76));
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  v3 = this[68];
  if (v3)
  {
    this[69] = v3;
    operator delete(v3);
  }
  v4 = this[65];
  if (v4)
  {
    this[66] = v4;
    operator delete(v4);
  }
  v5 = this[62];
  if (v5)
  {
    this[63] = v5;
    operator delete(v5);
  }
  v6 = this[59];
  if (v6)
  {
    this[60] = v6;
    operator delete(v6);
  }
  InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration(this);
}

void Decoder::~Decoder(Decoder *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F110798;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<InputTranscoder::DecoderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24F110798;
  v3 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<InputTranscoder::DecoderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x22E2B18DCLL);
}

void std::default_delete<InputTranscoder::DecoderImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 344);
    if (v3)
    {
      *(_QWORD *)(a2 + 352) = v3;
      operator delete(v3);
    }
    nlp::CFScopedPtr<MontrealNeuralNetwork *>::reset((const void **)(a2 + 336), 0);
    std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](a2 + 320);
    InputTranscoder::CTCDecoder::~CTCDecoder((void **)a2);
    JUMPOUT(0x22E2B18DCLL);
  }
}

void nlp::CFScopedPtr<MontrealNeuralNetwork *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void InputTranscoder::CTCDecoder::~CTCDecoder(void **this)
{
  char *v2;
  void *v3;
  uint64_t *v4;
  void **v5;

  v2 = (char *)(this + 24);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  v3 = this[29];
  if (v3)
  {
    this[30] = v3;
    operator delete(v3);
  }
  v5 = this + 26;
  std::vector<nlp::CFScopedPtr<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  v4 = (uint64_t *)this[23];
  this[23] = 0;
  if (v4)
    std::default_delete<InputTranscoder::LMScorer>::operator()[abi:ne180100]((uint64_t)(this + 23), v4);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<nlp::CFScopedPtr<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        nlp::CFScopedPtr<_LXLexicon const*>::reset(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nlp::CFScopedPtr<_LXLexicon const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void std::default_delete<InputTranscoder::LMScorer>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  void *v3;

  if (a2)
  {
    v3 = (void *)a2[5];
    if (v3)
    {
      a2[6] = (uint64_t)v3;
      operator delete(v3);
    }
    std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 3));
    std::unique_ptr<InputTranscoder::LanguageModel>::reset[abi:ne180100](a2 + 2, 0);
    JUMPOUT(0x22E2B18DCLL);
  }
}

uint64_t *std::unique_ptr<InputTranscoder::LanguageModel>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    LMLanguageModelRelease();
    JUMPOUT(0x22E2B18DCLL);
  }
  return result;
}

void InputTranscoder::appendFeature(int a1, int a2, void **a3, double a4, double a5)
{
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  double *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v10 = (char *)a3[2];
  v11 = (char *)a3[1];
  if (v11 >= v10)
  {
    v13 = (v11 - (_BYTE *)*a3) >> 5;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 59)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v15 = v10 - (_BYTE *)*a3;
    if (v15 >> 4 > v14)
      v14 = v15 >> 4;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::InputFeature>>((uint64_t)(a3 + 2), v16);
    v18 = (double *)&v17[32 * v13];
    v20 = &v17[32 * v19];
    *(_DWORD *)v18 = a1;
    v18[1] = a4;
    v18[2] = a5;
    *((_DWORD *)v18 + 6) = a2;
    v12 = (char *)(v18 + 4);
    v22 = (char *)*a3;
    v21 = (char *)a3[1];
    if (v21 != *a3)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 2);
        *(_OWORD *)((char *)v18 - 20) = *(_OWORD *)(v21 - 20);
        *((_OWORD *)v18 - 2) = v23;
        v18 -= 4;
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a3;
    }
    *a3 = v18;
    a3[1] = v12;
    a3[2] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_DWORD *)v11 = a1;
    *((double *)v11 + 1) = a4;
    *((double *)v11 + 2) = a5;
    v12 = v11 + 32;
    *((_DWORD *)v11 + 6) = a2;
  }
  a3[1] = v12;
}

void std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::InputFeature>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

__CFDictionary *InputTranscoder::InputDescriptorCreator::create(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  const __CFAllocator *v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t valuePtr;
  unint64_t v17;

  v17 = a2;
  v15 = a4;
  valuePtr = a3;
  v13 = this / a2;
  v14 = a5;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD2A8], MEMORY[0x24BDBD6B0]);
  v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
  v8 = CFNumberCreate(v6, kCFNumberSInt64Type, &v17);
  v9 = CFNumberCreate(v6, kCFNumberSInt64Type, &v13);
  v10 = CFNumberCreate(v6, kCFNumberSInt64Type, &v15);
  v11 = CFNumberCreate(v6, kCFNumberSInt64Type, &v14);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68FC0], v7);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68FB8], v11);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68FC8], v8);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68FA8], v9);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68FA0], v10);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  return Mutable;
}

void sub_2285175E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  const void *v7;
  va_list va2;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v7 = va_arg(va3, const void *);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va3, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *InputTranscoder::InputDescriptorCreator::create(InputTranscoder::InputDescriptorCreator *this, uint64_t a2)
{
  __CFDictionary *Mutable;
  const __CFAllocator *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  uint64_t valuePtr;
  InputTranscoder::InputDescriptorCreator *v8;

  valuePtr = a2;
  v8 = this;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD2A8], MEMORY[0x24BDBD6B0]);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt64Type, &valuePtr);
  v5 = CFNumberCreate(v3, kCFNumberSInt64Type, &v8);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68FB0], v4);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68FB8], v5);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

void sub_228517728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFNumber const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t ITDecoderCreate(void *a1)
{
  CFTypeID v2;
  const void *Value;
  const void *v4;
  CFTypeID v5;
  char v6;
  CFBundleRef v7;
  CFBundleRef BundleWithIdentifier;
  const __CFString *Optional;
  _BOOL8 v10;
  uint64_t Instance;
  std::string *v12;
  std::string *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *exception;
  void *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  void *v38[2];
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *__p;
  char v47;
  std::string::size_type v48;
  std::__shared_weak_count *v49;
  InputTranscoder *v50;
  nlp *v51;
  char v52;
  uint64_t v53;
  std::__shared_weak_count *v54;

  if (!a1)
  {
    v38[0] = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2B1738](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  CFRetain(a1);
  v2 = CFGetTypeID(a1);
  if (v2 != CFDictionaryGetTypeID())
  {
    v33 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x22E2B1738](v33, "Could not construct");
    __cxa_throw(v33, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (CFSTR("bundleURL"))
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)a1, CFSTR("bundleURL"));
    v4 = Value;
    if (Value)
    {
      CFRetain(Value);
      v5 = CFGetTypeID(v4);
      if (v5 == CFURLGetTypeID())
      {
        v51 = (nlp *)v4;
        v6 = 1;
        goto LABEL_9;
      }
      CFRelease(v4);
    }
  }
  v6 = 0;
  LOBYTE(v51) = 0;
LABEL_9:
  v52 = v6;
  CFRelease(a1);
  v50 = 0;
  if (v52)
  {
    v7 = CFBundleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v51);
    nlp::CFScopedPtr<__CFBundle *>::acquire((const void **)&v50, v7);
    if (!v50)
    {
      __cxa_allocate_exception(0x20uLL);
      if (!v52)
        std::__throw_bad_optional_access[abi:ne180100]();
      nlp::getFileSystemRepresentationFromCFURL(v51, &v48);
    }
  }
  else
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.InputTranscoder-framework"));
    nlp::CFScopedPtr<__CFBundle *>::acquire((const void **)&v50, BundleWithIdentifier);
  }
  Optional = (const __CFString *)InputTranscoder::getOptionalCFType<__CFString const*>((const __CFDictionary *)a1, CFSTR("neuralTypeKey"), CFSTR("Path"));
  v10 = CFStringCompare(Optional, CFSTR("Tap"), 0) == kCFCompareEqualTo;
  InputTranscoder::generateConfiguration<InputTranscoder::DecoderConfiguration>((InputTranscoder *)a1, v50, v10, (InputTranscoder::DecoderConfiguration *)v38);
  std::allocate_shared[abi:ne180100]<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>,std::string const&,void>((uint64_t)&v40, &v36);
  std::allocate_shared[abi:ne180100]<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>,std::string const&,void>((uint64_t)&v42, &v34);
  CFAllocatorGetDefault();
  _CFGetTypeID_Decoder();
  Instance = _CFRuntimeCreateInstance();
  v12 = (std::string *)operator new();
  v13 = v12;
  v48 = v36;
  v49 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v53 = v34;
  v54 = v35;
  if (v35)
  {
    v16 = (unint64_t *)&v35->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  InputTranscoder::DecoderImpl::DecoderImpl(v12, (uint64_t)v38, &v48, (uint64_t)&v53);
  v18 = v54;
  if (v54)
  {
    v19 = (unint64_t *)&v54->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v49;
  if (v49)
  {
    v22 = (unint64_t *)&v49->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = *(_QWORD *)(Instance + 24);
  *(_QWORD *)(Instance + 24) = v13;
  if (v24)
    std::default_delete<InputTranscoder::DecoderImpl>::operator()[abi:ne180100](Instance + 24, v24);
  v25 = v35;
  if (v35)
  {
    v26 = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v47 < 0)
    operator delete(__p);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v50)
    CFRelease(v50);
  std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v51);
  return Instance;
}

void sub_228517B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v13;
  uint64_t v14;

  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to create bundle using bundle URL supplied as part of options =", (std::string *)(v14 - 112), (std::string *)&a13);
  nlp::ResourceCreationException::ResourceCreationException(v13, (__int128 *)&a13);
}

void sub_228517BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  CFErrorRef *v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v24;
  char *v25;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 89) < 0)
  {
    operator delete(*(void **)(v21 - 112));
    if ((v20 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v20)
  {
LABEL_8:
    nlp::CFScopedPtr<__CFBundle *>::reset((const void **)(v21 - 88), 0);
    if (a2 == 2)
    {
      v24 = __cxa_begin_catch(a1);
      if (v18)
      {
        v25 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v24 + 16))(v24);
        std::string::basic_string[abi:ne180100]<0>(&__p, v25);
        *v18 = InputTranscoder::createErrorWithMessage((uint64_t)&__p);
        if (a18 < 0)
          operator delete(__p);
      }
      __cxa_end_catch();
      JUMPOUT(0x228517AE4);
    }
    std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100](v21 - 80);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  goto LABEL_8;
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void nlp::CFScopedPtr<__CFBundle *>::acquire(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    nlp::CFScopedPtr<__CFBundle *>::reset(a1, cf);
  }
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void nlp::ResourceCreationException::~ResourceCreationException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_24F110990;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_24F110990;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x22E2B18DCLL);
}

void InputTranscoder::DecoderConfiguration::~DecoderConfiguration(void **this)
{
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t ITDecoderClearNeuralNetworkBuffer()
{
  NSObject *v0;
  os_signpost_id_t v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v5[16];

  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v0 = (id)_nlpSignpostLog::log;
  v1 = os_signpost_id_generate(v0);

  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v2 = (id)_nlpSignpostLog::log;
  v3 = v2;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_228515000, v3, OS_SIGNPOST_EVENT, v1, "ITDecoderClearNeuralNetworkBuffer", (const char *)&unk_228544982, v5, 2u);
  }

  return MRLNeuralNetworkClear();
}

char *ITDecoderSetLinguisticContext(char *result, char *a2, unint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*((_QWORD *)result + 3) + 184);
  if (v3)
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((char *)(v3 + 40), a2, (uint64_t)&a2[4 * a3], a3);
  return result;
}

void ITDecoderEnumerateCandidates(uint64_t a1, unsigned int *a2, unint64_t a3, void *a4)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  CFMutableDictionaryRef Mutable;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t buf[8];
  id v18;
  unint64_t ptr;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  ptr = a3;
  v18 = a4;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v6 = (id)_nlpSignpostLog::log;
  v7 = os_signpost_id_make_with_pointer(v6, &ptr);

  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v8 = (id)_nlpSignpostLog::log;
  v9 = v8;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_228515000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "ITDecoderEnumerateCandidates", (const char *)&unk_228544982, buf, 2u);
  }

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_QWORD *)buf = Mutable;
  v11 = *(_QWORD *)(a1 + 24);
  v20[0] = &off_24F110868;
  v20[1] = &v18;
  v21 = v20;
  InputTranscoder::DecoderImpl::enumerateCandidates(v11, a2, ptr, (uint64_t)Mutable, (uint64_t)v20);
  v12 = v21;
  if (v21 == v20)
  {
    v13 = 4;
    v12 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_13;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_13:
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v14 = (id)_nlpSignpostLog::log;
  v15 = v14;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    *(_WORD *)v16 = 0;
    _os_signpost_emit_with_name_impl(&dword_228515000, v15, OS_SIGNPOST_INTERVAL_END, v7, "ITDecoderEnumerateCandidates", (const char *)&unk_228544982, v16, 2u);
  }

  if (Mutable)
    CFRelease(Mutable);

}

void sub_2285182BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ITDecoderEnumerateCandidatesWithOptions(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  os_signpost_id_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint8_t v17[8];
  id v18;
  unint64_t ptr;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  ptr = a3;
  v18 = a5;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v8 = (id)_nlpSignpostLog::log;
  v9 = os_signpost_id_make_with_pointer(v8, &ptr);

  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v10 = (id)_nlpSignpostLog::log;
  v11 = v10;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)v17 = 0;
    _os_signpost_emit_with_name_impl(&dword_228515000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v9, "ITDecoderEnumerateCandidates", (const char *)&unk_228544982, v17, 2u);
  }

  v12 = *(_QWORD *)(a1 + 24);
  v20[0] = &off_24F1108F8;
  v20[1] = &v18;
  v21 = v20;
  InputTranscoder::DecoderImpl::enumerateCandidates(v12, a2, ptr, a4, (uint64_t)v20);
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_13;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_13:
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v15 = (id)_nlpSignpostLog::log;
  v16 = v15;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)v17 = 0;
    _os_signpost_emit_with_name_impl(&dword_228515000, v16, OS_SIGNPOST_INTERVAL_END, v9, "ITDecoderEnumerateCandidates", (const char *)&unk_228544982, v17, 2u);
  }

}

void sub_22851854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

_QWORD *nlp::ResourceCreationException::ResourceCreationException(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &unk_24F110990;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_228518620(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t nlp::ResourceCreationException::what(nlp::ResourceCreationException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

const void *InputTranscoder::getOptionalCFType<__CFString const*>(const __CFDictionary *a1, const __CFString *a2, const void *a3)
{
  const void *Value;
  const void *v6;
  CFTypeID v7;
  _QWORD *exception;
  _QWORD v10[3];
  std::string v11;

  Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v6 = Value;
    v7 = CFGetTypeID(Value);
    a3 = v6;
    if (v7 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v10, "Malformed dictionary: invalid type for key=");
      InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v10, &v11);
      nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v11);
    }
  }
  return a3;
}

void sub_228518758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void InputTranscoder::makeDictionaryErrorMessage(const __CFString *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string v9;

  nlp::getUTF8StringFromCFString(this, &v9);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const std::string::value_type *)a2;
  else
    v6 = *(const std::string::value_type **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::string::insert(&v9, 0, v6, v7);
  *a3 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_228518838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<applesauce::CF::URLRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

void nlp::CFScopedPtr<__CFBundle *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *std::allocate_shared[abi:ne180100]<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_228518904(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_24F110818;
  a1[1] = 0;
  InputTranscoder::PlistBiMap<unsigned int,unsigned int>::PlistBiMap((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_228518950(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F110818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24F110818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<ITDecoderEnumerateCandidates::$_0,std::allocator<ITDecoderEnumerateCandidates::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<ITDecoderEnumerateCandidates::$_0,std::allocator<ITDecoderEnumerateCandidates::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F110868;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ITDecoderEnumerateCandidates::$_0,std::allocator<ITDecoderEnumerateCandidates::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F110868;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ITDecoderEnumerateCandidates::$_0,std::allocator<ITDecoderEnumerateCandidates::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *Instance;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v3 = *a2;
  *a2 = 0;
  v7[0] = 0;
  CFAllocatorGetDefault();
  _CFGetTypeID_Candidate();
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v5 = Instance[3];
  Instance[3] = v3;
  if (v5)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)(Instance + 3), v5);
  v7[1] = 0;
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  CFRelease(Instance);
  v6 = v7[0];
  v7[0] = 0;
  if (v6)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)v7, v6);
}

void sub_228518AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v12;

  CFRelease(v10);
  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ITDecoderEnumerateCandidates::$_0,std::allocator<ITDecoderEnumerateCandidates::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<ITDecoderEnumerateCandidates::$_0,std::allocator<ITDecoderEnumerateCandidates::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::target_type()
{
}

void std::__function::__func<ITDecoderEnumerateCandidatesWithOptions::$_0,std::allocator<ITDecoderEnumerateCandidatesWithOptions::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<ITDecoderEnumerateCandidatesWithOptions::$_0,std::allocator<ITDecoderEnumerateCandidatesWithOptions::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1108F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ITDecoderEnumerateCandidatesWithOptions::$_0,std::allocator<ITDecoderEnumerateCandidatesWithOptions::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1108F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ITDecoderEnumerateCandidatesWithOptions::$_0,std::allocator<ITDecoderEnumerateCandidatesWithOptions::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *Instance;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v3 = *a2;
  *a2 = 0;
  v7[0] = 0;
  CFAllocatorGetDefault();
  _CFGetTypeID_Candidate();
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v5 = Instance[3];
  Instance[3] = v3;
  if (v5)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)(Instance + 3), v5);
  v7[1] = 0;
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  CFRelease(Instance);
  v6 = v7[0];
  v7[0] = 0;
  if (v6)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)v7, v6);
}

void sub_228518C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  uint64_t v12;

  CFRelease(v10);
  v12 = a9;
  a9 = 0;
  if (v12)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)&a9, v12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ITDecoderEnumerateCandidatesWithOptions::$_0,std::allocator<ITDecoderEnumerateCandidatesWithOptions::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ITDecoderEnumerateCandidatesWithOptions::$_0,std::allocator<ITDecoderEnumerateCandidatesWithOptions::$_0>,void ()(std::unique_ptr<InputTranscoder::CandidateImpl>,BOOL &)>::target_type()
{
}

void InputTranscoder::LexiconContainer::addLexicon(_QWORD *a1, CFTypeRef cf, int a3)
{
  CFTypeRef v6;
  CFTypeRef v7;
  unint64_t v8;
  const void **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  const void **v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v6 = CFRetain(cf);
  v7 = v6;
  v9 = (const void **)a1[3];
  v8 = a1[4];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (_QWORD *)a1[2];
    v12 = v9 - (const void **)v11;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        goto LABEL_42;
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v7;
    v10 = v17 + 8;
    if (v9 == v11)
    {
      a1[2] = v17;
      a1[3] = v10;
      a1[4] = v18;
    }
    else
    {
      do
      {
        v19 = (uint64_t)*--v9;
        *v9 = 0;
        *((_QWORD *)v17 - 1) = v19;
        v17 -= 8;
      }
      while (v9 != v11);
      v9 = (const void **)a1[2];
      v20 = (const void **)a1[3];
      a1[2] = v17;
      a1[3] = v10;
      a1[4] = v18;
      while (v20 != v9)
        nlp::CFScopedPtr<_LXLexicon const*>::reset(--v20, 0);
    }
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[3] = v10;
  if (a3)
    return;
  v22 = (_QWORD *)a1[6];
  v21 = a1[7];
  if ((unint64_t)v22 >= v21)
  {
    v24 = (_QWORD *)a1[5];
    v25 = v22 - v24;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v27 = v21 - (_QWORD)v24;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (!v28)
    {
      v29 = 0;
      goto LABEL_34;
    }
    if (!(v28 >> 61))
    {
      v29 = (char *)operator new(8 * v28);
LABEL_34:
      v30 = &v29[8 * v25];
      *(_QWORD *)v30 = cf;
      v23 = v30 + 8;
      if (v22 != v24)
      {
        do
        {
          v31 = *--v22;
          *((_QWORD *)v30 - 1) = v31;
          v30 -= 8;
        }
        while (v22 != v24);
        v22 = (_QWORD *)a1[5];
      }
      a1[5] = v30;
      a1[6] = v23;
      a1[7] = &v29[8 * v28];
      if (v22)
        operator delete(v22);
      goto LABEL_39;
    }
LABEL_42:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  *v22 = cf;
  v23 = v22 + 1;
LABEL_39:
  a1[6] = v23;
}

void InputTranscoder::LexiconContainer::createRootCursors(InputTranscoder::LexiconContainer *this@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t RootCursor;
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int64x2_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int64x2_t v47;
  char *v48;
  uint64_t v49;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v6 = (uint64_t)(a2 + 2);
    do
    {
      RootCursor = LXLexiconCreateRootCursor();
      v8 = (const void *)RootCursor;
      v9 = (_QWORD *)*((_QWORD *)this + 5);
      v10 = (_QWORD *)*((_QWORD *)this + 6);
      if (v9 != v10)
      {
        while (*v9 != *v2)
        {
          if (++v9 == v10)
          {
            v9 = (_QWORD *)*((_QWORD *)this + 6);
            break;
          }
        }
      }
      v11 = v9 == v10;
      if (*((char *)this + 87) < 0)
      {
        if (!*((_QWORD *)this + 9))
        {
LABEL_14:
          v18 = (unint64_t)a2[1];
          v17 = (unint64_t)a2[2];
          if (v18 >= v17)
          {
            v32 = (uint64_t)(v18 - (_QWORD)*a2) >> 4;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 60)
              std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
            v34 = v17 - (_QWORD)*a2;
            if (v34 >> 3 > v33)
              v33 = v34 >> 3;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
              v35 = 0xFFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            v49 = v6;
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>>(v6, v35);
            v38 = &v36[16 * v32];
            *(_QWORD *)v38 = v8;
            v38[8] = v11;
            v40 = *a2;
            v39 = (unint64_t)a2[1];
            if ((char *)v39 == *a2)
            {
              v43 = vdupq_n_s64(v39);
              v41 = &v36[16 * v32];
            }
            else
            {
              v41 = &v36[16 * v32];
              do
              {
                v42 = *(_QWORD *)(v39 - 16);
                v39 -= 16;
                *(_QWORD *)v39 = 0;
                *((_QWORD *)v41 - 2) = v42;
                v41 -= 16;
                v41[8] = *(_BYTE *)(v39 + 8);
              }
              while ((char *)v39 != v40);
              v43 = *(int64x2_t *)a2;
            }
            v19 = v38 + 16;
            *a2 = v41;
            a2[1] = v38 + 16;
            v47 = v43;
            v45 = a2[2];
            a2[2] = &v36[16 * v37];
            v48 = v45;
            v46 = v43.i64[0];
            std::__split_buffer<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::~__split_buffer((uint64_t)&v46);
          }
          else
          {
            *(_QWORD *)v18 = RootCursor;
            *(_BYTE *)(v18 + 8) = v11;
            v19 = (char *)(v18 + 16);
          }
          a2[1] = v19;
          goto LABEL_44;
        }
      }
      else if (!*((_BYTE *)this + 87))
      {
        goto LABEL_14;
      }
      v12 = LXCursorCreateByAdvancingWithUTF8();
      v13 = v12;
      if (v12)
      {
        v15 = (unint64_t)a2[1];
        v14 = (unint64_t)a2[2];
        if (v15 >= v14)
        {
          v20 = (uint64_t)(v15 - (_QWORD)*a2) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
          v22 = v14 - (_QWORD)*a2;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v49 = v6;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>>(v6, v23);
          v26 = &v24[16 * v20];
          *(_QWORD *)v26 = v13;
          v26[8] = v11;
          v28 = *a2;
          v27 = (unint64_t)a2[1];
          if ((char *)v27 == *a2)
          {
            v31 = vdupq_n_s64(v27);
            v29 = &v24[16 * v20];
          }
          else
          {
            v29 = &v24[16 * v20];
            do
            {
              v30 = *(_QWORD *)(v27 - 16);
              v27 -= 16;
              *(_QWORD *)v27 = 0;
              *((_QWORD *)v29 - 2) = v30;
              v29 -= 16;
              v29[8] = *(_BYTE *)(v27 + 8);
            }
            while ((char *)v27 != v28);
            v31 = *(int64x2_t *)a2;
          }
          v16 = v26 + 16;
          *a2 = v29;
          a2[1] = v26 + 16;
          v47 = v31;
          v44 = a2[2];
          a2[2] = &v24[16 * v25];
          v48 = v44;
          v46 = v31.i64[0];
          std::__split_buffer<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::~__split_buffer((uint64_t)&v46);
        }
        else
        {
          *(_QWORD *)v15 = v12;
          *(_BYTE *)(v15 + 8) = v11;
          v16 = (char *)(v15 + 16);
        }
        a2[1] = v16;
      }
      if (v8)
        CFRelease(v8);
LABEL_44:
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_2285191B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  nlp::CFScopedPtr<_LXCursor const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<_LXCursor const*>::reset((const void **)va1, 0);
  std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL InputTranscoder::LexiconContainer::isPresentInLexicon(uint64_t a1, uint64_t a2)
{
  CFStringRef CFStringFromString;
  CFStringRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  BOOL v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  CFStringFromString = nlp::createCFStringFromString(a2);
  v4 = CFStringFromString;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (v5 == v6)
  {
    v8 = 0;
    if (!CFStringFromString)
      goto LABEL_12;
LABEL_11:
    CFRelease(v4);
    goto LABEL_12;
  }
  v7 = v5 + 8;
  do
  {
    LXLexiconEnumerateEntriesForString();
    v8 = *((_BYTE *)v12 + 24) != 0;
    if (*((_BYTE *)v12 + 24))
      v9 = 1;
    else
      v9 = v7 == v6;
    v7 += 8;
  }
  while (!v9);
  if (v4)
    goto LABEL_11;
LABEL_12:
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_22851931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN15InputTranscoder16LexiconContainer18isPresentInLexiconERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v5;
  void *__p;
  char v7;
  const __CFString *v8;

  v5 = (const __CFString *)LXEntryCopyString();
  v8 = v5;
  nlp::getUTF8StringFromCFString(v5, &__p);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  *a3 = 1;
  if (v7 < 0)
  {
    operator delete(__p);
    if (!v5)
      return;
    goto LABEL_5;
  }
  if (v5)
LABEL_5:
    CFRelease(v5);
}

void sub_2285193CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

const void **std::vector<nlp::CFScopedPtr<_LXLexicon const*>>::erase(uint64_t a1, const void **a2, const void **a3)
{
  const void **v5;
  const void **v6;
  const void **v7;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,nlp::CFScopedPtr<_LXLexicon const*> *,nlp::CFScopedPtr<_LXLexicon const*> *,nlp::CFScopedPtr<_LXLexicon const*> *,0>(a3, *(const void ***)(a1 + 8), a2);
    v6 = v5;
    v7 = *(const void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
        nlp::CFScopedPtr<_LXLexicon const*>::reset(--v7, 0);
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

const void **std::remove[abi:ne180100]<std::__wrap_iter<nlp::CFScopedPtr<_LXLexicon const*> *>,_LXLexicon const*>(const void **a1, const void **a2, const void **a3)
{
  const void **v5;
  const void **i;
  const void *v7;

  if (a1 == a2)
  {
LABEL_5:
    v5 = a2;
  }
  else
  {
    v5 = a1;
    while (*v5 != *a3)
    {
      if (++v5 == a2)
        goto LABEL_5;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 1; i != a2; ++i)
    {
      v7 = *i;
      if (*i != *a3)
      {
        *i = 0;
        nlp::CFScopedPtr<_LXLexicon const*>::reset(v5++, v7);
      }
    }
  }
  return v5;
}

const void **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,nlp::CFScopedPtr<_LXLexicon const*> *,nlp::CFScopedPtr<_LXLexicon const*> *,nlp::CFScopedPtr<_LXLexicon const*> *,0>(const void **a1, const void **a2, const void **a3)
{
  const void **v4;
  const void *v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4++ = 0;
      nlp::CFScopedPtr<_LXLexicon const*>::reset(a3++, v6);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    nlp::CFScopedPtr<_LXCursor const*>::reset((const void **)(i - 16), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        nlp::CFScopedPtr<_LXCursor const*>::reset(v4, 0);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nlp::CFScopedPtr<_LXCursor const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *InputTranscoder::RecognizerFactory::makeRecognizer@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  char *v4;
  _QWORD *exception;
  __int128 v6;

  switch(*a1)
  {
    case 0:
      result = (_QWORD *)operator new();
      break;
    case 1:
      result = (_QWORD *)operator new();
      break;
    case 2:
    case 3:
    case 4:
      result = (_QWORD *)operator new();
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v6, "Recognizer not implemented for anything other than RNN and CRNN");
      nlp::ResourceCreationException::ResourceCreationException(exception, &v6);
  }
  *result = v4 + 16;
  *a2 = result;
  return result;
}

void sub_228519784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t InputTranscoder::InputProcessor::InputProcessor(uint64_t a1, InputTranscoder::PathKeyLayoutProcessor *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string __p;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  InputTranscoder::InputProcessor::processInput((void **)a1, this, a4, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_22851985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;
  void *v18;

  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  v17 = *(void **)(v15 + 24);
  if (v17)
  {
    *(_QWORD *)(v15 + 32) = v17;
    operator delete(v17);
  }
  v18 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void InputTranscoder::InputProcessor::processInput(void **a1, InputTranscoder::PathKeyLayoutProcessor *this, uint64_t a3, char *a4)
{
  char *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  void **v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  void *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  size_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  void *v59;
  char *v60;
  float64x2_t v61;
  void *v62[3];
  _BYTE v63[23];
  char v64;
  _QWORD v65[2];
  char v66;
  void *__p;
  float32x2_t *v68;
  void *__src[2];
  char *v70;
  int v71;

  InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(this, (const InputTranscoder::Path *)a1[6], 0, *(_DWORD *)(a3 + 372), *(unsigned __int8 *)(a3 + 361), (int **)__src);
  v8 = (char *)*a1;
  if (*a1)
  {
    a1[1] = v8;
    operator delete(v8);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)__src;
  a1[2] = v70;
  v9 = *(_DWORD *)(a3 + 80);
  if ((v9 - 3) < 2)
  {
    __src[0] = 0;
    __src[1] = 0;
    v70 = 0;
    if (a4[23] < 0)
    {
      v48 = a4;
      a4 = *(char **)a4;
      v19 = *((_QWORD *)v48 + 1);
      if (v19)
        goto LABEL_16;
    }
    else
    {
      v19 = a4[23];
      if (a4[23])
      {
LABEL_16:
        v20 = *(int *)(a3 + 372);
        v21 = &a4[v19];
        while (1)
        {
          v22 = __tolower(*a4);
          v23 = v22;
          if (v22 <= 0x7F)
          {
            if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v22 + 60) & 0x4000) != 0)
            {
LABEL_19:
              std::string::basic_string[abi:ne180100]<0>(v65, "space");
              v24 = *(unsigned int *)(*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), v65);
              if (v66 < 0)
              {
                v25 = (void **)v65;
LABEL_24:
                operator delete(*v25);
                goto LABEL_25;
              }
              goto LABEL_25;
            }
          }
          else if (__maskrune(v22, 0x4000uLL))
          {
            goto LABEL_19;
          }
          v64 = 1;
          v63[0] = v23;
          v63[1] = 0;
          v24 = *(unsigned int *)(*(uint64_t (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), v63);
          if (v64 < 0)
          {
            v25 = (void **)v63;
            goto LABEL_24;
          }
LABEL_25:
          v27 = (char *)__src[1];
          v26 = v70;
          if (__src[1] >= v70)
          {
            v29 = (char *)__src[0];
            v30 = ((char *)__src[1] - (char *)__src[0]) >> 2;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62)
              goto LABEL_92;
            v32 = v70 - (char *)__src[0];
            if ((v70 - (char *)__src[0]) >> 1 > v31)
              v31 = v32 >> 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
              v33 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v70, v33);
              v29 = (char *)__src[0];
              v27 = (char *)__src[1];
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[4 * v30];
            *(_DWORD *)v35 = v24;
            v28 = v35 + 4;
            while (v27 != v29)
            {
              v36 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            v26 = &v34[4 * v33];
            __src[0] = v35;
            __src[1] = v28;
            v70 = v26;
            if (v29)
            {
              operator delete(v29);
              v26 = v70;
            }
          }
          else
          {
            *(_DWORD *)__src[1] = v24;
            v28 = v27 + 4;
          }
          __src[1] = v28;
          if (v28 >= v26)
          {
            v38 = (char *)__src[0];
            v39 = (v28 - (char *)__src[0]) >> 2;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62)
LABEL_92:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v41 = v26 - (char *)__src[0];
            if (v41 >> 1 > v40)
              v40 = v41 >> 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
              v42 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v70, v42);
              v38 = (char *)__src[0];
              v28 = (char *)__src[1];
            }
            else
            {
              v43 = 0;
            }
            v44 = &v43[4 * v39];
            *(_DWORD *)v44 = v24;
            v37 = v44 + 4;
            while (v28 != v38)
            {
              v45 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *((_DWORD *)v44 - 1) = v45;
              v44 -= 4;
            }
            __src[0] = v44;
            __src[1] = v37;
            v70 = &v43[4 * v42];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_DWORD *)v28 = v24;
            v37 = v28 + 4;
          }
          __src[1] = v37;
          LODWORD(v62[0]) = 0;
          std::vector<float>::vector(&__p, v20, v62);
          *((_DWORD *)__p + v24) = 1065353216;
          std::vector<std::vector<float>>::push_back[abi:ne180100](a1 + 7, (uint64_t)&__p);
          v71 = 0;
          std::vector<float>::vector(v62, v20, &v71);
          *((_DWORD *)v62[0] + v24) = 1065353216;
          std::vector<std::vector<float>>::push_back[abi:ne180100](a1 + 7, (uint64_t)v62);
          if (v62[0])
          {
            v62[1] = v62[0];
            operator delete(v62[0]);
          }
          if (__p)
          {
            v68 = (float32x2_t *)__p;
            operator delete(__p);
          }
          if (++a4 == v21)
          {
            v46 = (char *)__src[0];
            goto LABEL_68;
          }
        }
      }
    }
    v46 = 0;
LABEL_68:
    if (__src == a1)
    {
LABEL_88:
      if (!v46)
        return;
      __src[1] = v46;
      v18 = v46;
      goto LABEL_90;
    }
    v49 = (char *)__src[1];
    v50 = (char *)__src[1] - (char *)v46;
    v51 = ((char *)__src[1] - (char *)v46) >> 2;
    v52 = (uint64_t)a1[2];
    v53 = (char *)*a1;
    if (v51 <= (v52 - (uint64_t)*a1) >> 2)
    {
      v56 = (char *)a1[1];
      v57 = (v56 - v53) >> 2;
      if (v57 < v51)
      {
        v58 = &v46[4 * v57];
        if (v56 != v53)
        {
          memmove(*a1, v46, v56 - v53);
          v53 = (char *)a1[1];
        }
        v50 = v49 - v58;
        if (v49 == v58)
          goto LABEL_87;
        v59 = v53;
        v60 = v58;
        goto LABEL_86;
      }
    }
    else
    {
      if (v53)
      {
        a1[1] = v53;
        operator delete(v53);
        v52 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if ((v50 & 0x8000000000000000) != 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v54 = v52 >> 1;
      if (v52 >> 1 <= v51)
        v54 = v51;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
        v55 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      std::vector<float>::__vallocate[abi:ne180100](a1, v55);
      v53 = (char *)a1[1];
    }
    if (v49 == v46)
    {
LABEL_87:
      a1[1] = &v53[v50];
      v46 = (char *)__src[0];
      goto LABEL_88;
    }
    v59 = v53;
    v60 = v46;
LABEL_86:
    memmove(v59, v60, v50);
    goto LABEL_87;
  }
  if (v9 == 1)
  {
    InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(this, (const InputTranscoder::Path *)a1[6], (uint64_t)__src);
    v47 = (char *)a1[3];
    if (v47)
    {
      a1[4] = v47;
      operator delete(v47);
      a1[3] = 0;
      a1[4] = 0;
      a1[5] = 0;
    }
    *(_OWORD *)(a1 + 3) = *(_OWORD *)__src;
    a1[5] = v70;
  }
  else if (v9 == 2)
  {
    v10 = *(int *)(a3 + 372);
    (**(void (***)(void **__return_ptr, InputTranscoder::PathKeyLayoutProcessor *, char *, _QWORD, uint64_t, _QWORD, uint64_t))this)(__src, this, (char *)a1[6], 0, v10, *(unsigned __int8 *)(a3 + 361), v10);
    v11 = (unsigned int *)__src[0];
    v12 = (unsigned int *)__src[1];
    if (__src[0] != __src[1])
    {
      v13 = v10 + 5;
      v14 = a1 + 7;
      do
      {
        v15 = *v11;
        v16 = v11[6];
        v61 = *(float64x2_t *)(v11 + 2);
        LODWORD(v62[0]) = 0;
        std::vector<float>::vector(&__p, v13, v62);
        v17 = __p;
        *((_DWORD *)__p + v15) = 1065353216;
        v17[v16] = 1065353216;
        v68[-1] = vcvt_f32_f64(v61);
        std::vector<std::vector<float>>::push_back[abi:ne180100](v14, (uint64_t)&__p);
        if (__p)
        {
          v68 = (float32x2_t *)__p;
          operator delete(__p);
        }
        v11 += 8;
      }
      while (v11 != v12);
      v11 = (unsigned int *)__src[0];
    }
    if (v11)
    {
      __src[1] = v11;
      v18 = v11;
LABEL_90:
      operator delete(v18);
    }
  }
}

void sub_228519E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::push_back[abi:ne180100](_QWORD *result, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int64x2_t v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  _QWORD *v21;

  v3 = (char **)result;
  v4 = result[2];
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *result) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *result) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    v21 = result + 2;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = 3 * v8;
    v11 = (char *)operator new(24 * v8);
    v12 = &v11[24 * v7];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v12 + 24;
    v14 = *v3;
    v13 = v3[1];
    if (v13 == *v3)
    {
      v16 = vdupq_n_s64((unint64_t)v13);
    }
    else
    {
      do
      {
        *((_QWORD *)v12 - 3) = 0;
        *((_QWORD *)v12 - 2) = 0;
        v12 -= 24;
        *((_QWORD *)v12 + 2) = 0;
        v15 = *(_OWORD *)(v13 - 24);
        v13 -= 24;
        *(_OWORD *)v12 = v15;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = 0;
      }
      while (v13 != v14);
      v16 = *(int64x2_t *)v3;
    }
    *v3 = v12;
    v3[1] = v6;
    v19 = v16;
    v17 = v3[2];
    v3[2] = &v11[8 * v10];
    v20 = v17;
    v18 = v16.i64[0];
    result = (_QWORD *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = (char *)(v5 + 3);
  }
  v3[1] = v6;
  return result;
}

void InputTranscoder::InputProcessor::flattenedFeatures(InputTranscoder::InputProcessor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char **v5;
  char **v6;

  v4 = ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3)
     * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) - **((_QWORD **)this + 7)) >> 2);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<float>::reserve((void **)a2, 0xAAAAAAAAAAAAAAABLL * v4);
  v6 = (char **)*((_QWORD *)this + 7);
  v5 = (char **)*((_QWORD *)this + 8);
  while (v6 != v5)
  {
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((void **)a2, *(_QWORD *)(a2 + 8), *v6, v6[1], (v6[1] - *v6) >> 2);
    v6 += 3;
  }
}

void sub_22851A0AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_22851A1C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(void **a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  int *v26;
  char *v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  char *v38;
  _BYTE *v39;
  uint64_t v40;
  void *v41;

  v5 = (char *)*a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = (char *)*a1 + (v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (a5 < 1)
    return v7;
  v9 = __src;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if (a5 > (uint64_t)&v13[-v14] >> 2)
  {
    v15 = a5 + ((uint64_t)(v14 - (_QWORD)v5) >> 2);
    if (v15 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v16 = v6 >> 2;
    v17 = v12 - v5;
    v18 = v17 >> 1;
    if (v17 >> 1 <= v15)
      v18 = v15;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v11, v19);
    else
      v20 = 0;
    v29 = &v20[4 * v16];
    v30 = &v29[4 * a5];
    v31 = 4 * a5;
    v32 = v29;
    do
    {
      v33 = *(_DWORD *)v9;
      v9 += 4;
      *(_DWORD *)v32 = v33;
      v32 += 4;
      v31 -= 4;
    }
    while (v31);
    v34 = (char *)*a1;
    v35 = v29;
    if (*a1 != v7)
    {
      v36 = v7;
      v35 = v29;
      do
      {
        v37 = *((_DWORD *)v36 - 1);
        v36 -= 4;
        *((_DWORD *)v35 - 1) = v37;
        v35 -= 4;
      }
      while (v36 != v34);
    }
    v38 = &v20[4 * v19];
    v39 = a1[1];
    v40 = v39 - v7;
    if (v39 != v7)
      memmove(v30, v7, v39 - v7);
    v41 = *a1;
    *a1 = v35;
    a1[1] = &v30[v40];
    a1[2] = v38;
    if (v41)
      operator delete(v41);
    return v29;
  }
  v21 = (uint64_t)(v14 - (_QWORD)v7) >> 2;
  if (v21 >= a5)
  {
    v22 = &__src[4 * a5];
    v24 = *(char **)(v11 - 8);
LABEL_17:
    v25 = &v7[4 * a5];
    v26 = (int *)&v24[-4 * a5];
    v27 = v24;
    if ((unint64_t)v26 < v14)
    {
      v27 = v24;
      do
      {
        v28 = *v26++;
        *(_DWORD *)v27 = v28;
        v27 += 4;
      }
      while ((unint64_t)v26 < v14);
    }
    a1[1] = v27;
    if (v24 != v25)
      memmove(&v24[-4 * ((v24 - v25) >> 2)], v7, v24 - v25);
    if (v22 != v9)
      memmove(v7, v9, v22 - v9);
    return v7;
  }
  v22 = &__src[4 * v21];
  v23 = a4 - v22;
  if (a4 != v22)
    memmove(*(void **)(v11 - 8), &__src[4 * v21], a4 - v22);
  v24 = (char *)(v14 + v23);
  a1[1] = (void *)(v14 + v23);
  if ((uint64_t)(v14 - (_QWORD)v7) >= 1)
    goto LABEL_17;
  return v7;
}

double ITTouchTranscoderSessionSetLinguisticContext(uint64_t a1, const __CFString *a2)
{
  return InputTranscoder::TouchTranscoderSessionImpl::setLinguisticContext(*(InputTranscoder::TouchTranscoderSessionImpl **)(a1 + 24), a2);
}

void ITTouchTranscoderSessionSetPrefix(uint64_t a1, const __CFString *a2)
{
  InputTranscoder::TouchTranscoderSessionImpl::setPrefix(*(std::string **)(a1 + 24), a2);
}

void ITTouchTranscoderSessionAddEvent(uint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  InputTranscoder::TouchTranscoderSessionImpl::addEventWithKeyInfo(*(_QWORD *)(a1 + 24), a2, (uint64_t)&ITKeyInfoNull, a3, a4, a5, a6);
}

void ITTouchTranscoderSessionAddEventWithTouchKeyInfo(uint64_t a1, unint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  InputTranscoder::TouchTranscoderSessionImpl::addEventWithKeyInfo(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7);
}

void ITTouchTranscoderSessionEnumerateCandidates(uint64_t a1, uint64_t a2)
{
  os_signpost_id_t v3;
  NSObject *v4;
  const __CFDictionary *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[8];
  uint64_t *v13;
  uint8_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v3 = os_signpost_id_generate((os_log_t)_nlpSignpostLog::log);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "ITTouchTranscoderSessionEnumerateCandidates", (const char *)&unk_228544982, buf, 2u);
    }
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)buf = &off_24F1109E0;
  v13 = &v11;
  v14 = buf;
  InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidates(v6, Mutable, (uint64_t)buf);
  v8 = v14;
  if (v14 == buf)
  {
    v9 = 4;
    v8 = buf;
  }
  else
  {
    if (!v14)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)v8 + 8 * v9))(v8, v7);
LABEL_13:
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v10, OS_SIGNPOST_INTERVAL_END, v3, "ITTouchTranscoderSessionEnumerateCandidates", (const char *)&unk_228544982, buf, 2u);
    }
  }
  if (Mutable)
    CFRelease(Mutable);
}

void sub_22851A774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ITTouchTranscoderSessionEnumerateCandidatesWithOptions(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  os_signpost_id_t v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[8];
  uint64_t *v13;
  uint8_t *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = a3;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v5 = os_signpost_id_generate((os_log_t)_nlpSignpostLog::log);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v6 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "ITTouchTranscoderSessionEnumerateCandidates", (const char *)&unk_228544982, buf, 2u);
    }
  }
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)buf = &off_24F110A70;
  v13 = &v11;
  v14 = buf;
  InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidates(v7, a2, (uint64_t)buf);
  v8 = v14;
  if (v14 == buf)
  {
    v9 = 4;
    v8 = buf;
  }
  else
  {
    if (!v14)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_13:
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v10, OS_SIGNPOST_INTERVAL_END, v5, "ITTouchTranscoderSessionEnumerateCandidates", (const char *)&unk_228544982, buf, 2u);
    }
  }
}

void sub_22851A9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch(uint64_t a1, uint64_t a2)
{
  os_signpost_id_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[8];
  uint64_t *v11;
  uint8_t *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v3 = os_signpost_id_generate((os_log_t)_nlpSignpostLog::log);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v4 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch", (const char *)&unk_228544982, buf, 2u);
    }
  }
  v5 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)buf = &off_24F110AF0;
  v11 = &v9;
  v12 = buf;
  InputTranscoder::TouchTranscoderSessionImpl::enumerateKeyCandidatesForLastTouch(v5, (uint64_t)buf);
  v6 = v12;
  if (v12 == buf)
  {
    v7 = 4;
    v6 = buf;
  }
  else
  {
    if (!v12)
      goto LABEL_13;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_13:
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v8, OS_SIGNPOST_INTERVAL_END, v3, "ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch", (const char *)&unk_228544982, buf, 2u);
    }
  }
}

void sub_22851ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ITTouchTranscoderSessionSetTextAcceptedFromUI(uint64_t a1, const __CFString *a2)
{
  return InputTranscoder::TouchTranscoderSessionImpl::textAcceptedFromUI(*(InputTranscoder::TouchTranscoderSessionImpl **)(a1 + 24), a2);
}

void std::__function::__func<ITTouchTranscoderSessionEnumerateCandidates::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidates::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<ITTouchTranscoderSessionEnumerateCandidates::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidates::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1109E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ITTouchTranscoderSessionEnumerateCandidates::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidates::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1109E0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<ITTouchTranscoderSessionEnumerateCandidates::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidates::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *Instance;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  unsigned __int8 v10;

  v3 = *a2;
  *a2 = 0;
  v10 = 0;
  v9[0] = 0;
  CFAllocatorGetDefault();
  _CFGetTypeID_Candidate();
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v5 = Instance[3];
  Instance[3] = v3;
  if (v5)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)(Instance + 3), v5);
  v9[1] = 0;
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  v6 = v10;
  CFRelease(Instance);
  v7 = v9[0];
  v9[0] = 0;
  if (v7)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)v9, v7);
  return v6 != 0;
}

void sub_22851AD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const void *v11;
  uint64_t v13;

  CFRelease(v11);
  v13 = a10;
  a10 = 0;
  if (v13)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)&a10, v13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ITTouchTranscoderSessionEnumerateCandidates::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidates::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ITTouchTranscoderSessionEnumerateCandidates::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidates::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::target_type()
{
}

void std::__function::__func<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F110A70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F110A70;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *Instance;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  unsigned __int8 v10;

  v3 = *a2;
  *a2 = 0;
  v10 = 0;
  v9[0] = 0;
  CFAllocatorGetDefault();
  _CFGetTypeID_Candidate();
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v5 = Instance[3];
  Instance[3] = v3;
  if (v5)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)(Instance + 3), v5);
  v9[1] = 0;
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  v6 = v10;
  CFRelease(Instance);
  v7 = v9[0];
  v9[0] = 0;
  if (v7)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)v9, v7);
  return v6 != 0;
}

void sub_22851AEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const void *v11;
  uint64_t v13;

  CFRelease(v11);
  v13 = a10;
  a10 = 0;
  if (v13)
    std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)&a10, v13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0,std::allocator<ITTouchTranscoderSessionEnumerateCandidatesWithOptions::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)>::target_type()
{
}

void std::__function::__func<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0,std::allocator<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::KeyCandidateImpl>)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0,std::allocator<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::KeyCandidateImpl>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F110AF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0,std::allocator<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::KeyCandidateImpl>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F110AF0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0,std::allocator<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::KeyCandidateImpl>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *Instance;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  unsigned __int8 v10;

  v3 = *a2;
  *a2 = 0;
  v10 = 0;
  v9[0] = 0;
  CFAllocatorGetDefault();
  _CFGetTypeID_KeyCandidate();
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v5 = Instance[3];
  Instance[3] = v3;
  if (v5)
    std::default_delete<InputTranscoder::KeyCandidateImpl>::operator()[abi:ne180100]((uint64_t)(Instance + 3), v5);
  v9[1] = 0;
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  v6 = v10;
  CFRelease(Instance);
  v7 = v9[0];
  v9[0] = 0;
  if (v7)
    std::default_delete<InputTranscoder::KeyCandidateImpl>::operator()[abi:ne180100]((uint64_t)v9, v7);
  return v6 != 0;
}

void sub_22851B078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  const void *v11;
  uint64_t v13;

  CFRelease(v11);
  v13 = a10;
  a10 = 0;
  if (v13)
    std::default_delete<InputTranscoder::KeyCandidateImpl>::operator()[abi:ne180100]((uint64_t)&a10, v13);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0,std::allocator<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::KeyCandidateImpl>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0,std::allocator<ITTouchTranscoderSessionEnumerateKeyCandidatesForLastTouch::$_0>,BOOL ()(std::unique_ptr<InputTranscoder::KeyCandidateImpl>)>::target_type()
{
}

void InputTranscoder::CRNNRecognizer::recognize(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __CFDictionary *v16;
  uint64_t v17;
  __CFDictionary *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)a1[6];
  v7 = *v5;
  v6 = v5[1];
  v19 = 0;
  v8 = a1 + 3;
  v18 = InputTranscoder::InputDescriptorCreator::create((uint64_t)(a1[4] - a1[3]) >> 2, 2uLL, 5, 1, 1);
  v9 = operator new(0x20uLL);
  *v9 = &off_24F110BC0;
  v9[1] = &v19;
  v9[2] = v8;
  v9[3] = &v18;
  v21 = v9;
  v10 = std::__function::__func<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::operator()((uint64_t)v9, *(_QWORD **)(a2 + 8));
  v12 = v11;
  v13 = (v6 - v7) >> 6;
  v14 = v21;
  if (v21 == v20)
  {
    v15 = 4;
    v14 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  *a3 = v10;
  a3[1] = v12;
  v16 = v18;
  v17 = v19;
  a3[2] = v13;
  a3[3] = v17;
  if (v16)
    CFRelease(v16);
}

void sub_22851B220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::CRNNRecognizer::~CRNNRecognizer(InputTranscoder::CRNNRecognizer *this)
{
  JUMPOUT(0x22E2B18DCLL);
}

void std::__function::__func<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F110BC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F110BC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t OutputDimension;
  uint64_t v5;

  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  v5 = *(_QWORD *)(a1 + 16);
  **(_QWORD **)(a1 + 8) = OutputDimension;
  return InputTranscoder::MontrealModel::recognize(a2, *(char **)v5, (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
}

uint64_t std::__function::__func<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::CRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::target_type()
{
}

void InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor *this@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef cf;
  uint64_t v16;
  uint64_t v17;
  void *__p[3];
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  InputTranscoder::InputProcessor::flattenedFeatures(this, (uint64_t)__p);
  v6 = (_QWORD *)*((_QWORD *)this + 7);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 8) - (_QWORD)v6) >> 3);
  v17 = 0;
  v16 = (uint64_t)(v6[1] - *v6) >> 2;
  cf = InputTranscoder::InputDescriptorCreator::create((InputTranscoder::InputDescriptorCreator *)v7, v16);
  v8 = operator new(0x28uLL);
  *v8 = &off_24F110C80;
  v8[1] = &v17;
  v8[2] = __p;
  v8[3] = &cf;
  v8[4] = &v16;
  v20 = v8;
  v9 = std::__function::__func<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::operator()((uint64_t)v8, *(_QWORD **)(a2 + 8));
  v11 = v10;
  v12 = v20;
  if (v20 == v19)
  {
    v13 = 4;
    v12 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  *a3 = v9;
  a3[1] = v11;
  v14 = v17;
  a3[2] = v7;
  a3[3] = v14;
  if (cf)
    CFRelease(cf);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_22851B4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::LRNNRecognizer::~LRNNRecognizer(InputTranscoder::LRNNRecognizer *this)
{
  JUMPOUT(0x22E2B18DCLL);
}

void std::__function::__func<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F110C80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F110C80;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t OutputDimension;
  uint64_t v5;

  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  v5 = *(_QWORD *)(a1 + 16);
  **(_QWORD **)(a1 + 8) = OutputDimension;
  return InputTranscoder::MontrealModel::recognize(a2, *(char **)v5, (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
}

uint64_t std::__function::__func<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0,std::allocator<InputTranscoder::LRNNRecognizer::recognize(InputTranscoder::InputProcessor const&,InputTranscoder::TranscoderMediator &)::$_0>,std::span<float const,18446744073709551615ul> ()(InputTranscoder::MontrealModel &)>::target_type()
{
}

uint64_t ITCandidateGetString(uint64_t a1)
{
  uint64_t result;
  const void **v3;
  CFStringRef CFStringFromString;

  v3 = (const void **)(a1 + 32);
  result = *(_QWORD *)(a1 + 32);
  if (!result)
  {
    CFStringFromString = nlp::createCFStringFromString(*(_QWORD *)(a1 + 24));
    nlp::CFScopedPtr<__CFString const*>::reset(v3, CFStringFromString);
    return *(_QWORD *)(a1 + 32);
  }
  return result;
}

uint64_t ITCandidateGetStrokedPath(uint64_t a1)
{
  uint64_t result;
  const void **v3;
  CFStringRef CFStringFromString;

  v3 = (const void **)(a1 + 40);
  result = *(_QWORD *)(a1 + 40);
  if (!result)
  {
    CFStringFromString = nlp::createCFStringFromString(*(_QWORD *)(a1 + 24) + 24);
    nlp::CFScopedPtr<__CFString const*>::reset(v3, CFStringFromString);
    return *(_QWORD *)(a1 + 40);
  }
  return result;
}

float ITCandidateGetScore(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 24) + 48);
}

uint64_t ITCandidateIsValidWord(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 81);
}

uint64_t ITCandidateIsMultiWord(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 82);
}

uint64_t ITCandidateGetAutocorrectionOperations(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 84);
}

uint64_t ITCandidateIsCompletion(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 80);
}

uint64_t ITCandidateGetSources()
{
  return 0;
}

uint64_t ITCandidateGetUnshiftMask(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 92);
}

uint64_t ITCandidateFoundOnlyInDynamicLexicon(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 88);
}

uint64_t ITCandidateEnumerateTokenIDs(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *i;
  unsigned int v6;

  v2 = *(_QWORD *)(result + 24);
  v3 = *(unsigned int **)(v2 + 56);
  for (i = *(unsigned int **)(v2 + 64); v3 != i; result = (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, v6))v6 = *v3++;
  return result;
}

CFStringRef ITKeyCandidateCreateString(uint64_t a1)
{
  return nlp::createCFStringFromString(*(_QWORD *)(a1 + 24));
}

float ITKeyCandidateGetScore(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 24) + 24);
}

CFStringRef ITCandidateCopyPrefix(uint64_t a1)
{
  return nlp::createCFStringFromString(*(_QWORD *)(a1 + 24) + 96);
}

uint64_t ITTouchTranscoderSupportsLocale(const void *a1)
{
  return supportsLocaleAndLayout(a1, 0, 0);
}

uint64_t supportsLocaleAndLayout(const void *a1, const __CFString *a2, uint64_t a3)
{
  __CFDictionary *Mutable;
  uint64_t v7;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionaryAddValue(Mutable, CFSTR("locale"), a1);
  v7 = isTranscoderConfigurationSupported(a2, a3, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v7;
}

void sub_22851B890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t ITTouchTranscoderSupportsLocaleAndLayout(const void *a1, const __CFString *a2)
{
  return supportsLocaleAndLayout(a1, a2, 0);
}

uint64_t ITTouchTranscoderSupportsConfiguration(const __CFDictionary *a1)
{
  const __CFString *Optional;
  _BOOL8 TypingModeForTranscoder;

  Optional = (const __CFString *)InputTranscoder::getOptionalCFType<__CFString const*>(a1, CFSTR("keyboardLayoutName"), &stru_24F112198);
  TypingModeForTranscoder = extractTypingModeForTranscoder(a1);
  return isTranscoderConfigurationSupported(Optional, TypingModeForTranscoder, a1);
}

BOOL extractTypingModeForTranscoder(const __CFDictionary *a1)
{
  const __CFString *Optional;

  Optional = (const __CFString *)InputTranscoder::getOptionalCFType<__CFString const*>(a1, CFSTR("transcoderInstance"), CFSTR("continuousPath"));
  return CFStringCompare(Optional, CFSTR("tapTyping"), 0) == kCFCompareEqualTo;
}

uint64_t isTranscoderConfigurationSupported(const __CFString *a1, uint64_t a2, __CFDictionary *a3)
{
  InputTranscoder *ResourceBundle;
  std::string::size_type v7;
  std::string::size_type size;
  unsigned __int8 v9;
  unint64_t v10;
  void **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *__p[2];
  unsigned __int8 v20;
  std::string v21;
  void *v22[2];
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  unsigned __int8 v26;
  __int128 *v27;
  __int128 *v28;
  InputTranscoder *v29;

  ResourceBundle = createResourceBundle(a3);
  v29 = ResourceBundle;
  InputTranscoder::generateConfiguration<InputTranscoder::TranscoderConfiguration>(a3, ResourceBundle, a2, (InputTranscoder::TranscoderConfiguration *)v22);
  if (v24)
  {
    memset(&v21, 0, sizeof(v21));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, v27, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
    if (a1)
    {
      nlp::getUTF8StringFromCFString(a1, __p);
      size = v21.__r_.__value_.__l.__size_;
      v7 = v21.__r_.__value_.__r.__words[0];
      v9 = v20;
      if (v21.__r_.__value_.__r.__words[0] != v21.__r_.__value_.__l.__size_)
      {
        if ((v20 & 0x80u) == 0)
          v10 = v20;
        else
          v10 = (unint64_t)__p[1];
        if ((v20 & 0x80u) == 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        do
        {
          v12 = *(unsigned __int8 *)(v7 + 23);
          if ((v12 & 0x80u) == 0)
            v13 = (void *)*(unsigned __int8 *)(v7 + 23);
          else
            v13 = *(void **)(v7 + 8);
          if (v13 == (void *)v10)
          {
            if ((v12 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v7, v11, *(_QWORD *)(v7 + 8)))
                goto LABEL_23;
            }
            else
            {
              if (!*(_BYTE *)(v7 + 23))
                goto LABEL_23;
              v14 = 0;
              while (*(unsigned __int8 *)(v7 + v14) == *((unsigned __int8 *)v11 + v14))
              {
                if (v12 == ++v14)
                  goto LABEL_23;
              }
            }
          }
          v7 += 24;
        }
        while (v7 != size);
        v7 = size;
      }
LABEL_23:
      LODWORD(v15) = v7 != size;
      if ((v9 & 0x80) != 0)
        operator delete(__p[0]);
    }
    else
    {
      LODWORD(v15) = 1;
    }
    v16 = v26;
    if ((v26 & 0x80u) != 0)
      v16 = v25;
    if (v16)
    {
      v17 = v23;
      if ((v23 & 0x80u) != 0)
        v17 = (unint64_t)v22[1];
      if (v17)
        v15 = v15;
      else
        v15 = 0;
    }
    else
    {
      v15 = 0;
    }
    __p[0] = &v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    v15 = 0;
  }
  InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration(v22);
  CFRelease(ResourceBundle);
  return v15;
}

void sub_22851BB00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  *(_QWORD *)(v6 - 72) = va;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 72));
  InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration((void **)va1);
  nlp::CFScopedPtr<__CFBundle *>::reset((const void **)(v6 - 80), 0);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x22851BAE0);
  }
  _Unwind_Resume(a1);
}

_QWORD *ITTouchTranscoderCreateWithKeyboardLayout(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 TypingModeForTranscoder;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (__cdecl *v15)(std::__shared_weak_count *__hidden);
  std::string *v16;
  std::__shared_weak_count_vtbl *v17;
  _QWORD *Instance;
  InputTranscoder::TranscoderConfiguration *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31;
  void **v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  os_signpost_id_t v37;
  NSObject *v38;
  NSObject *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *exception;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  __int128 v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  void *v60[4];
  uint64_t v61;
  _QWORD v62[2];
  unsigned __int8 v63;
  char v64;
  _QWORD v65[2];
  char v66;
  uint64_t v67;
  uint64_t v68;
  InputTranscoder *ResourceBundle;
  void **v70;
  _QWORD v71[2];
  _QWORD *v72;
  std::__shared_weak_count *v73;
  uint8_t buf[16];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v6 = mach_continuous_time();
  ResourceBundle = createResourceBundle(a1);
  TypingModeForTranscoder = extractTypingModeForTranscoder(a1);
  InputTranscoder::generateConfiguration<InputTranscoder::TranscoderConfiguration>(a1, ResourceBundle, TypingModeForTranscoder, (InputTranscoder::TranscoderConfiguration *)v60);
  if (!v64)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Transcoder's configuration [common.useNeuralEngineKey] disallows creation of transcoder object");
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)buf);
  }
  v8 = (std::__shared_weak_count *)operator new(0x90uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24F110D38;
  InputTranscoder::PlistBiMap<std::string,unsigned int>::PlistBiMap((uint64_t)&v8[1], (uint64_t)&v67);
  v52 = v6;
  v58 = &v8[1].__vftable;
  v59 = v8;
  v10 = (std::__shared_weak_count *)operator new(0x90uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24F110D88;
  InputTranscoder::PlistBiMap<unsigned int,std::string>::PlistBiMap((uint64_t)&v10[1], (uint64_t)&v61);
  v56 = &v10[1].__vftable;
  v57 = v10;
  v12 = v63;
  if ((v63 & 0x80u) != 0)
    v12 = v62[1];
  if (v12)
  {
    std::allocate_shared[abi:ne180100]<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,unsigned int> const>,std::string const&,void>((uint64_t)v62, buf);
    v55 = *(_OWORD *)buf;
  }
  else
  {
    v55 = 0uLL;
  }
  v53 = &v10[1].__vftable;
  v54 = v10;
  do
    v13 = __ldxr(v11);
  while (__stxr(v13 + 1, v11));
  v14 = operator new();
  InputTranscoder::KeyboardLayoutImpl::KeyboardLayoutImpl(v14, a2, a3, (uint64_t)&v68);
  v15 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new();
  *(_QWORD *)v15 = InputTranscoder::createMRLModel((uint64_t)v60);
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *((_QWORD *)v15 + 3) = 0;
  v16 = (std::string *)operator new();
  InputTranscoder::CTCDecoder::CTCDecoder(v16, (uint64_t)v65, (std::string::size_type *)&v53, (uint64_t)&v55);
  *(_QWORD *)buf = v16;
  v17 = (std::__shared_weak_count_vtbl *)operator new();
  v17->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
  v17->~__shared_weak_count_0 = v15;
  v17->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v16;
  CFAllocatorGetDefault();
  _CFGetTypeID_TouchTranscoder();
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v19 = (InputTranscoder::TranscoderConfiguration *)operator new();
  *(_QWORD *)buf = v8 + 1;
  *(_QWORD *)&buf[8] = v8;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v72 = &v10[1].__vftable;
  v73 = v10;
  do
    v21 = __ldxr(v11);
  while (__stxr(v21 + 1, v11));
  v71[0] = v17;
  v22 = (std::__shared_weak_count *)operator new();
  v22->__shared_owners_ = 0;
  v23 = (unint64_t *)&v22->__shared_owners_;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24F110DD8;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = v17;
  v71[1] = v22;
  InputTranscoder::TouchTranscoderImpl::TouchTranscoderImpl(v19, (const InputTranscoder::TranscoderConfiguration *)v60, buf, &v72, v71);
  v70 = (void **)v19;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  v25 = v73;
  if (v73)
  {
    v26 = (unint64_t *)&v73->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (void **)Instance[3];
  v32 = v70;
  v70 = 0;
  Instance[3] = v32;
  if (v31)
  {
    std::default_delete<InputTranscoder::TouchTranscoderImpl>::operator()[abi:ne180100]((uint64_t)(Instance + 3), v31);
    v33 = v70;
    v70 = 0;
    if (v33)
      std::default_delete<InputTranscoder::TouchTranscoderImpl>::operator()[abi:ne180100]((uint64_t)&v70, v33);
  }
  v34 = v54;
  if (v54)
  {
    v35 = (unint64_t *)&v54->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
  {
    v37 = os_signpost_id_make_with_pointer((os_log_t)_nlpSignpostLog::log, Instance);
    if (_nlpSignpostLog::token != -1)
      dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
    if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v38 = _nlpSignpostLog::log;
      if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log)
        && (*(_DWORD *)buf = 134217984,
            *(_QWORD *)&buf[4] = v52,
            _os_signpost_emit_with_name_impl(&dword_228515000, v38, OS_SIGNPOST_INTERVAL_BEGIN, v37, "ITTouchTranscoderCreate", "%{signpost.description:begin_time}llu", buf, 0xCu), _nlpSignpostLog::token != -1))
      {
        dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
      }
      else if (v37 - 1 > 0xFFFFFFFFFFFFFFFDLL)
      {
        goto LABEL_48;
      }
      v39 = _nlpSignpostLog::log;
      if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
      {
        v40 = v65;
        if (v66 < 0)
          v40 = (_QWORD *)v65[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v40;
        _os_signpost_emit_with_name_impl(&dword_228515000, v39, OS_SIGNPOST_INTERVAL_END, v37, "ITTouchTranscoderCreate", "%s", buf, 0xCu);
      }
    }
  }
LABEL_48:
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v57;
  if (v57)
  {
    v45 = (unint64_t *)&v57->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v59;
  if (v59)
  {
    v48 = (unint64_t *)&v59->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration(v60);
  if (ResourceBundle)
    CFRelease(ResourceBundle);
  return Instance;
}

void sub_22851C1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFErrorRef *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  void *v28;
  uint64_t v29;
  void *v32;
  char *v33;

  if (*(char *)(v29 - 105) < 0)
  {
    operator delete(*(void **)(v29 - 128));
    if ((v27 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v27)
  {
LABEL_7:
    InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration(&__p);
    nlp::CFScopedPtr<__CFBundle *>::reset((const void **)(v29 - 176), 0);
    if (a2 == 1)
    {
      v32 = __cxa_begin_catch(a1);
      if (a10)
      {
        v33 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
        std::string::basic_string[abi:ne180100]<0>(&__p, v33);
        *a10 = InputTranscoder::createErrorWithMessage((uint64_t)&__p);
        if (a27 < 0)
          operator delete(__p);
      }
      __cxa_end_catch();
      JUMPOUT(0x22851C114);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v28);
  goto LABEL_7;
}

void sub_22851C458(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22851C22CLL);
}

void sub_22851C480()
{
  JUMPOUT(0x22851C22CLL);
}

CFBundleRef createResourceBundle(const __CFDictionary *a1)
{
  const __CFDictionary *v2;
  const void *Value;
  CFTypeID v4;
  CFLocaleRef v5;
  CFBundleRef v6;
  _QWORD *exception;
  _QWORD *v9;
  _QWORD *v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  CFTypeRef cf;
  std::string v18;
  std::string buf;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v13 = &v12;
  v14 = 0x3002000000;
  v15 = __Block_byref_object_copy_;
  v16 = __Block_byref_object_dispose_;
  if (CFDictionaryContainsKey(a1, CFSTR("bundleURL")))
  {
    Value = CFDictionaryGetValue(a1, CFSTR("bundleURL"));
    v4 = CFGetTypeID(Value);
    if (v4 != CFURLGetTypeID())
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v18, "Malformed options dictionary: bundle URL must be a CFURLRef");
      nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v18);
    }
    cf = 0;
    nlp::CFScopedPtr<__CFURL const*>::acquire(&cf, Value);
  }
  else
  {
    cf = 0;
  }
  if (v13[5])
  {
    if (_nlpDefaultLog::token != -1)
      dispatch_once(&_nlpDefaultLog::token, &__block_literal_global_2);
    if (os_log_type_enabled((os_log_t)_nlpDefaultLog::log, OS_LOG_TYPE_DEBUG))
      nlp::getFileSystemRepresentationFromCFURL((nlp *)v13[5], &v18);
  }
  else
  {
    v5 = InputTranscoder::copyLocale(a1, v2);
    if (!v5)
    {
      v9 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v18, "Malformed options dictionary - missing or invalid locale");
      nlp::ResourceCreationException::ResourceCreationException(v9, (__int128 *)&v18);
    }
    InputTranscoder::enumerateLDAssets();
    if (!v13[5])
    {
      v10 = __cxa_allocate_exception(0x20uLL);
      v11 = (const __CFString *)MEMORY[0x22E2B13FC](v5);
      nlp::getUTF8StringFromCFString(v11, &buf);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to locate bundle for locale=", &buf, &v18);
      nlp::ResourceCreationException::ResourceCreationException(v10, (__int128 *)&v18);
    }
    CFRelease(v5);
  }
  v6 = CFBundleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFURLRef)v13[5]);
  if (!v6)
  {
    __cxa_allocate_exception(0x20uLL);
    nlp::getFileSystemRepresentationFromCFURL((nlp *)v13[5], &buf);
  }
  _Block_object_dispose(&v12, 8);
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_22851C814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  void *v8;
  int v9;
  uint64_t v10;
  const void *v12;
  va_list va;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, const void *);
  if (*(char *)(v10 - 65) < 0)
    operator delete(*(void **)(v10 - 88));
  if (*(char *)(v10 - 41) < 0)
  {
    operator delete(*(void **)(v10 - 64));
    if ((v9 & 1) == 0)
    {
LABEL_8:
      nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
      _Block_object_dispose(va1, 8);
      nlp::CFScopedPtr<__CFURL const*>::reset(v7, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v9)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v8);
  goto LABEL_8;
}

_QWORD *ITTouchTranscoderAddLexicon(uint64_t a1, const void *a2)
{
  return InputTranscoder::TouchTranscoderImpl::addLexicon(*(_QWORD *)(a1 + 24), a2);
}

_QWORD *ITTouchTranscoderRemoveLexicon(uint64_t a1, const void *a2)
{
  return InputTranscoder::TouchTranscoderImpl::removeLexicon(*(_QWORD *)(a1 + 24), a2);
}

uint64_t ITTouchTranscoderCreateSession(uint64_t a1)
{
  uint64_t Instance;
  void **v3;

  InputTranscoder::TouchTranscoderImpl::makeSession(*(InputTranscoder::TouchTranscoderImpl **)(a1 + 24), (uint64_t *)&v3);
  CFAllocatorGetDefault();
  _CFGetTypeID_TouchTranscoderSession();
  Instance = _CFRuntimeCreateInstance();
  std::unique_ptr<InputTranscoder::TouchTranscoderSessionImpl>::reset[abi:ne180100]((void ***)(Instance + 24), v3);
  return Instance;
}

void sub_22851C9E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<InputTranscoder::TouchTranscoderSessionImpl>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t ITTouchTranscoderUpdateKeyboardLayout(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = operator new();
  InputTranscoder::KeyboardLayoutImpl::KeyboardLayoutImpl(v6, a2, a3, v5 + 312);
  v7 = *(uint64_t **)(v5 + 472);
  result = *v7;
  *v7 = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22851CA90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B18DC](v1, 0x10E1C409ADAC2BBLL);
  _Unwind_Resume(a1);
}

uint64_t ITTouchTranscoderUpdateKeyboardLayoutWithOptions(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = operator new();
  InputTranscoder::KeyboardLayoutImpl::KeyboardLayoutImpl(v8, a2, a3, v7 + 312, a4);
  v9 = *(uint64_t **)(v7 + 472);
  result = *v9;
  *v9 = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_22851CB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B18DC](v1, 0x10E1C409ADAC2BBLL);
  _Unwind_Resume(a1);
}

_QWORD *ITTouchTranscoderClearNeuralNetworkBuffer(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint8_t v5[16];

  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v2 = os_signpost_id_generate((os_log_t)_nlpSignpostLog::log);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v3 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v3, OS_SIGNPOST_EVENT, v2, "ITTouchTranscoderClearNeuralNetworkBuffer", (const char *)&unk_228544982, v5, 2u);
    }
  }
  return InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(*(InputTranscoder::TouchTranscoderImpl **)(a1 + 24));
}

BOOL ITTouchTranscoderProvidesCompletionCandidates(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 24) + 244) != 0;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_22851CCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22851CE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(a1 + 40), 0);
}

void ___ZL20createResourceBundlePK14__CFDictionary_block_invoke(uint64_t a1, const void *a2, int a3, int a4, CFStringRef theString1, _BYTE *a6)
{
  if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x24BE5F7D0], 0) == kCFCompareEqualTo)
  {
    nlp::CFScopedPtr<__CFURL const*>::acquire((const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *a6 = 1;
  }
}

void nlp::CFScopedPtr<__CFURL const*>::acquire(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    nlp::CFScopedPtr<__CFURL const*>::reset(a1, cf);
  }
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFLocale const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void **std::unique_ptr<InputTranscoder::CTCDecoder>::reset[abi:ne180100](void ***a1)
{
  void **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    InputTranscoder::CTCDecoder::~CTCDecoder(result);
    JUMPOUT(0x22E2B18DCLL);
  }
  return result;
}

uint64_t std::default_delete<InputTranscoder::MontrealModel>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 8);
    if (v2)
    {
      *(_QWORD *)(v1 + 16) = v2;
      operator delete(v2);
    }
    nlp::CFScopedPtr<MontrealNeuralNetwork *>::reset((const void **)v1, 0);
    JUMPOUT(0x22E2B18DCLL);
  }
  return result;
}

uint64_t std::default_delete<InputTranscoder::TranscoderMediator>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = (uint64_t *)result;
    std::unique_ptr<InputTranscoder::CTCDecoder>::reset[abi:ne180100]((void ***)(result + 16));
    v2 = v1[1];
    v1[1] = 0;
    if (v2)
      std::default_delete<InputTranscoder::MontrealModel>::operator()[abi:ne180100](v2);
    v3 = *v1;
    *v1 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x22E2B18DCLL);
  }
  return result;
}

void std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<std::string,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<std::string,unsigned int> const>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F110D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<std::string,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<std::string,unsigned int> const>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F110D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<std::string,unsigned int> const,std::allocator<InputTranscoder::PlistBiMap<std::string,unsigned int> const>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,std::string> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,std::string> const>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24F110D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,std::string> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,std::string> const>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24F110D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t std::__shared_ptr_emplace<InputTranscoder::PlistBiMap<unsigned int,std::string> const,std::allocator<InputTranscoder::PlistBiMap<unsigned int,std::string> const>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_pointer<InputTranscoder::TranscoderMediator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t std::__shared_ptr_pointer<InputTranscoder::TranscoderMediator  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<InputTranscoder::TranscoderMediator>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<InputTranscoder::TranscoderMediator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::string *InputTranscoder::CTCDecoder::CTCDecoder(std::string *this, uint64_t a2, std::string::size_type *a3, uint64_t a4)
{
  __int128 v8;
  std::string *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;
  CFTypeRef cf;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
  }
  v9 = this + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = v13;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v11;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v12;
  v14 = *(_OWORD *)(a2 + 128);
  v15 = *(_OWORD *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 160);
  LODWORD(this[7].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 176);
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v15;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v16;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v14;
  InputTranscoder::LMScorer::makeLMScorer(a4, a2, (uint64_t *)&this[7].__r_.__value_.__r.__words[2]);
  v17 = a3[1];
  this[8].__r_.__value_.__r.__words[0] = *a3;
  this[8].__r_.__value_.__l.__size_ = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  this[11].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = 0u;
  if (*(_BYTE *)(a2 + 48))
  {
    InputTranscoder::makeStaticLexicon(a2, (uint64_t *)&cf);
    InputTranscoder::LexiconContainer::addLexicon(this[8].__r_.__value_.__r.__words, cf, 0);
    if (cf)
      CFRelease(cf);
  }
  return this;
}

void sub_22851D334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

std::string *InputTranscoder::CTCDecoder::CTCDecoder(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v4[2];

  v4[0] = 0;
  v4[1] = 0;
  return InputTranscoder::CTCDecoder::CTCDecoder(a1, a2, v4, a3);
}

void sub_22851D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void InputTranscoder::LexiconContainer::~LexiconContainer(void **this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  v2 = this[5];
  if (v2)
  {
    this[6] = v2;
    operator delete(v2);
  }
  v3 = this + 2;
  std::vector<nlp::CFScopedPtr<_LXLexicon const*>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void InputTranscoder::CTCConfiguration::~CTCConfiguration(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t InputTranscoder::CTCDecoder::makeTrieRoot(InputTranscoder::CTCDecoder *this)
{
  InputTranscoder::LexiconContainer *v2;
  uint64_t v3;
  int64x2_t v4;
  int64x2_t v5;
  __int128 v7;
  uint64_t v8;
  void **v9;

  if (*((_QWORD *)this + 26) == *((_QWORD *)this + 27))
  {
    v3 = operator new();
    *(_QWORD *)v3 = &off_24F110E78;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    v5 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(int64x2_t *)(v3 + 32) = v5;
    *(int64x2_t *)(v3 + 48) = v5;
    *(_QWORD *)(v3 + 64) = 0xFFEFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 + 72) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 80) = 1;
    *(_BYTE *)(v3 + 84) = 1;
    *(_QWORD *)(v3 + 88) = 0;
  }
  else
  {
    v2 = (InputTranscoder::CTCDecoder *)((char *)this + 192);
    v3 = operator new();
    InputTranscoder::LexiconContainer::createRootCursors(v2, (char **)&v7);
    v4 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(int64x2_t *)(v3 + 32) = v4;
    *(int64x2_t *)(v3 + 48) = v4;
    *(_QWORD *)(v3 + 64) = 0xFFEFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 + 72) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 80) = 1;
    *(_BYTE *)(v3 + 84) = 1;
    *(_QWORD *)v3 = off_24F110ED8;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 96) = this;
    *(_OWORD *)(v3 + 104) = v7;
    *(_QWORD *)(v3 + 120) = v8;
    v7 = 0uLL;
    v8 = 0;
    v9 = (void **)&v7;
    std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  return v3;
}

void sub_22851D5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B18DC](v1, 0x10E1C409D70457BLL);
  _Unwind_Resume(a1);
}

void InputTranscoder::CTCDecoder::setLexiconPrefix(uint64_t a1, std::string *__str)
{
  _QWORD *v4;

  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a1 + 216))
    std::string::operator=((std::string *)(a1 + 256), __str);
  v4 = *(_QWORD **)(a1 + 184);
  if (v4)
    InputTranscoder::LMScorer::setContext(v4, (char *)__str);
}

void InputTranscoder::CTCDecoder::forwardOneTimeStep(uint64_t a1, InputTranscoder *this, const float *a3, uint64_t a4, uint64_t *a5)
{
  float *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t v20;
  double v21;
  int v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  double *v34;
  uint64_t v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  float *v41;
  _QWORD *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  long double v52;
  float *v55;
  float *v56;
  BOOL (*v57)(uint64_t, uint64_t);

  InputTranscoder::getPrunedLogProbs(this, a3, *(double *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108), &v55);
  v7 = v56;
  if (v56 != v55)
  {
    v8 = 0;
    v10 = *a5;
    v9 = a5[1];
    v7 = v55;
    do
    {
      v11 = &v7[2 * v8];
      v12 = *(unsigned int *)v11;
      if (v12 >= *(_DWORD *)(a1 + 124) && v12 <= *(_DWORD *)(a1 + 128))
      {
        v13 = v11[1];
        v14 = (v9 - v10) >> 3;
        v15 = *(_QWORD *)(a1 + 88);
        if (v14 <= v15)
        {
          v19 = -1.79769313e308;
        }
        else
        {
          v57 = InputTranscoder::PathTrie::prefixCompare;
          v16 = 126 - 2 * __clz(v15);
          if (v15)
            v17 = v16;
          else
            v17 = 0;
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**,false>(v10, (uint64_t *)(v10 + 8 * v15), (uint64_t (**)(_QWORD))&v57, v17, 1);
          v10 = *a5;
          v18 = *(double *)(*(_QWORD *)(*a5 + 8 * v15 - 8) + 64);
          v19 = v18 + logf(*((float *)this + *(unsigned int *)(a1 + 100))) - fmax(*(float *)(a1 + 56), 0.0);
          v9 = a5[1];
        }
        if (v9 == v10)
        {
          v9 = v10;
        }
        else if (*(_QWORD *)(a1 + 88))
        {
          v20 = 0;
          v21 = v13;
          while (1)
          {
            if (v14 > v15 && *(double *)(*(_QWORD *)(v10 + 8 * v20) + 64) + v21 < v19)
              goto LABEL_69;
            v22 = *(_DWORD *)(a1 + 108);
            if ((_DWORD)v12 != v22 || v20 < *(_QWORD *)(a1 + 112))
              break;
LABEL_65:
            ++v20;
            v10 = *a5;
            v9 = a5[1];
            if (v20 >= (v9 - *a5) >> 3 || v20 >= *(_QWORD *)(a1 + 88))
              goto LABEL_69;
          }
          v23 = *(_QWORD *)(v10 + 8 * v20);
          if ((_DWORD)v12 == *(_DWORD *)(a1 + 100))
          {
            v24 = *(double *)(v23 + 48);
            v25 = *(double *)(v23 + 64) + v21;
            if (v24 > -1.79769313e308)
            {
              if (v25 <= -1.79769313e308)
              {
                v25 = *(double *)(v23 + 48);
              }
              else
              {
                if (v24 >= v25)
                  v26 = *(double *)(v23 + 48);
                else
                  v26 = *(double *)(v23 + 64) + v21;
                v27 = exp(v24 - v26);
                v28 = exp(v25 - v26);
                v25 = v26 + log(v27 + v28);
              }
            }
            *(double *)(v23 + 48) = v25;
            goto LABEL_65;
          }
          if ((_DWORD)v12 == *(_DWORD *)(v23 + 72))
          {
            v29 = *(double *)(v23 + 56);
            v30 = *(double *)(v23 + 40) + v21;
            if (v29 > -1.79769313e308)
            {
              if (v30 <= -1.79769313e308)
              {
                v30 = *(double *)(v23 + 56);
              }
              else
              {
                if (v29 >= v30)
                  v31 = *(double *)(v23 + 56);
                else
                  v31 = *(double *)(v23 + 40) + v21;
                v32 = exp(v29 - v31);
                v33 = exp(v30 - v31);
                v30 = v31 + log(v32 + v33);
              }
            }
            *(double *)(v23 + 56) = v30;
          }
          v34 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, float))(*(_QWORD *)v23 + 24))(v23, v12, a4, (_DWORD)v12 == v22, a1 + 192, *(float *)(a1 + 120));
          if (!v34)
            goto LABEL_65;
          v35 = *(_QWORD *)(v10 + 8 * v20);
          if ((_DWORD)v12 == *(_DWORD *)(v35 + 72))
          {
            v36 = *(double *)(v35 + 32);
            v37 = v36 <= -1.79769313e308;
            v38 = v36 + v21;
            if (v37)
              v39 = -1.79769313e308;
            else
              v39 = v38;
          }
          else
          {
            v39 = *(double *)(v35 + 64) + v21;
          }
          if (*(_QWORD *)(a1 + 208) == *(_QWORD *)(a1 + 216))
          {
            v42 = *(_QWORD **)(a1 + 184);
            if (v42)
            {
              InputTranscoder::LMScorer::fillNgram(v42, (uint64_t)v34, a1 + 280, 10);
              LMLanguageModelConditionalProbability();
              v44 = v43 * 2.30258512;
              v45 = v34[7];
              v46 = *(double *)(*(_QWORD *)(a1 + 184) + 8) + v44 * **(double **)(a1 + 184);
            }
            else
            {
              v45 = v34[7];
              v46 = *(float *)(a1 + 56);
            }
            v48 = v39 + v46;
            if (v45 > -1.79769313e308)
            {
              if (v48 <= -1.79769313e308)
              {
                v48 = v45;
              }
              else
              {
                if (v45 >= v48)
                  v49 = v45;
                else
                  v49 = v39 + v46;
                v50 = v45 - v49;
LABEL_62:
                v51 = exp(v50);
                v52 = exp(v48 - v49);
                v48 = v49 + log(v51 + v52);
              }
            }
          }
          else
          {
            if ((_DWORD)v12 == *(_DWORD *)(a1 + 108))
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
              v41 = (float *)(a1 + 160);
            }
            else
            {
              (*(void (**)(double *))(*(_QWORD *)v34 + 32))(v34);
              v41 = (float *)(a1 + 56);
            }
            v47 = v34[7];
            v48 = v39 + *v41 + v40 * *(float *)(a1 + 52);
            if (v47 > -1.79769313e308)
            {
              if (v48 > -1.79769313e308)
              {
                if (v47 >= v48)
                  v49 = v34[7];
                else
                  v49 = v39 + *v41 + v40 * *(float *)(a1 + 52);
                v50 = v47 - v49;
                goto LABEL_62;
              }
              v48 = v34[7];
            }
          }
          v34[7] = v48;
          goto LABEL_65;
        }
      }
LABEL_69:
      ++v8;
      v7 = v55;
    }
    while (v8 < ((char *)v56 - (char *)v55) >> 3);
  }
  if (v7)
  {
    v56 = v7;
    operator delete(v7);
  }
}

void sub_22851DAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::CTCDecoder::decode(uint64_t a1, uint64_t a2, const float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_signpost_id_t v12;
  unint64_t v13;
  NSObject *v14;
  _QWORD *TrieRoot;
  char *v16;
  char *v17;
  uint64_t v18;
  InputTranscoder *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  NSObject *v33;
  os_signpost_id_t spid;
  uint8_t v37[16];
  uint64_t v38;
  void **v39[3];
  __int128 v40;
  uint64_t v41;
  uint8_t buf[8];
  char *v43;
  char *v44;
  const float *ptr;
  uint8_t *v46;

  ptr = a3;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v12 = os_signpost_id_make_with_pointer((os_log_t)_nlpSignpostLog::log, &ptr);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  spid = v12;
  v13 = v12 - 1;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v14, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CTCDecode", (const char *)&unk_228544982, buf, 2u);
    }
  }
  TrieRoot = (_QWORD *)InputTranscoder::CTCDecoder::makeTrieRoot((InputTranscoder::CTCDecoder *)a1);
  TrieRoot[8] = 0;
  TrieRoot[5] = 0;
  v16 = (char *)operator new(8uLL);
  *(_QWORD *)v16 = TrieRoot;
  v17 = v16 + 8;
  v43 = v16 + 8;
  v44 = v16 + 8;
  *(_QWORD *)buf = v16;
  v40 = 0uLL;
  v41 = 0;
  if (a4)
  {
    v18 = 0;
    do
    {
      v19 = (InputTranscoder *)(a2 + 4 * (_QWORD)ptr * v18);
      if (*((float *)v19 + *(unsigned int *)(a1 + 100)) < *(float *)(a1 + 96))
      {
        InputTranscoder::CTCDecoder::forwardOneTimeStep(a1, v19, ptr, v18, (uint64_t *)buf);
        v43 = *(char **)buf;
        InputTranscoder::PathTrie::iterateToVec((uint64_t)TrieRoot, (void **)buf);
        v16 = *(char **)buf;
        v17 = v43;
        v20 = (uint64_t)&v43[-*(_QWORD *)buf] >> 3;
        v21 = *(_QWORD *)(a1 + 88);
        if (v20 >= v21)
        {
          v22 = (char *)(*(_QWORD *)buf + 8 * v21);
          *(_QWORD *)v37 = InputTranscoder::PathTrie::prefixCompare;
          if (v22 != v43)
          {
            std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),std::__wrap_iter<InputTranscoder::PathTrie**>>(*(uint64_t *)buf, v22, v43, (unsigned int (**)(_QWORD))v37);
            v21 = *(_QWORD *)(a1 + 88);
            v16 = *(char **)buf;
            v17 = v43;
            v20 = (uint64_t)&v43[-*(_QWORD *)buf] >> 3;
          }
          if (v21 < v20)
          {
            do
            {
              InputTranscoder::PathTrie::remove(*(_QWORD *)&v16[8 * v21++]);
              v16 = *(char **)buf;
              v17 = v43;
            }
            while (v21 < (uint64_t)&v43[-*(_QWORD *)buf] >> 3);
          }
        }
      }
      ++v18;
    }
    while (v18 != a4);
  }
  memset(v39, 0, sizeof(v39));
  if (*(_QWORD *)(a1 + 88) >= (unint64_t)((v17 - v16) >> 3))
    v23 = (v17 - v16) >> 3;
  else
    v23 = *(_QWORD *)(a1 + 88);
  v46 = (uint8_t *)InputTranscoder::PathTrie::prefixCompare;
  v24 = 126 - 2 * __clz(v23);
  if (v23)
    v25 = v24;
  else
    v25 = 0;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**,false>((uint64_t)v16, (uint64_t *)&v16[8 * v23], (uint64_t (**)(_QWORD))&v46, v25, 1);
  v26 = *(_QWORD *)(a5 + 24);
  if (v26)
  {
    v37[0] = 0;
    if (v23)
    {
      v46 = **(uint8_t ***)buf;
      for (i = 1; ; ++i)
      {
        (*(void (**)(uint64_t, uint8_t **, __int128 *, uint8_t *))(*(_QWORD *)v26 + 48))(v26, &v46, &v40, v37);
        if (v37[0] || v23 == i)
          break;
        v26 = *(_QWORD *)(a5 + 24);
        v46 = *(uint8_t **)(*(_QWORD *)buf + 8 * i);
        if (!v26)
          std::__throw_bad_function_call[abi:ne180100]();
      }
    }
  }
  v29 = *(_QWORD *)(a6 + 24);
  if (v29)
  {
    (*(void (**)(uint8_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v29 + 48))(v37, v29, &v40);
    std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__vdeallocate((void **)&v40);
    v40 = *(_OWORD *)v37;
    v41 = v38;
    v38 = 0;
    memset(v37, 0, sizeof(v37));
    v46 = v37;
    std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  }
  if (*(_QWORD *)(a7 + 24))
  {
    v30 = *((_QWORD *)&v40 + 1);
    for (j = v40; j != v30; j += 72)
    {
      v32 = *(_QWORD *)(a7 + 24);
      if (!v32)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 48))(v32, j);
    }
  }
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v33 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)v37 = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v33, OS_SIGNPOST_INTERVAL_END, spid, "CTCDecode", (const char *)&unk_228544982, v37, 2u);
    }
  }
  *(_QWORD *)v37 = v39;
  std::vector<InputTranscoder::CTCOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  v39[0] = (void **)&v40;
  std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__destroy_vector::operator()[abi:ne180100](v39);
  if (*(_QWORD *)buf)
  {
    v43 = *(char **)buf;
    operator delete(*(void **)buf);
  }
  return (*(uint64_t (**)(_QWORD *))(*TrieRoot + 8))(TrieRoot);
}

void sub_22851DED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char **a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  a11 = &a14;
  std::vector<InputTranscoder::CTCOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a14 = &a17;
  std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

uint64_t InputTranscoder::CTCDecoder::decode@<X0>(InputTranscoder::CTCDecoder *this@<X0>, const float *a2@<X1>, const float *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  os_signpost_id_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t TrieRoot;
  char *v13;
  char *v14;
  uint64_t v15;
  InputTranscoder *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  void *v43;
  void *v44;
  NSObject *v45;
  os_signpost_id_t spid;
  unint64_t v48;
  uint64_t v49;
  uint8_t buf[16];
  uint64_t v51;
  uint64_t v52;
  void *__p;
  char *v54;
  char *v55;
  const float *ptr;
  BOOL (*v57)(uint64_t, uint64_t);

  ptr = a3;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v9 = os_signpost_id_make_with_pointer((os_log_t)_nlpSignpostLog::log, &ptr);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  spid = v9;
  v10 = v9 - 1;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v11, OS_SIGNPOST_INTERVAL_BEGIN, spid, "CTCDecode", (const char *)&unk_228544982, buf, 2u);
    }
  }
  TrieRoot = InputTranscoder::CTCDecoder::makeTrieRoot(this);
  *(_QWORD *)(TrieRoot + 64) = 0;
  *(_QWORD *)(TrieRoot + 40) = 0;
  v13 = (char *)operator new(8uLL);
  v48 = v10;
  v49 = TrieRoot;
  *(_QWORD *)v13 = TrieRoot;
  v14 = v13 + 8;
  v54 = v13 + 8;
  v55 = v13 + 8;
  __p = v13;
  if (a4)
  {
    v15 = 0;
    do
    {
      v16 = (InputTranscoder *)&a2[(_QWORD)ptr * v15];
      if (*((float *)v16 + *((unsigned int *)this + 25)) < *((float *)this + 24))
      {
        InputTranscoder::CTCDecoder::forwardOneTimeStep((uint64_t)this, v16, ptr, v15, (uint64_t *)&__p);
        v54 = (char *)__p;
        InputTranscoder::PathTrie::iterateToVec(TrieRoot, &__p);
        v13 = (char *)__p;
        v14 = v54;
        v17 = (v54 - (_BYTE *)__p) >> 3;
        v18 = *((_QWORD *)this + 11);
        if (v17 >= v18)
        {
          v19 = (char *)__p + 8 * v18;
          *(_QWORD *)buf = InputTranscoder::PathTrie::prefixCompare;
          if (v19 != v54)
          {
            std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),std::__wrap_iter<InputTranscoder::PathTrie**>>((uint64_t)__p, v19, v54, (unsigned int (**)(_QWORD))buf);
            v18 = *((_QWORD *)this + 11);
            v13 = (char *)__p;
            v14 = v54;
            v17 = (v54 - (_BYTE *)__p) >> 3;
          }
          if (v18 < v17)
          {
            do
            {
              InputTranscoder::PathTrie::remove(*(_QWORD *)&v13[8 * v18++]);
              v13 = (char *)__p;
              v14 = v54;
            }
            while (v18 < (v54 - (_BYTE *)__p) >> 3);
          }
        }
      }
      ++v15;
    }
    while (v15 != a4);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (*((_QWORD *)this + 11) >= (unint64_t)((v14 - v13) >> 3))
    v20 = (v14 - v13) >> 3;
  else
    v20 = *((_QWORD *)this + 11);
  v57 = InputTranscoder::PathTrie::prefixCompare;
  v21 = 126 - 2 * __clz(v20);
  if (v20)
    v22 = v21;
  else
    v22 = 0;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**,false>((uint64_t)v13, (uint64_t *)&v13[8 * v20], (uint64_t (**)(_QWORD))&v57, v22, 1);
  if (v20)
  {
    v23 = 0;
    while (1)
    {
      v24 = __p;
      if (*((_QWORD *)this + 26) == *((_QWORD *)this + 27))
        goto LABEL_28;
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)__p + v23) + 16))(*((_QWORD *)__p + v23)))
        break;
LABEL_50:
      if (++v23 == v20)
        goto LABEL_54;
    }
    v24 = __p;
LABEL_28:
    memset(buf, 0, sizeof(buf));
    v51 = 0;
    InputTranscoder::PathTrie::getPath(v24[v23], (uint64_t)buf);
    v25 = *(void **)buf;
    v26 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
LABEL_48:
      if (v25)
      {
        *(_QWORD *)&buf[8] = v25;
        operator delete(v25);
      }
      goto LABEL_50;
    }
    v27 = *(_QWORD *)(*((_QWORD *)__p + v23) + 64);
    v52 = v27;
    v29 = a5[1];
    v28 = (unint64_t)a5[2];
    if ((unint64_t)v29 >= v28)
    {
      v31 = *a5;
      v32 = (v29 - *a5) >> 5;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 59)
        std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
      v34 = v28 - (_QWORD)v31;
      if (v34 >> 4 > v33)
        v33 = v34 >> 4;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0)
        v35 = 0x7FFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v36 = (char *)operator new(32 * v35);
      v37 = &v36[32 * v32];
      *(_QWORD *)v37 = v25;
      *((_QWORD *)v37 + 1) = v26;
      *((_QWORD *)v37 + 2) = v51;
      v38 = &v36[32 * v35];
      v51 = 0;
      memset(buf, 0, sizeof(buf));
      *((_QWORD *)v37 + 3) = v27;
      v30 = v37 + 32;
      if (v29 == v31)
      {
        *a5 = v37;
        a5[1] = v30;
        a5[2] = v38;
        if (!v29)
          goto LABEL_47;
      }
      else
      {
        v39 = 0;
        do
        {
          v40 = &v37[v39];
          v41 = &v29[v39];
          *((_QWORD *)v40 - 4) = 0;
          *((_QWORD *)v40 - 3) = 0;
          *((_QWORD *)v40 - 2) = 0;
          *((_OWORD *)v40 - 2) = *(_OWORD *)&v29[v39 - 32];
          *((_QWORD *)v40 - 2) = *(_QWORD *)&v29[v39 - 16];
          *((_QWORD *)v41 - 4) = 0;
          *((_QWORD *)v41 - 3) = 0;
          *((_QWORD *)v41 - 2) = 0;
          *((_QWORD *)v40 - 1) = *(_QWORD *)&v29[v39 - 8];
          v39 -= 32;
        }
        while (&v29[v39] != v31);
        *a5 = &v37[v39];
        a5[1] = v30;
        a5[2] = v38;
        v42 = v29;
        do
        {
          v44 = (void *)*((_QWORD *)v42 - 4);
          v42 -= 32;
          v43 = v44;
          if (v44)
          {
            *((_QWORD *)v29 - 3) = v43;
            operator delete(v43);
          }
          v29 = v42;
        }
        while (v42 != v31);
        v29 = v31;
        if (!v31)
          goto LABEL_47;
      }
      operator delete(v29);
    }
    else
    {
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = 0;
      *(_OWORD *)v29 = *(_OWORD *)buf;
      *((_QWORD *)v29 + 2) = v51;
      memset(buf, 0, sizeof(buf));
      v51 = 0;
      *((_QWORD *)v29 + 3) = v52;
      v30 = v29 + 32;
    }
LABEL_47:
    a5[1] = v30;
    v25 = *(void **)buf;
    goto LABEL_48;
  }
LABEL_54:
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v48 < 0xFFFFFFFFFFFFFFFELL)
  {
    v45 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v45, OS_SIGNPOST_INTERVAL_END, spid, "CTCDecode", (const char *)&unk_228544982, buf, 2u);
    }
  }
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
}

void sub_22851E408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::vector<InputTranscoder::CTCOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 4 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int64_t v81;
  uint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v82 = a2 - 2;
  v85 = a2;
  v80 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = v85;
    v12 = (char *)v85 - (char *)v10;
    v13 = v85 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v85 - 1), *v8);
        if ((_DWORD)result)
        {
          v40 = *v8;
          *v8 = *(v85 - 1);
          *(v85 - 1) = v40;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v8, v8 + 1, v9, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v12 <= 191)
        {
          v41 = v8 + 1;
          v43 = v8 == v85 || v41 == v85;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v49 + 8) = *(uint64_t *)((char *)v8 + v49);
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(uint64_t *)((char *)v8 + v49 - 8));
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = (uint64_t *)((char *)v8 + v49 + 8);
                      goto LABEL_74;
                    }
                  }
                  v50 = v8;
LABEL_74:
                  *v50 = v48;
                }
                v41 = v45 + 1;
                v44 += 8;
              }
              while (v45 + 1 != v85);
            }
          }
          else if (!v43)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v41 = v8 + 1;
            }
            while (v8 + 1 != v85);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v85)
          {
            v51 = (unint64_t)(v13 - 2) >> 1;
            v83 = v51;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = v52;
                  v56 = *v55;
                  do
                  {
                    v57 = v54;
                    *v55 = *v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v8[v58];
                    if (2 * v53 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                    {
                      ++v54;
                      v58 = 2 * v53 + 2;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *v57 = v56;
                  v11 = v85;
                  v52 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v59 = (unint64_t)v12 >> 3;
            do
            {
              v60 = v11;
              v61 = 0;
              v62 = v59 - 2;
              v84 = *v8;
              if (v59 < 2)
                v62 = v59 - 1;
              v63 = v62 >> 1;
              v64 = v8;
              do
              {
                v65 = &v64[v61 + 1];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v59)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v64[v61 + 1], v64[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v65;
                    v66 = v67;
                  }
                }
                *v64 = *v65;
                v64 = v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v11 = v60 - 1;
              if (v65 == v60 - 1)
              {
                *v65 = v84;
              }
              else
              {
                *v65 = *v11;
                *v11 = v84;
                v68 = (char *)v65 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, *v65);
                  if ((_DWORD)result)
                  {
                    v71 = *v65;
                    do
                    {
                      v72 = v70;
                      *v65 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, v71);
                      v65 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v59-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v8[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v15, v8, v9, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v8, v15, v9, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v8 + 1, v15 - 1, v82, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v8 + 2, &v8[v14 + 1], v80, a3);
          v11 = v85;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v15 - 1, v15, &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && (((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v8 - 1), *v8) & 1) == 0)
        {
          v31 = *v8;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v8, *v9);
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
            {
              v32 = v10[1];
              ++v10;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v8 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v85)
                break;
              ++v33;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = v85;
          if (v10 < v85)
          {
            v34 = v85;
            do
            {
              v35 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        do
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[++v17], v18);
        while ((v19 & 1) != 0);
        v20 = &v8[v17];
        v21 = v11;
        if (v17 == 1)
        {
          v21 = v11;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = v20 - 1;
        }
        else
        {
          v24 = &v8[v17];
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v27, v18) & 1) != 0);
            do
              v28 = *--v25;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v28, v18));
          }
          while (v24 < v25);
          v29 = v24 - 1;
        }
        if (v29 != v8)
          *v8 = *v29;
        *v29 = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**,false>(v8, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 1;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v8, v29, a3);
        v10 = v29 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(v29 + 1, v85, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(*a3);
      if ((_DWORD)result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),InputTranscoder::PathTrie**>(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::PathTrie *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),std::__wrap_iter<InputTranscoder::PathTrie**>>(uint64_t result, char *a2, char *a3, unsigned int (**a4)(_QWORD))
{
  char *v5;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  if (a3 != a2)
  {
    v5 = a3;
    v7 = (char *)result;
    do
    {
      v8 = (v5 - v7) >> 3;
      if (v8 < 2)
        break;
      if (v8 == 3)
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),std::__wrap_iter<InputTranscoder::PathTrie**>>(v7, (_QWORD *)v7 + 1, (_QWORD *)v5 - 1, a4);
      if (v8 == 2)
      {
        result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*((_QWORD *)v5 - 1), *(_QWORD *)v7);
        if ((_DWORD)result)
        {
          v28 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *((_QWORD *)v5 - 1);
          *((_QWORD *)v5 - 1) = v28;
        }
        return result;
      }
      if (v5 - v7 <= 63)
      {
        while (v7 != v5 - 8)
        {
          v29 = v7;
          v7 += 8;
          if (v29 != v5 && v7 != v5)
          {
            v30 = v7;
            v31 = v29;
            v32 = v7;
            do
            {
              v33 = *(_QWORD *)v32;
              v32 += 8;
              result = ((uint64_t (*)(uint64_t, _QWORD))*a4)(v33, *(_QWORD *)v31);
              if ((_DWORD)result)
                v31 = v30;
              v30 = v32;
            }
            while (v32 != v5);
            if (v31 != v29)
            {
              v34 = *(_QWORD *)v29;
              *(_QWORD *)v29 = *(_QWORD *)v31;
              *(_QWORD *)v31 = v34;
            }
          }
        }
        return result;
      }
      v9 = &v7[8 * (v8 >> 1)];
      v10 = v5 - 8;
      v11 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),std::__wrap_iter<InputTranscoder::PathTrie**>>(v7, v9, (_QWORD *)v5 - 1, a4);
      result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)v7, *(_QWORD *)v9);
      if ((result & 1) != 0)
      {
        v12 = v5 - 8;
LABEL_13:
        v14 = v7 + 8;
        if (v7 + 8 >= v12)
        {
          v16 = v7 + 8;
        }
        else
        {
          v15 = v7 + 8;
          while (1)
          {
            v16 = (char *)(v15 - 1);
            do
            {
              v17 = *((_QWORD *)v16 + 1);
              v16 += 8;
            }
            while ((((uint64_t (*)(uint64_t, _QWORD))*a4)(v17, *(_QWORD *)v9) & 1) != 0);
            v15 = v16 + 8;
            do
            {
              v18 = *((_QWORD *)v12 - 1);
              v12 -= 8;
              result = ((uint64_t (*)(uint64_t, _QWORD))*a4)(v18, *(_QWORD *)v9);
            }
            while (!(_DWORD)result);
            if (v16 >= v12)
              break;
            v19 = *(_QWORD *)v16;
            *(_QWORD *)v16 = *(_QWORD *)v12;
            *(_QWORD *)v12 = v19;
            ++v11;
            if (v16 == v9)
              v9 = v12;
          }
        }
        if (v16 != v9)
        {
          result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)v9, *(_QWORD *)v16);
          if ((_DWORD)result)
          {
            v20 = *(_QWORD *)v16;
            *(_QWORD *)v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = v20;
            ++v11;
          }
        }
        if (v16 == a2)
          return result;
        if (!v11)
        {
          if (v16 <= a2)
          {
            v23 = v16 + 8;
            while (v23 != v5)
            {
              result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)v23, *((_QWORD *)v23 - 1));
              v23 += 8;
              if ((_DWORD)result)
                goto LABEL_29;
            }
          }
          else
          {
            while (v14 != v16)
            {
              result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)v14, *((_QWORD *)v14 - 1));
              v14 += 8;
              if ((result & 1) != 0)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
        {
          v21 = v16 + 8;
        }
        else
        {
          v5 = v16;
          v21 = v7;
        }
      }
      else
      {
        v12 = v5 - 8;
        while (1)
        {
          v12 -= 8;
          if (v12 == v7)
            break;
          result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)v12, *(_QWORD *)v9);
          if ((_DWORD)result)
          {
            v13 = *(_QWORD *)v7;
            *(_QWORD *)v7 = *(_QWORD *)v12;
            *(_QWORD *)v12 = v13;
            ++v11;
            goto LABEL_13;
          }
        }
        v22 = v7 + 8;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)v7, *(_QWORD *)v10);
        if ((result & 1) == 0)
        {
          while (v22 != v10)
          {
            result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)v7, *(_QWORD *)v22);
            if ((_DWORD)result)
            {
              v24 = *(_QWORD *)v22;
              *(_QWORD *)v22 = *(_QWORD *)v10;
              v22 += 8;
              *(_QWORD *)v10 = v24;
              goto LABEL_45;
            }
            v22 += 8;
          }
          return result;
        }
LABEL_45:
        if (v22 == v10)
          return result;
        while (1)
        {
          v21 = v22 - 8;
          do
          {
            v25 = *((_QWORD *)v21 + 1);
            v21 += 8;
          }
          while (!((unsigned int (*)(_QWORD, uint64_t))*a4)(*(_QWORD *)v7, v25));
          v22 = v21 + 8;
          do
          {
            v26 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            result = ((uint64_t (*)(_QWORD, uint64_t))*a4)(*(_QWORD *)v7, v26);
          }
          while ((result & 1) != 0);
          if (v21 >= v10)
            break;
          v27 = *(_QWORD *)v21;
          *(_QWORD *)v21 = *(_QWORD *)v10;
          *(_QWORD *)v10 = v27;
        }
        if (v21 > a2)
          return result;
      }
      v7 = v21;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::PathTrie const*,InputTranscoder::PathTrie const*),std::__wrap_iter<InputTranscoder::PathTrie**>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(_QWORD, _QWORD))*a4)(*a2, *a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

void std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::__destroy_at[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::__destroy_at[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<InputTranscoder::CTCOutput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<InputTranscoder::CTCOutput>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<InputTranscoder::CTCOutput>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x22E2B18DCLL);
}

BOOL InputTranscoder::PathTrie::prefixCompare(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 64);
  v3 = *(double *)(a2 + 64);
  if (v2 == v3)
    return *(_DWORD *)(a1 + 72) < *(_DWORD *)(a2 + 72);
  else
    return v2 > v3;
}

void InputTranscoder::PathTrie::~PathTrie(InputTranscoder::PathTrie *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24F110E78;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  InputTranscoder::PathTrie::~PathTrie(this);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t InputTranscoder::PathTrie::remove(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int64_t v9;

  *(_BYTE *)(this + 84) = 0;
  if (*(_QWORD *)(this + 8) == *(_QWORD *)(this + 16))
  {
    v1 = (_QWORD *)this;
    v2 = *(_QWORD *)(this + 88);
    v3 = *(char **)(v2 + 8);
    v4 = *(char **)(v2 + 16);
    if (v3 == v4)
      goto LABEL_16;
    v5 = 0;
    while (*(_DWORD *)(*(_QWORD *)&v3[v5] + 72) != *(_DWORD *)(this + 72))
    {
      v5 += 8;
      if (&v3[v5] == v4)
        goto LABEL_10;
    }
    v6 = &v3[v5];
    v7 = &v3[v5 + 8];
    v8 = *(_QWORD *)(this + 88);
    v9 = v4 - v7;
    if (v4 != v7)
    {
      memmove(v6, v7, v4 - v7);
      v8 = v1[11];
      v3 = *(char **)(v8 + 8);
    }
    *(_QWORD *)(v2 + 16) = &v6[v9];
    v4 = *(char **)(v8 + 16);
    v2 = v8;
LABEL_10:
    if (v3 == v4)
    {
LABEL_16:
      if (!*(_BYTE *)(v2 + 84))
        InputTranscoder::PathTrie::remove((InputTranscoder::PathTrie *)v2);
    }
    return (*(uint64_t (**)(_QWORD *))(*v1 + 8))(v1);
  }
  return this;
}

uint64_t InputTranscoder::PathTrie::getPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v20;
  int v21;
  BOOL v22;

  v3 = a1;
  v5 = (int *)(a1 + 72);
  v4 = *(_DWORD *)(a1 + 72);
  if (v4 == -1)
  {
    v8 = *(_DWORD **)(a2 + 8);
  }
  else
  {
    v6 = (_QWORD *)(a2 + 16);
    v7 = *(_DWORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        v9 = *(_DWORD **)a2;
        v10 = ((uint64_t)v7 - *(_QWORD *)a2) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v12 = *v6 - (_QWORD)v9;
        if (v12 >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v13);
          v9 = *(_DWORD **)a2;
          v7 = *(_DWORD **)(a2 + 8);
          v4 = *v5;
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[4 * v10];
        *(_DWORD *)v15 = v4;
        v8 = v15 + 4;
        while (v7 != v9)
        {
          v16 = *--v7;
          *((_DWORD *)v15 - 1) = v16;
          v15 -= 4;
        }
        *(_QWORD *)a2 = v15;
        *(_QWORD *)(a2 + 8) = v8;
        *(_QWORD *)(a2 + 16) = &v14[4 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v7 = v4;
        v8 = v7 + 1;
      }
      *(_QWORD *)(a2 + 8) = v8;
      v3 = *(_QWORD *)(v3 + 88);
      v5 = (int *)(v3 + 72);
      v4 = *(_DWORD *)(v3 + 72);
      v7 = v8;
    }
    while (v4 != -1);
  }
  v17 = *(_DWORD **)a2;
  v18 = v8 - 1;
  if (*(_DWORD **)a2 != v8 && v18 > v17)
  {
    v20 = (unint64_t)(v17 + 1);
    do
    {
      v21 = *(_DWORD *)(v20 - 4);
      *(_DWORD *)(v20 - 4) = *v18;
      *v18-- = v21;
      v22 = v20 >= (unint64_t)v18;
      v20 += 4;
    }
    while (!v22);
  }
  return v3;
}

int64x2_t *InputTranscoder::PathTrie::getPathTrie(InputTranscoder::PathTrie *this, int a2, int a3, BOOL a4, float a5, const InputTranscoder::LexiconContainer *a6)
{
  int64x2_t **v9;
  int64x2_t **v10;
  char **v11;
  int64x2_t *v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  int64x2_t **v25;
  char *v26;
  char *v27;
  char *v28;
  int64x2_t *v29;

  v9 = (int64x2_t **)*((_QWORD *)this + 1);
  v10 = (int64x2_t **)*((_QWORD *)this + 2);
  v11 = (char **)((char *)this + 8);
  if (v9 != v10)
  {
    while ((*v9)[4].i32[2] != a2)
    {
      if (++v9 == v10)
        goto LABEL_8;
    }
  }
  if (v9 == v10)
  {
LABEL_8:
    v14 = operator new();
    v12 = (int64x2_t *)v14;
    *(_QWORD *)v14 = &off_24F110E78;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    v15 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(int64x2_t *)(v14 + 32) = v15;
    *(int64x2_t *)(v14 + 48) = v15;
    *(_QWORD *)(v14 + 64) = 0xFFEFFFFFFFFFFFFFLL;
    *(_DWORD *)(v14 + 72) = a2;
    *(_DWORD *)(v14 + 76) = a3;
    if (this)
      v16 = *((_DWORD *)this + 20) + 1;
    else
      v16 = 1;
    *(_DWORD *)(v14 + 80) = v16;
    *(_BYTE *)(v14 + 84) = 1;
    *(_QWORD *)(v14 + 88) = this;
    v17 = (uint64_t *)*((_QWORD *)this + 2);
    v18 = *((_QWORD *)this + 3);
    if ((unint64_t)v17 >= v18)
    {
      v20 = ((char *)v17 - *v11) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
      v21 = v18 - (_QWORD)*v11;
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::PathTrie *>>((uint64_t)this + 24, v23);
      else
        v24 = 0;
      v25 = (int64x2_t **)&v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v12;
      v19 = v25 + 1;
      v28 = (char *)*((_QWORD *)this + 1);
      v27 = (char *)*((_QWORD *)this + 2);
      if (v27 != v28)
      {
        do
        {
          v29 = (int64x2_t *)*((_QWORD *)v27 - 1);
          v27 -= 8;
          *--v25 = v29;
        }
        while (v27 != v28);
        v27 = *v11;
      }
      *((_QWORD *)this + 1) = v25;
      *((_QWORD *)this + 2) = v19;
      *((_QWORD *)this + 3) = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v17 = v14;
      v19 = v17 + 1;
    }
    *((_QWORD *)this + 2) = v19;
  }
  else
  {
    v12 = *v9;
    if (!(*v9)[5].i8[4])
    {
      v13 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v12[2] = v13;
      v12[3] = v13;
      v12[5].i8[4] = 1;
    }
  }
  return v12;
}

void InputTranscoder::PathTrie::iterateToVec(uint64_t a1, void **a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  long double v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 84))
  {
    v4 = *(double *)(a1 + 48);
    v5 = *(double *)(a1 + 56);
    *(double *)(a1 + 32) = v4;
    *(double *)(a1 + 40) = v5;
    if (v4 > -1.79769313e308)
    {
      if (v5 <= -1.79769313e308)
      {
        v5 = v4;
      }
      else
      {
        if (v4 >= v5)
          v6 = v4;
        else
          v6 = v5;
        v7 = exp(v4 - v6);
        v8 = exp(v5 - v6);
        v5 = v6 + log(v7 + v8);
      }
    }
    *(double *)(a1 + 64) = v5;
    *(int64x2_t *)(a1 + 48) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v9 = (unint64_t)a2[2];
    v10 = a2[1];
    if ((unint64_t)v10 >= v9)
    {
      v12 = ((char *)v10 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)*a2;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::PathTrie *>>((uint64_t)(a2 + 2), v15);
      else
        v16 = 0;
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *(_QWORD *)v17 = a1;
      v11 = v17 + 8;
      v20 = (char *)*a2;
      v19 = (char *)a2[1];
      if (v19 != *a2)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*a2;
      }
      *a2 = v17;
      a2[1] = v11;
      a2[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v10 = a1;
      v11 = v10 + 1;
    }
    a2[1] = v11;
  }
  v23 = *(uint64_t **)(a1 + 8);
  v22 = *(uint64_t **)(a1 + 16);
  while (v23 != v22)
  {
    v24 = *v23++;
    InputTranscoder::PathTrie::iterateToVec(v24, a2);
  }
}

__n128 InputTranscoder::LexiconPathTrie::LexiconPathTrie(int64x2_t *a1, uint64_t a2, __int32 a3, __int32 a4, uint64_t a5, __n128 *a6)
{
  int64x2_t v6;
  int v7;
  __n128 result;

  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  a1[1].i64[1] = 0;
  v6 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  a1[2] = v6;
  a1[3] = v6;
  a1[4].i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  a1[4].i32[2] = a3;
  a1[4].i32[3] = a4;
  if (a5)
    v7 = *(_DWORD *)(a5 + 80) + 1;
  else
    v7 = 1;
  a1[5].i32[0] = v7;
  a1[5].i8[4] = 1;
  a1->i64[0] = (uint64_t)off_24F110ED8;
  a1[5].i64[1] = a5;
  a1[6].i64[0] = a2;
  a1[7].i64[0] = 0;
  a1[7].i64[1] = 0;
  a1[6].i64[1] = 0;
  result = *a6;
  *(int64x2_t *)((char *)a1 + 104) = *(int64x2_t *)a6;
  a1[7].i64[1] = a6[1].n128_i64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  return result;
}

uint64_t InputTranscoder::LexiconPathTrie::getPathTrie(InputTranscoder::LexiconPathTrie *this, __int32 a2, __int32 a3, int a4, __n128 a5, const InputTranscoder::LexiconContainer *a6)
{
  uint64_t *v10;
  uint64_t *v11;
  char **v12;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void *__p[2];
  _QWORD v49[2];
  _BYTE v50[24];
  uint64_t v51;
  _QWORD *v52;
  void **v53;

  v10 = (uint64_t *)*((_QWORD *)this + 1);
  v11 = (uint64_t *)*((_QWORD *)this + 2);
  v12 = (char **)((char *)this + 8);
  if (v10 != v11)
  {
    while (*(_DWORD *)(*v10 + 72) != a2)
    {
      if (++v10 == v11)
        goto LABEL_8;
    }
  }
  if (v10 == v11)
  {
LABEL_8:
    if (*((_QWORD *)a6 + 2) == *((_QWORD *)a6 + 3))
    {
      return 0;
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v49[0] = 0;
      if (a4)
      {
        if ((*(unsigned int (**)(InputTranscoder::LexiconPathTrie *, __n128))(*(_QWORD *)this + 16))(this, a5))
        {
          InputTranscoder::LexiconContainer::createRootCursors(a6, (char **)v50);
          *(_OWORD *)__p = *(_OWORD *)v50;
          v49[0] = *(_QWORD *)&v50[16];
          memset(v50, 0, sizeof(v50));
          v53 = (void **)v50;
          std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v53);
        }
      }
      else
      {
        v15 = *((_QWORD *)this + 13);
        for (i = *((_QWORD *)this + 14); v15 != i; v15 += 16)
        {
          *(_DWORD *)v50 = a2;
          (*(void (**)(_QWORD, _BYTE *, __n128))(**(_QWORD **)a6 + 32))(*(_QWORD *)a6, v50, a5);
          v17 = LXCursorCreateByAdvancingWithUTF8();
          v18 = v17;
          if (v17)
          {
            v19 = (char *)__p[1];
            if (__p[1] >= (void *)v49[0])
            {
              v21 = ((char *)__p[1] - (char *)__p[0]) >> 4;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 60)
                std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
              v23 = v49[0] - (unint64_t)__p[0];
              if ((uint64_t)(v49[0] - (unint64_t)__p[0]) >> 3 > v22)
                v22 = v23 >> 3;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                v24 = 0xFFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              v52 = v49;
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>>((uint64_t)v49, v24);
              v27 = &v25[16 * v21];
              *(_QWORD *)v27 = v18;
              v27[8] = *(_BYTE *)(v15 + 8);
              v29 = (char *)__p[0];
              v28 = (char *)__p[1];
              if (__p[1] == __p[0])
              {
                v32 = vdupq_n_s64((unint64_t)__p[1]);
                v30 = &v25[16 * v21];
              }
              else
              {
                v30 = &v25[16 * v21];
                do
                {
                  v31 = *((_QWORD *)v28 - 2);
                  v28 -= 16;
                  *(_QWORD *)v28 = 0;
                  *((_QWORD *)v30 - 2) = v31;
                  v30 -= 16;
                  v30[8] = v28[8];
                }
                while (v28 != v29);
                v32 = *(int64x2_t *)__p;
              }
              v20 = v27 + 16;
              __p[0] = v30;
              __p[1] = v27 + 16;
              *(int64x2_t *)&v50[8] = v32;
              v33 = v49[0];
              v49[0] = &v25[16 * v26];
              v51 = v33;
              *(_QWORD *)v50 = v32.i64[0];
              std::__split_buffer<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::~__split_buffer((uint64_t)v50);
            }
            else
            {
              *(_QWORD *)__p[1] = v17;
              v19[8] = *(_BYTE *)(v15 + 8);
              v20 = v19 + 16;
            }
            __p[1] = v20;
          }
        }
      }
      if (__p[0] == __p[1])
      {
        v13 = 0;
      }
      else
      {
        v13 = operator new();
        InputTranscoder::LexiconPathTrie::LexiconPathTrie((int64x2_t *)v13, *((_QWORD *)this + 12), a2, a3, (uint64_t)this, (__n128 *)__p);
        v34 = *((_QWORD *)this + 3);
        v35 = (uint64_t *)*((_QWORD *)this + 2);
        if ((unint64_t)v35 >= v34)
        {
          v37 = ((char *)v35 - *v12) >> 3;
          if ((unint64_t)(v37 + 1) >> 61)
            std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
          v38 = v34 - (_QWORD)*v12;
          v39 = v38 >> 2;
          if (v38 >> 2 <= (unint64_t)(v37 + 1))
            v39 = v37 + 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::PathTrie *>>((uint64_t)this + 24, v40);
          else
            v41 = 0;
          v42 = (uint64_t *)&v41[8 * v37];
          v43 = &v41[8 * v40];
          *v42 = v13;
          v36 = v42 + 1;
          v45 = (char *)*((_QWORD *)this + 1);
          v44 = (char *)*((_QWORD *)this + 2);
          if (v44 != v45)
          {
            do
            {
              v46 = *((_QWORD *)v44 - 1);
              v44 -= 8;
              *--v42 = v46;
            }
            while (v44 != v45);
            v44 = *v12;
          }
          *((_QWORD *)this + 1) = v42;
          *((_QWORD *)this + 2) = v36;
          *((_QWORD *)this + 3) = v43;
          if (v44)
            operator delete(v44);
        }
        else
        {
          *v35 = v13;
          v36 = v35 + 1;
        }
        *((_QWORD *)this + 2) = v36;
      }
      *(_QWORD *)v50 = __p;
      std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
    }
  }
  else
  {
    v13 = *v10;
    if (!*(_BYTE *)(*v10 + 84))
    {
      v14 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      *(int64x2_t *)(v13 + 32) = v14;
      *(int64x2_t *)(v13 + 48) = v14;
      *(_BYTE *)(v13 + 84) = 1;
    }
  }
  return v13;
}

void sub_2285201C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a9;
  std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void InputTranscoder::LexiconPathTrie::getPrefixCompletions(_QWORD *a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  float v10;
  char v11;
  int64_t size;
  const std::string *v13;
  char *v14;
  std::string *v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  std::string __p;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  int v24;
  _QWORD v25[3];
  char v26;
  _QWORD v27[3];
  int v28;
  std::string v29;

  v6 = a1[12];
  v7 = *(_DWORD *)(v6 + 140);
  v8 = *(_QWORD *)(v6 + 152);
  v9 = *(_DWORD *)(v6 + 164);
  v10 = logf(*(float *)(v6 + 168));
  v11 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v11 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (v11 >= 0)
    v13 = a3;
  else
    v13 = (const std::string *)a3->__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v14 = (char *)v13 + size;
    v15 = (std::string *)v13;
    do
    {
      v16 = (char *)memchr(v15, 32, size);
      if (!v16)
        break;
      if (*v16 == 32)
      {
        if (v16 != v14 && v16 - (char *)v13 != -1)
        {
          std::string::basic_string(&v29, a3, 0, v16 - (char *)v13 + 1, (std::allocator<char> *)v27);
          goto LABEL_17;
        }
        break;
      }
      v15 = (std::string *)(v16 + 1);
      size = v14 - (char *)v15;
    }
    while (v14 - (char *)v15 >= 1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "");
LABEL_17:
  v17 = a1[13];
  for (i = a1[14]; v17 != i; v17 += 16)
  {
    v27[0] = 0;
    v27[1] = v27;
    v27[2] = 0x2000000000;
    v28 = 0;
    v25[0] = 0;
    v25[1] = v25;
    v25[2] = 0x2000000000;
    v26 = *(_BYTE *)(v17 + 8);
    if (!LXCursorIsRoot())
    {
      v21 = v9;
      v22 = v10;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        __p = v29;
      v23 = v8;
      v20 = a2;
      v24 = v7;
      LXCursorEnumerateEntriesRecursively();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    _Block_object_dispose(v25, 8);
    _Block_object_dispose(v27, 8);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_22852040C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  if (a21 < 0)
    operator delete(__p);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  if (*(char *)(v30 - 137) < 0)
    operator delete(*(void **)(v30 - 160));
  _Unwind_Resume(a1);
}

void ___ZNK15InputTranscoder15LexiconPathTrie20getPrefixCompletionsERNSt3__16vectorINS_20CTCSurfaceFormOutputENS1_9allocatorIS3_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS4_IcEEEE_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  const __CFString *v9;
  std::string::size_type size;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  uint64_t v14;
  unsigned int v15;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  float v22;
  float v23;
  std::string::size_type v24;
  unint64_t v25;
  unint64_t v26;
  __int128 **v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  char v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  std::string *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  BOOL v43;
  BOOL v44;
  double v45;
  double v46;
  double v47;
  std::string::size_type *v48;
  double v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string::size_type v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  char *v56;
  std::string *v57;
  std::string *v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  __int128 v69;
  __int128 v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string v74;
  std::string __s;
  CFTypeRef cf;
  std::string v77;
  std::string __p;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(double *)(v4 + 64);
  v6 = *(float *)(a1 + 88);
  LXEntryGetProbability();
  v8 = v5 + v6 * (v7 * 2.30258512);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    v8 = v8 + *(float *)(a1 + 92);
  v9 = (const __CFString *)LXEntryCopyString();
  cf = v9;
  if (v9)
  {
    nlp::getUTF8StringFromCFString(v9, &v77);
    size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v77;
    else
      v11 = (std::string *)v77.__r_.__value_.__r.__words[0];
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v77.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_88;
    v12 = (std::string *)((char *)v11 + size);
    v13 = size - 1;
    v14 = MEMORY[0x24BDAC740];
    do
    {
      v15 = v11->__r_.__value_.__s.__data_[0];
      if (!((v15 & 0x80000000) != 0 ? __maskrune(v15, 0x500uLL) : *(_DWORD *)(v14 + 4 * v15 + 60) & 0x500))
        break;
      v11 = (std::string *)((char *)v11 + 1);
      --v13;
    }
    while (v11 != v12);
    if (v11 == v12 || (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + 1) == v12)
    {
LABEL_88:
      v12 = v11;
    }
    else
    {
      v53 = 1;
      v12 = v11;
      do
      {
        v54 = v11->__r_.__value_.__s.__data_[v53];
        if ((v54 & 0x80000000) != 0)
          v55 = __maskrune(v54, 0x500uLL);
        else
          v55 = *(_DWORD *)(v14 + 4 * v54 + 60) & 0x500;
        if (v55)
        {
          v12->__r_.__value_.__s.__data_[0] = v11->__r_.__value_.__s.__data_[v53];
          v12 = (std::string *)((char *)v12 + 1);
        }
        ++v53;
        --v13;
      }
      while (v13);
    }
    v56 = (char *)&v77 + HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v57 = &v77;
    }
    else
    {
      v56 = (char *)(v77.__r_.__value_.__r.__words[0] + v77.__r_.__value_.__l.__size_);
      v57 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v77, (char *)v12 - (char *)v57, v56 - (char *)v12);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = (std::string *)((char *)&v77 + HIBYTE(v77.__r_.__value_.__r.__words[2]));
    else
      v58 = (std::string *)(v77.__r_.__value_.__r.__words[0] + v77.__r_.__value_.__l.__size_);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = &v77;
    else
      v59 = (std::string *)v77.__r_.__value_.__r.__words[0];
    while (v59 != v58)
    {
      v59->__r_.__value_.__s.__data_[0] = __tolower(v59->__r_.__value_.__s.__data_[0]);
      v59 = (std::string *)((char *)v59 + 1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v77, "");
  }
  v17 = *(char *)(a1 + 79);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)(a1 + 56);
  else
    v18 = *(const std::string::value_type **)(a1 + 56);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 79);
  else
    v19 = *(_QWORD *)(a1 + 64);
  v20 = std::string::insert(&v77, 0, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __s.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v23 = *(float *)(a1 + 96);
  v22 = *(float *)(a1 + 100);
  v24 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v24 = __s.__r_.__value_.__l.__size_;
  v25 = v24 - *(unsigned int *)(v4 + 80);
  if (v25 >= 3)
    v26 = 3;
  else
    v26 = v25;
  v27 = *(__int128 ***)(a1 + 80);
  v28 = *v27;
  v29 = v27[1];
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v74 = __s;
  if (v28 != v29)
  {
    while (1)
    {
      if (*((char *)v28 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
      }
      else
      {
        v30 = *v28;
        v77.__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v30;
      }
      if (*((char *)v28 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v28 + 3), *((_QWORD *)v28 + 4));
      }
      else
      {
        v31 = *(__int128 *)((char *)v28 + 24);
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 5);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
      }
      v79 = v28[3];
      v32 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      else
        v33 = v77.__r_.__value_.__l.__size_;
      v34 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = v74.__r_.__value_.__l.__size_;
      if (v33 == v34)
      {
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v74;
        else
          v35 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        {
          v44 = memcmp(v77.__r_.__value_.__l.__data_, v35, v77.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((_BYTE *)&v77.__r_.__value_.__s + 23))
        {
          v36 = HIBYTE(v77.__r_.__value_.__r.__words[2]) - 1;
          v37 = &v77;
          do
          {
            v39 = v37->__r_.__value_.__s.__data_[0];
            v37 = (std::string *)((char *)v37 + 1);
            v38 = v39;
            v41 = v35->__r_.__value_.__s.__data_[0];
            v35 = (std::string *)((char *)v35 + 1);
            v40 = v41;
            v43 = v36-- != 0;
            v44 = v38 == v40;
          }
          while (v38 == v40 && v43);
        }
        else
        {
          v44 = 1;
        }
      }
      else
      {
        v44 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)&v77.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_67:
          operator delete(v77.__r_.__value_.__l.__data_);
          if (v44)
            break;
          goto LABEL_68;
        }
      }
      else if (v32 < 0)
      {
        goto LABEL_67;
      }
      if (v44)
        break;
LABEL_68:
      v28 += 4;
      if (v28 == v29)
      {
        v28 = v29;
        break;
      }
    }
  }
  v45 = v8 - v23;
  v46 = (float)(v22 * (float)v26);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v47 = v45 - v46;
  v48 = *(std::string::size_type **)(a1 + 80);
  if (v28 == (__int128 *)v48[1])
  {
    v50 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v51 = v48[2];
    if ((unint64_t)v28 >= v51)
    {
      v60 = (uint64_t)((uint64_t)v28 - *v48) >> 6;
      if ((unint64_t)(v60 + 1) >> 58)
        std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
      v61 = v51 - *v48;
      v62 = v61 >> 5;
      if (v61 >> 5 <= (unint64_t)(v60 + 1))
        v62 = v60 + 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFC0)
        v63 = 0x3FFFFFFFFFFFFFFLL;
      else
        v63 = v62;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v48 + 2);
      if (v63)
        v64 = std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)(v48 + 2), v63);
      else
        v64 = 0;
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
      v77.__r_.__value_.__l.__size_ = (std::string::size_type)v64 + 64 * v60;
      v77.__r_.__value_.__r.__words[2] = v77.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v64 + 64 * v63;
      InputTranscoder::CTCSurfaceFormOutput::CTCSurfaceFormOutput((std::string *)v77.__r_.__value_.__l.__size_, (__int128 *)&__s, 1, 1, 0, *(_BYTE *)(v50 + 24), v47);
      v66 = *v48;
      v65 = v48[1];
      v67 = v77.__r_.__value_.__r.__words[2];
      v68 = v77.__r_.__value_.__l.__size_;
      if (v65 == *v48)
      {
        v71 = v48[1];
      }
      else
      {
        do
        {
          v69 = *(_OWORD *)(v65 - 64);
          *(_QWORD *)(v68 - 48) = *(_QWORD *)(v65 - 48);
          *(_OWORD *)(v68 - 64) = v69;
          *(_QWORD *)(v65 - 56) = 0;
          *(_QWORD *)(v65 - 48) = 0;
          *(_QWORD *)(v65 - 64) = 0;
          v70 = *(_OWORD *)(v65 - 40);
          *(_QWORD *)(v68 - 24) = *(_QWORD *)(v65 - 24);
          *(_OWORD *)(v68 - 40) = v70;
          *(_QWORD *)(v65 - 32) = 0;
          *(_QWORD *)(v65 - 24) = 0;
          *(_QWORD *)(v65 - 40) = 0;
          *(_OWORD *)(v68 - 16) = *(_OWORD *)(v65 - 16);
          v68 -= 64;
          v65 -= 64;
        }
        while (v65 != v66);
        v71 = *v48;
        v65 = v48[1];
      }
      v52 = v67 + 64;
      *v48 = v68;
      v77.__r_.__value_.__r.__words[0] = v71;
      v77.__r_.__value_.__l.__size_ = v71;
      v48[1] = v67 + 64;
      v77.__r_.__value_.__r.__words[2] = v65;
      v72 = v48[2];
      v48[2] = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = v72;
      std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)&v77);
    }
    else
    {
      InputTranscoder::CTCSurfaceFormOutput::CTCSurfaceFormOutput((std::string *)v28, (__int128 *)&__s, 1, 1, 0, *(_BYTE *)(v50 + 24), v47);
      v52 = (std::string::size_type)(v28 + 4);
      v48[1] = (std::string::size_type)(v28 + 4);
    }
    v48[1] = v52;
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  }
  else
  {
    v49 = *((double *)v28 + 6);
    if (v49 < v47)
      v49 = v47;
    *((double *)v28 + 6) = v49;
    *((_BYTE *)v28 + 59) &= *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == *(_DWORD *)(a1 + 104))
    *a3 = 1;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (cf)
    CFRelease(cf);
}

void sub_228520B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)&a25);
  if (a23 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset(&a24, 0);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 56);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

BOOL InputTranscoder::LexiconPathTrie::isValidWord(InputTranscoder::LexiconPathTrie *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int HasEntries;
  _BOOL8 result;
  BOOL v6;

  v1 = *((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 14);
  if (v1 == v2)
    return 0;
  v3 = v1 + 16;
  do
  {
    HasEntries = LXCursorHasEntries();
    v6 = HasEntries == 0;
    result = HasEntries != 0;
    v6 = !v6 || v3 == v2;
    v3 += 16;
  }
  while (!v6);
  return result;
}

BOOL InputTranscoder::LexiconPathTrie::containsOnlyDynamicLexiconCursors(InputTranscoder::LexiconPathTrie *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;

  v2 = *((_QWORD *)this + 13);
  v1 = *((_QWORD *)this + 14);
  if (v2 == v1)
    return 1;
  v3 = v2 + 16;
  do
  {
    result = *(_BYTE *)(v3 - 8) != 0;
    if (*(_BYTE *)(v3 - 8))
      v5 = v3 == v1;
    else
      v5 = 1;
    v3 += 16;
  }
  while (!v5);
  return result;
}

double InputTranscoder::LexiconPathTrie::getLexiconConditionalProbability(InputTranscoder::LexiconPathTrie *this)
{
  uint64_t v1;
  uint64_t v2;
  float v4;
  float v5;
  double v6;
  float v7;
  float v8;
  float v9;
  double v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 14);
  if (v1 == v2)
  {
    v10 = -1.79769313e308;
    v11 = *((_QWORD *)this + 13);
  }
  else
  {
    v4 = -INFINITY;
    do
    {
      if (*(_BYTE *)(v1 + 8))
        v5 = (*(float (**)(InputTranscoder::LexiconPathTrie *))(*(_QWORD *)this + 64))(this);
      else
        v5 = 1.0;
      LXCursorConditionalProbability();
      v7 = logf(v5) + v6 * 2.30258512;
      if (v4 == -INFINITY)
      {
        v4 = v7;
      }
      else if (v7 != -INFINITY)
      {
        if (v4 >= v7)
          v8 = v4;
        else
          v8 = v7;
        if (v4 < v7)
          v7 = v4;
        v9 = expf(v7 - v8);
        v4 = v8 + log1pf(v9);
      }
      v1 += 16;
    }
    while (v1 != v2);
    v10 = v4;
    v1 = *((_QWORD *)this + 13);
    v11 = *((_QWORD *)this + 14);
  }
  return v10 - logf((float)(unint64_t)((v11 - v1) >> 4));
}

double InputTranscoder::LexiconPathTrie::getLexiconTerminationProbability(InputTranscoder::LexiconPathTrie *this)
{
  uint64_t v1;
  uint64_t v2;
  float v4;
  float v5;
  double v6;
  float v7;
  float v8;
  float v9;
  double v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 14);
  if (v1 == v2)
  {
    v10 = -1.79769313e308;
    v11 = *((_QWORD *)this + 13);
  }
  else
  {
    v4 = -INFINITY;
    do
    {
      if (*(_BYTE *)(v1 + 8))
        v5 = (*(float (**)(InputTranscoder::LexiconPathTrie *))(*(_QWORD *)this + 64))(this);
      else
        v5 = 1.0;
      LXCursorTerminationProbability();
      v7 = logf(v5) + v6 * 2.30258512;
      if (v4 == -INFINITY)
      {
        v4 = v7;
      }
      else if (v7 != -INFINITY)
      {
        if (v4 >= v7)
          v8 = v4;
        else
          v8 = v7;
        if (v4 < v7)
          v7 = v4;
        v9 = expf(v7 - v8);
        v4 = v8 + log1pf(v9);
      }
      v1 += 16;
    }
    while (v1 != v2);
    v10 = v4;
    v1 = *((_QWORD *)this + 13);
    v11 = *((_QWORD *)this + 14);
  }
  return v10 - logf((float)(unint64_t)((v11 - v1) >> 4));
}

long double InputTranscoder::LexiconPathTrie::getLexiconPrefixProbability(InputTranscoder::LexiconPathTrie *this)
{
  long double v1;
  long double v2;

  v1 = (*(double (**)(InputTranscoder::LexiconPathTrie *))(*(_QWORD *)this + 40))(this);
  v2 = exp(v1);
  return log(1.0 - v2 + 2.22044605e-16);
}

uint64_t InputTranscoder::PathTrie::isValidWord(InputTranscoder::PathTrie *this)
{
  return 0;
}

double InputTranscoder::PathTrie::getLexiconConditionalProbability(InputTranscoder::PathTrie *this)
{
  return 0.0;
}

double InputTranscoder::PathTrie::getLexiconTerminationProbability(InputTranscoder::PathTrie *this)
{
  return 0.0;
}

double InputTranscoder::PathTrie::getLexiconPrefixProbability(InputTranscoder::PathTrie *this)
{
  return 0.0;
}

float InputTranscoder::PathTrie::getDynamicLexiconWeight(InputTranscoder::PathTrie *this)
{
  return 0.0;
}

uint64_t InputTranscoder::PathTrie::containsOnlyDynamicLexiconCursors(InputTranscoder::PathTrie *this)
{
  return 0;
}

void InputTranscoder::LexiconPathTrie::~LexiconPathTrie(InputTranscoder::LexiconPathTrie *this)
{
  void **v2;

  *(_QWORD *)this = off_24F110ED8;
  v2 = (void **)((char *)this + 104);
  std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v2);
  InputTranscoder::PathTrie::~PathTrie(this);
}

{
  void **v2;

  *(_QWORD *)this = off_24F110ED8;
  v2 = (void **)((char *)this + 104);
  std::vector<std::pair<nlp::CFScopedPtr<_LXCursor const*>,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v2);
  InputTranscoder::PathTrie::~PathTrie(this);
  MEMORY[0x22E2B18DC]();
}

float InputTranscoder::LexiconPathTrie::getDynamicLexiconWeight(InputTranscoder::LexiconPathTrie *this)
{
  return *(float *)(*((_QWORD *)this + 12) + 168);
}

void std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

std::string *InputTranscoder::CTCSurfaceFormOutput::CTCSurfaceFormOutput(std::string *this, __int128 *a2, std::string::value_type a3, std::string::value_type a4, std::string::value_type a5, std::string::value_type a6, double a7)
{
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(double *)&this[2].__r_.__value_.__l.__data_ = a7;
  this[2].__r_.__value_.__s.__data_[8] = a3;
  this[2].__r_.__value_.__s.__data_[9] = a4;
  this[2].__r_.__value_.__s.__data_[10] = a5;
  this[2].__r_.__value_.__s.__data_[11] = a6;
  HIDWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

void std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

os_log_t ___ZN15InputTranscoderL6loggerEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.InputTranscoder", "PathTrie");
  _MergedGlobals = (uint64_t)result;
  return result;
}

void InputTranscoder::createInternalLanguageModel(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *CFStringFromString;
  const __CFAllocator *v4;
  CFLocaleRef v5;
  const __CFURL *v6;
  const __CFURL *v7;
  CFStringRef PathComponent;
  CFURLRef v9;
  CFURLRef v10;
  __CFDictionary *Mutable;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const __CFString *v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  CFTypeRef cf;
  CFLocaleRef v26;
  const __CFString *v27;
  uint8_t buf[4];
  const __CFString *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  CFStringFromString = nlp::createCFStringFromString(a1);
  v27 = CFStringFromString;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFStringFromString);
  v26 = v5;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3002000000;
  v23 = __Block_byref_object_copy__0;
  v24 = __Block_byref_object_dispose__0;
  cf = 0;
  InputTranscoder::enumerateLDAssets();
  v6 = (const __CFURL *)v21[5];
  if (v6)
  {
    v7 = CFURLCreateCopyDeletingPathExtension(v4, v6);
    PathComponent = CFURLCopyLastPathComponent(v7);
    v9 = CFURLCreateCopyDeletingLastPathComponent(v4, (CFURLRef)v21[5]);
    v10 = v9;
    if (v7 && PathComponent && v9)
    {
      Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEB8], v5);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE70], PathComponent);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE80], v10);
      v12 = (const void *)*MEMORY[0x24BDBD268];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEE0], (const void *)*MEMORY[0x24BDBD268]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EE60], v12);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE5EEB0], v12);
      v13 = LMLanguageModelCreate();
      if (v13)
      {
        v14 = (_QWORD *)operator new();
        *v14 = v13;
      }
      else
      {
        if (qword_253F89F08 != -1)
          dispatch_once(&qword_253F89F08, &__block_literal_global_0);
        v17 = _MergedGlobals_0;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_0, OS_LOG_TYPE_ERROR))
        {
          v19 = (const __CFString *)v21[5];
          *(_DWORD *)buf = 138412290;
          v29 = v19;
          _os_log_error_impl(&dword_228515000, v17, OS_LOG_TYPE_ERROR, "Unable to load language model from bundle URL=%@", buf, 0xCu);
        }
        v14 = 0;
      }
      *a2 = v14;
      if (Mutable)
        CFRelease(Mutable);
    }
    else
    {
      if (qword_253F89F08 != -1)
        dispatch_once(&qword_253F89F08, &__block_literal_global_0);
      v16 = _MergedGlobals_0;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_0, OS_LOG_TYPE_ERROR))
      {
        v18 = (const __CFString *)v21[5];
        *(_DWORD *)buf = 138412290;
        v29 = v18;
        _os_log_error_impl(&dword_228515000, v16, OS_LOG_TYPE_ERROR, "Unable to parse language model bundle URL=%@", buf, 0xCu);
      }
      *a2 = 0;
      if (!v10)
        goto LABEL_26;
    }
    CFRelease(v10);
LABEL_26:
    if (PathComponent)
      CFRelease(PathComponent);
    if (v7)
      CFRelease(v7);
    goto LABEL_30;
  }
  if (qword_253F89F08 != -1)
    dispatch_once(&qword_253F89F08, &__block_literal_global_0);
  v15 = _MergedGlobals_0;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v29 = CFStringFromString;
    _os_log_error_impl(&dword_228515000, v15, OS_LOG_TYPE_ERROR, "Unable to locate internal language model for locale=%@", buf, 0xCu);
  }
  *a2 = 0;
LABEL_30:
  _Block_object_dispose(&v20, 8);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_228521664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL InputTranscoder::isSyllableLanguageModel(const __CFString *this, const __CFString *a2, const __CFURL *a3)
{
  _BOOL8 v4;
  const __CFString *PathComponent;

  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BE5F7E0], 0))
    return 0;
  PathComponent = CFURLCopyLastPathComponent((CFURLRef)a2);
  v4 = CFStringCompare(PathComponent, CFSTR("syllablenew.lm"), 0) == kCFCompareEqualTo;
  if (PathComponent)
    CFRelease(PathComponent);
  return v4;
}

void sub_2285217AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL InputTranscoder::isKanaCharacterLanguageModel(const __CFString *this, const __CFString *a2, const __CFURL *a3)
{
  _BOOL8 v4;
  const __CFString *PathComponent;

  if (CFStringCompare(this, (CFStringRef)*MEMORY[0x24BE5F7C8], 0))
    return 0;
  PathComponent = CFURLCopyLastPathComponent((CFURLRef)a2);
  v4 = CFStringCompare(PathComponent, CFSTR("kana.lm"), 0) == kCFCompareEqualTo;
  if (PathComponent)
    CFRelease(PathComponent);
  return v4;
}

void sub_228521844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL InputTranscoder::isCharacterLanguageModel(const __CFString *this, const __CFString *a2, const __CFURL *a3)
{
  return CFStringCompare(this, (CFStringRef)*MEMORY[0x24BE5F7C8], 0) == kCFCompareEqualTo;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(a1 + 40), 0);
}

void ___ZN15InputTranscoder27createInternalLanguageModelERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  if ((*(unsigned int (**)(uint64_t))(a1 + 40))(a5))
  {
    nlp::CFScopedPtr<__CFURL const*>::acquire((const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    if (a6)
      *a6 = 1;
  }
}

os_log_t ___ZN15InputTranscoderL6loggerEv_block_invoke_0()
{
  os_log_t result;

  result = os_log_create("com.apple.InputTranscoder", "LanguageModelFactory");
  _MergedGlobals_0 = (uint64_t)result;
  return result;
}

InputTranscoder::TranscoderConfiguration *InputTranscoder::TouchTranscoderImpl::TouchTranscoderImpl(InputTranscoder::TranscoderConfiguration *a1, const InputTranscoder::TranscoderConfiguration *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  InputTranscoder::TranscoderConfiguration *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  result = InputTranscoder::TranscoderConfiguration::TranscoderConfiguration(a1, a2);
  v9 = a3[1];
  *((_QWORD *)result + 55) = *a3;
  *((_QWORD *)result + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a4[1];
  *((_QWORD *)result + 57) = *a4;
  *((_QWORD *)result + 58) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a5[1];
  *((_QWORD *)result + 59) = *a5;
  *((_QWORD *)result + 60) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  return result;
}

uint64_t InputTranscoder::TouchTranscoderImpl::makeSession@<X0>(InputTranscoder::TouchTranscoderImpl *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v4 = (_QWORD *)((char *)this + 440);
  v5 = (_QWORD *)((char *)this + 456);
  v6 = (_QWORD *)((char *)this + 472);
  v7 = operator new();
  result = InputTranscoder::TouchTranscoderSessionImpl::TouchTranscoderSessionImpl(v7, (uint64_t)this, v4, v5, v6);
  *a2 = v7;
  return result;
}

void sub_228521A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B18DC](v1, 0x10F2C408DADF109);
  _Unwind_Resume(a1);
}

_QWORD *InputTranscoder::TouchTranscoderImpl::addLexicon(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 472);
  v5[0] = &off_24F1110A8;
  v5[1] = a2;
  v6 = v5;
  InputTranscoder::LexiconContainer::addLexicon((_QWORD *)(*(_QWORD *)(v2 + 16) + 192), a2, 1);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_228521AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *InputTranscoder::TouchTranscoderImpl::removeLexicon(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;
  _QWORD *result;
  uint64_t v6;
  const void *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 472);
  v8[0] = &off_24F111128;
  v8[1] = a2;
  v9 = v8;
  v3 = *(_QWORD *)(v2 + 16);
  v7 = a2;
  v4 = std::remove[abi:ne180100]<std::__wrap_iter<nlp::CFScopedPtr<_LXLexicon const*> *>,_LXLexicon const*>(*(const void ***)(v3 + 208), *(const void ***)(v3 + 216), &v7);
  std::vector<nlp::CFScopedPtr<_LXLexicon const*>>::erase(v3 + 208, v4, *(const void ***)(v3 + 216));
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_228521BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(InputTranscoder::TouchTranscoderImpl *this)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_24F1111A8;
  v4 = v3;
  MRLNeuralNetworkClear();
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_228521CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

InputTranscoder::TranscoderConfiguration *InputTranscoder::TranscoderConfiguration::TranscoderConfiguration(InputTranscoder::TranscoderConfiguration *this, const InputTranscoder::TranscoderConfiguration *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = InputTranscoder::CommonConfiguration::CommonConfiguration((std::string *)this, a2);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 104);
    v4[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v4[4].__r_.__value_.__r.__words[1] = v5;
  }
  v6 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 8);
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
  v8 = *(_OWORD *)((char *)a2 + 168);
  v9 = *(_OWORD *)((char *)a2 + 184);
  v10 = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)((char *)this + 200) = v10;
  *(_OWORD *)((char *)this + 184) = v9;
  *(_OWORD *)((char *)this + 168) = v8;
  v11 = *(_OWORD *)((char *)a2 + 232);
  v12 = *(_OWORD *)((char *)a2 + 248);
  v13 = *(_OWORD *)((char *)a2 + 264);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *(_OWORD *)((char *)this + 264) = v13;
  *(_OWORD *)((char *)this + 248) = v12;
  *(_OWORD *)((char *)this + 232) = v11;
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 12, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v14 = *((_OWORD *)a2 + 18);
    *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
    *((_OWORD *)this + 18) = v14;
  }
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 13, *((const std::string::value_type **)a2 + 39), *((_QWORD *)a2 + 40));
  }
  else
  {
    v15 = *(_OWORD *)((char *)a2 + 312);
    *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
    *(_OWORD *)((char *)this + 312) = v15;
  }
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, *((const std::string::value_type **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v16 = *((_OWORD *)a2 + 21);
    *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
    *((_OWORD *)this + 21) = v16;
  }
  v17 = *(_OWORD *)((char *)a2 + 360);
  *(_OWORD *)((char *)this + 372) = *(_OWORD *)((char *)a2 + 372);
  *(_OWORD *)((char *)this + 360) = v17;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 49) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 392), *((__int128 **)a2 + 49), *((__int128 **)a2 + 50), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 50) - *((_QWORD *)a2 + 49)) >> 3));
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 416), *((__int128 **)a2 + 52), *((__int128 **)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 53) - *((_QWORD *)a2 + 52)) >> 3));
  return this;
}

void sub_228521EF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 335) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 311) < 0)
    operator delete(*v3);
  InputTranscoder::CTCConfiguration::~CTCConfiguration(v2);
  InputTranscoder::CommonConfiguration::~CommonConfiguration((void **)v1);
  _Unwind_Resume(a1);
}

void InputTranscoder::CommonConfiguration::~CommonConfiguration(void **this)
{
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *InputTranscoder::CommonConfiguration::CommonConfiguration(std::string *this, const InputTranscoder::CommonConfiguration *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
  }
  v6 = (std::string *)((char *)this + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *((_OWORD *)a2 + 5);
  this[4].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 96);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v8;
  return this;
}

void sub_2285220A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1110A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1110A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::operator()(uint64_t a1, uint64_t a2)
{
  InputTranscoder::LexiconContainer::addLexicon((_QWORD *)(a2 + 192), *(CFTypeRef *)(a1 + 8), 1);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::addLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::target_type()
{
}

void std::__function::__func<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F111128;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F111128;
  a2[1] = v2;
  return result;
}

const void **std::__function::__func<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void **v3;
  const void *v5;

  v5 = *(const void **)(a1 + 8);
  v2 = a2 + 208;
  v3 = std::remove[abi:ne180100]<std::__wrap_iter<nlp::CFScopedPtr<_LXLexicon const*> *>,_LXLexicon const*>(*(const void ***)(a2 + 208), *(const void ***)(a2 + 216), &v5);
  return std::vector<nlp::CFScopedPtr<_LXLexicon const*>>::erase(v2, v3, *(const void ***)(v2 + 8));
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::removeLexicon(_LXLexicon const*)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::target_type()
{
}

void std::__function::__func<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0>,void ()(InputTranscoder::MontrealModel &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0>,void ()(InputTranscoder::MontrealModel &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24F1111A8;
  return result;
}

void std::__function::__func<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0>,void ()(InputTranscoder::MontrealModel &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F1111A8;
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0>,void ()(InputTranscoder::MontrealModel &)>::operator()()
{
  return MRLNeuralNetworkClear();
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0>,void ()(InputTranscoder::MontrealModel &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0,std::allocator<InputTranscoder::TouchTranscoderImpl::clearNeuralNetworkBuffer(void)::$_0>,void ()(InputTranscoder::MontrealModel &)>::target_type()
{
}

void InputTranscoder::PathResampler::~PathResampler(InputTranscoder::PathResampler *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
}

uint64_t InputTranscoder::TouchTranscoderSessionImpl::TouchTranscoderSessionImpl(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  InputTranscoder::TranscoderConfiguration *v10;
  uint64_t **v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v28;
  char v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v10 = InputTranscoder::TranscoderConfiguration::TranscoderConfiguration((InputTranscoder::TranscoderConfiguration *)a1, (const InputTranscoder::TranscoderConfiguration *)a2);
  *((_QWORD *)v10 + 55) = 0x402E000000000000;
  *((_DWORD *)v10 + 112) = 2;
  *((_BYTE *)v10 + 452) = 1;
  *((_QWORD *)v10 + 57) = 0x3FE0000000000000;
  *((_BYTE *)v10 + 464) = 0;
  *(_QWORD *)((char *)v10 + 572) = 0;
  *(_OWORD *)((char *)v10 + 472) = 0u;
  *(_OWORD *)((char *)v10 + 488) = 0u;
  *(_OWORD *)((char *)v10 + 504) = 0u;
  *(_OWORD *)((char *)v10 + 520) = 0u;
  *(_OWORD *)((char *)v10 + 536) = 0u;
  *(_OWORD *)((char *)v10 + 552) = 0u;
  *((_BYTE *)v10 + 568) = 0;
  v11 = (uint64_t **)(a2 + 336);
  v12 = *(unsigned __int8 *)(a2 + 359);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 344);
  switch(v12)
  {
    case 8:
      if (v13 >= 0)
        v14 = (uint64_t *)(a2 + 336);
      else
        v14 = *v11;
      if (*v14 != 0x79654B69746C754DLL)
        goto LABEL_34;
      v15 = 3;
      break;
    case 10:
      if (v13 >= 0)
        v16 = (uint64_t *)(a2 + 336);
      else
        v16 = *v11;
      v17 = *v16;
      v18 = *((unsigned __int16 *)v16 + 4);
      if (v17 == 0x4B7473657261654ELL && v18 == 31077)
        goto LABEL_37;
      goto LABEL_34;
    case 12:
      if (v13 >= 0)
        v20 = (uint64_t *)(a2 + 336);
      else
        v20 = *v11;
      v21 = *v20;
      v22 = *((_DWORD *)v20 + 2);
      if (v21 != 0x6E69736F6C636E45 || v22 != 2036681575)
        goto LABEL_34;
      v15 = 2;
      break;
    case 15:
      if (v13 >= 0)
        v24 = (uint64_t *)(a2 + 336);
      else
        v24 = *v11;
      v25 = *v24;
      v26 = *(uint64_t *)((char *)v24 + 7);
      if (v25 != 0x4B7473657261654ELL || v26 != 0x6B6E55724F79654BLL)
        goto LABEL_34;
      v15 = 1;
      break;
    default:
LABEL_34:
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v28 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 359) >= 0)
          v46 = a2 + 336;
        else
          v46 = *(_QWORD *)(a2 + 336);
        v47 = 136315138;
        v48 = v46;
        _os_log_error_impl(&dword_228515000, v28, OS_LOG_TYPE_ERROR, "Invalid key matching policy: '%s'. Using NearestKey...", (uint8_t *)&v47, 0xCu);
      }
LABEL_37:
      v15 = 0;
      break;
  }
  v29 = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 584) = &off_24F111B88;
  *(_QWORD *)(a1 + 592) = *a3;
  v30 = a3[1];
  *(_QWORD *)(a1 + 600) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(_QWORD *)(a1 + 608) = *a5;
  v33 = a5[1];
  *(_QWORD *)(a1 + 616) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_DWORD *)(a1 + 624) = v15;
  *(_BYTE *)(a1 + 628) = v29;
  *(_QWORD *)(a1 + 632) = *a3;
  v36 = a3[1];
  *(_QWORD *)(a1 + 640) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)(a1 + 648) = *a4;
  v39 = a4[1];
  *(_QWORD *)(a1 + 656) = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  *(_QWORD *)(a1 + 664) = *a5;
  v42 = a5[1];
  *(_QWORD *)(a1 + 672) = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  InputTranscoder::RecognizerFactory::makeRecognizer((_DWORD *)(a1 + 80), (_QWORD *)(a1 + 680));
  *(_WORD *)(a1 + 833) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  return a1;
}

void sub_228522748(_Unwind_Exception *a1)
{
  uint64_t v1;
  InputTranscoder::PathResampler *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](v7);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](v6);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](v5);
  *(_QWORD *)(v1 + 584) = v8 + 16;
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](v3);
  InputTranscoder::PathResampler::~PathResampler(v2);
  InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration((void **)v1);
  _Unwind_Resume(a1);
}

double InputTranscoder::TouchTranscoderSessionImpl::setLinguisticContext(InputTranscoder::TouchTranscoderSessionImpl *this, const __CFString *a2)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  nlp::getUTF8StringFromCFString(a2, &v5);
  v3 = (void **)((char *)this + 688);
  if (*((char *)this + 711) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *((_QWORD *)this + 88) = v6;
  return result;
}

uint64_t InputTranscoder::TouchTranscoderSessionImpl::clear(uint64_t this)
{
  *(_QWORD *)(this + 480) = *(_QWORD *)(this + 472);
  *(_QWORD *)(this + 504) = *(_QWORD *)(this + 496);
  *(_QWORD *)(this + 528) = *(_QWORD *)(this + 520);
  *(_QWORD *)(this + 552) = *(_QWORD *)(this + 544);
  *(_BYTE *)(this + 568) = 0;
  *(_QWORD *)(this + 572) = 0;
  if (*(char *)(this + 735) < 0)
  {
    **(_BYTE **)(this + 712) = 0;
    *(_QWORD *)(this + 720) = 0;
  }
  else
  {
    *(_BYTE *)(this + 712) = 0;
    *(_BYTE *)(this + 735) = 0;
  }
  if (*(char *)(this + 759) < 0)
  {
    **(_BYTE **)(this + 736) = 0;
    *(_QWORD *)(this + 744) = 0;
  }
  else
  {
    *(_BYTE *)(this + 736) = 0;
    *(_BYTE *)(this + 759) = 0;
  }
  return this;
}

void InputTranscoder::TouchTranscoderSessionImpl::typingModeString(InputTranscoder::TouchTranscoderSessionImpl *this, uint64_t a2)
{
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;

  if (!a2)
  {
    v3 = "ContinuousPath";
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v3 = "TapTyping";
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(this, v3);
    return;
  }
  std::to_string(&v6, a2);
  v4 = std::string::insert(&v6, 0, "Unknown typing mode: ", 0x15uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *((_QWORD *)this + 2) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
  *(_OWORD *)this = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_22852291C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::TouchTranscoderSessionImpl::addEventWithKeyInfo(uint64_t a1, unint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  _QWORD *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  InputTranscoder::PathResampler *v22;
  uint64_t v23;
  double v24;
  double v25;
  const __CFString *v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  const char *v30;
  NSObject *v31;
  uint32_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  _BYTE *v37;
  char *v38;
  void **v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  void **v44;
  void **v45;
  NSObject *v46;
  std::string::size_type v47;
  int v48;
  const uint8_t *v49;
  uint64_t v50;
  uint64_t *v51;
  NSObject *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60[2];
  char v61;
  void *__p[2];
  char v63;
  _BYTE buf[24];
  double v65;
  _BYTE v66[30];
  __int16 v67;
  void **v68;
  _BYTE v69[12];
  __int16 v70;
  void **v71;
  __int16 v72;
  void **v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD **)(a1 + 664);
  v15 = COERCE_DOUBLE(operator new(0x20uLL));
  **(_QWORD **)&v15 = &off_24F111330;
  *(_QWORD *)(*(_QWORD *)&v15 + 8) = InputTranscoder::getScaledPoint;
  *(double *)(*(_QWORD *)&v15 + 16) = a4;
  *(double *)(*(_QWORD *)&v15 + 24) = a5;
  v65 = v15;
  v16 = (*(double (**)(_QWORD, double, double))(*(_QWORD *)*v14 + 32))(*v14, a4, a5);
  v18 = v17;
  v19 = v65;
  if (*(_BYTE **)&v65 == buf)
  {
    v20 = 4;
    v19 = COERCE_DOUBLE(buf);
    goto LABEL_5;
  }
  if (v65 != 0.0)
  {
    v20 = 5;
LABEL_5:
    (*(void (**)(void))(**(_QWORD **)&v19 + 8 * v20))();
  }
  if (qword_253F89F18 != -1)
    dispatch_once(&qword_253F89F18, &__block_literal_global_1);
  v21 = _MergedGlobals_1;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
  {
    v37 = v69;
    InputTranscoder::TouchTranscoderSessionImpl::typingModeString((InputTranscoder::TouchTranscoderSessionImpl *)v69, *(_QWORD *)(a1 + 88));
    if (v72 < 0)
      v37 = *(_BYTE **)v69;
    if (a2 > 6)
      v38 = "unknown";
    else
      v38 = off_24F111960[a2];
    std::string::basic_string[abi:ne180100]<0>(__p, v38);
    if (v63 >= 0)
      v39 = __p;
    else
      v39 = (void **)__p[0];
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = v37;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a4;
    *(_WORD *)&buf[22] = 2048;
    v65 = a5;
    *(_WORD *)v66 = 2048;
    *(double *)&v66[2] = v16;
    *(_WORD *)&v66[10] = 2048;
    *(double *)&v66[12] = v18;
    *(_WORD *)&v66[20] = 2048;
    *(double *)&v66[22] = a6;
    v67 = 2080;
    v68 = v39;
    _os_log_debug_impl(&dword_228515000, v21, OS_LOG_TYPE_DEBUG, "%s x=%f, y=%f, x_scaled=%f, y_scaled=%f timestamp=%f, phase=%s", buf, 0x48u);
    if (v63 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v72) < 0)
      operator delete(*(void **)v69);
  }
  v22 = (InputTranscoder::PathResampler *)(a1 + 440);
  v23 = *(_QWORD *)(a1 + 528);
  if (*(_QWORD *)(a1 + 520) == v23)
  {
    v25 = 0.0;
  }
  else
  {
    v24 = *(double *)(v23 - 32);
    v25 = v24 + hypot(v16 - *(double *)(v23 - 64), v18 - *(double *)(v23 - 56));
  }
  *(double *)buf = v16;
  *(double *)&buf[8] = v18;
  *(double *)&buf[16] = a6;
  v65 = a7;
  *(double *)v66 = v25;
  *(_QWORD *)&v66[8] = a2;
  *(_QWORD *)&v66[16] = 0;
  *(_DWORD *)&v66[23] = 0;
  if (!*(_QWORD *)(a1 + 88))
  {
    InputTranscoder::PathResampler::append_and_resample(a1 + 440, (__int128 *)buf);
    goto LABEL_103;
  }
  v26 = *(const __CFString **)(a3 + 48);
  if (v26 && CFStringGetLength(v26) >= 1)
  {
    nlp::getUTF8StringFromCFString(*(const __CFString **)(a3 + 48), __p);
    if (qword_253F89F18 != -1)
      dispatch_once(&qword_253F89F18, &__block_literal_global_1);
    v27 = _MergedGlobals_1;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
    {
      InputTranscoder::TouchTranscoderSessionImpl::typingModeString((InputTranscoder::TouchTranscoderSessionImpl *)v60, *(_QWORD *)(a1 + 88));
      if (v61 >= 0)
        v44 = v60;
      else
        v44 = (void **)v60[0];
      v45 = __p;
      if (v63 < 0)
        v45 = (void **)__p[0];
      *(_DWORD *)v69 = 136315650;
      *(_QWORD *)&v69[4] = "getKeyClassForTouchEvent";
      v70 = 2080;
      v71 = v44;
      v72 = 2080;
      v73 = v45;
      _os_log_debug_impl(&dword_228515000, v27, OS_LOG_TYPE_DEBUG, "%s: %s TouchKeyInfo.string = %s", v69, 0x20u);
      if (v61 < 0)
        operator delete(v60[0]);
    }
    v28 = InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(a1 + 584, a3);
    if (v63 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v28 = InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch(a1 + 584, (__int128 *)buf);
  }
  switch(v28)
  {
    case 1:
      InputTranscoder::PathResampler::append_and_resample(a1 + 440, (__int128 *)buf);
      goto LABEL_103;
    case 2:
      v66[26] = 1;
      v66[24] = 1;
      InputTranscoder::PathResampler::append_and_resample(a1 + 440, (__int128 *)buf);
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v33 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v69 = 0;
        v30 = "Shift Key - added to path for model to handle.";
        v31 = v33;
        v32 = 2;
        goto LABEL_70;
      }
      goto LABEL_103;
    case 3:
      if (*(_QWORD *)&v66[8] != 2)
        goto LABEL_103;
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v34 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v69 = 0;
        _os_log_debug_impl(&dword_228515000, v34, OS_LOG_TYPE_DEBUG, "Space Key - clearing up the touches.", v69, 2u);
      }
      InputTranscoder::TouchTranscoderSessionImpl::clear(a1);
      if (*(char *)(a1 + 863) < 0)
      {
        if (!*(_QWORD *)(a1 + 848))
          goto LABEL_103;
      }
      else if (!*(_BYTE *)(a1 + 863))
      {
        goto LABEL_103;
      }
      v40 = (_QWORD *)(a1 + 840);
      std::string::append((std::string *)(a1 + 840), 1uLL, 32);
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v41 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a1 + 863) < 0)
          v40 = (_QWORD *)*v40;
        *(_DWORD *)v69 = 136315138;
        *(_QWORD *)&v69[4] = v40;
        v30 = "Appended space to Previous Word=[%s]";
        v31 = v41;
        v32 = 12;
        goto LABEL_70;
      }
      goto LABEL_103;
    case 4:
      if (*(_QWORD *)&v66[8] != 2)
        goto LABEL_103;
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v35 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v69 = 0;
        _os_log_debug_impl(&dword_228515000, v35, OS_LOG_TYPE_DEBUG, "Delete Key - processing delete key.", v69, 2u);
      }
      if (*(_QWORD *)(a1 + 520) != *(_QWORD *)(a1 + 528))
      {
        if (qword_253F89F18 != -1)
          dispatch_once(&qword_253F89F18, &__block_literal_global_1);
        v36 = _MergedGlobals_1;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
        {
          v55 = (uint64_t)(*(_QWORD *)(a1 + 528) - *(_QWORD *)(a1 + 520)) >> 6;
          *(_DWORD *)v69 = 134217984;
          *(_QWORD *)&v69[4] = v55;
          _os_log_debug_impl(&dword_228515000, v36, OS_LOG_TYPE_DEBUG, "Delete Key - deleting last path(touch-down to touch-up) from path_resampler. raw path size = %lu", v69, 0xCu);
        }
        InputTranscoder::PathResampler::pop_last_path((InputTranscoder::PathResampler *)(a1 + 440));
        goto LABEL_103;
      }
      v42 = (__int128 *)(a1 + 712);
      if (*(char *)(a1 + 735) < 0)
        v43 = *(_QWORD *)(a1 + 720);
      else
        v43 = *(unsigned __int8 *)(a1 + 735);
      if (!v43)
      {
        if (*(char *)(a1 + 863) < 0)
          v50 = *(_QWORD *)(a1 + 848);
        else
          v50 = *(unsigned __int8 *)(a1 + 863);
        if (v50)
        {
          if (qword_253F89F18 != -1)
            dispatch_once(&qword_253F89F18, &__block_literal_global_1);
          v51 = (uint64_t *)(a1 + 840);
          v52 = _MergedGlobals_1;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
          {
            v58 = a1 + 840;
            if (*(char *)(a1 + 863) < 0)
              v58 = *v51;
            *(_DWORD *)v69 = 136315138;
            *(_QWORD *)&v69[4] = v58;
            _os_log_debug_impl(&dword_228515000, v52, OS_LOG_TYPE_DEBUG, "Delete Key - restoring previousWord %s as prefix", v69, 0xCu);
          }
          v53 = *(_QWORD *)(a1 + 728);
          v54 = *v42;
          *v42 = *(_OWORD *)v51;
          *(_QWORD *)(a1 + 728) = *(_QWORD *)(a1 + 856);
          *(_OWORD *)v51 = v54;
          *(_QWORD *)(a1 + 856) = v53;
        }
        goto LABEL_103;
      }
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v46 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        v57 = a1 + 712;
        if (*(char *)(a1 + 735) < 0)
          v57 = *(_QWORD *)v42;
        *(_DWORD *)v69 = 136315138;
        *(_QWORD *)&v69[4] = v57;
        _os_log_debug_impl(&dword_228515000, v46, OS_LOG_TYPE_DEBUG, "Delete Key - deleting the last char from prefix %s", v69, 0xCu);
      }
      if (*(char *)(a1 + 735) < 0)
      {
        v49 = *(const uint8_t **)(a1 + 712);
        v47 = *(int *)(a1 + 720) - 1;
        LODWORD(__p[0]) = *(_DWORD *)(a1 + 720) - 1;
        v48 = (char)v49[v47];
        if (v48 < 0)
          goto LABEL_91;
LABEL_93:
        std::string::resize((std::string *)(a1 + 712), v47, 0);
        goto LABEL_103;
      }
      v47 = *(unsigned __int8 *)(a1 + 735) - 1;
      LODWORD(__p[0]) = *(unsigned __int8 *)(a1 + 735) - 1;
      v48 = *((char *)v42 + v47);
      if ((v48 & 0x80000000) == 0)
        goto LABEL_93;
      v49 = (const uint8_t *)(a1 + 712);
LABEL_91:
      if ((utf8_prevCharSafeBody(v49, 0, (int32_t *)__p, v48, -1) & 0x80000000) == 0)
      {
        v47 = SLODWORD(__p[0]);
        goto LABEL_93;
      }
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v56 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 735) >= 0)
          v59 = a1 + 712;
        else
          v59 = *(_QWORD *)(a1 + 712);
        *(_DWORD *)v69 = 136315394;
        *(_QWORD *)&v69[4] = "popLastCharacter";
        v70 = 2080;
        v71 = (void **)v59;
        _os_log_error_impl(&dword_228515000, v56, OS_LOG_TYPE_ERROR, "%s: failed for %s", v69, 0x16u);
      }
LABEL_103:
      if (a2 == 2)
        InputTranscoder::PathResampler::finalize(v22);
      return;
    default:
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v29 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v69 = 67109120;
        *(_DWORD *)&v69[4] = v28;
        v30 = "key_class = %d not supported!";
        v31 = v29;
        v32 = 8;
LABEL_70:
        _os_log_debug_impl(&dword_228515000, v31, OS_LOG_TYPE_DEBUG, v30, v69, v32);
      }
      goto LABEL_103;
  }
}

void sub_2285232B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::getScaledPoint(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void InputTranscoder::TouchTranscoderSessionImpl::setPrefix(std::string *this, const __CFString *a2)
{
  void **v3;
  std::string::pointer data;
  std::string::value_type *v5;
  unsigned int v6;
  int v7;
  NSObject *v8;
  std::string *v9;
  uint64_t v10;
  std::string::value_type *v11;
  __int128 v12;
  std::string::size_type v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  nlp::getUTF8StringFromCFString(a2, &v12);
  v3 = (void **)&this[29].__r_.__value_.__r.__words[2];
  if (this[30].__r_.__value_.__s.__data_[15] < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = v12;
  this[30].__r_.__value_.__l.__size_ = v13;
  if (this[30].__r_.__value_.__s.__data_[15] < 0)
  {
    data = this[30].__r_.__value_.__l.__data_;
    if (!data)
      return;
    v5 = (std::string::value_type *)*v3;
  }
  else
  {
    data = (std::string::pointer)this[30].__r_.__value_.__s.__data_[15];
    if (!this[30].__r_.__value_.__s.__data_[15])
      return;
    v5 = &this[29].__r_.__value_.__s.__data_[16];
  }
  v6 = data[(_QWORD)v5 - 1];
  if ((v6 & 0x80000000) != 0)
    v7 = __maskrune(v6, 0x4000uLL);
  else
    v7 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v6 + 60) & 0x4000;
  if (v7)
  {
    if (qword_253F89F18 != -1)
      dispatch_once(&qword_253F89F18, &__block_literal_global_1);
    v8 = _MergedGlobals_1;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
    {
      v11 = &this[29].__r_.__value_.__s.__data_[16];
      if (this[30].__r_.__value_.__s.__data_[15] < 0)
        v11 = (std::string::value_type *)*v3;
      LODWORD(v12) = 136315138;
      *(_QWORD *)((char *)&v12 + 4) = v11;
      _os_log_debug_impl(&dword_228515000, v8, OS_LOG_TYPE_DEBUG, "sync_with_input_from_UI detected. Pushing prefix %s to previousWord.", (uint8_t *)&v12, 0xCu);
    }
    v9 = this + 35;
    std::string::operator=(this + 35, (std::string *)((char *)this + 712));
    if (SHIBYTE(this[35].__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = this[35].__r_.__value_.__l.__size_ - 1;
      v9 = (std::string *)this[35].__r_.__value_.__l.__data_;
      this[35].__r_.__value_.__l.__size_ = v10;
    }
    else
    {
      v10 = HIBYTE(this[35].__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&this[35].__r_.__value_.__s + 23) = v10 & 0x7F;
    }
    v9->__r_.__value_.__s.__data_[v10] = 0;
    if (this[30].__r_.__value_.__s.__data_[15] < 0)
    {
      *(_BYTE *)this[29].__r_.__value_.__r.__words[2] = 0;
      this[30].__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      this[29].__r_.__value_.__s.__data_[16] = 0;
      this[30].__r_.__value_.__s.__data_[15] = 0;
    }
  }
}

uint64_t InputTranscoder::TouchTranscoderSessionImpl::textAcceptedFromUI(InputTranscoder::TouchTranscoderSessionImpl *this, const __CFString *a2)
{
  void **v3;
  NSObject *v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    nlp::getUTF8StringFromCFString(a2, &v6);
    v3 = (void **)((char *)this + 840);
    if (*((char *)this + 863) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = v6;
    *((_QWORD *)this + 107) = v7;
    if (qword_253F89F18 != -1)
      dispatch_once(&qword_253F89F18, &__block_literal_global_1);
    v4 = _MergedGlobals_1;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)this + 863) < 0)
        v3 = (void **)*v3;
      LODWORD(v6) = 136315138;
      *(_QWORD *)((char *)&v6 + 4) = v3;
      _os_log_debug_impl(&dword_228515000, v4, OS_LOG_TYPE_DEBUG, "textAcceptedFromUI - Previous Word=[%s]", (uint8_t *)&v6, 0xCu);
    }
    std::string::operator=((std::string *)((char *)this + 808), (const std::string *)((char *)this + 784));
  }
  return InputTranscoder::TouchTranscoderSessionImpl::clear((uint64_t)this);
}

void std::vector<InputTranscoder::CTCSurfaceFormOutput>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  void **v10;
  uint64_t v11;
  __int128 v12;

  if (a2 != a3)
  {
    v3 = a2;
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 != v6)
    {
      v7 = (a3 - a2) >> 6 << 6;
      do
      {
        if (*(char *)(v3 + 23) < 0)
          operator delete(*(void **)v3);
        v8 = (_BYTE *)(v3 + v7);
        v9 = *(_OWORD *)(v3 + v7);
        *(_QWORD *)(v3 + 16) = *(_QWORD *)(v3 + v7 + 16);
        *(_OWORD *)v3 = v9;
        v8[23] = 0;
        *v8 = 0;
        v10 = (void **)(v3 + 24);
        if (*(char *)(v3 + 47) < 0)
          operator delete(*v10);
        v11 = v3 + v7;
        v12 = *(_OWORD *)(v3 + v7 + 24);
        *(_QWORD *)(v3 + 40) = *(_QWORD *)(v3 + v7 + 40);
        *(_OWORD *)v10 = v12;
        *(_BYTE *)(v11 + 47) = 0;
        *(_BYTE *)(v11 + 24) = 0;
        *(_OWORD *)(v3 + 48) = *(_OWORD *)(v3 + v7 + 48);
        v3 += 64;
      }
      while (v3 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v3)
    {
      v5 -= 64;
      std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(v5);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
}

uint64_t InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)const::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL InputTranscoder::CTCSurfaceFormOutputOrderByCondensedFormThenScore(uint64_t a1, uint64_t a2)
{
  const void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v10;
  unsigned __int8 *i;

  v2 = (const void **)(a1 + 24);
  v3 = (void **)(a2 + 24);
  v4 = *(unsigned __int8 *)(a1 + 47);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 47);
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a2 + 47);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 32);
  if (v5 != v6)
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v3) & 0x80u) != 0;
  if (v7 >= 0)
    v10 = (unsigned __int8 *)(a2 + 24);
  else
    v10 = (unsigned __int8 *)*v3;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v2, v10, *(_QWORD *)(a1 + 32)))
      return *(double *)(a1 + 48) > *(double *)(a2 + 48);
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v3) & 0x80u) != 0;
  }
  if (*(_BYTE *)(a1 + 47))
  {
    for (i = (unsigned __int8 *)(a1 + 24); *i == *v10; ++i)
    {
      ++v10;
      if (!--v4)
        return *(double *)(a1 + 48) > *(double *)(a2 + 48);
    }
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v3) & 0x80u) != 0;
  }
  return *(double *)(a1 + 48) > *(double *)(a2 + 48);
}

void InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidates(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFString *Optional;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;
  std::string::size_type size;
  unint64_t v12;
  void **v13;
  std::string *p_s1;
  uint64_t v15;
  BOOL isPresentInLexicon;
  std::string *v17;
  uint64_t v18;
  std::string *p_p;
  _QWORD *v20;
  std::string::size_type v21;
  char *v22;
  std::string *v24;
  void **v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  std::string __s1;
  void *v32[2];
  unsigned __int8 v33;
  void *v34[2];
  unsigned __int8 v35;
  std::string __p;
  std::string v37;
  _QWORD v38[2];
  std::string buf;
  std::string *p_buf;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (qword_253F89F18 != -1)
    dispatch_once(&qword_253F89F18, &__block_literal_global_1);
  v6 = _MergedGlobals_1;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
  {
    InputTranscoder::TouchTranscoderSessionImpl::typingModeString((InputTranscoder::TouchTranscoderSessionImpl *)&__p, *(_QWORD *)(a1 + 88));
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v20 = (_QWORD *)(a1 + 712);
    if (*(char *)(a1 + 735) < 0)
      v20 = (_QWORD *)*v20;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v20;
    _os_log_debug_impl(&dword_228515000, v6, OS_LOG_TYPE_DEBUG, "%s enumerateCandidates - Prefix = %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  Optional = (const __CFString *)InputTranscoder::getOptionalCFType<__CFString const*>(a2, CFSTR("exactTypedString"), &stru_24F112198);
  nlp::getUTF8StringFromCFString(Optional, &buf);
  InputTranscoder::splitAtLastWord((char *)&buf, &__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v8 = (const __CFString *)InputTranscoder::getOptionalCFType<__CFString const*>(a2, CFSTR("previousTypedString"), &stru_24F112198);
  nlp::getUTF8StringFromCFString(v8, v34);
  v9 = (const __CFString *)InputTranscoder::getOptionalCFType<__CFString const*>(a2, CFSTR("previousCandidateString"), &stru_24F112198);
  nlp::getUTF8StringFromCFString(v9, v32);
  InputTranscoder::removeSpace((uint64_t)&__p, &__s1);
  v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v12 = v33;
  if ((v33 & 0x80u) != 0)
    v12 = (unint64_t)v32[1];
  if (size != v12)
    goto LABEL_61;
  if ((v33 & 0x80u) == 0)
    v13 = v32;
  else
    v13 = (void **)v32[0];
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v13, __s1.__r_.__value_.__l.__size_))
      goto LABEL_61;
LABEL_22:
    if (!*(_QWORD *)(a1 + 88) || *(_DWORD *)(a1 + 80) != 4)
      goto LABEL_61;
    v15 = *(_QWORD *)(a1 + 664);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24F111580;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    p_buf = &buf;
    isPresentInLexicon = InputTranscoder::LexiconContainer::isPresentInLexicon(*(_QWORD *)(v15 + 16) + 192, (uint64_t)v34);
    v17 = p_buf;
    if (p_buf == &buf)
    {
      v18 = 4;
      v17 = &buf;
    }
    else
    {
      if (!p_buf)
      {
LABEL_35:
        v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v21 = __p.__r_.__value_.__l.__size_;
        if (v21)
        {
          v22 = (v35 & 0x80u) == 0 ? (char *)v35 : (char *)v34[1];
          if (v22 && !isPresentInLexicon)
          {
            v24 = &buf;
            std::string::basic_string[abi:ne180100]((uint64_t)&buf, (unint64_t)(v22 + 1));
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v24 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((v35 & 0x80u) == 0)
              v25 = v34;
            else
              v25 = (void **)v34[0];
            memmove(v24, v25, (size_t)v22);
            *(_WORD *)&v22[(_QWORD)v24] = 32;
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = &v37;
            else
              v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
            else
              v27 = v37.__r_.__value_.__l.__size_;
            v28 = std::string::append(&buf, (const std::string::value_type *)v26, v27);
            v29 = v28->__r_.__value_.__r.__words[0];
            v38[0] = v28->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
            v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 807) < 0)
              operator delete(*(void **)(a1 + 784));
            *(_QWORD *)(a1 + 784) = v29;
            *(_QWORD *)(a1 + 792) = v38[0];
            *(_QWORD *)(a1 + 799) = *(_QWORD *)((char *)v38 + 7);
            *(_BYTE *)(a1 + 807) = v30;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            *(_BYTE *)(a1 + 834) = 1;
            InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(a1, a2, a3, (uint64_t)&__p);
          }
        }
        goto LABEL_61;
      }
      v18 = 5;
    }
    (*(void (**)(void))(v17->__r_.__value_.__r.__words[0] + 8 * v18))();
    goto LABEL_35;
  }
  if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    goto LABEL_22;
  p_s1 = &__s1;
  while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v13)
  {
    p_s1 = (std::string *)((char *)p_s1 + 1);
    v13 = (void **)((char *)v13 + 1);
    if (!--v10)
      goto LABEL_22;
  }
LABEL_61:
  std::string::operator=((std::string *)(a1 + 784), &v37);
  *(_BYTE *)(a1 + 834) = 0;
  InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(a1, a2, a3, (uint64_t)&__p);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  if ((char)v33 < 0)
    operator delete(v32[0]);
  if ((char)v35 < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_228523C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  InputTranscoder::CTCConfiguration::~CTCConfiguration(&a27);
  _Unwind_Resume(a1);
}

void InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  BOOL v6;
  __int128 v7;
  std::string *v8;
  void **v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  int64x2_t v28;
  NSObject *v29;
  std::string::size_type v30;
  std::string::size_type *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  int v46;
  std::string *v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  std::string::size_type size;
  std::string::size_type v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  __int128 v65;
  void **v66;
  __int128 v67;
  std::string *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void **v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  float v86;
  double v87;
  double v88;
  _QWORD *v89;
  __int128 v90;
  char *v91;
  _QWORD *v92;
  std::string *v93;
  long double v94;
  std::string *v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int64x2_t v103;
  int v104;
  uint64_t v105;
  uint64_t i;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  NSObject *v116;
  std::string *v117;
  _OWORD *v118;
  unint64_t v119;
  __int128 v120;
  void **v121;
  __int128 v122;
  _OWORD *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  std::string *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  _BOOL4 v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  void **v149;
  __int128 v150;
  void **v151;
  __int128 v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  __n128 v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::string::size_type v165;
  _BYTE *v166;
  std::string::size_type v167;
  __int128 v168;
  void **v169;
  __int128 v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  void **v176;
  __int128 v177;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  const std::string::value_type *v183;
  std::string::size_type v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  std::string::size_type v188;
  __int128 v189;
  std::string::size_type v190;
  unint64_t v191;
  std::string *v192;
  _BYTE *v193;
  unint64_t v194;
  uint64_t v195;
  BOOL v196;
  uint64_t j;
  uint64_t v198;
  __int128 v199;
  std::string *v200;
  std::string *v201;
  double v202;
  std::string::value_type v203;
  std::string::value_type v204;
  std::string::value_type v205;
  int v206;
  std::string::value_type v207;
  float v208;
  std::string *v209;
  std::string::size_type v210;
  _QWORD *v211;
  std::string::size_type v212;
  std::string::size_type v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  std::string **v218;
  std::string::size_type v219;
  std::string *v220;
  int64x2_t v221;
  uint64_t v222;
  uint64_t v223;
  std::string::size_type v224;
  NSObject *v225;
  const void **v226;
  const void **v227;
  size_t v228;
  std::string *v229;
  const void *v230;
  std::string *v231;
  std::string::size_type v232;
  NSObject *v233;
  InputTranscoder::CandidateImpl **k;
  std::string::size_type v235;
  NSObject *v236;
  int v237;
  std::string::size_type v238;
  std::string *v239;
  std::string *v240;
  std::string::size_type v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::string::size_type v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  char v250;
  std::string *v251;
  std::string *v252;
  std::string::size_type v253;
  std::string *v254;
  std::string *p_buf;
  std::string::size_type v256;
  _OWORD *v257;
  std::string *v259;
  InputTranscoder *v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  _QWORD v267[2];
  int64x2_t v268;
  uint64_t v269;
  int64x2_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  void *v277;
  _BYTE *v278;
  uint64_t v279;
  std::string v280;
  void *v281;
  _BYTE *v282;
  void *v283;
  void *v284;
  uint64_t v285;
  _OWORD v286[2];
  void *v287;
  _BYTE *v288;
  void *v289;
  void *v290;
  void *v291[3];
  void *v292;
  void *v293;
  uint64_t v294;
  int v295;
  CFDictionaryRef theDict;
  std::string v297;
  std::string __sz;
  _BYTE v299[12];
  __int16 v300;
  std::string *v301;
  std::string v302;
  _BYTE v303[24];
  _BYTE *v304;
  std::string buf;
  std::string __p;
  __int128 v307;
  std::string v308;
  std::string v309;
  std::string *v310;
  std::string v311;
  std::string *v312;
  uint64_t v313;

  v313 = *MEMORY[0x24BDAC8D0];
  theDict = a2;
  v6 = *(_BYTE *)(a1 + 568) == 0;
  v7 = *(_OWORD *)(a1 + 456);
  v286[0] = *(_OWORD *)(a1 + 440);
  v286[1] = v7;
  InputTranscoder::Path::Path((InputTranscoder::Path *)&v287, (const InputTranscoder::Path *)(a1 + 472));
  v260 = (InputTranscoder *)(a1 + 520);
  v262 = a4;
  InputTranscoder::Path::Path((InputTranscoder::Path *)v291, (const InputTranscoder::Path *)(a1 + 520));
  v294 = *(_QWORD *)(a1 + 568);
  v295 = *(_DWORD *)(a1 + 576);
  if (v6)
    InputTranscoder::PathResampler::finalize((InputTranscoder::PathResampler *)v286);
  v263 = a1;
  if (!*(_QWORD *)(a1 + 88) && (unint64_t)(v288 - (_BYTE *)v287) < 0x80)
    goto LABEL_570;
  v8 = (std::string *)(a1 + 784);
  InputTranscoder::toLower(a1 + 784, (uint64_t)&buf);
  v9 = (void **)(a1 + 760);
  if (*(char *)(a1 + 783) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v257 = (_OWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 776) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  if (*(_QWORD *)(a1 + 88) == 1)
  {
    if (*(char *)(a1 + 807) < 0)
    {
      v11 = *(char **)(a1 + 784);
      v10 = *(_QWORD *)(a1 + 792);
      if (!v10)
        goto LABEL_21;
    }
    else
    {
      v10 = *(unsigned __int8 *)(a1 + 807);
      v11 = (char *)(a1 + 784);
      if (!*(_BYTE *)(a1 + 807))
      {
LABEL_21:
        if (*(char *)(v263 + 783) < 0)
          v16 = *(_QWORD *)(v263 + 768);
        else
          v16 = *(unsigned __int8 *)(v263 + 783);
        if (v16 <= 2)
          goto LABEL_570;
        goto LABEL_25;
      }
    }
    v12 = MEMORY[0x24BDAC740];
    do
    {
      v13 = *v11;
      if ((v13 & 0x80000000) != 0)
        v14 = __maskrune(*v11, 0x100uLL);
      else
        v14 = *(_DWORD *)(v12 + 4 * v13 + 60) & 0x100;
      v15 = v13 != 32 && v14 == 0;
      if (v15)
        goto LABEL_570;
      ++v11;
      --v10;
    }
    while (v10);
    goto LABEL_21;
  }
LABEL_25:
  v17 = v263;
  *(_BYTE *)(v263 + 832) = CFDictionaryContainsKey(theDict, CFSTR("normalizeAutoCorrectionsSeparately")) != 0;
  *(_BYTE *)(v263 + 833) = CFDictionaryContainsKey(theDict, CFSTR("appendTopEnumeratedPrefixes")) != 0;
  if (*(char *)(v263 + 807) < 0)
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)(v263 + 784), *(_QWORD *)(v263 + 792));
  else
    v280 = *v8;
  InputTranscoder::InputProcessor::InputProcessor((uint64_t)&v281, (InputTranscoder::PathKeyLayoutProcessor *)(v263 + 584), (uint64_t)&v287, v263, (uint64_t)&v280);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  v277 = 0;
  v278 = 0;
  v279 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v277, v281, (uint64_t)v282, (v282 - (_BYTE *)v281) >> 2);
  if (v278 == v277)
  {
    v19 = 0;
    v18 = 0;
    v275 = 0u;
    v276 = 0u;
  }
  else
  {
    (***(void (****)(__int128 *__return_ptr, _QWORD, void **, _QWORD))(v263 + 680))(&v275, *(_QWORD *)(v263 + 680), &v281, *(_QWORD *)(v263 + 664));
    v18 = *((_QWORD *)&v276 + 1);
    v19 = v276;
  }
  v274 = v275;
  v272 = v19;
  v273 = v18;
  if (!*((_QWORD *)&v275 + 1) && v278 != v277)
  {
    if (_nlpDefaultLog::token != -1)
      dispatch_once(&_nlpDefaultLog::token, &__block_literal_global_2);
    v29 = _nlpDefaultLog::log;
    if (os_log_type_enabled((os_log_t)_nlpDefaultLog::log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_228515000, v29, OS_LOG_TYPE_ERROR, "call to model returned empty probabilities.", (uint8_t *)&buf, 2u);
    }
    goto LABEL_564;
  }
  v270 = 0uLL;
  v271 = 0;
  v268 = 0uLL;
  v269 = 0;
  v266 = 0uLL;
  v267[0] = 0;
  v20 = *(unsigned int *)(v263 + 240);
  if ((_DWORD)v20)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v267;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)v267, v20);
    v23 = *((_QWORD *)&v266 + 1);
    v24 = v266;
    if (*((_QWORD *)&v266 + 1) == (_QWORD)v266)
    {
      v28 = vdupq_n_s64(*((unint64_t *)&v266 + 1));
      v25 = v21;
    }
    else
    {
      v25 = v21;
      do
      {
        v26 = *(_OWORD *)(v23 - 64);
        *((_QWORD *)v25 - 6) = *(_QWORD *)(v23 - 48);
        *((_OWORD *)v25 - 4) = v26;
        *(_QWORD *)(v23 - 56) = 0;
        *(_QWORD *)(v23 - 48) = 0;
        *(_QWORD *)(v23 - 64) = 0;
        v27 = *(_OWORD *)(v23 - 40);
        *((_QWORD *)v25 - 3) = *(_QWORD *)(v23 - 24);
        *(_OWORD *)(v25 - 40) = v27;
        *(_QWORD *)(v23 - 32) = 0;
        *(_QWORD *)(v23 - 24) = 0;
        *(_QWORD *)(v23 - 40) = 0;
        *((_OWORD *)v25 - 1) = *(_OWORD *)(v23 - 16);
        v25 -= 64;
        v23 -= 64;
      }
      while (v23 != v24);
      v28 = (int64x2_t)v266;
    }
    *(_QWORD *)&v266 = v25;
    *((_QWORD *)&v266 + 1) = v21;
    *(int64x2_t *)&buf.__r_.__value_.__r.__words[1] = v28;
    v30 = v267[0];
    v267[0] = &v21[64 * v22];
    __p.__r_.__value_.__r.__words[0] = v30;
    buf.__r_.__value_.__r.__words[0] = v28.i64[0];
    std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)&buf);
  }
  v31 = (std::string::size_type *)(v263 + 712);
  if (*(char *)(v263 + 735) < 0)
  {
    v32 = *(_QWORD *)(v263 + 720);
    if (!v32)
      goto LABEL_61;
    v33 = *v31;
  }
  else
  {
    v32 = *(unsigned __int8 *)(v263 + 735);
    if (!*(_BYTE *)(v263 + 735))
      goto LABEL_61;
    v33 = v263 + 712;
  }
  v34 = *(char *)(v33 + v32 - 1);
  if ((v34 & 0x80000000) != 0)
    v35 = __maskrune(v34, 0x4000uLL);
  else
    v35 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v34 + 60) & 0x4000;
  if (v35)
  {
    if (qword_253F89F18 != -1)
      dispatch_once(&qword_253F89F18, &__block_literal_global_1);
    v36 = _MergedGlobals_1;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
    {
      v256 = v263 + 712;
      if (*(char *)(v263 + 735) < 0)
        v256 = *v31;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"clearPrefixIfEndingWithSpace";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v256;
      _os_log_debug_impl(&dword_228515000, v36, OS_LOG_TYPE_DEBUG, "%s: prefix = [%s]", (uint8_t *)&buf, 0x16u);
    }
    if (*(char *)(v263 + 735) < 0)
    {
      **(_BYTE **)(v263 + 712) = 0;
      *(_QWORD *)(v263 + 720) = 0;
    }
    else
    {
      *(_BYTE *)(v263 + 712) = 0;
      *(_BYTE *)(v263 + 735) = 0;
    }
  }
LABEL_61:
  v37 = *(_QWORD *)(v263 + 664);
  v304 = 0;
  v38 = operator new(0x50uLL);
  *v38 = &off_24F111610;
  v38[1] = v263;
  v38[2] = &v268;
  v38[3] = &theDict;
  v38[4] = v257;
  v38[5] = &v270;
  v38[6] = &v266;
  v38[7] = &v274;
  v38[8] = &v273;
  v38[9] = &v272;
  v304 = v38;
  std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::operator()((uint64_t)v38, *(_QWORD *)(v37 + 16));
  v39 = v304;
  if (v304 == v303)
  {
    v40 = 4;
    v39 = v303;
    goto LABEL_65;
  }
  if (v304)
  {
    v40 = 5;
LABEL_65:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  v41 = v268.i64[1];
  v42 = v268.i64[0];
  if (v268.i64[0] == v268.i64[1])
  {
    if (v270.i64[0] == v270.i64[1])
    {
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v116 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        InputTranscoder::TouchTranscoderSessionImpl::typingModeString((InputTranscoder::TouchTranscoderSessionImpl *)&buf, *(_QWORD *)(v263 + 88));
        v117 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &buf
             : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v311.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v311.__r_.__value_.__r.__words + 4) = (std::string::size_type)v117;
        _os_log_debug_impl(&dword_228515000, v116, OS_LOG_TYPE_DEBUG, "%s decoder returned 0 candidates.", (uint8_t *)&v311, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      goto LABEL_563;
    }
LABEL_90:
    v43 = *(_QWORD *)(v17 + 88);
  }
  else
  {
    v43 = *(_QWORD *)(v263 + 88);
    if (v43 == 1)
    {
      while (1)
      {
        InputTranscoder::removeUnwantedCharacters(v42, &v309);
        InputTranscoder::removeUnwantedCharacters((uint64_t)v8, &__sz);
        v44 = *(_QWORD **)(v17 + 664);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&buf, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          buf = __sz;
        if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v309.__r_.__value_.__l.__data_, v309.__r_.__value_.__l.__size_);
        else
          __p = v309;
        v312 = 0;
        v45 = (char *)operator new(0x38uLL);
        *(_QWORD *)v45 = off_24F1112A0;
        *(std::string *)(v45 + 8) = buf;
        memset(&buf, 0, sizeof(buf));
        *(std::string *)(v45 + 32) = __p;
        memset(&__p, 0, sizeof(__p));
        v312 = (std::string *)v45;
        v46 = (*(uint64_t (**)(_QWORD, char *, char *))(*(_QWORD *)*v44 + 56))(*v44, v45 + 8, v45 + 32);
        v47 = v312;
        v17 = v263;
        if (v312 == &v311)
          break;
        if (v312)
        {
          v48 = 5;
LABEL_78:
          (*(void (**)(void))(v47->__r_.__value_.__r.__words[0] + 8 * v48))();
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        *(_DWORD *)(v42 + 60) = v46;
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__sz.__r_.__value_.__l.__data_);
        if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v309.__r_.__value_.__l.__data_);
        v42 += 64;
        if (v42 == v41)
          goto LABEL_90;
      }
      v47 = &v311;
      v48 = 4;
      goto LABEL_78;
    }
  }
  if (v43)
  {
    if (*(char *)(v17 + 783) < 0)
    {
      std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)(v17 + 760), *(_QWORD *)(v17 + 768));
    }
    else
    {
      *(_OWORD *)&v311.__r_.__value_.__l.__data_ = *v257;
      v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(v263 + 776);
    }
  }
  else
  {
    InputTranscoder::PathResampler::getInflectionPoints((InputTranscoder::PathResampler *)v286, &buf);
    InputTranscoder::PathKeyLayoutProcessor::getInflectionString((_QWORD *)(v263 + 584), (__int128 **)&buf, &v311);
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  v49 = (void **)(v17 + 736);
  if (*(char *)(v17 + 759) < 0)
    operator delete(*v49);
  *(_OWORD *)v49 = *(_OWORD *)&v311.__r_.__value_.__l.__data_;
  v259 = (std::string *)(v17 + 736);
  *(_QWORD *)(v17 + 752) = *((_QWORD *)&v311.__r_.__value_.__l + 2);
  v50 = *(_QWORD *)(v17 + 88);
  v51 = v268.u64[1];
  v52 = v268.i64[0];
  if (v50 || v268.i64[0] == v268.i64[1])
    goto LABEL_120;
  do
  {
    if (*(char *)(v52 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v52, *(_QWORD *)(v52 + 8));
    }
    else
    {
      v53 = *(_OWORD *)v52;
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v53;
    }
    if (*(char *)(v52 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v52 + 24), *(_QWORD *)(v52 + 32));
    }
    else
    {
      v54 = *(_OWORD *)(v52 + 24);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 40);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v54;
    }
    v307 = *(_OWORD *)(v52 + 48);
    v312 = 0;
    v55 = (char *)operator new(0x48uLL);
    *(_QWORD *)v55 = off_24F111500;
    *(std::string *)(v55 + 8) = buf;
    memset(&buf, 0, sizeof(buf));
    *(std::string *)(v55 + 32) = __p;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v55 + 56) = v307;
    v312 = (std::string *)v55;
    InputTranscoder::removeUnwantedCharacters((uint64_t)(v55 + 8), &v309);
    if (*(char *)(v52 + 23) < 0)
      operator delete(*(void **)v52);
    v56 = *(_OWORD *)&v309.__r_.__value_.__l.__data_;
    *(_QWORD *)(v52 + 16) = *((_QWORD *)&v309.__r_.__value_.__l + 2);
    *(_OWORD *)v52 = v56;
    *((_BYTE *)&v309.__r_.__value_.__s + 23) = 0;
    v309.__r_.__value_.__s.__data_[0] = 0;
    v57 = v312;
    if (v312 == &v311)
    {
      v57 = &v311;
      v58 = 4;
    }
    else
    {
      if (!v312)
        goto LABEL_114;
      v58 = 5;
    }
    (*(void (**)(void))(v57->__r_.__value_.__r.__words[0] + 8 * v58))();
LABEL_114:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v52 += 64;
  }
  while (v52 != v51);
  v50 = *(_QWORD *)(v17 + 88);
  v51 = v268.u64[1];
  v52 = v268.i64[0];
LABEL_120:
  if (v52 == v51)
  {
    v70 = v51;
    goto LABEL_171;
  }
  while (2)
  {
    if (*(char *)(v17 + 735) < 0)
    {
      std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)(v17 + 712), *(_QWORD *)(v17 + 720));
    }
    else
    {
      *(_OWORD *)&v311.__r_.__value_.__l.__data_ = *(_OWORD *)v31;
      v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(v263 + 728);
    }
    InputTranscoder::removeUnwantedCharacters((uint64_t)&v311, &__sz);
    if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v311.__r_.__value_.__l.__data_);
    v311 = __sz;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    else
      size = v311.__r_.__value_.__l.__size_;
    if (*(char *)(v52 + 23) < 0)
      v60 = *(_QWORD *)(v52 + 8);
    else
      v60 = *(unsigned __int8 *)(v52 + 23);
    if (size >= v60)
    {
      std::string::basic_string[abi:ne180100]<0>(&__sz, "");
    }
    else
    {
      std::string::basic_string(&v297, (const std::string *)v52, size, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v302);
      InputTranscoder::removeSpace((uint64_t)&v297, &__sz);
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v297.__r_.__value_.__l.__data_);
    }
    if (v50)
    {
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v297, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      else
        v297 = __sz;
    }
    else
    {
      v61 = *(_QWORD **)(v17 + 664);
      if (*(char *)(v52 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v52, *(_QWORD *)(v52 + 8));
      }
      else
      {
        v62 = *(_OWORD *)v52;
        buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v62;
      }
      if (*(char *)(v52 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v52 + 24), *(_QWORD *)(v52 + 32));
      }
      else
      {
        v63 = *(_OWORD *)(v52 + 24);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v63;
      }
      v307 = *(_OWORD *)(v52 + 48);
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v308, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      else
        v308 = __sz;
      v310 = 0;
      v64 = (char *)operator new(0x60uLL);
      *(_QWORD *)v64 = off_24F111480;
      *(std::string *)(v64 + 8) = buf;
      memset(&buf, 0, sizeof(buf));
      *(std::string *)(v64 + 32) = __p;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v64 + 56) = v307;
      v65 = *(_OWORD *)&v308.__r_.__value_.__l.__data_;
      *((_QWORD *)v64 + 11) = *((_QWORD *)&v308.__r_.__value_.__l + 2);
      *(_OWORD *)(v64 + 72) = v65;
      memset(&v308, 0, sizeof(v308));
      v310 = (std::string *)v64;
      (*(void (**)(std::string *__return_ptr, _QWORD, char *))(*(_QWORD *)*v61 + 40))(&v297, *v61, v64 + 72);
      v17 = v263;
    }
    v66 = (void **)(v52 + 24);
    if (*(char *)(v52 + 47) < 0)
      operator delete(*v66);
    v67 = *(_OWORD *)&v297.__r_.__value_.__l.__data_;
    *(_QWORD *)(v52 + 40) = *((_QWORD *)&v297.__r_.__value_.__l + 2);
    *(_OWORD *)v66 = v67;
    *((_BYTE *)&v297.__r_.__value_.__s + 23) = 0;
    v297.__r_.__value_.__s.__data_[0] = 0;
    if (!v50)
    {
      v68 = v310;
      if (v310 == &v309)
      {
        v68 = &v309;
        v69 = 4;
LABEL_157:
        (*(void (**)(void))(v68->__r_.__value_.__r.__words[0] + 8 * v69))();
      }
      else if (v310)
      {
        v69 = 5;
        goto LABEL_157;
      }
      if (SHIBYTE(v308.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v308.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__sz.__r_.__value_.__l.__data_);
    if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v311.__r_.__value_.__l.__data_);
    v52 += 64;
    if (v52 != v51)
      continue;
    break;
  }
  v51 = v268.u64[1];
  v70 = v268.i64[0];
LABEL_171:
  if (*(float *)(v17 + 364) == 0.0)
    goto LABEL_203;
  v71 = 126 - 2 * __clz((uint64_t)(v51 - v70) >> 6);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputOrderByCondensedFormThenScore;
  if (v51 == v70)
    v72 = 0;
  else
    v72 = v71;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v70, v51, (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v72, 1);
  v73 = v17;
  v74 = v268.i64[1];
  v51 = v268.i64[0];
  if (v268.i64[0] == v268.i64[1])
    goto LABEL_226;
  while (2)
  {
    v75 = (uint64_t)(v74 - v51) >> 6;
    v76 = (void **)(v51 + 24);
    v77 = v51;
    while (2)
    {
      v78 = v75 >> 1;
      v79 = v77 + (v75 >> 1 << 6);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v79 + 24), v76) & 0x80) != 0)
      {
        v77 = v79 + 64;
        v78 = v75 + ~v78;
LABEL_181:
        v75 = v78;
        v51 = v77;
        if (!v78)
          goto LABEL_198;
        continue;
      }
      break;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v76, (void **)(v79 + 24)) & 0x80) != 0)
    {
      v74 = v77 + (v75 >> 1 << 6);
      goto LABEL_181;
    }
    if (v75 >= 2)
    {
      do
      {
        v80 = v77 + (v78 >> 1 << 6);
        v81 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v80 + 24), v76);
        if (v81 >= 0)
          v78 >>= 1;
        else
          v78 += ~(v78 >> 1);
        if (v81 < 0)
          v77 = v80 + 64;
      }
      while (v78);
    }
    v51 = v79 + 64;
    if (v74 == v79 + 64)
    {
      v51 = v74;
    }
    else
    {
      v82 = (uint64_t)(v74 - (v79 + 64)) >> 6;
      do
      {
        v83 = v51 + (v82 >> 1 << 6);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v76, (void **)(v83 + 24)) & 0x80u) != 0)
        {
          v82 >>= 1;
        }
        else
        {
          v51 = v83 + 64;
          v82 += ~(v82 >> 1);
        }
      }
      while (v82);
    }
LABEL_198:
    v84 = v77 + 64;
    if (v77 + 64 != v51)
    {
      v85 = *(double *)(v77 + 48);
      v86 = *(float *)(v263 + 364);
      v87 = v86;
      v88 = (float)(1.0 - v86);
      do
      {
        *(double *)(v84 + 48) = *(double *)(v84 + 48) * v88 + v87 * v85;
        v84 += 64;
      }
      while (v84 != v51);
    }
    v74 = v268.i64[1];
    if (v51 != v268.i64[1])
      continue;
    break;
  }
  v70 = v268.i64[0];
LABEL_203:
  v73 = v263;
  if (v70 != v51)
  {
    while (2)
    {
      v89 = *(_QWORD **)(v263 + 664);
      if (*(char *)(v263 + 759) < 0)
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v263 + 736), *(_QWORD *)(v263 + 744));
      else
        buf = *v259;
      if (*(char *)(v70 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v70 + 24), *(_QWORD *)(v70 + 32));
      }
      else
      {
        v90 = *(_OWORD *)(v70 + 24);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v70 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v90;
      }
      v312 = 0;
      v91 = (char *)operator new(0x38uLL);
      v92 = v91;
      *(_QWORD *)v91 = off_24F1113F0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)(v91 + 8), buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v91 + 8) = buf;
      v93 = (std::string *)(v92 + 4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v93, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v93->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v92[6] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
      v312 = (std::string *)v92;
      v94 = (*(double (**)(_QWORD *, _QWORD))(*v92 + 48))(v92, *v89);
      v95 = v312;
      if (v312 == &v311)
      {
        v95 = &v311;
        v96 = 4;
LABEL_220:
        (*(void (**)(void))(v95->__r_.__value_.__r.__words[0] + 8 * v96))();
      }
      else if (v312)
      {
        v96 = 5;
        goto LABEL_220;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v97 = *(float *)(v263 + 368);
      *(long double *)(v70 + 48) = *(double *)(v70 + 48) - log1p(v94) * v97;
      v70 += 64;
      if (v70 == v51)
        break;
      continue;
    }
  }
LABEL_226:
  LODWORD(v98) = *(char *)(v73 + 783);
  v99 = v73;
  if ((v98 & 0x80000000) != 0)
    v100 = *(_QWORD *)(v73 + 768);
  else
    v100 = *(unsigned __int8 *)(v73 + 783);
  if (v100 && v268.i64[1] - v268.i64[0] >= 0x80uLL)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    v101 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
    if (v268.i64[1] == v268.i64[0])
      v102 = 0;
    else
      v102 = v101;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v102, 1);
    v103 = v268;
    if (v268.i64[0] != v268.i64[1])
    {
      v104 = *(char *)(v263 + 783);
      if (v104 >= 0)
        v105 = *(unsigned __int8 *)(v263 + 783);
      else
        v105 = *(_QWORD *)(v263 + 768);
      for (i = v268.i64[0]; i != v103.i64[1]; i += 64)
      {
        v107 = *(unsigned __int8 *)(i + 23);
        if ((v107 & 0x80u) == 0)
          v108 = *(unsigned __int8 *)(i + 23);
        else
          v108 = *(_QWORD *)(i + 8);
        if (v108 == v105)
        {
          if (v104 >= 0)
            v109 = (unsigned __int8 *)(v263 + 760);
          else
            v109 = *(unsigned __int8 **)v257;
          if ((v107 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)i, v109, *(_QWORD *)(i + 8)))
            {
LABEL_255:
              *(double *)(i + 48) = *(double *)(v103.i64[0] + 48) + *(float *)(v263 + 276);
              break;
            }
          }
          else
          {
            if (!*(_BYTE *)(i + 23))
              goto LABEL_255;
            v110 = 0;
            while (*(unsigned __int8 *)(i + v110) == v109[v110])
            {
              if (v107 == ++v110)
                goto LABEL_255;
            }
          }
        }
      }
    }
    v111 = 126 - 2 * __clz((v103.i64[1] - v103.i64[0]) >> 6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    if (v103.i64[1] == v103.i64[0])
      v112 = 0;
    else
      v112 = v111;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v103.i64[0], v103.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v112, 1);
    v99 = v263;
    LOBYTE(v98) = *(_BYTE *)(v263 + 783);
  }
  if ((v98 & 0x80) != 0)
    v98 = *(_QWORD *)(v99 + 768);
  else
    v98 = v98;
  if (v98 == 1)
  {
    v114 = v268.i64[1];
    v113 = v268.i64[0];
    if (v268.i64[0] == v268.i64[1])
    {
      v114 = v268.i64[0];
    }
    else
    {
      while (1)
      {
        v115 = *(unsigned __int8 *)(v113 + 23);
        if ((v115 & 0x80u) != 0)
          v115 = *(_QWORD *)(v113 + 8);
        if (v115 > 1)
          break;
        v113 += 64;
        if (v113 == v268.i64[1])
        {
          v113 = v268.i64[1];
          goto LABEL_292;
        }
      }
      if (v113 != v268.i64[1] && v113 + 64 != v268.i64[1])
      {
        v118 = (_OWORD *)(v113 + 112);
        do
        {
          v119 = *((unsigned __int8 *)v118 - 25);
          if ((v119 & 0x80u) != 0)
            v119 = *((_QWORD *)v118 - 5);
          if (v119 <= 1)
          {
            if (*(char *)(v113 + 23) < 0)
              operator delete(*(void **)v113);
            v120 = *(v118 - 3);
            *(_QWORD *)(v113 + 16) = *((_QWORD *)v118 - 4);
            *(_OWORD *)v113 = v120;
            *((_BYTE *)v118 - 25) = 0;
            *((_BYTE *)v118 - 48) = 0;
            v121 = (void **)(v113 + 24);
            if (*(char *)(v113 + 47) < 0)
              operator delete(*v121);
            v122 = *(_OWORD *)((char *)v118 - 24);
            *(_QWORD *)(v113 + 40) = *((_QWORD *)v118 - 1);
            *(_OWORD *)v121 = v122;
            *((_BYTE *)v118 - 1) = 0;
            *((_BYTE *)v118 - 24) = 0;
            *(_OWORD *)(v113 + 48) = *v118;
            v113 += 64;
          }
          v123 = v118 + 1;
          v118 += 4;
        }
        while (v123 != (_OWORD *)v114);
        v114 = v268.i64[1];
      }
    }
LABEL_292:
    std::vector<InputTranscoder::CTCSurfaceFormOutput>::erase((uint64_t)&v268, v113, v114);
    v124 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    if (v268.i64[1] == v268.i64[0])
      v125 = 0;
    else
      v125 = v124;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v125, 1);
    if ((unint64_t)((v268.i64[1] - v268.i64[0]) >> 6) >= 2)
      v126 = 2;
    else
      v126 = (v268.i64[1] - v268.i64[0]) >> 6;
    std::vector<InputTranscoder::CTCSurfaceFormOutput>::resize(&v268, v126);
  }
  if ((*(_DWORD *)(v99 + 80) - 3) >= 2)
  {
    if (*(char *)(v99 + 783) < 0)
    {
      if (!*(_QWORD *)(v99 + 768))
        goto LABEL_310;
    }
    else if (!*(_BYTE *)(v99 + 783))
    {
      goto LABEL_310;
    }
    if (v268.i64[1] - v268.i64[0] >= 0x80uLL)
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
      v127 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
      v128 = v268.i64[1] == v268.i64[0] ? 0 : v127;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v128, 1);
      if (*(double *)(v268.i64[0] + 48) - *(double *)(v268.i64[0] + 112) > *(float *)(v99 + 280))
        std::vector<InputTranscoder::CTCSurfaceFormOutput>::resize(&v268, 1uLL);
    }
  }
LABEL_310:
  v129 = 126 - 2 * __clz((v270.i64[1] - v270.i64[0]) >> 6);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
  if (v270.i64[1] == v270.i64[0])
    v130 = 0;
  else
    v130 = v129;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v270.i64[0], v270.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v130, 1);
  if ((v270.i64[1] - v270.i64[0]) >> 6 >= (unint64_t)*(unsigned int *)(v99 + 248))
    v131 = *(unsigned int *)(v99 + 248);
  else
    v131 = (v270.i64[1] - v270.i64[0]) >> 6;
  std::vector<InputTranscoder::CTCSurfaceFormOutput>::resize(&v270, v131);
  if (*(_BYTE *)(v99 + 832))
  {
    v132 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    if (v268.i64[1] == v268.i64[0])
      v133 = 0;
    else
      v133 = v132;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v133, 1);
    InputTranscoder::normalizeScore(v268.i64[0], v268.i64[1], *(float *)(v99 + 376), *(float *)(v99 + 380));
    if ((v268.i64[1] - v268.i64[0]) >> 6 >= (unint64_t)*(unsigned int *)(v99 + 236))
      v134 = *(unsigned int *)(v99 + 236);
    else
      v134 = (v268.i64[1] - v268.i64[0]) >> 6;
    std::vector<InputTranscoder::CTCSurfaceFormOutput>::resize(&v268, v134);
    if (v270.i64[0] == v270.i64[1])
    {
      v153 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v266 + 1) - v266) >> 6);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
      if (*((_QWORD *)&v266 + 1) == (_QWORD)v266)
        v154 = 0;
      else
        v154 = v153;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v266, *((unint64_t *)&v266 + 1), (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v154, 1);
      InputTranscoder::normalizeScore(v266, *((uint64_t *)&v266 + 1), *(float *)(v99 + 376), *(float *)(v99 + 380));
      v135 = v268.i64[1];
      v137 = (char *)*((_QWORD *)&v266 + 1);
      v136 = (std::string *)v266;
    }
    else
    {
      InputTranscoder::normalizeScore(v270.i64[0], v270.i64[1], *(float *)(v99 + 376), *(float *)(v99 + 380));
      v135 = v268.i64[1];
      v137 = (char *)v270.i64[1];
      v136 = (std::string *)v270.i64[0];
    }
    std::vector<InputTranscoder::CTCSurfaceFormOutput>::__insert_with_size[abi:ne180100]<std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>,std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>>((std::string **)&v268, v135, v136, v137, (v137 - (char *)v136) >> 6);
    v155 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    if (v268.i64[1] == v268.i64[0])
      v156 = 0;
    else
      v156 = v155;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v156, 1);
  }
  else
  {
    std::vector<InputTranscoder::CTCSurfaceFormOutput>::__insert_with_size[abi:ne180100]<std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>,std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>>((std::string **)&v268, v268.i64[1], (std::string *)v270.i64[0], (char *)v270.i64[1], (v270.i64[1] - v270.i64[0]) >> 6);
    v138 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    if (v268.i64[1] == v268.i64[0])
      v139 = 0;
    else
      v139 = v138;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v139, 1);
    if ((v268.i64[1] - v268.i64[0]) >> 6 >= (unint64_t)*(unsigned int *)(v99 + 236))
      v140 = *(unsigned int *)(v99 + 236);
    else
      v140 = (v268.i64[1] - v268.i64[0]) >> 6;
    std::vector<InputTranscoder::CTCSurfaceFormOutput>::resize(&v268, v140);
    if (v270.i64[0] == v270.i64[1])
      std::vector<InputTranscoder::CTCSurfaceFormOutput>::__insert_with_size[abi:ne180100]<std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>,std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>>((std::string **)&v268, v268.i64[1], (std::string *)v266, *((char **)&v266 + 1), (uint64_t)(*((_QWORD *)&v266 + 1) - v266) >> 6);
    if (!*(_QWORD *)(v99 + 88))
    {
      v141 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputOrderByStringThenScore;
      if (v268.i64[1] == v268.i64[0])
        v142 = 0;
      else
        v142 = v141;
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v142, 1);
      v144 = v268.i64[1];
      v143 = (unsigned __int8 *)v268.i64[0];
      if (v268.i64[0] == v268.i64[1])
      {
        v144 = v268.i64[0];
      }
      else
      {
        do
        {
          v145 = v143 + 64;
          if (v143 + 64 == (unsigned __int8 *)v144)
          {
            v143 = (unsigned __int8 *)v144;
            goto LABEL_360;
          }
          v146 = InputTranscoder::CTCSurfaceFormOutputCompareByString(v143, v143 + 64);
          v143 = v145;
        }
        while (!v146);
        v147 = v145 + 64;
        v148 = v145 - 64;
        if (v147 != (unsigned __int8 *)v144)
        {
          do
          {
            if (!InputTranscoder::CTCSurfaceFormOutputCompareByString(v148, v147))
            {
              v149 = (void **)(v148 + 64);
              if ((char)v148[87] < 0)
                operator delete(*v149);
              v150 = *(_OWORD *)v147;
              *((_QWORD *)v148 + 10) = *((_QWORD *)v147 + 2);
              *(_OWORD *)v149 = v150;
              v147[23] = 0;
              *v147 = 0;
              v151 = (void **)(v148 + 88);
              if ((char)v148[111] < 0)
                operator delete(*v151);
              v152 = *(_OWORD *)(v147 + 24);
              *((_QWORD *)v148 + 13) = *((_QWORD *)v147 + 5);
              *(_OWORD *)v151 = v152;
              v147[47] = 0;
              v147[24] = 0;
              *((_OWORD *)v148 + 7) = *((_OWORD *)v147 + 3);
              v148 += 64;
            }
            v147 += 64;
          }
          while (v147 != (unsigned __int8 *)v144);
          v144 = v268.i64[1];
        }
        v143 = (unsigned __int8 *)v144;
        v144 = (uint64_t)(v148 + 64);
      }
LABEL_360:
      std::vector<InputTranscoder::CTCSurfaceFormOutput>::erase((uint64_t)&v268, v144, (uint64_t)v143);
    }
    v158 = 126 - 2 * __clz((v268.i64[1] - v268.i64[0]) >> 6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    if (v268.i64[1] == v268.i64[0])
      v159 = 0;
    else
      v159 = v158;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v268.i64[0], v268.u64[1], (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v159, 1);
    InputTranscoder::normalizeScore(v268.i64[0], v268.i64[1], *(float *)(v99 + 376), *(float *)(v99 + 380));
  }
  if (*(_BYTE *)(v99 + 833) && v270.i64[0] != v270.i64[1])
  {
    v160 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v266 + 1) - v266) >> 6);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)InputTranscoder::CTCSurfaceFormOutputCompareByScore;
    if (*((_QWORD *)&v266 + 1) == (_QWORD)v266)
      v161 = 0;
    else
      v161 = v160;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>((uint64_t *)v266, *((unint64_t *)&v266 + 1), (unsigned int (**)(__int128 *, __int128 *, __n128))&buf, v161, 1);
    InputTranscoder::normalizeScore(v266, *((uint64_t *)&v266 + 1), *(float *)(v99 + 376), *(float *)(v99 + 380));
    v157 = std::vector<InputTranscoder::CTCSurfaceFormOutput>::__insert_with_size[abi:ne180100]<std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>,std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>>((std::string **)&v268, v268.i64[1], (std::string *)v266, *((char **)&v266 + 1), (uint64_t)(*((_QWORD *)&v266 + 1) - v266) >> 6);
  }
  if (*(_DWORD *)(v99 + 80) == 4 && *(_BYTE *)(v99 + 834))
  {
    v162 = v268.i64[1];
    v163 = v268.i64[0];
    if (v268.i64[0] != v268.i64[1])
    {
      v164 = v268.i64[0] + 64;
      while (1)
      {
        v163 = v164 - 64;
        v165 = std::string::find((const std::string *)(v164 - 64), 32, 0);
        if ((*(_BYTE *)(v164 - 4) & 0x40) == 0 || v165 != -1)
          break;
        v15 = v164 == v162;
        v164 += 64;
        if (v15)
        {
          v163 = v162;
          goto LABEL_391;
        }
      }
      if (v163 != v162 && v164 != v162)
      {
        v166 = (_BYTE *)(v164 + 60);
        do
        {
          v167 = std::string::find((const std::string *)(v166 - 60), 32, 0);
          if ((*v166 & 0x40) != 0 && v167 == -1)
          {
            if (*(char *)(v163 + 23) < 0)
              operator delete(*(void **)v163);
            v168 = *(_OWORD *)(v166 - 60);
            *(_QWORD *)(v163 + 16) = *(_QWORD *)(v166 - 44);
            *(_OWORD *)v163 = v168;
            *(v166 - 37) = 0;
            *(v166 - 60) = 0;
            v169 = (void **)(v163 + 24);
            if (*(char *)(v163 + 47) < 0)
              operator delete(*v169);
            v170 = *(_OWORD *)(v166 - 36);
            *(_QWORD *)(v163 + 40) = *(_QWORD *)(v166 - 20);
            *(_OWORD *)v169 = v170;
            *(v166 - 13) = 0;
            *(v166 - 36) = 0;
            *(_OWORD *)(v163 + 48) = *(_OWORD *)(v166 - 12);
            v163 += 64;
          }
          v171 = v166 + 4;
          v166 += 64;
        }
        while (v171 != (_BYTE *)v162);
      }
    }
LABEL_391:
    std::vector<InputTranscoder::CTCSurfaceFormOutput>::erase((uint64_t)&v268, v163, v268.i64[1]);
    if (*(_DWORD *)(v99 + 80) == 4 && *(_BYTE *)(v99 + 834))
    {
      v172 = v268.i64[1];
      v173 = v268.i64[0];
      if (v268.i64[0] == v268.i64[1])
      {
        v172 = v268.i64[0];
      }
      else
      {
        v174 = v268.i64[0] + 64;
        while (*(double *)(v174 - 16) >= *(float *)(v99 + 384))
        {
          v15 = v174 == v268.i64[1];
          v174 += 64;
          if (v15)
            goto LABEL_410;
        }
        v173 = v174 - 64;
        if (v174 - 64 == v268.i64[1])
        {
LABEL_410:
          v173 = v268.i64[1];
          goto LABEL_411;
        }
        if (v174 != v268.i64[1])
        {
          do
          {
            if (*(double *)(v174 + 48) >= *(float *)(v99 + 384))
            {
              if (*(char *)(v173 + 23) < 0)
                operator delete(*(void **)v173);
              v175 = *(_OWORD *)v174;
              *(_QWORD *)(v173 + 16) = *(_QWORD *)(v174 + 16);
              *(_OWORD *)v173 = v175;
              *(_BYTE *)(v174 + 23) = 0;
              *(_BYTE *)v174 = 0;
              v176 = (void **)(v173 + 24);
              if (*(char *)(v173 + 47) < 0)
                operator delete(*v176);
              v177 = *(_OWORD *)(v174 + 24);
              *(_QWORD *)(v173 + 40) = *(_QWORD *)(v174 + 40);
              *(_OWORD *)v176 = v177;
              *(_BYTE *)(v174 + 47) = 0;
              *(_BYTE *)(v174 + 24) = 0;
              *(_OWORD *)(v173 + 48) = *(_OWORD *)(v174 + 48);
              v173 += 64;
            }
            v174 += 64;
          }
          while (v174 != v172);
          v172 = v268.i64[1];
        }
      }
LABEL_411:
      std::vector<InputTranscoder::CTCSurfaceFormOutput>::erase((uint64_t)&v268, v173, v172);
    }
  }
  memset(&__sz, 0, sizeof(__sz));
  v178 = v277;
  v179 = *(_QWORD *)(v99 + 632);
  memset(&v297, 0, sizeof(v297));
  if (v278 != v277)
  {
    v180 = 4 * ((v278 - (_BYTE *)v277) >> 2);
    do
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = *v178;
      v181 = (*(uint64_t (**)(uint64_t, std::string *, __n128))(*(_QWORD *)v179 + 40))(v179, &buf, v157);
      v182 = *(char *)(v181 + 23);
      if (v182 >= 0)
        v183 = (const std::string::value_type *)v181;
      else
        v183 = *(const std::string::value_type **)v181;
      if (v182 >= 0)
        v184 = *(unsigned __int8 *)(v181 + 23);
      else
        v184 = *(_QWORD *)(v181 + 8);
      std::string::append(&v297, v183, v184);
      ++v178;
      v180 -= 4;
    }
    while (v180);
  }
  if (*(_QWORD *)(v99 + 88))
  {
    v185 = v262;
    if ((_QWORD)v266 == *((_QWORD *)&v266 + 1))
    {
      v261 = 0;
    }
    else
    {
      InputTranscoder::getTouchUpPoints(v260, (void **)&buf.__r_.__value_.__l.__data_);
      v186 = (void *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__r.__words[0] == buf.__r_.__value_.__l.__size_)
        goto LABEL_430;
      v187 = 0;
      v188 = buf.__r_.__value_.__r.__words[0];
      do
      {
        v187 += *(unsigned __int8 *)(v188 + 58);
        v188 += 64;
      }
      while (v188 != buf.__r_.__value_.__l.__size_);
      if (v187 != 1)
      {
LABEL_430:
        v261 = 0;
        if (buf.__r_.__value_.__r.__words[0])
          goto LABEL_455;
      }
      else
      {
        if (*(char *)(v266 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)v266, *(_QWORD *)(v266 + 8));
        }
        else
        {
          v189 = *(_OWORD *)v266;
          v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(v266 + 16);
          *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v189;
        }
        v190 = v311.__r_.__value_.__l.__size_;
        if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v190 = HIBYTE(v311.__r_.__value_.__r.__words[2]);
        if (v190)
        {
          v191 = 0;
          v192 = (std::string *)v311.__r_.__value_.__r.__words[0];
          if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v192 = &v311;
          v193 = (_BYTE *)(buf.__r_.__value_.__r.__words[0] + 58);
          do
          {
            v194 = *(unsigned __int8 *)(v99 + 783);
            if ((*(_BYTE *)(v99 + 783) & 0x80) != 0)
              v194 = *(_QWORD *)(v99 + 768);
            if (v194 <= v191)
              break;
            v195 = v263 + 760;
            if ((*(_BYTE *)(v99 + 783) & 0x80) != 0)
              v195 = *(_QWORD *)v257;
            v196 = v192->__r_.__value_.__s.__data_[v191] != *(unsigned __int8 *)(v195 + v191)
                && (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 6 > v191;
            if (v196 && *v193)
            {
              v261 = 1 << v191;
              if ((SHIBYTE(v311.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_454;
              goto LABEL_453;
            }
            ++v191;
            v193 += 64;
          }
          while (v190 != v191);
        }
        v261 = 0;
        if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
LABEL_453:
          operator delete(v311.__r_.__value_.__l.__data_);
LABEL_454:
        v186 = (void *)buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__r.__words[0])
        {
LABEL_455:
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v186;
          operator delete(v186);
        }
      }
    }
  }
  else
  {
    v261 = 0;
    v185 = v262;
  }
  v198 = v268.i64[1];
  for (j = v268.i64[0]; j != v198; v185 = v262)
  {
    if (*(char *)(j + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
    }
    else
    {
      v199 = *(_OWORD *)j;
      v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
      *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v199;
    }
    if ((*(_BYTE *)(j + 60) & 0x40) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v302, "");
    }
    else if (*(char *)(v185 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)v185, *(_QWORD *)(v185 + 8));
    }
    else
    {
      v302 = *(std::string *)v185;
    }
    v200 = (std::string *)operator new();
    v201 = v200;
    v202 = *(double *)(j + 48);
    v203 = *(_BYTE *)(j + 56);
    v204 = *(_BYTE *)(j + 57);
    v205 = *(_BYTE *)(j + 58);
    v206 = *(_DWORD *)(j + 60);
    v207 = *(_BYTE *)(j + 59);
    if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v200, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
    else
      *v200 = v311;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v201 + 1, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
    else
      v201[1] = v297;
    v201[2].__r_.__value_.__l.__size_ = 0;
    v208 = v202;
    *(float *)&v201[2].__r_.__value_.__l.__data_ = v208;
    v201[2].__r_.__value_.__r.__words[2] = 0;
    v201[3].__r_.__value_.__r.__words[0] = 0;
    v201[3].__r_.__value_.__s.__data_[8] = v203;
    v201[3].__r_.__value_.__s.__data_[9] = v204;
    v201[3].__r_.__value_.__s.__data_[10] = v205;
    HIDWORD(v201[3].__r_.__value_.__r.__words[1]) = v206;
    v201[3].__r_.__value_.__s.__data_[16] = v207;
    HIDWORD(v201[3].__r_.__value_.__r.__words[2]) = v261;
    v209 = v201 + 4;
    if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v209, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v209->__r_.__value_.__l.__data_ = *(_OWORD *)&v302.__r_.__value_.__l.__data_;
      v201[4].__r_.__value_.__r.__words[2] = v302.__r_.__value_.__r.__words[2];
    }
    *(_QWORD *)v299 = v201;
    v210 = __sz.__r_.__value_.__r.__words[2];
    v211 = (_QWORD *)__sz.__r_.__value_.__l.__size_;
    if (__sz.__r_.__value_.__l.__size_ >= __sz.__r_.__value_.__r.__words[2])
    {
      v213 = __sz.__r_.__value_.__r.__words[0];
      v214 = (uint64_t)(__sz.__r_.__value_.__l.__size_ - __sz.__r_.__value_.__r.__words[0]) >> 3;
      v215 = v214 + 1;
      if ((unint64_t)(v214 + 1) >> 61)
        std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(__sz.__r_.__value_.__r.__words[2] - __sz.__r_.__value_.__r.__words[0]) >> 2 > v215)
        v215 = (uint64_t)(__sz.__r_.__value_.__r.__words[2] - __sz.__r_.__value_.__r.__words[0]) >> 2;
      if (__sz.__r_.__value_.__r.__words[2] - __sz.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
        v216 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v216 = v215;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__sz.__r_.__value_.__r.__words[2];
      if (v216)
      {
        if (v216 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v217 = (char *)operator new(8 * v216);
      }
      else
      {
        v217 = 0;
      }
      v218 = (std::string **)&v217[8 * v214];
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v218;
      *(_QWORD *)v299 = 0;
      *v218 = v201;
      v219 = (std::string::size_type)&v217[8 * v216];
      __p.__r_.__value_.__r.__words[0] = v219;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v218 + 1);
      if (v211 == (_QWORD *)v213)
      {
        v221 = vdupq_n_s64((unint64_t)v211);
        v212 = (std::string::size_type)(v218 + 1);
      }
      else
      {
        do
        {
          v220 = (std::string *)*--v211;
          *v211 = 0;
          *--v218 = v220;
        }
        while (v211 != (_QWORD *)v213);
        v221 = *(int64x2_t *)&__sz.__r_.__value_.__l.__data_;
        v210 = __sz.__r_.__value_.__r.__words[2];
        v212 = buf.__r_.__value_.__r.__words[2];
        v219 = __p.__r_.__value_.__r.__words[0];
      }
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
      __sz.__r_.__value_.__l.__size_ = v212;
      *(int64x2_t *)&buf.__r_.__value_.__r.__words[1] = v221;
      __sz.__r_.__value_.__r.__words[2] = v219;
      __p.__r_.__value_.__r.__words[0] = v210;
      buf.__r_.__value_.__r.__words[0] = v221.i64[0];
      std::__split_buffer<std::unique_ptr<InputTranscoder::CandidateImpl>>::~__split_buffer((uint64_t)&buf);
    }
    else
    {
      *(_QWORD *)v299 = 0;
      *(_QWORD *)__sz.__r_.__value_.__l.__size_ = v201;
      v212 = (std::string::size_type)(v211 + 1);
    }
    __sz.__r_.__value_.__l.__size_ = v212;
    v222 = *(_QWORD *)v299;
    *(_QWORD *)v299 = 0;
    if (v222)
      std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)v299, v222);
    if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v302.__r_.__value_.__l.__data_);
    if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v311.__r_.__value_.__l.__data_);
    j += 64;
  }
  if (qword_253F89F18 != -1)
    dispatch_once(&qword_253F89F18, &__block_literal_global_1);
  v223 = v263;
  v224 = v263 + 760;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
  {
    v225 = _MergedGlobals_1;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
    {
      InputTranscoder::TouchTranscoderSessionImpl::typingModeString((InputTranscoder::TouchTranscoderSessionImpl *)&v311, *(_QWORD *)(v263 + 88));
      if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v251 = &v311;
      else
        v251 = (std::string *)v311.__r_.__value_.__r.__words[0];
      v252 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v252 = (std::string *)v297.__r_.__value_.__r.__words[0];
      if (*(char *)(v263 + 759) < 0)
        v253 = v259->__r_.__value_.__r.__words[0];
      else
        v253 = (std::string::size_type)v259;
      if (*(char *)(v263 + 783) < 0)
        v224 = *(_QWORD *)v257;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v251;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v252;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      __p.__r_.__value_.__r.__words[0] = v253;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v224;
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v261;
      _os_log_debug_impl(&dword_228515000, v225, OS_LOG_TYPE_DEBUG, "%s stroked_path=%s inflection_string=%s exact_typed_string=%s unshift mask=%u", (uint8_t *)&buf, 0x30u);
      if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v311.__r_.__value_.__l.__data_);
    }
    memset(&buf, 0, sizeof(buf));
    v227 = (const void **)*((_QWORD *)&v266 + 1);
    v226 = (const void **)v266;
    if ((_QWORD)v266 != *((_QWORD *)&v266 + 1))
    {
      v223 = v263;
      do
      {
        if (*((char *)v226 + 23) >= 0)
          v228 = *((unsigned __int8 *)v226 + 23);
        else
          v228 = (size_t)v226[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v311, v228 + 1);
        if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v229 = &v311;
        else
          v229 = (std::string *)v311.__r_.__value_.__r.__words[0];
        if (v228)
        {
          if (*((char *)v226 + 23) >= 0)
            v230 = v226;
          else
            v230 = *v226;
          memmove(v229, v230, v228);
        }
        *(_WORD *)((char *)&v229->__r_.__value_.__l.__data_ + v228) = 32;
        if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v231 = &v311;
        else
          v231 = (std::string *)v311.__r_.__value_.__r.__words[0];
        if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v232 = HIBYTE(v311.__r_.__value_.__r.__words[2]);
        else
          v232 = v311.__r_.__value_.__l.__size_;
        std::string::append(&buf, (const std::string::value_type *)v231, v232);
        if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v311.__r_.__value_.__l.__data_);
        v226 += 8;
      }
      while (v226 != v227);
    }
    if (qword_253F89F18 != -1)
      dispatch_once(&qword_253F89F18, &__block_literal_global_1);
    v233 = _MergedGlobals_1;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
    {
      InputTranscoder::TouchTranscoderSessionImpl::typingModeString((InputTranscoder::TouchTranscoderSessionImpl *)&v311, *(_QWORD *)(v223 + 88));
      if ((v311.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v254 = &v311;
      else
        v254 = (std::string *)v311.__r_.__value_.__r.__words[0];
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v302.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v302.__r_.__value_.__r.__words + 4) = (std::string::size_type)v254;
      WORD2(v302.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v302.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
      _os_log_debug_impl(&dword_228515000, v233, OS_LOG_TYPE_DEBUG, "%s Top enumerated prefixes = %s ", (uint8_t *)&v302, 0x16u);
      if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v311.__r_.__value_.__l.__data_);
    }
    v235 = __sz.__r_.__value_.__l.__size_;
    for (k = (InputTranscoder::CandidateImpl **)__sz.__r_.__value_.__r.__words[0];
          k != (InputTranscoder::CandidateImpl **)v235;
          ++k)
    {
      if (qword_253F89F18 != -1)
        dispatch_once(&qword_253F89F18, &__block_literal_global_1);
      v236 = _MergedGlobals_1;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
      {
        InputTranscoder::TouchTranscoderSessionImpl::typingModeString((InputTranscoder::TouchTranscoderSessionImpl *)&v311, *(_QWORD *)(v263 + 88));
        v237 = SHIBYTE(v311.__r_.__value_.__r.__words[2]);
        v238 = v311.__r_.__value_.__r.__words[0];
        InputTranscoder::CandidateImpl::toString(*k, &v302);
        if (v237 >= 0)
          v239 = &v311;
        else
          v239 = (std::string *)v238;
        if ((v302.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v240 = &v302;
        else
          v240 = (std::string *)v302.__r_.__value_.__r.__words[0];
        *(_DWORD *)v299 = 136315394;
        *(_QWORD *)&v299[4] = v239;
        v300 = 2080;
        v301 = v240;
        _os_log_debug_impl(&dword_228515000, v236, OS_LOG_TYPE_DEBUG, "%s %s", v299, 0x16u);
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v302.__r_.__value_.__l.__data_);
        if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v311.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v223 = v263;
  }
  v241 = __sz.__r_.__value_.__l.__size_;
  if (*(_QWORD *)(v223 + 88))
  {
    if (__sz.__r_.__value_.__r.__words[0] != __sz.__r_.__value_.__l.__size_)
    {
      v242 = *(_QWORD *)__sz.__r_.__value_.__l.__data_;
      *(_QWORD *)__sz.__r_.__value_.__l.__data_ = 0;
      v264 = v242;
      v243 = *(_QWORD *)(a3 + 24);
      if (!v243)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v243 + 48))(v243, &v264);
      v244 = v264;
      v264 = 0;
      if (v244)
        std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)&v264, v244);
    }
  }
  else if (__sz.__r_.__value_.__r.__words[0] != __sz.__r_.__value_.__l.__size_)
  {
    v245 = __sz.__r_.__value_.__r.__words[0] + 8;
    do
    {
      v246 = *(_QWORD *)(v245 - 8);
      *(_QWORD *)(v245 - 8) = 0;
      v265 = v246;
      v247 = *(_QWORD *)(a3 + 24);
      if (!v247)
        std::__throw_bad_function_call[abi:ne180100]();
      v248 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v247 + 48))(v247, &v265);
      v249 = v265;
      v265 = 0;
      if (v249)
        std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)&v265, v249);
      if (v245 == v241)
        v250 = 1;
      else
        v250 = v248;
      v245 += 8;
    }
    while ((v250 & 1) == 0);
  }
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz;
  std::vector<std::unique_ptr<InputTranscoder::CandidateImpl>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_563:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
  std::vector<InputTranscoder::CTCSurfaceFormOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
  std::vector<InputTranscoder::CTCSurfaceFormOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v270;
  std::vector<InputTranscoder::CTCSurfaceFormOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
LABEL_564:
  if (v277)
  {
    v278 = v277;
    operator delete(v277);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v285;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v283)
  {
    v284 = v283;
    operator delete(v283);
  }
  if (v281)
  {
    v282 = v281;
    operator delete(v281);
  }
LABEL_570:
  if (v292)
  {
    v293 = v292;
    operator delete(v292);
  }
  if (v291[0])
  {
    v291[1] = v291[0];
    operator delete(v291[0]);
  }
  if (v289)
  {
    v290 = v289;
    operator delete(v289);
  }
  if (v287)
  {
    v288 = v287;
    operator delete(v287);
  }
}

void sub_2285261AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (*(char *)(v59 - 137) < 0)
    operator delete(*(void **)(v59 - 160));
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  *(_QWORD *)(v59 - 160) = &STACK[0x250];
  std::vector<std::unique_ptr<InputTranscoder::CandidateImpl>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 160));
  STACK[0x250] = (unint64_t)&a23;
  std::vector<InputTranscoder::CTCSurfaceFormOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  STACK[0x250] = (unint64_t)&a27;
  std::vector<InputTranscoder::CTCSurfaceFormOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  STACK[0x250] = (unint64_t)&a30;
  std::vector<InputTranscoder::CTCSurfaceFormOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  InputTranscoder::InputProcessor::~InputProcessor((InputTranscoder::InputProcessor *)&a49);
  InputTranscoder::PathResampler::~PathResampler((InputTranscoder::PathResampler *)&a59);
  _Unwind_Resume(a1);
}

void InputTranscoder::InputProcessor::~InputProcessor(InputTranscoder::InputProcessor *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void InputTranscoder::TouchTranscoderSessionImpl::extractCandidatesAndSavePrefixInfo(uint64_t a1, int64x2_t *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, double *a6, uint64_t *a7, _BYTE *a8)
{
  _BYTE *v8;
  _DWORD *v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v17;
  _DWORD *v18;
  uint64_t v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  BOOL HasSeparator;
  std::string::value_type v30;
  double v31;
  double v32;
  float v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  double v49;
  double v50;
  std::string::value_type v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64x2_t *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64x2_t *v69;
  void *v70;
  std::string::size_type v71;
  unint64_t v72;
  uint64_t v73;
  std::string::size_type v74;
  std::string::size_type v75;
  __int128 v76;
  __int128 v77;
  int64x2_t v78;
  std::string::size_type v79;
  std::string::size_type v80;
  unint64_t v81;
  uint64_t v82;
  std::string::size_type v83;
  std::string::size_type v84;
  __int128 v85;
  __int128 v86;
  int64x2_t v87;
  std::string::size_type v88;
  BOOL v90;
  std::string::value_type v91;
  std::string v94;
  std::string v95;
  __int128 v96;
  std::string v97;
  std::string v98;
  uint8_t buf[8];
  std::string v100;
  std::string __p;
  __int128 v102;
  uint64_t v103;

  v8 = a8;
  v11 = a3;
  v103 = *MEMORY[0x24BDAC8D0];
  v14 = a1 + 212;
  v13 = *(_DWORD *)(a1 + 212);
  v15 = *(_QWORD *)(a1 + 648);
  memset(&v97, 0, sizeof(v97));
  if (a6)
  {
    *(_QWORD *)buf = 0;
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = 0uLL;
    InputTranscoder::PathTrie::getPath((uint64_t)a6, (uint64_t)buf);
    v18 = *(_DWORD **)buf;
    v17 = v100.__r_.__value_.__r.__words[0];
    if (*(_QWORD *)buf != v100.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*v18 == v13)
        {
          std::string::basic_string[abi:ne180100]<0>(&v94, " ");
        }
        else
        {
          v19 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v15 + 32))(v15, v18);
          if (*(char *)(v19 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
          }
          else
          {
            v20 = *(_OWORD *)v19;
            v94.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
            *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v20;
          }
        }
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v94;
        else
          v21 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        else
          size = v94.__r_.__value_.__l.__size_;
        std::string::append(&v97, (const std::string::value_type *)v21, size);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        ++v18;
      }
      while (v18 != (_DWORD *)v17);
      v18 = *(_DWORD **)buf;
    }
    v8 = a8;
    if (v18)
    {
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
      operator delete(v18);
    }
    v11 = a3;
  }
  v23 = *(char *)(a1 + 735);
  if (v23 >= 0)
    v24 = (const std::string::value_type *)(v14 + 500);
  else
    v24 = *(const std::string::value_type **)(a1 + 712);
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a1 + 735);
  else
    v25 = *(_QWORD *)(a1 + 720);
  v26 = std::string::insert(&v97, 0, v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v28 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 648) + 32))(*(_QWORD *)(a1 + 648), v14);
  HasSeparator = InputTranscoder::stringHasSeparator(&v98.__r_.__value_.__l.__data_, v28);
  v30 = (*(uint64_t (**)(double *))(*(_QWORD *)a6 + 72))(a6);
  if (*((_DWORD *)a6 + 20) >= *(_DWORD *)(a1 + 252) && *a4 < *(_DWORD *)(a1 + 240))
  {
    v31 = a6[8];
    v32 = (*(double (**)(double *))(*(_QWORD *)a6 + 48))(a6);
    v33 = *(float *)(a1 + 156);
    v34 = *(float *)(a1 + 256);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v94, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
    else
      v94 = v98;
    memset(&v95, 0, sizeof(v95));
    *(double *)&v96 = v31 + v32 * v33 - v34;
    WORD4(v96) = 0;
    BYTE10(v96) = HasSeparator;
    BYTE11(v96) = v30;
    HIDWORD(v96) = 0;
    *(_QWORD *)buf = a6;
    v90 = HasSeparator;
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v100, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
        v102 = v96;
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        goto LABEL_38;
      }
    }
    else
    {
      v100 = v94;
    }
    __p = v95;
    v102 = v96;
LABEL_38:
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    v35 = a7[2];
    v36 = a7[1];
    if (v36 >= v35)
    {
      v39 = 0x8E38E38E38E38E39 * ((uint64_t)(v36 - *a7) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0x38E38E38E38E38ELL)
        std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
      v41 = 0x8E38E38E38E38E39 * ((uint64_t)(v35 - *a7) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x1C71C71C71C71C7)
        v42 = 0x38E38E38E38E38ELL;
      else
        v42 = v40;
      v95.__r_.__value_.__l.__size_ = (std::string::size_type)(a7 + 2);
      if (v42)
        v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>>(v42);
      else
        v43 = 0;
      v44 = v42 + 72 * v39;
      v94.__r_.__value_.__r.__words[0] = v42;
      v94.__r_.__value_.__l.__size_ = v44;
      v95.__r_.__value_.__r.__words[0] = v42 + 72 * v43;
      *(_QWORD *)v44 = *(_QWORD *)buf;
      v45 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
      *(_QWORD *)(v44 + 24) = *((_QWORD *)&v100.__r_.__value_.__l + 2);
      *(_OWORD *)(v44 + 8) = v45;
      memset(&v100, 0, sizeof(v100));
      v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v44 + 48) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)(v44 + 32) = v46;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v44 + 56) = v102;
      v94.__r_.__value_.__r.__words[2] = v44 + 72;
      std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__swap_out_circular_buffer(a7, &v94);
      v47 = a7[1];
      std::__split_buffer<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::~__split_buffer((uint64_t)&v94);
      v48 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a7[1] = v47;
      if (v48 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_QWORD *)v36 = *(_QWORD *)buf;
      v37 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
      *(_QWORD *)(v36 + 24) = *((_QWORD *)&v100.__r_.__value_.__l + 2);
      *(_OWORD *)(v36 + 8) = v37;
      memset(&v100, 0, sizeof(v100));
      v38 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v36 + 48) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)(v36 + 32) = v38;
      memset(&__p, 0, sizeof(__p));
      *(_OWORD *)(v36 + 56) = v102;
      a7[1] = v36 + 72;
    }
    HasSeparator = v90;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (*v11 >= *(_DWORD *)(a1 + 236))
    goto LABEL_101;
  if (*(_BYTE *)(a1 + 152))
  {
    if (!(*(unsigned int (**)(double *))(*(_QWORD *)a6 + 16))(a6))
      goto LABEL_101;
    v49 = a6[8];
    v91 = HasSeparator;
    v50 = v49 + (*(double (**)(double *))(*(_QWORD *)a6 + 40))(a6) * *(float *)(a1 + 156);
    v51 = (*(uint64_t (**)(double *))(*(_QWORD *)a6 + 16))(a6);
    v52 = a2[1].u64[0];
    v53 = a2->u64[1];
    if (v53 >= v52)
    {
      v65 = (uint64_t)(v53 - a2->i64[0]) >> 6;
      if ((unint64_t)(v65 + 1) >> 58)
        std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
      v66 = v52 - a2->i64[0];
      v67 = v66 >> 5;
      if (v66 >> 5 <= (unint64_t)(v65 + 1))
        v67 = v65 + 1;
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFC0)
        v68 = 0x3FFFFFFFFFFFFFFLL;
      else
        v68 = v67;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&a2[1];
      v69 = a2;
      if (v68)
        v70 = std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)a2[1].i64, v68);
      else
        v70 = 0;
      *(_QWORD *)buf = v70;
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v70 + 64 * v65;
      v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
      v100.__r_.__value_.__r.__words[2] = (std::string::size_type)v70 + 64 * v68;
      InputTranscoder::CTCSurfaceFormOutput::CTCSurfaceFormOutput((std::string *)v100.__r_.__value_.__l.__data_, (__int128 *)&v98, 0, v51, v91, v30, v50);
      v82 = a2->i64[0];
      v81 = a2->u64[1];
      v83 = v100.__r_.__value_.__l.__size_;
      v84 = v100.__r_.__value_.__r.__words[0];
      if (v81 == a2->i64[0])
      {
        v87 = vdupq_n_s64(v81);
      }
      else
      {
        do
        {
          v85 = *(_OWORD *)(v81 - 64);
          *(_QWORD *)(v84 - 48) = *(_QWORD *)(v81 - 48);
          *(_OWORD *)(v84 - 64) = v85;
          *(_QWORD *)(v81 - 56) = 0;
          *(_QWORD *)(v81 - 48) = 0;
          *(_QWORD *)(v81 - 64) = 0;
          v86 = *(_OWORD *)(v81 - 40);
          *(_QWORD *)(v84 - 24) = *(_QWORD *)(v81 - 24);
          *(_OWORD *)(v84 - 40) = v86;
          *(_QWORD *)(v81 - 32) = 0;
          *(_QWORD *)(v81 - 24) = 0;
          *(_QWORD *)(v81 - 40) = 0;
          *(_OWORD *)(v84 - 16) = *(_OWORD *)(v81 - 16);
          v84 -= 64;
          v81 -= 64;
        }
        while (v81 != v82);
        v87 = *a2;
      }
      v80 = v83 + 64;
      a2->i64[0] = v84;
      a2->i64[1] = v83 + 64;
      *(int64x2_t *)&v100.__r_.__value_.__l.__data_ = v87;
      v88 = a2[1].u64[0];
      a2[1].i64[0] = v100.__r_.__value_.__r.__words[2];
      v100.__r_.__value_.__r.__words[2] = v88;
      *(_QWORD *)buf = v87.i64[0];
      std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2->i64[1], v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
      }
      else
      {
        v54 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
        *(_QWORD *)(v53 + 16) = *((_QWORD *)&v98.__r_.__value_.__l + 2);
        *(_OWORD *)v53 = v54;
      }
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0;
      *(_QWORD *)(v53 + 40) = 0;
      *(double *)(v53 + 48) = v50;
      *(_BYTE *)(v53 + 56) = 0;
      *(_BYTE *)(v53 + 57) = v51;
      *(_BYTE *)(v53 + 58) = v91;
      *(_BYTE *)(v53 + 59) = v30;
      *(_DWORD *)(v53 + 60) = 0;
      v80 = v53 + 64;
      v69 = a2;
      a2->i64[1] = v53 + 64;
    }
    v69->i64[1] = v80;
  }
  else
  {
    v55 = a6[8];
    v56 = a2[1].u64[0];
    v57 = a2->u64[1];
    if (v57 >= v56)
    {
      v59 = (uint64_t)(v57 - a2->i64[0]) >> 6;
      if ((unint64_t)(v59 + 1) >> 58)
        std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
      v60 = v56 - a2->i64[0];
      v61 = v60 >> 5;
      if (v60 >> 5 <= (unint64_t)(v59 + 1))
        v61 = v59 + 1;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFC0)
        v62 = 0x3FFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&a2[1];
      v63 = a2;
      if (v62)
        v64 = std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)a2[1].i64, v62);
      else
        v64 = 0;
      *(_QWORD *)buf = v64;
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v64 + 64 * v59;
      v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
      v100.__r_.__value_.__r.__words[2] = (std::string::size_type)v64 + 64 * v62;
      InputTranscoder::CTCSurfaceFormOutput::CTCSurfaceFormOutput((std::string *)v100.__r_.__value_.__l.__data_, (__int128 *)&v98, 0, 0, 0, 0, v55);
      v73 = a2->i64[0];
      v72 = a2->u64[1];
      v74 = v100.__r_.__value_.__l.__size_;
      v75 = v100.__r_.__value_.__r.__words[0];
      if (v72 == a2->i64[0])
      {
        v78 = vdupq_n_s64(v72);
      }
      else
      {
        do
        {
          v76 = *(_OWORD *)(v72 - 64);
          *(_QWORD *)(v75 - 48) = *(_QWORD *)(v72 - 48);
          *(_OWORD *)(v75 - 64) = v76;
          *(_QWORD *)(v72 - 56) = 0;
          *(_QWORD *)(v72 - 48) = 0;
          *(_QWORD *)(v72 - 64) = 0;
          v77 = *(_OWORD *)(v72 - 40);
          *(_QWORD *)(v75 - 24) = *(_QWORD *)(v72 - 24);
          *(_OWORD *)(v75 - 40) = v77;
          *(_QWORD *)(v72 - 32) = 0;
          *(_QWORD *)(v72 - 24) = 0;
          *(_QWORD *)(v72 - 40) = 0;
          *(_OWORD *)(v75 - 16) = *(_OWORD *)(v72 - 16);
          v75 -= 64;
          v72 -= 64;
        }
        while (v72 != v73);
        v78 = *a2;
      }
      v71 = v74 + 64;
      a2->i64[0] = v75;
      a2->i64[1] = v74 + 64;
      *(int64x2_t *)&v100.__r_.__value_.__l.__data_ = v78;
      v79 = a2[1].u64[0];
      a2[1].i64[0] = v100.__r_.__value_.__r.__words[2];
      v100.__r_.__value_.__r.__words[2] = v79;
      *(_QWORD *)buf = v78.i64[0];
      std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2->i64[1], v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
      }
      else
      {
        v58 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
        *(_QWORD *)(v57 + 16) = *((_QWORD *)&v98.__r_.__value_.__l + 2);
        *(_OWORD *)v57 = v58;
      }
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = 0;
      *(_QWORD *)(v57 + 40) = 0;
      *(double *)(v57 + 48) = v55;
      v71 = v57 + 64;
      *(_QWORD *)(v57 + 56) = 0;
      v63 = a2;
      a2->i64[1] = v57 + 64;
    }
    v63->i64[1] = v71;
  }
  ++*v11;
LABEL_101:
  ++*a4;
  if (*v11 >= *(_DWORD *)(a1 + 236))
    *v8 = 1;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
}

void sub_2285270EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  *(_QWORD *)(a12 + 8) = v44;
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t InputTranscoder::TouchTranscoderSessionImpl::extractCompletionsAndPrefixes(uint64_t a1, uint64_t a2, int64x2_t *a3, _QWORD *a4)
{
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  char *v26;
  int64x2_t v27;
  char *v28;
  int64x2_t *v29;

  v8 = (__int128 *)(a4 + 1);
  v9 = a3[1].u64[0];
  v10 = a3->u64[1];
  if (v10 >= v9)
  {
    v13 = (uint64_t)(v10 - a3->i64[0]) >> 6;
    if ((unint64_t)(v13 + 1) >> 58)
      std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
    v14 = v9 - a3->i64[0];
    v15 = v14 >> 5;
    if (v14 >> 5 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v16 = 0x3FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v29 = a3 + 1;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)a3[1].i64, v16);
    else
      v17 = 0;
    v26 = v17;
    v27.i64[0] = (uint64_t)&v17[64 * v13];
    v27.i64[1] = v27.i64[0];
    v28 = &v17[64 * v16];
    std::construct_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput*>((std::string *)v27.i64[0], v8);
    v19 = a3->i64[0];
    v18 = a3->u64[1];
    v20 = v27.i64[0];
    v21 = v27.i64[0];
    if (v18 == a3->i64[0])
    {
      v24 = vdupq_n_s64(v18);
    }
    else
    {
      do
      {
        v22 = *(_OWORD *)(v18 - 64);
        *(_QWORD *)(v21 - 48) = *(_QWORD *)(v18 - 48);
        *(_OWORD *)(v21 - 64) = v22;
        *(_QWORD *)(v18 - 56) = 0;
        *(_QWORD *)(v18 - 48) = 0;
        *(_QWORD *)(v18 - 64) = 0;
        v23 = *(_OWORD *)(v18 - 40);
        *(_QWORD *)(v21 - 24) = *(_QWORD *)(v18 - 24);
        *(_OWORD *)(v21 - 40) = v23;
        *(_QWORD *)(v18 - 32) = 0;
        *(_QWORD *)(v18 - 24) = 0;
        *(_QWORD *)(v18 - 40) = 0;
        *(_OWORD *)(v21 - 16) = *(_OWORD *)(v18 - 16);
        v21 -= 64;
        v18 -= 64;
      }
      while (v18 != v19);
      v24 = *a3;
    }
    v12 = v20 + 64;
    a3->i64[0] = v21;
    a3->i64[1] = v20 + 64;
    v27 = v24;
    v25 = (char *)a3[1].i64[0];
    a3[1].i64[0] = (uint64_t)v28;
    v28 = v25;
    v26 = (char *)v24.i64[0];
    result = std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    result = (uint64_t)std::construct_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput*>((std::string *)a3->i64[1], (__int128 *)(a4 + 1));
    v12 = v10 + 64;
    a3->i64[1] = v12;
  }
  a3->i64[1] = v12;
  if (*(_DWORD *)(a1 + 244))
    return (*(uint64_t (**)(_QWORD, uint64_t, __int128 *))(*(_QWORD *)*a4 + 56))(*a4, a2, v8);
  return result;
}

void sub_2285273B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void InputTranscoder::TouchTranscoderSessionImpl::enumerateKeyCandidatesForLastTouch(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE buf[12];
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a1[66];
  if (v4 == a1[65])
  {
    v5 = 0.0;
    v6 = 0.0;
  }
  else
  {
    v6 = *(double *)(v4 - 64);
    v5 = *(double *)(v4 - 56);
  }
  if (qword_253F89F18 != -1)
    dispatch_once(&qword_253F89F18, &__block_literal_global_1);
  v7 = _MergedGlobals_1;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "enumerateKeyCandidatesForLastTouch";
    v25 = 2048;
    v26 = v6;
    v27 = 2048;
    v28 = v5;
    _os_log_debug_impl(&dword_228515000, v7, OS_LOG_TYPE_DEBUG, "%s: Point[x,y] - [%f,%f]", buf, 0x20u);
  }
  v8 = a1[83];
  *(double *)&v9 = COERCE_DOUBLE(operator new(0x20uLL));
  *(_QWORD *)v9 = &off_24F1118A0;
  *((_QWORD *)v9 + 1) = InputTranscoder::keyCandidatesForLastTouch;
  v9[2] = v6;
  v9[3] = v5;
  v28 = *(double *)&v9;
  (*(void (**)(uint64_t *__return_ptr, double, double))(**(_QWORD **)v8 + 72))(&v22, v6, v5);
  v10 = v28;
  if (*(_BYTE **)&v28 == buf)
  {
    v11 = 4;
    v10 = COERCE_DOUBLE(buf);
  }
  else
  {
    if (v28 == 0.0)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(**(_QWORD **)&v10 + 8 * v11))();
LABEL_13:
  v12 = v23;
  if (v22 != v23)
  {
    v13 = v22 + 32;
    do
    {
      v14 = (std::string *)operator new();
      v15 = v14;
      if (*(char *)(v13 - 9) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(v13 - 32), *(_QWORD *)(v13 - 24));
      }
      else
      {
        v16 = *(_OWORD *)(v13 - 32);
        v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 - 16);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
      }
      LODWORD(v15[1].__r_.__value_.__l.__data_) = *(_DWORD *)(v13 - 8);
      v21 = (uint64_t)v15;
      v17 = *(_QWORD *)(a2 + 24);
      if (!v17)
        std::__throw_bad_function_call[abi:ne180100]();
      v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v21);
      v19 = v21;
      v21 = 0;
      if (v19)
        std::default_delete<InputTranscoder::KeyCandidateImpl>::operator()[abi:ne180100]((uint64_t)&v21, v19);
      if (v13 == v12)
        v20 = 1;
      else
        v20 = v18;
      v13 += 32;
    }
    while ((v20 & 1) == 0);
  }
  *(_QWORD *)buf = &v22;
  std::vector<InputTranscoder::KeyCandidateImpl>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_228527620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16)
{
  uint64_t *v17;
  uint64_t v18;

  v17 = a16;
  if (a16 == &a13)
  {
    v18 = 4;
    v17 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::keyCandidatesForLastTouch(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

BOOL InputTranscoder::CTCSurfaceFormOutputCompareByScore(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 48) > *(double *)(a2 + 48);
}

void std::vector<InputTranscoder::CTCSurfaceFormOutput>::resize(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t i64;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t *v28;

  v4 = a1->i64[0];
  v5 = a1->i64[1];
  v6 = (v5 - a1->i64[0]) >> 6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v22 = v4 + (a2 << 6);
      while (v5 != v22)
      {
        v5 -= 64;
        std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(v5);
      }
      a1->i64[1] = v22;
    }
  }
  else
  {
    i64 = (uint64_t)a1[1].i64;
    v8 = a1[1].i64[0];
    if (a2 - v6 <= (v8 - v5) >> 6)
    {
      v23 = v5 + ((a2 - v6) << 6);
      do
      {
        *(_OWORD *)(v5 + 16) = 0uLL;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
        *(_QWORD *)(v5 + 48) = 0xFFEFFFFFFFFFFFFFLL;
        *(_QWORD *)(v5 + 56) = 0;
        v5 += 64;
      }
      while (v5 != v23);
      a1->i64[1] = v23;
    }
    else
    {
      if (a2 >> 58)
        std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
      v9 = v8 - v4;
      v10 = v9 >> 5;
      if (v9 >> 5 <= a2)
        v10 = a2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
        v11 = 0x3FFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      v28 = a1 + 1;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>(i64, v11);
      v14 = &v12[64 * v6];
      v15 = &v12[64 * a2];
      v16 = v14;
      do
      {
        *((_OWORD *)v16 + 1) = 0uLL;
        *((_OWORD *)v16 + 2) = 0uLL;
        *(_OWORD *)v16 = 0uLL;
        *((_QWORD *)v16 + 6) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v16 + 7) = 0;
        v16 += 64;
      }
      while (v16 != v15);
      v18 = a1->i64[0];
      v17 = a1->u64[1];
      if (v17 == a1->i64[0])
      {
        v21 = vdupq_n_s64(v17);
      }
      else
      {
        do
        {
          v19 = *(_OWORD *)(v17 - 64);
          *((_QWORD *)v14 - 6) = *(_QWORD *)(v17 - 48);
          *((_OWORD *)v14 - 4) = v19;
          *(_QWORD *)(v17 - 56) = 0;
          *(_QWORD *)(v17 - 48) = 0;
          *(_QWORD *)(v17 - 64) = 0;
          v20 = *(_OWORD *)(v17 - 40);
          *((_QWORD *)v14 - 3) = *(_QWORD *)(v17 - 24);
          *(_OWORD *)(v14 - 40) = v20;
          *(_QWORD *)(v17 - 32) = 0;
          *(_QWORD *)(v17 - 24) = 0;
          *(_QWORD *)(v17 - 40) = 0;
          *((_OWORD *)v14 - 1) = *(_OWORD *)(v17 - 16);
          v14 -= 64;
          v17 -= 64;
        }
        while (v17 != v18);
        v21 = *a1;
      }
      a1->i64[0] = (uint64_t)v14;
      a1->i64[1] = (uint64_t)v15;
      v26 = v21;
      v24 = a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)&v12[64 * v13];
      v27 = v24;
      v25 = v21.i64[0];
      std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)&v25);
    }
  }
}

void InputTranscoder::normalizeScore(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  long double v13;
  float v14;

  if (a1 != a2)
  {
    v7 = a1;
    v8 = a1 + 64;
    v9 = a1;
    if (a1 + 64 != a2)
    {
      v9 = a1;
      do
      {
        if (*(double *)(v9 + 48) < *(double *)(v8 + 48))
          v9 = v8;
        v8 += 64;
      }
      while (v8 != a2);
    }
    v10 = *(double *)(v9 + 48);
    v11 = 2.22044605e-16;
    v12 = a1;
    do
    {
      v13 = exp(*(double *)(v12 + 48) - v10);
      *(long double *)(v12 + 48) = v13;
      v11 = v11 + v13;
      v12 += 64;
    }
    while (v12 != a2);
    do
    {
      v14 = *(double *)(v7 + 48) / v11;
      *(double *)(v7 + 48) = (float)(powf(v14, a4) * a3);
      v7 += 64;
    }
    while (v7 != a2);
  }
}

BOOL InputTranscoder::CTCSurfaceFormOutputOrderByStringThenScore(unsigned __int8 *a1, void **a2)
{
  void **v2;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  unsigned __int8 *i;

  v2 = a2;
  v4 = a1[23];
  if ((v4 & 0x80u) == 0)
    v5 = (void *)a1[23];
  else
    v5 = (void *)*((_QWORD *)a1 + 1);
  v6 = (void *)*((unsigned __int8 *)a2 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = a2[1];
  if (v5 != v6)
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, v2) & 0x80u) != 0;
  if (v7 < 0)
    a2 = (void **)*a2;
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return *((double *)a1 + 6) > *((double *)v2 + 6);
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, v2) & 0x80u) != 0;
  }
  if (a1[23])
  {
    for (i = a1; *i == *(unsigned __int8 *)a2; ++i)
    {
      a2 = (void **)((char *)a2 + 1);
      if (!--v4)
        return *((double *)a1 + 6) > *((double *)v2 + 6);
    }
    return (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, v2) & 0x80u) != 0;
  }
  return *((double *)a1 + 6) > *((double *)v2 + 6);
}

BOOL InputTranscoder::CTCSurfaceFormOutputCompareByString(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

InputTranscoder::Path *InputTranscoder::Path::Path(InputTranscoder::Path *this, const InputTranscoder::Path *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<InputTranscoder::PathSample>::__init_with_size[abi:ne180100]<InputTranscoder::PathSample*,InputTranscoder::PathSample*>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 6);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  return this;
}

void sub_228527B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<InputTranscoder::PathSample>::__init_with_size[abi:ne180100]<InputTranscoder::PathSample*,InputTranscoder::PathSample*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<InputTranscoder::PathSample>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 5);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_228527B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<InputTranscoder::PathSample>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

os_log_t ___ZN15InputTranscoderL6loggerEv_block_invoke_1()
{
  os_log_t result;

  result = os_log_create("com.apple.InputTranscoder", "TouchTranscoderSessionImpl");
  _MergedGlobals_1 = (uint64_t)result;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>(uint64_t *a1, unint64_t a2, unsigned int (**a3)(__int128 *, __int128 *, __n128), uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t *v8;
  _OWORD *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  char v31;
  unint64_t v32;
  __int128 *v33;
  __int128 *v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void **v39;
  __int128 v40;
  BOOL v41;
  __int128 v42;
  __int128 v43;
  uint64_t *v44;
  int v45;
  __int128 *v46;
  __n128 v47;
  void **v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void **v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void **v67;
  __int128 v68;
  __int128 v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  void **v80;
  __int128 v81;
  uint64_t v82;
  void **v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  void **v98;
  __int128 v99;
  void **v100;
  __int128 *v101;
  void **v102;
  int v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  void **v115;
  __int128 v116;
  void **v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  int v124;
  __int128 v125;
  uint64_t v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  _OWORD *v130;
  void **v131;
  void **v132;
  char v133;
  void **v134;
  char v135;
  void **v136;
  __int128 v137;
  __int128 v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v145;
  char v146;
  int64_t v148;
  char v149;
  void *v151[2];
  uint64_t v152;
  __int128 __p;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  _BYTE v157[15];
  _QWORD v158[4];

  v158[2] = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v7 = (uint64_t)a1;
  v142 = a1 + 16;
  v143 = a1 + 8;
  v8 = a1 + 3;
  v139 = a1 + 4;
  v140 = a1 + 1;
  v9 = a1 + 6;
  v141 = a1 - 8;
  v10 = (void **)a2;
  while (2)
  {
    v11 = (uint64_t)v10 - v7;
    v12 = ((uint64_t)v10 - v7) >> 6;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (((unsigned int (*)(void **, uint64_t))*a3)(v10 - 8, v7))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)v7, (__int128 *)v10 - 4);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)v7, (__int128 *)(v7 + 64), (__int128 *)v10 - 4, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)v7, (__int128 *)(v7 + 64), (__int128 *)(v7 + 128), (__int128 *)v10 - 4, a3);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)v7, (__int128 *)(v7 + 64), (__int128 *)(v7 + 128), (__int128 *)(v7 + 192), (__int128 *)v10 - 4, a3);
        return;
      default:
        a2 = (unint64_t)v10;
        if (v11 > 1535)
        {
          if (!a4)
          {
            if ((void **)v7 != v10)
            {
              v148 = (unint64_t)(v12 - 2) >> 1;
              v70 = v148;
              do
              {
                v71 = v70;
                if (v148 >= v70)
                {
                  v72 = (2 * v70) | 1;
                  v73 = v7 + (v72 << 6);
                  if (2 * v70 + 2 < v12
                    && ((unsigned int (*)(uint64_t, uint64_t))*a3)(v7 + (v72 << 6), v73 + 64))
                  {
                    v73 += 64;
                    v72 = 2 * v71 + 2;
                  }
                  v74 = v7 + (v71 << 6);
                  if ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v73, v74) & 1) == 0)
                  {
                    v75 = *(_OWORD *)v74;
                    v152 = *(_QWORD *)(v74 + 16);
                    *(_OWORD *)v151 = v75;
                    *(_QWORD *)(v74 + 8) = 0;
                    *(_QWORD *)(v74 + 16) = 0;
                    *(_QWORD *)v74 = 0;
                    v76 = v7 + (v71 << 6);
                    v77 = *(_OWORD *)(v76 + 24);
                    v154 = *(_QWORD *)(v76 + 40);
                    __p = v77;
                    *(_QWORD *)(v76 + 32) = 0;
                    *(_QWORD *)(v76 + 40) = 0;
                    *(_QWORD *)(v76 + 24) = 0;
                    v155 = *(_OWORD *)(v76 + 48);
                    do
                    {
                      v78 = v73;
                      if (*(char *)(v74 + 23) < 0)
                        operator delete(*(void **)v74);
                      v79 = *(_OWORD *)v73;
                      *(_QWORD *)(v74 + 16) = *(_QWORD *)(v73 + 16);
                      *(_OWORD *)v74 = v79;
                      *(_BYTE *)(v73 + 23) = 0;
                      *(_BYTE *)v73 = 0;
                      v80 = (void **)(v74 + 24);
                      if (*(char *)(v74 + 47) < 0)
                        operator delete(*v80);
                      v81 = *(_OWORD *)(v78 + 24);
                      *(_QWORD *)(v74 + 40) = *(_QWORD *)(v78 + 40);
                      *(_OWORD *)v80 = v81;
                      *(_BYTE *)(v78 + 47) = 0;
                      *(_BYTE *)(v78 + 24) = 0;
                      *(_OWORD *)(v74 + 48) = *(_OWORD *)(v78 + 48);
                      if (v148 < v72)
                        break;
                      v82 = (2 * v72) | 1;
                      v73 = v7 + (v82 << 6);
                      v72 = 2 * v72 + 2;
                      if (v72 >= v12)
                      {
                        v72 = v82;
                      }
                      else if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7 + (v82 << 6), v73 + 64))
                      {
                        v73 += 64;
                      }
                      else
                      {
                        v72 = v82;
                      }
                      v74 = v78;
                    }
                    while (!((unsigned int (*)(uint64_t, void **))*a3)(v73, v151));
                    if (*(char *)(v78 + 23) < 0)
                      operator delete(*(void **)v78);
                    v83 = (void **)(v78 + 24);
                    v84 = (_OWORD *)(v78 + 48);
                    v85 = *(_OWORD *)v151;
                    *(_QWORD *)(v78 + 16) = v152;
                    *(_OWORD *)v78 = v85;
                    HIBYTE(v152) = 0;
                    LOBYTE(v151[0]) = 0;
                    if (*(char *)(v78 + 47) < 0)
                    {
                      operator delete(*v83);
                      v87 = SHIBYTE(v152);
                      v88 = __p;
                      *(_QWORD *)(v78 + 40) = v154;
                      *(_OWORD *)v83 = v88;
                      HIBYTE(v154) = 0;
                      LOBYTE(__p) = 0;
                      *v84 = v155;
                      if (v87 < 0)
                        operator delete(v151[0]);
                    }
                    else
                    {
                      v86 = __p;
                      *(_QWORD *)(v78 + 40) = v154;
                      *(_OWORD *)v83 = v86;
                      *v84 = v155;
                    }
                  }
                }
                v70 = v71 - 1;
              }
              while (v71);
              v89 = (unint64_t)v11 >> 6;
              v90 = a2;
              do
              {
                if (v89 >= 2)
                {
                  v91 = 0;
                  v92 = *(_QWORD *)v7;
                  v158[0] = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)((char *)v158 + 7) = *(_QWORD *)(v7 + 15);
                  v146 = *(_BYTE *)(v7 + 23);
                  *(_QWORD *)v7 = 0;
                  *(_QWORD *)(v7 + 8) = 0;
                  *(_QWORD *)(v7 + 16) = 0;
                  v145 = *(_QWORD *)(v7 + 24);
                  *(_QWORD *)&v157[7] = *(_QWORD *)(v7 + 39);
                  *(_QWORD *)v157 = *(_QWORD *)(v7 + 32);
                  v149 = *(_BYTE *)(v7 + 47);
                  *(_QWORD *)(v7 + 32) = 0;
                  *(_QWORD *)(v7 + 40) = 0;
                  *(_QWORD *)(v7 + 24) = 0;
                  v93 = v7;
                  v156 = *(_OWORD *)(v7 + 48);
                  do
                  {
                    v94 = v93 + (v91 << 6) + 64;
                    v95 = 2 * v91;
                    v91 = (2 * v91) | 1;
                    v96 = v95 + 2;
                    if (v95 + 2 < v89 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(v94, v94 + 64))
                    {
                      v94 += 64;
                      v91 = v96;
                    }
                    if (*(char *)(v93 + 23) < 0)
                      operator delete(*(void **)v93);
                    v97 = *(_OWORD *)v94;
                    *(_QWORD *)(v93 + 16) = *(_QWORD *)(v94 + 16);
                    *(_OWORD *)v93 = v97;
                    *(_BYTE *)(v94 + 23) = 0;
                    *(_BYTE *)v94 = 0;
                    v98 = (void **)(v93 + 24);
                    if (*(char *)(v93 + 47) < 0)
                      operator delete(*v98);
                    v99 = *(_OWORD *)(v94 + 24);
                    *(_QWORD *)(v93 + 40) = *(_QWORD *)(v94 + 40);
                    *(_OWORD *)v98 = v99;
                    *(_BYTE *)(v94 + 47) = 0;
                    *(_BYTE *)(v94 + 24) = 0;
                    *(_OWORD *)(v93 + 48) = *(_OWORD *)(v94 + 48);
                    v93 = v94;
                  }
                  while (v91 <= (uint64_t)((unint64_t)(v89 - 2) >> 1));
                  v100 = (void **)(v94 + 24);
                  v101 = (__int128 *)(v94 + 48);
                  v102 = (void **)(v90 - 64);
                  v103 = *(char *)(v94 + 23);
                  if (v94 == v90 - 64)
                  {
                    if (v103 < 0)
                      operator delete(*(void **)v94);
                    *(_QWORD *)v94 = v92;
                    v121 = *(_QWORD *)((char *)v158 + 7);
                    *(_QWORD *)(v94 + 8) = v158[0];
                    *(_QWORD *)(v94 + 15) = v121;
                    *(_BYTE *)(v94 + 23) = v146;
                    if (*(char *)(v94 + 47) < 0)
                      operator delete(*v100);
                    *(_QWORD *)(v94 + 24) = v145;
                    v122 = *(_QWORD *)v157;
                    *(_QWORD *)(v94 + 39) = *(_QWORD *)&v157[7];
                    *(_QWORD *)(v94 + 32) = v122;
                    *(_BYTE *)(v94 + 47) = v149;
                    *v101 = v156;
                  }
                  else
                  {
                    if (v103 < 0)
                      operator delete(*(void **)v94);
                    v104 = *(_OWORD *)v102;
                    *(_QWORD *)(v94 + 16) = *(_QWORD *)(v90 - 48);
                    *(_OWORD *)v94 = v104;
                    *(_BYTE *)(v90 - 41) = 0;
                    *(_BYTE *)(v90 - 64) = 0;
                    if (*(char *)(v94 + 47) < 0)
                      operator delete(*v100);
                    v105 = *(_OWORD *)(v90 - 40);
                    *(_QWORD *)(v94 + 40) = *(_QWORD *)(v90 - 24);
                    *(_OWORD *)v100 = v105;
                    *(_BYTE *)(v90 - 17) = 0;
                    *(_BYTE *)(v90 - 40) = 0;
                    *v101 = *(_OWORD *)(v90 - 16);
                    if (*(char *)(v90 - 41) < 0)
                      operator delete(*v102);
                    *(_QWORD *)(v90 - 64) = v92;
                    v106 = v158[0];
                    *(_QWORD *)(v90 - 49) = *(_QWORD *)((char *)v158 + 7);
                    *(_QWORD *)(v90 - 56) = v106;
                    *(_BYTE *)(v90 - 41) = v146;
                    if (*(char *)(v90 - 17) < 0)
                      operator delete(*(void **)(v90 - 40));
                    *(_QWORD *)(v90 - 40) = v145;
                    v107 = *(_QWORD *)v157;
                    *(_QWORD *)(v90 - 25) = *(_QWORD *)&v157[7];
                    *(_QWORD *)(v90 - 32) = v107;
                    *(_BYTE *)(v90 - 17) = v149;
                    *(_OWORD *)(v90 - 16) = v156;
                    v108 = v94 + 64 - v7;
                    if (v108 >= 65)
                    {
                      v109 = (((unint64_t)v108 >> 6) - 2) >> 1;
                      v110 = v7 + (v109 << 6);
                      if (((unsigned int (*)(unint64_t, uint64_t))*a3)(v110, v94))
                      {
                        v111 = *(_OWORD *)v94;
                        v152 = *(_QWORD *)(v94 + 16);
                        *(_OWORD *)v151 = v111;
                        *(_QWORD *)(v94 + 8) = 0;
                        *(_QWORD *)(v94 + 16) = 0;
                        *(_QWORD *)v94 = 0;
                        v112 = *(_OWORD *)v100;
                        v154 = *(_QWORD *)(v94 + 40);
                        __p = v112;
                        *(_QWORD *)(v94 + 32) = 0;
                        *(_QWORD *)(v94 + 40) = 0;
                        *v100 = 0;
                        v155 = *v101;
                        do
                        {
                          v113 = v110;
                          if (*(char *)(v94 + 23) < 0)
                            operator delete(*(void **)v94);
                          v114 = *(_OWORD *)v110;
                          *(_QWORD *)(v94 + 16) = *(_QWORD *)(v110 + 16);
                          *(_OWORD *)v94 = v114;
                          *(_BYTE *)(v110 + 23) = 0;
                          *(_BYTE *)v110 = 0;
                          v115 = (void **)(v94 + 24);
                          if (*(char *)(v94 + 47) < 0)
                            operator delete(*v115);
                          v116 = *(_OWORD *)(v113 + 24);
                          *(_QWORD *)(v94 + 40) = *(_QWORD *)(v113 + 40);
                          *(_OWORD *)v115 = v116;
                          *(_BYTE *)(v113 + 47) = 0;
                          *(_BYTE *)(v113 + 24) = 0;
                          *(_OWORD *)(v94 + 48) = *(_OWORD *)(v113 + 48);
                          if (!v109)
                            break;
                          v109 = (v109 - 1) >> 1;
                          v110 = v7 + (v109 << 6);
                          v94 = v113;
                        }
                        while ((((uint64_t (*)(unint64_t, void **))*a3)(v110, v151) & 1) != 0);
                        if (*(char *)(v113 + 23) < 0)
                          operator delete(*(void **)v113);
                        v117 = (void **)(v113 + 24);
                        v118 = (_OWORD *)(v113 + 48);
                        v119 = *(_OWORD *)v151;
                        *(_QWORD *)(v113 + 16) = v152;
                        *(_OWORD *)v113 = v119;
                        HIBYTE(v152) = 0;
                        LOBYTE(v151[0]) = 0;
                        if (*(char *)(v113 + 47) < 0)
                        {
                          operator delete(*v117);
                          v124 = SHIBYTE(v152);
                          v125 = __p;
                          *(_QWORD *)(v113 + 40) = v154;
                          *(_OWORD *)v117 = v125;
                          HIBYTE(v154) = 0;
                          LOBYTE(__p) = 0;
                          *v118 = v155;
                          if (v124 < 0)
                            operator delete(v151[0]);
                        }
                        else
                        {
                          v120 = __p;
                          *(_QWORD *)(v113 + 40) = v154;
                          *(_OWORD *)v117 = v120;
                          *v118 = v155;
                        }
                      }
                    }
                  }
                }
                v90 -= 64;
              }
              while ((unint64_t)v89-- > 2);
            }
            return;
          }
          v13 = v10;
          v14 = (unint64_t)v12 >> 1;
          v15 = v7 + ((unint64_t)v12 >> 1 << 6);
          v16 = v13 - 8;
          if ((unint64_t)v11 <= 0x2000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)v15, (__int128 *)v7, (__int128 *)v13 - 4, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)v7, (__int128 *)v15, (__int128 *)v13 - 4, a3);
            v17 = (__int128 *)(v7 + (v14 << 6));
            v18 = (uint64_t *)(v17 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(v143, v17 - 4, (__int128 *)(a2 - 128), a3);
            v17 += 4;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(v142, v17, (__int128 *)(a2 - 192), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(v18, (__int128 *)v15, v17, a3);
            v19 = *(_QWORD *)v7;
            *(_QWORD *)&v156 = *v140;
            *(_QWORD *)((char *)&v156 + 7) = *(_QWORD *)((char *)v140 + 7);
            v20 = *(_BYTE *)(v7 + 23);
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            v21 = *(_QWORD *)(v7 + 24);
            v158[0] = *v139;
            *(_QWORD *)((char *)v158 + 7) = *(_QWORD *)((char *)v139 + 7);
            v22 = *(_BYTE *)(v7 + 47);
            v8[1] = 0;
            v8[2] = 0;
            *v8 = 0;
            *(_OWORD *)v151 = *v9;
            v23 = *(_OWORD *)v15;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)v7 = v23;
            *(_BYTE *)(v15 + 23) = 0;
            v24 = v7 + (v14 << 6);
            v25 = *(_OWORD *)(v24 + 24);
            v8[2] = *(_QWORD *)(v24 + 40);
            *(_OWORD *)v8 = v25;
            *(_BYTE *)(v15 + 47) = 0;
            *(_BYTE *)(v24 + 24) = 0;
            *v9 = *(_OWORD *)(v24 + 48);
            *(_QWORD *)v15 = v19;
            v26 = v156;
            *(_QWORD *)(v15 + 15) = *(_QWORD *)((char *)&v156 + 7);
            *(_QWORD *)(v15 + 8) = v26;
            *(_BYTE *)(v15 + 23) = v20;
            *(_QWORD *)(v24 + 24) = v21;
            v27 = v158[0];
            *(_QWORD *)(v24 + 39) = *(_QWORD *)((char *)v158 + 7);
            *(_QWORD *)(v24 + 32) = v27;
            *(_BYTE *)(v15 + 47) = v22;
            *(_OWORD *)(v24 + 48) = *(_OWORD *)v151;
          }
          --a4;
          if ((a5 & 1) != 0 || (((uint64_t (*)(uint64_t *, uint64_t))*a3)(v141, v7) & 1) != 0)
          {
            v28 = 0;
            v29 = *(_OWORD *)v7;
            v152 = *(_QWORD *)(v7 + 16);
            *(_OWORD *)v151 = v29;
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v30 = *(_OWORD *)v8;
            v154 = v8[2];
            __p = v30;
            v8[1] = 0;
            v8[2] = 0;
            *v8 = 0;
            v155 = *v9;
            do
            {
              v31 = ((uint64_t (*)(uint64_t, void **))*a3)(v7 + v28 + 64, v151);
              v28 += 64;
            }
            while ((v31 & 1) != 0);
            v32 = v7 + v28;
            v33 = (__int128 *)a2;
            if (v28 == 64)
            {
              v33 = (__int128 *)a2;
              do
              {
                if (v32 >= (unint64_t)v33)
                  break;
                v33 -= 4;
              }
              while ((((uint64_t (*)(__int128 *, void **))*a3)(v33, v151) & 1) == 0);
            }
            else
            {
              do
                v33 -= 4;
              while (!((unsigned int (*)(__int128 *, void **))*a3)(v33, v151));
            }
            a1 = (uint64_t *)(v7 + v28);
            if (v32 < (unint64_t)v33)
            {
              v34 = v33;
              do
              {
                v35 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(a1, v34);
                do
                  a1 += 8;
                while ((((uint64_t (*)(uint64_t *, void **, __n128))*a3)(a1, v151, v35) & 1) != 0);
                do
                  v34 -= 4;
                while (!((unsigned int (*)(__int128 *, void **))*a3)(v34, v151));
              }
              while (a1 < (uint64_t *)v34);
            }
            v10 = (void **)(a1 - 8);
            if (a1 - 8 != (uint64_t *)v7)
            {
              if (*(char *)(v7 + 23) < 0)
                operator delete(*(void **)v7);
              v36 = *(_OWORD *)v10;
              *(_QWORD *)(v7 + 16) = *(a1 - 6);
              *(_OWORD *)v7 = v36;
              *((_BYTE *)a1 - 41) = 0;
              *((_BYTE *)a1 - 64) = 0;
              if (*(char *)(v7 + 47) < 0)
                operator delete((void *)*v8);
              v37 = *(_OWORD *)(a1 - 5);
              v8[2] = *(a1 - 3);
              *(_OWORD *)v8 = v37;
              *((_BYTE *)a1 - 17) = 0;
              *((_BYTE *)a1 - 40) = 0;
              *v9 = *((_OWORD *)a1 - 1);
            }
            if (*((char *)a1 - 41) < 0)
              operator delete(*v10);
            v38 = *(_OWORD *)v151;
            *(a1 - 6) = v152;
            *(_OWORD *)v10 = v38;
            HIBYTE(v152) = 0;
            LOBYTE(v151[0]) = 0;
            v39 = (void **)(a1 - 5);
            if (*((char *)a1 - 17) < 0)
              operator delete(*v39);
            v40 = __p;
            *(a1 - 3) = v154;
            *(_OWORD *)v39 = v40;
            HIBYTE(v154) = 0;
            LOBYTE(__p) = 0;
            *((_OWORD *)a1 - 1) = v155;
            if (SHIBYTE(v154) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v152) < 0)
              operator delete(v151[0]);
            if (v32 >= (unint64_t)v33)
            {
              v41 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(v7, (uint64_t)(a1 - 8), a3);
              if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t)a1, a2, a3))
              {
                if (!v41)
                  continue;
                return;
              }
              if (v41)
                goto LABEL_2;
            }
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*,false>(v7, a1 - 8, a3, a4, a5 & 1);
          }
          else
          {
            v42 = *(_OWORD *)v7;
            v152 = *(_QWORD *)(v7 + 16);
            *(_OWORD *)v151 = v42;
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v43 = *(_OWORD *)(v7 + 24);
            v154 = *(_QWORD *)(v7 + 40);
            __p = v43;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 40) = 0;
            *(_QWORD *)(v7 + 24) = 0;
            v155 = *(_OWORD *)(v7 + 48);
            if ((((uint64_t (*)(void **, void **))*a3)(v151, v16) & 1) != 0)
            {
              a1 = (uint64_t *)v7;
              do
                a1 += 8;
              while ((((uint64_t (*)(void **, uint64_t *))*a3)(v151, a1) & 1) == 0);
            }
            else
            {
              v44 = (uint64_t *)(v7 + 64);
              do
              {
                a1 = v44;
                if ((unint64_t)v44 >= a2)
                  break;
                v45 = ((uint64_t (*)(void **, uint64_t *))*a3)(v151, v44);
                v44 = a1 + 8;
              }
              while (!v45);
            }
            v46 = (__int128 *)a2;
            if ((unint64_t)a1 < a2)
            {
              v46 = (__int128 *)a2;
              do
                v46 -= 4;
              while ((((uint64_t (*)(void **, __int128 *))*a3)(v151, v46) & 1) != 0);
            }
            while (a1 < (uint64_t *)v46)
            {
              v47 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(a1, v46);
              do
                a1 += 8;
              while (!(*a3)((__int128 *)v151, (__int128 *)a1, v47));
              do
                v46 -= 4;
              while ((((uint64_t (*)(void **, __int128 *))*a3)(v151, v46) & 1) != 0);
            }
            v48 = (void **)(a1 - 8);
            if (a1 - 8 != (uint64_t *)v7)
            {
              if (*(char *)(v7 + 23) < 0)
                operator delete(*(void **)v7);
              v49 = (void **)(v7 + 24);
              v50 = *(_OWORD *)v48;
              *(_QWORD *)(v7 + 16) = *(a1 - 6);
              *(_OWORD *)v7 = v50;
              *((_BYTE *)a1 - 41) = 0;
              *((_BYTE *)a1 - 64) = 0;
              if (*(char *)(v7 + 47) < 0)
                operator delete(*v49);
              v51 = *(_OWORD *)(a1 - 5);
              *(_QWORD *)(v7 + 40) = *(a1 - 3);
              *(_OWORD *)v49 = v51;
              *((_BYTE *)a1 - 17) = 0;
              *((_BYTE *)a1 - 40) = 0;
              *(_OWORD *)(v7 + 48) = *((_OWORD *)a1 - 1);
            }
            if (*((char *)a1 - 41) < 0)
              operator delete(*v48);
            v52 = *(_OWORD *)v151;
            *(a1 - 6) = v152;
            *(_OWORD *)v48 = v52;
            HIBYTE(v152) = 0;
            LOBYTE(v151[0]) = 0;
            v53 = (void **)(a1 - 5);
            if (*((char *)a1 - 17) < 0)
              operator delete(*v53);
            v54 = __p;
            *(a1 - 3) = v154;
            *(_OWORD *)v53 = v54;
            HIBYTE(v154) = 0;
            LOBYTE(__p) = 0;
            *((_OWORD *)a1 - 1) = v155;
            if (SHIBYTE(v154) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(v152) < 0)
              operator delete(v151[0]);
          }
          a5 = 0;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if ((void **)v7 != v10)
          {
            v55 = v7 + 64;
            if ((void **)(v7 + 64) != v10)
            {
              v56 = 0;
              v57 = v7;
              do
              {
                v58 = v55;
                if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v55, v57))
                {
                  v59 = *(_OWORD *)v58;
                  v152 = *(_QWORD *)(v58 + 16);
                  *(_OWORD *)v151 = v59;
                  *(_QWORD *)(v58 + 8) = 0;
                  *(_QWORD *)(v58 + 16) = 0;
                  *(_QWORD *)v58 = 0;
                  __p = *(_OWORD *)(v57 + 88);
                  v154 = *(_QWORD *)(v57 + 104);
                  *(_QWORD *)(v57 + 96) = 0;
                  *(_QWORD *)(v57 + 104) = 0;
                  *(_QWORD *)(v57 + 88) = 0;
                  v155 = *(_OWORD *)(v57 + 112);
                  v60 = v56;
                  while (1)
                  {
                    v61 = v7 + v60;
                    v62 = (void **)(v7 + v60 + 64);
                    if (*(char *)(v7 + v60 + 87) < 0)
                      operator delete(*v62);
                    *(_OWORD *)v62 = *(_OWORD *)v61;
                    *(_QWORD *)(v7 + v60 + 80) = *(_QWORD *)(v61 + 16);
                    *(_BYTE *)(v61 + 23) = 0;
                    *(_BYTE *)v61 = 0;
                    v63 = v61 + 88;
                    if (*(char *)(v61 + 111) < 0)
                      operator delete(*(void **)v63);
                    v64 = v7 + v60;
                    *(_OWORD *)v63 = *(_OWORD *)(v7 + v60 + 24);
                    *(_QWORD *)(v63 + 16) = *(_QWORD *)(v7 + v60 + 40);
                    *(_BYTE *)(v64 + 47) = 0;
                    *(_BYTE *)(v64 + 24) = 0;
                    *(_OWORD *)(v64 + 112) = *(_OWORD *)(v7 + v60 + 48);
                    if (!v60)
                      break;
                    v60 -= 64;
                    if ((((uint64_t (*)(void **, uint64_t))*a3)(v151, v64 - 64) & 1) == 0)
                    {
                      v65 = v7 + v60 + 64;
                      goto LABEL_95;
                    }
                  }
                  v65 = v7;
LABEL_95:
                  if (*(char *)(v65 + 23) < 0)
                    operator delete(*(void **)v65);
                  v66 = 0;
                  v67 = (void **)(v64 + 24);
                  v68 = *(_OWORD *)v151;
                  *(_QWORD *)(v65 + 16) = v152;
                  *(_OWORD *)v65 = v68;
                  HIBYTE(v152) = 0;
                  LOBYTE(v151[0]) = 0;
                  if (*(char *)(v65 + 47) < 0)
                  {
                    operator delete(*v67);
                    v66 = HIBYTE(v152);
                  }
                  v69 = __p;
                  *(_QWORD *)(v64 + 40) = v154;
                  *(_OWORD *)v67 = v69;
                  HIBYTE(v154) = 0;
                  LOBYTE(__p) = 0;
                  *(_OWORD *)(v64 + 48) = v155;
                  if (v66 < 0)
                    operator delete(v151[0]);
                }
                v55 = v58 + 64;
                v56 += 64;
                v57 = v58;
              }
              while (v58 + 64 != a2);
            }
          }
        }
        else if ((void **)v7 != v10)
        {
          v126 = v7 + 64;
          if ((void **)(v7 + 64) != v10)
          {
            v127 = (_OWORD *)(v7 + 112);
            do
            {
              v128 = v126;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v126, v7))
              {
                v129 = *(_OWORD *)v128;
                v152 = *(_QWORD *)(v128 + 16);
                *(_OWORD *)v151 = v129;
                *(_QWORD *)(v128 + 8) = 0;
                *(_QWORD *)(v128 + 16) = 0;
                *(_QWORD *)v128 = 0;
                __p = *(_OWORD *)(v7 + 88);
                v154 = *(_QWORD *)(v7 + 104);
                *(_QWORD *)(v7 + 96) = 0;
                *(_QWORD *)(v7 + 104) = 0;
                *(_QWORD *)(v7 + 88) = 0;
                v155 = *(_OWORD *)(v7 + 112);
                v130 = v127;
                do
                {
                  v131 = (void **)(v130 - 3);
                  if (*((char *)v130 - 25) < 0)
                    operator delete(*v131);
                  *(_OWORD *)v131 = *(v130 - 7);
                  *((_QWORD *)v130 - 4) = *((_QWORD *)v130 - 12);
                  *((_BYTE *)v130 - 89) = 0;
                  *((_BYTE *)v130 - 112) = 0;
                  v132 = (void **)v130 - 3;
                  if (*((char *)v130 - 1) < 0)
                    operator delete(*v132);
                  *(_OWORD *)v132 = *(_OWORD *)((char *)v130 - 88);
                  *((_QWORD *)v130 - 1) = *((_QWORD *)v130 - 9);
                  *((_BYTE *)v130 - 65) = 0;
                  *((_BYTE *)v130 - 88) = 0;
                  *v130 = *(v130 - 4);
                  v133 = ((uint64_t (*)(void **, _OWORD *))*a3)(v151, v130 - 11);
                  v130 -= 4;
                }
                while ((v133 & 1) != 0);
                v134 = (void **)(v130 - 3);
                if (*((char *)v130 - 25) < 0)
                  operator delete(*v134);
                v135 = 0;
                v136 = (void **)v130 - 3;
                v137 = *(_OWORD *)v151;
                *((_QWORD *)v130 - 4) = v152;
                *(_OWORD *)v134 = v137;
                HIBYTE(v152) = 0;
                LOBYTE(v151[0]) = 0;
                if (*((char *)v130 - 1) < 0)
                {
                  operator delete(*v136);
                  v135 = HIBYTE(v152);
                }
                v138 = __p;
                *((_QWORD *)v130 - 1) = v154;
                *(_OWORD *)v136 = v138;
                HIBYTE(v154) = 0;
                LOBYTE(__p) = 0;
                *v130 = v155;
                if (v135 < 0)
                  operator delete(v151[0]);
              }
              v126 = v128 + 64;
              v127 += 4;
              v7 = v128;
            }
            while ((void **)(v128 + 64) != v10);
          }
        }
        return;
    }
  }
}

void sub_228528CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, int a16, int a17, int a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  InputTranscoder::CTCConfiguration::~CTCConfiguration(&a20);
  _Unwind_Resume(a1);
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __n128 v12;
  _BYTE v13[15];
  _BYTE v14[15];

  v3 = *a1;
  *(_QWORD *)v14 = a1[1];
  *(_QWORD *)&v14[7] = *(uint64_t *)((char *)a1 + 15);
  v4 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = a1 + 3;
  v5 = a1[3];
  *(_QWORD *)v13 = a1[4];
  *(_QWORD *)&v13[7] = *(uint64_t *)((char *)a1 + 39);
  v7 = *((_BYTE *)a1 + 47);
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = 0;
  v8 = a1 + 6;
  v12 = *((__n128 *)a1 + 3);
  v9 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (*((char *)a1 + 47) < 0)
    operator delete((void *)*v6);
  v10 = *(__int128 *)((char *)a2 + 24);
  v6[2] = *((_QWORD *)a2 + 5);
  *(_OWORD *)v6 = v10;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  *v8 = a2[3];
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v3;
  *((_QWORD *)a2 + 1) = *(_QWORD *)v14;
  *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v14[7];
  *((_BYTE *)a2 + 23) = v4;
  if (*((char *)a2 + 47) < 0)
    operator delete(*((void **)a2 + 3));
  *((_QWORD *)a2 + 3) = v5;
  *((_QWORD *)a2 + 4) = *(_QWORD *)v13;
  *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)&v13[7];
  *((_BYTE *)a2 + 47) = v7;
  result = v12;
  a2[3] = (__int128)v12;
  return result;
}

double std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(uint64_t *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(__int128 *, __int128 *, __n128))
{
  char v8;
  int v9;
  double result;
  uint64_t *v11;
  __n128 v12;
  __n128 v13;

  v8 = ((uint64_t (*)(__int128 *, uint64_t *))*a4)(a2, a1);
  v9 = ((uint64_t (*)(__int128 *, __int128 *))*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if (v9)
    {
      v11 = a1;
    }
    else
    {
      v13 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(a1, a2);
      if (!(*a4)(a3, a2, v13))
        return result;
      v11 = (uint64_t *)a2;
    }
    *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(v11, a3).n128_u64[0];
  }
  else if (v9)
  {
    v12 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)a2, a3);
    if ((*a4)(a2, (__int128 *)a1, v12))
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(a1, a2).n128_u64[0];
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(__int128 *, __int128 *, __n128))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __n128 v26;

  v6 = (a2 - a1) >> 6;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(uint64_t, uint64_t))*a3)(a2 - 64, a1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)a1, (__int128 *)(a2 - 64));
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)a1, (__int128 *)(a1 + 64), (__int128 *)(a2 - 64), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)a1, (__int128 *)(a1 + 64), (__int128 *)(a1 + 128), (__int128 *)(a2 - 64), a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)a1, (__int128 *)(a1 + 64), (__int128 *)(a1 + 128), (__int128 *)(a1 + 192), (__int128 *)(a2 - 64), a3);
      return 1;
    default:
      v8 = (__int128 *)(a1 + 128);
      v9.n128_f64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>((uint64_t *)a1, (__int128 *)(a1 + 64), (__int128 *)(a1 + 128), a3);
      v10 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v10, v8, v9))
    {
      *(_OWORD *)__p = *(_OWORD *)v10;
      v23 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v13 = *(_OWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v24 = v13;
      v25 = *(_QWORD *)(v10 + 40);
      *(_QWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 40) = 0;
      v14 = v11;
      v26 = *(__n128 *)(v10 + 48);
      while (1)
      {
        v15 = a1 + v14;
        v16 = (void **)(a1 + v14 + 192);
        if (*(char *)(a1 + v14 + 215) < 0)
          operator delete(*v16);
        *(_OWORD *)v16 = *(_OWORD *)(v15 + 128);
        *(_QWORD *)(a1 + v14 + 208) = *(_QWORD *)(v15 + 144);
        *(_BYTE *)(v15 + 151) = 0;
        *(_BYTE *)(v15 + 128) = 0;
        v17 = v15 + 216;
        if (*(char *)(v15 + 239) < 0)
          operator delete(*(void **)v17);
        v18 = a1 + v14;
        *(_OWORD *)v17 = *(_OWORD *)(a1 + v14 + 152);
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(a1 + v14 + 168);
        *(_BYTE *)(v18 + 175) = 0;
        *(_BYTE *)(v18 + 152) = 0;
        *(_OWORD *)(v18 + 240) = *(_OWORD *)(a1 + v14 + 176);
        if (v14 == -128)
          break;
        v14 -= 64;
        if ((((uint64_t (*)(void **, uint64_t))*a3)(__p, v18 + 64) & 1) == 0)
        {
          v19 = a1 + v14 + 192;
          goto LABEL_16;
        }
      }
      v19 = a1;
LABEL_16:
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      v20 = 0;
      v21 = (void **)(v18 + 152);
      *(_OWORD *)v19 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 16) = v23;
      HIBYTE(v23) = 0;
      LOBYTE(__p[0]) = 0;
      if (*(char *)(v19 + 47) < 0)
      {
        operator delete(*v21);
        v20 = HIBYTE(v23);
      }
      *(_OWORD *)v21 = v24;
      *(_QWORD *)(v18 + 168) = v25;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      v9 = v26;
      *(__n128 *)(v18 + 176) = v26;
      if (v20 < 0)
        operator delete(__p[0]);
      if (++v12 == 8)
        return v10 + 64 == a2;
    }
    v8 = (__int128 *)v10;
    v11 += 64;
    v10 += 64;
    if (v10 == a2)
      return 1;
  }
}

void sub_228529280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  InputTranscoder::CTCConfiguration::~CTCConfiguration((void **)va);
  _Unwind_Resume(a1);
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, unsigned int (**a5)(__int128 *, __int128 *, __n128))
{
  double v10;
  double result;
  __n128 v12;
  __n128 v13;

  v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(a1, a2, a3, a5);
  if (((unsigned int (*)(__int128 *, __int128 *, double))*a5)(a4, a3, v10))
  {
    v12 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)a3, a4);
    if ((*a5)(a3, a2, v12))
    {
      v13 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)a2, a3);
      if ((*a5)(a2, (__int128 *)a1, v13))
        *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(a1, a2).n128_u64[0];
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(uint64_t *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, unsigned int (**a6)(__int128 *, __int128 *, __n128))
{
  double v12;
  double result;
  __n128 v14;
  __n128 v15;
  __n128 v16;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput const&),InputTranscoder::CTCSurfaceFormOutput*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, __int128 *, double))*a6)(a5, a4, v12))
  {
    v14 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)a4, a5);
    if ((*a6)(a4, a3, v14))
    {
      v15 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)a3, a4);
      if ((*a6)(a3, a2, v15))
      {
        v16 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>((uint64_t *)a2, a3);
        if ((*a6)(a2, (__int128 *)a1, v16))
          *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput *&,InputTranscoder::CTCSurfaceFormOutput *&>(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_228529594(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::unique_ptr<InputTranscoder::CandidateImpl>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100](i - 8, v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<InputTranscoder::CandidateImpl>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 1;
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
          std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)v6, v7);
      }
      while (v6-- != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<InputTranscoder::CTCSurfaceFormOutput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 72);
    v2 -= 72;
    *(_QWORD *)(v4 - 72) = v5;
    v4 -= 72;
    v6 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v7 = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
    *(_OWORD *)(v4 + 32) = v7;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(v2 + 56);
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

uint64_t std::__split_buffer<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>,0>(i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::construct_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,InputTranscoder::CTCSurfaceFormOutput const&,InputTranscoder::CTCSurfaceFormOutput*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  return this;
}

void sub_2285298A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<InputTranscoder::KeyCandidateImpl>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<InputTranscoder::KeyCandidateImpl>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<InputTranscoder::KeyCandidateImpl>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

__n128 std::vector<InputTranscoder::CTCSurfaceFormOutput>::__insert_with_size[abi:ne180100]<std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>,std::__wrap_iter<InputTranscoder::CTCSurfaceFormOutput*>>(std::string **a1, uint64_t a2, std::string *__str, char *a4, uint64_t a5)
{
  std::string *v6;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  std::string *v22;
  uint64_t v23;
  __n128 result;
  std::string *v25;
  std::string *v26;
  uint64_t v27;
  char *v28;
  std::string *v29;
  std::string *v30;
  unint64_t v31;
  std::string *v32;
  __int128 v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  __int128 v37;
  std::string *v38;
  char *v39;
  unint64_t v40;
  __int128 *v41;
  std::string *v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  __int128 *v51;
  __int128 v52;
  void **v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  std::string *v57;
  std::string *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;

  if (a5 < 1)
    return result;
  v6 = __str;
  v8 = *a1;
  v9 = a2 - (_QWORD)*a1;
  v10 = v9 >> 6;
  v11 = (unint64_t)*a1 + (v9 & 0xFFFFFFFFFFFFFFC0);
  v14 = a1[2];
  v12 = (uint64_t)(a1 + 2);
  v13 = v14;
  v15 = *(_QWORD *)(v12 - 8);
  if (a5 <= (uint64_t)((uint64_t)v14 - v15) >> 6)
  {
    v20 = (uint64_t)(v15 - v11) >> 6;
    if (v20 >= a5)
    {
      v22 = (std::string *)((char *)__str + 64 * a5);
      v25 = *(std::string **)(v12 - 8);
    }
    else
    {
      v22 = (std::string *)((char *)__str + 64 * v20);
      if (v22 == (std::string *)a4)
      {
        v25 = *(std::string **)(v12 - 8);
      }
      else
      {
        v56 = v10;
        v23 = 0;
        do
        {
          std::construct_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,InputTranscoder::CTCSurfaceFormOutput&,InputTranscoder::CTCSurfaceFormOutput*>((std::string *)(v15 + v23), (__int128 *)((char *)v22 + v23));
          v23 += 64;
        }
        while ((char *)v22 + v23 != a4);
        v25 = (std::string *)(v15 + v23);
        v10 = v56;
      }
      a1[1] = v25;
      if ((uint64_t)(v15 - v11) < 1)
        return result;
    }
    v40 = v11 + (a5 << 6);
    v41 = (__int128 *)((char *)v25 - 64 * a5);
    v42 = v25;
    if ((unint64_t)v41 < v15)
    {
      v42 = v25;
      do
      {
        v43 = *v41;
        v42->__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
        *((_QWORD *)v41 + 1) = 0;
        *((_QWORD *)v41 + 2) = 0;
        *(_QWORD *)v41 = 0;
        v44 = *(__int128 *)((char *)v41 + 24);
        v42[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 5);
        *(_OWORD *)&v42[1].__r_.__value_.__l.__data_ = v44;
        *((_QWORD *)v41 + 4) = 0;
        *((_QWORD *)v41 + 5) = 0;
        *((_QWORD *)v41 + 3) = 0;
        result = (__n128)v41[3];
        *(__n128 *)&v42[2].__r_.__value_.__l.__data_ = result;
        v42 = (std::string *)((char *)v42 + 64);
        v41 += 4;
      }
      while ((unint64_t)v41 < v15);
    }
    a1[1] = v42;
    if (v25 != (std::string *)v40)
    {
      v45 = 0;
      v46 = (uint64_t)((uint64_t)v25 - v40) >> 6;
      v47 = (uint64_t)v8 + 64 * v10 + 64 * v46;
      v48 = -64 * v46;
      do
      {
        v49 = (uint64_t)v25 + v45;
        v50 = (void **)((char *)&v25[-2] + v45 - 16);
        if (*((char *)&v25[-1] + v45 - 17) < 0)
          operator delete(*v50);
        v51 = (__int128 *)(v47 + v45 - 64);
        v52 = *v51;
        v25[-2].__r_.__value_.__r.__words[v45 / 8] = *(_QWORD *)(v47 + v45 - 48);
        *(_OWORD *)v50 = v52;
        *(_BYTE *)(v47 + v45 - 41) = 0;
        *(_BYTE *)v51 = 0;
        v53 = (void **)(v49 - 40);
        if (*(char *)(v49 - 17) < 0)
          operator delete(*v53);
        v54 = v47 + v45;
        v55 = *(_OWORD *)(v47 + v45 - 40);
        *(_QWORD *)(v49 - 24) = *(_QWORD *)(v47 + v45 - 24);
        *(_OWORD *)v53 = v55;
        *(_BYTE *)(v54 - 17) = 0;
        *(_BYTE *)(v54 - 40) = 0;
        result = *(__n128 *)(v47 + v45 - 16);
        *(__n128 *)((char *)&v25->__r_.__value_.__l + v45 - 16) = result;
        v45 -= 64;
      }
      while (v48 != v45);
    }
    for (; v6 != v22; v11 += 64)
    {
      std::string::operator=((std::string *)v11, v6);
      std::string::operator=((std::string *)(v11 + 24), v6 + 1);
      result = *(__n128 *)&v6[2].__r_.__value_.__l.__data_;
      *(__n128 *)(v11 + 48) = result;
      v6 = (std::string *)((char *)v6 + 64);
    }
  }
  else
  {
    v16 = a5 + ((uint64_t)(v15 - (_QWORD)v8) >> 6);
    if (v16 >> 58)
      std::vector<InputTranscoder::PathTrie *>::__throw_length_error[abi:ne180100]();
    v17 = (char *)v13 - (char *)v8;
    if (v17 >> 5 > v16)
      v16 = v17 >> 5;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFC0)
      v18 = 0x3FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v61 = v12;
    if (v18)
      v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>(v12, v18);
    else
      v19 = 0;
    v26 = (std::string *)((char *)v19 + 64 * v10);
    v57 = v19;
    v58 = v26;
    v59 = (unint64_t)v26;
    v60 = (char *)v19 + 64 * v18;
    v27 = a5 << 6;
    v28 = (char *)v26 + 64 * a5;
    do
    {
      std::construct_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,InputTranscoder::CTCSurfaceFormOutput&,InputTranscoder::CTCSurfaceFormOutput*>(v26, (__int128 *)v6);
      v26 = (std::string *)((char *)v26 + 64);
      v6 = (std::string *)((char *)v6 + 64);
      v27 -= 64;
    }
    while (v27);
    v29 = v58;
    v30 = *a1;
    if (*a1 == (std::string *)v11)
    {
      v32 = v58;
    }
    else
    {
      v31 = v11;
      do
      {
        v32 = (std::string *)((char *)v29 - 64);
        v33 = *(_OWORD *)(v31 - 64);
        v29[-2].__r_.__value_.__r.__words[0] = *(_QWORD *)(v31 - 48);
        *(_OWORD *)&v29[-3].__r_.__value_.__r.__words[1] = v33;
        *(_QWORD *)(v31 - 56) = 0;
        *(_QWORD *)(v31 - 48) = 0;
        *(_QWORD *)(v31 - 64) = 0;
        v34 = *(_OWORD *)(v31 - 40);
        v29[-1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v31 - 24);
        *(_OWORD *)&v29[-2].__r_.__value_.__r.__words[1] = v34;
        *(_QWORD *)(v31 - 32) = 0;
        *(_QWORD *)(v31 - 24) = 0;
        *(_QWORD *)(v31 - 40) = 0;
        *(_OWORD *)&v29[-1].__r_.__value_.__r.__words[1] = *(_OWORD *)(v31 - 16);
        v31 -= 64;
        v29 = (std::string *)((char *)v29 - 64);
      }
      while ((std::string *)v31 != v30);
    }
    v35 = a1[1];
    if (v35 != (std::string *)v11)
    {
      do
      {
        v36 = *(_OWORD *)v11;
        *((_QWORD *)v28 + 2) = *(_QWORD *)(v11 + 16);
        *(_OWORD *)v28 = v36;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        v37 = *(_OWORD *)(v11 + 24);
        *((_QWORD *)v28 + 5) = *(_QWORD *)(v11 + 40);
        *(_OWORD *)(v28 + 24) = v37;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 40) = 0;
        *(_QWORD *)(v11 + 24) = 0;
        *((_OWORD *)v28 + 3) = *(_OWORD *)(v11 + 48);
        v28 += 64;
        v11 += 64;
      }
      while ((std::string *)v11 != v35);
      v11 = (unint64_t)a1[1];
    }
    v38 = *a1;
    *a1 = v32;
    a1[1] = (std::string *)v28;
    v39 = (char *)a1[2];
    a1[2] = (std::string *)v60;
    v59 = v11;
    v60 = v39;
    v57 = v38;
    v58 = v38;
    std::__split_buffer<InputTranscoder::CTCSurfaceFormOutput>::~__split_buffer((uint64_t)&v57);
  }
  return result;
}

std::string *std::construct_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,InputTranscoder::CTCSurfaceFormOutput&,InputTranscoder::CTCSurfaceFormOutput*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  return this;
}

void sub_228529D98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F1112A0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F1112A0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x22E2B18DCLL);
}

char *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24F1112A0;
  std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_228529E9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_24F1112A0;
  return std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0 const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::destroy(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(a1 + 8);
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::destroy_deallocate(void *a1)
{
  std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1 + 8, a1 + 32);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,ITAutocorrectionOperations ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

std::string *std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::addCandidateErrorType(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0 const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_228529FD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>>,CGPoint ()(InputTranscoder::KeyboardLayout &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>>,CGPoint ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F111330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>>,CGPoint ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F111330;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>>,CGPoint ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, double, double))(a1 + 8))(a2, *(double *)(a1 + 16), *(double *)(a1 + 24));
}

uint64_t std::__function::__func<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>>,CGPoint ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<CGPoint (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint&,std::placeholders::__ph<1> const&>>,CGPoint ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F1113F0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F1113F0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x22E2B18DCLL);
}

char *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_24F1113F0;
  std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_22852A1B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_24F1113F0;
  return std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0 const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::destroy(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(a1 + 8);
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::destroy_deallocate(void *a1)
{
  std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>((uint64_t)a1 + 8);
  operator delete(a1);
}

double std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  double v4;
  std::string v6;
  std::string __p;
  std::string v8;
  std::string v9;

  InputTranscoder::removeSpace(a1 + 8, &v8);
  InputTranscoder::removeUnwantedCharacters((uint64_t)&v8, &v9);
  InputTranscoder::removeSpace(a1 + 32, &v6);
  InputTranscoder::removeUnwantedCharacters((uint64_t)&v6, &__p);
  v4 = (*(double (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a2 + 48))(a2, &v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v4;
}

void sub_22852A2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0>,double ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

std::string *std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::getEditDistancePenalty(std::string const&,std::string const&)::$_0 const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_22852A3F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111480;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111480;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x22E2B18DCLL);
}

char *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = off_24F111480;
  std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_22852A51C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_24F111480;
  return std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0 const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 72);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

std::string *std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0 const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  v6 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    this[3].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 10);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_22852A694(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::updateCondenseFormForCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,ITTypingMode)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111500;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111500;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x22E2B18DCLL);
}

char *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24F111500;
  std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_22852A804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_24F111500;
  return std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0 const&,0ul>((std::string *)(a2 + 8), (__int128 *)(a1 + 8));
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>(a1 + 8);
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy_deallocate(void *a1)
{
  std::__destroy_at[abi:ne180100]<InputTranscoder::CTCSurfaceFormOutput,0>((uint64_t)a1 + 8);
  operator delete(a1);
}

std::string *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::operator()@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return InputTranscoder::removeUnwantedCharacters(a1 + 8, a2);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0>,std::string ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

std::string *std::__compressed_pair_elem<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<InputTranscoder::TouchTranscoderSessionImpl::uniquifyEquivalentCandidates(std::vector<InputTranscoder::CTCSurfaceFormOutput> &)::$_0 const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = a2[3];
  return this;
}

void sub_22852A934(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0>,BOOL ()(InputTranscoder::CTCDecoder &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0>,BOOL ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F111580;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0>,BOOL ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F111580;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0>,BOOL ()(InputTranscoder::CTCDecoder &)>::operator()(uint64_t a1, uint64_t a2)
{
  return InputTranscoder::LexiconContainer::isPresentInLexicon(a2 + 192, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0>,BOOL ()(InputTranscoder::CTCDecoder &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::shouldRunBigram(std::string const&,std::string const&)::$_0>,BOOL ()(InputTranscoder::CTCDecoder &)>::target_type()
{
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24F111610;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24F111610;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  const float *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  void (*v23)(unsigned __int8 **@<X0>, uint64_t *@<X1>, _QWORD *@<X8>);
  std::string __p;
  void (*v25)(unsigned __int8 **@<X0>, uint64_t *@<X1>, _QWORD *@<X8>);
  std::string v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(__int128 **)(a1 + 32);
  v7 = **(_QWORD **)(a1 + 24);
  v25 = InputTranscoder::filterPrefixes;
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v8 = *v6;
    v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
  }
  v22 = *(_OWORD *)(a1 + 40);
  v9 = *(_QWORD **)(a2 + 184);
  if (v9)
    InputTranscoder::LMScorer::setContext(v9, (char *)(v5 + 688));
  InputTranscoder::CTCDecoder::setLexiconPrefix(a2, (std::string *)(v5 + 712));
  v10 = **(_QWORD **)(a1 + 56);
  v11 = **(const float ***)(a1 + 64);
  v12 = **(_QWORD **)(a1 + 72);
  v33 = 0;
  v13 = operator new(0x40uLL);
  *v13 = &off_24F111680;
  v13[1] = InputTranscoder::TouchTranscoderSessionImpl::extractCandidatesAndSavePrefixInfo;
  v13[2] = 0;
  v13[3] = v5;
  v13[4] = v4;
  v13[5] = &v27;
  v13[6] = (char *)&v27 + 4;
  v13[7] = v7;
  v33 = v13;
  v23 = v25;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    __p = v26;
  v31 = 0;
  v14 = (char *)operator new(0x28uLL);
  *(_QWORD *)v14 = off_24F111728;
  *((_QWORD *)v14 + 1) = v23;
  *(std::string *)(v14 + 16) = __p;
  memset(&__p, 0, sizeof(__p));
  v31 = v14;
  v29 = 0;
  v15 = operator new(0x30uLL);
  *v15 = &off_24F1117E8;
  v15[1] = InputTranscoder::TouchTranscoderSessionImpl::extractCompletionsAndPrefixes;
  v15[2] = 0;
  v15[3] = v5;
  *((_OWORD *)v15 + 2) = v22;
  v29 = v15;
  InputTranscoder::CTCDecoder::decode(a2, v10, v11, v12, (uint64_t)v32, (uint64_t)v30, (uint64_t)v28);
  v16 = v29;
  if (v29 == v28)
  {
    v17 = 4;
    v16 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_14;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_14:
  v18 = v31;
  if (v31 == v30)
  {
    v19 = 4;
    v18 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_19;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_19:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = v33;
  if (v33 == v32)
  {
    v21 = 4;
    v20 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_26;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_26:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_22852AD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;

  v35 = *(_QWORD **)(v33 - 96);
  if (v35 == (_QWORD *)(v33 - 120))
  {
    v36 = 4;
    v35 = (_QWORD *)(v33 - 120);
  }
  else
  {
    if (!v35)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_6:
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0,std::allocator<InputTranscoder::TouchTranscoderSessionImpl::enumerateCandidatesImpl(__CFDictionary const*,std::function<BOOL ()(std::unique_ptr<InputTranscoder::CandidateImpl>)> const&,std::string &)::$_0>,void ()(InputTranscoder::CTCDecoder &)>::target_type()
{
}

void InputTranscoder::filterPrefixes(unsigned __int8 **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  char v10;
  char v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int64x2_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  int64x2_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  _QWORD v55[3];
  void **v56;
  int64x2_t v57;
  unint64_t v58;
  _QWORD *v59;

  v54 = 0uLL;
  v55[0] = 0;
  v5 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
  if ((char)v5 < 0)
    v5 = a1[1];
  if (!v5)
  {
    if (&v54 == (__int128 *)a2)
    {
      v30 = 0;
      v29 = 0;
    }
    else
    {
      std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__assign_with_size[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>((uint64_t)&v54, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
      v30 = *((_QWORD *)&v54 + 1);
      v29 = v54;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__init_with_size[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(a3, v29, v30, 0x8E38E38E38E38E39 * ((v30 - v29) >> 3));
    goto LABEL_90;
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v9 = 0;
    goto LABEL_85;
  }
  v9 = 0;
  v10 = 0;
LABEL_6:
  v11 = *((_BYTE *)a1 + 23);
  if (v11 >= 0)
    v12 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
  else
    v12 = a1[1];
  if (v11 >= 0)
    v13 = (unsigned __int8 *)a1;
  else
    v13 = *a1;
  do
  {
    v14 = *(unsigned __int8 *)(v6 + 31);
    if ((v14 & 0x80u) == 0)
      v15 = (unsigned __int8 *)*(unsigned __int8 *)(v6 + 31);
    else
      v15 = *(unsigned __int8 **)(v6 + 16);
    if (v15 == v12)
    {
      if ((v14 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v6 + 8), v13, *(_QWORD *)(v6 + 16)))
        {
LABEL_25:
          if (v9 >= v55[0])
          {
            v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v54) >> 3);
            v18 = v17 + 1;
            if (v17 + 1 > 0x38E38E38E38E38ELL)
              std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v55[0] - v54) >> 3) > v18)
              v18 = 0x1C71C71C71C71C72 * ((uint64_t)(v55[0] - v54) >> 3);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v55[0] - v54) >> 3) >= 0x1C71C71C71C71C7)
              v19 = 0x38E38E38E38E38ELL;
            else
              v19 = v18;
            v59 = v55;
            if (v19)
              v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>>(v19);
            else
              v20 = 0;
            v56 = (void **)v19;
            v57.i64[0] = v19 + 72 * v17;
            v57.i64[1] = v57.i64[0];
            v58 = v19 + 72 * v20;
            std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>::pair[abi:ne180100](v57.i64[0], v6);
            v21 = v57.i64[0];
            v9 = v57.i64[1] + 72;
            v57.i64[1] += 72;
            v22 = *((_QWORD *)&v54 + 1);
            v23 = v54;
            if (*((_QWORD *)&v54 + 1) == (_QWORD)v54)
            {
              v27 = vdupq_n_s64(*((unint64_t *)&v54 + 1));
            }
            else
            {
              do
              {
                v24 = *(_QWORD *)(v22 - 72);
                v22 -= 72;
                *(_QWORD *)(v21 - 72) = v24;
                v21 -= 72;
                v25 = *(_OWORD *)(v22 + 8);
                *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
                *(_OWORD *)(v21 + 8) = v25;
                *(_QWORD *)(v22 + 16) = 0;
                *(_QWORD *)(v22 + 24) = 0;
                *(_QWORD *)(v22 + 8) = 0;
                v26 = *(_OWORD *)(v22 + 32);
                *(_QWORD *)(v21 + 48) = *(_QWORD *)(v22 + 48);
                *(_OWORD *)(v21 + 32) = v26;
                *(_QWORD *)(v22 + 40) = 0;
                *(_QWORD *)(v22 + 48) = 0;
                *(_QWORD *)(v22 + 32) = 0;
                *(_OWORD *)(v21 + 56) = *(_OWORD *)(v22 + 56);
              }
              while (v22 != v23);
              v27 = (int64x2_t)v54;
              v9 = v57.u64[1];
            }
            *(_QWORD *)&v54 = v21;
            *((_QWORD *)&v54 + 1) = v9;
            v57 = v27;
            v28 = v55[0];
            v55[0] = v58;
            v58 = v28;
            v56 = (void **)v27.i64[0];
            std::__split_buffer<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::~__split_buffer((uint64_t)&v56);
          }
          else
          {
            std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>::pair[abi:ne180100](v9, v6);
            v9 += 72;
          }
          *((_QWORD *)&v54 + 1) = v9;
          v6 += 72;
          v10 = 1;
          if (v6 == v7)
          {
LABEL_46:
            v31 = *a2;
            v32 = a2[1];
            if (*a2 == v32)
            {
LABEL_83:
              v53 = v55[0];
              *a3 = v54;
              a3[1] = v9;
              a3[2] = v53;
              v55[0] = 0;
              v54 = 0uLL;
              goto LABEL_90;
            }
            while (2)
            {
              v33 = *(unsigned __int8 *)(v31 + 31);
              v34 = *(unsigned __int8 **)(v31 + 16);
              if ((v33 & 0x80u) == 0)
                v35 = (unsigned __int8 *)*(unsigned __int8 *)(v31 + 31);
              else
                v35 = *(unsigned __int8 **)(v31 + 16);
              v36 = *((char *)a1 + 23);
              if (v36 >= 0)
                v37 = (unsigned __int8 *)*((unsigned __int8 *)a1 + 23);
              else
                v37 = a1[1];
              if (v35 == v37)
              {
                if (v36 >= 0)
                  v38 = (unsigned __int8 *)a1;
                else
                  v38 = *a1;
                if ((v33 & 0x80) != 0)
                {
                  v40 = memcmp(*(const void **)(v31 + 8), v38, *(_QWORD *)(v31 + 16));
                  v35 = v34;
                  if (v40)
                    goto LABEL_64;
                }
                else if (*(_BYTE *)(v31 + 31))
                {
                  v39 = 0;
                  while (*(unsigned __int8 *)(v31 + v39 + 8) == v38[v39])
                  {
                    if (v33 == ++v39)
                      goto LABEL_82;
                  }
                  goto LABEL_64;
                }
              }
              else
              {
LABEL_64:
                if (v35 == v37)
                {
                  if (v9 >= v55[0])
                  {
                    v41 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v54) >> 3);
                    v42 = v41 + 1;
                    if (v41 + 1 > 0x38E38E38E38E38ELL)
                      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
                    if (0x1C71C71C71C71C72 * ((uint64_t)(v55[0] - v54) >> 3) > v42)
                      v42 = 0x1C71C71C71C71C72 * ((uint64_t)(v55[0] - v54) >> 3);
                    if (0x8E38E38E38E38E39 * ((uint64_t)(v55[0] - v54) >> 3) >= 0x1C71C71C71C71C7)
                      v43 = 0x38E38E38E38E38ELL;
                    else
                      v43 = v42;
                    v59 = v55;
                    if (v43)
                      v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>>(v43);
                    else
                      v44 = 0;
                    v56 = (void **)v43;
                    v57.i64[0] = v43 + 72 * v41;
                    v57.i64[1] = v57.i64[0];
                    v58 = v43 + 72 * v44;
                    std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>::pair[abi:ne180100](v57.i64[0], v31);
                    v45 = v57.i64[0];
                    v9 = v57.i64[1] + 72;
                    v57.i64[1] += 72;
                    v46 = *((_QWORD *)&v54 + 1);
                    v47 = v54;
                    if (*((_QWORD *)&v54 + 1) == (_QWORD)v54)
                    {
                      v51 = vdupq_n_s64(*((unint64_t *)&v54 + 1));
                    }
                    else
                    {
                      do
                      {
                        v48 = *(_QWORD *)(v46 - 72);
                        v46 -= 72;
                        *(_QWORD *)(v45 - 72) = v48;
                        v45 -= 72;
                        v49 = *(_OWORD *)(v46 + 8);
                        *(_QWORD *)(v45 + 24) = *(_QWORD *)(v46 + 24);
                        *(_OWORD *)(v45 + 8) = v49;
                        *(_QWORD *)(v46 + 16) = 0;
                        *(_QWORD *)(v46 + 24) = 0;
                        *(_QWORD *)(v46 + 8) = 0;
                        v50 = *(_OWORD *)(v46 + 32);
                        *(_QWORD *)(v45 + 48) = *(_QWORD *)(v46 + 48);
                        *(_OWORD *)(v45 + 32) = v50;
                        *(_QWORD *)(v46 + 40) = 0;
                        *(_QWORD *)(v46 + 48) = 0;
                        *(_QWORD *)(v46 + 32) = 0;
                        *(_OWORD *)(v45 + 56) = *(_OWORD *)(v46 + 56);
                      }
                      while (v46 != v47);
                      v51 = (int64x2_t)v54;
                      v9 = v57.u64[1];
                    }
                    *(_QWORD *)&v54 = v45;
                    *((_QWORD *)&v54 + 1) = v9;
                    v57 = v51;
                    v52 = v55[0];
                    v55[0] = v58;
                    v58 = v52;
                    v56 = (void **)v51.i64[0];
                    std::__split_buffer<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::~__split_buffer((uint64_t)&v56);
                  }
                  else
                  {
                    std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>::pair[abi:ne180100](v9, v31);
                    v9 += 72;
                  }
                  *((_QWORD *)&v54 + 1) = v9;
                }
              }
LABEL_82:
              v31 += 72;
              if (v31 == v32)
                goto LABEL_83;
              continue;
            }
          }
          goto LABEL_6;
        }
      }
      else
      {
        if (!*(_BYTE *)(v6 + 31))
          goto LABEL_25;
        v16 = 0;
        while (*(unsigned __int8 *)(v6 + v16 + 8) == v13[v16])
        {
          if (v14 == ++v16)
            goto LABEL_25;
        }
      }
    }
    v6 += 72;
  }
  while (v6 != v7);
  if ((v10 & 1) != 0)
    goto LABEL_46;
LABEL_85:
  if (&v54 != (__int128 *)a2)
  {
    std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__assign_with_size[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>((uint64_t)&v54, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
    v9 = *((_QWORD *)&v54 + 1);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__init_with_size[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(a3, v54, v9, 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v54) >> 3));
LABEL_90:
  v56 = (void **)&v54;
  std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__destroy_vector::operator()[abi:ne180100](&v56);
}

void sub_22852B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__assign_with_size[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  v8 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v9 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v9;
    std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__vallocate[abi:ne180100]((_QWORD *)a1, v10);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v12 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *>(a2, v12, (uint64_t)v8);
    v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(v12, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v11;
    return;
  }
  v13 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *>(a2, a3, (uint64_t)v8);
  for (i = *(_QWORD *)(a1 + 8);
        i != v13;
        std::__destroy_at[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>,0>(i))
  {
    i -= 72;
  }
  *(_QWORD *)(a1 + 8) = v13;
}

void sub_22852B5F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22852B5F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>::pair[abi:ne180100](a3 + v6, a1 + v6);
      v6 += 72;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_22852B6AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 72;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>,0>(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

void sub_22852B768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v5 + 8));
      std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v5 + 32));
      *(_OWORD *)(a3 + 56) = *(_OWORD *)(v5 + 56);
      a3 += 72;
      v5 += 72;
    }
    while (v5 != a2);
  }
  return a3;
}

_QWORD *std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__init_with_size[abi:ne180100]<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22852B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>>,void ()(InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>>,void ()(InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24F111680;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>>,void ()(InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24F111680;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>>,void ()(InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)>::operator()(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))a1[1];
  v5 = a1[2];
  v6 = (_QWORD *)(a1[3] + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*v6 + v4);
  return v4(v6, a1[4], a1[5], a1[6], a1[7], *a2, a3, a4);
}

uint64_t std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>>,void ()(InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,unsigned int &,unsigned int &,__CFDictionary const*,InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<unsigned int>,std::reference_wrapper<unsigned int>,__CFDictionary const*&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&>>,void ()(InputTranscoder::PathTrie *,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> &,BOOL &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111728;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111728;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::string *v4;

  v2 = operator new(0x28uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_24F111728;
  v2[1] = v3;
  v4 = (std::string *)(v2 + 2);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    v2[4] = *(_QWORD *)(a1 + 32);
  }
  return v2;
}

void sub_22852BA7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = off_24F111728;
  a2[1] = v2;
  v3 = (std::string *)(a2 + 2);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a1 + 16);
    a2[4] = *(_QWORD *)(a1 + 32);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
}

void std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> (*)(std::string const&,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&),std::string const&,std::placeholders::__ph<1> const&>>,std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> ()(std::vector<std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput>> const&)>::target_type()
{
}

void std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>>,void ()(std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>>,void ()(std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24F1117E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>>,void ()(std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24F1117E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>>,void ()(std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;

  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[2];
  v6 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))a1[1];
  v7 = (_QWORD *)(a1[3] + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v7 + v6);
  return v6(v7, v3, v4, a2);
}

uint64_t std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>>,void ()(std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (InputTranscoder::TouchTranscoderSessionImpl::*)(std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::vector<InputTranscoder::CTCSurfaceFormOutput> &,std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)const,InputTranscoder::TouchTranscoderSessionImpl*,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::reference_wrapper<std::vector<InputTranscoder::CTCSurfaceFormOutput>>,std::placeholders::__ph<1> const&>>,void ()(std::pair<InputTranscoder::PathTrie *,InputTranscoder::CTCSurfaceFormOutput> const&)>::target_type()
{
}

void std::__function::__func<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>>,std::vector<InputTranscoder::KeyCandidateImpl> ()(InputTranscoder::KeyboardLayout &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>>,std::vector<InputTranscoder::KeyCandidateImpl> ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F1118A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>>,std::vector<InputTranscoder::KeyCandidateImpl> ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1118A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>>,std::vector<InputTranscoder::KeyCandidateImpl> ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, double, double))(a1 + 8))(a2, *(double *)(a1 + 16), *(double *)(a1 + 24));
}

uint64_t std::__function::__func<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>>,std::vector<InputTranscoder::KeyCandidateImpl> ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<std::vector<InputTranscoder::KeyCandidateImpl> (&)(CGPoint,InputTranscoder::KeyboardLayout &),CGPoint const&,std::placeholders::__ph<1> const&>>,std::vector<InputTranscoder::KeyCandidateImpl> ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

os_log_t ___nlpDefaultLog_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.InputTranscoder", "Default");
  _nlpDefaultLog::log = (uint64_t)result;
  return result;
}

os_log_t ___nlpSignpostLog_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.InputTranscoder", "InputTranscoderSignposts");
  _nlpSignpostLog::log = (uint64_t)result;
  return result;
}

void InputTranscoder::getPrunedLogProbs(InputTranscoder *this@<X0>, const float *a2@<X1>, double a3@<D0>, uint64_t a4@<X2>, unsigned int a5@<W3>, unsigned int a6@<W4>, float **a7@<X8>)
{
  float *v12;
  float *v13;
  float *v14;
  const float *v15;
  const float *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  float *v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  int v50;
  float *v51;
  char v53;
  float *v54;
  double v55;
  unint64_t v56;
  float v57;
  unint64_t v58;
  float *v59;
  float *v60;
  float *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  float *i;
  float *v71;
  float v72;
  BOOL (*v74)(uint64_t, uint64_t);

  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  if (a2)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = (const float *)a5;
    do
    {
      if (v15 != v16)
      {
        if (v14 >= v13)
        {
          v17 = ((char *)v14 - (char *)v12) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
          if (v13 - v12 > v18)
            v18 = v13 - v12;
          if ((unint64_t)((char *)v13 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned int,float>>>(v19);
          v22 = &v20[8 * v17];
          *(_DWORD *)v22 = (_DWORD)v15;
          *((_DWORD *)v22 + 1) = *((_DWORD *)this + (_QWORD)v15);
          v23 = v22;
          while (v14 != v12)
          {
            v24 = *((_QWORD *)v14 - 1);
            v14 -= 2;
            *((_QWORD *)v23 - 1) = v24;
            v23 -= 8;
          }
          v13 = (float *)&v20[8 * v21];
          v14 = (float *)(v22 + 8);
          *a7 = (float *)v23;
          a7[1] = (float *)(v22 + 8);
          a7[2] = v13;
          if (v12)
            operator delete(v12);
          v12 = (float *)v23;
        }
        else
        {
          *(_DWORD *)v14 = (_DWORD)v15;
          v14[1] = *((float *)this + (_QWORD)v15);
          v14 += 2;
        }
        a7[1] = v14;
      }
      v15 = (const float *)((char *)v15 + 1);
    }
    while (v15 != a2);
  }
  else
  {
    v14 = 0;
  }
  if (a3 >= 1.0 && a4 >= (unint64_t)a2)
    goto LABEL_69;
  v26 = *a7;
  v74 = InputTranscoder::pair_second_greater<unsigned long,double>;
  if (a4)
  {
    if (a4 >= 2)
    {
      v27 = (unint64_t)(a4 - 2) >> 1;
      v28 = v27 + 1;
      v29 = &v26[2 * v27];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned long,double> const&,std::pair<unsigned long,double> const&),std::__wrap_iter<std::pair<unsigned int,float> *>>((uint64_t)v26, (uint64_t (**)(uint64_t *, uint64_t *))&v74, a4, v29);
        v29 -= 2;
        --v28;
      }
      while (v28);
    }
    v30 = &v26[2 * a4];
    if (v30 != v14)
    {
      v31 = &v26[2 * a4];
      do
      {
        v32 = v31[1];
        v33 = v26[1];
        if (v32 > v33)
        {
          v34 = *v31;
          *v31 = *v26;
          *v26 = v34;
          v31[1] = v33;
          v26[1] = v32;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned long,double> const&,std::pair<unsigned long,double> const&),std::__wrap_iter<std::pair<unsigned int,float> *>>((uint64_t)v26, (uint64_t (**)(uint64_t *, uint64_t *))&v74, a4, v26);
        }
        v31 += 2;
      }
      while (v31 != v14);
    }
    if (a4 >= 2)
    {
      v35 = a4 & 0x1FFFFFFFFFFFFFFFLL;
      do
      {
        v36 = 0;
        v37 = *v26;
        v38 = v26[1];
        v39 = v35 - 2;
        if (v35 < 2)
          v39 = v35 - 1;
        v40 = v39 >> 1;
        v41 = v26;
        do
        {
          v42 = &v41[2 * v36 + 2];
          v43 = (2 * v36) | 1;
          v44 = 2 * v36 + 2;
          if (v44 < v35)
          {
            v45 = v42[1];
            v46 = v42[3];
            v42 += 2 * (v45 > v46);
            if (v45 > v46)
              v43 = v44;
          }
          *v41 = *v42;
          v41[1] = v42[1];
          v41 = v42;
          v36 = v43;
        }
        while (v43 <= v40);
        if (v30 - 2 == v42)
        {
          *v42 = v37;
        }
        else
        {
          *v42 = *(v30 - 2);
          v42[1] = *(v30 - 1);
          *(v30 - 2) = v37;
          *(v30 - 1) = v38;
          v47 = (char *)v42 - (char *)v26 + 8;
          if (v47 < 9)
            goto LABEL_53;
          v48 = (((unint64_t)v47 >> 3) - 2) >> 1;
          v49 = v26[2 * v48 + 1];
          v38 = v42[1];
          if (v49 <= v38)
            goto LABEL_53;
          v50 = *(_DWORD *)v42;
          do
          {
            v51 = v42;
            v42 = &v26[2 * v48];
            *v51 = *v42;
            v51[1] = v49;
            if (!v48)
              break;
            v48 = (v48 - 1) >> 1;
            v49 = v26[2 * v48 + 1];
          }
          while (v49 > v38);
          *(_DWORD *)v42 = v50;
        }
        v42[1] = v38;
LABEL_53:
        v30 -= 2;
      }
      while (v35-- > 2);
    }
  }
  if (a3 >= 1.0)
  {
    v26 += 2 * a4;
LABEL_68:
    std::vector<std::pair<unsigned int,float>>::erase((uint64_t)a7, (char *)v26, (char *)v14);
LABEL_69:
    if (a6 < (unint64_t)a2)
    {
      v59 = a7[1];
      v58 = (unint64_t)a7[2];
      if ((unint64_t)v59 >= v58)
      {
        v61 = *a7;
        v62 = ((char *)v59 - (char *)*a7) >> 3;
        v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 61)
          std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
        v64 = v58 - (_QWORD)v61;
        if (v64 >> 2 > v63)
          v63 = v64 >> 2;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned int,float>>>(v65);
        v68 = &v66[8 * v62];
        *(_DWORD *)v68 = a6;
        *((_DWORD *)v68 + 1) = *((_DWORD *)this + a6);
        v60 = (float *)(v68 + 8);
        if (v59 != v61)
        {
          do
          {
            v69 = *((_QWORD *)v59 - 1);
            v59 -= 2;
            *((_QWORD *)v68 - 1) = v69;
            v68 -= 8;
          }
          while (v59 != v61);
          v59 = v61;
        }
        *a7 = (float *)v68;
        a7[1] = v60;
        a7[2] = (float *)&v66[8 * v67];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *(_DWORD *)v59 = a6;
        v59[1] = *((float *)this + a6);
        v60 = v59 + 2;
      }
      a7[1] = v60;
    }
    goto LABEL_84;
  }
  if (!a2 || a3 <= 0.0 || !a4)
    goto LABEL_68;
  v53 = 0;
  v54 = v26 + 1;
  v55 = 0.0;
  v56 = 1;
  do
  {
    if (*((_DWORD *)v54 - 1) == a6)
      v53 = 1;
    v26 += 2;
    if (v56 >= a4)
      break;
    if (v56 >= (unint64_t)a2)
      break;
    v57 = *v54;
    v54 += 2;
    v55 = v55 + v57;
    ++v56;
  }
  while (v55 < a3);
  std::vector<std::pair<unsigned int,float>>::erase((uint64_t)a7, (char *)v26, (char *)v14);
  if ((v53 & 1) == 0)
    goto LABEL_69;
LABEL_84:
  v71 = *a7;
  for (i = a7[1]; v71 != i; v71 += 2)
  {
    v72 = log(v71[1] + 2.22507386e-308);
    v71[1] = v72;
  }
}

void sub_22852C240(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL InputTranscoder::pair_second_greater<unsigned long,double>(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) > *(double *)(a2 + 8);
}

uint64_t std::vector<std::pair<unsigned int,float>>::erase(uint64_t result, char *a2, char *a3)
{
  char *v3;
  uint64_t v4;

  if (a2 != a3)
  {
    v3 = *(char **)(result + 8);
    if (a3 != v3)
    {
      v4 = 8 * ((a3 - a2) >> 3);
      do
      {
        *(_DWORD *)a2 = *(_DWORD *)&a2[v4];
        *((_DWORD *)a2 + 1) = *(_DWORD *)&a2[v4 + 4];
        a2 += 8;
      }
      while (&a2[v4] != v3);
    }
    *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t InputTranscoder::CTCSurfaceFormOutput::toString@<X0>(InputTranscoder::CTCSurfaceFormOutput *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  InputTranscoder::CTCSurfaceFormOutput *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD v28[10];
  char v29;
  uint64_t v30;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"surfaceForm=", 12);
  v5 = *((char *)this + 23);
  if (v5 >= 0)
    v6 = this;
  else
    v6 = *(InputTranscoder::CTCSurfaceFormOutput **)this;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 23);
  else
    v7 = *((_QWORD *)this + 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" score=", 7);
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFEFB | 4;
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" isCompletion=", 14);
  if (*((_BYTE *)this + 56))
    v12 = "YES";
  else
    v12 = "NO";
  if (*((_BYTE *)this + 56))
    v13 = 3;
  else
    v13 = 2;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" isValidWord=", 13);
  if (*((_BYTE *)this + 57))
    v16 = "YES";
  else
    v16 = "NO";
  if (*((_BYTE *)this + 57))
    v17 = 3;
  else
    v17 = 2;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" isMultiWord=", 13);
  if (*((_BYTE *)this + 58))
    v20 = "YES";
  else
    v20 = "NO";
  if (*((_BYTE *)this + 58))
    v21 = 3;
  else
    v21 = 2;
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" foundOnlyInDynamicLexicons", 27);
  if (*((_BYTE *)this + 59))
    v24 = "YES";
  else
    v24 = "NO";
  if (*((_BYTE *)this + 59))
    v25 = 3;
  else
    v25 = 2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v28, a2);
  v27 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v28[-1] + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v28[0] = MEMORY[0x24BEDB848] + 16;
  if (v29 < 0)
    operator delete((void *)v28[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22E2B187C](&v30);
}

void sub_22852C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_22852C570(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x22E2B187C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22E2B187C](a1 + 112);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned int,float>>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<unsigned long,double> const&,std::pair<unsigned long,double> const&),std::__wrap_iter<std::pair<unsigned int,float> *>>(uint64_t result, uint64_t (**a2)(uint64_t *, uint64_t *), uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *, uint64_t *);
  uint64_t (*v19)(uint64_t *, uint64_t *);
  uint64_t v20;
  float v21;
  float *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t *, uint64_t *);
  uint64_t (*v25)(uint64_t *, uint64_t *);
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = a3 - 2;
  if (a3 >= 2)
  {
    v30 = v7;
    v31 = v6;
    v32 = v4;
    v33 = v5;
    v9 = a4;
    v10 = result;
    v11 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v14 = ((uint64_t)a4 - result) >> 2;
      v15 = v14 | 1;
      v16 = (float *)(result + 8 * (v14 | 1));
      v17 = v14 + 2;
      if (v14 + 2 < a3)
      {
        v18 = *a2;
        v28 = *(unsigned int *)v16;
        v29 = v16[1];
        v26 = *((unsigned int *)v16 + 2);
        v27 = v16[3];
        if (v18(&v28, &v26))
        {
          v16 += 2;
          v15 = v17;
        }
      }
      v19 = *a2;
      v28 = *(unsigned int *)v16;
      v29 = v16[1];
      v26 = *(unsigned int *)v9;
      v27 = v9[1];
      result = v19(&v28, &v26);
      if ((result & 1) == 0)
      {
        v20 = *(unsigned int *)v9;
        v21 = v9[1];
        do
        {
          v22 = v9;
          v9 = v16;
          *v22 = *v16;
          v22[1] = v16[1];
          if (v11 < v15)
            break;
          v23 = (2 * v15) | 1;
          v16 = (float *)(v10 + 8 * v23);
          v15 = 2 * v15 + 2;
          if (v15 >= a3)
          {
            v15 = v23;
          }
          else
          {
            v24 = (unsigned int (*)(uint64_t *, uint64_t *))*a2;
            v28 = *(unsigned int *)v16;
            v29 = v16[1];
            v26 = *((unsigned int *)v16 + 2);
            v27 = v16[3];
            if (v24(&v28, &v26))
              v16 += 2;
            else
              v15 = v23;
          }
          v25 = *a2;
          v28 = *(unsigned int *)v16;
          v29 = v16[1];
          v26 = v20;
          v27 = v21;
          result = v25(&v28, &v26);
        }
        while (!(_DWORD)result);
        *(_DWORD *)v9 = v20;
        v9[1] = v21;
      }
    }
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E2B17B0](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2B17BC](v13);
  return a1;
}

void sub_22852C934(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E2B17BC](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x22852C914);
}

void sub_22852C97C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_22852CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t InputTranscoder::LMScorer::makeLMScorer@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  float32x2_t v6;
  int8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)result)
  {
    v5 = (uint64_t *)result;
    InputTranscoder::createInternalLanguageModel(a2 + 24, &v13);
    if (v13)
    {
      v6 = *(float32x2_t *)(a2 + 60);
      v7 = *(int8x8_t *)(a2 + 52);
      result = operator new();
      v8 = v13;
      *(float64x2_t *)result = vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vceq_f32(v6, (float32x2_t)0x80000000800000), v7, (int8x8_t)v6));
      v10 = *v5;
      v9 = v5[1];
      *(_QWORD *)(result + 16) = v8;
      *(_QWORD *)(result + 24) = v10;
      *(_QWORD *)(result + 32) = v9;
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
    }
    else
    {
      result = 0;
    }
    *a3 = result;
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_22852CD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<InputTranscoder::LanguageModel>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

unint64_t InputTranscoder::LMScorer::fillNgram(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;

  v8 = 0;
  if (LMLanguageModelGetOrder())
  {
    v9 = (_DWORD *)(a3 + 4 * a4 - 4);
    do
    {
      if (*(_DWORD *)(a2 + 72) == -1)
        break;
      v10 = a1[3];
      v15 = *(_DWORD *)(a2 + 72);
      *v9-- = *(_DWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 32))(v10, &v15);
      ++v8;
      a2 = *(_QWORD *)(a2 + 88);
    }
    while (v8 < LMLanguageModelGetOrder());
  }
  if (v8 < LMLanguageModelGetOrder())
  {
    if (a1[5] == a1[6])
    {
      *(_DWORD *)(a3 + 4 * (a4 + ~v8++)) = 1;
    }
    else
    {
      v11 = LMLanguageModelGetOrder() - v8;
      v12 = a1[5];
      v13 = (a1[6] - v12) >> 2;
      if (v13 < v11)
        v11 = (a1[6] - v12) >> 2;
      v8 += v11;
      if (v11)
        memmove((void *)(a3 + 4 * a4 - 4 * v8), (const void *)(v12 + 4 * v13 - 4 * v11), 4 * v11);
    }
  }
  return v8;
}

void InputTranscoder::LMScorer::setContext(_QWORD *a1, char *a2)
{
  void **v2;
  uint64_t v3;
  char *v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;

  v2 = (void **)(a1 + 5);
  a1[6] = a1[5];
  v3 = a2[23];
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = *(char **)a2;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
    v6 = &v4[v3];
    v7 = (uint64_t)(a1 + 7);
    do
    {
      v8 = a1[3];
      v22 = *v4;
      v9 = (_DWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v8 + 40))(v8, &v22);
      v10 = v9;
      v12 = (char *)a1[6];
      v11 = a1[7];
      if ((unint64_t)v12 >= v11)
      {
        v14 = (char *)*v2;
        v15 = (v12 - (_BYTE *)*v2) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v7, v18);
          v14 = (char *)a1[5];
          v12 = (char *)a1[6];
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[4 * v15];
        *(_DWORD *)v20 = *v10;
        v13 = v20 + 4;
        while (v12 != v14)
        {
          v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        a1[5] = v20;
        a1[6] = v13;
        a1[7] = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_DWORD *)v12 = *v9;
        v13 = v12 + 4;
      }
      a1[6] = v13;
      ++v4;
    }
    while (v4 != v6);
  }
}

CFLocaleRef InputTranscoder::copyLocale(InputTranscoder *this, const __CFDictionary *a2)
{
  const __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  CFTypeID v6;

  Value = (const __CFString *)CFDictionaryGetValue(this, CFSTR("locale"));
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 == CFStringGetTypeID())
    return CFLocaleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v3);
  v6 = CFGetTypeID(v3);
  if (v6 == CFLocaleGetTypeID())
    return (CFLocaleRef)CFRetain(v3);
  else
    return 0;
}

CFPropertyListRef InputTranscoder::createModelMetadata(InputTranscoder *this, __CFBundle *a2, const __CFString *a3, const __CFString *a4)
{
  const __CFString *LanguageAndScriptCode;
  nlp *v7;
  __CFError **v8;
  __CFError **v9;
  nlp *v10;
  CFPropertyListRef DictionaryWithContentsOfURL;

  LanguageAndScriptCode = InputTranscoder::createLanguageAndScriptCode(a2, a2);
  v7 = CFBundleCopyResourceURLForLocalization(this, CFSTR("models.plist"), 0, a3, LanguageAndScriptCode);
  v10 = v7;
  if (v7)
  {
    DictionaryWithContentsOfURL = nlp::createDictionaryWithContentsOfURL(v7, 0, v8, v9);
    CFRelease(v10);
    if (!LanguageAndScriptCode)
      return DictionaryWithContentsOfURL;
    goto LABEL_5;
  }
  DictionaryWithContentsOfURL = 0;
  if (LanguageAndScriptCode)
LABEL_5:
    CFRelease(LanguageAndScriptCode);
  return DictionaryWithContentsOfURL;
}

void sub_22852D0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a10, 0);
  _Unwind_Resume(a1);
}

CFStringRef InputTranscoder::createLanguageAndScriptCode(InputTranscoder *this, const __CFLocale *a2)
{
  const __CFString *Value;
  CFTypeRef v4;
  const __CFAllocator *v5;

  Value = (const __CFString *)CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD418]);
  v4 = CFLocaleGetValue(this, (CFLocaleKey)*MEMORY[0x24BDBD420]);
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v4)
    return CFStringCreateWithFormat(v5, 0, CFSTR("%@-%@"), Value, v4);
  else
    return CFStringCreateCopy(v5, Value);
}

void InputTranscoder::extractCommonConfiguration(uint64_t a1, const __CFDictionary *a2, __CFBundle *a3, const __CFLocale *a4, uint64_t a5)
{
  const __CFDictionary *Required;
  void *v10;
  const void *v11;
  nlp *v12;
  int v13;
  int v14;
  const __CFString *v15;
  int v16;
  int v17;
  const __CFBoolean *v18;
  BOOL v19;
  std::string *v20;
  int v21;
  _QWORD *exception;
  void *__p[2];
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  void (*v27)(uint64_t, const __CFURL *, int, int, CFStringRef, _BYTE *);
  void *v28;
  void **v29;
  const void *v30;
  void *v31[2];
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  CFTypeRef cf;

  Required = (const __CFDictionary *)InputTranscoder::getRequiredCFType<__CFDictionary const*>(a2, CFSTR("commonConfiguration"));
  if (!CFDictionaryContainsKey(Required, CFSTR("modelFile")))
  {
    v11 = 0;
    goto LABEL_8;
  }
  InputTranscoder::extractPath((InputTranscoder *)__p, Required, CFSTR("modelFile"), a3, a4, 0);
  v10 = (void *)HIBYTE(v24);
  if (v24 < 0)
    v10 = __p[1];
  if (!v10)
  {
    v11 = InputTranscoder::getRequiredCFType<__CFString const*>(Required, CFSTR("modelFile"));
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
LABEL_8:
    v31[0] = 0;
    v31[1] = v31;
    v32 = 0x3002000000;
    v33 = __Block_byref_object_copy__1;
    v34 = __Block_byref_object_dispose__1;
    cf = 0;
    v26[0] = (void *)MEMORY[0x24BDAC760];
    v26[1] = (void *)0x40000000;
    v27 = ___ZN15InputTranscoderL12getModelPathEPK14__CFDictionaryP10__CFBundlePK10__CFLocale_block_invoke;
    v28 = &unk_24F111A20;
    v29 = v31;
    v30 = v11;
    InputTranscoder::enumerateLDAssets();
    v12 = (nlp *)*((_QWORD *)v31[1] + 5);
    if (v12)
      nlp::getFileSystemRepresentationFromCFURL(v12, __p);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Unable to locate model file in LinguisticData");
    nlp::ResourceCreationException::ResourceCreationException(exception, &v25);
  }
  v13 = InputTranscoder::extract<int,__CFNumber const*>(Required, CFSTR("modelType"));
  if (v13 == 2)
    v14 = 2;
  else
    v14 = v13 == 1;
  if (a5 == 1)
    v15 = CFSTR("tap");
  else
    v15 = &stru_24F112198;
  InputTranscoder::extractPath((InputTranscoder *)v31, Required, CFSTR("outputTokenIDMapFile"), a3, a4, v15);
  if (CFDictionaryContainsKey(Required, CFSTR("internalLMTokenIDMapFile")))
    InputTranscoder::extractPath((InputTranscoder *)v26, Required, CFSTR("internalLMTokenIDMapFile"), a3, a4, v15);
  else
    std::string::basic_string[abi:ne180100]<0>(v26, "");
  if (CFDictionaryGetValue(Required, CFSTR("modelVersion")))
  {
    v16 = InputTranscoder::extract<int,__CFNumber const*>(Required, CFSTR("modelVersion"));
    if ((v16 - 1) >= 4)
      v17 = 0;
    else
      v17 = v16;
  }
  else
  {
    v17 = 0;
  }
  if (CFDictionaryGetValue(Required, CFSTR("useNeuralEngine")))
  {
    v18 = (const __CFBoolean *)InputTranscoder::getRequiredCFType<__CFBoolean const*>(Required, CFSTR("useNeuralEngine"));
    v19 = CFBooleanGetValue(v18) != 0;
  }
  else
  {
    v19 = 1;
  }
  if (SHIBYTE(v24) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 16) = v24;
  }
  *(_DWORD *)(a1 + 24) = v14;
  if (SHIBYTE(v32) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), (const std::string::value_type *)v31[0], (std::string::size_type)v31[1]);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v31;
    *(_QWORD *)(a1 + 48) = v32;
  }
  v20 = (std::string *)(a1 + 56);
  if (SHIBYTE(v27) < 0)
  {
    std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)v26[0], (std::string::size_type)v26[1]);
    v21 = SHIBYTE(v27);
    *(_DWORD *)(a1 + 80) = v17;
    *(_QWORD *)(a1 + 88) = a5;
    *(_BYTE *)(a1 + 96) = v19;
    if (v21 < 0)
      operator delete(v26[0]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)v26;
    *(_QWORD *)(a1 + 72) = v27;
    *(_DWORD *)(a1 + 80) = v17;
    *(_QWORD *)(a1 + 88) = a5;
    *(_BYTE *)(a1 + 96) = v19;
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_22852D52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void *InputTranscoder::getRequiredCFType<__CFDictionary const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const void *Value;
  const void *v4;
  CFTypeID v5;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD v9[3];
  std::string v10;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: missing key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v10);
  }
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFDictionaryGetTypeID())
  {
    v8 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: invalid type for key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(v8, (__int128 *)&v10);
  }
  return v4;
}

void sub_22852D718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::extractPath(InputTranscoder *this, const __CFDictionary *a2, const __CFString *a3, __CFBundle *a4, const __CFLocale *a5, const __CFString *a6)
{
  const __CFString *Required;
  const __CFLocale *v11;
  const __CFString *LanguageAndScriptCode;
  nlp *v13;

  Required = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(a2, a3);
  LanguageAndScriptCode = InputTranscoder::createLanguageAndScriptCode(a5, v11);
  v13 = CFBundleCopyResourceURLForLocalization(a4, Required, 0, a6, LanguageAndScriptCode);
  if (v13)
    nlp::getFileSystemRepresentationFromCFURL(v13, this);
  std::string::basic_string[abi:ne180100]<0>(this, "");
  if (LanguageAndScriptCode)
    CFRelease(LanguageAndScriptCode);
}

void sub_22852D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  nlp::CFScopedPtr<__CFURL const*>::reset(&a9, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a10, 0);
  _Unwind_Resume(a1);
}

void InputTranscoder::extractCTCConfiguration(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFDictionary *Required;
  const __CFString *v10;
  const __CFString *v11;
  const __CFBoolean *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  uint64_t v19;
  const __CFNumber *v20;
  float v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const __CFNumber *v29;
  float v30;
  const __CFNumber *v31;
  float v32;
  const __CFNumber *v33;
  float v34;
  const __CFNumber *v35;
  float v36;
  const __CFNumber *v37;
  float v38;
  const __CFNumber *v39;
  float v40;
  const __CFNumber *v41;
  float v42;
  std::string *v43;
  _BOOL4 v44;
  int v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  int Value;
  void *__p[2];
  uint64_t v58;
  void *v59[2];
  uint64_t v60;

  Required = (const __CFDictionary *)InputTranscoder::getRequiredCFType<__CFDictionary const*>(a2, CFSTR("ctcConfiguration"));
  v10 = (const __CFString *)MEMORY[0x22E2B13FC](a3);
  nlp::getUTF8StringFromCFString(v10, v59);
  v11 = (const __CFString *)MEMORY[0x22E2B13FC](a4);
  nlp::getUTF8StringFromCFString(v11, __p);
  v12 = (const __CFBoolean *)InputTranscoder::getRequiredCFType<__CFBoolean const*>(Required, CFSTR("shouldUseStaticLexicon"));
  Value = CFBooleanGetValue(v12);
  v13 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("lmAlpha"));
  v55 = InputTranscoder::convert<float>(v13);
  v14 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("lmBeta"));
  v54 = InputTranscoder::convert<float>(v14);
  v15 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("cutoffProbability"));
  v53 = InputTranscoder::convert<float>(v15);
  v52 = InputTranscoder::extract<unsigned long,__CFNumber const*>(Required, CFSTR("maxProbabilityCount"));
  v51 = InputTranscoder::extract<unsigned long,__CFNumber const*>(Required, CFSTR("beamSize"));
  v16 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("blankThreshold"));
  v50 = InputTranscoder::convert<float>(v16);
  v49 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("blankTokenID"));
  if (CFDictionaryGetValue(Required, CFSTR("ngramAlpha")))
  {
    v17 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("ngramAlpha"));
    v48 = InputTranscoder::convert<float>(v17);
  }
  else
  {
    v48 = 1.1755e-38;
  }
  if (CFDictionaryGetValue(Required, CFSTR("ngramBeta")))
  {
    v18 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("ngramBeta"));
    v47 = InputTranscoder::convert<float>(v18);
  }
  else
  {
    v47 = 1.1755e-38;
  }
  if (CFDictionaryGetValue(Required, CFSTR("unknownID")))
    v46 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("unknownID"));
  else
    v46 = -1;
  if (CFDictionaryGetValue(Required, CFSTR("wordSeparatorID")))
    v45 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("wordSeparatorID"));
  else
    v45 = -1;
  if (CFDictionaryGetValue(Required, CFSTR("maxProbCountWordSeparator")))
    v19 = InputTranscoder::extract<unsigned long,__CFNumber const*>(Required, CFSTR("maxProbCountWordSeparator"));
  else
    v19 = 0;
  if (CFDictionaryGetValue(Required, CFSTR("wordTerminationThreshold")))
  {
    v20 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("wordTerminationThreshold"));
    v21 = InputTranscoder::convert<float>(v20);
  }
  else
  {
    v21 = 1.0;
  }
  if (CFDictionaryGetValue(Required, CFSTR("minOutputTokenToDecode")))
    v22 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("minOutputTokenToDecode"));
  else
    v22 = 0;
  if (CFDictionaryGetValue(Required, CFSTR("maxOutputTokenToDecode")))
    v23 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("maxOutputTokenToDecode"));
  else
    v23 = -1;
  if (a5 == 1)
  {
    if (CFDictionaryGetValue(Required, CFSTR("maxCandidatesWhenLMUsedForCompletions")))
    {
      v24 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("maxCandidatesWhenLMUsedForCompletions"));
      v25 = 0;
    }
    else
    {
      v25 = 0;
      v24 = 10;
    }
  }
  else
  {
    if (CFDictionaryGetValue(Required, CFSTR("maxCandidates")))
      v24 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("maxCandidates"));
    else
      v24 = 40;
    if (CFDictionaryGetValue(Required, CFSTR("numPrefixesToComplete")))
      v25 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("numPrefixesToComplete"));
    else
      v25 = 2;
  }
  if (CFDictionaryGetValue(Required, CFSTR("numCompletionsPerPrefix")))
    v26 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("numCompletionsPerPrefix"));
  else
    v26 = 5;
  if (CFDictionaryGetValue(Required, CFSTR("maxCompletions")))
    v27 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("maxCompletions"));
  else
    v27 = 5;
  if (CFDictionaryGetValue(Required, CFSTR("minPrefixLengthToComplete")))
    v28 = InputTranscoder::extract<unsigned int,__CFNumber const*>(Required, CFSTR("minPrefixLengthToComplete"));
  else
    v28 = 4;
  if (CFDictionaryGetValue(Required, CFSTR("completionPenalty")))
  {
    v29 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("completionPenalty"));
    v30 = InputTranscoder::convert<float>(v29);
  }
  else
  {
    v30 = 0.0;
  }
  if (CFDictionaryGetValue(Required, CFSTR("completionLengthPenalty")))
  {
    v31 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("completionLengthPenalty"));
    v32 = InputTranscoder::convert<float>(v31);
  }
  else
  {
    v32 = 1.0;
  }
  if (CFDictionaryGetValue(Required, CFSTR("wordSplittingCost")))
  {
    v33 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("wordSplittingCost"));
    v34 = InputTranscoder::convert<float>(v33);
  }
  else
  {
    v34 = 2.0;
  }
  if (CFDictionaryGetValue(Required, CFSTR("lmAlphaCompletions")))
  {
    v35 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("lmAlphaCompletions"));
    v36 = InputTranscoder::convert<float>(v35);
  }
  else
  {
    v36 = 1.0;
  }
  if (CFDictionaryGetValue(Required, CFSTR("dynamicLexiconWeight")))
  {
    v37 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("dynamicLexiconWeight"));
    v38 = InputTranscoder::convert<float>(v37);
  }
  else
  {
    v38 = 0.8;
  }
  if (CFDictionaryGetValue(Required, CFSTR("exactTypedCandidateBoost")))
  {
    v39 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("exactTypedCandidateBoost"));
    v40 = InputTranscoder::convert<float>(v39);
  }
  else
  {
    v40 = 2.0;
  }
  if (CFDictionaryGetValue(Required, CFSTR("candidatePruningThreshold")))
  {
    v41 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(Required, CFSTR("candidatePruningThreshold"));
    v42 = InputTranscoder::convert<float>(v41);
  }
  else
  {
    v42 = 4.6;
  }
  if (SHIBYTE(v60) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, (const std::string::value_type *)v59[0], (std::string::size_type)v59[1]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)v59;
    *(_QWORD *)(a1 + 16) = v60;
  }
  v43 = (std::string *)(a1 + 24);
  if (SHIBYTE(v58) < 0)
  {
    std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v44 = v58 < 0;
  }
  else
  {
    v44 = 0;
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 40) = v58;
  }
  *(_BYTE *)(a1 + 48) = Value != 0;
  *(float *)(a1 + 52) = v55;
  *(float *)(a1 + 56) = v54;
  *(float *)(a1 + 60) = v48;
  *(float *)(a1 + 64) = v47;
  *(double *)(a1 + 72) = v53;
  *(_QWORD *)(a1 + 80) = v52;
  *(_QWORD *)(a1 + 88) = v51;
  *(float *)(a1 + 96) = v50;
  *(_DWORD *)(a1 + 100) = v49;
  *(_DWORD *)(a1 + 104) = v46;
  *(_DWORD *)(a1 + 108) = v45;
  *(_QWORD *)(a1 + 112) = v19;
  *(float *)(a1 + 120) = v21;
  *(_DWORD *)(a1 + 124) = v22;
  *(_DWORD *)(a1 + 128) = v23;
  *(_DWORD *)(a1 + 132) = v24;
  *(_DWORD *)(a1 + 136) = v25;
  *(_DWORD *)(a1 + 140) = v26;
  *(_DWORD *)(a1 + 144) = v27;
  *(_DWORD *)(a1 + 148) = v28;
  *(float *)(a1 + 152) = v30;
  *(float *)(a1 + 156) = v32;
  *(float *)(a1 + 160) = v34;
  *(float *)(a1 + 164) = v36;
  *(float *)(a1 + 168) = v38;
  *(float *)(a1 + 172) = v40;
  *(float *)(a1 + 176) = v42;
  if (v44)
    operator delete(__p[0]);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
}

void sub_22852DEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::extract<unsigned long,__CFNumber const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const __CFNumber *Required;
  _QWORD *exception;
  __int128 v5;
  int valuePtr;

  Required = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(a1, a2);
  valuePtr = 0;
  if (!CFNumberGetValue(Required, kCFNumberIntType, &valuePtr))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v5, "Failed to parse CFNumber as kCFNumberIntType");
    nlp::ResourceCreationException::ResourceCreationException(exception, &v5);
  }
  return valuePtr;
}

void sub_22852E044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t InputTranscoder::extract<unsigned int,__CFNumber const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const __CFNumber *Required;
  _QWORD *exception;
  __int128 v5;
  unsigned int valuePtr;

  Required = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(a1, a2);
  valuePtr = 0;
  if (!CFNumberGetValue(Required, kCFNumberIntType, &valuePtr))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v5, "Failed to parse CFNumber as kCFNumberIntType");
    nlp::ResourceCreationException::ResourceCreationException(exception, &v5);
  }
  return valuePtr;
}

void sub_22852E10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

const void *InputTranscoder::getRequiredCFType<__CFString const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const void *Value;
  const void *v4;
  CFTypeID v5;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD v9[3];
  std::string v10;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: missing key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v10);
  }
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFStringGetTypeID())
  {
    v8 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: invalid type for key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(v8, (__int128 *)&v10);
  }
  return v4;
}

void sub_22852E24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::extract<int,__CFNumber const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const __CFNumber *Required;
  _QWORD *exception;
  __int128 v5;
  unsigned int valuePtr;

  Required = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(a1, a2);
  valuePtr = 0;
  if (!CFNumberGetValue(Required, kCFNumberIntType, &valuePtr))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v5, "Failed to parse CFNumber as kCFNumberIntType");
    nlp::ResourceCreationException::ResourceCreationException(exception, &v5);
  }
  return valuePtr;
}

void sub_22852E340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

CFIndex InputTranscoder::extractStrings(int64x2_t *this, const __CFDictionary *a2, const __CFString *a3)
{
  const __CFArray *Required;
  CFIndex v5;
  CFIndex result;
  const __CFString *ValueAtIndex;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v19;
  uint64_t v20;
  std::__split_buffer<std::string>::pointer begin;
  __int128 v22;
  int64x2_t v23;
  std::string *v24;
  int v25;
  void *__p[2];
  std::string::size_type v27;
  std::__split_buffer<std::string> v28;

  Required = (const __CFArray *)InputTranscoder::getRequiredCFType<__CFArray const*>(a2, a3);
  v5 = 0;
  this->i64[0] = 0;
  this->i64[1] = 0;
  this[1].i64[0] = 0;
  while (1)
  {
    result = CFArrayGetCount(Required);
    if (result <= v5)
      break;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Required, v5);
    nlp::getUTF8StringFromCFString(ValueAtIndex, __p);
    v9 = this->u64[1];
    v8 = this[1].u64[0];
    if (v9 >= v8)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - this->i64[0]) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - this->i64[0]) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      v28.__end_cap_.__value_ = (std::allocator<std::string> *)&this[1];
      if (v14)
        v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)this[1].i64, v14);
      else
        v15 = 0;
      v16 = v15 + v11;
      v28.__first_ = v15;
      v28.__begin_ = v16;
      v28.__end_cap_.__value_ = &v15[v14];
      v17 = *(_OWORD *)__p;
      v16->__r_.__value_.__r.__words[2] = v27;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      __p[1] = 0;
      v27 = 0;
      __p[0] = 0;
      end = v16 + 1;
      v28.__end_ = v16 + 1;
      v20 = this->i64[0];
      v19 = this->u64[1];
      begin = v28.__begin_;
      if (v19 == this->i64[0])
      {
        v23 = vdupq_n_s64(v19);
      }
      else
      {
        do
        {
          v22 = *(_OWORD *)(v19 - 24);
          begin[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 - 8);
          *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v22;
          --begin;
          *(_QWORD *)(v19 - 16) = 0;
          *(_QWORD *)(v19 - 8) = 0;
          *(_QWORD *)(v19 - 24) = 0;
          v19 -= 24;
        }
        while (v19 != v20);
        v23 = *this;
        end = v28.__end_;
      }
      this->i64[0] = (uint64_t)begin;
      this->i64[1] = (uint64_t)end;
      *(int64x2_t *)&v28.__begin_ = v23;
      v24 = (std::string *)this[1].i64[0];
      this[1].i64[0] = (uint64_t)v28.__end_cap_.__value_;
      v28.__end_cap_.__value_ = v24;
      v28.__first_ = (std::__split_buffer<std::string>::pointer)v23.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v28);
      v25 = SHIBYTE(v27);
      this->i64[1] = (uint64_t)end;
      if (v25 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 16) = v27;
      *(_OWORD *)v9 = v10;
      this->i64[1] = v9 + 24;
    }
    ++v5;
  }
  return result;
}

void sub_22852E560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void InputTranscoder::generateConfiguration<InputTranscoder::DecoderConfiguration>(InputTranscoder *this@<X1>, InputTranscoder *a2@<X0>, uint64_t a3@<X2>, InputTranscoder::DecoderConfiguration *a4@<X8>)
{
  CFLocaleRef v6;
  CFLocaleRef v7;
  const __CFString *v8;
  __CFBundle *v9;
  const __CFString *v10;
  const __CFLocale *v11;
  const __CFString *v12;
  const __CFDictionary *ModelMetadata;
  const __CFArray *Required;
  CFIndex v15;
  const __CFDictionary *ValueAtIndex;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  int v27;
  const InputTranscoder::DecoderConfiguration *i;
  _QWORD *v29;
  _QWORD *exception;
  _QWORD *v31;
  const __CFDictionary *cf;
  InputTranscoder *v34;
  uint64_t v35;
  _OWORD v36[2];
  const __CFDictionary *v37;
  __CFBundle *v38;
  CFLocaleRef v39;
  void *v40[2];
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *__p;
  char v49;
  char *v50;
  _BYTE v51[24];
  _OWORD *v52;

  v6 = InputTranscoder::copyLocale(this, this);
  v39 = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "Malformed options dictionary - missing or invalid locale");
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)v40);
  }
  v7 = v6;
  v8 = (const __CFString *)MEMORY[0x22E2B13FC]();
  if (CFStringCompare(v8, CFSTR("zh-Hant"), 0))
    v9 = (__CFBundle *)CFRetain(v7);
  else
    v9 = CFLocaleCreate(0, CFSTR("zh-Hans"));
  v11 = v9;
  v38 = v9;
  if (a3 == 1)
    v12 = CFSTR("tap");
  else
    v12 = &stru_24F112198;
  ModelMetadata = (const __CFDictionary *)InputTranscoder::createModelMetadata(a2, v9, v12, v10);
  v37 = ModelMetadata;
  if (!ModelMetadata)
  {
    v31 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "Failed to parse metadata file");
    nlp::ResourceCreationException::ResourceCreationException(v31, (__int128 *)v40);
  }
  cf = ModelMetadata;
  Required = (const __CFArray *)InputTranscoder::getRequiredCFType<__CFArray const*>(ModelMetadata, CFSTR("models"));
  v15 = 0;
  memset(v36, 0, 24);
  v34 = a2;
  while (CFArrayGetCount(Required) > v15)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Required, v15);
    InputTranscoder::extractCommonConfiguration((uint64_t)v40, ValueAtIndex, a2, v11, a3);
    InputTranscoder::extractCTCConfiguration((uint64_t)&v46, ValueAtIndex, (uint64_t)v11, (uint64_t)v7, a3);
    if (*((_QWORD *)&v36[0] + 1) >= *(_QWORD *)&v36[1])
    {
      v18 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v36[0] + 1) - *(_QWORD *)&v36[0]) >> 5) + 1;
      if (v18 > 0xE38E38E38E38E3)
        std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
      if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v36[1] - *(_QWORD *)&v36[0]) >> 5) > v18)
        v18 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&v36[1] - *(_QWORD *)&v36[0]) >> 5);
      if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v36[1] - *(_QWORD *)&v36[0]) >> 5) >= 0x71C71C71C71C71)
        v19 = 0xE38E38E38E38E3;
      else
        v19 = v18;
      v52 = &v36[1];
      if (v19)
      {
        if (v19 > 0xE38E38E38E38E3)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v20 = (char *)operator new(288 * v19);
      }
      else
      {
        v20 = 0;
      }
      v50 = v20;
      *(_QWORD *)v51 = &v20[32 * ((uint64_t)(*((_QWORD *)&v36[0] + 1) - *(_QWORD *)&v36[0]) >> 5)];
      *(_QWORD *)&v51[8] = *(_QWORD *)v51;
      *(_QWORD *)&v51[16] = &v20[288 * v19];
      InputTranscoder::DecoderConfiguration::DecoderConfiguration(*(uint64_t *)v51, (uint64_t)v40);
      v21 = 0;
      v22 = *(_QWORD *)v51;
      *(_QWORD *)&v51[8] += 288;
      while (*((_QWORD *)&v36[0] + 1) + v21 != *(_QWORD *)&v36[0])
      {
        v21 -= 288;
        InputTranscoder::DecoderConfiguration::DecoderConfiguration((InputTranscoder::DecoderConfiguration *)(v21 + v22), (const InputTranscoder::DecoderConfiguration *)(v21 + *((_QWORD *)&v36[0] + 1)));
      }
      v23 = *(_QWORD *)&v36[1];
      v35 = *(_QWORD *)&v51[8];
      v24 = *(_OWORD *)&v51[8];
      v25 = v36[0];
      *(_QWORD *)&v36[0] = v22 + v21;
      *(_OWORD *)v51 = v25;
      *(_OWORD *)((char *)v36 + 8) = v24;
      *(_QWORD *)&v51[16] = v23;
      v50 = (char *)v25;
      std::__split_buffer<InputTranscoder::DecoderConfiguration>::~__split_buffer((uint64_t)&v50);
      v17 = v35;
      a2 = v34;
    }
    else
    {
      InputTranscoder::DecoderConfiguration::DecoderConfiguration(*((uint64_t *)&v36[0] + 1), (uint64_t)v40);
      v17 = *((_QWORD *)&v36[0] + 1) + 288;
    }
    *((_QWORD *)&v36[0] + 1) = v17;
    if (v49 < 0)
      operator delete(__p);
    if (v47 < 0)
      operator delete(v46);
    if (v45 < 0)
      operator delete(v44);
    if (v43 < 0)
      operator delete(v42);
    if (v41 < 0)
      operator delete(v40[0]);
    ++v15;
  }
  v26 = InputTranscoder::extract<int,__CFNumber const*>(cf, CFSTR("preferredModelType"));
  v27 = v26 == 1;
  if (v26 == 2)
    v27 = 2;
  for (i = *(const InputTranscoder::DecoderConfiguration **)&v36[0];
        ;
        i = (const InputTranscoder::DecoderConfiguration *)((char *)i + 288))
  {
    if (i == *((const InputTranscoder::DecoderConfiguration **)&v36[0] + 1))
    {
      v29 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v40, "failed to find a suitable configuration");
      nlp::ResourceCreationException::ResourceCreationException(v29, (__int128 *)v40);
    }
    if (*((_DWORD *)i + 6) == v27)
      break;
  }
  InputTranscoder::DecoderConfiguration::DecoderConfiguration(a4, i);
  v40[0] = v36;
  std::vector<InputTranscoder::DecoderConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  CFRelease(cf);
  if (v11)
    CFRelease(v11);
  CFRelease(v7);
}

void sub_22852EA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,const void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a27 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      nlp::CFScopedPtr<__CFDictionary const*>::reset(&a19, 0);
      nlp::CFScopedPtr<__CFLocale const*>::reset(&a20, 0);
      nlp::CFScopedPtr<__CFLocale const*>::reset(&a21, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void InputTranscoder::generateConfiguration<InputTranscoder::TranscoderConfiguration>(InputTranscoder *this@<X1>, InputTranscoder *a2@<X0>, uint64_t a3@<X2>, InputTranscoder::TranscoderConfiguration *a4@<X8>)
{
  CFLocaleRef v5;
  const void *v6;
  const __CFString *v7;
  __CFBundle *v8;
  const __CFString *v9;
  const __CFLocale *v10;
  const __CFString *v11;
  const __CFDictionary *ModelMetadata;
  const __CFArray *Required;
  CFIndex v14;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v16;
  const __CFString *v17;
  const __CFBoolean *v18;
  uint64_t v19;
  BOOL v20;
  const __CFBoolean *v21;
  BOOL v22;
  const __CFNumber *v23;
  float v24;
  const __CFNumber *v25;
  float v26;
  int v27;
  const __CFNumber *v28;
  float v29;
  const __CFNumber *v30;
  float v31;
  float v32;
  const __CFNumber *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  int v44;
  const InputTranscoder::TranscoderConfiguration *i;
  _QWORD *v46;
  _QWORD *exception;
  _QWORD *v48;
  const __CFDictionary *cf;
  uint64_t v51;
  _OWORD v53[2];
  const __CFDictionary *v54;
  __CFBundle *v55;
  CFLocaleRef v56;
  __int128 v57[6];
  uint64_t v58;
  std::string v59;
  std::string v60;
  std::string v61;
  BOOL v62;
  BOOL v63;
  float v64;
  float v65;
  int v66;
  float v67;
  float v68;
  float v69;
  std::string v70;
  std::string v71;
  int64x2_t v72;
  int64x2_t v73;
  std::string v74;
  std::string v75;
  int64x2_t *v76;
  _BYTE v77[32];
  _OWORD *v78;

  v5 = InputTranscoder::copyLocale(this, this);
  v56 = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v57, "Malformed options dictionary - missing or invalid locale");
    nlp::ResourceCreationException::ResourceCreationException(exception, v57);
  }
  v6 = v5;
  v7 = (const __CFString *)MEMORY[0x22E2B13FC]();
  if (CFStringCompare(v7, CFSTR("zh-Hant"), 0))
    v8 = (__CFBundle *)CFRetain(v6);
  else
    v8 = CFLocaleCreate(0, CFSTR("zh-Hans"));
  v10 = v8;
  v55 = v8;
  if (a3 == 1)
    v11 = CFSTR("tap");
  else
    v11 = &stru_24F112198;
  ModelMetadata = (const __CFDictionary *)InputTranscoder::createModelMetadata(a2, v8, v11, v9);
  v54 = ModelMetadata;
  if (!ModelMetadata)
  {
    v48 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v57, "Failed to parse metadata file");
    nlp::ResourceCreationException::ResourceCreationException(v48, v57);
  }
  cf = ModelMetadata;
  Required = (const __CFArray *)InputTranscoder::getRequiredCFType<__CFArray const*>(ModelMetadata, CFSTR("models"));
  v14 = 0;
  memset(v53, 0, 24);
  while (CFArrayGetCount(Required) > v14)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Required, v14);
    InputTranscoder::extractPath((InputTranscoder *)v77, ValueAtIndex, CFSTR("inputTokenIDMapFile"), a2, v10, v11);
    InputTranscoder::extractPath((InputTranscoder *)&v75, ValueAtIndex, CFSTR("baseLayoutFile"), a2, v10, v11);
    v16 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(ValueAtIndex, CFSTR("keyMatchingPolicy"));
    nlp::getUTF8StringFromCFString(v16, &v74);
    v17 = v11;
    v18 = (const __CFBoolean *)InputTranscoder::getRequiredCFType<__CFBoolean const*>(ValueAtIndex, CFSTR("useNonLetterKeys"));
    v19 = (uint64_t)v6;
    v20 = CFBooleanGetValue(v18) != 0;
    v21 = (const __CFBoolean *)InputTranscoder::getRequiredCFType<__CFBoolean const*>(ValueAtIndex, CFSTR("useInputOneHotInflection"));
    v22 = CFBooleanGetValue(v21) != 0;
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("equivalentFormsWeight")))
    {
      v23 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(ValueAtIndex, CFSTR("equivalentFormsWeight"));
      v24 = InputTranscoder::convert<float>(v23);
    }
    else
    {
      v24 = 1.0;
    }
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("levenshteinDistanceWeight")))
    {
      v25 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(ValueAtIndex, CFSTR("levenshteinDistanceWeight"));
      v26 = InputTranscoder::convert<float>(v25);
    }
    else
    {
      v26 = 6.0;
    }
    v27 = InputTranscoder::extract<int,__CFNumber const*>(ValueAtIndex, CFSTR("numIntentKeys"));
    InputTranscoder::extractStrings(&v73, ValueAtIndex, CFSTR("layouts"));
    InputTranscoder::extractStrings(&v72, ValueAtIndex, CFSTR("orientations"));
    v28 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(ValueAtIndex, CFSTR("geometryScoreScale"));
    v29 = InputTranscoder::convert<float>(v28);
    v30 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(ValueAtIndex, CFSTR("geometryScoreWeight"));
    v31 = InputTranscoder::convert<float>(v30);
    v32 = 0.7;
    if (CFDictionaryGetValue(ValueAtIndex, CFSTR("bigramConfidenceThreshold")))
    {
      v33 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(ValueAtIndex, CFSTR("bigramConfidenceThreshold"));
      v32 = InputTranscoder::convert<float>(v33);
    }
    InputTranscoder::extractCommonConfiguration((uint64_t)v57, ValueAtIndex, a2, v10, a3);
    InputTranscoder::extractCTCConfiguration((uint64_t)&v58, ValueAtIndex, (uint64_t)v10, v19, a3);
    if ((v77[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v77, *(std::string::size_type *)&v77[8]);
    else
      v59 = *(std::string *)v77;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v60, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    else
      v60 = v75;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v61, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
    else
      v61 = v74;
    v62 = v20;
    v63 = v22;
    v64 = v24;
    v65 = v26;
    v66 = v27;
    v67 = v29;
    v68 = v31;
    v69 = v32;
    memset(&v70, 0, sizeof(v70));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v70, (__int128 *)v73.i64[0], (__int128 *)v73.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v73.i64[1] - v73.i64[0]) >> 3));
    memset(&v71, 0, sizeof(v71));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v71, (__int128 *)v72.i64[0], (__int128 *)v72.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v72.i64[1] - v72.i64[0]) >> 3));
    v6 = (const void *)v19;
    v76 = &v72;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
    v72.i64[0] = (uint64_t)&v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if ((v77[23] & 0x80000000) != 0)
      operator delete(*(void **)v77);
    if (*((_QWORD *)&v53[0] + 1) >= *(_QWORD *)&v53[1])
    {
      v35 = 0x6FB586FB586FB587 * ((uint64_t)(*((_QWORD *)&v53[0] + 1) - *(_QWORD *)&v53[0]) >> 3) + 1;
      if (v35 > 0x94F2094F2094F2)
        std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
      if (0xDF6B0DF6B0DF6B0ELL * ((uint64_t)(*(_QWORD *)&v53[1] - *(_QWORD *)&v53[0]) >> 3) > v35)
        v35 = 0xDF6B0DF6B0DF6B0ELL * ((uint64_t)(*(_QWORD *)&v53[1] - *(_QWORD *)&v53[0]) >> 3);
      if ((unint64_t)(0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)&v53[1] - *(_QWORD *)&v53[0]) >> 3)) >= 0x4A7904A7904A79)
        v36 = 0x94F2094F2094F2;
      else
        v36 = v35;
      v78 = &v53[1];
      if (v36)
      {
        if (v36 > 0x94F2094F2094F2)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v37 = (char *)operator new(440 * v36);
      }
      else
      {
        v37 = 0;
      }
      *(_QWORD *)v77 = v37;
      *(_QWORD *)&v77[8] = &v37[8 * ((uint64_t)(*((_QWORD *)&v53[0] + 1) - *(_QWORD *)&v53[0]) >> 3)];
      *(_QWORD *)&v77[16] = *(_QWORD *)&v77[8];
      *(_QWORD *)&v77[24] = &v37[440 * v36];
      InputTranscoder::TranscoderConfiguration::TranscoderConfiguration(*(uint64_t *)&v77[8], (uint64_t)v57);
      v38 = 0;
      v39 = *(_QWORD *)&v77[8];
      *(_QWORD *)&v77[16] += 440;
      while (*((_QWORD *)&v53[0] + 1) + v38 != *(_QWORD *)&v53[0])
      {
        v38 -= 440;
        InputTranscoder::TranscoderConfiguration::TranscoderConfiguration((InputTranscoder::TranscoderConfiguration *)(v38 + v39), (const InputTranscoder::TranscoderConfiguration *)(v38 + *((_QWORD *)&v53[0] + 1)));
      }
      v40 = *(_QWORD *)&v53[1];
      v51 = *(_QWORD *)&v77[16];
      v41 = *(_OWORD *)&v77[16];
      v42 = v53[0];
      *(_QWORD *)&v53[0] = v39 + v38;
      *(_OWORD *)&v77[8] = v42;
      *(_OWORD *)((char *)v53 + 8) = v41;
      *(_QWORD *)&v77[24] = v40;
      *(_QWORD *)v77 = v42;
      std::__split_buffer<InputTranscoder::TranscoderConfiguration>::~__split_buffer((uint64_t)v77);
      v34 = v51;
      v6 = (const void *)v19;
    }
    else
    {
      InputTranscoder::TranscoderConfiguration::TranscoderConfiguration(*((uint64_t *)&v53[0] + 1), (uint64_t)v57);
      v34 = *((_QWORD *)&v53[0] + 1) + 440;
    }
    v11 = v17;
    *((_QWORD *)&v53[0] + 1) = v34;
    InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration((void **)v57);
    ++v14;
  }
  v43 = InputTranscoder::extract<int,__CFNumber const*>(cf, CFSTR("preferredModelType"));
  v44 = v43 == 1;
  if (v43 == 2)
    v44 = 2;
  for (i = *(const InputTranscoder::TranscoderConfiguration **)&v53[0];
        ;
        i = (const InputTranscoder::TranscoderConfiguration *)((char *)i + 440))
  {
    if (i == *((const InputTranscoder::TranscoderConfiguration **)&v53[0] + 1))
    {
      v46 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v57, "failed to find a suitable configuration");
      nlp::ResourceCreationException::ResourceCreationException(v46, v57);
    }
    if (*((_DWORD *)i + 6) == v44)
      break;
  }
  InputTranscoder::TranscoderConfiguration::TranscoderConfiguration(a4, i);
  *(_QWORD *)&v57[0] = v53;
  std::vector<InputTranscoder::TranscoderConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)v57);
  CFRelease(cf);
  if (v10)
    CFRelease(v10);
  CFRelease(v6);
}

void sub_22852F2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,InputTranscoder::CTCConfiguration *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28,const void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;

  if (a35 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_6:
      nlp::CFScopedPtr<__CFDictionary const*>::reset(&a27, 0);
      nlp::CFScopedPtr<__CFLocale const*>::reset(&a28, 0);
      nlp::CFScopedPtr<__CFLocale const*>::reset(&a29, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v35);
  goto LABEL_6;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(a1 + 40), 0);
}

void ___ZN15InputTranscoderL12getModelPathEPK14__CFDictionaryP10__CFBundlePK10__CFLocale_block_invoke(uint64_t a1, const __CFURL *a2, int a3, int a4, CFStringRef theString1, _BYTE *a6)
{
  const __CFString *v9;
  const __CFString *PathComponent;
  const __CFString *v11;
  const __CFString *v12;
  CFComparisonResult v13;

  v9 = *(const __CFString **)(a1 + 40);
  if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x24BE5F7E8], 0) == kCFCompareEqualTo)
  {
    PathComponent = CFURLCopyLastPathComponent(a2);
    v11 = PathComponent;
    if (v9)
      v12 = v9;
    else
      v12 = CFSTR("ctc.dat");
    v13 = CFStringCompare(PathComponent, v12, 0);
    if (v11)
      CFRelease(v11);
    if (v13 == kCFCompareEqualTo)
    {
      nlp::CFScopedPtr<__CFURL const*>::acquire((const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
      if (a6)
        *a6 = 1;
    }
  }
}

void sub_22852F62C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

const void *InputTranscoder::getRequiredCFType<__CFArray const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const void *Value;
  const void *v4;
  CFTypeID v5;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD v9[3];
  std::string v10;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: missing key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v10);
  }
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFArrayGetTypeID())
  {
    v8 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: invalid type for key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(v8, (__int128 *)&v10);
  }
  return v4;
}

void sub_22852F750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

const void *InputTranscoder::getRequiredCFType<__CFNumber const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const void *Value;
  const void *v4;
  CFTypeID v5;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD v9[3];
  std::string v10;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: missing key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v10);
  }
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFNumberGetTypeID())
  {
    v8 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: invalid type for key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(v8, (__int128 *)&v10);
  }
  return v4;
}

void sub_22852F91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

const void *InputTranscoder::getRequiredCFType<__CFBoolean const*>(const __CFDictionary *a1, const __CFString *a2)
{
  const void *Value;
  const void *v4;
  CFTypeID v5;
  _QWORD *exception;
  _QWORD *v8;
  _QWORD v9[3];
  std::string v10;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: missing key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v10);
  }
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFBooleanGetTypeID())
  {
    v8 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Malformed dictionary: invalid type for key=");
    InputTranscoder::makeDictionaryErrorMessage(a2, (uint64_t)v9, &v10);
    nlp::ResourceCreationException::ResourceCreationException(v8, (__int128 *)&v10);
  }
  return v4;
}

void sub_22852FA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

float InputTranscoder::convert<float>(const __CFNumber *a1)
{
  int Value;
  float result;
  _QWORD *exception;
  __int128 v4;
  float valuePtr;

  valuePtr = 0.0;
  Value = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
  result = valuePtr;
  if (!Value && valuePtr == 0.0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v4, "Failed to parse CFNumber as kCFNumberFloatType");
    nlp::ResourceCreationException::ResourceCreationException(exception, &v4);
  }
  return result;
}

void sub_22852FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

InputTranscoder::DecoderConfiguration *InputTranscoder::DecoderConfiguration::DecoderConfiguration(InputTranscoder::DecoderConfiguration *this, const InputTranscoder::DecoderConfiguration *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = InputTranscoder::CommonConfiguration::CommonConfiguration((std::string *)this, a2);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 104);
    v4[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v4[4].__r_.__value_.__r.__words[1] = v5;
  }
  v6 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 8);
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
  v8 = *(_OWORD *)((char *)a2 + 168);
  v9 = *(_OWORD *)((char *)a2 + 184);
  v10 = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)((char *)this + 200) = v10;
  *(_OWORD *)((char *)this + 184) = v9;
  *(_OWORD *)((char *)this + 168) = v8;
  v11 = *(_OWORD *)((char *)a2 + 232);
  v12 = *(_OWORD *)((char *)a2 + 248);
  v13 = *(_OWORD *)((char *)a2 + 264);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *(_OWORD *)((char *)this + 264) = v13;
  *(_OWORD *)((char *)this + 248) = v12;
  *(_OWORD *)((char *)this + 232) = v11;
  return this;
}

void sub_22852FC94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 127) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::DecoderConfiguration::DecoderConfiguration(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = InputTranscoder::CommonConfiguration::CommonConfiguration((std::string *)a1, (const InputTranscoder::CommonConfiguration *)a2);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 104), *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 104);
    v4[5].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v4[4].__r_.__value_.__r.__words[1] = v5;
  }
  v6 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  v11 = *(_OWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 248);
  v13 = *(_OWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  return a1;
}

void sub_22852FDC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 127) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<InputTranscoder::DecoderConfiguration,0>(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__split_buffer<InputTranscoder::DecoderConfiguration>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 288;
    std::__destroy_at[abi:ne180100]<InputTranscoder::DecoderConfiguration,0>(i - 288);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<InputTranscoder::DecoderConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 288;
        std::__destroy_at[abi:ne180100]<InputTranscoder::DecoderConfiguration,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t InputTranscoder::TranscoderConfiguration::TranscoderConfiguration(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = InputTranscoder::CommonConfiguration::CommonConfiguration((std::string *)a1, (const InputTranscoder::CommonConfiguration *)a2);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 104), *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 104);
    v4[5].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v4[4].__r_.__value_.__r.__words[1] = v5;
  }
  v6 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v8 = *(_OWORD *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 184);
  v10 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  v11 = *(_OWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 248);
  v13 = *(_OWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  if (*(char *)(a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 288), *(const std::string::value_type **)(a2 + 288), *(_QWORD *)(a2 + 296));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = v14;
  }
  if (*(char *)(a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 312), *(const std::string::value_type **)(a2 + 312), *(_QWORD *)(a2 + 320));
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = v15;
  }
  if (*(char *)(a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 336), *(const std::string::value_type **)(a2 + 336), *(_QWORD *)(a2 + 344));
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v16;
  }
  v17 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 372) = *(_OWORD *)(a2 + 372);
  *(_OWORD *)(a1 + 360) = v17;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 392), *(__int128 **)(a2 + 392), *(__int128 **)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 3));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 416), *(__int128 **)(a2 + 416), *(__int128 **)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 3));
  return a1;
}

void sub_228530130(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 335) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 311) < 0)
    operator delete(*v3);
  InputTranscoder::CTCConfiguration::~CTCConfiguration(v2);
  InputTranscoder::CommonConfiguration::~CommonConfiguration((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<InputTranscoder::TranscoderConfiguration>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 440;
    InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration((void **)(i - 440));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<InputTranscoder::TranscoderConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        InputTranscoder::TranscoderConfiguration::~TranscoderConfiguration(v4 - 55);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t InputTranscoder::PlistBiMap<unsigned int,unsigned int>::PlistBiMap(uint64_t a1, uint64_t a2)
{
  float *v3;
  float *v4;
  InputTranscoder *Dictionary;
  const __CFDictionary *v6;
  const __CFString *Required;
  const __CFString *v8;
  const __CFString *v9;
  int v10;
  const __CFString *v11;
  int v12;
  const __CFDictionary *v13;
  CFIndex Count;
  CFIndex v15;
  _QWORD *v16;
  unint64_t v17;
  const __CFString *v18;
  CFTypeID v19;
  const __CFString *v20;
  CFTypeID v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v26;
  _QWORD *exception;
  std::string *v28;
  __int128 v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  unsigned int v33;
  InputTranscoder *v34;
  std::string v35;
  void **values[2];
  std::string::size_type v37;
  void *__p;
  _QWORD *v39;
  char v40;
  std::string v41;

  *(_QWORD *)a1 = &off_24F111A50;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = (float *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  v4 = (float *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  Dictionary = (InputTranscoder *)InputTranscoder::createDictionary(a2);
  v34 = Dictionary;
  InputTranscoder::validateVersion(Dictionary, v6);
  Required = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("keyType"));
  nlp::getUTF8StringFromCFString(Required, &v41);
  v8 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("valueType"));
  nlp::getUTF8StringFromCFString(v8, &__p);
  if (!InputTranscoder::typeMatches<unsigned int>((uint64_t)&v41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v28 = std::string::append(&v35, "\"", 1uLL);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v37 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)values = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)values);
  }
  if (!InputTranscoder::typeMatches<unsigned int>((uint64_t)&__p))
  {
    v30 = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v31 = std::string::append(&v35, "\"", 1uLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)values = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    nlp::ResourceCreationException::ResourceCreationException(v30, (__int128 *)values);
  }
  if (v40 < 0)
    operator delete(__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v9 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("unknownKey"));
  nlp::getUTF8StringFromCFString(v9, &v41);
  v10 = InputTranscoder::convertToInteger<unsigned int>(&v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 8) = v10;
  v11 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("unknownValue"));
  nlp::getUTF8StringFromCFString(v11, &v41);
  v12 = InputTranscoder::convertToInteger<unsigned int>(&v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 12) = v12;
  v13 = (const __CFDictionary *)InputTranscoder::getRequiredCFType<__CFDictionary const*>(Dictionary, CFSTR("mapping"));
  Count = CFDictionaryGetCount(v13);
  std::vector<void const*>::vector(&__p, Count);
  v15 = CFDictionaryGetCount(v13);
  std::vector<void const*>::vector(values, v15);
  CFDictionaryGetKeysAndValues(v13, (const void **)__p, (const void **)values[0]);
  v16 = v39;
  if (v39 != __p)
  {
    v17 = 0;
    v16 = __p;
    do
    {
      v18 = (const __CFString *)v16[v17];
      v19 = CFGetTypeID(v18);
      if (v19 != CFStringGetTypeID())
        v18 = 0;
      v20 = (const __CFString *)values[0][v17];
      v21 = CFGetTypeID(v20);
      if (v21 != CFStringGetTypeID())
        v20 = 0;
      if (v18)
        v22 = v20 == 0;
      else
        v22 = 1;
      if (v22)
      {
        v26 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v41, "Malformed plist: incorrect types for mapping dictionary");
        nlp::ResourceCreationException::ResourceCreationException(v26, (__int128 *)&v41);
      }
      nlp::getUTF8StringFromCFString(v18, &v41);
      v23 = InputTranscoder::convertToInteger<unsigned int>(&v41);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      LODWORD(v35.__r_.__value_.__l.__data_) = v23;
      nlp::getUTF8StringFromCFString(v20, &v41);
      v24 = InputTranscoder::convertToInteger<unsigned int>(&v41);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v33 = v24;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, v23, &v35)+ 5) = v24;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, v24, &v33)+ 5) = v23;
      ++v17;
      v16 = __p;
    }
    while (v17 < ((char *)v39 - (_BYTE *)__p) >> 3);
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
    v16 = __p;
  }
  if (v16)
  {
    v39 = v16;
    operator delete(v16);
    Dictionary = v34;
  }
  if (Dictionary)
    CFRelease(Dictionary);
  return a1;
}

void sub_228530694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if ((v33 & 1) != 0)
    __cxa_free_exception(v32);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v34 - 65) < 0)
    operator delete(*(void **)(v34 - 88));
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a11, 0);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(v31);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

CFPropertyListRef InputTranscoder::createDictionary(uint64_t a1)
{
  int v1;
  const UInt8 *v2;
  CFIndex v3;
  nlp *v4;
  __CFError **v5;
  __CFError **v6;
  nlp *v7;
  CFPropertyListRef v8;
  _QWORD *exception;
  void *v11;
  CFErrorRef err;
  __int128 v13;
  nlp *v14;

  v1 = *(char *)(a1 + 23);
  if (v1 >= 0)
    v2 = (const UInt8 *)a1;
  else
    v2 = *(const UInt8 **)a1;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  v4 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x24BDBD240], v2, v3, 0);
  v14 = v4;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    nlp::ResourceCreationException::ResourceCreationException(exception, &v13);
  }
  v7 = v4;
  err = 0;
  v8 = nlp::createDictionaryWithContentsOfURL(v4, &err, v5, v6);
  if (!v8)
  {
    v11 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Failed to create dictionary");
    nlp::ResourceCreationException::ResourceCreationException((uint64_t)v11, (const void **)&v13, err);
  }
  CFRelease(v7);
  return v8;
}

void sub_228530918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      nlp::CFScopedPtr<__CFError *>::reset((const void **)&a9, 0);
      nlp::CFScopedPtr<__CFURL const*>::reset(&a17, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t InputTranscoder::validateVersion(InputTranscoder *this, const __CFDictionary *a2)
{
  uint64_t result;
  unsigned int v3;
  _QWORD *exception;
  std::string v5;
  std::string v6;

  result = InputTranscoder::extract<unsigned int,__CFNumber const*>(this, CFSTR("version"));
  if ((_DWORD)result != 1)
  {
    v3 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    std::to_string(&v5, v3);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Cannot parse dictionary with incompatible version=", &v5, &v6);
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&v6);
  }
  return result;
}

void sub_228530A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t InputTranscoder::PlistBiMap<unsigned int,unsigned int>::unknownKey(uint64_t a1)
{
  return a1 + 8;
}

uint64_t InputTranscoder::PlistBiMap<unsigned int,unsigned int>::unknownValue(uint64_t a1)
{
  return a1 + 12;
}

char *InputTranscoder::PlistBiMap<unsigned int,unsigned int>::operator[](uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;

  v3 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(a1 + 16), *a2);
  if (v3)
    return (char *)v3 + 20;
  else
    return (char *)(a1 + 12);
}

char *InputTranscoder::PlistBiMap<unsigned int,unsigned int>::reverseMap(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;

  v3 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(a1 + 56), *a2);
  if (v3)
    return (char *)v3 + 20;
  else
    return (char *)(a1 + 8);
}

uint64_t InputTranscoder::PlistBiMap<unsigned int,std::string>::PlistBiMap(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t *v4;
  uint64_t *v5;
  InputTranscoder *Dictionary;
  const __CFDictionary *v7;
  const __CFString *Required;
  const __CFString *v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  const __CFDictionary *v13;
  CFIndex Count;
  CFIndex v15;
  _QWORD *v16;
  unint64_t v17;
  const __CFString *v18;
  CFTypeID v19;
  const __CFString *v20;
  CFTypeID v21;
  BOOL v22;
  unsigned int v23;
  std::string *v24;
  _QWORD *v26;
  _QWORD *exception;
  std::string *v28;
  __int128 v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  unsigned int v33;
  InputTranscoder *v34;
  std::string v35;
  void **values[2];
  std::string::size_type v37;
  void *__p;
  _QWORD *v39;
  char v40;
  std::string __str;

  *(_OWORD *)(a1 + 16) = 0u;
  v3 = (void **)(a1 + 16);
  *(_QWORD *)a1 = off_24F111A90;
  v4 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  v5 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  Dictionary = (InputTranscoder *)InputTranscoder::createDictionary(a2);
  v34 = Dictionary;
  InputTranscoder::validateVersion(Dictionary, v7);
  Required = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("keyType"));
  nlp::getUTF8StringFromCFString(Required, &__str);
  v9 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("valueType"));
  nlp::getUTF8StringFromCFString(v9, &__p);
  if (!InputTranscoder::typeMatches<unsigned int>((uint64_t)&__str))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v28 = std::string::append(&v35, "\"", 1uLL);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v37 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)values = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)values);
  }
  if (!InputTranscoder::typeMatches<std::string>((uint64_t *)&__p))
  {
    v30 = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v31 = std::string::append(&v35, "\"", 1uLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)values = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    nlp::ResourceCreationException::ResourceCreationException(v30, (__int128 *)values);
  }
  if (v40 < 0)
    operator delete(__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("unknownKey"));
  nlp::getUTF8StringFromCFString(v10, &__str);
  v11 = InputTranscoder::convertToInteger<unsigned int>(&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 8) = v11;
  v12 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("unknownValue"));
  nlp::getUTF8StringFromCFString(v12, &__str);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v3);
  *(std::string *)v3 = __str;
  v13 = (const __CFDictionary *)InputTranscoder::getRequiredCFType<__CFDictionary const*>(Dictionary, CFSTR("mapping"));
  Count = CFDictionaryGetCount(v13);
  std::vector<void const*>::vector(&__p, Count);
  v15 = CFDictionaryGetCount(v13);
  std::vector<void const*>::vector(values, v15);
  CFDictionaryGetKeysAndValues(v13, (const void **)__p, (const void **)values[0]);
  v16 = v39;
  if (v39 != __p)
  {
    v17 = 0;
    v16 = __p;
    do
    {
      v18 = (const __CFString *)v16[v17];
      v19 = CFGetTypeID(v18);
      if (v19 != CFStringGetTypeID())
        v18 = 0;
      v20 = (const __CFString *)values[0][v17];
      v21 = CFGetTypeID(v20);
      if (v21 != CFStringGetTypeID())
        v20 = 0;
      if (v18)
        v22 = v20 == 0;
      else
        v22 = 1;
      if (v22)
      {
        v26 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, "Malformed plist: incorrect types for mapping dictionary");
        nlp::ResourceCreationException::ResourceCreationException(v26, (__int128 *)&__str);
      }
      nlp::getUTF8StringFromCFString(v18, &__str);
      v23 = InputTranscoder::convertToInteger<unsigned int>(&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v33 = v23;
      nlp::getUTF8StringFromCFString(v20, &__str);
      v24 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v4, v23, &v33);
      std::string::operator=(v24 + 1, &__str);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)&__str, (__int128 **)&v35)+ 10) = v23;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v17;
      v16 = __p;
    }
    while (v17 < ((char *)v39 - (_BYTE *)__p) >> 3);
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
    v16 = __p;
  }
  if (v16)
  {
    v39 = v16;
    operator delete(v16);
    Dictionary = v34;
  }
  if (Dictionary)
    CFRelease(Dictionary);
  return a1;
}

void sub_228530F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  void **v41;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if ((v40 & 1) != 0)
    __cxa_free_exception(v39);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a11, 0);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v38);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(v37);
  if (*(char *)(v36 + 39) < 0)
    operator delete(*v41);
  _Unwind_Resume(a1);
}

uint64_t InputTranscoder::PlistBiMap<unsigned int,std::string>::unknownKey(uint64_t a1)
{
  return a1 + 8;
}

uint64_t InputTranscoder::PlistBiMap<unsigned int,std::string>::unknownValue(uint64_t a1)
{
  return a1 + 16;
}

uint64_t *InputTranscoder::PlistBiMap<unsigned int,std::string>::operator[](uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;

  v3 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(a1 + 40), *a2);
  if (v3)
    return v3 + 3;
  else
    return (uint64_t *)(a1 + 16);
}

unsigned __int8 *InputTranscoder::PlistBiMap<unsigned int,std::string>::reverseMap(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((_QWORD *)(a1 + 80), a2);
  if (v3)
    return v3 + 40;
  else
    return (unsigned __int8 *)(a1 + 8);
}

uint64_t InputTranscoder::PlistBiMap<std::string,unsigned int>::PlistBiMap(uint64_t a1, uint64_t a2)
{
  void **v3;
  uint64_t *v4;
  uint64_t *v5;
  InputTranscoder *Dictionary;
  const __CFDictionary *v7;
  const __CFString *Required;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  int v12;
  const __CFDictionary *v13;
  CFIndex Count;
  CFIndex v15;
  _QWORD *v16;
  unint64_t v17;
  const __CFString *v18;
  CFTypeID v19;
  const __CFString *v20;
  CFTypeID v21;
  BOOL v22;
  unsigned int v23;
  std::string *v24;
  _QWORD *v26;
  _QWORD *exception;
  std::string *v28;
  __int128 v29;
  _QWORD *v30;
  std::string *v31;
  __int128 v32;
  unsigned int v33;
  InputTranscoder *v34;
  std::string __str;
  void **values[2];
  std::string::size_type v37;
  void *__p;
  _QWORD *v39;
  char v40;
  std::string v41;

  *(_QWORD *)a1 = off_24F111AD0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (uint64_t *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  v5 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  Dictionary = (InputTranscoder *)InputTranscoder::createDictionary(a2);
  v34 = Dictionary;
  InputTranscoder::validateVersion(Dictionary, v7);
  Required = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("keyType"));
  nlp::getUTF8StringFromCFString(Required, &v41);
  v9 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("valueType"));
  nlp::getUTF8StringFromCFString(v9, &__p);
  if (!InputTranscoder::typeMatches<std::string>((uint64_t *)&v41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v28 = std::string::append(&__str, "\"", 1uLL);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v37 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)values = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)values);
  }
  if (!InputTranscoder::typeMatches<unsigned int>((uint64_t)&__p))
  {
    v30 = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    v31 = std::string::append(&__str, "\"", 1uLL);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)values = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    nlp::ResourceCreationException::ResourceCreationException(v30, (__int128 *)values);
  }
  if (v40 < 0)
    operator delete(__p);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v10 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("unknownKey"));
  nlp::getUTF8StringFromCFString(v10, &v41);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  *(std::string *)v3 = v41;
  v11 = (const __CFString *)InputTranscoder::getRequiredCFType<__CFString const*>(Dictionary, CFSTR("unknownValue"));
  nlp::getUTF8StringFromCFString(v11, &v41);
  v12 = InputTranscoder::convertToInteger<unsigned int>(&v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 32) = v12;
  v13 = (const __CFDictionary *)InputTranscoder::getRequiredCFType<__CFDictionary const*>(Dictionary, CFSTR("mapping"));
  Count = CFDictionaryGetCount(v13);
  std::vector<void const*>::vector(&__p, Count);
  v15 = CFDictionaryGetCount(v13);
  std::vector<void const*>::vector(values, v15);
  CFDictionaryGetKeysAndValues(v13, (const void **)__p, (const void **)values[0]);
  v16 = v39;
  if (v39 != __p)
  {
    v17 = 0;
    v16 = __p;
    do
    {
      v18 = (const __CFString *)v16[v17];
      v19 = CFGetTypeID(v18);
      if (v19 != CFStringGetTypeID())
        v18 = 0;
      v20 = (const __CFString *)values[0][v17];
      v21 = CFGetTypeID(v20);
      if (v21 != CFStringGetTypeID())
        v20 = 0;
      if (v18)
        v22 = v20 == 0;
      else
        v22 = 1;
      if (v22)
      {
        v26 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v41, "Malformed plist: incorrect types for mapping dictionary");
        nlp::ResourceCreationException::ResourceCreationException(v26, (__int128 *)&v41);
      }
      nlp::getUTF8StringFromCFString(v18, &__str);
      nlp::getUTF8StringFromCFString(v20, &v41);
      v23 = InputTranscoder::convertToInteger<unsigned int>(&v41);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v33 = v23;
      v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (unsigned __int8 *)&__str, (__int128 **)&v41)+ 10) = v23;
      v24 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, v23, &v33);
      std::string::operator=(v24 + 1, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v17;
      v16 = __p;
    }
    while (v17 < ((char *)v39 - (_BYTE *)__p) >> 3);
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
    v16 = __p;
  }
  if (v16)
  {
    v39 = v16;
    operator delete(v16);
    Dictionary = v34;
  }
  if (Dictionary)
    CFRelease(Dictionary);
  return a1;
}

void sub_22853154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  void **v41;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if ((v40 & 1) != 0)
    __cxa_free_exception(v39);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a11, 0);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(v38);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v37);
  if (*(char *)(v36 + 31) < 0)
    operator delete(*v41);
  _Unwind_Resume(a1);
}

uint64_t InputTranscoder::PlistBiMap<std::string,unsigned int>::unknownKey(uint64_t a1)
{
  return a1 + 8;
}

uint64_t InputTranscoder::PlistBiMap<std::string,unsigned int>::unknownValue(uint64_t a1)
{
  return a1 + 32;
}

unsigned __int8 *InputTranscoder::PlistBiMap<std::string,unsigned int>::operator[](uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
  if (v3)
    return v3 + 40;
  else
    return (unsigned __int8 *)(a1 + 32);
}

uint64_t *InputTranscoder::PlistBiMap<std::string,unsigned int>::reverseMap(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;

  v3 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>((_QWORD *)(a1 + 80), *a2);
  if (v3)
    return v3 + 3;
  else
    return (uint64_t *)(a1 + 8);
}

_QWORD *InputTranscoder::PlistBiMap<unsigned int,unsigned int>::~PlistBiMap(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24F111A50;
  v2 = (uint64_t)(a1 + 2);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)(a1 + 7));
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(v2);
  return a1;
}

void InputTranscoder::PlistBiMap<unsigned int,unsigned int>::~PlistBiMap(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24F111A50;
  v1 = (uint64_t)(a1 + 2);
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)(a1 + 7));
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(v1);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t InputTranscoder::PlistBiMap<unsigned int,std::string>::~PlistBiMap(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111A90;
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(a1 + 80);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(a1 + 40);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void InputTranscoder::PlistBiMap<unsigned int,std::string>::~PlistBiMap(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111A90;
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(a1 + 80);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(a1 + 40);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t InputTranscoder::PlistBiMap<std::string,unsigned int>::~PlistBiMap(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111AD0;
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(a1 + 80);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(a1 + 40);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void InputTranscoder::PlistBiMap<std::string,unsigned int>::~PlistBiMap(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111AD0;
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(a1 + 80);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(a1 + 40);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_228531984(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlp::ResourceCreationException::ResourceCreationException(uint64_t a1, const void **a2, CFErrorRef err)
{
  void **v5;
  const __CFString *v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  const __CFString *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24F110990;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = CFErrorCopyDescription(err);
  v20 = v6;
  if (*((char *)a2 + 23) >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v7 + 2);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, ": ");
  nlp::getUTF8StringFromCFString(v6, __p);
  if ((v18 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v11 = v18;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  v13 = v12->__r_.__value_.__r.__words[0];
  v21[0] = v12->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v5);
  v15 = v21[0];
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v21 + 7);
  *(_BYTE *)(a1 + 31) = v14;
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v6)
      return a1;
    goto LABEL_25;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (v6)
LABEL_25:
    CFRelease(v6);
  return a1;
}

void sub_228531B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<__CFError *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL InputTranscoder::typeMatches<unsigned int>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(unsigned __int8 *)(a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1 != 7)
    return 0;
  if (v2 >= 0)
    v3 = (int *)a1;
  else
    v3 = *(int **)a1;
  v4 = *v3;
  v5 = *(int *)((char *)v3 + 3);
  return v4 == 1702129257 && v5 == 1919248229;
}

uint64_t InputTranscoder::convertToInteger<unsigned int>(const std::string *a1)
{
  return std::stoi(a1, 0, 10);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_228531F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x22E2B187C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E2B187C](a1 + 128);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_22853239C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

BOOL InputTranscoder::typeMatches<std::string>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  int *v3;
  int v4;
  int v5;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = a1[1];
  if (v1 != 6)
    return 0;
  if (v2 >= 0)
    v3 = (int *)a1;
  else
    v3 = (int *)*a1;
  v4 = *v3;
  v5 = *((unsigned __int16 *)v3 + 2);
  return v4 == 1769108595 && v5 == 26478;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v6);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_228532964(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

char *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  std::string *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = a1 + 3;
  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v14 + 16, a2) & 1) != 0)return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v16 = *a3;
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v17 = (std::string *)(v14 + 16);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v18 = *v16;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  *((_DWORD *)v14 + 10) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)a1[2];
          if (v28)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = a1 + 2;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v14 = *v37;
LABEL_75:
    *v37 = v14;
    goto LABEL_76;
  }
  *(_QWORD *)v14 = a1[2];
  a1[2] = (uint64_t)v14;
  *(_QWORD *)(v36 + 8 * v3) = a1 + 2;
  if (*(_QWORD *)v14)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v38 >= v10)
        v38 %= v10;
    }
    else
    {
      v38 &= v10 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v14;
}

void sub_228532DFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t InputTranscoder::CandidateImpl::toString@<X0>(InputTranscoder::CandidateImpl *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  InputTranscoder::CandidateImpl *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v35);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"candidate=", 10);
  v5 = *((char *)this + 23);
  if (v5 >= 0)
    v6 = this;
  else
    v6 = *(InputTranscoder::CandidateImpl **)this;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 23);
  else
    v7 = *((_QWORD *)this + 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", score=", 8);
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFEFB | 4;
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", isCompletion=", 15);
  if (*((_BYTE *)this + 80))
    v12 = "YES";
  else
    v12 = "NO";
  if (*((_BYTE *)this + 80))
    v13 = 3;
  else
    v13 = 2;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", isValidWord=", 14);
  if (*((_BYTE *)this + 81))
    v16 = "YES";
  else
    v16 = "NO";
  if (*((_BYTE *)this + 81))
    v17 = 3;
  else
    v17 = 2;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", isMultiWord=", 14);
  if (*((_BYTE *)this + 82))
    v20 = "YES";
  else
    v20 = "NO";
  if (*((_BYTE *)this + 82))
    v21 = 3;
  else
    v21 = 2;
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", foundOnlyInDynamicLexicons=", 29);
  if (*((_BYTE *)this + 88))
    v24 = "YES";
  else
    v24 = "NO";
  if (*((_BYTE *)this + 88))
    v25 = 3;
  else
    v25 = 2;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", prefix=", 9);
  v30 = *((_QWORD *)this + 12);
  v29 = (char *)this + 96;
  v28 = v30;
  v31 = v29[23];
  if (v31 >= 0)
    v32 = (uint64_t)v29;
  else
    v32 = v28;
  if (v31 >= 0)
    v33 = v29[23];
  else
    v33 = *((_QWORD *)v29 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v32, v33);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v36, a2);
  v35 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v36[0] = MEMORY[0x24BEDB848] + 16;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22E2B187C](&v38);
}

void sub_2285336B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::PathKeyLayoutProcessor *this@<X0>, const InputTranscoder::Path *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char **a7@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  double v26;
  double v27;
  double v28;
  _QWORD *v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int *v35;
  int *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(this, a2, a3, a4, a5, &v35);
  v34 = 0x3F800000BF800000;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v11 = (char *)v36 - (char *)v35;
  if (v36 != v35)
  {
    if ((unint64_t)v11 >= 0x1FFFFFFFFFFFFFFDLL)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::InputFeature>>((uint64_t)(a7 + 2), v11 >> 2);
    v15 = *a7;
    v14 = a7[1];
    v16 = v12;
    if (v14 != *a7)
    {
      do
      {
        v17 = *((_OWORD *)v14 - 2);
        *(_OWORD *)(v16 - 20) = *(_OWORD *)(v14 - 20);
        *((_OWORD *)v16 - 2) = v17;
        v16 -= 32;
        v14 -= 32;
      }
      while (v14 != v15);
      v14 = v15;
    }
    *a7 = v16;
    a7[1] = v12;
    a7[2] = &v12[32 * v13];
    if (v14)
      operator delete(v14);
  }
  v18 = v36;
  if (v36 != v35)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = (__int128 *)(*(_QWORD *)a2 + v19);
      v22 = v21[3];
      v24 = *v21;
      v23 = v21[1];
      v32 = v21[2];
      v33 = v22;
      v31[0] = v24;
      v31[1] = v23;
      v25 = (_QWORD *)*((_QWORD *)this + 3);
      v37[0] = &off_24F111C60;
      v37[1] = v31;
      v37[2] = &v34;
      v38 = v37;
      v26 = (*(double (**)(_QWORD, double, double, float, float))(*(_QWORD *)*v25 + 64))(*v25, *(double *)&v24, *((double *)&v24 + 1), *(float *)&v34, *((float *)&v34 + 1));
      v28 = v27;
      v29 = v38;
      if (v38 == v37)
        break;
      if (v38)
      {
        v30 = 5;
LABEL_14:
        (*(void (**)(void))(*v29 + 8 * v30))();
      }
      InputTranscoder::appendFeature(v35[v20++], DWORD2(v32) + a6, (void **)a7, v26, v28);
      v18 = v35;
      v19 += 64;
      if (v20 >= v36 - v35)
        goto LABEL_16;
    }
    v29 = v37;
    v30 = 4;
    goto LABEL_14;
  }
LABEL_16:
  if (v18)
  {
    v36 = v18;
    operator delete(v18);
  }
}

void sub_2285338CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _Unwind_Resume(exception_object);
}

void InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::PathKeyLayoutProcessor *this@<X0>, const InputTranscoder::Path *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int **a6@<X8>)
{
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  char *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  std::string __p;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v12 = a6 + 2;
  v13 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  if ((unint64_t)v13 >= 0x100)
  {
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v12, (unint64_t)(v13 >> 6) >> 2);
    v16 = *a6;
    v17 = a6[1];
    v18 = v14;
    while (v17 != v16)
    {
      v19 = *--v17;
      *((_DWORD *)v18 - 1) = v19;
      v18 -= 4;
    }
    *a6 = (int *)v18;
    a6[1] = (int *)v14;
    a6[2] = (int *)&v14[4 * v15];
    if (v16)
      operator delete(v16);
  }
  v20 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v21 = 0;
    v22 = -1;
    do
    {
      v23 = v22;
      v24 = *((_QWORD *)this + 1);
      InputTranscoder::PathKeyLayoutProcessor::keystr_for_touch((uint64_t)this, (__int128 *)(v20 + (v21 << 6)), &__p);
      v22 = *(_DWORD *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 32))(v24, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (a5)
        {
LABEL_13:
          if (InputTranscoder::Path::inflection_point_count(a2, v21, v21)
            || !v21
            || ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 6) - 1 == v21)
          {
            v22 += a4;
          }
        }
      }
      else if (a5)
      {
        goto LABEL_13;
      }
      v25 = a6[1];
      if (v21 && a3 && v22 == v23)
        a6[1] = --v25;
      if ((unint64_t)v25 >= *v12)
      {
        v27 = *a6;
        v28 = v25 - *a6;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v30 = *v12 - (_QWORD)v27;
        if (v30 >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v12, v31);
          v27 = *a6;
          v25 = a6[1];
        }
        else
        {
          v32 = 0;
        }
        v33 = (int *)&v32[4 * v28];
        *v33 = v22;
        v26 = v33 + 1;
        while (v25 != v27)
        {
          v34 = *--v25;
          *--v33 = v34;
        }
        *a6 = v33;
        a6[1] = v26;
        a6[2] = (int *)&v32[4 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *v25 = v22;
        v26 = v25 + 1;
      }
      a6[1] = v26;
      ++v21;
      v20 = *(_QWORD *)a2;
    }
    while (v21 < (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 6);
  }
}

void sub_228533B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::PathKeyLayoutProcessor *this@<X0>, const InputTranscoder::Path *a2@<X1>, uint64_t a3@<X8>)
{
  double *v6;
  double *v7;
  _QWORD *v8;
  double v9;
  double v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  float v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float *v24;
  int v25;
  float v26;
  float *v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  float *v34;
  int v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<float>::reserve((void **)a3, (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 5);
  v36 = 0x3F800000BF800000;
  v6 = *(double **)a2;
  v7 = (double *)*((_QWORD *)a2 + 1);
  if (*(double **)a2 != v7)
  {
    while (1)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 3);
      v37[0] = &off_24F111CF0;
      v37[1] = v6;
      v37[2] = &v36;
      v38 = v37;
      v9 = (*(double (**)(_QWORD, double, double, float, float))(*(_QWORD *)*v8 + 64))(*v8, *v6, v6[1], *(float *)&v36, *((float *)&v36 + 1));
      v11 = v10;
      v12 = v38;
      if (v38 == v37)
        break;
      if (v38)
      {
        v13 = 5;
LABEL_6:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }
      v14 = v9;
      v16 = *(float **)(a3 + 8);
      v15 = *(float **)(a3 + 16);
      if (v16 >= v15)
      {
        v18 = *(float **)a3;
        v19 = ((uint64_t)v16 - *(_QWORD *)a3) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          goto LABEL_41;
        v21 = (char *)v15 - (char *)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a3 + 16, v22);
          v18 = *(float **)a3;
          v16 = *(float **)(a3 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = (float *)&v23[4 * v19];
        *v24 = v14;
        v17 = v24 + 1;
        while (v16 != v18)
        {
          v25 = *((_DWORD *)v16-- - 1);
          *((_DWORD *)v24-- - 1) = v25;
        }
        v15 = (float *)&v23[4 * v22];
        *(_QWORD *)a3 = v24;
        *(_QWORD *)(a3 + 8) = v17;
        *(_QWORD *)(a3 + 16) = v15;
        if (v18)
        {
          operator delete(v18);
          v15 = *(float **)(a3 + 16);
        }
      }
      else
      {
        *v16 = v14;
        v17 = v16 + 1;
      }
      v26 = v11;
      *(_QWORD *)(a3 + 8) = v17;
      if (v17 >= v15)
      {
        v28 = *(float **)a3;
        v29 = ((uint64_t)v17 - *(_QWORD *)a3) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
LABEL_41:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v31 = (char *)v15 - (char *)v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a3 + 16, v32);
          v28 = *(float **)a3;
          v17 = *(float **)(a3 + 8);
        }
        else
        {
          v33 = 0;
        }
        v34 = (float *)&v33[4 * v29];
        *v34 = v26;
        v27 = v34 + 1;
        while (v17 != v28)
        {
          v35 = *((_DWORD *)v17-- - 1);
          *((_DWORD *)v34-- - 1) = v35;
        }
        *(_QWORD *)a3 = v34;
        *(_QWORD *)(a3 + 8) = v27;
        *(_QWORD *)(a3 + 16) = &v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v17 = v26;
        v27 = v17 + 1;
      }
      *(_QWORD *)(a3 + 8) = v27;
      v6 += 8;
      if (v6 == v7)
        return;
    }
    v12 = v37;
    v13 = 4;
    goto LABEL_6;
  }
}

void sub_228533E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void InputTranscoder::PathKeyLayoutProcessor::keystr_for_touch(uint64_t a1@<X0>, __int128 *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  int v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  int v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  int v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  std::string __p;
  std::string v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  switch(*(_DWORD *)(a1 + 40))
  {
    case 1:
      v6 = *(uint64_t **)(a1 + 24);
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      v31 = a2[2];
      v32 = a2[3];
      v29 = *a2;
      v30 = a2[1];
      v33 = *(_BYTE *)(a1 + 44);
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
      }
      else
      {
        v8 = *(_OWORD *)v7;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
      }
      v37 = 0;
      v26 = (char *)operator new(0x70uLL);
      *(_QWORD *)v26 = off_24F111E08;
      *((_QWORD *)v26 + 1) = InputTranscoder::getNearestKeyOrUnk;
      *((_OWORD *)v26 + 1) = v29;
      *((_OWORD *)v26 + 2) = v30;
      *((_OWORD *)v26 + 3) = v31;
      *((_OWORD *)v26 + 4) = v32;
      v26[80] = v33;
      *(std::string *)(v26 + 88) = __p;
      memset(&__p, 0, sizeof(__p));
      v37 = v26;
      InputTranscoder::getNearestKeyOrUnk((double *)v26 + 2, *v6, v33 != 0, (uint64_t)(v26 + 88), &v35);
      v27 = v37;
      *a3 = v35;
      *((_BYTE *)&v35.__r_.__value_.__s + 23) = 0;
      v35.__r_.__value_.__s.__data_[0] = 0;
      if (v27 == v36)
      {
        v28 = 4;
        v27 = v36;
      }
      else
      {
        if (!v27)
          goto LABEL_19;
        v28 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_19:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v9 = *(uint64_t **)(a1 + 24);
      v10 = *(unsigned __int8 *)(a1 + 44);
      v11 = operator new(0x58uLL);
      *(_QWORD *)v11 = &off_24F111D70;
      *((_QWORD *)v11 + 1) = InputTranscoder::getEnclosingOrNearestKey;
      v12 = a2[1];
      *((_OWORD *)v11 + 1) = *a2;
      *((_OWORD *)v11 + 2) = v12;
      v13 = a2[3];
      *((_OWORD *)v11 + 3) = a2[2];
      *((_OWORD *)v11 + 4) = v13;
      *((_BYTE *)v11 + 80) = v10;
      v37 = v11;
      InputTranscoder::getEnclosingOrNearestKey((double *)v11 + 2, *v9, v10 != 0, &v35);
      goto LABEL_7;
    case 3:
      v14 = *(uint64_t **)(a1 + 24);
      v15 = *(unsigned __int8 *)(a1 + 44);
      v16 = operator new(0x58uLL);
      *(_QWORD *)v16 = &off_24F111D70;
      *((_QWORD *)v16 + 1) = InputTranscoder::getMostProbableMultiKey;
      v17 = a2[1];
      *((_OWORD *)v16 + 1) = *a2;
      *((_OWORD *)v16 + 2) = v17;
      v18 = a2[3];
      *((_OWORD *)v16 + 3) = a2[2];
      *((_OWORD *)v16 + 4) = v18;
      *((_BYTE *)v16 + 80) = v15;
      v37 = v16;
      InputTranscoder::getMostProbableMultiKey((double *)v16 + 2, *v14, v15 != 0, &v35);
      goto LABEL_7;
    default:
      v19 = *(uint64_t **)(a1 + 24);
      v20 = *(unsigned __int8 *)(a1 + 44);
      v21 = operator new(0x58uLL);
      *(_QWORD *)v21 = &off_24F111D70;
      *((_QWORD *)v21 + 1) = InputTranscoder::getNearestKey;
      v22 = a2[1];
      *((_OWORD *)v21 + 1) = *a2;
      *((_OWORD *)v21 + 2) = v22;
      v23 = a2[3];
      *((_OWORD *)v21 + 3) = a2[2];
      *((_OWORD *)v21 + 4) = v23;
      *((_BYTE *)v21 + 80) = v20;
      v37 = v21;
      InputTranscoder::getNearestKey((double *)v21 + 2, *v19, v20 != 0, &v35);
LABEL_7:
      v24 = v37;
      *a3 = v35;
      *((_BYTE *)&v35.__r_.__value_.__s + 23) = 0;
      v35.__r_.__value_.__s.__data_[0] = 0;
      if (v24 == v36)
      {
        v25 = 4;
        v24 = v36;
      }
      else
      {
        if (!v24)
          return;
        v25 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      return;
  }
}

void sub_22853420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;

  v27 = *(_QWORD **)(v25 - 64);
  if (v27 == (_QWORD *)(v25 - 88))
  {
    v28 = 4;
    v27 = (_QWORD *)(v25 - 88);
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_6:
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::getNearestKey(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, std::string *a4@<X8>)
{
  double v5;
  double v6;
  __int128 v7;
  _QWORD v8[6];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  void *__p;
  uint64_t v16;
  uint64_t v17;

  v10 = 0;
  v11 = &v10;
  v12 = 0x4002000000;
  v13 = __Block_byref_object_copy__2;
  v14 = __Block_byref_object_dispose__2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  v5 = *a1;
  v6 = a1[1];
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZN15InputTranscoderL13getNearestKeyERKNS_10PathSampleERNS_14KeyboardLayoutEb_block_invoke;
  v8[3] = &unk_24F111BB8;
  v9 = a3;
  v8[4] = &v10;
  v8[5] = a2;
  (*(void (**)(uint64_t, _QWORD *, double, double))(*(_QWORD *)a2 + 16))(a2, v8, v5, v6);
  if (*((char *)v11 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)v11[5], v11[6]);
  }
  else
  {
    v7 = *(_OWORD *)(v11 + 5);
    a4->__r_.__value_.__r.__words[2] = v11[7];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
  }
  _Block_object_dispose(&v10, 8);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
}

void sub_2285343A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Block_object_dispose(&a17, 8);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void InputTranscoder::getNearestKeyOrUnk(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  double v6;
  double v7;
  __int128 v8;
  _QWORD v9[9];
  char v10;
  _QWORD v11[12];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__2;
  v16 = __Block_byref_object_dispose__2;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x6002000000;
  v11[3] = __Block_byref_object_copy__3;
  v11[4] = __Block_byref_object_dispose__4;
  v6 = *a1;
  v7 = a1[1];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 0x40000000;
  v9[2] = ___ZN15InputTranscoderL18getNearestKeyOrUnkERKNS_10PathSampleERNS_14KeyboardLayoutEbRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke;
  v9[3] = &unk_24F111BE0;
  v10 = a3;
  v9[4] = &v12;
  v9[5] = v11;
  v9[6] = a2;
  v9[7] = a1;
  v9[8] = a4;
  (*(void (**)(uint64_t, _QWORD *, double, double))(*(_QWORD *)a2 + 16))(a2, v9, v6, v7);
  if (*((char *)v13 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a5, (const std::string::value_type *)v13[5], v13[6]);
  }
  else
  {
    v8 = *(_OWORD *)(v13 + 5);
    a5->__r_.__value_.__r.__words[2] = v13[7];
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v8;
  }
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v12, 8);
  if (SHIBYTE(v19) < 0)
    operator delete(v17);
}

void sub_2285344F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  if (*(char *)(v11 - 17) < 0)
    operator delete(*(void **)(v11 - 40));
  _Unwind_Resume(a1);
}

void InputTranscoder::getEnclosingOrNearestKey(double *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  int v8;
  std::string v9;
  std::string __p;
  _OWORD v11[3];
  nlp *v12;

  v12 = 0;
  memset(v11, 0, sizeof(v11));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, double, double))(*(_QWORD *)a2 + 24))(v11, a2, *a1, a1[1]);
  nlp::getUTF8StringFromCFString((const __CFString *)v12, &__p);
  if (a3)
  {
    InputTranscoder::transformNonLetterKeys((uint64_t)&__p, &v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v9;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  if (InputTranscoder::keyIsValid((uint64_t)v11, a3, v8))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(a4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *a4 = __p;
  }
  else
  {
    InputTranscoder::getNearestKey(a1, a2, a3, a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_22853463C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::getMostProbableMultiKey(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, std::string *a4@<X8>)
{
  double v5;
  double v6;
  __int128 v7;
  _QWORD v8[7];
  char v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v12 = 0;
  v13 = &v12;
  v14 = 0x4002000000;
  v15 = __Block_byref_object_copy__2;
  v16 = __Block_byref_object_dispose__2;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  v11 = 0;
  v5 = *a1;
  v6 = a1[1];
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZN15InputTranscoderL23getMostProbableMultiKeyERKNS_10PathSampleERNS_14KeyboardLayoutEb_block_invoke;
  v8[3] = &unk_24F111C08;
  v9 = a3;
  v8[5] = &v12;
  v8[6] = a2;
  v8[4] = v10;
  (*(void (**)(uint64_t, _QWORD *, double, double))(*(_QWORD *)a2 + 16))(a2, v8, v5, v6);
  if (*((char *)v13 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)v13[5], v13[6]);
  }
  else
  {
    v7 = *(_OWORD *)(v13 + 5);
    a4->__r_.__value_.__r.__words[2] = v13[7];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
  }
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v12, 8);
  if (SHIBYTE(v19) < 0)
    operator delete(v17);
}

void sub_228534770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  if (*(char *)(v9 - 17) < 0)
    operator delete(*(void **)(v9 - 40));
  _Unwind_Resume(a1);
}

uint64_t InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::string __p;

  InputTranscoder::PathKeyLayoutProcessor::keystr_for_touch(a1, a2, &__p);
  v2 = InputTranscoder::map_to_key_class((uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v2;
}

uint64_t InputTranscoder::map_to_key_class(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  BOOL v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = a1[1];
  if (v1 == 6)
  {
    if (v2 >= 0)
      v7 = a1;
    else
      v7 = (uint64_t *)*a1;
    v8 = 1684368485;
    v9 = bswap32(*(_DWORD *)v7);
    if (v9 == 1684368485 && (v9 = bswap32(*((unsigned __int16 *)v7 + 2)) >> 16, v8 = 29797, v9 == 29797))
    {
      v10 = 0;
    }
    else if (v9 < v8)
    {
      v10 = -1;
    }
    else
    {
      v10 = 1;
    }
    v5 = v10 == 0;
    v6 = 4;
  }
  else
  {
    if (v1 != 5)
      return 1;
    if (v2 >= 0)
      v3 = a1;
    else
      v3 = (uint64_t *)*a1;
    if (*(_DWORD *)v3 == 1718184051 && *((_BYTE *)v3 + 4) == 116)
      return 2;
    v5 = (*(_DWORD *)v3 ^ 0x63617073 | *((unsigned __int8 *)v3 + 4) ^ 0x65) == 0;
    v6 = 3;
  }
  if (v5)
    return v6;
  else
    return 1;
}

uint64_t InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  int v6;
  int IsValid;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  std::string v12;
  std::string __p;
  std::string *p_p;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 44);
  v5 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24F111EA0;
  p_p = &__p;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 80))(*v5);
  IsValid = InputTranscoder::keyIsValid(a2, v4 != 0, v6);
  v8 = p_p;
  if (p_p == &__p)
  {
    v9 = 4;
    v8 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(v8->__r_.__value_.__r.__words[0] + 8 * v9))();
LABEL_6:
  if (!IsValid)
    return 0;
  nlp::getUTF8StringFromCFString(*(const __CFString **)(a2 + 48), &__p);
  if (*(_BYTE *)(a1 + 44))
  {
    InputTranscoder::transformNonLetterKeys((uint64_t)&__p, &v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v12;
  }
  v10 = InputTranscoder::map_to_key_class((uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_228534A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::keyIsValid(uint64_t a1, int a2, int a3)
{
  CFIndex Length;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int16 *p_p;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  unsigned __int8 *v22;
  int v24;
  int v25;
  void *__p;
  uint64_t v29;
  unsigned __int8 v30;

  Length = CFStringGetLength(*(CFStringRef *)(a1 + 48));
  v7 = Length != 0;
  if (Length)
    v8 = a3 == 0;
  else
    v8 = 1;
  if (v8)
    return v7;
  nlp::getUTF8StringFromCFString(*(const __CFString **)(a1 + 48), &__p);
  v9 = v30;
  v10 = v30;
  if ((v30 & 0x80u) != 0)
    v9 = v29;
  if (v9 != 1)
    goto LABEL_18;
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "a") & 0x80) == 0
    && (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "z") << 24) <= 0xFFFFFF)
  {
    v10 = v30;
    goto LABEL_20;
  }
  v11 = v30;
  v10 = v30;
  if ((v30 & 0x80u) != 0)
    v11 = v29;
  if (v11 != 2)
    goto LABEL_18;
  p_p = (unsigned __int16 *)__p;
  if ((v30 & 0x80u) == 0)
    p_p = (unsigned __int16 *)&__p;
  if (*p_p != 46274 && *p_p != 45507)
  {
LABEL_18:
    v13 = 0;
    if (!a2)
      goto LABEL_48;
    goto LABEL_21;
  }
LABEL_20:
  v13 = 1;
  if (!a2)
    goto LABEL_48;
LABEL_21:
  v14 = v29;
  if ((v10 & 0x80u) == 0)
    v14 = v10;
  if (v14 == 6)
  {
    v18 = (unsigned __int16 *)&__p;
    if ((v10 & 0x80u) != 0)
      v18 = (unsigned __int16 *)__p;
    v19 = *(_DWORD *)v18;
    v20 = v18[2];
    LODWORD(v17) = v19 == 1701602660 && v20 == 25972;
    goto LABEL_49;
  }
  if (v14 != 5)
  {
    if (v14 == 1)
    {
      v15 = (unsigned __int8 *)&__p;
      if ((v10 & 0x80u) != 0)
        v15 = (unsigned __int8 *)__p;
      v16 = *v15;
      if (v16 < 0x21)
      {
        v17 = (0x10001E500uLL >> v16) & 1;
        goto LABEL_49;
      }
    }
    goto LABEL_48;
  }
  v22 = (unsigned __int8 *)&__p;
  if ((v10 & 0x80u) != 0)
    v22 = (unsigned __int8 *)__p;
  if (*(_DWORD *)v22 != 1718184051 || v22[4] != 116)
  {
    v24 = *(_DWORD *)v22;
    v25 = v22[4];
    if (v24 != 1667330163 || v25 != 101)
    {
LABEL_48:
      LODWORD(v17) = 0;
      goto LABEL_49;
    }
  }
  LODWORD(v17) = 1;
LABEL_49:
  v7 = v13 | v17;
  if ((v10 & 0x80) != 0)
    operator delete(__p);
  return v7;
}

void InputTranscoder::transformNonLetterKeys(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string::size_type v5;
  const std::string::value_type *v6;
  int64_t v7;
  const std::string::value_type *v8;
  const std::string::value_type *v9;
  size_t v10;
  void *v11;
  const std::string::value_type *v12;
  size_t v13;
  void *v14;
  BOOL v15;
  const std::string::value_type *v16;
  char *v17;
  size_t v18;
  void *v19;
  const std::string::value_type *v20;
  size_t v22;
  void *v23;
  const std::string::value_type *v24;
  size_t v25;
  void *v26;
  const std::string::value_type *v27;
  size_t v28;
  void *v29;
  const std::string::value_type *v30;
  void *v31;
  const std::string::value_type *v32;

  v4 = *(char *)(a1 + 23);
  v6 = *(const std::string::value_type **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  if (v4 >= 0)
    v8 = (const std::string::value_type *)a1;
  else
    v8 = *(const std::string::value_type **)a1;
  if (v7 < 1)
    goto LABEL_73;
  v9 = &v8[v7];
  v10 = v7;
  v11 = (void *)v8;
  while (1)
  {
    v12 = (const std::string::value_type *)memchr(v11, 14, v10);
    if (!v12)
      goto LABEL_15;
    if (*v12 == 14)
      break;
    v11 = (void *)(v12 + 1);
    v10 = v9 - (_BYTE *)v11;
    if (v9 - (_BYTE *)v11 < 1)
      goto LABEL_15;
  }
  if (v12 != v9 && v12 - v8 != -1)
  {
LABEL_24:
    v17 = "shift";
LABEL_76:
    std::string::basic_string[abi:ne180100]<0>(a2, v17);
    return;
  }
LABEL_15:
  v13 = v7;
  v14 = (void *)v8;
  if (v7 == 5)
  {
    v15 = *(_DWORD *)v8 == 1718184051 && v8[4] == 116;
    v13 = 5;
    v14 = (void *)v8;
    if (v15)
      goto LABEL_24;
  }
  while (1)
  {
    v16 = (const std::string::value_type *)memchr(v14, 8, v13);
    if (!v16)
      goto LABEL_27;
    if (*v16 == 8)
      break;
    v14 = (void *)(v16 + 1);
    v13 = v9 - (_BYTE *)v14;
    if (v9 - (_BYTE *)v14 < 1)
      goto LABEL_27;
  }
  if (v16 != v9 && v16 - v8 != -1)
  {
LABEL_40:
    v17 = "delete";
    goto LABEL_76;
  }
LABEL_27:
  v18 = v7;
  v19 = (void *)v8;
  do
  {
    v20 = (const std::string::value_type *)memchr(v19, 8, v18);
    if (!v20)
      break;
    if (*v20 == 8)
    {
      if (v20 != v9 && v20 - v8 != -1)
        goto LABEL_40;
      break;
    }
    v19 = (void *)(v20 + 1);
    v18 = v9 - (_BYTE *)v19;
  }
  while (v9 - (_BYTE *)v19 >= 1);
  if (v7 == 6 && *(_DWORD *)v8 == 1701602660 && *((_WORD *)v8 + 2) == 25972)
    goto LABEL_40;
  v22 = v7;
  v23 = (void *)v8;
  do
  {
    v24 = (const std::string::value_type *)memchr(v23, 15, v22);
    if (!v24)
      break;
    if (*v24 == 15)
    {
      if (v24 != v9 && v24 - v8 != -1)
      {
        v17 = "{international}";
        goto LABEL_76;
      }
      break;
    }
    v23 = (void *)(v24 + 1);
    v22 = v9 - (_BYTE *)v23;
  }
  while (v9 - (_BYTE *)v23 >= 1);
  v25 = v7;
  v26 = (void *)v8;
  do
  {
    v27 = (const std::string::value_type *)memchr(v26, 16, v25);
    if (!v27)
      break;
    if (*v27 == 16)
    {
      if (v27 != v9 && v27 - v8 != -1)
      {
        v17 = "{more}";
        goto LABEL_76;
      }
      break;
    }
    v26 = (void *)(v27 + 1);
    v25 = v9 - (_BYTE *)v26;
  }
  while (v9 - (_BYTE *)v26 >= 1);
  v28 = v7;
  v29 = (void *)v8;
  do
  {
    v30 = (const std::string::value_type *)memchr(v29, 10, v28);
    if (!v30)
      break;
    if (*v30 == 10)
    {
      if (v30 != v9 && v30 - v8 != -1)
      {
        v17 = "{newline}";
        goto LABEL_76;
      }
      break;
    }
    v29 = (void *)(v30 + 1);
    v28 = v9 - (_BYTE *)v29;
  }
  while (v9 - (_BYTE *)v29 >= 1);
  v31 = (void *)v8;
  do
  {
    v32 = (const std::string::value_type *)memchr(v31, 13, v7);
    if (!v32)
      break;
    if (*v32 == 13)
    {
      if (v32 != v9 && v32 - v8 != -1)
      {
        v17 = "{return}";
        goto LABEL_76;
      }
      break;
    }
    v31 = (void *)(v32 + 1);
    v7 = v9 - (_BYTE *)v31;
  }
  while (v9 - (_BYTE *)v31 >= 1);
LABEL_73:
  if (std::string::find[abi:ne180100]((char **)a1, " ") != -1
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "space"))
  {
    v17 = "space";
    goto LABEL_76;
  }
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(a2, v6, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

_QWORD *InputTranscoder::PathKeyLayoutProcessor::getInflectionString@<X0>(_QWORD *result@<X0>, __int128 **a2@<X1>, std::string *a3@<X8>)
{
  __int128 *v4;
  __int128 *v5;
  _QWORD *v6;
  uint64_t *v7;
  void *v8;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::string __p;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = result;
    do
    {
      if (!*((_BYTE *)v4 + 56))
      {
        v7 = (uint64_t *)v6[3];
        v12 = *v4;
        v13 = v4[1];
        v14 = v4[2];
        v15 = v4[3];
        v8 = operator new(0x58uLL);
        *(_QWORD *)v8 = &off_24F111F30;
        *((_QWORD *)v8 + 1) = InputTranscoder::getNearestKeyWithoutValidCheck;
        *((_OWORD *)v8 + 1) = v12;
        *((_OWORD *)v8 + 2) = v13;
        *((_OWORD *)v8 + 3) = v14;
        *((_OWORD *)v8 + 4) = v15;
        *((_BYTE *)v8 + 80) = 0;
        v18 = v8;
        InputTranscoder::getNearestKeyWithoutValidCheck((double *)v8 + 2, *v7, 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append(a3, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        result = v18;
        if (v18 == v17)
        {
          result = v17;
          v11 = 4;
          goto LABEL_16;
        }
        if (v18)
        {
          v11 = 5;
LABEL_16:
          result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
        }
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_228535170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  uint64_t v26;
  char *v28;
  uint64_t v29;

  if (a22 < 0)
    operator delete(__p);
  v28 = a26;
  if (a26 == &a23)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_8;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_8:
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::getNearestKeyWithoutValidCheck(double *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, std::string *a4@<X8>)
{
  double v5;
  double v6;
  __int128 v7;
  _QWORD v8[5];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  void *__p;
  uint64_t v16;
  uint64_t v17;

  v10 = 0;
  v11 = &v10;
  v12 = 0x4002000000;
  v13 = __Block_byref_object_copy__2;
  v14 = __Block_byref_object_dispose__2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  v5 = *a1;
  v6 = a1[1];
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = ___ZN15InputTranscoderL30getNearestKeyWithoutValidCheckERKNS_10PathSampleERNS_14KeyboardLayoutEb_block_invoke;
  v8[3] = &unk_24F111C30;
  v9 = a3;
  v8[4] = &v10;
  (*(void (**)(uint64_t, _QWORD *, double, double))(*(_QWORD *)a2 + 16))(a2, v8, v5, v6);
  if (*((char *)v11 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)v11[5], v11[6]);
  }
  else
  {
    v7 = *(_OWORD *)(v11 + 5);
    a4->__r_.__value_.__r.__words[2] = v11[7];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
  }
  _Block_object_dispose(&v10, 8);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
}

void sub_2285352C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Block_object_dispose(&a15, 8);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void InputTranscoder::PathKeyLayoutProcessor::~PathKeyLayoutProcessor(InputTranscoder::PathKeyLayoutProcessor *this)
{
  char *v1;

  *(_QWORD *)this = &off_24F111B88;
  v1 = (char *)this + 8;
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24F111B88;
  v1 = (char *)this + 8;
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x22E2B18DCLL);
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN15InputTranscoderL13getNearestKeyERKNS_10PathSampleERNS_14KeyboardLayoutEb_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  void **v9;
  std::string v10;
  std::string __str;

  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
  if (InputTranscoder::keyIsValid(a2, v6, v7))
  {
    nlp::getUTF8StringFromCFString(*(const __CFString **)(a2 + 48), &__str);
    if (*(_BYTE *)(a1 + 48))
    {
      InputTranscoder::transformNonLetterKeys((uint64_t)&__str, &v10);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v9 = (void **)(v8 + 40);
      if (*(char *)(v8 + 63) < 0)
        operator delete(*v9);
      *(std::string *)v9 = v10;
    }
    else
    {
      std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &__str);
    }
    *a3 = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_228535488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 40);
  v3 = *(_OWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN15InputTranscoderL18getNearestKeyOrUnkERKNS_10PathSampleERNS_14KeyboardLayoutEbRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  double v16;
  std::string v17;
  std::string __str;

  v6 = *(unsigned __int8 *)(a1 + 72);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48));
  if (InputTranscoder::keyIsValid(a2, v6, v7))
  {
    nlp::getUTF8StringFromCFString(*(const __CFString **)(a2 + 48), &__str);
    if (*(_BYTE *)(a1 + 72))
    {
      InputTranscoder::transformNonLetterKeys((uint64_t)&__str, &v17);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v9 = (void **)(v8 + 40);
      if (*(char *)(v8 + 63) < 0)
        operator delete(*v9);
      *(std::string *)v9 = v17;
    }
    else
    {
      std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &__str);
    }
    *a3 = 1;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(_OWORD *)a2;
    v12 = *(_OWORD *)(a2 + 16);
    v13 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v10 + 88) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(v10 + 72) = v13;
    *(_OWORD *)(v10 + 56) = v12;
    *(_OWORD *)(v10 + 40) = v11;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v14 = (*(double (**)(_QWORD, uint64_t, double, double))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2, **(double **)(a1 + 56), *(double *)(*(_QWORD *)(a1 + 56) + 8));
  v15 = fabs(v14);
  if (v15 >= 2.22507386e-308)
  {
    v16 = fabs(v14 + 0.0);
    if (v15 > v16 * 2.22044605e-16 + v16 * 2.22044605e-16)
      std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(const std::string **)(a1 + 64));
  }
}

void sub_228535630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN15InputTranscoderL23getMostProbableMultiKeyERKNS_10PathSampleERNS_14KeyboardLayoutEb_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  std::string::__raw *v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v18;
  std::string::size_type v19;
  BOOL v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string __p;
  void *v24;
  std::string::size_type v25;
  unsigned __int8 v26;

  v6 = *(unsigned __int8 *)(a1 + 56);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48));
  if (!InputTranscoder::keyIsValid(a2, v6, v7))
    return;
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  nlp::getUTF8StringFromCFString(*(const __CFString **)(a2 + 48), &v24);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = (std::string *)(v8 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    v10 = *(unsigned __int8 *)(v8 + 63);
    v11 = *(_QWORD *)(v8 + 48);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    if (v11 != 14)
      goto LABEL_12;
    v12 = (std::string::__raw *)v9->__r_.__value_.__r.__words[0];
    if ((v10 & 0x80u) == 0)
      v12 = (std::string::__raw *)v9;
    v13 = v12->__words[0];
    v14 = *(std::string::size_type *)((char *)v12->__words + 6);
    if (v13 != 0x616469646E61637BLL || v14 != 0x7D72614265746164)
    {
LABEL_12:
      InputTranscoder::transformNonLetterKeys((uint64_t)&v24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_30;
    }
    v18 = v26;
    v19 = v25;
    v20 = (v26 & 0x80u) != 0;
    if ((v26 & 0x80u) == 0)
      v21 = (const std::string::value_type *)&v24;
    else
      v21 = (const std::string::value_type *)v24;
  }
  else
  {
    v18 = v26;
    v19 = v25;
    v20 = (v26 & 0x80u) != 0;
    if ((v26 & 0x80u) == 0)
      v21 = (const std::string::value_type *)&v24;
    else
      v21 = (const std::string::value_type *)v24;
  }
  if (v20)
    v22 = v19;
  else
    v22 = v18;
  std::string::append(v9, v21, v22);
LABEL_30:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 2)
    *a3 = 1;
  if ((char)v26 < 0)
    operator delete(v24);
}

void sub_2285357F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v3;
  const void *v4;
  size_t v5;
  size_t v6;

  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v6 = strlen(__s);
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(v4, v5, __s, v6);
}

uint64_t std::string::find[abi:ne180100](char **a1, char *__s)
{
  char *v3;
  uint64_t v4;
  uint64_t result;
  int64_t v6;
  char *v7;
  char *v8;
  int v9;
  void *v10;
  char *v11;

  v3 = (char *)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v3 = *a1;
    v4 = (uint64_t)a1[1];
  }
  else
  {
    v4 = *((unsigned __int8 *)a1 + 23);
  }
  result = strlen(__s);
  if (result)
  {
    v6 = result;
    v7 = &v3[v4];
    if (v4 >= result)
    {
      v9 = *__s;
      v10 = v3;
      do
      {
        if (v4 - v6 == -1)
          break;
        v11 = (char *)memchr(v10, v9, v4 - v6 + 1);
        if (!v11)
          break;
        v8 = v11;
        if (!memcmp(v11, __s, v6))
          goto LABEL_7;
        v10 = v8 + 1;
        v4 = v7 - (v8 + 1);
      }
      while (v4 >= v6);
    }
    v8 = v7;
LABEL_7:
    if (v8 == v7)
      return -1;
    else
      return v8 - v3;
  }
  return result;
}

void ___ZN15InputTranscoderL30getNearestKeyWithoutValidCheckERKNS_10PathSampleERNS_14KeyboardLayoutEb_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  void **v6;
  std::string v7;
  std::string __str;

  nlp::getUTF8StringFromCFString(*(const __CFString **)(a2 + 48), &__str);
  if (*(_BYTE *)(a1 + 40))
  {
    InputTranscoder::transformNonLetterKeys((uint64_t)&__str, &v7);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (void **)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      operator delete(*v6);
    *(std::string *)v6 = v7;
  }
  else
  {
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), &__str);
  }
  *a3 = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_228535A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F111C60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F111C60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, double, double, float, float))(*(_QWORD *)a2 + 64))(a2, **(double **)(a1 + 8), *(double *)(*(_QWORD *)(a1 + 8) + 8), **(float **)(a1 + 16), *(float *)(*(_QWORD *)(a1 + 16) + 4));
}

uint64_t std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_feature_stream_for_path(InputTranscoder::Path const&,BOOL,unsigned int,BOOL,unsigned int)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

void std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F111CF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F111CF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, double, double, float, float))(*(_QWORD *)a2 + 64))(a2, **(double **)(a1 + 8), *(double *)(*(_QWORD *)(a1 + 8) + 8), **(float **)(a1 + 16), *(float *)(*(_QWORD *)(a1 + 16) + 4));
}

uint64_t std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::input_stream_for_path(InputTranscoder::Path const&)::$_0>,CGPoint const ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

void std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_24F111D70;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24F111D70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 8))(a1 + 16, a2, *(unsigned __int8 *)(a1 + 80));
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111E08;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  return a1;
}

void std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_24F111E08;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x70uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = off_24F111E08;
  v2[1] = v3;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,InputTranscoder::PathSample,std::placeholders::__ph<1>,BOOL,std::string>::__tuple_impl((uint64_t)(v2 + 2), (__int128 *)(a1 + 16));
  return v2;
}

void sub_228535DEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = off_24F111E08;
  a2[1] = v2;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,InputTranscoder::PathSample,std::placeholders::__ph<1>,BOOL,std::string>::__tuple_impl((uint64_t)(a2 + 2), (__int128 *)(a1 + 16));
}

void std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
}

void std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 111) < 0)
    operator delete(__p[11]);
  operator delete(__p);
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 8))(a1 + 16, a2, *(unsigned __int8 *)(a1 + 80), a1 + 88);
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL,std::string const&),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL const&,std::string const&>>,std::string ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,InputTranscoder::PathSample,std::placeholders::__ph<1>,BOOL,std::string>::__tuple_impl(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v6 = (std::string *)(a1 + 72);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0>,BOOL ()(InputTranscoder::KeyboardLayout &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0>,BOOL ()(InputTranscoder::KeyboardLayout &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24F111EA0;
  return result;
}

void std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0>,BOOL ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F111EA0;
}

uint64_t std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0>,BOOL ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
}

uint64_t std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0>,BOOL ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0,std::allocator<InputTranscoder::PathKeyLayoutProcessor::key_class_for_touch_key(ITKeyInfo const&)::$_0>,BOOL ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

void std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>>,std::string ()(InputTranscoder::KeyboardLayout &)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

__n128 std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_24F111F30;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>>,std::string ()(InputTranscoder::KeyboardLayout &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24F111F30;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>>,std::string ()(InputTranscoder::KeyboardLayout &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 8))(a1 + 16, a2, *(unsigned __int8 *)(a1 + 80));
}

uint64_t std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>>,std::string ()(InputTranscoder::KeyboardLayout &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>,std::allocator<std::__bind<std::string (&)(InputTranscoder::PathSample const&,InputTranscoder::KeyboardLayout &,BOOL),InputTranscoder::PathSample const&,std::placeholders::__ph<1> const&,BOOL>>,std::string ()(InputTranscoder::KeyboardLayout &)>::target_type()
{
}

uint64_t InputTranscoder::PathResampler::is_inflection_point(InputTranscoder::PathResampler *this, unsigned int a2)
{
  uint64_t v2;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  unsigned int v15;

  if (!*((_DWORD *)this + 2))
    return 0;
  v2 = *((_QWORD *)this + 10);
  if ((*(_QWORD *)(v2 + ((unint64_t)a2 << 6) + 40) | 2) == 2)
    return 1;
  if (!a2)
    return 0;
  v4 = *(double *)this * 3.0;
  v5 = *(double *)(v2 + ((unint64_t)a2 << 6) + 32);
  if (v5 < v4)
    return 0;
  v6 = *((_QWORD *)this + 11);
  v7 = v2 == v6 ? 0.0 : *(double *)(v6 - 32);
  if (v5 + v4 > v7)
    return 0;
  if (*((_BYTE *)this + 24))
  {
    v8 = a2 - 1;
    if (a2 == 1)
    {
      v9 = (v6 - v2) >> 6;
    }
    else
    {
      v9 = (v6 - v2) >> 6;
      v10 = (double *)(v2 + (v8 << 6) + 32);
      v11 = a2 - 2;
      v12 = a2 - 1;
      while (*v10 > v5 - v4)
      {
        if (v9 > v12 && *(v10 - 2) - *(double *)(v2 + ((unint64_t)v11 << 6) + 16) > *((double *)this + 2))
          return 0;
        v10 -= 8;
        --v11;
        if (!(_DWORD)--v12)
          break;
      }
    }
    if (v9 > a2
      && *(double *)(v2 + ((unint64_t)a2 << 6) + 16) - *(double *)(v2 + (v8 << 6) + 16) > *((double *)this + 2))
    {
      return 1;
    }
    v13 = a2 + 1;
    if (v9 > v13)
    {
      v14 = v5 - v4;
      v15 = a2 + 2;
      while (*(double *)(v2 + (v13 << 6) + 32) > v14)
      {
        if (v15 != 1
          && *(double *)(v2 + (v13 << 6) + 16) - *(double *)(v2 + ((unint64_t)(v15 - 2) << 6) + 16) > *((double *)this + 2))
        {
          return 0;
        }
        v13 = v15;
        if (v9 <= v15++)
          return InputTranscoder::Path::is_curvature_local_max((InputTranscoder::PathResampler *)((char *)this + 80), a2, v4);
      }
    }
  }
  return InputTranscoder::Path::is_curvature_local_max((InputTranscoder::PathResampler *)((char *)this + 80), a2, v4);
}

unint64_t InputTranscoder::PathResampler::process_sample(void **this, unsigned int a2)
{
  int is_inflection_point;
  _BYTE *v5;
  _BYTE *v6;
  int v7;
  char *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  float64x2_t *v21;
  float v22;
  __int128 *v23;
  void **v24;
  __int128 v26[4];

  is_inflection_point = InputTranscoder::PathResampler::is_inflection_point((InputTranscoder::PathResampler *)this, a2);
  v5 = this[4];
  v6 = this[5];
  if (!a2)
  {
    v23 = (__int128 *)this[10];
    v24 = this + 4;
    goto LABEL_18;
  }
  v7 = is_inflection_point;
  v8 = (char *)this[10];
  v9 = (__int128 *)&v8[64 * (unint64_t)a2];
  v10 = (_BYTE *)this[11] - v8;
  if ((unint64_t)v10 < 0x41)
  {
LABEL_8:
    if (v10 != 64)
      goto LABEL_13;
  }
  else
  {
    v11 = 2;
    if ((unint64_t)(v10 >> 6) > 2)
      v11 = v10 >> 6;
    v12 = (uint64_t *)(v8 + 104);
    v13 = v11 - 1;
    while (1)
    {
      v14 = *v12;
      v12 += 8;
      if (v14 == 1)
        break;
      if (!--v13)
        goto LABEL_8;
    }
  }
  InputTranscoder::PathResampler::drop_non_resampled_path((InputTranscoder::PathResampler *)this, a2);
  v15 = (double *)this[5];
  if (this[4] != v15)
  {
    v16 = (double *)&v8[64 * (unint64_t)a2];
    v18 = v16[4];
    v17 = v16 + 4;
    v19 = v18;
    v20 = *(v15 - 4) + *(double *)this;
    if (v20 < v18)
    {
      v21 = (float64x2_t *)&v8[64 * (unint64_t)(a2 - 1)];
      do
      {
        v22 = (v20 - v21[2].f64[0]) / (v19 - v21[2].f64[0]);
        InputTranscoder::PathSample::lerp(v21, (uint64_t)v9, (uint64_t)v26, v22);
        InputTranscoder::Path::append(this + 4, v26);
        v20 = *((double *)this[5] - 4) + *(double *)this;
        v19 = *v17;
      }
      while (v20 < *v17);
    }
  }
LABEL_13:
  if (!v7)
  {
    if (*((_BYTE *)this + 12))
      return (unint64_t)(v6 - v5) >> 6;
    v24 = this + 4;
    v23 = v9;
LABEL_18:
    InputTranscoder::Path::append(v24, v23);
    return (unint64_t)(v6 - v5) >> 6;
  }
  InputTranscoder::Path::append(this + 4, v9);
  InputTranscoder::Path::set_sample_is_inflection_point((InputTranscoder::Path *)(this + 4), ((unint64_t)((_BYTE *)this[5] - (_BYTE *)this[4]) >> 6) - 1);
  *((char *)this[5] - 7) = 1;
  return (unint64_t)(v6 - v5) >> 6;
}

void InputTranscoder::PathResampler::drop_non_resampled_path(InputTranscoder::PathResampler *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12[4];
  __int128 v13[4];
  uint64_t v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    v14 = v2;
    v15 = v3;
    v5 = (void **)((char *)this + 80);
    v4 = *((_QWORD *)this + 10);
    v6 = v4 + ((unint64_t)a2 << 6);
    if (*(_QWORD *)(v6 + 40) == 1)
    {
      v7 = v4 + ((unint64_t)(a2 - 1) << 6);
      if (!*(_QWORD *)(v7 + 40))
      {
        v8 = *(_OWORD *)(v7 + 16);
        v13[0] = *(_OWORD *)v7;
        v13[1] = v8;
        v9 = *(_OWORD *)(v7 + 48);
        v13[2] = *(_OWORD *)(v7 + 32);
        v13[3] = v9;
        v10 = *(_OWORD *)(v6 + 16);
        v12[0] = *(_OWORD *)v6;
        v12[1] = v10;
        v11 = *(_OWORD *)(v6 + 48);
        v12[2] = *(_OWORD *)(v6 + 32);
        v12[3] = v11;
        *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
        *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
        *((_QWORD *)this + 11) = v4;
        *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
        *((_BYTE *)this + 128) = 0;
        *((_DWORD *)this + 33) = 0;
        *((_DWORD *)this + 34) = 0;
        InputTranscoder::Path::append((void **)this + 10, v13);
        InputTranscoder::Path::append(v5, v12);
      }
    }
  }
}

unint64_t InputTranscoder::PathResampler::retroactively_process_sample(InputTranscoder::PathResampler *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;

  v2 = a2;
  if (!InputTranscoder::PathResampler::is_inflection_point(this, a2))
    goto LABEL_18;
  v4 = *((_QWORD *)this + 10);
  v5 = *((_QWORD *)this + 11) - v4;
  if ((unint64_t)v5 >= 0x41)
  {
    v6 = 2;
    if ((unint64_t)(v5 >> 6) > 2)
      v6 = v5 >> 6;
    v7 = (uint64_t *)(v4 + 104);
    v8 = v6 - 1;
    do
    {
      v9 = *v7;
      v7 += 8;
      if (v9 == 1)
        goto LABEL_9;
    }
    while (--v8);
  }
  if (v5 != 64)
  {
LABEL_18:
    v20 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
    return v20 >> 6;
  }
LABEL_9:
  v10 = *((_QWORD *)this + 4);
  v11 = *((_QWORD *)this + 5);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = v4 + ((unint64_t)v2 << 6);
    v14 = v12 >> 6;
    v15 = *(double *)(v13 + 32);
    v11 = *((_QWORD *)this + 4);
    do
    {
      v16 = v14 >> 1;
      v17 = v11 + (v14 >> 1 << 6);
      v18 = *(double *)(v17 + 32);
      v19 = v17 + 64;
      v14 += ~(v14 >> 1);
      if (v18 < v15)
        v11 = v19;
      else
        v14 = v16;
    }
    while (v14);
  }
  InputTranscoder::Path::resize((InputTranscoder::PathResampler *)((char *)this + 32), (v11 - v10) >> 6);
  v20 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  v21 = *((_DWORD *)this + 33);
  for (*((_DWORD *)this + 33) = v2; v2 < v21; *((_DWORD *)this + 33) = v2)
  {
    InputTranscoder::PathResampler::process_sample((void **)this, v2);
    v2 = *((_DWORD *)this + 33) + 1;
  }
  return v20 >> 6;
}

uint64_t InputTranscoder::PathResampler::process_new_samples(InputTranscoder::PathResampler *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  unint64_t v9;
  unsigned int v10;
  double v11;
  unint64_t v12;
  double v13;
  unsigned int v14;

  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  if (v2 == v3)
    return (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 6;
  if (!*((_BYTE *)this + 24))
    goto LABEL_7;
  v4 = (unint64_t)(v3 - v2) >> 6;
  v5 = (v4 - 1);
  if ((_DWORD)v4 == 1)
    goto LABEL_8;
  if (v5 < (v3 - v2) >> 6)
    LOBYTE(v5) = *(double *)(v2 + (v5 << 6) + 16)
               - *(double *)(v2 + ((unint64_t)(v4 - 2) << 6) + 16) > *((double *)this + 2);
  else
LABEL_7:
    LOBYTE(v5) = 0;
LABEL_8:
  v7 = *((_DWORD *)this + 2);
  v8 = *(double *)(v3 - 32);
  if (v7 == 1 && (v5 & 1) == 0)
    v8 = v8 + *(double *)this * -3.0;
  v6 = (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 6;
  v9 = *((unsigned int *)this + 33);
  if (v9 < (v3 - v2) >> 6 && *(double *)(v2 + (v9 << 6) + 32) <= v8)
  {
    do
    {
      v10 = InputTranscoder::PathResampler::process_sample((void **)this, v9);
      if (v10 >= v6)
        v6 = v6;
      else
        v6 = v10;
      v9 = (*((_DWORD *)this + 33) + 1);
      *((_DWORD *)this + 33) = v9;
      v2 = *((_QWORD *)this + 10);
      v3 = *((_QWORD *)this + 11);
    }
    while (v9 < (v3 - v2) >> 6 && *(double *)(v2 + (v9 << 6) + 32) <= v8);
    v7 = *((_DWORD *)this + 2);
  }
  if (v7 == 2)
  {
    v11 = v2 == v3 ? 0.0 : *(double *)(v3 - 32);
    v12 = *((unsigned int *)this + 34);
    if (v12 < (v3 - v2) >> 6)
    {
      v13 = v11 + *(double *)this * -3.0;
      do
      {
        if (*(double *)(v2 + (v12 << 6) + 32) >= v13)
          break;
        v14 = InputTranscoder::PathResampler::retroactively_process_sample(this, v12);
        v6 = v14 >= v6 ? v6 : v14;
        v12 = (*((_DWORD *)this + 34) + 1);
        *((_DWORD *)this + 34) = v12;
        v2 = *((_QWORD *)this + 10);
      }
      while (v12 < (*((_QWORD *)this + 11) - v2) >> 6);
    }
  }
  return v6;
}

uint64_t InputTranscoder::PathResampler::append_and_resample(uint64_t a1, __int128 *a2)
{
  InputTranscoder::Path::append((void **)(a1 + 80), a2);
  InputTranscoder::PathResampler::drop_non_resampled_path((InputTranscoder::PathResampler *)a1, ((*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 6) - 1);
  return InputTranscoder::PathResampler::process_new_samples((InputTranscoder::PathResampler *)a1);
}

uint64_t InputTranscoder::PathResampler::finalize(InputTranscoder::PathResampler *this)
{
  void **v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  double v13;
  double v14;
  unint64_t v15;

  v1 = (void **)((char *)this + 32);
  v2 = (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 6;
  if (!*((_BYTE *)this + 128))
  {
    v4 = *((unsigned int *)this + 33);
    v5 = *((_QWORD *)this + 10);
    for (i = *((_QWORD *)this + 11); v4 < (i - v5) >> 6; i = *((_QWORD *)this + 11))
    {
      v7 = InputTranscoder::PathResampler::process_sample((void **)this, v4);
      if (v7 >= v2)
        v2 = v2;
      else
        v2 = v7;
      v4 = (*((_DWORD *)this + 33) + 1);
      *((_DWORD *)this + 33) = v4;
      v5 = *((_QWORD *)this + 10);
    }
    if (*((_DWORD *)this + 2) == 2)
    {
      v8 = *((unsigned int *)this + 34);
      if (v8 < (i - v5) >> 6)
      {
        do
        {
          v9 = InputTranscoder::PathResampler::retroactively_process_sample(this, v8);
          if (v9 >= v2)
            v2 = v2;
          else
            v2 = v9;
          v8 = (*((_DWORD *)this + 34) + 1);
          *((_DWORD *)this + 34) = v8;
          i = *((_QWORD *)this + 11);
        }
        while (v8 < (i - *((_QWORD *)this + 10)) >> 6);
      }
    }
    v10 = *((_QWORD *)this + 4);
    v11 = *((_QWORD *)this + 5);
    if (v10 != v11)
    {
      v13 = *(double *)(i - 64);
      v14 = *(double *)(i - 56);
      v12 = (__int128 *)(i - 64);
      if (hypot(v13 - *(double *)(v11 - 64), v14 - *(double *)(v11 - 56)) > 1.0e-10)
      {
        v15 = (unint64_t)(v11 - v10) >> 6;
        if (v2 >= v15)
          v2 = v15;
        else
          v2 = v2;
        InputTranscoder::Path::append(v1, v12);
      }
    }
    *((_BYTE *)this + 128) = 1;
  }
  return v2;
}

void InputTranscoder::PathResampler::getInflectionPoints(InputTranscoder::PathResampler *this@<X0>, _QWORD *a2@<X8>)
{
  char **v4;
  __int128 *v5;
  _OWORD *v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (char **)(a2 + 2);
  v5 = (__int128 *)*((_QWORD *)this + 4);
  v6 = operator new(0x40uLL);
  v7 = (char *)(v6 + 4);
  v8 = *v5;
  v9 = v5[1];
  v10 = v5[3];
  v6[2] = v5[2];
  v6[3] = v10;
  *v6 = v8;
  v6[1] = v9;
  a2[1] = v6 + 4;
  a2[2] = v6 + 4;
  v11 = (unsigned int *)*((_QWORD *)this + 7);
  v12 = (unsigned int *)*((_QWORD *)this + 8);
  *a2 = v6;
  if (v11 == v12)
  {
    v35 = &v5[4 * (unint64_t)(((*((_QWORD *)this + 5) - (_QWORD)v5) >> 6) - 1)];
    v34 = (char *)(v6 + 4);
  }
  else
  {
    do
    {
      v13 = *v11;
      if ((_DWORD)v13)
      {
        v14 = *((_QWORD *)this + 4);
        if (((*((_QWORD *)this + 5) - v14) >> 6) - 1 != v13)
        {
          v15 = (__int128 *)(v14 + (v13 << 6));
          if (v7 >= *v4)
          {
            v19 = (char *)*a2;
            v20 = (uint64_t)&v7[-*a2] >> 6;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 58)
              std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
            v22 = *v4 - v19;
            if (v22 >> 5 > v21)
              v21 = v22 >> 5;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFC0)
              v23 = 0x3FFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
            {
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)v4, v23);
              v19 = (char *)*a2;
              v7 = (char *)a2[1];
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[64 * v20];
            v26 = *v15;
            v27 = v15[1];
            v28 = v15[3];
            *((_OWORD *)v25 + 2) = v15[2];
            *((_OWORD *)v25 + 3) = v28;
            *(_OWORD *)v25 = v26;
            *((_OWORD *)v25 + 1) = v27;
            if (v7 == v19)
            {
              v33 = &v24[64 * v20];
            }
            else
            {
              v29 = &v24[64 * v20];
              do
              {
                v30 = *((_OWORD *)v7 - 4);
                v31 = *((_OWORD *)v7 - 3);
                v32 = *((_OWORD *)v7 - 2);
                v33 = v29 - 64;
                *(_OWORD *)(v29 - 21) = *(_OWORD *)(v7 - 21);
                *((_OWORD *)v29 - 3) = v31;
                *((_OWORD *)v29 - 2) = v32;
                *((_OWORD *)v29 - 4) = v30;
                v7 -= 64;
                v29 -= 64;
              }
              while (v7 != v19);
            }
            v7 = v25 + 64;
            *a2 = v33;
            a2[1] = v25 + 64;
            a2[2] = &v24[64 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            v16 = *v15;
            v17 = v15[1];
            v18 = v15[3];
            *((_OWORD *)v7 + 2) = v15[2];
            *((_OWORD *)v7 + 3) = v18;
            *(_OWORD *)v7 = v16;
            *((_OWORD *)v7 + 1) = v17;
            v7 += 64;
          }
          a2[1] = v7;
        }
      }
      ++v11;
    }
    while (v11 != v12);
    v34 = *v4;
    v35 = (__int128 *)(*((_QWORD *)this + 4)
                     + ((unint64_t)(((*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 6) - 1) << 6));
    if (v7 < *v4)
    {
      v36 = *v35;
      v37 = v35[1];
      v38 = v35[3];
      *((_OWORD *)v7 + 2) = v35[2];
      *((_OWORD *)v7 + 3) = v38;
      *(_OWORD *)v7 = v36;
      *((_OWORD *)v7 + 1) = v37;
      v39 = v7 + 64;
      goto LABEL_42;
    }
  }
  v40 = (char *)*a2;
  v41 = (uint64_t)&v7[-*a2] >> 6;
  v42 = v41 + 1;
  if ((unint64_t)(v41 + 1) >> 58)
    std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
  v43 = v34 - v40;
  if (v43 >> 5 > v42)
    v42 = v43 >> 5;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFC0)
    v44 = 0x3FFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
  {
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>((uint64_t)v4, v44);
    v40 = (char *)*a2;
    v7 = (char *)a2[1];
  }
  else
  {
    v45 = 0;
  }
  v46 = &v45[64 * v41];
  v47 = *v35;
  v48 = v35[1];
  v49 = v35[3];
  v50 = &v45[64 * v44];
  *((_OWORD *)v46 + 2) = v35[2];
  *((_OWORD *)v46 + 3) = v49;
  *(_OWORD *)v46 = v47;
  *((_OWORD *)v46 + 1) = v48;
  v39 = v46 + 64;
  if (v7 == v40)
  {
    v54 = v46;
  }
  else
  {
    do
    {
      v51 = *((_OWORD *)v7 - 4);
      v52 = *((_OWORD *)v7 - 3);
      v53 = *((_OWORD *)v7 - 2);
      v54 = v46 - 64;
      *(_OWORD *)(v46 - 21) = *(_OWORD *)(v7 - 21);
      *((_OWORD *)v46 - 3) = v52;
      *((_OWORD *)v46 - 2) = v53;
      *((_OWORD *)v46 - 4) = v51;
      v7 -= 64;
      v46 -= 64;
    }
    while (v7 != v40);
  }
  *a2 = v54;
  a2[1] = v39;
  a2[2] = v50;
  if (v40)
    operator delete(v40);
LABEL_42:
  a2[1] = v39;
}

void sub_228536B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void InputTranscoder::getTouchUpPoints(InputTranscoder *this@<X0>, void **a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (uint64_t)(a2 + 2);
  v6 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if ((unint64_t)v6 >= 0x80)
  {
    if (v6 < 0)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>(v5, (unint64_t)(v6 >> 6) >> 1);
    v10 = (char *)*a2;
    v9 = (char *)a2[1];
    v11 = v7;
    if (v9 != *a2)
    {
      do
      {
        v12 = *((_OWORD *)v9 - 4);
        v13 = *((_OWORD *)v9 - 3);
        v14 = *((_OWORD *)v9 - 2);
        *(_OWORD *)(v11 - 21) = *(_OWORD *)(v9 - 21);
        *((_OWORD *)v11 - 3) = v13;
        *((_OWORD *)v11 - 2) = v14;
        *((_OWORD *)v11 - 4) = v12;
        v11 -= 64;
        v9 -= 64;
      }
      while (v9 != v10);
      v9 = v10;
    }
    *a2 = v11;
    a2[1] = v7;
    a2[2] = &v7[64 * v8];
    if (v9)
      operator delete(v9);
  }
  v16 = *(_QWORD *)this;
  v15 = *((_QWORD *)this + 1);
  if (v15 != *(_QWORD *)this)
  {
    v17 = 0;
    do
    {
      v18 = (__int128 *)(v16 + (v17 << 6));
      if (*((_QWORD *)v18 + 5) == 2)
      {
        v20 = a2[1];
        v19 = (unint64_t)a2[2];
        if ((unint64_t)v20 >= v19)
        {
          v25 = *a2;
          v26 = ((char *)v20 - (_BYTE *)*a2) >> 6;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 58)
            std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
          v28 = v19 - (_QWORD)v25;
          if (v28 >> 5 > v27)
            v27 = v28 >> 5;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFC0)
            v29 = 0x3FFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>(v5, v29);
            v25 = *a2;
            v20 = a2[1];
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[64 * v26];
          v32 = *v18;
          v33 = v18[1];
          v34 = v18[3];
          *((_OWORD *)v31 + 2) = v18[2];
          *((_OWORD *)v31 + 3) = v34;
          *(_OWORD *)v31 = v32;
          *((_OWORD *)v31 + 1) = v33;
          if (v20 == v25)
          {
            v39 = &v30[64 * v26];
          }
          else
          {
            v35 = &v30[64 * v26];
            do
            {
              v36 = *(v20 - 4);
              v37 = *(v20 - 3);
              v38 = *(v20 - 2);
              v39 = v35 - 64;
              *(_OWORD *)(v35 - 21) = *(_OWORD *)((char *)v20 - 21);
              *((_OWORD *)v35 - 3) = v37;
              *((_OWORD *)v35 - 2) = v38;
              *((_OWORD *)v35 - 4) = v36;
              v20 -= 4;
              v35 -= 64;
            }
            while (v20 != v25);
          }
          v24 = v31 + 64;
          *a2 = v39;
          a2[1] = v31 + 64;
          a2[2] = &v30[64 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          v21 = *v18;
          v22 = v18[1];
          v23 = v18[3];
          v20[2] = v18[2];
          v20[3] = v23;
          *v20 = v21;
          v20[1] = v22;
          v24 = v20 + 4;
        }
        a2[1] = v24;
        v16 = *(_QWORD *)this;
        v15 = *((_QWORD *)this + 1);
      }
      ++v17;
    }
    while (v17 < (v15 - v16) >> 6);
  }
}

void sub_228536DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void InputTranscoder::PathResampler::pop_last_path(InputTranscoder::PathResampler *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  BOOL v9;

  v2 = (_QWORD *)*((_QWORD *)this + 10);
  v1 = (_QWORD *)*((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  v4 = *(_OWORD *)((char *)this + 104);
  v5 = *((_QWORD *)this + 15);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 128) = 0;
  *((_DWORD *)this + 33) = 0;
  *((_DWORD *)this + 34) = 0;
  if (v2 == v1)
  {
    if ((_QWORD)v4)
      operator delete((void *)v4);
    if (v2)
      operator delete(v2);
  }
  else
  {
    while (v1 != v2)
    {
      v6 = (char *)(v1 - 8);
      v7 = *(v1 - 3);
      v8 = *((unsigned __int8 *)v1 - 8);
      if (v7)
        v9 = 0;
      else
        v9 = v8 == 0;
      v1 = v6;
      if (v9)
        goto LABEL_14;
    }
    v6 = (char *)v2;
LABEL_14:
    *((_QWORD *)this + 10) = v2;
    *((_QWORD *)this + 11) = v6;
    *((_QWORD *)this + 12) = v3;
    *(_OWORD *)((char *)this + 104) = v4;
    *((_QWORD *)this + 15) = v5;
  }
}

uint64_t InputTranscoder::createMRLModel(uint64_t a1)
{
  const __CFAllocator *v1;
  int v2;
  const UInt8 *v3;
  CFIndex v4;
  CFURLRef v5;
  __CFDictionary *Mutable;
  uint64_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = (const UInt8 *)a1;
  else
    v3 = *(const UInt8 **)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x24BDBD240], v3, v4, 0);
  Mutable = CFDictionaryCreateMutable(v1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE68F98], v5);
  v7 = MRLNeuralNetworkCreate();
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  return v7;
}

void sub_228536FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,const void *a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      nlp::CFScopedPtr<__CFError *>::reset(&a23, 0);
      nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v25 - 48), 0);
      nlp::CFScopedPtr<__CFURL const*>::reset((const void **)(v25 - 40), 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t InputTranscoder::MontrealModel::recognize(_QWORD *a1, unsigned int *a2, unint64_t a3)
{
  os_signpost_id_t v4;
  NSObject *v5;
  _BYTE *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  unsigned int *v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int *v20;
  float *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  float *v25;
  float *v26;
  unsigned int v27;
  uint64_t Output;
  uint64_t v29;
  NSObject *v31;
  void *__p[2];
  char v33;
  CFErrorRef err;
  unsigned int *ptr;
  unint64_t v36;

  ptr = a2;
  v36 = a3;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v4 = os_signpost_id_make_with_pointer((os_log_t)_nlpSignpostLog::log, &ptr);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MontrealRecognition", (const char *)&unk_228544982, (uint8_t *)__p, 2u);
    }
  }
  v6 = (_BYTE *)a1[1];
  v7 = ptr;
  v8 = v36;
  v9 = a1[3];
  if (v36 <= (v9 - (uint64_t)v6) >> 2)
  {
    v13 = (_BYTE *)a1[2];
    v14 = (v13 - v6) >> 2;
    if (v14 >= v36)
    {
      if (v36)
      {
        v24 = 4 * v36;
        v25 = (float *)a1[1];
        v26 = v25;
        do
        {
          v27 = *v7++;
          *v26++ = (float)v27;
          ++v25;
          v24 -= 4;
        }
        while (v24);
      }
      else
      {
        v25 = (float *)a1[1];
      }
      v12 = (char *)v25 - v6;
      v13 = v6;
    }
    else
    {
      if (v13 != v6)
      {
        v15 = 4 * v14;
        v16 = (float *)a1[1];
        v17 = ptr;
        do
        {
          v18 = *v17++;
          *v16++ = (float)v18;
          v15 -= 4;
        }
        while (v15);
      }
      v19 = v13;
      if (v14 != v8)
      {
        v20 = &v7[v14];
        v19 = v13;
        v21 = (float *)v13;
        v22 = 4 * v8 - 4 * v14;
        do
        {
          v23 = *v20++;
          *v21++ = (float)v23;
          v19 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      v12 = v19 - v13;
    }
  }
  else
  {
    if (v6)
    {
      a1[2] = v6;
      operator delete(v6);
      v9 = 0;
      a1[1] = 0;
      a1[2] = 0;
      a1[3] = 0;
    }
    if (v8 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 1;
    if (v9 >> 1 <= v8)
      v10 = v8;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<float>::__vallocate[abi:ne180100](a1 + 1, v11);
    v12 = 0;
    v13 = (_BYTE *)a1[2];
    do
    {
      *(float *)&v13[v12] = (float)*(unsigned int *)((char *)v7 + v12);
      v12 += 4;
    }
    while (4 * v8 != v12);
  }
  a1[2] = &v13[v12];
  err = 0;
  MRLNeuralNetworkSetInput();
  if (err)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "MRLNeuralNetworkSetInput");
    InputTranscoder::logMontrealError((uint64_t *)__p, err);
LABEL_40:
    if (v33 < 0)
      operator delete(__p[0]);
    return 0;
  }
  MRLNeuralNetworkPredict();
  if (err)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "MRLNeuralNetworkPredict");
    InputTranscoder::logMontrealError((uint64_t *)__p, err);
    goto LABEL_40;
  }
  Output = MRLNeuralNetworkGetOutput();
  if (err)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "MRLNeuralNetworkGetOutput");
    InputTranscoder::logMontrealError((uint64_t *)__p, err);
    goto LABEL_40;
  }
  v29 = Output;
  MRLNeuralNetworkGetOutputDimension();
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v31 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v31, OS_SIGNPOST_INTERVAL_END, v4, "MontrealRecognition", (const char *)&unk_228544982, (uint8_t *)__p, 2u);
    }
  }
  return v29;
}

void sub_228537428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::logMontrealError(uint64_t *a1, CFErrorRef err)
{
  CFStringRef v4;
  NSObject *v5;
  uint64_t *v6;
  uint8_t buf[4];
  uint64_t *v8;
  __int16 v9;
  CFStringRef v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = CFErrorCopyDescription(err);
  if (_nlpDefaultLog::token != -1)
    dispatch_once(&_nlpDefaultLog::token, &__block_literal_global_2);
  v5 = _nlpDefaultLog::log;
  if (!os_log_type_enabled((os_log_t)_nlpDefaultLog::log, OS_LOG_TYPE_ERROR))
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*((char *)a1 + 23) >= 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  *(_DWORD *)buf = 136315394;
  v8 = v6;
  v9 = 2112;
  v10 = v4;
  _os_log_error_impl(&dword_228515000, v5, OS_LOG_TYPE_ERROR, "%s() failed: %@", buf, 0x16u);
  if (v4)
LABEL_5:
    CFRelease(v4);
LABEL_6:
  if (err)
    CFRelease(err);
}

void sub_228537568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::MontrealModel::recognize(_QWORD *a1, char *a2, unint64_t a3)
{
  os_signpost_id_t v4;
  NSObject *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  const void *v16;
  uint64_t Output;
  uint64_t v18;
  NSObject *v20;
  uint8_t buf[8];
  char v22;
  const void *v23;
  CFErrorRef err;
  char *ptr;
  unint64_t v26;

  ptr = a2;
  v26 = a3;
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  v4 = os_signpost_id_make_with_pointer((os_log_t)_nlpSignpostLog::log, &ptr);
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v5 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "MontrealRecognition", (const char *)&unk_228544982, buf, 2u);
    }
  }
  v6 = (char *)a1[1];
  v8 = ptr;
  v7 = v26;
  v9 = a1[3];
  if (v26 <= (v9 - (uint64_t)v6) >> 2)
  {
    v12 = (void **)(a1 + 2);
    v14 = (_BYTE *)a1[2];
    v15 = (v14 - v6) >> 2;
    if (v15 >= v26)
    {
      if (v26)
      {
        v13 = 4 * v26;
        memmove(v6, ptr, 4 * v26);
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      if (v14 != v6)
      {
        memmove(v6, ptr, v14 - v6);
        v6 = (char *)*v12;
      }
      v13 = 4 * v7 - 4 * v15;
      if (v15 != v7)
        memmove(v6, &v8[4 * v15], 4 * v7 - 4 * v15);
    }
  }
  else
  {
    if (v6)
    {
      a1[2] = v6;
      operator delete(v6);
      v9 = 0;
      a1[1] = 0;
      a1[2] = 0;
      a1[3] = 0;
    }
    if (v7 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 1;
    if (v9 >> 1 <= v7)
      v10 = v7;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<float>::__vallocate[abi:ne180100](a1 + 1, v11);
    v12 = (void **)(a1 + 2);
    v6 = (char *)a1[2];
    v13 = 4 * v7;
    memmove(v6, v8, 4 * v7);
  }
  *v12 = &v6[v13];
  err = 0;
  v16 = (const void *)MRLNeuralNetworkTensorCreate();
  v23 = v16;
  MRLNeuralNetworkTensorAppendData();
  MRLNeuralNetworkSetInputTensor();
  if (err)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "MRLNeuralNetworkSetInput");
    InputTranscoder::logMontrealError((uint64_t *)buf, err);
LABEL_33:
    if (v22 < 0)
      operator delete(*(void **)buf);
    v18 = 0;
    goto LABEL_36;
  }
  MRLNeuralNetworkPredict();
  if (err)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "MRLNeuralNetworkPredict");
    InputTranscoder::logMontrealError((uint64_t *)buf, err);
    goto LABEL_33;
  }
  Output = MRLNeuralNetworkGetOutput();
  if (err)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "MRLNeuralNetworkGetOutput");
    InputTranscoder::logMontrealError((uint64_t *)buf, err);
    goto LABEL_33;
  }
  v18 = Output;
  MRLNeuralNetworkGetOutputDimension();
  if (_nlpSignpostLog::token != -1)
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_2);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v20 = _nlpSignpostLog::log;
    if (os_signpost_enabled((os_log_t)_nlpSignpostLog::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_228515000, v20, OS_SIGNPOST_INTERVAL_END, v4, "MontrealRecognition", (const char *)&unk_228544982, buf, 2u);
    }
  }
LABEL_36:
  if (v16)
    CFRelease(v16);
  return v18;
}

void sub_228537950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, const void *a20)
{
  nlp::CFScopedPtr<MontrealNeuralNetworkTensor *>::reset(&a20);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<MontrealNeuralNetworkTensor *>::reset(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

std::string *InputTranscoder::DecoderImpl::DecoderImpl(std::string *a1, uint64_t a2, std::string::size_type *a3, uint64_t a4)
{
  std::string *v7;
  std::string::size_type v8;
  unint64_t *v9;
  unint64_t v10;

  v7 = InputTranscoder::CTCDecoder::CTCDecoder(a1, a2 + 104, a4);
  v8 = a3[1];
  v7[13].__r_.__value_.__l.__size_ = *a3;
  v7[13].__r_.__value_.__r.__words[2] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[14].__r_.__value_.__r.__words[0] = InputTranscoder::createMRLModel(a2);
  a1[14].__r_.__value_.__l.__size_ = 0;
  a1[14].__r_.__value_.__r.__words[2] = 0;
  a1[15].__r_.__value_.__r.__words[0] = 0;
  return a1;
}

void sub_228537A3C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  std::shared_ptr<InputTranscoder::TranscoderMediator>::~shared_ptr[abi:ne180100](v2);
  InputTranscoder::CTCDecoder::~CTCDecoder(v1);
  _Unwind_Resume(a1);
}

void InputTranscoder::DecoderImpl::enumerateCandidates(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  const float *v8;
  const float *OutputDimension;
  char *v10;
  char *v11;
  double v12;
  int *v13;
  int *v14;
  std::vector<unsigned int>::pointer begin;
  uint64_t v16;
  float v17;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::vector<unsigned int> v26;
  unsigned __int8 v27;
  char *v28[3];
  int v29;

  v8 = (const float *)InputTranscoder::MontrealModel::recognize((_QWORD *)(a1 + 336), a2, a3);
  OutputDimension = (const float *)MRLNeuralNetworkGetOutputDimension();
  InputTranscoder::CTCDecoder::decode((InputTranscoder::CTCDecoder *)a1, v8, OutputDimension, a3, v28);
  v10 = v28[0];
  v11 = v28[1];
  while (v10 != v11)
  {
    v27 = 0;
    v12 = exp(*((long double *)v10 + 3));
    std::vector<unsigned int>::vector(&v26, (uint64_t)(*((_QWORD *)v10 + 1) - *(_QWORD *)v10) >> 2);
    v13 = *(int **)v10;
    v14 = (int *)*((_QWORD *)v10 + 1);
    if (*(int **)v10 != v14)
    {
      begin = v26.__begin_;
      do
      {
        v29 = *v13;
        *begin++ = *(_DWORD *)(*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320), &v29);
        ++v13;
      }
      while (v13 != v14);
    }
    v16 = operator new();
    v17 = v12;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)v16 = 0u;
    *(_QWORD *)(v16 + 56) = 0;
    *(float *)(v16 + 48) = v17;
    v19 = v26.__begin_;
    end = v26.__end_;
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 72) = 0;
    v20 = (char *)end - (char *)v19;
    if (end != v19)
    {
      std::vector<float>::__vallocate[abi:ne180100]((_QWORD *)(v16 + 56), v20 >> 2);
      v21 = *(char **)(v16 + 64);
      memmove(v21, v19, v20);
      *(_QWORD *)(v16 + 64) = &v21[4 * (v20 >> 2)];
    }
    *(_WORD *)(v16 + 80) = 0;
    *(_BYTE *)(v16 + 82) = 0;
    *(_DWORD *)(v16 + 84) = 0;
    *(_BYTE *)(v16 + 88) = 0;
    *(_QWORD *)(v16 + 92) = 0;
    *(_QWORD *)(v16 + 108) = 0;
    *(_QWORD *)(v16 + 100) = 0;
    *(_DWORD *)(v16 + 116) = 0;
    v25 = v16;
    v22 = *(_QWORD *)(a5 + 24);
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, unsigned __int8 *))(*(_QWORD *)v22 + 48))(v22, &v25, &v27);
    v23 = v25;
    v25 = 0;
    if (v23)
      std::default_delete<InputTranscoder::CandidateImpl>::operator()[abi:ne180100]((uint64_t)&v25, v23);
    v24 = v27;
    if (v26.__begin_)
    {
      v26.__end_ = v26.__begin_;
      operator delete(v26.__begin_);
    }
    if (v24)
      break;
    v10 += 32;
  }
  v26.__begin_ = (std::vector<unsigned int>::pointer)v28;
  std::vector<InputTranscoder::CTCOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_228537C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)(v15 + 56);
  if (v17)
  {
    *(_QWORD *)(v15 + 64) = v17;
    operator delete(v17);
  }
  if (*(char *)(v15 + 47) < 0)
    operator delete(*(void **)(v15 + 24));
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  MEMORY[0x22E2B18DC](v15, 0x1012C40652C33EFLL);
  if (__p)
  {
    a12 = __p;
    operator delete(__p);
  }
  __p = &a15;
  std::vector<InputTranscoder::CTCOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_228537D44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::KeyboardLayoutImpl::KeyboardLayoutImpl(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  double *BaseLayoutInfoAssorted;
  uint64_t v9;
  long double v10;
  long double v11;
  _QWORD *v12;

  *(_QWORD *)a1 = &off_24F111FB8;
  *(_BYTE *)(a1 + 8) = 1;
  BaseLayoutInfoAssorted = (double *)InputTranscoder::getBaseLayoutInfoAssorted(a4);
  *(double *)(a1 + 16) = InputTranscoder::calculateFrame((uint64_t)a2, a3, BaseLayoutInfoAssorted, *(unsigned __int8 *)(a1 + 8));
  *(_QWORD *)(a1 + 24) = v9;
  *(long double *)(a1 + 32) = v10;
  *(long double *)(a1 + 40) = v11;
  *(long double *)(a1 + 48) = hypot(v10, v11);
  *(_QWORD *)(a1 + 56) = InputTranscoder::getBaseLayoutInfoAssorted(a4);
  *(_QWORD *)(a1 + 64) = InputTranscoder::getBaseLayoutInfoAssorted(a4) + 48;
  v12 = (_QWORD *)(a1 + 72);
  if (*(_BYTE *)(a1 + 8))
  {
    *v12 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *v12 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    std::vector<ITKeyInfo>::__init_with_size[abi:ne180100]<std::__wrap_iter<ITKeyInfo const*>,std::__wrap_iter<ITKeyInfo const*>>(v12, a2, (uint64_t)a2 + 56 * a3, 0x6DB6DB6DB6DB6DB7 * ((56 * a3) >> 3));
  }
  return a1;
}

double InputTranscoder::calculateFrame(uint64_t a1, uint64_t a2, double *a3, int a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  double height;
  double width;
  CGFloat y;
  double x;
  unsigned int CharacterAtIndex;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t ***v17;
  uint64_t **i;
  unint64_t v19;
  CGRect v21;
  CGRect v22;

  if (!a2)
    return a3[6];
  v6 = a1;
  v7 = 0;
  v8 = a1 + 56 * a2;
  width = *(double *)(MEMORY[0x24BDBF070] + 16);
  height = *(double *)(MEMORY[0x24BDBF070] + 24);
  x = *MEMORY[0x24BDBF070];
  y = *(double *)(MEMORY[0x24BDBF070] + 8);
  do
  {
    if (a4)
    {
      if (CFStringGetLength(*(CFStringRef *)(v6 + 48)) == 1)
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(*(CFStringRef *)(v6 + 48), 0);
        v14 = *((_QWORD *)a3 + 11);
        if (v14)
        {
          v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
          v15.i16[0] = vaddlv_u8(v15);
          if (v15.u32[0] > 1uLL)
          {
            v16 = CharacterAtIndex;
            if (v14 <= CharacterAtIndex)
              v16 = CharacterAtIndex % v14;
          }
          else
          {
            v16 = ((_DWORD)v14 - 1) & CharacterAtIndex;
          }
          v17 = *(uint64_t ****)(*((_QWORD *)a3 + 10) + 8 * v16);
          if (v17)
          {
            for (i = *v17; i; i = (uint64_t **)*i)
            {
              v19 = (unint64_t)i[1];
              if (v19 == CharacterAtIndex)
              {
                if (*((unsigned __int16 *)i + 8) == CharacterAtIndex)
                  goto LABEL_22;
              }
              else
              {
                if (v15.u32[0] > 1uLL)
                {
                  if (v19 >= v14)
                    v19 %= v14;
                }
                else
                {
                  v19 &= v14 - 1;
                }
                if (v19 != v16)
                  break;
              }
            }
          }
        }
      }
    }
    else
    {
LABEL_22:
      ++v7;
      v21.origin.x = x;
      v21.origin.y = y;
      v21.size.width = width;
      v21.size.height = height;
      v22 = CGRectUnion(v21, *(CGRect *)(v6 + 16));
      x = v22.origin.x;
      y = v22.origin.y;
      width = v22.size.width;
      height = v22.size.height;
    }
    v6 += 56;
  }
  while (v6 != v8);
  if (!v7 || width == 0.0 || height == 0.0)
    return a3[6];
  return x;
}

uint64_t InputTranscoder::getBaseLayoutInfoAssorted(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unint64_t v14;
  int v15;
  const UInt8 *v16;
  CFIndex v17;
  nlp *v18;
  __CFError **v19;
  __CFError **v20;
  unint64_t v21;
  nlp *v22;
  const __CFDictionary *DictionaryWithContentsOfURL;
  const __CFArray *Required;
  CFIndex Count;
  char *v26;
  CFIndex v27;
  const __CFDictionary *ValueAtIndex;
  const void *v29;
  const __CFDictionary *v30;
  const __CFNumber *v31;
  float v32;
  const __CFNumber *v33;
  float v34;
  const __CFNumber *v35;
  float v36;
  const __CFNumber *v37;
  float v38;
  CFTypeRef v39;
  CFTypeRef v40;
  const void **v41;
  _QWORD *v42;
  const void **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  const void **v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat MidX;
  CGFloat MidY;
  uint64_t v57;
  CGFloat *v58;
  CGFloat y;
  CGFloat x;
  CGFloat width;
  CGFloat height;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  CFStringRef *v67;
  CFStringRef *v68;
  void **v69;
  _QWORD *v70;
  unsigned int CharacterAtIndex;
  __int16 v72;
  unint64_t v73;
  unint64_t v74;
  uint8x8_t v75;
  uint64_t ***v76;
  uint64_t **i;
  unint64_t v78;
  _QWORD *v79;
  float v80;
  float v81;
  _BOOL8 v82;
  unint64_t v83;
  unint64_t v84;
  int8x8_t prime;
  void *v86;
  void *v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint8x8_t v91;
  unint64_t v92;
  uint8x8_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint8x8_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  float v111;
  _BOOL8 v112;
  unint64_t v113;
  unint64_t v114;
  size_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint8x8_t v122;
  unint64_t v123;
  _QWORD **v124;
  _QWORD *j;
  unint64_t v126;
  std::string *v127;
  float v128;
  _BOOL8 v129;
  unint64_t v130;
  unint64_t v131;
  size_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *exception;
  nlp *v139;
  const __CFDictionary *cf;
  uint64_t v141;
  __int128 v142;
  char *v143;
  const __CFDictionary *v144;
  nlp *v145;
  void **v146;
  void *__p;
  void *v148[2];
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    xmmword_253F89F30 = 0u;
    *(_OWORD *)&qword_253F89F40 = 0u;
    dword_253F89F50 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_2);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_253F89F28);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_253F89F28))
  {
    qword_253F89F58 = 850045863;
    unk_253F89F60 = 0u;
    unk_253F89F70 = 0u;
    unk_253F89F80 = 0u;
    qword_253F89F90 = 0;
    __cxa_guard_release(&qword_253F89F28);
  }
  std::mutex::lock((std::mutex *)&qword_253F89F58);
  v141 = a1;
  v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253F89F48, a1);
  v7 = *((_QWORD *)&xmmword_253F89F30 + 1);
  if (*((_QWORD *)&xmmword_253F89F30 + 1))
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253F89F30 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *((_QWORD *)&xmmword_253F89F30 + 1))
        v11 = v6 % *((_QWORD *)&xmmword_253F89F30 + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&xmmword_253F89F30 + 1) - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(xmmword_253F89F30 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v1 = *((_QWORD *)&xmmword_253F89F30 + 1) - 1;
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253F89F50, v13 + 16, (unsigned __int8 *)a1) & 1) != 0)goto LABEL_192;
          }
          else
          {
            if (v10 > 1)
            {
              if (v14 >= v7)
                v14 %= v7;
            }
            else
            {
              v14 &= v1;
            }
            if (v14 != v11)
              break;
          }
          v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = *(char *)(a1 + 23);
  if (v15 >= 0)
    v16 = (const UInt8 *)a1;
  else
    v16 = *(const UInt8 **)a1;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 23);
  else
    v17 = *(_QWORD *)(a1 + 8);
  v18 = CFURLCreateFromFileSystemRepresentation(0, v16, v17, 0);
  v21 = 0x253F89000uLL;
  v22 = v18;
  v145 = v18;
  if (!v18)
    goto LABEL_237;
  DictionaryWithContentsOfURL = (const __CFDictionary *)nlp::createDictionaryWithContentsOfURL(v18, 0, v19, v20);
  v144 = DictionaryWithContentsOfURL;
  if (DictionaryWithContentsOfURL)
  {
    cf = DictionaryWithContentsOfURL;
    Required = (const __CFArray *)InputTranscoder::getRequiredCFType<__CFArray const*>(DictionaryWithContentsOfURL, CFSTR("keys"));
    Count = CFArrayGetCount(Required);
    if (Count)
    {
      v139 = v22;
      __p = 0;
      v148[0] = 0;
      v148[1] = 0;
      std::vector<ITKeyInfo>::__vallocate[abi:ne180100](&__p, Count);
      v26 = (char *)v148[0];
      bzero(v148[0], 56 * ((56 * Count - 56) / 0x38uLL) + 56);
      v27 = 0;
      v148[0] = &v26[56 * ((56 * Count - 56) / 0x38uLL) + 56];
      v142 = 0uLL;
      v143 = 0;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Required, v27);
        v29 = InputTranscoder::getRequiredCFType<__CFString const*>(ValueAtIndex, CFSTR("string"));
        v30 = (const __CFDictionary *)InputTranscoder::getRequiredCFType<__CFDictionary const*>(ValueAtIndex, CFSTR("frame"));
        v31 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(v30, CFSTR("x"));
        v32 = InputTranscoder::convert<float>(v31);
        v33 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(v30, CFSTR("y"));
        v34 = InputTranscoder::convert<float>(v33);
        v35 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(v30, CFSTR("width"));
        v36 = InputTranscoder::convert<float>(v35);
        v37 = (const __CFNumber *)InputTranscoder::getRequiredCFType<__CFNumber const*>(v30, CFSTR("height"));
        v38 = InputTranscoder::convert<float>(v37);
        v39 = CFRetain(v29);
        v40 = v39;
        v41 = (const void **)*((_QWORD *)&v142 + 1);
        if (*((_QWORD *)&v142 + 1) >= (unint64_t)v143)
        {
          v43 = (const void **)v142;
          v44 = (uint64_t)(*((_QWORD *)&v142 + 1) - v142) >> 3;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 61)
            std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
          v46 = (uint64_t)&v143[-v142];
          if ((uint64_t)&v143[-v142] >> 2 > v45)
            v45 = v46 >> 2;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v2 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v2 = v45;
          if (v2)
          {
            if (v2 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v47 = (char *)operator new(8 * v2);
          }
          else
          {
            v47 = 0;
          }
          v48 = &v47[8 * v44];
          *(_QWORD *)v48 = v40;
          v42 = v48 + 8;
          if (v41 == v43)
          {
            *(_QWORD *)&v142 = v48;
            *((_QWORD *)&v142 + 1) = v48 + 8;
            v143 = &v47[8 * v2];
          }
          else
          {
            do
            {
              v49 = (uint64_t)*--v41;
              *v41 = 0;
              *((_QWORD *)v48 - 1) = v49;
              v48 -= 8;
            }
            while (v41 != v43);
            v50 = (const void **)*((_QWORD *)&v142 + 1);
            v41 = (const void **)v142;
            *(_QWORD *)&v142 = v48;
            *((_QWORD *)&v142 + 1) = v42;
            v143 = &v47[8 * v2];
            while (v50 != v41)
              nlp::CFScopedPtr<__CFString const*>::reset(--v50, 0);
          }
          if (v41)
            operator delete(v41);
        }
        else
        {
          **((_QWORD **)&v142 + 1) = v39;
          v42 = v41 + 1;
        }
        v51 = v32;
        v52 = v34;
        v53 = v36;
        *((_QWORD *)&v142 + 1) = v42;
        v54 = v38;
        v149.origin.x = v51;
        v149.origin.y = v52;
        v149.size.width = v53;
        v149.size.height = v54;
        MidX = CGRectGetMidX(v149);
        v150.origin.x = v51;
        v150.origin.y = v52;
        v150.size.width = v53;
        v150.size.height = v54;
        MidY = CGRectGetMidY(v150);
        v57 = *(v42 - 1);
        v58 = (CGFloat *)((char *)__p + 56 * v27);
        *v58 = MidX;
        v58[1] = MidY;
        v58[2] = v51;
        v58[3] = v52;
        v58[4] = v53;
        v58[5] = v54;
        *((_QWORD *)v58 + 6) = v57;
        ++v27;
      }
      while (v27 != Count);
      x = *MEMORY[0x24BDBF070];
      y = *(double *)(MEMORY[0x24BDBF070] + 8);
      width = *(double *)(MEMORY[0x24BDBF070] + 16);
      height = *(double *)(MEMORY[0x24BDBF070] + 24);
      v63 = (char *)__p;
      v64 = (char *)v148[0];
      while (v63 != v64)
      {
        if (CFStringGetLength(*((CFStringRef *)v63 + 6)) <= 1)
        {
          v151.origin.x = x;
          v151.origin.y = y;
          v151.size.width = width;
          v151.size.height = height;
          v152 = CGRectUnion(v151, *(CGRect *)(v63 + 16));
          x = v152.origin.x;
          y = v152.origin.y;
          width = v152.size.width;
          height = v152.size.height;
        }
        v63 += 56;
      }
      v65 = operator new();
      v66 = v65;
      v67 = (CFStringRef *)__p;
      *(_QWORD *)v65 = __p;
      v68 = (CFStringRef *)v148[0];
      *(_OWORD *)(v65 + 8) = *(_OWORD *)v148;
      v148[0] = 0;
      v148[1] = 0;
      __p = 0;
      *(_OWORD *)(v65 + 24) = v142;
      *(_QWORD *)(v65 + 40) = v143;
      v142 = 0uLL;
      v143 = 0;
      *(CGFloat *)(v65 + 48) = x;
      *(CGFloat *)(v65 + 56) = y;
      *(_OWORD *)(v65 + 80) = 0u;
      v69 = (void **)(v65 + 80);
      *(CGFloat *)(v65 + 64) = width;
      *(CGFloat *)(v65 + 72) = height;
      *(_DWORD *)(v65 + 112) = 1065353216;
      v1 = (uint64_t)v68;
      *(_OWORD *)(v65 + 96) = 0u;
      if (v67 != v68)
      {
        v70 = (_QWORD *)(v65 + 96);
        while (CFStringGetLength(v67[6]) > 1)
        {
LABEL_131:
          v67 += 7;
          if (v67 == (CFStringRef *)v1)
            goto LABEL_142;
        }
        CharacterAtIndex = CFStringGetCharacterAtIndex(v67[6], 0);
        v72 = CharacterAtIndex;
        v73 = CharacterAtIndex;
        v74 = *(_QWORD *)(v66 + 88);
        if (v74)
        {
          v75 = (uint8x8_t)vcnt_s8((int8x8_t)v74);
          v75.i16[0] = vaddlv_u8(v75);
          if (v75.u32[0] > 1uLL)
          {
            v2 = CharacterAtIndex;
            if (v74 <= CharacterAtIndex)
              v2 = CharacterAtIndex % v74;
          }
          else
          {
            v2 = ((_DWORD)v74 - 1) & CharacterAtIndex;
          }
          v76 = (uint64_t ***)*((_QWORD *)*v69 + v2);
          if (v76)
          {
            for (i = *v76; i; i = (uint64_t **)*i)
            {
              v78 = (unint64_t)i[1];
              if (v78 == CharacterAtIndex)
              {
                if (*((unsigned __int16 *)i + 8) == CharacterAtIndex)
                  goto LABEL_131;
              }
              else
              {
                if (v75.u32[0] > 1uLL)
                {
                  if (v78 >= v74)
                    v78 %= v74;
                }
                else
                {
                  v78 &= v74 - 1;
                }
                if (v78 != v2)
                  break;
              }
            }
          }
        }
        v79 = operator new(0x18uLL);
        *v79 = 0;
        v79[1] = v73;
        *((_WORD *)v79 + 8) = v72;
        v80 = (float)(unint64_t)(*(_QWORD *)(v66 + 104) + 1);
        v81 = *(float *)(v66 + 112);
        if (v74 && (float)(v81 * (float)v74) >= v80)
        {
          v73 = v2;
          goto LABEL_121;
        }
        v82 = (v74 & (v74 - 1)) != 0;
        if (v74 < 3)
          v82 = 1;
        v83 = v82 | (2 * v74);
        v84 = vcvtps_u32_f32(v80 / v81);
        if (v83 <= v84)
          prime = (int8x8_t)v84;
        else
          prime = (int8x8_t)v83;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v74 = *(_QWORD *)(v66 + 88);
        }
        if (*(_QWORD *)&prime <= v74)
        {
          if (*(_QWORD *)&prime >= v74)
            goto LABEL_117;
          v92 = vcvtps_u32_f32((float)*(unint64_t *)(v66 + 104) / *(float *)(v66 + 112));
          if (v74 < 3 || (v93 = (uint8x8_t)vcnt_s8((int8x8_t)v74), v93.i16[0] = vaddlv_u8(v93), v93.u32[0] > 1uLL))
          {
            v92 = std::__next_prime(v92);
          }
          else
          {
            v94 = 1 << -(char)__clz(v92 - 1);
            if (v92 >= 2)
              v92 = v94;
          }
          if (*(_QWORD *)&prime <= v92)
            prime = (int8x8_t)v92;
          if (*(_QWORD *)&prime >= v74)
          {
            v74 = *(_QWORD *)(v66 + 88);
            goto LABEL_117;
          }
          if (!*(_QWORD *)&prime)
          {
            v100 = *v69;
            *v69 = 0;
            if (v100)
              operator delete(v100);
            v74 = 0;
            *(_QWORD *)(v66 + 88) = 0;
            goto LABEL_117;
          }
        }
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v86 = operator new(8 * *(_QWORD *)&prime);
        v87 = *v69;
        *v69 = v86;
        if (v87)
          operator delete(v87);
        v88 = 0;
        *(int8x8_t *)(v66 + 88) = prime;
        do
          *((_QWORD *)*v69 + v88++) = 0;
        while (*(_QWORD *)&prime != v88);
        v89 = (_QWORD *)*v70;
        if (*v70)
        {
          v90 = v89[1];
          v91 = (uint8x8_t)vcnt_s8(prime);
          v91.i16[0] = vaddlv_u8(v91);
          if (v91.u32[0] > 1uLL)
          {
            if (v90 >= *(_QWORD *)&prime)
              v90 %= *(_QWORD *)&prime;
          }
          else
          {
            v90 &= *(_QWORD *)&prime - 1;
          }
          *((_QWORD *)*v69 + v90) = v70;
          v95 = (_QWORD *)*v89;
          if (*v89)
          {
            do
            {
              v96 = v95[1];
              if (v91.u32[0] > 1uLL)
              {
                if (v96 >= *(_QWORD *)&prime)
                  v96 %= *(_QWORD *)&prime;
              }
              else
              {
                v96 &= *(_QWORD *)&prime - 1;
              }
              if (v96 != v90)
              {
                if (!*((_QWORD *)*v69 + v96))
                {
                  *((_QWORD *)*v69 + v96) = v89;
                  goto LABEL_113;
                }
                *v89 = *v95;
                *v95 = **((_QWORD **)*v69 + v96);
                **((_QWORD **)*v69 + v96) = v95;
                v95 = v89;
              }
              v96 = v90;
LABEL_113:
              v89 = v95;
              v95 = (_QWORD *)*v95;
              v90 = v96;
            }
            while (v95);
          }
        }
        v74 = (unint64_t)prime;
LABEL_117:
        if ((v74 & (v74 - 1)) != 0)
        {
          if (v74 <= v73)
            v73 %= v74;
        }
        else
        {
          v73 = ((_DWORD)v74 - 1) & v73;
        }
LABEL_121:
        v97 = *v69;
        v98 = (_QWORD *)*((_QWORD *)*v69 + v73);
        if (v98)
        {
          *v79 = *v98;
        }
        else
        {
          *v79 = *v70;
          *v70 = v79;
          v97[v73] = v70;
          if (!*v79)
          {
LABEL_130:
            ++*(_QWORD *)(v66 + 104);
            goto LABEL_131;
          }
          v99 = *(_QWORD *)(*v79 + 8);
          if ((v74 & (v74 - 1)) != 0)
          {
            if (v99 >= v74)
              v99 %= v74;
          }
          else
          {
            v99 &= v74 - 1;
          }
          v98 = (char *)*v69 + 8 * v99;
        }
        *v98 = v79;
        goto LABEL_130;
      }
LABEL_142:
      v146 = (void **)&v142;
      std::vector<nlp::CFScopedPtr<__CFString const*>>::__destroy_vector::operator()[abi:ne180100](&v146);
      if (__p)
      {
        v148[0] = __p;
        operator delete(__p);
      }
      v21 = 0x253F89000;
      v22 = v139;
    }
    else
    {
      v66 = 0;
    }
    CFRelease(cf);
  }
  else
  {
    v66 = 0;
  }
  CFRelease(v22);
  if (!v66)
  {
LABEL_237:
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    nlp::ResourceCreationException::ResourceCreationException(exception, (__int128 *)&__p);
  }
  v101 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253F89F48, v141);
  v102 = v101;
  v103 = *((_QWORD *)&xmmword_253F89F30 + 1);
  if (*((_QWORD *)&xmmword_253F89F30 + 1))
  {
    v104 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253F89F30 + 8));
    v104.i16[0] = vaddlv_u8(v104);
    v105 = v104.u32[0];
    if (v104.u32[0] > 1uLL)
    {
      v1 = v101;
      if (v101 >= *((_QWORD *)&xmmword_253F89F30 + 1))
        v1 = v101 % *((_QWORD *)&xmmword_253F89F30 + 1);
    }
    else
    {
      v1 = (*((_QWORD *)&xmmword_253F89F30 + 1) - 1) & v101;
    }
    v106 = *(unint64_t **)(*(_QWORD *)(v21 + 3888) + 8 * v1);
    if (v106)
    {
      v11 = *v106;
      if (*v106)
      {
        while (1)
        {
          v107 = *(_QWORD *)(v11 + 8);
          if (v107 == v102)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253F89F50, (unsigned __int8 *)(v11 + 16), (unsigned __int8 *)v141) & 1) != 0)goto LABEL_192;
          }
          else
          {
            if (v105 > 1)
            {
              if (v107 >= v103)
                v107 %= v103;
            }
            else
            {
              v107 &= v103 - 1;
            }
            if (v107 != v1)
            {
LABEL_166:
              v21 = 0x253F89000uLL;
              break;
            }
          }
          v11 = *(_QWORD *)v11;
          if (!v11)
            goto LABEL_166;
        }
      }
    }
  }
  v108 = operator new(0x38uLL);
  v109 = v108;
  __p = v108;
  v148[0] = &qword_253F89F40;
  LOBYTE(v148[1]) = 0;
  *v108 = 0;
  v108[1] = v102;
  v11 = (unint64_t)(v108 + 2);
  if (*(char *)(v141 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v108 + 2), *(const std::string::value_type **)v141, *(_QWORD *)(v141 + 8));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v141;
    v108[4] = *(_QWORD *)(v141 + 16);
  }
  v109[5] = v66;
  v110 = (_QWORD *)operator new();
  *v110 = &off_24F112078;
  v110[1] = 0;
  v110[2] = 0;
  v110[3] = v66;
  v109[6] = v110;
  LOBYTE(v148[1]) = 1;
  v111 = (float)(unint64_t)(qword_253F89F48 + 1);
  if (!v103 || (float)(*(float *)&dword_253F89F50 * (float)v103) < v111)
  {
    v112 = 1;
    if (v103 >= 3)
      v112 = (v103 & (v103 - 1)) != 0;
    v113 = v112 | (2 * v103);
    v114 = vcvtps_u32_f32(v111 / *(float *)&dword_253F89F50);
    if (v113 <= v114)
      v115 = v114;
    else
      v115 = v113;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>>>::__rehash<true>(v115);
    v103 = *((_QWORD *)&xmmword_253F89F30 + 1);
    if ((*((_QWORD *)&xmmword_253F89F30 + 1) & (*((_QWORD *)&xmmword_253F89F30 + 1) - 1)) != 0)
    {
      if (v102 >= *((_QWORD *)&xmmword_253F89F30 + 1))
        v1 = v102 % *((_QWORD *)&xmmword_253F89F30 + 1);
      else
        v1 = v102;
    }
    else
    {
      v1 = (*((_QWORD *)&xmmword_253F89F30 + 1) - 1) & v102;
    }
  }
  v116 = *(_QWORD *)(v21 + 3888);
  v117 = *(_QWORD **)(v116 + 8 * v1);
  if (v117)
  {
    *v109 = *v117;
LABEL_190:
    *v117 = v109;
    goto LABEL_191;
  }
  *v109 = qword_253F89F40;
  qword_253F89F40 = (uint64_t)v109;
  *(_QWORD *)(v116 + 8 * v1) = &qword_253F89F40;
  if (*v109)
  {
    v118 = *(_QWORD *)(*v109 + 8);
    if ((v103 & (v103 - 1)) != 0)
    {
      if (v118 >= v103)
        v118 %= v103;
    }
    else
    {
      v118 &= v103 - 1;
    }
    v117 = (_QWORD *)(*(_QWORD *)(v21 + 3888) + 8 * v118);
    goto LABEL_190;
  }
LABEL_191:
  __p = 0;
  ++qword_253F89F48;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&__p);
LABEL_192:
  v119 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_253F89F48, v141);
  v120 = v119;
  v121 = *((_QWORD *)&xmmword_253F89F30 + 1);
  if (*((_QWORD *)&xmmword_253F89F30 + 1))
  {
    v122 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253F89F30 + 8));
    v122.i16[0] = vaddlv_u8(v122);
    v123 = v122.u32[0];
    if (v122.u32[0] > 1uLL)
    {
      v11 = v119;
      if (v119 >= *((_QWORD *)&xmmword_253F89F30 + 1))
        v11 = v119 % *((_QWORD *)&xmmword_253F89F30 + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&xmmword_253F89F30 + 1) - 1) & v119;
    }
    v124 = *(_QWORD ***)(xmmword_253F89F30 + 8 * v11);
    if (v124)
    {
      for (j = *v124; j; j = (_QWORD *)*j)
      {
        v126 = j[1];
        if (v126 == v120)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_253F89F50, (unsigned __int8 *)j + 16, (unsigned __int8 *)v141) & 1) != 0)goto LABEL_234;
        }
        else
        {
          if (v123 > 1)
          {
            if (v126 >= v121)
              v126 %= v121;
          }
          else
          {
            v126 &= v121 - 1;
          }
          if (v126 != v11)
            break;
        }
      }
    }
  }
  j = operator new(0x38uLL);
  __p = j;
  v148[0] = &qword_253F89F40;
  LOBYTE(v148[1]) = 0;
  *j = 0;
  j[1] = v120;
  v127 = (std::string *)(j + 2);
  if (*(char *)(v141 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v141, *(_QWORD *)(v141 + 8));
  }
  else
  {
    *(_OWORD *)&v127->__r_.__value_.__l.__data_ = *(_OWORD *)v141;
    j[4] = *(_QWORD *)(v141 + 16);
  }
  j[5] = 0;
  j[6] = 0;
  LOBYTE(v148[1]) = 1;
  v128 = (float)(unint64_t)(qword_253F89F48 + 1);
  if (!v121 || (float)(*(float *)&dword_253F89F50 * (float)v121) < v128)
  {
    v129 = 1;
    if (v121 >= 3)
      v129 = (v121 & (v121 - 1)) != 0;
    v130 = v129 | (2 * v121);
    v131 = vcvtps_u32_f32(v128 / *(float *)&dword_253F89F50);
    if (v130 <= v131)
      v132 = v131;
    else
      v132 = v130;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>>>::__rehash<true>(v132);
    v121 = *((_QWORD *)&xmmword_253F89F30 + 1);
    if ((*((_QWORD *)&xmmword_253F89F30 + 1) & (*((_QWORD *)&xmmword_253F89F30 + 1) - 1)) != 0)
    {
      if (v120 >= *((_QWORD *)&xmmword_253F89F30 + 1))
        v11 = v120 % *((_QWORD *)&xmmword_253F89F30 + 1);
      else
        v11 = v120;
    }
    else
    {
      v11 = (*((_QWORD *)&xmmword_253F89F30 + 1) - 1) & v120;
    }
  }
  v133 = xmmword_253F89F30;
  v134 = *(_QWORD **)(xmmword_253F89F30 + 8 * v11);
  if (v134)
  {
    *j = *v134;
LABEL_232:
    *v134 = j;
    goto LABEL_233;
  }
  *j = qword_253F89F40;
  qword_253F89F40 = (uint64_t)j;
  *(_QWORD *)(v133 + 8 * v11) = &qword_253F89F40;
  if (*j)
  {
    v135 = *(_QWORD *)(*j + 8);
    if ((v121 & (v121 - 1)) != 0)
    {
      if (v135 >= v121)
        v135 %= v121;
    }
    else
    {
      v135 &= v121 - 1;
    }
    v134 = (_QWORD *)(xmmword_253F89F30 + 8 * v135);
    goto LABEL_232;
  }
LABEL_233:
  __p = 0;
  ++qword_253F89F48;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&__p);
LABEL_234:
  v136 = j[5];
  std::mutex::unlock((std::mutex *)&qword_253F89F58);
  return v136;
}

void sub_228538E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&__p);
  std::mutex::unlock((std::mutex *)&qword_253F89F58);
  _Unwind_Resume(a1);
}

uint64_t InputTranscoder::KeyboardLayoutImpl::KeyboardLayoutImpl(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const __CFBoolean *Required;
  double *BaseLayoutInfoAssorted;
  uint64_t v11;
  long double v12;
  long double v13;
  _QWORD *v14;

  *(_QWORD *)a1 = &off_24F111FB8;
  Required = (const __CFBoolean *)InputTranscoder::getRequiredCFType<__CFBoolean const*>(a5, CFSTR("isAlphabeticPlane"));
  *(_BYTE *)(a1 + 8) = CFBooleanGetValue(Required) != 0;
  BaseLayoutInfoAssorted = (double *)InputTranscoder::getBaseLayoutInfoAssorted(a4);
  *(double *)(a1 + 16) = InputTranscoder::calculateFrame((uint64_t)a2, a3, BaseLayoutInfoAssorted, *(unsigned __int8 *)(a1 + 8));
  *(_QWORD *)(a1 + 24) = v11;
  *(long double *)(a1 + 32) = v12;
  *(long double *)(a1 + 40) = v13;
  *(long double *)(a1 + 48) = hypot(v12, v13);
  *(_QWORD *)(a1 + 56) = InputTranscoder::getBaseLayoutInfoAssorted(a4);
  *(_QWORD *)(a1 + 64) = InputTranscoder::getBaseLayoutInfoAssorted(a4) + 48;
  v14 = (_QWORD *)(a1 + 72);
  if (*(_BYTE *)(a1 + 8))
  {
    *v14 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *v14 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    std::vector<ITKeyInfo>::__init_with_size[abi:ne180100]<std::__wrap_iter<ITKeyInfo const*>,std::__wrap_iter<ITKeyInfo const*>>(v14, a2, (uint64_t)a2 + 56 * a3, 0x6DB6DB6DB6DB6DB7 * ((56 * a3) >> 3));
  }
  return a1;
}

void InputTranscoder::KeyboardLayoutImpl::enumerateNearestKeys(uint64_t a1, uint64_t a2, double a3, double a4)
{
  __int128 **v5;
  __int128 *v6;
  __int128 *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  float v43;
  float v44;
  float v45;
  double v46;
  float v47;
  float v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  _OWORD v62[3];
  uint64_t v63;
  char v64;
  void *__p;
  char *v66;
  char *v67;
  double *v68;
  _QWORD v69[2];
  double *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  *(double *)v69 = a3;
  *(double *)&v69[1] = a4;
  __p = 0;
  v66 = 0;
  v67 = 0;
  v68 = (double *)v69;
  if (*(_BYTE *)(a1 + 8))
    v5 = *(__int128 ***)(a1 + 56);
  else
    v5 = (__int128 **)(a1 + 72);
  v6 = *v5;
  v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      v8 = v66;
      if (v66 >= v67)
      {
        v13 = __p;
        v14 = 0x6DB6DB6DB6DB6DB7 * ((v66 - (_BYTE *)__p) >> 3);
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) > 0x492492492492492)
          std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
        if (0xDB6DB6DB6DB6DB6ELL * ((v67 - (_BYTE *)__p) >> 3) > v15)
          v15 = 0xDB6DB6DB6DB6DB6ELL * ((v67 - (_BYTE *)__p) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v67 - (_BYTE *)__p) >> 3)) >= 0x249249249249249)
          v16 = 0x492492492492492;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ITKeyInfo>>((uint64_t)&v67, v16);
          v13 = __p;
          v8 = v66;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[8 * ((v66 - (_BYTE *)__p) >> 3)];
        v19 = *v6;
        v20 = v6[1];
        v21 = v6[2];
        *((_QWORD *)v18 + 6) = *((_QWORD *)v6 + 6);
        *((_OWORD *)v18 + 1) = v20;
        *((_OWORD *)v18 + 2) = v21;
        *(_OWORD *)v18 = v19;
        if (v8 == v13)
        {
          v26 = &v17[56 * v14];
        }
        else
        {
          v22 = &v17[56 * v14];
          do
          {
            v23 = *(_OWORD *)((char *)v8 - 56);
            v24 = *(_OWORD *)((char *)v8 - 40);
            v25 = *(_OWORD *)((char *)v8 - 24);
            v26 = v22 - 56;
            *((_QWORD *)v22 - 1) = *((_QWORD *)v8 - 1);
            *(_OWORD *)(v22 - 24) = v25;
            *(_OWORD *)(v22 - 40) = v24;
            *(_OWORD *)(v22 - 56) = v23;
            v8 = (_OWORD *)((char *)v8 - 56);
            v22 -= 56;
          }
          while (v8 != v13);
        }
        v12 = (uint64_t)(v18 + 56);
        __p = v26;
        v66 = v18 + 56;
        v67 = &v17[56 * v16];
        if (v13)
          operator delete(v13);
      }
      else
      {
        v9 = *v6;
        v10 = v6[1];
        v11 = v6[2];
        *((_QWORD *)v66 + 6) = *((_QWORD *)v6 + 6);
        v8[1] = v10;
        v8[2] = v11;
        *v8 = v9;
        v12 = (uint64_t)v8 + 56;
      }
      v66 = (char *)v12;
      *(_QWORD *)&v71 = v68;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,InputTranscoder::KeyboardLayoutImpl::enumerateNearestKeys(CGPoint,void({block_pointer})(ITKeyInfo,BOOL *))::$_0 &,std::__wrap_iter<ITKeyInfo*>>((uint64_t)__p, v12, (double **)&v71, 0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)__p) >> 3));
      v6 = (__int128 *)((char *)v6 + 56);
    }
    while (v6 != v7);
    v27 = (char *)__p;
    v64 = 0;
    if (__p != v66)
    {
      v60 = a2;
      do
      {
        v28 = *(_OWORD *)v27;
        v29 = *((_OWORD *)v27 + 1);
        v30 = *((_OWORD *)v27 + 2);
        v63 = *((_QWORD *)v27 + 6);
        v62[1] = v29;
        v62[2] = v30;
        v62[0] = v28;
        (*(void (**)(uint64_t, _OWORD *, char *))(a2 + 16))(a2, v62, &v64);
        v27 = (char *)__p;
        if (v64)
          break;
        v31 = v66;
        v32 = v68;
        v70 = v68;
        if (v66 - (_BYTE *)__p >= 57)
        {
          v61 = v66;
          v33 = 0;
          v34 = 0x6DB6DB6DB6DB6DB7 * ((v66 - (_BYTE *)__p) >> 3);
          v35 = *((_OWORD *)__p + 1);
          v71 = *(_OWORD *)__p;
          v72 = v35;
          v73 = *((_OWORD *)__p + 2);
          v74 = *((_QWORD *)__p + 6);
          v36 = (double *)__p;
          do
          {
            v37 = v36;
            v36 += 7 * v33 + 7;
            v38 = 2 * v33;
            v33 = (2 * v33) | 1;
            v39 = v38 + 2;
            if (v38 + 2 < v34)
            {
              v40 = *v32;
              v41 = v32[1];
              v42 = vabdd_f64(v41, v36[1]);
              v43 = vabdd_f64(*v32, *v36) - v36[4] * 0.400000006;
              if (v43 < 0.0)
                v43 = 0.0;
              v44 = v42 - v36[5] * 0.400000006;
              if (v44 < 0.0)
                v44 = 0.0;
              v45 = hypotf(v43, v44);
              v46 = vabdd_f64(v41, v36[8]);
              v47 = vabdd_f64(v40, v36[7]) - v36[11] * 0.400000006;
              if (v47 < 0.0)
                v47 = 0.0;
              v48 = v46 - v36[12] * 0.400000006;
              if (v48 < 0.0)
                v48 = 0.0;
              if (v45 > hypotf(v47, v48))
              {
                v36 += 7;
                v33 = v39;
              }
            }
            v49 = *(_OWORD *)v36;
            v50 = *((_OWORD *)v36 + 1);
            v51 = *((_OWORD *)v36 + 2);
            v37[6] = v36[6];
            *((_OWORD *)v37 + 1) = v50;
            *((_OWORD *)v37 + 2) = v51;
            *(_OWORD *)v37 = v49;
          }
          while (v33 <= (uint64_t)((unint64_t)(v34 - 2) >> 1));
          v31 = v61;
          v52 = (__int128 *)(v61 - 56);
          if (v36 == (double *)(v61 - 56))
          {
            v57 = v71;
            v58 = v72;
            v59 = v73;
            *((_QWORD *)v36 + 6) = v74;
            *((_OWORD *)v36 + 1) = v58;
            *((_OWORD *)v36 + 2) = v59;
            *(_OWORD *)v36 = v57;
          }
          else
          {
            v53 = *v52;
            v54 = *(_OWORD *)(v61 - 40);
            v55 = *(_OWORD *)(v61 - 24);
            v36[6] = *((double *)v61 - 1);
            *((_OWORD *)v36 + 1) = v54;
            *((_OWORD *)v36 + 2) = v55;
            *(_OWORD *)v36 = v53;
            v56 = v72;
            *v52 = v71;
            *(_OWORD *)(v61 - 40) = v56;
            *(_OWORD *)(v61 - 24) = v73;
            *((_QWORD *)v61 - 1) = v74;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,InputTranscoder::KeyboardLayoutImpl::enumerateNearestKeys(CGPoint,void({block_pointer})(ITKeyInfo,BOOL *))::$_0 &,std::__wrap_iter<ITKeyInfo*>>((uint64_t)v27, (uint64_t)(v36 + 7), &v70, 0x6DB6DB6DB6DB6DB7 * (((char *)(v36 + 7) - v27) >> 3));
            v27 = (char *)__p;
            v31 = v66;
          }
          a2 = v60;
        }
        v66 = v31 - 56;
      }
      while (v27 != v31 - 56);
    }
    if (v27)
    {
      v66 = v27;
      operator delete(v27);
    }
  }
}

void sub_228539558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::KeyboardLayoutImpl::enclosingKey(InputTranscoder::KeyboardLayoutImpl *this@<X0>, CGPoint a2@<0:D0, 8:D1>, uint64_t a3@<X8>)
{
  double y;
  double x;
  __int128 **v6;
  __int128 *v7;
  __int128 *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  CGPoint v19;

  y = a2.y;
  x = a2.x;
  if (*((_BYTE *)this + 8))
    v6 = (__int128 **)*((_QWORD *)this + 7);
  else
    v6 = (__int128 **)((char *)this + 72);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 == v8)
  {
LABEL_10:
    *(_OWORD *)a3 = v15;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v17;
    v13 = v18;
  }
  else
  {
    v9 = INFINITY;
    while (1)
    {
      v19.x = x;
      v19.y = y;
      if (CGRectContainsPoint(*(CGRect *)(v7 + 1), v19))
        break;
      v10 = x - *(double *)v7;
      v11 = y - *((double *)v7 + 1);
      v12 = hypotf(v10, v11);
      if (v12 < v9)
      {
        v15 = *v7;
        v16 = v7[1];
        v17 = v7[2];
        v18 = *((_QWORD *)v7 + 6);
        v9 = v12;
      }
      v7 = (__int128 *)((char *)v7 + 56);
      if (v7 == v8)
        goto LABEL_10;
    }
    v14 = v7[1];
    *(_OWORD *)a3 = *v7;
    *(_OWORD *)(a3 + 16) = v14;
    *(_OWORD *)(a3 + 32) = v7[2];
    v13 = *((_QWORD *)v7 + 6);
  }
  *(_QWORD *)(a3 + 48) = v13;
}

void InputTranscoder::KeyboardLayoutImpl::keyCandidatesForLastTouch(InputTranscoder::KeyboardLayoutImpl *this@<X0>, CGPoint a2@<0:D0, 8:D1>, uint64_t a3@<X8>)
{
  float v4;
  uint64_t *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  _QWORD v14[7];
  CGPoint v15;
  _QWORD v16[3];
  float v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t);
  _QWORD v25[4];
  char v26;
  void **v27[3];
  char v28;
  std::string *v29;
  std::string *v30;

  v20 = 0;
  v21 = &v20;
  v22 = 0x4002000000;
  v23 = __Block_byref_object_copy__3;
  v24 = __Block_byref_object_dispose__3;
  memset(v25, 0, 24);
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v19 = 0;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v4 = *((double *)this + 6);
  v17 = v4;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 0x40000000;
  v14[2] = ___ZNK15InputTranscoder18KeyboardLayoutImpl25keyCandidatesForLastTouchE7CGPoint_block_invoke;
  v14[3] = &unk_24F112020;
  v15 = a2;
  v14[4] = v16;
  v14[5] = &v20;
  v14[6] = v18;
  InputTranscoder::KeyboardLayoutImpl::enumerateNearestKeys((uint64_t)this, (uint64_t)v14, a2.x, a2.y);
  v5 = v21;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v6 = (__int128 *)v5[5];
  v7 = (__int128 *)v5[6];
  v25[3] = a3;
  v26 = 0;
  v8 = (char *)v7 - (char *)v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::KeyCandidateImpl>>(v8 >> 5);
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a3 + 16) = (char *)v9 + 32 * v10;
    v29 = v9;
    v30 = v9;
    v27[0] = (void **)(a3 + 16);
    v27[1] = (void **)&v29;
    v27[2] = (void **)&v30;
    v11 = v9;
    v28 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v13 = v30;
      }
      else
      {
        v12 = *v6;
        v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        v13 = v11;
      }
      LODWORD(v11[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v11 = (std::string *)((char *)v13 + 32);
      v30 = (std::string *)((char *)v13 + 32);
    }
    while (v6 != v7);
    v28 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<InputTranscoder::KeyCandidateImpl>,InputTranscoder::KeyCandidateImpl*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v27);
    *(_QWORD *)(a3 + 8) = v11;
  }
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(&v20, 8);
  v27[0] = (void **)v25;
  std::vector<InputTranscoder::KeyCandidateImpl>::__destroy_vector::operator()[abi:ne180100](v27);
}

void sub_22853984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  *(_QWORD *)(v28 - 112) = v27;
  std::vector<InputTranscoder::KeyCandidateImpl>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 112));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<InputTranscoder::KeyCandidateImpl>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZNK15InputTranscoder18KeyboardLayoutImpl25keyCandidatesForLastTouchE7CGPoint_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  float32x2_t v6;
  int32x2_t v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  __int128 v24;
  char *v25;
  const std::string::value_type **v26;
  const std::string::value_type **v27;
  std::string *v28;
  const std::string::value_type **v29;
  __int128 v30;
  char *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  std::string v36;
  float v37;
  void *__p[5];
  _QWORD v39[3];
  char v40;
  __int128 v41;
  __int128 v42;

  v6 = vcvt_f32_f64(vaddq_f64(vabdq_f64(*(float64x2_t *)(a1 + 56), *(float64x2_t *)a2), vmulq_f64(*(float64x2_t *)(a2 + 32), (float64x2_t)vdupq_n_s64(0xBFD99999A0000000))));
  v7 = vcltz_f32(v6);
  if ((v7.i8[0] & 1) != 0)
    v8 = 0.0;
  else
    v8 = v6.f32[0];
  v9 = v6.f32[1];
  if ((v7.i8[4] & 1) != 0)
    v9 = 0.0;
  v10 = hypotf(v8, v9) / *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  nlp::getUTF8StringFromCFString(*(const __CFString **)(a2 + 48), __p);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v37 = v10;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v36 = *(std::string *)__p;
    v37 = v10;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(_QWORD *)(v11 + 48);
  v13 = *(_QWORD *)(v11 + 56);
  if (v12 >= v13)
  {
    v15 = *(_QWORD *)(v11 + 40);
    v16 = (uint64_t)(v12 - v15) >> 5;
    if ((unint64_t)(v16 + 1) >> 59)
      std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
    v17 = v13 - v15;
    v18 = v17 >> 4;
    if (v17 >> 4 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    __p[4] = (void *)(v11 + 56);
    if (v19)
    {
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::KeyCandidateImpl>>(v19);
    }
    else
    {
      v21 = 0;
      v20 = 0;
    }
    v23 = &v21[32 * v16];
    __p[0] = v21;
    __p[1] = v23;
    __p[2] = v23;
    __p[3] = &v21[32 * v20];
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v21[32 * v16], v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      v23 = (char *)__p[1];
      v25 = (char *)__p[2];
    }
    else
    {
      v24 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *((_QWORD *)v23 + 2) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
      *(_OWORD *)v23 = v24;
      v25 = &v21[32 * v16];
    }
    *(float *)&v21[32 * v16 + 24] = v37;
    __p[2] = v25 + 32;
    v26 = *(const std::string::value_type ***)(v11 + 40);
    v27 = *(const std::string::value_type ***)(v11 + 48);
    *(_QWORD *)&v42 = v23;
    *((_QWORD *)&v42 + 1) = v23;
    v41 = v42;
    v39[0] = v11 + 56;
    v39[1] = &v41;
    v39[2] = &v42;
    v40 = 0;
    if (v27 != v26)
    {
      do
      {
        v28 = (std::string *)(v23 - 32);
        v29 = v27 - 4;
        if (*((char *)v27 - 9) < 0)
        {
          std::string::__init_copy_ctor_external(v28, *(v27 - 4), (std::string::size_type)*(v27 - 3));
          v31 = (char *)*((_QWORD *)&v42 + 1);
        }
        else
        {
          v30 = *(_OWORD *)v29;
          *((_QWORD *)v23 - 2) = *(v27 - 2);
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v30;
          v31 = v23;
        }
        *((_DWORD *)v23 - 2) = *((_DWORD *)v27 - 2);
        v23 = v31 - 32;
        *((_QWORD *)&v42 + 1) = v31 - 32;
        v27 -= 4;
      }
      while (v29 != v26);
    }
    v40 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<InputTranscoder::KeyCandidateImpl>,std::reverse_iterator<InputTranscoder::KeyCandidateImpl*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v39);
    v32 = *(void **)(v11 + 56);
    v33 = *(_OWORD *)&__p[2];
    v35 = __p[2];
    v34 = *(_OWORD *)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v23;
    *(_OWORD *)&__p[1] = v34;
    *(_OWORD *)(v11 + 48) = v33;
    __p[3] = v32;
    __p[0] = (void *)v34;
    std::__split_buffer<InputTranscoder::KeyCandidateImpl>::~__split_buffer((uint64_t)__p);
    v22 = v35;
  }
  else
  {
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(v11 + 48), v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else
    {
      v14 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
      *(_OWORD *)v12 = v14;
    }
    *(float *)(v12 + 24) = v37;
    v22 = (void *)(v12 + 32);
    *(_QWORD *)(v11 + 48) = v12 + 32;
  }
  *(_QWORD *)(v11 + 48) = v22;
  if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 5)
    *a3 = 1;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_228539C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__split_buffer<InputTranscoder::KeyCandidateImpl>::~__split_buffer((uint64_t)&a19);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 InputTranscoder::KeyboardLayoutImpl::getScaledPoint(InputTranscoder::KeyboardLayoutImpl *this, CGPoint a2)
{
  CGFloat y;
  float64x2_t *v4;
  __n128 result;
  float64x2_t v6;

  y = a2.y;
  if (*((_BYTE *)this + 8))
  {
    v6 = (float64x2_t)a2;
    v4 = (float64x2_t *)*((_QWORD *)this + 8);
    if (CGRectEqualToRect(*(CGRect *)v4->f64, *(CGRect *)((char *)this + 16)))
      a2 = (CGPoint)v6;
    else
      a2 = (CGPoint)vmlaq_f64(*v4, v4[1], vdivq_f64(vsubq_f64(v6, *((float64x2_t *)this + 1)), *((float64x2_t *)this + 2)));
  }
  result.n128_f64[0] = a2.x;
  return result;
}

double InputTranscoder::KeyboardLayoutImpl::normalizePointToRange(uint64_t a1, double a2, double a3, float a4, float a5)
{
  return a4 + (a2 - **(double **)(a1 + 64)) / *(double *)(*(_QWORD *)(a1 + 64) + 16) * (float)(a5 - a4);
}

double InputTranscoder::KeyboardLayoutImpl::getCentroid(InputTranscoder::KeyboardLayoutImpl *this, int a2)
{
  CFStringRef **v3;
  CFStringRef *v4;
  CFStringRef *v5;

  if (*((_BYTE *)this + 8))
    v3 = (CFStringRef **)*((_QWORD *)this + 7);
  else
    v3 = (CFStringRef **)((char *)this + 72);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    while (CFStringGetCharacterAtIndex(v4[6], 0) != a2)
    {
      v4 += 7;
      if (v4 == v5)
      {
        v4 = v5;
        return *(double *)v4;
      }
    }
  }
  return *(double *)v4;
}

double InputTranscoder::KeyboardLayoutImpl::getSpaceCost(InputTranscoder::KeyboardLayoutImpl *this, const unsigned __int16 *a2, const unsigned __int16 *a3)
{
  double v3;
  char v4;
  char v5;
  char *v6;
  char *v7;
  char *v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;

  v3 = 0.0;
  if ((unsigned __int16)this != (unsigned __int16)a2)
  {
    v4 = (char)a2;
    v5 = (char)this;
    v6 = (char *)operator new(5uLL);
    v7 = v6;
    *(_DWORD *)v6 = 1851946595;
    v6[4] = 120;
    v8 = v6 + 5;
    if (v5 == 32)
      v9 = v4;
    else
      v9 = v5;
    v10 = memchr(v6, v9, 5uLL);
    if (v10)
      v11 = v10;
    else
      v11 = v8;
    v3 = dbl_2285446F0[v11 - v7 == 5];
    operator delete(v7);
  }
  return v3;
}

double InputTranscoder::KeyboardLayoutImpl::getInsertionCost(InputTranscoder::KeyboardLayoutImpl *this, CFStringRef theString, const __CFString *a3, CFIndex idx, unsigned int a5)
{
  CFIndex v9;
  InputTranscoder::KeyboardLayoutImpl *CharacterAtIndex;
  const unsigned __int16 *v11;
  const unsigned __int16 *v12;
  const unsigned __int16 *v14;
  unsigned __int16 v15;

  v9 = idx;
  if (CFStringGetCharacterAtIndex(theString, idx) == 32 || CFStringGetCharacterAtIndex(a3, a5) == 32)
  {
    CharacterAtIndex = (InputTranscoder::KeyboardLayoutImpl *)CFStringGetCharacterAtIndex(theString, v9);
    v11 = (const unsigned __int16 *)CFStringGetCharacterAtIndex(a3, a5);
    return InputTranscoder::KeyboardLayoutImpl::getSpaceCost(CharacterAtIndex, v11, v12);
  }
  else
  {
    v14 = (const unsigned __int16 *)CFStringGetCharacterAtIndex(theString, v9);
    v15 = CFStringGetCharacterAtIndex(a3, a5);
    return InputTranscoder::KeyboardLayoutImpl::getKeyDistance(this, v14, &v15);
  }
}

double InputTranscoder::KeyboardLayoutImpl::getKeyDistance(InputTranscoder::KeyboardLayoutImpl *this, const unsigned __int16 *a2, const unsigned __int16 *a3)
{
  double Centroid;
  double v6;
  double v7;
  float v8;
  double v9;

  Centroid = InputTranscoder::KeyboardLayoutImpl::getCentroid(this, (unsigned __int16)a2);
  v7 = v6;
  v8 = Centroid - InputTranscoder::KeyboardLayoutImpl::getCentroid(this, *a3);
  *(float *)&v9 = v7 - v9;
  return fabsf(hypotf(v8, *(float *)&v9)) / *((double *)this + 6);
}

double InputTranscoder::KeyboardLayoutImpl::getDeletionCost(InputTranscoder::KeyboardLayoutImpl *this, CFStringRef theString, CFIndex idx)
{
  CFIndex v5;
  CFIndex v6;
  InputTranscoder::KeyboardLayoutImpl *CharacterAtIndex;
  const unsigned __int16 *v8;
  const unsigned __int16 *v9;
  const unsigned __int16 *v11;
  unsigned __int16 v12;

  v5 = idx;
  v6 = (idx - 1);
  if (CFStringGetCharacterAtIndex(theString, idx) == 32
    || CFStringGetCharacterAtIndex(theString, v6) == 32)
  {
    CharacterAtIndex = (InputTranscoder::KeyboardLayoutImpl *)CFStringGetCharacterAtIndex(theString, v5);
    v8 = (const unsigned __int16 *)CFStringGetCharacterAtIndex(theString, v6);
    return InputTranscoder::KeyboardLayoutImpl::getSpaceCost(CharacterAtIndex, v8, v9);
  }
  else
  {
    v11 = (const unsigned __int16 *)CFStringGetCharacterAtIndex(theString, v5);
    v12 = CFStringGetCharacterAtIndex(theString, v6);
    return InputTranscoder::KeyboardLayoutImpl::getKeyDistance(this, v11, &v12);
  }
}

double InputTranscoder::KeyboardLayoutImpl::getEditDistance(InputTranscoder::KeyboardLayoutImpl *a1, uint64_t a2, uint64_t a3)
{
  const __CFString *CFStringFromString;
  __CFString *v7;
  unint64_t Length;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double DeletionCost;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex v19;
  CFIndex v20;
  double InsertionCost;
  unint64_t v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  CFIndex v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void **p_p;
  uint64_t v35;
  double v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unsigned int v41;
  CFIndex idx;
  CFIndex v43;
  unint64_t v44;
  _QWORD v45[3];
  __CFString *v46;
  CFStringRef theString;
  void *__p;
  double v49;
  double v50;
  double v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  CFStringFromString = nlp::createCFStringFromString(a2);
  theString = CFStringFromString;
  v7 = (__CFString *)nlp::createCFStringFromString(a3);
  v46 = v7;
  if (CFStringFromString && CFStringGetLength(CFStringFromString))
  {
    if (v7 && CFStringGetLength(v7))
    {
      Length = CFStringGetLength(CFStringFromString);
      v9 = CFStringGetLength(v7);
      std::vector<double>::vector(&__p, v9 + 1);
      std::vector<std::vector<double>>::vector(v45, Length + 1, (uint64_t)&__p);
      if (*(double *)&__p != 0.0)
      {
        v49 = *(double *)&__p;
        operator delete(__p);
      }
      v10 = (uint64_t *)v45[0];
      **(_QWORD **)v45[0] = 0;
      if (Length)
      {
        v11 = 1;
        do
        {
          v12 = 0;
          *(_QWORD *)v10[3 * v11] = 0;
          do
          {
            v13 = v12 + 1;
            DeletionCost = 1.0;
            if (Length > v12 + 1)
            {
              DeletionCost = InputTranscoder::KeyboardLayoutImpl::getDeletionCost(a1, CFStringFromString, (v12 + 1));
              v10 = (uint64_t *)v45[0];
            }
            *(double *)v10[3 * v11] = DeletionCost + *(double *)v10[3 * v11];
            v12 = v13;
          }
          while (v11 != v13);
          v15 = v11++ == Length;
        }
        while (!v15);
      }
      if (v9)
      {
        if (Length >= v9)
          v16 = v9;
        else
          v16 = Length;
        v17 = *v10;
        v18 = 1;
        do
        {
          v19 = 0;
          *(_QWORD *)(v17 + 8 * v18) = 0;
          do
          {
            v20 = v19 + 1;
            InsertionCost = 1.0;
            if (v16 > v19 + 1)
            {
              InsertionCost = InputTranscoder::KeyboardLayoutImpl::getInsertionCost(a1, CFStringFromString, v7, v19, v19);
              v10 = (uint64_t *)v45[0];
              v17 = *(_QWORD *)v45[0];
            }
            *(double *)(v17 + 8 * v18) = InsertionCost + *(double *)(v17 + 8 * v18);
            v19 = v20;
          }
          while (v18 != v20);
          v15 = v18++ == v9;
        }
        while (!v15);
      }
      if (Length)
      {
        v22 = 1;
        do
        {
          if (v9)
          {
            v41 = v22 - 1;
            idx = (v22 - 2);
            v43 = v22 - 1;
            v23 = *(double *)v10[3 * v22];
            v24 = 1;
            v44 = v22;
            do
            {
              if (Length <= v22)
              {
                v28 = v10[3 * v43];
                v26 = *(double *)(v28 + 8 * v24);
                v25 = 1.0;
                v29 = v41;
                v27 = 1.0;
              }
              else
              {
                v25 = InputTranscoder::KeyboardLayoutImpl::getInsertionCost(a1, CFStringFromString, v7, v22, (int)v24 - 1);
                v26 = *(double *)(*(_QWORD *)(v45[0] + 24 * v43) + 8 * v24);
                CFStringFromString = theString;
                v27 = InputTranscoder::KeyboardLayoutImpl::getDeletionCost(a1, theString, v22);
                v28 = *(_QWORD *)(v45[0] + 24 * v43);
                v29 = v43;
                v7 = v46;
              }
              v30 = *(double *)(v28 + 8 * (v24 - 1));
              v31 = v30
                  + InputTranscoder::KeyboardLayoutImpl::getInsertionCost(a1, CFStringFromString, v7, v29, (int)v24 - 1);
              if (v44 < 2 || v24 < 2)
              {
                v32 = v31;
              }
              else
              {
                v7 = v46;
                if (InputTranscoder::KeyboardLayoutImpl::getInsertionCost(a1, CFStringFromString, v46, v29, (int)v24 - 2) == 0.0&& (v7 = v46, InputTranscoder::KeyboardLayoutImpl::getInsertionCost(a1, CFStringFromString, v46, idx, (int)v24 - 1) == 0.0))
                {
                  v32 = *(double *)(*(_QWORD *)(v45[0] + 24 * idx) + 8 * (v24 - 2))
                      + 0.181999996;
                }
                else
                {
                  v32 = v31;
                }
              }
              v33 = v23 + v25;
              *(double *)&__p = v23 + v25;
              v49 = v26 + v27;
              v50 = v31;
              v51 = v32;
              p_p = &__p;
              v35 = 8;
              v22 = v44;
              do
              {
                if (*(double *)((char *)&__p + v35) < v33)
                {
                  v33 = *(double *)((char *)&__p + v35);
                  p_p = (void **)((char *)&__p + v35);
                }
                v35 += 8;
              }
              while (v35 != 32);
              v10 = (uint64_t *)v45[0];
              v23 = *(double *)p_p;
              *(_QWORD *)(*(_QWORD *)(v45[0] + 24 * v44) + 8 * v24) = *p_p;
              v15 = v24++ == v9;
            }
            while (!v15);
          }
          v15 = v22++ == Length;
        }
        while (!v15);
        v7 = v46;
      }
      v36 = *(double *)(v10[3 * Length] + 8 * v9);
      *(double *)&__p = COERCE_DOUBLE(v45);
      std::vector<std::vector<double>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (!v7)
        goto LABEL_57;
LABEL_56:
      CFRelease(v7);
      goto LABEL_57;
    }
    v37 = *(unsigned __int8 *)(a2 + 23);
    v38 = (char)v37;
    v39 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v37 = *(unsigned __int8 *)(a3 + 23);
    v38 = (char)v37;
    v39 = *(_QWORD *)(a3 + 8);
  }
  if (v38 < 0)
    v37 = v39;
  v36 = (double)v37;
  if (v7)
    goto LABEL_56;
LABEL_57:
  if (CFStringFromString)
    CFRelease(CFStringFromString);
  return v36;
}

void sub_22853A4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, const void *a17, const void *a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  nlp::CFScopedPtr<__CFString const*>::reset(&a17, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a18, 0);
  _Unwind_Resume(a1);
}

uint64_t InputTranscoder::KeyboardLayoutImpl::getAutocorrectionOperations(InputTranscoder::KeyboardLayoutImpl *a1, uint64_t a2, uint64_t a3)
{
  const __CFString *CFStringFromString;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  unint64_t v10;
  const unsigned __int16 *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD **v20;
  double **v21;
  double v22;
  uint64_t v23;
  double *v24;
  _DWORD *v25;
  double *v26;
  double v27;
  double v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  void **v37;
  InputTranscoder::KeyboardLayoutImpl *v38;
  void **v39;
  int v40;
  int v41;
  double KeyDistance;
  int v43;
  double v44;
  double SpaceCost;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  double InsertionCost;
  double v51;
  double v52;
  double *p_p;
  uint64_t v54;
  double v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  CFIndex v63;
  const __CFString *cf;
  uint64_t v65;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD v70[4];
  const __CFString *v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  unsigned __int16 v76[4];
  char v77;
  std::vector<unsigned int> __p;
  double v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  InputTranscoder::toLower(a2, (uint64_t)v74);
  InputTranscoder::toLower(a3, (uint64_t)v72);
  CFStringFromString = nlp::createCFStringFromString((uint64_t)v74);
  v71 = CFStringFromString;
  v6 = nlp::createCFStringFromString((uint64_t)v72);
  v70[3] = v6;
  if (CFStringFromString && CFStringGetLength(CFStringFromString))
  {
    if (!v6)
    {
      v61 = 0;
      goto LABEL_87;
    }
    if (CFStringGetLength(v6))
    {
      if (*(char *)(a2 + 23) >= 0)
        v7 = *(unsigned __int8 *)(a2 + 23);
      else
        v7 = *(_QWORD *)(a2 + 8);
      v8 = *(unsigned __int8 *)(a3 + 23);
      if ((v8 & 0x80u) != 0)
        v8 = *(_QWORD *)(a3 + 8);
      v65 = v8;
      v9 = v8 + 1;
      std::vector<double>::vector(&__p, v8 + 1);
      v10 = v7 + 1;
      std::vector<std::vector<double>>::vector(v70, v7 + 1, (uint64_t)&__p);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      std::vector<unsigned int>::vector(&__p, v9);
      v67 = 0;
      v68 = 0;
      v69 = 0;
      *(_QWORD *)v76 = &v67;
      v77 = 0;
      if (v7 != -1)
      {
        if (v10 >= 0xAAAAAAAAAAAAAABLL)
          std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
        v12 = operator new(24 * v10);
        v67 = v12;
        v68 = v12;
        v13 = &v12[3 * v10];
        v69 = v13;
        v14 = v7;
        v15 = 24 * v7 + 24;
        do
        {
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v12, __p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
          v12 += 3;
          v15 -= 24;
        }
        while (v15);
        v68 = v13;
        v7 = v14;
      }
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v16 = v70[0];
      v17 = *(double **)v70[0];
      **(_QWORD **)v70[0] = 0;
      v18 = v67;
      v19 = (_DWORD *)*v67;
      *(_DWORD *)*v67 = 0;
      if (v7)
      {
        v20 = (_DWORD **)(v18 + 3);
        v21 = (double **)(v16 + 24);
        v22 = 0.0;
        v23 = v7;
        do
        {
          v24 = *v21;
          v21 += 3;
          v22 = v22 + 0.0909999982;
          *v24 = v22;
          v25 = *v20;
          v20 += 3;
          *v25 = 8;
          --v23;
        }
        while (v23);
      }
      if (v65)
      {
        v27 = *v17;
        v26 = v17 + 1;
        v28 = v27;
        v29 = v19 + 1;
        v30 = v65;
        do
        {
          v28 = v28 + 0.0909999982;
          *v26++ = v28;
          *v29++ = 4;
          --v30;
        }
        while (v30);
      }
      cf = v6;
      if (v7)
      {
        v31 = 1;
        while (!v65)
        {
LABEL_79:
          v46 = v31++ == v7;
          if (v46)
            goto LABEL_81;
        }
        v32 = v31 - 1;
        v63 = v31 - 2;
        v33 = **(double **)(v16 + 24 * v31);
        v34 = 1;
        while (1)
        {
          v35 = v34 - 1;
          v36 = *(double *)(*(_QWORD *)(v16 + 24 * v32) + 8 * v34);
          v37 = v74;
          if (v75 < 0)
            v37 = (void **)v74[0];
          v38 = (InputTranscoder::KeyboardLayoutImpl *)*((char *)v37 + v32);
          v39 = v72;
          if (v73 < 0)
            v39 = (void **)v72[0];
          v40 = *((unsigned __int8 *)v39 + v35);
          v41 = (char)v40;
          if ((_DWORD)v38 == 32 || v40 == 32)
          {
            SpaceCost = InputTranscoder::KeyboardLayoutImpl::getSpaceCost(v38, (const unsigned __int16 *)(char)v40, v11);
            if (SpaceCost == 0.0)
              v44 = 0.0;
            else
              v44 = SpaceCost;
            v43 = 32 * (SpaceCost != 0.0);
            if (v41 != 32 && SpaceCost != 0.0)
            {
              v46 = SpaceCost <= 0.100099996 && (_DWORD)v38 == 32;
              if (v46)
                v43 = 64;
              else
                v43 = 2;
              v44 = SpaceCost;
            }
          }
          else
          {
            v76[0] = (char)v40;
            KeyDistance = InputTranscoder::KeyboardLayoutImpl::getKeyDistance(a1, (const unsigned __int16 *)v38, v76);
            if (KeyDistance == 0.0)
            {
              v43 = 0;
              v44 = 0.0;
            }
            else
            {
              if (KeyDistance <= 0.154699996)
                v43 = 1;
              else
                v43 = 2;
              v44 = 0.0909999982;
            }
          }
          v47 = *(double *)(*(_QWORD *)(v70[0] + 24 * v32) + 8 * v35);
          v48 = v44 + v47;
          v49 = v44 + v47;
          if (v31 >= 2)
          {
            v49 = v44 + v47;
            if (v34 >= 2)
            {
              InsertionCost = InputTranscoder::KeyboardLayoutImpl::getInsertionCost(a1, CFStringFromString, cf, v31 - 1, (int)v34 - 2);
              v49 = v48;
              if (InsertionCost == 0.0)
              {
                v51 = InputTranscoder::KeyboardLayoutImpl::getInsertionCost(a1, CFStringFromString, cf, v63, (int)v34 - 1);
                v49 = v48;
                if (v51 == 0.0)
                  v49 = *(double *)(*(_QWORD *)(v70[0] + 24 * (v31 - 2)) + 8 * (v34 - 2))
                      + 0.0909999982;
              }
            }
          }
          v52 = v33 + 0.0909999982;
          *(double *)&__p.__begin_ = v33 + 0.0909999982;
          *(double *)&__p.__end_ = v36 + 0.0909999982;
          *(double *)&__p.__end_cap_.__value_ = v48;
          v79 = v49;
          p_p = (double *)&__p;
          v54 = 8;
          v55 = v33 + 0.0909999982;
          do
          {
            if (*(double *)((char *)&__p.__begin_ + v54) < v55)
            {
              v55 = *(double *)((char *)&__p.__begin_ + v54);
              p_p = (double *)((char *)&__p + v54);
            }
            v54 += 8;
          }
          while (v54 != 32);
          v33 = *p_p;
          v16 = v70[0];
          *(double *)(*(_QWORD *)(v70[0] + 24 * v31) + 8 * v34) = v33;
          if (v33 == v48)
          {
            v18 = v67;
            v56 = *(_DWORD *)(v67[3 * v32] + 4 * v35) | v43;
          }
          else if (v33 == v36 + 0.0909999982)
          {
            v18 = v67;
            v56 = *(_DWORD *)(v67[3 * v32] + 4 * v34) | 8;
          }
          else
          {
            if (v33 == v52)
            {
              if (*(char *)(a3 + 23) >= 0)
                v58 = a3;
              else
                v58 = *(_QWORD *)a3;
              v59 = *(unsigned __int8 *)(v58 + v35);
              v18 = v67;
              v57 = v67[3 * v31];
              if (v59 == 32)
                v60 = 32;
              else
                v60 = 4;
              v56 = *(_DWORD *)(v57 + 4 * v35) | v60;
              goto LABEL_67;
            }
            v18 = v67;
            v56 = *(_DWORD *)(v67[3 * v63] + 4 * v34 - 8) | 0x10;
          }
          v57 = v18[3 * v31];
LABEL_67:
          *(_DWORD *)(v57 + 4 * v34) = v56;
          v46 = v34++ == v65;
          if (v46)
            goto LABEL_79;
        }
      }
LABEL_81:
      v61 = *(unsigned int *)(v18[3 * v7] + 4 * v65);
      __p.__begin_ = (std::vector<unsigned int>::pointer)&v67;
      std::vector<std::vector<double>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__begin_ = (std::vector<unsigned int>::pointer)v70;
      std::vector<std::vector<double>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v6 = cf;
    }
    else
    {
      v61 = 0;
    }
  }
  else
  {
    v61 = 0;
    if (!v6)
      goto LABEL_84;
  }
  CFRelease(v6);
  CFStringFromString = v71;
LABEL_84:
  if (CFStringFromString)
LABEL_87:
    CFRelease(CFStringFromString);
  if (v73 < 0)
    operator delete(v72[0]);
  if (v75 < 0)
    operator delete(v74[0]);
  return v61;
}

void sub_22853AB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,const void *a23,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char *a39,uint64_t a40)
{
  a39 = &a20;
  std::vector<std::vector<double>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  nlp::CFScopedPtr<__CFString const*>::reset(&a23, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a24, 0);
  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  _Unwind_Resume(a1);
}

void InputTranscoder::KeyboardLayoutImpl::getCondensedPath(InputTranscoder::KeyboardLayoutImpl *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const __CFString *CFStringFromString;
  UniChar CharacterAtIndex;
  UniChar *v8;
  uint64_t v9;
  uint64_t v10;
  UniChar *v11;
  UniChar *v12;
  int v13;
  UniChar v14;
  UniChar v15;
  unsigned int v16;
  CFIndex v17;
  CFIndex v18;
  unsigned int v19;
  int v20;
  double Centroid;
  double v22;
  double v23;
  CFIndex v24;
  int v25;
  double v26;
  double v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  UniChar v39;
  UniChar v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  UniChar *v46;
  uint64_t v47;
  CFIndex Length;
  UniChar v49;
  UniChar v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  UniChar *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  UniChar *v60;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    return;
  }
  CFStringFromString = nlp::createCFStringFromString(a2);
  CharacterAtIndex = CFStringGetCharacterAtIndex(CFStringFromString, 0);
  v8 = (UniChar *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(1);
  v10 = v9;
  *v8 = CharacterAtIndex;
  v11 = v8 + 1;
  if (CFStringGetLength(CFStringFromString) > 1)
  {
    v12 = &v8[v10];
    if (CFStringGetLength(CFStringFromString) == 2)
    {
      v13 = CFStringGetCharacterAtIndex(CFStringFromString, 0);
      if (v13 != CFStringGetCharacterAtIndex(CFStringFromString, 1))
      {
        v14 = CFStringGetCharacterAtIndex(CFStringFromString, 1);
        v15 = v14;
        if (v10 < 2)
        {
          if ((unint64_t)(2 * v10) <= 2)
            v58 = 2;
          else
            v58 = 2 * v10;
          if ((unint64_t)(2 * v10) >= 0x7FFFFFFFFFFFFFFELL)
            v59 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59)
            v59 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v59);
          *(_WORD *)(v59 + 2) = v15;
          *(_WORD *)v59 = *v8;
          v60 = (UniChar *)v59;
          v11 = (UniChar *)(v59 + 4);
          operator delete(v8);
          v8 = v60;
        }
        else
        {
          v8[1] = v14;
          v11 = v8 + 2;
        }
      }
      InputTranscoder::toUTF8String(a3, v8, (uint64_t)v11);
    }
    else
    {
      v16 = 0;
      LODWORD(v17) = 1;
LABEL_13:
      v18 = v16;
      v19 = v17;
      while (1)
      {
        v17 = v19 + 1;
        if (CFStringGetLength(CFStringFromString) <= v17)
          break;
        v20 = CFStringGetCharacterAtIndex(CFStringFromString, v18);
        Centroid = InputTranscoder::KeyboardLayoutImpl::getCentroid(a1, v20);
        v23 = v22;
        v24 = v19;
        v25 = CFStringGetCharacterAtIndex(CFStringFromString, v19);
        v26 = InputTranscoder::KeyboardLayoutImpl::getCentroid(a1, v25);
        v28 = v27;
        v29 = CFStringGetCharacterAtIndex(CFStringFromString, v19 + 1);
        v30 = InputTranscoder::KeyboardLayoutImpl::getCentroid(a1, v29);
        v32 = v31;
        v33 = Centroid - v26;
        *(float *)&v31 = v23 - v28;
        v34 = hypotf(v33, *(float *)&v31);
        v35 = v26 - v30;
        v36 = v28 - v32;
        *(float *)&v28 = v34 + hypotf(v35, v36);
        v37 = Centroid - v30;
        v38 = v23 - v32;
        ++v19;
        if (vabds_f32(*(float *)&v28, hypotf(v37, v38)) >= 0.00000011921)
        {
          v39 = CFStringGetCharacterAtIndex(CFStringFromString, v24);
          v40 = v39;
          v16 = v17 - 1;
          if (v11 >= v12)
          {
            v41 = (char *)v11 - (char *)v8;
            if ((char *)v11 - (char *)v8 <= -3)
              std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
            v42 = v41 >> 1;
            if ((char *)v12 - (char *)v8 <= (unint64_t)((v41 >> 1) + 1))
              v43 = v42 + 1;
            else
              v43 = (char *)v12 - (char *)v8;
            if ((unint64_t)((char *)v12 - (char *)v8) >= 0x7FFFFFFFFFFFFFFELL)
              v44 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v44 = v43;
            if (v44)
              v44 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v44);
            else
              v45 = 0;
            v46 = (UniChar *)(v44 + 2 * v42);
            *v46 = v40;
            if (v11 == v8)
            {
              v11 = v46 + 1;
            }
            else
            {
              v47 = 0;
              do
              {
                v46[v47 - 1] = v11[v47 - 1];
                --v47;
              }
              while (&v11[v47] != v8);
              v11 = v46 + 1;
              v46 = (UniChar *)((char *)v46 + v47 * 2);
            }
            v12 = (UniChar *)(v44 + 2 * v45);
            operator delete(v8);
            v8 = v46;
          }
          else
          {
            *v11++ = v39;
          }
          goto LABEL_13;
        }
      }
      Length = CFStringGetLength(CFStringFromString);
      v49 = CFStringGetCharacterAtIndex(CFStringFromString, Length - 1);
      v50 = v49;
      if (v11 >= v12)
      {
        v52 = (char *)v11 - (char *)v8;
        if ((char *)v11 - (char *)v8 <= -3)
          std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
        v53 = v52 >> 1;
        if ((char *)v12 - (char *)v8 <= (unint64_t)((v52 >> 1) + 1))
          v54 = v53 + 1;
        else
          v54 = (char *)v12 - (char *)v8;
        if ((unint64_t)((char *)v12 - (char *)v8) >= 0x7FFFFFFFFFFFFFFELL)
          v55 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v55 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v55);
        v56 = (UniChar *)(v55 + 2 * v53);
        *v56 = v50;
        v51 = (uint64_t)(v56 + 1);
        if (v11 != v8)
        {
          v57 = 0;
          do
          {
            v56[v57 - 1] = v11[v57 - 1];
            --v57;
          }
          while (&v11[v57] != v8);
          v56 = (UniChar *)((char *)v56 + v57 * 2);
        }
        operator delete(v8);
        v8 = v56;
      }
      else
      {
        *v11 = v49;
        v51 = (uint64_t)(v11 + 1);
      }
      InputTranscoder::toUTF8String(a3, v8, v51);
    }
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  operator delete(v8);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_22853B0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  operator delete(v10);
  nlp::CFScopedPtr<__CFString const*>::reset(&a10, 0);
  _Unwind_Resume(a1);
}

void InputTranscoder::toUTF8String(_QWORD *a1, const UniChar *a2, uint64_t a3)
{
  const __CFString *v4;

  v4 = CFStringCreateWithCharacters(0, a2, (a3 - (uint64_t)a2) >> 1);
  nlp::getUTF8StringFromCFString(v4, a1);
  if (v4)
    CFRelease(v4);
}

void sub_22853B16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

double InputTranscoder::KeyboardLayoutImpl::getDistanceFromKey(double a1, double a2, uint64_t a3, double *a4)
{
  double v4;
  float v5;
  float v6;

  v4 = vabdd_f64(a2, a4[1]);
  v5 = vabdd_f64(a1, *a4) - a4[4] * 0.400000006;
  if (v5 < 0.0)
    v5 = 0.0;
  v6 = v4 - a4[5] * 0.400000006;
  if (v6 < 0.0)
    v6 = 0.0;
  return hypotf(v5, v6);
}

void InputTranscoder::KeyboardLayoutImpl::~KeyboardLayoutImpl(InputTranscoder::KeyboardLayoutImpl *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F111FB8;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24F111FB8;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t InputTranscoder::KeyboardLayoutImpl::isCurrentLayoutAlphabetic(InputTranscoder::KeyboardLayoutImpl *this)
{
  return *((unsigned __int8 *)this + 8);
}

char *std::vector<ITKeyInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ITKeyInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ITKeyInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

void std::vector<nlp::CFScopedPtr<__CFString const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        nlp::CFScopedPtr<__CFString const*>::reset(--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<InputTranscoder::LayoutInfoAssorted *,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>::__shared_ptr_default_delete<InputTranscoder::LayoutInfoAssorted,InputTranscoder::LayoutInfoAssorted>,std::allocator<InputTranscoder::LayoutInfoAssorted>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22E2B18DCLL);
}

uint64_t std::__shared_ptr_pointer<InputTranscoder::LayoutInfoAssorted *,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>::__shared_ptr_default_delete<InputTranscoder::LayoutInfoAssorted,InputTranscoder::LayoutInfoAssorted>,std::allocator<InputTranscoder::LayoutInfoAssorted>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<InputTranscoder::LayoutInfoAssorted>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<InputTranscoder::LayoutInfoAssorted *,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>::__shared_ptr_default_delete<InputTranscoder::LayoutInfoAssorted,InputTranscoder::LayoutInfoAssorted>,std::allocator<InputTranscoder::LayoutInfoAssorted>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<InputTranscoder::LayoutInfoAssorted>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void *v2;
  void **v3;

  if (result)
  {
    v1 = result;
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(result + 80);
    v3 = (void **)(v1 + 24);
    std::vector<nlp::CFScopedPtr<__CFString const*>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x22E2B18DCLL);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&xmmword_253F89F30 + 1);
  if (prime <= *((_QWORD *)&xmmword_253F89F30 + 1))
  {
    if (prime >= *((_QWORD *)&xmmword_253F89F30 + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_253F89F48 / *(float *)&dword_253F89F50);
    if (*((_QWORD *)&xmmword_253F89F30 + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_253F89F30 + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)xmmword_253F89F30;
      *(_QWORD *)&xmmword_253F89F30 = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&xmmword_253F89F30 + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)xmmword_253F89F30;
  *(_QWORD *)&xmmword_253F89F30 = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&xmmword_253F89F30 + 1) = prime;
  do
    *(_QWORD *)(xmmword_253F89F30 + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_253F89F40;
  if (qword_253F89F40)
  {
    v7 = *(_QWORD *)(qword_253F89F40 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(xmmword_253F89F30 + 8 * v7) = &qword_253F89F40;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(xmmword_253F89F30 + 8 * v13))
        {
          *(_QWORD *)(xmmword_253F89F30 + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(xmmword_253F89F30 + 8 * v13);
        **(_QWORD **)(xmmword_253F89F30 + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<InputTranscoder::LayoutInfoAssorted>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(std::__shared_weak_count **)(v1 + 48);
      if (v2)
      {
        p_shared_owners = (unint64_t *)&v2->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      if (*(char *)(v1 + 39) < 0)
        operator delete(*(void **)(v1 + 16));
    }
    operator delete((void *)v1);
  }
}

_QWORD *std::vector<ITKeyInfo>::__init_with_size[abi:ne180100]<std::__wrap_iter<ITKeyInfo const*>,std::__wrap_iter<ITKeyInfo const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<ITKeyInfo>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22853B75C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::KeyCandidateImpl>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<InputTranscoder::KeyCandidateImpl>,std::reverse_iterator<InputTranscoder::KeyCandidateImpl*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8); i != v3; i += 32)
    {
      if (*(char *)(i + 23) < 0)
        operator delete(*(void **)i);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<InputTranscoder::KeyCandidateImpl>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<InputTranscoder::KeyCandidateImpl>,InputTranscoder::KeyCandidateImpl*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 8);
    for (i = **(_QWORD **)(a1 + 16); i != v3; i -= 32)
    {
      if (*(char *)(i - 9) < 0)
        operator delete(*(void **)(i - 32));
    }
  }
  return a1;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22853B91C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

_QWORD *std::vector<std::vector<double>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<ITKeyInfo>::__throw_length_error[abi:ne180100]();
    v5 = 3 * a2;
    v6 = 24 * a2;
    v7 = operator new(24 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[v5];
    a1[2] = v8;
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v10 = *(const void **)a3;
      v9 = *(_QWORD *)(a3 + 8);
      v11 = v9 - *(_QWORD *)a3;
      if (v9 != *(_QWORD *)a3)
      {
        std::vector<double>::__vallocate[abi:ne180100](v7, v11 >> 3);
        v12 = (char *)v7[1];
        memmove(v12, v10, v11);
        v7[1] = &v12[8 * (v11 >> 3)];
      }
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_22853BA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<double>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<double>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,InputTranscoder::KeyboardLayoutImpl::enumerateNearestKeys(CGPoint,void({block_pointer})(ITKeyInfo,BOOL *))::$_0 &,std::__wrap_iter<ITKeyInfo*>>(uint64_t a1, uint64_t a2, double **a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  float v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  double *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  float v34;
  float v35;
  float v36;
  double v37;
  float v38;
  float v39;
  double v40;
  double v41;
  double v42;
  __int128 v43;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = (double *)(a1 + 56 * (v4 >> 1));
    v10 = **a3;
    v11 = (*a3)[1];
    v12 = vabdd_f64(v11, v9[1]);
    v13 = vabdd_f64(v10, *v9) - v9[4] * 0.400000006;
    if (v13 < 0.0)
      v13 = 0.0;
    v14 = v12 - v9[5] * 0.400000006;
    if (v14 < 0.0)
      v14 = 0.0;
    v15 = hypotf(v13, v14);
    v17 = *(double *)(a2 - 48);
    v16 = (double *)(a2 - 56);
    v18 = *(double *)(a2 - 24);
    v19 = *(double *)(a2 - 16);
    v42 = *(double *)(a2 - 56);
    v20 = vabdd_f64(v10, v42);
    v21 = vabdd_f64(v11, v17);
    v22 = v18 * 0.400000006;
    v23 = v19 * 0.400000006;
    v24 = v20 - v18 * 0.400000006;
    if (v24 < 0.0)
      v24 = 0.0;
    v25 = v21 - v23;
    if (v25 < 0.0)
      v25 = 0.0;
    if (v15 > hypotf(v24, v25))
    {
      v40 = v19;
      v41 = v18;
      v43 = *(_OWORD *)(a2 - 40);
      v26 = *(_QWORD *)(a2 - 8);
      do
      {
        v27 = v16;
        v16 = v9;
        v28 = *(_OWORD *)v9;
        v29 = *((_OWORD *)v9 + 1);
        v30 = *((_OWORD *)v9 + 2);
        v27[6] = v9[6];
        *((_OWORD *)v27 + 1) = v29;
        *((_OWORD *)v27 + 2) = v30;
        *(_OWORD *)v27 = v28;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (double *)(a1 + 56 * v8);
        v31 = **a3;
        v32 = (*a3)[1];
        v33 = vabdd_f64(v32, v9[1]);
        v34 = vabdd_f64(v31, *v9) - v9[4] * 0.400000006;
        if (v34 < 0.0)
          v34 = 0.0;
        v35 = v33 - v9[5] * 0.400000006;
        if (v35 < 0.0)
          v35 = 0.0;
        v36 = hypotf(v34, v35);
        v37 = vabdd_f64(v32, v17);
        v38 = vabdd_f64(v31, v42) - v22;
        if (v38 < 0.0)
          v38 = 0.0;
        v39 = v37 - v23;
        if (v39 < 0.0)
          v39 = 0.0;
      }
      while (v36 > hypotf(v38, v39));
      *v16 = v42;
      v16[1] = v17;
      *((_OWORD *)v16 + 1) = v43;
      v16[4] = v41;
      v16[5] = v40;
      *((_QWORD *)v16 + 6) = v26;
    }
  }
}

float64_t InputTranscoder::PathSample::lerp@<D0>(float64x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  float64_t result;

  v4 = a4;
  v5 = vmlaq_n_f64(*a1, vsubq_f64(*(float64x2_t *)a2, *a1), v4);
  v6 = vmlaq_n_f64(a1[1], vsubq_f64(*(float64x2_t *)(a2 + 16), a1[1]), v4);
  *(_BYTE *)(a3 + 58) = 0;
  *(_WORD *)(a3 + 56) = 0;
  *(float64x2_t *)a3 = v5;
  *(float64x2_t *)(a3 + 16) = v6;
  *(double *)(a3 + 48) = a1[3].f64[0] + v4 * (*(double *)(a2 + 48) - a1[3].f64[0]);
  result = a1[2].f64[0] + v4 * (*(double *)(a2 + 32) - a1[2].f64[0]);
  *(float64_t *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

unint64_t InputTranscoder::Path::inflection_point_count(InputTranscoder::Path *this, unsigned int a2, unsigned int a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unsigned int *v13;
  char *v14;
  unsigned int v15;

  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 == v3)
  {
    v11 = (char *)*((_QWORD *)this + 4);
  }
  else
  {
    v5 = (v4 - v3) >> 2;
    do
    {
      v6 = v5 >> 1;
      v7 = (unsigned int *)&v3[4 * (v5 >> 1)];
      v9 = *v7;
      v8 = (char *)(v7 + 1);
      v5 += ~(v5 >> 1);
      if (v9 < a2)
        v3 = v8;
      else
        v5 = v6;
    }
    while (v5);
    if (v4 == v3)
    {
      v11 = (char *)*((_QWORD *)this + 4);
    }
    else
    {
      v10 = (v4 - v3) >> 2;
      v11 = v3;
      do
      {
        v12 = v10 >> 1;
        v13 = (unsigned int *)&v11[4 * (v10 >> 1)];
        v15 = *v13;
        v14 = (char *)(v13 + 1);
        v10 += ~(v10 >> 1);
        if (v15 > a3)
          v10 = v12;
        else
          v11 = v14;
      }
      while (v10);
    }
    v4 = v3;
  }
  return (unint64_t)(v11 - v4) >> 2;
}

double InputTranscoder::Path::turn_angle(InputTranscoder::Path *this, unsigned int a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  long double v17;
  double v18;
  double v19;

  v2 = 0.0;
  if (a2)
  {
    v3 = a2 + 1;
    v4 = *(_QWORD *)this;
    if (v3 != (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 6)
    {
      v5 = a2;
      v6 = (double *)(v4 + ((unint64_t)a2 << 6));
      v7 = *v6;
      v8 = v6[1];
      v9 = (double *)(v4 + (v3 << 6));
      v10 = *v9 - *v6;
      v11 = v9[1] - v8;
      if (hypot(v10, v11) >= 0.00001)
      {
        v12 = v5 << 6;
        while (1)
        {
          v13 = v12 - 64;
          if (!v12)
            break;
          v14 = v4 + v12;
          v15 = v7 - *(double *)(v14 - 64);
          v16 = v8 - *(double *)(v14 - 56);
          v17 = hypot(v15, v16);
          v12 = v13;
          if (v17 >= 0.00001)
          {
            v18 = atan2(v16, v15);
            v2 = atan2(v11, v10) - v18;
            if (v2 >= -3.14159265)
            {
              if (v2 <= 3.14159265)
                return v2;
              v19 = -6.28318531;
            }
            else
            {
              v19 = 6.28318531;
            }
            return v2 + v19;
          }
        }
      }
    }
  }
  return v2;
}

void InputTranscoder::Path::resize(InputTranscoder::Path *this, unint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;

  if (a2 != (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 6)
  {
    std::vector<InputTranscoder::PathSample>::resize((uint64_t)this, a2);
    v5 = (_DWORD *)*((_QWORD *)this + 3);
    v4 = (_DWORD *)*((_QWORD *)this + 4);
    if (v4 == v5)
    {
      v5 = (_DWORD *)*((_QWORD *)this + 4);
    }
    else
    {
      v6 = v4 - v5;
      do
      {
        v7 = v6 >> 1;
        v8 = &v5[v6 >> 1];
        v10 = *v8;
        v9 = v8 + 1;
        v6 += ~(v6 >> 1);
        if (v10 < a2)
          v5 = v9;
        else
          v6 = v7;
      }
      while (v6);
    }
    if (v4 != v5)
      *((_QWORD *)this + 4) = v5;
  }
}

void std::vector<InputTranscoder::PathSample>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (a2 << 6);
  }
  else
  {
    std::vector<InputTranscoder::PathSample>::__append((void **)a1, a2 - v2);
  }
}

void InputTranscoder::Path::append(void **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((char *)v7 - (_BYTE *)*a1) >> 6;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 58)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 5 > v13)
      v13 = v14 >> 5;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v15 = 0x3FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[64 * v12];
    v18 = &v16[64 * v15];
    v19 = *a2;
    v20 = a2[1];
    v21 = a2[3];
    *((_OWORD *)v17 + 2) = a2[2];
    *((_OWORD *)v17 + 3) = v21;
    *(_OWORD *)v17 = v19;
    *((_OWORD *)v17 + 1) = v20;
    v11 = v17 + 64;
    v23 = (char *)*a1;
    v22 = (char *)a1[1];
    if (v22 != *a1)
    {
      do
      {
        v24 = *((_OWORD *)v22 - 4);
        v25 = *((_OWORD *)v22 - 3);
        v26 = *((_OWORD *)v22 - 2);
        *(_OWORD *)(v17 - 21) = *(_OWORD *)(v22 - 21);
        *((_OWORD *)v17 - 3) = v25;
        *((_OWORD *)v17 - 2) = v26;
        *((_OWORD *)v17 - 4) = v24;
        v17 -= 64;
        v22 -= 64;
      }
      while (v22 != v23);
      v22 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v11;
    a1[2] = v18;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[3];
    v7[2] = a2[2];
    v7[3] = v10;
    *v7 = v8;
    v7[1] = v9;
    v11 = v7 + 4;
  }
  a1[1] = v11;
}

std::vector<unsigned int> *InputTranscoder::Path::set_sample_is_inflection_point(InputTranscoder::Path *this, std::vector<unsigned int>::value_type a2)
{
  std::vector<unsigned int> *result;
  std::vector<unsigned int>::const_iterator v4;
  const unsigned int *v5;
  const unsigned int *v6;
  std::vector<unsigned int>::value_type v7;
  std::vector<unsigned int>::value_type __x;

  __x = a2;
  v4.__i_ = (std::__wrap_iter<const unsigned int *>::iterator_type)*((_QWORD *)this + 3);
  v5 = (const unsigned int *)*((_QWORD *)this + 4);
  result = (std::vector<unsigned int> *)((char *)this + 24);
  v6 = v5;
  while (v6 != v4.__i_)
  {
    v7 = *--v6;
    if (v7 <= a2)
    {
      v4.__i_ = v6 + 1;
      break;
    }
  }
  if (v4.__i_ == v5 || *v4.__i_ != a2)
    return (std::vector<unsigned int> *)std::vector<unsigned int>::insert(result, v4, &__x).__i_;
  return result;
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::const_reference v3;
  std::vector<unsigned int>::pointer end;
  const unsigned int *begin;
  int64_t v7;
  unsigned int *v8;
  unsigned int *value;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v11;
  std::vector<unsigned int>::pointer v12;
  std::vector<unsigned int>::pointer v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  std::vector<unsigned int>::value_type *v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int *v27;
  std::vector<unsigned int>::pointer v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  std::vector<unsigned int>::pointer v32;
  int64_t v33;
  unsigned int *v34;
  size_t v35;
  unsigned int *v36;
  std::vector<unsigned int>::pointer v37;

  v3 = __x;
  begin = this->__begin_;
  end = this->__end_;
  v7 = (char *)__position.__i_ - (char *)this->__begin_;
  v8 = (std::vector<unsigned int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    v15 = end - begin + 1;
    if (v15 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v17 = v7 >> 2;
    v18 = (char *)value - (char *)begin;
    if (v18 >> 1 > v15)
      v15 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v15;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v19);
    else
      v20 = 0;
    v21 = (std::vector<unsigned int>::value_type *)&v20[4 * v17];
    v22 = (unsigned int *)&v20[4 * v19];
    if (v17 == v19)
    {
      if (v7 < 1)
      {
        if (begin == __position.__i_)
          v24 = 1;
        else
          v24 = v7 >> 1;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v24);
        v21 = (std::vector<unsigned int>::value_type *)&v25[v24 & 0xFFFFFFFFFFFFFFFCLL];
        v22 = (unsigned int *)&v25[4 * v26];
        if (v20)
        {
          v27 = (unsigned int *)&v25[4 * v26];
          operator delete(v20);
          v22 = v27;
        }
      }
      else
      {
        v23 = v17 + 2;
        if (v17 >= -1)
          v23 = v17 + 1;
        v21 -= v23 >> 1;
      }
    }
    *v21 = *v3;
    v28 = this->__begin_;
    v29 = v21;
    if (this->__begin_ != v8)
    {
      v30 = v8;
      v29 = v21;
      do
      {
        v31 = *--v30;
        *--v29 = v31;
      }
      while (v30 != v28);
    }
    v32 = this->__end_;
    v33 = (char *)v32 - (char *)v8;
    if (v32 != v8)
    {
      v34 = v8;
      v35 = (char *)v32 - (char *)v8;
      v36 = v22;
      memmove(v21 + 1, v34, v35);
      v22 = v36;
    }
    v37 = this->__begin_;
    this->__begin_ = v29;
    this->__end_ = (std::vector<unsigned int>::value_type *)((char *)v21 + v33 + 4);
    this->__end_cap_.__value_ = v22;
    if (v37)
      operator delete(v37);
    return (std::vector<unsigned int>::iterator)v21;
  }
  else if (v8 == end)
  {
    *v8 = *__x;
    this->__end_ = v8 + 1;
  }
  else
  {
    v11 = v8 + 1;
    v12 = end - 1;
    v13 = this->__end_;
    while (v12 < end)
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    this->__end_ = v13;
    if (end != v11)
      memmove(&end[-(end - v11)], v8, (char *)end - (char *)v11);
    if (v8 <= v3)
      v3 += this->__end_ > v3;
    *v8 = *v3;
  }
  return (std::vector<unsigned int>::iterator)v8;
}

void sub_22853C39C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t InputTranscoder::Path::is_local_max(_QWORD *a1, unsigned int a2, uint64_t a3, double a4)
{
  uint64_t v5;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  unsigned int i;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v17 = a2;
  v5 = *(_QWORD *)(a3 + 24);
  if (!v5)
LABEL_15:
    std::__throw_bad_function_call[abi:ne180100]();
  v9 = (*(double (**)(uint64_t, unsigned int *))(*(_QWORD *)v5 + 48))(v5, &v17);
  v10 = a2;
  v11 = *(double *)(*a1 + ((unint64_t)a2 << 6) + 32);
  while (v10 && *(double *)(*a1 + ((unint64_t)(v10 - 1) << 6) + 32) > v11 - a4)
  {
    v18 = v10 - 1;
    v12 = *(_QWORD *)(a3 + 24);
    if (!v12)
      goto LABEL_15;
    --v10;
    if ((*(double (**)(uint64_t, int *))(*(_QWORD *)v12 + 48))(v12, &v18) >= v9)
      return 0;
  }
  v13 = v11 + a4;
  for (i = a2 + 1;
        i < (unint64_t)((uint64_t)(a1[1] - *a1) >> 6) && *(double *)(*a1 + ((unint64_t)i << 6) + 32) < v13;
        ++i)
  {
    v19 = i;
    v15 = *(_QWORD *)(a3 + 24);
    if (!v15)
      goto LABEL_15;
    if ((*(double (**)(uint64_t, unsigned int *))(*(_QWORD *)v15 + 48))(v15, &v19) >= v9)
      return 0;
  }
  return 1;
}

void InputTranscoder::Path::curvature(InputTranscoder::Path *this, unsigned int a2)
{
  float v2;

  if (a2 && ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 6) - 1 != a2)
  {
    v2 = (*(double *)(*(_QWORD *)this + ((unint64_t)(a2 + 1) << 6) + 32)
        - *(double *)(*(_QWORD *)this + ((unint64_t)(a2 - 1) << 6) + 32))
       * 0.5;
    if (v2 != 0.0)
      InputTranscoder::Path::turn_angle(this, a2);
  }
}

uint64_t InputTranscoder::Path::is_curvature_local_max(InputTranscoder::Path *this, unsigned int a2, double a3)
{
  double v6;
  uint64_t is_local_max;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  InputTranscoder::Path::curvature(this, a2);
  if (fabs(v6) <= 0.02)
    return 0;
  v11[0] = &off_24F1120F0;
  v11[1] = this;
  v12 = v11;
  is_local_max = InputTranscoder::Path::is_local_max(this, a2, (uint64_t)v11, a3);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_7;
  }
  if (v12)
  {
    v9 = 5;
LABEL_7:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return is_local_max;
}

void sub_22853C63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::vector<InputTranscoder::PathSample>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      std::vector<InputTranscoder::InputFeature>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 6;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<InputTranscoder::CTCSurfaceFormOutput>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[64 * v10];
    v15 = &v13[64 * v12];
    bzero(v14, a2 << 6);
    v16 = &v14[64 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 4);
        v20 = *((_OWORD *)v17 - 3);
        v21 = *((_OWORD *)v17 - 2);
        *(_OWORD *)(v14 - 21) = *(_OWORD *)(v17 - 21);
        *((_OWORD *)v14 - 3) = v20;
        *((_OWORD *)v14 - 2) = v21;
        *((_OWORD *)v14 - 4) = v19;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::__function::__func<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0,std::allocator<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0>,double ()(unsigned int)>::~__func()
{
  JUMPOUT(0x22E2B18DCLL);
}

_QWORD *std::__function::__func<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0,std::allocator<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0>,double ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1120F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0,std::allocator<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0>,double ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1120F0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0,std::allocator<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0>,double ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  double v2;

  InputTranscoder::Path::curvature(*(InputTranscoder::Path **)(a1 + 8), *a2);
  return fabs(v2);
}

uint64_t std::__function::__func<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0,std::allocator<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0>,double ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0,std::allocator<InputTranscoder::Path::is_curvature_local_max(unsigned int,double)::$_0>,double ()(unsigned int)>::target_type()
{
}

CFErrorRef InputTranscoder::createErrorWithMessage(uint64_t a1)
{
  __CFDictionary *Mutable;
  const char *v3;
  CFStringRef v4;
  CFErrorRef v5;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDBD3A0], v4);
  v5 = CFErrorCreate(0, CFSTR("com.apple.InputTranscoder"), 0, Mutable);
  if (v4)
    CFRelease(v4);
  if (Mutable)
    CFRelease(Mutable);
  return v5;
}

void sub_22853C930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void InputTranscoder::makeStaticLexicon(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CFStringRef CFStringFromString;
  __CFDictionary *Mutable;
  const void *v5;
  uint64_t v6;
  __CFError *v7;
  void *exception;
  const void *v9[4];
  __CFError *v10;
  __CFDictionary *v11;
  CFStringRef v12;

  CFStringFromString = nlp::createCFStringFromString(a1);
  v12 = CFStringFromString;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v11 = Mutable;
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F198], CFStringFromString);
  v5 = (const void *)*MEMORY[0x24BDBD270];
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F188], (const void *)*MEMORY[0x24BDBD270]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x24BE5F190], v5);
  v10 = 0;
  v6 = LXLexiconCreate();
  *a2 = v6;
  if (!v6)
  {
    v7 = v10;
    v9[3] = v10;
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Failed to create static lexicon");
    nlp::ResourceCreationException::ResourceCreationException((uint64_t)exception, v9, v7);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (CFStringFromString)
    CFRelease(CFStringFromString);
}

void sub_22853CA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, uint64_t a17, const void *a18)
{
  const void **v18;
  void *v19;
  int v20;
  uint64_t v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      nlp::CFScopedPtr<__CFError *>::reset(&a16, 0);
      nlp::CFScopedPtr<_LXLexicon const*>::reset(v18, 0);
      nlp::CFScopedPtr<__CFDictionary *>::reset(&a18, 0);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v21 - 40), 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v19);
  goto LABEL_6;
}

void InputTranscoder::splitAtLastWord(char *a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v4 = a1[23];
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *(char **)a1;
  v7 = a1[23];
  if (v5)
    v7 = *((_QWORD *)a1 + 1);
  v8 = v7 + 1;
  do
  {
    v9 = v8 - 1;
    if (v8 == 1)
      goto LABEL_20;
    v10 = v6[v8-- - 2];
  }
  while (v10 != 32);
  if (!v9)
  {
LABEL_20:
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[1],std::string const&,0>(a2, (char *)&str_3_2, (__int128 *)a1);
    return;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v15, v6, &v6[v9], v9);
  v11 = a1[23];
  if ((v11 & 0x80u) == 0)
    v12 = a1;
  else
    v12 = *(char **)a1;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)a1 + 1);
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, &v12[v9], &v12[v11], v11 - v9);
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(a2, (__int128 *)v15, (__int128 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_22853CC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *InputTranscoder::removeUnwantedCharacters@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  signed __int8 v4;
  std::string *v5;
  std::string::size_type size;
  unsigned __int8 *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  std::string *v17;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = v3;
  v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) == 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
  if ((v3 & 0x80u) == 0)
    v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v8 = a2->__r_.__value_.__l.__size_;
  v9 = &v7[v8];
  if (v8)
  {
    v10 = v8 - 1;
    v11 = MEMORY[0x24BDAC740];
    while (1)
    {
      v12 = *v7;
      if (v12 == 39 || (v12 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v12 + 60) & 0x400) != 0)
        break;
      ++v7;
      --v10;
      if (v7 == v9)
        goto LABEL_27;
    }
    if (v7 == v9 || v7 + 1 == v9)
    {
      v9 = v7;
    }
    else
    {
      v13 = 1;
      v9 = v7;
      do
      {
        v14 = v7[v13];
        if (v14 != 39 && ((char)v14 < 0 || (*(_DWORD *)(v11 + 4 * v14 + 60) & 0x400) == 0))
          *v9++ = v14;
        ++v13;
        --v10;
      }
      while (v10);
      v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      size = a2->__r_.__value_.__l.__size_;
      v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
  }
LABEL_27:
  v15 = (unsigned __int8 *)v5 + size;
  v16 = (unsigned __int8 *)a2 + v3;
  if (v4 >= 0)
  {
    v17 = a2;
  }
  else
  {
    v16 = v15;
    v17 = v5;
  }
  return std::string::erase(a2, v9 - (unsigned __int8 *)v17, v16 - v9);
}

void sub_22853CD74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void InputTranscoder::toLower(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _BYTE *v4;
  uint64_t v5;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (_BYTE *)a2;
  else
    v4 = *(_BYTE **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  for (; v5; --v5)
  {
    *v4 = __tolower((char)*v4);
    ++v4;
  }
}

void sub_22853CE0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *InputTranscoder::removeSpace@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  char v4;
  std::string::size_type v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  int v12;
  std::string::size_type v13;
  std::string::size_type v14;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = v3;
  v5 = a2->__r_.__value_.__r.__words[0];
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((v3 & 0x80u) == 0)
    v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v8 = a2->__r_.__value_.__l.__size_;
  v9 = (std::string *)((char *)v7 + v8);
  if (v8)
  {
    v10 = v8 - 1;
    while (v7->__r_.__value_.__s.__data_[0] != 32)
    {
      v7 = (std::string *)((char *)v7 + 1);
      --v10;
      if (v7 == v9)
        goto LABEL_23;
    }
    if (v7 == v9 || (std::string *)((char *)&v7->__r_.__value_.__l.__data_ + 1) == v9)
    {
      v9 = v7;
    }
    else
    {
      v11 = 1;
      v9 = v7;
      do
      {
        v12 = v7->__r_.__value_.__s.__data_[v11];
        if (v12 != 32)
        {
          v9->__r_.__value_.__s.__data_[0] = v12;
          v9 = (std::string *)((char *)v9 + 1);
        }
        ++v11;
        --v10;
      }
      while (v10);
      v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v5 = a2->__r_.__value_.__r.__words[0];
      size = a2->__r_.__value_.__l.__size_;
      v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
  }
LABEL_23:
  v13 = v5 + size;
  v14 = (std::string::size_type)a2 + v3;
  if (v4 >= 0)
    v5 = (std::string::size_type)a2;
  else
    v14 = v13;
  return std::string::erase(a2, (std::string::size_type)v9 - v5, v14 - (_QWORD)v9);
}

void sub_22853CF24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL InputTranscoder::stringHasSeparator(char **a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  char *v5;
  const std::string::value_type *v6;
  int v7;
  int v8;
  _BOOL8 v10;
  char *v11;
  char *v12;
  int v13;
  void *v14;
  std::string *v15;
  int64_t size;
  char *v17;
  int v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  std::string v25;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  v5 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v5 < 0)
    v5 = a1[1];
  if (!v5)
    return 0;
  if (v2 != 5)
    goto LABEL_14;
  v6 = *(const std::string::value_type **)a2;
  if (v3 >= 0)
    v6 = (const std::string::value_type *)a2;
  v7 = *(_DWORD *)v6;
  v8 = *((unsigned __int8 *)v6 + 4);
  if (v7 == 1667330163 && v8 == 101)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, " ");
  }
  else
  {
LABEL_14:
    if (v3 < 0)
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v25 = *(std::string *)a2;
  }
  v11 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v11 >= 0)
    v12 = (char *)a1;
  else
    v12 = *a1;
  v13 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
  v14 = (void *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v25;
  else
    v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    size = v25.__r_.__value_.__l.__size_;
  if (!size)
  {
    v10 = 1;
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v10;
    goto LABEL_45;
  }
  if ((char)v11 < 0)
    v11 = a1[1];
  v17 = &v11[(_QWORD)v12];
  if ((uint64_t)v11 >= size)
  {
    v18 = v15->__r_.__value_.__s.__data_[0];
    v19 = v12;
    do
    {
      v20 = &v11[-size];
      if (v20 == (char *)-1)
        break;
      v21 = (char *)memchr(v19, v18, (size_t)(v20 + 1));
      if (!v21)
        break;
      v22 = v21;
      if (!memcmp(v21, v15, size))
        goto LABEL_38;
      v19 = v22 + 1;
      v11 = (char *)(v17 - (v22 + 1));
    }
    while ((uint64_t)v11 >= size);
  }
  v22 = v17;
LABEL_38:
  v10 = v22 != v17 && v22 - v12 != -1;
  if (v13 < 0)
LABEL_45:
    operator delete(v14);
  return v10;
}

void InputTranscoder::enumerateLDAssets()
{
  _QWORD v0[3];
  char v1;

  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  v1 = 0;
  LDEnumerateAssetDataItems();
  _Block_object_dispose(v0, 8);
}

void sub_22853D164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15InputTranscoder17enumerateLDAssetsEPK10__CFLocaleU13block_pointerFvPK7__CFURL17LDAssetBundleTypeS2_PK10__CFStringPbE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *a6;
  return result;
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[1],std::string const&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_22853D208(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_22853D340(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x24BDBB7A8]();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x24BDBBA88](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x24BDBBA98](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x24BDBBAA8](bundleID);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x24BDBBE70](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x24BDBBF48](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x24BDBBF78](locale);
}

CFTypeID CFLocaleGetTypeID(void)
{
  return MEMORY[0x24BDBBF90]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x24BDBBF98](locale, key);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1F0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x24BDBC218](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x24BDBC230](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x24BDBC258](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x24BDBC520](alloc, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x24BDBC580](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x24BDBC618](theString, idx);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC660](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x24BDBC7A8](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x24BDBC7B8](anURL);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x24BDBC808](allocator, url);
}

CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x24BDBC810](allocator, url);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC828](allocator, buffer, bufLen, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x24BDBC898](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x24BDBC8B0]();
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x24BDBEFC0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFE0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF000]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF008]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBF088]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x24BE5F7C0]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x24BE5EB38]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x24BE5EB50]();
}

uint64_t LMLanguageModelGetOrder()
{
  return MEMORY[0x24BE5EBA0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x24BE5EBE8]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x24BE5F018]();
}

uint64_t LXCursorCreateByAdvancingWithUTF8()
{
  return MEMORY[0x24BE5F040]();
}

uint64_t LXCursorEnumerateEntriesRecursively()
{
  return MEMORY[0x24BE5F058]();
}

uint64_t LXCursorHasEntries()
{
  return MEMORY[0x24BE5F060]();
}

uint64_t LXCursorIsRoot()
{
  return MEMORY[0x24BE5F070]();
}

uint64_t LXCursorTerminationProbability()
{
  return MEMORY[0x24BE5F078]();
}

uint64_t LXEntryCopyString()
{
  return MEMORY[0x24BE5F080]();
}

uint64_t LXEntryGetProbability()
{
  return MEMORY[0x24BE5F090]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x24BE5F0D8]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x24BE5F0E0]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x24BE5F0F0]();
}

uint64_t MRLNeuralNetworkClear()
{
  return MEMORY[0x24BE68F38]();
}

uint64_t MRLNeuralNetworkCreate()
{
  return MEMORY[0x24BE68F48]();
}

uint64_t MRLNeuralNetworkGetOutput()
{
  return MEMORY[0x24BE68F60]();
}

uint64_t MRLNeuralNetworkGetOutputDimension()
{
  return MEMORY[0x24BE68F68]();
}

uint64_t MRLNeuralNetworkPredict()
{
  return MEMORY[0x24BE68F70]();
}

uint64_t MRLNeuralNetworkSetInput()
{
  return MEMORY[0x24BE68F78]();
}

uint64_t MRLNeuralNetworkSetInputTensor()
{
  return MEMORY[0x24BE68F80]();
}

uint64_t MRLNeuralNetworkTensorAppendData()
{
  return MEMORY[0x24BE68F88]();
}

uint64_t MRLNeuralNetworkTensorCreate()
{
  return MEMORY[0x24BE68F90]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x24BDBD0A8]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x24BDBD0B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB618](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24F110298();
}

void operator delete(void *__p)
{
  off_24F1102A0(__p);
}

uint64_t operator delete()
{
  return off_24F1102A8();
}

uint64_t operator new[]()
{
  return off_24F1102B0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24F1102B8(__sz);
}

uint64_t operator new()
{
  return off_24F1102C0();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE838](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE840](a1, a2);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

long double log1p(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAC0](__x);
  return result;
}

float log1pf(float a1)
{
  float result;

  MEMORY[0x24BDAEAC8](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x24BDAEB48]();
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x24BDAF408](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x24BDAF410](log, ptr);
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

