void ZlibDataDecompressor.init()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = swift_slowAlloc();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = v1;
  *(_DWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_DWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  OUTLINED_FUNCTION_1();
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  v2 = inflateInit_((z_streamp)(v0 + 16), "1.2.12", 112);
  swift_endAccess();
  if (v2)
    swift_release();
  OUTLINED_FUNCTION_4();
}

void ZlibDataDecompressor.deinit()
{
  uint64_t v0;

  MEMORY[0x24956E018](*(_QWORD *)(v0 + 128), -1, -1);
  OUTLINED_FUNCTION_1();
  inflateEnd((z_streamp)(v0 + 16));
  swift_endAccess();
  OUTLINED_FUNCTION_4();
}

uint64_t ZlibDataDecompressor.__deallocating_deinit()
{
  ZlibDataDecompressor.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ZlibDataDecompressor()
{
  return objc_opt_self();
}

uint64_t ZlibDataDecompressor.decompressedDataForData(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    __asm { BR              X9 }
  return 0;
}

void type metadata accessor for WiFiClientType(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for WiFiClientType);
}

void type metadata accessor for CFHTTPMessageRef(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for CFHTTPMessageRef);
}

void type metadata accessor for NETSchemaNETProvider(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for NETSchemaNETProvider);
}

void type metadata accessor for nw_path_status_t(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for nw_path_status_t);
}

uint64_t initializeBufferWithCopyOfBuffer for z_stream_s(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t getEnumTagSinglePayload for z_stream_s(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 64);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for z_stream_s(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

void type metadata accessor for z_stream_s(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for z_stream_s);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for CTSubscriptionSlot(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for CTSubscriptionSlot);
}

uint64_t closure #1 in ZlibDataDecompressor.decompressedDataForData(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, __int128 *a3@<X8>)
{
  unint64_t v6;
  int v7;
  const void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  _BYTE __dst[14];
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    swift_beginAccess();
    *(_QWORD *)(a2 + 16) = a1;
  }
  v6 = Data.count.getter();
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_26;
  v7 = v6;
  if (HIDWORD(v6))
    goto LABEL_26;
  swift_beginAccess();
  *(_DWORD *)(a2 + 24) = v7;
  v26 = xmmword_246F725C0;
  v8 = *(const void **)(a2 + 128);
  while (1)
  {
    swift_beginAccess();
    *(_QWORD *)(a2 + 40) = v8;
    *(_DWORD *)(a2 + 48) = 0x2000;
    v9 = inflate((z_streamp)(a2 + 16), 2);
    swift_endAccess();
    if (v9 > 1)
      break;
    v10 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v10 == 0x2000)
    {
      v11 = 0;
      v12 = 0xC000000000000000;
    }
    else
    {
      v13 = 0x2000 - v10;
      if (v10 >> 1 >= 0xFF9)
      {
        memset(__dst, 0, sizeof(__dst));
        v25 = -(char)v10;
        memcpy(__dst, v8, v13);
        v11 = *(_QWORD *)__dst;
        v12 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v25 << 48);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v11 = v13 << 32;
        v12 = __DataStorage.init(bytes:length:)() | 0x4000000000000000;
      }
    }
    if (*((_QWORD *)&v26 + 1) >> 60 != 15)
      Data.append(_:)();
    result = outlined consume of Data._Representation(v11, v12);
    if (v9 || *(_DWORD *)(a2 + 48) || !*(_DWORD *)(a2 + 24))
    {
      *a3 = v26;
      return result;
    }
  }
  if (!*(_QWORD *)(a2 + 64))
  {
    __break(1u);
LABEL_26:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v15 = String.init(cString:)();
  v17 = v16;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    *(_QWORD *)__dst = v22;
    *(_DWORD *)v21 = 67109378;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 8) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_246EC7000, v19, v20, "DataCompressor - Compression: Inflate finished with unexpected status %d %s", (uint8_t *)v21, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v22, -1, -1);
    MEMORY[0x24956E018](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  outlined consume of Data?(v26, *((unint64_t *)&v26 + 1));
  v26 = xmmword_246F725D0;
  swift_beginAccess();
  lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError();
  swift_allocError();
  *v23 = v9;
  swift_willThrow();
  return outlined consume of Data?(v26, *((unint64_t *)&v26 + 1));
}

uint64_t protocol witness for DataDecompressing.decompressedDataForData(_:) in conformance ZlibDataDecompressor(uint64_t a1, unint64_t a2)
{
  return ZlibDataDecompressor.decompressedDataForData(_:)(a1, a2);
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance CTSubscriptionSlot(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  CTSubscriptionSlot.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CTSubscriptionSlot(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = destructiveProjectEnumData for ConnectionConfigurationError(*v1);
  OUTLINED_FUNCTION_3();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x24956DF70]("-\u058C\npq", a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x24956DF70]("-\u058C\npq");
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x24956DF70]("-\u058C\npq", a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WiFiClientType(int *a1, int *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24956DF70]("-\u058C\npq", a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance WRMLinkType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance WRMLinkType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NSComparisonResult(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x24956DF70](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, __int128 *a6@<X8>)
{
  uint64_t result;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v13 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v13 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    closure #1 in ZlibDataDecompressor.decompressedDataForData(_:)(v13, a3, a6);
    swift_release();
    return outlined consume of Data._Representation(a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v13 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v13 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    closure #1 in ZlibDataCompressor.compressedDataForData(_:)(v13, a3, a6);
    swift_release();
    return outlined consume of Data._Representation(a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p10Foundation4DataVSgTg5015_s10Foundation4h18V06InlineB0V15withB33BytesyxxSWKXEKlFxSWKXEfU_ACSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nnc_n021_s11SiriNetwork20ZlibH68DecompressorC012decompressedd3ForD0y10Foundation0D0VSgAHKFAHSWKXEfU_0V7Network0xhY0CAHTf1nncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, __int128 *a6@<X8>)
{
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v10 = a2;
  v11 = BYTE2(a2);
  v12 = BYTE3(a2);
  v13 = BYTE4(a2);
  v14 = BYTE5(a2);
  closure #1 in ZlibDataDecompressor.decompressedDataForData(_:)((uint64_t)&v9, a3, a6);
  swift_release();
  return outlined consume of Data._Representation(a4, a5);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError;
  if (!lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for DataCompressorError, &type metadata for DataCompressorError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError;
  if (!lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for DataCompressorError, &type metadata for DataCompressorError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataCompressorError and conformance DataCompressorError);
  }
  return result;
}

void *__swift_memcpy408_4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x198uLL);
}

uint64_t getEnumTagSinglePayload for tcp_info(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 408))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for tcp_info(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 408) = v3;
  return result;
}

void type metadata accessor for tcp_info(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for tcp_info);
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for CFDataRef);
}

void type metadata accessor for WRMLinkType(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for WRMLinkType);
}

void type metadata accessor for WRMApplicationType(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for WRMApplicationType);
}

void type metadata accessor for tcp_conn_status(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, &lazy cache variable for type metadata for tcp_conn_status);
}

void type metadata accessor for tcp_conn_status.__Unnamed_union___Anonymous_field0(uint64_t a1)
{
  type metadata accessor for WiFiClientType(a1, (unint64_t *)&lazy cache variable for type metadata for tcp_conn_status.__Unnamed_union___Anonymous_field0);
}

void type metadata accessor for WiFiClientType(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t OUTLINED_FUNCTION_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, v3, v4, v5, a3);
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_2()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_5()
{
  uint64_t v0;
  unint64_t v1;

  outlined copy of Data?(v0, v1);
  return swift_retain();
}

uint64_t ConnectionInterfaceReport.init(interface:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  unint64_t v16;
  int v17;
  uint64_t result;
  _BYTE *v19;
  void *v20;
  uint64_t v21[32];
  _BYTE v22[289];
  _OWORD v23[2];
  char v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  char v29;
  _BYTE v30[256];
  _OWORD v31[16];

  v20 = a2;
  v3 = type metadata accessor for NWInterface();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NWInterface.InterfaceType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOi0_(v31);
  v19 = v30;
  outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v31, (uint64_t)v30);
  v11 = NWInterface.name.getter();
  v13 = v12;
  *(_QWORD *)&v27 = v11;
  *((_QWORD *)&v27 + 1) = v12;
  *(_QWORD *)&v23[0] = 0;
  *((_QWORD *)&v23[0] + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  NWInterface.type.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14 = v23[0];
  v28 = v23[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_bridgeObjectRetain();
  ConnectionType.init(fromInterface:)((char *)v23);
  v15 = v23[0];
  v29 = v23[0];
  v16 = NWInterface.index.getter();
  if ((v16 & 0x8000000000000000) != 0 || (v17 = v16, HIDWORD(v16)))
  {
    OUTLINED_FUNCTION_0_0();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v19, (uint64_t)v21);
    outlined release of ConnectionTCPInfoMetrics?(v21);
    *(_QWORD *)v22 = v11;
    *(_QWORD *)&v22[8] = v13;
    *(_OWORD *)&v22[16] = v14;
    v22[32] = v15;
    *(_DWORD *)&v22[36] = v17;
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v31, (uint64_t)&v22[40]);
    outlined retain of ConnectionInterfaceReport((uint64_t)v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v20, v22, 0x121uLL);
    v23[0] = v27;
    v23[1] = v28;
    v24 = v29;
    v25 = v17;
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v31, (uint64_t)&v26);
    return outlined release of ConnectionInterfaceReport((uint64_t)v23);
  }
  return result;
}

void _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOi0_(_OWORD *a1)
{
  *a1 = xmmword_246F729D0;
  bzero(a1 + 1, 0xE9uLL);
}

uint64_t outlined init with take of ConnectionTCPInfoMetrics?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24956DF58]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t *outlined release of ConnectionTCPInfoMetrics?(uint64_t *a1)
{
  outlined consume of ConnectionTCPInfoMetrics?(*a1, a1[1]);
  return a1;
}

uint64_t outlined consume of ConnectionTCPInfoMetrics?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of ConnectionInterfaceReport(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionTCPInfoMetrics?(v4, v3);
  return a1;
}

uint64_t outlined copy of ConnectionTCPInfoMetrics?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined release of ConnectionInterfaceReport(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionTCPInfoMetrics?(v4, v3);
  return a1;
}

void NetworkManager.dataServiceDescriptor.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor);
  *(_QWORD *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor) = a1;

}

uint64_t NetworkManager.subscriptionSlotOneStatus.setter(uint64_t a1, uint64_t a2)
{
  return NetworkManager.subscriptionSlotOneStatus.setter(a1, a2, &OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotOneStatus);
}

uint64_t NetworkManager.subscriptionSlotTwoStatus.setter(uint64_t a1, uint64_t a2)
{
  return NetworkManager.subscriptionSlotOneStatus.setter(a1, a2, &OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotTwoStatus);
}

uint64_t NetworkManager.carrierName.setter(uint64_t a1, uint64_t a2)
{
  return NetworkManager.subscriptionSlotOneStatus.setter(a1, a2, &OBJC_IVAR___SNNetworkManagerInternal_carrierName);
}

uint64_t NetworkManager.subscriptionSlotOneStatus.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *a3);
  *v4 = a1;
  v4[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t NetworkManager.pathEvaluator.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator) = a1;
  return swift_unknownObjectRelease();
}

char *one-time initialization function for shared()
{
  id v0;
  char *result;

  v0 = objc_allocWithZone((Class)type metadata accessor for NetworkManager());
  result = NetworkManager.init(coreTelephonyClient:queue:)(0, 0);
  static NetworkManager.shared = (uint64_t)result;
  return result;
}

id static NetworkManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static NetworkManager.shared;
}

char *NetworkManager.init(coreTelephonyClient:queue:)(void *a1, void *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  char *v36;
  void *v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  objc_super v43;
  uint64_t v44;

  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_1_0();
  v7 = v6 - v5;
  v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_1_0();
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_1_0();
  v10 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  v11 = objc_allocWithZone(MEMORY[0x24BDD1648]);
  v12 = v2;
  *(_QWORD *)&v2[v10] = objc_msgSend(v11, sel_init);
  *(_QWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_observers] = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot] = 0;
  v13 = &v12[OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotOneStatus];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v12[OBJC_IVAR___SNNetworkManagerInternal_subscriptionSlotTwoStatus];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v12[OBJC_IVAR___SNNetworkManagerInternal_lastSuccessfulSymptomsFetch];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v12[OBJC_IVAR___SNNetworkManagerInternal_lastFetchInProgress] = 0;
  v16 = &v12[OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = &v12[OBJC_IVAR___SNNetworkManagerInternal_subscriptionCount];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = &v12[OBJC_IVAR___SNNetworkManagerInternal_carrierName];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *(_QWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator] = 0;
  *(_DWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_pathStatus] = 0;
  v12[OBJC_IVAR___SNNetworkManagerInternal_pathUsesCellular] = 0;
  v19 = OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager;
  if (one-time initialization token for shared != -1)
    swift_once();
  v20 = (void *)static NetworkWiFiManager.shared;
  *(_QWORD *)&v12[v19] = static NetworkWiFiManager.shared;
  v21 = OBJC_IVAR___SNNetworkManagerInternal_lastTimeSymptomsFetch;
  v22 = (void *)objc_opt_self();
  v23 = v20;
  v24 = objc_msgSend(v22, sel_processInfo);
  objc_msgSend(v24, sel_systemUptime);
  v26 = v25;

  *(double *)&v12[v21] = v26 + -90.0;
  *(_DWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport] = 50529027;
  v27 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
  *(_QWORD *)&v12[v27] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1648]), sel_init);
  if (a2)
  {
    v28 = (uint64_t)a2;
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.unspecified.getter();
    v44 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 104))(v7, *MEMORY[0x24BEE5750], v41);
    v28 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  }
  v29 = OBJC_IVAR___SNNetworkManagerInternal_queue;
  *(_QWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_queue] = v28;
  if (a1)
  {
    v30 = a2;
    v31 = a1;
  }
  else
  {
    v32 = objc_allocWithZone(MEMORY[0x24BDC2810]);
    v30 = a2;
    v31 = objc_msgSend(v32, sel_initWithQueue_, v28);
  }
  *(_QWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient] = v31;
  v33 = *(void **)&v12[v29];
  type metadata accessor for NetworkWirelessCoexManager();
  swift_allocObject();
  v34 = a1;
  v35 = v33;
  *(_QWORD *)&v12[OBJC_IVAR___SNNetworkManagerInternal_networkWirelessCoexManager] = NetworkWirelessCoexManager.init(queue:)();

  v43.receiver = v12;
  v43.super_class = (Class)type metadata accessor for NetworkManager();
  v36 = (char *)objc_msgSendSuper2(&v43, (SEL)&selRef_proxyConfiguration);
  v37 = *(void **)&v36[OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient];
  v38 = v36;
  objc_msgSend(v37, sel_setDelegate_, v38);
  NetworkManager.dataSubscriptionContextUpdate()();
  NetworkManager.dataServiceDescriptorUpdate()();
  NetworkManager.serviceSubscriptionInfoUpdate()();
  NetworkManager.signalStrengthUpdate()();

  return v38;
}

id NetworkManager.__deallocating_deinit()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  objc_super v7;

  v1 = v0;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_246EC7000, v3, v4, "NetworkManager deinit", v5, 2u);
    MEMORY[0x24956E018](v5, -1, -1);
  }

  if (*(_QWORD *)&v1[OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator])
    nw_path_evaluator_cancel();
  objc_msgSend(*(id *)&v1[OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient], sel_setDelegate_, 0);
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for NetworkManager();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

id NetworkManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NetworkManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for NetworkManager()
{
  return objc_opt_self();
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t method lookup function for NetworkManager()
{
  return swift_lookUpClassMethod();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24956DF64](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_2_0(uint64_t a1@<X8>)
{
  uint64_t v1;

}

uint64_t one-time initialization function for errorDomain()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ConnectionConfigurationError.errorDomain = result;
  qword_257660620 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AceSerializationError.errorDomain = result;
  qword_257660640 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static DataCompressorError.errorDomain = result;
  qword_257660660 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static BackgroundConnectionError.errorDomain = result;
  qword_257662DD8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NetworkConnectionError.errorDomain = result;
  qword_257663580 = v1;
  return result;
}

uint64_t static ConnectionConfigurationError.errorDomain.getter()
{
  uint64_t v0;

  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  v0 = static ConnectionConfigurationError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static ConnectionConfigurationError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  static ConnectionConfigurationError.errorDomain = a1;
  qword_257660620 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static ConnectionConfigurationError.errorDomain.modify())()
{
  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t ConnectionConfigurationError.errorCode.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL static ConnectionConfigurationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ConnectionConfigurationError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ConnectionConfigurationError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionConfigurationError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError;
  if (!lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError)
  {
    result = MEMORY[0x24956DF70]("5Ռ\n,s", &type metadata for ConnectionConfigurationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError;
  if (!lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionConfigurationError, &type metadata for ConnectionConfigurationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError;
  if (!lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionConfigurationError, &type metadata for ConnectionConfigurationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfigurationError and conformance ConnectionConfigurationError);
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance ConnectionConfigurationError()
{
  lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance ConnectionConfigurationError()
{
  lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();
  return Error<>._code.getter();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionConfigurationError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionConfigurationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_246ECE630 + 4 * byte_246F72A25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_246ECE664 + 4 * byte_246F72A20[v4]))();
}

uint64_t sub_246ECE664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246ECE66C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246ECE674);
  return result;
}

uint64_t sub_246ECE680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246ECE688);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_246ECE68C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246ECE694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ConnectionConfigurationError(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ConnectionConfigurationError(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionConfigurationError()
{
  return &type metadata for ConnectionConfigurationError;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return swift_beginAccess();
}

Swift::Void __swiftcall NetworkManager.registerClient()()
{
  NetworkManager.registerClient()(partial apply for closure #1 in NetworkManager.registerClient(), (uint64_t)&block_descriptor);
}

uint64_t sub_246ECE720()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NetworkManager.registerClient()()
{
  uint64_t v0;

  return closure #1 in NetworkManager.registerClient()(v0, (void (*)(uint64_t))NetworkWirelessCoexManager.registerClient());
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

Swift::Void __swiftcall NetworkManager.unregisterClient()()
{
  NetworkManager.registerClient()(partial apply for closure #1 in NetworkManager.unregisterClient(), (uint64_t)&block_descriptor_4);
}

uint64_t partial apply for closure #1 in NetworkManager.unregisterClient()()
{
  uint64_t v0;

  return closure #1 in NetworkManager.registerClient()(v0, (void (*)(uint64_t))NetworkWirelessCoexManager.unregisterClient());
}

Swift::Void __swiftcall NetworkManager.resetLinkRecommendationInfo()()
{
  NetworkManager.registerClient()(partial apply for closure #1 in NetworkManager.resetLinkRecommendationInfo(), (uint64_t)&block_descriptor_8);
}

void NetworkManager.registerClient()(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD aBlock[6];

  v8 = OUTLINED_FUNCTION_18();
  v9 = OUTLINED_FUNCTION_4_0(v8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_12();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_3_0();
  v12 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  v13 = OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  aBlock[4] = a1;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a2;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v4, v3, v14);
  _Block_release(v14);

  OUTLINED_FUNCTION_2_1();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v10);
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in NetworkManager.registerClient()(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;

  v3 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x24956E090](v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = swift_retain();
    a2(v6);

    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in NetworkManager.resetLinkRecommendationInfo()()
{
  uint64_t v0;

  return closure #1 in NetworkManager.registerClient()(v0, (void (*)(uint64_t))NetworkWirelessCoexManager.resetLinkRecommendationInfo());
}

void NetworkManager.getSNProximityLinkRecommendation(retry:completion:)(char a1)
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_11(v2);
  NetworkManager.getProximityLinkRecommendation(retry:_:)(a1, (uint64_t)partial apply for closure #1 in NetworkManager.getSNProximityLinkRecommendation(retry:completion:), v2);
}

uint64_t sub_246ECEB4C()
{
  return swift_release();
}

void NetworkManager.getProximityLinkRecommendation(retry:_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v4 = v3;
  v8 = OUTLINED_FUNCTION_18();
  v9 = OUTLINED_FUNCTION_4_0(v8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_12();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_3_0();
  v11 = *(void **)(v4 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  v12 = OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  v13 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v13 + 40) = a3;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  v14 = v11;
  OUTLINED_FUNCTION_9();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a2);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_7();
}

void sub_246ECEC90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  const void *v21;

  _Block_release(v21);

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void sub_246ECED30()
{
  uint64_t v0;
  void *v1;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v0);

}

uint64_t closure #1 in NetworkManager.getProximityLinkRecommendation(retry:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x24956E090](v1);
  if (result)
  {
    swift_retain();
    NetworkWirelessCoexManager.getProximityLinkRecommendation(retry:_:)();
  }
  return result;
}

uint64_t sub_246ECEDF0()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NetworkManager.getProximityLinkRecommendation(retry:_:)()
{
  uint64_t v0;

  return closure #1 in NetworkManager.getProximityLinkRecommendation(retry:_:)(*(_QWORD *)(v0 + 16));
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void NetworkManager.getSNLinkRecommendationMetrics(_:)()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_11(v0);
  NetworkManager.getLinkRecommendationMetrics(_:)((uint64_t)partial apply for closure #1 in NetworkManager.getSNLinkRecommendationMetrics(_:), v0);
}

uint64_t sub_246ECEE84()
{
  return swift_release();
}

void closure #1 in NetworkManager.getSNProximityLinkRecommendation(retry:completion:)(_QWORD *a1, void (*a2)(void))
{
  void *v3;
  id v4;

  if (a2)
  {
    if (*a1 == 2)
      v3 = 0;
    else
      LinkRecommendationInfo.snLinkRecommendationInfo()((SNLinkRecommendationInfo *)((*a1 >> 8) & 1));
    v4 = v3;
    a2();

  }
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.getSNLinkRecommendationMetrics(_:)(_QWORD *a1)
{
  uint64_t v1;

  closure #1 in NetworkManager.getSNProximityLinkRecommendation(retry:completion:)(a1, *(void (**)(void))(v1 + 16));
}

void NetworkManager.getLinkRecommendationMetrics(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;

  v3 = v2;
  v6 = OUTLINED_FUNCTION_18();
  v7 = OUTLINED_FUNCTION_4_0(v6);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_12();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_3_0();
  v9 = *(void **)(v3 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  v10 = OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  v11 = (_QWORD *)OUTLINED_FUNCTION_6();
  v11[2] = v10;
  v11[3] = a1;
  v11[4] = a2;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  v12 = v9;
  OUTLINED_FUNCTION_9();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_7();
}

void sub_246ECF0BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  const void *v21;

  _Block_release(v21);

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void sub_246ECF158()
{
  uint64_t v0;
  void *v1;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v0);

}

uint64_t closure #1 in NetworkManager.getLinkRecommendationMetrics(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x24956E090](v1);
  if (result)
  {
    swift_retain();
    NetworkWirelessCoexManager.getLinkRecommendationMetrics(_:)();
  }
  return result;
}

uint64_t sub_246ECF208()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NetworkManager.getLinkRecommendationMetrics(_:)()
{
  uint64_t v0;

  return closure #1 in NetworkManager.getLinkRecommendationMetrics(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_246ECF258()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SNLinkRecommendationInfo?) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_6()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_7()
{
  JUMPOUT(0x24956D244);
}

uint64_t OUTLINED_FUNCTION_8()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 152));
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v1;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v2);
}

unint64_t OUTLINED_FUNCTION_13()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
}

uint64_t OUTLINED_FUNCTION_14()
{
  return swift_release();
}

unint64_t OUTLINED_FUNCTION_15@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = a1;
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
}

void *OUTLINED_FUNCTION_16@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_17()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t OUTLINED_FUNCTION_18()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static AceSerializationError.errorDomain.getter()
{
  uint64_t v0;

  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  v0 = static AceSerializationError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static AceSerializationError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  static AceSerializationError.errorDomain = a1;
  qword_257660640 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AceSerializationError.errorDomain.modify())()
{
  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t AceSerializationError.errorCode.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_246ECF590 + 4 * byte_246F72B60[*(unsigned __int8 *)(v0 + 16)]))(1);
}

uint64_t sub_246ECF590()
{
  return 4;
}

uint64_t sub_246ECF598()
{
  return 5;
}

uint64_t sub_246ECF5A0()
{
  _QWORD *v0;

  return qword_246F72C38[*v0];
}

uint64_t AceSerializationError.errorUserInfo.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 2)
  {
    if (v1 >> 60 == 15)
      return Dictionary.init(dictionaryLiteral:)();
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_246F72C60;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(inited + 40) = v10;
    *(_QWORD *)(inited + 72) = MEMORY[0x24BDCDDE8];
    *(_QWORD *)(inited + 48) = v2;
    *(_QWORD *)(inited + 56) = v1;
    outlined copy of Data?(v2, v1);
    return Dictionary.init(dictionaryLiteral:)();
  }
  if (v3 == 1)
  {
    if (v1 >> 60 == 15)
      return Dictionary.init(dictionaryLiteral:)();
    goto LABEL_9;
  }
  if (!*(_BYTE *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    v4 = swift_initStackObject();
    *(_OWORD *)(v4 + 16) = xmmword_246F72C70;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = MEMORY[0x24BEE1768];
    *(_QWORD *)(v4 + 32) = v5;
    *(_QWORD *)(v4 + 40) = v7;
    *(_QWORD *)(v4 + 72) = v6;
    *(_QWORD *)(v4 + 48) = v2;
    *(_QWORD *)(v4 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v4 + 88) = v8;
    *(_QWORD *)(v4 + 120) = v6;
    *(_QWORD *)(v4 + 96) = v1;
  }
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t protocol witness for Error._domain.getter in conformance AceSerializationError()
{
  lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance AceSerializationError()
{
  lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
  return Error<>._code.getter();
}

unint64_t lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError;
  if (!lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for AceSerializationError, &type metadata for AceSerializationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError;
  if (!lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for AceSerializationError, &type metadata for AceSerializationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AceSerializationError and conformance AceSerializationError);
  }
  return result;
}

uint64_t outlined copy of AceSerializationError(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 1)
    return outlined copy of Data?(a1, a2);
  return a1;
}

uint64_t destroy for AceSerializationError(uint64_t a1)
{
  return outlined consume of AceSerializationError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of AceSerializationError(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 1)
    return outlined consume of Data?(a1, a2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AceSerializationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AceSerializationError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AceSerializationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AceSerializationError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AceSerializationError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AceSerializationError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AceSerializationError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AceSerializationError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AceSerializationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AceSerializationError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for AceSerializationError(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AceSerializationError()
{
  return &type metadata for AceSerializationError;
}

uint64_t static DataCompressorError.errorDomain.getter()
{
  uint64_t v0;

  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  v0 = static DataCompressorError.errorDomain;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static DataCompressorError.errorDomain.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  static DataCompressorError.errorDomain = a1;
  qword_257660660 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static DataCompressorError.errorDomain.modify())()
{
  if (one-time initialization token for errorDomain != -1)
    swift_once();
  OUTLINED_FUNCTION_0_2();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t DataCompressorError.errorCode.getter()
{
  int *v0;

  return *v0;
}

uint64_t protocol witness for Error._domain.getter in conformance DataCompressorError()
{
  lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError();
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance DataCompressorError()
{
  lazy protocol witness table accessor for type DataCompressorError and conformance DataCompressorError();
  return Error<>._code.getter();
}

_DWORD *__swift_memcpy4_4(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DataCompressorError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DataCompressorError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

uint64_t getEnumTag for DataCompressorError()
{
  return 0;
}

ValueMetadata *type metadata accessor for DataCompressorError()
{
  return &type metadata for DataCompressorError;
}

Swift::Void __swiftcall NetworkManager.dataSubscriptionContextUpdate()()
{
  NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataSubscriptionContextUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataSubscriptionContextUpdate(), (uint64_t)&block_descriptor_10);
}

Swift::Void __swiftcall NetworkManager.dataServiceDescriptorUpdate()()
{
  NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataServiceDescriptorUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate(), (uint64_t)&block_descriptor_20);
}

Swift::Void __swiftcall NetworkManager.serviceSubscriptionInfoUpdate()()
{
  NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: serviceSubscriptionInfoUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.serviceSubscriptionInfoUpdate(), (uint64_t)&block_descriptor_0);
}

Swift::Void __swiftcall NetworkManager.signalStrengthUpdate()()
{
  NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: signalStrengthUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.signalStrengthUpdate(), (uint64_t)&block_descriptor_43);
}

void NetworkManager.dataSubscriptionContextUpdate()(const char *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags();
  v10 = OUTLINED_FUNCTION_4_0(v9);
  MEMORY[0x24BDAC7A8](v10);
  v11 = OUTLINED_FUNCTION_0_3();
  v12 = OUTLINED_FUNCTION_23(v11);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_3_0();
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v13 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v13, (uint64_t)static Logger.siriNetwork);
  v14 = OUTLINED_FUNCTION_9_0();
  if (os_log_type_enabled(v3, v14))
  {
    v15 = (uint8_t *)OUTLINED_FUNCTION_1_2();
    *(_WORD *)v15 = 0;
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v3, v14, a1, v15);
    OUTLINED_FUNCTION_0_4();
  }

  v16 = *(Class *)((char *)&v3->isa + OBJC_IVAR___SNNetworkManagerInternal_queue);
  v17 = OUTLINED_FUNCTION_14_0();
  swift_unknownObjectWeakInit();
  aBlock[4] = a2;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a3;
  v18 = _Block_copy(aBlock);
  v19 = v16;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_13_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v5, v4, v18);
  _Block_release(v18);

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_21();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_1_1();
}

void NetworkManager.preferredDataSimChanged(_:)(void *a1)
{
  NetworkManager.dataSubscriptionContextChange(_:)(a1);
  NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataServiceDescriptorUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate(), (uint64_t)&block_descriptor_20);
}

void NetworkManager.dataSubscriptionContextChange(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v3, (uint64_t)static Logger.siriNetwork);
  v4 = OUTLINED_FUNCTION_9_0();
  if (OUTLINED_FUNCTION_7_0(v4))
  {
    *(_WORD *)OUTLINED_FUNCTION_1_2() = 0;
    OUTLINED_FUNCTION_4_1(&dword_246EC7000, v5, v6, "NetworkManager - CoreTelephony: dataSubscriptionContextChange");
    OUTLINED_FUNCTION_0_4();
  }

  NetworkManager.subscriptionContextUpdate(_:)();
  NetworkManager.carrierNameUpdate(_:)(a1, "NetworkManager - CoreTelephony: carrierNameUpdate", (uint64_t)&unk_251840528, (uint64_t)partial apply for closure #1 in NetworkManager.carrierNameUpdate(_:), (uint64_t)&block_descriptor_33);
  OUTLINED_FUNCTION_17_0();
}

void NetworkManager.carrierBundleChange(_:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;

  v2 = v1;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v4, (uint64_t)static Logger.siriNetwork);
  v5 = OUTLINED_FUNCTION_9_0();
  if (OUTLINED_FUNCTION_7_0(v5))
  {
    *(_WORD *)OUTLINED_FUNCTION_1_2() = 0;
    OUTLINED_FUNCTION_4_1(&dword_246EC7000, v6, v7, "NetworkManager - CoreTelephony: Carrier bundle changed");
    OUTLINED_FUNCTION_0_4();
  }

  v8 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  objc_msgSend(*(id *)&v1[OBJC_IVAR___SNNetworkManagerInternal_lock], sel_lock);
  v9 = *(id *)&v1[OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot];
  v10 = objc_msgSend(*(id *)&v2[v8], sel_unlock);
  if (v9)
  {
    if (OUTLINED_FUNCTION_11_0((uint64_t)v10, sel_slotID) == v9)
      NetworkManager.dataSubscriptionContextChange(_:)(a1);
  }
  else
  {
    OUTLINED_FUNCTION_22("NetworkManager - CoreTelephony: dataSubscriptionContextUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataSubscriptionContextUpdate(), (uint64_t)&block_descriptor_10);
  }
  OUTLINED_FUNCTION_22("NetworkManager - CoreTelephony: dataServiceDescriptorUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate(), (uint64_t)&block_descriptor_20);
  OUTLINED_FUNCTION_17_0();
}

id NetworkManager.simStatusDidChange(_:status:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = v3;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v8 = OUTLINED_FUNCTION_5_1();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
  v9 = a1;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = OUTLINED_FUNCTION_2_2();
    v18 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v13 = 136315394;
    OUTLINED_FUNCTION_15_0();
    type metadata accessor for CTSubscriptionSlot(0);
    v14 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
    OUTLINED_FUNCTION_20();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    OUTLINED_FUNCTION_16_0();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v18);
    OUTLINED_FUNCTION_20();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_246EC7000, v11, v12, "NetworkManager - CoreTelephony: SIM Slot %s - Status: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  swift_bridgeObjectRelease_n();
  v16 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  objc_msgSend(*(id *)(v4 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
  if (OUTLINED_FUNCTION_15_0() == (id)1)
  {
    OUTLINED_FUNCTION_16_0();
    NetworkManager.subscriptionSlotOneStatus.setter(a2, a3);
  }
  else if (OUTLINED_FUNCTION_15_0() == (id)2)
  {
    OUTLINED_FUNCTION_16_0();
    NetworkManager.subscriptionSlotTwoStatus.setter(a2, a3);
  }
  return objc_msgSend(*(id *)(v4 + v16), sel_unlock);
}

void NetworkManager.signalStrengthChanged(_:info:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v2 = v1;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_5_1();
  v5 = OUTLINED_FUNCTION_3_1(v4, (uint64_t)static Logger.siriNetwork);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)OUTLINED_FUNCTION_1_2();
    *(_WORD *)v7 = 0;
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v5, v6, "NetworkManager - CoreTelephony: Signal strength changed", v7);
    OUTLINED_FUNCTION_0_4();
  }

  v8 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  objc_msgSend(*(id *)&v1[OBJC_IVAR___SNNetworkManagerInternal_lock], sel_lock);
  v9 = *(id *)&v1[OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot];
  v10 = objc_msgSend(a1, sel_slotID);
  if (v9 == v10)
  {
    v11 = OUTLINED_FUNCTION_11_0((uint64_t)v10, sel_bars);
    if (v11)
    {
      v12 = v11;
      v13 = Int.init(truncating:)();
      v14 = &v1[OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength];
      *(_QWORD *)v14 = v13;
      v14[8] = 0;
      v15 = v1;
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        v22 = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v18 = 136315138;
        if ((v14[8] & 1) != 0)
        {
          v19 = 0xE700000000000000;
          v20 = 0x6E776F6E6B6E75;
        }
        else
        {
          v20 = String.init<A>(describing:)();
          v19 = v21;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_246EC7000, v16, v17, "NetworkManager - CoreTelephony: Signal strength %s", v18, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0_4();
      }

    }
  }
  objc_msgSend(*(id *)&v2[v8], sel_unlock);
  OUTLINED_FUNCTION_22("NetworkManager - CoreTelephony: serviceSubscriptionInfoUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.serviceSubscriptionInfoUpdate(), (uint64_t)&block_descriptor_0);
  NetworkManager.dataSubscriptionContextUpdate()("NetworkManager - CoreTelephony: dataServiceDescriptorUpdate", (uint64_t)partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate(), (uint64_t)&block_descriptor_20);
}

id NetworkManager.subscriptionContextUpdate(_:)()
{
  char *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v1, (uint64_t)static Logger.siriNetwork);
  v2 = OUTLINED_FUNCTION_9_0();
  if (OUTLINED_FUNCTION_7_0(v2))
  {
    *(_WORD *)OUTLINED_FUNCTION_1_2() = 0;
    OUTLINED_FUNCTION_4_1(&dword_246EC7000, v3, v4, "NetworkManager - CoreTelephony: subscriptionContextUpdate");
    OUTLINED_FUNCTION_0_4();
  }

  v5 = OBJC_IVAR___SNNetworkManagerInternal_lock;
  v6 = OUTLINED_FUNCTION_11_0((uint64_t)objc_msgSend(*(id *)&v0[OBJC_IVAR___SNNetworkManagerInternal_lock], sel_lock), sel_slotID);
  *(_QWORD *)&v0[OBJC_IVAR___SNNetworkManagerInternal_lastDataSubscriptionSlot] = v6;
  v7 = OUTLINED_FUNCTION_11_0((uint64_t)v6, sel_slotID);
  if (v7 == (id)1)
  {
    result = (id)*MEMORY[0x24BDC2D10];
    if (*MEMORY[0x24BDC2D10])
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      NetworkManager.subscriptionSlotOneStatus.setter(v9, v10);
LABEL_11:
      objc_msgSend(*(id *)&v0[v5], sel_unlock);
      return objc_msgSend(*(id *)&v0[v5], sel_unlock);
    }
    __break(1u);
  }
  else
  {
    if (OUTLINED_FUNCTION_11_0((uint64_t)v7, sel_slotID) != (id)2)
      goto LABEL_11;
    result = (id)*MEMORY[0x24BDC2D10];
    if (*MEMORY[0x24BDC2D10])
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      NetworkManager.subscriptionSlotTwoStatus.setter(v11, v12);
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

void NetworkManager.carrierNameUpdate(_:)(void *a1)
{
  NetworkManager.carrierNameUpdate(_:)(a1, "NetworkManager - CoreTelephony: carrierNameUpdate", (uint64_t)&unk_251840528, (uint64_t)partial apply for closure #1 in NetworkManager.carrierNameUpdate(_:), (uint64_t)&block_descriptor_33);
}

void closure #1 in NetworkManager.carrierNameUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD aBlock[6];

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x24956E090](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(id *)(v4 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    v7 = (void *)MEMORY[0x24956D034](0x4E72656972726143, 0xEB00000000656D61);
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2700]), sel_initWithBundleType_, 1);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v5;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:);
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_39;
    v10 = _Block_copy(aBlock);
    v11 = v5;
    swift_release();
    objc_msgSend(v6, sel_copyCarrierBundleValue_key_bundleType_completion_, a2, v7, v8, v10);
    _Block_release(v10);

  }
}

uint64_t closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:)(uint64_t result, uint64_t a2)
{
  if (!a2 && result)
  {
    objc_opt_self();
    result = swift_dynamicCastObjCClass();
    if (result)
      return static String._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  return result;
}

void closure #1 in closure #1 in NetworkManager.dataSubscriptionContextUpdate()(void *a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  NSObject *oslog;
  uint64_t v12;

  if (a2)
  {
    v3 = a2;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
    v5 = a2;
    v6 = a2;
    oslog = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v10 = a2;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v12;

      _os_log_impl(&dword_246EC7000, oslog, v7, "NetworkManager - CoreTelephony Error: Data Subscription Context Error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v9, -1, -1);
      MEMORY[0x24956E018](v8, -1, -1);

      return;
    }

    goto LABEL_10;
  }
  if (a1)
  {
    oslog = a1;
    NetworkManager.dataSubscriptionContextChange(_:)(oslog);
LABEL_10:

  }
}

void closure #1 in NetworkManager.dataServiceDescriptorUpdate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD aBlock[6];

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x24956E090](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_26;
    v6 = _Block_copy(aBlock);
    v7 = v4;
    v8 = v3;
    swift_release();
    objc_msgSend(v7, sel_getCurrentDataServiceDescriptor_, v6);
    _Block_release(v6);

  }
}

void closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate()(void *a1, id a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v14;
  id v15;
  NSObject *oslog;
  uint64_t v17;

  if (a2)
  {
    v4 = a2;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    v6 = a2;
    v7 = a2;
    oslog = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      v11 = a2;
      v17 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v10 = v17;

      _os_log_impl(&dword_246EC7000, oslog, v8, "NetworkManager - CoreTelephony Error: Data Service Descriptor Error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v10, -1, -1);
      MEMORY[0x24956E018](v9, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v14 = OBJC_IVAR___SNNetworkManagerInternal_lock;
    objc_msgSend(*(id *)(a3 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
    v15 = a1;
    NetworkManager.dataServiceDescriptor.setter((uint64_t)a1);
    objc_msgSend(*(id *)(a3 + v14), sel_unlock);
  }
}

void closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD aBlock[6];

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x24956E090](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate();
    aBlock[5] = v5;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_6;
    v6 = _Block_copy(aBlock);
    v7 = v4;
    v8 = v3;
    swift_release();
    objc_msgSend(v7, sel_getSubscriptionInfo_, v6);
    _Block_release(v6);

  }
}

void closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  NSObject *oslog;
  uint64_t v18;

  if (a1)
  {
    v5 = outlined bridged method (pb) of @objc CTXPCServiceSubscriptionInfo.subscriptions.getter(a1);
    if (v5)
    {
      v6 = v5;
      v7 = OBJC_IVAR___SNNetworkManagerInternal_lock;
      objc_msgSend(*(id *)(a3 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
      if (!(v6 >> 62))
      {
        a2 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
LABEL_5:
        v8 = a3 + OBJC_IVAR___SNNetworkManagerInternal_subscriptionCount;
        *(_QWORD *)v8 = a2;
        *(_BYTE *)(v8 + 8) = 0;
        objc_msgSend(*(id *)(a3 + v7), sel_unlock);
        return;
      }
      swift_bridgeObjectRetain();
      a2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease_n();
      if ((a2 & 0x8000000000000000) == 0)
        goto LABEL_5;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_14:
      swift_once();
      goto LABEL_8;
    }
  }
  if (!a2)
    return;
  v9 = (id)a2;
  if (one-time initialization token for siriNetwork != -1)
    goto LABEL_14;
LABEL_8:
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriNetwork);
  v11 = (id)a2;
  v12 = (id)a2;
  oslog = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138412290;
    v16 = (id)a2;
    v18 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v18;

    _os_log_impl(&dword_246EC7000, oslog, v13, "NetworkManager - CoreTelephony Error: Subscription Info Error: %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v15, -1, -1);
    MEMORY[0x24956E018](v14, -1, -1);

  }
  else
  {

  }
}

void closure #1 in NetworkManager.dataSubscriptionContextUpdate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD aBlock[6];

  v6 = a1 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x24956E090](v6);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *(void **)(v7 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    v10 = OUTLINED_FUNCTION_14_0();
    *(_QWORD *)(v10 + 16) = v8;
    aBlock[4] = a3;
    aBlock[5] = v10;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = a4;
    v11 = _Block_copy(aBlock);
    v12 = v9;
    v13 = v8;
    swift_release();
    objc_msgSend(v12, sel_getCurrentDataSubscriptionContext_, v11);
    _Block_release(v11);

  }
}

void closure #1 in closure #1 in NetworkManager.signalStrengthUpdate()(void *a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  os_log_t oslog;
  uint64_t v12;

  if (a1)
  {
    oslog = a1;
    NetworkManager.carrierNameUpdate(_:)(oslog, "NetworkManager - CoreTelephony: signalStrengthUpdate", (uint64_t)&unk_251840640, (uint64_t)partial apply for closure #1 in NetworkManager.signalStrengthUpdate(_:), (uint64_t)&block_descriptor_56);
LABEL_3:

    return;
  }
  if (a2)
  {
    v3 = a2;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
    v5 = a2;
    v6 = a2;
    oslog = (os_log_t)Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v7))
    {

      goto LABEL_3;
    }
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = a2;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v12;

    _os_log_impl(&dword_246EC7000, oslog, v7, "NetworkManager - CoreTelephony Error: Data Subscription Error: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v9, -1, -1);
    MEMORY[0x24956E018](v8, -1, -1);

  }
}

void NetworkManager.signalStrengthUpdate(_:)(void *a1)
{
  NetworkManager.carrierNameUpdate(_:)(a1, "NetworkManager - CoreTelephony: signalStrengthUpdate", (uint64_t)&unk_251840640, (uint64_t)partial apply for closure #1 in NetworkManager.signalStrengthUpdate(_:), (uint64_t)&block_descriptor_56);
}

void NetworkManager.carrierNameUpdate(_:)(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  _QWORD aBlock[6];

  v10 = type metadata accessor for DispatchWorkItemFlags();
  v11 = OUTLINED_FUNCTION_4_0(v10);
  MEMORY[0x24BDAC7A8](v11);
  v12 = OUTLINED_FUNCTION_0_3();
  v13 = OUTLINED_FUNCTION_23(v12);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_3_0();
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v14 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v14, (uint64_t)static Logger.siriNetwork);
  v15 = OUTLINED_FUNCTION_9_0();
  if (os_log_type_enabled(v5, v15))
  {
    v16 = (uint8_t *)OUTLINED_FUNCTION_1_2();
    *(_WORD *)v16 = 0;
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v5, v15, a2, v16);
    OUTLINED_FUNCTION_0_4();
  }

  v17 = *(Class *)((char *)&v5->isa + OBJC_IVAR___SNNetworkManagerInternal_queue);
  v18 = OUTLINED_FUNCTION_14_0();
  swift_unknownObjectWeakInit();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = a1;
  aBlock[4] = a4;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a5;
  v20 = _Block_copy(aBlock);
  v21 = v17;
  swift_retain();
  v22 = a1;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  OUTLINED_FUNCTION_13_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v7, v6, v20);
  _Block_release(v20);

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_21();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkManager.signalStrengthUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD aBlock[6];

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x24956E090](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(void **)(v4 + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v5;
    aBlock[4] = partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:);
    aBlock[5] = v7;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_62;
    v8 = _Block_copy(aBlock);
    v9 = v6;
    v10 = v5;
    swift_release();
    objc_msgSend(v9, sel_getSignalStrengthInfo_completion_, a2, v8);
    _Block_release(v8);

  }
}

void closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:)(void *a1, id a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *oslog;
  uint64_t v18;

  if (a2)
  {
    v4 = a2;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    v6 = a2;
    v7 = a2;
    oslog = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      v11 = a2;
      v18 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v10 = v18;

      _os_log_impl(&dword_246EC7000, oslog, v8, "NetworkManager - CoreTelephony Error: Signal Strength Error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v10, -1, -1);
      MEMORY[0x24956E018](v9, -1, -1);

      return;
    }

    goto LABEL_11;
  }
  if (a1)
  {
    v13 = objc_msgSend(a1, sel_bars);
    if (v13)
    {
      v14 = OBJC_IVAR___SNNetworkManagerInternal_lock;
      oslog = v13;
      objc_msgSend(*(id *)(a3 + OBJC_IVAR___SNNetworkManagerInternal_lock), sel_lock);
      v15 = Int.init(truncating:)();
      v16 = a3 + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength;
      *(_QWORD *)v16 = v15;
      *(_BYTE *)(v16 + 8) = 0;
      objc_msgSend(*(id *)(a3 + v14), sel_unlock);
LABEL_11:

    }
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSObject?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

SiriNetwork::ConnectionType __swiftcall NetworkManager.connectionTechnologyForCellularInterface()()
{
  _BYTE *v0;
  NSObject *v1;
  _BYTE *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  Swift::String v12;
  SiriNetwork::ConnectionType result;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  void *v18;
  void *v19;
  id v20[5];

  v2 = v0;
  v20[4] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(Class *)((char *)&v1->isa + OBJC_IVAR___SNNetworkManagerInternal_dataServiceDescriptor);
  if (v3
    && (objc_msgSend(v3, sel_copy),
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        type metadata accessor for CTServiceDescriptor(0, &lazy cache variable for type metadata for CTServiceDescriptor), (swift_dynamicCast() & 1) != 0))
  {
    v4 = *(Class *)((char *)&v1->isa + OBJC_IVAR___SNNetworkManagerInternal_coreTelephonyClient);
    v20[0] = 0;
    v5 = objc_msgSend(v4, sel_getCurrentRat_error_, v19, v20);
    v6 = v20[0];
    if (v5)
    {
      v7 = v5;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;
      v11 = v6;

      v12._countAndFlagsBits = v8;
      v12._object = v10;
      ConnectionType.init(fromCoreTelephonyeRATString:)(v12);

      return result;
    }
    v17 = v20[0];
    v18 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v14 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v14, (uint64_t)static Logger.siriNetwork);
    v15 = OUTLINED_FUNCTION_9_0();
    if (os_log_type_enabled(v1, v15))
    {
      v16 = (uint8_t *)OUTLINED_FUNCTION_1_2();
      *(_WORD *)v16 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v1, v15, "NetworkManager - CoreTelephony: No data service descriptor to get cellular interface.", v16);
      OUTLINED_FUNCTION_0_4();
    }

  }
  *v2 = 2;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    OUTLINED_FUNCTION_16_0();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_246ED2110()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()()
{
  uint64_t v0;

  closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(v0);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void partial apply for closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(void *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in closure #1 in NetworkManager.serviceSubscriptionInfoUpdate()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t outlined bridged method (pb) of @objc CTXPCServiceSubscriptionInfo.subscriptions.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_subscriptions);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for CTServiceDescriptor(0, &lazy cache variable for type metadata for CTXPCServiceSubscriptionContext);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for CTServiceDescriptor(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void partial apply for closure #1 in NetworkManager.dataSubscriptionContextUpdate()()
{
  uint64_t v0;

  closure #1 in NetworkManager.dataSubscriptionContextUpdate()(v0, (uint64_t)&unk_251840460, (uint64_t)partial apply for closure #1 in closure #1 in NetworkManager.dataSubscriptionContextUpdate(), (uint64_t)&block_descriptor_16);
}

uint64_t sub_246ED2928()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in NetworkManager.dataSubscriptionContextUpdate()(void *a1, id a2)
{
  closure #1 in closure #1 in NetworkManager.dataSubscriptionContextUpdate()(a1, a2);
}

void partial apply for closure #1 in NetworkManager.dataServiceDescriptorUpdate()()
{
  uint64_t v0;

  closure #1 in NetworkManager.dataServiceDescriptorUpdate()(v0);
}

void partial apply for closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate()(void *a1, void *a2)
{
  uint64_t v2;

  closure #1 in closure #1 in NetworkManager.dataServiceDescriptorUpdate()(a1, a2, *(_QWORD *)(v2 + 16));
}

void partial apply for closure #1 in NetworkManager.carrierNameUpdate(_:)()
{
  uint64_t v0;

  closure #1 in NetworkManager.carrierNameUpdate(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:)(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in NetworkManager.carrierNameUpdate(_:)(result, a2);
}

void partial apply for closure #1 in NetworkManager.signalStrengthUpdate()()
{
  uint64_t v0;

  closure #1 in NetworkManager.dataSubscriptionContextUpdate()(v0, (uint64_t)&unk_2518405F0, (uint64_t)partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(), (uint64_t)&block_descriptor_49);
}

void partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate()(void *a1, id a2)
{
  closure #1 in closure #1 in NetworkManager.signalStrengthUpdate()(a1, a2);
}

uint64_t objectdestroy_29Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.signalStrengthUpdate(_:)()
{
  uint64_t v0;

  closure #1 in NetworkManager.signalStrengthUpdate(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void partial apply for closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:)(void *a1, void *a2)
{
  uint64_t v2;

  closure #1 in closure #1 in NetworkManager.signalStrengthUpdate(_:)(a1, a2, *(_QWORD *)(v2 + 16));
}

void OUTLINED_FUNCTION_0_4()
{
  JUMPOUT(0x24956E018);
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_3_1(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_4_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return type metadata accessor for Logger();
}

BOOL OUTLINED_FUNCTION_7_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_8_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return static os_log_type_t.debug.getter();
}

id OUTLINED_FUNCTION_11_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  uint64_t v0;

  return v0 - 136;
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_allocObject();
}

id OUTLINED_FUNCTION_15_0()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1574));
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_20()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_21()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 152));
}

void OUTLINED_FUNCTION_22(const char *a1, uint64_t a2, uint64_t a3)
{
  NetworkManager.dataSubscriptionContextUpdate()(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_23(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = result;
  return result;
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionMetrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionMetrics.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionMetrics.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionAnalysisInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkManager.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkManager.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionProviderState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionProviderState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionProviderState.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionQueue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.primaryInterface.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletion.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 184))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletion.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.readWriteCounter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailableNotificationMachTime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailableNotificationMachTime.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailableNotificationMachTime.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.betterPathAvailable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.scopeToWiFiOnly.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isViable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isCancelled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isCancelled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 264))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isCancelled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 272))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isMPTCP.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isMPTCP.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 288))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.isMPTCP.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 296))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.mostRecentErrorFromConnection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 312))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 320))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 328))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openTimeoutTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 336))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 344))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 352))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 360))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openSlowTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 368))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 384))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 392))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.staleConnectionTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 400))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 408))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 416))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 424))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.connectionUnviableTimerInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 432))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.networkAnalytics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 440))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 448))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openConnectionWithInitialPayload(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 456))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 464))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 472))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.cancelConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 480))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.closeWithError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 488))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.shouldFallBackFromError(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 496))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.send(data:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 504))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.readData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 512))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateConnectionMetricsSnapshotReport()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 520))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 528))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.supportsInitialPayload()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 536))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.shouldFallbackQuickly()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 544))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.headerData(forceReconnect:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 552))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.configureNetworkAnalytics()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 560))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateAndEmitConnectionMetricsPreparationReport()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 568))();
}

uint64_t dispatch thunk of ConnectionProviderProtocol.updateAndEmitConnectionMetricsReadyEstablishmentReport()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 576))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProvider(_:received:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProvider(_:receivedIntermediateError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProvider(_:receivedViabilityChangeNotification:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConnectionProviderDelegate.connectionProviderReceivedBetterRouteNotification(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

void ConnectionProviderProtocol.connectionAnalysisInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[12];
  char v41;
  uint64_t v42;
  char v43;
  __n128 v44[18];
  _BYTE v45[40];
  __n128 v46[16];
  uint64_t v47;
  _QWORD v48[48];
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[65];
  __n128 v52[18];
  _DWORD v53[76];

  OUTLINED_FUNCTION_19();
  v2 = v1;
  v4 = v3;
  v39 = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_15_1(v4);
  OUTLINED_FUNCTION_28(v48, v51);
  v38 = v0;
  ConnectionConfiguration.resolvedURL.getter();
  outlined release of ConnectionConfiguration(v51);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_10_0((uint64_t)&v47, (uint64_t)v52);
  OUTLINED_FUNCTION_10_0((uint64_t)v52, (uint64_t)v53);
  v36 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v53);
  if (v36 == 1)
  {
    v37 = 0;
  }
  else
  {
    outlined release of ConnectionInterfaceReport?(v52);
    v37 = v53[9];
  }
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_10_0((uint64_t)v48, (uint64_t)v44);
  OUTLINED_FUNCTION_10_0((uint64_t)v44, (uint64_t)v45);
  if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v45) == 1
    || (outlined retain of ConnectionTCPInfoMetrics?(v46, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))outlined copy of ConnectionTCPInfoMetrics?), outlined release of ConnectionInterfaceReport?(v44), outlined init with take of ConnectionSnapshotReport?((uint64_t)v46, (uint64_t)v40 + 1, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?), _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg((uint64_t)v40 + 1) == 1)|| (outlined retain of ConnectionTCPInfoMetrics?(v46, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))outlined consume of ConnectionTCPInfoMetrics?), v43 == 1))
  {
    v35 = 0;
  }
  else
  {
    v35 = v42;
  }
  OUTLINED_FUNCTION_15_1(v4);
  outlined release of ConnectionConfiguration((_QWORD *)((char *)v40 + 1));
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 168))(v40, v4, v2);
  v34 = v40[0];
  OUTLINED_FUNCTION_15_1(v4);
  v7 = v48[41];
  v8 = v49;
  v9 = v50;
  v31 = v49;
  v32 = v50;
  v33 = v48[40];
  OUTLINED_FUNCTION_20_0();
  outlined copy of ConnectionPolicy?(v10, v11, v12, v13, v14, v15, v16, v17, v31, v32);
  outlined release of ConnectionConfiguration(v48);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v18 = v33;
    OUTLINED_FUNCTION_20_0();
    outlined consume of ConnectionPolicy?(v19, v20, v21, v22, v23, v24, v25, v26, v8, v9);
  }
  else
  {
    v18 = 0;
    v7 = 0;
  }
  v27 = v41;
  outlined init with take of ConnectionSnapshotReport?(v38, v39, (uint64_t *)&demangling cache variable for type metadata for URL?);
  v28 = (int *)type metadata accessor for ConnectionAnalysisInfo();
  v29 = v39 + v28[5];
  *(_DWORD *)v29 = v37;
  *(_BYTE *)(v29 + 4) = v36 == 1;
  *(_QWORD *)(v39 + v28[6]) = v35;
  *(_BYTE *)(v39 + v28[7]) = v27;
  *(_BYTE *)(v39 + v28[8]) = v34;
  v30 = (_QWORD *)(v39 + v28[9]);
  *v30 = v18;
  v30[1] = v7;
  __swift_storeEnumTagSinglePayload(v39, 0, 1, (uint64_t)v28);
  OUTLINED_FUNCTION_1_1();
}

void ConnectionProviderProtocol.primaryInterface.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr);
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __n128 *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  char v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  uint64_t v86;
  __n128 v87;
  __int128 v88;
  __n128 v89;
  __int128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  uint64_t v94;
  __n128 v95[44];
  _BYTE v96[296];
  _BYTE v97[360];
  __n128 v98[22];
  uint64_t v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  _BYTE v109[376];
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[712];
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  char v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  char v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  _BYTE v147[40];
  uint64_t v148;
  __n128 v149[6];
  uint64_t v150;
  uint64_t v151;
  _BYTE v152[384];
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  char v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  _BYTE v174[712];
  _BYTE v175[720];

  OUTLINED_FUNCTION_19();
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = v2;
  v4 = v1;
  v6 = v5;
  v7 = *(void (**)(uint64_t *__return_ptr))(v2 + 40);
  v7(&v137);
  OUTLINED_FUNCTION_26((uint64_t)v152, (uint64_t)v174);
  OUTLINED_FUNCTION_26((uint64_t)v174, (uint64_t)v175);
  OUTLINED_FUNCTION_3_2((uint64_t)v175);
  if (v8)
  {
    v94 = v6;
    v52 = v137;
    v9 = v138;
    v50 = v139;
    v48 = v140;
    v10 = v141;
    v46 = v142;
    v11 = v143;
    v42 = v145;
    v44 = v144;
    v40 = v146;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v147, (uint64_t)v95, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_12_0(v149);
    v12 = v150;
    v13 = v151;
    v88 = v155;
    v90 = v154;
    v86 = v156;
    v84 = v157;
    v82 = v158;
    v80 = v159;
    v78 = v160;
    v76 = v161;
    v74 = v162;
    v70 = v164;
    v72 = v163;
    v68 = v165;
    v66 = v166;
    v64 = v167;
    v62 = v168;
    v60 = v169;
    v58 = v170;
    v56 = v171;
    v54 = v172;
    v99 = v52;
    v100 = v9;
    v101 = v50;
    v102 = v48;
    v103 = v10;
    v104 = v46;
    v105 = v11;
    v106 = v44;
    v107 = v42;
    v108 = v40;
    v14 = outlined init with take of ConnectionSnapshotReport?((uint64_t)v95, (uint64_t)v109, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_11_1(v14, v15, v16, v17, v18, v19, v20, v21, v22, v35, v36, v37, v38, v39);
    v115 = v12;
    v116 = v13;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v174, (uint64_t)v117, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    v118 = v90;
    v119 = v88;
    v120 = v86;
    v121 = v84;
    v122 = v82;
    v123 = v80;
    v124 = v78;
    v125 = v76;
    v126 = v74;
    v127 = v72;
    v128 = v70;
    v129 = v68;
    v130 = v66;
    v131 = v64;
    v132 = v62;
    v133 = v60;
    v134 = v58;
    v135 = v56;
    v136 = v54;
    OUTLINED_FUNCTION_22_0();
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v98);
  }
  else
  {
    OUTLINED_FUNCTION_26((uint64_t)&v153, (uint64_t)v98);
    OUTLINED_FUNCTION_23_0();
    outlined release of ConnectionInterfaceReport?(v98);
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_26((uint64_t)v98, (uint64_t)v95);
    v23 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v95);
    if (v23 != 1)
    {
      v33 = v98;
      v34 = v6;
      goto LABEL_11;
    }
    v94 = v6;
  }
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v98, (uint64_t)&v173, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v7)(&v137, v4, v3);
  OUTLINED_FUNCTION_10_0((uint64_t)v147, (uint64_t)v97);
  OUTLINED_FUNCTION_10_0((uint64_t)v97, (uint64_t)v98);
  if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v98) == 1)
  {
    v24 = v137;
    v25 = v138;
    v26 = v140;
    v27 = v141;
    v28 = v142;
    v29 = v143;
    v43 = v144;
    v45 = v139;
    v41 = v145;
    v92 = v149[1];
    v93 = v149[0];
    v89 = v149[3];
    v91 = v149[2];
    v85 = v149[5];
    v87 = v149[4];
    v30 = v146;
    v81 = v151;
    v83 = v150;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v152, (uint64_t)v95, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    v77 = v155;
    v79 = v154;
    v31 = v156;
    v75 = v157;
    v73 = v158;
    v71 = v159;
    v69 = v160;
    v67 = v161;
    v65 = v162;
    v61 = v164;
    v63 = v163;
    v59 = v165;
    v57 = v166;
    v55 = v167;
    v53 = v168;
    v51 = v169;
    v49 = v170;
    v47 = v171;
    v32 = v172;
    v99 = v24;
    v100 = v25;
    v101 = v45;
    v102 = v26;
    v103 = v27;
    v104 = v28;
    v105 = v29;
    v106 = v43;
    v107 = v41;
    v108 = v30;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v97, (uint64_t)v109, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    *(__n128 *)&v109[360] = v93;
    v110 = v92;
    v111 = v91;
    v112 = v89;
    v113 = v87;
    v114 = v85;
    v115 = v83;
    v116 = v81;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v95, (uint64_t)v117, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    v118 = v79;
    v119 = v77;
    v120 = v31;
    v121 = v75;
    v122 = v73;
    v123 = v71;
    v124 = v69;
    v125 = v67;
    v126 = v65;
    v127 = v63;
    v128 = v61;
    v129 = v59;
    v130 = v57;
    v131 = v55;
    v132 = v53;
    v133 = v51;
    v134 = v49;
    v135 = v47;
    v136 = v32;
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_38();
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v96);
    v33 = (__n128 *)v96;
  }
  else
  {
    OUTLINED_FUNCTION_10_0((uint64_t)&v148, (uint64_t)v95);
    OUTLINED_FUNCTION_23_0();
    outlined release of ConnectionInterfaceReport?(v95);
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_38();
    v33 = v95;
  }
  v34 = v94;
LABEL_11:
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v33, v34, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  OUTLINED_FUNCTION_1_1();
}

uint64_t ConnectionProviderProtocol.connectionType.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t result;
  char v7;
  _QWORD v8[37];
  __n128 v9[18];
  _BYTE v10[296];

  result = (*(uint64_t (**)(void))(a2 + 280))();
  if ((result & 1) != 0)
  {
    v7 = 17;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a2 + 160))(v8, a1, a2);
    OUTLINED_FUNCTION_10_0((uint64_t)v8, (uint64_t)v9);
    OUTLINED_FUNCTION_10_0((uint64_t)v9, (uint64_t)v10);
    result = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v10);
    if ((_DWORD)result == 1)
    {
      v7 = 0;
    }
    else
    {
      result = outlined release of ConnectionInterfaceReport?(v9);
      v7 = v10[32];
    }
  }
  *a3 = v7;
  return result;
}

Swift::Void __swiftcall ConnectionProviderProtocol.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[2];
  _QWORD v15[6];

  OUTLINED_FUNCTION_19();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v14[0] = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_29();
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 152))(v4, v2);
  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v4;
  v12[3] = v2;
  v12[4] = v11;
  v15[4] = partial apply for closure #1 in ConnectionProviderProtocol.close();
  v15[5] = v12;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v15[3] = &block_descriptor_1;
  v13 = _Block_copy(v15);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v9, v0, v13);
  _Block_release(v13);

  (*(void (**)(uint64_t, uint64_t))(v14[0] + 8))(v0, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in ConnectionProviderProtocol.close()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x24956E090](v5);
  if (result)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a3 + 488))(0, a2, a3);
    return swift_unknownObjectRelease();
  }
  return result;
}

_QWORD *ConnectionProviderProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v6[65];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 144))(v6, a2, a3);
  OUTLINED_FUNCTION_28(&v5, v6);
  ConnectionConfiguration.hash(into:)(a1);
  return outlined release of ConnectionConfiguration(v6);
}

uint64_t static ConnectionProviderProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _BYTE v8[520];
  _BYTE v9[520];
  _QWORD v10[65];
  _QWORD v11[65];

  v4 = a4;
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 144);
  v6(v10, a3, a4);
  OUTLINED_FUNCTION_28(v9, v10);
  v6(v11, a3, v4);
  OUTLINED_FUNCTION_28(v8, v11);
  LOBYTE(v4) = static ConnectionConfiguration.== infix(_:_:)((uint64_t)v9, (uint64_t)v8);
  outlined release of ConnectionConfiguration(v11);
  outlined release of ConnectionConfiguration(v10);
  return v4 & 1;
}

void ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(unint64_t *);
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int v10;
  char v11;
  uint64_t (*v12)(unint64_t *, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t *v14;
  void (*v15)(unint64_t *);
  void (*v16)(unint64_t *);
  uint64_t v17;
  unint64_t *v18;
  void (*v19)(unint64_t *);
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  void *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  id v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  int8x16_t *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  char v58;
  void (*v59)(unint64_t *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  __n128 *v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  unsigned int v73;
  char v74;
  int32x2_t v75;
  int64x2_t v76;
  unint64_t *v77;
  unint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int32 v85;
  char v86;
  unint64_t *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int8 v101;
  unint64_t *v102;
  _BYTE *v103;
  unint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  __int8 v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int8 v131;
  _BYTE *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int8 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int8 v157;
  unint64_t *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  char v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  void (*v189)(unint64_t *);
  _BYTE v190[256];
  uint64_t v191;
  __int8 v192;
  _BYTE v193[320];
  _BYTE v194[32];
  _BYTE v195[240];
  uint64_t v196;
  __int8 v197;
  _BYTE v198[712];
  _BYTE v199[40];
  _BYTE *v200;
  _BYTE v201[712];
  _BYTE v202[712];
  _BYTE v203[24];
  _BYTE *v204;
  char v205;
  uint64_t v206;
  __int8 v207;
  _BYTE v208[40];
  uint64_t v209;
  _BYTE v210[272];
  uint64_t v211;
  __int8 v212;
  _BYTE v213[712];
  _BYTE v214[712];
  _BYTE v215[304];
  uint64_t v216;
  __int8 v217;
  _BYTE v218[40];
  uint64_t v219;
  _BYTE v220[712];
  __int32 v221;
  char v222;
  _BYTE *v223;
  int8x16_t *v224;
  _BYTE v225[40];
  uint64_t v226;
  _BYTE v227[712];
  _BYTE v228[712];
  int v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  int v238;
  char v239;
  int v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  char v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  char v269;
  _BYTE v270[712];
  uint64_t v271;
  char v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  char v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _BYTE v283[728];
  __int128 v284;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  char v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  char v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  char v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  char v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  char v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;
  int8x16_t v313;
  char v314;
  __n128 v315[6];
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _OWORD v319[44];
  uint64_t v320;
  uint64_t v321;
  char v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  char v330;
  uint64_t v331;
  char v332;
  uint64_t v333;
  char v334;
  uint64_t v335;
  char v336;
  _BYTE v337[712];
  _QWORD v338[89];
  _BYTE v339[712];
  _BYTE v340[568];
  uint64_t v341;
  _BYTE v342[720];

  OUTLINED_FUNCTION_19();
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = v2;
  v5 = v4;
  v189 = v6;
  v8 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v9 = *(int8x16_t **)(v1 + 32);
  v10 = *(_DWORD *)(v1 + 48);
  v11 = *(_BYTE *)(v1 + 52);
  OUTLINED_FUNCTION_14_1(v1 + 568, (uint64_t)v339);
  v12 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v3 + 56);
  OUTLINED_FUNCTION_18_0();
  *(_DWORD *)(v13 + 48) = v10;
  *(_BYTE *)(v13 + 52) = v11;
  v14 = OUTLINED_FUNCTION_21_0();
  v15(v14);
  swift_bridgeObjectRetain();
  v16 = (void (*)(unint64_t *))OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v17 + 16) = v8;
  swift_bridgeObjectRelease();
  v18 = OUTLINED_FUNCTION_21_0();
  v16(v18);
  swift_bridgeObjectRetain();
  v19 = (void (*)(unint64_t *))v12((unint64_t *)v340, v5, v3);
  *(_QWORD *)(v20 + 24) = v7;
  *(_QWORD *)(v20 + 32) = v9;
  swift_bridgeObjectRelease();
  v21 = OUTLINED_FUNCTION_21_0();
  v19(v21);
  OUTLINED_FUNCTION_15_1(v5);
  outlined release of ConnectionMetrics((uint64_t)v340);
  OUTLINED_FUNCTION_14_1((uint64_t)&v341, (uint64_t)v342);
  OUTLINED_FUNCTION_3_2((uint64_t)v342);
  if (v58)
  {
    _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v337);
    v22 = OUTLINED_FUNCTION_17_1();
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v22);
    if (one-time initialization token for sharedNetworkAnalytics != -1)
      v23 = swift_once();
    v24 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
    LODWORD(v338[0]) = 0;
    v338[1] = 0;
    v338[2] = 0xE000000000000000;
    v338[3] = 0;
    v338[4] = 0xE000000000000000;
    OUTLINED_FUNCTION_34(v23, (uint64_t)&v338[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    v338[46] = 0;
    v338[45] = 0;
    LOBYTE(v338[47]) = 1;
    v25 = OUTLINED_FUNCTION_17_1();
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v25, v26, v27);
    v338[85] = MEMORY[0x24BEE4AF8];
    v338[86] = MEMORY[0x24BEE4AF8];
    LODWORD(v338[87]) = 4;
    v338[88] = v24;
    v28 = OUTLINED_FUNCTION_16_1();
    memcpy(v28, v338, 0x2C8uLL);
    v29 = OUTLINED_FUNCTION_16_1();
    destructiveProjectEnumData for ConnectionConfigurationError(v29);
    v30 = v24;
    v31 = OUTLINED_FUNCTION_31();
    v12(v31, v5, v3);
    v9 = (int8x16_t *)(v32 + 568);
    OUTLINED_FUNCTION_0_5(v32 + 568, (uint64_t)&v302);
    v33 = OUTLINED_FUNCTION_16_1();
    OUTLINED_FUNCTION_0_5((uint64_t)v33, (uint64_t)v9);
    outlined release of ConnectionSnapshotReport?((uint64_t)&v302);
    v34 = OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_8_1((uint64_t)v34);
  }
  v35 = (int8x16_t *)&v229;
  OUTLINED_FUNCTION_15_1(v5);
  OUTLINED_FUNCTION_14_1((uint64_t)&v318, (uint64_t)v337);
  OUTLINED_FUNCTION_14_1((uint64_t)v337, (uint64_t)v338);
  OUTLINED_FUNCTION_3_2((uint64_t)v338);
  if (v58)
  {
    v188 = v5;
    v36 = v303;
    v9 = (int8x16_t *)&v287;
    v168 = v304;
    v169 = v302;
    v37 = v305;
    v38 = v306;
    v39 = v307;
    v167 = v308;
    v165 = v310;
    v166 = v309;
    v164 = v311;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&v312, (uint64_t)v270, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_12_0(v315);
    v40 = v316;
    v41 = v317;
    v186 = v319[43];
    v187 = v319[42];
    v184 = v321;
    v185 = v320;
    v183 = v322;
    v182 = v323;
    v181 = v324;
    v180 = v325;
    v179 = v326;
    v177 = v328;
    v178 = v327;
    v175 = v330;
    v176 = v329;
    v174 = v331;
    v173 = v332;
    v172 = v333;
    v171 = v334;
    v170 = v335;
    v42 = v336;
    v272 = v36;
    v273 = v168;
    v271 = v169;
    v274 = v37;
    v5 = v188;
    v275 = v38;
    v276 = v39;
    v277 = v167;
    v278 = v166;
    v279 = v165;
    v280 = v164;
    v43 = OUTLINED_FUNCTION_17_1();
    v45 = outlined init with take of ConnectionSnapshotReport?((uint64_t)v43, v44, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    OUTLINED_FUNCTION_11_1(v45, v46, v47, v48, v49, v50, v51, v52, v53, v159, v160, v161, v162, v163);
    v281 = v40;
    v282 = v41;
    OUTLINED_FUNCTION_34(v54, (uint64_t)v283, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    *(_OWORD *)&v283[712] = v187;
    v284 = v186;
    v285 = v185;
    v286 = v184;
    v287 = v183;
    v288 = v182;
    v289 = v181;
    v290 = v180;
    v291 = v179;
    v292 = v178;
    v293 = v177;
    v294 = v176;
    v295 = v175;
    v296 = v174;
    v297 = v173;
    v298 = v172;
    v299 = v171;
    v300 = v170;
    v301 = v42;
    OUTLINED_FUNCTION_30();
  }
  else
  {
    OUTLINED_FUNCTION_14_1((uint64_t)v319, (uint64_t)&v229);
    OUTLINED_FUNCTION_13_1();
    OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_30();
    v55 = OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_14_1((uint64_t)v55, v56);
    v57 = OUTLINED_FUNCTION_17_1();
    OUTLINED_FUNCTION_5_2((uint64_t)v57);
    v59 = v189;
    if (!v58)
    {
      OUTLINED_FUNCTION_33();
      goto LABEL_14;
    }
  }
  v60 = OUTLINED_FUNCTION_2_3((uint64_t)v228);
  v62 = OUTLINED_FUNCTION_4_2(v60, v61);
  OUTLINED_FUNCTION_0_5(v62, (uint64_t)&v271);
  OUTLINED_FUNCTION_0_5((uint64_t)&v271, (uint64_t)&v302);
  OUTLINED_FUNCTION_3_2((uint64_t)&v302);
  if (!v58)
  {
    v227[0] = 1;
    v225[0] = 1;
    LOBYTE(v221) = 1;
    v220[0] = 1;
    v218[0] = 1;
    v215[0] = 1;
    v214[0] = 1;
    v213[0] = 1;
    v210[0] = 1;
    v208[0] = 1;
    v203[0] = 1;
    v202[0] = 1;
    v201[0] = 1;
    v199[0] = 1;
    v198[0] = 1;
    v229 = 0;
    v230 = 1;
    v232 = 0;
    v231 = 0;
    v233 = 0;
    v234 = 1;
    v237 = 0u;
    v236 = 0u;
    v235 = 0u;
    v239 = 1;
    v238 = 0;
    v240 = 0;
    v241 = 1;
    v242 = MEMORY[0x24BEE4B00];
    v243 = 0;
    v244 = 0;
    v245 = 0;
    v246 = 1;
    v248 = 1;
    v247 = 0;
    v249 = 0;
    v250 = 1;
    v252 = 1;
    v251 = 0;
    v253 = 0;
    v254 = 1;
    v256 = 1;
    v255 = 0;
    v257 = 0;
    v258 = 0;
    v259 = 0;
    v260 = 1;
    v262 = 1;
    v263 = 0;
    v261 = 0;
    v264 = 0;
    v265 = 1;
    v267 = 1;
    v266 = 0;
    v268 = 0;
    v269 = 1;
    v63 = OUTLINED_FUNCTION_31();
    destructiveProjectEnumData for ConnectionConfigurationError(v63);
    v9 += 38;
    OUTLINED_FUNCTION_0_5((uint64_t)v9, (uint64_t)v270);
    v64 = OUTLINED_FUNCTION_31();
    OUTLINED_FUNCTION_0_5((uint64_t)v64, (uint64_t)v9);
    v65 = (__n128 *)OUTLINED_FUNCTION_17_1();
    outlined retain of ConnectionNetworkReport?(v65);
  }
  OUTLINED_FUNCTION_8_1((uint64_t)v228);
  v59 = v189;
LABEL_14:
  v66 = OUTLINED_FUNCTION_16_1();
  v67 = OUTLINED_FUNCTION_2_3((uint64_t)v66);
  v69 = OUTLINED_FUNCTION_4_2(v67, v68);
  OUTLINED_FUNCTION_0_5(v69, (uint64_t)&v229);
  v70 = OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_0_5((uint64_t)v70, v71);
  v72 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_3_2((uint64_t)v72);
  if (!v58)
  {
    v35 = &v313;
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v339, (uint64_t)&v302, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    OUTLINED_FUNCTION_3_2((uint64_t)&v302);
    if (v58)
      v73 = 1;
    else
      v73 = 0;
    v74 = v73 | v314;
    v75 = vdup_n_s32(v73);
    v76.i64[0] = v75.u32[0];
    v76.i64[1] = v75.u32[1];
    v9[58] = vandq_s8(v313, (int8x16_t)vcgezq_s64(vshlq_n_s64(v76, 0x3FuLL)));
    v9[59].i8[0] = v74 & 1;
  }
  v77 = OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_8_1((uint64_t)v77);
  v78 = OUTLINED_FUNCTION_41();
  v79 = OUTLINED_FUNCTION_2_3((uint64_t)v78);
  v81 = OUTLINED_FUNCTION_4_2(v79, v80);
  OUTLINED_FUNCTION_0_5(v81, (uint64_t)v227);
  OUTLINED_FUNCTION_0_5((uint64_t)v227, (uint64_t)v228);
  OUTLINED_FUNCTION_3_2((uint64_t)v228);
  if (!v58)
  {
    OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v225);
    OUTLINED_FUNCTION_0_5((uint64_t)v225, (uint64_t)&v271);
    v82 = OUTLINED_FUNCTION_5_2((uint64_t)&v271);
    if (!v58)
    {
      OUTLINED_FUNCTION_1_3(v82, v83, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (v58
        || (OUTLINED_FUNCTION_40((uint64_t)&v35[2].i64[1], v84, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_5_2((uint64_t)&v221), v58))
      {
        v85 = 0;
        v86 = 1;
      }
      else
      {
        v85 = v221;
        v86 = v222;
      }
      v9[38].i32[0] = v85;
      v9[38].i8[4] = v86;
    }
  }
  v87 = OUTLINED_FUNCTION_41();
  OUTLINED_FUNCTION_8_1((uint64_t)v87);
  v88 = v225;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v339, (uint64_t)v225, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_3_2((uint64_t)v225);
  if (!v58)
  {
    OUTLINED_FUNCTION_40((uint64_t)&v226, v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_2((uint64_t)&v221);
    if (!v58)
    {
      v9 = v224;
      if (v224)
      {
        v88 = v223;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_2_3((uint64_t)v215);
        v91 = v90;
        OUTLINED_FUNCTION_25(v90 + 568, (uint64_t)&v271);
        OUTLINED_FUNCTION_25((uint64_t)&v271, (uint64_t)&v302);
        OUTLINED_FUNCTION_3_2((uint64_t)&v302);
        if (!v58)
        {
          OUTLINED_FUNCTION_25(v91 + 608, (uint64_t)v218);
          OUTLINED_FUNCTION_25((uint64_t)v218, (uint64_t)v220);
          v92 = OUTLINED_FUNCTION_41();
          OUTLINED_FUNCTION_5_2((uint64_t)v92);
          if (!v58)
          {
            *(_QWORD *)(v91 + 616) = v88;
            *(_QWORD *)(v91 + 624) = v9;
          }
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_8_1((uint64_t)v215);
      }
    }
  }
  v93 = OUTLINED_FUNCTION_35();
  v94 = OUTLINED_FUNCTION_2_3((uint64_t)v93);
  v96 = OUTLINED_FUNCTION_4_2(v94, v95);
  OUTLINED_FUNCTION_0_5(v96, (uint64_t)v220);
  v97 = OUTLINED_FUNCTION_41();
  OUTLINED_FUNCTION_0_5((uint64_t)v97, (uint64_t)&v221);
  OUTLINED_FUNCTION_3_2((uint64_t)&v221);
  if (!v58)
  {
    OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v218);
    OUTLINED_FUNCTION_0_5((uint64_t)v218, (uint64_t)&v271);
    v98 = OUTLINED_FUNCTION_5_2((uint64_t)&v271);
    if (!v58)
    {
      OUTLINED_FUNCTION_1_3(v98, v99, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (v58
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)(v88 + 40), (uint64_t)v215, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_5_2((uint64_t)v215), v58))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        v100 = v216;
        v101 = v217;
      }
      v9[57].i64[0] = v100;
      v9[57].i8[8] = v101;
    }
  }
  v102 = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_8_1((uint64_t)v102);
  v103 = v218;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v339, (uint64_t)v218, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_3_2((uint64_t)v218);
  if (!v58)
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&v219, (uint64_t)v215, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_2((uint64_t)v215);
    if (!v58)
    {
      v103 = (_BYTE *)v215[265];
      v104 = OUTLINED_FUNCTION_36();
      v105 = OUTLINED_FUNCTION_2_3((uint64_t)v104);
      v107 = OUTLINED_FUNCTION_4_2(v105, v106);
      OUTLINED_FUNCTION_0_5(v107, (uint64_t)&v271);
      OUTLINED_FUNCTION_0_5((uint64_t)&v271, (uint64_t)&v302);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (!v58)
      {
        OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v213);
        OUTLINED_FUNCTION_0_5((uint64_t)v213, (uint64_t)v214);
        v108 = OUTLINED_FUNCTION_35();
        OUTLINED_FUNCTION_5_2((uint64_t)v108);
        if (!v58)
          v9[54].i8[9] = (char)v103;
      }
      v109 = OUTLINED_FUNCTION_36();
      OUTLINED_FUNCTION_8_1((uint64_t)v109);
    }
  }
  v110 = OUTLINED_FUNCTION_37();
  v111 = OUTLINED_FUNCTION_2_3((uint64_t)v110);
  v113 = OUTLINED_FUNCTION_4_2(v111, v112);
  OUTLINED_FUNCTION_0_5(v113, (uint64_t)v214);
  v114 = OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_0_5((uint64_t)v114, (uint64_t)v215);
  OUTLINED_FUNCTION_3_2((uint64_t)v215);
  if (!v58)
  {
    OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v213);
    OUTLINED_FUNCTION_0_5((uint64_t)v213, (uint64_t)&v271);
    v115 = OUTLINED_FUNCTION_5_2((uint64_t)&v271);
    if (!v58)
    {
      OUTLINED_FUNCTION_1_3(v115, v116, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (v58
        || (v117 = (uint64_t)(v103 + 40),
            v103 = v210,
            outlined init with take of ConnectionSnapshotReport?(v117, (uint64_t)v210, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), v118 = OUTLINED_FUNCTION_36(), OUTLINED_FUNCTION_5_2((uint64_t)v118), v58))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        v119 = v211;
        v120 = v212;
      }
      v9[55].i64[0] = v119;
      v9[55].i8[8] = v120;
    }
  }
  v121 = OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_8_1((uint64_t)v121);
  v122 = OUTLINED_FUNCTION_2_3((uint64_t)v202);
  v124 = OUTLINED_FUNCTION_4_2(v122, v123);
  OUTLINED_FUNCTION_0_5(v124, (uint64_t)v210);
  v125 = OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_0_5((uint64_t)v125, (uint64_t)v213);
  OUTLINED_FUNCTION_3_2((uint64_t)v213);
  if (!v58)
  {
    OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v208);
    v126 = OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_0_5((uint64_t)v126, (uint64_t)&v271);
    v127 = OUTLINED_FUNCTION_5_2((uint64_t)&v271);
    if (!v58)
    {
      OUTLINED_FUNCTION_1_3(v127, v128, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (v58
        || (OUTLINED_FUNCTION_39((uint64_t)(v103 + 40), v129, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_5_2((uint64_t)v203), v58))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        v130 = v206;
        v131 = v207;
      }
      v9[56].i64[0] = v130;
      v9[56].i8[8] = v131;
    }
  }
  OUTLINED_FUNCTION_8_1((uint64_t)v202);
  v132 = v208;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v339, (uint64_t)v208, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  v133 = OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_3_2((uint64_t)v133);
  if (!v58)
  {
    OUTLINED_FUNCTION_39((uint64_t)&v209, v134, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    OUTLINED_FUNCTION_5_2((uint64_t)v203);
    if (!v58 && (v205 & 1) == 0)
    {
      v132 = v204;
      v135 = OUTLINED_FUNCTION_2_3((uint64_t)v199);
      v137 = OUTLINED_FUNCTION_4_2(v135, v136);
      OUTLINED_FUNCTION_0_5(v137, (uint64_t)&v271);
      OUTLINED_FUNCTION_0_5((uint64_t)&v271, (uint64_t)&v302);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (!v58)
      {
        OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v201);
        OUTLINED_FUNCTION_0_5((uint64_t)v201, (uint64_t)v202);
        OUTLINED_FUNCTION_5_2((uint64_t)v202);
        if (!v58)
        {
          v9[39].i64[1] = (uint64_t)v132;
          v9[40].i8[0] = 0;
        }
      }
      OUTLINED_FUNCTION_8_1((uint64_t)v199);
    }
  }
  v138 = OUTLINED_FUNCTION_2_3((uint64_t)v198);
  v140 = OUTLINED_FUNCTION_4_2(v138, v139);
  OUTLINED_FUNCTION_0_5(v140, (uint64_t)v202);
  OUTLINED_FUNCTION_0_5((uint64_t)v202, (uint64_t)v203);
  OUTLINED_FUNCTION_3_2((uint64_t)v203);
  if (!v58)
  {
    OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v201);
    OUTLINED_FUNCTION_0_5((uint64_t)v201, (uint64_t)&v271);
    v141 = OUTLINED_FUNCTION_5_2((uint64_t)&v271);
    if (!v58)
    {
      OUTLINED_FUNCTION_1_3(v141, v142, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (v58
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)(v132 + 40), (uint64_t)v199, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_5_2((uint64_t)v199), v58))
      {
        v132 = 0;
        v143 = 0;
      }
      else
      {
        v132 = v200;
        v143 = swift_bridgeObjectRetain();
      }
      v9[40].i64[1] = (uint64_t)v132;
      v9[41].i64[0] = v143;
      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_8_1((uint64_t)v198);
  v144 = OUTLINED_FUNCTION_2_3((uint64_t)v193);
  v146 = OUTLINED_FUNCTION_4_2(v144, v145);
  OUTLINED_FUNCTION_0_5(v146, (uint64_t)v199);
  OUTLINED_FUNCTION_0_5((uint64_t)v199, (uint64_t)v201);
  OUTLINED_FUNCTION_3_2((uint64_t)v201);
  if (!v58)
  {
    OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v198);
    OUTLINED_FUNCTION_0_5((uint64_t)v198, (uint64_t)&v271);
    v147 = OUTLINED_FUNCTION_5_2((uint64_t)&v271);
    if (!v58)
    {
      OUTLINED_FUNCTION_1_3(v147, v148, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (v58
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)(v132 + 40), (uint64_t)v195, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_5_2((uint64_t)v195), v58))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        v149 = v196;
        v150 = v197;
      }
      v9[53].i64[0] = v149;
      v9[53].i8[8] = v150;
    }
  }
  OUTLINED_FUNCTION_8_1((uint64_t)v193);
  v151 = OUTLINED_FUNCTION_2_3((uint64_t)v194);
  v153 = OUTLINED_FUNCTION_4_2(v151, v152);
  OUTLINED_FUNCTION_0_5(v153, (uint64_t)v195);
  OUTLINED_FUNCTION_0_5((uint64_t)v195, (uint64_t)v198);
  OUTLINED_FUNCTION_3_2((uint64_t)v198);
  if (!v58)
  {
    OUTLINED_FUNCTION_0_5((uint64_t)v9[38].i64, (uint64_t)v193);
    OUTLINED_FUNCTION_0_5((uint64_t)v193, (uint64_t)&v271);
    v154 = OUTLINED_FUNCTION_5_2((uint64_t)&v271);
    if (!v58)
    {
      OUTLINED_FUNCTION_1_3(v154, v155, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)&v302);
      if (v58
        || (outlined init with take of ConnectionSnapshotReport?((uint64_t)(v132 + 40), (uint64_t)v190, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), OUTLINED_FUNCTION_5_2((uint64_t)v190), v58))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        v156 = v191;
        v157 = v192;
      }
      v9[54].i64[0] = v156;
      v9[54].i8[8] = v157;
    }
  }
  OUTLINED_FUNCTION_8_1((uint64_t)v194);
  if (v59)
  {
    OUTLINED_FUNCTION_15_1(v5);
    OUTLINED_FUNCTION_13_1();
    v158 = OUTLINED_FUNCTION_16_1();
    v59(v158);
    outlined release of ConnectionMetrics((uint64_t)&v302);
  }
  OUTLINED_FUNCTION_1_1();
}

uint64_t outlined release of ConnectionMetrics(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v2 = *(_QWORD *)(a1 + 64);
  v36 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(void **)(a1 + 88);
  v66 = *(_QWORD *)(a1 + 96);
  v65 = *(_QWORD *)(a1 + 104);
  v64 = *(_QWORD *)(a1 + 112);
  v63 = *(_QWORD *)(a1 + 120);
  v62 = *(_QWORD *)(a1 + 128);
  v61 = *(_QWORD *)(a1 + 136);
  v60 = *(_QWORD *)(a1 + 144);
  v59 = *(_QWORD *)(a1 + 152);
  v6 = *(void **)(a1 + 448);
  v46 = *(_QWORD *)(a1 + 456);
  v45 = *(_QWORD *)(a1 + 464);
  v44 = *(_QWORD *)(a1 + 472);
  v43 = *(_QWORD *)(a1 + 480);
  v42 = *(_QWORD *)(a1 + 488);
  v41 = *(_QWORD *)(a1 + 496);
  v40 = *(_QWORD *)(a1 + 504);
  v39 = *(_QWORD *)(a1 + 512);
  v33 = *(_OWORD *)(a1 + 520);
  v31 = *(_OWORD *)(a1 + 536);
  v7 = *(_QWORD *)(a1 + 552);
  v8 = *(void **)(a1 + 560);
  v77 = *(_QWORD *)(a1 + 576);
  v78 = *(_QWORD *)(a1 + 568);
  v75 = *(_OWORD *)(a1 + 648);
  v76 = *(_OWORD *)(a1 + 632);
  v73 = *(_OWORD *)(a1 + 680);
  v74 = *(_OWORD *)(a1 + 664);
  v71 = *(_OWORD *)(a1 + 712);
  v72 = *(_OWORD *)(a1 + 696);
  v69 = *(_OWORD *)(a1 + 744);
  v70 = *(_OWORD *)(a1 + 728);
  v68 = *(_OWORD *)(a1 + 760);
  v67 = *(_OWORD *)(a1 + 776);
  v58 = *(_OWORD *)(a1 + 792);
  v57 = *(_OWORD *)(a1 + 808);
  v54 = *(_OWORD *)(a1 + 824);
  v50 = *(_OWORD *)(a1 + 840);
  v48 = *(_OWORD *)(a1 + 856);
  v47 = *(_OWORD *)(a1 + 872);
  v38 = *(_OWORD *)(a1 + 888);
  v37 = *(_OWORD *)(a1 + 904);
  v35 = *(_OWORD *)(a1 + 920);
  v34 = *(_OWORD *)(a1 + 936);
  v32 = *(_OWORD *)(a1 + 952);
  v30 = *(_OWORD *)(a1 + 968);
  v29 = *(_OWORD *)(a1 + 984);
  v28 = *(_OWORD *)(a1 + 1000);
  v49 = *(_QWORD *)(a1 + 584);
  v51 = *(_QWORD *)(a1 + 592);
  v52 = *(_QWORD *)(a1 + 600);
  v53 = *(_QWORD *)(a1 + 608);
  v55 = *(_QWORD *)(a1 + 616);
  v56 = *(_QWORD *)(a1 + 624);
  v26 = *(_OWORD *)(a1 + 176);
  v27 = *(_OWORD *)(a1 + 160);
  v24 = *(_OWORD *)(a1 + 208);
  v25 = *(_OWORD *)(a1 + 192);
  v22 = *(_OWORD *)(a1 + 240);
  v23 = *(_OWORD *)(a1 + 224);
  v20 = *(_OWORD *)(a1 + 272);
  v21 = *(_OWORD *)(a1 + 256);
  v18 = *(_OWORD *)(a1 + 304);
  v19 = *(_OWORD *)(a1 + 288);
  v16 = *(_OWORD *)(a1 + 336);
  v17 = *(_OWORD *)(a1 + 320);
  v14 = *(_OWORD *)(a1 + 368);
  v15 = *(_OWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 400);
  v13 = *(_OWORD *)(a1 + 384);
  v10 = *(_OWORD *)(a1 + 432);
  v11 = *(_OWORD *)(a1 + 416);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionHTTPHeaderReport?(v36, v2, v3, v4, v5);
  outlined consume of ConnectionPreparationReport?(v66, v65, v64, v63, v62, v61, v60, v59, v27, *((uint64_t *)&v27 + 1), v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v6);
  outlined consume of ConnectionEstablishmentReport?(v46, v45, v44, v43, v42, v41, v40, v39, v33, *((uint64_t *)&v33 + 1), v31, *((uint64_t *)&v31 + 1), v7, v8);
  outlined consume of ConnectionSnapshotReport?(v78, v77, v49, v51, v52, v53, v55, v56, v76, *((uint64_t *)&v76 + 1), v75, *((uint64_t *)&v75 + 1), v74, *((uint64_t *)&v74 + 1), v73, *((uint64_t *)&v73 + 1), v72, *((uint64_t *)&v72 + 1), v71,
    *((uint64_t *)&v71 + 1),
    v70,
    *((uint64_t *)&v70 + 1),
    v69,
    *((uint64_t *)&v69 + 1),
    v68,
    *((uint64_t *)&v68 + 1),
    v67,
    *((uint64_t *)&v67 + 1),
    v58,
    *((uint64_t *)&v58 + 1),
    v57,
    *((uint64_t *)&v57 + 1),
    v54,
    *((uint64_t *)&v54 + 1),
    v50,
    *((uint64_t *)&v50 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of ConnectionHTTPHeaderReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t result;

  if (a5)
  {

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionPreparationReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  uint64_t result;

  if (a43)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionInterfaceReport?(a6, a7, a8, a9, a10, a11, a12);

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionInterfaceReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of ConnectionTCPInfoMetrics?(a6, a7);
  }
  return result;
}

uint64_t outlined consume of ConnectionEstablishmentReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t result;

  if (a8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionSnapshotReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t result;
  void *v59;

  if (a3)
  {
    v59 = (void *)STACK[0x630];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionNetworkReport?(a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    outlined consume of ConnectionInterfaceReport?(a49, a50, a51, a52, a53, a54, a55);

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionNetworkReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  result = a14;
  if (a14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s11SiriNetwork24ConnectionSnapshotReportVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined copy of ConnectionNetworkReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a14)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s11SiriNetwork010ConnectionB6ReportVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 104);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined retain of ConnectionNetworkReport?(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;

  v2 = OUTLINED_FUNCTION_9_1(a1);
  OUTLINED_FUNCTION_7_1(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2, v12, v13, v14, v15, v16, v17);
  return v1;
}

void _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(void *a1)
{
  bzero(a1, 0x139uLL);
}

void _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(void *a1)
{
  bzero(a1, 0x121uLL);
}

uint64_t outlined release of ConnectionSnapshotReport?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v14 = *(_OWORD *)(a1 + 416);
  v12 = *(_OWORD *)(a1 + 384);
  v13 = *(_OWORD *)(a1 + 400);
  v10 = *(_OWORD *)(a1 + 352);
  v11 = *(_OWORD *)(a1 + 368);
  v8 = *(_OWORD *)(a1 + 320);
  v9 = *(_OWORD *)(a1 + 336);
  v6 = *(_OWORD *)(a1 + 288);
  v7 = *(_OWORD *)(a1 + 304);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined consume of ConnectionSnapshotReport?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    *(_QWORD *)(a1 + 432));
  return a1;
}

uint64_t sub_246ED5D38()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_246ED5D5C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConnectionProviderProtocol.close()()
{
  uint64_t *v0;

  return closure #1 in ConnectionProviderProtocol.close()(v0[4], v0[2], v0[3]);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t _s11SiriNetwork25ConnectionInterfaceReportVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined release of ConnectionInterfaceReport?(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t);
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;

  v2 = OUTLINED_FUNCTION_9_1(a1);
  OUTLINED_FUNCTION_7_1(v3, v4, v5, v6, v7, v8, v9, v10, v11, v2, v12, v13, v14, v15, v16, v17);
  return v1;
}

uint64_t outlined copy of ConnectionInterfaceReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return outlined copy of ConnectionTCPInfoMetrics?(a6, a7);
  }
  return result;
}

uint64_t _s11SiriNetwork27ConnectionPreparationReportVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 336);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *outlined release of ConnectionConfiguration(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (void *)a1[13];
  v12 = a1[41];
  v13 = a1[40];
  v10 = a1[43];
  v11 = a1[42];
  v8 = a1[45];
  v9 = a1[44];
  v6 = a1[47];
  v7 = a1[46];
  v3 = a1[49];
  v5 = a1[48];
  v14 = a1[51];
  v15 = a1[50];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionPolicy?(v13, v12, v11, v10, v9, v8, v7, v6, v5, v3);
  outlined consume of ConnectionPolicyRoute?(v15, v14);
  return a1;
}

uint64_t outlined consume of ConnectionPolicy?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = a10;
  if (a10)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ConnectionPolicyRoute?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ConnectionPolicy?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a10)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t outlined init with take of ConnectionSnapshotReport?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

__n128 *outlined retain of ConnectionTCPInfoMetrics?(__n128 *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))
{
  OUTLINED_FUNCTION_7_1(a1->n128_u64[0], a1->n128_i64[1], a1[1].n128_i64[0], a1[1].n128_i64[1], a1[2].n128_i64[0], a1[2].n128_i64[1], a1[3].n128_i64[0], a1[3].n128_i64[1], a2, a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_5(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_1_3(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of ConnectionSnapshotReport?((uint64_t)&STACK[0x49D8], (uint64_t)&STACK[0x3EA8], a3);
}

uint64_t OUTLINED_FUNCTION_2_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t OUTLINED_FUNCTION_3_2(uint64_t a1)
{
  return _s11SiriNetwork24ConnectionSnapshotReportVSgWOg(a1);
}

uint64_t OUTLINED_FUNCTION_4_2(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

uint64_t OUTLINED_FUNCTION_5_2(uint64_t a1)
{
  return _s11SiriNetwork010ConnectionB6ReportVSgWOg(a1);
}

uint64_t OUTLINED_FUNCTION_7_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t)@<X8>, __n128 a10@<Q0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>, __n128 a15@<Q5>, __n128 a16@<Q6>)
{
  return a9(a1, a2, a3, a4, a5, a6, a7, a8, a10.n128_u64[0], a10.n128_u64[1], a11.n128_u64[0], a11.n128_u64[1], a12.n128_u64[0], a12.n128_u64[1], a13.n128_u64[0], a13.n128_u64[1], a14.n128_u64[0], a14.n128_u64[1], a15.n128_u64[0],
           a15.n128_u64[1],
           a16.n128_u64[0],
           a16.n128_u64[1]);
}

uint64_t OUTLINED_FUNCTION_8_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(a1, 0);
}

__n128 OUTLINED_FUNCTION_9_1(__n128 *a1)
{
  return a1[4];
}

uint64_t OUTLINED_FUNCTION_10_0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

__n128 OUTLINED_FUNCTION_11_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14)
{
  uint64_t v14;
  __n128 result;

  *(_OWORD *)(v14 + 456) = a14;
  *(_OWORD *)(v14 + 472) = a13;
  *(_OWORD *)(v14 + 488) = a12;
  *(_OWORD *)(v14 + 504) = a11;
  result = a9;
  *(_OWORD *)(v14 + 520) = a10;
  *(__n128 *)(v14 + 536) = a9;
  return result;
}

__n128 OUTLINED_FUNCTION_12_0@<Q0>(__n128 *a1@<X8>)
{
  return a1[5];
}

void *OUTLINED_FUNCTION_13_1()
{
  return memcpy(&STACK[0x3908], &STACK[0x3EA8], 0x599uLL);
}

uint64_t OUTLINED_FUNCTION_14_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_15_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

unint64_t *OUTLINED_FUNCTION_16_1()
{
  return &STACK[0x3908];
}

unint64_t *OUTLINED_FUNCTION_17_1()
{
  return &STACK[0x3640];
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  uint64_t (*v0)(unint64_t *, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(&STACK[0x4CA0], v2, v1);
}

unint64_t *OUTLINED_FUNCTION_21_0()
{
  return &STACK[0x4CA0];
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return outlined release of ConnectionMetrics((uint64_t)&STACK[0x870]);
}

void *OUTLINED_FUNCTION_23_0()
{
  return memcpy(&STACK[0x870], &STACK[0xE10], 0x599uLL);
}

uint64_t OUTLINED_FUNCTION_25(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_26(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void *OUTLINED_FUNCTION_28(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x204uLL);
}

uint64_t OUTLINED_FUNCTION_30()
{
  return outlined release of ConnectionMetrics((uint64_t)&STACK[0x3908]);
}

unint64_t *OUTLINED_FUNCTION_31()
{
  return &STACK[0x3378];
}

unint64_t *OUTLINED_FUNCTION_32()
{
  return &STACK[0x3378];
}

uint64_t OUTLINED_FUNCTION_33()
{
  return outlined retain of ConnectionNetworkReport?((__n128 *)&STACK[0x3378]);
}

uint64_t OUTLINED_FUNCTION_34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of ConnectionSnapshotReport?((uint64_t)&STACK[0x4448], a2, a3);
}

unint64_t *OUTLINED_FUNCTION_35()
{
  return &STACK[0x1D38];
}

unint64_t *OUTLINED_FUNCTION_36()
{
  return &STACK[0x17A8];
}

unint64_t *OUTLINED_FUNCTION_37()
{
  return &STACK[0x14E0];
}

uint64_t OUTLINED_FUNCTION_38()
{
  return outlined release of ConnectionInterfaceReport?((__n128 *)&STACK[0x13B0]);
}

uint64_t OUTLINED_FUNCTION_39(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of ConnectionSnapshotReport?(a1, (uint64_t)&STACK[0x1218], a3);
}

uint64_t OUTLINED_FUNCTION_40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of ConnectionSnapshotReport?(a1, (uint64_t)&STACK[0x2858], a3);
}

unint64_t *OUTLINED_FUNCTION_41()
{
  return &STACK[0x2590];
}

uint64_t OUTLINED_FUNCTION_42()
{
  return 1;
}

uint64_t dispatch thunk of NetworkConnectionProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.currentPath.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.stateUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.viabilityUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.betterPathUpdateHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.betterPathUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.betterPathUpdateHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.pathUpdateHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.pathUpdateHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.pathUpdateHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.init(endpoint:configuration:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 136))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.start(queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.send(content:contentContext:isComplete:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 160))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.receive(minimumIncompleteLength:maximumLength:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 168))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.readyEstablishmentReport(queue:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.getAttemptedEndpoints()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of NetworkConnectionProtocol.getConnectionEdgeID(wasConnected:attemptedEndpoints:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

id ConnectionSnapshotReport.netConnectionSnapshot.getter()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t __src[40];
  _QWORD __dst[40];
  _BYTE v27[328];

  v1 = *v0;
  outlined init with take of ConnectionNetworkReport?((uint64_t)(v0 + 10), (uint64_t)v27);
  v2 = *((_QWORD *)v0 + 85);
  v3 = *((_QWORD *)v0 + 86);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95358]), sel_init);
  objc_msgSend(v4, sel_setSequenceNumber_, v1);
  if (v4)
  {
    type metadata accessor for NetworkAnalytics(0);
    v5 = v4;
    static NetworkAnalytics.netProvider(from:)();
    objc_msgSend(v5, sel_setProvider_, v6);

    v7 = v5;
    static NetworkAnalytics.netSnapshotState(from:)();
    objc_msgSend(v7, sel_setSnapshotTriggerReason_, v8);

  }
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_19:
    if (v4)
    {
      outlined init with take of ConnectionNetworkReport?((uint64_t)v27, (uint64_t)__src);
      if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)__src) == 1)
      {
        v21 = v4;
        v22 = 0;
      }
      else
      {
        memcpy(__dst, __src, 0x139uLL);
        v23 = v4;
        v22 = ConnectionNetworkReport.netSessionConnectionNetwork.getter();
      }
      OUTLINED_FUNCTION_0_6(v4, sel_setNetwork_);

    }
    return v4;
  }
  __src[0] = MEMORY[0x24BEE4AF8];
  v9 = *(_QWORD *)(v3 + 16);
  if (!v9)
    goto LABEL_17;
  swift_bridgeObjectRetain();
  v10 = v9 - 1;
  for (i = 32; ; i += 256)
  {
    memcpy(__dst, (const void *)(v3 + i), 0xF9uLL);
    v12 = objc_allocWithZone(MEMORY[0x24BE95320]);
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__dst);
    v13 = objc_msgSend(v12, sel_init);
    if (v13)
      break;
    outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
    if (!v10)
      goto LABEL_16;
LABEL_15:
    --v10;
  }
  v14 = v13;
  v15 = (void *)__dst[1];
  if (__dst[1])
  {
    v16 = __dst[0];
    v17 = v13;
    v15 = (void *)MEMORY[0x24956D034](v16, v15);
  }
  else
  {
    v18 = v13;
  }
  v19 = SLOBYTE(__dst[4]);
  objc_msgSend(v14, sel_setName_, v15);

  objc_msgSend(v14, sel_setConnectionType_, dword_246F72DDC[v19]);
  outlined release of ConnectionTCPInfoMetrics((uint64_t)__dst);
  v20 = v14;
  MEMORY[0x24956D118]();
  if (*(_QWORD *)((__src[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((__src[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  if (v10)
    goto LABEL_15;
LABEL_16:
  swift_bridgeObjectRelease();
LABEL_17:
  if (v4)
  {
    outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionSnapshotCaptured.networkInterfaces.setter(__src[0], v4, &lazy cache variable for type metadata for NETSchemaNETNetworkInterface);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  return v4;
}

id ConnectionSnapshotReport.netDebugConnectionSnapshot.getter()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  _BYTE v22[320];
  uint64_t v23;
  _BYTE __dst[313];
  _BYTE v25[328];

  outlined init with take of ConnectionNetworkReport?(v0 + 40, (uint64_t)v25);
  v1 = *(double *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_BYTE *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 688);
  v6 = *(_DWORD *)(v0 + 696);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE952E8]), sel_init);
  if (v7)
  {
    if (one-time initialization token for sharedNetworkAnalytics != -1)
      swift_once();
    objc_msgSend(v7, sel_setSequenceNumber_, NetworkAnalytics.getSequenceNumber()());
    outlined init with take of ConnectionNetworkReport?((uint64_t)v25, (uint64_t)v22);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v22) == 1)
    {
      v8 = v7;
      v9 = 0;
    }
    else
    {
      memcpy(__dst, v22, sizeof(__dst));
      v10 = v7;
      v9 = ConnectionNetworkReport.netDebugSessionConnectionNetwork.getter();
    }
    OUTLINED_FUNCTION_0_6(v7, sel_setNetwork_);

  }
  if (*(_QWORD *)(v4 + 16))
  {
    v23 = MEMORY[0x24BEE4AF8];
    v11 = *(_QWORD *)(v5 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      v12 = 32;
      do
      {
        memcpy(v22, (const void *)(v5 + v12), 0xF9uLL);
        v13 = ConnectionTCPInfoMetrics.netDebugNetworkInterface.getter();
        if (v13)
        {
          v14 = v13;
          MEMORY[0x24956D118]();
          if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

        }
        v12 += 256;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    if (!v7)
    {
      swift_bridgeObjectRelease();
      return v7;
    }
    outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionSnapshotCaptured.networkInterfaces.setter(v23, v7, &lazy cache variable for type metadata for NETSchemaNETDebugNetworkInterface);
  }
  if (v7)
  {
    v15 = v7;
    if ((v3 & 1) != 0)
      v16 = 0;
    else
      v16 = ConnectionPingInfoReport.netPingInfo.getter(v2, v1);
    OUTLINED_FUNCTION_0_6(v15, sel_setPingInfo_);

    if (v6 == 4)
    {
      v17 = v15;
      v18 = 0;
    }
    else
    {
      type metadata accessor for NetworkAnalytics(0);
      v19 = v15;
      ConnectionQualityReport.symptomsBasedNetworkQuality.getter(v6);
      v18 = (void *)static NetworkAnalytics.netDebugSessionConnectionQuality(from:)(v20);
      swift_bridgeObjectRelease();
    }
    OUTLINED_FUNCTION_0_6(v15, sel_setQuality_);

  }
  return v7;
}

uint64_t outlined init with take of ConnectionNetworkReport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionSnapshotCaptured.networkInterfaces.setter(uint64_t a1, void *a2, unint64_t *a3)
{
  Class isa;

  type metadata accessor for CTServiceDescriptor(0, a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setNetworkInterfaces_, isa);

}

uint64_t outlined retain of ConnectionTCPInfoMetrics(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ConnectionTCPInfoMetrics(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

id OUTLINED_FUNCTION_0_6(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t ConnectionAnalysisInfo.connectionURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of URL?(v1, a1);
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t ConnectionAnalysisInfo.interfaceIndex.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(OUTLINED_FUNCTION_0_7() + 20));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t type metadata accessor for ConnectionAnalysisInfo()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConnectionAnalysisInfo;
  if (!type metadata singleton initialization cache for ConnectionAnalysisInfo)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ConnectionAnalysisInfo.sendBufferSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_0_7() + 24));
}

uint64_t ConnectionAnalysisInfo.wwanPreferred.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(OUTLINED_FUNCTION_0_7() + 28));
}

uint64_t ConnectionAnalysisInfo.connectionType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = OUTLINED_FUNCTION_0_7();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ConnectionAnalysisInfo.policyId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(OUTLINED_FUNCTION_0_7() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConnectionAnalysisInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    v10 = a3[5];
    v11 = a3[6];
    v12 = (char *)a1 + v10;
    v13 = (char *)a2 + v10;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[9];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t destroy for ConnectionAnalysisInfo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_DWORD *)v10 = *(_DWORD *)v11;
  v10[4] = v11[4];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v12] = a2[v12];
  v13 = a3[9];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = *(_DWORD *)v13;
  v12[4] = v13[4];
  *(_DWORD *)v12 = v14;
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  v15 = a3[9];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for URL();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_DWORD *)v10 = *(_DWORD *)v11;
  v10[4] = v11[4];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v12] = a2[v12];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for ConnectionAnalysisInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for URL();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = a3[5];
  v12 = a3[6];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  v16 = a3[9];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionAnalysisInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_246ED749C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAnalysisInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_246ED7534(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return __swift_storeEnumTagSinglePayload(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  return result;
}

void type metadata completion function for ConnectionAnalysisInfo()
{
  unint64_t v0;

  type metadata accessor for URL?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

uint64_t OUTLINED_FUNCTION_0_7()
{
  return type metadata accessor for ConnectionAnalysisInfo();
}

void RPCOspreyConnectionProvider.connection.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

void RPCOspreyConnectionProvider.connectionMetrics.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

void RPCOspreyConnectionProvider.__allocating_init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  RPCOspreyConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(a1, a2, a3, a4);
  OUTLINED_FUNCTION_17_0();
}

uint64_t RPCOspreyConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[520];
  _BYTE v22[360];
  _BYTE v23[712];
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[376];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[90];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;

  v5 = v4;
  v20 = a3;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_28(v21, a1);
  *(_QWORD *)(v5 + 1512) = 0;
  *(_QWORD *)(v5 + 1528) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(_WORD *)(v5 + 2168) = 0;
  *(_OWORD *)(v5 + 2080) = 0u;
  *(_OWORD *)(v5 + 2096) = 0u;
  *(_QWORD *)(v5 + 2109) = 0;
  *(_OWORD *)(v5 + 2120) = 0u;
  *(_OWORD *)(v5 + 2136) = 0u;
  *(_QWORD *)(v5 + 2152) = 0;
  UUID.init()();
  v13 = UUID.uuidString.getter();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)(v5 + 16) = v13;
  *(_QWORD *)(v5 + 24) = v15;
  OUTLINED_FUNCTION_28((void *)(v5 + 1552), v21);
  *(_QWORD *)(v5 + 2072) = a2;
  _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(v22);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v23);
  v24 = 0;
  v25 = 1;
  v16 = MEMORY[0x24BEE4AF8];
  v27 = 0u;
  v26 = MEMORY[0x24BEE4AF8];
  v28 = MEMORY[0x24BEE4AF8];
  v29 = 0;
  v30 = 1;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  outlined init with take of ConnectionMetrics?((uint64_t)v22, (uint64_t)v34, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  *(_OWORD *)&v34[360] = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  outlined init with take of ConnectionMetrics?((uint64_t)v23, (uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  v41[89] = v16;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  v45 = 1;
  v46 = 0;
  v47 = 1;
  v48 = 0;
  v49 = 1;
  v50 = 0u;
  v51 = 0;
  v52 = 1;
  v53 = 0;
  v54 = 1;
  v55 = 0;
  v56 = 1;
  v57 = 0;
  v58 = 1;
  OUTLINED_FUNCTION_22_1((void *)(v5 + 72), &v24);
  *(_QWORD *)(v5 + 1536) = 0;
  *(_BYTE *)(v5 + 1544) = 2;
  *(_QWORD *)(v5 + 2160) = a4;
  v17 = *(void **)(v5 + 1512);
  *(_QWORD *)(v5 + 1512) = v20;

  return v5;
}

void RPCOspreyConnectionProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  os_log_type_t v5;
  _BYTE v6[1440];
  _QWORD v7[66];

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_5_1();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriNetwork);
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_35_0();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_2() = 0;
    OUTLINED_FUNCTION_78(&dword_246EC7000, v2, v3, "Provider - RPCOspreyConnectionProvider: Deallocating.");
    OUTLINED_FUNCTION_0_4();
  }

  RPCOspreyConnectionProvider.configureConnectionHandler(_:)();
  *(_QWORD *)(v0 + 1528) = 0;
  swift_unknownObjectWeakAssign();
  OUTLINED_FUNCTION_74();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v4);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  RPCOspreyConnectionProvider.closeWithError(_:)(0);
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_7_0(v5))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_2() = 0;
    OUTLINED_FUNCTION_78(&dword_246EC7000, v2, (os_log_type_t)v2, "Provider - RPCOspreyConnectionProvider: Deallocated.");
    OUTLINED_FUNCTION_0_4();
  }

  swift_bridgeObjectRelease();
  outlined destroy of RPCOspreyConnectionProtocol?(v0 + 32, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  OUTLINED_FUNCTION_22_1(v6, (const void *)(v0 + 72));
  outlined release of ConnectionMetrics((uint64_t)v6);

  outlined destroy of weak ConnectionProviderDelegate?(v0 + 1520);
  outlined consume of ConnectionProviderState(*(id *)(v0 + 1536), *(_BYTE *)(v0 + 1544));
  OUTLINED_FUNCTION_28(v7, (const void *)(v0 + 1552));
  outlined release of ConnectionConfiguration(v7);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(*(_QWORD *)(v0 + 2080));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  OUTLINED_FUNCTION_17_0();
}

uint64_t RPCOspreyConnectionProvider.__deallocating_deinit()
{
  RPCOspreyConnectionProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RPCOspreyConnectionProvider()
{
  return objc_opt_self();
}

void RPCOspreyConnectionProvider.openConnectionWithInitialPayload(_:completion:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_5_1();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_16_2();
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_60(v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v10 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v6 = 136315138;
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    OUTLINED_FUNCTION_55();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_14();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v4, v1, "Provider - RPCOspreyConnectionProvider [%s]: Preparing connection with initial payload.", v6);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_74();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v9);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.configureNetworkAnalytics()();
}

uint64_t specialized RPCOspreyConnectionProvider.createConnectionWithInitialPayload<A>(_:rpcOspreyConnectionProtocolType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  _OWORD v31[3];
  _QWORD v32[5];
  _BYTE v33[520];
  _QWORD v34[66];
  void (*v35)(_BYTE *, _QWORD);

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v31 - v10;
  v12 = (const void *)(v0 + 1552);
  memcpy(v34, v12, 0x204uLL);
  memcpy(v33, v12, 0x204uLL);
  ConnectionConfiguration.resolvedURL.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for URL?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v13 = swift_allocError();
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = 0;
    v31[0] = xmmword_246F72F10;
    *(_OWORD *)(v14 + 24) = xmmword_246F72F10;
    v15 = *(void **)(v1 + 1536);
    *(_QWORD *)(v1 + 1536) = v13;
    LOBYTE(v14) = *(_BYTE *)(v1 + 1544);
    *(_BYTE *)(v1 + 1544) = 1;
    outlined consume of ConnectionProviderState(v15, v14);
    swift_allocError();
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = 0;
    *(_OWORD *)(v16 + 24) = v31[0];
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    siri_kdebug_trace();
    v18 = *(void **)(v1 + 1536);
    *(_QWORD *)(v1 + 1536) = 0;
    v19 = *(_BYTE *)(v1 + 1544);
    *(_BYTE *)(v1 + 1544) = 2;
    outlined consume of ConnectionProviderState(v18, v19);
    v20 = type metadata accessor for SiriNetworkOspreyChannel();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    memcpy(v33, v34, 0x204uLL);
    v32[3] = v20;
    v32[4] = &protocol witness table for SiriNetworkOspreyChannel;
    outlined retain of ConnectionConfiguration(v34);
    v32[0] = SiriNetworkOspreyChannel.__allocating_init(url:connectionConfiguration:)((uint64_t)v9);
    outlined init with take of ConnectionMetrics?((uint64_t)v32, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    swift_beginAccess();
    outlined assign with take of RPCOspreyConnectionProtocol?((uint64_t)v33, v1 + 32);
    swift_endAccess();
    RPCOspreyConnectionProvider.connection.modify();
    v23 = v21;
    v24 = *(_QWORD *)(v22 + 24);
    if (v24)
    {
      v25 = *(_QWORD *)(v1 + 16);
      v26 = *(_QWORD *)(v1 + 24);
      v27 = *(_QWORD *)(v22 + 32);
      v28 = v22;
      v29 = *(_QWORD *)(v22 + 24);
      v35 = v23;
      __swift_mutable_project_boxed_opaque_existential_1(v28, v29);
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 64);
      swift_bridgeObjectRetain();
      v30(v25, v26, v24, v27);
      v35(v33, 0);
    }
    else
    {
      v21(v33, 0);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
}

void RPCOspreyConnectionProvider.configureConnectionHandler(_:)()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;

  v1 = *(void **)(v0 + 1536);
  *(_QWORD *)(v0 + 1536) = 1;
  v2 = *(_BYTE *)(v0 + 1544);
  *(_BYTE *)(v0 + 1544) = 2;
  outlined consume of ConnectionProviderState(v1, v2);
}

void RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 aBlock;
  uint64_t v12;
  _BYTE v13[24];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x24BDAC7A8](v5);
  v10 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_54();
  v6 = *(void **)(v2 + 1536);
  *(_QWORD *)(v2 + 1536) = 0;
  v7 = *(_BYTE *)(v2 + 1544);
  *(_BYTE *)(v2 + 1544) = 0;
  outlined consume of ConnectionProviderState(v6, v7);
  OUTLINED_FUNCTION_48();
  outlined init with copy of RPCOspreyConnectionProtocol?(v2 + 32, (uint64_t)&aBlock);
  if (v12)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&aBlock, (uint64_t)v13);
    specialized ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, a2);
    specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()();
  }
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  v8 = OUTLINED_FUNCTION_11_2();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 3;
  OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F10, v8, (uint64_t)v9);
  OUTLINED_FUNCTION_33_0();
}

uint64_t closure #1 in RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)()
{
  uint64_t result;
  uint64_t v1;
  void (*v2)(_OWORD *);
  _QWORD *v3;
  uint64_t v4;
  _OWORD v5[3];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(void (**)(_OWORD *))(result + 2080);
    if (v2)
    {
      v3 = (_QWORD *)(result + 2080);
      swift_retain();
      RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()();
      memset(v5, 0, 41);
      v2(v5);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v2);
      v4 = *(_QWORD *)(v1 + 2080);
      *v3 = 0;
      *(_QWORD *)(v1 + 2088) = 0;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v4);
    }
    return swift_release();
  }
  return result;
}

void *RPCOspreyConnectionProvider.closeWithError(_:)(void *result)
{
  uint64_t v1;
  os_log_type_t v2;
  _QWORD *v3;
  void *v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void **);
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  if ((*(_BYTE *)(v1 + 2115) & 1) == 0)
  {
    v3 = (_QWORD *)v1;
    v4 = result;
    *(_WORD *)(v1 + 2114) = 257;
    v5 = *(_BYTE *)(v1 + 1544) == 2 && *(_QWORD *)(v1 + 1536) == 2;
    if (v5)
    {
      *(_QWORD *)(v1 + 1536) = 0;
      *(_BYTE *)(v1 + 1544) = 2;
      outlined consume of ConnectionProviderState((id)2, 2u);
    }
    if (v4)
    {
      *(_QWORD *)&v30 = v4;
      OUTLINED_FUNCTION_41_0();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {
        if ((unint64_t)v28 >> 60 == 10 && !*((_QWORD *)&v28 + 1))
        {
          v6 = (_QWORD)v28 == 0xA000000000000000 && v26 == (void *)1;
          if (v6 && v27 == 0)
          {
            OUTLINED_FUNCTION_94();
            if (!v5)
              swift_once();
            v7 = OUTLINED_FUNCTION_5_1();
            v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.siriNetwork);
            OUTLINED_FUNCTION_16_2();
            Logger.logObject.getter();
            v9 = OUTLINED_FUNCTION_35_0();
            if (OUTLINED_FUNCTION_27_0(v9))
            {
              v10 = (uint8_t *)OUTLINED_FUNCTION_2_2();
              v26 = (void *)OUTLINED_FUNCTION_2_2();
              OUTLINED_FUNCTION_12_1(4.8149e-34);
              OUTLINED_FUNCTION_63((uint64_t)&off_246F72000, v11, (uint64_t *)&v26);
              OUTLINED_FUNCTION_47();
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              OUTLINED_FUNCTION_14();
              OUTLINED_FUNCTION_40_0();
              v12 = "Provider - RPCOspreyConnectionProvider [%s]: Close and cancel connection after receiving cancellation";
              goto LABEL_26;
            }
LABEL_33:

            OUTLINED_FUNCTION_14();
            goto LABEL_34;
          }
        }
        outlined consume of NetworkConnectionError(v26, v27, *((uint64_t *)&v27 + 1), v28, *((void **)&v28 + 1));
      }
      OUTLINED_FUNCTION_94();
      if (!v5)
        swift_once();
      v16 = OUTLINED_FUNCTION_5_1();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_16_2();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = OUTLINED_FUNCTION_2_2();
        v20 = (_QWORD *)OUTLINED_FUNCTION_2_2();
        v26 = (void *)OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v19 = 136315394;
        v21 = v3[2];
        OUTLINED_FUNCTION_29_0();
        *(_QWORD *)&v30 = OUTLINED_FUNCTION_63(v21, v22, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_40_0();
        *(_WORD *)(v19 + 12) = 2112;
        OUTLINED_FUNCTION_41_0();
        v23 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)&v30 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v20 = v23;
        OUTLINED_FUNCTION_42_0();
        OUTLINED_FUNCTION_42_0();
        _os_log_impl(&dword_246EC7000, v17, v18, "Provider - RPCOspreyConnectionProvider [%s]: Close and cancel connection for error: %@", (uint8_t *)v19, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_0_4();
      }
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_42_0();
      OUTLINED_FUNCTION_42_0();

LABEL_34:
      specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
      specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
      specialized ConnectionProviderProtocol.cancelOpenTimer()();
      specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
      OUTLINED_FUNCTION_0_2();
      outlined init with copy of RPCOspreyConnectionProtocol?((uint64_t)(v3 + 4), (uint64_t)&v30);
      if (*((_QWORD *)&v31 + 1))
      {
        outlined init with take of RPCOspreyConnectionProtocol(&v30, (uint64_t)&v26);
        v32 = 0;
        v30 = 0u;
        v31 = 0u;
        OUTLINED_FUNCTION_0_2();
        outlined assign with take of RPCOspreyConnectionProtocol?((uint64_t)&v30, (uint64_t)(v3 + 4));
        swift_endAccess();
        OUTLINED_FUNCTION_67();
        OUTLINED_FUNCTION_89();
      }
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
      v24 = (void (*)(void **))v3[260];
      if (v24)
      {
        v26 = v4;
        v27 = 0u;
        v28 = 0u;
        v29 = 1;
        OUTLINED_FUNCTION_41_0();
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v24);
        v24(&v26);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v24);
        OUTLINED_FUNCTION_42_0();
        v25 = v3[260];
        v3[260] = 0;
        v3[261] = 0;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v25);
      }
      else if (MEMORY[0x24956E090](v3 + 190))
      {
        specialized BackgroundConnection.connectionProvider(_:received:)();
        swift_unknownObjectRelease();
      }
      OUTLINED_FUNCTION_67();
      OUTLINED_FUNCTION_89();
    }
    OUTLINED_FUNCTION_94();
    if (!v5)
      swift_once();
    v13 = OUTLINED_FUNCTION_5_1();
    v8 = __swift_project_value_buffer(v13, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_16_2();
    Logger.logObject.getter();
    v14 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_27_0(v14))
    {
      v10 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v26 = (void *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_12_1(4.8149e-34);
      OUTLINED_FUNCTION_63((uint64_t)&off_246F72000, v15, (uint64_t *)&v26);
      OUTLINED_FUNCTION_47();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_40_0();
      v12 = "Provider - RPCOspreyConnectionProvider [%s]: Close and cancel connection with no error";
LABEL_26:
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v8, v2, v12, v10);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }
    goto LABEL_33;
  }
  return result;
}

void RPCOspreyConnectionProvider.send(data:completion:)(uint64_t a1, unint64_t a2, void (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  NSObject *v55;
  os_log_type_t v56;
  os_log_type_t v57;
  NSObject *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61[6];

  v5 = (_QWORD *)v3;
  v61[5] = *MEMORY[0x24BDAC8D0];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_54();
  if (a2 >> 60 == 15)
    goto LABEL_36;
  if (!*(_BYTE *)(v3 + 1544))
    goto LABEL_10;
  v10 = *(void **)(v3 + 1536);
  if (*(_BYTE *)(v3 + 1544) == 1)
  {
    outlined copy of Data?(a1, a2);
    OUTLINED_FUNCTION_44();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v11 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_3(v11, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_44();
    outlined copy of Data?(a1, a2);
    swift_retain();
    OUTLINED_FUNCTION_44();
    Logger.logObject.getter();
    v12 = OUTLINED_FUNCTION_58();
    v58 = v3;
    if (os_log_type_enabled((os_log_t)v3, v12))
    {
      v56 = v12;
      v13 = OUTLINED_FUNCTION_2_2();
      v54 = (_QWORD *)OUTLINED_FUNCTION_2_2();
      v61[0] = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v13 = 136315650;
      v14 = a1;
      v15 = swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_82(v15, v16, v61);
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_69();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2048;
      v17 = OUTLINED_FUNCTION_92();
      OUTLINED_FUNCTION_10_1(v14);
      *(_QWORD *)&v59 = v17;
      OUTLINED_FUNCTION_65();
      OUTLINED_FUNCTION_10_1(v14);
      *(_WORD *)(v13 + 22) = 2112;
      if (v10)
      {
        v18 = v10;
        v19 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)&v59 = v19;
        OUTLINED_FUNCTION_66();
      }
      else
      {
        *(_QWORD *)&v59 = 0;
        OUTLINED_FUNCTION_66();
        v19 = 0;
      }
      *v54 = v19;
      outlined consume of ConnectionProviderState(v10, 1u);
      OUTLINED_FUNCTION_43();
      _os_log_impl(&dword_246EC7000, v58, v56, "Provider - RPCOspreyConnectionProvider [%s]: Send data failed. Sending %ld bytes error %@.", (uint8_t *)v13, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_15_2();
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_5_3();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_5_3();
    outlined consume of ConnectionProviderState(v10, 1u);
    OUTLINED_FUNCTION_43();

    if (v10)
    {
      v61[0] = (uint64_t)v10;
      v30 = v10;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v31 = type metadata accessor for NWError();
      v32 = swift_dynamicCast();
      __swift_storeEnumTagSinglePayload(v4, v32 ^ 1u, 1, v31);
      if (__swift_getEnumTagSinglePayload(v4, 1, v31) != 1)
      {
        lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0688], MEMORY[0x24BDE0698]);
        v33 = OUTLINED_FUNCTION_11_2();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v34, v4, v31);
LABEL_34:
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        v52 = OUTLINED_FUNCTION_11_2();
        v53[1] = 0;
        v53[2] = 0;
        *v53 = v33;
        OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F20, v52, (uint64_t)v53);
        OUTLINED_FUNCTION_43();
        goto LABEL_35;
      }
    }
    else
    {
      v51 = type metadata accessor for NWError();
      __swift_storeEnumTagSinglePayload(v4, 1, 1, v51);
    }
    outlined destroy of RPCOspreyConnectionProtocol?(v4, &demangling cache variable for type metadata for NWError?);
    v33 = 0;
    goto LABEL_34;
  }
  if ((unint64_t)v10 < 2)
  {
LABEL_10:
    OUTLINED_FUNCTION_39_0();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v20 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_3(v20, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v21 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_61(v21))
    {
      v22 = OUTLINED_FUNCTION_2_2();
      v61[0] = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v22 = 136315394;
      v23 = *(_QWORD *)(v3 + 16);
      v24 = *(_QWORD *)(v3 + 24);
      OUTLINED_FUNCTION_29_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_34_0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      *(_QWORD *)&v59 = Data.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Data?(a1, a2);
      OUTLINED_FUNCTION_38_0(&dword_246EC7000, v25, v26, "Provider - RPCOspreyConnectionProvider [%s]: Send data failed. Sending %ld bytes in a connection during setup, waiting, or preparing state.");
      OUTLINED_FUNCTION_15_2();
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_5_3();

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v27 = OUTLINED_FUNCTION_11_2();
    v29 = 4;
LABEL_15:
    v28[1] = 0;
    v28[2] = 0;
    *v28 = v29;
    OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F10, v27, (uint64_t)v28);
LABEL_35:
    OUTLINED_FUNCTION_5_3();
    goto LABEL_36;
  }
  if (v10 != (void *)2)
  {
    OUTLINED_FUNCTION_39_0();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v44 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_3(v44, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v45 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_61(v45))
    {
      v46 = OUTLINED_FUNCTION_2_2();
      v61[0] = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v46 = 136315394;
      v47 = OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_81(v47, v48, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_34_0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2048;
      *(_QWORD *)&v59 = OUTLINED_FUNCTION_92();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_10_1(a1);
      OUTLINED_FUNCTION_38_0(&dword_246EC7000, v49, v50, "Provider - RPCOspreyConnectionProvider [%s]: Send data failed. Sending %ld bytes in a cancelled connection.");
      OUTLINED_FUNCTION_15_2();
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_34_0();
    OUTLINED_FUNCTION_5_3();

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v27 = OUTLINED_FUNCTION_11_2();
    v29 = 1;
    goto LABEL_15;
  }
  v35 = (v3 + 32);
  OUTLINED_FUNCTION_48();
  outlined init with copy of RPCOspreyConnectionProtocol?((uint64_t)(v5 + 4), (uint64_t)&v59);
  if (!v60)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v59, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    goto LABEL_36;
  }
  outlined init with take of RPCOspreyConnectionProtocol(&v59, (uint64_t)v61);
  v36 = v5[262];
  v37 = __CFADD__(v36, 1);
  v38 = v36 + 1;
  if (v37)
  {
    __break(1u);
    goto LABEL_41;
  }
  v5[262] = v38;
  v35 = *OUTLINED_FUNCTION_77();
  OUTLINED_FUNCTION_39_0();
  SiriNetworkOspreyChannel.send(_:)();
  if (one-time initialization token for siriNetwork != -1)
LABEL_41:
    swift_once();
  v39 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_3(v39, (uint64_t)static Logger.siriNetwork);
  Logger.logObject.getter();
  v40 = OUTLINED_FUNCTION_35_0();
  if (os_log_type_enabled(v35, v40))
  {
    v57 = v40;
    v41 = OUTLINED_FUNCTION_2_2();
    *(_QWORD *)&v59 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v41 = 136315394;
    v55 = v35;
    v43 = v5[2];
    v42 = v5[3];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, (uint64_t *)&v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_34_0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2048;
    OUTLINED_FUNCTION_92();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_5_3();
    _os_log_impl(&dword_246EC7000, v55, v57, "Provider - RPCOspreyConnectionProvider [%s]: Send data to streamer. %ld bytes in streamer.", (uint8_t *)v41, 0x16u);
    OUTLINED_FUNCTION_15_2();
    OUTLINED_FUNCTION_0_4();
  }
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_5_3();

  a3(0, 0);
  OUTLINED_FUNCTION_5_3();
  OUTLINED_FUNCTION_76();
LABEL_36:
  OUTLINED_FUNCTION_33_0();
}

uint64_t RPCOspreyConnectionProvider.readData(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_log_type_t v3;
  _QWORD *v4;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock;
  uint64_t v38;
  void (*v39)();
  void *v40;
  void (*v41)(void *);
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  char v48[48];

  v4 = (_QWORD *)v2;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v7 = OUTLINED_FUNCTION_5_1();
  v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_16_2();
  Logger.logObject.getter();
  v9 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_60(v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_QWORD *)&v43 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v10 = 136315138;
    v11 = swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_82(v11, v12, (uint64_t *)&v43);
    OUTLINED_FUNCTION_55();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_14();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v8, v3, "Provider - RPCOspreyConnectionProvider [%s]: Reader. Ready to receive data.", v10);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_14();
  specialized ConnectionProviderProtocol.setupStaleConnectionTimer()();
  OUTLINED_FUNCTION_48();
  outlined init with copy of RPCOspreyConnectionProtocol?(v2 + 32, (uint64_t)&v43);
  if (v45)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v43, (uint64_t)v48);
    if ((*(_BYTE *)(v2 + 2115) & 1) == 0)
    {
      v20 = (void **)OUTLINED_FUNCTION_77();
      v21 = OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_86();
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = v21;
      v22[3] = a1;
      v22[4] = a2;
      v23 = OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_86();
      v24 = *v20;
      OUTLINED_FUNCTION_16_2();
      swift_retain();
      swift_retain();
      OUTLINED_FUNCTION_83();
      v25 = (void *)MEMORY[0x24956D034](0xD000000000000015, 0x8000000246F76FD0);
      v46 = partial apply for closure #1 in RPCOspreyConnectionProvider.readData(_:);
      v47 = v4;
      v26 = MEMORY[0x24BDAC760];
      v27 = OUTLINED_FUNCTION_84((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> (), v31, v33, v35, aBlock, v38, (uint64_t)v39, (uint64_t)v40, (uint64_t)v41, v42, MEMORY[0x24BDAC760], 1107296256, v44, v45);
      OUTLINED_FUNCTION_16_2();
      swift_release();
      v46 = partial apply for closure #2 in RPCOspreyConnectionProvider.readData(_:);
      v47 = v22;
      v28 = OUTLINED_FUNCTION_84((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (), v32, v34, v36, aBlock, v38, (uint64_t)v39, (uint64_t)v40, (uint64_t)v41, v42, v26, 1107296256, v44, v45);
      v41 = partial apply for closure #3 in RPCOspreyConnectionProvider.readData(_:);
      v42 = v23;
      aBlock = v26;
      v38 = 1107296256;
      v39 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
      v40 = &block_descriptor_10_0;
      v29 = _Block_copy(&aBlock);
      swift_retain();
      OUTLINED_FUNCTION_83();
      v30 = objc_msgSend(v24, sel_bidirectionalStreamingRequestWithMethodName_requestBuilder_streamingResponseHandler_completion_, v25, v27, v28, v29);
      _Block_release(v28);
      _Block_release(v27);

      _Block_release(v29);
      swift_release();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_14();
      swift_release();
      swift_release();
      OUTLINED_FUNCTION_69();
      swift_release();
      return OUTLINED_FUNCTION_76();
    }
    OUTLINED_FUNCTION_76();
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  }
  OUTLINED_FUNCTION_16_2();
  Logger.logObject.getter();
  v13 = OUTLINED_FUNCTION_58();
  if (os_log_type_enabled(v8, v13))
  {
    v14 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_QWORD *)&v43 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v14 = 136315138;
    v15 = OUTLINED_FUNCTION_62();
    aBlock = OUTLINED_FUNCTION_81(v15, v16, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_14();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v8, v13, "Provider - RPCOspreyConnectionProvider [%s]: Reader. Error - Connection does not exist or it was cancelled.", v14);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_14();
  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  v17 = OUTLINED_FUNCTION_11_2();
  v18[1] = 0;
  v18[2] = 0;
  *v18 = 3;
  return OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F10, v17, (uint64_t)v18);
}

void closure #1 in RPCOspreyConnectionProvider.readData(_:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v5, v6, "Provider - RPCOspreyConnectionProvider [%s]: Trace identifier %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v8, -1, -1);
    MEMORY[0x24956E018](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  objc_msgSend(a1, sel_setEnableDeviceAuthentication_, 1, v16, v17);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x24956D034](v13, v14);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setClientTraceIdentifier_, v15);

}

uint64_t closure #2 in RPCOspreyConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t aBlock;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  void *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50[4];

  v38 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v41 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v40 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for DispatchQoS();
  v39 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v35 = a5;
    v36 = v11;
    v37 = v8;
    v15 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v50[0] = v34;
    *(_DWORD *)v15 = 136315394;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v17 = *(_QWORD *)(Strong + 16);
      v18 = *(_QWORD *)(Strong + 24);
      swift_bridgeObjectRetain();
      swift_release();
      aBlock = v17;
      v45 = v18;
      Strong = String.init<A>(describing:)();
      v20 = v19;
    }
    else
    {
      v20 = 0xE000000000000000;
    }
    aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(Strong, v20, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    v21 = Data.count.getter();
    outlined consume of Data._Representation(a1, a2);
    aBlock = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data._Representation(a1, a2);
    _os_log_impl(&dword_246EC7000, v13, v14, "Provider - RPCOspreyConnectionProvider [%s]: Reader. Read data. %ld bytes", (uint8_t *)v15, 0x16u);
    v22 = v34;
    swift_arrayDestroy();
    MEMORY[0x24956E018](v22, -1, -1);
    MEMORY[0x24956E018](v15, -1, -1);

    v11 = v36;
    v8 = v37;
    a5 = v35;
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    swift_release_n();
    outlined consume of Data._Representation(a1, a2);

  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_BYTE *)(result + 2115) == 1)
    {
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = v38;
      *(_QWORD *)(v24 + 24) = a5;
      v48 = partial apply for closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:);
      v49 = (_QWORD *)v24;
      aBlock = MEMORY[0x24BDAC760];
      v45 = 1107296256;
      v46 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v47 = &block_descriptor_22;
      v25 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v43 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      v26 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x24956D244](0, v11, v26, v25);
      _Block_release(v25);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v8);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v42);
      swift_release();
    }
    else
    {
      v27 = *(_QWORD *)(result + 2096);
      v28 = __CFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(result + 2096) = v29;
      v30 = (_QWORD *)swift_allocObject();
      v30[2] = v38;
      v30[3] = a5;
      v30[4] = a1;
      v30[5] = a2;
      v48 = partial apply for closure #2 in closure #2 in RPCOspreyConnectionProvider.readData(_:);
      v49 = v30;
      aBlock = MEMORY[0x24BDAC760];
      v45 = 1107296256;
      v46 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v47 = &block_descriptor_16_0;
      v31 = _Block_copy(&aBlock);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v43 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      v32 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x24956D244](0, v11, v32, v31);
      _Block_release(v31);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v8);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v42);
      swift_release();
      RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()();
      RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()();
      RPCOspreyConnectionProvider.updateConnectionMetricsSnapshotReport()();
    }
    return swift_release();
  }
  return result;
}

void closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:)(void (*a1)(_QWORD, unint64_t, void *, _QWORD))
{
  void *v2;
  uint64_t v3;

  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  v2 = (void *)swift_allocError();
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 1;
  *(_OWORD *)(v3 + 24) = xmmword_246F72F10;
  a1(0, 0xF000000000000000, v2, 0);

}

void closure #3 in RPCOspreyConnectionProvider.readData(_:)(void *a1)
{
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  int v5;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return;
  v3 = Strong;
  v4 = *(void **)(Strong + 1536);
  v5 = *(unsigned __int8 *)(Strong + 1544);
  if (v5 == 2 && v4 == (void *)3)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v33 = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = *(_QWORD *)(v3 + 16);
      v27 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      v28 = "Provider - RPCOspreyConnectionProvider [%s]: Streamer. Connection cancelled";
LABEL_19:
      _os_log_impl(&dword_246EC7000, v22, v23, v28, v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v25, -1, -1);
      MEMORY[0x24956E018](v24, -1, -1);
      swift_release();

      return;
    }
LABEL_20:

    swift_release_n();
    return;
  }
  if (!a1)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v33 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = *(_QWORD *)(v3 + 16);
      v31 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      v28 = "Provider - RPCOspreyConnectionProvider [%s]: Streamer called.";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  *(_QWORD *)(Strong + 1536) = a1;
  *(_BYTE *)(Strong + 1544) = 1;
  v7 = a1;
  v8 = a1;
  outlined consume of ConnectionProviderState(v4, v5);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  v10 = a1;
  swift_retain();
  v11 = a1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v33 = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = *(_QWORD *)(v3 + 16);
    v17 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v19 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_246EC7000, v12, v13, "Provider - RPCOspreyConnectionProvider [%s]: Streamer. Connection error: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v15, -1, -1);
    MEMORY[0x24956E018](v14, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v32 = a1;
  RPCOspreyConnectionProvider.closeWithError(_:)(a1);
  swift_release();

}

uint64_t RPCOspreyConnectionProvider.headerData(forceReconnect:)()
{
  return 0;
}

Swift::Void __swiftcall RPCOspreyConnectionProvider.updateConnectionMetricsSnapshotReport()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  double *v3;
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, _QWORD);
  void (*v14)(_BYTE *, _QWORD);
  SiriNetwork::ConnectionQualityReport *v15;
  SiriNetwork::ConnectionQualityReport *v16;
  void *v17;
  id v18;
  SiriNetwork::ConnectionQualityReport v19;
  void *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  id v24;
  unint64_t *v25;
  void (*v26)(__n128 *, _QWORD);
  void (*v27)(__n128 *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t *v36;
  unint64_t *v37;
  void *v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  _BYTE v57[320];
  _BYTE v58[320];
  char v59[32];
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  char v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  __n128 v99[44];
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  __n128 v113[2];
  __n128 v114[42];
  _QWORD __src[180];
  _BYTE v116[608];
  uint64_t v117;
  _BYTE v118[568];
  _OWORD v119[54];
  _BYTE v120[712];
  _BYTE v121[712];
  _BYTE v122[712];
  _BYTE v123[712];
  _BYTE v124[712];
  _BYTE v125[712];
  _BYTE v126[712];
  _BYTE v127[712];
  _BYTE v128[712];
  _BYTE v129[736];
  _BYTE v130[712];
  _QWORD v131[93];
  _QWORD v132[185];

  ((void (*)())MEMORY[0x24BDAC7A8])();
  v1 = v0;
  OUTLINED_FUNCTION_0_2();
  outlined init with copy of RPCOspreyConnectionProtocol?((uint64_t)(v0 + 4), (uint64_t)v132);
  if (v132[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RPCOspreyConnectionProtocol);
    type metadata accessor for SiriNetworkOspreyChannel();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = (void *)v131[89];
      v3 = (double *)(v0 + 9);
      OUTLINED_FUNCTION_0_2();
      v4 = OUTLINED_FUNCTION_73();
      OUTLINED_FUNCTION_22_1(v4, v0 + 9);
      v5 = OUTLINED_FUNCTION_73();
      outlined retain of ConnectionMetrics((uint64_t)v5);
      OUTLINED_FUNCTION_13_2();
      v7 = (_DWORD *)(v6 + 568);
      OUTLINED_FUNCTION_17_2(v6 + 568, (uint64_t)v130);
      OUTLINED_FUNCTION_17_2((uint64_t)v130, (uint64_t)v131);
      OUTLINED_FUNCTION_3_2((uint64_t)v131);
      if (!v8)
        *v7 = *(_DWORD *)(v0[270] + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber);
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_13_2();
      v10 = v9;
      OUTLINED_FUNCTION_17_2(v9 + 568, (uint64_t)v128);
      OUTLINED_FUNCTION_17_2((uint64_t)v128, (uint64_t)v129);
      OUTLINED_FUNCTION_3_2((uint64_t)v129);
      if (!v8)
      {
        *(_QWORD *)(v10 + 592) = 0x6574736575716572;
        *(_QWORD *)(v10 + 600) = 0xEA0000000000646ELL;
        swift_bridgeObjectRelease();
      }
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_13_2();
      v12 = v11;
      OUTLINED_FUNCTION_17_2(v11 + 568, (uint64_t)v126);
      OUTLINED_FUNCTION_17_2((uint64_t)v126, (uint64_t)v127);
      OUTLINED_FUNCTION_3_2((uint64_t)v127);
      if (!v8)
      {
        *(_QWORD *)(v12 + 576) = 0xD00000000000001ELL;
        *(_QWORD *)(v12 + 584) = 0x8000000246F76FB0;
        swift_bridgeObjectRelease();
      }
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_13_2();
      v14 = v13;
      v16 = v15;
      OUTLINED_FUNCTION_18_1((uint64_t)&v15[142], (uint64_t)v124);
      OUTLINED_FUNCTION_18_1((uint64_t)v124, (uint64_t)v125);
      OUTLINED_FUNCTION_3_2((uint64_t)v125);
      if (!v8)
      {
        v17 = (void *)v0[189];
        if (v17)
        {
          v18 = v17;
          v19 = NetworkManager.currentConnectionQualityReport()();

        }
        else
        {
          v19 = (SiriNetwork::ConnectionQualityReport)4;
        }
        v16[316] = v19;
      }
      v14(v118, 0);
      OUTLINED_FUNCTION_4_3((uint64_t)(v1 + 80), (uint64_t)v122);
      OUTLINED_FUNCTION_4_3((uint64_t)v122, (uint64_t)v123);
      OUTLINED_FUNCTION_3_2((uint64_t)v123);
      if (v8)
      {
        _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v121);
        _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v120);
        if (one-time initialization token for sharedNetworkAnalytics != -1)
          swift_once();
        v20 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
        LODWORD(__src[0]) = 0;
        __src[1] = 0;
        __src[2] = 0xE000000000000000;
        __src[3] = 0;
        __src[4] = 0xE000000000000000;
        outlined init with take of ConnectionMetrics?((uint64_t)v121, (uint64_t)&__src[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        __src[46] = 0;
        __src[45] = 0;
        LOBYTE(__src[47]) = 1;
        outlined init with take of ConnectionMetrics?((uint64_t)v120, (uint64_t)&__src[48], (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
        __src[85] = MEMORY[0x24BEE4AF8];
        __src[86] = MEMORY[0x24BEE4AF8];
        LODWORD(__src[87]) = 4;
        __src[88] = v20;
        v21 = OUTLINED_FUNCTION_36_0();
        memcpy(v21, __src, 0x2C8uLL);
        v22 = OUTLINED_FUNCTION_36_0();
        destructiveProjectEnumData for ConnectionConfigurationError(v22);
        OUTLINED_FUNCTION_4_3((uint64_t)(v1 + 80), (uint64_t)v118);
        v23 = OUTLINED_FUNCTION_36_0();
        OUTLINED_FUNCTION_4_3((uint64_t)v23, (uint64_t)(v1 + 80));
        v24 = v20;
        v25 = OUTLINED_FUNCTION_72();
        outlined retain of ConnectionSnapshotReport?(v25);
      }
      OUTLINED_FUNCTION_19_0();
      v27 = v26;
      v29 = v28;
      OUTLINED_FUNCTION_18_1(v28 + 568, (uint64_t)v120);
      OUTLINED_FUNCTION_18_1((uint64_t)v120, (uint64_t)v121);
      OUTLINED_FUNCTION_3_2((uint64_t)v121);
      if (!v8)
      {
        SiriNetworkOspreyChannel.getMetrics()((uint64_t)__src);
        OUTLINED_FUNCTION_18_1((uint64_t)__src, (uint64_t)v116);
        v30 = OUTLINED_FUNCTION_36_0();
        OUTLINED_FUNCTION_18_1((uint64_t)v30, (uint64_t)v118);
        v31 = OUTLINED_FUNCTION_72();
        OUTLINED_FUNCTION_3_2((uint64_t)v31);
        if (v8
          || (outlined retain of ConnectionSnapshotReport?(v119),
              v32 = OUTLINED_FUNCTION_36_0(),
              v33 = outlined release of ConnectionMetrics?((uint64_t)v32),
              OUTLINED_FUNCTION_75(v33, v34, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), OUTLINED_FUNCTION_3_2((uint64_t)v113), v8))
        {
          _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v113);
          v35 = v113;
        }
        else
        {
          outlined release of ConnectionNetworkReport?(v114);
          outlined retain of ConnectionSnapshotReport?(v119);
          v35 = v114;
        }
        outlined init with take of ConnectionMetrics?((uint64_t)v35, (uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        OUTLINED_FUNCTION_17_2(v29 + 608, (uint64_t)v113);
        OUTLINED_FUNCTION_17_2((uint64_t)v99, v29 + 608);
        outlined release of ConnectionNetworkReport?(v113);
      }
      v27(&v60, 0);
      v36 = OUTLINED_FUNCTION_72();
      OUTLINED_FUNCTION_22_1(v36, v1 + 9);
      v37 = OUTLINED_FUNCTION_36_0();
      v38 = OUTLINED_FUNCTION_22_1(v37, v1 + 9);
      OUTLINED_FUNCTION_75((uint64_t)v38, v39, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)v113);
      if (v8
        || (OUTLINED_FUNCTION_18_1((uint64_t)&v117, (uint64_t)&v60),
            OUTLINED_FUNCTION_22_1(__src, v116),
            v40 = OUTLINED_FUNCTION_72(),
            outlined retain of ConnectionMetrics((uint64_t)v40),
            outlined release of ConnectionNetworkReport?(&v60),
            outlined release of ConnectionMetrics((uint64_t)__src),
            OUTLINED_FUNCTION_18_1((uint64_t)&v60, (uint64_t)v99),
            _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v99) == 1))
      {
        OUTLINED_FUNCTION_19_0();
        v43 = OUTLINED_FUNCTION_59(v41, v42);
        OUTLINED_FUNCTION_4_3(v43, (uint64_t)__src);
        OUTLINED_FUNCTION_4_3((uint64_t)__src, (uint64_t)v116);
        OUTLINED_FUNCTION_3_2((uint64_t)v116);
        if (!v8)
        {
          v57[0] = 1;
          v59[0] = 1;
          v112 = 1;
          v111 = 1;
          v110 = 1;
          v109 = 1;
          v108 = 1;
          v107 = 1;
          v106 = 1;
          v105 = 1;
          v104 = 1;
          v103 = 1;
          v102 = 1;
          v101 = 1;
          v100 = 1;
          v60.n128_u32[0] = 0;
          v60.n128_u8[4] = 1;
          v61 = 0;
          v60.n128_u64[1] = 0;
          v62 = 0;
          v63 = 1;
          v67 = 0;
          v66 = 0u;
          v65 = 0u;
          v64 = 0u;
          v68 = 1;
          v69 = 0;
          v70 = 1;
          v71 = MEMORY[0x24BEE4B00];
          v72 = 0;
          v73 = 0;
          v74 = 0;
          v75 = 1;
          v76 = 0;
          v77 = 1;
          v78 = 0;
          v79 = 1;
          v80 = 0;
          v81 = 1;
          v82 = 0;
          v83 = 1;
          v84 = 0;
          v85 = 1;
          v87 = 0;
          v86 = 0;
          v88 = 0;
          v89 = 1;
          v90 = 0;
          v91 = 1;
          v92 = 0;
          v93 = 0;
          v94 = 1;
          v95 = 0;
          v96 = 1;
          v97 = 0;
          v98 = 1;
          destructiveProjectEnumData for ConnectionConfigurationError(&v60);
          v3 = (double *)(v1 + 85);
          OUTLINED_FUNCTION_4_3((uint64_t)(v1 + 85), (uint64_t)v99);
          OUTLINED_FUNCTION_4_3((uint64_t)&v60, (uint64_t)(v1 + 85));
          outlined release of ConnectionNetworkReport?(v99);
        }
        OUTLINED_FUNCTION_28_0((uint64_t)v58);
      }
      else
      {
        outlined release of ConnectionNetworkReport?(&v60);
      }
      OUTLINED_FUNCTION_19_0();
      v46 = OUTLINED_FUNCTION_59(v44, v45);
      OUTLINED_FUNCTION_4_3(v46, (uint64_t)__src);
      OUTLINED_FUNCTION_4_3((uint64_t)__src, (uint64_t)v116);
      OUTLINED_FUNCTION_3_2((uint64_t)v116);
      if (!v8)
      {
        OUTLINED_FUNCTION_4_3((uint64_t)(v3 + 76), (uint64_t)&v60);
        OUTLINED_FUNCTION_4_3((uint64_t)&v60, (uint64_t)v99);
        if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v99) != 1)
        {
          v47 = v1[189];
          if (v47)
          {
            v48 = *(_QWORD *)(v47 + OBJC_IVAR___SNNetworkManagerInternal_carrierName);
            v49 = swift_bridgeObjectRetain();
          }
          else
          {
            v48 = 0;
            v49 = 0;
          }
          *((_QWORD *)v3 + 77) = v48;
          *((_QWORD *)v3 + 78) = v49;
          swift_bridgeObjectRelease();
        }
      }
      OUTLINED_FUNCTION_28_0((uint64_t)v58);
      v50 = v1[189];
      if (v50)
      {
        v51 = v50 + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength;
        if ((*(_BYTE *)(v51 + 8) & 1) == 0)
        {
          v52 = *(_QWORD *)v51;
          OUTLINED_FUNCTION_19_0();
          v55 = OUTLINED_FUNCTION_59(v53, v54);
          OUTLINED_FUNCTION_4_3(v55, (uint64_t)&v60);
          OUTLINED_FUNCTION_4_3((uint64_t)&v60, (uint64_t)v99);
          OUTLINED_FUNCTION_3_2((uint64_t)v99);
          if (!v8)
          {
            OUTLINED_FUNCTION_4_3((uint64_t)(v3 + 76), (uint64_t)v57);
            OUTLINED_FUNCTION_4_3((uint64_t)v57, (uint64_t)v58);
            if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v58) != 1)
            {
              v3[79] = (double)v52;
              *((_BYTE *)v3 + 640) = 0;
            }
          }
          OUTLINED_FUNCTION_28_0((uint64_t)v59);
        }
      }
      OUTLINED_FUNCTION_73();
      specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)();

      v56 = OUTLINED_FUNCTION_73();
      outlined release of ConnectionMetrics((uint64_t)v56);
    }
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v132, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  }
}

Swift::Void __swiftcall RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()()
{
  uint64_t v0;
  NSObject *v1;
  char v2;
  int v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  __n128 *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[45];
  _QWORD v25[45];
  _QWORD v26[45];
  __n128 v27[22];
  _QWORD v28[4];
  unsigned __int8 v29;
  _BYTE v30[1440];
  _QWORD v31[5];
  _QWORD v32[180];
  uint64_t v33[12];
  __n128 v34[84];
  _BYTE v35[24];
  uint64_t v36;

  ((void (*)())MEMORY[0x24BDAC7A8])();
  if ((*(_BYTE *)(v0 + 2168) & 1) != 0)
    goto LABEL_13;
  v1 = (v0 + 32);
  OUTLINED_FUNCTION_0_2();
  outlined init with copy of RPCOspreyConnectionProtocol?(v0 + 32, (uint64_t)v35);
  if (!v36)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    goto LABEL_8;
  }
  outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v35, (uint64_t)v31);
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  __swift_project_boxed_opaque_existential_1(v31, v31[3]);
  SiriNetworkOspreyChannel.getMetrics()((uint64_t)v30);
  v1 = &demangling cache variable for type metadata for ConnectionMetrics?;
  OUTLINED_FUNCTION_51((uint64_t)v30, (uint64_t)v32);
  OUTLINED_FUNCTION_51((uint64_t)v32, (uint64_t)v33);
  OUTLINED_FUNCTION_3_2((uint64_t)v33);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
LABEL_8:
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v4 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    Logger.logObject.getter();
    v5 = OUTLINED_FUNCTION_80();
    if (os_log_type_enabled(v1, v5))
    {
      v6 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v33[0] = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v6 = 136315138;
      v7 = OUTLINED_FUNCTION_62();
      v32[0] = OUTLINED_FUNCTION_70(v7, v8, v33);
      OUTLINED_FUNCTION_68();
      swift_release();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v1, v5, "Provider - RPCOspreyConnectionProvider [%s]: Metrics, Connection Prepared Report nil.", v6);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }

    swift_release();
    goto LABEL_13;
  }
  v1 = v34;
  outlined retain of ConnectionPreparationReport?(v34);
  outlined release of ConnectionMetrics?((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v31);
  outlined init with take of ConnectionMetrics?((uint64_t)v34, (uint64_t)v28, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  v3 = _s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v28);
  if (v3 == 1)
    goto LABEL_8;
  *(_BYTE *)(v0 + 2168) = 1;
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_57(v0 + 168, (uint64_t)v27);
  v9 = OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_57(v9, v10);
  outlined retain of ConnectionPreparationReport(v28);
  outlined retain of ConnectionPreparationReport?(v27);
  v11 = v29;
  v12 = objc_allocWithZone(MEMORY[0x24BE95310]);
  outlined retain of ConnectionPreparationReport(v28);
  v13 = objc_msgSend(v12, sel_init);
  objc_msgSend(v13, sel_setHasDNS_, v11);
  v14 = (__n128 *)OUTLINED_FUNCTION_64();
  outlined retain of ConnectionPreparationReport?(v14);
  if (v13)
  {
    NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)();

  }
  OUTLINED_FUNCTION_71(v26);
  v15 = ConnectionPreparationReport.netDebugConnectionStatePreparationSnapshot.getter();
  if (v15)
  {
    v16 = v15;
    NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)();

  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v17 = OUTLINED_FUNCTION_5_1();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_57((uint64_t)v34, (uint64_t)v25);
  OUTLINED_FUNCTION_57((uint64_t)v34, (uint64_t)v26);
  outlined retain of ConnectionPreparationReport(v26);
  outlined retain of ConnectionPreparationReport(v25);
  Logger.logObject.getter();
  v19 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_7_0(v19))
  {
    v20 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v23 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v20 = 136315138;
    OUTLINED_FUNCTION_71(v24);
    outlined retain of ConnectionPreparationReport(v25);
    v21 = String.init<A>(describing:)();
    v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v23);
    OUTLINED_FUNCTION_68();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v18, (os_log_type_t)v11, "%s", v20);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }
  OUTLINED_FUNCTION_93();
  OUTLINED_FUNCTION_93();
  outlined init with take of ConnectionMetrics?((uint64_t)v34, (uint64_t)v24, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  outlined release of ConnectionPreparationReport(v24);

LABEL_13:
  OUTLINED_FUNCTION_1_1();
}

Swift::Void __swiftcall RPCOspreyConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t ready;
  void *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD __dst[14];
  uint64_t v63;
  _OWORD __src[90];
  _QWORD v65[180];
  uint64_t v66[57];
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *v78;
  _BYTE v79[24];
  uint64_t v80;

  ((void (*)())MEMORY[0x24BDAC7A8])();
  if ((*(_BYTE *)(v0 + 2169) & 1) != 0)
    goto LABEL_21;
  v1 = v0;
  v2 = (v0 + 32);
  OUTLINED_FUNCTION_0_2();
  outlined init with copy of RPCOspreyConnectionProtocol?(v0 + 32, (uint64_t)v79);
  if (v80)
  {
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v79, (uint64_t)__dst);
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
    __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
    SiriNetworkOspreyChannel.getMetrics()((uint64_t)__src);
    v2 = &demangling cache variable for type metadata for ConnectionMetrics?;
    OUTLINED_FUNCTION_51((uint64_t)__src, (uint64_t)v65);
    OUTLINED_FUNCTION_51((uint64_t)v65, (uint64_t)v66);
    OUTLINED_FUNCTION_3_2((uint64_t)v66);
    if (v3)
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
    }
    else
    {
      v4 = v74;
      v5 = v75;
      v6 = v77;
      v7 = v78;
      v59 = v76;
      v60 = v72;
      v61 = *((_QWORD *)&v75 + 1);
      v8 = v67;
      v9 = v68;
      v2 = v69;
      v10 = v70;
      v11 = v71;
      v57 = v73;
      outlined copy of ConnectionEstablishmentReport?(v67, v68, (uint64_t)v69, v70, v71, v72, v73, v74, v75, *((uint64_t *)&v75 + 1), v76, *((uint64_t *)&v76 + 1), v77, v78);
      outlined release of ConnectionMetrics?((uint64_t)v65);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
      if (v4)
      {
        v55 = v6;
        *(_QWORD *)&__src[0] = v8;
        *((_QWORD *)&__src[0] + 1) = v9;
        v58 = v9;
        LODWORD(__src[1]) = (_DWORD)v2;
        BYTE4(__src[1]) = BYTE4(v2) & 1;
        *((_QWORD *)&__src[1] + 1) = v10;
        LOBYTE(__src[2]) = v11 & 1;
        *((_QWORD *)&__src[2] + 1) = v60;
        LOBYTE(__src[3]) = v57 & 1;
        *((_QWORD *)&__src[3] + 1) = v4;
        *(_QWORD *)&__src[4] = v5;
        WORD4(__src[4]) = v61 & 0x101;
        __src[5] = v59;
        *(_BYTE *)(v1 + 2169) = 1;
        *(_QWORD *)&__src[6] = v6;
        *((_QWORD *)&__src[6] + 1) = v7;
        OUTLINED_FUNCTION_0_2();
        v51 = *(_QWORD *)(v1 + 528);
        v12 = *(_QWORD *)(v1 + 536);
        v13 = v10;
        v49 = *(_QWORD *)(v1 + 544);
        v48 = *(_QWORD *)(v1 + 552);
        v47 = *(_QWORD *)(v1 + 560);
        v46 = *(_QWORD *)(v1 + 568);
        v45 = *(_QWORD *)(v1 + 576);
        v44 = *(_QWORD *)(v1 + 584);
        v42 = *(_OWORD *)(v1 + 608);
        v43 = *(_OWORD *)(v1 + 592);
        v41 = *(_QWORD *)(v1 + 624);
        v14 = *(void **)(v1 + 632);
        v52 = (uint64_t)v2;
        *(_QWORD *)(v1 + 528) = v8;
        *(_QWORD *)(v1 + 536) = v58;
        *(_QWORD *)(v1 + 544) = v2;
        v53 = v13;
        *(_QWORD *)(v1 + 552) = v13;
        v56 = v11;
        *(_QWORD *)(v1 + 560) = v11;
        *(_QWORD *)(v1 + 568) = v60;
        *(_QWORD *)(v1 + 576) = v57;
        *(_QWORD *)(v1 + 584) = v4;
        *(_QWORD *)(v1 + 592) = v5;
        *(_QWORD *)(v1 + 600) = v61;
        *(_OWORD *)(v1 + 608) = v59;
        v15 = v6;
        *(_QWORD *)(v1 + 624) = v6;
        *(_QWORD *)(v1 + 632) = v7;
        swift_bridgeObjectRetain();
        v16 = v7;
        v17 = v7;
        swift_bridgeObjectRetain();
        v54 = v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of ConnectionEstablishmentReport?(v51, v12, v49, v48, v47, v46, v45, v44, v43, *((uint64_t *)&v43 + 1), v42, *((uint64_t *)&v42 + 1), v41, v14);
        v18 = ConnectionEstablishmentReport.netConnectionStateReadySnapshot.getter();
        if (v18)
        {
          v19 = v18;
          NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)();

        }
        ready = ConnectionEstablishmentReport.netDebugConnectionStateReadySnapshot.getter();
        if (ready)
        {
          v21 = (void *)ready;
          NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)();

        }
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v22 = OUTLINED_FUNCTION_5_1();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_50();
        v50 = v17;
        Logger.logObject.getter();
        v23 = OUTLINED_FUNCTION_80();
        if (os_log_type_enabled((os_log_t)v5, v23))
        {
          v28 = (uint8_t *)OUTLINED_FUNCTION_2_2();
          v63 = OUTLINED_FUNCTION_2_2();
          *(_DWORD *)v28 = 136315138;
          memcpy(__dst, __src, sizeof(__dst));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_29_0();
          v29 = v50;
          v30 = String.init<A>(describing:)();
          __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of ConnectionEstablishmentReport?(v8, v58, v52, v53, v56, v60, v57, v54, v5, v61, v59, *((uint64_t *)&v59 + 1), v15, v16);
          outlined consume of ConnectionEstablishmentReport?(v8, v58, v52, v53, v56, v60, v57, v54, v5, v61, v59, *((uint64_t *)&v59 + 1), v15, v16);
          OUTLINED_FUNCTION_30_0(&dword_246EC7000, v5, v23, "%s", v28);
          OUTLINED_FUNCTION_20_1();
          OUTLINED_FUNCTION_0_4();
        }
        OUTLINED_FUNCTION_46(v8, v58, (uint64_t)v2, v53, v24, v25, v26, v27, v5, v61, v59, *((uint64_t *)&v59 + 1), v15, v16);
        OUTLINED_FUNCTION_46(v8, v58, (uint64_t)v2, v53, v37, v38, v39, v40, v5, v61, v59, *((uint64_t *)&v59 + 1), v55, v16);

        OUTLINED_FUNCTION_40_0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
  }
  else
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v32 = OUTLINED_FUNCTION_5_1();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_83();
  Logger.logObject.getter();
  v33 = OUTLINED_FUNCTION_80();
  if (os_log_type_enabled(v2, v33))
  {
    v34 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v66[0] = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v34 = 136315138;
    v35 = OUTLINED_FUNCTION_62();
    v65[0] = OUTLINED_FUNCTION_70(v35, v36, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v2, v33, "Provider - RPCOspreyConnectionProvider [%s]: Metrics, Connection Ready Report nil.", v34);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }

  swift_release();
LABEL_21:
  OUTLINED_FUNCTION_1_1();
}

Swift::Int RPCOspreyConnectionProvider.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  specialized ConnectionProviderProtocol.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void protocol witness for ConnectionProviderProtocol.connectionMetrics.getter in conformance RPCOspreyConnectionProvider()
{
  uint64_t v0;
  void *v1;
  const void *v2;
  _BYTE v3[1440];

  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_22_1(v3, (const void *)(v0 + 72));
  v1 = (void *)OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_22_1(v1, v2);
  outlined retain of ConnectionMetrics((uint64_t)v3);
  OUTLINED_FUNCTION_85();
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.getter in conformance RPCOspreyConnectionProvider()
{
  uint64_t v0;

  return MEMORY[0x24956E090](v0 + 1520);
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.setter in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1528) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void protocol witness for ConnectionProviderProtocol.connectionConfiguration.getter in conformance RPCOspreyConnectionProvider()
{
  uint64_t v0;
  void *v1;
  const void *v2;
  _QWORD v3[65];

  OUTLINED_FUNCTION_28(v3, (const void *)(v0 + 1552));
  v1 = (void *)OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_28(v1, v2);
  outlined retain of ConnectionConfiguration(v3);
  OUTLINED_FUNCTION_85();
}

id protocol witness for ConnectionProviderProtocol.connectionQueue.getter in conformance RPCOspreyConnectionProvider()
{
  uint64_t v0;

  return *(id *)(v0 + 2072);
}

uint64_t protocol witness for ConnectionProviderProtocol.openCompletion.setter in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 2080);
  *(_QWORD *)(v2 + 2080) = a1;
  *(_QWORD *)(v2 + 2088) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v3);
}

uint64_t protocol witness for ConnectionProviderProtocol.isMPTCP.getter in conformance RPCOspreyConnectionProvider()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2116);
}

void protocol witness for ConnectionProviderProtocol.openConnectionWithInitialPayload(_:completion:) in conformance RPCOspreyConnectionProvider()
{
  RPCOspreyConnectionProvider.openConnectionWithInitialPayload(_:completion:)();
}

void protocol witness for ConnectionProviderProtocol.send(data:completion:) in conformance RPCOspreyConnectionProvider(uint64_t a1, unint64_t a2, void (*a3)(_QWORD, _QWORD))
{
  RPCOspreyConnectionProvider.send(data:completion:)(a1, a2, a3);
}

uint64_t protocol witness for ConnectionProviderProtocol.readData(_:) in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  return RPCOspreyConnectionProvider.readData(_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RPCOspreyConnectionProvider()
{
  return RPCOspreyConnectionProvider.hashValue.getter();
}

_QWORD *protocol witness for Hashable.hash(into:) in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x24956DF70](&protocol conformance descriptor for RPCOspreyConnectionProvider);
  return ConnectionProviderProtocol.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  v3 = MEMORY[0x24956DF70](&protocol conformance descriptor for RPCOspreyConnectionProvider, a2);
  ConnectionProviderProtocol.hash(into:)((uint64_t)v5, a2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RPCOspreyConnectionProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *a2;
  v6 = MEMORY[0x24956DF70](&protocol conformance descriptor for RPCOspreyConnectionProvider, a3);
  return static ConnectionProviderProtocol.== infix(_:_:)(v4, v5, a3, v6);
}

void base witness table accessor for Equatable in RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider, (uint64_t)&protocol conformance descriptor for RPCOspreyConnectionProvider);
}

void instantiation function for generic protocol witness table for RPCOspreyConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider, (uint64_t)&protocol conformance descriptor for RPCOspreyConnectionProvider);
  *(_QWORD *)(a1 + 8) = v3;
}

_QWORD *outlined retain of ConnectionConfiguration(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (void *)a1[13];
  v13 = a1[41];
  v14 = a1[40];
  v11 = a1[43];
  v12 = a1[42];
  v9 = a1[45];
  v10 = a1[44];
  v3 = a1[48];
  v7 = a1[47];
  v8 = a1[46];
  v4 = a1[49];
  v15 = a1[51];
  v16 = a1[50];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionPolicy?(v14, v13, v12, v11, v10, v9, v8, v7, v3, v4);
  outlined copy of ConnectionPolicyRoute?(v16, v15);
  return a1;
}

uint64_t outlined copy of ConnectionPolicyRoute?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of ConnectionMetrics(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v2 = *(_QWORD *)(a1 + 64);
  v36 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(void **)(a1 + 88);
  v66 = *(_QWORD *)(a1 + 96);
  v65 = *(_QWORD *)(a1 + 104);
  v64 = *(_QWORD *)(a1 + 112);
  v63 = *(_QWORD *)(a1 + 120);
  v62 = *(_QWORD *)(a1 + 128);
  v61 = *(_QWORD *)(a1 + 136);
  v60 = *(_QWORD *)(a1 + 144);
  v59 = *(_QWORD *)(a1 + 152);
  v6 = *(void **)(a1 + 448);
  v46 = *(_QWORD *)(a1 + 456);
  v45 = *(_QWORD *)(a1 + 464);
  v44 = *(_QWORD *)(a1 + 472);
  v43 = *(_QWORD *)(a1 + 480);
  v42 = *(_QWORD *)(a1 + 488);
  v41 = *(_QWORD *)(a1 + 496);
  v40 = *(_QWORD *)(a1 + 504);
  v39 = *(_QWORD *)(a1 + 512);
  v33 = *(_OWORD *)(a1 + 520);
  v31 = *(_OWORD *)(a1 + 536);
  v7 = *(_QWORD *)(a1 + 552);
  v8 = *(void **)(a1 + 560);
  v77 = *(_QWORD *)(a1 + 576);
  v78 = *(_QWORD *)(a1 + 568);
  v75 = *(_OWORD *)(a1 + 648);
  v76 = *(_OWORD *)(a1 + 632);
  v73 = *(_OWORD *)(a1 + 680);
  v74 = *(_OWORD *)(a1 + 664);
  v71 = *(_OWORD *)(a1 + 712);
  v72 = *(_OWORD *)(a1 + 696);
  v69 = *(_OWORD *)(a1 + 744);
  v70 = *(_OWORD *)(a1 + 728);
  v68 = *(_OWORD *)(a1 + 760);
  v67 = *(_OWORD *)(a1 + 776);
  v58 = *(_OWORD *)(a1 + 792);
  v57 = *(_OWORD *)(a1 + 808);
  v54 = *(_OWORD *)(a1 + 824);
  v50 = *(_OWORD *)(a1 + 840);
  v48 = *(_OWORD *)(a1 + 856);
  v47 = *(_OWORD *)(a1 + 872);
  v38 = *(_OWORD *)(a1 + 888);
  v37 = *(_OWORD *)(a1 + 904);
  v35 = *(_OWORD *)(a1 + 920);
  v34 = *(_OWORD *)(a1 + 936);
  v32 = *(_OWORD *)(a1 + 952);
  v30 = *(_OWORD *)(a1 + 968);
  v29 = *(_OWORD *)(a1 + 984);
  v28 = *(_OWORD *)(a1 + 1000);
  v49 = *(_QWORD *)(a1 + 584);
  v51 = *(_QWORD *)(a1 + 592);
  v52 = *(_QWORD *)(a1 + 600);
  v53 = *(_QWORD *)(a1 + 608);
  v55 = *(_QWORD *)(a1 + 616);
  v56 = *(_QWORD *)(a1 + 624);
  v26 = *(_OWORD *)(a1 + 176);
  v27 = *(_OWORD *)(a1 + 160);
  v24 = *(_OWORD *)(a1 + 208);
  v25 = *(_OWORD *)(a1 + 192);
  v22 = *(_OWORD *)(a1 + 240);
  v23 = *(_OWORD *)(a1 + 224);
  v20 = *(_OWORD *)(a1 + 272);
  v21 = *(_OWORD *)(a1 + 256);
  v18 = *(_OWORD *)(a1 + 304);
  v19 = *(_OWORD *)(a1 + 288);
  v16 = *(_OWORD *)(a1 + 336);
  v17 = *(_OWORD *)(a1 + 320);
  v14 = *(_OWORD *)(a1 + 368);
  v15 = *(_OWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 400);
  v13 = *(_OWORD *)(a1 + 384);
  v10 = *(_OWORD *)(a1 + 432);
  v11 = *(_OWORD *)(a1 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionHTTPHeaderReport?(v36, v2, v3, v4, v5);
  outlined copy of ConnectionPreparationReport?(v66, v65, v64, v63, v62, v61, v60, v59, v27, *((uint64_t *)&v27 + 1), v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22,
    *((uint64_t *)&v22 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v6);
  outlined copy of ConnectionEstablishmentReport?(v46, v45, v44, v43, v42, v41, v40, v39, v33, *((uint64_t *)&v33 + 1), v31, *((uint64_t *)&v31 + 1), v7, v8);
  outlined copy of ConnectionSnapshotReport?(v78, v77, v49, v51, v52, v53, v55, v56, v76, *((uint64_t *)&v76 + 1), v75, *((uint64_t *)&v75 + 1), v74, *((uint64_t *)&v74 + 1), v73, *((uint64_t *)&v73 + 1), v72, *((uint64_t *)&v72 + 1), v71,
    *((uint64_t *)&v71 + 1),
    v70,
    *((uint64_t *)&v70 + 1),
    v69,
    *((uint64_t *)&v69 + 1),
    v68,
    *((uint64_t *)&v68 + 1),
    v67,
    *((uint64_t *)&v67 + 1),
    v58,
    *((uint64_t *)&v58 + 1),
    v57,
    *((uint64_t *)&v57 + 1),
    v54,
    *((uint64_t *)&v54 + 1),
    v50,
    *((uint64_t *)&v50 + 1),
    v48,
    *((uint64_t *)&v48 + 1),
    v47,
    *((uint64_t *)&v47 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of ConnectionHTTPHeaderReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    v6 = a5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

id outlined copy of ConnectionPreparationReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  id result;

  if (a43)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ConnectionInterfaceReport?(a6, a7, a8, a9, a10, a11, a12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a45;
  }
  return result;
}

uint64_t outlined copy of ConnectionEstablishmentReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  id v14;
  uint64_t result;

  if (a8)
  {
    swift_bridgeObjectRetain();
    v14 = a14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

id outlined copy of ConnectionSnapshotReport?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  id result;
  void *v59;

  if (a3)
  {
    v59 = (void *)STACK[0x630];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ConnectionNetworkReport?(a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    outlined copy of ConnectionInterfaceReport?(a49, a50, a51, a52, a53, a54, a55);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v59;
  }
  return result;
}

uint64_t outlined init with copy of RPCOspreyConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of RPCOspreyConnectionProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined release of ConnectionMetrics?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = *(_OWORD *)(a1 + 464);
  v18 = *(_OWORD *)(a1 + 480);
  v15 = *(_OWORD *)(a1 + 432);
  v16 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 416);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v9 = *(_OWORD *)(a1 + 336);
  v10 = *(_OWORD *)(a1 + 352);
  v7 = *(_OWORD *)(a1 + 304);
  v8 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  outlined consume of ConnectionMetrics?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(void **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    (void *)v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(_QWORD *)(a1 + 496));
  return a1;
}

uint64_t outlined consume of ConnectionMetrics?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  void *a71;
  uint64_t a72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  if (a3)
  {
    v124 = STACK[0xB48];
    v123 = STACK[0xB40];
    v122 = STACK[0xB38];
    v121 = STACK[0xB30];
    v120 = STACK[0xB28];
    v119 = STACK[0xB20];
    v118 = STACK[0xB18];
    v117 = STACK[0xB10];
    v116 = STACK[0xB08];
    v115 = STACK[0xB00];
    v114 = STACK[0xAF8];
    v113 = STACK[0xAF0];
    v112 = STACK[0xAE8];
    v111 = STACK[0xAE0];
    v110 = STACK[0xAD8];
    v109 = STACK[0xAD0];
    v108 = STACK[0xAC8];
    v107 = STACK[0xAC0];
    v106 = STACK[0xAB8];
    v105 = STACK[0xAB0];
    v104 = STACK[0xAA8];
    v103 = STACK[0xAA0];
    v102 = STACK[0xA98];
    v101 = STACK[0xA90];
    v100 = STACK[0xA88];
    v99 = STACK[0xA80];
    v98 = STACK[0xA78];
    v97 = STACK[0xA70];
    v96 = STACK[0xA68];
    v95 = STACK[0xA60];
    v94 = STACK[0xA58];
    v93 = STACK[0xA50];
    v92 = STACK[0xA48];
    v91 = STACK[0xA40];
    v90 = STACK[0xA38];
    v89 = STACK[0xA30];
    v88 = STACK[0xA28];
    v87 = STACK[0xA20];
    v86 = STACK[0xA18];
    v85 = STACK[0xA10];
    v84 = STACK[0xA08];
    v83 = STACK[0xA00];
    v82 = STACK[0x9F8];
    v81 = STACK[0x9F0];
    v80 = STACK[0x9E8];
    v79 = STACK[0x9E0];
    v78 = STACK[0x9D8];
    v126 = STACK[0x9C8];
    v127 = STACK[0x9D0];
    v125 = STACK[0x9C0];
    v77 = STACK[0x9B8];
    v76 = STACK[0x9B0];
    v75 = STACK[0x9A8];
    v74 = STACK[0x9A0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionHTTPHeaderReport?(a8, a9, a10, a11, a12);
    outlined consume of ConnectionPreparationReport?(a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57);
    outlined consume of ConnectionEstablishmentReport?(a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71);
    outlined consume of ConnectionSnapshotReport?(a72, v74, v75, v76, v77, v125, v126, v127, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      v124);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *outlined retain of ConnectionPreparationReport(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a1[6];
  v11 = a1[5];
  v8 = a1[8];
  v9 = a1[7];
  v2 = a1[11];
  v6 = a1[10];
  v7 = a1[9];
  v3 = (void *)a1[44];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionInterfaceReport?(v11, v10, v9, v8, v7, v6, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

uint64_t outlined retain of ConnectionPreparationReport?(__n128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_7_2(a1);
  OUTLINED_FUNCTION_53();
  v10(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15, v16, v17, v18);
  return v1;
}

_QWORD *outlined release of ConnectionPreparationReport(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a1[6];
  v10 = a1[5];
  v7 = a1[8];
  v8 = a1[7];
  v2 = a1[11];
  v5 = a1[10];
  v6 = a1[9];
  v3 = (void *)a1[44];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionInterfaceReport?(v10, v9, v8, v7, v6, v5, v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of ConnectionNetworkReport?(__n128 *a1)
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = OUTLINED_FUNCTION_7_2(a1);
  v11(v3, v4, v5, v6, v7, v8, v9, v10, v2.n128_u64[0], v2.n128_u64[1], v12, v13, v14, v15, v16, v17, v18, v19, v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33);
  return v1;
}

_OWORD *outlined retain of ConnectionSnapshotReport?(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = a1[5];
  v15 = a1[4];
  v12 = a1[7];
  v13 = a1[6];
  OUTLINED_FUNCTION_53();
  v10(v2, v3, v4, v5, v6, v7, v8, v9, v15, *((_QWORD *)&v15 + 1), v14, *((_QWORD *)&v14 + 1), v13, *((_QWORD *)&v13 + 1), v12, *((_QWORD *)&v12 + 1));
  return a1;
}

unint64_t lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError;
  if (!lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkConnectionError, &type metadata for NetworkConnectionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError;
  if (!lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkConnectionError, &type metadata for NetworkConnectionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkConnectionError and conformance NetworkConnectionError);
  }
  return result;
}

uint64_t outlined init with take of RPCOspreyConnectionProtocol(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void partial apply for closure #1 in RPCOspreyConnectionProvider.readData(_:)(void *a1)
{
  uint64_t v1;

  closure #1 in RPCOspreyConnectionProvider.readData(_:)(a1, v1);
}

uint64_t sub_246EDDFAC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_246EDDFD0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in RPCOspreyConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;

  return closure #2 in RPCOspreyConnectionProvider.readData(_:)(a1, a2, v2[2], v2[3], v2[4]);
}

void partial apply for closure #3 in RPCOspreyConnectionProvider.readData(_:)(void *a1)
{
  closure #3 in RPCOspreyConnectionProvider.readData(_:)(a1);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

void outlined consume of ConnectionProviderState(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u)

}

uint64_t sub_246EDE03C()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #2 in RPCOspreyConnectionProvider.readData(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), 0, 0);
}

uint64_t sub_246EDE098()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:)()
{
  uint64_t v0;

  closure #1 in closure #2 in RPCOspreyConnectionProvider.readData(_:)(*(void (**)(_QWORD, unint64_t, void *, _QWORD))(v0 + 16));
}

id outlined copy of ConnectionProviderState(id result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return result;
  return result;
}

void lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x24956DF70](a4, v6), a1);
  }
  OUTLINED_FUNCTION_3();
}

uint64_t outlined assign with take of RPCOspreyConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RPCOspreyConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined consume of NetworkConnectionError(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if ((a4 >> 60) <= 9)
  {
    if (a4 >> 60 == 3)
      a1 = a5;

  }
}

uint64_t partial apply for closure #1 in RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)()
{
  return closure #1 in RPCOspreyConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)();
}

void outlined destroy of RPCOspreyConnectionProtocol?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_3();
}

uint64_t siri_kdebug_trace()
{
  return kdebug_trace();
}

void outlined init with take of ConnectionMetrics?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(a3);
  v3 = OUTLINED_FUNCTION_64();
  v4(v3);
  OUTLINED_FUNCTION_3();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(void *a1)
{
  bzero(a1, 0x168uLL);
}

void _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(void *a1)
{
  bzero(a1, 0x2C8uLL);
}

uint64_t outlined destroy of weak ConnectionProviderDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_3(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  __swift_project_value_buffer(a1, a2);
  outlined copy of Data?(v3, v2);
  return swift_retain();
}

void OUTLINED_FUNCTION_4_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of ConnectionMetrics?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

__n128 OUTLINED_FUNCTION_7_2(__n128 *a1)
{
  return a1[4];
}

uint64_t OUTLINED_FUNCTION_10_1(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_12_1(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_13_2()
{
  RPCOspreyConnectionProvider.connectionMetrics.modify();
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_17_2(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of ConnectionMetrics?(a1, a2, v2);
}

void OUTLINED_FUNCTION_18_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of ConnectionMetrics?(a1, a2, v2);
}

void OUTLINED_FUNCTION_19_0()
{
  RPCOspreyConnectionProvider.connectionMetrics.modify();
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_arrayDestroy();
}

void *OUTLINED_FUNCTION_22_1(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x599uLL);
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  uint64_t (*v0)(unint64_t *, _QWORD);

  return v0(&STACK[0x16A0], 0);
}

uint64_t OUTLINED_FUNCTION_25_0(__n128 a1, uint64_t a2, uint64_t a3)
{
  *(__n128 *)(a3 + 24) = a1;
  return swift_willThrow();
}

BOOL OUTLINED_FUNCTION_27_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_28_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(a1, 0);
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_30_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_35_0()
{
  return static os_log_type_t.default.getter();
}

unint64_t *OUTLINED_FUNCTION_36_0()
{
  return &STACK[0x1100];
}

void OUTLINED_FUNCTION_38_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_41_0()
{
  void *v0;

  return v0;
}

void OUTLINED_FUNCTION_42_0()
{
  void *v0;

}

void OUTLINED_FUNCTION_43()
{
  void *v0;

  outlined consume of ConnectionProviderState(v0, 1u);
}

id OUTLINED_FUNCTION_44()
{
  void *v0;

  return outlined copy of ConnectionProviderState(v0, 1u);
}

uint64_t OUTLINED_FUNCTION_46(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  return outlined consume of ConnectionEstablishmentReport?(a1, a2, a3, a4, v16, v15, v14, v17, a9, a10, a11, a12, a13, a14);
}

uint64_t OUTLINED_FUNCTION_48()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_49()
{
  __n128 *v0;

  return outlined retain of ConnectionPreparationReport?(v0);
}

uint64_t OUTLINED_FUNCTION_50()
{
  return swift_bridgeObjectRetain_n();
}

void OUTLINED_FUNCTION_51(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of ConnectionMetrics?(a1, a2, v2);
}

void OUTLINED_FUNCTION_57(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of ConnectionMetrics?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_58()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_59(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

BOOL OUTLINED_FUNCTION_60(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_61(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_62()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_63(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_64()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_65()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_66()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id OUTLINED_FUNCTION_67()
{
  uint64_t v0;

  return *(id *)(v0 + 2160);
}

uint64_t OUTLINED_FUNCTION_68()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_69()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

void *OUTLINED_FUNCTION_71(void *a1)
{
  return memcpy(a1, &STACK[0x5C0], 0x168uLL);
}

unint64_t *OUTLINED_FUNCTION_72()
{
  return &STACK[0x16A0];
}

unint64_t *OUTLINED_FUNCTION_73()
{
  return &STACK[0x3E00];
}

double OUTLINED_FUNCTION_74()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 2080) = 0u;
  return result;
}

void OUTLINED_FUNCTION_75(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with take of ConnectionMetrics?(v3, (uint64_t)&STACK[0x898], a3);
}

uint64_t OUTLINED_FUNCTION_76()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 - 128);
}

_QWORD *OUTLINED_FUNCTION_77()
{
  uint64_t v0;

  return __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 - 128), *(_QWORD *)(v0 - 104));
}

void OUTLINED_FUNCTION_78(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_80()
{
  return static os_log_type_t.default.getter();
}

uint64_t OUTLINED_FUNCTION_81(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_82(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_83()
{
  return swift_retain();
}

void *OUTLINED_FUNCTION_84@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char aBlock, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  a13 = a1;
  a14 = v14;
  return _Block_copy(&aBlock);
}

uint64_t OUTLINED_FUNCTION_86()
{
  return swift_weakInit();
}

void OUTLINED_FUNCTION_88()
{
  NetworkAnalytics.setNetIdAvailable(_:)(0);
}

void OUTLINED_FUNCTION_89()
{
  NetworkAnalytics.setIsConnectionActive(_:)(0);
}

uint64_t OUTLINED_FUNCTION_92()
{
  return Data.count.getter();
}

uint64_t OUTLINED_FUNCTION_93()
{
  __n128 *v0;

  return outlined retain of ConnectionPreparationReport?(v0);
}

void *ConnectionTCPInfoMetrics.netNetworkInterface.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;

  v2 = *v0;
  v1 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 32);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95320]), sel_init);
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    if (v1)
      v7 = (void *)MEMORY[0x24956D034](v2, v1);
    else
      v7 = 0;
    objc_msgSend(v5, sel_setName_, v7);

    if (v3 != 25)
      v8 = ConnectionType.netConnectionType.getter();
    OUTLINED_FUNCTION_0_8(v8, sel_setConnectionType_);
  }
  return v5;
}

void *ConnectionTCPInfoMetrics.netDebugNetworkInterface.getter()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE952C8]), sel_init);
  v1 = v0;
  if (v0)
  {
    v2 = OUTLINED_FUNCTION_0_8((uint64_t)v0, sel_setBytesReceived_);
    v3 = OUTLINED_FUNCTION_0_8((uint64_t)v2, sel_setBytesRetransmitted_);
    v4 = OUTLINED_FUNCTION_0_8((uint64_t)v3, sel_setBytesSent_);
    v5 = OUTLINED_FUNCTION_0_8((uint64_t)v4, sel_setBytesUnacked_);
    v6 = OUTLINED_FUNCTION_0_8((uint64_t)v5, sel_setDuplicateBytesReceived_);
    v7 = OUTLINED_FUNCTION_0_8((uint64_t)v6, sel_setOutOfOrderBytesReceived_);
    v8 = OUTLINED_FUNCTION_0_8((uint64_t)v7, sel_setPacketsReceived_);
    v9 = OUTLINED_FUNCTION_0_8((uint64_t)v8, sel_setPacketsSent_);
    v10 = OUTLINED_FUNCTION_0_8((uint64_t)v9, sel_setRttBest_);
    v11 = OUTLINED_FUNCTION_0_8((uint64_t)v10, sel_setRttCurrent_);
    v12 = OUTLINED_FUNCTION_0_8((uint64_t)v11, sel_setRttSmoothed_);
    v13 = OUTLINED_FUNCTION_0_8((uint64_t)v12, sel_setRttVariance_);
    v14 = OUTLINED_FUNCTION_0_8((uint64_t)v13, sel_setSendBandwidth_);
    v15 = OUTLINED_FUNCTION_0_8((uint64_t)v14, sel_setSendBufferBytes_);
    v16 = OUTLINED_FUNCTION_0_8((uint64_t)v15, sel_setSubflowSwitchCount_);
    v17 = OUTLINED_FUNCTION_0_8((uint64_t)v16, sel_setSynRetransmits_);
    OUTLINED_FUNCTION_0_8((uint64_t)v17, sel_setTfoSynDataAcked_);
    v18 = v1;
    v19 = ConnectionTCPInfoMetrics.netNetworkInterface.getter();
    objc_msgSend(v18, sel_setNetworkInterface_, v19);

  }
  return v1;
}

id OUTLINED_FUNCTION_0_8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t ConnectionResolutionReport.durationInMs.getter()
{
  uint64_t v0;
  double v1;
  uint64_t result;
  _BYTE v3[16];
  double v4;
  char v5;

  outlined init with take of Double?(v0 + 8, (uint64_t)v3);
  outlined init with take of Double?((uint64_t)v3, (uint64_t)&v4);
  if ((v5 & 1) == 0 && v4 > 0.0)
  {
    v1 = v4 * 1000.0;
    if (v4 * 1000.0 <= -9.22337204e18)
      goto LABEL_14;
    if (v1 >= 9.22337204e18)
      return 0x7FFFFFFFFFFFFFFFLL;
    if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
    {
      if (v1 > -9.22337204e18)
      {
        result = (uint64_t)v1;
        if (((uint64_t)v1 & 0x8000000000000000) == 0)
          return result;
LABEL_14:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  return 0;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ConnectionResolutionReport()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionResolutionReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionResolutionReport(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 1);
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  LODWORD(v5) = a2[5];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_DWORD *)(a1 + 20) = v5;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = a2[12];
  *(_DWORD *)(a1 + 52) = a2[13];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = a2[18];
  *(_DWORD *)(a1 + 76) = a2[19];
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for ConnectionResolutionReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionResolutionReport(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionResolutionReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionResolutionReport()
{
  return &type metadata for ConnectionResolutionReport;
}

uint64_t ConnectionResolutionReport.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;

  v1 = 0x6E776F6E6B6E75;
  v2 = 0xE700000000000000;
  strcpy((char *)&v31, "source ");
  v31._object = (void *)0xE700000000000000;
  v3 = OUTLINED_FUNCTION_1_4();
  if ((v4 & 1) == 0)
  {
    LODWORD(v32._countAndFlagsBits) = *(_DWORD *)v0;
    v3 = OUTLINED_FUNCTION_7_3();
    v2 = v5;
  }
  v6 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  countAndFlagsBits = v31._countAndFlagsBits;
  object = v31._object;
  strcpy((char *)&v31, "durationInMs ");
  HIWORD(v31._object) = -4864;
  v9 = ConnectionResolutionReport.durationInMs.getter();
  v30 = countAndFlagsBits;
  if ((v10 & 1) != 0)
  {
    v11 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    v32._countAndFlagsBits = v9;
    v11 = OUTLINED_FUNCTION_7_3();
  }
  OUTLINED_FUNCTION_5_4(v11);
  OUTLINED_FUNCTION_8_2();
  v12 = v31._countAndFlagsBits;
  v13 = v31._object;
  OUTLINED_FUNCTION_6_0();
  _StringGuts.grow(_:)(16);
  OUTLINED_FUNCTION_4_4();
  strcpy((char *)&v31, "endpointCount ");
  HIBYTE(v31._object) = -18;
  v29 = v12;
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v14 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    LODWORD(v32._countAndFlagsBits) = *(_DWORD *)(v0 + 20);
    v14 = OUTLINED_FUNCTION_7_3();
  }
  OUTLINED_FUNCTION_5_4(v14);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_6_0();
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_4_4();
  v32._countAndFlagsBits = 0xD000000000000014;
  v32._object = (void *)0x8000000246F77050;
  if (*(_QWORD *)(v0 + 40))
  {
    OUTLINED_FUNCTION_3_4();
    v15 = String.init<A>(describing:)();
    v17 = v16;
  }
  else
  {
    v17 = 0xE700000000000000;
    v15 = OUTLINED_FUNCTION_1_4();
  }
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v15);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_2_4();
  v19 = v32._countAndFlagsBits;
  v20 = v32._object;
  OUTLINED_FUNCTION_6_0();
  _StringGuts.grow(_:)(22);
  OUTLINED_FUNCTION_4_4();
  v32._countAndFlagsBits = 0xD000000000000013;
  v32._object = (void *)0x8000000246F77070;
  if (*(_QWORD *)(v0 + 64))
  {
    OUTLINED_FUNCTION_3_4();
    v1 = String.init<A>(describing:)();
    v22 = v21;
  }
  else
  {
    v22 = (void *)0xE700000000000000;
  }
  v23._countAndFlagsBits = v1;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_6_0();
  _StringGuts.grow(_:)(54);
  v24._countAndFlagsBits = 0xD000000000000023;
  v24._object = (void *)0x8000000246F77090;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v30;
  v25._object = object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_9();
  v26._countAndFlagsBits = v29;
  v26._object = v13;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_9();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_9();
  v27._countAndFlagsBits = v19;
  v27._object = v20;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_9();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  return v31._countAndFlagsBits;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionResolutionReport()
{
  const void *v0;
  _BYTE v2[80];

  memcpy(v2, v0, sizeof(v2));
  return ConnectionResolutionReport.debugDescription.getter();
}

void OUTLINED_FUNCTION_0_9()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return 0x6E776F6E6B6E75;
}

void OUTLINED_FUNCTION_2_4()
{
  Swift::String v0;

  v0._countAndFlagsBits = 93;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_5_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return swift_bridgeObjectRelease();
}

id static NSURLSessionConfiguration.defaultSessionConfiguration(with:)(char *__src)
{
  char v2;
  unsigned __int8 v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  Class isa;
  uint64_t v32;
  double v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];
  id __dst[25];
  char v55;
  unsigned __int8 v56;
  _BYTE v57[70];
  double v58;
  char v59;
  __int128 v60;
  _BYTE v61[23];
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  unsigned __int8 v82;

  memcpy(__dst, __src, sizeof(__dst));
  v2 = __src[200];
  v82 = __src[201];
  v3 = v82;
  memcpy(v57, __src + 202, sizeof(v57));
  v34 = *((double *)__src + 34);
  v81 = __src[280];
  v4 = v81;
  v5 = *((_QWORD *)__src + 42);
  v50 = *((_QWORD *)__src + 41);
  v52 = *((_QWORD *)__src + 40);
  v47 = *(_OWORD *)(__src + 360);
  v48 = *(_OWORD *)(__src + 344);
  v6 = *((_QWORD *)__src + 49);
  v45 = *((_QWORD *)__src + 48);
  v46 = *((_QWORD *)__src + 47);
  v7 = *((_QWORD *)__src + 51);
  v44 = *((_QWORD *)__src + 50);
  v42 = *((_OWORD *)__src + 27);
  v43 = *((_OWORD *)__src + 26);
  v41 = *((_OWORD *)__src + 28);
  v8 = *((_QWORD *)__src + 59);
  v40 = *((_QWORD *)__src + 58);
  v39 = *((_OWORD *)__src + 30);
  v37 = *((_QWORD *)__src + 63);
  v38 = *((_QWORD *)__src + 62);
  v36 = *((_DWORD *)__src + 128);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultSessionConfiguration);
  v35 = v2;
  v55 = v2;
  v10 = v9;
  v56 = v3;
  v58 = v34;
  v59 = v4;
  v11 = *(_OWORD *)(__src + 297);
  v60 = *(_OWORD *)(__src + 281);
  *(_OWORD *)v61 = v11;
  *(_QWORD *)&v61[15] = *((_QWORD *)__src + 39);
  v62 = v52;
  v63 = v50;
  v64 = v5;
  v65 = v48;
  v66 = v47;
  v67 = v46;
  v68 = v45;
  v69 = v6;
  v70 = v44;
  v72 = v43;
  v73 = v42;
  v74 = v41;
  v51 = v7;
  v71 = v7;
  v75 = v40;
  v77 = v39;
  v49 = v8;
  v76 = v8;
  v78 = v38;
  v79 = v37;
  v80 = v36;
  ConnectionConfiguration.usingTLS.getter();
  v13 = v12;
  v14 = OUTLINED_FUNCTION_1_5(v12, sel_setAllowsCellularAccess_);
  v15 = OUTLINED_FUNCTION_5_5((uint64_t)v14, sel_setNetworkServiceType_);
  OUTLINED_FUNCTION_1_5((uint64_t)v15, sel_set_allowTCPIOConnectionStreamTask_);
  objc_msgSend(v10, sel_setTimeoutIntervalForRequest_, 30.0);
  if ((v81 & 1) == 0)
    objc_msgSend(v10, sel_setTimeoutIntervalForRequest_, v34);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_246F72C70;
  __dst[0] = *(id *)MEMORY[0x24BDB7670];
  v17 = __dst[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFStringRef?);
  lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?();
  OUTLINED_FUNCTION_2_5();
  v18 = MEMORY[0x24BEE1328];
  *(_QWORD *)(v16 + 96) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v16 + 72) = 1;
  __dst[0] = *(id *)MEMORY[0x24BDB7708];
  v19 = __dst[0];
  OUTLINED_FUNCTION_2_5();
  *(_QWORD *)(v16 + 168) = v18;
  *(_BYTE *)(v16 + 144) = 1;
  v53[4] = Dictionary.init(dictionaryLiteral:)();
  if (v6)
  {
    v20 = v5;
    v21 = v5 & 1;
    v22 = (v5 >> 8) & 1;
    if ((v13 & 1) == 0)
    {
      v23 = 0;
      goto LABEL_13;
    }
    v23 = HIDWORD(v5) & 1;
  }
  else
  {
    v21 = 0;
    LODWORD(v22) = 1;
    if ((v13 & 1) == 0)
    {
      v23 = 0;
      goto LABEL_13;
    }
    v23 = v35 & 1;
    v20 = v5;
  }
  objc_msgSend(v10, sel_set_allowsTLSSessionTickets_, v82);
  if (v6 && (v20 & 0x10000) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, Bool)>);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_246F72C60;
    v25 = (void *)*MEMORY[0x24BDB7668];
    *(_QWORD *)(v24 + 32) = *MEMORY[0x24BDB7668];
    *(_BYTE *)(v24 + 40) = 1;
    v26 = v25;
    v27 = Dictionary.init(dictionaryLiteral:)();
    v28 = (void *)*MEMORY[0x24BDB77B0];
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    v29 = v28;
    AnyHashable.init<A>(_:)();
    v53[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CFStringRef? : Bool]);
    v53[0] = v27;
    specialized Dictionary.subscript.setter((uint64_t)v53, (uint64_t)__dst);
  }
LABEL_13:
  OUTLINED_FUNCTION_1_5((uint64_t)objc_msgSend(v10, sel_set_allowsTCPFastOpen_, v23), sel_set_allowsRetryForBackgroundDataTasks_);
  v30 = AFIsHorseman();
  if ((v30 & 1) == 0 && (v21 & 1) == 0 && (v51 == 1 || (v49 & 1) != 0))
  {
    OUTLINED_FUNCTION_1_5(v30, sel_set_allowsMultipathTCP_);
    objc_msgSend(v10, sel_setMultipathServiceType_, 2);
  }
  if ((_DWORD)v22)
    objc_msgSend(v10, sel_set_expiredDNSBehavior_, 1);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_set_socketStreamProperties_, isa);

  OUTLINED_FUNCTION_5_5(v32, sel_set_timingDataOptions_);
  return v10;
}

uint64_t NSURLSessionConfiguration.rpcDescription.getter()
{
  void *v0;
  Swift::String v1;
  id v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *object;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t countAndFlagsBits;
  Swift::String v29;

  strcpy((char *)&v29, "Service Type ");
  objc_msgSend(v0, sel_networkServiceType);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  OUTLINED_FUNCTION_8_2();
  countAndFlagsBits = v29._countAndFlagsBits;
  _StringGuts.grow(_:)(17);
  OUTLINED_FUNCTION_4_5();
  v29._countAndFlagsBits = 0x7473696D6974704FLL;
  v29._object = (void *)0xEF20534E44206369;
  v2 = objc_msgSend(v0, sel__expiredDNSBehavior);
  v3 = v2 == (id)1;
  if (v2 == (id)1)
    v4 = 0x64656C62616E65;
  else
    v4 = 0x64656C6261736964;
  if (v3)
    v5 = 0xE700000000000000;
  else
    v5 = 0xE800000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  OUTLINED_FUNCTION_8_2();
  v8 = v29._countAndFlagsBits;
  object = v29._object;
  v29._countAndFlagsBits = 0x20504354504DLL;
  v29._object = (void *)0xE600000000000000;
  v9 = objc_msgSend(v0, sel__allowsMultipathTCP);
  v10 = v9 == 0;
  if (v9)
    v11 = 0x64656C62616E65;
  else
    v11 = 0x64656C6261736964;
  if (v10)
    v12 = 0xE800000000000000;
  else
    v12 = 0xE700000000000000;
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v15 = v29._countAndFlagsBits;
  v14 = v29._object;
  v29._countAndFlagsBits = 542329940;
  v29._object = (void *)0xE400000000000000;
  v16 = objc_msgSend(v0, sel__allowsTLSSessionTickets);
  v17 = v16 == 0;
  if (v16)
    v18 = 0x64656C62616E65;
  else
    v18 = 0x64656C6261736964;
  if (v17)
    v19 = 0xE800000000000000;
  else
    v19 = 0xE700000000000000;
  v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(32);
  OUTLINED_FUNCTION_4_5();
  objc_msgSend(v0, sel_timeoutIntervalForRequest);
  Double.seconds.getter(v21);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x73646E6F63657320;
  v23._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v23);
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_0_10();
  v24._countAndFlagsBits = v8;
  v24._object = object;
  String.append(_:)(v24);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_0_10();
  v25._countAndFlagsBits = v15;
  v25._object = v14;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_10();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_10();
  v26._countAndFlagsBits = 0xD000000000000015;
  v26._object = (void *)0x8000000246F770C0;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

unint64_t lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CFStringRef?);
    v2 = lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE4AB0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x24956DF70]("-\u058C\npq", v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

void OUTLINED_FUNCTION_0_10()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

id OUTLINED_FUNCTION_1_5(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 1);
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_5_5(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 4);
}

uint64_t dispatch thunk of CommunicationProtocolDelegateProtobuf.didReceiveObject(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

const __CFString *one-time initialization function for httpMethodACE()
{
  const __CFString *result;

  result = (id)__CFStringMakeConstantString("ACE");
  static ConnectionConfigurationConstants.httpMethodACE = (uint64_t)result;
  return result;
}

const __CFString *one-time initialization function for httpContentLengthACE()
{
  const __CFString *result;

  result = (id)__CFStringMakeConstantString("2000000000");
  static ConnectionConfigurationConstants.httpContentLengthACE = (uint64_t)result;
  return result;
}

unint64_t Logger.Subsystem.rawValue.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t Logger.Category.rawValue.getter()
{
  return 0x6B726F7774654ELL;
}

uint64_t one-time initialization function for siriNetwork()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.siriNetwork);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriNetwork);
  type metadata accessor for OS_os_log();
  OS_os_log.init(subsystem:category:)();
  return Logger.init(_:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t ConnectionTCPInfoMetrics.interfaceName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void ConnectionTCPInfoMetrics.interfaceName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionTCPInfoMetrics.interfaceName.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.connectionIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void ConnectionTCPInfoMetrics.connectionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionTCPInfoMetrics.connectionIdentifier.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionTCPInfoMetrics.connectionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *ConnectionTCPInfoMetrics.connectionType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.connectionType.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesReceived.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ConnectionTCPInfoMetrics.bytesReceived.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesReceived.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesRetransmitted.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t ConnectionTCPInfoMetrics.bytesRetransmitted.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesRetransmitted.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesSent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t ConnectionTCPInfoMetrics.bytesSent.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesSent.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.bytesUnacked.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t ConnectionTCPInfoMetrics.bytesUnacked.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.bytesUnacked.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.duplicateBytesReceived.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t ConnectionTCPInfoMetrics.duplicateBytesReceived.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = result;
  *(_BYTE *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.duplicateBytesReceived.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.outOfOrderBytesReceived.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t ConnectionTCPInfoMetrics.outOfOrderBytesReceived.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = result;
  *(_BYTE *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.outOfOrderBytesReceived.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.packetsReceived.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t ConnectionTCPInfoMetrics.packetsReceived.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = result;
  *(_BYTE *)(v2 + 144) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.packetsReceived.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.packetsSent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

uint64_t ConnectionTCPInfoMetrics.packetsSent.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = result;
  *(_BYTE *)(v2 + 160) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.packetsSent.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttBest.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_6(*(unsigned int *)(v0 + 164));
}

uint64_t ConnectionTCPInfoMetrics.rttBest.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 164) = result;
  *(_BYTE *)(v1 + 168) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttBest.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttCurrent.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_6(*(unsigned int *)(v0 + 172));
}

uint64_t ConnectionTCPInfoMetrics.rttCurrent.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 172) = result;
  *(_BYTE *)(v1 + 176) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttCurrent.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttSmoothed.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_6(*(unsigned int *)(v0 + 180));
}

uint64_t ConnectionTCPInfoMetrics.rttSmoothed.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 180) = result;
  *(_BYTE *)(v1 + 184) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttSmoothed.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.rttVariance.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_6(*(unsigned int *)(v0 + 188));
}

uint64_t ConnectionTCPInfoMetrics.rttVariance.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 188) = result;
  *(_BYTE *)(v1 + 192) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.rttVariance.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.sendBandwidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 200);
}

uint64_t ConnectionTCPInfoMetrics.sendBandwidth.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 200) = result;
  *(_BYTE *)(v2 + 208) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.sendBandwidth.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionTCPInfoMetrics.sendBufferBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

uint64_t ConnectionTCPInfoMetrics.sendBufferBytes.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 216) = result;
  *(_BYTE *)(v2 + 224) = a2 & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.sendBufferBytes.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.synRetransmits.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_6(*(unsigned int *)(v0 + 228));
}

uint64_t ConnectionTCPInfoMetrics.synRetransmits.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 228) = result;
  *(_BYTE *)(v1 + 232) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.synRetransmits.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.tfoSynDataAcked.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_6(*(unsigned int *)(v0 + 236));
}

uint64_t ConnectionTCPInfoMetrics.tfoSynDataAcked.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 236) = result;
  *(_BYTE *)(v1 + 240) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.tfoSynDataAcked.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionTCPInfoMetrics.subflowSwitchCount.getter()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_6(*(unsigned int *)(v0 + 244));
}

uint64_t ConnectionTCPInfoMetrics.subflowSwitchCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 244) = result;
  *(_BYTE *)(v1 + 248) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionTCPInfoMetrics.subflowSwitchCount.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

BOOL ConnectionTCPInfoMetrics.isPoorLinkQuality.getter()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  _QWORD __dst[33];
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;

  memcpy(__dst, v0, 0xF9uLL);
  if ((__dst[12] & 1) != 0 || (__dst[22] & 1) != 0)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriNetwork);
    v7 = OUTLINED_FUNCTION_21_1(v2, v3, v4, v5, v6);
    OUTLINED_FUNCTION_21_1(v7, v8, v9, v10, v11);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    v14 = os_log_type_enabled(v12, v13);
    if (v14)
    {
      v19 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v87 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v19 = 136315138;
      v20 = __dst[1];
      if (__dst[1])
      {
        OUTLINED_FUNCTION_27_1();
        v20 = String.init<A>(describing:)();
        v22 = v21;
      }
      else
      {
        v22 = 0xE000000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v32 = swift_bridgeObjectRelease();
      v37 = OUTLINED_FUNCTION_11_3(v32, v33, v34, v35, v36);
      OUTLINED_FUNCTION_11_3(v37, v38, v39, v40, v41);
      _os_log_impl(&dword_246EC7000, v12, v13, "SiriNetwork - Report Link Quality [%s]. Bytes unacked unknown", v19, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_4();
    }
    v23 = OUTLINED_FUNCTION_11_3(v14, v15, v16, v17, v18);
    OUTLINED_FUNCTION_11_3(v23, v24, v25, v26, v27);

    return 0;
  }
  else
  {
    v28 = __dst[11];
    v29 = HIDWORD(__dst[21]);
    v42 = __dst[11] > 0x100uLL || HIDWORD(__dst[21]) > 0x3E8;
    _StringGuts.grow(_:)(87);
    OUTLINED_FUNCTION_16_3(0x7474727320504354);
    if ((__dst[23] & 1) != 0)
    {
      v31 = 0;
    }
    else
    {
      LODWORD(v87) = HIDWORD(__dst[22]);
      v31 = OUTLINED_FUNCTION_15_3();
    }
    OUTLINED_FUNCTION_14_2(v31);
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_16_3(0x727563747472202CLL);
    LODWORD(v87) = v29;
    v89._countAndFlagsBits = OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_24_1(v89);
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_16_3(0x726176747472202CLL);
    if ((__dst[24] & 1) != 0)
    {
      v44 = 0;
    }
    else
    {
      LODWORD(v87) = HIDWORD(__dst[23]);
      v44 = OUTLINED_FUNCTION_15_3();
    }
    OUTLINED_FUNCTION_14_2(v44);
    OUTLINED_FUNCTION_8_2();
    v45._countAndFlagsBits = 0x657479626273202CLL;
    v45._object = (void *)0xEB00000000203A73;
    String.append(_:)(v45);
    if ((__dst[28] & 1) != 0)
    {
      v46 = 0;
    }
    else
    {
      v87 = __dst[27];
      v46 = OUTLINED_FUNCTION_15_3();
    }
    OUTLINED_FUNCTION_14_2(v46);
    OUTLINED_FUNCTION_8_2();
    v47._countAndFlagsBits = 0x63616E757874202CLL;
    v47._object = (void *)0xED0000203A64656BLL;
    String.append(_:)(v47);
    v87 = v28;
    v90._countAndFlagsBits = OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_24_1(v90);
    OUTLINED_FUNCTION_8_2();
    v91._countAndFlagsBits = 0xD000000000000015;
    v91._object = (void *)0x8000000246F77110;
    OUTLINED_FUNCTION_24_1(v91);
    if ((__dst[8] & 1) != 0)
    {
      v48 = 0;
    }
    else
    {
      v87 = __dst[7];
      v48 = OUTLINED_FUNCTION_15_3();
    }
    OUTLINED_FUNCTION_14_2(v48);
    OUTLINED_FUNCTION_8_2();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    v50 = __swift_project_value_buffer(v49, (uint64_t)static Logger.siriNetwork);
    v55 = OUTLINED_FUNCTION_21_1(v50, v51, v52, v53, v54);
    OUTLINED_FUNCTION_21_1(v55, v56, v57, v58, v59);
    swift_bridgeObjectRetain();
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.default.getter();
    v62 = os_log_type_enabled(v60, v61);
    if (v62)
    {
      v67 = OUTLINED_FUNCTION_2_2();
      v87 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v67 = 136315650;
      v68 = __dst[1];
      if (__dst[1])
      {
        OUTLINED_FUNCTION_27_1();
        v68 = String.init<A>(describing:)();
        v70 = v69;
      }
      else
      {
        v70 = 0xE000000000000000;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, &v87);
      OUTLINED_FUNCTION_22_2();
      v76 = OUTLINED_FUNCTION_26_0();
      v81 = OUTLINED_FUNCTION_11_3(v76, v77, v78, v79, v80);
      OUTLINED_FUNCTION_11_3(v81, v82, v83, v84, v85);
      v86 = "Good link quality";
      *(_WORD *)(v67 + 12) = 2080;
      if (v42)
        v86 = "Poor link quality";
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, (unint64_t)(v86 - 32) | 0x8000000000000000, &v87);
      OUTLINED_FUNCTION_22_2();
      OUTLINED_FUNCTION_26_0();
      *(_WORD *)(v67 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_246EC7000, v60, v61, "SiriNetwork - Report Link Quality [%s]. %s. %s", (uint8_t *)v67, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_4();
    }
    v71 = OUTLINED_FUNCTION_11_3(v62, v63, v64, v65, v66);
    OUTLINED_FUNCTION_11_3(v71, v72, v73, v74, v75);

    swift_bridgeObjectRelease_n();
  }
  return v42;
}

uint64_t ConnectionTCPInfoMetrics.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  void *object;
  int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  int v36;
  int v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t countAndFlagsBits;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  v82 = *(_QWORD *)(v0 + 56);
  v81 = *(unsigned __int8 *)(v0 + 64);
  v79 = *(_QWORD *)(v0 + 72);
  v78 = *(unsigned __int8 *)(v0 + 80);
  v73 = *(_QWORD *)(v0 + 88);
  v72 = *(unsigned __int8 *)(v0 + 96);
  v70 = *(_QWORD *)(v0 + 104);
  v69 = *(unsigned __int8 *)(v0 + 112);
  v64 = *(_QWORD *)(v0 + 120);
  v63 = *(unsigned __int8 *)(v0 + 128);
  v58 = *(_QWORD *)(v0 + 136);
  v57 = *(unsigned __int8 *)(v0 + 144);
  v52 = *(_QWORD *)(v0 + 152);
  v51 = *(unsigned __int8 *)(v0 + 160);
  v49 = *(_DWORD *)(v0 + 172);
  v47 = *(unsigned __int8 *)(v0 + 176);
  v55 = *(_DWORD *)(v0 + 180);
  v54 = *(unsigned __int8 *)(v0 + 184);
  v92._countAndFlagsBits = 0x6361667265746E69;
  if (v1)
    v6 = v2;
  else
    v6 = 0x6E776F6E6B6E75;
  v60 = *(unsigned __int8 *)(v0 + 192);
  v61 = *(_DWORD *)(v0 + 188);
  v67 = *(_QWORD *)(v0 + 200);
  v66 = *(unsigned __int8 *)(v0 + 208);
  v76 = *(_QWORD *)(v0 + 216);
  v75 = *(unsigned __int8 *)(v0 + 224);
  v84 = *(unsigned __int8 *)(v0 + 232);
  v85 = *(_DWORD *)(v0 + 228);
  v88 = *(unsigned __int8 *)(v0 + 240);
  v89 = *(_DWORD *)(v0 + 236);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_7_4(v6);
  OUTLINED_FUNCTION_6_1();
  countAndFlagsBits = v92._countAndFlagsBits;
  _StringGuts.grow(_:)(17);
  OUTLINED_FUNCTION_9_2();
  v92._countAndFlagsBits = 0x697463656E6E6F63;
  v92._object = (void *)0xEF20657079546E6FLL;
  if (v5 == 25)
  {
    v7 = 0x6E776F6E6B6E75;
    v8 = 0xE700000000000000;
  }
  else
  {
    v7 = ConnectionType.stringRawValue.getter();
    v8 = v9;
  }
  v10 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  OUTLINED_FUNCTION_8_2();
  v90 = v92._countAndFlagsBits;
  strcpy((char *)&v92, "connection ");
  HIDWORD(v92._object) = -352321536;
  if (v3)
    v11 = v4;
  else
    v11 = 0x6E776F6E6B6E75;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_7_4(v11);
  OUTLINED_FUNCTION_6_1();
  v87 = v92._countAndFlagsBits;
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_9_2();
  strcpy((char *)&v92, "bytesReceived ");
  v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_4_6(v93);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_13_3();
  v86 = v12;
  v92._countAndFlagsBits = 0;
  v92._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_20_2(0xD000000000000013);
  v13 = v82;
  if (v81)
    v13 = 0;
  v94._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v13);
  OUTLINED_FUNCTION_4_6(v94);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_13_3();
  v83 = v14;
  strcpy((char *)&v92, "bytesSent ");
  BYTE3(v92._object) = 0;
  HIDWORD(v92._object) = -369098752;
  v15 = v79;
  if (v78)
    v15 = 0;
  v95._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v15);
  OUTLINED_FUNCTION_4_6(v95);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_13_3();
  v80 = v16;
  strcpy((char *)&v92, "bytesUnacked ");
  HIWORD(v92._object) = -4864;
  v17 = v73;
  if (v72)
    v17 = 0;
  v96._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v17);
  OUTLINED_FUNCTION_4_6(v96);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_13_3();
  v74 = v18;
  v92._countAndFlagsBits = 0;
  v92._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_20_2(0xD000000000000017);
  v19 = v70;
  if (v69)
    v19 = 0;
  v97._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v19);
  OUTLINED_FUNCTION_4_6(v97);
  OUTLINED_FUNCTION_10_2();
  v71 = v92._countAndFlagsBits;
  v92._countAndFlagsBits = 0;
  v92._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_20_2(0xD000000000000018);
  v20 = v64;
  if (v63)
    v20 = 0;
  v98._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v20);
  OUTLINED_FUNCTION_4_6(v98);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_13_3();
  v65 = v21;
  OUTLINED_FUNCTION_17_3();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_19_1((uint64_t)"packetsReceived ");
  v22 = v58;
  if (v57)
    v22 = 0;
  v99._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v22);
  OUTLINED_FUNCTION_4_6(v99);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_13_3();
  v59 = v23;
  strcpy((char *)&v92, "packetsSent ");
  BYTE5(v92._object) = 0;
  HIWORD(v92._object) = -5120;
  v24 = v52;
  if (v51)
    v24 = 0;
  v100._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v24);
  OUTLINED_FUNCTION_4_6(v100);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_13_3();
  v53 = v25;
  strcpy((char *)&v92, "rttBest ");
  v101._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_5_6(v101);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_13_3();
  v48 = v26;
  strcpy((char *)&v92, "rttCurrent ");
  HIDWORD(v92._object) = -352321536;
  v27 = v49;
  if (v47)
    v27 = 0;
  v102._countAndFlagsBits = OUTLINED_FUNCTION_3_5(v27);
  OUTLINED_FUNCTION_5_6(v102);
  OUTLINED_FUNCTION_8_2();
  v50 = v92._countAndFlagsBits;
  strcpy((char *)&v92, "rttSmoothed ");
  BYTE5(v92._object) = 0;
  HIWORD(v92._object) = -5120;
  v28 = v55;
  if (v54)
    v28 = 0;
  v103._countAndFlagsBits = OUTLINED_FUNCTION_3_5(v28);
  OUTLINED_FUNCTION_5_6(v103);
  OUTLINED_FUNCTION_8_2();
  object = v92._object;
  v56 = v92._countAndFlagsBits;
  strcpy((char *)&v92, "rttVariance ");
  BYTE5(v92._object) = 0;
  HIWORD(v92._object) = -5120;
  v30 = v61;
  if (v60)
    v30 = 0;
  v104._countAndFlagsBits = OUTLINED_FUNCTION_3_5(v30);
  OUTLINED_FUNCTION_5_6(v104);
  OUTLINED_FUNCTION_8_2();
  v31 = v92._object;
  v62 = v92._countAndFlagsBits;
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_9_2();
  strcpy((char *)&v92, "sendBandwidth ");
  HIBYTE(v92._object) = -18;
  v32 = v67;
  if (v66)
    v32 = 0;
  v105._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v32);
  OUTLINED_FUNCTION_5_6(v105);
  OUTLINED_FUNCTION_8_2();
  v33 = v92._object;
  v68 = v92._countAndFlagsBits;
  OUTLINED_FUNCTION_17_3();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_19_1((uint64_t)"sendBufferBytes ");
  v34 = v76;
  if (v75)
    v34 = 0;
  v106._countAndFlagsBits = OUTLINED_FUNCTION_0_11(v34);
  OUTLINED_FUNCTION_5_6(v106);
  swift_bridgeObjectRelease();
  v35 = v92._object;
  v77 = v92._countAndFlagsBits;
  _StringGuts.grow(_:)(17);
  OUTLINED_FUNCTION_9_2();
  v92._countAndFlagsBits = 0x61727465526E7973;
  v92._object = (void *)0xEF207374696D736ELL;
  v36 = v85;
  if (v84)
    v36 = 0;
  v107._countAndFlagsBits = OUTLINED_FUNCTION_3_5(v36);
  OUTLINED_FUNCTION_5_6(v107);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_3();
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_19_1((uint64_t)"tfoSynDataAcked ");
  v37 = v89;
  if (v88)
    v37 = 0;
  v108._countAndFlagsBits = OUTLINED_FUNCTION_3_5(v37);
  OUTLINED_FUNCTION_4_6(v108);
  OUTLINED_FUNCTION_10_2();
  _StringGuts.grow(_:)(131);
  v38._countAndFlagsBits = 0xD000000000000037;
  v38._object = (void *)0x8000000246F77230;
  String.append(_:)(v38);
  OUTLINED_FUNCTION_7_4(countAndFlagsBits);
  OUTLINED_FUNCTION_6_1();
  v39._countAndFlagsBits = 10272;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  OUTLINED_FUNCTION_7_4(v87);
  OUTLINED_FUNCTION_6_1();
  v40._countAndFlagsBits = 2112041;
  v40._object = (void *)0xE300000000000000;
  String.append(_:)(v40);
  OUTLINED_FUNCTION_7_4(v90);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v86);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v83);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v80);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v74);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v71);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v65);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v59);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v53);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v48);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_7_4(v50);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_1_6();
  v41._countAndFlagsBits = v56;
  v41._object = object;
  String.append(_:)(v41);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_1_6();
  v42._countAndFlagsBits = v62;
  v42._object = v31;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  v43._countAndFlagsBits = v68;
  v43._object = v33;
  String.append(_:)(v43);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_1_6();
  v44._countAndFlagsBits = v77;
  v44._object = v35;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  String.append(_:)(v92);
  OUTLINED_FUNCTION_10_2();
  v45._countAndFlagsBits = 93;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  return 0;
}

uint64_t destroy for ConnectionTCPInfoMetrics()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionTCPInfoMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v5 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v5;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  LODWORD(v5) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v5;
  v6 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v6;
  v7 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 236);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_DWORD *)(a1 + 236) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_DWORD *)(a1 + 244) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionTCPInfoMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v8;
  v9 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v11;
  v12 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v12;
  v13 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 236);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_DWORD *)(a1 + 236) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_DWORD *)(a1 + 244) = v13;
  return a1;
}

void *__swift_memcpy249_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF9uLL);
}

uint64_t assignWithTake for ConnectionTCPInfoMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v7 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 236);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_DWORD *)(a1 + 236) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_DWORD *)(a1 + 244) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionTCPInfoMetrics(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 249))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionTCPInfoMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 248) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 249) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 249) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionTCPInfoMetrics()
{
  return &type metadata for ConnectionTCPInfoMetrics;
}

uint64_t OUTLINED_FUNCTION_0_11@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_1_6()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

unint64_t OUTLINED_FUNCTION_2_6@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v1;

  return a1 | ((unint64_t)v1 << 32);
}

uint64_t OUTLINED_FUNCTION_3_5@<X0>(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 112) = a1;
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_4_6(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_5_6(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_7_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_11_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return outlined release of ConnectionTCPInfoMetrics((uint64_t)va);
}

void OUTLINED_FUNCTION_14_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_15_3()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_16_3(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xEA0000000000203ALL;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_17_3()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = 0;
  *(_QWORD *)(v1 - 96) = v0;
  _StringGuts.grow(_:)(18);
}

void OUTLINED_FUNCTION_19_1(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = v1;
  *(_QWORD *)(v2 - 96) = (a1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_20_2(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 104) = a1;
  *(_QWORD *)(v2 - 96) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_21_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return outlined retain of ConnectionTCPInfoMetrics((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_22_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_24_1(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_25_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = 0;
  *(_QWORD *)(v1 - 96) = v0;
  _StringGuts.grow(_:)(16);
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  return swift_bridgeObjectRetain();
}

void Data.truncateBeginning(removeSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t type metadata completion function for SafeCallback()
{
  return swift_initClassMetadata2();
}

uint64_t SafeCallback.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t SafeCallback.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SafeCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SafeCallback);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24956DF1C](a1, v6, a5);
}

void CWFInterface.channelInfo.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v1 = objc_msgSend(v0, sel_channel);
  if (v1)
  {
    v2 = v1;
    if ((uint64_t)objc_msgSend(v1, sel_channel) < 1)
    {

    }
    else
    {
      v3 = objc_msgSend(v2, sel_channel);
      CWFInterface.frequencyBand.getter();
      v5 = v4;
      objc_msgSend(v2, sel_width);
      static WiFiRecord.channelInfo(channel:frequencyBand:channelInMHz:)((uint64_t)v3, v5);

      swift_bridgeObjectRelease();
    }
  }
  OUTLINED_FUNCTION_23_1();
}

void CWFInterface.frequencyBand.getter()
{
  void *v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(v0, sel_channel);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_band);

  }
  OUTLINED_FUNCTION_23_1();
}

uint64_t NWConnection.getAttemptedEndpoints()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t count;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21[4];
  uint64_t v22;

  MEMORY[0x24956CCF8]();
  v0 = nw_connection_copy_attempted_endpoint_array();
  swift_unknownObjectRelease();
  v1 = MEMORY[0x24BEE4AF8];
  if (!v0)
    return v1;
  count = nw_array_get_count();
  v22 = v1;
  if (count < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = count;
    if (count)
    {
      v4 = 0;
      v5 = MEMORY[0x24BEE4AF8];
      do
      {
        v6 = (id)nw_array_get_object_at_index();
        v21[3] = (uint64_t)&unk_2576762C0;
        if (!swift_dynamicCastObjCProtocolConditional())
          swift_unknownObjectRelease();
        nw_endpoint_get_description();
        v7 = String.init(cString:)();
        v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_5_7();
          v5 = v12;
        }
        v10 = *(_QWORD *)(v5 + 16);
        if (v10 >= *(_QWORD *)(v5 + 24) >> 1)
        {
          OUTLINED_FUNCTION_5_7();
          v5 = v13;
        }
        ++v4;
        *(_QWORD *)(v5 + 16) = v10 + 1;
        v11 = v5 + 16 * v10;
        *(_QWORD *)(v11 + 32) = v7;
        *(_QWORD *)(v11 + 40) = v9;
        swift_unknownObjectRelease();
      }
      while (v3 != v4);
      v22 = v5;
    }
    if (one-time initialization token for siriNetwork == -1)
      goto LABEL_14;
  }
  swift_once();
LABEL_14:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v21[0] = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v18 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_2_7();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v15, v16, "SiriNetwork - Report: Attempted Endpoints: %s", v17, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_3_6();
  swift_beginAccess();
  return v22;
}

Swift::String_optional __swiftcall NWConnection.getConnectionEdgeID(wasConnected:attemptedEndpoints:)(Swift::Bool wasConnected, Swift::OpaquePointer attemptedEndpoints)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  Swift::String_optional result;
  int64_t v28;
  uint64_t v29;

  if (wasConnected
    && (MEMORY[0x24956CCF8](), v3 = nw_connection_copy_connected_remote_endpoint(), OUTLINED_FUNCTION_3_6(), v3))
  {
    nw_endpoint_get_description();
    v4 = String.init(cString:)();
    v6 = v5;
    v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      v8 = v4;
    }
    else
    {
      swift_bridgeObjectRelease();
      v6 = 0x8000000246F77280;
      v8 = 0xD000000000000012;
    }
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
    swift_bridgeObjectRetain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v29 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v22 = 136315138;
      swift_bridgeObjectRetain();
      v23 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_2_7();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v20, v21, "SiriNetwork - Report: Connection EdgeID: %s", v22, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_2_7();
    swift_unknownObjectRelease();
  }
  else
  {
    v9 = *((_QWORD *)attemptedEndpoints._rawValue + 2);
    if (v9)
    {
      v29 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
      v10 = v29;
      v11 = (char *)attemptedEndpoints._rawValue + 40;
      v28 = v9;
      do
      {
        swift_bridgeObjectRetain();
        v12 = String.init<A>(_:)();
        v14 = v13;
        v29 = v10;
        v16 = *(_QWORD *)(v10 + 16);
        v15 = *(_QWORD *)(v10 + 24);
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1);
          v10 = v29;
        }
        v11 += 16;
        *(_QWORD *)(v10 + 16) = v16 + 1;
        v17 = v10 + 16 * v16;
        *(_QWORD *)(v17 + 32) = v12;
        *(_QWORD *)(v17 + 40) = v14;
        --v9;
      }
      while (v9);
      v9 = v28;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v8 = BidirectionalCollection<>.joined(separator:)();
    v6 = v18;
    swift_bridgeObjectRelease();
    if (!v9)
    {
      swift_bridgeObjectRelease();
      v6 = 0xEF656C62616C6961;
      v8 = 0x76616E5572656570;
    }
  }
  v25 = v8;
  v26 = (void *)v6;
  result.value._object = v26;
  result.value._countAndFlagsBits = v25;
  return result;
}

uint64_t NWConnection.startActivity(_:)(uint64_t a1)
{
  return NWConnection.startActivity(_:)(a1, MEMORY[0x24BDE0178]);
}

uint64_t NWConnection.endActivity(_:)(uint64_t a1)
{
  return NWConnection.startActivity(_:)(a1, MEMORY[0x24BDE0168]);
}

uint64_t NWConnection.startActivity(_:)(uint64_t a1, void (*a2)())
{
  uint64_t result;
  _BYTE v4[24];
  uint64_t v5;

  outlined init with copy of Any?(a1, (uint64_t)v4);
  if (!v5)
    return outlined destroy of Any?((uint64_t)v4);
  type metadata accessor for NWActivity();
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    a2();
    return swift_release();
  }
  return result;
}

BOOL static NWConnection.== infix(_:_:)()
{
  uint64_t v0;

  v0 = NWConnection.identifier.getter();
  return v0 == NWConnection.identifier.getter();
}

void NWConnection.hash(into:)()
{
  Swift::UInt64 v0;

  v0 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v0);
}

void NWConnection.hashValue.getter()
{
  Swift::UInt64 v0;

  Hasher.init(_seed:)();
  v0 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v0);
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_7();
}

void protocol witness for Hashable.hashValue.getter in conformance NWConnection()
{
  NWConnection.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance NWConnection()
{
  NWConnection.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance NWConnection()
{
  Swift::UInt64 v0;

  Hasher.init(_seed:)();
  v0 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v0);
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_7();
}

uint64_t instantiation function for generic protocol witness table for NWConnection(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NWConnection and conformance NWConnection(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection, (uint64_t)&protocol conformance descriptor for NWConnection);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NWConnection()
{
  return lazy protocol witness table accessor for type NWConnection and conformance NWConnection(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection, (uint64_t)&protocol conformance descriptor for NWConnection);
}

uint64_t lazy protocol witness table accessor for type NWConnection and conformance NWConnection(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NWConnection();
    result = MEMORY[0x24956DF70](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NWConnection()
{
  return static NWConnection.== infix(_:_:)();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = (uint64_t)result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionPolicyRoute>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: [ConnectionPolicyRoute])>, (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.initialize(from:count:));
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;

  v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 24);
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = *(_QWORD *)(a4 + 16);
  if (v12 <= v13)
    v14 = *(_QWORD *)(a4 + 16);
  else
    v14 = v12;
  if (v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v15 = (_QWORD *)swift_allocObject();
    v16 = _swift_stdlib_malloc_size(v15);
    v15[2] = v13;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v17 = v15 + 4;
  v18 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v18, v13, v17);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release();
  return v15;
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_5_7()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t SiriNetworkOspreyChannel.ospreyClientStreamingContext.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext) = a1;
  return swift_unknownObjectRelease();
}

uint64_t SiriNetworkOspreyChannel.ospreyRequestBuilder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v4);
}

void SiriNetworkOspreyChannel.connectionMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[1440];

  v3 = v1 + OBJC_IVAR___SNOspreyChannel_connectionMetrics;
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_8_3(v3, (uint64_t)v4);
  OUTLINED_FUNCTION_8_3((uint64_t)v4, a1);
  outlined release of ConnectionMetrics?(v4, outlined copy of ConnectionMetrics?);
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*SiriNetworkOspreyChannel.connectionMetrics.modify())()
{
  OUTLINED_FUNCTION_0_2();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t SiriNetworkOspreyChannel.connectionIdentifier.didset(uint64_t a1)
{
  void *v1;
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  _BYTE v18[1440];
  _BYTE v19[32];
  _BYTE v20[1440];
  _BYTE v21[1440];

  MEMORY[0x24BDAC7A8](a1);
  v2 = SiriNetworkOspreyChannel.connectionMetrics.modify();
  v4 = v3;
  outlined init with take of ConnectionSnapshotReport?(v3, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v20, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v21) != 1)
  {
    outlined init with take of ConnectionSnapshotReport?(v4 + 96, (uint64_t)&v17, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&v17, (uint64_t)v18, &demangling cache variable for type metadata for ConnectionPreparationReport?);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v18) != 1)
    {
      v5 = objc_msgSend(v1, sel_description);
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      *(_QWORD *)(v4 + 96) = v6;
      *(_QWORD *)(v4 + 104) = v8;
      swift_bridgeObjectRelease();
    }
  }
  ((void (*)(_BYTE *, _QWORD))v2)(v19, 0);
  v9 = SiriNetworkOspreyChannel.connectionMetrics.modify();
  v11 = (_QWORD *)v10;
  outlined init with take of ConnectionSnapshotReport?(v10, (uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)&v17, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v18) != 1 && v11[64])
  {
    v12 = objc_msgSend(v1, sel_description);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v11[57] = v13;
    v11[58] = v15;
    swift_bridgeObjectRelease();
  }
  return ((uint64_t (*)(_BYTE *, _QWORD))v9)(v19, 0);
}

uint64_t SiriNetworkOspreyChannel.connectionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier);
  *v3 = a1;
  v3[1] = a2;
  v4 = swift_bridgeObjectRelease();
  return SiriNetworkOspreyChannel.connectionIdentifier.didset(v4);
}

uint64_t SiriNetworkOspreyChannel.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;

  if (*(_QWORD *)(v0 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier + 8))
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier);
    v2 = *(void **)(v0 + OBJC_IVAR___SNOspreyChannel_connectionIdentifier + 8);
  }
  else
  {
    v2 = (void *)0x8000000246F773E0;
    v1 = 0xD000000000000012;
  }
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR___SNOspreyChannel_configuration + 8);
  if (v5)
    v6 = *(_QWORD *)(v0 + OBJC_IVAR___SNOspreyChannel_configuration);
  else
    v6 = 0;
  if (v5)
    v7 = *(void **)(v0 + OBJC_IVAR___SNOspreyChannel_configuration + 8);
  else
    v7 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0;
}

char *SiriNetworkOspreyChannel.__allocating_init(url:connectionConfiguration:)(uint64_t a1)
{
  objc_class *v1;
  uint64_t v2;
  objc_class *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD *);
  uint64_t v43;
  void *v44;
  char *v45;
  void (*v46)(uint64_t);
  _QWORD aBlock[6];
  _BYTE v49[520];
  _BYTE v50[520];
  _BYTE v51[360];
  _BYTE v52[712];
  _QWORD __src[180];
  _QWORD __dst[180];
  uint64_t v55;
  unint64_t v56;
  _BYTE v57[528];
  Swift::String v58;
  Swift::String v59;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v3 = v1;
  v5 = v4;
  v6 = v2;
  OUTLINED_FUNCTION_28(v57, v4);
  type metadata accessor for NSURLSessionConfiguration();
  OUTLINED_FUNCTION_28(&v55, v5);
  v7 = static NSURLSessionConfiguration.defaultSessionConfiguration(with:)((char *)&v55);
  v8 = objc_allocWithZone(v3);
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v12 = objc_msgSend(v8, sel_initWithURL_configuration_, v10, v7);

  v13 = (char *)v12;
  v14 = URL.host.getter();
  if (v15)
    v16 = v14;
  else
    v16 = 0;
  if (v15)
    v17 = v15;
  else
    v17 = 0xE000000000000000;
  v18 = URL.port.getter();
  if ((v19 & 1) != 0)
    v20 = 443;
  else
    v20 = v18;
  v55 = v16;
  v56 = v17;
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  __dst[0] = v20;
  v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_9_3(v58);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  v59._countAndFlagsBits = NSURLSessionConfiguration.rpcDescription.getter();
  OUTLINED_FUNCTION_9_3(v59);
  swift_bridgeObjectRelease();
  v23 = v56;
  v24 = &v13[OBJC_IVAR___SNOspreyChannel_configuration];
  *(_QWORD *)v24 = v55;
  *((_QWORD *)v24 + 1) = v23;
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v25 = OUTLINED_FUNCTION_5_1();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.siriNetwork);
  v26 = v7;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v55 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v29 = 136315138;
    v30 = NSURLSessionConfiguration.rpcDescription.getter();
    __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v27, v28, "Provider - SiriNetworkOspreyChannel: Channel init with configuration: %s", v29, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_28(v49, v57);
  destructiveProjectEnumData for ConnectionConfigurationError(v49);
  v32 = (uint64_t)&v13[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  OUTLINED_FUNCTION_10_3((uint64_t)&v13[OBJC_IVAR___SNOspreyChannel_connectionConfiguration], (uint64_t)v50);
  OUTLINED_FUNCTION_10_3((uint64_t)v49, v32);
  outlined release of ConnectionConfiguration?((uint64_t)v50);
  _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(v51);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v52);
  __src[0] = 0;
  v33 = MEMORY[0x24BEE4AF8];
  LOBYTE(__src[1]) = 1;
  *(_OWORD *)&__src[3] = 0u;
  __src[2] = MEMORY[0x24BEE4AF8];
  __src[5] = MEMORY[0x24BEE4AF8];
  LODWORD(__src[6]) = 0;
  BYTE4(__src[6]) = 1;
  memset(&__src[7], 0, 40);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v51, (uint64_t)&__src[12], &demangling cache variable for type metadata for ConnectionPreparationReport?);
  memset(&__src[57], 0, 112);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v52, (uint64_t)&__src[71], (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  __src[160] = v33;
  memset(&__src[161], 0, 40);
  LOBYTE(__src[166]) = 1;
  __src[167] = 0;
  LOBYTE(__src[168]) = 1;
  __src[169] = 0;
  LOBYTE(__src[170]) = 1;
  memset(&__src[171], 0, 20);
  BYTE4(__src[173]) = 1;
  __src[174] = 0;
  LOBYTE(__src[175]) = 1;
  __src[176] = 0;
  LOBYTE(__src[177]) = 1;
  __src[178] = 0;
  LOBYTE(__src[179]) = 1;
  memcpy(__dst, __src, 0x599uLL);
  destructiveProjectEnumData for ConnectionConfigurationError(__dst);
  v34 = (uint64_t)&v13[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_3(v34, (uint64_t)&v55);
  OUTLINED_FUNCTION_10_3((uint64_t)__dst, v34);
  outlined release of ConnectionMetrics?(&v55, outlined consume of ConnectionMetrics?);
  v35 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v36 = OUTLINED_FUNCTION_2_8();
  *(_QWORD *)(v36 + 16) = v35;
  *(_QWORD *)(v36 + 24) = v3;
  v37 = (uint64_t *)&v13[OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics];
  v38 = *(_QWORD *)&v13[OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics];
  *v37 = (uint64_t)partial apply for closure #1 in SiriNetworkOspreyChannel.init(url:connectionConfiguration:);
  v37[1] = v36;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v38);
  v39 = *v37;
  v40 = v37[1];
  if (*v37)
  {
    v41 = OUTLINED_FUNCTION_2_8();
    *(_QWORD *)(v41 + 16) = v39;
    *(_QWORD *)(v41 + 24) = v40;
    v42 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ();
  }
  else
  {
    v41 = 0;
    v42 = (uint64_t (*)(_QWORD *))destructiveProjectEnumData for ConnectionConfigurationError;
  }
  v43 = OUTLINED_FUNCTION_2_8();
  *(_QWORD *)(v43 + 16) = v42;
  *(_QWORD *)(v43 + 24) = v41;
  aBlock[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OspreyConnectionMetrics) -> (@out ());
  aBlock[5] = v43;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ();
  aBlock[3] = &block_descriptor_3;
  v44 = _Block_copy(aBlock);
  v45 = v13;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v39);
  swift_release();
  objc_msgSend(v45, sel_setConnectionMetricsHandler_, v44);
  _Block_release(v44);

  objc_msgSend(v45, sel_setUseCompression_, 0);
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_7_5();
  v46(v6);
  return v45;
}

void closure #1 in SiriNetworkOspreyChannel.init(url:connectionConfiguration:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t (*v34)();
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  uint64_t (*v63)();
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)();
  void *v87;
  uint64_t v88;
  _BYTE v89[1440];
  _BYTE __dst[1440];
  uint64_t __src[180];
  uint64_t v92;
  _BYTE v93[1440];
  _BYTE v94[1440];
  _BYTE v95[313];
  _BYTE v96[1440];
  _BYTE v97[568];
  uint64_t v98;
  _BYTE v99[1440];
  _QWORD v100[180];
  _QWORD v101[180];
  _QWORD v102[180];
  uint64_t v103;
  unint64_t v104;
  _OWORD v105[32];
  uint64_t v106;
  _BYTE v107[1440];
  _BYTE v108[1440];
  _BYTE v109[1440];
  _BYTE v110[96];
  uint64_t v111;
  _BYTE v112[1440];
  _BYTE v113[1464];
  __int128 v114;
  unsigned int v115;
  char v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t v119;
  unsigned __int8 v120;
  __int128 v121;
  unsigned __int8 v122;
  char v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE v127[336];

  v1 = (void *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x24956E090](v3);
  if (v4)
  {
    v5 = (char *)v4;
    v6 = OBJC_IVAR___SNOspreyChannel_lock;
    objc_msgSend(*(id *)(v4 + OBJC_IVAR___SNOspreyChannel_lock), sel_lock);
    SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v110);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v110, (uint64_t)v112, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v112, (uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    v7 = _s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v113);
    v8 = MEMORY[0x24BEE4AF8];
    if (v7 == 1
      || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v111, (uint64_t)v107, &demangling cache variable for type metadata for ConnectionPreparationReport?), outlined init with take of ConnectionSnapshotReport?((uint64_t)v110, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?), outlined release of ConnectionMetrics?(v109, outlined consume of ConnectionMetrics?), outlined init with take of ConnectionSnapshotReport?((uint64_t)v107, (uint64_t)v108, &demangling cache variable for type metadata for ConnectionPreparationReport?), _s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v108) == 1))
    {
      v9 = SiriNetworkOspreyChannel.connectionMetrics.modify();
      v11 = v10;
      outlined init with take of ConnectionSnapshotReport?(v10, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)v109, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v110) != 1)
      {
        _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(&v103);
        if (one-time initialization token for sharedNetworkAnalytics != -1)
          swift_once();
        v12 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
        v105[0] = 0uLL;
        v105[1] = xmmword_246F73330;
        LODWORD(v105[2]) = 0;
        BYTE4(v105[2]) = 0;
        outlined init with take of ConnectionSnapshotReport?((uint64_t)&v103, (uint64_t)&v105[2] + 8, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
        *(_QWORD *)&v105[21] = v8;
        *((_QWORD *)&v105[21] + 1) = v8;
        *(_QWORD *)&v105[22] = v12;
        memcpy(v107, v105, 0x168uLL);
        destructiveProjectEnumData for ConnectionConfigurationError(v107);
        v13 = v11 + 96;
        outlined init with take of ConnectionSnapshotReport?(v13, (uint64_t)v108, &demangling cache variable for type metadata for ConnectionPreparationReport?);
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v107, v13, &demangling cache variable for type metadata for ConnectionPreparationReport?);
        v14 = v12;
        outlined release of ConnectionPreparationReport?((uint64_t)v108);
      }
      ((void (*)(_QWORD *, _QWORD))v9)(v102, 0);
    }
    v15 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    v17 = v16;
    outlined init with take of ConnectionSnapshotReport?(v16, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v109, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v110) != 1)
    {
      outlined init with take of ConnectionSnapshotReport?(v17 + 96, (uint64_t)v107, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)v107, (uint64_t)v108, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v108) != 1)
      {
        v103 = 0;
        v104 = 0xE000000000000000;
        v102[0] = v5;
        lazy protocol witness table accessor for type SiriNetworkOspreyChannel and conformance NSObject();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v18 = v104;
        *(_QWORD *)(v17 + 96) = v103;
        *(_QWORD *)(v17 + 104) = v18;
        swift_bridgeObjectRelease();
      }
    }
    ((void (*)(_OWORD *, _QWORD))v15)(v105, 0);
    SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v105);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v105, (uint64_t)v107, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v107, (uint64_t)v108, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v108) == 1
      || (v19 = v106,
          outlined init with take of ConnectionSnapshotReport?((uint64_t)v105, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?), outlined release of ConnectionMetrics?(&v103, outlined consume of ConnectionMetrics?), !v19))
    {
      v20 = SiriNetworkOspreyChannel.connectionMetrics.modify();
      v22 = v21;
      outlined init with take of ConnectionSnapshotReport?(v21, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v105) == 1)
      {
        ((void (*)(_QWORD *, _QWORD))v20)(v102, 0);
      }
      else
      {
        v86 = v20;
        v87 = v1;
        v88 = v6;
        if (one-time initialization token for sharedNetworkAnalytics != -1)
          swift_once();
        v23 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
        v24 = *(_QWORD *)(v22 + 456);
        v25 = *(_QWORD *)(v22 + 464);
        v26 = *(_QWORD *)(v22 + 472);
        v27 = *(_QWORD *)(v22 + 480);
        v28 = *(_QWORD *)(v22 + 488);
        v84 = *(_QWORD *)(v22 + 504);
        v85 = *(_QWORD *)(v22 + 496);
        v83 = *(_QWORD *)(v22 + 512);
        v81 = *(_OWORD *)(v22 + 536);
        v82 = *(_OWORD *)(v22 + 520);
        v29 = *(_QWORD *)(v22 + 552);
        v30 = *(void **)(v22 + 560);
        *(_QWORD *)(v22 + 456) = 0;
        *(_QWORD *)(v22 + 464) = 0;
        *(_OWORD *)(v22 + 472) = xmmword_246F73340;
        *(_OWORD *)(v22 + 488) = xmmword_246F73350;
        *(_QWORD *)(v22 + 504) = 1;
        v31 = MEMORY[0x24BEE4AF8];
        *(_QWORD *)(v22 + 512) = MEMORY[0x24BEE4AF8];
        *(_QWORD *)(v22 + 520) = v31;
        *(_OWORD *)(v22 + 528) = 0u;
        *(_OWORD *)(v22 + 544) = 0u;
        *(_QWORD *)(v22 + 560) = v23;
        v32 = v23;
        v33 = v26;
        v8 = v31;
        outlined consume of ConnectionEstablishmentReport?(v24, v25, v33, v27, v28, v85, v84, v83, v82, *((uint64_t *)&v82 + 1), v81, *((uint64_t *)&v81 + 1), v29, v30);
        ((void (*)(_QWORD *, _QWORD))v86)(v102, 0);
        v1 = v87;
        v6 = v88;
      }
    }
    v34 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    v36 = (_QWORD *)v35;
    outlined init with take of ConnectionSnapshotReport?(v35, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)&v103, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v105) != 1 && v36[64])
    {
      v101[0] = 0;
      v101[1] = 0xE000000000000000;
      v100[0] = v5;
      lazy protocol witness table accessor for type SiriNetworkOspreyChannel and conformance NSObject();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v36[57] = 0;
      v36[58] = 0xE000000000000000;
      swift_bridgeObjectRelease();
    }
    ((void (*)(_QWORD *, _QWORD))v34)(v102, 0);
    v37 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    v39 = v38;
    outlined init with take of ConnectionSnapshotReport?(v38, (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v101, (uint64_t)v102, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v102) != 1)
    {
      v40 = v1;
      ConnectionEstablishmentReport.init(ospreyConnectionMetrics:)(v1, (uint64_t)&v114);
      v41 = v118;
      v42 = v117;
      v43 = v119;
      v44 = v120;
      v45 = v125;
      v46 = v126;
      v47 = 0x100000000;
      if (!v116)
        v47 = 0;
      v48 = v47 | v115;
      v49 = 256;
      if (!v123)
        v49 = 0;
      v50 = v49 | v122;
      v51 = *(_QWORD *)(v39 + 456);
      v52 = *(_QWORD *)(v39 + 464);
      v53 = *(_QWORD *)(v39 + 472);
      v54 = *(_QWORD *)(v39 + 480);
      v55 = *(_QWORD *)(v39 + 488);
      v56 = *(_QWORD *)(v39 + 496);
      v57 = *(_QWORD *)(v39 + 504);
      v58 = *(_QWORD *)(v39 + 512);
      v59 = *(_OWORD *)(v39 + 520);
      v60 = *(_OWORD *)(v39 + 536);
      v61 = *(_QWORD *)(v39 + 552);
      v62 = *(void **)(v39 + 560);
      *(_OWORD *)(v39 + 456) = v114;
      *(_QWORD *)(v39 + 472) = v48;
      *(_QWORD *)(v39 + 480) = v42;
      *(_QWORD *)(v39 + 488) = v41;
      *(_QWORD *)(v39 + 496) = v43;
      *(_QWORD *)(v39 + 504) = v44;
      *(_OWORD *)(v39 + 512) = v121;
      *(_QWORD *)(v39 + 528) = v50;
      *(_OWORD *)(v39 + 536) = v124;
      *(_QWORD *)(v39 + 552) = v45;
      *(_QWORD *)(v39 + 560) = v46;
      outlined consume of ConnectionEstablishmentReport?(v51, v52, v53, v54, v55, v56, v57, v58, v59, *((uint64_t *)&v59 + 1), v60, *((uint64_t *)&v60 + 1), v61, v62);
    }
    ((void (*)(_QWORD *, _QWORD))v37)(v100, 0);
    SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v97);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v97, (uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v99, (uint64_t)v100, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v100) == 1
      || (outlined init with take of ConnectionSnapshotReport?((uint64_t)&v98, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), outlined init with take of ConnectionSnapshotReport?((uint64_t)v97, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?), outlined release of ConnectionMetrics?(v96, outlined consume of ConnectionMetrics?), outlined init with take of ConnectionSnapshotReport?((uint64_t)v93, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v94) == 1))
    {
      v63 = SiriNetworkOspreyChannel.connectionMetrics.modify();
      v65 = v64;
      outlined init with take of ConnectionSnapshotReport?(v64, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)v96, (uint64_t)v97, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v97) != 1)
      {
        _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(__dst);
        _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v89);
        if (one-time initialization token for sharedNetworkAnalytics != -1)
          swift_once();
        v66 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
        LODWORD(__src[0]) = 0;
        __src[1] = 0;
        __src[2] = 0xE000000000000000;
        __src[3] = 0;
        __src[4] = 0xE000000000000000;
        outlined init with take of ConnectionSnapshotReport?((uint64_t)__dst, (uint64_t)&__src[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        __src[46] = 0;
        __src[45] = 0;
        LOBYTE(__src[47]) = 1;
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v89, (uint64_t)&__src[48], (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
        __src[85] = v8;
        __src[86] = v8;
        LODWORD(__src[87]) = 4;
        __src[88] = (uint64_t)v66;
        memcpy(v93, __src, 0x2C8uLL);
        destructiveProjectEnumData for ConnectionConfigurationError(v93);
        outlined init with take of ConnectionSnapshotReport?(v65 + 568, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v93, v65 + 568, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        v67 = v66;
        outlined release of ConnectionSnapshotReport?((uint64_t)v94);
      }
      ((void (*)(_BYTE *, _QWORD))v63)(v127, 0);
    }
    ConnectionNetworkReport.init(ospreyConnectionMetrics:)(v1, (uint64_t)v127);
    memcpy(v95, v127, sizeof(v95));
    v68 = SiriNetworkOspreyChannel.connectionMetrics.modify();
    v70 = v69;
    outlined init with take of ConnectionSnapshotReport?(v69, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v96, (uint64_t)v97, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v97) == 1
      || (outlined init with take of ConnectionSnapshotReport?(v70 + 568, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), outlined init with take of ConnectionSnapshotReport?((uint64_t)v93, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v94) == 1))
    {
      outlined release of ConnectionNetworkReport((uint64_t)v127);
    }
    else
    {
      memcpy(__dst, v95, 0x139uLL);
      destructiveProjectEnumData for ConnectionConfigurationError(__dst);
      v71 = v70 + 608;
      outlined init with take of ConnectionSnapshotReport?(v71, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)__dst, v71, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      outlined release of ConnectionNetworkReport?(__src);
    }
    ((void (*)(_BYTE *, _QWORD))v68)(v89, 0);
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Logger.siriNetwork);
    v73 = v5;
    v74 = Logger.logObject.getter();
    v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      v77 = swift_slowAlloc();
      v92 = v77;
      *(_DWORD *)v76 = 136315138;
      SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)__src);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)__src, (uint64_t)v93, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      outlined init with take of ConnectionSnapshotReport?((uint64_t)v93, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v94) == 1)
      {
        v78 = 0xE100000000000000;
        v79 = 45;
      }
      else
      {
        outlined init with take of ConnectionSnapshotReport?((uint64_t)v93, (uint64_t)__dst, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
        memcpy(v89, __dst, 0x599uLL);
        v79 = String.init<A>(describing:)();
        v78 = v80;
      }
      __src[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v78, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v74, v75, "Provider - SiriNetworkOspreyChannel: Channel metrics generated. %s", v76, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v77, -1, -1);
      MEMORY[0x24956E018](v76, -1, -1);

    }
    else
    {

    }
    objc_msgSend(*(id *)&v5[v6], sel_unlock);

  }
}

void SiriNetworkOspreyChannel.send(_:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  os_log_t oslog;

  v1 = *(void **)(v0 + OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext);
  if (v1)
  {
    swift_unknownObjectRetain();
    oslog = (os_log_t)Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, sel_writeFrame_);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    oslog = (os_log_t)Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_246EC7000, oslog, v3, "Provider - SiriNetworkOspreyChannel: Channel streaming context is nil.", v4, 2u);
      OUTLINED_FUNCTION_0_4();
    }
  }
  OUTLINED_FUNCTION_0_12(oslog);
}

id SiriNetworkOspreyChannel.bidirectionalStreamingRequest(withMethodName:requestBuilder:streamingResponseHandler:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v9;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  char aBlock;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v9 = v8;
  v27 = a5;
  v29 = a7;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_5_1();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriNetwork);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_246EC7000, v16, v17, "Provider - SiriNetworkOspreyChannel: Bidirectional streaming created.", v18, 2u);
    OUTLINED_FUNCTION_0_4();
  }

  v19 = (void *)MEMORY[0x24956D034](a1, a2);
  aBlock = MEMORY[0x24BDAC760];
  if (a3)
  {
    v34 = a3;
    v35 = a4;
    v21 = OUTLINED_FUNCTION_3_7((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> (), v27, v29, (uint64_t)v31.receiver, (uint64_t)v31.super_class, MEMORY[0x24BDAC760], 1107296256, v32, v33);
    swift_retain();
    swift_release();
  }
  else
  {
    v21 = 0;
  }
  v22 = OUTLINED_FUNCTION_3_7((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Data) -> (), v27, v29, (uint64_t)v31.receiver, (uint64_t)v31.super_class, aBlock, 1107296256, v32, v33);
  swift_retain();
  swift_release();
  v34 = v30;
  v35 = a8;
  v23 = OUTLINED_FUNCTION_3_7((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> (), v28, v30, (uint64_t)v31.receiver, (uint64_t)v31.super_class, aBlock, 1107296256, v32, v33);
  swift_retain();
  swift_release();
  v31.receiver = v9;
  v31.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  v24 = objc_msgSendSuper2(&v31, sel_bidirectionalStreamingRequestWithMethodName_requestBuilder_streamingResponseHandler_completion_, v19, v21, v22, v23);
  _Block_release(v23);
  _Block_release(v22);
  _Block_release(v21);

  v25 = swift_unknownObjectRetain();
  SiriNetworkOspreyChannel.ospreyClientStreamingContext.setter(v25);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a3);
  SiriNetworkOspreyChannel.ospreyRequestBuilder.setter(a3, a4);
  return v24;
}

void thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ()()
{
  void *v0;
  void (*v1)(void);
  id v2;

  OUTLINED_FUNCTION_6_2();
  v2 = v0;
  v1();
  swift_release();
  OUTLINED_FUNCTION_0_12(v2);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(uint64_t, unint64_t);
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(void (**)(uint64_t, unint64_t))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v3(v5, v7);
  outlined consume of Data._Representation(v5, v7);
  return swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()()
{
  void *v0;
  void (*v1)(void *);
  id v2;

  OUTLINED_FUNCTION_6_2();
  v2 = v0;
  v1(v0);
  swift_release();
  OUTLINED_FUNCTION_0_12(v2);
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSData) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

void SiriNetworkOspreyChannel.getMetrics()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[1440];
  _BYTE v5[1448];

  v3 = OBJC_IVAR___SNOspreyChannel_lock;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR___SNOspreyChannel_lock), sel_lock);
  SiriNetworkOspreyChannel.connectionMetrics.getter((uint64_t)v4);
  OUTLINED_FUNCTION_8_3((uint64_t)v4, (uint64_t)v5);
  OUTLINED_FUNCTION_8_3((uint64_t)v5, a1);
  objc_msgSend(*(id *)(v1 + v3), sel_unlock);
  OUTLINED_FUNCTION_23_1();
}

id SiriNetworkOspreyChannel.init(url:configuration:)(uint64_t a1, void *a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  void (*v17)(uint64_t);
  objc_super v19;
  char v20[520];
  char v21[1440];

  v6 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  OUTLINED_FUNCTION_19_2(a1, (uint64_t)a2, a3);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v20, v6, &demangling cache variable for type metadata for ConnectionConfiguration?);
  *(_QWORD *)&v3[OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext] = 0;
  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics);
  v7 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  OUTLINED_FUNCTION_16_4();
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v21, v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  v8 = OBJC_IVAR___SNOspreyChannel_lock;
  v9 = objc_allocWithZone(MEMORY[0x24BDD1648]);
  v10 = v3;
  *(_QWORD *)&v3[v8] = objc_msgSend(v9, sel_init);
  v11 = &v10[OBJC_IVAR___SNOspreyChannel_connectionIdentifier];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = &v10[OBJC_IVAR___SNOspreyChannel_configuration];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;

  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  v19.receiver = v10;
  v19.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  v16 = objc_msgSendSuper2(&v19, sel_initWithURL_configuration_, v15, a2);

  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_7_5();
  v17(a1);
  return v16;
}

id SiriNetworkOspreyChannel.init(url:configuration:useCache:)(uint64_t a1, void *a2, uint64_t a3)
{
  char *v3;
  char v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  char *v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  void (*v18)(uint64_t);
  objc_super v20;
  char v21[520];
  char v22[1440];

  v4 = a3;
  v7 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  OUTLINED_FUNCTION_19_2(a1, (uint64_t)a2, a3);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v21, v7, &demangling cache variable for type metadata for ConnectionConfiguration?);
  *(_QWORD *)&v3[OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext] = 0;
  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics);
  v8 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  OUTLINED_FUNCTION_16_4();
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v22, v8, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  v9 = OBJC_IVAR___SNOspreyChannel_lock;
  v10 = objc_allocWithZone(MEMORY[0x24BDD1648]);
  v11 = v3;
  *(_QWORD *)&v3[v9] = objc_msgSend(v10, sel_init);
  v12 = &v11[OBJC_IVAR___SNOspreyChannel_connectionIdentifier];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v11[OBJC_IVAR___SNOspreyChannel_configuration];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;

  URL._bridgeToObjectiveC()(v14);
  v16 = v15;
  v20.receiver = v11;
  v20.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  v17 = objc_msgSendSuper2(&v20, sel_initWithURL_configuration_useCache_, v16, a2, v4 & 1);

  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_7_5();
  v18(a1);
  return v17;
}

id SiriNetworkOspreyChannel.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  char *v10;
  objc_super v12;
  char v13[520];
  char v14[1440];

  v4 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionConfiguration];
  OUTLINED_FUNCTION_19_2(a1, a2, a3);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v13, v4, &demangling cache variable for type metadata for ConnectionConfiguration?);
  *(_QWORD *)&v3[OBJC_IVAR___SNOspreyChannel_ospreyClientStreamingContext] = 0;
  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNOspreyChannel_ospreyRequestBuilder);
  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNOspreyChannel_ospreyConnectionMetrics);
  v5 = (uint64_t)&v3[OBJC_IVAR___SNOspreyChannel_connectionMetrics];
  OUTLINED_FUNCTION_16_4();
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v14, v5, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  v6 = OBJC_IVAR___SNOspreyChannel_lock;
  v7 = objc_allocWithZone(MEMORY[0x24BDD1648]);
  v8 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v7, sel_init);
  v9 = &v8[OBJC_IVAR___SNOspreyChannel_connectionIdentifier];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = &v8[OBJC_IVAR___SNOspreyChannel_configuration];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;

  v12.receiver = v8;
  v12.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  return objc_msgSendSuper2(&v12, sel_init);
}

id SiriNetworkOspreyChannel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriNetworkOspreyChannel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SiriNetworkOspreyChannel()
{
  return objc_opt_self();
}

uint64_t protocol witness for RPCOspreyConnectionProtocol.connectionIdentifier.setter in conformance SiriNetworkOspreyChannel(uint64_t a1, uint64_t a2)
{
  return SiriNetworkOspreyChannel.connectionIdentifier.setter(a1, a2);
}

unint64_t type metadata accessor for NSURLSessionConfiguration()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSURLSessionConfiguration;
  if (!lazy cache variable for type metadata for NSURLSessionConfiguration)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSURLSessionConfiguration);
  }
  return result;
}

uint64_t outlined release of ConnectionConfiguration?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v13 = *(_OWORD *)(a1 + 400);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v9 = *(_OWORD *)(a1 + 336);
  v10 = *(_OWORD *)(a1 + 352);
  v7 = *(_OWORD *)(a1 + 304);
  v8 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  outlined consume of ConnectionConfiguration?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(void **)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1));
  return a1;
}

uint64_t outlined consume of ConnectionConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConnectionPolicy?(a41, a42, a43, a44, a45, a46, a47, a48, a49, a50);
    return outlined consume of ConnectionPolicyRoute?(a51, a52);
  }
  return result;
}

uint64_t sub_246EE4F10()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_246EE4F34()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SiriNetworkOspreyChannel.init(url:connectionConfiguration:)(uint64_t a1)
{
  closure #1 in SiriNetworkOspreyChannel.init(url:connectionConfiguration:)(a1);
}

uint64_t sub_246EE4F60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OspreyConnectionMetrics) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed OspreyConnectionMetrics) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

unint64_t lazy protocol witness table accessor for type SiriNetworkOspreyChannel and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SiriNetworkOspreyChannel and conformance NSObject;
  if (!lazy protocol witness table cache variable for type SiriNetworkOspreyChannel and conformance NSObject)
  {
    v1 = type metadata accessor for SiriNetworkOspreyChannel();
    result = MEMORY[0x24956DF70](MEMORY[0x24BDD0240], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriNetworkOspreyChannel and conformance NSObject);
  }
  return result;
}

uint64_t *outlined release of ConnectionNetworkReport?(uint64_t *a1)
{
  outlined consume of ConnectionNetworkReport?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13]);
  return a1;
}

uint64_t outlined release of ConnectionNetworkReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of ConnectionPreparationReport?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = *(_OWORD *)(a1 + 320);
  v9 = *(_OWORD *)(a1 + 336);
  v6 = *(_OWORD *)(a1 + 288);
  v7 = *(_OWORD *)(a1 + 304);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined consume of ConnectionPreparationReport?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    *(void **)(a1 + 352));
  return a1;
}

#error "246EE55E0: call analysis failed (funcsize=269)"

uint64_t outlined copy of ConnectionMetrics?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  void *a71;
  uint64_t a72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  if (a3)
  {
    v124 = STACK[0xB48];
    v123 = STACK[0xB40];
    v122 = STACK[0xB38];
    v121 = STACK[0xB30];
    v120 = STACK[0xB28];
    v119 = STACK[0xB20];
    v118 = STACK[0xB18];
    v117 = STACK[0xB10];
    v116 = STACK[0xB08];
    v115 = STACK[0xB00];
    v114 = STACK[0xAF8];
    v113 = STACK[0xAF0];
    v112 = STACK[0xAE8];
    v111 = STACK[0xAE0];
    v110 = STACK[0xAD8];
    v109 = STACK[0xAD0];
    v108 = STACK[0xAC8];
    v107 = STACK[0xAC0];
    v106 = STACK[0xAB8];
    v105 = STACK[0xAB0];
    v104 = STACK[0xAA8];
    v103 = STACK[0xAA0];
    v102 = STACK[0xA98];
    v101 = STACK[0xA90];
    v100 = STACK[0xA88];
    v99 = STACK[0xA80];
    v98 = STACK[0xA78];
    v97 = STACK[0xA70];
    v96 = STACK[0xA68];
    v95 = STACK[0xA60];
    v94 = STACK[0xA58];
    v93 = STACK[0xA50];
    v92 = STACK[0xA48];
    v91 = STACK[0xA40];
    v90 = STACK[0xA38];
    v89 = STACK[0xA30];
    v88 = STACK[0xA28];
    v87 = STACK[0xA20];
    v86 = STACK[0xA18];
    v85 = STACK[0xA10];
    v84 = STACK[0xA08];
    v83 = STACK[0xA00];
    v82 = STACK[0x9F8];
    v81 = STACK[0x9F0];
    v80 = STACK[0x9E8];
    v79 = STACK[0x9E0];
    v78 = STACK[0x9D8];
    v126 = STACK[0x9C8];
    v127 = STACK[0x9D0];
    v125 = STACK[0x9C0];
    v77 = STACK[0x9B8];
    v76 = STACK[0x9B0];
    v75 = STACK[0x9A8];
    v74 = STACK[0x9A0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ConnectionHTTPHeaderReport?(a8, a9, a10, a11, a12);
    outlined copy of ConnectionPreparationReport?(a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47,
      a48,
      a49,
      a50,
      a51,
      a52,
      a53,
      a54,
      a55,
      a56,
      a57);
    outlined copy of ConnectionEstablishmentReport?(a58, a59, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a70, a71);
    outlined copy of ConnectionSnapshotReport?(a72, v74, v75, v76, v77, v125, v126, v127, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98,
      v99,
      v100,
      v101,
      v102,
      v103,
      v104,
      v105,
      v106,
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117,
      v118,
      v119,
      v120,
      v121,
      v122,
      v123,
      v124);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void _s11SiriNetwork23ConnectionConfigurationVSgWOi0_(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
  bzero(a1 + 4, 0x1E4uLL);
}

void _s11SiriNetwork17ConnectionMetricsVSgWOi0_(void *a1)
{
  bzero(a1, 0x599uLL);
}

uint64_t sub_246EE5ED0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSData) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSData) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

void OUTLINED_FUNCTION_0_12(id a1)
{

}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return swift_allocObject();
}

void *OUTLINED_FUNCTION_3_7@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char aBlock, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  a8 = a1;
  a9 = v9;
  return _Block_copy(&aBlock);
}

void OUTLINED_FUNCTION_4_8(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 + a1);
  *v2 = 0;
  v2[1] = 0;
}

uint64_t OUTLINED_FUNCTION_6_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_8_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

void OUTLINED_FUNCTION_9_3(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_10_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return type metadata accessor for URL();
}

void OUTLINED_FUNCTION_16_4()
{
  _s11SiriNetwork17ConnectionMetricsVSgWOi0_(&STACK[0x220]);
}

uint64_t OUTLINED_FUNCTION_18_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(*(_QWORD *)(v1 + a1));
}

void OUTLINED_FUNCTION_19_2(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _s11SiriNetwork23ConnectionConfigurationVSgWOi0_((uint64_t *)va);
}

uint64_t getEnumTagSinglePayload for ConnectionMethod(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_246EE6094 + 4 * byte_246F733B5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_246EE60C8 + 4 * byte_246F733B0[v4]))();
}

uint64_t sub_246EE60C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246EE60D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246EE60D8);
  return result;
}

uint64_t sub_246EE60E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246EE60ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_246EE60F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246EE60F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for ConnectionMethod(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionMethod()
{
  return &type metadata for ConnectionMethod;
}

void ConnectionMethod.nextConnectionMethodSupported(connectionConfiguration:)(uint64_t a1, Swift::Int a2)
{
  char v2;
  char v3;
  uint64_t v4;

  v4 = MEMORY[0x24BEE4B08];
  v2 = a2;
  specialized Set._Variant.insert(_:)(&v3, a2);
  __asm { BR              X9 }
}

uint64_t sub_246EE6194()
{
  char v0;
  char v1;
  char v2;
  char v3;
  uint64_t v5;

  if ((v0 & 1) == 0)
  {
    specialized Set.contains(_:)(2u, v5);
    if ((v1 & 1) == 0)
      JUMPOUT(0x246EE6168);
  }
  specialized Set.contains(_:)(2u, v5);
  v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
    return 0;
  else
    return 2;
}

uint64_t ConnectionMethod.providerClass(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)();
  unint64_t *v3;
  void *v4;
  uint64_t result;

  if (a1 == 2)
  {
    v1 = type metadata accessor for RPCOspreyConnectionProvider();
    v2 = type metadata accessor for RPCOspreyConnectionProvider;
    v3 = &lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider;
    v4 = &protocol conformance descriptor for RPCOspreyConnectionProvider;
LABEL_5:
    lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(v3, (uint64_t (*)(uint64_t))v2, (uint64_t)v4);
    return v1;
  }
  if (a1 == 1)
  {
    v1 = type metadata accessor for NetworkConnectionProvider();
    v2 = type metadata accessor for NetworkConnectionProvider;
    v3 = &lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider;
    v4 = &protocol conformance descriptor for NetworkConnectionProvider;
    goto LABEL_5;
  }
  result = OUTLINED_FUNCTION_0_13();
  __break(1u);
  return result;
}

uint64_t ConnectionMethod.communicationProtocolClass(for:)(uint64_t a1)
{
  uint64_t result;

  if (a1 == 2)
    return type metadata accessor for CommunicationProtocolProtobuf();
  if (a1 == 1)
    return type metadata accessor for CommunicationProtocolAce();
  result = OUTLINED_FUNCTION_0_13();
  __break(1u);
  return result;
}

void ConnectionMethod.connectionMethodDescription(connectionConfiguration:isMPTCP:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

unint64_t sub_246EE6354(uint64_t a1)
{
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(unsigned __int8 *)(a1 + 513);
  if (*(_QWORD *)(a1 + 408) != 1 && (_DWORD)v5 != 5)
    __asm { BR              X11 }
  if (v4)
    v7 = v3;
  else
    v7 = 0;
  v8 = 0x706374706DLL;
  if ((v2 & 1) == 0)
    v8 = v1;
  v9 = 0xD000000000000010;
  if ((v2 & 1) != 0)
    v9 = 0xD000000000000012;
  if (v7 == 1)
    return v9;
  else
    return v8;
}

SiriNetwork::ConnectionMethod_optional __swiftcall ConnectionMethod.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 4)
    LOBYTE(rawValue) = 4;
  return (SiriNetwork::ConnectionMethod_optional)rawValue;
}

void *static ConnectionMethod.allCases.getter()
{
  return &outlined read-only object #0 of static ConnectionMethod.allCases.getter;
}

uint64_t ConnectionMethod.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionMethod(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ConnectionMethod()
{
  unsigned __int8 *v0;

  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConnectionMethod(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionMethod(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ConnectionMethod(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ConnectionMethod.allCases.getter;
}

SiriNetwork::ConnectionMethod_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionMethod@<W0>(Swift::Int *a1@<X0>, SiriNetwork::ConnectionMethod_optional *a2@<X8>)
{
  SiriNetwork::ConnectionMethod_optional result;

  result.value = ConnectionMethod.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionMethod@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = ConnectionMethod.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [ConnectionMethod] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ConnectionMethod] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ConnectionMethod] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ConnectionMethod]);
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ConnectionMethod] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConnectionMethod and conformance ConnectionMethod()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionMethod and conformance ConnectionMethod;
  if (!lazy protocol witness table cache variable for type ConnectionMethod and conformance ConnectionMethod)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionMethod, &type metadata for ConnectionMethod);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionMethod and conformance ConnectionMethod);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24956DF70](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_13()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t dispatch thunk of ConnectionActivity.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Activity.parent.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Activity.isRetry.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Activity.isActivated.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Activity.init(domain:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of Activity.complete(reason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t type metadata completion function for NetworkActivity()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t NWActivity.parent.setter(uint64_t a1)
{
  _BYTE v3[24];
  uint64_t v4;

  outlined init with copy of Activity?(a1, (uint64_t)v3);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Activity);
    swift_dynamicCast();
  }
  else
  {
    outlined destroy of Activity?((uint64_t)v3);
  }
  NWActivity.parentActivity.setter();
  return outlined destroy of Activity?(a1);
}

uint64_t NetworkActivity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NetworkActivity.__deallocating_deinit()
{
  NetworkActivity.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for NetworkActivity()
{
  JUMPOUT(0x24956DF1CLL);
}

uint64_t storeEnumTagSinglePayload for NetworkActivityTracingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_246EE68A0 + 4 * byte_246F734D5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_246EE68D4 + 4 * byte_246F734D0[v4]))();
}

uint64_t sub_246EE68D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246EE68DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246EE68E4);
  return result;
}

uint64_t sub_246EE68F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246EE68F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_246EE68FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246EE6904(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkActivityTracingState()
{
  return &type metadata for NetworkActivityTracingState;
}

unint64_t lazy protocol witness table accessor for type NetworkActivityTracingState and conformance NetworkActivityTracingState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkActivityTracingState and conformance NetworkActivityTracingState;
  if (!lazy protocol witness table cache variable for type NetworkActivityTracingState and conformance NetworkActivityTracingState)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkActivityTracingState, &type metadata for NetworkActivityTracingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityTracingState and conformance NetworkActivityTracingState);
  }
  return result;
}

uint64_t outlined init with copy of Activity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Activity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Activity?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Activity?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

Swift::Bool __swiftcall Error.sn_isNetworkUnreachable()()
{
  void *v0;
  uint64_t v1;
  Swift::Bool result;

  Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkUnreachable);
  return result;
}

Swift::Bool __swiftcall Error.sn_isNetworkUnreachableForServerCause()()
{
  void *v0;
  uint64_t v1;
  Swift::Bool result;

  Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkUnreachableForServerCause);
  return result;
}

Swift::Bool __swiftcall Error.sn_isNetworkDown()()
{
  void *v0;
  uint64_t v1;
  Swift::Bool result;

  Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkDown);
  return result;
}

Swift::Bool __swiftcall Error.sn_isNetworkConnectionRetryable()()
{
  void *v0;
  uint64_t v1;
  Swift::Bool result;

  Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkConnectionRetryable);
  return result;
}

Swift::Bool __swiftcall Error.sn_isNetworkConnectionRetryableNow()()
{
  void *v0;
  uint64_t v1;
  Swift::Bool result;

  Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkConnectionRetryableNow);
  return result;
}

Swift::Bool __swiftcall Error.sn_isNetworkConnectionRetryableAfterDelay()()
{
  void *v0;
  uint64_t v1;
  Swift::Bool result;

  Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkConnectionRetryableAfterDelay);
  return result;
}

Swift::Bool __swiftcall Error.sn_isNetworkOperationRetryable()()
{
  void *v0;
  uint64_t v1;
  Swift::Bool result;

  Error.sn_isNetworkUnreachable()(v0, v1, (SEL *)&selRef_sn_isNetworkOperationRetryable);
  return result;
}

void Error.sn_isNetworkUnreachable()(void *a1, uint64_t a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_0_15(v5, v8);
  if (OUTLINED_FUNCTION_5_8())
  {
    OUTLINED_FUNCTION_2_9();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_3_8();
    OUTLINED_FUNCTION_1_8(v6, v7);
  }
  _convertErrorToNSError(_:)();
  OUTLINED_FUNCTION_6_3();
  objc_msgSend(a1, *a3);

  OUTLINED_FUNCTION_17_0();
}

Swift::Bool __swiftcall Error.isFallbackConnectionMethodRetryable(for:)(SiriNetwork::ConnectionMethod a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool result;
  uint64_t v8;

  v2 = v1;
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_0_15(v4, v8);
  if (OUTLINED_FUNCTION_5_8())
  {
    OUTLINED_FUNCTION_2_9();
  }
  else
  {
    v5 = OUTLINED_FUNCTION_3_8();
    OUTLINED_FUNCTION_1_8(v5, v6);
  }
  _convertErrorToNSError(_:)();
  OUTLINED_FUNCTION_6_3();
  NSError.isFallbackConnectionMethodRetryable(for:)(a1);

  OUTLINED_FUNCTION_17_0();
  return result;
}

uint64_t OUTLINED_FUNCTION_0_15@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&a2 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
}

uint64_t OUTLINED_FUNCTION_1_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a2, v3, v2);
}

uint64_t OUTLINED_FUNCTION_2_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

void OUTLINED_FUNCTION_6_3()
{
  void *v0;

}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = OUTLINED_FUNCTION_50_0(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(unsigned __int8 a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0))
    return swift_retain();
  else
    return 0;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = OUTLINED_FUNCTION_50_0(a1, a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
  else
    return 0;
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = OUTLINED_FUNCTION_50_0(a1, a2), (v5 & 1) != 0))
    return *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v4);
  else
    return 2;
}

Swift::Bool __swiftcall NSError.isFallbackConnectionMethodRetryable(for:)(SiriNetwork::ConnectionMethod a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::Bool v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v15;
  id v16;
  void *v17;
  id v19;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Swift::Bool v26;
  _QWORD v27[2];
  __int128 v28;
  uint64_t v29;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NWError();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_41_1();
  *(_QWORD *)&v28 = v1;
  OUTLINED_FUNCTION_29_1();
  v9 = v1;
  if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
  {
    v10 = 1;
    OUTLINED_FUNCTION_31_0((uint64_t)v6, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v2, v6, v7);
    v1 = (void *)NWError.isFallbackConnectionMethodRetryable(for:)(a1);
    v11 = OUTLINED_FUNCTION_48_0(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    if ((v1 & 1) != 0)
      return v10;
  }
  else
  {
    OUTLINED_FUNCTION_31_0((uint64_t)v6, 1);
    v11 = outlined destroy of NWError?((uint64_t)v6, &demangling cache variable for type metadata for NWError?);
  }
  v12 = OUTLINED_FUNCTION_44_0(v11, sel_domain);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_52();
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v1 == v13)
    goto LABEL_16;
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_45();
  v15 = swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    goto LABEL_17;
  v16 = OUTLINED_FUNCTION_44_0(v15, sel_domain);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_52();
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v1 == v17)
  {
LABEL_16:
    v15 = OUTLINED_FUNCTION_8_4();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_28_1();
  OUTLINED_FUNCTION_45();
  v15 = swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_23:
    v21 = OUTLINED_FUNCTION_44_0(v15, sel_userInfo);
    v22 = OUTLINED_FUNCTION_25_2();

    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary.subscript.getter(v23, v24, v22, &v28);
    OUTLINED_FUNCTION_6_1();
    OUTLINED_FUNCTION_6_4();
    if (!v29)
    {
      outlined destroy of NWError?((uint64_t)&v28, &demangling cache variable for type metadata for Any?);
      return 0;
    }
    if ((OUTLINED_FUNCTION_11_4() & 1) == 0)
      return 0;
    v25 = (void *)v27[1];
    v26 = NSError.isFallbackConnectionMethodRetryable(for:)(a1);

    return v26;
  }
LABEL_17:
  v19 = OUTLINED_FUNCTION_44_0(v15, sel_code);
  if (v19 != (id)(int)POSIXErrorCode.rawValue.getter() && v19 != (id)(int)POSIXErrorCode.rawValue.getter())
  {
    v15 = OUTLINED_FUNCTION_49_0();
    if (v19 == (id)(int)v15)
      return a1 == SiriNetwork_ConnectionMethod_peer;
    goto LABEL_23;
  }
  return 1;
}

Swift::Bool __swiftcall NSError.sn_isNetworkUnreachable()()
{
  id isNetwork;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v12;
  id v13;
  id v14;
  id v16;
  id v17;
  uint64_t v19;
  id v21;
  id v22;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v28;
  id v29;
  id v30;
  unint64_t v32;
  Swift::Bool result;
  id v34;
  id v35;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NWError();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_41_1();
  *(_QWORD *)&v50 = isNetwork;
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_43_0();
  if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
  {
    v1 = 1;
    OUTLINED_FUNCTION_31_0((uint64_t)v5, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v2, v5, v6);
    isNetwork = (id)NWError.sn_isNetworkUnreachable()();
    v8 = OUTLINED_FUNCTION_48_0(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    if ((isNetwork & 1) != 0)
      goto LABEL_51;
  }
  else
  {
    OUTLINED_FUNCTION_31_0((uint64_t)v5, 1);
    v8 = outlined destroy of NWError?((uint64_t)v5, &demangling cache variable for type metadata for NWError?);
  }
  v9 = OUTLINED_FUNCTION_11_0(v8, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_5_9();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v10)
  {
LABEL_16:
    v12 = OUTLINED_FUNCTION_8_4();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_0_16();
  OUTLINED_FUNCTION_2_10();
  v12 = OUTLINED_FUNCTION_6_4();
  if ((v1 & 1) == 0)
  {
    v13 = OUTLINED_FUNCTION_11_0(v12, sel_domain);
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_5_9();
    if (v1 != static String._unconditionallyBridgeFromObjectiveC(_:)() || isNetwork != v14)
    {
      OUTLINED_FUNCTION_0_16();
      OUTLINED_FUNCTION_2_10();
      v12 = OUTLINED_FUNCTION_6_4();
      if ((v1 & 1) == 0)
        goto LABEL_20;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:
  isNetwork = OUTLINED_FUNCTION_11_0(v12, sel_code);
  if (isNetwork == (id)(int)POSIXErrorCode.rawValue.getter())
    goto LABEL_51;
  if (isNetwork == (id)(int)POSIXErrorCode.rawValue.getter())
    goto LABEL_51;
  v12 = OUTLINED_FUNCTION_51_0();
  if (isNetwork == (id)(int)v12)
    goto LABEL_51;
LABEL_20:
  v16 = OUTLINED_FUNCTION_11_0(v12, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_5_9();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v17)
  {
    v19 = OUTLINED_FUNCTION_8_4();
  }
  else
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_2_10();
    v19 = OUTLINED_FUNCTION_6_4();
    if ((v1 & 1) == 0)
      goto LABEL_31;
  }
  v19 = (uint64_t)OUTLINED_FUNCTION_11_0(v19, sel_code);
  if (v19 == -65554 || v19 == -65537)
    goto LABEL_51;
LABEL_31:
  v21 = OUTLINED_FUNCTION_11_0(v19, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_5_9();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v22)
  {
    v24 = OUTLINED_FUNCTION_8_4();
  }
  else
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_2_10();
    v24 = OUTLINED_FUNCTION_6_4();
    if ((v1 & 1) == 0)
      goto LABEL_39;
  }
  v24 = (uint64_t)OUTLINED_FUNCTION_11_0(v24, sel_code);
  if ((unint64_t)(v24 - 1) < 2)
    goto LABEL_51;
LABEL_39:
  v25 = OUTLINED_FUNCTION_11_0(v24, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_5_9();
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v26)
  {
    OUTLINED_FUNCTION_8_4();
    goto LABEL_51;
  }
  OUTLINED_FUNCTION_0_16();
  OUTLINED_FUNCTION_2_10();
  v28 = OUTLINED_FUNCTION_6_4();
  if ((v1 & 1) == 0)
  {
    v29 = OUTLINED_FUNCTION_11_0(v28, sel_domain);
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_5_9();
    if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v30)
    {
      v32 = OUTLINED_FUNCTION_8_4();
    }
    else
    {
      OUTLINED_FUNCTION_0_16();
      OUTLINED_FUNCTION_2_10();
      v32 = OUTLINED_FUNCTION_6_4();
      if ((v1 & 1) == 0)
        goto LABEL_55;
    }
    v32 = (unint64_t)OUTLINED_FUNCTION_11_0(v32, sel_code);
    if (v32 < 0x11 && ((0x1726Bu >> v32) & 1) != 0)
      goto LABEL_51;
LABEL_55:
    v34 = OUTLINED_FUNCTION_11_0(v32, sel_domain);
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_5_9();
    if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetwork == v35)
    {
      v37 = OUTLINED_FUNCTION_8_4();
    }
    else
    {
      OUTLINED_FUNCTION_0_16();
      OUTLINED_FUNCTION_2_10();
      v37 = OUTLINED_FUNCTION_6_4();
      if ((v1 & 1) == 0)
      {
LABEL_68:
        v43 = OUTLINED_FUNCTION_11_0(v37, sel_userInfo);
        OUTLINED_FUNCTION_25_2();
        OUTLINED_FUNCTION_38_1();
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        OUTLINED_FUNCTION_17_4(v44, v45);
        OUTLINED_FUNCTION_8_2();
        v46 = OUTLINED_FUNCTION_6_1();
        if (v51)
        {
          v47 = OUTLINED_FUNCTION_4_9();
          if ((v47 & 1) != 0)
          {
            OUTLINED_FUNCTION_0_8(v47, sel_sn_isNetworkUnreachable);
            OUTLINED_FUNCTION_36_1();
          }
        }
        else
        {
          OUTLINED_FUNCTION_37_0(v46, &demangling cache variable for type metadata for Any?);
        }
        goto LABEL_51;
      }
    }
    v38 = OUTLINED_FUNCTION_11_0(v37, sel_userInfo);
    v39 = OUTLINED_FUNCTION_25_2();

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary.subscript.getter(v40, v41, v39, &v50);
    OUTLINED_FUNCTION_6_1();
    v42 = OUTLINED_FUNCTION_6_4();
    if (v51)
    {
      v37 = OUTLINED_FUNCTION_11_4();
      if ((v37 & 1) != 0 && (v49 == 406 || v49 == 503))
        goto LABEL_51;
    }
    else
    {
      v37 = OUTLINED_FUNCTION_37_0(v42, &demangling cache variable for type metadata for Any?);
    }
    goto LABEL_68;
  }
LABEL_51:
  OUTLINED_FUNCTION_10_4();
  return result;
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t outlined destroy of NWError?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL @objc NSError.sn_isNetworkUnreachable()(void *a1)
{
  id v1;
  Swift::Bool isNetwork;

  v1 = a1;
  isNetwork = NSError.sn_isNetworkUnreachable()();

  return isNetwork;
}

Swift::Bool __swiftcall NSError.sn_isNetworkUnreachableForServerCause()()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v16;
  uint64_t v17;
  unint64_t v19;
  Swift::Bool result;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_34_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_21_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_43_0();
  if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
  {
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_22_3();
    if (OUTLINED_FUNCTION_26_1() == *MEMORY[0x24BDE0680])
    {
      OUTLINED_FUNCTION_33_1();
      if (*v1 <= 0x3Du && ((1 << *v1) & 0x2060000000000000) != 0)
      {
        OUTLINED_FUNCTION_32_0();
        goto LABEL_34;
      }
      v8 = OUTLINED_FUNCTION_32_0();
    }
    else
    {
      OUTLINED_FUNCTION_39_1((uint64_t)v1);
      v8 = OUTLINED_FUNCTION_39_1(v0);
    }
  }
  else
  {
    v7 = OUTLINED_FUNCTION_23_2();
    v8 = OUTLINED_FUNCTION_47_0(v7, &demangling cache variable for type metadata for NWError?);
  }
  v9 = OUTLINED_FUNCTION_12_3(v8, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_18_3();
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v10)
  {
LABEL_21:
    v12 = OUTLINED_FUNCTION_2_7();
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_13_4();
  v12 = OUTLINED_FUNCTION_6_4();
  if ((v0 & 1) == 0)
  {
    v13 = OUTLINED_FUNCTION_12_3(v12, sel_domain);
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_18_3();
    if (v0 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v3 != v14)
    {
      OUTLINED_FUNCTION_1_9();
      OUTLINED_FUNCTION_13_4();
      v12 = OUTLINED_FUNCTION_6_4();
      if ((v0 & 1) == 0)
        goto LABEL_25;
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_22:
  v3 = (uint64_t)OUTLINED_FUNCTION_12_3(v12, sel_code);
  if (v3 == (int)OUTLINED_FUNCTION_49_0())
    goto LABEL_34;
  if (v3 == (int)POSIXErrorCode.rawValue.getter())
    goto LABEL_34;
  v12 = POSIXErrorCode.rawValue.getter();
  if (v3 == (int)v12)
    goto LABEL_34;
LABEL_25:
  v16 = OUTLINED_FUNCTION_12_3(v12, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_18_3();
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v17)
  {
    v19 = OUTLINED_FUNCTION_2_7();
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_13_4();
  v19 = OUTLINED_FUNCTION_6_4();
  if ((v0 & 1) != 0)
  {
LABEL_32:
    v19 = (unint64_t)OUTLINED_FUNCTION_12_3(v19, sel_code);
    if (v19 <= 7 && ((1 << v19) & 0x8C) != 0)
      goto LABEL_34;
  }
  v21 = OUTLINED_FUNCTION_12_3(v19, sel_userInfo);
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_38_1();
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17_4(v22, v23);
  OUTLINED_FUNCTION_8_2();
  v24 = OUTLINED_FUNCTION_6_1();
  if (v26)
  {
    v25 = OUTLINED_FUNCTION_4_9();
    if ((v25 & 1) != 0)
    {
      OUTLINED_FUNCTION_0_8(v25, sel_sn_isNetworkUnreachableForServerCause);
      OUTLINED_FUNCTION_36_1();
    }
  }
  else
  {
    OUTLINED_FUNCTION_37_0(v24, &demangling cache variable for type metadata for Any?);
  }
LABEL_34:
  OUTLINED_FUNCTION_10_4();
  return result;
}

BOOL @objc NSError.sn_isNetworkUnreachableForServerCause()(void *a1)
{
  id v1;
  Swift::Bool isNetworkUnreachableForServer;

  v1 = a1;
  isNetworkUnreachableForServer = NSError.sn_isNetworkUnreachableForServerCause()();

  return isNetworkUnreachableForServer;
}

Swift::Bool __swiftcall NSError.sn_isNetworkDown()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  Swift::Bool result;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v3);
  v4 = OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_34_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_21_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_43_0();
  if (OUTLINED_FUNCTION_11_4())
  {
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_22_3();
    if (OUTLINED_FUNCTION_26_1() == *MEMORY[0x24BDE0680])
    {
      OUTLINED_FUNCTION_33_1();
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v4);
    }
    else
    {
      v22 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      v22(v1, v4);
      v22(v0, v4);
    }
    goto LABEL_22;
  }
  v7 = OUTLINED_FUNCTION_23_2();
  v8 = OUTLINED_FUNCTION_47_0(v7, &demangling cache variable for type metadata for NWError?);
  v9 = OUTLINED_FUNCTION_12_3(v8, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_18_3();
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v10)
    goto LABEL_15;
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_13_4();
  v12 = OUTLINED_FUNCTION_6_4();
  if ((v0 & 1) != 0)
    goto LABEL_16;
  v13 = OUTLINED_FUNCTION_12_3(v12, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_18_3();
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v14)
  {
LABEL_15:
    v12 = OUTLINED_FUNCTION_2_7();
LABEL_16:
    v16 = OUTLINED_FUNCTION_12_3(v12, sel_code);
    v12 = OUTLINED_FUNCTION_51_0();
    if (v16 == (id)(int)v12)
      goto LABEL_22;
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_13_4();
  v12 = OUTLINED_FUNCTION_6_4();
  if ((v0 & 1) != 0)
    goto LABEL_16;
LABEL_17:
  v17 = OUTLINED_FUNCTION_12_3(v12, sel_userInfo);
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_38_1();
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17_4(v18, v19);
  OUTLINED_FUNCTION_8_2();
  v20 = OUTLINED_FUNCTION_6_1();
  if (v24)
  {
    v21 = OUTLINED_FUNCTION_4_9();
    if ((v21 & 1) != 0)
    {
      OUTLINED_FUNCTION_0_8(v21, sel_sn_isNetworkDown);
      OUTLINED_FUNCTION_36_1();
    }
  }
  else
  {
    OUTLINED_FUNCTION_37_0(v20, &demangling cache variable for type metadata for Any?);
  }
LABEL_22:
  OUTLINED_FUNCTION_10_4();
  return result;
}

BOOL @objc NSError.sn_isNetworkDown()(void *a1)
{
  id v1;
  Swift::Bool isNetwork;

  v1 = a1;
  isNetwork = NSError.sn_isNetworkDown()();

  return isNetwork;
}

Swift::Bool __swiftcall NSError.sn_isNetworkConnectionRetryable()()
{
  void *v0;

  return objc_msgSend(v0, sel_sn_isNetworkUnreachable) ^ 1;
}

BOOL @objc NSError.sn_isNetworkConnectionRetryable()(void *a1)
{
  id v1;
  Swift::Bool isNetworkConnection;

  v1 = a1;
  isNetworkConnection = NSError.sn_isNetworkConnectionRetryable()();

  return isNetworkConnection;
}

Swift::Bool __swiftcall NSError.sn_isNetworkConnectionRetryableNow()()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Bool result;
  uint64_t v23;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_16_5();
  OUTLINED_FUNCTION_34_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_21_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_20_3();
  OUTLINED_FUNCTION_43_0();
  if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
  {
    OUTLINED_FUNCTION_9_4();
    OUTLINED_FUNCTION_22_3();
    if (OUTLINED_FUNCTION_26_1() == *MEMORY[0x24BDE0680])
    {
      OUTLINED_FUNCTION_33_1();
      v6 = *v1;
      v7 = OUTLINED_FUNCTION_32_0();
      if (v6 == 54)
        goto LABEL_24;
    }
    else
    {
      OUTLINED_FUNCTION_39_1((uint64_t)v1);
      v7 = OUTLINED_FUNCTION_39_1(v0);
    }
  }
  else
  {
    v8 = OUTLINED_FUNCTION_23_2();
    v7 = OUTLINED_FUNCTION_47_0(v8, &demangling cache variable for type metadata for NWError?);
  }
  v9 = OUTLINED_FUNCTION_12_3(v7, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_18_3();
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v10)
    goto LABEL_18;
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_13_4();
  v12 = OUTLINED_FUNCTION_6_4();
  if ((v0 & 1) != 0)
    goto LABEL_19;
  v13 = OUTLINED_FUNCTION_12_3(v12, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_18_3();
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v14)
  {
LABEL_18:
    v12 = OUTLINED_FUNCTION_2_7();
LABEL_19:
    v16 = OUTLINED_FUNCTION_12_3(v12, sel_code);
    v12 = OUTLINED_FUNCTION_49_0();
    if (v16 == (id)(int)v12)
      goto LABEL_24;
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_13_4();
  v12 = OUTLINED_FUNCTION_6_4();
  if ((v0 & 1) != 0)
    goto LABEL_19;
LABEL_20:
  v17 = OUTLINED_FUNCTION_12_3(v12, sel_userInfo);
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_38_1();
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17_4(v18, v19);
  OUTLINED_FUNCTION_8_2();
  v20 = OUTLINED_FUNCTION_6_1();
  if (v23)
  {
    v21 = OUTLINED_FUNCTION_4_9();
    if ((v21 & 1) != 0)
    {
      OUTLINED_FUNCTION_0_8(v21, sel_sn_isNetworkConnectionRetryableNow);
      OUTLINED_FUNCTION_36_1();
    }
  }
  else
  {
    OUTLINED_FUNCTION_37_0(v20, &demangling cache variable for type metadata for Any?);
  }
LABEL_24:
  OUTLINED_FUNCTION_10_4();
  return result;
}

BOOL @objc NSError.sn_isNetworkConnectionRetryableNow()(void *a1)
{
  id v1;
  Swift::Bool isNetworkConnectionRetryable;

  v1 = a1;
  isNetworkConnectionRetryable = NSError.sn_isNetworkConnectionRetryableNow()();

  return isNetworkConnectionRetryable;
}

Swift::Bool __swiftcall NSError.sn_isNetworkConnectionRetryableAfterDelay()()
{
  uint64_t isNetworkConnectionRetryableAfter;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v14;
  Swift::Bool result;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_34_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  if ((objc_msgSend((id)isNetworkConnectionRetryableAfter, sel_sn_isNetworkConnectionRetryableNow) & 1) != 0)
    goto LABEL_20;
  OUTLINED_FUNCTION_29_1();
  v5 = (id)isNetworkConnectionRetryableAfter;
  if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
  {
    OUTLINED_FUNCTION_30_1(isNetworkConnectionRetryableAfter, 0);
    OUTLINED_FUNCTION_42_1(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    isNetworkConnectionRetryableAfter = NWError.sn_isNetworkConnectionRetryableAfterDelay()();
    v6 = OUTLINED_FUNCTION_46_0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    if ((isNetworkConnectionRetryableAfter & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    OUTLINED_FUNCTION_30_1(isNetworkConnectionRetryableAfter, 1);
    v6 = outlined destroy of NWError?(isNetworkConnectionRetryableAfter, &demangling cache variable for type metadata for NWError?);
  }
  v7 = OUTLINED_FUNCTION_11_0(v6, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_5_9();
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetworkConnectionRetryableAfter == v8)
    goto LABEL_17;
  OUTLINED_FUNCTION_0_16();
  OUTLINED_FUNCTION_2_10();
  v10 = OUTLINED_FUNCTION_6_4();
  if ((v3 & 1) != 0)
  {
LABEL_18:
    v14 = OUTLINED_FUNCTION_11_0(v10, sel_code);
    if (v14 == (id)(int)OUTLINED_FUNCTION_51_0())
      goto LABEL_20;
    v10 = POSIXErrorCode.rawValue.getter();
    if (v14 == (id)(int)v10)
      goto LABEL_20;
    goto LABEL_21;
  }
  v11 = OUTLINED_FUNCTION_11_0(v10, sel_domain);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_5_9();
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && isNetworkConnectionRetryableAfter == v12)
  {
LABEL_17:
    v10 = OUTLINED_FUNCTION_8_4();
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_0_16();
  OUTLINED_FUNCTION_2_10();
  v10 = OUTLINED_FUNCTION_6_4();
  if ((v3 & 1) != 0)
    goto LABEL_18;
LABEL_21:
  v16 = OUTLINED_FUNCTION_11_0(v10, sel_userInfo);
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_38_1();
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_17_4(v17, v18);
  OUTLINED_FUNCTION_8_2();
  v19 = OUTLINED_FUNCTION_6_1();
  if (v21)
  {
    v20 = OUTLINED_FUNCTION_4_9();
    if ((v20 & 1) != 0)
    {
      OUTLINED_FUNCTION_0_8(v20, sel_sn_isNetworkConnectionRetryableAfterDelay);
      OUTLINED_FUNCTION_36_1();
    }
  }
  else
  {
    OUTLINED_FUNCTION_37_0(v19, &demangling cache variable for type metadata for Any?);
  }
LABEL_20:
  OUTLINED_FUNCTION_10_4();
  return result;
}

BOOL @objc NSError.sn_isNetworkConnectionRetryableAfterDelay()(void *a1)
{
  id v1;
  Swift::Bool isNetworkConnectionRetryableAfter;

  v1 = a1;
  isNetworkConnectionRetryableAfter = NSError.sn_isNetworkConnectionRetryableAfterDelay()();

  return isNetworkConnectionRetryableAfter;
}

Swift::Bool __swiftcall NSError.sn_isNetworkOperationRetryable()()
{
  uint64_t isNetworkOperation;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v1);
  v2 = OUTLINED_FUNCTION_27_2();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_3_0();
  LODWORD(v4) = objc_msgSend((id)isNetworkOperation, sel_sn_isNetworkConnectionRetryable);
  if ((_DWORD)v4)
  {
    *(_QWORD *)&v20 = isNetworkOperation;
    OUTLINED_FUNCTION_29_1();
    v5 = (id)isNetworkOperation;
    if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
    {
      OUTLINED_FUNCTION_30_1(isNetworkOperation, 0);
      OUTLINED_FUNCTION_42_1(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
      isNetworkOperation = NWError.sn_isNetworkOperationRetryable()();
      OUTLINED_FUNCTION_46_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      v4 = 0;
      if ((isNetworkOperation & 1) == 0)
        return v4;
    }
    else
    {
      OUTLINED_FUNCTION_30_1(isNetworkOperation, 1);
      v4 = outlined destroy of NWError?(isNetworkOperation, &demangling cache variable for type metadata for NWError?);
    }
    v6 = OUTLINED_FUNCTION_11_0(v4, sel_domain);
    OUTLINED_FUNCTION_7_6();
    OUTLINED_FUNCTION_5_9();
    if (v2 != static String._unconditionallyBridgeFromObjectiveC(_:)() || isNetworkOperation != v7)
    {
      OUTLINED_FUNCTION_0_16();
      OUTLINED_FUNCTION_2_10();
      v9 = OUTLINED_FUNCTION_6_4();
      if ((v2 & 1) != 0)
        goto LABEL_18;
      v10 = OUTLINED_FUNCTION_11_0(v9, sel_domain);
      OUTLINED_FUNCTION_7_6();
      OUTLINED_FUNCTION_5_9();
      if (v2 != static String._unconditionallyBridgeFromObjectiveC(_:)() || isNetworkOperation != v11)
      {
        OUTLINED_FUNCTION_0_16();
        OUTLINED_FUNCTION_2_10();
        v9 = OUTLINED_FUNCTION_6_4();
        if ((v2 & 1) == 0)
          goto LABEL_20;
        goto LABEL_18;
      }
    }
    v9 = OUTLINED_FUNCTION_8_4();
LABEL_18:
    v13 = OUTLINED_FUNCTION_11_0(v9, sel_code);
    v9 = POSIXErrorCode.rawValue.getter();
    if (v13 == (id)(int)v9)
    {
LABEL_19:
      LOBYTE(v4) = 0;
      return v4;
    }
LABEL_20:
    v14 = OUTLINED_FUNCTION_11_0(v9, sel_userInfo);
    v15 = MEMORY[0x24BEE4AD8] + 8;
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_38_1();
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    specialized Dictionary.subscript.getter(v16, v17, v2, &v20);
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_6_1();
    if (!v21)
    {
      outlined destroy of NWError?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
LABEL_25:
      LOBYTE(v4) = 1;
      return v4;
    }
    v18 = OUTLINED_FUNCTION_11_4();
    if ((v18 & 1) == 0)
      goto LABEL_25;
    OUTLINED_FUNCTION_0_8(v18, sel_sn_isNetworkOperationRetryable);
    OUTLINED_FUNCTION_36_1();
    if ((v15 & 1) != 0)
      goto LABEL_25;
    goto LABEL_19;
  }
  return v4;
}

BOOL @objc NSError.sn_isNetworkOperationRetryable()(void *a1)
{
  id v1;
  Swift::Bool isNetworkOperation;

  v1 = a1;
  isNetworkOperation = NSError.sn_isNetworkOperationRetryable()();

  return isNetworkOperation;
}

uint64_t OUTLINED_FUNCTION_0_16()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_5_9()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_8_4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  __swift_storeEnumTagSinglePayload(v2, 0, 1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  return swift_dynamicCast();
}

id OUTLINED_FUNCTION_12_3(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  return type metadata accessor for NWError();
}

double OUTLINED_FUNCTION_17_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return specialized Dictionary.subscript.getter(a1, a2, v2, (_OWORD *)(v3 - 96));
}

void OUTLINED_FUNCTION_18_3()
{
  void *v0;

}

unint64_t OUTLINED_FUNCTION_20_3()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = v0;
  return type metadata accessor for NSError();
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return type metadata accessor for NWError();
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t OUTLINED_FUNCTION_29_1()
{
  return type metadata accessor for NSError();
}

uint64_t OUTLINED_FUNCTION_30_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_31_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v0);
}

void OUTLINED_FUNCTION_36_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_37_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of NWError?(v2 - 96, a2);
}

void OUTLINED_FUNCTION_38_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_39_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_42_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v1, v2);
}

id OUTLINED_FUNCTION_43_0()
{
  void *v0;

  return v0;
}

id OUTLINED_FUNCTION_44_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_46_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_47_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of NWError?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_48_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  return POSIXErrorCode.rawValue.getter();
}

unint64_t OUTLINED_FUNCTION_50_0(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return POSIXErrorCode.rawValue.getter();
}

void OUTLINED_FUNCTION_52()
{
  void *v0;

}

id SNSetRestrictionsThunk.init(thunk:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  _QWORD v5[6];

  if (a1)
  {
    v5[4] = a1;
    v5[5] = a2;
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 1107296256;
    v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed AceObject?) -> ();
    v5[3] = &block_descriptor_4;
    v2 = _Block_copy(v5);
    swift_release();
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_1_10()), sel_initWithThunk_, v2);
  _Block_release(v2);
  return v3;
}

void thunk for @escaping @callee_guaranteed (@guaranteed AceObject?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void SNSetRestrictionsThunk.init(thunk:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t *v5;
  uint64_t v6;
  objc_super v7;

  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  v7.receiver = v2;
  v7.super_class = (Class)SNSetRestrictionsThunk;
  v5 = (uint64_t *)((char *)objc_msgSendSuper2(&v7, sel_init) + OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v6);
  OUTLINED_FUNCTION_0_17();
}

void __swiftcall SNSetRestrictionsThunk.init(coder:)(SNSetRestrictionsThunk_optional *__return_ptr retstr, NSCoder coder)
{
  objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_1_10()), sel_initWithCoder_, coder.super.isa);

}

id SNSetRestrictionsThunk.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  v5.receiver = v1;
  v5.super_class = (Class)SNSetRestrictionsThunk;
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

void SNSetRestrictionsThunk.init(dictionary:context:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  v4 = objc_allocWithZone((Class)OUTLINED_FUNCTION_1_10());
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_13_4();
  objc_msgSend(v4, sel_initWithDictionary_context_, v2, a2);

  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_23_1();
}

{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_13_4();
  v6.receiver = v2;
  v6.super_class = (Class)SNSetRestrictionsThunk;
  v5 = objc_msgSendSuper2(&v6, sel_initWithDictionary_context_, v3, a2);

  if (v5)
  {
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_0_17();
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall SNSetRestrictionsThunk.init(dictionary:)(SNSetRestrictionsThunk *__return_ptr retstr, Swift::OpaquePointer dictionary)
{
  void *v2;
  id v3;

  v3 = objc_allocWithZone((Class)OUTLINED_FUNCTION_1_10());
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_5_10();
  objc_msgSend(v3, sel_initWithDictionary_, v2);

  OUTLINED_FUNCTION_23_1();
}

void SNSetRestrictionsThunk.init(dictionary:)()
{
  void *v0;
  void *v1;
  id v2;
  objc_super v3;

  OUTLINED_FUNCTION_4_8(OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_5_10();
  v3.receiver = v0;
  v3.super_class = (Class)SNSetRestrictionsThunk;
  v2 = objc_msgSendSuper2(&v3, sel_initWithDictionary_, v1);

  if (v2)
    OUTLINED_FUNCTION_0_17();
  else
    __break(1u);
}

Swift::Void __swiftcall SNSetRestrictionsThunk.siriNetwork_invokeThunk()()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)();
  uint64_t v3;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  v2 = *(void (**)())(v0 + OBJC_IVAR___SNSetRestrictionsThunk_thunk);
  if (v2)
  {
    swift_retain();
    v2();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v2);
    v3 = *v1;
  }
  else
  {
    v3 = 0;
  }
  *v1 = 0;
  v1[1] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v3);
}

void __swiftcall SNSetRestrictionsThunk.init()(SNSetRestrictionsThunk *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_1_10()), sel_init);
}

void SNSetRestrictionsThunk.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for SNSetRestrictionsThunk()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SNSetRestrictionsThunk;
  if (!lazy cache variable for type metadata for SNSetRestrictionsThunk)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SNSetRestrictionsThunk);
  }
  return result;
}

uint64_t sub_246EE8C30()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_1_10()
{
  return swift_getObjCClassFromMetadata();
}

uint64_t OUTLINED_FUNCTION_5_10()
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized ConnectionProviderProtocol.connectionAnalysisInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v22[28];
  char v23;
  char v24[296];
  __n128 v25[18];
  _BYTE v26[40];
  __n128 v27[16];
  uint64_t v28;
  _DWORD v29[130];
  __n128 v30[19];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v29, (const void *)(v1 + 1536), 0x204uLL);
  v7 = ConnectionConfiguration.resolvedURL.getter();
  specialized ConnectionProviderProtocol.primaryInterface.getter(v7);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v28, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v30, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  v8 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v29);
  v9 = v8;
  if ((_DWORD)v8 == 1)
  {
    v10 = 0;
  }
  else
  {
    v8 = outlined release of ConnectionInterfaceReport?(v30);
    v10 = v29[9];
  }
  specialized ConnectionProviderProtocol.primaryInterface.getter(v8);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v24, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v25, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  v11 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v26);
  if ((_DWORD)v11 == 1
    || (outlined retain of ConnectionTCPInfoMetrics?(v27, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))outlined copy of ConnectionTCPInfoMetrics?), outlined release of ConnectionInterfaceReport?(v25), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v27, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for ConnectionTCPInfoMetrics?), v11 = _s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg((uint64_t)v22), (_DWORD)v11 == 1)|| (v11 = (uint64_t)outlined retain of ConnectionTCPInfoMetrics?(v27, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))outlined consume of ConnectionTCPInfoMetrics?), (v23 & 1) != 0))
  {
    v12 = 0;
  }
  else
  {
    v12 = v22[27];
  }
  v13 = *(_BYTE *)(v1 + 1632);
  specialized ConnectionProviderProtocol.connectionType.getter(v11, v24);
  v14 = v24[0];
  if (*(_QWORD *)(v1 + 1928))
  {
    v15 = *(_QWORD *)(v1 + 1864);
    v16 = *(_QWORD *)(v2 + 1856);
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v6, a1, (uint64_t *)&demangling cache variable for type metadata for URL?);
  v17 = (int *)type metadata accessor for ConnectionAnalysisInfo();
  v18 = a1 + v17[5];
  *(_DWORD *)v18 = v10;
  *(_BYTE *)(v18 + 4) = v9 == 1;
  *(_QWORD *)(a1 + v17[6]) = v12;
  *(_BYTE *)(a1 + v17[7]) = v13;
  *(_BYTE *)(a1 + v17[8]) = v14;
  v19 = (_QWORD *)(a1 + v17[9]);
  *v19 = v16;
  v19[1] = v15;
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, (uint64_t)v17);
}

void specialized ConnectionProviderProtocol.primaryInterface.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  __n128 *v5;
  __n128 *v6;
  uint64_t v7;
  __n128 v8[18];
  _BYTE v9[1440];
  __n128 v10[22];
  _BYTE __src[1440];
  _BYTE __dst[1440];
  __n128 v13[18];
  _BYTE v14[1440];
  _BYTE v15[712];

  MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = (const void *)(v1 + 56);
  swift_beginAccess();
  memcpy(v14, v4, 0x599uLL);
  memcpy(__dst, v4, 0x599uLL);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v14[568], (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v15) == 1)
  {
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(__src);
    v5 = (__n128 *)__src;
  }
  else
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&__dst[952], (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    memcpy(__src, __dst, 0x599uLL);
    outlined retain of ConnectionMetrics((uint64_t)v14);
    outlined release of ConnectionInterfaceReport?(v10);
    outlined release of ConnectionMetrics((uint64_t)__src);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v10, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v9) != 1)
    {
      v6 = v10;
      goto LABEL_9;
    }
    v5 = v10;
  }
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v5, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  memcpy(__dst, v4, 0x599uLL);
  memcpy(__src, v4, 0x599uLL);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&__dst[96], (uint64_t)v10, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v10) == 1)
  {
    outlined release of ConnectionInterfaceReport?(v13);
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v9);
    v6 = (__n128 *)v9;
LABEL_9:
    v7 = v3;
    goto LABEL_10;
  }
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&__src[136], (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  memcpy(v9, __src, 0x599uLL);
  outlined retain of ConnectionMetrics((uint64_t)__dst);
  outlined release of ConnectionInterfaceReport?(v8);
  outlined release of ConnectionMetrics((uint64_t)v9);
  outlined release of ConnectionInterfaceReport?(v13);
  v6 = v8;
  v7 = v3;
LABEL_10:
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v6, v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
}

uint64_t specialized ConnectionProviderProtocol.connectionType.getter@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char v4;
  _BYTE v5[296];
  __n128 v6[18];
  _BYTE v7[296];

  if ((*(_BYTE *)(v2 + 2100) & 1) != 0)
  {
    v4 = 17;
  }
  else
  {
    specialized ConnectionProviderProtocol.primaryInterface.getter(result);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v5, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    result = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)v7);
    if ((_DWORD)result == 1)
    {
      v4 = 0;
    }
    else
    {
      result = outlined release of ConnectionInterfaceReport?(v6);
      v4 = v7[32];
    }
  }
  *a2 = v4;
  return result;
}

void specialized ConnectionProviderProtocol.openTimeoutTimerInterval.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  double v2;

  v2 = 15.0;
  if ((*(_BYTE *)(v1 + 1832) & 1) == 0)
    v2 = *(double *)(v1 + 1824);
  Double.dispatchTimeInterval.getter(a1, v2);
}

{
  uint64_t v1;
  double v2;

  v2 = 15.0;
  if ((*(_BYTE *)(v1 + 1816) & 1) == 0)
    v2 = *(double *)(v1 + 1808);
  Double.dispatchTimeInterval.getter(a1, v2);
}

void specialized ConnectionProviderProtocol.openSlowTimerInterval.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  double v2;

  v2 = 6.0;
  if ((*(_BYTE *)(v1 + 1848) & 1) == 0)
    v2 = *(double *)(v1 + 1840);
  Double.dispatchTimeInterval.getter(a1, v2);
}

{
  uint64_t v1;
  double v2;

  v2 = 6.0;
  if ((*(_BYTE *)(v1 + 1832) & 1) == 0)
    v2 = *(double *)(v1 + 1824);
  Double.dispatchTimeInterval.getter(a1, v2);
}

uint64_t specialized ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_133();
  v6 = (_QWORD *)OUTLINED_FUNCTION_6();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v7 = *(_QWORD *)(v2 + 2080);
  *(_QWORD *)(v2 + 2080) = partial apply for specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:);
  *(_QWORD *)(v2 + 2088) = v6;
  swift_retain();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v7);
}

{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = swift_allocObject();
  swift_weakInit();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v7 = *(_QWORD *)(v2 + 2064);
  *(_QWORD *)(v2 + 2064) = partial apply for specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:);
  *(_QWORD *)(v2 + 2072) = v6;
  swift_retain();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v7);
}

void specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  unint64_t v4;
  void *v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  unsigned __int8 v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  os_log_type_t type;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD v62[6];
  _QWORD v63[5];
  char v64;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)v62, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  v53 = v62[1];
  v54 = (void *)v62[0];
  v4 = v62[3];
  v52 = v62[2];
  v5 = (void *)v62[4];
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v7 = Strong;
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)v63, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
    if ((v64 & 1) != 0)
    {
      v8 = v63[0];
      v9 = v63[1];
      v10 = v63[2];
      v11 = v63[3];
      v12 = v63[4];
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v13 = swift_allocError();
      v48 = v9;
      v49 = v8;
      *v14 = v8;
      v14[1] = v9;
      v14[2] = v10;
      v14[3] = v11;
      v14[4] = v12;
      v15 = *(void **)(v7 + 1536);
      *(_QWORD *)(v7 + 1536) = v13;
      LOBYTE(v9) = *(_BYTE *)(v7 + 1544);
      *(_BYTE *)(v7 + 1544) = 1;
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Result<(), NetworkConnectionError>);
      v50 = v5;
      outlined copy of NetworkConnectionError(v54, v53, v52, v4, v5);
      outlined consume of ConnectionProviderState(v15, v9);
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v45 = v12;
      v46 = v11;
      v47 = v10;
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Result<(), NetworkConnectionError>);
      swift_retain();
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Result<(), NetworkConnectionError>);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        type = v18;
        v19 = swift_slowAlloc();
        v44 = swift_slowAlloc();
        v55 = v44;
        *(_DWORD *)v19 = 136315650;
        v20 = _typeName(_:qualified:)();
        v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        v22 = *(_QWORD *)(v7 + 16);
        v23 = *(_QWORD *)(v7 + 24);
        swift_bridgeObjectRetain();
        v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 22) = 2080;
        v24 = v48;
        v56 = v49;
        v57 = v48;
        v26 = v11;
        v25 = v47;
        v58 = v47;
        v59 = v46;
        v27 = v45;
        v60 = v45;
        outlined copy of NetworkConnectionError(v54, v53, v52, v4, v50);
        v28 = String.init<A>(describing:)();
        v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
        _os_log_impl(&dword_246EC7000, v17, type, "Provider - %s [%s]: Open Completion error. %s", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v44, -1, -1);
        MEMORY[0x24956E018](v19, -1, -1);

        v31 = v49;
        v30 = v50;
      }
      else
      {
        swift_release_n();
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);

        v31 = v49;
        v30 = v5;
        v25 = v10;
        v24 = v48;
        v27 = v12;
        v26 = v46;
      }
      v56 = v31;
      v57 = v24;
      v58 = v25;
      v59 = v26;
      v60 = v27;
      v61 = 1;
      outlined copy of NetworkConnectionError(v54, v53, v52, v4, v30);
      a3(&v56);
      swift_release();
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
      outlined retain of Result<(), NetworkConnectionError>(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
    }
    else
    {
      v32 = *(void **)(v7 + 1536);
      *(_QWORD *)(v7 + 1536) = 2;
      v33 = *(_BYTE *)(v7 + 1544);
      *(_BYTE *)(v7 + 1544) = 2;
      outlined consume of ConnectionProviderState(v32, v33);
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc();
        v38 = swift_slowAlloc();
        v56 = v38;
        *(_DWORD *)v37 = 136315394;
        v39 = _typeName(_:qualified:)();
        v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        v41 = *(_QWORD *)(v7 + 16);
        v42 = *(_QWORD *)(v7 + 24);
        swift_bridgeObjectRetain();
        v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_246EC7000, v35, v36, "Provider - %s [%s]: Connection ready.", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v38, -1, -1);
        MEMORY[0x24956E018](v37, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)&v56, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
      a3(&v56);
      swift_release();
    }
  }
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned __int8 v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  NSObject *log;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD v67[6];
  _QWORD v68[5];
  char v69;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)v67, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  v4 = v67[1];
  v59 = (void *)v67[0];
  v5 = v67[2];
  v6 = v67[3];
  v7 = (void *)v67[4];
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v9 = Strong;
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)v68, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
    if ((v69 & 1) != 0)
    {
      v10 = v68[0];
      v11 = v68[1];
      v57 = v4;
      v12 = a1;
      v14 = v68[2];
      v13 = v68[3];
      v15 = v68[4];
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v16 = swift_allocError();
      v53 = v11;
      v54 = v10;
      *v17 = v10;
      v17[1] = v11;
      v52 = v14;
      v17[2] = v14;
      v18 = v13;
      v19 = v12;
      v17[3] = v18;
      v17[4] = v15;
      v20 = *(void **)(v9 + 1520);
      *(_QWORD *)(v9 + 1520) = v16;
      LOBYTE(v11) = *(_BYTE *)(v9 + 1528);
      *(_BYTE *)(v9 + 1528) = 1;
      outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Result<(), NetworkConnectionError>);
      v56 = v5;
      v55 = v7;
      outlined copy of NetworkConnectionError(v59, v57, v5, v6, v7);
      outlined consume of ConnectionProviderState(v20, v11);
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Result<(), NetworkConnectionError>);
      swift_retain();
      outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Result<(), NetworkConnectionError>);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v51 = v18;
        v24 = swift_slowAlloc();
        v50 = swift_slowAlloc();
        v60 = v50;
        *(_DWORD *)v24 = 136315650;
        v25 = _typeName(_:qualified:)();
        v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        v27 = NetworkConnectionProvider.connectionIdentifier.getter();
        v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 22) = 2080;
        v30 = v53;
        v29 = v54;
        v61 = v54;
        v62 = v53;
        v31 = v52;
        v63 = v52;
        v64 = v51;
        v65 = v15;
        log = v22;
        v32 = v55;
        outlined copy of NetworkConnectionError(v59, v57, v56, v6, v55);
        v33 = String.init<A>(describing:)();
        v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
        _os_log_impl(&dword_246EC7000, log, v23, "Provider - %s [%s]: Open Completion error. %s", (uint8_t *)v24, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v50, -1, -1);
        v35 = v24;
        v18 = v51;
        MEMORY[0x24956E018](v35, -1, -1);

        v37 = v56;
        v36 = v57;
      }
      else
      {
        swift_release_n();
        outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
        outlined retain of Result<(), NetworkConnectionError>(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);

        v37 = v5;
        v36 = v57;
        v32 = v7;
        v30 = v53;
        v29 = v54;
        v31 = v52;
      }
      v61 = v29;
      v62 = v30;
      v63 = v31;
      v64 = v18;
      v65 = v15;
      v66 = 1;
      outlined copy of NetworkConnectionError(v59, v36, v37, v6, v32);
      a3(&v61);
      swift_release();
      outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
      outlined retain of Result<(), NetworkConnectionError>(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Result<(), NetworkConnectionError>);
    }
    else
    {
      v38 = *(void **)(v9 + 1520);
      *(_QWORD *)(v9 + 1520) = 2;
      v39 = *(_BYTE *)(v9 + 1528);
      *(_BYTE *)(v9 + 1528) = 2;
      outlined consume of ConnectionProviderState(v38, v39);
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = swift_slowAlloc();
        v44 = swift_slowAlloc();
        v61 = v44;
        *(_DWORD *)v43 = 136315394;
        v45 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2080;
        v47 = NetworkConnectionProvider.connectionIdentifier.getter();
        v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_246EC7000, v41, v42, "Provider - %s [%s]: Connection ready.", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v44, -1, -1);
        MEMORY[0x24956E018](v43, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)&v61, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
      a3(&v61);
      swift_release();
    }
  }
}

{
  _BYTE v5[48];

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)v5, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)((uint64_t)v5, a2, a3);
}

{
  _BYTE v5[48];

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)v5, &demangling cache variable for type metadata for Result<(), NetworkConnectionError>);
  specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)((uint64_t)v5, a2, a3);
}

void specialized ConnectionProviderProtocol.cancelOpenTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v0 + 2112))
  {
    v1 = v0;
    v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315394;
      v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v4, v5, "Provider - %s [%s]: Open timer cancelled.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v7, -1, -1);
      MEMORY[0x24956E018](v6, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    *(_QWORD *)(v1 + 2112) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_81_0();
  if (*(_QWORD *)(v0 + 2128))
  {
    v1 = v0;
    v2 = (void *)one-time initialization token for siriNetwork;
    OUTLINED_FUNCTION_163();
    if (v2 != (void *)-1)
      swift_once();
    v3 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_41_2(v3, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v4 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_27_0(v4))
    {
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_213();
      v5 = OUTLINED_FUNCTION_27_3(4.8151e-34);
      OUTLINED_FUNCTION_74_0(v5, v6, v7);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_115();
      v8 = OUTLINED_FUNCTION_22_4();
      OUTLINED_FUNCTION_43_1(v8);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_30_2(&dword_246EC7000, v9, v10, "Provider - %s [%s]: Open timer cancelled.");
      OUTLINED_FUNCTION_26_2();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_64_0();
    *(_QWORD *)(v1 + 2128) = 0;
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_164();
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_3_6();
  }
  OUTLINED_FUNCTION_17_5();
}

void specialized ConnectionProviderProtocol.cancelOpenSlowTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v0 + 2120))
  {
    v1 = v0;
    v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315394;
      v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v4, v5, "Provider - %s [%s]: Open slow timer cancelled.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v7, -1, -1);
      MEMORY[0x24956E018](v6, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    *(_QWORD *)(v1 + 2120) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_81_0();
  if (*(_QWORD *)(v0 + 2136))
  {
    v1 = v0;
    v2 = (void *)one-time initialization token for siriNetwork;
    OUTLINED_FUNCTION_163();
    if (v2 != (void *)-1)
      swift_once();
    v3 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_41_2(v3, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v4 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_27_0(v4))
    {
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_213();
      v5 = OUTLINED_FUNCTION_27_3(4.8151e-34);
      OUTLINED_FUNCTION_74_0(v5, v6, v7);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_115();
      v8 = OUTLINED_FUNCTION_22_4();
      OUTLINED_FUNCTION_43_1(v8);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_30_2(&dword_246EC7000, v9, v10, "Provider - %s [%s]: Open slow timer cancelled.");
      OUTLINED_FUNCTION_26_2();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_64_0();
    *(_QWORD *)(v1 + 2136) = 0;
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_164();
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_3_6();
  }
  OUTLINED_FUNCTION_17_5();
}

void specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53[2];
  uint64_t v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)();
  uint64_t v74;

  OUTLINED_FUNCTION_19();
  v3 = v0;
  v68 = OUTLINED_FUNCTION_159();
  v66 = *(_QWORD *)(v68 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  v65 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v6);
  v67 = (char *)v53 - v7;
  v8 = OUTLINED_FUNCTION_18();
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_53_0();
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v12);
  v14 = OUTLINED_FUNCTION_56(v13, v53[0]);
  v59 = *(_QWORD *)(v14 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_91(v16, v53[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_13_5();
  v19 = MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_73_0(v19, v20, v21, v22, v23, v24, v25, v26, v53[0]);
  OUTLINED_FUNCTION_141();
  MEMORY[0x24BDAC7A8](v27);
  v69 = (uint64_t)v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_195();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_194();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_209();
  specialized ConnectionProviderProtocol.openTimeoutTimerInterval.getter(v32);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v33 = OUTLINED_FUNCTION_5_1();
  v34 = (void *)__swift_project_value_buffer(v33, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_48_1(v2, v1);
  OUTLINED_FUNCTION_63_0();
  Logger.logObject.getter();
  v35 = OUTLINED_FUNCTION_35_0();
  v36 = OUTLINED_FUNCTION_106((os_log_type_t)v35);
  v70 = v3;
  if (v36)
  {
    v55 = v35;
    v56 = v34;
    v57 = v14;
    v37 = OUTLINED_FUNCTION_2_2();
    v54 = OUTLINED_FUNCTION_2_2();
    v71 = v54;
    *(_DWORD *)v37 = 136315650;
    v38 = OUTLINED_FUNCTION_75_0();
    v40 = OUTLINED_FUNCTION_182(v38, v39);
    OUTLINED_FUNCTION_61_0(v40);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_93_0();
    v41 = OUTLINED_FUNCTION_135();
    OUTLINED_FUNCTION_58_0(v41);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_10_2();
    *(_WORD *)(v37 + 22) = 2080;
    v42 = v58;
    OUTLINED_FUNCTION_48_1(v58, v2);
    v43 = OUTLINED_FUNCTION_76_0(v42);
    OUTLINED_FUNCTION_130(v43, v44, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    OUTLINED_FUNCTION_173((uint64_t)v34);
    if (v45)
    {
      OUTLINED_FUNCTION_239();
    }
    else
    {
      OUTLINED_FUNCTION_85_0();
      OUTLINED_FUNCTION_48_1(v69, v42);
      OUTLINED_FUNCTION_216();
      v46 = OUTLINED_FUNCTION_90();
    }
    OUTLINED_FUNCTION_176(v46, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    v47 = OUTLINED_FUNCTION_136();
    OUTLINED_FUNCTION_83_0(v47);
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_232();
    OUTLINED_FUNCTION_89_0(&dword_246EC7000, v48, v49, "Provider - %s [%s]: Open timer scheduled (%s).");
    OUTLINED_FUNCTION_82_0();
    OUTLINED_FUNCTION_0_4();
  }
  OUTLINED_FUNCTION_64_0();
  OUTLINED_FUNCTION_23_3();

  OUTLINED_FUNCTION_220();
  v71 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, v50, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A]);
  OUTLINED_FUNCTION_46_1();
  v51 = *(id *)(v3 + 2072);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_237();
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_227();
  v52 = OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_84_0();
  v73 = partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer();
  v74 = v52;
  v71 = MEMORY[0x24BDAC760];
  v72 = 1107296256;
  OUTLINED_FUNCTION_125((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_156();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_155();
  OUTLINED_FUNCTION_80_0(v60);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_210();
  OUTLINED_FUNCTION_118();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_94_0();
}

uint64_t specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  NSObject *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint64_t v50;
  void *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _QWORD v65[2];
  uint64_t v66;
  int v67;
  uint64_t v68;
  os_log_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t aBlock[7];

  v1 = v0;
  v85 = type metadata accessor for DispatchTime();
  v83 = *(_QWORD *)(v85 - 8);
  v2 = MEMORY[0x24BDAC7A8](v85);
  v82 = (char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v84 = (char *)v65 - v4;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v79 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v77 = *(_QWORD *)(v7 - 8);
  v78 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v76 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v72 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v65 - v14;
  v16 = type metadata accessor for DispatchTimeInterval();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v86 = (char *)v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v65 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v65 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v65 - v26;
  specialized ConnectionProviderProtocol.openTimeoutTimerInterval.getter((_QWORD *)((char *)v65 - v26));
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriNetwork);
  v29 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v75 = v27;
  v29(v25, v27, v16);
  swift_retain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
  v87 = v1;
  v70 = v16;
  if (v32)
  {
    v67 = v31;
    v68 = v17;
    v69 = v30;
    v71 = v22;
    v33 = swift_slowAlloc();
    v66 = swift_slowAlloc();
    aBlock[0] = v66;
    *(_DWORD *)v33 = 136315650;
    v34 = _typeName(_:qualified:)();
    v65[0] = v15;
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    v36 = NetworkConnectionProvider.connectionIdentifier.getter();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, aBlock);
    v65[1] = aBlock;
    v38 = v65[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    v29((char *)v38, v25, v16);
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v16);
    outlined init with copy of NetworkConnectionProtocol?(v38, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v16) == 1)
    {
      v39 = 0xE100000000000000;
      v40 = 45;
      v22 = v71;
      v41 = v68;
    }
    else
    {
      v41 = v68;
      v22 = v71;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v71, v13, v16);
      v29(v86, v22, v16);
      v40 = String.init<A>(describing:)();
      v39 = v42;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v16);
    }
    outlined destroy of NetworkConnectionProtocol?(v38, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v71 = *(char **)(v41 + 8);
    ((void (*)(char *, uint64_t))v71)(v25, v16);
    v43 = v69;
    _os_log_impl(&dword_246EC7000, v69, (os_log_type_t)v67, "Provider - %s [%s]: Open timer scheduled (%s).", (uint8_t *)v33, 0x20u);
    v44 = v66;
    swift_arrayDestroy();
    MEMORY[0x24956E018](v44, -1, -1);
    MEMORY[0x24956E018](v33, -1, -1);

    v1 = v87;
  }
  else
  {
    swift_release_n();
    v71 = *(char **)(v17 + 8);
    ((void (*)(char *, uint64_t))v71)(v25, v16);

  }
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  v45 = v72;
  v46 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v47 = *(id *)(v1 + 2056);
  v48 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v73 + 8))(v45, v46);
  ObjectType = swift_getObjectType();
  v50 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer();
  aBlock[5] = v50;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_84;
  v51 = _Block_copy(aBlock);
  swift_retain();
  v52 = v76;
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  v53 = v79;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v51);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v53, v81);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v52, v78);
  swift_release();
  swift_release();
  v54 = v82;
  static DispatchTime.now()();
  v55 = v84;
  v56 = v75;
  DispatchTime.advanced(by:)();
  v57 = *(void (**)(char *, uint64_t))(v83 + 8);
  v58 = v85;
  v57(v54, v85);
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)((uint64_t)v22);
  v59 = v22;
  v60 = v86;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v86);
  MEMORY[0x24956D2B0](v55, v59, v60, ObjectType);
  v61 = v60;
  v62 = v70;
  v63 = v71;
  ((void (*)(char *, uint64_t))v71)(v61, v70);
  ((void (*)(char *, uint64_t))v63)(v59, v62);
  v57(v55, v58);
  OS_dispatch_source.resume()();
  *(_QWORD *)(v87 + 2112) = v48;
  swift_unknownObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v63)(v56, v62);
}

void specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
  uint64_t Strong;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = (_QWORD *)Strong;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      v19 = v6;
      *(_DWORD *)v5 = 136315394;
      v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      v9 = v1[2];
      v10 = v1[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v3, v4, "Provider - %s [%s]: Open timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v6, -1, -1);
      MEMORY[0x24956E018](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    v11 = (void *)v1[265];
    v12 = v11;
    if (AFDeviceSupportsSiriUOD() && MEMORY[0x24956E090](v1 + 190))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v13 = (void *)swift_allocError();
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)v14 = v11;
      *(_OWORD *)(v14 + 24) = xmmword_246F73690;
      swift_retain();
      v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v16 = (void *)swift_allocError();
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)v17 = v11;
      *(_OWORD *)(v17 + 24) = xmmword_246F73690;
      v18 = v11;
      RPCOspreyConnectionProvider.closeWithError(_:)(v16);
      swift_release();

    }
  }
}

{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = Strong;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      v19 = v6;
      *(_DWORD *)v5 = 136315394;
      v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      v9 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v3, v4, "Provider - %s [%s]: Open timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v6, -1, -1);
      MEMORY[0x24956E018](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenTimer()();
    v11 = *(void **)(v1 + 2104);
    v12 = v11;
    if (AFDeviceSupportsSiriUOD() && MEMORY[0x24956E090](v1 + 1504))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v13 = (void *)swift_allocError();
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)v14 = v11;
      *(_OWORD *)(v14 + 24) = xmmword_246F73690;
      swift_retain();
      v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v16 = (void *)swift_allocError();
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)v17 = v11;
      *(_OWORD *)(v17 + 24) = xmmword_246F73690;
      v18 = v11;
      NetworkConnectionProvider.closeWithError(_:)();
      swift_release();

    }
  }
}

uint64_t default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BEE5418];
  v3 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

void specialized ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53[2];
  uint64_t v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)();
  uint64_t v74;

  OUTLINED_FUNCTION_19();
  v3 = v0;
  v68 = OUTLINED_FUNCTION_159();
  v66 = *(_QWORD *)(v68 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  v65 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v6);
  v67 = (char *)v53 - v7;
  v8 = OUTLINED_FUNCTION_18();
  v63 = *(_QWORD *)(v8 - 8);
  v64 = v8;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OUTLINED_FUNCTION_53_0();
  v60 = *(_QWORD *)(v11 - 8);
  v61 = v11;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v12);
  v14 = OUTLINED_FUNCTION_56(v13, v53[0]);
  v59 = *(_QWORD *)(v14 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_91(v16, v53[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_13_5();
  v19 = MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_73_0(v19, v20, v21, v22, v23, v24, v25, v26, v53[0]);
  OUTLINED_FUNCTION_141();
  MEMORY[0x24BDAC7A8](v27);
  v69 = (uint64_t)v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_195();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_194();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_209();
  specialized ConnectionProviderProtocol.openSlowTimerInterval.getter(v32);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v33 = OUTLINED_FUNCTION_5_1();
  v34 = (void *)__swift_project_value_buffer(v33, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_48_1(v2, v1);
  OUTLINED_FUNCTION_63_0();
  Logger.logObject.getter();
  v35 = OUTLINED_FUNCTION_35_0();
  v36 = OUTLINED_FUNCTION_106((os_log_type_t)v35);
  v70 = v3;
  if (v36)
  {
    v55 = v35;
    v56 = v34;
    v57 = v14;
    v37 = OUTLINED_FUNCTION_2_2();
    v54 = OUTLINED_FUNCTION_2_2();
    v71 = v54;
    *(_DWORD *)v37 = 136315650;
    v38 = OUTLINED_FUNCTION_75_0();
    v40 = OUTLINED_FUNCTION_182(v38, v39);
    OUTLINED_FUNCTION_61_0(v40);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_93_0();
    v41 = OUTLINED_FUNCTION_135();
    OUTLINED_FUNCTION_58_0(v41);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_10_2();
    *(_WORD *)(v37 + 22) = 2080;
    v42 = v58;
    OUTLINED_FUNCTION_48_1(v58, v2);
    v43 = OUTLINED_FUNCTION_76_0(v42);
    OUTLINED_FUNCTION_130(v43, v44, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    OUTLINED_FUNCTION_173((uint64_t)v34);
    if (v45)
    {
      OUTLINED_FUNCTION_239();
    }
    else
    {
      OUTLINED_FUNCTION_85_0();
      OUTLINED_FUNCTION_48_1(v69, v42);
      OUTLINED_FUNCTION_216();
      v46 = OUTLINED_FUNCTION_90();
    }
    OUTLINED_FUNCTION_176(v46, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    v47 = OUTLINED_FUNCTION_136();
    OUTLINED_FUNCTION_83_0(v47);
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_232();
    OUTLINED_FUNCTION_89_0(&dword_246EC7000, v48, v49, "Provider - %s [%s]: Open slow timer scheduled (%s).");
    OUTLINED_FUNCTION_82_0();
    OUTLINED_FUNCTION_0_4();
  }
  OUTLINED_FUNCTION_64_0();
  OUTLINED_FUNCTION_23_3();

  OUTLINED_FUNCTION_220();
  v71 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, v50, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A]);
  OUTLINED_FUNCTION_46_1();
  v51 = *(id *)(v3 + 2072);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_237();
  OUTLINED_FUNCTION_126();
  OUTLINED_FUNCTION_227();
  v52 = OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_84_0();
  v73 = partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer();
  v74 = v52;
  v71 = MEMORY[0x24BDAC760];
  v72 = 1107296256;
  OUTLINED_FUNCTION_125((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_121();
  OUTLINED_FUNCTION_156();
  OUTLINED_FUNCTION_92_0();
  OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_155();
  OUTLINED_FUNCTION_80_0(v60);
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_210();
  OUTLINED_FUNCTION_118();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_94_0();
}

uint64_t specialized ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  NSObject *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t ObjectType;
  uint64_t v50;
  void *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _QWORD v65[2];
  uint64_t v66;
  int v67;
  uint64_t v68;
  os_log_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t aBlock[7];

  v1 = v0;
  v85 = type metadata accessor for DispatchTime();
  v83 = *(_QWORD *)(v85 - 8);
  v2 = MEMORY[0x24BDAC7A8](v85);
  v82 = (char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v84 = (char *)v65 - v4;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v80 = *(_QWORD *)(v5 - 8);
  v81 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v79 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v77 = *(_QWORD *)(v7 - 8);
  v78 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v76 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v72 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v65 - v14;
  v16 = type metadata accessor for DispatchTimeInterval();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v86 = (char *)v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v65 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v65 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v65 - v26;
  specialized ConnectionProviderProtocol.openSlowTimerInterval.getter((_QWORD *)((char *)v65 - v26));
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriNetwork);
  v29 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v75 = v27;
  v29(v25, v27, v16);
  swift_retain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
  v87 = v1;
  v70 = v16;
  if (v32)
  {
    v67 = v31;
    v68 = v17;
    v69 = v30;
    v71 = v22;
    v33 = swift_slowAlloc();
    v66 = swift_slowAlloc();
    aBlock[0] = v66;
    *(_DWORD *)v33 = 136315650;
    v34 = _typeName(_:qualified:)();
    v65[0] = v15;
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    v36 = NetworkConnectionProvider.connectionIdentifier.getter();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, aBlock);
    v65[1] = aBlock;
    v38 = v65[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    v29((char *)v38, v25, v16);
    __swift_storeEnumTagSinglePayload(v38, 0, 1, v16);
    outlined init with copy of NetworkConnectionProtocol?(v38, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v16) == 1)
    {
      v39 = 0xE100000000000000;
      v40 = 45;
      v22 = v71;
      v41 = v68;
    }
    else
    {
      v41 = v68;
      v22 = v71;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v71, v13, v16);
      v29(v86, v22, v16);
      v40 = String.init<A>(describing:)();
      v39 = v42;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v16);
    }
    outlined destroy of NetworkConnectionProtocol?(v38, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v71 = *(char **)(v41 + 8);
    ((void (*)(char *, uint64_t))v71)(v25, v16);
    v43 = v69;
    _os_log_impl(&dword_246EC7000, v69, (os_log_type_t)v67, "Provider - %s [%s]: Open slow timer scheduled (%s).", (uint8_t *)v33, 0x20u);
    v44 = v66;
    swift_arrayDestroy();
    MEMORY[0x24956E018](v44, -1, -1);
    MEMORY[0x24956E018](v33, -1, -1);

    v1 = v87;
  }
  else
  {
    swift_release_n();
    v71 = *(char **)(v17 + 8);
    ((void (*)(char *, uint64_t))v71)(v25, v16);

  }
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  v45 = v72;
  v46 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v47 = *(id *)(v1 + 2056);
  v48 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v73 + 8))(v45, v46);
  ObjectType = swift_getObjectType();
  v50 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer();
  aBlock[5] = v50;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_80;
  v51 = _Block_copy(aBlock);
  swift_retain();
  v52 = v76;
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  v53 = v79;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v51);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v53, v81);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v52, v78);
  swift_release();
  swift_release();
  v54 = v82;
  static DispatchTime.now()();
  v55 = v84;
  v56 = v75;
  DispatchTime.advanced(by:)();
  v57 = *(void (**)(char *, uint64_t))(v83 + 8);
  v58 = v85;
  v57(v54, v85);
  default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)((uint64_t)v22);
  v59 = v22;
  v60 = v86;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v86);
  MEMORY[0x24956D2B0](v55, v59, v60, ObjectType);
  v61 = v60;
  v62 = v70;
  v63 = v71;
  ((void (*)(char *, uint64_t))v71)(v61, v70);
  ((void (*)(char *, uint64_t))v63)(v59, v62);
  v57(v55, v58);
  OS_dispatch_source.resume()();
  *(_QWORD *)(v87 + 2120) = v48;
  swift_unknownObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v63)(v56, v62);
}

uint64_t specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  uint64_t result;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (_QWORD *)result;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      v16 = v6;
      *(_DWORD *)v5 = 136315394;
      v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      v9 = v1[2];
      v10 = v1[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v3, v4, "Provider - %s [%s]: Open slow timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v6, -1, -1);
      MEMORY[0x24956E018](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    v11 = (void *)v1[265];
    if (MEMORY[0x24956E090](v1 + 190))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v12 = (void *)swift_allocError();
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = v11;
      *(_OWORD *)(v13 + 24) = xmmword_246F736A0;
      v14 = v11;
      swift_retain();
      v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
    }
    return swift_release();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      v16 = v6;
      *(_DWORD *)v5 = 136315394;
      v7 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      v9 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v3, v4, "Provider - %s [%s]: Open slow timer fired.", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v6, -1, -1);
      MEMORY[0x24956E018](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
    v11 = *(void **)(v1 + 2104);
    if (MEMORY[0x24956E090](v1 + 1504))
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v12 = (void *)swift_allocError();
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = v11;
      *(_OWORD *)(v13 + 24) = xmmword_246F736A0;
      v14 = v11;
      swift_retain();
      v15 = v11;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_release();

      swift_unknownObjectRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized ConnectionProviderProtocol.setupConnectionUnviableTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(_QWORD, _QWORD);
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  char *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t (*v63)(char *, uint64_t);
  _QWORD v65[2];
  uint64_t v66;
  int v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(_QWORD, _QWORD);
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t aBlock[7];

  v1 = v0;
  v2 = type metadata accessor for DispatchTime();
  v83 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v82 = (char *)v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v84 = (char *)v65 - v5;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v79 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v77 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v76 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v74 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v73 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v72 = (void (*)(_QWORD, _QWORD))((char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v65 - v15;
  v17 = type metadata accessor for DispatchTimeInterval();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v71 = (char *)v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v85 = (char *)v65 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v65 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v65 - v26;
  Double.dispatchTimeInterval.getter((_QWORD *)((char *)v65 - v26), 2.0);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriNetwork);
  v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v75 = v27;
  v29(v25, v27, v17);
  swift_retain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, (os_log_type_t)v31))
  {
    v67 = v31;
    v68 = v30;
    v69 = v10;
    v70 = v2;
    v32 = swift_slowAlloc();
    v66 = swift_slowAlloc();
    aBlock[0] = v66;
    *(_DWORD *)v32 = 136315650;
    v33 = _typeName(_:qualified:)();
    v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    v35 = NetworkConnectionProvider.connectionIdentifier.getter();
    v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, aBlock);
    v65[1] = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2080;
    v29(v16, v25, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v17);
    v37 = v72;
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v17) == 1)
    {
      v38 = 0xE100000000000000;
      v39 = 45;
    }
    else
    {
      v41 = v85;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v18 + 32))(v85, v37, v17);
      v29(v71, v41, v17);
      v39 = String.init<A>(describing:)();
      v38 = v42;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v41, v17);
    }
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v72 = *(void (**)(_QWORD, _QWORD))(v18 + 8);
    v72(v25, v17);
    v43 = v68;
    _os_log_impl(&dword_246EC7000, v68, (os_log_type_t)v67, "Provider - %s [%s]: Unviable timer scheduled (%s).", (uint8_t *)v32, 0x20u);
    v44 = v66;
    swift_arrayDestroy();
    MEMORY[0x24956E018](v44, -1, -1);
    MEMORY[0x24956E018](v32, -1, -1);

    v40 = v70;
    v10 = v69;
  }
  else
  {
    swift_release_n();
    v72 = *(void (**)(_QWORD, _QWORD))(v18 + 8);
    v72(v25, v17);

    v40 = v2;
  }
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  v45 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v46 = *(id *)(v1 + 2056);
  v47 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  (*(void (**)(char *, uint64_t))(v74 + 8))(v45, v10);
  v48 = NetworkConnectionProvider.connectionIdentifier.getter();
  v50 = v49;
  ObjectType = swift_getObjectType();
  v52 = swift_allocObject();
  swift_weakInit();
  v53 = (_QWORD *)swift_allocObject();
  v53[2] = v52;
  v53[3] = v48;
  v53[4] = v50;
  aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer();
  aBlock[5] = (uint64_t)v53;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_34;
  v54 = _Block_copy(aBlock);
  swift_retain();
  v55 = v76;
  default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
  v56 = v79;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v54);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v56, v81);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v78);
  swift_release();
  swift_release();
  v57 = v82;
  static DispatchTime.now()();
  v58 = v84;
  v59 = v75;
  DispatchTime.advanced(by:)();
  v60 = *(void (**)(char *, uint64_t))(v83 + 8);
  v60(v57, v40);
  v61 = v85;
  default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v85);
  MEMORY[0x24956D2B0](v58, v59, v61, ObjectType);
  v62 = v61;
  v63 = (uint64_t (*)(char *, uint64_t))v72;
  v72(v62, v17);
  v60(v58, v40);
  OS_dispatch_source.resume()();
  *(_QWORD *)(v1 + 2136) = v47;
  swift_unknownObjectRelease();
  return v63(v59, v17);
}

void specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v0 + 2136))
  {
    v1 = v0;
    v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315394;
      v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v4, v5, "Provider - %s [%s]: Unviable timer cancelled", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v7, -1, -1);
      MEMORY[0x24956E018](v6, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    *(_QWORD *)(v1 + 2136) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_81_0();
  if (*(_QWORD *)(v0 + 2152))
  {
    v1 = v0;
    v2 = (void *)one-time initialization token for siriNetwork;
    OUTLINED_FUNCTION_163();
    if (v2 != (void *)-1)
      swift_once();
    v3 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_41_2(v3, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v4 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_27_0(v4))
    {
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_213();
      v5 = OUTLINED_FUNCTION_27_3(4.8151e-34);
      OUTLINED_FUNCTION_74_0(v5, v6, v7);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_115();
      v8 = OUTLINED_FUNCTION_22_4();
      OUTLINED_FUNCTION_43_1(v8);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_30_2(&dword_246EC7000, v9, v10, "Provider - %s [%s]: Unviable timer cancelled");
      OUTLINED_FUNCTION_26_2();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_64_0();
    *(_QWORD *)(v1 + 2152) = 0;
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_164();
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_3_6();
  }
  OUTLINED_FUNCTION_17_5();
}

uint64_t specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
    swift_beginAccess();
    outlined init with copy of NetworkConnectionProtocol?(v6 + 16, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    v7 = v14;
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v13, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v7)
    {
      if (NetworkConnectionProvider.connectionIdentifier.getter() == a2 && v8 == a3)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
          goto LABEL_11;
      }
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v11 = (void *)swift_allocError();
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      *(_OWORD *)(v12 + 24) = xmmword_246F736B0;
      NetworkConnectionProvider.closeWithError(_:)();

    }
LABEL_11:
    *(_QWORD *)(v6 + 2088) = 0;
    return swift_release();
  }
  return result;
}

void specialized ConnectionProviderProtocol.setupStaleConnectionTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  void (*v31)(_QWORD, _QWORD);
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD);
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(uint64_t, uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t *v72;
  uint64_t v73;
  int v74;
  os_log_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD, _QWORD);
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95[7];

  OUTLINED_FUNCTION_19();
  v2 = v0;
  v92 = OUTLINED_FUNCTION_159();
  v90 = *(_QWORD *)(v92 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_11_5();
  v89 = v4;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_117();
  v91 = v6;
  v7 = OUTLINED_FUNCTION_18();
  v87 = *(_QWORD *)(v7 - 8);
  v88 = v7;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_193();
  v86 = v9;
  v10 = OUTLINED_FUNCTION_53_0();
  v84 = *(_QWORD *)(v10 - 8);
  v85 = v10;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_193();
  v83 = v12;
  v13 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v82 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_117();
  v80 = v18;
  v19 = type metadata accessor for DispatchTimeInterval();
  OUTLINED_FUNCTION_148();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v21);
  v93 = (uint64_t **)((char *)&v72 - v22);
  OUTLINED_FUNCTION_20_4();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v72 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v72 - v27;
  Double.dispatchTimeInterval.getter((uint64_t *)((char *)&v72 - v27), *(double *)(v0 + 1696));
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v29 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_218(v29, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_48_1((uint64_t)v26, (uint64_t)v28);
  OUTLINED_FUNCTION_63_0();
  v30 = Logger.logObject.getter();
  v31 = (void (*)(_QWORD, _QWORD))static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
  v81 = v28;
  if (v32)
  {
    v74 = (int)v31;
    v75 = v30;
    v76 = v14;
    v77 = v13;
    v33 = OUTLINED_FUNCTION_2_2();
    v73 = OUTLINED_FUNCTION_2_2();
    v95[0] = v73;
    *(_DWORD *)v33 = 136315650;
    v34 = OUTLINED_FUNCTION_75_0();
    v35 = v19;
    v94 = OUTLINED_FUNCTION_182(v34, v36);
    OUTLINED_FUNCTION_217();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_201();
    *(_WORD *)(v33 + 12) = 2080;
    v37 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRetain();
    v38 = v37;
    v39 = v35;
    v94 = OUTLINED_FUNCTION_166(v38, v40, v95);
    v72 = v95;
    OUTLINED_FUNCTION_217();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_44_1();
    *(_WORD *)(v33 + 22) = 2080;
    v41 = v80;
    OUTLINED_FUNCTION_48_1((uint64_t)v80, (uint64_t)v26);
    OUTLINED_FUNCTION_76_0((uint64_t)v41);
    v42 = v79;
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v41, v79, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    OUTLINED_FUNCTION_173(v42);
    if (v43)
    {
      v47 = 0xE100000000000000;
      v45 = 45;
    }
    else
    {
      v44 = v93;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v1 + 32))(v93, v42, v39);
      OUTLINED_FUNCTION_48_1(v78, (uint64_t)v44);
      v45 = String.init<A>(describing:)();
      v47 = v46;
      OUTLINED_FUNCTION_102((uint64_t)v44, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    }
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v41, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_143();
    OUTLINED_FUNCTION_232();
    _os_log_impl(&dword_246EC7000, v75, v48, "Provider - %s [%s]: Stale connection timer scheduled (%s).", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }
  OUTLINED_FUNCTION_64_0();
  OUTLINED_FUNCTION_143();

  v49 = OUTLINED_FUNCTION_14_0();
  v50 = *(_QWORD *)(v2 + 2096);
  v51 = __CFADD__(v50, 1);
  v52 = v50 + 1;
  if (v51)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v49 + 16) = v52;
    v80 = v31;
    v53 = v49;
    specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
    v54 = OUTLINED_FUNCTION_220();
    v95[0] = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, v55, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
    v56 = v2;
    v57 = v92;
    OUTLINED_FUNCTION_51_1();
    v79 = v19;
    OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A]);
    v58 = v82;
    OUTLINED_FUNCTION_57_0();
    v59 = *(id *)(v56 + 2072);
    OUTLINED_FUNCTION_132();
    OUTLINED_FUNCTION_237();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v58, v13);
    v60 = OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_71_0();
    v61 = OUTLINED_FUNCTION_6();
    *(_QWORD *)(v61 + 16) = v13;
    *(_QWORD *)(v61 + 24) = v53;
    v78 = v53;
    v95[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer();
    v95[5] = v61;
    v95[0] = MEMORY[0x24BDAC760];
    v95[1] = 1107296256;
    v62 = OUTLINED_FUNCTION_125((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
    OUTLINED_FUNCTION_150();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_121();
    v63 = v86;
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v62);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v63, v88);
    OUTLINED_FUNCTION_80_0(v84);
    OUTLINED_FUNCTION_95();
    OUTLINED_FUNCTION_78_0();
    v64 = v89;
    OUTLINED_FUNCTION_210();
    v65 = v91;
    v66 = v81;
    DispatchTime.advanced(by:)();
    v67 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v67(v64, v57);
    v68 = v93;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v93);
    MEMORY[0x24956D2B0](v65, v66, v68, v60);
    v69 = v68;
    v70 = v79;
    v71 = (void (*)(char *, uint64_t))v80;
    v80(v69, v79);
    v67(v65, v57);
    OUTLINED_FUNCTION_199();
    *(_QWORD *)(v56 + 2144) = v54;
    swift_unknownObjectRelease();
    v71(v66, v70);
    swift_release();
    OUTLINED_FUNCTION_1_1();
  }
}

uint64_t specialized ConnectionProviderProtocol.setupStaleConnectionTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  NSObject *v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  unint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  _QWORD v70[2];
  uint64_t v71;
  int v72;
  os_log_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t aBlock[7];

  v1 = v0;
  v89 = type metadata accessor for DispatchTime();
  v87 = *(_QWORD *)(v89 - 8);
  v2 = MEMORY[0x24BDAC7A8](v89);
  v86 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v88 = (char *)v70 - v4;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v84 = *(_QWORD *)(v5 - 8);
  v85 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v83 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v81 = *(_QWORD *)(v7 - 8);
  v82 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v80 = (char *)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v76 = (char *)v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v70 - v15;
  v17 = type metadata accessor for DispatchTimeInterval();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v75 = (char *)v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v90 = (char *)v70 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v70 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v70 - v26;
  Double.dispatchTimeInterval.getter((_QWORD *)((char *)v70 - v26), *(double *)(v0 + 1680));
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.siriNetwork);
  v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v29(v25, v27, v17);
  swift_retain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
  v79 = v27;
  if (v32)
  {
    v72 = v31;
    v73 = v30;
    v33 = swift_slowAlloc();
    v71 = swift_slowAlloc();
    aBlock[0] = v71;
    *(_DWORD *)v33 = 136315650;
    v34 = _typeName(_:qualified:)();
    v70[0] = v14;
    v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    v36 = NetworkConnectionProvider.connectionIdentifier.getter();
    v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, aBlock);
    v70[1] = aBlock;
    v38 = v70[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v74 = v1;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    v29(v16, v25, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v17);
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v16, v38, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    if (__swift_getEnumTagSinglePayload(v38, 1, v17) == 1)
    {
      v39 = 0xE100000000000000;
      v40 = 45;
    }
    else
    {
      v42 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v90, v38, v17);
      v29(v75, v42, v17);
      v40 = String.init<A>(describing:)();
      v39 = v43;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v42, v17);
    }
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)&demangling cache variable for type metadata for DispatchTimeInterval?);
    v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v18 + 8);
    v41(v25, v17);
    v44 = v73;
    _os_log_impl(&dword_246EC7000, v73, (os_log_type_t)v72, "Provider - %s [%s]: Stale connection timer scheduled (%s).", (uint8_t *)v33, 0x20u);
    v45 = v71;
    swift_arrayDestroy();
    MEMORY[0x24956E018](v45, -1, -1);
    MEMORY[0x24956E018](v33, -1, -1);

    v1 = v74;
  }
  else
  {
    swift_release_n();
    v41 = *(void (**)(char *, uint64_t))(v18 + 8);
    v41(v25, v17);

  }
  result = swift_allocObject();
  v47 = *(_QWORD *)(v1 + 2080);
  v48 = __CFADD__(v47, 1);
  v49 = v47 + 1;
  if (v48)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(result + 16) = v49;
    v75 = (char *)v41;
    v50 = result;
    specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
    type metadata accessor for OS_dispatch_source();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    v51 = v76;
    v52 = v78;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v53 = *(id *)(v1 + 2056);
    v54 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(char *, uint64_t))(v77 + 8))(v51, v52);
    ObjectType = swift_getObjectType();
    v56 = swift_allocObject();
    swift_weakInit();
    v57 = swift_allocObject();
    *(_QWORD *)(v57 + 16) = v56;
    *(_QWORD *)(v57 + 24) = v50;
    v74 = v50;
    aBlock[4] = (uint64_t)partial apply for specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer();
    aBlock[5] = v57;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_53;
    v58 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v59 = v17;
    v60 = v80;
    default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(ObjectType);
    v61 = v83;
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v61, v85);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v60, v82);
    swift_release();
    swift_release();
    v62 = v86;
    static DispatchTime.now()();
    v63 = v88;
    v64 = v79;
    DispatchTime.advanced(by:)();
    v65 = *(void (**)(char *, uint64_t))(v87 + 8);
    v66 = v89;
    v65(v62, v89);
    v67 = v90;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v90);
    MEMORY[0x24956D2B0](v63, v64, v67, ObjectType);
    v68 = v67;
    v69 = (void (*)(char *, uint64_t))v75;
    ((void (*)(char *, uint64_t))v75)(v68, v59);
    v65(v63, v66);
    OS_dispatch_source.resume()();
    *(_QWORD *)(v1 + 2128) = v54;
    swift_unknownObjectRelease();
    v69(v64, v59);
    return swift_release();
  }
  return result;
}

void specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(v0 + 2128))
  {
    v1 = v0;
    v2 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v2 != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315394;
      v8 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v4, v5, "Provider - %s [%s]: Stale connection timer cancelled.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v7, -1, -1);
      MEMORY[0x24956E018](v6, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    *(_QWORD *)(v1 + 2128) = 0;
    swift_unknownObjectRelease();
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_81_0();
  if (*(_QWORD *)(v0 + 2144))
  {
    v1 = v0;
    v2 = (void *)one-time initialization token for siriNetwork;
    OUTLINED_FUNCTION_163();
    if (v2 != (void *)-1)
      swift_once();
    v3 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_41_2(v3, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v4 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_27_0(v4))
    {
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_213();
      v5 = OUTLINED_FUNCTION_27_3(4.8151e-34);
      OUTLINED_FUNCTION_74_0(v5, v6, v7);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_115();
      v8 = OUTLINED_FUNCTION_22_4();
      OUTLINED_FUNCTION_43_1(v8);
      OUTLINED_FUNCTION_10_5();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_30_2(&dword_246EC7000, v9, v10, "Provider - %s [%s]: Stale connection timer cancelled.");
      OUTLINED_FUNCTION_26_2();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_64_0();
    *(_QWORD *)(v1 + 2144) = 0;
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_164();
    OUTLINED_FUNCTION_149();
    OUTLINED_FUNCTION_3_6();
  }
  OUTLINED_FUNCTION_17_5();
}

uint64_t specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[3];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = (_QWORD *)result;
    v5 = (_QWORD *)(a2 + 16);
    swift_beginAccess();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    swift_retain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v18[0] = v17;
      *(_DWORD *)v9 = 136316162;
      v10 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      v13 = v4[2];
      v12 = v4[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 28) = 2048;
      swift_beginAccess();
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v9 + 38) = 2048;
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_246EC7000, v7, v8, "Provider - %s [%s]: Stale connection timer check. Connection in stale %{BOOL}d. Last read/write counter value %lu, current %lu", (uint8_t *)v9, 0x30u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v17, -1, -1);
      MEMORY[0x24956E018](v9, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    swift_beginAccess();
    v14 = v4[262];
    if (*v5 == v14)
    {
      specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
      if (MEMORY[0x24956E090](v4 + 190))
      {
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        v15 = (void *)swift_allocError();
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)v16 = 7;
        *(_OWORD *)(v16 + 24) = xmmword_246F72F10;
        swift_retain();
        specialized BackgroundConnection.connectionProvider(_:received:)();
        swift_release();

        swift_unknownObjectRelease();
      }
      return swift_release();
    }
    else
    {
      swift_release();
      result = swift_beginAccess();
      *v5 = v14;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[3];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    v5 = (_QWORD *)(a2 + 16);
    swift_beginAccess();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    swift_retain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v18[0] = v17;
      *(_DWORD *)v9 = 136316162;
      v10 = _typeName(_:qualified:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      v12 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 28) = 2048;
      swift_beginAccess();
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v9 + 38) = 2048;
      swift_release();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_246EC7000, v7, v8, "Provider - %s [%s]: Stale connection timer check. Connection in stale %{BOOL}d. Last read/write counter value %lu, current %lu", (uint8_t *)v9, 0x30u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v17, -1, -1);
      MEMORY[0x24956E018](v9, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    swift_beginAccess();
    v14 = *(_QWORD *)(v4 + 2080);
    if (*v5 == v14)
    {
      specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
      if (MEMORY[0x24956E090](v4 + 1504))
      {
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        v15 = (void *)swift_allocError();
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)v16 = 7;
        *(_OWORD *)(v16 + 24) = xmmword_246F72F10;
        swift_retain();
        specialized BackgroundConnection.connectionProvider(_:received:)();
        swift_release();

        swift_unknownObjectRelease();
      }
      return swift_release();
    }
    else
    {
      swift_release();
      result = swift_beginAccess();
      *v5 = v14;
    }
  }
  return result;
}

void specialized ConnectionProviderProtocol.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[520];

  OUTLINED_FUNCTION_28(v3, (const void *)(v1 + 1552));
  ConnectionConfiguration.hash(into:)(a1);
}

{
  uint64_t v1;
  _BYTE __dst[516];

  memcpy(__dst, (const void *)(v1 + 1536), sizeof(__dst));
  ConnectionConfiguration.hash(into:)(a1);
}

uint64_t specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD *);
  void (*v4)(_QWORD *);
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t (*v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t (*v64)();
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t result;
  _BYTE v70[32];
  _BYTE v71[712];
  _BYTE v72[712];
  _BYTE v73[712];
  _BYTE v74[712];
  _BYTE v75[712];
  _BYTE v76[712];
  _BYTE v77[712];
  _BYTE v78[712];
  _BYTE v79[712];
  _BYTE v80[712];
  _BYTE v81[712];
  _BYTE v82[712];
  _BYTE v83[712];
  _BYTE v84[712];
  _BYTE v85[712];
  _BYTE v86[712];
  _QWORD v87[180];
  _BYTE v88[1440];
  _BYTE v89[1440];
  _BYTE v90[736];
  _BYTE v91[712];
  uint64_t v92;
  _BYTE v93[16];
  _BYTE v94[712];
  _BYTE v95[712];
  _BYTE v96[712];
  _BYTE v97[712];
  _BYTE v98[712];
  _BYTE v99[712];
  _BYTE v100[712];
  _BYTE v101[712];
  _BYTE v102[712];
  _BYTE v103[712];
  _BYTE v104[712];
  _BYTE v105[712];
  _BYTE v106[712];
  _BYTE v107[712];
  _BYTE v108[712];
  _BYTE v109[712];
  _BYTE v110[712];
  _BYTE v111[712];
  _BYTE v112[712];
  _BYTE v113[712];
  _QWORD v114[47];
  char v115;
  _BYTE v116[320];
  _BYTE v117[320];
  _BYTE v118[320];
  _BYTE v119[320];
  _BYTE v120[320];
  _BYTE v121[320];
  _BYTE v122[320];
  _BYTE v123[320];
  _BYTE v124[320];
  _BYTE v125[320];
  _QWORD v126[2];
  uint64_t v127;
  _BYTE v128[320];
  _BYTE v129[320];
  _BYTE v130[320];
  _QWORD v131[33];
  char v132;
  _QWORD v133[31];
  char v134;
  _QWORD v135[40];
  _QWORD v136[37];
  char v137;
  _QWORD v138[35];
  char v139;
  _QWORD v140[39];
  char v141;
  int v142;
  char v143;
  _BYTE v144[16];
  uint64_t v145;
  char v146;
  _BYTE v147[712];
  _BYTE v148[720];

  v2 = MEMORY[0x24BDAC7A8](a1);
  v4 = v3;
  v5 = v2;
  v6 = *(_QWORD *)(v2 + 16);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v2 + 24, (uint64_t)v93, &demangling cache variable for type metadata for String?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v5 + 48, (uint64_t)&v92, &demangling cache variable for type metadata for UInt32?);
  v7 = (const void *)(v1 + 56);
  swift_beginAccess();
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v92, v1 + 104, &demangling cache variable for type metadata for UInt32?);
  *(_QWORD *)(v1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v93, v1 + 80, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)v93);
  swift_bridgeObjectRelease();
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v1 + 624, (uint64_t)v147, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v147, (uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v148) == 1)
  {
    _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v114);
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v113);
    if (one-time initialization token for sharedNetworkAnalytics != -1)
      swift_once();
    v8 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
    LODWORD(v87[0]) = 0;
    v87[1] = 0;
    v87[2] = 0xE000000000000000;
    v87[3] = 0;
    v87[4] = 0xE000000000000000;
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v114, (uint64_t)&v87[5], (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    v87[46] = 0;
    v87[45] = 0;
    LOBYTE(v87[47]) = 1;
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v113, (uint64_t)&v87[48], (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    v87[85] = MEMORY[0x24BEE4AF8];
    v87[86] = MEMORY[0x24BEE4AF8];
    LODWORD(v87[87]) = 4;
    v87[88] = v8;
    memcpy(v88, v87, 0x2C8uLL);
    destructiveProjectEnumData for ConnectionConfigurationError(v88);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v1 + 624, (uint64_t)v89, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v88, v1 + 624, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    v9 = v8;
    outlined release of ConnectionSnapshotReport?((uint64_t)v89);
  }
  memcpy(v89, (const void *)(v1 + 56), 0x599uLL);
  memcpy(v88, (const void *)(v1 + 56), 0x599uLL);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v89[568], (uint64_t)v90, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v90) == 1
    || (_s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v88[608], (uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), memcpy(v87, v88, 0x599uLL), outlined retain of ConnectionMetrics((uint64_t)v89), outlined retain of ConnectionNetworkReport?((__n128 *)v113), outlined release of ConnectionMetrics((uint64_t)v87), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v113, (uint64_t)v114, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v114) == 1))
  {
    type metadata accessor for NetworkConnectionProvider();
    lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, v10, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnectionProvider, (uint64_t)&protocol conformance descriptor for NetworkConnectionProvider);
    v11 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
    v13 = v12;
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v12 + 568, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v88) != 1)
    {
      v111[0] = 1;
      v110[0] = 1;
      v109[0] = 1;
      v108[0] = 1;
      v107[0] = 1;
      v106[0] = 1;
      v105[0] = 1;
      v104[0] = 1;
      v103[0] = 1;
      v102[0] = 1;
      v101[0] = 1;
      v100[0] = 1;
      v99[0] = 1;
      v98[0] = 1;
      v97[0] = 1;
      *(_DWORD *)v113 = 0;
      v113[4] = 1;
      memset(&v113[8], 0, 24);
      v113[32] = 1;
      memset(&v113[40], 0, 52);
      v113[92] = 1;
      *(_DWORD *)&v113[96] = 0;
      v113[100] = 1;
      *(_QWORD *)&v113[104] = MEMORY[0x24BEE4B00];
      memset(&v113[112], 0, 24);
      v113[136] = 1;
      *(_QWORD *)&v113[144] = 0;
      v113[152] = 1;
      v113[168] = 1;
      *(_QWORD *)&v113[160] = 0;
      *(_QWORD *)&v113[176] = 0;
      v113[184] = 1;
      v113[200] = 1;
      *(_QWORD *)&v113[192] = 0;
      *(_QWORD *)&v113[208] = 0;
      v113[216] = 1;
      memset(&v113[224], 0, 24);
      v113[248] = 1;
      *(_QWORD *)&v113[256] = 0;
      v113[264] = 1;
      v113[265] = 0;
      v113[280] = 1;
      *(_QWORD *)&v113[272] = 0;
      *(_QWORD *)&v113[288] = 0;
      v113[296] = 1;
      *(_QWORD *)&v113[304] = 0;
      v113[312] = 1;
      destructiveProjectEnumData for ConnectionConfigurationError(v113);
      v14 = v13 + 608;
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v14, (uint64_t)v114, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v113, v14, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
      outlined retain of ConnectionNetworkReport?((__n128 *)v114);
    }
    ((void (*)(_BYTE *, _QWORD))v11)(v112, 0);
  }
  else
  {
    outlined retain of ConnectionNetworkReport?((__n128 *)v113);
  }
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v5 + 568, (uint64_t)v91, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  type metadata accessor for NetworkConnectionProvider();
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, v15, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnectionProvider, (uint64_t)&protocol conformance descriptor for NetworkConnectionProvider);
  v16 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v18 = v17;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v17 + 568, (uint64_t)v85, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v85, (uint64_t)v86, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v86) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v114, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v114) == 1)
    {
      v19 = 0uLL;
      v20 = 1;
    }
    else
    {
      v19 = *(_OWORD *)&v114[45];
      v20 = v115 & 1;
    }
    *(_OWORD *)(v18 + 928) = v19;
    *(_BYTE *)(v18 + 944) = v20;
  }
  ((void (*)(_BYTE *, _QWORD))v16)(v88, 0);
  v21 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v23 = v22;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v22 + 568, (uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v83, (uint64_t)v84, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v84) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v23 + 608, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v88) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v112, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v112) == 1
        || (memcpy(v113, v112, sizeof(v113)),
            _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v113[40], (uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v116, (uint64_t)&v142, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)&v142) == 1))
      {
        v24 = 0;
        v25 = 1;
      }
      else
      {
        v24 = v142;
        v25 = v143 & 1;
      }
      *(_DWORD *)(v23 + 608) = v24;
      *(_BYTE *)(v23 + 612) = v25;
    }
  }
  ((void (*)(_BYTE *, _QWORD))v21)(v111, 0);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v94, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v94) != 1)
  {
    memcpy(v95, v94, sizeof(v95));
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v95[40], (uint64_t)v125, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v125, (uint64_t)v126, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v126) != 1)
    {
      v26 = v127;
      if (v127)
      {
        v27 = v126[1];
        swift_bridgeObjectRetain();
        v28 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
        v30 = v29;
        _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v29 + 568, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v88) != 1)
        {
          _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v30 + 608, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v110, (uint64_t)v111, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v111) != 1)
          {
            *(_QWORD *)(v30 + 616) = v27;
            *(_QWORD *)(v30 + 624) = v26;
          }
        }
        swift_bridgeObjectRelease();
        ((void (*)(_BYTE *, _QWORD))v28)(v109, 0);
      }
    }
  }
  v31 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v33 = v32;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v32 + 568, (uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v81, (uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v82) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v33 + 608, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v88) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v110) == 1
        || (memcpy(v111, v110, sizeof(v111)),
            _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v111[40], (uint64_t)v117, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v117, (uint64_t)v140, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v140) == 1))
      {
        v34 = 0;
        v35 = 1;
      }
      else
      {
        v34 = v140[38];
        v35 = v141 & 1;
      }
      *(_QWORD *)(v33 + 912) = v34;
      *(_BYTE *)(v33 + 920) = v35;
    }
  }
  ((void (*)(_BYTE *, _QWORD))v31)(v109, 0);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v96) != 1)
  {
    memcpy(v97, v96, sizeof(v97));
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v97[40], (uint64_t)v124, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v124, (uint64_t)v128, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v128) != 1)
    {
      v36 = v128[265];
      v37 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
      v39 = v38;
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v38 + 568, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v88) != 1)
      {
        _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v39 + 608, (uint64_t)v108, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v108, (uint64_t)v109, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
        if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v109) != 1)
          *(_BYTE *)(v39 + 873) = v36;
      }
      ((void (*)(_BYTE *, _QWORD))v37)(v107, 0);
    }
  }
  v40 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v42 = v41;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v41 + 568, (uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v79, (uint64_t)v80, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v80) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v42 + 608, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v88) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v108, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v108) == 1
        || (memcpy(v109, v108, sizeof(v109)),
            _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v109[40], (uint64_t)v118, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v118, (uint64_t)v138, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v138) == 1))
      {
        v43 = 0;
        v44 = 1;
      }
      else
      {
        v43 = v138[34];
        v44 = v139 & 1;
      }
      *(_QWORD *)(v42 + 880) = v43;
      *(_BYTE *)(v42 + 888) = v44;
    }
  }
  ((void (*)(_BYTE *, _QWORD))v40)(v107, 0);
  v45 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v47 = v46;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v46 + 568, (uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v77, (uint64_t)v78, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v78) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v47 + 608, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v88) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v106, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v106) == 1
        || (memcpy(v107, v106, sizeof(v107)),
            _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v107[40], (uint64_t)v119, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v119, (uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v136) == 1))
      {
        v48 = 0;
        v49 = 1;
      }
      else
      {
        v48 = v136[36];
        v49 = v137 & 1;
      }
      *(_QWORD *)(v47 + 896) = v48;
      *(_BYTE *)(v47 + 904) = v49;
    }
  }
  ((void (*)(_BYTE *, _QWORD))v45)(v105, 0);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v98, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v98) != 1)
  {
    memcpy(v99, v98, sizeof(v99));
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v99[40], (uint64_t)v123, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v123, (uint64_t)v129, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v129) != 1)
    {
      memcpy(v130, v129, 0x139uLL);
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v130[24], (uint64_t)v144, &demangling cache variable for type metadata for Double?);
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v144, (uint64_t)&v145, &demangling cache variable for type metadata for Double?);
      if ((v146 & 1) == 0)
      {
        v50 = v145;
        v51 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
        v53 = v52;
        _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v52 + 568, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
        if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v88) != 1)
        {
          _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v53 + 608, (uint64_t)v104, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v104, (uint64_t)v105, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
          if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v105) != 1)
          {
            *(_QWORD *)(v53 + 632) = v50;
            *(_BYTE *)(v53 + 640) = 0;
          }
        }
        ((void (*)(_BYTE *, _QWORD))v51)(v103, 0);
      }
    }
  }
  v54 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v56 = v55;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v55 + 568, (uint64_t)v75, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v75, (uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v76) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v56 + 608, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v88) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v104, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v104) == 1
        || (memcpy(v105, v104, sizeof(v105)),
            _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v105[40], (uint64_t)v120, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v120, (uint64_t)v135, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v135) == 1))
      {
        v57 = 0;
        v58 = 0;
      }
      else
      {
        v57 = v135[5];
        v58 = swift_bridgeObjectRetain();
      }
      *(_QWORD *)(v56 + 648) = v57;
      *(_QWORD *)(v56 + 656) = v58;
      swift_bridgeObjectRelease();
    }
  }
  ((void (*)(_BYTE *, _QWORD))v54)(v103, 0);
  v59 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v61 = v60;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v60 + 568, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v73, (uint64_t)v74, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v74) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v61 + 608, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v88) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v102, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v102) == 1
        || (memcpy(v103, v102, sizeof(v103)),
            _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v103[40], (uint64_t)v121, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v121, (uint64_t)v133, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v133) == 1))
      {
        v62 = 0;
        v63 = 1;
      }
      else
      {
        v62 = v133[30];
        v63 = v134 & 1;
      }
      *(_QWORD *)(v61 + 848) = v62;
      *(_BYTE *)(v61 + 856) = v63;
    }
  }
  ((void (*)(_BYTE *, _QWORD))v59)(v101, 0);
  v64 = protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider();
  v66 = v65;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v65 + 568, (uint64_t)v71, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v71, (uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v72) != 1)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v66 + 608, (uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, (uint64_t)v88, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v88) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v91, (uint64_t)v100, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v100) == 1
        || (memcpy(v101, v100, sizeof(v101)),
            _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v101[40], (uint64_t)v122, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v122, (uint64_t)v131, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?), _s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)v131) == 1))
      {
        v67 = 0;
        v68 = 1;
      }
      else
      {
        v67 = v131[32];
        v68 = v132 & 1;
      }
      *(_QWORD *)(v66 + 864) = v67;
      *(_BYTE *)(v66 + 872) = v68;
    }
  }
  result = ((uint64_t (*)(_BYTE *, _QWORD))v64)(v70, 0);
  if (v4)
  {
    memcpy(v88, v7, 0x599uLL);
    memcpy(v87, v7, 0x599uLL);
    outlined retain of ConnectionMetrics((uint64_t)v88);
    v4(v87);
    return outlined release of ConnectionMetrics((uint64_t)v88);
  }
  return result;
}

void specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  _OWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  void *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  const void *v19;
  unint64_t *v20;
  unint64_t *v21;
  id v22;
  unint64_t *v23;
  const void *v24;
  unint64_t *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _QWORD);
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  __int128 v45;
  char v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  unint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t *v106;
  unint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  unint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  unint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  uint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  unint64_t *v152;
  unint64_t *v153;
  char v154[32];
  _BYTE v155[712];
  _BYTE v156[712];
  _BYTE v157[712];
  _BYTE v158[712];
  _BYTE v159[712];
  _BYTE v160[712];
  _BYTE v161[712];
  _BYTE v162[712];
  _BYTE v163[712];
  _BYTE v164[712];
  _BYTE v165[712];
  _BYTE v166[712];
  uint64_t v167;
  _BYTE v168[712];
  uint64_t v169;
  _BYTE v170[712];
  int v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  void *v182;
  _BYTE v183[608];
  uint64_t v184;
  _BYTE v185[568];
  uint64_t v186;
  _BYTE v187[736];
  _BYTE v188[712];
  uint64_t v189;
  _BYTE v190[16];
  _BYTE v191[712];
  uint64_t v192;
  uint64_t v193;
  _BYTE v194[712];
  char v195[40];
  uint64_t v196;
  _BYTE v197[712];
  char v198[40];
  uint64_t v199;
  _BYTE v200[712];
  _BYTE v201[712];
  _BYTE v202[712];
  _BYTE v203[712];
  _BYTE v204[712];
  char v205[712];
  _BYTE v206[712];
  _BYTE v207[712];
  _BYTE v208[712];
  _BYTE v209[712];
  _BYTE v210[712];
  char v211[40];
  uint64_t v212;
  _BYTE v213[712];
  int v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  _BYTE v220[48];
  int v221;
  char v222;
  int v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  char v245;
  char v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  char v252;
  _BYTE v253[712];
  _BYTE v254[320];
  _BYTE v255[320];
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _BYTE v261[320];
  _BYTE v262[320];
  _BYTE v263[320];
  _QWORD v264[2];
  _OWORD *v265;
  _BYTE v266[320];
  _BYTE v267[320];
  _BYTE v268[320];
  _BYTE v269[320];
  _BYTE v270[320];
  _QWORD v271[40];
  _BYTE v272[320];
  _BYTE v273[320];
  _BYTE v274[320];
  _BYTE v275[320];
  _BYTE v276[16];
  uint64_t v277;
  _BYTE v278[712];
  _BYTE v279[720];

  OUTLINED_FUNCTION_19();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = v3;
  v5 = v2;
  v6 = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_24_2(v2 + 24, (uint64_t)v190);
  OUTLINED_FUNCTION_103(v5 + 48, (uint64_t)&v189);
  v7 = (const void *)(v0 + 72);
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_103((uint64_t)&v189, v0 + 120);
  v8 = *(_OWORD **)(v0 + 88);
  *(_QWORD *)(v0 + 88) = v6;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_115();
  OUTLINED_FUNCTION_24_2((uint64_t)v190, v0 + 96);
  outlined retain of String?((uint64_t)v190);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_24_2(v0 + 640, (uint64_t)v278);
  OUTLINED_FUNCTION_24_2((uint64_t)v278, (uint64_t)v279);
  OUTLINED_FUNCTION_3_2((uint64_t)v279);
  if (v118)
  {
    v9 = OUTLINED_FUNCTION_161();
    _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v9);
    v10 = OUTLINED_FUNCTION_221();
    _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v10);
    if (one-time initialization token for sharedNetworkAnalytics != -1)
      swift_once();
    v11 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
    v171 = 0;
    v172 = 0;
    v173 = 0xE000000000000000;
    v174 = 0;
    v175 = 0xE000000000000000;
    v12 = OUTLINED_FUNCTION_161();
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v12, v13, v14);
    v177 = 0;
    v176 = 0;
    v178 = 1;
    v15 = OUTLINED_FUNCTION_221();
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v15, v16, v17);
    v179 = MEMORY[0x24BEE4AF8];
    v180 = MEMORY[0x24BEE4AF8];
    v181 = 4;
    v182 = v11;
    OUTLINED_FUNCTION_98();
    OUTLINED_FUNCTION_215();
    OUTLINED_FUNCTION_33_2(v18, v19);
    v20 = OUTLINED_FUNCTION_98();
    destructiveProjectEnumData for ConnectionConfigurationError(v20);
    OUTLINED_FUNCTION_24_2(v0 + 640, (uint64_t)v185);
    v21 = OUTLINED_FUNCTION_98();
    OUTLINED_FUNCTION_24_2((uint64_t)v21, v0 + 640);
    v22 = v11;
    outlined release of ConnectionSnapshotReport?((uint64_t)v185);
  }
  OUTLINED_FUNCTION_22_1(v185, (const void *)(v0 + 72));
  OUTLINED_FUNCTION_22_1(v183, (const void *)(v0 + 72));
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v186, (uint64_t)v187, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  OUTLINED_FUNCTION_3_2((uint64_t)v187);
  if (v118)
    goto LABEL_9;
  OUTLINED_FUNCTION_25_3((uint64_t)&v184, (uint64_t)&v214);
  v23 = OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_22_1(v23, v24);
  outlined retain of ConnectionMetrics((uint64_t)v185);
  OUTLINED_FUNCTION_222();
  outlined release of ConnectionMetrics((uint64_t)&v171);
  OUTLINED_FUNCTION_25_3((uint64_t)&v214, (uint64_t)v253);
  v25 = OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_5_2((uint64_t)v25);
  if (v118)
  {
LABEL_9:
    type metadata accessor for RPCOspreyConnectionProvider();
    OUTLINED_FUNCTION_34_2(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, v26, (uint64_t (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider, (uint64_t)&protocol conformance descriptor for RPCOspreyConnectionProvider);
    RPCOspreyConnectionProvider.connectionMetrics.modify();
    v28 = v27;
    v30 = v29;
    v8 = &demangling cache variable for type metadata for ConnectionSnapshotReport?;
    OUTLINED_FUNCTION_215();
    OUTLINED_FUNCTION_103(v31, v32);
    v33 = OUTLINED_FUNCTION_49_1();
    OUTLINED_FUNCTION_103((uint64_t)v33, v34);
    OUTLINED_FUNCTION_3_2((uint64_t)v183);
    if (!v118)
    {
      v211[0] = 1;
      v210[0] = 1;
      v209[0] = 1;
      v208[0] = 1;
      v207[0] = 1;
      v206[0] = 1;
      v205[0] = 1;
      v204[0] = 1;
      v203[0] = 1;
      v202[0] = 1;
      v201[0] = 1;
      v200[0] = 1;
      v198[0] = 1;
      v197[0] = 1;
      v195[0] = 1;
      v214 = 0;
      v215 = 1;
      v217 = 0;
      v216 = 0;
      v219 = 1;
      v221 = 0;
      memset(v220, 0, sizeof(v220));
      v222 = 1;
      v223 = 0;
      v224 = 1;
      v218 = 0;
      v225 = MEMORY[0x24BEE4B00];
      v227 = 0;
      v226 = 0;
      v229 = 1;
      v228 = 0;
      v230 = 0;
      v231 = 1;
      v233 = 1;
      v232 = 0;
      v234 = 0;
      v235 = 1;
      v237 = 1;
      v236 = 0;
      v238 = 0;
      v239 = 1;
      v241 = 0;
      v240 = 0;
      v243 = 1;
      v242 = 0;
      v244 = 0;
      v245 = 1;
      v246 = 0;
      v248 = 1;
      v247 = 0;
      v249 = 0;
      v250 = 1;
      v251 = 0;
      v252 = 1;
      v35 = OUTLINED_FUNCTION_221();
      destructiveProjectEnumData for ConnectionConfigurationError(v35);
      v36 = v30 + 608;
      v8 = &demangling cache variable for type metadata for ConnectionNetworkReport?;
      OUTLINED_FUNCTION_103(v36, (uint64_t)v253);
      v37 = OUTLINED_FUNCTION_221();
      OUTLINED_FUNCTION_103((uint64_t)v37, v36);
      v38 = (__n128 *)OUTLINED_FUNCTION_161();
      outlined retain of ConnectionNetworkReport?(v38);
    }
    v28(v213, 0);
  }
  else
  {
    OUTLINED_FUNCTION_222();
  }
  OUTLINED_FUNCTION_2_11(v5 + 568, (uint64_t)v188);
  type metadata accessor for RPCOspreyConnectionProvider();
  OUTLINED_FUNCTION_34_2(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, v39, (uint64_t (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider, (uint64_t)&protocol conformance descriptor for RPCOspreyConnectionProvider);
  OUTLINED_FUNCTION_98();
  OUTLINED_FUNCTION_12_4();
  v42 = OUTLINED_FUNCTION_190(v40, v41);
  OUTLINED_FUNCTION_2_11(v42, v43 + 1824);
  OUTLINED_FUNCTION_2_11((uint64_t)&v169, (uint64_t)v170);
  OUTLINED_FUNCTION_3_2((uint64_t)v170);
  if (!v118)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v188, (uint64_t)v253, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
    v44 = OUTLINED_FUNCTION_161();
    OUTLINED_FUNCTION_3_2((uint64_t)v44);
    if (v118)
    {
      v45 = 0uLL;
      v46 = 1;
    }
    else
    {
      v45 = *(_OWORD *)&v253[360];
      v46 = v253[376] & 1;
    }
    v8[58] = v45;
    *((_BYTE *)v8 + 944) = v46;
  }
  v47 = OUTLINED_FUNCTION_98();
  OUTLINED_FUNCTION_39_2((uint64_t)v47);
  OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_12_4();
  v50 = OUTLINED_FUNCTION_190(v48, v49);
  OUTLINED_FUNCTION_2_11(v50, v51 + 400);
  OUTLINED_FUNCTION_2_11((uint64_t)&v167, (uint64_t)v168);
  OUTLINED_FUNCTION_3_2((uint64_t)v168);
  if (!v118)
  {
    OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)&v171);
    OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
    OUTLINED_FUNCTION_5_2((uint64_t)v183);
    if (!v118)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v188, (uint64_t)v213, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_3_2((uint64_t)v213);
      if (v118
        || (OUTLINED_FUNCTION_33_2(&v214, v213),
            OUTLINED_FUNCTION_2_11((uint64_t)v220, (uint64_t)v254),
            OUTLINED_FUNCTION_2_11((uint64_t)v254, (uint64_t)v275),
            OUTLINED_FUNCTION_5_2((uint64_t)v275),
            v118))
      {
        v52 = 0;
        v54 = 1;
      }
      else
      {
        OUTLINED_FUNCTION_105();
        OUTLINED_FUNCTION_140();
        v54 = *(_BYTE *)(v53 + 2884) & 1;
      }
      *((_DWORD *)v8 + 152) = v52;
      *((_BYTE *)v8 + 612) = v54;
    }
  }
  v55 = OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_39_2((uint64_t)v55);
  v56 = OUTLINED_FUNCTION_169();
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v56, v57 + 848, v58);
  OUTLINED_FUNCTION_3_2((uint64_t)v191);
  if (!v118)
  {
    OUTLINED_FUNCTION_33_2(&v192, v191);
    OUTLINED_FUNCTION_24_2((uint64_t)&v193, (uint64_t)v263);
    OUTLINED_FUNCTION_24_2((uint64_t)v263, (uint64_t)v264);
    OUTLINED_FUNCTION_5_2((uint64_t)v264);
    if (!v118)
    {
      v8 = v265;
      if (v265)
      {
        v59 = v264[1];
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_12_4();
        v61 = v60;
        OUTLINED_FUNCTION_215();
        OUTLINED_FUNCTION_172(v62, v63);
        v64 = OUTLINED_FUNCTION_49_1();
        OUTLINED_FUNCTION_172((uint64_t)v64, v65);
        OUTLINED_FUNCTION_3_2((uint64_t)v183);
        if (!v118)
        {
          OUTLINED_FUNCTION_172(v61 + 608, (uint64_t)v210);
          OUTLINED_FUNCTION_172((uint64_t)v210, (uint64_t)v211);
          v66 = OUTLINED_FUNCTION_223();
          OUTLINED_FUNCTION_5_2((uint64_t)v66);
          if (!v118)
          {
            *(_QWORD *)(v61 + 616) = v59;
            *(_QWORD *)(v61 + 624) = v8;
          }
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_39_2((uint64_t)v209);
      }
    }
  }
  OUTLINED_FUNCTION_12_4();
  v69 = OUTLINED_FUNCTION_32_1(v67, v68);
  OUTLINED_FUNCTION_2_11(v69, (uint64_t)v165);
  OUTLINED_FUNCTION_2_11((uint64_t)v165, (uint64_t)v166);
  OUTLINED_FUNCTION_3_2((uint64_t)v166);
  if (!v118)
  {
    OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)&v171);
    OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
    OUTLINED_FUNCTION_5_2((uint64_t)v183);
    if (!v118)
    {
      v70 = OUTLINED_FUNCTION_167();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v70, v71 + 4048, v72);
      OUTLINED_FUNCTION_3_2((uint64_t)v210);
      if (v118
        || (v73 = OUTLINED_FUNCTION_223(),
            OUTLINED_FUNCTION_33_2(v73, v210),
            OUTLINED_FUNCTION_2_11((uint64_t)&v212, (uint64_t)v255),
            OUTLINED_FUNCTION_2_11((uint64_t)v255, (uint64_t)v274),
            OUTLINED_FUNCTION_5_2((uint64_t)v274),
            v118))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        OUTLINED_FUNCTION_105();
        OUTLINED_FUNCTION_140();
        v76 = *(_BYTE *)(v75 + 2872) & 1;
      }
      *((_QWORD *)v8 + 114) = v74;
      *((_BYTE *)v8 + 920) = v76;
    }
  }
  OUTLINED_FUNCTION_39_2((uint64_t)v209);
  v77 = OUTLINED_FUNCTION_169();
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v77, v78 + 2272, v79);
  OUTLINED_FUNCTION_3_2((uint64_t)v194);
  if (!v118)
  {
    OUTLINED_FUNCTION_33_2(v195, v194);
    OUTLINED_FUNCTION_24_2((uint64_t)&v196, (uint64_t)v262);
    OUTLINED_FUNCTION_24_2((uint64_t)v262, (uint64_t)v266);
    OUTLINED_FUNCTION_5_2((uint64_t)v266);
    if (!v118)
    {
      v80 = *(_BYTE *)(v4 + 265);
      OUTLINED_FUNCTION_12_4();
      v83 = OUTLINED_FUNCTION_32_1(v81, v82);
      OUTLINED_FUNCTION_2_11(v83, (uint64_t)&v171);
      OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
      OUTLINED_FUNCTION_3_2((uint64_t)v183);
      if (!v118)
      {
        OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)v208);
        OUTLINED_FUNCTION_2_11((uint64_t)v208, (uint64_t)v209);
        OUTLINED_FUNCTION_5_2((uint64_t)v209);
        if (!v118)
          *((_BYTE *)v8 + 873) = v80;
      }
      OUTLINED_FUNCTION_39_2((uint64_t)v207);
    }
  }
  OUTLINED_FUNCTION_12_4();
  v86 = OUTLINED_FUNCTION_32_1(v84, v85);
  OUTLINED_FUNCTION_2_11(v86, (uint64_t)v163);
  OUTLINED_FUNCTION_2_11((uint64_t)v163, (uint64_t)v164);
  OUTLINED_FUNCTION_3_2((uint64_t)v164);
  if (!v118)
  {
    OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)&v171);
    OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
    OUTLINED_FUNCTION_5_2((uint64_t)v183);
    if (!v118)
    {
      v87 = OUTLINED_FUNCTION_167();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v87, v88 + 2624, v89);
      OUTLINED_FUNCTION_3_2((uint64_t)v208);
      if (v118
        || (OUTLINED_FUNCTION_33_2(v209, v208),
            v90 = OUTLINED_FUNCTION_137(),
            OUTLINED_FUNCTION_2_11(v90, v91 + 56),
            OUTLINED_FUNCTION_2_11((uint64_t)&v256, (uint64_t)v273),
            OUTLINED_FUNCTION_5_2((uint64_t)v273),
            v118))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        OUTLINED_FUNCTION_105();
        OUTLINED_FUNCTION_140();
        v94 = *(_BYTE *)(v93 + 2520) & 1;
      }
      *((_QWORD *)v8 + 110) = v92;
      *((_BYTE *)v8 + 888) = v94;
    }
  }
  OUTLINED_FUNCTION_39_2((uint64_t)v207);
  OUTLINED_FUNCTION_238();
  OUTLINED_FUNCTION_12_4();
  v97 = OUTLINED_FUNCTION_32_1(v95, v96);
  OUTLINED_FUNCTION_2_11(v97, (uint64_t)v161);
  OUTLINED_FUNCTION_2_11((uint64_t)v161, (uint64_t)v162);
  OUTLINED_FUNCTION_3_2((uint64_t)v162);
  if (!v118)
  {
    OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)&v171);
    OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
    OUTLINED_FUNCTION_5_2((uint64_t)v183);
    if (!v118)
    {
      v98 = OUTLINED_FUNCTION_167();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v98, v99 + 1200, v100);
      OUTLINED_FUNCTION_3_2((uint64_t)v206);
      if (v118
        || (OUTLINED_FUNCTION_33_2(v207, v206),
            v101 = OUTLINED_FUNCTION_137(),
            OUTLINED_FUNCTION_2_11(v101, v102 + 376),
            OUTLINED_FUNCTION_2_11((uint64_t)&v257, (uint64_t)v272),
            OUTLINED_FUNCTION_5_2((uint64_t)v272),
            v118))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        OUTLINED_FUNCTION_105();
        OUTLINED_FUNCTION_140();
        v105 = *(_BYTE *)(v104 + 2216) & 1;
      }
      *((_QWORD *)v8 + 112) = v103;
      *((_BYTE *)v8 + 904) = v105;
    }
  }
  v106 = OUTLINED_FUNCTION_238();
  OUTLINED_FUNCTION_39_2((uint64_t)v106);
  v107 = OUTLINED_FUNCTION_169();
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v107, v108 + 3696, v109);
  OUTLINED_FUNCTION_3_2((uint64_t)v197);
  if (!v118)
  {
    OUTLINED_FUNCTION_33_2(v198, v197);
    OUTLINED_FUNCTION_24_2((uint64_t)&v199, (uint64_t)v261);
    OUTLINED_FUNCTION_24_2((uint64_t)v261, (uint64_t)v267);
    OUTLINED_FUNCTION_5_2((uint64_t)v267);
    if (!v118)
    {
      memcpy(v268, v267, 0x139uLL);
      OUTLINED_FUNCTION_24_2((uint64_t)&v268[24], (uint64_t)v276);
      OUTLINED_FUNCTION_24_2((uint64_t)v276, (uint64_t)&v277);
      if ((*(_BYTE *)(v4 + 3224) & 1) == 0)
      {
        v110 = *(_QWORD *)(v4 + 3216);
        OUTLINED_FUNCTION_12_4();
        v113 = OUTLINED_FUNCTION_32_1(v111, v112);
        OUTLINED_FUNCTION_2_11(v113, (uint64_t)&v171);
        OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
        OUTLINED_FUNCTION_3_2((uint64_t)v183);
        if (!v118)
        {
          OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)v204);
          OUTLINED_FUNCTION_2_11((uint64_t)v204, (uint64_t)v205);
          v114 = OUTLINED_FUNCTION_238();
          OUTLINED_FUNCTION_5_2((uint64_t)v114);
          if (!v118)
          {
            *((_QWORD *)v8 + 79) = v110;
            *((_BYTE *)v8 + 640) = 0;
          }
        }
        OUTLINED_FUNCTION_39_2((uint64_t)v203);
      }
    }
  }
  OUTLINED_FUNCTION_12_4();
  v117 = OUTLINED_FUNCTION_32_1(v115, v116);
  OUTLINED_FUNCTION_2_11(v117, (uint64_t)v159);
  OUTLINED_FUNCTION_2_11((uint64_t)v159, (uint64_t)v160);
  OUTLINED_FUNCTION_3_2((uint64_t)v160);
  if (!v118)
  {
    OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)&v171);
    OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
    OUTLINED_FUNCTION_5_2((uint64_t)v183);
    if (!v118)
    {
      v119 = OUTLINED_FUNCTION_168();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v119, v120 + 3872, v121);
      OUTLINED_FUNCTION_3_2((uint64_t)v204);
      if (v118
        || (v122 = OUTLINED_FUNCTION_238(),
            OUTLINED_FUNCTION_33_2(v122, v204),
            v123 = OUTLINED_FUNCTION_137(),
            OUTLINED_FUNCTION_2_11(v123, v124 + 696),
            OUTLINED_FUNCTION_2_11((uint64_t)&v258, (uint64_t)v271),
            OUTLINED_FUNCTION_5_2((uint64_t)v271),
            v118))
      {
        v125 = 0;
        v126 = 0;
      }
      else
      {
        v125 = v271[5];
        v126 = swift_bridgeObjectRetain();
      }
      *((_QWORD *)v8 + 81) = v125;
      *((_QWORD *)v8 + 82) = v126;
      OUTLINED_FUNCTION_196();
    }
  }
  OUTLINED_FUNCTION_39_2((uint64_t)v203);
  OUTLINED_FUNCTION_12_4();
  v129 = OUTLINED_FUNCTION_32_1(v127, v128);
  OUTLINED_FUNCTION_2_11(v129, (uint64_t)v157);
  OUTLINED_FUNCTION_2_11((uint64_t)v157, (uint64_t)v158);
  OUTLINED_FUNCTION_3_2((uint64_t)v158);
  if (!v118)
  {
    OUTLINED_FUNCTION_2_11((uint64_t)(v8 + 38), (uint64_t)&v171);
    OUTLINED_FUNCTION_2_11((uint64_t)&v171, (uint64_t)v183);
    OUTLINED_FUNCTION_5_2((uint64_t)v183);
    if (!v118)
    {
      v130 = OUTLINED_FUNCTION_168();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v130, v131 + 2448, v132);
      OUTLINED_FUNCTION_3_2((uint64_t)v202);
      if (v118
        || (OUTLINED_FUNCTION_33_2(v203, v202),
            v133 = OUTLINED_FUNCTION_137(),
            OUTLINED_FUNCTION_2_11(v133, v134 + 1016),
            OUTLINED_FUNCTION_2_11((uint64_t)&v259, (uint64_t)v270),
            OUTLINED_FUNCTION_5_2((uint64_t)v270),
            v118))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        OUTLINED_FUNCTION_105();
        v136 = *(_QWORD *)(v135 + 1520);
        v137 = *(_BYTE *)(v135 + 1528) & 1;
      }
      *((_QWORD *)v8 + 106) = v136;
      *((_BYTE *)v8 + 856) = v137;
    }
  }
  OUTLINED_FUNCTION_39_2((uint64_t)v201);
  OUTLINED_FUNCTION_12_4();
  v139 = v138;
  OUTLINED_FUNCTION_25_3(v138 + 568, (uint64_t)v155);
  OUTLINED_FUNCTION_25_3((uint64_t)v155, (uint64_t)v156);
  OUTLINED_FUNCTION_3_2((uint64_t)v156);
  if (!v118)
  {
    OUTLINED_FUNCTION_215();
    OUTLINED_FUNCTION_25_3(v140, v141);
    v142 = OUTLINED_FUNCTION_49_1();
    OUTLINED_FUNCTION_25_3((uint64_t)v142, v143);
    OUTLINED_FUNCTION_5_2((uint64_t)v183);
    if (!v118)
    {
      v144 = OUTLINED_FUNCTION_168();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v144, v145 + 1024, v146);
      OUTLINED_FUNCTION_3_2((uint64_t)v200);
      if (v118
        || (OUTLINED_FUNCTION_33_2(v201, v200),
            v147 = OUTLINED_FUNCTION_137(),
            OUTLINED_FUNCTION_25_3(v147, v148 + 1336),
            OUTLINED_FUNCTION_25_3((uint64_t)&v260, (uint64_t)v269),
            OUTLINED_FUNCTION_5_2((uint64_t)v269),
            v118))
      {
        OUTLINED_FUNCTION_24();
      }
      else
      {
        OUTLINED_FUNCTION_105();
        v150 = *(_QWORD *)(v149 + 1216);
        v151 = *(_BYTE *)(v149 + 1224) & 1;
      }
      *(_QWORD *)(v139 + 864) = v150;
      *(_BYTE *)(v139 + 872) = v151;
    }
  }
  OUTLINED_FUNCTION_28_0((uint64_t)v154);
  if (v4)
  {
    OUTLINED_FUNCTION_22_1(v183, v7);
    OUTLINED_FUNCTION_22_1(&v171, v7);
    v152 = OUTLINED_FUNCTION_98();
    outlined retain of ConnectionMetrics((uint64_t)v152);
    ((void (*)(int *))v4)(&v171);
    v153 = OUTLINED_FUNCTION_98();
    outlined release of ConnectionMetrics((uint64_t)v153);
  }
  OUTLINED_FUNCTION_1_1();
}

void specialized ConnectionProviderProtocol.configureNetworkAnalytics()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_146();
  v2 = *(id *)(v0 + 2160);
  NetworkAnalytics.resetSequenceNumber()();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v1);
  v2 = *(id *)(v0 + 2144);
  NetworkAnalytics.resetSequenceNumber()();
}

void sub_246EF1C50()
{
  void *v0;

  OUTLINED_FUNCTION_67();
  NetworkAnalytics.setIsConnectionActive(_:)(1);
}

void sub_246EF1C64()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v3 = OUTLINED_FUNCTION_67();
  NetworkAnalytics.getOrchestratorRequestId()();

  v4 = type metadata accessor for UUID();
  LODWORD(v3) = __swift_getEnumTagSinglePayload(v2, 1, v4);
  outlined destroy of NetworkConnectionProtocol?(v2, v1);
  if ((_DWORD)v3 == 1)
  {
    OUTLINED_FUNCTION_67();
    NetworkAnalytics.resetNetId()();
  }
  OUTLINED_FUNCTION_67();
  NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()();
}

void sub_246EF1CDC()
{
  void *v0;

  OUTLINED_FUNCTION_23_1();
}

void sub_246EF1D4C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v2 = *(id *)(v0 + 2144);
  NetworkAnalytics.setIsConnectionActive(_:)(1);
}

void sub_246EF1D64()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(id *)(v0 + 2144);
  NetworkAnalytics.getOrchestratorRequestId()();

  v5 = type metadata accessor for UUID();
  LODWORD(v4) = __swift_getEnumTagSinglePayload(v3, 1, v5);
  outlined destroy of NetworkConnectionProtocol?(v3, v2);
  if ((_DWORD)v4 == 1)
  {
    v6 = *(id *)(v0 + 2144);
    NetworkAnalytics.resetNetId()();
  }
  v7 = *(id *)(v0 + 2144);
  NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()();
}

void sub_246EF1DEC()
{
  void *v0;

}

uint64_t specialized SafeCallback.reify(_:)(void (*a1)(void))
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    a1();
    return swift_release();
  }
  return result;
}

uint64_t NetworkConnectionProvider.connectionIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0xE000000000000000;
  v1 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_229(v1, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  v2 = v12;
  if (v12)
  {
    v3 = __swift_project_boxed_opaque_existential_1(v11, v12);
    v4 = *(_QWORD *)(v2 - 8);
    MEMORY[0x24BDAC7A8](v3);
    OUTLINED_FUNCTION_29();
    (*(void (**)(uint64_t))(v4 + 16))(v0);
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v11, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    v5 = NWConnection.identifier.getter();
    OUTLINED_FUNCTION_104(v0, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    v11[0] = v5;
    v6 = String.init<A>(describing:)();
    v8 = v7;
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v11, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    v6 = 0;
    v8 = 0xE000000000000000;
  }
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  OUTLINED_FUNCTION_10_2();
  return v13;
}

uint64_t (*NetworkConnectionProvider.connectionMetrics.modify())()
{
  OUTLINED_FUNCTION_0_2();
  return static ConnectionConfigurationError.errorDomain.modify;
}

void NetworkConnectionProvider.__allocating_init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OUTLINED_FUNCTION_6();
  NetworkConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(a1, a2, a3, a4);
  OUTLINED_FUNCTION_17_0();
}

void NetworkConnectionProvider.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  _BYTE v11[360];
  _BYTE v12[712];
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[376];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[90];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;

  *(_QWORD *)(v4 + 1496) = 0;
  *(_QWORD *)(v4 + 1512) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_QWORD *)(v4 + 48) = 0;
  swift_unknownObjectWeakInit();
  *(_WORD *)(v4 + 2096) = 0;
  *(_OWORD *)(v4 + 2080) = 0u;
  *(_OWORD *)(v4 + 2064) = 0u;
  *(_DWORD *)(v4 + 2098) = 1;
  *(_OWORD *)(v4 + 2104) = 0u;
  *(_OWORD *)(v4 + 2120) = 0u;
  *(_QWORD *)(v4 + 2136) = 0;
  *(_QWORD *)(v4 + 2152) = 0;
  *(_OWORD *)(v4 + 2160) = 0u;
  OUTLINED_FUNCTION_28((void *)(v4 + 1536), a1);
  *(_QWORD *)(v4 + 2056) = a2;
  _s11SiriNetwork27ConnectionPreparationReportVSgWOi0_(v11);
  _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v12);
  v13 = 0;
  v14 = 1;
  v9 = MEMORY[0x24BEE4AF8];
  v16 = 0u;
  v15 = MEMORY[0x24BEE4AF8];
  v17 = MEMORY[0x24BEE4AF8];
  v18 = 0;
  v19 = 1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v11, (uint64_t)v23, &demangling cache variable for type metadata for ConnectionPreparationReport?);
  *(_OWORD *)&v23[360] = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v12, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
  v30[89] = v9;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v34 = 1;
  v35 = 0;
  v36 = 1;
  v37 = 0;
  v38 = 1;
  v39 = 0u;
  v40 = 0;
  v41 = 1;
  v42 = 0;
  v43 = 1;
  v44 = 0;
  v45 = 1;
  v46 = 0;
  v47 = 1;
  OUTLINED_FUNCTION_22_1((void *)(v4 + 56), &v13);
  *(_QWORD *)(v4 + 1520) = 0;
  *(_BYTE *)(v4 + 1528) = 2;
  *(_QWORD *)(v4 + 2144) = a4;
  v10 = *(void **)(v4 + 1496);
  *(_QWORD *)(v4 + 1496) = a3;

  OUTLINED_FUNCTION_17_0();
}

void NetworkConnectionProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BYTE v8[1440];
  _QWORD v9[66];

  v1 = v0;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_5_1();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
  Logger.logObject.getter();
  v4 = OUTLINED_FUNCTION_35_0();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_2() = 0;
    OUTLINED_FUNCTION_78(&dword_246EC7000, v3, v4, "Provider - NetworkConnectionProvider: Deallocating.");
    OUTLINED_FUNCTION_0_4();
  }

  NetworkConnectionProvider.configureConnectionHandler(_:)(0);
  *(_QWORD *)(v0 + 1512) = 0;
  swift_unknownObjectWeakAssign();
  OUTLINED_FUNCTION_205();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v5);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  NetworkConnectionProvider.closeWithError(_:)();
  v6 = v3;
  Logger.logObject.getter();
  v7 = OUTLINED_FUNCTION_35_0();
  if (os_log_type_enabled(v6, v7))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_2() = 0;
    OUTLINED_FUNCTION_78(&dword_246EC7000, v6, v7, "Provider - NetworkConnectionProvider: Deallocated.");
    OUTLINED_FUNCTION_0_4();
  }

  outlined destroy of NetworkConnectionProtocol?(v1 + 16, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  OUTLINED_FUNCTION_22_1(v8, (const void *)(v1 + 56));
  outlined release of ConnectionMetrics((uint64_t)v8);

  outlined destroy of weak ConnectionProviderDelegate?(v1 + 1504);
  outlined consume of ConnectionProviderState(*(id *)(v1 + 1520), *(_BYTE *)(v1 + 1528));
  OUTLINED_FUNCTION_28(v9, (const void *)(v1 + 1536));
  outlined release of ConnectionConfiguration(v9);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(*(_QWORD *)(v1 + 2064));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_17_0();
}

uint64_t NetworkConnectionProvider.__deallocating_deinit()
{
  NetworkConnectionProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NetworkConnectionProvider()
{
  return objc_opt_self();
}

void NetworkConnectionProvider.openConnectionWithInitialPayload(_:completion:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_5_1();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriNetwork);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_246EC7000, v1, v2, "Provider - NetworkConnectionProvider: Preparing connection with initial payload.", v3, 2u);
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_205();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v4);
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  specialized ConnectionProviderProtocol.configureNetworkAnalytics()();
}

uint64_t specialized NetworkConnectionProvider.createConnectionWithInitialPayload<A>(_:networkConnectionProtocolType:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _BYTE v19[24];
  _QWORD v20[65];
  _QWORD v21[5];
  _QWORD v22[65];
  _QWORD v23[66];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for NWEndpoint();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v19[-v12];
  memcpy(v23, (const void *)(v2 + 1536), 0x204uLL);
  memcpy(v22, (const void *)(v2 + 1536), 0x204uLL);
  outlined retain of ConnectionConfiguration(v23);
  NWEndpoint.init(configuration:)(v22, (uint64_t)v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v6, (uint64_t)&demangling cache variable for type metadata for NWEndpoint?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    swift_allocError();
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)(v14 + 24) = xmmword_246F72F10;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v13, v6, v7);
    siri_kdebug_trace();
    v16 = type metadata accessor for NWConnection();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
    memcpy(v22, (const void *)(v2 + 1536), 0x204uLL);
    memcpy(v20, (const void *)(v2 + 1536), 0x204uLL);
    v21[3] = v16;
    v21[4] = &protocol witness table for NWConnection;
    outlined retain of ConnectionConfiguration(v22);
    v17 = a1;
    v21[0] = NWConnection.init(endpoint:configuration:with:)((uint64_t)v11, v20, a1);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v21, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    swift_beginAccess();
    outlined assign with take of NetworkConnectionProtocol?((uint64_t)v20, v2 + 16);
    swift_endAccess();
    if (one-time initialization token for shared != -1)
      swift_once();
    outlined init with copy of NetworkConnectionProtocol?(v2 + 16, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v20[3])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      if (swift_dynamicCast())
        v18 = v21[0];
      else
        v18 = 0;
    }
    else
    {
      outlined destroy of NetworkConnectionProtocol?((uint64_t)v20, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      v18 = 0;
    }
    NetworkActivityTracing.addNWConnection(_:completion:)(v18, 0, 0);
    swift_release();
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
    *(_BYTE *)(v2 + 2101) = 0;
  }
  return result;
}

uint64_t NetworkConnectionProvider.configureConnectionHandler(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)();
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[8];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  OUTLINED_FUNCTION_48();
  outlined init with copy of NetworkConnectionProtocol?((uint64_t)(v1 + 2), (uint64_t)&v55, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v57)
  {
    OUTLINED_FUNCTION_189(&v55, v4, v5, v6, v7, v8, v9, v10, v55, *((uint64_t *)&v55 + 1));
    type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(0);
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_86_0();
    v1[269] = v2;
    v11 = swift_release();
    if (v1[269])
      v11 = OUTLINED_FUNCTION_107();
    v24 = OUTLINED_FUNCTION_67_0(v11, v12, v13, v14, v15, v16, v17, v18, v55, *((uint64_t *)&v55 + 1), v56, v57, (uint64_t)v58, v59, v60, v61, v62, v63[0], v64,
            v65,
            v66);
    OUTLINED_FUNCTION_122();
    OUTLINED_FUNCTION_38_2();
    type metadata accessor for NetworkConnectionProvider.ViabilityUpdateHandler(0);
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_86_0();
    v1[270] = v24;
    v25 = swift_release();
    if (v1[270])
      v25 = OUTLINED_FUNCTION_107();
    v33 = OUTLINED_FUNCTION_67_0(v25, v26, v27, v28, v29, v30, v31, v32, v55, *((uint64_t *)&v55 + 1), v56, v57, (uint64_t)v58, v59, v60, v61, v62, v63[0], v64,
            v65,
            v66);
    OUTLINED_FUNCTION_122();
    OUTLINED_FUNCTION_38_2();
    type metadata accessor for NetworkConnectionProvider.BetterPathUpdateHandler(0);
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_86_0();
    v1[271] = v33;
    v34 = swift_release();
    if (v1[271])
      v34 = OUTLINED_FUNCTION_107();
    v42 = OUTLINED_FUNCTION_67_0(v34, v35, v36, v37, v38, v39, v40, v41, v55, *((uint64_t *)&v55 + 1), v56, v57, (uint64_t)v58, v59, v60, v61, v62, v63[0], v64,
            v65,
            v66);
    OUTLINED_FUNCTION_122();
    v43 = OUTLINED_FUNCTION_38_2();
    if (a1)
    {
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v63, (uint64_t)&v55);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      type metadata accessor for NWConnection();
      v43 = swift_dynamicCast();
      if ((v43 & 1) != 0)
      {
        MEMORY[0x24956CCF8]();
        OUTLINED_FUNCTION_14_0();
        OUTLINED_FUNCTION_170();
        v58 = partial apply for closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:);
        v59 = v42;
        v51 = MEMORY[0x24BDAC760];
        v52 = OUTLINED_FUNCTION_174((uint64_t)&block_descriptor_92, MEMORY[0x24BDAC760], 1107296256, v56, v57);
        swift_release();
        nw_connection_set_read_close_handler();
        _Block_release(v52);
        v53 = swift_unknownObjectRelease();
        MEMORY[0x24956CCF8](v53);
        OUTLINED_FUNCTION_14_0();
        OUTLINED_FUNCTION_170();
        v58 = partial apply for closure #2 in NetworkConnectionProvider.configureConnectionHandler(_:);
        v59 = v42;
        v54 = OUTLINED_FUNCTION_174((uint64_t)&block_descriptor_96, v51, 1107296256, v56, v57);
        swift_release();
        nw_connection_set_write_close_handler();
        _Block_release(v54);
        swift_release();
        v43 = swift_unknownObjectRelease();
      }
    }
    return OUTLINED_FUNCTION_139(v43, v44, v45, v46, v47, v48, v49, v50, v55);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v55, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v19 = OUTLINED_FUNCTION_11_2();
    OUTLINED_FUNCTION_47_1(v19, v20);
    return OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F10, v21, v22);
  }
}

uint64_t implicit closure #2 in implicit closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  return specialized SafeCallback.reify(_:)(partial apply for closure #1 in NetworkConnectionProvider.StateUpdateHandler.handleStateUpdate@Sendable (_:));
}

void implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(char a1, uint64_t a2, void (*a3)(_QWORD))
{
  if (swift_weakLoadStrong())
  {
    a3(a1 & 1);
    swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_23_1();
  }
}

void closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[13];

  OUTLINED_FUNCTION_19();
  v26 = v3;
  v27 = v4;
  v5 = OUTLINED_FUNCTION_18();
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_148();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_54();
  v8 = OUTLINED_FUNCTION_159();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_117();
  v14 = v13;
  OUTLINED_FUNCTION_48();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v23 = *(id *)(Strong + 2056);
    OUTLINED_FUNCTION_95();
    static DispatchTime.now()();
    v22 = v14;
    MEMORY[0x24956CFC8](v12, 1.0);
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    v24 = v8;
    v25 = v16;
    OUTLINED_FUNCTION_104((uint64_t)v12, v16);
    v17 = OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_48();
    swift_weakLoadStrong();
    swift_weakInit();
    OUTLINED_FUNCTION_78_0();
    v31[4] = v26;
    v31[5] = v17;
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 1107296256;
    v31[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v31[3] = v27;
    v18 = _Block_copy(v31);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v30 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v19, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
    OUTLINED_FUNCTION_57_0();
    v21 = v22;
    v20 = v23;
    MEMORY[0x24956D22C](v22, v2, v1, v18);
    _Block_release(v18);

    OUTLINED_FUNCTION_104(v1, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    OUTLINED_FUNCTION_102(v2, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    v25(v21, v24);
    swift_release();
    OUTLINED_FUNCTION_14();
  }
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)(uint64_t a1, const char *a2)
{
  uint64_t result;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_48();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v4 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_218(v4, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_59_0();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v10 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v7 = 136315138;
      OUTLINED_FUNCTION_48();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        NetworkConnectionProvider.connectionIdentifier.getter();
        OUTLINED_FUNCTION_78_0();
        Strong = String.init<A>(describing:)();
      }
      OUTLINED_FUNCTION_166(Strong, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_44_1();
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v5, v6, a2, v7);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_69();
    NetworkConnectionProvider.closeWithError(_:)();
    return OUTLINED_FUNCTION_14();
  }
  return result;
}

void NetworkConnectionProvider.startConnectionWithOpenTimeoutTimer(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = v2;
  OUTLINED_FUNCTION_48();
  outlined init with copy of NetworkConnectionProtocol?(v3 + 16, (uint64_t)&v46, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v48)
  {
    OUTLINED_FUNCTION_189(&v46, v6, v7, v8, v9, v10, v11, v12, v39, v42);
    specialized ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, a2);
    specialized ConnectionProviderProtocol.setupOpenTimeoutTimer()();
    specialized ConnectionProviderProtocol.setupOpenSlowTimer()();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v13 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_59_0();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_QWORD *)&v46 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v16 = 136315138;
      v17 = NetworkConnectionProvider.connectionIdentifier.getter();
      v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_69();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v14, v15, "Provider - NetworkConnectionProvider [%s]: Connection start", v16, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_4();
    }

    v23 = OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_197(v23, v24, v25, v26, v27, v28, v29, v30, v40, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, v48, v49, v50, v51,
      v52,
      v53);
    v31 = NWConnection.start(queue:)();
    OUTLINED_FUNCTION_139(v31, v32, v33, v34, v35, v36, v37, v38, v41);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v46, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v19 = OUTLINED_FUNCTION_11_2();
    OUTLINED_FUNCTION_47_1(v19, v20);
    OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F10, v21, v22);
  }
  OUTLINED_FUNCTION_87();
}

void NetworkConnectionProvider.closeWithError(_:)()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(void **);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  NSObject *v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[89];
  __int128 v67[44];
  __int128 v68;
  __int128 v69;
  uint64_t (*v70)();
  _QWORD *v71;
  _QWORD v72[89];
  void *v73;
  __int128 v74;
  unint64_t v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD v79[7];

  OUTLINED_FUNCTION_19();
  v4 = v0;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_148();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_146();
  v9 = OUTLINED_FUNCTION_53_0();
  v10 = MEMORY[0x24BDAC7A8](v9);
  if ((*(_BYTE *)(v4 + 2099) & 1) != 0)
    goto LABEL_42;
  v59 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v12;
  v61 = v10;
  v62 = v2;
  *(_BYTE *)(v4 + 2099) = 1;
  v63 = v1;
  v64 = v7;
  if (!v6)
  {
    OUTLINED_FUNCTION_192();
    if (!v13)
      swift_once();
    v21 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_40_1(v21, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v22 = OUTLINED_FUNCTION_236();
    if (OUTLINED_FUNCTION_158(v22))
    {
      v16 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v73 = (void *)OUTLINED_FUNCTION_2_2();
      v23 = OUTLINED_FUNCTION_111(4.8149e-34);
      v25 = OUTLINED_FUNCTION_119(v23, v24);
      OUTLINED_FUNCTION_110(v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_44_1();
      v20 = "Provider - NetworkConnectionProvider [%s]: Close and cancel connection with no error";
LABEL_20:
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v1, v3, v20, v16);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }
    goto LABEL_27;
  }
  v72[0] = v6;
  OUTLINED_FUNCTION_72_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (!OUTLINED_FUNCTION_11_4())
  {
LABEL_22:
    OUTLINED_FUNCTION_192();
    if (!v13)
      swift_once();
    v26 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_218(v26, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_72_0();
    swift_retain();
    OUTLINED_FUNCTION_72_0();
    swift_retain();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = OUTLINED_FUNCTION_2_2();
      v30 = (_QWORD *)OUTLINED_FUNCTION_2_2();
      v58 = (void *)OUTLINED_FUNCTION_2_2();
      v73 = v58;
      *(_DWORD *)v29 = 136315394;
      v31 = OUTLINED_FUNCTION_127();
      v72[0] = OUTLINED_FUNCTION_119(v31, v32);
      OUTLINED_FUNCTION_187();
      OUTLINED_FUNCTION_69();
      OUTLINED_FUNCTION_44_1();
      *(_WORD *)(v29 + 12) = 2112;
      OUTLINED_FUNCTION_72_0();
      v33 = _swift_stdlib_bridgeErrorToNSError();
      v72[0] = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v30 = v33;
      OUTLINED_FUNCTION_151();
      OUTLINED_FUNCTION_151();
      _os_log_impl(&dword_246EC7000, v27, v28, "Provider - NetworkConnectionProvider [%s]: Close and cancel connection for error: %@", (uint8_t *)v29, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_151();
    OUTLINED_FUNCTION_151();

    goto LABEL_28;
  }
  if (v75 >> 60 != 10 || v76 || (v75 == 0xA000000000000000 ? (v13 = v73 == (void *)1) : (v13 = 0), !v13 || v74 != 0))
  {
    outlined consume of NetworkConnectionError(v73, v74, *((uint64_t *)&v74 + 1), v75, v76);
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_192();
  if (!v13)
    swift_once();
  v14 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_40_1(v14, (uint64_t)static Logger.siriNetwork);
  Logger.logObject.getter();
  v15 = OUTLINED_FUNCTION_236();
  if (OUTLINED_FUNCTION_158(v15))
  {
    v16 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v73 = (void *)OUTLINED_FUNCTION_2_2();
    v17 = OUTLINED_FUNCTION_111(4.8149e-34);
    v19 = OUTLINED_FUNCTION_119(v17, v18);
    OUTLINED_FUNCTION_110(v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_44_1();
    v20 = "Provider - NetworkConnectionProvider [%s]: Close and cancel connection after receiving cancellation";
    goto LABEL_20;
  }
LABEL_27:

  OUTLINED_FUNCTION_69();
LABEL_28:
  specialized ConnectionProviderProtocol.cancelStaleConnectionTimer()();
  specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
  specialized ConnectionProviderProtocol.cancelOpenTimer()();
  specialized ConnectionProviderProtocol.cancelOpenSlowTimer()();
  v34 = *(void (**)(void **))(v4 + 2064);
  v35 = *(_QWORD *)(v4 + 2072);
  v36 = OUTLINED_FUNCTION_14_0();
  swift_weakInit();
  v37 = (_QWORD *)OUTLINED_FUNCTION_6();
  v37[2] = v36;
  v37[3] = v34;
  v37[4] = v35;
  v37[5] = v6;
  OUTLINED_FUNCTION_48();
  outlined init with copy of NetworkConnectionProtocol?(v4 + 16, (uint64_t)&v77, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v78)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v77, (uint64_t)v79);
    __swift_project_boxed_opaque_existential_1(v79, v79[3]);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v34);
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_202();
    v38 = (void *)NWConnection.identifier.getter();
    NetworkConnectionProvider.updateConnectionMetricsSnapshotReport()();
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_42_2(v4 + 624, (uint64_t)v72);
    OUTLINED_FUNCTION_42_2((uint64_t)v72, (uint64_t)&v73);
    OUTLINED_FUNCTION_3_2((uint64_t)&v73);
    v57 = v35;
    if (!v13)
    {
      v58 = v38;
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v72, (uint64_t)v67, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      OUTLINED_FUNCTION_183();
      OUTLINED_FUNCTION_192();
      if (!v13)
        swift_once();
      v39 = OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_218(v39, (uint64_t)static Logger.siriNetwork);
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v72, (uint64_t)&v68, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined retain of ConnectionSnapshotReport((uint64_t)&v68);
      OUTLINED_FUNCTION_183();
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v56 = v40;
        v42 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        v65 = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v42 = 136315138;
        v55[1] = v42 + 4;
        OUTLINED_FUNCTION_33_2(v66, &v73);
        OUTLINED_FUNCTION_183();
        v43 = String.init<A>(describing:)();
        v66[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_44_1();
        OUTLINED_FUNCTION_109();
        OUTLINED_FUNCTION_109();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, v56, v41, "%s", v42);
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_0_4();
      }
      OUTLINED_FUNCTION_109();
      OUTLINED_FUNCTION_109();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v72, (uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?);
      outlined release of ConnectionSnapshotReport((uint64_t)v66);

      v38 = v58;
    }
    v58 = v34;
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
    OUTLINED_FUNCTION_0_2();
    outlined assign with take of NetworkConnectionProtocol?((uint64_t)&v68, v4 + 16);
    swift_endAccess();
    v46 = dispatch_group_create();
    dispatch_group_enter(v46);
    if (one-time initialization token for shared != -1)
      swift_once();
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v79, (uint64_t)&v68);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
    type metadata accessor for NWConnection();
    if (OUTLINED_FUNCTION_11_4())
      v47 = *(_QWORD *)&v67[0];
    else
      v47 = 0;
    v48 = OUTLINED_FUNCTION_14_0();
    *(_QWORD *)(v48 + 16) = v46;
    v49 = v46;
    NetworkActivityTracing.removeNWConnection(_:completion:)(v47, (uint64_t (*)(void))partial apply for closure #2 in NetworkConnectionProvider.closeWithError(_:), v48);
    OUTLINED_FUNCTION_200();
    swift_release();
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v79, (uint64_t)v67);
    v50 = (_QWORD *)OUTLINED_FUNCTION_6();
    v50[2] = v38;
    outlined init with take of RPCOspreyConnectionProtocol(v67, (uint64_t)(v50 + 3));
    v50[8] = partial apply for closure #1 in NetworkConnectionProvider.closeWithError(_:);
    v50[9] = v37;
    v70 = partial apply for closure #3 in NetworkConnectionProvider.closeWithError(_:);
    v71 = v50;
    *(_QWORD *)&v68 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v68 + 1) = 1107296256;
    *(_QWORD *)&v69 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    *((_QWORD *)&v69 + 1) = &block_descriptor_73;
    v51 = _Block_copy(&v68);
    OUTLINED_FUNCTION_123();
    static DispatchQoS.unspecified.getter();
    v66[0] = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v52, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
    v53 = v62;
    v54 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v51);

    OUTLINED_FUNCTION_34_0();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v58);
    ((void (*)(uint64_t, uint64_t))v63[1].isa)(v53, v54);
    OUTLINED_FUNCTION_80_0(v60);
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v79);
  }
  else
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v34);
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_202();
    v45 = OUTLINED_FUNCTION_122();
    OUTLINED_FUNCTION_188(v45, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    closure #1 in NetworkConnectionProvider.closeWithError(_:)(v36, v34, v35, v6);
    OUTLINED_FUNCTION_78_0();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v34);
    OUTLINED_FUNCTION_34_0();
  }
LABEL_42:
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1, void (*a2)(void **), uint64_t a3, void *a4)
{
  uint64_t result;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  char v13;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v7 = result;
    if (a2)
    {
      v10 = a4;
      v11 = 0u;
      v12 = 0u;
      v13 = 1;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)a2);
      v8 = a4;
      a2(&v10);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);

    }
    else if (MEMORY[0x24956E090](result + 1504))
    {
      swift_retain();
      specialized BackgroundConnection.connectionProvider(_:received:)();
      swift_unknownObjectRelease();
      swift_release();
    }
    v9 = *(id *)(v7 + 2144);
    NetworkAnalytics.setIsConnectionActive(_:)(0);
  }
  return result;
}

uint64_t closure #3 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1, _QWORD *a2, void (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[40];

  v6 = type metadata accessor for NWConnection.SendCompletion();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (void (**)(uint64_t))&v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *v9 = partial apply for closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:);
  v9[1] = (void (*)(uint64_t))v10;
  (*(void (**)(void (**)(uint64_t), _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BDE01C8], v6);
  outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)a2, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
  type metadata accessor for NWConnection();
  if ((swift_dynamicCast() & 1) != 0)
  {
    MEMORY[0x24956CCF8]();
    nw_connection_set_read_close_handler();
    v11 = swift_unknownObjectRelease();
    MEMORY[0x24956CCF8](v11);
    nw_connection_set_write_close_handler();
    swift_release();
    swift_unknownObjectRelease();
  }
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  type metadata accessor for NWConnection.ContentContext();
  static NWConnection.ContentContext.defaultMessage.getter();
  NWConnection.send(content:contentContext:isComplete:completion:)();
  swift_release();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  NWConnection.cancel()();
  a3();
  return (*(uint64_t (**)(void (**)(uint64_t), uint64_t))(v7 + 8))(v9, v6);
}

void closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v18 - v8;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriNetwork);
  outlined init with copy of NetworkConnectionProtocol?(a1, (uint64_t)v9, &demangling cache variable for type metadata for NWError?);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v13 = 134218242;
    v18[0] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2112;
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for NWError?);
    v15 = type metadata accessor for NWError();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v15) == 1)
    {
      outlined destroy of NetworkConnectionProtocol?((uint64_t)v7, (uint64_t)&demangling cache variable for type metadata for NWError?);
      v18[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v16 = 0;
    }
    else
    {
      lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0688], MEMORY[0x24BDE0698]);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v17, v7, v15);
      v16 = _swift_stdlib_bridgeErrorToNSError();
      v18[0] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    *v14 = v16;
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for NWError?);
    _os_log_impl(&dword_246EC7000, v11, v12, "Provider - NetworkConnectionProvider [%llu]: Close. Nil content sent to close connection. Start cancelling connection. Close error %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v14, -1, -1);
    MEMORY[0x24956E018](v13, -1, -1);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for NWError?);
  }

}

void NetworkConnectionProvider.handleStateUpdate(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(uint64_t, uint64_t);
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unsigned __int8 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  unint64_t v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  NSObject *v87;
  uint64_t v88;
  int v89;
  void *v90;
  _QWORD *v91;
  os_log_type_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  os_log_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  _BYTE v123[64];
  uint64_t v124;
  __int128 v125[3];
  __int128 v126;
  uint64_t v127;

  OUTLINED_FUNCTION_19();
  v2 = v1;
  v3 = type metadata accessor for ConnectionAnalysisInfo();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_117();
  v105 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_117();
  v108 = v9;
  v112 = type metadata accessor for NWError();
  v111 = *(_QWORD *)(v112 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_117();
  v110 = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWConnection.State?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v100 - v15;
  v17 = type metadata accessor for NWConnection.State();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v100 - v22;
  v119 = NetworkConnectionProvider.connectionIdentifier.getter();
  v25 = v24;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v107 = v3;
  v26 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_218(v26, (uint64_t)static Logger.siriNetwork);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v120 = v2;
  v27(v23, v2, v17);
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_59_0();
  v117 = v0;
  Logger.logObject.getter();
  v28 = (void (*)(uint64_t, uint64_t))OUTLINED_FUNCTION_35_0();
  v29 = OUTLINED_FUNCTION_106((os_log_type_t)v28);
  v118 = v17;
  if (v29)
  {
    v101 = (int)v28;
    v102 = (os_log_t)v0;
    v116 = v0;
    v30 = OUTLINED_FUNCTION_2_2();
    v100 = OUTLINED_FUNCTION_2_2();
    v124 = v100;
    *(_DWORD *)v30 = 136315650;
    OUTLINED_FUNCTION_16_0();
    *(_QWORD *)&v125[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v25, &v124);
    OUTLINED_FUNCTION_114();
    v103 = v25;
    OUTLINED_FUNCTION_214();
    *(_WORD *)(v30 + 12) = 2080;
    v27(v16, (uint64_t)v23, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v17);
    v31 = v115;
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v16, v115, (uint64_t *)&demangling cache variable for type metadata for NWConnection.State?);
    if (__swift_getEnumTagSinglePayload(v31, 1, v17) == 1)
    {
      v32 = 0xE100000000000000;
      v33 = 45;
    }
    else
    {
      v37 = (uint64_t)v121;
      OUTLINED_FUNCTION_191((uint64_t)v121, v31, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32));
      v27(v113, v37, v17);
      v33 = String.init<A>(describing:)();
      v32 = v38;
      OUTLINED_FUNCTION_129(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
    }
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)&demangling cache variable for type metadata for NWConnection.State?);
    *(_QWORD *)&v125[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v124);
    OUTLINED_FUNCTION_114();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_154();
    *(_WORD *)(v30 + 22) = 2080;
    v39 = v116 + 16;
    OUTLINED_FUNCTION_48();
    outlined init with copy of NetworkConnectionProtocol?(v39, (uint64_t)v125, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    outlined init with copy of NetworkConnectionProtocol?((uint64_t)v125, (uint64_t)&v126, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v127)
    {
      outlined init with take of RPCOspreyConnectionProtocol(&v126, (uint64_t)v123);
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v123, (uint64_t)&v122);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      v41 = String.init<A>(describing:)();
      v43 = v42;
      v40 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v123);
    }
    else
    {
      v43 = 0xE100000000000000;
      v41 = 45;
    }
    OUTLINED_FUNCTION_188(v40, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    *(_QWORD *)&v125[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v124);
    OUTLINED_FUNCTION_114();
    OUTLINED_FUNCTION_69();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_232();
    _os_log_impl(&dword_246EC7000, v102, v44, "Provider - NetworkConnectionProvider [%s]: State updated to %s. Info: %s", (uint8_t *)v30, 0x20u);
    OUTLINED_FUNCTION_82_0();
    OUTLINED_FUNCTION_0_4();
  }
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_154();

  OUTLINED_FUNCTION_69();
  v34 = v17;
  v35 = v120;
  v36 = (void (*)(uint64_t, uint64_t, uint64_t))v27;
  v45 = (uint64_t)v121;
  v27(v121, v120, v34);
  v46 = ConnectionProviderState.init(from:)(v45);
  v47 = *(void **)(v0 + 1520);
  *(_QWORD *)(v0 + 1520) = v46;
  v48 = *(_BYTE *)(v0 + 1528);
  *(_BYTE *)(v0 + 1528) = v49;
  outlined consume of ConnectionProviderState(v47, v48);
  v50 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_229(v50, (uint64_t)v125, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (!*((_QWORD *)&v125[1] + 1))
  {
    OUTLINED_FUNCTION_188(v51, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    goto LABEL_16;
  }
  v52 = v0;
  v53 = v0 + 2099;
  outlined init with take of RPCOspreyConnectionProtocol(v125, (uint64_t)&v126);
  if ((*(_BYTE *)(v0 + 2099) & 1) != 0)
  {
    OUTLINED_FUNCTION_76();
LABEL_16:
    OUTLINED_FUNCTION_16_0();
    v54 = OUTLINED_FUNCTION_177();
    v55 = v25;
    v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v56))
    {
      v57 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_QWORD *)&v125[0] = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v57 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v55, (uint64_t *)v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_214();
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v54, v56, "Provider - NetworkConnectionProvider [%s]: Connection state updated, but connection does not exist or was cancelled", v57);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_2_7();
    goto LABEL_26;
  }
  v58 = v114;
  v59 = v35;
  v60 = v118;
  v36(v114, v59, v118);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v58, v60);
  if (v61 == *MEMORY[0x24BDE0310])
  {
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_129(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 96));
    v62 = v111;
    v63 = v110;
    v64 = v112;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 32))(v110, v58, v112);
    OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, v65, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0688], MEMORY[0x24BDE0698]);
    v66 = OUTLINED_FUNCTION_11_2();
    v68 = OUTLINED_FUNCTION_178(v66, v67);
    OUTLINED_FUNCTION_175(v68);
    v69 = *(void **)(v0 + 2104);
    *(_QWORD *)(v0 + 2104) = v58;

    if (MEMORY[0x24956E090](v0 + 1504))
    {
      v70 = OUTLINED_FUNCTION_11_2();
      v72 = OUTLINED_FUNCTION_178(v70, v71);
      OUTLINED_FUNCTION_175(v72);
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      OUTLINED_FUNCTION_11_2();
      *(_QWORD *)(v73 + 8) = 0;
      *(_QWORD *)(v73 + 16) = 0;
      *(_QWORD *)v73 = v58;
      *(_OWORD *)(v73 + 24) = xmmword_246F736D0;
      specialized BackgroundConnection.connectionProvider(_:received:)();
      OUTLINED_FUNCTION_42_0();
      swift_unknownObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v64);
  }
  else
  {
    v74 = v61;
    if (v61 == *MEMORY[0x24BDE0308])
    {
      OUTLINED_FUNCTION_8_2();
      OUTLINED_FUNCTION_129(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 96));
      v75 = v111;
      v76 = v109;
      v77 = v112;
      OUTLINED_FUNCTION_191(v109, v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 32));
      OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, v78, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0688], MEMORY[0x24BDE0698]);
      v79 = OUTLINED_FUNCTION_11_2();
      v81 = OUTLINED_FUNCTION_178(v79, v80);
      OUTLINED_FUNCTION_191(v81, v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 16));
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v82 = OUTLINED_FUNCTION_11_2();
      v83[1] = 0;
      v83[2] = 0;
      *v83 = v58;
      OUTLINED_FUNCTION_184((__n128)xmmword_246F736C0, v82, (uint64_t)v83);
      OUTLINED_FUNCTION_42_0();
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v77);
    }
    else if (v61 == *MEMORY[0x24BDE0300])
    {
      OUTLINED_FUNCTION_8_2();
    }
    else if (v61 == *MEMORY[0x24BDE0320])
    {
      OUTLINED_FUNCTION_8_2();
      __swift_project_boxed_opaque_existential_1(&v126, v127);
      v84 = NWConnection.identifier.getter();
      OUTLINED_FUNCTION_0_2();
      *(_QWORD *)(v52 + 56) = v84;
      *(_BYTE *)(v52 + 64) = 0;
      NetworkConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()();
    }
    else if (v61 == *MEMORY[0x24BDE02F8])
    {
      *(_BYTE *)(v52 + 2101) = 1;
      specialized ConnectionProviderProtocol.setupStaleConnectionTimer()();
      NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()();
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)&v126, (uint64_t)v125);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
      type metadata accessor for NWConnection();
      v85 = v25;
      if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
      {
        MEMORY[0x24956CCF8]();
        v86 = nw_connection_uses_multipath();
        OUTLINED_FUNCTION_3_6();
        OUTLINED_FUNCTION_78_0();
        *(_BYTE *)(v52 + 2100) = v86;
      }
      NetworkConnectionProvider.updateConnectionMetricsSnapshotReport()();
      v87 = *(NSObject **)(v52 + 2064);
      if (v87)
      {
        memset(v125, 0, 41);
        OUTLINED_FUNCTION_122();
        ((void (*)(__int128 *))v87)(v125);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)v87);
        v88 = *(_QWORD *)(v52 + 2064);
      }
      else
      {
        v88 = 0;
      }
      *(_QWORD *)(v52 + 2064) = 0;
      *(_QWORD *)(v52 + 2072) = 0;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v88);
      OUTLINED_FUNCTION_63_0();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_177();
      v92 = OUTLINED_FUNCTION_236();
      if (os_log_type_enabled(v87, v92))
      {
        v93 = OUTLINED_FUNCTION_2_2();
        *(_QWORD *)&v125[0] = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v93 = 136315650;
        swift_bridgeObjectRetain();
        v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v85, (uint64_t *)v125);
        OUTLINED_FUNCTION_114();
        OUTLINED_FUNCTION_214();
        *(_WORD *)(v93 + 12) = 1024;
        v94 = *(unsigned __int8 *)(v53 + 1);
        OUTLINED_FUNCTION_95();
        LODWORD(v122) = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_95();
        *(_WORD *)(v93 + 18) = 2080;
        v95 = v108;
        specialized ConnectionProviderProtocol.connectionAnalysisInfo.getter(v108);
        v96 = v106;
        outlined init with copy of NetworkConnectionProtocol?(v95, v106, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
        if (__swift_getEnumTagSinglePayload(v96, 1, v107) == 1)
        {
          v97 = 0x6E776F6E6B6E75;
        }
        else
        {
          v98 = v105;
          outlined init with take of ConnectionAnalysisInfo(v96, v105);
          outlined init with copy of ConnectionAnalysisInfo(v98, v104);
          v97 = String.init<A>(describing:)();
          outlined destroy of ConnectionAnalysisInfo(v98);
        }
        outlined destroy of NetworkConnectionProtocol?(v108, (uint64_t)&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
        v122 = OUTLINED_FUNCTION_166(v97, v99, (uint64_t *)v125);
        OUTLINED_FUNCTION_114();
        OUTLINED_FUNCTION_69();
        OUTLINED_FUNCTION_44_1();
        _os_log_impl(&dword_246EC7000, v87, v92, "Provider - NetworkConnectionProvider [%s]: isMPTCP %{BOOL}d, Analysis Info - %s", (uint8_t *)v93, 0x1Cu);
        OUTLINED_FUNCTION_26_2();
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_2_7();
      OUTLINED_FUNCTION_64_0();
    }
    else
    {
      v89 = *MEMORY[0x24BDE0318];
      OUTLINED_FUNCTION_8_2();
      if (v74 == v89)
      {
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        v90 = (void *)OUTLINED_FUNCTION_11_2();
        v91[1] = 0;
        v91[2] = 0;
        *v91 = 1;
        OUTLINED_FUNCTION_184((__n128)xmmword_246F72F10, (uint64_t)v90, (uint64_t)v91);

      }
      else
      {
        v28(v114, v60);
      }
    }
  }
  OUTLINED_FUNCTION_76();
LABEL_26:
  OUTLINED_FUNCTION_1_1();
}

void NetworkConnectionProvider.handleViabilityUpdate(_:)()
{
  os_log_type_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[6];

  OUTLINED_FUNCTION_19();
  v2 = v1;
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_40_1(v5, (uint64_t)static Logger.siriNetwork);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_144(v7))
  {
    v8 = OUTLINED_FUNCTION_2_2();
    v15[0] = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v8 = 136315394;
    v9 = OUTLINED_FUNCTION_127();
    OUTLINED_FUNCTION_212(v9, v10);
    OUTLINED_FUNCTION_187();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_44_1();
    *(_WORD *)(v8 + 12) = 2080;
    if ((v2 & 1) != 0)
      v12 = 0x656C62616976;
    else
      v12 = 0x656C626169766E75;
    OUTLINED_FUNCTION_166(v12, v11, v15);
    OUTLINED_FUNCTION_187();
    OUTLINED_FUNCTION_44_1();
    _os_log_impl(&dword_246EC7000, v6, v0, "Provider - NetworkConnectionProvider [%s]: Viability update. Connection %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_71_0();
  v13 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v13 + 16) = v6;
  *(_BYTE *)(v13 + 24) = v2 & 1;
  v15[4] = (uint64_t)partial apply for closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:);
  v15[5] = v13;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_150();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v14, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_100();
}

void closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:)(uint64_t a1, unsigned __int8 a2)
{
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = Strong;
    v5 = Strong + 16;
    swift_beginAccess();
    outlined init with copy of NetworkConnectionProtocol?(v5, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    v6 = v26[3];
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v26, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (!v6 || (v7 = (_BYTE *)(v4 + 2098), (*(_BYTE *)(v4 + 2099) & 1) != 0))
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        v26[0] = v12;
        *(_DWORD *)v11 = 136315138;
        v13 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_246EC7000, v9, v10, "Provider - NetworkConnectionProvider [%s]: Viability updated, but connection does not exist or cancelled", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v12, -1, -1);
        MEMORY[0x24956E018](v11, -1, -1);
        swift_release();

        return;
      }

      goto LABEL_9;
    }
    if (*v7 != (a2 & 1))
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc();
        v19 = swift_slowAlloc();
        v26[0] = v19;
        *(_DWORD *)v18 = 136315650;
        v20 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 1024;
        swift_release();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v18 + 18) = 1024;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_246EC7000, v16, v17, "Provider - NetworkConnectionProvider [%s]: Viability updated from %{BOOL}d to %{BOOL}d", (uint8_t *)v18, 0x18u);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v19, -1, -1);
        MEMORY[0x24956E018](v18, -1, -1);

      }
      else
      {

        swift_release_n();
      }
    }
    if (*(_BYTE *)(v4 + 2100) == 1)
    {
      if (((*v7 ^ a2) & 1) != 0)
      {
        v22 = a2 & 1;
        *(_BYTE *)(v4 + 2098) = a2 & 1;
        v23 = MEMORY[0x24956E090](v4 + 1504);
        if (v23)
        {
          v24 = v23;
          v25 = swift_retain();
          specialized BackgroundConnection.connectionProvider(_:receivedViabilityChangeNotification:)(v25, v22, v24);
          swift_unknownObjectRelease();
LABEL_9:
          swift_release_n();
          return;
        }
      }
    }
    else if (((*v7 ^ a2) & 1) != 0)
    {
      *v7 = a2 & 1;
      if ((a2 & 1) != 0)
      {
        specialized ConnectionProviderProtocol.cancelConnectionUnviableTimer()();
      }
      else if (!*(_QWORD *)(v4 + 2136))
      {
        specialized ConnectionProviderProtocol.setupConnectionUnviableTimer()();
      }
    }
    swift_release();
  }
}

uint64_t NetworkConnectionProvider.StateUpdateHandler.__deallocating_deinit()
{
  swift_weakDestroy();
  OUTLINED_FUNCTION_157();
  return swift_deallocClassInstance();
}

void NetworkConnectionProvider.handleBetterPathUpdate(_:)()
{
  os_log_type_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_19();
  v2 = v1;
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_40_1(v5, (uint64_t)static Logger.siriNetwork);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_144(v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v8 = 136315138;
    v9 = OUTLINED_FUNCTION_127();
    OUTLINED_FUNCTION_212(v9, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_44_1();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v6, v0, "Provider - NetworkConnectionProvider [%s]: handle better path update", v8);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_71_0();
  v11 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v11 + 16) = v6;
  *(_BYTE *)(v11 + 24) = v2 & 1;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_150();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_34_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v12, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_100();
}

void closure #1 in NetworkConnectionProvider.handleBetterPathUpdate(_:)(uint64_t a1, char a2)
{
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33[5];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = Strong;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = swift_slowAlloc();
      v33[0] = v9;
      *(_DWORD *)v8 = 136315394;
      v10 = NetworkConnectionProvider.connectionIdentifier.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2080;
      if ((a2 & 1) != 0)
        v12 = 5457241;
      else
        v12 = 20302;
      if ((a2 & 1) != 0)
        v13 = 0xE300000000000000;
      else
        v13 = 0xE200000000000000;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v6, v7, "Provider - NetworkConnectionProvider [%s]: Better path available updated to: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v9, -1, -1);
      MEMORY[0x24956E018](v8, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    outlined init with copy of NetworkConnectionProtocol?(v4 + 16, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    v14 = v33[3];
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v33, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    if (v14 && (*(_BYTE *)(v4 + 2099) & 1) == 0)
    {
      v22 = MEMORY[0x24956E090](v4 + 1504);
      if (v22)
      {
        v23 = v22;
        if ((a2 & 1) != 0)
        {
          swift_retain_n();
          v24 = Logger.logObject.getter();
          v25 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v24, v25))
          {
            v26 = (uint8_t *)swift_slowAlloc();
            v27 = swift_slowAlloc();
            v33[0] = v27;
            *(_DWORD *)v26 = 136315138;
            v28 = NetworkConnectionProvider.connectionIdentifier.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v33);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_246EC7000, v24, v25, "Provider - NetworkConnectionProvider [%s]: Better path available updated to YES", v26, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24956E018](v27, -1, -1);
            MEMORY[0x24956E018](v26, -1, -1);

          }
          else
          {

            swift_release_n();
          }
          v32 = swift_retain();
          specialized BackgroundConnection.connectionProviderReceivedBetterRouteNotification(_:)(v32, v23);
          swift_unknownObjectRelease();
          goto LABEL_26;
        }
        swift_unknownObjectRelease();
      }
      swift_retain_n();
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v33[0] = v18;
        *(_DWORD *)v17 = 136315138;
        v30 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        v21 = "Provider - NetworkConnectionProvider [%s]: Better path available updated to NO";
        goto LABEL_24;
      }
    }
    else
    {
      swift_retain_n();
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v33[0] = v18;
        *(_DWORD *)v17 = 136315138;
        v19 = NetworkConnectionProvider.connectionIdentifier.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        v21 = "Provider - NetworkConnectionProvider [%s]: Better path available updated, but connection does not exist or cancelled";
LABEL_24:
        _os_log_impl(&dword_246EC7000, v15, v16, v21, v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v18, -1, -1);
        MEMORY[0x24956E018](v17, -1, -1);
        swift_release();

        return;
      }
    }

LABEL_26:
    swift_release_n();
  }
}

uint64_t NetworkConnectionProvider.send(data:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void (**v6)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t);
  __int128 v18;
  uint64_t v19;
  _QWORD v20[7];

  v20[6] = a2;
  v9 = type metadata accessor for NWConnection.SendCompletion();
  OUTLINED_FUNCTION_141();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_48();
  outlined init with copy of NetworkConnectionProtocol?(v4 + 16, (uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (!v19)
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v18, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    goto LABEL_5;
  }
  outlined init with take of RPCOspreyConnectionProtocol(&v18, (uint64_t)v20);
  if ((*(_BYTE *)(v4 + 2099) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
LABEL_5:
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v11 = OUTLINED_FUNCTION_11_2();
    OUTLINED_FUNCTION_47_1(v11, v12);
    return OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F10, v13, v14);
  }
  v16 = OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_133();
  v17 = (void (*)(uint64_t))OUTLINED_FUNCTION_233();
  *((_QWORD *)v17 + 2) = v16;
  *((_QWORD *)v17 + 3) = a3;
  *((_QWORD *)v17 + 4) = a4;
  *v6 = partial apply for closure #1 in NetworkConnectionProvider.send(data:completion:);
  v6[1] = v17;
  (*(void (**)(void (**)(uint64_t), _QWORD, uint64_t))(v5 + 104))(v6, *MEMORY[0x24BDE01C8], v9);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  type metadata accessor for NWConnection.ContentContext();
  OUTLINED_FUNCTION_185();
  static NWConnection.ContentContext.defaultMessage.getter();
  NWConnection.send(content:contentContext:isComplete:completion:)();
  swift_release();
  (*(void (**)(void (**)(uint64_t), uint64_t))(v5 + 8))(v6, v9);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
}

void closure #1 in NetworkConnectionProvider.send(data:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, _BYTE *, uint64_t);
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_BYTE *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[12];
  int v56;
  os_log_t v57;
  uint64_t v58;
  void (*v59)(_QWORD, _QWORD);
  void (*v60)(uint64_t, _BYTE *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for NWError();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = &v55[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v55[-v15];
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return;
  v18 = Strong;
  if (*(_BYTE *)(Strong + 2099) == 1)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v63 = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = NetworkConnectionProvider.connectionIdentifier.getter();
      v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v20, v21, "Provider - NetworkConnectionProvider [%s]: Failed to send. Connection was cancelled", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v23, -1, -1);
      MEMORY[0x24956E018](v22, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
    return;
  }
  outlined init with copy of NetworkConnectionProtocol?(a1, (uint64_t)v9, &demangling cache variable for type metadata for NWError?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for NWError?);
    v26 = *(_QWORD *)(v18 + 2080);
    v27 = __CFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v18 + 2080) = v28;
      if (one-time initialization token for siriNetwork == -1)
      {
LABEL_10:
        v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.siriNetwork);
        swift_retain_n();
        v30 = Logger.logObject.getter();
        v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc();
          v33 = swift_slowAlloc();
          v63 = v33;
          *(_DWORD *)v32 = 136315138;
          v34 = NetworkConnectionProvider.connectionIdentifier.getter();
          v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_246EC7000, v30, v31, "Provider - NetworkConnectionProvider [%s]: Sent data successfully", v32, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24956E018](v33, -1, -1);
          MEMORY[0x24956E018](v32, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        a3(0, 0);
        swift_release();
        return;
      }
    }
    swift_once();
    goto LABEL_10;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v16, v9, v10);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v61 = a4;
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.siriNetwork);
  v37 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 16);
  v37((uint64_t)v14, v16, v10);
  swift_retain_n();
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.error.getter();
  v40 = v39;
  if (os_log_type_enabled(v38, v39))
  {
    v41 = swift_slowAlloc();
    v59 = a3;
    v42 = v41;
    v43 = (_QWORD *)swift_slowAlloc();
    v58 = swift_slowAlloc();
    v63 = v58;
    *(_DWORD *)v42 = 136315394;
    v60 = v37;
    v57 = v38;
    v44 = NetworkConnectionProvider.connectionIdentifier.getter();
    v56 = v40;
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2112;
    lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0688], MEMORY[0x24BDE0698]);
    swift_allocError();
    v60(v46, v14, v10);
    v47 = _swift_stdlib_bridgeErrorToNSError();
    v62 = v47;
    v37 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v43 = v47;
    v48 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v48(v14, v10);
    v38 = v57;
    _os_log_impl(&dword_246EC7000, v57, (os_log_type_t)v56, "Provider - NetworkConnectionProvider [%s]: Failed to send data with error: %@", (uint8_t *)v42, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v43, -1, -1);
    v49 = v58;
    swift_arrayDestroy();
    MEMORY[0x24956E018](v49, -1, -1);
    v50 = v42;
    a3 = v59;
    MEMORY[0x24956E018](v50, -1, -1);
  }
  else
  {
    swift_release_n();
    v48 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v48(v14, v10);
  }

  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0688], MEMORY[0x24BDE0698]);
  v51 = swift_allocError();
  v37((uint64_t)v52, v16, v10);
  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  v53 = (void *)swift_allocError();
  *(_QWORD *)(v54 + 8) = 0;
  *(_QWORD *)(v54 + 16) = 0;
  *(_QWORD *)v54 = v51;
  *(_OWORD *)(v54 + 24) = xmmword_246F72F20;
  a3(v53, 1);

  swift_release();
  v48(v16, v10);
}

void NetworkConnectionProvider.readData(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[7];

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_5_1();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_59_0();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v52[0] = OUTLINED_FUNCTION_2_2();
    v52[6] = v3;
    *(_DWORD *)v9 = 136315138;
    v10 = NetworkConnectionProvider.connectionIdentifier.getter();
    *(_QWORD *)&v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_69();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v7, v8, "Provider - NetworkConnectionProvider [%s]: Reader. Ready to receive data.", v9, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_48();
  outlined init with copy of NetworkConnectionProtocol?(v2 + 16, (uint64_t)&v48, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v50)
  {
    v19 = OUTLINED_FUNCTION_189(&v48, v12, v13, v14, v15, v16, v17, v18, v41, v44);
    if ((*(_BYTE *)(v2 + 2099) & 1) == 0)
    {
      OUTLINED_FUNCTION_197(v19, v20, v21, v22, v23, v24, v25, v26, v42, v45, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, v50, v51, v52[0], v52[1],
        v52[2],
        v52[3]);
      v31 = OUTLINED_FUNCTION_14_0();
      swift_weakInit();
      v32 = (_QWORD *)OUTLINED_FUNCTION_233();
      v32[2] = v31;
      v32[3] = a1;
      v32[4] = a2;
      swift_retain();
      OUTLINED_FUNCTION_150();
      NWConnection.receive(minimumIncompleteLength:maximumLength:completion:)();
      swift_release();
      v33 = swift_release();
      OUTLINED_FUNCTION_139(v33, v34, v35, v36, v37, v38, v39, v40, v43);
      goto LABEL_11;
    }
    OUTLINED_FUNCTION_139(v19, v20, v21, v22, v23, v24, v25, v26, v42);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v48, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  }
  lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
  v27 = OUTLINED_FUNCTION_11_2();
  OUTLINED_FUNCTION_47_1(v27, v28);
  OUTLINED_FUNCTION_25_0((__n128)xmmword_246F72F10, v29, v30);
LABEL_11:
  OUTLINED_FUNCTION_87();
}

void closure #1 in NetworkConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, void *, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v35 - v15;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if ((*(_BYTE *)(Strong + 2099) & 1) != 0)
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        v22 = swift_slowAlloc();
        v36 = v22;
        *(_DWORD *)v21 = 136315138;
        v23 = NetworkConnectionProvider.connectionIdentifier.getter();
        v35[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_246EC7000, v19, v20, "Provider - NetworkConnectionProvider [%s]: Reader got data, but connection was cancelled", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v22, -1, -1);
        MEMORY[0x24956E018](v21, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      v25 = *(_QWORD *)(Strong + 2080);
      v26 = __CFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(Strong + 2080) = v27;
        outlined init with copy of NetworkConnectionProtocol?(a5, (uint64_t)v16, &demangling cache variable for type metadata for NWError?);
        if (a2 >> 60 == 15
          || (v28 = type metadata accessor for NWError(),
              __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v28) != 1))
        {
          outlined destroy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)&demangling cache variable for type metadata for NWError?);
          outlined init with copy of NetworkConnectionProtocol?(a5, (uint64_t)v14, &demangling cache variable for type metadata for NWError?);
          v31 = type metadata accessor for NWError();
          if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v31) == 1)
          {
            outlined destroy of NetworkConnectionProtocol?((uint64_t)v14, (uint64_t)&demangling cache variable for type metadata for NWError?);
            lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
            v29 = (void *)swift_allocError();
            v30 = 0;
            *(_QWORD *)(v32 + 16) = 0;
            *(_QWORD *)v32 = 0;
          }
          else
          {
            lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0688], MEMORY[0x24BDE0698]);
            v33 = swift_allocError();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v34, v14, v31);
            lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
            v29 = (void *)swift_allocError();
            v30 = 0;
            *(_QWORD *)(v32 + 16) = 0;
            *(_QWORD *)v32 = v33;
          }
          *(_QWORD *)(v32 + 8) = 0;
          *(_OWORD *)(v32 + 24) = xmmword_246F736E0;
        }
        else
        {
          outlined destroy of NetworkConnectionProtocol?((uint64_t)v16, (uint64_t)&demangling cache variable for type metadata for NWError?);
          v29 = 0;
          v30 = 1;
        }
        a7(a1, a2, v29, v30);

        swift_release();
      }
    }
  }
}

Swift::Void __swiftcall NetworkConnectionProvider.updateAndEmitConnectionMetricsPreparationReport()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  _BYTE v23[360];
  _QWORD v24[45];
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[45];
  _BYTE v28[360];
  _QWORD v29[45];
  __int128 v30;
  uint64_t v31;
  _BYTE v32[384];
  _BYTE v33[360];
  _BYTE v34[360];
  _BYTE v35[360];
  _BYTE v36[384];
  __int128 v37;
  uint64_t v38;
  _QWORD v39[6];

  OUTLINED_FUNCTION_19();
  MEMORY[0x24BDAC7A8](v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_48();
  outlined init with copy of NetworkConnectionProtocol?(v0 + 16, (uint64_t)&v37, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v38)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v37, (uint64_t)v39);
    __swift_project_boxed_opaque_existential_1(v39, v39[3]);
    NWConnection.currentPath.getter();
    ConnectionPreparationReport.init(path:)(v1, v36);
    OUTLINED_FUNCTION_25_3((uint64_t)v36, (uint64_t)v33);
    OUTLINED_FUNCTION_0_2();
    v4 = v0 + 152;
    OUTLINED_FUNCTION_25_3(v0 + 152, (uint64_t)v34);
    OUTLINED_FUNCTION_25_3((uint64_t)v33, v0 + 152);
    outlined release of ConnectionPreparationReport?((uint64_t)v34);
    v5 = NetworkConnectionProvider.connectionMetrics.modify();
    v7 = v6;
    OUTLINED_FUNCTION_25_3(v6 + 96, (uint64_t)v35);
    OUTLINED_FUNCTION_25_3((uint64_t)v35, (uint64_t)v36);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v36) != 1)
    {
      v8 = (void *)0xE000000000000000;
      v25 = 0;
      v26 = 0xE000000000000000;
      outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v39, (uint64_t)v32);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)v32, (uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      if (v31)
      {
        outlined init with take of RPCOspreyConnectionProtocol(&v30, (uint64_t)v29);
        outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v29, (uint64_t)v28);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
        v9 = String.init<A>(describing:)();
        v8 = v10;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
      }
      else
      {
        v9 = 0;
      }
      outlined destroy of NetworkConnectionProtocol?((uint64_t)v32, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      v11._countAndFlagsBits = v9;
      v11._object = v8;
      String.append(_:)(v11);
      OUTLINED_FUNCTION_201();
      v12 = v26;
      *(_QWORD *)(v7 + 96) = v25;
      *(_QWORD *)(v7 + 104) = v12;
      swift_bridgeObjectRelease();
    }
    ((void (*)(_QWORD *, _QWORD))v5)(v27, 0);
    OUTLINED_FUNCTION_42_2(v4, (uint64_t)&v30);
    OUTLINED_FUNCTION_42_2((uint64_t)&v30, (uint64_t)v32);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v32) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v30, (uint64_t)v28, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      OUTLINED_FUNCTION_198();
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v13 = OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_218(v13, (uint64_t)static Logger.siriNetwork);
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v30, (uint64_t)v29, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      outlined retain of ConnectionPreparationReport(v29);
      OUTLINED_FUNCTION_198();
      Logger.logObject.getter();
      v14 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_27_0(v14))
      {
        v15 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        v25 = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v15 = 136315138;
        memcpy(v27, v32, sizeof(v27));
        OUTLINED_FUNCTION_198();
        v16 = String.init<A>(describing:)();
        v27[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_26_0();
        OUTLINED_FUNCTION_112();
        OUTLINED_FUNCTION_112();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, &demangling cache variable for type metadata for ConnectionPreparationReport?, (os_log_type_t)v7, "%s", v15);
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_0_4();
      }
      OUTLINED_FUNCTION_112();
      OUTLINED_FUNCTION_112();
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v30, (uint64_t)v27, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      outlined release of ConnectionPreparationReport(v27);

    }
    OUTLINED_FUNCTION_42_2(v4, (uint64_t)v28);
    OUTLINED_FUNCTION_42_2((uint64_t)v28, (uint64_t)v29);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v29) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v28, (uint64_t)v27, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      v18 = LOBYTE(v27[4]);
      v19 = objc_allocWithZone(MEMORY[0x24BE95310]);
      outlined retain of ConnectionPreparationReport(v27);
      v20 = objc_msgSend(v19, sel_init);
      objc_msgSend(v20, sel_setHasDNS_, v18);
      if (v20)
      {
        NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)();

      }
      outlined release of ConnectionPreparationReport?((uint64_t)v28);
    }
    OUTLINED_FUNCTION_42_2(v4, (uint64_t)&v25);
    OUTLINED_FUNCTION_42_2((uint64_t)&v25, (uint64_t)v27);
    if (_s11SiriNetwork27ConnectionPreparationReportVSgWOg((uint64_t)v27) != 1)
    {
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v25, (uint64_t)v24, &demangling cache variable for type metadata for ConnectionPreparationReport?);
      memcpy(v23, v24, sizeof(v23));
      outlined retain of ConnectionPreparationReport(v24);
      v21 = ConnectionPreparationReport.netDebugConnectionStatePreparationSnapshot.getter();
      if (v21)
      {
        v22 = v21;
        NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)();

      }
      outlined release of ConnectionPreparationReport?((uint64_t)&v25);
    }
    OUTLINED_FUNCTION_76();
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v37, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  }
  OUTLINED_FUNCTION_1_1();
}

Swift::Void __swiftcall NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  v0 = OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_229(v0, (uint64_t)&v4, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v5)
  {
    outlined init with take of RPCOspreyConnectionProtocol(&v4, (uint64_t)v6);
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    v1 = OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_133();
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v6, (uint64_t)&v4);
    v2 = OUTLINED_FUNCTION_6();
    *(_QWORD *)(v2 + 16) = v1;
    outlined init with take of RPCOspreyConnectionProtocol(&v4, v2 + 24);
    v3 = OUTLINED_FUNCTION_6();
    *(_QWORD *)(v3 + 16) = partial apply for closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport();
    *(_QWORD *)(v3 + 24) = v2;
    swift_retain();
    OUTLINED_FUNCTION_123();
    NWConnection.requestEstablishmentReport(queue:completion:)();
    swift_release();
    OUTLINED_FUNCTION_34_0();
    swift_release();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v6);
  }
  else
  {
    outlined destroy of NetworkConnectionProtocol?((uint64_t)&v4, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  }
}

uint64_t closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t ready;
  void *v67;
  uint64_t v68;
  id v69;
  NSObject *log;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98[40];
  _BYTE v99[40];
  uint64_t v100;
  unint64_t v101;
  char v102[32];
  __int128 v103;
  int v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = (uint64_t *)result;
    v79 = a3;
    swift_beginAccess();
    v7 = v6[65];
    v8 = v6[66];
    v9 = v6[67];
    v10 = v6[68];
    v11 = v6[69];
    v12 = v6[70];
    v91 = v6[71];
    v95 = v6[64];
    v83 = *((_OWORD *)v6 + 37);
    v87 = *((_OWORD *)v6 + 36);
    v13 = v6[76];
    v14 = (void *)v6[77];
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, (uint64_t)(v6 + 64), &demangling cache variable for type metadata for ConnectionEstablishmentReport?);
    outlined retain of ConnectionEstablishmentReport?(a1);
    outlined consume of ConnectionEstablishmentReport?(v95, v7, v8, v9, v10, v11, v12, v91, v87, *((uint64_t *)&v87 + 1), v83, *((uint64_t *)&v83 + 1), v13, v14);
    v16 = NetworkConnectionProvider.connectionMetrics.modify();
    if (*(_QWORD *)(v15 + 512))
    {
      v17 = v15;
      v18 = (void *)0xE000000000000000;
      v100 = 0;
      v101 = 0xE000000000000000;
      outlined init with copy of RPCOspreyConnectionProtocol(v79, (uint64_t)&v117);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)&v117, (uint64_t)&v103, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      if (v106)
      {
        outlined init with take of RPCOspreyConnectionProtocol(&v103, (uint64_t)v99);
        outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v99, (uint64_t)v98);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
        v19 = String.init<A>(describing:)();
        v18 = v20;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v99);
      }
      else
      {
        v19 = 0;
      }
      outlined destroy of NetworkConnectionProtocol?((uint64_t)&v117, (uint64_t)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
      v21._countAndFlagsBits = v19;
      v21._object = v18;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22 = v101;
      *(_QWORD *)(v17 + 456) = v100;
      *(_QWORD *)(v17 + 464) = v22;
      swift_bridgeObjectRelease();
    }
    ((void (*)(char *, _QWORD))v16)(v102, 0);
    if (v6[71])
    {
      v23 = v6[71];
      v24 = v6[64];
      v88 = v6[66];
      v92 = v6[67];
      v73 = v6[68];
      v76 = v6[69];
      v25 = v6[72];
      v71 = v6[73];
      v26 = v6[74];
      v27 = v6[75];
      v80 = v6[70];
      v84 = v6[76];
      v28 = (void *)v6[77];
      v29 = one-time initialization token for siriNetwork;
      v30 = v6[65];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v32 = v28;
      if (v29 != -1)
        swift_once();
      v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.siriNetwork);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v69 = v32;
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.default.getter();
      log = v34;
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)&v103 = v68;
        v117 = v24;
        v118 = v30;
        v119 = v88;
        v120 = BYTE4(v88) & 1;
        v121 = v92;
        v122 = v73 & 1;
        v123 = v76;
        v124 = v80 & 1;
        v125 = v23;
        v126 = v31;
        v127 = v71 & 0x101;
        v128 = v26;
        v129 = v27;
        v130 = v84;
        v131 = v69;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37 = v69;
        v38 = String.init<A>(describing:)();
        v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
        _os_log_impl(&dword_246EC7000, log, v35, "%s", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v68, -1, -1);
        MEMORY[0x24956E018](v36, -1, -1);

        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
      }
      else
      {
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);
        outlined consume of ConnectionEstablishmentReport?(v24, v30, v88, v92, v73, v76, v80, v23, v31, v71, v26, v27, v84, v28);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    v40 = v6[71];
    if (v40)
    {
      v41 = v6[65];
      v42 = v6[66];
      v43 = v6[67];
      v44 = v6[69];
      v45 = v6[70];
      v46 = v6[72];
      v47 = v6[73];
      v48 = v6[74];
      v49 = v6[75];
      v50 = v6[76];
      v51 = (void *)v6[77];
      v93 = v6[68];
      v96 = v6[64];
      v117 = v96;
      v118 = v41;
      v119 = v42;
      v120 = BYTE4(v42) & 1;
      v89 = v43;
      v121 = v43;
      v122 = v93 & 1;
      v81 = v44;
      v85 = v45;
      v123 = v44;
      v124 = v45 & 1;
      v125 = v40;
      v126 = v46;
      v127 = v47 & 0x101;
      v74 = v50;
      v77 = v48;
      v128 = v48;
      v129 = v49;
      v130 = v50;
      v131 = v51;
      swift_bridgeObjectRetain();
      v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v52 = ConnectionEstablishmentReport.netConnectionStateReadySnapshot.getter();
      if (v52)
      {
        v53 = v52;
        NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)();

      }
      outlined consume of ConnectionEstablishmentReport?(v96, v41, v42, v89, v93, v81, v85, v40, v46, v47, v77, v49, v74, v51);
    }
    v54 = v6[71];
    if (v54)
    {
      v55 = v6[65];
      v56 = v6[66];
      v57 = v6[68];
      v58 = v6[69];
      v59 = v6[70];
      v60 = v6[72];
      v61 = v6[73];
      v62 = v6[74];
      v63 = v6[75];
      v64 = v6[76];
      v65 = (void *)v6[77];
      v78 = v6[64];
      v82 = v6[67];
      *(_QWORD *)&v103 = v78;
      *((_QWORD *)&v103 + 1) = v55;
      v104 = v56;
      v86 = v56;
      v105 = BYTE4(v56) & 1;
      v106 = v82;
      v94 = v57;
      v97 = v59;
      v107 = v57 & 1;
      v90 = v58;
      v108 = v58;
      v109 = v59 & 1;
      v110 = v54;
      v111 = v60;
      v112 = v61 & 0x101;
      v72 = v64;
      v75 = v62;
      v113 = v62;
      v114 = v63;
      v115 = v64;
      v116 = v65;
      swift_bridgeObjectRetain();
      v65;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ready = ConnectionEstablishmentReport.netDebugConnectionStateReadySnapshot.getter();
      if (ready)
      {
        v67 = (void *)ready;
        NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)();
        swift_release();

      }
      else
      {
        swift_release();
      }
      return outlined consume of ConnectionEstablishmentReport?(v78, v55, v86, v82, v94, v90, v97, v54, v60, v61, v75, v63, v72, v65);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

Swift::Void __swiftcall NetworkConnectionProvider.updateConnectionMetricsSnapshotReport()()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  char v6;
  Swift::OpaquePointer v7;
  Swift::String_optional v8;
  unint64_t *v9;
  const void *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  SiriNetwork::ConnectionQualityReport *v31;
  SiriNetwork::ConnectionQualityReport *v32;
  void *v33;
  id v34;
  SiriNetwork::ConnectionQualityReport v35;
  unint64_t *v36;
  unint64_t *v37;
  _BYTE v38[320];
  _BYTE v39[320];
  _BYTE v40[32];
  _BYTE v41[712];
  _BYTE v42[712];
  _BYTE v43[712];
  _BYTE v44[712];
  _BYTE v45[712];
  uint64_t v46;
  _BYTE v47[40];
  _QWORD v48[180];

  ((void (*)())MEMORY[0x24BDAC7A8])();
  v1 = v0;
  OUTLINED_FUNCTION_48();
  outlined init with copy of NetworkConnectionProtocol?(v0 + 16, (uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  if (v48[3])
  {
    v2 = (__int128 *)OUTLINED_FUNCTION_165();
    outlined init with take of RPCOspreyConnectionProtocol(v2, (uint64_t)v47);
    OUTLINED_FUNCTION_0_2();
    v3 = OUTLINED_FUNCTION_165();
    OUTLINED_FUNCTION_22_1(v3, (const void *)(v0 + 56));
    if (*(_QWORD *)(v48[160] + 16))
    {
      OUTLINED_FUNCTION_235();
    }
    else
    {
      OUTLINED_FUNCTION_142();
      OUTLINED_FUNCTION_235();
      *(_QWORD *)(v0 + 1336) = NWConnection.getAttemptedEndpoints()();
      OUTLINED_FUNCTION_196();
    }
    OUTLINED_FUNCTION_142();
    v6 = *(_BYTE *)(v0 + 2101);
    v7._rawValue = *(void **)(v0 + 1336);
    OUTLINED_FUNCTION_16_0();
    v8 = NWConnection.getConnectionEdgeID(wasConnected:attemptedEndpoints:)(v6, v7);
    OUTLINED_FUNCTION_8_2();
    *(Swift::String_optional *)(v0 + 1344) = v8;
    swift_bridgeObjectRelease();
    v9 = OUTLINED_FUNCTION_234();
    OUTLINED_FUNCTION_28(v9, v10);
    v11 = OUTLINED_FUNCTION_234();
    ConnectionMethod.connectionMethodDescription(connectionConfiguration:isMPTCP:)((uint64_t)v11, v12, 1);
    v14 = v13;
    v16 = v15;
    outlined init with copy of RPCOspreyConnectionProtocol((uint64_t)v47, (uint64_t)v45);
    ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)((uint64_t)v45, *(unsigned __int8 *)(v1 + 2101), *(unsigned int *)(*(_QWORD *)(v1 + 2144) + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber), 0xD000000000000017, 0x8000000246F77690, 0x6574736575716572, 0xEA0000000000646ELL, v14, v16);
    v17 = OUTLINED_FUNCTION_234();
    OUTLINED_FUNCTION_37_1((uint64_t)v17, (uint64_t)v43);
    OUTLINED_FUNCTION_37_1(v1 + 624, (uint64_t)v44);
    OUTLINED_FUNCTION_37_1((uint64_t)v43, v1 + 624);
    outlined release of ConnectionSnapshotReport?((uint64_t)v44);
    OUTLINED_FUNCTION_181();
    v19 = v18;
    OUTLINED_FUNCTION_37_1(v18 + 568, (uint64_t)v45);
    OUTLINED_FUNCTION_37_1((uint64_t)v45, (uint64_t)&v46);
    v20 = OUTLINED_FUNCTION_234();
    OUTLINED_FUNCTION_3_2((uint64_t)v20);
    if (!v21)
    {
      OUTLINED_FUNCTION_37_1(v19 + 608, (uint64_t)v41);
      OUTLINED_FUNCTION_37_1((uint64_t)v41, (uint64_t)v42);
      OUTLINED_FUNCTION_5_2((uint64_t)v42);
      if (!v21)
      {
        v22 = *(_QWORD *)(v1 + 1496);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + OBJC_IVAR___SNNetworkManagerInternal_carrierName);
          v24 = swift_bridgeObjectRetain();
        }
        else
        {
          v23 = 0;
          v24 = 0;
        }
        *(_QWORD *)(v19 + 616) = v23;
        *(_QWORD *)(v19 + 624) = v24;
        OUTLINED_FUNCTION_196();
      }
    }
    OUTLINED_FUNCTION_28_0((uint64_t)v39);
    v25 = *(_QWORD *)(v1 + 1496);
    if (v25)
    {
      v26 = v25 + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength;
      if ((*(_BYTE *)(v26 + 8) & 1) == 0)
      {
        v27 = *(_QWORD *)v26;
        NetworkConnectionProvider.connectionMetrics.modify();
        v29 = v28;
        OUTLINED_FUNCTION_37_1(v28 + 568, (uint64_t)v41);
        OUTLINED_FUNCTION_37_1((uint64_t)v41, (uint64_t)v42);
        OUTLINED_FUNCTION_3_2((uint64_t)v42);
        if (!v21)
        {
          OUTLINED_FUNCTION_37_1(v29 + 608, (uint64_t)v38);
          OUTLINED_FUNCTION_37_1((uint64_t)v38, (uint64_t)v39);
          OUTLINED_FUNCTION_5_2((uint64_t)v39);
          if (!v21)
          {
            *(double *)(v29 + 632) = (double)v27;
            *(_BYTE *)(v29 + 640) = 0;
          }
        }
        OUTLINED_FUNCTION_28_0((uint64_t)v40);
      }
    }
    v30 = OUTLINED_FUNCTION_181();
    v32 = v31;
    OUTLINED_FUNCTION_42_2((uint64_t)&v31[142], (uint64_t)v41);
    OUTLINED_FUNCTION_42_2((uint64_t)v41, (uint64_t)v42);
    OUTLINED_FUNCTION_3_2((uint64_t)v42);
    if (!v21)
    {
      v33 = *(void **)(v1 + 1496);
      if (v33)
      {
        v34 = v33;
        v35 = NetworkManager.currentConnectionQualityReport()();

      }
      else
      {
        v35 = (SiriNetwork::ConnectionQualityReport)4;
      }
      v32[316] = v35;
    }
    ((void (*)(_BYTE *, _QWORD))v30)(v39, 0);
    v36 = OUTLINED_FUNCTION_165();
    specialized ConnectionProviderProtocol.updateConnectionMetrics(with:completion:)((uint64_t)v36);
    v37 = OUTLINED_FUNCTION_165();
    outlined release of ConnectionMetrics((uint64_t)v37);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v47);
  }
  else
  {
    v4 = OUTLINED_FUNCTION_165();
    outlined destroy of NetworkConnectionProtocol?((uint64_t)v4, v5);
  }
}

Swift::Int NetworkConnectionProvider.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  specialized ConnectionProviderProtocol.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkConnectionProvider.StateUpdateHandler);
}

uint64_t type metadata accessor for NetworkConnectionProvider.ViabilityUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkConnectionProvider.ViabilityUpdateHandler);
}

uint64_t type metadata accessor for NetworkConnectionProvider.BetterPathUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkConnectionProvider.BetterPathUpdateHandler);
}

uint64_t type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for NetworkConnectionProvider.StateUpdateHandler()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for ConnectionProviderProtocol.connectionMetrics.getter in conformance NetworkConnectionProvider@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE __dst[1440];

  v3 = (const void *)(v1 + 56);
  swift_beginAccess();
  memcpy(__dst, v3, 0x599uLL);
  memcpy(a1, v3, 0x599uLL);
  return outlined retain of ConnectionMetrics((uint64_t)__dst);
}

uint64_t (*protocol witness for ConnectionProviderProtocol.connectionMetrics.modify in conformance NetworkConnectionProvider())()
{
  swift_beginAccess();
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.getter in conformance NetworkConnectionProvider()
{
  uint64_t v0;

  return MEMORY[0x24956E090](v0 + 1504);
}

uint64_t protocol witness for ConnectionProviderProtocol.delegate.setter in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1512) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

_QWORD *protocol witness for ConnectionProviderProtocol.connectionConfiguration.getter in conformance NetworkConnectionProvider@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _QWORD __dst[65];

  v3 = (const void *)(v1 + 1536);
  memcpy(__dst, v3, 0x204uLL);
  memcpy(a1, v3, 0x204uLL);
  return outlined retain of ConnectionConfiguration(__dst);
}

id protocol witness for ConnectionProviderProtocol.connectionQueue.getter in conformance NetworkConnectionProvider()
{
  uint64_t v0;

  return *(id *)(v0 + 2056);
}

uint64_t protocol witness for ConnectionProviderProtocol.openCompletion.setter in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 2064);
  *(_QWORD *)(v2 + 2064) = a1;
  *(_QWORD *)(v2 + 2072) = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v3);
}

uint64_t protocol witness for ConnectionProviderProtocol.isMPTCP.getter in conformance NetworkConnectionProvider()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2100);
}

void protocol witness for ConnectionProviderProtocol.openConnectionWithInitialPayload(_:completion:) in conformance NetworkConnectionProvider()
{
  NetworkConnectionProvider.openConnectionWithInitialPayload(_:completion:)();
}

uint64_t protocol witness for ConnectionProviderProtocol.send(data:completion:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return NetworkConnectionProvider.send(data:completion:)(a1, a2, a3, a4);
}

void protocol witness for ConnectionProviderProtocol.readData(_:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  NetworkConnectionProvider.readData(_:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkConnectionProvider()
{
  return NetworkConnectionProvider.hashValue.getter();
}

_QWORD *protocol witness for Hashable.hash(into:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkConnectionProvider);
  return ConnectionProviderProtocol.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  v3 = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkConnectionProvider, a2);
  ConnectionProviderProtocol.hash(into:)((uint64_t)v5, a2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NetworkConnectionProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *a2;
  v6 = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkConnectionProvider, a3);
  return static ConnectionProviderProtocol.== infix(_:_:)(v4, v5, a3, v6);
}

void base witness table accessor for Equatable in NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnectionProvider, (uint64_t)&protocol conformance descriptor for NetworkConnectionProvider);
}

void instantiation function for generic protocol witness table for NetworkConnectionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnectionProvider, (uint64_t)&protocol conformance descriptor for NetworkConnectionProvider);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_246EF83C8()
{
  swift_weakDestroy();
  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

uint64_t sub_246EF83E4()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NetworkConnectionProvider.updateAndEmitConnectionMetricsReadyEstablishmentReport()(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

uint64_t sub_246EF8418()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NWConnection.readyEstablishmentReport(queue:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in NWConnection.readyEstablishmentReport(queue:completion:)(a1, *(void (**)(_QWORD *))(v1 + 16));
}

uint64_t outlined retain of ConnectionEstablishmentReport?(uint64_t a1)
{
  outlined copy of ConnectionEstablishmentReport?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(void **)(a1 + 104));
  return a1;
}

uint64_t sub_246EF8494()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void partial apply for closure #1 in NetworkConnectionProvider.readData(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  closure #1 in NetworkConnectionProvider.readData(_:)(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(void (**)(uint64_t, unint64_t, void *, uint64_t))(v5 + 24));
}

uint64_t sub_246EF84AC()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void partial apply for closure #1 in NetworkConnectionProvider.send(data:completion:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in NetworkConnectionProvider.send(data:completion:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_246EF84C4()
{
  OUTLINED_FUNCTION_99();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkConnectionProvider.handleBetterPathUpdate(_:)()
{
  uint64_t v0;

  closure #1 in NetworkConnectionProvider.handleBetterPathUpdate(_:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void specialized BackgroundConnection.connectionProvider(_:received:)()
{
  specialized BackgroundConnection.connectionProvider(_:received:)();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_19();
  v3 = v2;
  v5 = v4;
  v16 = *(_QWORD *)(OUTLINED_FUNCTION_18() - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  v15 = *(_QWORD *)(OUTLINED_FUNCTION_0_3() - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_34_2(&lazy protocol witness table cache variable for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider, v8, (uint64_t (*)(uint64_t))type metadata accessor for RPCOspreyConnectionProvider, (uint64_t)&protocol conformance descriptor for RPCOspreyConnectionProvider);
  v10 = v9;
  v11 = OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_84_0();
  v12 = (_QWORD *)OUTLINED_FUNCTION_6();
  v12[2] = v11;
  v12[3] = v5;
  v12[4] = v10;
  v12[5] = v3;
  v13 = OUTLINED_FUNCTION_138();
  swift_retain();
  OUTLINED_FUNCTION_185();
  v14 = v3;
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_57_0();
  MEMORY[0x24956D244](0, v1, v0, v13);
  _Block_release(v13);
  OUTLINED_FUNCTION_104(v0, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  OUTLINED_FUNCTION_79(v15);
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_19();
  v3 = v2;
  v5 = v4;
  v15 = *(_QWORD *)(OUTLINED_FUNCTION_18() - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  v14 = *(_QWORD *)(OUTLINED_FUNCTION_0_3() - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_3_0();
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, v8, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnectionProvider, (uint64_t)&protocol conformance descriptor for NetworkConnectionProvider);
  v10 = v9;
  v11 = OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_84_0();
  v12 = (_QWORD *)OUTLINED_FUNCTION_6();
  v12[2] = v11;
  v12[3] = v5;
  v12[4] = v10;
  v12[5] = v3;
  v13 = OUTLINED_FUNCTION_138();
  swift_retain();
  OUTLINED_FUNCTION_185();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_57_0();
  MEMORY[0x24956D244](0, v1, v0, v13);
  OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_104(v0, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  OUTLINED_FUNCTION_79(v14);
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void specialized BackgroundConnection.connectionProvider(_:receivedViabilityChangeNotification:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;

  v4 = a2;
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnectionProvider, (uint64_t)&protocol conformance descriptor for NetworkConnectionProvider);
  v6 = *(_QWORD *)(a3 + 1080);
  if (v6)
    v7 = v6 == a1;
  else
    v7 = 0;
  if (v7 && MEMORY[0x24956E090](a1 + 1504))
  {
    type metadata accessor for BackgroundConnection();
    v8 = swift_dynamicCastClass();
    if (!v8)
      goto LABEL_23;
    v9 = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v9 != a3)
      goto LABEL_23;
    if (*(_BYTE *)(a3 + 1188) == (v4 & 1))
    {
      if ((v4 & 1) == 0)
      {
        if ((*(_BYTE *)(a3 + 1189) & 1) != 0)
        {
          BackgroundConnection.startSecondaryConnection()();
        }
        else
        {
          if (one-time initialization token for siriNetwork != -1)
            swift_once();
          v12 = type metadata accessor for Logger();
          __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
          oslog = Logger.logObject.getter();
          v13 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(oslog, v13))
          {
            v14 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v14 = 0;
            _os_log_impl(&dword_246EC7000, oslog, v13, "Background Connection - Provider: Wait for better route event", v14, 2u);
            MEMORY[0x24956E018](v14, -1, -1);
            swift_unknownObjectRelease();

            return;
          }

        }
        goto LABEL_23;
      }
    }
    else if ((v4 & 1) == 0)
    {
      lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
      v10 = (void *)swift_allocError();
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      *(_OWORD *)(v11 + 24) = xmmword_246F736F0;
      BackgroundConnection.didEncounterError(_:)(v10);

LABEL_23:
      swift_unknownObjectRelease();
      return;
    }
    BackgroundConnection.cancelSecondaryConnection()();
    goto LABEL_23;
  }
}

void specialized BackgroundConnection.connectionProviderReceivedBetterRouteNotification(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(&lazy protocol witness table cache variable for type NetworkConnectionProvider and conformance NetworkConnectionProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for NetworkConnectionProvider, (uint64_t)&protocol conformance descriptor for NetworkConnectionProvider);
  v4 = *(_QWORD *)(a2 + 1080);
  if (v4)
    v5 = v4 == a1;
  else
    v5 = 0;
  if (v5 && MEMORY[0x24956E090](a1 + 1504))
  {
    type metadata accessor for BackgroundConnection();
    v6 = swift_dynamicCastClass();
    if (v6)
    {
      v7 = v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (v7 == a2)
      {
        *(_BYTE *)(a2 + 1189) = 1;
        if ((*(_BYTE *)(a2 + 1188) & 1) == 0)
        {
          if (one-time initialization token for siriNetwork != -1)
            swift_once();
          v8 = type metadata accessor for Logger();
          __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
          v9 = Logger.logObject.getter();
          v10 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v9, v10))
          {
            v11 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v11 = 0;
            _os_log_impl(&dword_246EC7000, v9, v10, "Background Connection - Provider: Starting secondary connection after better route notification received", v11, 2u);
            MEMORY[0x24956E018](v11, -1, -1);
          }

          BackgroundConnection.startSecondaryConnection()();
        }
      }
    }
    swift_unknownObjectRelease();
  }
}

void partial apply for closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:)()
{
  uint64_t v0;

  closure #1 in NetworkConnectionProvider.handleViabilityUpdate(_:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

unint64_t type metadata accessor for OS_dispatch_source()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_source;
  if (!lazy cache variable for type metadata for OS_dispatch_source)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
  }
  return result;
}

void lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x24956DF70](MEMORY[0x24BEE12C8], v3), a1);
  }
  OUTLINED_FUNCTION_3();
}

uint64_t sub_246EF8D68()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer()()
{
  uint64_t *v0;

  return specialized closure #1 in ConnectionProviderProtocol.setupConnectionUnviableTimer()(v0[2], v0[3], v0[4]);
}

uint64_t outlined init with take of ConnectionAnalysisInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAnalysisInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ConnectionAnalysisInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAnalysisInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConnectionAnalysisInfo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConnectionAnalysisInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void outlined init with copy of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_171(a1, a2, a3);
  OUTLINED_FUNCTION_230(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_3();
}

uint64_t partial apply for closure #1 in BackgroundConnection.connectionProvider(_:receivedIntermediateError:)()
{
  uint64_t v0;

  return closure #1 in BackgroundConnection.connectionProvider(_:receivedIntermediateError:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (os_log_type_t)*(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t partial apply for specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()()
{
  uint64_t v0;

  return specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in ConnectionProviderProtocol.setupStaleConnectionTimer()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void partial apply for closure #1 in BackgroundConnection.connectionProvider(_:received:)()
{
  uint64_t v0;

  closure #1 in BackgroundConnection.connectionProvider(_:received:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_246EF8EA0()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();
  if (*(_QWORD *)(v0 + 24))
    swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NetworkConnectionProvider.closeWithError(_:)()
{
  uint64_t v0;

  return closure #1 in NetworkConnectionProvider.closeWithError(_:)(*(_QWORD *)(v0 + 16), *(void (**)(void **))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t outlined assign with take of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_246EF8F2C()
{
  uint64_t v0;

  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

void partial apply for closure #2 in NetworkConnectionProvider.closeWithError(_:)()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_246EF8F50()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in NetworkConnectionProvider.closeWithError(_:)()
{
  uint64_t v0;

  return closure #3 in NetworkConnectionProvider.closeWithError(_:)(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24), *(void (**)(void))(v0 + 64));
}

uint64_t outlined retain of ConnectionSnapshotReport(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  v6 = *(_OWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 392);
  v22 = *(_QWORD *)(a1 + 384);
  v19 = *(_QWORD *)(a1 + 408);
  v20 = *(_QWORD *)(a1 + 400);
  v17 = *(_QWORD *)(a1 + 424);
  v18 = *(_QWORD *)(a1 + 416);
  v16 = *(_QWORD *)(a1 + 432);
  v2 = *(void **)(a1 + 704);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ConnectionNetworkReport?(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v6, *((uint64_t *)&v6 + 1), v5, *((uint64_t *)&v5 + 1));
  outlined copy of ConnectionInterfaceReport?(v22, v21, v20, v19, v18, v17, v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

uint64_t outlined release of ConnectionSnapshotReport(uint64_t a1)
{
  void *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 88);
  v6 = *(_OWORD *)(a1 + 104);
  v5 = *(_OWORD *)(a1 + 120);
  v4 = *(_OWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 392);
  v21 = *(_QWORD *)(a1 + 384);
  v18 = *(_QWORD *)(a1 + 408);
  v19 = *(_QWORD *)(a1 + 400);
  v16 = *(_QWORD *)(a1 + 424);
  v17 = *(_QWORD *)(a1 + 416);
  v15 = *(_QWORD *)(a1 + 432);
  v2 = *(void **)(a1 + 704);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ConnectionNetworkReport?(v14, v13, v12, v11, v10, v9, v8, v7, v6, *((uint64_t *)&v6 + 1), v5, *((uint64_t *)&v5 + 1), v4, *((uint64_t *)&v4 + 1));
  outlined consume of ConnectionInterfaceReport?(v21, v20, v19, v18, v17, v16, v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void partial apply for closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #3 in NetworkConnectionProvider.closeWithError(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()()
{
  return specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()();
}

{
  return specialized closure #1 in ConnectionProviderProtocol.setupOpenSlowTimer()();
}

void partial apply for specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer()()
{
  specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer()();
}

{
  specialized closure #1 in ConnectionProviderProtocol.setupOpenTimeoutTimer()();
}

uint64_t sub_246EF9508()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void partial apply for specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

{
  uint64_t v1;

  specialized closure #1 in ConnectionProviderProtocol.openCompletionSetup(completion:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

id outlined copy of Result<(), NetworkConnectionError>(id result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) != 0)
    return outlined copy of NetworkConnectionError(result, a2, a3, a4, a5);
  return result;
}

id outlined copy of NetworkConnectionError(id result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  if ((a4 >> 60) <= 9)
  {
    if (a4 >> 60 == 3)
      result = a5;
    return result;
  }
  return result;
}

void outlined retain of Result<(), NetworkConnectionError>(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  OUTLINED_FUNCTION_3();
}

void outlined consume of Result<(), NetworkConnectionError>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) != 0)
    outlined consume of NetworkConnectionError(a1, a2, a3, a4, a5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  return implicit closure #2 in implicit closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)();
}

void partial apply for implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(char a1)
{
  uint64_t v1;

  implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(a1, v1, (void (*)(_QWORD))NetworkConnectionProvider.handleViabilityUpdate(_:));
}

void partial apply for implicit closure #6 in implicit closure #5 in NetworkConnectionProvider.configureConnectionHandler(_:)(char a1)
{
  uint64_t v1;

  implicit closure #4 in implicit closure #3 in NetworkConnectionProvider.configureConnectionHandler(_:)(a1, v1, (void (*)(_QWORD))NetworkConnectionProvider.handleBetterPathUpdate(_:));
}

void partial apply for closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)();
}

void partial apply for closure #2 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)();
}

uint64_t partial apply for closure #1 in closure #2 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)(v0, "Provider - NetworkConnectionProvider [%s]: Writter closed");
}

uint64_t partial apply for closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in NetworkConnectionProvider.configureConnectionHandler(_:)(v0, "Provider - NetworkConnectionProvider [%s]: Reader closed");
}

void partial apply for closure #1 in NetworkConnectionProvider.StateUpdateHandler.handleStateUpdate@Sendable (_:)()
{
  NetworkConnectionProvider.handleStateUpdate(_:)();
}

void _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_171(a1, a2, a3);
  OUTLINED_FUNCTION_230(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_3();
}

void outlined destroy of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)OUTLINED_FUNCTION_178(a1, a2);
  v4 = __swift_instantiateConcreteTypeFromMangledName(v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  OUTLINED_FUNCTION_3();
}

uint64_t objectdestroy_49Tm()
{
  OUTLINED_FUNCTION_99();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_39Tm()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_246EF9764()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_9Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  OUTLINED_FUNCTION_99();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

void OUTLINED_FUNCTION_2_11(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_12_4()
{
  RPCOspreyConnectionProvider.connectionMetrics.modify();
}

void OUTLINED_FUNCTION_13_5()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_22_4()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_23_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  *(_QWORD *)(v3 - 272) = v4;
  return v4(v2, v1);
}

void OUTLINED_FUNCTION_24_2(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, a2, v2);
}

void OUTLINED_FUNCTION_25_3(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_27_3(float a1)
{
  float *v1;

  *v1 = a1;
  return _typeName(_:qualified:)();
}

void OUTLINED_FUNCTION_30_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_32_1(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

void *OUTLINED_FUNCTION_33_2(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2C8uLL);
}

void OUTLINED_FUNCTION_34_2(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  lazy protocol witness table accessor for type RPCOspreyConnectionProvider and conformance RPCOspreyConnectionProvider(a1, 255, a3, a4);
}

void OUTLINED_FUNCTION_37_1(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  return v4(v1, v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_39_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD);

  return v1(a1, 0);
}

uint64_t OUTLINED_FUNCTION_40_1(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_41_2(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

void OUTLINED_FUNCTION_42_2(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_43_1(uint64_t a1, ...)
{
  uint64_t v1;
  unint64_t v2;
  va_list va;

  va_start(va, a1);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void OUTLINED_FUNCTION_47_1(uint64_t a1, _QWORD *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 3;
}

uint64_t OUTLINED_FUNCTION_48_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

unint64_t *OUTLINED_FUNCTION_49_1()
{
  return &STACK[0x2CB0];
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_54_0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void OUTLINED_FUNCTION_55_0(unint64_t *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](a1, v1);
}

uint64_t OUTLINED_FUNCTION_56@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_58_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = a1;
  *(_QWORD *)(v2 - 328) = v1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_61_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_63_0()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_67_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&a18, a21);
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  return swift_weakInit();
}

id OUTLINED_FUNCTION_72_0()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_73_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 272) = (char *)&a9 - v9;
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t OUTLINED_FUNCTION_74_0(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  return _typeName(_:qualified:)();
}

uint64_t OUTLINED_FUNCTION_76_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_78_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_79@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_80_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_83_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return swift_weakInit();
}

uint64_t OUTLINED_FUNCTION_85_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v3 - 288), v0, v2);
}

uint64_t OUTLINED_FUNCTION_86_0()
{
  return swift_weakInit();
}

void OUTLINED_FUNCTION_89_0(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;
  uint64_t v5;

  _os_log_impl(a1, *(os_log_t *)(v5 - 304), a3, a4, v4, 0x20u);
}

uint64_t OUTLINED_FUNCTION_90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void OUTLINED_FUNCTION_91(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 264) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t OUTLINED_FUNCTION_93_0()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_94_0()
{
  JUMPOUT(0x24956D2B0);
}

uint64_t OUTLINED_FUNCTION_95()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_96()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 184) + 8))(v0, *(_QWORD *)(v1 - 168));
}

unint64_t *OUTLINED_FUNCTION_98()
{
  return &STACK[0x3250];
}

uint64_t OUTLINED_FUNCTION_99()
{
  return swift_release();
}

void OUTLINED_FUNCTION_100()
{
  JUMPOUT(0x24956D244);
}

uint64_t OUTLINED_FUNCTION_102@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_103(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_104@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

BOOL OUTLINED_FUNCTION_106(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_107()
{
  return swift_weakAssign();
}

uint64_t OUTLINED_FUNCTION_109()
{
  uint64_t v0;

  return outlined release of ConnectionSnapshotReport?(v0 + 2264);
}

uint64_t OUTLINED_FUNCTION_110(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 2264) = a1;
  return v1 + 2264;
}

uint64_t OUTLINED_FUNCTION_111(float a1)
{
  float *v1;

  *v1 = a1;
  return NetworkConnectionProvider.connectionIdentifier.getter();
}

uint64_t OUTLINED_FUNCTION_112()
{
  uint64_t v0;

  return outlined release of ConnectionPreparationReport?(v0 + 2168);
}

uint64_t OUTLINED_FUNCTION_114()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_115()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_116()
{
  uint64_t v0;

  return default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(*(_QWORD **)(v0 - 160));
}

uint64_t OUTLINED_FUNCTION_118()
{
  return DispatchTime.advanced(by:)();
}

uint64_t OUTLINED_FUNCTION_119(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 + 2976));
}

uint64_t OUTLINED_FUNCTION_121()
{
  uint64_t v0;

  return default argument 0 of OS_dispatch_source.setEventHandler(qos:flags:handler:)(v0);
}

uint64_t OUTLINED_FUNCTION_122()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_123()
{
  return swift_retain();
}

void *OUTLINED_FUNCTION_125@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  *(_QWORD *)(v2 - 112) = v1;
  return _Block_copy((const void *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_126()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 256) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_127()
{
  return NetworkConnectionProvider.connectionIdentifier.getter();
}

uint64_t OUTLINED_FUNCTION_128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 272))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_129@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void OUTLINED_FUNCTION_130(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of NetworkConnectionProtocol?(v3, *(_QWORD *)(v4 - 280), a3);
}

uint64_t OUTLINED_FUNCTION_132()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OUTLINED_FUNCTION_133()
{
  return swift_weakInit();
}

uint64_t OUTLINED_FUNCTION_135()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_136()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_137()
{
  uint64_t v0;

  return v0 + 40;
}

void *OUTLINED_FUNCTION_138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 176);
  *(_QWORD *)(v1 - 112) = v0;
  *(_QWORD *)(v1 - 104) = v2;
  return _Block_copy((const void *)(v1 - 128));
}

uint64_t OUTLINED_FUNCTION_139(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)va);
}

_QWORD *OUTLINED_FUNCTION_142()
{
  return __swift_project_boxed_opaque_existential_1(&STACK[0x1388], STACK[0x13A0]);
}

uint64_t OUTLINED_FUNCTION_143()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

BOOL OUTLINED_FUNCTION_144(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_149()
{
  OS_dispatch_source.cancel()();
}

uint64_t OUTLINED_FUNCTION_150()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_151()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_153(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_155()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 208) + 8))(v0, *(_QWORD *)(v1 - 200));
}

void OUTLINED_FUNCTION_156()
{
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

uint64_t OUTLINED_FUNCTION_157()
{
  uint64_t v0;

  return v0;
}

BOOL OUTLINED_FUNCTION_158(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_159()
{
  return type metadata accessor for DispatchTime();
}

unint64_t *OUTLINED_FUNCTION_161()
{
  return &STACK[0x7AF0];
}

uint64_t OUTLINED_FUNCTION_163()
{
  return swift_unknownObjectRetain();
}

uint64_t OUTLINED_FUNCTION_164()
{
  return swift_getObjectType();
}

unint64_t *OUTLINED_FUNCTION_165()
{
  return &STACK[0x13B0];
}

uint64_t OUTLINED_FUNCTION_166(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

unint64_t *OUTLINED_FUNCTION_167()
{
  return &STACK[0x4070];
}

unint64_t *OUTLINED_FUNCTION_168()
{
  return &STACK[0x4070];
}

unint64_t *OUTLINED_FUNCTION_169()
{
  return &STACK[0x4070];
}

uint64_t OUTLINED_FUNCTION_170()
{
  return swift_weakInit();
}

uint64_t OUTLINED_FUNCTION_171(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

void OUTLINED_FUNCTION_172(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_173(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void *OUTLINED_FUNCTION_174@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = v5;
  a5 = a1;
  return _Block_copy(&a2);
}

uint64_t OUTLINED_FUNCTION_175(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

void OUTLINED_FUNCTION_176(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  outlined destroy of NetworkConnectionProtocol?(*(_QWORD *)(v2 - 272), a2);
}

uint64_t OUTLINED_FUNCTION_177()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_178(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_180()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t (*OUTLINED_FUNCTION_181())()
{
  return NetworkConnectionProvider.connectionMetrics.modify();
}

uint64_t OUTLINED_FUNCTION_182(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 136));
}

uint64_t OUTLINED_FUNCTION_183()
{
  uint64_t v0;

  return outlined retain of ConnectionSnapshotReport(v0 + 808);
}

void OUTLINED_FUNCTION_184(__n128 a1, uint64_t a2, uint64_t a3)
{
  *(__n128 *)(a3 + 24) = a1;
  NetworkConnectionProvider.closeWithError(_:)();
}

uint64_t OUTLINED_FUNCTION_185()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_187()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  outlined destroy of NetworkConnectionProtocol?(v2 - 176, a2);
}

uint64_t OUTLINED_FUNCTION_189(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return outlined init with take of RPCOspreyConnectionProtocol(a1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_190(uint64_t a1, uint64_t a2)
{
  return a2 + 568;
}

uint64_t OUTLINED_FUNCTION_191@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_196()
{
  return swift_bridgeObjectRelease();
}

_QWORD *OUTLINED_FUNCTION_197(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return __swift_project_boxed_opaque_existential_1(&a18, a21);
}

_QWORD *OUTLINED_FUNCTION_198()
{
  uint64_t v0;

  return outlined retain of ConnectionPreparationReport((_QWORD *)(v0 + 1448));
}

void OUTLINED_FUNCTION_199()
{
  OS_dispatch_source.resume()();
}

uint64_t OUTLINED_FUNCTION_200()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_201()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_202()
{
  uint64_t v0;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v0);
}

uint64_t OUTLINED_FUNCTION_204()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

double OUTLINED_FUNCTION_205()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 2064) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_207()
{
  uint64_t v0;

  return default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v0);
}

uint64_t OUTLINED_FUNCTION_210()
{
  return static DispatchTime.now()();
}

uint64_t OUTLINED_FUNCTION_212(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_214()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_216()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_217()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_218(uint64_t a1, uint64_t a2)
{
  return __swift_project_value_buffer(a1, a2);
}

unint64_t OUTLINED_FUNCTION_220()
{
  return type metadata accessor for OS_dispatch_source();
}

unint64_t *OUTLINED_FUNCTION_221()
{
  return &STACK[0x7828];
}

uint64_t OUTLINED_FUNCTION_222()
{
  return outlined retain of ConnectionNetworkReport?((__n128 *)&STACK[0x7828]);
}

unint64_t *OUTLINED_FUNCTION_223()
{
  return &STACK[0x7298];
}

uint64_t OUTLINED_FUNCTION_227()
{
  return swift_getObjectType();
}

void OUTLINED_FUNCTION_229(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of NetworkConnectionProtocol?(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_230@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_233()
{
  return swift_allocObject();
}

unint64_t *OUTLINED_FUNCTION_234()
{
  return &STACK[0x1090];
}

uint64_t OUTLINED_FUNCTION_235()
{
  return outlined retain of ConnectionMetrics((uint64_t)&STACK[0x13B0]);
}

uint64_t OUTLINED_FUNCTION_236()
{
  return static os_log_type_t.default.getter();
}

void OUTLINED_FUNCTION_237()
{
  void *v0;

}

unint64_t *OUTLINED_FUNCTION_238()
{
  return &STACK[0x61E8];
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.ospreyRequestBuilder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.ospreyRequestBuilder.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionMetrics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.connectionMetrics.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.serverStreamingRequest(withMethodName:request:requestBuilder:streamingResponseHandler:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(void))(a12 + 136))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.bidirectionalStreamingRequest(withMethodName:requestBuilder:streamingResponseHandler:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 144))();
}

uint64_t dispatch thunk of RPCOspreyConnectionProtocol.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

id ConnectionNetworkReport.netSessionConnectionNetwork.getter()
{
  unsigned int *v0;
  void *v1;
  unsigned int *v2;
  id v3;
  unsigned __int8 *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  _BYTE v24[16];
  _BYTE v25[16];
  _BYTE v26[16];
  uint64_t v27;
  void *v28;
  _QWORD v29[2];
  _QWORD v30[2];

  v2 = v0;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95350]), sel_init);
  if (v3)
  {
    v4 = (unsigned __int8 *)v0 + 265;
    outlined init with take of String?((uint64_t)(v0 + 2), (uint64_t)v26);
    outlined init with take of String?((uint64_t)v26, (uint64_t)&v27);
    v5 = v28;
    if (v28)
    {
      v6 = v27;
      v7 = v3;
      v5 = (void *)MEMORY[0x24956D034](v6, v5);
    }
    else
    {
      v8 = v3;
    }
    objc_msgSend(v3, sel_setCarrierName_, v5);

    if (*((_BYTE *)v2 + 4))
      v9 = 0;
    else
      v9 = *v2;
    OUTLINED_FUNCTION_0_8((uint64_t)objc_msgSend(v3, sel_setAttempCount_, v9), sel_setClearChannelAssessmentScore_);
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_0_8(v10, sel_setDnsResolutionTime_);
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_0_8(v11, sel_setStartToDNSResolution_);
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_0_8(v12, sel_setConnectionStartToEstablishmentTime_);
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_0_8(v13, sel_setConnectionStartToTLSHandshake_);
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_0_8(v14, sel_setTlsHandshakeTime_);
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_0_8(v15, sel_setConnectionEstablishmentTime_);
    v16 = ConnectionNetworkReport.firstByteTimeInMs.getter();
    OUTLINED_FUNCTION_0_8(v16, sel_setFirstByteTime_);
    v17 = OUTLINED_FUNCTION_0_8((uint64_t)objc_msgSend(v3, sel_setIsCaptive_, *v4), sel_setRssi_);
    OUTLINED_FUNCTION_0_8((uint64_t)v17, sel_setSnr_);
    if (*((_QWORD *)v2 + 10))
    {
      v18 = *((_QWORD *)v2 + 9);
      v19 = *((_QWORD *)v2 + 10);
    }
    else
    {
      v18 = 0;
      v19 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionNetwork.primarySubflowInterfaceName.setter(v18, v19, v3);
  }
  outlined init with take of String?((uint64_t)(v2 + 28), (uint64_t)v25);
  outlined init with take of String?((uint64_t)v25, (uint64_t)v29);
  if (v3 && v29[1])
  {
    OUTLINED_FUNCTION_4_11();
    v20 = v3;
    OUTLINED_FUNCTION_2_12();
    objc_msgSend(v1, sel_setConnectionMethod_, static NetworkAnalytics.netConnectionMethod(from:)());

  }
  outlined init with take of String?((uint64_t)(v2 + 56), (uint64_t)v24);
  outlined init with take of String?((uint64_t)v24, (uint64_t)v30);
  if (v3 && v30[1])
  {
    OUTLINED_FUNCTION_4_11();
    v21 = v3;
    static NetworkAnalytics.netTLSVersion(from:)();
    objc_msgSend(v21, sel_setTlsVersion_, v22);

  }
  return v3;
}

id ConnectionNetworkReport.netDebugSessionConnectionNetwork.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  double v5;
  double v6;
  char v7;
  uint64_t v8;
  _BYTE v10[16];
  _QWORD v11[2];

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE952D0]), sel_init);
  outlined init with take of String?(v0 + 40, (uint64_t)v10);
  outlined init with take of String?((uint64_t)v10, (uint64_t)v11);
  if (v11[1])
  {
    if (!v2)
      return v2;
    OUTLINED_FUNCTION_4_11();
    v3 = v2;
    OUTLINED_FUNCTION_2_12();
    static NetworkAnalytics.netWiFiPhyMode(from:)();
    objc_msgSend(v1, sel_setWiFiPhyMode_, v4);

  }
  else if (!v2)
  {
    return v2;
  }
  v5 = *(double *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32))
    v5 = 0.0;
  objc_msgSend(v2, sel_setSignalStrengthBars_, v5);
  v6 = COERCE_DOUBLE(ConnectionNetworkReport.openTimeInMs.getter());
  if ((v7 & 1) != 0)
    v6 = 0.0;
  objc_msgSend(v2, sel_setOpenTimeInMs_, v6);
  if (*(_BYTE *)(v0 + 100))
    v8 = 0;
  else
    v8 = *(unsigned int *)(v0 + 96);
  objc_msgSend(v2, sel_setConnectedSubflowCount_, v8);
  return v2;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionNetwork.primarySubflowInterfaceName.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x24956D034]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setPrimarySubflowInterfaceName_, v4);

}

uint64_t OUTLINED_FUNCTION_2_12()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  return type metadata accessor for NetworkAnalytics(0);
}

void ConnectionEstablishmentReport.init(ospreyConnectionMetrics:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  id v13;
  double v14;
  double v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  char v38;
  id v39;
  uint64_t v40;

  if (one-time initialization token for sharedNetworkAnalytics != -1)
    swift_once();
  v4 = static NetworkAnalytics.sharedNetworkAnalytics;
  if (a1)
  {
    v5 = (id)static NetworkAnalytics.sharedNetworkAnalytics;
    v6 = a1;
    v7 = objc_msgSend(v6, sel_fetchStartToDomainLookupStartTime);
    v9 = v8;
    v10 = OUTLINED_FUNCTION_12_3((uint64_t)v7, sel_dnsResolutionTime);
    v12 = v11;
    v13 = OUTLINED_FUNCTION_12_3((uint64_t)v10, sel_connectionEstablishmentTime);
    v15 = v14;
    v16 = OUTLINED_FUNCTION_12_3((uint64_t)v13, sel_tcpConnectTime);
    v18 = v17;
    OUTLINED_FUNCTION_12_3((uint64_t)v16, sel_secureConnectionTime);
    v20 = v19;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v22 = v21;
    v24 = *(_QWORD *)(v21 + 16);
    v23 = *(_QWORD *)(v21 + 24);
    v25 = v23 >> 1;
    v26 = v24 + 1;
    if (v23 >> 1 <= v24)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v22 = v21;
      v23 = *(_QWORD *)(v21 + 24);
      v25 = v23 >> 1;
    }
    *(_QWORD *)(v22 + 16) = v26;
    v27 = v22 + 48 * v24;
    *(_OWORD *)(v27 + 32) = xmmword_246F73910;
    *(_QWORD *)(v27 + 48) = v18;
    *(_BYTE *)(v27 + 56) = 0;
    *(_QWORD *)(v27 + 64) = 0;
    *(_BYTE *)(v27 + 72) = 1;
    if (v25 <= v26)
    {
      OUTLINED_FUNCTION_1_12(v23);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v22 = v21;
    }
    v28 = v9 + v12;
    *(_QWORD *)(v22 + 16) = v24 + 2;
    v29 = v22 + 48 * v26;
    *(_OWORD *)(v29 + 32) = xmmword_246F73920;
    *(_QWORD *)(v29 + 48) = v20;
    *(_BYTE *)(v29 + 56) = 0;
    *(_QWORD *)(v29 + 64) = 0;
    *(_BYTE *)(v29 + 72) = 1;
    OUTLINED_FUNCTION_12_3(v21, sel_dnsResolutionTime);
    v31 = v30;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v33 = v32;
    v35 = *(_QWORD *)(v32 + 16);
    v34 = *(_QWORD *)(v32 + 24);
    if (v35 >= v34 >> 1)
    {
      OUTLINED_FUNCTION_1_12(v34);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v33 = v40;
    }
    *(_QWORD *)(v33 + 16) = v35 + 1;
    v36 = v33 + 80 * v35;
    *(_DWORD *)(v36 + 32) = 0;
    v37 = v28 + v15;
    *(_BYTE *)(v36 + 36) = 1;
    *(_QWORD *)(v36 + 40) = v31;
    *(_BYTE *)(v36 + 48) = 0;
    *(_DWORD *)(v36 + 52) = 0;
    *(_BYTE *)(v36 + 56) = 1;
    *(_OWORD *)(v36 + 64) = 0u;
    *(_OWORD *)(v36 + 80) = 0u;
    *(_OWORD *)(v36 + 96) = 0u;

    v38 = 0;
  }
  else
  {
    v39 = (id)static NetworkAnalytics.sharedNetworkAnalytics;
    v22 = MEMORY[0x24BEE4AF8];
    v37 = 0.0;
    v38 = 1;
    v33 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(double *)(a2 + 40) = v37;
  *(_BYTE *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v33;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 73) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v4;
}

BOOL OUTLINED_FUNCTION_1_12@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void destroy for ConnectionSnapshotReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 144))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 392))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 432) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for ConnectionSnapshotReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = (_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)v6;
    *(_BYTE *)(a1 + 44) = v6[4];
    v8 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v9;
    v10 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v10;
    v11 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v11;
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
    v12 = *(_QWORD *)(a2 + 152);
    v13 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 144) = v7;
    *(_QWORD *)(a1 + 152) = v12;
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    v14 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v13;
    *(_QWORD *)(a1 + 168) = v14;
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v15 = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v15;
    v16 = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = v16;
    v17 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v17;
    v18 = *(_QWORD *)(a2 + 280);
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v18;
    v19 = *(_QWORD *)(a2 + 296);
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = v19;
    *(_BYTE *)(a1 + 305) = *(_BYTE *)(a2 + 305);
    v20 = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = v20;
    v21 = *(_QWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    *(_QWORD *)(a1 + 328) = v21;
    v22 = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 40), v6, 0x139uLL);
  }
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  v23 = *(_QWORD *)(a2 + 392);
  if (v23)
  {
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = v23;
    v24 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = v24;
    *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
    *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
    v25 = *(_QWORD *)(a2 + 432);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25 != 1)
    {
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = v25;
      v29 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = v29;
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
      v30 = *(_QWORD *)(a2 + 496);
      *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
      *(_QWORD *)(a1 + 496) = v30;
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
      *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
      *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a2 + 588);
      *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
      *(_DWORD *)(a1 + 596) = *(_DWORD *)(a2 + 596);
      *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
      *(_DWORD *)(a1 + 604) = *(_DWORD *)(a2 + 604);
      LODWORD(v30) = *(_DWORD *)(a2 + 612);
      *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
      *(_DWORD *)(a1 + 612) = v30;
      v31 = *(_QWORD *)(a2 + 624);
      *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
      *(_QWORD *)(a1 + 624) = v31;
      v32 = *(_QWORD *)(a2 + 640);
      *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
      *(_QWORD *)(a1 + 640) = v32;
      LODWORD(v32) = *(_DWORD *)(a2 + 652);
      *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
      *(_DWORD *)(a1 + 652) = v32;
      LODWORD(v32) = *(_DWORD *)(a2 + 660);
      *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
      *(_DWORD *)(a1 + 660) = v32;
      LODWORD(v32) = *(_DWORD *)(a2 + 668);
      *(_BYTE *)(a1 + 672) = *(_BYTE *)(a2 + 672);
      *(_DWORD *)(a1 + 668) = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    v26 = (void *)(a1 + 424);
    v27 = (const void *)(a2 + 424);
    v28 = 249;
  }
  else
  {
    v26 = (void *)(a1 + 384);
    v27 = (const void *)(a2 + 384);
    v28 = 289;
  }
  memcpy(v26, v27, v28);
LABEL_10:
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  v33 = *(void **)(a2 + 704);
  *(_QWORD *)(a1 + 704) = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v33;
  return a1;
}

uint64_t assignWithCopy for ConnectionSnapshotReport(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_DWORD *)(a1 + 40);
  v5 = (int *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v6)
    {
      v7 = *v5;
      *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
      *v4 = v7;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v8;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v9 = *(_DWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
      *(_DWORD *)(a1 + 128) = v9;
      LOBYTE(v9) = *(_BYTE *)(a2 + 140);
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 140) = v9;
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = v10;
      v11 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v11;
      v12 = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = v12;
      v13 = *(_QWORD *)(a2 + 216);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = v13;
      v14 = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = v14;
      v15 = *(_QWORD *)(a2 + 248);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = v15;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(a2 + 280);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = v16;
      v17 = *(_QWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v17;
      *(_BYTE *)(a1 + 305) = *(_BYTE *)(a2 + 305);
      v18 = *(_QWORD *)(a2 + 312);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_QWORD *)(a1 + 312) = v18;
      v19 = *(_QWORD *)(a2 + 328);
      *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
      *(_QWORD *)(a1 + 328) = v19;
      v20 = *(_QWORD *)(a2 + 344);
      *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
      *(_QWORD *)(a1 + 344) = v20;
      goto LABEL_8;
    }
    outlined destroy of ConnectionNetworkReport(a1 + 40);
  }
  else if (v6)
  {
    v21 = *v5;
    *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
    *v4 = v21;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v22 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    LODWORD(v22) = *(_DWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
    *(_DWORD *)(a1 + 128) = v22;
    LODWORD(v22) = *(_DWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
    *(_DWORD *)(a1 + 136) = v22;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v23 = *(_QWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = v23;
    v24 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v24;
    v25 = *(_QWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v25;
    v26 = *(_QWORD *)(a2 + 216);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = v26;
    v27 = *(_QWORD *)(a2 + 232);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v27;
    v28 = *(_QWORD *)(a2 + 248);
    *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = v28;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    v29 = *(_QWORD *)(a2 + 280);
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v29;
    v30 = *(_QWORD *)(a2 + 296);
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = v30;
    *(_BYTE *)(a1 + 305) = *(_BYTE *)(a2 + 305);
    v31 = *(_QWORD *)(a2 + 312);
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = v31;
    v32 = *(_QWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    *(_QWORD *)(a1 + 328) = v32;
    v33 = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x139uLL);
LABEL_8:
  v34 = *(_OWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v34;
  v35 = *(_QWORD *)(a2 + 392);
  if (!*(_QWORD *)(a1 + 392))
  {
    if (v35)
    {
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
      *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
      v37 = *(_QWORD *)(a2 + 432);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v37 == 1)
      {
        v38 = (void *)(a1 + 424);
        v39 = (const void *)(a2 + 424);
LABEL_22:
        v40 = 249;
        goto LABEL_23;
      }
      goto LABEL_18;
    }
LABEL_17:
    v38 = (void *)(a1 + 384);
    v39 = (const void *)(a2 + 384);
    v40 = 289;
LABEL_23:
    memcpy(v38, v39, v40);
    goto LABEL_24;
  }
  if (!v35)
  {
    outlined destroy of ConnectionInterfaceReport(a1 + 384);
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  v36 = *(_QWORD *)(a2 + 432);
  if (*(_QWORD *)(a1 + 432) != 1)
  {
    if (v36 != 1)
    {
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      v55 = *(_QWORD *)(a2 + 464);
      *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
      *(_QWORD *)(a1 + 464) = v55;
      v56 = *(_QWORD *)(a2 + 480);
      *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
      *(_QWORD *)(a1 + 480) = v56;
      v57 = *(_QWORD *)(a2 + 496);
      *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
      *(_QWORD *)(a1 + 496) = v57;
      v58 = *(_QWORD *)(a2 + 512);
      *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
      *(_QWORD *)(a1 + 512) = v58;
      v59 = *(_QWORD *)(a2 + 528);
      *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
      *(_QWORD *)(a1 + 528) = v59;
      v60 = *(_QWORD *)(a2 + 544);
      *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
      *(_QWORD *)(a1 + 544) = v60;
      v61 = *(_QWORD *)(a2 + 560);
      *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v61;
      v62 = *(_QWORD *)(a2 + 576);
      *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
      *(_QWORD *)(a1 + 576) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 588);
      *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
      *(_DWORD *)(a1 + 588) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 596);
      *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
      *(_DWORD *)(a1 + 596) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 604);
      *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
      *(_DWORD *)(a1 + 604) = v62;
      LODWORD(v62) = *(_DWORD *)(a2 + 612);
      *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
      *(_DWORD *)(a1 + 612) = v62;
      v63 = *(_QWORD *)(a2 + 624);
      *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
      *(_QWORD *)(a1 + 624) = v63;
      v64 = *(_QWORD *)(a2 + 640);
      *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
      *(_QWORD *)(a1 + 640) = v64;
      LODWORD(v64) = *(_DWORD *)(a2 + 652);
      *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
      *(_DWORD *)(a1 + 652) = v64;
      LODWORD(v64) = *(_DWORD *)(a2 + 660);
      *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
      *(_DWORD *)(a1 + 660) = v64;
      LODWORD(v64) = *(_DWORD *)(a2 + 668);
      *(_BYTE *)(a1 + 672) = *(_BYTE *)(a2 + 672);
      *(_DWORD *)(a1 + 668) = v64;
      goto LABEL_24;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 424);
    goto LABEL_21;
  }
  if (v36 == 1)
  {
LABEL_21:
    v38 = (void *)(a1 + 424);
    v39 = (const void *)(a2 + 424);
    goto LABEL_22;
  }
LABEL_18:
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  v41 = *(_QWORD *)(a2 + 464);
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
  *(_QWORD *)(a1 + 464) = v41;
  v42 = *(_QWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = v42;
  v43 = *(_QWORD *)(a2 + 496);
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a2 + 504);
  *(_QWORD *)(a1 + 496) = v43;
  v44 = *(_QWORD *)(a2 + 512);
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a2 + 520);
  *(_QWORD *)(a1 + 512) = v44;
  v45 = *(_QWORD *)(a2 + 528);
  *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
  *(_QWORD *)(a1 + 528) = v45;
  v46 = *(_QWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  *(_QWORD *)(a1 + 544) = v46;
  v47 = *(_QWORD *)(a2 + 560);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(_QWORD *)(a1 + 560) = v47;
  v48 = *(_QWORD *)(a2 + 576);
  *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
  *(_QWORD *)(a1 + 576) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 588);
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_DWORD *)(a1 + 588) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 596);
  *(_BYTE *)(a1 + 600) = *(_BYTE *)(a2 + 600);
  *(_DWORD *)(a1 + 596) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 604);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(_DWORD *)(a1 + 604) = v48;
  LODWORD(v48) = *(_DWORD *)(a2 + 612);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_DWORD *)(a1 + 612) = v48;
  v49 = *(_QWORD *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_QWORD *)(a1 + 624) = v49;
  v50 = *(_QWORD *)(a2 + 640);
  *(_BYTE *)(a1 + 648) = *(_BYTE *)(a2 + 648);
  *(_QWORD *)(a1 + 640) = v50;
  LODWORD(v50) = *(_DWORD *)(a2 + 652);
  *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
  *(_DWORD *)(a1 + 652) = v50;
  LODWORD(v50) = *(_DWORD *)(a2 + 660);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(_DWORD *)(a1 + 660) = v50;
  LODWORD(v50) = *(_DWORD *)(a2 + 668);
  *(_BYTE *)(a1 + 672) = *(_BYTE *)(a2 + 672);
  *(_DWORD *)(a1 + 668) = v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_24:
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 696) = *(_DWORD *)(a2 + 696);
  v51 = *(void **)(a2 + 704);
  v52 = *(void **)(a1 + 704);
  *(_QWORD *)(a1 + 704) = v51;
  v53 = v51;

  return a1;
}

uint64_t outlined destroy of ConnectionNetworkReport(uint64_t a1)
{
  destroy for ConnectionNetworkReport();
  return a1;
}

uint64_t outlined destroy of ConnectionTCPInfoMetrics(uint64_t a1)
{
  destroy for ConnectionTCPInfoMetrics();
  return a1;
}

uint64_t outlined destroy of ConnectionInterfaceReport(uint64_t a1)
{
  destroy for ConnectionInterfaceReport(a1);
  return a1;
}

void *__swift_memcpy712_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2C8uLL);
}

_QWORD *assignWithTake for ConnectionSnapshotReport(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  size_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  if (a1[18])
  {
    if (a2[18])
    {
      *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
      *((_BYTE *)a1 + 44) = *((_BYTE *)a2 + 44);
      v6 = a2[7];
      a1[6] = a2[6];
      a1[7] = v6;
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      v7 = a2[11];
      a1[10] = a2[10];
      a1[11] = v7;
      swift_bridgeObjectRelease();
      v8 = a2[13];
      a1[12] = a2[12];
      a1[13] = v8;
      swift_bridgeObjectRelease();
      v9 = a2[15];
      a1[14] = a2[14];
      a1[15] = v9;
      swift_bridgeObjectRelease();
      *((_DWORD *)a1 + 32) = *((_DWORD *)a2 + 32);
      *((_BYTE *)a1 + 132) = *((_BYTE *)a2 + 132);
      *((_DWORD *)a1 + 34) = *((_DWORD *)a2 + 34);
      *((_BYTE *)a1 + 140) = *((_BYTE *)a2 + 140);
      a1[18] = a2[18];
      swift_bridgeObjectRelease();
      v10 = a2[20];
      a1[19] = a2[19];
      a1[20] = v10;
      swift_bridgeObjectRelease();
      a1[21] = a2[21];
      *((_BYTE *)a1 + 176) = *((_BYTE *)a2 + 176);
      a1[23] = a2[23];
      *((_BYTE *)a1 + 192) = *((_BYTE *)a2 + 192);
      a1[25] = a2[25];
      *((_BYTE *)a1 + 208) = *((_BYTE *)a2 + 208);
      *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
      a1[27] = a2[27];
      v11 = a2[29];
      *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
      a1[29] = v11;
      a1[31] = a2[31];
      *((_BYTE *)a1 + 256) = *((_BYTE *)a2 + 256);
      v12 = a2[34];
      a1[33] = a2[33];
      a1[34] = v12;
      swift_bridgeObjectRelease();
      a1[35] = a2[35];
      *((_BYTE *)a1 + 288) = *((_BYTE *)a2 + 288);
      a1[37] = a2[37];
      *((_BYTE *)a1 + 304) = *((_BYTE *)a2 + 304);
      *((_BYTE *)a1 + 305) = *((_BYTE *)a2 + 305);
      a1[39] = a2[39];
      *((_BYTE *)a1 + 320) = *((_BYTE *)a2 + 320);
      *((_BYTE *)a1 + 336) = *((_BYTE *)a2 + 336);
      a1[41] = a2[41];
      a1[43] = a2[43];
      *((_BYTE *)a1 + 352) = *((_BYTE *)a2 + 352);
      goto LABEL_6;
    }
    outlined destroy of ConnectionNetworkReport((uint64_t)(a1 + 5));
  }
  memcpy(a1 + 5, a2 + 5, 0x139uLL);
LABEL_6:
  *((_BYTE *)a1 + 376) = *((_BYTE *)a2 + 376);
  *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
  if (!a1[49])
  {
LABEL_13:
    v16 = a1 + 48;
    v17 = a2 + 48;
    v18 = 289;
    goto LABEL_14;
  }
  v13 = a2[49];
  if (!v13)
  {
    outlined destroy of ConnectionInterfaceReport((uint64_t)(a1 + 48));
    goto LABEL_13;
  }
  a1[48] = a2[48];
  a1[49] = v13;
  swift_bridgeObjectRelease();
  v14 = a2[51];
  a1[50] = a2[50];
  a1[51] = v14;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + 416) = *((_BYTE *)a2 + 416);
  *((_DWORD *)a1 + 105) = *((_DWORD *)a2 + 105);
  if (a1[54] != 1)
  {
    v15 = a2[54];
    if (v15 != 1)
    {
      a1[53] = a2[53];
      a1[54] = v15;
      swift_bridgeObjectRelease();
      v21 = a2[56];
      a1[55] = a2[55];
      a1[56] = v21;
      swift_bridgeObjectRelease();
      *((_BYTE *)a1 + 456) = *((_BYTE *)a2 + 456);
      a1[58] = a2[58];
      *((_BYTE *)a1 + 472) = *((_BYTE *)a2 + 472);
      a1[60] = a2[60];
      *((_BYTE *)a1 + 488) = *((_BYTE *)a2 + 488);
      a1[62] = a2[62];
      *((_BYTE *)a1 + 504) = *((_BYTE *)a2 + 504);
      *((_BYTE *)a1 + 520) = *((_BYTE *)a2 + 520);
      a1[64] = a2[64];
      v22 = a2[66];
      *((_BYTE *)a1 + 536) = *((_BYTE *)a2 + 536);
      a1[66] = v22;
      a1[68] = a2[68];
      *((_BYTE *)a1 + 552) = *((_BYTE *)a2 + 552);
      a1[70] = a2[70];
      *((_BYTE *)a1 + 568) = *((_BYTE *)a2 + 568);
      a1[72] = a2[72];
      *((_BYTE *)a1 + 584) = *((_BYTE *)a2 + 584);
      *((_BYTE *)a1 + 592) = *((_BYTE *)a2 + 592);
      *((_DWORD *)a1 + 147) = *((_DWORD *)a2 + 147);
      *((_BYTE *)a1 + 600) = *((_BYTE *)a2 + 600);
      *((_DWORD *)a1 + 149) = *((_DWORD *)a2 + 149);
      *((_BYTE *)a1 + 608) = *((_BYTE *)a2 + 608);
      *((_DWORD *)a1 + 151) = *((_DWORD *)a2 + 151);
      *((_BYTE *)a1 + 616) = *((_BYTE *)a2 + 616);
      *((_DWORD *)a1 + 153) = *((_DWORD *)a2 + 153);
      *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
      a1[78] = a2[78];
      v23 = a2[80];
      *((_BYTE *)a1 + 648) = *((_BYTE *)a2 + 648);
      a1[80] = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 163);
      *((_BYTE *)a1 + 656) = *((_BYTE *)a2 + 656);
      *((_DWORD *)a1 + 163) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 165);
      *((_BYTE *)a1 + 664) = *((_BYTE *)a2 + 664);
      *((_DWORD *)a1 + 165) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 167);
      *((_BYTE *)a1 + 672) = *((_BYTE *)a2 + 672);
      *((_DWORD *)a1 + 167) = v23;
      goto LABEL_15;
    }
    outlined destroy of ConnectionTCPInfoMetrics((uint64_t)(a1 + 53));
  }
  v16 = a1 + 53;
  v17 = a2 + 53;
  v18 = 249;
LABEL_14:
  memcpy(v16, v17, v18);
LABEL_15:
  a1[85] = a2[85];
  swift_bridgeObjectRelease();
  a1[86] = a2[86];
  swift_bridgeObjectRelease();
  *((_DWORD *)a1 + 174) = *((_DWORD *)a2 + 174);
  v19 = (void *)a1[88];
  a1[88] = a2[88];

  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionSnapshotReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 712))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionSnapshotReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 712) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 712) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionSnapshotReport()
{
  return &type metadata for ConnectionSnapshotReport;
}

uint64_t ConnectionSnapshotReport.flowNetworkInterfaceType.getter()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 680);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = (const void *)(v1 + 32);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_16_6(&v4, v2);
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4B00];
}

uint64_t ConnectionSnapshotReport.tcpInfoMetricsByInterfaceName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v10[233];

  v1 = *(_QWORD *)(v0 + 688);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4B00];
  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + 48);
  v4 = MEMORY[0x24BEE4B00];
  do
  {
    v5 = *(v3 - 1);
    if (v5)
    {
      v6 = *(v3 - 2);
      memcpy(v10, v3, sizeof(v10));
      swift_bridgeObjectRetain();
      v7 = ConnectionTCPInfoMetrics.snConnectionTCPInfoMetrics.getter();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, v6, v5, isUniquelyReferenced_nonNull_native);
      OUTLINED_FUNCTION_201();
      swift_bridgeObjectRelease();
    }
    v3 += 32;
    --v2;
  }
  while (v2);
  OUTLINED_FUNCTION_10_2();
  return v4;
}

uint64_t ConnectionSnapshotReport.isPoorLinkQuality.getter()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  _QWORD __dst[89];

  memcpy(__dst, v0, sizeof(__dst));
  v1 = *(_QWORD *)(__dst[86] + 16);
  if (v1)
  {
    OUTLINED_FUNCTION_16_0();
    v2 = v1 - 1;
    v3 = 1;
    for (i = 32; ; i += 256)
    {
      OUTLINED_FUNCTION_18_4(&v88);
      OUTLINED_FUNCTION_18_4(&v51);
      outlined retain of ConnectionTCPInfoMetrics((uint64_t)&v88);
      v5 = ConnectionTCPInfoMetrics.isPoorLinkQuality.getter();
      if ((v5 & 1) != 0)
      {
LABEL_4:
        OUTLINED_FUNCTION_8_5(v5, v6, v7, v8, v9, v10, v11, v12, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
          v58,
          v59,
          v60,
          v61,
          v62,
          v63,
          v64,
          v65,
          v66,
          v67,
          v68,
          v69,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85,
          v86,
          v87,
          v88);
        goto LABEL_20;
      }
      outlined init with take of ConnectionSnapshotReport?((uint64_t)&__dst[48], (uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
      v5 = _s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)&v51);
      if ((_DWORD)v5 == 1)
      {
        v13 = 0;
        v14 = 0;
      }
      else
      {
        v13 = v51;
        v14 = v52;
        v5 = swift_bridgeObjectRetain();
      }
      if (!v89)
        break;
      if (!v14)
        goto LABEL_4;
      if (v88 == v13 && v89 == v14)
      {
        v25 = OUTLINED_FUNCTION_14_3();
        OUTLINED_FUNCTION_8_5(v25, v26, v27, v28, v29, v30, v31, v32, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
          v58,
          v59,
          v60,
          v61,
          v62,
          v63,
          v64,
          v65,
          v66,
          v67,
          v68,
          v69,
          v70,
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          v77,
          v78,
          v79,
          v80,
          v81,
          v82,
          v83,
          v84,
          v85,
          v86,
          v87,
          v88);
        OUTLINED_FUNCTION_15_4();
        OUTLINED_FUNCTION_44_1();
LABEL_19:
        v3 = 0;
        goto LABEL_20;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v17 = OUTLINED_FUNCTION_14_3();
      OUTLINED_FUNCTION_8_5(v17, v18, v19, v20, v21, v22, v23, v24, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
        v58,
        v59,
        v60,
        v61,
        v62,
        v63,
        v64,
        v65,
        v66,
        v67,
        v68,
        v69,
        v70,
        v71,
        v72,
        v73,
        v74,
        v75,
        v76,
        v77,
        v78,
        v79,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87,
        v88);
      OUTLINED_FUNCTION_15_4();
      OUTLINED_FUNCTION_44_1();
      if ((v16 & 1) != 0)
        goto LABEL_19;
LABEL_20:
      if (!v2)
      {
        OUTLINED_FUNCTION_8_2();
        v90 = v3 & 1;
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static Logger.siriNetwork);
        v34 = v90;
        outlined retain of ConnectionSnapshotReport((uint64_t)__dst);
        outlined retain of ConnectionSnapshotReport((uint64_t)__dst);
        v35 = Logger.logObject.getter();
        v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = OUTLINED_FUNCTION_2_2();
          v50 = OUTLINED_FUNCTION_2_2();
          *(_DWORD *)v37 = 136315394;
          outlined init with take of ConnectionSnapshotReport?((uint64_t)&__dst[48], (uint64_t)&v51, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
          if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)&v51) == 1)
          {
            v38 = 0;
            v39 = 0xE000000000000000;
          }
          else
          {
            swift_bridgeObjectRetain();
            v38 = String.init<A>(describing:)();
            v39 = v45;
          }
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v50);
          OUTLINED_FUNCTION_7_7();
          OUTLINED_FUNCTION_10_2();
          OUTLINED_FUNCTION_11_6();
          OUTLINED_FUNCTION_11_6();
          *(_WORD *)(v37 + 12) = 2080;
          if (v34)
            v46 = "Poor link quality";
          else
            v46 = "Good link quality";
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, (unint64_t)(v46 - 32) | 0x8000000000000000, &v50);
          OUTLINED_FUNCTION_7_7();
          OUTLINED_FUNCTION_10_2();
          _os_log_impl(&dword_246EC7000, v35, v36, "SiriNetwork - Report Link Quality for primary interface [%s]. %s", (uint8_t *)v37, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_4();
        }
        OUTLINED_FUNCTION_11_6();
        OUTLINED_FUNCTION_11_6();

        swift_beginAccess();
        return v90;
      }
      --v2;
    }
    OUTLINED_FUNCTION_8_5(v5, v6, v7, v8, v9, v10, v11, v12, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64,
      v65,
      v66,
      v67,
      v68,
      v69,
      v70,
      v71,
      v72,
      v73,
      v74,
      v75,
      v76,
      v77,
      v78,
      v79,
      v80,
      v81,
      v82,
      v83,
      v84,
      v85,
      v86,
      v87,
      v88);
    if (v14)
    {
      OUTLINED_FUNCTION_44_1();
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.siriNetwork);
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_WORD *)v43 = 0;
    _os_log_impl(&dword_246EC7000, v41, v42, "SiriNetwork - Report Link Quality. Unavailable", v43, 2u);
    OUTLINED_FUNCTION_0_4();
  }

  return 0;
}

uint64_t ConnectionSnapshotReport.debugDescription.getter()
{
  int *v0;
  int v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD __dst[40];
  _QWORD __src[40];
  _QWORD v50[37];
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE v55[320];
  _BYTE v56[296];
  uint64_t v57;
  unint64_t v58;
  Swift::String v59;
  Swift::String v60;

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v2 = (void *)*((_QWORD *)v0 + 2);
  v5 = *((_QWORD *)v0 + 3);
  v4 = (void *)*((_QWORD *)v0 + 4);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)(v0 + 10), (uint64_t)v55, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  v6 = *((_QWORD *)v0 + 45);
  v39 = *((_QWORD *)v0 + 46);
  v41 = *((_BYTE *)v0 + 376);
  outlined init with take of ConnectionSnapshotReport?((uint64_t)(v0 + 96), (uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  v45 = v0[174];
  OUTLINED_FUNCTION_6_5();
  _StringGuts.grow(_:)(17);
  OUTLINED_FUNCTION_13_6();
  v57 = 0x65636E6575716573;
  v58 = 0xEF207265626D754ELL;
  LODWORD(__src[0]) = v1;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v47 = v57;
  v57 = 0x72656469766F7270;
  v58 = 0xE900000000000020;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v3;
  v8._object = v2;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v46 = v57;
  OUTLINED_FUNCTION_6_5();
  _StringGuts.grow(_:)(24);
  OUTLINED_FUNCTION_13_6();
  OUTLINED_FUNCTION_21_3();
  v57 = v9;
  v58 = v10;
  OUTLINED_FUNCTION_16_0();
  v11._countAndFlagsBits = v5;
  v11._object = v4;
  String.append(_:)(v11);
  OUTLINED_FUNCTION_8_2();
  v44 = v57;
  OUTLINED_FUNCTION_6_5();
  _StringGuts.grow(_:)(26);
  OUTLINED_FUNCTION_13_6();
  OUTLINED_FUNCTION_21_3();
  v50[0] = v12;
  v50[1] = v13;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v55, (uint64_t)&v57, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  if (_s11SiriNetwork010ConnectionB6ReportVSgWOg((uint64_t)&v57) == 1)
  {
    v14 = OUTLINED_FUNCTION_1_13();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v55, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
    memcpy(__dst, __src, 0x139uLL);
    outlined retain of ConnectionNetworkReport((uint64_t)__src);
    v14 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_9_5(v14);
  OUTLINED_FUNCTION_10_2();
  v43 = v50[0];
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v53 = 0xD000000000000019;
  v54 = 0x8000000246F776F0;
  if ((v41 & 1) != 0)
  {
    v15 = OUTLINED_FUNCTION_1_13();
  }
  else
  {
    __src[0] = v6;
    __src[1] = v39;
    v15 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_9_5(v15);
  OUTLINED_FUNCTION_10_2();
  v42 = v53;
  v16 = (void *)v54;
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_21_3();
  v51 = v17;
  v52 = v18;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v56, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)__src) == 1)
  {
    v19 = OUTLINED_FUNCTION_1_13();
  }
  else
  {
    outlined init with take of ConnectionSnapshotReport?((uint64_t)v56, (uint64_t)__dst, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
    OUTLINED_FUNCTION_16_6(v50, __dst);
    outlined retain of ConnectionInterfaceReport((uint64_t)__dst);
    v19 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_9_5(v19);
  OUTLINED_FUNCTION_10_2();
  v40 = v51;
  v20 = v52;
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  OUTLINED_FUNCTION_20_5();
  OUTLINED_FUNCTION_21_3();
  __dst[0] = v21;
  __dst[1] = v22;
  v23 = swift_bridgeObjectRetain();
  v59._countAndFlagsBits = MEMORY[0x24956D148](v23, &type metadata for ConnectionInterfaceReport);
  OUTLINED_FUNCTION_19_4(v59);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_10_2();
  v24 = __dst[0];
  v25 = (void *)__dst[1];
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  OUTLINED_FUNCTION_20_5();
  __dst[0] = 0xD000000000000019;
  __dst[1] = 0x8000000246F77750;
  v26 = swift_bridgeObjectRetain();
  v60._countAndFlagsBits = MEMORY[0x24956D148](v26, &type metadata for ConnectionTCPInfoMetrics);
  OUTLINED_FUNCTION_19_4(v60);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_2();
  v27 = __dst[0];
  v28 = (void *)__dst[1];
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  OUTLINED_FUNCTION_20_5();
  __dst[0] = 0x516B726F7774656ELL;
  __dst[1] = 0xEF207974696C6175;
  if (v45 == 4)
  {
    v29 = OUTLINED_FUNCTION_1_13();
  }
  else
  {
    LODWORD(v50[0]) = v45;
    v29 = String.init<A>(describing:)();
  }
  OUTLINED_FUNCTION_9_5(v29);
  OUTLINED_FUNCTION_10_2();
  v30 = __dst[0];
  v31 = (void *)__dst[1];
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(77);
  v32._countAndFlagsBits = 0xD00000000000002BLL;
  v32._object = (void *)0x8000000246F77770;
  String.append(_:)(v32);
  OUTLINED_FUNCTION_5_11(v47);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_5_11(v46);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_5_11(v44);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_5_11(v43);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_0_18();
  v33._countAndFlagsBits = v42;
  v33._object = v16;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_18();
  v34._countAndFlagsBits = v40;
  v34._object = v20;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_18();
  v35._countAndFlagsBits = v24;
  v35._object = v25;
  String.append(_:)(v35);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_0_18();
  v36._countAndFlagsBits = v27;
  v36._object = v28;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_18();
  v37._countAndFlagsBits = v30;
  v37._object = v31;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  return __dst[0];
}

uint64_t outlined retain of ConnectionNetworkReport(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void OUTLINED_FUNCTION_0_18()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_1_13()
{
  return 0x6E776F6E6B6E75;
}

void OUTLINED_FUNCTION_5_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_6_5()
{
  unint64_t v0;

  STACK[0x698] = 0;
  STACK[0x6A0] = v0;
}

uint64_t OUTLINED_FUNCTION_7_7()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_8_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  return outlined release of ConnectionTCPInfoMetrics((uint64_t)&a50);
}

void OUTLINED_FUNCTION_9_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  return outlined release of ConnectionSnapshotReport((uint64_t)&STACK[0x248]);
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  return swift_bridgeObjectRelease_n();
}

void *OUTLINED_FUNCTION_16_6(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x121uLL);
}

void *OUTLINED_FUNCTION_18_4(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0xF9uLL);
}

void OUTLINED_FUNCTION_19_4(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_20_5()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_22_5()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

double static ConnectionPolicy.maxGlobalTimeout.getter()
{
  OUTLINED_FUNCTION_1_14();
  return *(double *)&static ConnectionPolicy.maxGlobalTimeout;
}

uint64_t static ConnectionPolicy.maxGlobalTimeout.setter(double a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ConnectionPolicy.maxGlobalTimeout = *(_QWORD *)&a1;
  return result;
}

uint64_t (*static ConnectionPolicy.maxGlobalTimeout.modify())()
{
  swift_beginAccess();
  return static ConnectionConfigurationError.errorDomain.modify;
}

uint64_t ConnectionPolicy.policyId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConnectionPolicy.policyId.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ConnectionPolicy.policyId.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.disableMPTCP.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ConnectionPolicy.disableMPTCP.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*ConnectionPolicy.disableMPTCP.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableOptimisticDNS.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ConnectionPolicy.enableOptimisticDNS.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableOptimisticDNS.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableTLS13.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t ConnectionPolicy.enableTLS13.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableTLS13.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableTLS13ZeroRTT.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t ConnectionPolicy.enableTLS13ZeroRTT.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 19) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableTLS13ZeroRTT.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enableTcpFastOpen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t ConnectionPolicy.enableTcpFastOpen.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enableTcpFastOpen.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t ConnectionPolicy.enabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 21) = result;
  return result;
}

uint64_t (*ConnectionPolicy.enabled.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.globalTimeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t ConnectionPolicy.globalTimeout.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicy.globalTimeout.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

double ConnectionPolicy.maxRoutesTimeout.getter()
{
  uint64_t v0;
  double v1;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    OUTLINED_FUNCTION_1_14();
    return *(double *)&static ConnectionPolicy.maxGlobalTimeout;
  }
  else
  {
    v1 = *(double *)(v0 + 24);
    OUTLINED_FUNCTION_1_14();
    if (*(double *)&static ConnectionPolicy.maxGlobalTimeout < v1)
      return *(double *)&static ConnectionPolicy.maxGlobalTimeout;
  }
  return v1;
}

double ConnectionPolicy.delayBetweenScheduledRoutes.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;

  v0 = swift_bridgeObjectRetain();
  specialized Sequence.filter(_:)(v0);
  static ConnectionPolicyRoute.maxTimeoutFromRoutes(_:)(v1);
  v3 = v2;
  swift_bridgeObjectRelease();
  return fmin(v3, 5.0);
}

uint64_t ConnectionPolicy.mptcpFallbackPort.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ConnectionPolicy.mptcpFallbackPort.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicy.mptcpFallbackPort.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.timeToLive.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t ConnectionPolicy.timeToLive.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicy.timeToLive.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicy.routes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConnectionPolicy.routes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*ConnectionPolicy.routes.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionPolicy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unsigned __int8 v10;
  unint64_t result;
  id v12;
  id v13;
  id v14;
  id v15;
  unsigned __int8 v16;
  id v17;
  char v18;
  id v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t i;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;

  if (!a1)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v4 = a1;
  v5 = outlined bridged method (pb) of @objc SAConnectionPolicy.policyId.getter(v4);
  v7 = v6;
  v8 = swift_bridgeObjectRetain();
  v9 = OUTLINED_FUNCTION_2_13(v8, sel_disableMPTCP);
  if (v9)
  {
    v10 = OUTLINED_FUNCTION_0_19(v9);

  }
  else
  {
    v10 = 0;
  }
  v12 = OUTLINED_FUNCTION_2_13((uint64_t)v9, sel_enableOptimisticDNS);
  if (v12)
  {
    v32 = OUTLINED_FUNCTION_0_19(v12);

  }
  else
  {
    v32 = 0;
  }
  v13 = OUTLINED_FUNCTION_2_13((uint64_t)v12, sel_enableTLS13);
  if (v13)
  {
    v31 = OUTLINED_FUNCTION_0_19(v13);

  }
  else
  {
    v31 = 0;
  }
  v14 = OUTLINED_FUNCTION_2_13((uint64_t)v13, sel_enableTLS13ZeroRTT);
  if (v14)
  {
    v30 = OUTLINED_FUNCTION_0_19(v14);

  }
  else
  {
    v30 = 0;
  }
  v15 = OUTLINED_FUNCTION_2_13((uint64_t)v14, sel_enableTcpFastOpen);
  if (v15)
  {
    v16 = OUTLINED_FUNCTION_0_19(v15);

  }
  else
  {
    v16 = 0;
  }
  v17 = objc_msgSend(v4, sel_enabled);
  v18 = (char)v17;
  if (OUTLINED_FUNCTION_2_13((uint64_t)v17, sel_globalTimeout))
    OUTLINED_FUNCTION_3_9(1);
  v19 = OUTLINED_FUNCTION_2_13(0, sel_mptcpFallbackPort);
  if (v19)
  {
    v20 = v19;
    v47 = 0;
    LOBYTE(v48) = 1;
    static Int._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  v33 = v18;
  if (OUTLINED_FUNCTION_2_13((uint64_t)v19, sel_timeToLive))
    OUTLINED_FUNCTION_3_9(1);
  v46 = MEMORY[0x24BEE4B08];
  result = outlined bridged method (pb) of @objc SAConnectionPolicy.routes.getter(v4);
  if (!result)
  {

    v27 = MEMORY[0x24BEE4B08];
LABEL_40:
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 17) = v32;
    *(_BYTE *)(a2 + 18) = v31;
    *(_BYTE *)(a2 + 19) = v30;
    *(_BYTE *)(a2 + 20) = v16;
    *(_BYTE *)(a2 + 21) = v33;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 1;
    *(_QWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 64) = 1;
    *(_QWORD *)(a2 + 72) = v27;
    return swift_bridgeObjectRelease();
  }
  v21 = result;
  v29 = v10;
  if (!(result >> 62))
  {
    v22 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v22)
      goto LABEL_27;
    goto LABEL_39;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v22 = result;
  if (!result)
  {
LABEL_39:
    swift_bridgeObjectRelease();

    v27 = MEMORY[0x24BEE4B08];
    v10 = v29;
    goto LABEL_40;
  }
LABEL_27:
  if (v22 >= 1)
  {
    v28 = v5;
    for (i = 0; i != v22; ++i)
    {
      if ((v21 & 0xC000000000000001) != 0)
        v24 = (id)MEMORY[0x24956D43C](i, v21);
      else
        v24 = *(id *)(v21 + 8 * i + 32);
      v25 = v24;
      v26 = v24;
      ConnectionPolicyRoute.init(from:)(v25, (uint64_t)&v34);
      if (v35 == 1)
      {

      }
      else
      {
        v47 = v34;
        v48 = v35;
        v49 = v36;
        v50 = v37;
        v51 = v38;
        v52 = v39;
        v53 = v40 & 1;
        v54 = v41;
        v55 = v42;
        v56 = v43;
        v57 = v44 & 1;
        v58 = v45;
        specialized Set._Variant.insert(_:)((char *)&v34, &v47);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();

    v27 = v46;
    v5 = v28;
    v10 = v29;
    goto LABEL_40;
  }
  __break(1u);
  return result;
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::Bool v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  int64_t v46;
  __int128 v47;
  __int128 v48;

  v1 = 0;
  v4 = *(_QWORD *)(a1 + 56);
  v2 = a1 + 56;
  v3 = v4;
  v5 = 1 << *(_BYTE *)(v2 - 24);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v3;
  v37 = v2;
  v38 = (unint64_t)(v5 + 63) >> 6;
  v36 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v46 = v1;
      v9 = v8 | (v1 << 6);
      goto LABEL_26;
    }
    v10 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v38)
      goto LABEL_43;
    v11 = *(_QWORD *)(v37 + 8 * v10);
    v12 = v1 + 1;
    if (!v11)
    {
      OUTLINED_FUNCTION_7_8();
      if (v13 == v14)
        goto LABEL_43;
      OUTLINED_FUNCTION_5_12();
      if (!v11)
      {
        OUTLINED_FUNCTION_7_8();
        if (v13 == v14)
          goto LABEL_43;
        OUTLINED_FUNCTION_5_12();
        if (!v11)
        {
          OUTLINED_FUNCTION_7_8();
          if (v13 == v14)
            goto LABEL_43;
          OUTLINED_FUNCTION_5_12();
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v7 = (v11 - 1) & v11;
    v46 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v18 = *(_QWORD *)(a1 + 48) + 120 * v9;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 40);
    v21 = *(_QWORD *)(v18 + 48);
    v23 = *(_QWORD *)(v18 + 56);
    v22 = *(_QWORD *)(v18 + 64);
    v24 = *(unsigned __int8 *)(v18 + 72);
    v48 = *(_OWORD *)(v18 + 24);
    v47 = *(_OWORD *)(v18 + 8);
    v45 = *(_BYTE *)(v18 + 72);
    v44 = *(_QWORD *)(v18 + 80);
    v43 = *(_BYTE *)(v18 + 96);
    v42 = *(_QWORD *)(v18 + 104);
    v40 = *(_BYTE *)(v18 + 113);
    v41 = *(_BYTE *)(v18 + 112);
    if (!v21)
    {
      OUTLINED_FUNCTION_9_6();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_8_6();
      if (!v22)
        goto LABEL_35;
      goto LABEL_32;
    }
    OUTLINED_FUNCTION_9_6();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_8_6();
    v25._countAndFlagsBits = OUTLINED_FUNCTION_4_12();
    if (String.hasSuffix(_:)(v25))
    {
      OUTLINED_FUNCTION_201();
      goto LABEL_38;
    }
    v26._countAndFlagsBits = 3028785;
    v26._object = (void *)0xE300000000000000;
    v27 = String.hasPrefix(_:)(v26);
    OUTLINED_FUNCTION_201();
    if (v27)
      goto LABEL_38;
    if (v22)
    {
LABEL_32:
      OUTLINED_FUNCTION_8_6();
      v28._countAndFlagsBits = OUTLINED_FUNCTION_4_12();
      if (!String.hasSuffix(_:)(v28))
      {
        v29._countAndFlagsBits = 3028785;
        v29._object = (void *)0xE300000000000000;
        if (!String.hasPrefix(_:)(v29))
        {
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_38:
      v30 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1);
        v30 = v36;
      }
      v31 = v48;
      v32 = v47;
      v34 = *(_QWORD *)(v30 + 16);
      v33 = *(_QWORD *)(v30 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1);
        v32 = v47;
        v31 = v48;
        v30 = v36;
      }
      *(_QWORD *)(v30 + 16) = v34 + 1;
      v36 = v30;
      v35 = v30 + 120 * v34;
      *(_QWORD *)(v35 + 32) = v19;
      *(_OWORD *)(v35 + 40) = v32;
      *(_OWORD *)(v35 + 56) = v31;
      *(_QWORD *)(v35 + 72) = v20;
      *(_QWORD *)(v35 + 80) = v21;
      *(_QWORD *)(v35 + 88) = v23;
      *(_QWORD *)(v35 + 96) = v22;
      *(_BYTE *)(v35 + 104) = v45;
      *(_QWORD *)(v35 + 112) = v44;
      *(_QWORD *)(v35 + 120) = v24;
      *(_BYTE *)(v35 + 128) = v43;
      *(_QWORD *)(v35 + 136) = v42;
      *(_BYTE *)(v35 + 144) = v41;
      *(_BYTE *)(v35 + 145) = v40;
      v1 = v46;
    }
    else
    {
LABEL_35:
      v1 = v46;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_201();
      swift_bridgeObjectRelease();
    }
  }
  v16 = v15 + 4;
  if (v16 >= v38)
  {
LABEL_43:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v37 + 8 * v16);
  if (v11)
  {
    v12 = v16;
    goto LABEL_25;
  }
  while (!__OFADD__(v16, 1))
  {
    OUTLINED_FUNCTION_7_8();
    if (v13 == v14)
      goto LABEL_43;
    OUTLINED_FUNCTION_5_12();
    v16 = v17 + 1;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
}

uint64_t destroy for ConnectionPolicy()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConnectionPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionPolicy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 72);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionPolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionPolicy()
{
  return &type metadata for ConnectionPolicy;
}

uint64_t outlined bridged method (pb) of @objc SAConnectionPolicy.policyId.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_policyId);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SAConnectionPolicy.routes.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_routes);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for SAConnectionPolicyRoute();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for SAConnectionPolicyRoute()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAConnectionPolicyRoute;
  if (!lazy cache variable for type metadata for SAConnectionPolicyRoute)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAConnectionPolicyRoute);
  }
  return result;
}

id OUTLINED_FUNCTION_0_19(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1864));
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return swift_beginAccess();
}

id OUTLINED_FUNCTION_2_13(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_3_9(char a1@<W8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = 0;
  *(_BYTE *)(v1 - 200) = a1;
  JUMPOUT(0x24956D19CLL);
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  return 0x6F632E656C707061;
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  return swift_bridgeObjectRetain();
}

void Double.dispatchTimeInterval.getter(uint64_t *a1@<X8>, double a2@<D0>)
{
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2 * 1000.0;
  if (a2 * 1000.0 <= -9.22337204e18)
  {
    v4 = 0x8000000000000000;
    goto LABEL_12;
  }
  if (v3 >= 9.22337204e18)
    goto LABEL_6;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v4 = (uint64_t)v3;
  if ((uint64_t)v3 != 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_12:
    *a1 = v4;
    v7 = (unsigned int *)MEMORY[0x24BEE5410];
LABEL_16:
    v8 = *v7;
    v9 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a1, v8, v9);
    return;
  }
LABEL_6:
  v5 = round(a2);
  if (v5 <= -9.22337204e18)
  {
    v6 = 0x8000000000000000;
    goto LABEL_15;
  }
  if (v5 >= 9.22337204e18)
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_15;
  }
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
    goto LABEL_19;
  if (v5 > -9.22337204e18)
  {
    v6 = (uint64_t)v5;
LABEL_15:
    *a1 = v6;
    v7 = (unsigned int *)MEMORY[0x24BEE5420];
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t Double.milliseconds.getter(double a1)
{
  double v1;
  uint64_t result;

  v1 = a1 * 1000.0;
  if (v1 <= -9.22337204e18)
    return 0x8000000000000000;
  if (v1 >= 9.22337204e18)
    return 0x7FFFFFFFFFFFFFFFLL;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -9.22337204e18)
      return (uint64_t)v1;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Double.seconds.getter(double a1)
{
  double v1;
  uint64_t result;

  v1 = round(a1);
  if (v1 <= -9.22337204e18)
    return 0x8000000000000000;
  if (v1 >= 9.22337204e18)
    return 0x7FFFFFFFFFFFFFFFLL;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -9.22337204e18)
      return (uint64_t)v1;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static ConnectionConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  uint64_t v53;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  uint64x2_t v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  double v135;
  char v136;
  uint64_t v137;
  int v138;
  double v139;
  char v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  char v144;
  double v145;
  char v146;
  int v147;
  int v148;
  char v149;
  int v150;
  char v151;
  int v152;
  int v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int16 v219;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v176 = *(_QWORD *)(a1 + 32);
  v179 = *(_QWORD *)(a1 + 40);
  v174 = *(_QWORD *)(a1 + 48);
  v178 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 72);
  v170 = *(_QWORD *)(a1 + 64);
  v156 = *(_QWORD *)(a1 + 80);
  v168 = *(_QWORD *)(a1 + 88);
  v166 = *(unsigned __int8 *)(a1 + 96);
  v164 = *(unsigned __int8 *)(a1 + 97);
  v162 = *(unsigned __int8 *)(a1 + 98);
  v160 = *(unsigned __int8 *)(a1 + 113);
  v158 = *(unsigned __int8 *)(a1 + 114);
  v4 = *(double *)(a1 + 120);
  v154 = *(_BYTE *)(a1 + 128);
  v152 = *(unsigned __int8 *)(a1 + 201);
  v5 = *(double *)(a1 + 208);
  v151 = *(_BYTE *)(a1 + 216);
  v145 = *(double *)(a1 + 224);
  v149 = *(_BYTE *)(a1 + 232);
  v143 = *(_QWORD *)(a1 + 240);
  v146 = *(_BYTE *)(a1 + 248);
  v139 = *(double *)(a1 + 256);
  v144 = *(_BYTE *)(a1 + 264);
  v135 = *(double *)(a1 + 272);
  v140 = *(_BYTE *)(a1 + 280);
  v104 = *(uint64_t *)(a1 + 304);
  v136 = *(_BYTE *)(a1 + 312);
  HIDWORD(v131) = *(unsigned __int8 *)(a1 + 313);
  v132 = *(_QWORD *)(a1 + 328);
  v129 = *(_QWORD *)(a1 + 320);
  v130 = *(_QWORD *)(a1 + 336);
  v6 = *(double *)(a2 + 120);
  v7 = *(double *)(a2 + 208);
  v8 = *(double *)(a2 + 224);
  v9 = *(double *)(a2 + 256);
  v10 = *(double *)(a2 + 272);
  v138 = *(unsigned __int8 *)(a2 + 280);
  v11 = *(double *)(a2 + 304);
  v134 = *(unsigned __int8 *)(a2 + 312);
  LODWORD(v131) = *(unsigned __int8 *)(a2 + 313);
  v125 = *(_QWORD *)(a1 + 352);
  v126 = *(_QWORD *)(a1 + 360);
  v127 = *(_QWORD *)(a1 + 368);
  v128 = *(_QWORD *)(a1 + 376);
  v123 = *(_QWORD *)(a1 + 384);
  v137 = *(_QWORD *)(a1 + 392);
  v12 = *(_QWORD *)(a1 + 408);
  v13 = *(_QWORD *)(a1 + 424);
  v172 = *(_QWORD *)(a1 + 416);
  v95 = *(_QWORD *)(a1 + 400);
  v96 = *(_QWORD *)(a1 + 432);
  v97 = *(_QWORD *)(a1 + 440);
  v98 = *(_QWORD *)(a1 + 456);
  v99 = *(_QWORD *)(a1 + 472);
  v100 = *(_QWORD *)(a1 + 480);
  v101 = *(_QWORD *)(a1 + 496);
  v102 = *(_QWORD *)(a1 + 504);
  HIDWORD(v103) = *(unsigned __int16 *)(a1 + 512);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v171 = *(_QWORD *)(a2 + 48);
  v177 = *(_QWORD *)(a2 + 56);
  v169 = *(_QWORD *)(a2 + 64);
  v173 = *(_QWORD *)(a2 + 72);
  v155 = *(_QWORD *)(a2 + 80);
  v167 = *(_QWORD *)(a2 + 88);
  v165 = *(unsigned __int8 *)(a2 + 96);
  v163 = *(unsigned __int8 *)(a2 + 97);
  v161 = *(unsigned __int8 *)(a2 + 98);
  v159 = *(unsigned __int8 *)(a2 + 113);
  v157 = *(unsigned __int8 *)(a2 + 114);
  v153 = *(unsigned __int8 *)(a2 + 128);
  v150 = *(unsigned __int8 *)(a2 + 216);
  v148 = *(unsigned __int8 *)(a2 + 232);
  v141 = *(_QWORD *)(a2 + 240);
  v147 = *(unsigned __int8 *)(a2 + 248);
  v142 = *(unsigned __int8 *)(a2 + 264);
  v105 = *(_QWORD *)(a2 + 320);
  v107 = *(_QWORD *)(a2 + 328);
  v109 = *(_QWORD *)(a2 + 336);
  v111 = *(_QWORD *)(a2 + 344);
  v113 = *(_QWORD *)(a2 + 352);
  v115 = *(_QWORD *)(a2 + 360);
  v119 = *(_QWORD *)(a2 + 368);
  v121 = *(_QWORD *)(a2 + 376);
  v117 = *(_QWORD *)(a2 + 384);
  v133 = *(_QWORD *)(a2 + 392);
  v17 = *(_QWORD *)(a2 + 424);
  v18 = *(_QWORD *)(a2 + 432);
  v19 = *(_QWORD *)(a2 + 440);
  v20 = *(_QWORD *)(a2 + 448);
  v21 = *(_QWORD *)(a2 + 456);
  v175 = *(_QWORD *)(a2 + 408);
  if (!v2)
  {
    HIDWORD(v92) = *(unsigned __int8 *)(a2 + 201);
    v90 = *(_QWORD *)(a1 + 488);
    v91 = *(_QWORD *)(a1 + 344);
    v72 = *(_QWORD *)(a2 + 400);
    HIDWORD(v74) = *(unsigned __int16 *)(a2 + 512);
    v76 = *(_QWORD *)(a2 + 464);
    v78 = *(_QWORD *)(a2 + 504);
    v93 = *(_QWORD *)(a2 + 416);
    v80 = *(_QWORD *)(a2 + 488);
    v82 = *(_QWORD *)(a2 + 472);
    v84 = *(_QWORD *)(a2 + 496);
    v86 = *(_QWORD *)(a2 + 480);
    v88 = *(_QWORD *)(a1 + 448);
    v89 = *(_QWORD *)(a1 + 464);
    if (v14)
      return 0;
    goto LABEL_12;
  }
  if (!v14)
    return 0;
  HIDWORD(v92) = *(unsigned __int8 *)(a2 + 201);
  v90 = *(_QWORD *)(a1 + 488);
  v91 = *(_QWORD *)(a1 + 344);
  v72 = *(_QWORD *)(a2 + 400);
  HIDWORD(v74) = *(unsigned __int16 *)(a2 + 512);
  v76 = *(_QWORD *)(a2 + 464);
  v78 = *(_QWORD *)(a2 + 504);
  v93 = *(_QWORD *)(a2 + 416);
  v80 = *(_QWORD *)(a2 + 488);
  v82 = *(_QWORD *)(a2 + 472);
  v84 = *(_QWORD *)(a2 + 496);
  v86 = *(_QWORD *)(a2 + 480);
  v88 = *(_QWORD *)(a1 + 448);
  v89 = *(_QWORD *)(a1 + 464);
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && v2 == v14)
    goto LABEL_12;
  v23 = *(_QWORD *)(a1 + 424);
  v24 = *(_QWORD *)(a2 + 432);
  v25 = *(_QWORD *)(a2 + 440);
  v26 = *(_QWORD *)(a2 + 448);
  v27 = *(_QWORD *)(a2 + 456);
  v28 = *(_QWORD *)(a1 + 408);
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v12 = v28;
  v21 = v27;
  v20 = v26;
  v19 = v25;
  v18 = v24;
  v13 = v23;
  v30 = 0;
  if ((v29 & 1) != 0)
  {
LABEL_12:
    if (v179)
    {
      if (!v16)
        return 0;
      if (v176 != v15 || v179 != v16)
      {
        v32 = v13;
        v33 = v18;
        v34 = v21;
        v35 = v12;
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v12 = v35;
        v21 = v34;
        v18 = v33;
        v13 = v32;
        v30 = 0;
        if ((v36 & 1) == 0)
          return v30;
      }
    }
    else if (v16)
    {
      return 0;
    }
    v37 = v12;
    if (v12 == 1 || !v13)
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_11_7();
    }
    else
    {
      v38 = v19;
      v39 = v13;
      swift_bridgeObjectRetain();
      v174 = v172;
      v178 = v39;
      v19 = v38;
    }
    if (v175 == 1 || !v17)
    {
      swift_bridgeObjectRetain();
      v40 = OUTLINED_FUNCTION_11_7();
      v47 = v177;
      v46 = v171;
    }
    else
    {
      v40 = swift_bridgeObjectRetain();
      v46 = v93;
      v47 = v17;
    }
    if (v178)
    {
      if (v47)
      {
        v180 = v17;
        if (v174 == v46 && v178 == v47)
        {
          swift_bridgeObjectRelease();
          v40 = OUTLINED_FUNCTION_44_1();
          v50 = v3;
        }
        else
        {
          v49 = OUTLINED_FUNCTION_7_9();
          OUTLINED_FUNCTION_44_1();
          v40 = OUTLINED_FUNCTION_8_2();
          v30 = 0;
          v50 = v3;
          if ((v49 & 1) == 0)
            return v30;
        }
LABEL_42:
        if (v50)
        {
          if (!v173)
            return 0;
          if (v170 != v169 || v50 != v173)
          {
            v40 = OUTLINED_FUNCTION_7_9();
            v30 = 0;
            if ((v40 & 1) == 0)
              return v30;
          }
        }
        else if (v173)
        {
          return 0;
        }
        v53 = v168;
        if (v168)
        {
          v41 = v167;
          if (!v167)
            return 0;
          v40 = v156;
          v46 = v155;
          if (v156 != v155 || v168 != v167)
          {
            v40 = OUTLINED_FUNCTION_7_9();
            v30 = 0;
            if ((v40 & 1) == 0 || ((v166 ^ v165) & 1) != 0)
              return v30;
LABEL_62:
            if (((v164 ^ v163) & 1) != 0
              || ((v162 ^ v161) & 1) != 0
              || ((v160 ^ v159) & 1) != 0
              || ((v158 ^ v157) & 1) != 0)
            {
              return v30;
            }
            if ((v154 & 1) != 0)
            {
              v30 = 0;
              if (!v153)
                return v30;
            }
            else
            {
              if ((v153 & 1) != 0)
                return 0;
              v30 = 0;
              if (v4 != v6)
                return v30;
            }
            if (((v152 ^ HIDWORD(v92)) & 1) != 0)
              return v30;
            if ((v151 & 1) != 0)
            {
              if (!v150)
                return 0;
            }
            else
            {
              v55 = v150;
              if (v5 != v7)
                v55 = 1;
              if ((v55 & 1) != 0)
                return 0;
            }
            if ((v149 & 1) != 0)
            {
              if (!v148)
                return 0;
            }
            else
            {
              v56 = v148;
              if (v145 != v8)
                v56 = 1;
              if ((v56 & 1) != 0)
                return 0;
            }
            if ((v146 & 1) != 0)
            {
              if (!v147)
                return 0;
            }
            else
            {
              v57 = v147;
              if (v143 != v141)
                v57 = 1;
              if ((v57 & 1) != 0)
                return 0;
            }
            if ((v144 & 1) != 0)
            {
              if (!v142)
                return 0;
            }
            else
            {
              v58 = v142;
              if (v139 != v9)
                v58 = 1;
              if ((v58 & 1) != 0)
                return 0;
            }
            if ((v140 & 1) != 0)
            {
              if (!v138)
                return 0;
            }
            else
            {
              v59 = v138;
              if (v135 != v10)
                v59 = 1;
              if ((v59 & 1) != 0)
                return 0;
            }
            if ((v136 & 1) != 0)
            {
              v30 = 0;
              if (!v134)
                return v30;
            }
            else
            {
              if ((v134 & 1) != 0)
                return 0;
              v30 = 0;
              if (*(double *)&v104 != v11)
                return v30;
            }
            if (((HIDWORD(v131) ^ v131) & 1) != 0)
              return v30;
            if (v137)
            {
              OUTLINED_FUNCTION_2_14(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
                v78,
                v80,
                v82,
                v84,
                v86,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                v104,
                v105,
                v107,
                v109,
                v111,
                v113,
                v115,
                v117,
                v119,
                v121,
                v123,
                v125,
                v126,
                v127,
                v128,
                v129,
                v130,
                v131,
                v132);
              v198 = v123;
              v199 = v137;
              if (v133)
              {
                v181 = v105;
                v182 = v107;
                LOBYTE(v183) = v109 & 1;
                v60 = (uint64x2_t)vdupq_n_s64(v109);
                *(_DWORD *)((char *)&v183 + 1) = OUTLINED_FUNCTION_6_6(v60, (int32x4_t)vshlq_u64(v60, (uint64x2_t)xmmword_246F739F0), (uint64x2_t)xmmword_246F73A00).u32[0];
                BYTE5(v183) = v61 & 1;
                v184 = v111;
                LOBYTE(v185) = v113 & 1;
                v186 = v115;
                LOBYTE(v187) = v119 & 1;
                v188 = v121;
                LOBYTE(v189) = v117 & 1;
                v190 = v133;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                static ConnectionPolicy.== infix(_:_:)((uint64_t)&v197, (uint64_t)&v181);
                v63 = v62;
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_44_1();
                v40 = outlined consume of ConnectionPolicy?(v129, v132, v130, v91, v125, v126, v127, v128, v123, v137);
                if ((v63 & 1) != 0)
                  goto LABEL_113;
                return 0;
              }
              swift_bridgeObjectRetain();
              v40 = swift_bridgeObjectRetain();
            }
            else if (!v133)
            {
LABEL_113:
              if (v37 == 1)
              {
                if (v175 == 1)
                  return 1;
              }
              else
              {
                OUTLINED_FUNCTION_1_15(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
                  v78,
                  v80,
                  v82,
                  v84,
                  v86,
                  v88,
                  v89,
                  v90,
                  v91,
                  v92,
                  v93,
                  v95,
                  v96,
                  v97,
                  v98,
                  v99,
                  v100,
                  v101,
                  v102,
                  v103,
                  SWORD2(v103));
                if (v175 != 1)
                {
                  v181 = v72;
                  v182 = v175;
                  v183 = v93;
                  v184 = v180;
                  v185 = v18;
                  v186 = v19;
                  v187 = v20;
                  v188 = v21;
                  v189 = v76;
                  LOBYTE(v190) = v82 & 1;
                  v191 = v86;
                  v192 = v80;
                  v193 = v84;
                  v194 = v78;
                  v195 = BYTE4(v74) & 1;
                  v196 = BYTE5(v74);
                  v30 = static ConnectionPolicyRoute.== infix(_:_:)((uint64_t)&v197, (uint64_t)&v181);
                  swift_bridgeObjectRetain();
                  OUTLINED_FUNCTION_8_6();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  OUTLINED_FUNCTION_8_2();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return v30;
                }
                swift_bridgeObjectRetain();
                OUTLINED_FUNCTION_8_6();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v40 = swift_bridgeObjectRetain();
              }
              OUTLINED_FUNCTION_1_15(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
                v78,
                v80,
                v82,
                v84,
                v86,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                v95,
                v96,
                v97,
                v98,
                v99,
                v100,
                v101,
                v102,
                v103,
                SWORD2(v103));
              v205 = v73;
              v206 = v175;
              v207 = v94;
              v208 = v180;
              v209 = v18;
              v210 = v19;
              v211 = v20;
              v212 = v21;
              v213 = v77;
              v214 = v83;
              v215 = v87;
              v216 = v81;
              v217 = v85;
              v218 = v79;
              v219 = v75;
              outlined copy of ConnectionPolicyRoute?(v73, v175);
              outlined release of (ConnectionPolicyRoute?, ConnectionPolicyRoute?)(&v197);
              return 0;
            }
            OUTLINED_FUNCTION_2_14(v40, v53, v46, v41, v42, v43, v44, v45, v64, v65, v66, v67, v68, v69, v70, v71, v72, v74, v76,
              v78,
              v80,
              v82,
              v84,
              v86,
              v88,
              v89,
              v90,
              v91,
              v92,
              v93,
              v95,
              v96,
              v97,
              v98,
              v99,
              v100,
              v101,
              v102,
              v103,
              v104,
              v105,
              v107,
              v109,
              v111,
              v113,
              v115,
              v117,
              v119,
              v121,
              v123,
              v125,
              v126,
              v127,
              v128,
              v129,
              v130,
              v131,
              v132);
            v198 = v124;
            v199 = v137;
            v200 = v106;
            v201 = v108;
            v202 = v110;
            v203 = v112;
            v204 = v114;
            v205 = v116;
            v206 = v120;
            v207 = v122;
            v208 = v118;
            v209 = v133;
            outlined copy of ConnectionPolicy?(v106, v108, v110, v112, v114, v116, v120, v122, v118, v133);
            outlined release of (ConnectionPolicy?, ConnectionPolicy?)(&v197);
            return 0;
          }
        }
        else if (v167)
        {
          return 0;
        }
        v30 = 0;
        if (v166 != v165)
          return v30;
        goto LABEL_62;
      }
    }
    else
    {
      v50 = v3;
      v180 = v17;
      if (!v47)
        goto LABEL_42;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return v30;
}

void specialized RawRepresentable<>.hash(into:)(int a1, Swift::UInt a2)
{
  OUTLINED_FUNCTION_9_7(a1, a2);
  OUTLINED_FUNCTION_3();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2 + 1);
  OUTLINED_FUNCTION_3();
}

{
  Hasher._combine(_:)(a2);
  OUTLINED_FUNCTION_3();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

{
  Hasher._combine(_:)(qword_246F73A80[a2]);
  OUTLINED_FUNCTION_3();
}

uint64_t sub_246EFEAFC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)()
{
  Hasher._combine(_:)(1uLL);
  OUTLINED_FUNCTION_3();
}

void ConnectionConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt8 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  Swift::UInt8 v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  uint64x2_t v20;
  Swift::UInt64 v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  Swift::UInt v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  Swift::UInt64 v27;
  unint64_t v28;
  uint64_t v29;
  Swift::UInt8 v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  int v40;
  Swift::UInt8 v41;
  int v42;
  int v43;
  int v44;
  int v45;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 56);
  v29 = *(_QWORD *)(v1 + 72);
  v35 = *(_QWORD *)(v1 + 88);
  v30 = *(_BYTE *)(v1 + 96);
  v36 = *(_BYTE *)(v1 + 97);
  v37 = *(_BYTE *)(v1 + 98);
  v38 = *(_BYTE *)(v1 + 113);
  v39 = *(_BYTE *)(v1 + 114);
  v21 = *(_QWORD *)(v1 + 120);
  v40 = *(unsigned __int8 *)(v1 + 128);
  v41 = *(_BYTE *)(v1 + 201);
  v22 = *(_QWORD *)(v1 + 208);
  v42 = *(unsigned __int8 *)(v1 + 216);
  v23 = *(_QWORD *)(v1 + 224);
  v43 = *(unsigned __int8 *)(v1 + 232);
  v24 = *(_QWORD *)(v1 + 240);
  v44 = *(unsigned __int8 *)(v1 + 248);
  v31 = *(unsigned __int8 *)(v1 + 280);
  v32 = *(unsigned __int8 *)(v1 + 312);
  v7 = *(_BYTE *)(v1 + 313);
  v25 = *(_QWORD *)(v1 + 256);
  v45 = *(unsigned __int8 *)(v1 + 264);
  v26 = *(_QWORD *)(v1 + 272);
  v27 = *(_QWORD *)(v1 + 304);
  v28 = *(_QWORD *)(v1 + 336);
  v34 = *(_QWORD *)(v1 + 392);
  v8 = *(_QWORD *)(v1 + 408);
  v9 = *(_QWORD *)(v1 + 424);
  Hasher._combine(_:)(*(_QWORD *)v1);
  Hasher._combine(_:)(v3);
  if (v4)
  {
    OUTLINED_FUNCTION_0_20(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  v10 = v9;
  v11 = v7;
  v12 = v31;
  if (v5)
  {
    OUTLINED_FUNCTION_0_20(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  v13 = v32;
  if (v8 != 1 && v10)
  {
    v33 = v8;
    v14 = v13;
    v15 = v31;
    v16 = v7;
    swift_bridgeObjectRetain();
LABEL_12:
    OUTLINED_FUNCTION_0_20(1u);
    OUTLINED_FUNCTION_8_6();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    v11 = v16;
    v12 = v15;
    v13 = v14;
    v8 = v33;
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_11_7();
  if (v6)
  {
    v33 = v8;
    v14 = v13;
    v15 = v31;
    v16 = v7;
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_0_20(0);
LABEL_14:
  if (v29)
  {
    OUTLINED_FUNCTION_0_20(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    OUTLINED_FUNCTION_8_2();
  }
  else
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  if (v35)
  {
    OUTLINED_FUNCTION_0_20(1u);
    OUTLINED_FUNCTION_8_6();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  OUTLINED_FUNCTION_0_20(v30);
  Hasher._combine(_:)(v36);
  Hasher._combine(_:)(v37);
  Hasher._combine(_:)(v38);
  Hasher._combine(_:)(v39);
  if (v40)
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  else
  {
    OUTLINED_FUNCTION_0_20(1u);
    if ((v21 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v17 = v21;
    else
      v17 = 0;
    Hasher._combine(_:)(v17);
  }
  OUTLINED_FUNCTION_0_20(v41);
  if (v42)
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  else
  {
    OUTLINED_FUNCTION_0_20(1u);
    if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v18 = v22;
    else
      v18 = 0;
    Hasher._combine(_:)(v18);
  }
  if (v43)
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  else
  {
    OUTLINED_FUNCTION_0_20(1u);
    if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v19 = v23;
    else
      v19 = 0;
    Hasher._combine(_:)(v19);
  }
  if (v44)
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  else
  {
    OUTLINED_FUNCTION_0_20(1u);
    Hasher._combine(_:)(v24);
  }
  if (v45)
  {
    OUTLINED_FUNCTION_0_20(0);
    if (!v12)
      goto LABEL_43;
LABEL_46:
    OUTLINED_FUNCTION_0_20(0);
    if (!v13)
      goto LABEL_44;
    goto LABEL_47;
  }
  OUTLINED_FUNCTION_0_20(1u);
  OUTLINED_FUNCTION_5_13(v25);
  if (v12)
    goto LABEL_46;
LABEL_43:
  OUTLINED_FUNCTION_0_20(1u);
  OUTLINED_FUNCTION_5_13(v26);
  if (!v13)
  {
LABEL_44:
    OUTLINED_FUNCTION_0_20(1u);
    OUTLINED_FUNCTION_5_13(v27);
    goto LABEL_48;
  }
LABEL_47:
  OUTLINED_FUNCTION_0_20(0);
LABEL_48:
  OUTLINED_FUNCTION_0_20(v11);
  if (v34)
  {
    v20 = (uint64x2_t)vdupq_n_s64(v28);
    OUTLINED_FUNCTION_6_6(v20, (int32x4_t)vshlq_u64(v20, (uint64x2_t)xmmword_246F739F0), (uint64x2_t)xmmword_246F73A00);
    OUTLINED_FUNCTION_0_20(1u);
    ConnectionPolicy.hash(into:)(a1);
  }
  else
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  if (v8 == 1)
  {
    OUTLINED_FUNCTION_0_20(0);
  }
  else
  {
    OUTLINED_FUNCTION_0_20(1u);
    ConnectionPolicyRoute.hash(into:)();
  }
}

Swift::Int ConnectionConfiguration.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  ConnectionConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionConfiguration()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  ConnectionConfiguration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t *outlined release of (ConnectionPolicy?, ConnectionPolicy?)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v12 = a1[10];
  v2 = a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[14];
  v6 = a1[15];
  v7 = a1[16];
  v8 = a1[17];
  v9 = a1[18];
  v10 = a1[19];
  outlined consume of ConnectionPolicy?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  outlined consume of ConnectionPolicy?(v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t *outlined release of (ConnectionPolicyRoute?, ConnectionPolicyRoute?)(uint64_t *a1)
{
  uint64_t v3;
  uint64_t v4;

  v4 = a1[15];
  v3 = a1[16];
  outlined consume of ConnectionPolicyRoute?(*a1, a1[1]);
  outlined consume of ConnectionPolicyRoute?(v4, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ConnectionConfiguration and conformance ConnectionConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionConfiguration and conformance ConnectionConfiguration;
  if (!lazy protocol witness table cache variable for type ConnectionConfiguration and conformance ConnectionConfiguration)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionConfiguration, &type metadata for ConnectionConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionConfiguration and conformance ConnectionConfiguration);
  }
  return result;
}

void OUTLINED_FUNCTION_0_20(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

void OUTLINED_FUNCTION_1_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unint64_t a31,unint64_t a32,unint64_t a33,unint64_t a34,unint64_t a35,unint64_t a36,unint64_t a37,unint64_t a38,int a39,__int16 a40)
{
  unint64_t v40;
  unint64_t v41;

  STACK[0x338] = a31;
  STACK[0x340] = v41;
  STACK[0x348] = STACK[0x280];
  STACK[0x350] = v40;
  STACK[0x358] = a32;
  STACK[0x360] = a33;
  STACK[0x368] = a25;
  STACK[0x370] = a34;
  STACK[0x378] = a26;
  STACK[0x380] = a35;
  STACK[0x388] = a36;
  STACK[0x390] = a27;
  STACK[0x398] = a37;
  STACK[0x3A0] = a38;
  LOWORD(STACK[0x3A8]) = a40;
}

void OUTLINED_FUNCTION_2_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,unint64_t a51,unint64_t a52,unint64_t a53,unint64_t a54,unint64_t a55,unint64_t a56,uint64_t a57,unint64_t a58)
{
  STACK[0x338] = a55;
  STACK[0x340] = a58;
  STACK[0x348] = a56;
  STACK[0x350] = a28;
  STACK[0x358] = a51;
  STACK[0x360] = a52;
  STACK[0x368] = a53;
  STACK[0x370] = a54;
}

void OUTLINED_FUNCTION_5_13(Swift::UInt64 a1@<X8>)
{
  if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    Hasher._combine(_:)(a1);
  else
    Hasher._combine(_:)(0);
}

int8x8_t OUTLINED_FUNCTION_6_6(uint64x2_t a1, int32x4_t a2, uint64x2_t a3)
{
  int16x8_t v3;

  v3 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(a1, a3), a2);
  *(int8x8_t *)v3.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v3), (int8x8_t)0x1000100010001);
  return vmovn_s16(v3);
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_9_7(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t OUTLINED_FUNCTION_11_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t ConnectionPingInfoReport.init(pingInfo:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = result;
  if (*(double *)&result != 0.0)
  {
    v2 = Double.milliseconds.getter(*(double *)(result + 24));
    v3 = *(_QWORD *)(v1 + 16);
    if ((v3 & 0x8000000000000000) != 0
      || HIDWORD(v3)
      || (v4 = v2, v5 = PingInfo.numberOfUnacknowledgedPings()(), swift_release(), (v5 & 0x8000000000000000) != 0)
      || HIDWORD(v5))
    {
      OUTLINED_FUNCTION_0_0();
      *(double *)&result = COERCE_DOUBLE(_assertionFailure(_:_:file:line:flags:)());
      __break(1u);
    }
    else
    {
      *(double *)&result = (double)v4;
    }
  }
  return result;
}

void one-time initialization function for sharedNetworkAnalytics()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;

  default argument 0 of NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)();
  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
  v3 = objc_allocWithZone((Class)type metadata accessor for NetworkAnalytics(0));
  static NetworkAnalytics.sharedNetworkAnalytics = (uint64_t)NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)(v1, (uint64_t)v2);
  OUTLINED_FUNCTION_3();
}

void default argument 0 of NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_19();
  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_74_1();
  type metadata accessor for OS_dispatch_queue.Attributes();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_102_0(v6, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.utility.getter();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v3, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v0, *MEMORY[0x24BEE5750], v1);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  OUTLINED_FUNCTION_1_1();
}

id static NetworkAnalytics.sharedNetworkAnalytics.getter()
{
  if (one-time initialization token for sharedNetworkAnalytics != -1)
    swift_once();
  return (id)static NetworkAnalytics.sharedNetworkAnalytics;
}

id NetworkAnalytics.init(queue:siriAnalyticsMessageStream:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  objc_super v11;

  v5 = (uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
  OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_15_5(v5);
  OUTLINED_FUNCTION_15_5((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId]);
  v6 = &v2[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  OUTLINED_FUNCTION_15_5((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_orchestratorRequestId]);
  OUTLINED_FUNCTION_15_5((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink]);
  v7 = &v2[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent];
  OUTLINED_FUNCTION_15_5((uint64_t)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent]);
  v8 = OUTLINED_FUNCTION_101();
  *(_QWORD *)&v7[*(int *)(v8 + 20)] = 0;
  v9 = &v7[*(int *)(v8 + 24)];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_preparationSnapshotEvent);
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_debugPreparationSnapshotEvent);
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_readySnapshotEvent);
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_debugReadySnapshotEvent);
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionSnapthotEvent);
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_debugSessionConnectionSnapthotEvent);
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionFailedEvent);
  OUTLINED_FUNCTION_0_21(OBJC_IVAR___SNNetworkAnalyticsInternal_peerConnectionFailedEvent);
  *(_QWORD *)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_queue] = a1;
  v2[OBJC_IVAR___SNNetworkAnalyticsInternal_isConnectionActive] = 0;
  v2[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdAvailable] = 0;
  *(_DWORD *)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream] = a2;
  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for NetworkAnalytics(0);
  return objc_msgSendSuper2(&v11, sel_init);
}

Swift::Void __swiftcall NetworkAnalytics.reset()()
{
  NetworkAnalytics.resetNetId()();
}

void sub_246EFF994()
{
  NetworkAnalytics.resetSequenceNumber()();
}

void sub_246EFF9BC()
{
  void *v0;

}

Swift::Void __swiftcall NetworkAnalytics.resetNetId()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  OUTLINED_FUNCTION_19();
  v1 = v0;
  OUTLINED_FUNCTION_18();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_46_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  v5 = *(void **)(v1 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_73_1();
  OUTLINED_FUNCTION_34_3();
  v6 = v5;
  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v2, MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_3_10();
}

void sub_246EFFAE8()
{
  void *v0;

  OUTLINED_FUNCTION_40_2();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.resetNetId()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v31 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v31 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v31 - v16;
  swift_beginAccess();
  v18 = MEMORY[0x24956E090](a1 + 16);
  if (v18)
  {
    v19 = (void *)v18;
    v33 = v3;
    UUID.init()();
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v2);
    v20 = (uint64_t)v19 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v17, v20);
    swift_endAccess();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.siriNetwork);
    v22 = v19;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v35[0] = v32;
      *(_DWORD *)v25 = 136315138;
      outlined init with copy of UUID?(v20, (uint64_t)v15);
      outlined init with copy of UUID?((uint64_t)v15, (uint64_t)v12);
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v2) == 1)
      {
        v26 = 0xE400000000000000;
        v27 = 1819047278;
      }
      else
      {
        v28 = v33;
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v8, v12, v2);
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v6, v8, v2);
        v27 = String.init<A>(describing:)();
        v26 = v29;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v2);
      }
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v23, v24, "Network Analytics: NetId reset: %s", v25, 0xCu);
      v30 = v32;
      swift_arrayDestroy();
      MEMORY[0x24956E018](v30, -1, -1);
      MEMORY[0x24956E018](v25, -1, -1);

    }
    else
    {

    }
  }
}

void sub_246EFFEAC()
{
  void *v0;

}

Swift::Void __swiftcall NetworkAnalytics.setNetId(_:)(Swift::String_optional a1)
{
  NetworkAnalytics.setNetId(_:)();
}

void NetworkAnalytics.getNetId()()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_52_0(v5);
  v6 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  v7 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v0;
  v8 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in NetworkAnalytics.getNetId();
  *(_QWORD *)(v8 + 24) = v7;
  v10[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v10[5] = v8;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  OUTLINED_FUNCTION_80_1((uint64_t)thunk for @escaping @callee_guaranteed () -> ());
  OUTLINED_FUNCTION_89_1();
  OUTLINED_FUNCTION_93_1();
  swift_retain();
  swift_release();
  OUTLINED_FUNCTION_86_1();

  _Block_release(v1);
  v9 = OUTLINED_FUNCTION_27_4();
  OUTLINED_FUNCTION_34_0();
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_1();
    swift_release();
    OUTLINED_FUNCTION_10_4();
  }
}

void thunk for @callee_guaranteed () -> ()(void (*a1)(void))
{
  a1();
  OUTLINED_FUNCTION_3();
}

void thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  (*(void (**)(void))(a1 + 32))();
  OUTLINED_FUNCTION_3();
}

void NetworkAnalytics.setNetworkConnectionId(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[10];

  OUTLINED_FUNCTION_19();
  v9[2] = *(_QWORD *)(OUTLINED_FUNCTION_18() - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v1);
  v2 = OUTLINED_FUNCTION_0_3();
  v9[0] = *(_QWORD *)(v2 - 8);
  v9[1] = v2;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_3_0();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_79_0();
  v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v0;
  outlined init with take of UUID?((uint64_t)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  v9[8] = partial apply for closure #1 in NetworkAnalytics.setNetworkConnectionId(_:);
  v9[9] = v8;
  v9[4] = MEMORY[0x24BDAC760];
  v9[5] = 1107296256;
  v9[6] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[7] = &block_descriptor_23;
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_93_1();
  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_17();
  v9[3] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_3_10();
}

void sub_246F001F4()
{
  void *v0;

  OUTLINED_FUNCTION_40_2();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_24_3();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.setNetworkConnectionId(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  int v26;
  uint8_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36[3];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v32 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v32 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v32 - v18;
  swift_beginAccess();
  v20 = MEMORY[0x24956E090](a1 + 16);
  if (v20)
  {
    v21 = (void *)v20;
    outlined init with copy of UUID?(a2, (uint64_t)v19);
    v22 = (uint64_t)v21 + OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v19, v22);
    swift_endAccess();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriNetwork);
    v24 = v21;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v34 = v26;
      v27 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v36[0] = v33;
      *(_DWORD *)v27 = 136315138;
      outlined init with copy of UUID?(v22, (uint64_t)v17);
      outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v14);
      if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v4) == 1)
      {
        v28 = 0xE300000000000000;
        v29 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v14, v4);
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
        v29 = String.init<A>(describing:)();
        v28 = v30;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      }
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v25, (os_log_type_t)v34, "Network Analytics: NetworkConnectionId set: %s", v27, 0xCu);
      v31 = v33;
      swift_arrayDestroy();
      MEMORY[0x24956E018](v31, -1, -1);
      MEMORY[0x24956E018](v27, -1, -1);

    }
    else
    {

    }
  }
}

void sub_246F00628()
{
  void *v0;
  uint64_t v1;

  outlined destroy of RPCOspreyConnectionProtocol?(v1, &demangling cache variable for type metadata for UUID?);
}

Swift::Void __swiftcall NetworkAnalytics.setConnectionProvider(_:)(Swift::String_optional a1)
{
  NetworkAnalytics.setNetId(_:)();
}

void NetworkAnalytics.setNetId(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;

  OUTLINED_FUNCTION_19();
  v5 = v4;
  v7 = v6;
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_3_0();
  v10 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_41_3();
  v11 = (_QWORD *)OUTLINED_FUNCTION_6();
  v11[2] = v3;
  v11[3] = v7;
  v11[4] = v5;
  v12 = OUTLINED_FUNCTION_34_3();
  swift_bridgeObjectRetain();
  v13 = v10;
  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v2, v1, v12);
  OUTLINED_FUNCTION_69_0();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_24_3();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.setConnectionProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = a1 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x24956E090](v4);
  if (v5)
  {
    v6 = (char *)v5;
    if (a3)
    {
      type metadata accessor for NetworkAnalytics(0);
      static NetworkAnalytics.netProvider(from:)();
    }
    else
    {
      v7 = 0;
    }
    v8 = &v6[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider];
    *(_DWORD *)v8 = v7;
    v8[4] = a3 == 0;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
    v10 = v6;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v18 = v14;
      *(_DWORD *)v13 = 136315138;
      if ((v10[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider + 4] & 1) != 0)
      {
        v15 = 0xE300000000000000;
        v16 = 7104878;
      }
      else
      {
        type metadata accessor for NETSchemaNETProvider(0);
        v16 = String.init<A>(describing:)();
        v15 = v17;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v11, v12, "Network Analytics: ConnectionProvider set: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v14, -1, -1);
      MEMORY[0x24956E018](v13, -1, -1);

    }
    else
    {

    }
  }
}

Swift::UInt32 __swiftcall NetworkAnalytics.getSequenceNumber()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt32 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v8 = 0;
  v1 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  v2 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v2 + 16) = &v8;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in NetworkAnalytics.getSequenceNumber();
  *(_QWORD *)(v3 + 24) = v2;
  OUTLINED_FUNCTION_54_1((uint64_t)thunk for @escaping @callee_guaranteed () -> (), v5, MEMORY[0x24BDAC760], 1107296256, v6, v7);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_85_1();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_63_1();

  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_27_4();
  result = OUTLINED_FUNCTION_49_2();
  if ((v0 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_31_1();
  }
  return result;
}

Swift::Void __swiftcall NetworkAnalytics.setIsConnectionActive(_:)(Swift::Bool a1)
{
  NetworkAnalytics.setIsConnectionActive(_:)();
}

void sub_246F00BA8()
{
  void *v0;

}

Swift::Bool __swiftcall NetworkAnalytics.getIsConnectionActive()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Bool result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v8 = 0;
  v1 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  v2 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v2 + 16) = &v8;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in NetworkAnalytics.getIsConnectionActive();
  *(_QWORD *)(v3 + 24) = v2;
  OUTLINED_FUNCTION_54_1((uint64_t)thunk for @escaping @callee_guaranteed () -> (), v5, MEMORY[0x24BDAC760], 1107296256, v6, v7);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_85_1();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_63_1();

  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_27_4();
  result = OUTLINED_FUNCTION_49_2();
  if ((v0 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_31_1();
  }
  return result;
}

Swift::Void __swiftcall NetworkAnalytics.setNetIdAvailable(_:)(Swift::Bool a1)
{
  NetworkAnalytics.setIsConnectionActive(_:)();
}

void NetworkAnalytics.setIsConnectionActive(_:)()
{
  char *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  char *v8;

  OUTLINED_FUNCTION_19();
  v2 = v1;
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_46_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  v5 = *(void **)&v0[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  v6 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v6 + 16) = v0;
  *(_BYTE *)(v6 + 24) = v2;
  OUTLINED_FUNCTION_34_3();
  v7 = v5;
  v8 = v0;
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_3_10();
}

void sub_246F00E0C()
{
  void *v0;

  OUTLINED_FUNCTION_40_2();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_21();
  swift_release();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.setNetIdAvailable(_:)(uint64_t a1, char a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *oslog;

  *(_BYTE *)(a1 + OBJC_IVAR___SNNetworkAnalyticsInternal_netIdAvailable) = a2;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
  oslog = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_246EC7000, oslog, v3, "Network Analytics: NetId available: %{BOOL}d", v4, 8u);
    MEMORY[0x24956E018](v4, -1, -1);
  }

}

void sub_246F00F88()
{
  void *v0;

}

Swift::Bool __swiftcall NetworkAnalytics.isNetIdAvailable()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Bool result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v8 = 0;
  v1 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  v2 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v2 + 16) = &v8;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in NetworkAnalytics.isNetIdAvailable();
  *(_QWORD *)(v3 + 24) = v2;
  OUTLINED_FUNCTION_54_1((uint64_t)thunk for @escaping @callee_guaranteed () -> (), v5, MEMORY[0x24BDAC760], 1107296256, v6, v7);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_85_1();
  OUTLINED_FUNCTION_34_0();
  OUTLINED_FUNCTION_63_1();

  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_27_4();
  result = OUTLINED_FUNCTION_49_2();
  if ((v0 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_31_1();
  }
  return result;
}

Swift::Void __swiftcall NetworkAnalytics.increaseSequenceNumber()()
{
  NetworkAnalytics.increaseSequenceNumber()();
}

void sub_246F010F8()
{
  void *v0;

}

Swift::Void __swiftcall NetworkAnalytics.resetSequenceNumber()()
{
  NetworkAnalytics.increaseSequenceNumber()();
}

void NetworkAnalytics.increaseSequenceNumber()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  char *v5;

  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v1);
  v2 = OUTLINED_FUNCTION_0_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_3_0();
  v3 = *(void **)&v0[OBJC_IVAR___SNNetworkAnalyticsInternal_queue];
  *(_QWORD *)(OUTLINED_FUNCTION_6() + 16) = v0;
  OUTLINED_FUNCTION_34_3();
  v4 = v3;
  v5 = v0;
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_3_10();
}

void sub_246F0123C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_40_2();

  OUTLINED_FUNCTION_2_1();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  swift_release();
  OUTLINED_FUNCTION_1_1();
}

uint64_t sub_246F0126C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkAnalytics.resetNetId()()
{
  uint64_t v0;

  closure #1 in NetworkAnalytics.resetNetId()(v0);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

void partial apply for closure #1 in NetworkAnalytics.setNetId(_:)()
{
  OUTLINED_FUNCTION_38_3();
  closure #1 in NetworkAnalytics.setNetId(_:)();
}

void partial apply for closure #1 in NetworkAnalytics.getNetId()()
{
  uint64_t v0;

  closure #1 in NetworkAnalytics.getNetId()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR___SNNetworkAnalyticsInternal_netId);
}

void partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  OUTLINED_FUNCTION_3();
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_246F013AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                                      - 8)
                          + 80);
  OUTLINED_FUNCTION_99();
  v3 = OUTLINED_FUNCTION_19_5();
  if (!OUTLINED_FUNCTION_58_1(v3))
    OUTLINED_FUNCTION_61_1(v0 + ((v2 + 24) & ~v2), *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8));
  return OUTLINED_FUNCTION_42_3();
}

void partial apply for closure #1 in NetworkAnalytics.setNetworkConnectionId(_:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v0 = OUTLINED_FUNCTION_55_1();
  closure #1 in NetworkAnalytics.setNetworkConnectionId(_:)(v0, v1);
}

void partial apply for closure #1 in NetworkAnalytics.setConnectionProvider(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = OUTLINED_FUNCTION_38_3();
  closure #1 in NetworkAnalytics.setConnectionProvider(_:)(v0, v1, v2);
}

uint64_t sub_246F0144C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkAnalytics.getSequenceNumber()()
{
  uint64_t v0;

  **(_DWORD **)(v0 + 16) = *(_DWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber);
}

uint64_t sub_246F0148C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkAnalytics.setIsConnectionActive(_:)()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___SNNetworkAnalyticsInternal_isConnectionActive) = *(_BYTE *)(v0 + 24);
}

void partial apply for closure #1 in NetworkAnalytics.getIsConnectionActive()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_97(*(_BYTE **)(v0 + 16));
}

void partial apply for closure #1 in NetworkAnalytics.setNetIdAvailable(_:)()
{
  uint64_t v0;

  closure #1 in NetworkAnalytics.setNetIdAvailable(_:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void partial apply for closure #1 in NetworkAnalytics.isNetIdAvailable()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_97(*(_BYTE **)(v0 + 16));
}

uint64_t sub_246F014FC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkAnalytics.increaseSequenceNumber()()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  int v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber);
  if (v2 <= 0x3E8)
    v3 = v2 + 1;
  else
    v3 = 1;
  *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber) = v3;
}

void partial apply for closure #1 in NetworkAnalytics.resetSequenceNumber()()
{
  uint64_t v0;

  *(_DWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___SNNetworkAnalyticsInternal_sequenceNumber) = 1;
}

void sub_246F0157C()
{
  void *v0;

}

Swift::Void __swiftcall NetworkAnalytics.setOrchestatorRequestId(_:)(Swift::String_optional a1)
{
  NetworkAnalytics.setNetId(_:)();
}

void closure #1 in NetworkAnalytics.setNetId(_:)()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_19();
  v39 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = OUTLINED_FUNCTION_19_5();
  v38 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_75_1();
  v13 = v11 - v12;
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_77_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_57_1();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = &v35[-v18];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v35[-v20];
  OUTLINED_FUNCTION_48();
  v22 = MEMORY[0x24956E090](v8 + 16);
  if (v22)
  {
    v23 = (void *)v22;
    if (v6)
      UUID.init(uuidString:)();
    else
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 1, 1, v9);
    v24 = (uint64_t)v23 + *v4;
    OUTLINED_FUNCTION_0_2();
    outlined assign with take of UUID?((uint64_t)v21, v24);
    swift_endAccess();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v25 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.siriNetwork);
    v26 = v23;
    v27 = Logger.logObject.getter();
    LODWORD(v23) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, (os_log_type_t)v23))
    {
      v28 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v37 = OUTLINED_FUNCTION_2_2();
      v41 = v37;
      *(_DWORD *)v28 = 136315138;
      v29 = (uint64_t)v26 + *v4;
      OUTLINED_FUNCTION_48();
      outlined init with copy of UUID?(v29, (uint64_t)v19);
      OUTLINED_FUNCTION_71_1((uint64_t)v19);
      if (__swift_getEnumTagSinglePayload(v1, 1, v9) == 1)
      {
        v30 = 0xE400000000000000;
        v31 = 1819047278;
      }
      else
      {
        v36 = (int)v23;
        v23 = v0;
        v32 = v38;
        OUTLINED_FUNCTION_70_0((uint64_t)v23, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32));
        OUTLINED_FUNCTION_70_0(v13, (uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16));
        v31 = String.init<A>(describing:)();
        v30 = v33;
        v34 = (uint64_t)v23;
        LOBYTE(v23) = v36;
        OUTLINED_FUNCTION_61_1(v34, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
      }
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v27, (os_log_type_t)v23, v39, v28);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_4();
    }

  }
  OUTLINED_FUNCTION_1_1();
}

uint64_t objectdestroy_3Tm()
{
  OUTLINED_FUNCTION_99();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkAnalytics.setOrchestatorRequestId(_:)()
{
  OUTLINED_FUNCTION_38_3();
  closure #1 in NetworkAnalytics.setNetId(_:)();
}

uint64_t @objc NetworkAnalytics.setNetId(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease();
}

void NetworkAnalytics.getOrchestratorRequestId()()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_19_5();
  OUTLINED_FUNCTION_52_0(v5);
  v6 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  v7 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v0;
  v8 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in NetworkAnalytics.getOrchestratorRequestId();
  *(_QWORD *)(v8 + 24) = v7;
  v10[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v10[5] = v8;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  OUTLINED_FUNCTION_80_1((uint64_t)thunk for @escaping @callee_guaranteed () -> ());
  OUTLINED_FUNCTION_89_1();
  OUTLINED_FUNCTION_93_1();
  swift_retain();
  swift_release();
  OUTLINED_FUNCTION_86_1();

  _Block_release(v1);
  v9 = OUTLINED_FUNCTION_27_4();
  OUTLINED_FUNCTION_34_0();
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_82_1();
    swift_release();
    OUTLINED_FUNCTION_10_4();
  }
}

void closure #1 in NetworkAnalytics.getNetId()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + *a3;
  OUTLINED_FUNCTION_48();
  outlined init with copy of UUID?(v9, (uint64_t)v8);
  outlined assign with take of UUID?((uint64_t)v8, a1);
  OUTLINED_FUNCTION_23_1();
}

void partial apply for closure #1 in NetworkAnalytics.getOrchestratorRequestId()()
{
  uint64_t v0;

  closure #1 in NetworkAnalytics.getNetId()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR___SNNetworkAnalyticsInternal_orchestratorRequestId);
}

Class @objc NetworkAnalytics.getNetId()(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  Class isa;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_74_1();
  v7 = a1;
  a3();

  v8 = OUTLINED_FUNCTION_19_5();
  isa = 0;
  if (OUTLINED_FUNCTION_58_1(v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_61_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(*((_QWORD *)a3 - 1) + 8));
  }
  return isa;
}

Swift::Bool __swiftcall NetworkAnalytics.emitLogDebug()()
{
  if (specialized RandomNumberGenerator.next<A>(upperBound:)(10))
    return AFIsInternalInstall();
  else
    return 1;
}

void *NetworkAnalytics.createRequestLinkInfo(from:component:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v19;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OUTLINED_FUNCTION_19_5();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_75_1();
  v12 = v10 - v11;
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_77_1();
  outlined init with copy of UUID?(a1, (uint64_t)v7);
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
    return 0;
  }
  else
  {
    v15 = OUTLINED_FUNCTION_70_0(v2, (uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    OUTLINED_FUNCTION_102_0(v15, &lazy cache variable for type metadata for SISchemaUUID);
    OUTLINED_FUNCTION_70_0(v12, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    v16 = SISchemaUUID.__allocating_init(nsuuid:)(v12);
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95B68]), sel_init);
    v14 = v17;
    if (v17)
    {
      OUTLINED_FUNCTION_0_6(v17, sel_setUuid_);
      objc_msgSend(v14, sel_setComponent_, a2);

      OUTLINED_FUNCTION_61_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    }
    else
    {
      OUTLINED_FUNCTION_61_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));

    }
  }
  return v14;
}

id SISchemaUUID.__allocating_init(nsuuid:)(uint64_t a1)
{
  id v2;
  Class isa;
  id v4;
  uint64_t v5;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, sel_initWithNSUUID_, isa);

  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

void NetworkAnalytics.createSchemaClientEventFrom(netId:networkConnectionId:connectionProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void (*v27)(char *, uint64_t, uint64_t);
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  id v43;

  OUTLINED_FUNCTION_19();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_57_1();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v40 - v10;
  v12 = OUTLINED_FUNCTION_19_5();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_75_1();
  v16 = v14 - v15;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v40 - v19;
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_77_1();
  OUTLINED_FUNCTION_99_0(v7);
  OUTLINED_FUNCTION_10_6((uint64_t)v11);
  if (!v21)
  {
    v41 = v3;
    v42 = v5;
    v40 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
    v40(v0, v11, v12);
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE952A8]), sel_init);
    v23 = v22;
    if (v22)
    {
      v24 = objc_allocWithZone(MEMORY[0x24BE952B0]);
      v25 = v23;
      v26 = objc_msgSend(v24, sel_init);
      OUTLINED_FUNCTION_0_6(v25, sel_setEventMetadata_);

    }
    OUTLINED_FUNCTION_102_0((uint64_t)v22, &lazy cache variable for type metadata for SISchemaUUID);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v27(v20, v0, v12);
    v28 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v20);
    v43 = v28;
    if (v23)
    {
      v29 = OUTLINED_FUNCTION_2_13((uint64_t)v28, sel_eventMetadata);
      if (v29)
      {
        v30 = v29;
        objc_msgSend(v29, sel_setNetId_, v43);

      }
    }
    OUTLINED_FUNCTION_71_1(v42);
    v31 = OUTLINED_FUNCTION_10_6(v1);
    if (v21)
    {
      OUTLINED_FUNCTION_87_0(v31, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      v40(v16, (char *)v1, v12);
      v27(v20, v16, v12);
      v33 = SISchemaUUID.__allocating_init(nsuuid:)((uint64_t)v20);
      v34 = v33;
      if (!v23)
      {
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);

        if ((v41 & 0x100000000) == 0)
          goto LABEL_25;
        goto LABEL_22;
      }
      v35 = OUTLINED_FUNCTION_2_13((uint64_t)v33, sel_eventMetadata);
      if (v35)
      {
        v36 = v35;
        OUTLINED_FUNCTION_0_6(v35, sel_setNetworkConnectionId_);

        v32 = OUTLINED_FUNCTION_104(v16, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
      }
      else
      {
        OUTLINED_FUNCTION_104(v16, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));

      }
    }
    v37 = v41;
    if ((v41 & 0x100000000) == 0)
    {
      if (v23)
      {
        v38 = OUTLINED_FUNCTION_2_13(v32, sel_eventMetadata);
        if (v38)
        {
          v39 = v38;
          objc_msgSend(v38, sel_setProvider_, v37);
          OUTLINED_FUNCTION_84_1();

          OUTLINED_FUNCTION_104(v0, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
          goto LABEL_24;
        }
        OUTLINED_FUNCTION_104(v0, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
LABEL_23:
        OUTLINED_FUNCTION_84_1();
        goto LABEL_24;
      }
LABEL_25:
      OUTLINED_FUNCTION_81_1();
      OUTLINED_FUNCTION_84_1();
      goto LABEL_24;
    }
LABEL_22:
    OUTLINED_FUNCTION_81_1();
    goto LABEL_23;
  }
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
LABEL_24:
  OUTLINED_FUNCTION_1_1();
}

void NetworkAnalytics.emitAllCachedMessagesFor(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[12];

  OUTLINED_FUNCTION_19();
  v3 = v2;
  v12[4] = *(_QWORD *)(OUTLINED_FUNCTION_18() - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_0_3();
  v12[2] = *(_QWORD *)(v5 - 8);
  v12[3] = v5;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  v7 = OUTLINED_FUNCTION_19_5();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v12[1] = *(_QWORD *)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_72_1();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  v12[10] = partial apply for closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:);
  v12[11] = v11;
  v12[6] = MEMORY[0x24BDAC760];
  v12[7] = 1107296256;
  v12[8] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v12[9] = &block_descriptor_178;
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_94_1();
  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_17();
  v12[5] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_3_10();
}

void sub_246F0237C()
{
  void *v0;

  OUTLINED_FUNCTION_40_2();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_24_3();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int EnumTagSinglePayload;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  id v147;
  uint64_t v148;
  char *v149;
  NSObject *v150;
  int v151;
  uint8_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t);
  uint64_t v173;
  void *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  void *v181;
  id v182;
  uint64_t v183;
  char *v184;
  NSObject *v185;
  os_log_type_t v186;
  _BOOL4 v187;
  uint64_t v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(char *, uint64_t);
  uint64_t v207;
  void *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  id v217;
  uint64_t v218;
  char *v219;
  NSObject *v220;
  os_log_type_t v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  uint8_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(char *, uint64_t);
  uint64_t v250;
  uint64_t v251;
  void *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  void *v258;
  id v259;
  uint64_t v260;
  char *v261;
  NSObject *v262;
  os_log_type_t v263;
  uint64_t v264;
  uint8_t *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  char v285;
  void (*v286)(char *, uint64_t);
  uint64_t v287;
  void *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  void *v294;
  id v295;
  uint64_t v296;
  char *v297;
  NSObject *v298;
  os_log_type_t v299;
  uint8_t *v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  void (*v324)(char *, uint64_t);
  uint64_t v325;
  void *v326;
  char *v327;
  id v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  void *v333;
  id v334;
  uint64_t v335;
  id v336;
  NSObject *v337;
  os_log_type_t v338;
  uint8_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void (*v359)(char *, uint64_t, uint64_t);
  char *v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  void (*v366)(char *, uint64_t, uint64_t);
  char *v367;
  uint64_t v368;
  unint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  void (*v374)(char *, uint64_t, uint64_t);
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  char v397;
  uint64_t v398;
  void (*v399)(char *, uint64_t);
  uint64_t v400;
  void *v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  void *v406;
  void *v407;
  id v408;
  uint64_t v409;
  char *v410;
  NSObject *v411;
  os_log_type_t v412;
  uint8_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char *v422;
  uint64_t v423;
  os_log_type_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  char *v442;
  uint64_t v443;
  char v444;
  uint64_t v445;
  void (*v446)(char *, uint64_t);
  uint64_t v447;
  void *v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  void *v454;
  id v455;
  uint64_t v456;
  char *v457;
  NSObject *v458;
  int v459;
  uint8_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  char *v467;
  uint64_t v468;
  NSObject *v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  id v476;
  char *v477;
  uint64_t v478;
  void (*v479)(char *, uint64_t, uint64_t);
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  uint64_t v485;
  char v486;
  void (*v487)(char *, uint64_t);
  uint64_t v488;
  void *v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  void *v494;
  void *v495;
  id v496;
  uint64_t v497;
  char *v498;
  NSObject *v499;
  os_log_type_t v500;
  _BOOL4 v501;
  uint64_t v502;
  uint8_t *v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  char *v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  void *v519;
  uint64_t v520;
  void *v521;
  uint64_t v522;
  void *v523;
  uint64_t v524;
  void *v525;
  uint64_t v526;
  void *v527;
  uint64_t v528;
  void *v529;
  uint64_t v530;
  void *v531;
  uint64_t v532;
  void *v533;
  uint64_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  char *v539;
  char *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  char *v563;
  uint64_t v564;
  uint64_t v565;
  char *v566;
  uint64_t v567;
  char *v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  uint64_t v572;
  char *v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  char *v577;
  char *v578;
  char *v579;
  char *v580;
  char *v581;
  char *v582;
  uint64_t v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  char *v588;
  char *v589;
  char *v590;
  char *v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  void (*v596)(void);
  char *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600[4];
  uint64_t v601[3];
  char *v602;
  uint64_t v603[3];
  uint64_t v604[3];
  uint64_t v605[3];
  uint64_t v606[3];
  char *v607;
  uint64_t v608[3];

  v595 = a2;
  v598 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v598 - 8);
  v4 = MEMORY[0x24BDAC7A8](v598);
  v556 = (char *)&v536 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v592 = (char *)&v536 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  v8 = MEMORY[0x24BDAC7A8](v7);
  v589 = (char *)&v536 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v572 = (uint64_t)&v536 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v570 = (uint64_t)&v536 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v569 = (uint64_t)&v536 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v567 = (uint64_t)&v536 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v588 = (char *)&v536 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v565 = (uint64_t)&v536 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v564 = (uint64_t)&v536 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v536 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v549 = (uint64_t)&v536 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v536 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v578 = (char *)&v536 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v563 = (char *)&v536 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v573 = (char *)&v536 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v548 = (uint64_t)&v536 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v555 = (uint64_t)&v536 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v562 = (uint64_t)&v536 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v586 = (uint64_t)&v536 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v571 = (char *)&v536 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v547 = (uint64_t)&v536 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v554 = (uint64_t)&v536 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v561 = (uint64_t)&v536 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v582 = (char *)&v536 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v585 = (uint64_t)&v536 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v546 = (uint64_t)&v536 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v553 = (uint64_t)&v536 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v560 = (uint64_t)&v536 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v591 = (char *)&v536 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v568 = (char *)&v536 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v545 = (uint64_t)&v536 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v552 = (uint64_t)&v536 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v581 = (char *)&v536 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  v579 = (char *)&v536 - v75;
  v76 = MEMORY[0x24BDAC7A8](v74);
  v590 = (char *)&v536 - v77;
  v78 = MEMORY[0x24BDAC7A8](v76);
  v544 = (uint64_t)&v536 - v79;
  v80 = MEMORY[0x24BDAC7A8](v78);
  v551 = (uint64_t)&v536 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  v559 = (uint64_t)&v536 - v83;
  v84 = MEMORY[0x24BDAC7A8](v82);
  v577 = (char *)&v536 - v85;
  v86 = MEMORY[0x24BDAC7A8](v84);
  v566 = (char *)&v536 - v87;
  v88 = MEMORY[0x24BDAC7A8](v86);
  v543 = (uint64_t)&v536 - v89;
  v90 = MEMORY[0x24BDAC7A8](v88);
  v92 = (char *)&v536 - v91;
  v93 = MEMORY[0x24BDAC7A8](v90);
  v558 = (uint64_t)&v536 - v94;
  v95 = MEMORY[0x24BDAC7A8](v93);
  v584 = (char *)&v536 - v96;
  v97 = MEMORY[0x24BDAC7A8](v95);
  v580 = (char *)&v536 - v98;
  v99 = MEMORY[0x24BDAC7A8](v97);
  v542 = (uint64_t)&v536 - v100;
  v101 = MEMORY[0x24BDAC7A8](v99);
  v550 = (uint64_t)&v536 - v102;
  v103 = MEMORY[0x24BDAC7A8](v101);
  v557 = (uint64_t)&v536 - v104;
  v105 = MEMORY[0x24BDAC7A8](v103);
  v587 = (char *)&v536 - v106;
  v107 = MEMORY[0x24BDAC7A8](v105);
  v583 = (uint64_t)&v536 - v108;
  v109 = MEMORY[0x24BDAC7A8](v107);
  v541 = (uint64_t)&v536 - v110;
  v111 = MEMORY[0x24BDAC7A8](v109);
  v574 = (char *)&v536 - v112;
  v113 = MEMORY[0x24BDAC7A8](v111);
  v115 = (char *)&v536 - v114;
  v116 = MEMORY[0x24BDAC7A8](v113);
  v118 = (char *)&v536 - v117;
  MEMORY[0x24BDAC7A8](v116);
  v120 = (char *)&v536 - v119;
  swift_beginAccess();
  v576 = a1 + 16;
  v121 = MEMORY[0x24956E090](a1 + 16);
  if (v121)
  {
    v122 = (char *)v121;
    v540 = v92;
    v123 = v598;
    v596 = *(void (**)(void))(v3 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v596)(v120, v595, v598);
    __swift_storeEnumTagSinglePayload((uint64_t)v120, 0, 1, v123);
    v597 = v122;
    v124 = (uint64_t)&v122[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent];
    swift_beginAccess();
    v575 = v124;
    outlined init with copy of UUID?(v124, (uint64_t)v118);
    v594 = v7;
    v125 = (uint64_t)&v25[*(int *)(v7 + 48)];
    outlined init with copy of UUID?((uint64_t)v120, (uint64_t)v25);
    outlined init with copy of UUID?((uint64_t)v118, v125);
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v123);
    v593 = v3;
    v539 = v31;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v118, &demangling cache variable for type metadata for UUID?);
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v120, &demangling cache variable for type metadata for UUID?);
      v127 = __swift_getEnumTagSinglePayload(v125, 1, v598);
      v128 = v595;
      v129 = (uint64_t)v580;
      if (v127 == 1)
      {
        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
        v130 = v594;
        v132 = (uint64_t)v587;
        v131 = (uint64_t)v588;
        v133 = v583;
LABEL_10:
        v138 = type metadata accessor for NetworkAnalyticsEventMessage(0);
        v139 = *(void **)(v575 + *(int *)(v138 + 20));
        if (v139)
        {
          v140 = v575 + *(int *)(v138 + 24);
          if ((*(_BYTE *)(v140 + 8) & 1) == 0)
          {
            v141 = v130;
            v142 = *(_QWORD *)v140;
            v143 = v576;
            swift_beginAccess();
            v144 = MEMORY[0x24956E090](v143);
            if (v144)
            {
              v145 = (void *)v144;
              v146 = *(void **)(v144 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
              v147 = v139;
              swift_unknownObjectRetain();

              objc_msgSend(v146, sel_emitMessage_timestamp_, v147, v142);
              v133 = v583;
              v131 = (uint64_t)v588;
              swift_unknownObjectRelease();
            }
            if (one-time initialization token for siriNetwork != -1)
              swift_once();
            v148 = type metadata accessor for Logger();
            __swift_project_value_buffer(v148, (uint64_t)static Logger.siriNetwork);
            v149 = v597;
            v150 = Logger.logObject.getter();
            v151 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v150, (os_log_type_t)v151))
            {
              v538 = v151;
              v152 = (uint8_t *)swift_slowAlloc();
              v537 = swift_slowAlloc();
              v608[0] = v537;
              *(_DWORD *)v152 = 136315138;
              v153 = (uint64_t)&v149[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
              swift_beginAccess();
              v154 = (uint64_t)v574;
              outlined init with copy of UUID?(v153, (uint64_t)v574);
              v155 = v541;
              outlined init with copy of UUID?(v154, v541);
              v156 = __swift_getEnumTagSinglePayload(v155, 1, v598);
              v157 = v593;
              if (v156 == 1)
              {
                v158 = 1819047278;
                v159 = 0xE400000000000000;
              }
              else
              {
                v347 = v592;
                v348 = v155;
                v349 = v598;
                (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v348, v598);
                ((void (*)(char *, char *, uint64_t))v596)(v556, v347, v349);
                v158 = String.init<A>(describing:)();
                v159 = v350;
                (*(void (**)(char *, uint64_t))(v157 + 8))(v347, v349);
              }
              outlined destroy of RPCOspreyConnectionProtocol?(v154, &demangling cache variable for type metadata for UUID?);
              v607 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v159, v608);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_246EC7000, v150, (os_log_type_t)v538, "Network Analytics: Event httpHeaderEvent emitted: %s", v152, 0xCu);
              v351 = v537;
              swift_arrayDestroy();
              MEMORY[0x24956E018](v351, -1, -1);
              MEMORY[0x24956E018](v152, -1, -1);

              v130 = v594;
              v128 = v595;
              v131 = (uint64_t)v588;
              v129 = (uint64_t)v580;
              goto LABEL_8;
            }

            v130 = v141;
          }
        }
LABEL_20:
        v160 = v598;
        ((void (*)(uint64_t, uint64_t, uint64_t))v596)(v133, v128, v598);
        __swift_storeEnumTagSinglePayload(v133, 0, 1, v160);
        v161 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_preparationSnapshotEvent];
        swift_beginAccess();
        v574 = v161;
        outlined init with copy of UUID?((uint64_t)v161, v132);
        v162 = v564;
        v163 = v564 + *(int *)(v130 + 48);
        outlined init with copy of UUID?(v133, v564);
        outlined init with copy of UUID?(v132, v163);
        if (__swift_getEnumTagSinglePayload(v162, 1, v160) == 1)
        {
          outlined destroy of RPCOspreyConnectionProtocol?(v132, &demangling cache variable for type metadata for UUID?);
          outlined destroy of RPCOspreyConnectionProtocol?(v133, &demangling cache variable for type metadata for UUID?);
          v164 = __swift_getEnumTagSinglePayload(v163, 1, v598);
          v165 = v593;
          if (v164 == 1)
          {
            outlined destroy of RPCOspreyConnectionProtocol?(v162, &demangling cache variable for type metadata for UUID?);
            v166 = (uint64_t)v584;
LABEL_28:
            v173 = type metadata accessor for NetworkAnalyticsEventMessage(0);
            v174 = *(void **)&v574[*(int *)(v173 + 20)];
            if (v174)
            {
              v175 = &v574[*(int *)(v173 + 24)];
              if ((v175[8] & 1) == 0)
              {
                v176 = v130;
                v177 = *(_QWORD *)v175;
                v178 = v576;
                swift_beginAccess();
                v179 = MEMORY[0x24956E090](v178);
                if (v179)
                {
                  v180 = (void *)v179;
                  v181 = *(void **)(v179 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                  v182 = v174;
                  swift_unknownObjectRetain();

                  objc_msgSend(v181, sel_emitMessage_timestamp_, v182, v177);
                  v166 = (uint64_t)v584;
                  v165 = v593;
                  swift_unknownObjectRelease();
                }
                if (one-time initialization token for siriNetwork != -1)
                  swift_once();
                v183 = type metadata accessor for Logger();
                __swift_project_value_buffer(v183, (uint64_t)static Logger.siriNetwork);
                v184 = v597;
                v185 = Logger.logObject.getter();
                v186 = static os_log_type_t.default.getter();
                v187 = os_log_type_enabled(v185, v186);
                v131 = (uint64_t)v588;
                if (v187)
                {
                  v188 = v165;
                  v189 = (uint8_t *)swift_slowAlloc();
                  v587 = (char *)swift_slowAlloc();
                  v607 = v587;
                  *(_DWORD *)v189 = 136315138;
                  v190 = (uint64_t)&v184[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                  swift_beginAccess();
                  v191 = v550;
                  outlined init with copy of UUID?(v190, v550);
                  v192 = v191;
                  v193 = v542;
                  outlined init with copy of UUID?(v192, v542);
                  if (__swift_getEnumTagSinglePayload(v193, 1, v598) == 1)
                  {
                    v194 = 1819047278;
                    v195 = 0xE400000000000000;
                  }
                  else
                  {
                    v352 = v188;
                    v353 = v592;
                    v354 = v193;
                    v355 = v598;
                    (*(void (**)(char *, uint64_t, uint64_t))(v188 + 32))(v592, v354, v598);
                    ((void (*)(char *, char *, uint64_t))v596)(v556, v353, v355);
                    v194 = String.init<A>(describing:)();
                    v195 = v356;
                    (*(void (**)(char *, uint64_t))(v352 + 8))(v353, v355);
                  }
                  outlined destroy of RPCOspreyConnectionProtocol?(v550, &demangling cache variable for type metadata for UUID?);
                  v606[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v194, v195, (uint64_t *)&v607);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_246EC7000, v185, v186, "Network Analytics: Event preparationSnapshotEvent emitted: %s", v189, 0xCu);
                  v357 = (uint64_t)v587;
                  swift_arrayDestroy();
                  MEMORY[0x24956E018](v357, -1, -1);
                  MEMORY[0x24956E018](v189, -1, -1);

                  v165 = v593;
                  v130 = v594;
                  v128 = v595;
                  v131 = (uint64_t)v588;
                  v129 = (uint64_t)v580;
                  goto LABEL_26;
                }

                v130 = v176;
              }
            }
LABEL_38:
            v196 = v598;
            ((void (*)(uint64_t, uint64_t, uint64_t))v596)(v129, v128, v598);
            __swift_storeEnumTagSinglePayload(v129, 0, 1, v196);
            v197 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_debugPreparationSnapshotEvent];
            swift_beginAccess();
            v587 = v197;
            outlined init with copy of UUID?((uint64_t)v197, v166);
            v198 = v565;
            v199 = v565 + *(int *)(v130 + 48);
            outlined init with copy of UUID?(v129, v565);
            outlined init with copy of UUID?(v166, v199);
            if (__swift_getEnumTagSinglePayload(v198, 1, v196) == 1)
            {
              outlined destroy of RPCOspreyConnectionProtocol?(v166, &demangling cache variable for type metadata for UUID?);
              outlined destroy of RPCOspreyConnectionProtocol?(v129, &demangling cache variable for type metadata for UUID?);
              if (__swift_getEnumTagSinglePayload(v199, 1, v598) == 1)
              {
                outlined destroy of RPCOspreyConnectionProtocol?(v198, &demangling cache variable for type metadata for UUID?);
                v200 = (uint64_t)v577;
LABEL_46:
                v207 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                v208 = *(void **)&v587[*(int *)(v207 + 20)];
                if (v208)
                {
                  v209 = &v587[*(int *)(v207 + 24)];
                  if ((v209[8] & 1) == 0)
                  {
                    v210 = v130;
                    v211 = *(_QWORD *)v209;
                    v212 = v576;
                    swift_beginAccess();
                    v213 = MEMORY[0x24956E090](v212);
                    v214 = v593;
                    if (v213)
                    {
                      v215 = (void *)v213;
                      v216 = *(void **)(v213 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                      v217 = v208;
                      swift_unknownObjectRetain();

                      objc_msgSend(v216, sel_emitMessage_timestamp_, v217, v211);
                      v214 = v593;
                      swift_unknownObjectRelease();
                    }
                    if (one-time initialization token for siriNetwork != -1)
                      swift_once();
                    v218 = type metadata accessor for Logger();
                    __swift_project_value_buffer(v218, (uint64_t)static Logger.siriNetwork);
                    v219 = v597;
                    v220 = Logger.logObject.getter();
                    v221 = static os_log_type_t.default.getter();
                    v222 = os_log_type_enabled(v220, v221);
                    v223 = (uint64_t)v540;
                    if (v222)
                    {
                      v224 = v214;
                      v225 = (uint8_t *)swift_slowAlloc();
                      v226 = swift_slowAlloc();
                      v606[0] = v226;
                      *(_DWORD *)v225 = 136315138;
                      v227 = (uint64_t)&v219[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                      swift_beginAccess();
                      outlined init with copy of UUID?(v227, v223);
                      v228 = v543;
                      outlined init with copy of UUID?(v223, v543);
                      if (__swift_getEnumTagSinglePayload(v228, 1, v598) == 1)
                      {
                        v229 = 1819047278;
                        v230 = 0xE400000000000000;
                      }
                      else
                      {
                        v358 = v224;
                        v359 = *(void (**)(char *, uint64_t, uint64_t))(v224 + 32);
                        v584 = (char *)v226;
                        v360 = v592;
                        v361 = v598;
                        v359(v592, v228, v598);
                        ((void (*)(char *, char *, uint64_t))v596)(v556, v360, v361);
                        v229 = String.init<A>(describing:)();
                        v230 = v362;
                        v363 = v360;
                        v226 = (uint64_t)v584;
                        v364 = v361;
                        v223 = (uint64_t)v540;
                        (*(void (**)(char *, uint64_t))(v358 + 8))(v363, v364);
                      }
                      outlined destroy of RPCOspreyConnectionProtocol?(v223, &demangling cache variable for type metadata for UUID?);
                      v605[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v229, v230, v606);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                      swift_bridgeObjectRelease();
                      _os_log_impl(&dword_246EC7000, v220, v221, "Network Analytics: Event debugPreparationSnapshotEvent emitted: %s", v225, 0xCu);
                      swift_arrayDestroy();
                      MEMORY[0x24956E018](v226, -1, -1);
                      MEMORY[0x24956E018](v225, -1, -1);

                      v130 = v594;
                      v131 = (uint64_t)v588;
                      goto LABEL_44;
                    }

                    v130 = v210;
                  }
                }
LABEL_56:
                v231 = (uint64_t)v566;
                v232 = v598;
                ((void (*)(char *, uint64_t, uint64_t))v596)(v566, v595, v598);
                __swift_storeEnumTagSinglePayload(v231, 0, 1, v232);
                v233 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_readySnapshotEvent];
                swift_beginAccess();
                v584 = v233;
                outlined init with copy of UUID?((uint64_t)v233, v200);
                v234 = v131 + *(int *)(v130 + 48);
                outlined init with copy of UUID?(v231, v131);
                outlined init with copy of UUID?(v200, v234);
                if (__swift_getEnumTagSinglePayload(v131, 1, v232) == 1)
                {
                  outlined destroy of RPCOspreyConnectionProtocol?(v200, &demangling cache variable for type metadata for UUID?);
                  outlined destroy of RPCOspreyConnectionProtocol?(v231, &demangling cache variable for type metadata for UUID?);
                  v235 = __swift_getEnumTagSinglePayload(v234, 1, v598);
                  v236 = (uint64_t)v581;
                  v237 = v593;
                  if (v235 == 1)
                  {
                    outlined destroy of RPCOspreyConnectionProtocol?(v131, &demangling cache variable for type metadata for UUID?);
                    v238 = (uint64_t)v579;
                    v239 = v595;
LABEL_64:
                    v251 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                    v252 = *(void **)&v584[*(int *)(v251 + 20)];
                    if (v252)
                    {
                      v253 = &v584[*(int *)(v251 + 24)];
                      if ((v253[8] & 1) == 0)
                      {
                        v254 = *(_QWORD *)v253;
                        v255 = v576;
                        swift_beginAccess();
                        v256 = MEMORY[0x24956E090](v255);
                        if (v256)
                        {
                          v257 = (void *)v256;
                          v258 = *(void **)(v256 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                          v259 = v252;
                          swift_unknownObjectRetain();

                          objc_msgSend(v258, sel_emitMessage_timestamp_, v259, v254);
                          v238 = (uint64_t)v579;
                          swift_unknownObjectRelease();
                        }
                        if (one-time initialization token for siriNetwork != -1)
                          swift_once();
                        v260 = type metadata accessor for Logger();
                        __swift_project_value_buffer(v260, (uint64_t)static Logger.siriNetwork);
                        v261 = v597;
                        v262 = Logger.logObject.getter();
                        v263 = static os_log_type_t.default.getter();
                        if (os_log_type_enabled(v262, v263))
                        {
                          v264 = v237;
                          v265 = (uint8_t *)swift_slowAlloc();
                          v266 = swift_slowAlloc();
                          v605[0] = v266;
                          *(_DWORD *)v265 = 136315138;
                          v267 = &v261[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                          swift_beginAccess();
                          v268 = (uint64_t)v267;
                          v269 = v551;
                          outlined init with copy of UUID?(v268, v551);
                          v270 = v269;
                          v271 = v544;
                          outlined init with copy of UUID?(v270, v544);
                          if (__swift_getEnumTagSinglePayload(v271, 1, v598) == 1)
                          {
                            v272 = 1819047278;
                            v273 = 0xE400000000000000;
                          }
                          else
                          {
                            v365 = v264;
                            v366 = *(void (**)(char *, uint64_t, uint64_t))(v264 + 32);
                            v367 = v592;
                            v588 = (char *)v266;
                            v368 = v598;
                            v366(v592, v271, v598);
                            ((void (*)(char *, char *, uint64_t))v596)(v556, v367, v368);
                            v272 = String.init<A>(describing:)();
                            v273 = v369;
                            v370 = v367;
                            v238 = (uint64_t)v579;
                            v371 = v368;
                            v266 = (uint64_t)v588;
                            (*(void (**)(char *, uint64_t))(v365 + 8))(v370, v371);
                          }
                          outlined destroy of RPCOspreyConnectionProtocol?(v551, &demangling cache variable for type metadata for UUID?);
                          v604[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v272, v273, v605);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();

                          swift_bridgeObjectRelease();
                          _os_log_impl(&dword_246EC7000, v262, v263, "Network Analytics: Event readySnapshotEvent emitted: %s", v265, 0xCu);
                          swift_arrayDestroy();
                          MEMORY[0x24956E018](v266, -1, -1);
                          MEMORY[0x24956E018](v265, -1, -1);

                          v236 = (uint64_t)v581;
                          goto LABEL_62;
                        }

                        v236 = (uint64_t)v581;
                      }
                    }
LABEL_74:
                    v274 = (uint64_t)v590;
                    v275 = v598;
                    ((void (*)(char *, uint64_t, uint64_t))v596)(v590, v239, v598);
                    __swift_storeEnumTagSinglePayload(v274, 0, 1, v275);
                    v276 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_debugReadySnapshotEvent];
                    swift_beginAccess();
                    outlined init with copy of UUID?((uint64_t)v276, v238);
                    v277 = v567;
                    v278 = v567 + *(int *)(v594 + 48);
                    outlined init with copy of UUID?(v274, v567);
                    outlined init with copy of UUID?(v238, v278);
                    v279 = __swift_getEnumTagSinglePayload(v277, 1, v275);
                    v583 = (uint64_t)v276;
                    if (v279 == 1)
                    {
                      outlined destroy of RPCOspreyConnectionProtocol?(v238, &demangling cache variable for type metadata for UUID?);
                      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v590, &demangling cache variable for type metadata for UUID?);
                      if (__swift_getEnumTagSinglePayload(v278, 1, v598) == 1)
                      {
                        outlined destroy of RPCOspreyConnectionProtocol?(v277, &demangling cache variable for type metadata for UUID?);
                        v280 = v594;
LABEL_82:
                        v287 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                        v288 = *(void **)&v276[*(int *)(v287 + 20)];
                        if (v288)
                        {
                          v289 = &v276[*(int *)(v287 + 24)];
                          if ((v289[8] & 1) == 0)
                          {
                            v290 = *(_QWORD *)v289;
                            v291 = v576;
                            swift_beginAccess();
                            v292 = MEMORY[0x24956E090](v291);
                            if (v292)
                            {
                              v293 = (void *)v292;
                              v294 = *(void **)(v292 + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                              v295 = v288;
                              swift_unknownObjectRetain();

                              objc_msgSend(v294, sel_emitMessage_timestamp_, v295, v290);
                              swift_unknownObjectRelease();
                            }
                            if (one-time initialization token for siriNetwork != -1)
                              swift_once();
                            v296 = type metadata accessor for Logger();
                            __swift_project_value_buffer(v296, (uint64_t)static Logger.siriNetwork);
                            v297 = v597;
                            v298 = Logger.logObject.getter();
                            v299 = static os_log_type_t.default.getter();
                            if (os_log_type_enabled(v298, v299))
                            {
                              v300 = (uint8_t *)swift_slowAlloc();
                              v301 = swift_slowAlloc();
                              v604[0] = v301;
                              *(_DWORD *)v300 = 136315138;
                              v302 = &v297[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                              swift_beginAccess();
                              v303 = (uint64_t)v302;
                              v304 = v552;
                              outlined init with copy of UUID?(v303, v552);
                              v305 = v304;
                              v306 = v545;
                              outlined init with copy of UUID?(v305, v545);
                              if (__swift_getEnumTagSinglePayload(v306, 1, v598) == 1)
                              {
                                v307 = 1819047278;
                                v308 = 0xE400000000000000;
                              }
                              else
                              {
                                v372 = v592;
                                v373 = v593;
                                v374 = *(void (**)(char *, uint64_t, uint64_t))(v593 + 32);
                                v590 = (char *)v301;
                                v375 = v598;
                                v374(v592, v306, v598);
                                ((void (*)(char *, char *, uint64_t))v596)(v556, v372, v375);
                                v307 = String.init<A>(describing:)();
                                v308 = v376;
                                v377 = v375;
                                v301 = (uint64_t)v590;
                                (*(void (**)(char *, uint64_t))(v373 + 8))(v372, v377);
                              }
                              outlined destroy of RPCOspreyConnectionProtocol?(v552, &demangling cache variable for type metadata for UUID?);
                              v603[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v307, v308, v604);
                              UnsafeMutableRawBufferPointer.copyMemory(from:)();

                              swift_bridgeObjectRelease();
                              _os_log_impl(&dword_246EC7000, v298, v299, "Network Analytics: Event debugReadySnapshotEvent emitted: %s", v300, 0xCu);
                              swift_arrayDestroy();
                              MEMORY[0x24956E018](v301, -1, -1);
                              MEMORY[0x24956E018](v300, -1, -1);

                              goto LABEL_80;
                            }

                          }
                        }
LABEL_92:
                        v309 = (uint64_t)v568;
                        v310 = v598;
                        ((void (*)(char *, uint64_t, uint64_t))v596)(v568, v595, v598);
                        __swift_storeEnumTagSinglePayload(v309, 0, 1, v310);
                        v311 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionSnapthotEvent];
                        swift_beginAccess();
                        v590 = v311;
                        v312 = (uint64_t)v591;
                        outlined init with copy of UUID?((uint64_t)v311, (uint64_t)v591);
                        v313 = v569;
                        v314 = v569 + *(int *)(v280 + 48);
                        outlined init with copy of UUID?(v309, v569);
                        outlined init with copy of UUID?(v312, v314);
                        if (__swift_getEnumTagSinglePayload(v313, 1, v310) == 1)
                        {
                          outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v591, &demangling cache variable for type metadata for UUID?);
                          outlined destroy of RPCOspreyConnectionProtocol?(v309, &demangling cache variable for type metadata for UUID?);
                          v315 = __swift_getEnumTagSinglePayload(v314, 1, v598);
                          v316 = (uint64_t)v582;
                          if (v315 == 1)
                          {
                            outlined destroy of RPCOspreyConnectionProtocol?(v313, &demangling cache variable for type metadata for UUID?);
LABEL_99:
                            v325 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                            v326 = *(void **)&v590[*(int *)(v325 + 20)];
                            if (v326)
                            {
                              v327 = &v590[*(int *)(v325 + 24)];
                              if ((v327[8] & 1) == 0)
                              {
                                v328 = v597;
                                v329 = *(_QWORD *)v327;
                                v330 = v576;
                                swift_beginAccess();
                                v331 = MEMORY[0x24956E090](v330);
                                if (v331)
                                {
                                  v332 = (void *)v331;
                                  v333 = *(void **)(v331
                                                  + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                  v334 = v326;
                                  swift_unknownObjectRetain();

                                  objc_msgSend(v333, sel_emitMessage_timestamp_, v334, v329);
                                  v316 = (uint64_t)v582;
                                  swift_unknownObjectRelease();
                                }
                                if (one-time initialization token for siriNetwork != -1)
                                  swift_once();
                                v335 = type metadata accessor for Logger();
                                __swift_project_value_buffer(v335, (uint64_t)static Logger.siriNetwork);
                                v336 = v328;
                                v337 = Logger.logObject.getter();
                                v338 = static os_log_type_t.default.getter();
                                if (os_log_type_enabled(v337, v338))
                                {
                                  v339 = (uint8_t *)swift_slowAlloc();
                                  v340 = swift_slowAlloc();
                                  v603[0] = v340;
                                  *(_DWORD *)v339 = 136315138;
                                  v341 = (uint64_t)v336 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
                                  swift_beginAccess();
                                  v342 = v553;
                                  outlined init with copy of UUID?(v341, v553);
                                  v343 = v342;
                                  v344 = v546;
                                  outlined init with copy of UUID?(v343, v546);
                                  if (__swift_getEnumTagSinglePayload(v344, 1, v598) == 1)
                                  {
                                    v345 = 1819047278;
                                    v346 = 0xE400000000000000;
                                  }
                                  else
                                  {
                                    v378 = v592;
                                    v379 = v593;
                                    v380 = v344;
                                    v381 = v340;
                                    v382 = v598;
                                    (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v380, v598);
                                    ((void (*)(char *, char *, uint64_t))v596)(v556, v378, v382);
                                    v383 = String.init<A>(describing:)();
                                    v384 = v379;
                                    v345 = v383;
                                    v346 = v385;
                                    v386 = v382;
                                    v340 = v381;
                                    (*(void (**)(char *, uint64_t))(v384 + 8))(v378, v386);
                                  }
                                  outlined destroy of RPCOspreyConnectionProtocol?(v553, &demangling cache variable for type metadata for UUID?);
                                  v602 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v345, v346, v603);
                                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                  swift_bridgeObjectRelease();
                                  _os_log_impl(&dword_246EC7000, v337, v338, "Network Analytics: Event sessionConnectionSnapthotEvent emitted: %s", v339, 0xCu);
                                  swift_arrayDestroy();
                                  MEMORY[0x24956E018](v340, -1, -1);
                                  MEMORY[0x24956E018](v339, -1, -1);

                                  v316 = (uint64_t)v582;
                                }
                                else
                                {

                                }
                              }
                            }
LABEL_121:
                            v387 = v585;
                            v388 = v595;
                            v389 = v598;
                            ((void (*)(uint64_t, uint64_t, uint64_t))v596)(v585, v595, v598);
                            __swift_storeEnumTagSinglePayload(v387, 0, 1, v389);
                            v390 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_debugSessionConnectionSnapthotEvent];
                            swift_beginAccess();
                            v591 = v390;
                            outlined init with copy of UUID?((uint64_t)v390, v316);
                            v391 = v570;
                            v392 = v570 + *(int *)(v594 + 48);
                            outlined init with copy of UUID?(v387, v570);
                            outlined init with copy of UUID?(v316, v392);
                            if (__swift_getEnumTagSinglePayload(v391, 1, v389) == 1)
                            {
                              outlined destroy of RPCOspreyConnectionProtocol?(v316, &demangling cache variable for type metadata for UUID?);
                              outlined destroy of RPCOspreyConnectionProtocol?(v387, &demangling cache variable for type metadata for UUID?);
                              if (__swift_getEnumTagSinglePayload(v392, 1, v598) == 1)
                              {
                                outlined destroy of RPCOspreyConnectionProtocol?(v391, &demangling cache variable for type metadata for UUID?);
LABEL_128:
                                v400 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                v401 = *(void **)&v591[*(int *)(v400 + 20)];
                                if (v401)
                                {
                                  v402 = &v591[*(int *)(v400 + 24)];
                                  if ((v402[8] & 1) == 0)
                                  {
                                    v403 = *(_QWORD *)v402;
                                    v404 = v576;
                                    swift_beginAccess();
                                    v405 = MEMORY[0x24956E090](v404);
                                    if (v405)
                                    {
                                      v406 = (void *)v405;
                                      v407 = *(void **)(v405
                                                      + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                      v408 = v401;
                                      swift_unknownObjectRetain();

                                      objc_msgSend(v407, sel_emitMessage_timestamp_, v408, v403);
                                      swift_unknownObjectRelease();
                                    }
                                    if (one-time initialization token for siriNetwork != -1)
                                      swift_once();
                                    v409 = type metadata accessor for Logger();
                                    __swift_project_value_buffer(v409, (uint64_t)static Logger.siriNetwork);
                                    v410 = v597;
                                    v411 = Logger.logObject.getter();
                                    v412 = static os_log_type_t.default.getter();
                                    if (os_log_type_enabled(v411, v412))
                                    {
                                      v413 = (uint8_t *)swift_slowAlloc();
                                      v588 = (char *)swift_slowAlloc();
                                      v602 = v588;
                                      *(_DWORD *)v413 = 136315138;
                                      v414 = (uint64_t)&v410[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                                      swift_beginAccess();
                                      v415 = v554;
                                      outlined init with copy of UUID?(v414, v554);
                                      v416 = v415;
                                      v417 = v547;
                                      outlined init with copy of UUID?(v416, v547);
                                      v418 = __swift_getEnumTagSinglePayload(v417, 1, v598);
                                      v419 = v593;
                                      if (v418 == 1)
                                      {
                                        v420 = 1819047278;
                                        v421 = 0xE400000000000000;
                                      }
                                      else
                                      {
                                        v422 = v592;
                                        v423 = v417;
                                        v424 = v412;
                                        v425 = v598;
                                        (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v423, v598);
                                        ((void (*)(char *, char *, uint64_t))v596)(v556, v422, v425);
                                        v420 = String.init<A>(describing:)();
                                        v421 = v426;
                                        v427 = v425;
                                        v412 = v424;
                                        (*(void (**)(char *, uint64_t))(v419 + 8))(v422, v427);
                                      }
                                      outlined destroy of RPCOspreyConnectionProtocol?(v554, &demangling cache variable for type metadata for UUID?);
                                      v601[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v420, v421, (uint64_t *)&v602);
                                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                      swift_bridgeObjectRelease();
                                      _os_log_impl(&dword_246EC7000, v411, v412, "Network Analytics: Event debugSessionConnectionSnapthotEvent emitted: %s", v413, 0xCu);
                                      v428 = v588;
                                      swift_arrayDestroy();
                                      MEMORY[0x24956E018](v428, -1, -1);
                                      MEMORY[0x24956E018](v413, -1, -1);

                                    }
                                    else
                                    {

                                    }
                                    v388 = v595;
                                  }
                                }
LABEL_141:
                                v429 = (uint64_t)v571;
                                v430 = v598;
                                ((void (*)(char *, uint64_t, uint64_t))v596)(v571, v388, v598);
                                __swift_storeEnumTagSinglePayload(v429, 0, 1, v430);
                                v431 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_sessionConnectionFailedEvent];
                                swift_beginAccess();
                                v588 = v431;
                                v432 = v586;
                                outlined init with copy of UUID?((uint64_t)v431, v586);
                                v433 = v572;
                                v434 = v572 + *(int *)(v594 + 48);
                                outlined init with copy of UUID?(v429, v572);
                                outlined init with copy of UUID?(v432, v434);
                                if (__swift_getEnumTagSinglePayload(v433, 1, v430) == 1)
                                {
                                  outlined destroy of RPCOspreyConnectionProtocol?(v432, &demangling cache variable for type metadata for UUID?);
                                  outlined destroy of RPCOspreyConnectionProtocol?(v429, &demangling cache variable for type metadata for UUID?);
                                  v435 = __swift_getEnumTagSinglePayload(v434, 1, v598);
                                  v436 = (uint64_t)v589;
                                  v437 = v593;
                                  if (v435 == 1)
                                  {
                                    outlined destroy of RPCOspreyConnectionProtocol?(v433, &demangling cache variable for type metadata for UUID?);
                                    v438 = (uint64_t)v578;
                                    v439 = (uint64_t)v563;
LABEL_148:
                                    v447 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                    v448 = *(void **)&v588[*(int *)(v447 + 20)];
                                    if (v448)
                                    {
                                      v449 = &v588[*(int *)(v447 + 24)];
                                      if ((v449[8] & 1) == 0)
                                      {
                                        v450 = *(_QWORD *)v449;
                                        v451 = v576;
                                        swift_beginAccess();
                                        v452 = MEMORY[0x24956E090](v451);
                                        if (v452)
                                        {
                                          v453 = (void *)v452;
                                          v454 = *(void **)(v452
                                                          + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                          v455 = v448;
                                          swift_unknownObjectRetain();

                                          objc_msgSend(v454, sel_emitMessage_timestamp_, v455, v450);
                                          v436 = (uint64_t)v589;
                                          swift_unknownObjectRelease();
                                        }
                                        if (one-time initialization token for siriNetwork != -1)
                                          swift_once();
                                        v456 = type metadata accessor for Logger();
                                        __swift_project_value_buffer(v456, (uint64_t)static Logger.siriNetwork);
                                        v457 = v597;
                                        v458 = Logger.logObject.getter();
                                        v459 = static os_log_type_t.default.getter();
                                        if (os_log_type_enabled(v458, (os_log_type_t)v459))
                                        {
                                          LODWORD(v586) = v459;
                                          v460 = (uint8_t *)swift_slowAlloc();
                                          v461 = swift_slowAlloc();
                                          v601[0] = v461;
                                          *(_DWORD *)v460 = 136315138;
                                          v462 = (uint64_t)&v457[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                                          swift_beginAccess();
                                          v463 = v555;
                                          outlined init with copy of UUID?(v462, v555);
                                          v464 = v548;
                                          outlined init with copy of UUID?(v463, v548);
                                          if (__swift_getEnumTagSinglePayload(v464, 1, v598) == 1)
                                          {
                                            v465 = 1819047278;
                                            v466 = 0xE400000000000000;
                                          }
                                          else
                                          {
                                            v467 = v592;
                                            v468 = v464;
                                            v469 = v458;
                                            v470 = v598;
                                            (*(void (**)(char *, uint64_t, uint64_t))(v437 + 32))(v592, v468, v598);
                                            ((void (*)(char *, char *, uint64_t))v596)(v556, v467, v470);
                                            v465 = String.init<A>(describing:)();
                                            v471 = v437;
                                            v466 = v472;
                                            v473 = v470;
                                            v458 = v469;
                                            (*(void (**)(char *, uint64_t))(v471 + 8))(v467, v473);
                                          }
                                          outlined destroy of RPCOspreyConnectionProtocol?(v555, &demangling cache variable for type metadata for UUID?);
                                          v600[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v465, v466, v601);
                                          UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                          swift_bridgeObjectRelease();
                                          _os_log_impl(&dword_246EC7000, v458, (os_log_type_t)v586, "Network Analytics: Event sessionConnectionFailedEvent emitted: %s", v460, 0xCu);
                                          swift_arrayDestroy();
                                          MEMORY[0x24956E018](v461, -1, -1);
                                          MEMORY[0x24956E018](v460, -1, -1);

                                          v437 = v593;
                                          v436 = (uint64_t)v589;
                                          v438 = (uint64_t)v578;
                                        }
                                        else
                                        {

                                        }
                                      }
                                    }
LABEL_160:
                                    v474 = (uint64_t)v573;
                                    v475 = v598;
                                    v596();
                                    __swift_storeEnumTagSinglePayload(v474, 0, 1, v475);
                                    v476 = v597;
                                    v477 = &v597[OBJC_IVAR___SNNetworkAnalyticsInternal_peerConnectionFailedEvent];
                                    swift_beginAccess();
                                    outlined init with copy of UUID?((uint64_t)v477, v439);
                                    v478 = v436 + *(int *)(v594 + 48);
                                    outlined init with copy of UUID?(v474, v436);
                                    outlined init with copy of UUID?(v439, v478);
                                    if (__swift_getEnumTagSinglePayload(v436, 1, v475) == 1)
                                    {
                                      outlined destroy of RPCOspreyConnectionProtocol?(v439, &demangling cache variable for type metadata for UUID?);
                                      v436 = (uint64_t)v589;
                                      outlined destroy of RPCOspreyConnectionProtocol?(v474, &demangling cache variable for type metadata for UUID?);
                                      if (__swift_getEnumTagSinglePayload(v478, 1, v598) == 1)
                                      {
                                        outlined destroy of RPCOspreyConnectionProtocol?(v436, &demangling cache variable for type metadata for UUID?);
LABEL_167:
                                        v488 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                        v489 = *(void **)&v477[*(int *)(v488 + 20)];
                                        if (v489)
                                        {
                                          v490 = &v477[*(int *)(v488 + 24)];
                                          if ((v490[8] & 1) == 0)
                                          {
                                            v491 = *(_QWORD *)v490;
                                            v492 = v576;
                                            swift_beginAccess();
                                            v493 = MEMORY[0x24956E090](v492);
                                            if (v493)
                                            {
                                              v494 = (void *)v493;
                                              v495 = *(void **)(v493
                                                              + OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream);
                                              v496 = v489;
                                              swift_unknownObjectRetain();

                                              objc_msgSend(v495, sel_emitMessage_timestamp_, v496, v491);
                                              v476 = v597;
                                              swift_unknownObjectRelease();
                                            }
                                            if (one-time initialization token for siriNetwork != -1)
                                              swift_once();
                                            v497 = type metadata accessor for Logger();
                                            __swift_project_value_buffer(v497, (uint64_t)static Logger.siriNetwork);
                                            v498 = (char *)v476;
                                            v499 = Logger.logObject.getter();
                                            v500 = static os_log_type_t.default.getter();
                                            v501 = os_log_type_enabled(v499, v500);
                                            v502 = v593;
                                            if (v501)
                                            {
                                              v503 = (uint8_t *)swift_slowAlloc();
                                              v595 = swift_slowAlloc();
                                              v600[0] = v595;
                                              *(_DWORD *)v503 = 136315138;
                                              v504 = &v498[OBJC_IVAR___SNNetworkAnalyticsInternal_netId];
                                              swift_beginAccess();
                                              v505 = (uint64_t)v504;
                                              v506 = (uint64_t)v539;
                                              outlined init with copy of UUID?(v505, (uint64_t)v539);
                                              v507 = v506;
                                              v508 = v549;
                                              outlined init with copy of UUID?(v507, v549);
                                              if (__swift_getEnumTagSinglePayload(v508, 1, v598) == 1)
                                              {
                                                v509 = 1819047278;
                                                v510 = 0xE400000000000000;
                                              }
                                              else
                                              {
                                                v511 = v592;
                                                v512 = v598;
                                                (*(void (**)(char *, uint64_t, uint64_t))(v502 + 32))(v592, v508, v598);
                                                ((void (*)(char *, char *, uint64_t))v596)(v556, v511, v512);
                                                v509 = String.init<A>(describing:)();
                                                v513 = v502;
                                                v510 = v514;
                                                v515 = v511;
                                                v476 = v597;
                                                (*(void (**)(char *, uint64_t))(v513 + 8))(v515, v512);
                                              }
                                              outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v539, &demangling cache variable for type metadata for UUID?);
                                              v599 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v509, v510, v600);
                                              UnsafeMutableRawBufferPointer.copyMemory(from:)();

                                              swift_bridgeObjectRelease();
                                              _os_log_impl(&dword_246EC7000, v499, v500, "Network Analytics: Event peerConnectionFailedEvent emitted: %s", v503, 0xCu);
                                              v516 = v595;
                                              swift_arrayDestroy();
                                              MEMORY[0x24956E018](v516, -1, -1);
                                              MEMORY[0x24956E018](v503, -1, -1);

                                            }
                                            else
                                            {

                                            }
                                          }
                                        }
                                        goto LABEL_179;
                                      }
                                    }
                                    else
                                    {
                                      outlined init with copy of UUID?(v436, v438);
                                      if (__swift_getEnumTagSinglePayload(v478, 1, v598) != 1)
                                      {
                                        v479 = *(void (**)(char *, uint64_t, uint64_t))(v437 + 32);
                                        v480 = v437;
                                        v481 = v438;
                                        v482 = v439;
                                        v483 = v436;
                                        v484 = v592;
                                        v485 = v598;
                                        v479(v592, v478, v598);
                                        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                                        v486 = dispatch thunk of static Equatable.== infix(_:_:)();
                                        v487 = *(void (**)(char *, uint64_t))(v480 + 8);
                                        v487(v484, v485);
                                        outlined destroy of RPCOspreyConnectionProtocol?(v482, &demangling cache variable for type metadata for UUID?);
                                        outlined destroy of RPCOspreyConnectionProtocol?(v474, &demangling cache variable for type metadata for UUID?);
                                        v487((char *)v481, v485);
                                        v476 = v597;
                                        outlined destroy of RPCOspreyConnectionProtocol?(v483, &demangling cache variable for type metadata for UUID?);
                                        if ((v486 & 1) != 0)
                                          goto LABEL_167;
LABEL_179:
                                        v517 = type metadata accessor for NetworkAnalyticsEventMessage(0);
                                        v518 = *(int *)(v517 + 20);
                                        v519 = *(void **)(v575 + v518);
                                        *(_QWORD *)(v575 + v518) = 0;

                                        v520 = *(int *)(v517 + 20);
                                        v521 = *(void **)&v574[v520];
                                        *(_QWORD *)&v574[v520] = 0;

                                        v522 = *(int *)(v517 + 20);
                                        v523 = *(void **)&v587[v522];
                                        *(_QWORD *)&v587[v522] = 0;

                                        v524 = *(int *)(v517 + 20);
                                        v525 = *(void **)&v584[v524];
                                        *(_QWORD *)&v584[v524] = 0;

                                        v526 = *(int *)(v517 + 20);
                                        v527 = *(void **)(v583 + v526);
                                        *(_QWORD *)(v583 + v526) = 0;

                                        v528 = *(int *)(v517 + 20);
                                        v529 = *(void **)&v590[v528];
                                        *(_QWORD *)&v590[v528] = 0;

                                        v530 = *(int *)(v517 + 20);
                                        v531 = *(void **)&v591[v530];
                                        *(_QWORD *)&v591[v530] = 0;

                                        v532 = *(int *)(v517 + 20);
                                        v533 = *(void **)&v588[v532];
                                        *(_QWORD *)&v588[v532] = 0;

                                        v534 = *(int *)(v517 + 20);
                                        v535 = *(void **)&v477[v534];
                                        *(_QWORD *)&v477[v534] = 0;

                                        return;
                                      }
                                      outlined destroy of RPCOspreyConnectionProtocol?(v439, &demangling cache variable for type metadata for UUID?);
                                      outlined destroy of RPCOspreyConnectionProtocol?(v474, &demangling cache variable for type metadata for UUID?);
                                      (*(void (**)(uint64_t, uint64_t))(v437 + 8))(v438, v598);
                                    }
                                    outlined destroy of RPCOspreyConnectionProtocol?(v436, &demangling cache variable for type metadata for (UUID?, UUID?));
                                    goto LABEL_179;
                                  }
                                }
                                else
                                {
                                  v440 = v562;
                                  outlined init with copy of UUID?(v433, v562);
                                  v441 = __swift_getEnumTagSinglePayload(v434, 1, v598);
                                  v437 = v593;
                                  if (v441 != 1)
                                  {
                                    v442 = v592;
                                    v443 = v598;
                                    (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v434, v598);
                                    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                                    v444 = dispatch thunk of static Equatable.== infix(_:_:)();
                                    v445 = v429;
                                    v446 = *(void (**)(char *, uint64_t))(v437 + 8);
                                    v446(v442, v443);
                                    outlined destroy of RPCOspreyConnectionProtocol?(v586, &demangling cache variable for type metadata for UUID?);
                                    outlined destroy of RPCOspreyConnectionProtocol?(v445, &demangling cache variable for type metadata for UUID?);
                                    v446((char *)v440, v443);
                                    outlined destroy of RPCOspreyConnectionProtocol?(v433, &demangling cache variable for type metadata for UUID?);
                                    v436 = (uint64_t)v589;
                                    v438 = (uint64_t)v578;
                                    v439 = (uint64_t)v563;
                                    if ((v444 & 1) == 0)
                                      goto LABEL_160;
                                    goto LABEL_148;
                                  }
                                  outlined destroy of RPCOspreyConnectionProtocol?(v586, &demangling cache variable for type metadata for UUID?);
                                  outlined destroy of RPCOspreyConnectionProtocol?(v429, &demangling cache variable for type metadata for UUID?);
                                  (*(void (**)(uint64_t, uint64_t))(v437 + 8))(v440, v598);
                                  v436 = (uint64_t)v589;
                                }
                                outlined destroy of RPCOspreyConnectionProtocol?(v433, &demangling cache variable for type metadata for (UUID?, UUID?));
                                v438 = (uint64_t)v578;
                                v439 = (uint64_t)v563;
                                goto LABEL_160;
                              }
                            }
                            else
                            {
                              v393 = v561;
                              outlined init with copy of UUID?(v391, v561);
                              if (__swift_getEnumTagSinglePayload(v392, 1, v598) != 1)
                              {
                                v395 = v592;
                                v394 = v593;
                                v396 = v598;
                                (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v392, v598);
                                lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                                v397 = dispatch thunk of static Equatable.== infix(_:_:)();
                                v398 = v393;
                                v399 = *(void (**)(char *, uint64_t))(v394 + 8);
                                v399(v395, v396);
                                outlined destroy of RPCOspreyConnectionProtocol?(v316, &demangling cache variable for type metadata for UUID?);
                                outlined destroy of RPCOspreyConnectionProtocol?(v585, &demangling cache variable for type metadata for UUID?);
                                v399((char *)v398, v396);
                                v388 = v595;
                                outlined destroy of RPCOspreyConnectionProtocol?(v391, &demangling cache variable for type metadata for UUID?);
                                if ((v397 & 1) == 0)
                                  goto LABEL_141;
                                goto LABEL_128;
                              }
                              outlined destroy of RPCOspreyConnectionProtocol?(v316, &demangling cache variable for type metadata for UUID?);
                              outlined destroy of RPCOspreyConnectionProtocol?(v585, &demangling cache variable for type metadata for UUID?);
                              (*(void (**)(uint64_t, uint64_t))(v593 + 8))(v393, v598);
                            }
                            outlined destroy of RPCOspreyConnectionProtocol?(v391, &demangling cache variable for type metadata for (UUID?, UUID?));
                            goto LABEL_141;
                          }
                        }
                        else
                        {
                          v317 = v560;
                          outlined init with copy of UUID?(v313, v560);
                          if (__swift_getEnumTagSinglePayload(v314, 1, v598) != 1)
                          {
                            v318 = v598;
                            v319 = v592;
                            v320 = v593;
                            (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v314, v598);
                            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                            v321 = dispatch thunk of static Equatable.== infix(_:_:)();
                            v322 = (uint64_t)v591;
                            v323 = v309;
                            v324 = *(void (**)(char *, uint64_t))(v320 + 8);
                            v324(v319, v318);
                            outlined destroy of RPCOspreyConnectionProtocol?(v322, &demangling cache variable for type metadata for UUID?);
                            outlined destroy of RPCOspreyConnectionProtocol?(v323, &demangling cache variable for type metadata for UUID?);
                            v324((char *)v317, v318);
                            outlined destroy of RPCOspreyConnectionProtocol?(v313, &demangling cache variable for type metadata for UUID?);
                            v316 = (uint64_t)v582;
                            if ((v321 & 1) == 0)
                              goto LABEL_121;
                            goto LABEL_99;
                          }
                          outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v591, &demangling cache variable for type metadata for UUID?);
                          outlined destroy of RPCOspreyConnectionProtocol?(v309, &demangling cache variable for type metadata for UUID?);
                          (*(void (**)(uint64_t, uint64_t))(v593 + 8))(v317, v598);
                          v316 = (uint64_t)v582;
                        }
                        outlined destroy of RPCOspreyConnectionProtocol?(v313, &demangling cache variable for type metadata for (UUID?, UUID?));
                        goto LABEL_121;
                      }
                    }
                    else
                    {
                      outlined init with copy of UUID?(v277, v236);
                      if (__swift_getEnumTagSinglePayload(v278, 1, v598) != 1)
                      {
                        v281 = v593;
                        v282 = v236;
                        v283 = v592;
                        v284 = v598;
                        (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v278, v598);
                        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                        v285 = dispatch thunk of static Equatable.== infix(_:_:)();
                        v286 = *(void (**)(char *, uint64_t))(v281 + 8);
                        v286(v283, v284);
                        outlined destroy of RPCOspreyConnectionProtocol?(v238, &demangling cache variable for type metadata for UUID?);
                        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v590, &demangling cache variable for type metadata for UUID?);
                        v286((char *)v282, v284);
                        v280 = v594;
                        outlined destroy of RPCOspreyConnectionProtocol?(v277, &demangling cache variable for type metadata for UUID?);
                        if ((v285 & 1) == 0)
                          goto LABEL_92;
                        goto LABEL_82;
                      }
                      outlined destroy of RPCOspreyConnectionProtocol?(v238, &demangling cache variable for type metadata for UUID?);
                      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v590, &demangling cache variable for type metadata for UUID?);
                      (*(void (**)(uint64_t, uint64_t))(v593 + 8))(v236, v598);
                    }
                    outlined destroy of RPCOspreyConnectionProtocol?(v277, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_80:
                    v280 = v594;
                    goto LABEL_92;
                  }
                }
                else
                {
                  v240 = v559;
                  outlined init with copy of UUID?(v131, v559);
                  v241 = __swift_getEnumTagSinglePayload(v234, 1, v598);
                  v242 = v593;
                  if (v241 != 1)
                  {
                    v243 = v592;
                    v244 = v234;
                    v245 = v598;
                    (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v244, v598);
                    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                    v246 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v247 = v131;
                    v248 = v240;
                    v249 = *(void (**)(char *, uint64_t))(v593 + 8);
                    v249(v243, v245);
                    outlined destroy of RPCOspreyConnectionProtocol?(v200, &demangling cache variable for type metadata for UUID?);
                    outlined destroy of RPCOspreyConnectionProtocol?(v231, &demangling cache variable for type metadata for UUID?);
                    v249((char *)v248, v245);
                    v239 = v595;
                    v250 = v247;
                    v237 = v593;
                    outlined destroy of RPCOspreyConnectionProtocol?(v250, &demangling cache variable for type metadata for UUID?);
                    v236 = (uint64_t)v581;
                    v238 = (uint64_t)v579;
                    if ((v246 & 1) == 0)
                      goto LABEL_74;
                    goto LABEL_64;
                  }
                  outlined destroy of RPCOspreyConnectionProtocol?(v200, &demangling cache variable for type metadata for UUID?);
                  outlined destroy of RPCOspreyConnectionProtocol?(v231, &demangling cache variable for type metadata for UUID?);
                  (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v240, v598);
                  v236 = (uint64_t)v581;
                }
                outlined destroy of RPCOspreyConnectionProtocol?(v131, &demangling cache variable for type metadata for (UUID?, UUID?));
                v238 = (uint64_t)v579;
LABEL_62:
                v239 = v595;
                goto LABEL_74;
              }
            }
            else
            {
              v201 = v558;
              outlined init with copy of UUID?(v198, v558);
              if (__swift_getEnumTagSinglePayload(v199, 1, v598) != 1)
              {
                v202 = v592;
                v203 = v129;
                v204 = v201;
                v205 = v598;
                (*(void (**)(char *, uint64_t, uint64_t))(v165 + 32))(v592, v199, v598);
                lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
                LODWORD(v583) = dispatch thunk of static Equatable.== infix(_:_:)();
                v206 = *(void (**)(char *, uint64_t))(v165 + 8);
                v206(v202, v205);
                outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v584, &demangling cache variable for type metadata for UUID?);
                outlined destroy of RPCOspreyConnectionProtocol?(v203, &demangling cache variable for type metadata for UUID?);
                v206((char *)v204, v205);
                v130 = v594;
                outlined destroy of RPCOspreyConnectionProtocol?(v198, &demangling cache variable for type metadata for UUID?);
                v200 = (uint64_t)v577;
                if ((v583 & 1) == 0)
                  goto LABEL_56;
                goto LABEL_46;
              }
              outlined destroy of RPCOspreyConnectionProtocol?(v166, &demangling cache variable for type metadata for UUID?);
              outlined destroy of RPCOspreyConnectionProtocol?(v129, &demangling cache variable for type metadata for UUID?);
              (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v201, v598);
            }
            outlined destroy of RPCOspreyConnectionProtocol?(v198, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_44:
            v200 = (uint64_t)v577;
            goto LABEL_56;
          }
        }
        else
        {
          v167 = v557;
          outlined init with copy of UUID?(v162, v557);
          v168 = __swift_getEnumTagSinglePayload(v163, 1, v598);
          v165 = v593;
          if (v168 != 1)
          {
            v169 = v592;
            v170 = v167;
            v171 = v598;
            (*(void (**)(char *, uint64_t, uint64_t))(v593 + 32))(v592, v163, v598);
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
            LODWORD(v541) = dispatch thunk of static Equatable.== infix(_:_:)();
            v172 = *(void (**)(char *, uint64_t))(v165 + 8);
            v172(v169, v171);
            outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v587, &demangling cache variable for type metadata for UUID?);
            outlined destroy of RPCOspreyConnectionProtocol?(v583, &demangling cache variable for type metadata for UUID?);
            v172((char *)v170, v171);
            v131 = (uint64_t)v588;
            v130 = v594;
            outlined destroy of RPCOspreyConnectionProtocol?(v162, &demangling cache variable for type metadata for UUID?);
            v166 = (uint64_t)v584;
            if ((v541 & 1) == 0)
              goto LABEL_38;
            goto LABEL_28;
          }
          outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v587, &demangling cache variable for type metadata for UUID?);
          outlined destroy of RPCOspreyConnectionProtocol?(v133, &demangling cache variable for type metadata for UUID?);
          (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v167, v598);
        }
        outlined destroy of RPCOspreyConnectionProtocol?(v162, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_26:
        v166 = (uint64_t)v584;
        goto LABEL_38;
      }
    }
    else
    {
      outlined init with copy of UUID?((uint64_t)v25, (uint64_t)v115);
      if (__swift_getEnumTagSinglePayload(v125, 1, v598) != 1)
      {
        v134 = v592;
        v135 = v598;
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v592, v125, v598);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v136 = dispatch thunk of static Equatable.== infix(_:_:)();
        v137 = *(void (**)(char *, uint64_t))(v3 + 8);
        v137(v134, v135);
        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v118, &demangling cache variable for type metadata for UUID?);
        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v120, &demangling cache variable for type metadata for UUID?);
        v137(v115, v135);
        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
        v130 = v594;
        v128 = v595;
        v132 = (uint64_t)v587;
        v131 = (uint64_t)v588;
        v129 = (uint64_t)v580;
        v133 = v583;
        if ((v136 & 1) == 0)
          goto LABEL_20;
        goto LABEL_10;
      }
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v118, &demangling cache variable for type metadata for UUID?);
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v120, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v115, v598);
      v128 = v595;
      v129 = (uint64_t)v580;
    }
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v25, &demangling cache variable for type metadata for (UUID?, UUID?));
    v130 = v594;
    v131 = (uint64_t)v588;
LABEL_8:
    v133 = v583;
    v132 = (uint64_t)v587;
    goto LABEL_20;
  }
}

Swift::Void __swiftcall NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  OUTLINED_FUNCTION_19();
  v2 = v0;
  OUTLINED_FUNCTION_18();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_46_2();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_44_2();
  v7 = *(void **)(v2 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_73_1();
  v8 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v6;
  OUTLINED_FUNCTION_34_3();
  v9 = v7;
  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v3, MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_3_10();
}

void sub_246F05A44()
{
  void *v0;

  OUTLINED_FUNCTION_40_2();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  void *v42;
  uint8_t *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  void (*v48)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  void (*v53)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  BOOL v64;
  id v65;
  uint8_t *v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  id v70;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(_BYTE *, uint64_t);
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  void (*v84)(_BYTE *, uint64_t);
  uint64_t v85;
  _BYTE *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(_BYTE *, uint64_t);
  void (*v94)(_BYTE *, uint64_t);
  void *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  void (*v100)(_BYTE *, uint64_t);
  _BYTE v101[4];
  int v102;
  void (*v103)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v104;
  char *v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];
  uint64_t v117[3];

  v107 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v101[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v108 = &v101[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24BDAC7A8](v7);
  v112 = &v101[-v10];
  v11 = MEMORY[0x24BDAC7A8](v9);
  v111 = &v101[-v12];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = &v101[-v14];
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = &v101[-v17];
  MEMORY[0x24BDAC7A8](v16);
  v20 = &v101[-v19];
  v21 = type metadata accessor for UUID();
  v114 = *(_QWORD *)(v21 - 8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v110 = &v101[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = &v101[-v25];
  v27 = MEMORY[0x24BDAC7A8](v24);
  v109 = &v101[-v28];
  v29 = MEMORY[0x24BDAC7A8](v27);
  v31 = &v101[-v30];
  v32 = MEMORY[0x24BDAC7A8](v29);
  v34 = &v101[-v33];
  MEMORY[0x24BDAC7A8](v32);
  v113 = &v101[-v35];
  swift_beginAccess();
  v36 = MEMORY[0x24956E090](a1 + 16);
  if (!v36)
    return;
  v106 = v26;
  v37 = (char *)v36;
  v38 = v36 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
  swift_beginAccess();
  outlined init with copy of UUID?(v38, (uint64_t)v20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21) == 1)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.siriNetwork);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.default.getter();
    v42 = v37;
    if (os_log_type_enabled(v40, v41))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_246EC7000, v40, v41, "Network Analytics: Event link. No netId generated", v43, 2u);
      MEMORY[0x24956E018](v43, -1, -1);
    }

    return;
  }
  v104 = v31;
  v45 = v113;
  v44 = v114;
  v103 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v114 + 32);
  v103(v113, v20, v21);
  v105 = v37;
  v46 = (uint64_t)&v37[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink];
  swift_beginAccess();
  outlined init with copy of UUID?(v46, (uint64_t)v18);
  v47 = v45;
  v48 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16);
  v48(v15, v47, v21);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v21);
  v49 = (uint64_t)&v5[*(int *)(v3 + 48)];
  outlined init with copy of UUID?((uint64_t)v18, (uint64_t)v5);
  outlined init with copy of UUID?((uint64_t)v15, v49);
  v50 = v46;
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v21) == 1)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    v51 = v21;
    if (__swift_getEnumTagSinglePayload(v49, 1, v21) == 1)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
      v52 = v113;
      v53 = v48;
LABEL_28:
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v85 = type metadata accessor for Logger();
      __swift_project_value_buffer(v85, (uint64_t)static Logger.siriNetwork);
      v86 = v110;
      v53(v110, v52, v51);
      v87 = Logger.logObject.getter();
      v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc();
        v90 = swift_slowAlloc();
        v117[0] = v90;
        *(_DWORD *)v89 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v91 = dispatch thunk of CustomStringConvertible.description.getter();
        v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v93 = *(void (**)(_BYTE *, uint64_t))(v114 + 8);
        v93(v86, v51);
        _os_log_impl(&dword_246EC7000, v87, v88, "Network Analytics: Event link. Request Link already sent for netId: %s", v89, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v90, -1, -1);
        MEMORY[0x24956E018](v89, -1, -1);

        v93(v52, v51);
        return;
      }

      v94 = *(void (**)(_BYTE *, uint64_t))(v114 + 8);
      v94(v86, v51);
      goto LABEL_38;
    }
    goto LABEL_13;
  }
  v54 = v111;
  outlined init with copy of UUID?((uint64_t)v5, (uint64_t)v111);
  if (__swift_getEnumTagSinglePayload(v49, 1, v21) == 1)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(_BYTE *, uint64_t))(v114 + 8))(v54, v21);
    v51 = v21;
LABEL_13:
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v5, &demangling cache variable for type metadata for (UUID?, UUID?));
    v52 = v113;
    v55 = v104;
    v56 = v106;
    v53 = v48;
    goto LABEL_14;
  }
  v103(v34, (_BYTE *)v49, v21);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
  v102 = dispatch thunk of static Equatable.== infix(_:_:)();
  v84 = *(void (**)(_BYTE *, uint64_t))(v114 + 8);
  v84(v34, v21);
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
  v84(v54, v21);
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  v51 = v21;
  v52 = v113;
  v55 = v104;
  v56 = v106;
  v53 = v48;
  if ((v102 & 1) != 0)
    goto LABEL_28;
LABEL_14:
  v57 = v105;
  v58 = &v105[OBJC_IVAR___SNNetworkAnalyticsInternal_orchestratorRequestId];
  swift_beginAccess();
  v59 = (uint64_t)v58;
  v60 = v112;
  outlined init with copy of UUID?(v59, (uint64_t)v112);
  if (__swift_getEnumTagSinglePayload((uint64_t)v60, 1, v51) != 1)
  {
    v103(v55, v60, v51);
    if (v57[OBJC_IVAR___SNNetworkAnalyticsInternal_isConnectionActive] == 1)
    {
      v67 = (uint64_t)v108;
      v53(v108, v52, v51);
      __swift_storeEnumTagSinglePayload(v67, 0, 1, v51);
      v68 = NetworkAnalytics.createRequestLinkInfo(from:component:)(v67, 18);
      outlined destroy of RPCOspreyConnectionProtocol?(v67, &demangling cache variable for type metadata for UUID?);
      v53((_BYTE *)v67, v55, v51);
      __swift_storeEnumTagSinglePayload(v67, 0, 1, v51);
      v69 = NetworkAnalytics.createRequestLinkInfo(from:component:)(v67, 1);
      outlined destroy of RPCOspreyConnectionProtocol?(v67, &demangling cache variable for type metadata for UUID?);
      v70 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE95B60]), sel_init);
      if (v70)
      {
        v71 = v70;
        objc_msgSend(v70, sel_setSource_, v68);
        objc_msgSend(v71, sel_setTarget_, v69);
        objc_msgSend(*(id *)&v105[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream], sel_emitMessage_timestamp_, v71, v107);

      }
      v111 = v69;
      v112 = v68;
      v53((_BYTE *)v67, v52, v51);
      __swift_storeEnumTagSinglePayload(v67, 0, 1, v51);
      swift_beginAccess();
      outlined assign with take of UUID?(v67, v50);
      swift_endAccess();
      v72 = v109;
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v73 = type metadata accessor for Logger();
      __swift_project_value_buffer(v73, (uint64_t)static Logger.siriNetwork);
      v53(v72, v52, v51);
      v53(v56, v55, v51);
      v74 = v56;
      v75 = Logger.logObject.getter();
      v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        v77 = swift_slowAlloc();
        v110 = (_BYTE *)swift_slowAlloc();
        v116[0] = (uint64_t)v110;
        *(_DWORD *)v77 = 136315394;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v78 = dispatch thunk of CustomStringConvertible.description.getter();
        v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v80 = *(void (**)(_BYTE *, uint64_t))(v114 + 8);
        v80(v72, v51);
        *(_WORD *)(v77 + 12) = 2080;
        v81 = dispatch thunk of CustomStringConvertible.description.getter();
        v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v80(v74, v51);
        _os_log_impl(&dword_246EC7000, v75, v76, "Network Analytics: Event link emitted. netId: %s, orchestratorRequestId: %s", (uint8_t *)v77, 0x16u);
        v83 = v110;
        swift_arrayDestroy();
        MEMORY[0x24956E018](v83, -1, -1);
        MEMORY[0x24956E018](v77, -1, -1);
      }
      else
      {
        v100 = *(void (**)(_BYTE *, uint64_t))(v114 + 8);
        v100(v72, v51);
        v100(v74, v51);
      }

      NetworkAnalytics.emitAllCachedMessagesFor(_:)();
    }
    v95 = v57;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v96 = type metadata accessor for Logger();
    __swift_project_value_buffer(v96, (uint64_t)static Logger.siriNetwork);
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v99 = 0;
      _os_log_impl(&dword_246EC7000, v97, v98, "Network Analytics: Event link. No active connection", v99, 2u);
      MEMORY[0x24956E018](v99, -1, -1);
    }

    v94 = *(void (**)(_BYTE *, uint64_t))(v114 + 8);
    v94(v55, v51);
LABEL_38:
    v94(v52, v51);
    return;
  }
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v60, &demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v61 = type metadata accessor for Logger();
  __swift_project_value_buffer(v61, (uint64_t)static Logger.siriNetwork);
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.default.getter();
  v64 = os_log_type_enabled(v62, v63);
  v65 = v105;
  if (v64)
  {
    v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v66 = 0;
    _os_log_impl(&dword_246EC7000, v62, v63, "Network Analytics: Event link. No orchestrator requestId", v66, 2u);
    MEMORY[0x24956E018](v66, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v114 + 8))(v52, v51);
}

void sub_246F06814()
{
  void *v0;

}

void NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)()
{
  NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  id v13;

  OUTLINED_FUNCTION_19();
  v5 = v4;
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_44_2();
  v9 = *(void **)(v0 + OBJC_IVAR___SNNetworkAnalyticsInternal_queue);
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_41_3();
  v10 = (_QWORD *)OUTLINED_FUNCTION_6();
  v10[2] = v3;
  v10[3] = v5;
  v10[4] = v8;
  v11 = OUTLINED_FUNCTION_34_3();
  v12 = v9;
  swift_retain();
  v13 = v5;
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v2, v1, v11);
  _Block_release(v11);

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_24_3();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  int *v54;
  int *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  void *v96;
  uint64_t v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int *v112;
  int *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[3];

  v113 = a3;
  v111 = a2;
  v112 = (int *)type metadata accessor for NetworkAnalyticsEventMessage(0);
  MEMORY[0x24BDAC7A8](v112);
  v5 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v106 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v106 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v106 - v16;
  v18 = type metadata accessor for UUID();
  v115 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v110 = (char *)&v106 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v109 = (char *)&v106 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v106 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v106 - v29;
  swift_beginAccess();
  v31 = MEMORY[0x24956E090](a1 + 16);
  if (!v31)
    return;
  v114 = v30;
  v32 = (char *)v31;
  v33 = v31 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
  swift_beginAccess();
  outlined init with copy of UUID?(v33, (uint64_t)v17);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18) != 1)
  {
    v38 = v115;
    (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v114, v17, v18);
    v108 = v32;
    v39 = (uint64_t)&v32[OBJC_IVAR___SNNetworkAnalyticsInternal_httpHeaderEvent];
    swift_beginAccess();
    v107 = v39;
    outlined init with copy of NetworkAnalyticsEventMessage(v39, (uint64_t)v5);
    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v18))
    {
      outlined destroy of NetworkAnalyticsEventMessage((uint64_t)v5);
      v40 = 0;
      v41 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v28, v5, v18);
      outlined destroy of NetworkAnalyticsEventMessage((uint64_t)v5);
      v40 = UUID.uuidString.getter();
      v42 = v38;
      v41 = v43;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v18);
    }
    v44 = v114;
    v45 = UUID.uuidString.getter();
    if (v41)
    {
      if (v40 == v45 && v41 == v46)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_23:
        v61 = v108;
        v62 = v115;
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v63 = type metadata accessor for Logger();
        __swift_project_value_buffer(v63, (uint64_t)static Logger.siriNetwork);
        (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v21, v44, v18);
        v64 = v44;
        v65 = Logger.logObject.getter();
        v66 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc();
          v68 = swift_slowAlloc();
          v119[0] = v68;
          *(_DWORD *)v67 = 136315138;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          v69 = dispatch thunk of CustomStringConvertible.description.getter();
          v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v71 = *(void (**)(char *, uint64_t))(v62 + 8);
          v71(v21, v18);
          _os_log_impl(&dword_246EC7000, v65, v66, "Network Analytics: Event Header. Http header already sent for netId: %s", v67, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24956E018](v68, -1, -1);
          MEMORY[0x24956E018](v67, -1, -1);

LABEL_47:
          v105 = v114;
LABEL_52:
          v71(v105, v18);
          return;
        }

        v71 = *(void (**)(char *, uint64_t))(v62 + 8);
        v71(v21, v18);
        goto LABEL_51;
      }
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v48 & 1) != 0)
        goto LABEL_23;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v49 = v115;
    v50 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
    v50(v15, v44, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v18);
    v51 = v107;
    swift_beginAccess();
    outlined assign with take of UUID?((uint64_t)v15, v51);
    swift_endAccess();
    v50(v15, v44, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v18);
    v52 = v108;
    v53 = &v108[OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId];
    swift_beginAccess();
    outlined init with copy of UUID?((uint64_t)v53, (uint64_t)v12);
    LOBYTE(v118) = v52[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider + 4];
    NetworkAnalytics.createSchemaClientEventFrom(netId:networkConnectionId:connectionProvider:)();
    v55 = v54;
    v56 = (uint64_t)v12;
    v57 = v55;
    outlined destroy of RPCOspreyConnectionProtocol?(v56, &demangling cache variable for type metadata for UUID?);
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    if (!v57)
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v44, v18);

      return;
    }
    objc_msgSend(v57, sel_setSessionConnectionHttpHeaderCreated_, v111);
    v58 = (uint64_t)&v52[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink];
    swift_beginAccess();
    outlined init with copy of UUID?(v58, (uint64_t)v9);
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v18))
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      v59 = 0;
      v60 = 0;
    }
    else
    {
      v50(v28, v9, v18);
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      v59 = UUID.uuidString.getter();
      v60 = v72;
      (*(void (**)(char *, uint64_t))(v115 + 8))(v28, v18);
    }
    v73 = UUID.uuidString.getter();
    if (v60)
    {
      if (v59 == v73 && v60 == v74)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_43:
        v93 = v112[5];
        v94 = *(void **)(v107 + v93);
        *(_QWORD *)(v107 + v93) = 0;

        v95 = v108;
        v96 = *(void **)&v108[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream];
        v112 = v57;
        objc_msgSend(v96, sel_emitMessage_timestamp_, v57, v113);
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v97 = type metadata accessor for Logger();
        __swift_project_value_buffer(v97, (uint64_t)static Logger.siriNetwork);
        v98 = v109;
        v50(v109, v44, v18);
        v64 = v44;
        v99 = Logger.logObject.getter();
        v100 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v99, v100))
        {
          v101 = (uint8_t *)swift_slowAlloc();
          v102 = swift_slowAlloc();
          v117 = v102;
          *(_DWORD *)v101 = 136315138;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          v103 = dispatch thunk of CustomStringConvertible.description.getter();
          v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, &v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v71 = *(void (**)(char *, uint64_t))(v115 + 8);
          v71(v98, v18);
          _os_log_impl(&dword_246EC7000, v99, v100, "Network Analytics: Event Header. httpHeaderEvent emitted: %s", v101, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24956E018](v102, -1, -1);
          MEMORY[0x24956E018](v101, -1, -1);

          goto LABEL_47;
        }

        v71 = *(void (**)(char *, uint64_t))(v115 + 8);
        v71(v98, v18);

LABEL_51:
        v105 = v64;
        goto LABEL_52;
      }
      v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v76 & 1) != 0)
        goto LABEL_43;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v77 = v112;
    v78 = v112[5];
    v79 = v107;
    v80 = *(void **)(v107 + v78);
    *(_QWORD *)(v107 + v78) = v57;
    v81 = v57;

    v82 = v79 + v77[6];
    *(_QWORD *)v82 = v113;
    *(_BYTE *)(v82 + 8) = 0;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.siriNetwork);
    v84 = v110;
    v85 = v114;
    v50(v110, v114, v18);
    v86 = Logger.logObject.getter();
    v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = swift_slowAlloc();
      v113 = v81;
      v89 = (uint8_t *)v88;
      v90 = swift_slowAlloc();
      v117 = v90;
      *(_DWORD *)v89 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v91 = dispatch thunk of CustomStringConvertible.description.getter();
      v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v71 = *(void (**)(char *, uint64_t))(v115 + 8);
      v71(v84, v18);
      _os_log_impl(&dword_246EC7000, v86, v87, "Network Analytics: Event Header. No netIdForRequestLink for netId: %s", v89, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v90, -1, -1);
      MEMORY[0x24956E018](v89, -1, -1);

    }
    else
    {

      v71 = *(void (**)(char *, uint64_t))(v115 + 8);
      v71(v84, v18);

    }
    v105 = v85;
    goto LABEL_52;
  }
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_246EC7000, v35, v36, "Network Analytics: Event Header. No netId generated", v37, 2u);
    MEMORY[0x24956E018](v37, -1, -1);
  }

}

void NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
  NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)();
}

void NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
  NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  OUTLINED_FUNCTION_19();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_18();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_46_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  if (NetworkAnalytics.emitLogDebug()())
  {
    v5 = mach_absolute_time();
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_41_3();
    v6 = (_QWORD *)OUTLINED_FUNCTION_6();
    v6[2] = v3;
    v6[3] = v1;
    v6[4] = v5;
    OUTLINED_FUNCTION_34_3();
    OUTLINED_FUNCTION_94_1();
    OUTLINED_FUNCTION_21_4();
    v7 = v1;
    OUTLINED_FUNCTION_17();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_55_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_3_10();
  }
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const char *a21)
{
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  SEL *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD);
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  char *v105;
  void (*v106)(uint64_t, _QWORD);
  uint64_t v107;
  void *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  void *v120;
  id v121;
  char *v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[4];
  int v133;
  char *v134;
  const char *v135;
  void (*v136)(_BYTE *, _BYTE *, uint64_t);
  const char *v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  SEL *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  OUTLINED_FUNCTION_19();
  v139 = v21;
  v23 = v22;
  v137 = v24;
  v143 = v25;
  v152 = v26;
  v148 = v27;
  v144 = v28;
  v30 = v29;
  v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v32);
  v34 = &v132[-v33];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_13_5();
  v40 = MEMORY[0x24BDAC7A8](v39);
  v42 = &v132[-v41];
  v43 = MEMORY[0x24BDAC7A8](v40);
  v45 = &v132[-v44];
  v46 = MEMORY[0x24BDAC7A8](v43);
  v48 = &v132[-v47];
  v49 = MEMORY[0x24BDAC7A8](v46);
  v51 = &v132[-v50];
  MEMORY[0x24BDAC7A8](v49);
  v53 = &v132[-v52];
  v54 = OUTLINED_FUNCTION_19_5();
  v154 = *(_QWORD *)(v54 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_11_5();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v57);
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v58);
  OUTLINED_FUNCTION_56_0();
  OUTLINED_FUNCTION_13_5();
  MEMORY[0x24BDAC7A8](v59);
  v61 = &v132[-v60];
  OUTLINED_FUNCTION_48();
  v62 = MEMORY[0x24956E090](v30 + 16);
  if (!v62)
    goto LABEL_48;
  v151 = v61;
  v63 = (char *)v62;
  v64 = v62 + OBJC_IVAR___SNNetworkAnalyticsInternal_netId;
  OUTLINED_FUNCTION_48();
  outlined init with copy of UUID?(v64, (uint64_t)v53);
  OUTLINED_FUNCTION_10_6((uint64_t)v53);
  if (v75)
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v53, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v65 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.siriNetwork);
    v66 = Logger.logObject.getter();
    v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v68 = 0;
      _os_log_impl(&dword_246EC7000, v66, v67, a21, v68, 2u);
      OUTLINED_FUNCTION_0_4();
    }

    goto LABEL_48;
  }
  v135 = v23;
  v69 = v154;
  v70 = v151;
  v136 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v154 + 32);
  v136(v151, v53, v54);
  v71 = (uint64_t)&v63[*v152];
  OUTLINED_FUNCTION_0_2();
  v152 = (_QWORD *)v71;
  outlined init with copy of UUID?(v71, (uint64_t)v51);
  v72 = *(void (**)(_QWORD, _QWORD))(v69 + 16);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v72)(v48, v70, v54);
  OUTLINED_FUNCTION_92_1((uint64_t)v48);
  v74 = (uint64_t)&v34[v73];
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_99_0((uint64_t)v48);
  OUTLINED_FUNCTION_10_6((uint64_t)v34);
  v76 = v63;
  if (v75)
  {
    OUTLINED_FUNCTION_83_1();
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v51, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_10_6(v74);
    v77 = (uint64_t)v151;
    if (v75)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v34, &demangling cache variable for type metadata for UUID?);
LABEL_25:
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v94 = OUTLINED_FUNCTION_5_1();
      __swift_project_value_buffer(v94, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_20_6(v142);
      v95 = Logger.logObject.getter();
      v96 = static os_log_type_t.default.getter();
      if (OUTLINED_FUNCTION_158(v96))
      {
        v97 = OUTLINED_FUNCTION_2_2();
        v134 = v76;
        v98 = (uint8_t *)v97;
        v157 = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v98 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v99 = OUTLINED_FUNCTION_67_1();
        v156 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v157);
        OUTLINED_FUNCTION_104_0();
        OUTLINED_FUNCTION_44_1();
        OUTLINED_FUNCTION_17_6();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, v95, (os_log_type_t)v72, v139, v98);
        OUTLINED_FUNCTION_65_0();
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_17_6();
LABEL_46:
      v131 = v77;
LABEL_47:
      OUTLINED_FUNCTION_39_3(v131);
      goto LABEL_48;
    }
  }
  else
  {
    OUTLINED_FUNCTION_71_1((uint64_t)v34);
    OUTLINED_FUNCTION_10_6(v74);
    if (!v78)
    {
      v92 = v141;
      OUTLINED_FUNCTION_59_1(v141);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v133 = OUTLINED_FUNCTION_90_0();
      v93 = (char)v72;
      v72 = *(void (**)(_QWORD, _QWORD))(v154 + 8);
      v72(v92, v54);
      OUTLINED_FUNCTION_83_1();
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v51, &demangling cache variable for type metadata for UUID?);
      v72(v45, v54);
      LOBYTE(v72) = v93;
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v34, &demangling cache variable for type metadata for UUID?);
      v77 = (uint64_t)v151;
      if ((v133 & 1) != 0)
        goto LABEL_25;
      goto LABEL_18;
    }
    OUTLINED_FUNCTION_25_4((uint64_t)v48);
    OUTLINED_FUNCTION_25_4((uint64_t)v51);
    OUTLINED_FUNCTION_104((uint64_t)v45, *(uint64_t (**)(uint64_t, uint64_t))(v154 + 8));
    v77 = (uint64_t)v151;
  }
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v34, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_18:
  OUTLINED_FUNCTION_20_6((uint64_t)v42);
  OUTLINED_FUNCTION_53_1();
  v79 = (uint64_t)v152;
  OUTLINED_FUNCTION_0_2();
  outlined assign with take of UUID?((uint64_t)v42, v79);
  swift_endAccess();
  OUTLINED_FUNCTION_20_6((uint64_t)v42);
  OUTLINED_FUNCTION_53_1();
  v80 = (uint64_t)&v76[OBJC_IVAR___SNNetworkAnalyticsInternal_networkConnectionId];
  OUTLINED_FUNCTION_48();
  v81 = v150;
  outlined init with copy of UUID?(v80, v150);
  LOBYTE(v156) = v76[OBJC_IVAR___SNNetworkAnalyticsInternal_connectionProvider + 4];
  NetworkAnalytics.createSchemaClientEventFrom(netId:networkConnectionId:connectionProvider:)();
  v83 = v82;
  OUTLINED_FUNCTION_25_4(v81);
  OUTLINED_FUNCTION_25_4((uint64_t)v42);
  if (v83)
  {
    objc_msgSend(v83, *v143, v144);
    v84 = (uint64_t)&v76[OBJC_IVAR___SNNetworkAnalyticsInternal_netIdForRequestLink];
    OUTLINED_FUNCTION_48();
    v85 = v145;
    outlined init with copy of UUID?(v84, v145);
    v86 = v149;
    OUTLINED_FUNCTION_20_6(v149);
    OUTLINED_FUNCTION_92_1(v86);
    v87 = v146;
    v89 = v146 + v88;
    OUTLINED_FUNCTION_71_1(v85);
    OUTLINED_FUNCTION_99_0(v86);
    OUTLINED_FUNCTION_10_6(v87);
    if (v75)
    {
      OUTLINED_FUNCTION_62_0(v86);
      OUTLINED_FUNCTION_62_0(v85);
      v90 = OUTLINED_FUNCTION_10_6(v89);
      v91 = v147;
      if (v75)
      {
        OUTLINED_FUNCTION_87_0(v90, &demangling cache variable for type metadata for UUID?);
LABEL_36:
        v107 = *(int *)(OUTLINED_FUNCTION_101() + 20);
        v108 = *(void **)((char *)v152 + v107);
        *(_QWORD *)((char *)v152 + v107) = 0;

        objc_msgSend(*(id *)&v76[OBJC_IVAR___SNNetworkAnalyticsInternal_siriAnalyticsMessageStream], sel_emitMessage_timestamp_, v83, v148);
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v109 = OUTLINED_FUNCTION_5_1();
        __swift_project_value_buffer(v109, (uint64_t)static Logger.siriNetwork);
        OUTLINED_FUNCTION_20_6(v138);
        v110 = Logger.logObject.getter();
        v111 = static os_log_type_t.default.getter();
        if (OUTLINED_FUNCTION_158(v111))
        {
          v112 = OUTLINED_FUNCTION_2_2();
          v134 = v76;
          v113 = (uint8_t *)v112;
          v155 = OUTLINED_FUNCTION_2_2();
          *(_DWORD *)v113 = 136315138;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          v114 = OUTLINED_FUNCTION_67_1();
          v116 = OUTLINED_FUNCTION_103_0(v114, v115);
          OUTLINED_FUNCTION_96_0(v116);
          OUTLINED_FUNCTION_104_0();
          OUTLINED_FUNCTION_44_1();
          OUTLINED_FUNCTION_17_6();
          OUTLINED_FUNCTION_30_0(&dword_246EC7000, v110, (os_log_type_t)v72, v137, v113);
          OUTLINED_FUNCTION_65_0();
          OUTLINED_FUNCTION_0_4();
        }

        OUTLINED_FUNCTION_17_6();
        goto LABEL_46;
      }
    }
    else
    {
      v153 = (uint64_t)v83;
      v101 = v140;
      outlined init with copy of UUID?(v87, v140);
      OUTLINED_FUNCTION_10_6(v89);
      v91 = v147;
      if (!v102)
      {
        v103 = v141;
        OUTLINED_FUNCTION_59_1(v141);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        LODWORD(v150) = OUTLINED_FUNCTION_90_0();
        v104 = (char)v72;
        v72 = (void (*)(_QWORD, _QWORD))v54;
        v105 = v76;
        v106 = *(void (**)(uint64_t, _QWORD))(v154 + 8);
        v106(v103, v72);
        OUTLINED_FUNCTION_62_0(v149);
        OUTLINED_FUNCTION_62_0(v85);
        v106(v101, v72);
        v76 = v105;
        LOBYTE(v72) = v104;
        OUTLINED_FUNCTION_62_0(v87);
        v83 = (void *)v153;
        if ((v150 & 1) != 0)
          goto LABEL_36;
LABEL_40:
        v134 = v76;
        v117 = OUTLINED_FUNCTION_101();
        v118 = *(int *)(v117 + 20);
        v119 = v152;
        v120 = *(void **)((char *)v152 + v118);
        *(_QWORD *)((char *)v152 + v118) = v83;
        v121 = v83;

        v122 = (char *)v119 + *(int *)(v117 + 24);
        *(_QWORD *)v122 = v148;
        v122[8] = 0;
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v123 = OUTLINED_FUNCTION_5_1();
        __swift_project_value_buffer(v123, (uint64_t)static Logger.siriNetwork);
        OUTLINED_FUNCTION_20_6(v91);
        v124 = Logger.logObject.getter();
        v125 = v77;
        v126 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v124, v126))
        {
          v127 = (uint8_t *)OUTLINED_FUNCTION_2_2();
          v155 = OUTLINED_FUNCTION_2_2();
          v153 = (uint64_t)v121;
          *(_DWORD *)v127 = 136315138;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
          v128 = dispatch thunk of CustomStringConvertible.description.getter();
          v130 = OUTLINED_FUNCTION_103_0(v128, v129);
          OUTLINED_FUNCTION_96_0(v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_44_1();
          OUTLINED_FUNCTION_39_3(v91);
          OUTLINED_FUNCTION_30_0(&dword_246EC7000, v124, v126, v135, v127);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_4();
        }

        OUTLINED_FUNCTION_51_2();
        OUTLINED_FUNCTION_39_3(v91);

        v131 = v125;
        goto LABEL_47;
      }
      OUTLINED_FUNCTION_25_4(v149);
      OUTLINED_FUNCTION_25_4(v85);
      v90 = OUTLINED_FUNCTION_104(v101, *(uint64_t (**)(uint64_t, uint64_t))(v154 + 8));
      v83 = (void *)v153;
    }
    OUTLINED_FUNCTION_87_0(v90, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_40;
  }
  OUTLINED_FUNCTION_104(v77, *(uint64_t (**)(uint64_t, uint64_t))(v154 + 8));

LABEL_48:
  OUTLINED_FUNCTION_1_1();
}

void NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)()
{
  NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)();
}

void NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)()
{
  NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)();
}

void NetworkAnalytics.logSessionConnectionSnapshotCaptured(_:)()
{
  NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)();
}

void NetworkAnalytics.logDebugSessionConnectionSnapshotCaptured(_:)()
{
  NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)();
}

void NetworkAnalytics.logSessionConnectionFailed(_:)()
{
  NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)();
}

void NetworkAnalytics.logPeerConnectionFailed(_:)()
{
  NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)();
}

id NetworkAnalytics.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void NetworkAnalytics.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void NetworkAnalytics.__deallocating_deinit()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for NetworkAnalytics(0);
  objc_msgSendSuper2(&v1, sel_dealloc);
  OUTLINED_FUNCTION_30_3();
}

uint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  unsigned int v5;
  _QWORD v6[5];

  if ((_BYTE)result)
  {
    v6[3] = v1;
    v6[4] = v2;
    v3 = result;
    v6[0] = 0;
    MEMORY[0x24956E024](v6, 8);
    v4 = v3;
    result = (LOBYTE(v6[0]) * v3) >> 8;
    if (v3 > (LOBYTE(v6[0]) * v3)
      && -v3 % v3 > (LOBYTE(v6[0]) * v3))
    {
      v5 = (-v3 % v3);
      do
      {
        v6[0] = 0;
        MEMORY[0x24956E024](v6, 8);
      }
      while (v5 > (LOBYTE(v6[0]) * v4));
      return (LOBYTE(v6[0]) * v4) >> 8;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_246F089A0()
{
  OUTLINED_FUNCTION_99();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()()
{
  uint64_t v0;

  closure #1 in NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void partial apply for closure #1 in NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;

  v0 = OUTLINED_FUNCTION_38_3();
  closure #1 in NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)(v0, v1, v2);
}

#error "246F08A24: call analysis failed (funcsize=14)"

#error "246F08A78: call analysis failed (funcsize=14)"

#error "246F08ACC: call analysis failed (funcsize=14)"

#error "246F08B20: call analysis failed (funcsize=14)"

#error "246F08B74: call analysis failed (funcsize=14)"

#error "246F08BC8: call analysis failed (funcsize=14)"

#error "246F08C1C: call analysis failed (funcsize=14)"

uint64_t objectdestroy_111Tm()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();

  return swift_deallocObject();
}

#error "246F08C98: call analysis failed (funcsize=14)"

uint64_t type metadata accessor for NetworkAnalytics(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, type metadata singleton initialization cache for NetworkAnalytics);
}

void type metadata completion function for NetworkAnalytics()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for NetworkAnalyticsEventMessage(319);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NetworkAnalytics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkAnalytics.reset()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of NetworkAnalytics.resetNetId()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of NetworkAnalytics.setNetId(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of NetworkAnalytics.getNetId()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of NetworkAnalytics.setNetworkConnectionId(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of NetworkAnalytics.setConnectionProvider(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of NetworkAnalytics.getSequenceNumber()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of NetworkAnalytics.setIsConnectionActive(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of NetworkAnalytics.getIsConnectionActive()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of NetworkAnalytics.setNetIdAvailable(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x300))();
}

uint64_t dispatch thunk of NetworkAnalytics.isNetIdAvailable()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of NetworkAnalytics.increaseSequenceNumber()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of NetworkAnalytics.resetSequenceNumber()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x318))();
}

uint64_t dispatch thunk of NetworkAnalytics.setOrchestatorRequestId(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x320))();
}

uint64_t dispatch thunk of NetworkAnalytics.getOrchestratorRequestId()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x328))();
}

uint64_t dispatch thunk of NetworkAnalytics.emitLogDebug()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x330))();
}

uint64_t dispatch thunk of NetworkAnalytics.logRequestLinkBetweenOrchestratorAndNetworkComponent()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of NetworkAnalytics.logSessionConnectionHttpHeaderCreated(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of NetworkAnalytics.logNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x360))();
}

uint64_t dispatch thunk of NetworkAnalytics.logDebugNetworkConnectionStatePreparationSnapshotCaptured(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of NetworkAnalytics.logNetworkConnectionStateReadySnapshotCaptured(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x370))();
}

uint64_t dispatch thunk of NetworkAnalytics.logDebugNetworkConnectionStateReadySnapshotCaptured(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x378))();
}

uint64_t dispatch thunk of NetworkAnalytics.logSessionConnectionSnapshotCaptured(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of NetworkAnalytics.logDebugSessionConnectionSnapshotCaptured(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of NetworkAnalytics.logSessionConnectionFailed(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of NetworkAnalytics.logPeerConnectionFailed(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x398))();
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t type metadata accessor for NetworkAnalyticsEventMessage(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkAnalyticsEventMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkAnalyticsEventMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  char *v14;
  id v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
    v10 = *(int *)(a3 + 20);
    v11 = *(int *)(a3 + 24);
    v12 = *(void **)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = (uint64_t)v12;
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = v12;
  }
  return a1;
}

void destroy for NetworkAnalyticsEventMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  if (!__swift_getEnumTagSinglePayload(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

char *initializeWithCopy for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  id v13;

  v6 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = *(void **)&a2[v8];
  *(_QWORD *)&a1[v8] = v10;
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = v10;
  return a1;
}

char *assignWithCopy for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = *(int *)(a3 + 20);
  v12 = *(void **)&a1[v11];
  v13 = *(void **)&a2[v11];
  *(_QWORD *)&a1[v11] = v13;
  v14 = v13;

  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  return a1;
}

char *initializeWithTake for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  v6 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
  }
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v9[8] = v10[8];
  return a1;
}

char *assignWithTake for NetworkAnalyticsEventMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumTagSinglePayload;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = type metadata accessor for UUID();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v6);
  v8 = __swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6);
  if (!EnumTagSinglePayload)
  {
    v9 = *(_QWORD *)(v6 - 8);
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
LABEL_7:
  v11 = *(int *)(a3 + 20);
  v12 = *(void **)&a1[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];

  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkAnalyticsEventMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_246F0960C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  int v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  v9 = v8 - 1;
  if (v9 < 0)
    v9 = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkAnalyticsEventMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_246F096A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
    OUTLINED_FUNCTION_23_1();
  }
}

void type metadata completion function for NetworkAnalyticsEventMessage()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_246F0978C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(OUTLINED_FUNCTION_19_5() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_104(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return OUTLINED_FUNCTION_42_3();
}

void partial apply for closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_19_5();
  v0 = OUTLINED_FUNCTION_55_1();
  closure #1 in NetworkAnalytics.emitAllCachedMessagesFor(_:)(v0, v1);
}

uint64_t outlined destroy of NetworkAnalyticsEventMessage(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NetworkAnalyticsEventMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of NetworkAnalyticsEventMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NetworkAnalyticsEventMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x24956DF70](a3, v5), a1);
  }
  OUTLINED_FUNCTION_3();
}

uint64_t OUTLINED_FUNCTION_0_21@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = v1 + a1;
  result = __swift_storeEnumTagSinglePayload(v1 + a1, 1, 1, v2);
  *(_QWORD *)(v5 + *(int *)(v3 + 20)) = 0;
  v7 = v5 + *(int *)(v3 + 24);
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = v4;
  return result;
}

void OUTLINED_FUNCTION_3_10()
{
  JUMPOUT(0x24956D244);
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_6_7()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_10_6(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_15_5(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_17_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 232) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_20_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v3, v1);
}

uint64_t OUTLINED_FUNCTION_21_4()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_24_3()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 8))(v0, *(_QWORD *)(v1 - 152));
}

void OUTLINED_FUNCTION_25_4(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of RPCOspreyConnectionProtocol?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  return swift_isEscapingClosureAtFileLocation();
}

uint64_t OUTLINED_FUNCTION_29_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined destroy of NetworkAnalyticsEventMessage(v1 + a1);
}

void *OUTLINED_FUNCTION_34_3()
{
  uint64_t v0;

  return _Block_copy((const void *)(v0 - 128));
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_39_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_40_2()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t OUTLINED_FUNCTION_41_3()
{
  return swift_unknownObjectWeakInit();
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  return mach_absolute_time();
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  return swift_release();
}

id OUTLINED_FUNCTION_50_1()
{
  void *v0;

  return v0;
}

void OUTLINED_FUNCTION_51_2()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_52_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

void *OUTLINED_FUNCTION_54_1@<X0>(uint64_t a1@<X8>, uint64_t a2, char aBlock, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  a5 = a1;
  a6 = v6;
  return _Block_copy(&aBlock);
}

uint64_t OUTLINED_FUNCTION_55_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_58_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_59_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 376))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_61_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_62_0(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of RPCOspreyConnectionProtocol?(a1, v1);
}

void OUTLINED_FUNCTION_63_1()
{
  void *v0;
  NSObject *v1;

  dispatch_sync(v1, v0);
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_69_0()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t OUTLINED_FUNCTION_70_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_71_1(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_72_1()
{
  return swift_unknownObjectWeakInit();
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  return swift_unknownObjectWeakInit();
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of UUID?(v0, v1);
}

void *OUTLINED_FUNCTION_80_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1;
  *(_QWORD *)(v2 - 88) = v1;
  return _Block_copy((const void *)(v2 - 112));
}

uint64_t OUTLINED_FUNCTION_81_1()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_82_1()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of UUID?(v1, v0);
}

void OUTLINED_FUNCTION_83_1()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of RPCOspreyConnectionProtocol?(v1, v0);
}

void OUTLINED_FUNCTION_84_1()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_85_1()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_86_1()
{
  void *v0;
  NSObject *v1;

  dispatch_sync(v1, v0);
}

void OUTLINED_FUNCTION_87_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of RPCOspreyConnectionProtocol?(v2, a2);
}

id OUTLINED_FUNCTION_88_0()
{
  void *v0;

  return v0;
}

id OUTLINED_FUNCTION_89_1()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_90_0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_92_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

id OUTLINED_FUNCTION_93_1()
{
  void *v0;

  return v0;
}

id OUTLINED_FUNCTION_94_1()
{
  uint64_t v0;

  return *(id *)(v0 - 168);
}

uint64_t OUTLINED_FUNCTION_96_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 224) = a1;
  return v1 - 224;
}

void OUTLINED_FUNCTION_97(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = *(_BYTE *)(v1 + v2);
}

uint64_t OUTLINED_FUNCTION_99_0(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of UUID?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_101()
{
  return type metadata accessor for NetworkAnalyticsEventMessage(0);
}

uint64_t OUTLINED_FUNCTION_102_0(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for CTServiceDescriptor(0, a2);
}

uint64_t OUTLINED_FUNCTION_103_0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 216));
}

uint64_t OUTLINED_FUNCTION_104_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t destroy for ConnectionEndpointReport()
{
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for ConnectionEndpointReport(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionEndpointReport(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for ConnectionEndpointReport(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionEndpointReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionEndpointReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionEndpointReport()
{
  return &type metadata for ConnectionEndpointReport;
}

uint64_t ConnectionEndpointReport.debugDescription.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[8];

  v3 = HIDWORD(a3);
  v4 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_15(v4, v5, v6, v7, v8, v9, v10, v11, v27, v29, 104);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = OUTLINED_FUNCTION_0_22();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  HIDWORD(v30) = v3;
  v13._countAndFlagsBits = OUTLINED_FUNCTION_0_22();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(55);
  v14._object = (void *)0x8000000246F77A60;
  v14._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v14);
  OUTLINED_FUNCTION_2_15(v15, v16, v17, v18, v19, v20, v21, v22, v28, v30, 0);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_16();
  v23._countAndFlagsBits = 0x2074726F70;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_16();
  v24._countAndFlagsBits = 0x2065707974;
  v24._object = (void *)0xE500000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 93;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return *(_QWORD *)v31;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionEndpointReport()
{
  uint64_t v0;

  return ConnectionEndpointReport.debugDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_1_16()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

void OUTLINED_FUNCTION_2_15(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  uint64_t v12;
  Swift::String v13;

  v13._countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectionProviderState(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConnectionProviderState(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for ConnectionProviderState(uint64_t a1)
{
  outlined consume of ConnectionProviderState(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ConnectionProviderState(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConnectionProviderState(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ConnectionProviderState(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ConnectionProviderState(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of ConnectionProviderState(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionProviderState(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionProviderState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ConnectionProviderState(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for ConnectionProviderState(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionProviderState()
{
  return &type metadata for ConnectionProviderState;
}

uint64_t ConnectionProviderState.init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v14;

  v2 = type metadata accessor for NWError();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for NWConnection.State();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == *MEMORY[0x24BDE0310] || (v10 = v7, v7 == *MEMORY[0x24BDE0308]))
  {
    OUTLINED_FUNCTION_4_13();
    OUTLINED_FUNCTION_1_17();
    lazy protocol witness table accessor for type NWError and conformance NWError();
    v8 = OUTLINED_FUNCTION_2_16();
    OUTLINED_FUNCTION_3_11(v8, v9);
    OUTLINED_FUNCTION_0_23();
  }
  else
  {
    if (v7 == *MEMORY[0x24BDE0300])
    {
      OUTLINED_FUNCTION_0_23();
    }
    else
    {
      if (v7 == *MEMORY[0x24BDE0320])
      {
        OUTLINED_FUNCTION_0_23();
        return 1;
      }
      if (v7 == *MEMORY[0x24BDE02F8])
      {
        OUTLINED_FUNCTION_0_23();
        return 2;
      }
      v11 = *MEMORY[0x24BDE0318];
      v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v12(a1, v3);
      if (v10 == v11)
        return 3;
      v12((uint64_t)v6, v3);
    }
    return 0;
  }
  return (uint64_t)v6;
}

unint64_t lazy protocol witness table accessor for type NWError and conformance NWError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NWError and conformance NWError;
  if (!lazy protocol witness table cache variable for type NWError and conformance NWError)
  {
    v1 = type metadata accessor for NWError();
    result = MEMORY[0x24956DF70](MEMORY[0x24BDE0698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NWError and conformance NWError);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_3_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(a2, v3, v2);
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v0);
}

BOOL NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_1_0();
  v9 = v8 - v7;
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_1_0();
  v15 = v14 - v13;
  if (a1)
  {
    v16 = *(void **)(v2 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queue);
    v23 = v12;
    v22 = v6;
    v17 = OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_4_14();
    v18 = (_QWORD *)OUTLINED_FUNCTION_6();
    v18[2] = v17;
    v18[3] = a1;
    v18[4] = a2;
    v19 = OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
    v20 = v16;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
    static DispatchQoS.unspecified.getter();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24956D244](0, v15, v9, v19);
    _Block_release(v19);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v9, v5);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v23);
    swift_release();
    swift_release();
  }
  return a1 != 0;
}

uint64_t sub_246F0A77C()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

void closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *__ptr32 *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  dispatch_group_t v25;
  NSObject *v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  id v36;
  void *v37;
  char *v38;
  id aBlock;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x24BDAC7A8](v6);
  swift_beginAccess();
  v7 = MEMORY[0x24956E090](a1 + 16);
  if (!v7)
    return;
  v8 = (char *)v7;
  if (NetworkWiFiManager.isWiFiEnabled()())
  {
    if (a2)
    {
      v9 = swift_retain();
      a2(v9);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);
      return;
    }
    goto LABEL_15;
  }
  v10 = OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup;
  v11 = (void *)MEMORY[0x24BDAC760];
  v12 = &off_246F72000;
  if (*(_QWORD *)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup])
  {
LABEL_6:
    if (a2)
    {
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = a2;
      *(_QWORD *)(v13 + 24) = a3;
      v43 = partial apply for closure #2 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:);
      v44 = v13;
      aBlock = v11;
      v40 = *((_QWORD *)v12 + 363);
      v41 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v42 = &block_descriptor_16_2;
      _Block_copy(&aBlock);
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)a2);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      DispatchWorkItem.init(flags:block:)();
      swift_release();
      v14 = *(void **)&v8[v10];
      if (v14)
      {
        v15 = *(void **)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_queue];
        v16 = v14;
        v17 = v15;
        OS_dispatch_group.notify(queue:work:)();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);

      }
      else
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a2);
      }

      swift_release();
      return;
    }
LABEL_15:

    return;
  }
  v18 = OBJC_IVAR___SNNetworkWiFiManagerInternal_interface;
  v19 = *(void **)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
  if (!v19)
    goto LABEL_13;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v8;
  v43 = partial apply for closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:);
  v44 = v20;
  aBlock = v11;
  v40 = 1107296256;
  v41 = thunk for @escaping @callee_guaranteed (@guaranteed CWFEvent) -> ();
  v42 = &block_descriptor_22_0;
  v21 = _Block_copy(&aBlock);
  v22 = v19;
  v38 = v8;
  v11 = (void *)MEMORY[0x24BDAC760];
  swift_release();
  objc_msgSend(v22, sel_setEventHandler_, v21);
  _Block_release(v21);

  v23 = *(void **)&v8[v18];
  if (!v23)
  {
LABEL_13:
    v25 = dispatch_group_create();
    NetworkWiFiManager.queueGroup.setter((uint64_t)v25);
    v26 = *(NSObject **)&v8[v10];
    v12 = &off_246F72000;
    if (!v26)
      goto LABEL_15;
    dispatch_group_enter(v26);
    if (!*(_QWORD *)&v8[v10])
      goto LABEL_15;
    goto LABEL_6;
  }
  aBlock = 0;
  if (objc_msgSend(v23, sel_startMonitoringEventType_error_, 1, &aBlock))
  {
    v24 = aBlock;
    goto LABEL_13;
  }
  v27 = aBlock;
  v28 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.siriNetwork);
  v30 = v28;
  v31 = v28;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v34 = 138412290;
    v36 = v28;
    v37 = (void *)_swift_stdlib_bridgeErrorToNSError();
    aBlock = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v35 = v37;

    _os_log_impl(&dword_246EC7000, v32, v33, "NetworkWiFiManager - PowerNotification: Failed registering for power notifications, error: %@", v34, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v35, -1, -1);
    MEMORY[0x24956E018](v34, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_246F0ACB4()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)()
{
  uint64_t v0;

  closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(void *a1, char *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  if (objc_msgSend(a1, sel_type) == (id)1)
  {
    v3 = *(void **)&a2[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
    if (v3 && (v4 = objc_msgSend(v3, sel_interfaceName)) != 0)
    {
      v5 = v4;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

    }
    else
    {
      v6 = 0;
      v8 = 0xE000000000000000;
    }
    v9 = (id)MEMORY[0x24956D034](v6, v8);
    swift_bridgeObjectRelease();
    objc_msgSend(a2, sel_powerStateDidChangeForWiFiInterfaceWithName_, v9);

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CWFEvent) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

Swift::Void __swiftcall NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)(Swift::String withName)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_1_0();
  v6 = v5 - v4;
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_1_0();
  v11 = v10 - v9;
  if (NetworkWiFiManager.isWiFiEnabled()())
  {
    v12 = *(void **)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queue);
    OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_4_14();
    v13 = OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
    v14 = v12;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24956D244](0, v11, v6, v13);
    _Block_release(v13);

    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
    swift_release();
    swift_release();
  }
}

void closure #1 in NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x24956E090](v1);
  if (v2)
  {
    v3 = (char *)v2;
    v4 = *(NSObject **)(v2 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup);
    if (v4)
    {
      dispatch_group_leave(v4);
      v5 = OBJC_IVAR___SNNetworkWiFiManagerInternal_interface;
      v6 = *(void **)&v3[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
      if (v6)
      {
        objc_msgSend(v6, sel_setEventHandler_, 0);
        v7 = *(void **)&v3[v5];
        if (v7)
          objc_msgSend(v7, sel_stopMonitoringEventType_, 1);
      }
      NetworkWiFiManager.queueGroup.setter(0);
    }

  }
}

void partial apply for closure #1 in NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)()
{
  uint64_t v0;

  closure #1 in NetworkWiFiManager.powerStateDidChangeForWiFiInterface(withName:)(v0);
}

uint64_t sub_246F0B17C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(_QWORD *)(v0 + 16));
}

uint64_t sub_246F0B1A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_246F0B1E4()
{
  uint64_t v0;

  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in NetworkWiFiManager.registerOneShotPowerStateDidChangeForWiFiInterface(_:)(a1, *(char **)(v1 + 16));
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  return swift_unknownObjectWeakInit();
}

uint64_t ConnectionMetrics.connectionIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ConnectionMetrics.connectionIdentifier.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionIdentifier.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.connectionMethodHistory.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConnectionMetrics.connectionMethodHistory.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionMethodHistory.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.policyId.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionMetrics.policyId.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionMetrics.policyId.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.remoteMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[1440];

  v3 = *(_QWORD *)(v1 + 40);
  if (*(_QWORD *)(v3 + 16))
  {
    OUTLINED_FUNCTION_22_1(v5, (const void *)(v3 + 32));
    OUTLINED_FUNCTION_3_12();
    destructiveProjectEnumData for ConnectionConfigurationError(a1);
    return outlined retain of ConnectionMetrics((uint64_t)v5);
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v5);
    return outlined init with take of ConnectionMetrics?((uint64_t)v5, a1);
  }
}

uint64_t outlined init with take of ConnectionMetrics?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for ConnectionMetrics.remoteMetrics : ConnectionMetrics@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[1440];
  _BYTE v4[1440];

  ConnectionMetrics.remoteMetrics.getter((uint64_t)v3);
  outlined init with take of ConnectionMetrics?((uint64_t)v3, (uint64_t)v4);
  return outlined init with take of ConnectionMetrics?((uint64_t)v4, a1);
}

void key path setter for ConnectionMetrics.remoteMetrics : ConnectionMetrics(uint64_t a1)
{
  _BYTE v1[1440];
  _BYTE v2[1440];

  outlined init with take of ConnectionMetrics?(a1, (uint64_t)v2);
  outlined init with take of ConnectionMetrics?((uint64_t)v2, (uint64_t)v1);
  outlined release of ConnectionMetrics?(v2, outlined copy of ConnectionMetrics?);
  ConnectionMetrics.remoteMetrics.setter((uint64_t)v1);
}

void ConnectionMetrics.remoteMetrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[1440];
  _BYTE v7[1440];
  _BYTE v8[1440];

  v2 = MEMORY[0x24BDAC7A8](a1);
  outlined init with take of ConnectionMetrics?(v2, (uint64_t)v7);
  outlined init with take of ConnectionMetrics?((uint64_t)v7, (uint64_t)v8);
  if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v8) == 1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 40) = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v3 = (uint64_t *)(v1 + 40);
    swift_bridgeObjectRelease();
    *v3 = MEMORY[0x24BEE4AF8];
    outlined init with take of ConnectionMetrics?((uint64_t)v7, (uint64_t)v6);
    outlined retain of ConnectionMetrics((uint64_t)v6);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v4 = *(_QWORD *)(*v3 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v5 = *v3;
    *(_QWORD *)(v5 + 16) = v4 + 1;
    OUTLINED_FUNCTION_22_1((void *)(v5 + 1440 * v4 + 32), v8);
    outlined release of ConnectionMetrics?(v7, outlined consume of ConnectionMetrics?);
    *v3 = v5;
  }
  OUTLINED_FUNCTION_23_1();
}

void (*ConnectionMetrics.remoteMetrics.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x1688uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = (uint64_t)(v3 + 180);
  v3[720] = v1;
  v6 = *(_QWORD *)(v1 + 40);
  if (*(_QWORD *)(v6 + 16))
  {
    OUTLINED_FUNCTION_22_1(v3 + 180, (const void *)(v6 + 32));
    OUTLINED_FUNCTION_3_12();
    destructiveProjectEnumData for ConnectionConfigurationError(v4);
    outlined retain of ConnectionMetrics(v5);
  }
  else
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v3 + 180);
    outlined init with take of ConnectionMetrics?(v5, v4);
  }
  return ConnectionMetrics.remoteMetrics.modify;
}

void ConnectionMetrics.remoteMetrics.modify(uint64_t *a1, char a2)
{
  _QWORD *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)*a1;
  v4 = (const void *)(*a1 + 1440);
  v5 = *a1 + 2880;
  v6 = *a1 + 4320;
  outlined init with take of ConnectionMetrics?(*a1, v5);
  outlined init with take of ConnectionMetrics?(v5, (uint64_t)v4);
  v7 = _s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)v4);
  v8 = v3[720] + 40;
  if ((a2 & 1) != 0)
  {
    if (v7 == 1)
    {
      OUTLINED_FUNCTION_10_7();
      v10 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      OUTLINED_FUNCTION_7_10();
      OUTLINED_FUNCTION_9_8();
      swift_bridgeObjectRelease();
      *(_QWORD *)v8 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_9_8();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v9 = *(_QWORD *)(*(_QWORD *)v8 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v10 = *(_QWORD *)v8;
      *(_QWORD *)(v10 + 16) = v9 + 1;
      OUTLINED_FUNCTION_22_1((void *)(v10 + 1440 * v9 + 32), v4);
      outlined release of ConnectionMetrics?(v5, outlined consume of ConnectionMetrics?);
    }
    *(_QWORD *)(v3[720] + 40) = v10;
    outlined init with take of ConnectionMetrics?((uint64_t)v3, v6);
    outlined release of ConnectionMetrics?(v6, outlined consume of ConnectionMetrics?);
  }
  else
  {
    if (v7 == 1)
    {
      OUTLINED_FUNCTION_10_7();
      v12 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      OUTLINED_FUNCTION_10_7();
      *(_QWORD *)v8 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_7_10();
      OUTLINED_FUNCTION_9_8();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v11 = *(_QWORD *)(*(_QWORD *)v8 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      v12 = *(_QWORD *)v8;
      *(_QWORD *)(v12 + 16) = v11 + 1;
      OUTLINED_FUNCTION_22_1((void *)(v12 + 1440 * v11 + 32), v4);
      outlined release of ConnectionMetrics?(v5, outlined consume of ConnectionMetrics?);
    }
    *(_QWORD *)(v3[720] + 40) = v12;
  }
  free(v3);
}

unint64_t ConnectionMetrics.metricsCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 52) << 32);
}

uint64_t ConnectionMetrics.metricsCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 48) = result;
  *(_BYTE *)(v1 + 52) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionMetrics.metricsCount.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionMetrics.attemptedEndpoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConnectionMetrics.attemptedEndpoints.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 1280) = a1;
  return result;
}

uint64_t (*ConnectionMetrics.attemptedEndpoints.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.connectionEdgeID.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionMetrics.connectionEdgeID.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 1288) = v2;
  *(_QWORD *)(v1 + 1296) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionMetrics.connectionEdgeID.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.connectionEdgeType.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionMetrics.connectionEdgeType.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 1304) = v2;
  *(_QWORD *)(v1 + 1312) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionMetrics.connectionEdgeType.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.connectionFallbackReason.getter()
{
  OUTLINED_FUNCTION_1_18();
}

uint64_t ConnectionMetrics.connectionFallbackReason.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1320) = result;
  *(_BYTE *)(v2 + 1328) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionFallbackReason.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.connectionDelay.getter()
{
  OUTLINED_FUNCTION_1_18();
}

uint64_t ConnectionMetrics.connectionDelay.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1336) = result;
  *(_BYTE *)(v2 + 1344) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.connectionDelay.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.firstTxByteDelay.getter()
{
  OUTLINED_FUNCTION_1_18();
}

uint64_t ConnectionMetrics.firstTxByteDelay.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1352) = result;
  *(_BYTE *)(v2 + 1360) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.firstTxByteDelay.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.wifiChannelInfo.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionMetrics.wifiChannelInfo.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 1368) = v2;
  *(_QWORD *)(v1 + 1376) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionMetrics.wifiChannelInfo.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

unint64_t ConnectionMetrics.simSubscriptions.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 1384) | ((unint64_t)*(unsigned __int8 *)(v0 + 1388) << 32);
}

uint64_t ConnectionMetrics.simSubscriptions.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 1384) = result;
  *(_BYTE *)(v1 + 1388) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ConnectionMetrics.simSubscriptions.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.idsLastMessageDelay.getter()
{
  OUTLINED_FUNCTION_1_18();
}

uint64_t ConnectionMetrics.idsLastMessageDelay.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1392) = result;
  *(_BYTE *)(v2 + 1400) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.idsLastMessageDelay.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.idsLastSocketDelay.getter()
{
  OUTLINED_FUNCTION_1_18();
}

uint64_t ConnectionMetrics.idsLastSocketDelay.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1408) = result;
  *(_BYTE *)(v2 + 1416) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.idsLastSocketDelay.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionMetrics.idsLastSocketOpenError.getter()
{
  OUTLINED_FUNCTION_1_18();
}

uint64_t ConnectionMetrics.idsLastSocketOpenError.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 1424) = result;
  *(_BYTE *)(v2 + 1432) = a2 & 1;
  return result;
}

uint64_t (*ConnectionMetrics.idsLastSocketOpenError.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v1 = a1(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  OUTLINED_FUNCTION_23_1();
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t destroy for ConnectionMetrics(uint64_t a1)
{
  void *v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 432))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 144))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 184) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(a1 + 512))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(a1 + 584))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 712))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 960))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 1000) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ConnectionMetrics(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;

  *a1 = *a2;
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)a1 + 52) = *((_BYTE *)a2 + 52);
  v6 = (void *)a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = a2[8];
    a1[7] = a2[7];
    a1[8] = v7;
    v8 = a2[10];
    a1[9] = a2[9];
    a1[10] = v8;
    a1[11] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v6;
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v10;
    a1[11] = a2[11];
  }
  v11 = a2[54];
  if (!v11)
  {
    memcpy(a1 + 12, a2 + 12, 0x168uLL);
    goto LABEL_13;
  }
  v12 = a2[13];
  a1[12] = a2[12];
  a1[13] = v12;
  v13 = a2[15];
  a1[14] = a2[14];
  a1[15] = v13;
  *((_DWORD *)a1 + 32) = *((_DWORD *)a2 + 32);
  *((_BYTE *)a1 + 132) = *((_BYTE *)a2 + 132);
  v14 = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14)
  {
    a1[17] = a2[17];
    a1[18] = v14;
    v15 = a2[20];
    a1[19] = a2[19];
    a1[20] = v15;
    *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
    *((_DWORD *)a1 + 43) = *((_DWORD *)a2 + 43);
    v16 = a2[23];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16 != 1)
    {
      a1[22] = a2[22];
      a1[23] = v16;
      v20 = a2[25];
      a1[24] = a2[24];
      a1[25] = v20;
      *((_BYTE *)a1 + 208) = *((_BYTE *)a2 + 208);
      a1[27] = a2[27];
      *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
      a1[29] = a2[29];
      *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
      v21 = a2[31];
      *((_BYTE *)a1 + 256) = *((_BYTE *)a2 + 256);
      a1[31] = v21;
      a1[33] = a2[33];
      *((_BYTE *)a1 + 272) = *((_BYTE *)a2 + 272);
      a1[35] = a2[35];
      *((_BYTE *)a1 + 288) = *((_BYTE *)a2 + 288);
      a1[37] = a2[37];
      *((_BYTE *)a1 + 304) = *((_BYTE *)a2 + 304);
      *((_BYTE *)a1 + 320) = *((_BYTE *)a2 + 320);
      a1[39] = a2[39];
      *((_BYTE *)a1 + 336) = *((_BYTE *)a2 + 336);
      a1[41] = a2[41];
      *((_BYTE *)a1 + 344) = *((_BYTE *)a2 + 344);
      *((_DWORD *)a1 + 85) = *((_DWORD *)a2 + 85);
      *((_BYTE *)a1 + 352) = *((_BYTE *)a2 + 352);
      *((_DWORD *)a1 + 87) = *((_DWORD *)a2 + 87);
      *((_BYTE *)a1 + 360) = *((_BYTE *)a2 + 360);
      *((_DWORD *)a1 + 89) = *((_DWORD *)a2 + 89);
      LODWORD(v21) = *((_DWORD *)a2 + 91);
      *((_BYTE *)a1 + 368) = *((_BYTE *)a2 + 368);
      *((_DWORD *)a1 + 91) = v21;
      v22 = a2[47];
      *((_BYTE *)a1 + 384) = *((_BYTE *)a2 + 384);
      a1[47] = v22;
      v23 = a2[49];
      *((_BYTE *)a1 + 400) = *((_BYTE *)a2 + 400);
      a1[49] = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 101);
      *((_BYTE *)a1 + 408) = *((_BYTE *)a2 + 408);
      *((_DWORD *)a1 + 101) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 103);
      *((_BYTE *)a1 + 416) = *((_BYTE *)a2 + 416);
      *((_DWORD *)a1 + 103) = v23;
      LODWORD(v23) = *((_DWORD *)a2 + 105);
      *((_BYTE *)a1 + 424) = *((_BYTE *)a2 + 424);
      *((_DWORD *)a1 + 105) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    v17 = a1 + 22;
    v18 = a2 + 22;
    v19 = 249;
  }
  else
  {
    v17 = a1 + 17;
    v18 = a2 + 17;
    v19 = 289;
  }
  memcpy(v17, v18, v19);
LABEL_12:
  v24 = a2[55];
  v25 = (void *)a2[56];
  a1[54] = v11;
  a1[55] = v24;
  a1[56] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = v25;
LABEL_13:
  v27 = a2[64];
  if (v27)
  {
    v28 = a2[58];
    a1[57] = a2[57];
    a1[58] = v28;
    *((_DWORD *)a1 + 118) = *((_DWORD *)a2 + 118);
    *((_BYTE *)a1 + 476) = *((_BYTE *)a2 + 476);
    a1[60] = a2[60];
    *((_BYTE *)a1 + 488) = *((_BYTE *)a2 + 488);
    a1[62] = a2[62];
    *((_BYTE *)a1 + 504) = *((_BYTE *)a2 + 504);
    a1[64] = v27;
    a1[65] = a2[65];
    *((_WORD *)a1 + 264) = *((_WORD *)a2 + 264);
    a1[67] = a2[67];
    a1[68] = a2[68];
    a1[69] = a2[69];
    v29 = (void *)a2[70];
    a1[70] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = v29;
  }
  else
  {
    memcpy(a1 + 57, a2 + 57, 0x70uLL);
  }
  v31 = a2[73];
  if (v31)
  {
    *((_DWORD *)a1 + 142) = *((_DWORD *)a2 + 142);
    a1[72] = a2[72];
    a1[73] = v31;
    a1[74] = a2[74];
    a1[75] = a2[75];
    v32 = a2[89];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32)
    {
      *((_DWORD *)a1 + 152) = *((_DWORD *)a2 + 152);
      *((_BYTE *)a1 + 612) = *((_BYTE *)a2 + 612);
      a1[77] = a2[77];
      a1[78] = a2[78];
      a1[79] = a2[79];
      *((_BYTE *)a1 + 640) = *((_BYTE *)a2 + 640);
      a1[81] = a2[81];
      a1[82] = a2[82];
      a1[83] = a2[83];
      a1[84] = a2[84];
      a1[85] = a2[85];
      a1[86] = a2[86];
      *((_DWORD *)a1 + 174) = *((_DWORD *)a2 + 174);
      *((_BYTE *)a1 + 700) = *((_BYTE *)a2 + 700);
      *((_DWORD *)a1 + 176) = *((_DWORD *)a2 + 176);
      *((_BYTE *)a1 + 708) = *((_BYTE *)a2 + 708);
      a1[89] = v32;
      a1[90] = a2[90];
      a1[91] = a2[91];
      *((_BYTE *)a1 + 744) = *((_BYTE *)a2 + 744);
      a1[92] = a2[92];
      *((_BYTE *)a1 + 760) = *((_BYTE *)a2 + 760);
      a1[94] = a2[94];
      *((_BYTE *)a1 + 776) = *((_BYTE *)a2 + 776);
      a1[96] = a2[96];
      *((_BYTE *)a1 + 792) = *((_BYTE *)a2 + 792);
      a1[98] = a2[98];
      v33 = a2[100];
      *((_BYTE *)a1 + 808) = *((_BYTE *)a2 + 808);
      a1[100] = v33;
      v34 = a2[102];
      *((_BYTE *)a1 + 824) = *((_BYTE *)a2 + 824);
      a1[102] = v34;
      a1[104] = a2[104];
      a1[105] = a2[105];
      v35 = a2[106];
      *((_BYTE *)a1 + 856) = *((_BYTE *)a2 + 856);
      a1[106] = v35;
      v36 = a2[108];
      *((_BYTE *)a1 + 872) = *((_BYTE *)a2 + 872);
      a1[108] = v36;
      *((_BYTE *)a1 + 873) = *((_BYTE *)a2 + 873);
      v37 = a2[110];
      *((_BYTE *)a1 + 888) = *((_BYTE *)a2 + 888);
      a1[110] = v37;
      v38 = a2[112];
      *((_BYTE *)a1 + 904) = *((_BYTE *)a2 + 904);
      a1[112] = v38;
      v39 = a2[114];
      *((_BYTE *)a1 + 920) = *((_BYTE *)a2 + 920);
      a1[114] = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy(a1 + 76, a2 + 76, 0x139uLL);
    }
    *((_OWORD *)a1 + 58) = *((_OWORD *)a2 + 58);
    *((_BYTE *)a1 + 944) = *((_BYTE *)a2 + 944);
    v40 = a2[120];
    if (v40)
    {
      a1[119] = a2[119];
      a1[120] = v40;
      a1[121] = a2[121];
      a1[122] = a2[122];
      *((_BYTE *)a1 + 984) = *((_BYTE *)a2 + 984);
      *((_DWORD *)a1 + 247) = *((_DWORD *)a2 + 247);
      v41 = a2[125];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v41 != 1)
      {
        a1[124] = a2[124];
        a1[125] = v41;
        a1[126] = a2[126];
        a1[127] = a2[127];
        *((_BYTE *)a1 + 1024) = *((_BYTE *)a2 + 1024);
        a1[129] = a2[129];
        *((_BYTE *)a1 + 1040) = *((_BYTE *)a2 + 1040);
        a1[131] = a2[131];
        *((_BYTE *)a1 + 1056) = *((_BYTE *)a2 + 1056);
        v45 = a2[133];
        *((_BYTE *)a1 + 1072) = *((_BYTE *)a2 + 1072);
        a1[133] = v45;
        a1[135] = a2[135];
        *((_BYTE *)a1 + 1088) = *((_BYTE *)a2 + 1088);
        a1[137] = a2[137];
        *((_BYTE *)a1 + 1104) = *((_BYTE *)a2 + 1104);
        a1[139] = a2[139];
        *((_BYTE *)a1 + 1120) = *((_BYTE *)a2 + 1120);
        *((_BYTE *)a1 + 1136) = *((_BYTE *)a2 + 1136);
        a1[141] = a2[141];
        *((_BYTE *)a1 + 1152) = *((_BYTE *)a2 + 1152);
        a1[143] = a2[143];
        *((_BYTE *)a1 + 1160) = *((_BYTE *)a2 + 1160);
        *((_DWORD *)a1 + 289) = *((_DWORD *)a2 + 289);
        *((_BYTE *)a1 + 1168) = *((_BYTE *)a2 + 1168);
        *((_DWORD *)a1 + 291) = *((_DWORD *)a2 + 291);
        *((_BYTE *)a1 + 1176) = *((_BYTE *)a2 + 1176);
        *((_DWORD *)a1 + 293) = *((_DWORD *)a2 + 293);
        LODWORD(v45) = *((_DWORD *)a2 + 295);
        *((_BYTE *)a1 + 1184) = *((_BYTE *)a2 + 1184);
        *((_DWORD *)a1 + 295) = v45;
        v46 = a2[149];
        *((_BYTE *)a1 + 1200) = *((_BYTE *)a2 + 1200);
        a1[149] = v46;
        v47 = a2[151];
        *((_BYTE *)a1 + 1216) = *((_BYTE *)a2 + 1216);
        a1[151] = v47;
        LODWORD(v47) = *((_DWORD *)a2 + 305);
        *((_BYTE *)a1 + 1224) = *((_BYTE *)a2 + 1224);
        *((_DWORD *)a1 + 305) = v47;
        LODWORD(v47) = *((_DWORD *)a2 + 307);
        *((_BYTE *)a1 + 1232) = *((_BYTE *)a2 + 1232);
        *((_DWORD *)a1 + 307) = v47;
        LODWORD(v47) = *((_DWORD *)a2 + 309);
        *((_BYTE *)a1 + 1240) = *((_BYTE *)a2 + 1240);
        *((_DWORD *)a1 + 309) = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_27;
      }
      v42 = a1 + 124;
      v43 = a2 + 124;
      v44 = 249;
    }
    else
    {
      v42 = a1 + 119;
      v43 = a2 + 119;
      v44 = 289;
    }
    memcpy(v42, v43, v44);
LABEL_27:
    a1[156] = a2[156];
    a1[157] = a2[157];
    *((_DWORD *)a1 + 316) = *((_DWORD *)a2 + 316);
    v48 = (void *)a2[159];
    a1[159] = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49 = v48;
    goto LABEL_28;
  }
  memcpy(a1 + 71, a2 + 71, 0x2C8uLL);
LABEL_28:
  a1[160] = a2[160];
  a1[161] = a2[161];
  a1[162] = a2[162];
  a1[163] = a2[163];
  a1[164] = a2[164];
  a1[165] = a2[165];
  *((_BYTE *)a1 + 1328) = *((_BYTE *)a2 + 1328);
  a1[167] = a2[167];
  *((_BYTE *)a1 + 1344) = *((_BYTE *)a2 + 1344);
  *((_BYTE *)a1 + 1360) = *((_BYTE *)a2 + 1360);
  a1[169] = a2[169];
  a1[171] = a2[171];
  a1[172] = a2[172];
  *((_BYTE *)a1 + 1388) = *((_BYTE *)a2 + 1388);
  *((_DWORD *)a1 + 346) = *((_DWORD *)a2 + 346);
  *((_BYTE *)a1 + 1400) = *((_BYTE *)a2 + 1400);
  a1[174] = a2[174];
  v50 = a2[176];
  *((_BYTE *)a1 + 1416) = *((_BYTE *)a2 + 1416);
  a1[176] = v50;
  v51 = a2[178];
  *((_BYTE *)a1 + 1432) = *((_BYTE *)a2 + 1432);
  a1[178] = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionMetrics(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  size_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  _DWORD *v68;
  int *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const void *v117;
  size_t v118;
  __int128 v119;
  uint64_t v120;
  void *v121;
  const void *v122;
  size_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *((_DWORD *)a2 + 12);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  v6 = (_OWORD *)(a1 + 56);
  v7 = a2 + 7;
  v8 = a2[11];
  if (*(_QWORD *)(a1 + 88))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 56) = a2[7];
      *(_QWORD *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v9 = (void *)a2[11];
      v10 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v9;
      v11 = v9;

    }
    else
    {
      outlined destroy of ConnectionHTTPHeaderReport(a1 + 56);
      v14 = a2[11];
      v15 = *(_OWORD *)(a2 + 9);
      *v6 = *v7;
      *(_OWORD *)(a1 + 72) = v15;
      *(_QWORD *)(a1 + 88) = v14;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = a2[10];
    v12 = (void *)a2[11];
    *(_QWORD *)(a1 + 88) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = v12;
  }
  else
  {
    v16 = *v7;
    v17 = *(_OWORD *)(a2 + 9);
    *(_QWORD *)(a1 + 88) = a2[11];
    *v6 = v16;
    *(_OWORD *)(a1 + 72) = v17;
  }
  v18 = a2[54];
  if (*(_QWORD *)(a1 + 432))
  {
    if (v18)
    {
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *(_BYTE *)(a1 + 129) = *((_BYTE *)a2 + 129);
      *(_BYTE *)(a1 + 130) = *((_BYTE *)a2 + 130);
      *(_BYTE *)(a1 + 131) = *((_BYTE *)a2 + 131);
      *(_BYTE *)(a1 + 132) = *((_BYTE *)a2 + 132);
      v19 = a2[18];
      if (*(_QWORD *)(a1 + 144))
      {
        if (v19)
        {
          *(_QWORD *)(a1 + 136) = a2[17];
          *(_QWORD *)(a1 + 144) = a2[18];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 152) = a2[19];
          *(_QWORD *)(a1 + 160) = a2[20];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
          *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
          v20 = a2[23];
          if (*(_QWORD *)(a1 + 184) != 1)
          {
            if (v20 != 1)
            {
              *(_QWORD *)(a1 + 176) = a2[22];
              *(_QWORD *)(a1 + 184) = a2[23];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(_QWORD *)(a1 + 192) = a2[24];
              *(_QWORD *)(a1 + 200) = a2[25];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
              v157 = a2[27];
              *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
              *(_QWORD *)(a1 + 216) = v157;
              v158 = a2[29];
              *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
              *(_QWORD *)(a1 + 232) = v158;
              v159 = a2[31];
              *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
              *(_QWORD *)(a1 + 248) = v159;
              v160 = a2[33];
              *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
              *(_QWORD *)(a1 + 264) = v160;
              v161 = a2[35];
              *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
              *(_QWORD *)(a1 + 280) = v161;
              v162 = a2[37];
              *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
              *(_QWORD *)(a1 + 296) = v162;
              v163 = a2[39];
              *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
              *(_QWORD *)(a1 + 312) = v163;
              v164 = a2[41];
              *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
              *(_QWORD *)(a1 + 328) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 85);
              *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
              *(_DWORD *)(a1 + 340) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 87);
              *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
              *(_DWORD *)(a1 + 348) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 89);
              *(_BYTE *)(a1 + 360) = *((_BYTE *)a2 + 360);
              *(_DWORD *)(a1 + 356) = v164;
              LODWORD(v164) = *((_DWORD *)a2 + 91);
              *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
              *(_DWORD *)(a1 + 364) = v164;
              v165 = a2[47];
              *(_BYTE *)(a1 + 384) = *((_BYTE *)a2 + 384);
              *(_QWORD *)(a1 + 376) = v165;
              v166 = a2[49];
              *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
              *(_QWORD *)(a1 + 392) = v166;
              LODWORD(v166) = *((_DWORD *)a2 + 101);
              *(_BYTE *)(a1 + 408) = *((_BYTE *)a2 + 408);
              *(_DWORD *)(a1 + 404) = v166;
              LODWORD(v166) = *((_DWORD *)a2 + 103);
              *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
              *(_DWORD *)(a1 + 412) = v166;
              LODWORD(v166) = *((_DWORD *)a2 + 105);
              *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
              *(_DWORD *)(a1 + 420) = v166;
              goto LABEL_34;
            }
            outlined destroy of ConnectionTCPInfoMetrics(a1 + 176);
            goto LABEL_31;
          }
          if (v20 == 1)
          {
LABEL_31:
            v27 = (void *)(a1 + 176);
            v28 = a2 + 22;
            goto LABEL_32;
          }
LABEL_28:
          *(_QWORD *)(a1 + 176) = a2[22];
          *(_QWORD *)(a1 + 184) = a2[23];
          *(_QWORD *)(a1 + 192) = a2[24];
          *(_QWORD *)(a1 + 200) = a2[25];
          *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
          v30 = a2[27];
          *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
          *(_QWORD *)(a1 + 216) = v30;
          v31 = a2[29];
          *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
          *(_QWORD *)(a1 + 232) = v31;
          v32 = a2[31];
          *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
          *(_QWORD *)(a1 + 248) = v32;
          v33 = a2[33];
          *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
          *(_QWORD *)(a1 + 264) = v33;
          v34 = a2[35];
          *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
          *(_QWORD *)(a1 + 280) = v34;
          v35 = a2[37];
          *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
          *(_QWORD *)(a1 + 296) = v35;
          v36 = a2[39];
          *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
          *(_QWORD *)(a1 + 312) = v36;
          v37 = a2[41];
          *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
          *(_QWORD *)(a1 + 328) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 85);
          *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
          *(_DWORD *)(a1 + 340) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 87);
          *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
          *(_DWORD *)(a1 + 348) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 89);
          *(_BYTE *)(a1 + 360) = *((_BYTE *)a2 + 360);
          *(_DWORD *)(a1 + 356) = v37;
          LODWORD(v37) = *((_DWORD *)a2 + 91);
          *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
          *(_DWORD *)(a1 + 364) = v37;
          v38 = a2[47];
          *(_BYTE *)(a1 + 384) = *((_BYTE *)a2 + 384);
          *(_QWORD *)(a1 + 376) = v38;
          v39 = a2[49];
          *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
          *(_QWORD *)(a1 + 392) = v39;
          LODWORD(v39) = *((_DWORD *)a2 + 101);
          *(_BYTE *)(a1 + 408) = *((_BYTE *)a2 + 408);
          *(_DWORD *)(a1 + 404) = v39;
          LODWORD(v39) = *((_DWORD *)a2 + 103);
          *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
          *(_DWORD *)(a1 + 412) = v39;
          LODWORD(v39) = *((_DWORD *)a2 + 105);
          *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
          *(_DWORD *)(a1 + 420) = v39;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_34:
          *(_QWORD *)(a1 + 432) = a2[54];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 440) = a2[55];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v40 = (void *)a2[56];
          v41 = *(void **)(a1 + 448);
          *(_QWORD *)(a1 + 448) = v40;
          v42 = v40;

          goto LABEL_37;
        }
        outlined destroy of ConnectionInterfaceReport(a1 + 136);
      }
      else if (v19)
      {
        *(_QWORD *)(a1 + 136) = a2[17];
        *(_QWORD *)(a1 + 144) = a2[18];
        *(_QWORD *)(a1 + 152) = a2[19];
        *(_QWORD *)(a1 + 160) = a2[20];
        *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
        *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
        v26 = a2[23];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v26 == 1)
        {
          v27 = (void *)(a1 + 176);
          v28 = a2 + 22;
LABEL_32:
          v29 = 249;
          goto LABEL_33;
        }
        goto LABEL_28;
      }
      v27 = (void *)(a1 + 136);
      v28 = a2 + 17;
      v29 = 289;
LABEL_33:
      memcpy(v27, v28, v29);
      goto LABEL_34;
    }
    outlined destroy of ConnectionPreparationReport(a1 + 96);
LABEL_20:
    memcpy((void *)(a1 + 96), a2 + 12, 0x168uLL);
    goto LABEL_37;
  }
  if (!v18)
    goto LABEL_20;
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_BYTE *)(a1 + 129) = *((_BYTE *)a2 + 129);
  *(_BYTE *)(a1 + 130) = *((_BYTE *)a2 + 130);
  *(_BYTE *)(a1 + 131) = *((_BYTE *)a2 + 131);
  *(_BYTE *)(a1 + 132) = *((_BYTE *)a2 + 132);
  v21 = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v21)
  {
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = a2[20];
    *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
    *(_DWORD *)(a1 + 172) = *((_DWORD *)a2 + 43);
    v22 = a2[23];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22 != 1)
    {
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_QWORD *)(a1 + 184) = a2[23];
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_QWORD *)(a1 + 200) = a2[25];
      *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
      v43 = a2[27];
      *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
      *(_QWORD *)(a1 + 216) = v43;
      v44 = a2[29];
      *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
      *(_QWORD *)(a1 + 232) = v44;
      v45 = a2[31];
      *(_BYTE *)(a1 + 256) = *((_BYTE *)a2 + 256);
      *(_QWORD *)(a1 + 248) = v45;
      v46 = a2[33];
      *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
      *(_QWORD *)(a1 + 264) = v46;
      v47 = a2[35];
      *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
      *(_QWORD *)(a1 + 280) = v47;
      v48 = a2[37];
      *(_BYTE *)(a1 + 304) = *((_BYTE *)a2 + 304);
      *(_QWORD *)(a1 + 296) = v48;
      v49 = a2[39];
      *(_BYTE *)(a1 + 320) = *((_BYTE *)a2 + 320);
      *(_QWORD *)(a1 + 312) = v49;
      v50 = a2[41];
      *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
      *(_QWORD *)(a1 + 328) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 85);
      *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
      *(_DWORD *)(a1 + 340) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 87);
      *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
      *(_DWORD *)(a1 + 348) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 89);
      *(_BYTE *)(a1 + 360) = *((_BYTE *)a2 + 360);
      *(_DWORD *)(a1 + 356) = v50;
      LODWORD(v50) = *((_DWORD *)a2 + 91);
      *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
      *(_DWORD *)(a1 + 364) = v50;
      v51 = a2[47];
      *(_BYTE *)(a1 + 384) = *((_BYTE *)a2 + 384);
      *(_QWORD *)(a1 + 376) = v51;
      v52 = a2[49];
      *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
      *(_QWORD *)(a1 + 392) = v52;
      LODWORD(v52) = *((_DWORD *)a2 + 101);
      *(_BYTE *)(a1 + 408) = *((_BYTE *)a2 + 408);
      *(_DWORD *)(a1 + 404) = v52;
      LODWORD(v52) = *((_DWORD *)a2 + 103);
      *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
      *(_DWORD *)(a1 + 412) = v52;
      LODWORD(v52) = *((_DWORD *)a2 + 105);
      *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 424);
      *(_DWORD *)(a1 + 420) = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_36;
    }
    v23 = (void *)(a1 + 176);
    v24 = a2 + 22;
    v25 = 249;
  }
  else
  {
    v23 = (void *)(a1 + 136);
    v24 = a2 + 17;
    v25 = 289;
  }
  memcpy(v23, v24, v25);
LABEL_36:
  *(_QWORD *)(a1 + 432) = a2[54];
  *(_QWORD *)(a1 + 440) = a2[55];
  v53 = (void *)a2[56];
  *(_QWORD *)(a1 + 448) = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v54 = v53;
LABEL_37:
  v55 = a2[64];
  if (*(_QWORD *)(a1 + 512))
  {
    if (v55)
    {
      *(_QWORD *)(a1 + 456) = a2[57];
      *(_QWORD *)(a1 + 464) = a2[58];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v56 = *((_DWORD *)a2 + 118);
      *(_BYTE *)(a1 + 476) = *((_BYTE *)a2 + 476);
      *(_DWORD *)(a1 + 472) = v56;
      v57 = a2[60];
      *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
      *(_QWORD *)(a1 + 480) = v57;
      v58 = a2[62];
      *(_BYTE *)(a1 + 504) = *((_BYTE *)a2 + 504);
      *(_QWORD *)(a1 + 496) = v58;
      *(_QWORD *)(a1 + 512) = a2[64];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 520) = a2[65];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 528) = *((_BYTE *)a2 + 528);
      *(_BYTE *)(a1 + 529) = *((_BYTE *)a2 + 529);
      *(_QWORD *)(a1 + 536) = a2[67];
      *(_QWORD *)(a1 + 544) = a2[68];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 552) = *((_DWORD *)a2 + 138);
      *(_DWORD *)(a1 + 556) = *((_DWORD *)a2 + 139);
      v59 = (void *)a2[70];
      v60 = *(void **)(a1 + 560);
      *(_QWORD *)(a1 + 560) = v59;
      v61 = v59;

      goto LABEL_44;
    }
    outlined destroy of ConnectionEstablishmentReport(a1 + 456);
  }
  else if (v55)
  {
    *(_QWORD *)(a1 + 456) = a2[57];
    *(_QWORD *)(a1 + 464) = a2[58];
    v62 = *((_DWORD *)a2 + 118);
    *(_BYTE *)(a1 + 476) = *((_BYTE *)a2 + 476);
    *(_DWORD *)(a1 + 472) = v62;
    v63 = a2[60];
    *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
    *(_QWORD *)(a1 + 480) = v63;
    v64 = a2[62];
    *(_BYTE *)(a1 + 504) = *((_BYTE *)a2 + 504);
    *(_QWORD *)(a1 + 496) = v64;
    *(_QWORD *)(a1 + 512) = a2[64];
    *(_QWORD *)(a1 + 520) = a2[65];
    *(_BYTE *)(a1 + 528) = *((_BYTE *)a2 + 528);
    *(_BYTE *)(a1 + 529) = *((_BYTE *)a2 + 529);
    *(_QWORD *)(a1 + 536) = a2[67];
    *(_QWORD *)(a1 + 544) = a2[68];
    *(_DWORD *)(a1 + 552) = *((_DWORD *)a2 + 138);
    *(_DWORD *)(a1 + 556) = *((_DWORD *)a2 + 139);
    v65 = (void *)a2[70];
    *(_QWORD *)(a1 + 560) = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v66 = v65;
    goto LABEL_44;
  }
  memcpy((void *)(a1 + 456), a2 + 57, 0x70uLL);
LABEL_44:
  v67 = a2[73];
  if (!*(_QWORD *)(a1 + 584))
  {
    if (!v67)
      goto LABEL_53;
    *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
    *(_QWORD *)(a1 + 576) = a2[72];
    *(_QWORD *)(a1 + 584) = a2[73];
    *(_QWORD *)(a1 + 592) = a2[74];
    *(_QWORD *)(a1 + 600) = a2[75];
    v85 = a2[89];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v85)
    {
      v86 = *((_DWORD *)a2 + 152);
      *(_BYTE *)(a1 + 612) = *((_BYTE *)a2 + 612);
      *(_DWORD *)(a1 + 608) = v86;
      *(_QWORD *)(a1 + 616) = a2[77];
      *(_QWORD *)(a1 + 624) = a2[78];
      v87 = a2[79];
      *(_BYTE *)(a1 + 640) = *((_BYTE *)a2 + 640);
      *(_QWORD *)(a1 + 632) = v87;
      *(_QWORD *)(a1 + 648) = a2[81];
      *(_QWORD *)(a1 + 656) = a2[82];
      *(_QWORD *)(a1 + 664) = a2[83];
      *(_QWORD *)(a1 + 672) = a2[84];
      *(_QWORD *)(a1 + 680) = a2[85];
      *(_QWORD *)(a1 + 688) = a2[86];
      LODWORD(v87) = *((_DWORD *)a2 + 174);
      *(_BYTE *)(a1 + 700) = *((_BYTE *)a2 + 700);
      *(_DWORD *)(a1 + 696) = v87;
      LODWORD(v87) = *((_DWORD *)a2 + 176);
      *(_BYTE *)(a1 + 708) = *((_BYTE *)a2 + 708);
      *(_DWORD *)(a1 + 704) = v87;
      *(_QWORD *)(a1 + 712) = a2[89];
      *(_QWORD *)(a1 + 720) = a2[90];
      *(_QWORD *)(a1 + 728) = a2[91];
      v88 = a2[92];
      *(_BYTE *)(a1 + 744) = *((_BYTE *)a2 + 744);
      *(_QWORD *)(a1 + 736) = v88;
      v89 = a2[94];
      *(_BYTE *)(a1 + 760) = *((_BYTE *)a2 + 760);
      *(_QWORD *)(a1 + 752) = v89;
      v90 = a2[96];
      *(_BYTE *)(a1 + 776) = *((_BYTE *)a2 + 776);
      *(_QWORD *)(a1 + 768) = v90;
      v91 = a2[98];
      *(_BYTE *)(a1 + 792) = *((_BYTE *)a2 + 792);
      *(_QWORD *)(a1 + 784) = v91;
      v92 = a2[100];
      *(_BYTE *)(a1 + 808) = *((_BYTE *)a2 + 808);
      *(_QWORD *)(a1 + 800) = v92;
      v93 = a2[102];
      *(_BYTE *)(a1 + 824) = *((_BYTE *)a2 + 824);
      *(_QWORD *)(a1 + 816) = v93;
      *(_QWORD *)(a1 + 832) = a2[104];
      *(_QWORD *)(a1 + 840) = a2[105];
      v94 = a2[106];
      *(_BYTE *)(a1 + 856) = *((_BYTE *)a2 + 856);
      *(_QWORD *)(a1 + 848) = v94;
      v95 = a2[108];
      *(_BYTE *)(a1 + 872) = *((_BYTE *)a2 + 872);
      *(_QWORD *)(a1 + 864) = v95;
      *(_BYTE *)(a1 + 873) = *((_BYTE *)a2 + 873);
      v96 = a2[110];
      *(_BYTE *)(a1 + 888) = *((_BYTE *)a2 + 888);
      *(_QWORD *)(a1 + 880) = v96;
      v97 = a2[112];
      *(_BYTE *)(a1 + 904) = *((_BYTE *)a2 + 904);
      *(_QWORD *)(a1 + 896) = v97;
      v98 = a2[114];
      *(_BYTE *)(a1 + 920) = *((_BYTE *)a2 + 920);
      *(_QWORD *)(a1 + 912) = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy((void *)(a1 + 608), a2 + 76, 0x139uLL);
    }
    v119 = *((_OWORD *)a2 + 58);
    *(_BYTE *)(a1 + 944) = *((_BYTE *)a2 + 944);
    *(_OWORD *)(a1 + 928) = v119;
    if (a2[120])
    {
      *(_QWORD *)(a1 + 952) = a2[119];
      *(_QWORD *)(a1 + 960) = a2[120];
      *(_QWORD *)(a1 + 968) = a2[121];
      *(_QWORD *)(a1 + 976) = a2[122];
      *(_BYTE *)(a1 + 984) = *((_BYTE *)a2 + 984);
      *(_DWORD *)(a1 + 988) = *((_DWORD *)a2 + 247);
      v120 = a2[125];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v120 != 1)
      {
        *(_QWORD *)(a1 + 992) = a2[124];
        *(_QWORD *)(a1 + 1000) = a2[125];
        *(_QWORD *)(a1 + 1008) = a2[126];
        *(_QWORD *)(a1 + 1016) = a2[127];
        *(_BYTE *)(a1 + 1024) = *((_BYTE *)a2 + 1024);
        v137 = a2[129];
        *(_BYTE *)(a1 + 1040) = *((_BYTE *)a2 + 1040);
        *(_QWORD *)(a1 + 1032) = v137;
        v138 = a2[131];
        *(_BYTE *)(a1 + 1056) = *((_BYTE *)a2 + 1056);
        *(_QWORD *)(a1 + 1048) = v138;
        v139 = a2[133];
        *(_BYTE *)(a1 + 1072) = *((_BYTE *)a2 + 1072);
        *(_QWORD *)(a1 + 1064) = v139;
        v140 = a2[135];
        *(_BYTE *)(a1 + 1088) = *((_BYTE *)a2 + 1088);
        *(_QWORD *)(a1 + 1080) = v140;
        v141 = a2[137];
        *(_BYTE *)(a1 + 1104) = *((_BYTE *)a2 + 1104);
        *(_QWORD *)(a1 + 1096) = v141;
        v142 = a2[139];
        *(_BYTE *)(a1 + 1120) = *((_BYTE *)a2 + 1120);
        *(_QWORD *)(a1 + 1112) = v142;
        v143 = a2[141];
        *(_BYTE *)(a1 + 1136) = *((_BYTE *)a2 + 1136);
        *(_QWORD *)(a1 + 1128) = v143;
        v144 = a2[143];
        *(_BYTE *)(a1 + 1152) = *((_BYTE *)a2 + 1152);
        *(_QWORD *)(a1 + 1144) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 289);
        *(_BYTE *)(a1 + 1160) = *((_BYTE *)a2 + 1160);
        *(_DWORD *)(a1 + 1156) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 291);
        *(_BYTE *)(a1 + 1168) = *((_BYTE *)a2 + 1168);
        *(_DWORD *)(a1 + 1164) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 293);
        *(_BYTE *)(a1 + 1176) = *((_BYTE *)a2 + 1176);
        *(_DWORD *)(a1 + 1172) = v144;
        LODWORD(v144) = *((_DWORD *)a2 + 295);
        *(_BYTE *)(a1 + 1184) = *((_BYTE *)a2 + 1184);
        *(_DWORD *)(a1 + 1180) = v144;
        v145 = a2[149];
        *(_BYTE *)(a1 + 1200) = *((_BYTE *)a2 + 1200);
        *(_QWORD *)(a1 + 1192) = v145;
        v146 = a2[151];
        *(_BYTE *)(a1 + 1216) = *((_BYTE *)a2 + 1216);
        *(_QWORD *)(a1 + 1208) = v146;
        LODWORD(v146) = *((_DWORD *)a2 + 305);
        *(_BYTE *)(a1 + 1224) = *((_BYTE *)a2 + 1224);
        *(_DWORD *)(a1 + 1220) = v146;
        LODWORD(v146) = *((_DWORD *)a2 + 307);
        *(_BYTE *)(a1 + 1232) = *((_BYTE *)a2 + 1232);
        *(_DWORD *)(a1 + 1228) = v146;
        LODWORD(v146) = *((_DWORD *)a2 + 309);
        *(_BYTE *)(a1 + 1240) = *((_BYTE *)a2 + 1240);
        *(_DWORD *)(a1 + 1236) = v146;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_82;
      }
      v121 = (void *)(a1 + 992);
      v122 = a2 + 124;
      v123 = 249;
    }
    else
    {
      v121 = (void *)(a1 + 952);
      v122 = a2 + 119;
      v123 = 289;
    }
    memcpy(v121, v122, v123);
LABEL_82:
    *(_QWORD *)(a1 + 1248) = a2[156];
    *(_QWORD *)(a1 + 1256) = a2[157];
    *(_DWORD *)(a1 + 1264) = *((_DWORD *)a2 + 316);
    v147 = (void *)a2[159];
    *(_QWORD *)(a1 + 1272) = v147;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v148 = v147;
    goto LABEL_83;
  }
  if (v67)
  {
    *(_DWORD *)(a1 + 568) = *((_DWORD *)a2 + 142);
    *(_QWORD *)(a1 + 576) = a2[72];
    *(_QWORD *)(a1 + 584) = a2[73];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 592) = a2[74];
    *(_QWORD *)(a1 + 600) = a2[75];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v68 = (_DWORD *)(a1 + 608);
    v69 = (int *)(a2 + 76);
    v70 = a2[89];
    if (*(_QWORD *)(a1 + 712))
    {
      if (v70)
      {
        v71 = *v69;
        *(_BYTE *)(a1 + 612) = *((_BYTE *)a2 + 612);
        *v68 = v71;
        *(_QWORD *)(a1 + 616) = a2[77];
        *(_QWORD *)(a1 + 624) = a2[78];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v72 = a2[79];
        *(_BYTE *)(a1 + 640) = *((_BYTE *)a2 + 640);
        *(_QWORD *)(a1 + 632) = v72;
        *(_QWORD *)(a1 + 648) = a2[81];
        *(_QWORD *)(a1 + 656) = a2[82];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 664) = a2[83];
        *(_QWORD *)(a1 + 672) = a2[84];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 680) = a2[85];
        *(_QWORD *)(a1 + 688) = a2[86];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v73 = *((_DWORD *)a2 + 174);
        *(_BYTE *)(a1 + 700) = *((_BYTE *)a2 + 700);
        *(_DWORD *)(a1 + 696) = v73;
        LOBYTE(v73) = *((_BYTE *)a2 + 708);
        *(_DWORD *)(a1 + 704) = *((_DWORD *)a2 + 176);
        *(_BYTE *)(a1 + 708) = v73;
        *(_QWORD *)(a1 + 712) = a2[89];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 720) = a2[90];
        *(_QWORD *)(a1 + 728) = a2[91];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v74 = a2[92];
        *(_BYTE *)(a1 + 744) = *((_BYTE *)a2 + 744);
        *(_QWORD *)(a1 + 736) = v74;
        v75 = a2[94];
        *(_BYTE *)(a1 + 760) = *((_BYTE *)a2 + 760);
        *(_QWORD *)(a1 + 752) = v75;
        v76 = a2[96];
        *(_BYTE *)(a1 + 776) = *((_BYTE *)a2 + 776);
        *(_QWORD *)(a1 + 768) = v76;
        v77 = a2[98];
        *(_BYTE *)(a1 + 792) = *((_BYTE *)a2 + 792);
        *(_QWORD *)(a1 + 784) = v77;
        v78 = a2[100];
        *(_BYTE *)(a1 + 808) = *((_BYTE *)a2 + 808);
        *(_QWORD *)(a1 + 800) = v78;
        v79 = a2[102];
        *(_BYTE *)(a1 + 824) = *((_BYTE *)a2 + 824);
        *(_QWORD *)(a1 + 816) = v79;
        *(_QWORD *)(a1 + 832) = a2[104];
        *(_QWORD *)(a1 + 840) = a2[105];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v80 = a2[106];
        *(_BYTE *)(a1 + 856) = *((_BYTE *)a2 + 856);
        *(_QWORD *)(a1 + 848) = v80;
        v81 = a2[108];
        *(_BYTE *)(a1 + 872) = *((_BYTE *)a2 + 872);
        *(_QWORD *)(a1 + 864) = v81;
        *(_BYTE *)(a1 + 873) = *((_BYTE *)a2 + 873);
        v82 = a2[110];
        *(_BYTE *)(a1 + 888) = *((_BYTE *)a2 + 888);
        *(_QWORD *)(a1 + 880) = v82;
        v83 = a2[112];
        *(_BYTE *)(a1 + 904) = *((_BYTE *)a2 + 904);
        *(_QWORD *)(a1 + 896) = v83;
        v84 = a2[114];
        *(_BYTE *)(a1 + 920) = *((_BYTE *)a2 + 920);
        *(_QWORD *)(a1 + 912) = v84;
        goto LABEL_58;
      }
      outlined destroy of ConnectionNetworkReport(a1 + 608);
    }
    else if (v70)
    {
      v99 = *v69;
      *(_BYTE *)(a1 + 612) = *((_BYTE *)a2 + 612);
      *v68 = v99;
      *(_QWORD *)(a1 + 616) = a2[77];
      *(_QWORD *)(a1 + 624) = a2[78];
      v100 = a2[79];
      *(_BYTE *)(a1 + 640) = *((_BYTE *)a2 + 640);
      *(_QWORD *)(a1 + 632) = v100;
      *(_QWORD *)(a1 + 648) = a2[81];
      *(_QWORD *)(a1 + 656) = a2[82];
      *(_QWORD *)(a1 + 664) = a2[83];
      *(_QWORD *)(a1 + 672) = a2[84];
      *(_QWORD *)(a1 + 680) = a2[85];
      *(_QWORD *)(a1 + 688) = a2[86];
      LODWORD(v100) = *((_DWORD *)a2 + 174);
      *(_BYTE *)(a1 + 700) = *((_BYTE *)a2 + 700);
      *(_DWORD *)(a1 + 696) = v100;
      LODWORD(v100) = *((_DWORD *)a2 + 176);
      *(_BYTE *)(a1 + 708) = *((_BYTE *)a2 + 708);
      *(_DWORD *)(a1 + 704) = v100;
      *(_QWORD *)(a1 + 712) = a2[89];
      *(_QWORD *)(a1 + 720) = a2[90];
      *(_QWORD *)(a1 + 728) = a2[91];
      v101 = a2[92];
      *(_BYTE *)(a1 + 744) = *((_BYTE *)a2 + 744);
      *(_QWORD *)(a1 + 736) = v101;
      v102 = a2[94];
      *(_BYTE *)(a1 + 760) = *((_BYTE *)a2 + 760);
      *(_QWORD *)(a1 + 752) = v102;
      v103 = a2[96];
      *(_BYTE *)(a1 + 776) = *((_BYTE *)a2 + 776);
      *(_QWORD *)(a1 + 768) = v103;
      v104 = a2[98];
      *(_BYTE *)(a1 + 792) = *((_BYTE *)a2 + 792);
      *(_QWORD *)(a1 + 784) = v104;
      v105 = a2[100];
      *(_BYTE *)(a1 + 808) = *((_BYTE *)a2 + 808);
      *(_QWORD *)(a1 + 800) = v105;
      v106 = a2[102];
      *(_BYTE *)(a1 + 824) = *((_BYTE *)a2 + 824);
      *(_QWORD *)(a1 + 816) = v106;
      *(_QWORD *)(a1 + 832) = a2[104];
      *(_QWORD *)(a1 + 840) = a2[105];
      v107 = a2[106];
      *(_BYTE *)(a1 + 856) = *((_BYTE *)a2 + 856);
      *(_QWORD *)(a1 + 848) = v107;
      v108 = a2[108];
      *(_BYTE *)(a1 + 872) = *((_BYTE *)a2 + 872);
      *(_QWORD *)(a1 + 864) = v108;
      *(_BYTE *)(a1 + 873) = *((_BYTE *)a2 + 873);
      v109 = a2[110];
      *(_BYTE *)(a1 + 888) = *((_BYTE *)a2 + 888);
      *(_QWORD *)(a1 + 880) = v109;
      v110 = a2[112];
      *(_BYTE *)(a1 + 904) = *((_BYTE *)a2 + 904);
      *(_QWORD *)(a1 + 896) = v110;
      v111 = a2[114];
      *(_BYTE *)(a1 + 920) = *((_BYTE *)a2 + 920);
      *(_QWORD *)(a1 + 912) = v111;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_58;
    }
    memcpy((void *)(a1 + 608), a2 + 76, 0x139uLL);
LABEL_58:
    v112 = *((_OWORD *)a2 + 58);
    *(_BYTE *)(a1 + 944) = *((_BYTE *)a2 + 944);
    *(_OWORD *)(a1 + 928) = v112;
    v113 = a2[120];
    if (*(_QWORD *)(a1 + 960))
    {
      if (v113)
      {
        *(_QWORD *)(a1 + 952) = a2[119];
        *(_QWORD *)(a1 + 960) = a2[120];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 968) = a2[121];
        *(_QWORD *)(a1 + 976) = a2[122];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_BYTE *)(a1 + 984) = *((_BYTE *)a2 + 984);
        *(_DWORD *)(a1 + 988) = *((_DWORD *)a2 + 247);
        v114 = a2[125];
        if (*(_QWORD *)(a1 + 1000) != 1)
        {
          if (v114 != 1)
          {
            *(_QWORD *)(a1 + 992) = a2[124];
            *(_QWORD *)(a1 + 1000) = a2[125];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(a1 + 1008) = a2[126];
            *(_QWORD *)(a1 + 1016) = a2[127];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(_BYTE *)(a1 + 1024) = *((_BYTE *)a2 + 1024);
            v167 = a2[129];
            *(_BYTE *)(a1 + 1040) = *((_BYTE *)a2 + 1040);
            *(_QWORD *)(a1 + 1032) = v167;
            v168 = a2[131];
            *(_BYTE *)(a1 + 1056) = *((_BYTE *)a2 + 1056);
            *(_QWORD *)(a1 + 1048) = v168;
            v169 = a2[133];
            *(_BYTE *)(a1 + 1072) = *((_BYTE *)a2 + 1072);
            *(_QWORD *)(a1 + 1064) = v169;
            v170 = a2[135];
            *(_BYTE *)(a1 + 1088) = *((_BYTE *)a2 + 1088);
            *(_QWORD *)(a1 + 1080) = v170;
            v171 = a2[137];
            *(_BYTE *)(a1 + 1104) = *((_BYTE *)a2 + 1104);
            *(_QWORD *)(a1 + 1096) = v171;
            v172 = a2[139];
            *(_BYTE *)(a1 + 1120) = *((_BYTE *)a2 + 1120);
            *(_QWORD *)(a1 + 1112) = v172;
            v173 = a2[141];
            *(_BYTE *)(a1 + 1136) = *((_BYTE *)a2 + 1136);
            *(_QWORD *)(a1 + 1128) = v173;
            v174 = a2[143];
            *(_BYTE *)(a1 + 1152) = *((_BYTE *)a2 + 1152);
            *(_QWORD *)(a1 + 1144) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 289);
            *(_BYTE *)(a1 + 1160) = *((_BYTE *)a2 + 1160);
            *(_DWORD *)(a1 + 1156) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 291);
            *(_BYTE *)(a1 + 1168) = *((_BYTE *)a2 + 1168);
            *(_DWORD *)(a1 + 1164) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 293);
            *(_BYTE *)(a1 + 1176) = *((_BYTE *)a2 + 1176);
            *(_DWORD *)(a1 + 1172) = v174;
            LODWORD(v174) = *((_DWORD *)a2 + 295);
            *(_BYTE *)(a1 + 1184) = *((_BYTE *)a2 + 1184);
            *(_DWORD *)(a1 + 1180) = v174;
            v175 = a2[149];
            *(_BYTE *)(a1 + 1200) = *((_BYTE *)a2 + 1200);
            *(_QWORD *)(a1 + 1192) = v175;
            v176 = a2[151];
            *(_BYTE *)(a1 + 1216) = *((_BYTE *)a2 + 1216);
            *(_QWORD *)(a1 + 1208) = v176;
            LODWORD(v176) = *((_DWORD *)a2 + 305);
            *(_BYTE *)(a1 + 1224) = *((_BYTE *)a2 + 1224);
            *(_DWORD *)(a1 + 1220) = v176;
            LODWORD(v176) = *((_DWORD *)a2 + 307);
            *(_BYTE *)(a1 + 1232) = *((_BYTE *)a2 + 1232);
            *(_DWORD *)(a1 + 1228) = v176;
            LODWORD(v176) = *((_DWORD *)a2 + 309);
            *(_BYTE *)(a1 + 1240) = *((_BYTE *)a2 + 1240);
            *(_DWORD *)(a1 + 1236) = v176;
            goto LABEL_80;
          }
          outlined destroy of ConnectionTCPInfoMetrics(a1 + 992);
          goto LABEL_77;
        }
        if (v114 == 1)
        {
LABEL_77:
          v116 = (void *)(a1 + 992);
          v117 = a2 + 124;
          goto LABEL_78;
        }
LABEL_74:
        *(_QWORD *)(a1 + 992) = a2[124];
        *(_QWORD *)(a1 + 1000) = a2[125];
        *(_QWORD *)(a1 + 1008) = a2[126];
        *(_QWORD *)(a1 + 1016) = a2[127];
        *(_BYTE *)(a1 + 1024) = *((_BYTE *)a2 + 1024);
        v124 = a2[129];
        *(_BYTE *)(a1 + 1040) = *((_BYTE *)a2 + 1040);
        *(_QWORD *)(a1 + 1032) = v124;
        v125 = a2[131];
        *(_BYTE *)(a1 + 1056) = *((_BYTE *)a2 + 1056);
        *(_QWORD *)(a1 + 1048) = v125;
        v126 = a2[133];
        *(_BYTE *)(a1 + 1072) = *((_BYTE *)a2 + 1072);
        *(_QWORD *)(a1 + 1064) = v126;
        v127 = a2[135];
        *(_BYTE *)(a1 + 1088) = *((_BYTE *)a2 + 1088);
        *(_QWORD *)(a1 + 1080) = v127;
        v128 = a2[137];
        *(_BYTE *)(a1 + 1104) = *((_BYTE *)a2 + 1104);
        *(_QWORD *)(a1 + 1096) = v128;
        v129 = a2[139];
        *(_BYTE *)(a1 + 1120) = *((_BYTE *)a2 + 1120);
        *(_QWORD *)(a1 + 1112) = v129;
        v130 = a2[141];
        *(_BYTE *)(a1 + 1136) = *((_BYTE *)a2 + 1136);
        *(_QWORD *)(a1 + 1128) = v130;
        v131 = a2[143];
        *(_BYTE *)(a1 + 1152) = *((_BYTE *)a2 + 1152);
        *(_QWORD *)(a1 + 1144) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 289);
        *(_BYTE *)(a1 + 1160) = *((_BYTE *)a2 + 1160);
        *(_DWORD *)(a1 + 1156) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 291);
        *(_BYTE *)(a1 + 1168) = *((_BYTE *)a2 + 1168);
        *(_DWORD *)(a1 + 1164) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 293);
        *(_BYTE *)(a1 + 1176) = *((_BYTE *)a2 + 1176);
        *(_DWORD *)(a1 + 1172) = v131;
        LODWORD(v131) = *((_DWORD *)a2 + 295);
        *(_BYTE *)(a1 + 1184) = *((_BYTE *)a2 + 1184);
        *(_DWORD *)(a1 + 1180) = v131;
        v132 = a2[149];
        *(_BYTE *)(a1 + 1200) = *((_BYTE *)a2 + 1200);
        *(_QWORD *)(a1 + 1192) = v132;
        v133 = a2[151];
        *(_BYTE *)(a1 + 1216) = *((_BYTE *)a2 + 1216);
        *(_QWORD *)(a1 + 1208) = v133;
        LODWORD(v133) = *((_DWORD *)a2 + 305);
        *(_BYTE *)(a1 + 1224) = *((_BYTE *)a2 + 1224);
        *(_DWORD *)(a1 + 1220) = v133;
        LODWORD(v133) = *((_DWORD *)a2 + 307);
        *(_BYTE *)(a1 + 1232) = *((_BYTE *)a2 + 1232);
        *(_DWORD *)(a1 + 1228) = v133;
        LODWORD(v133) = *((_DWORD *)a2 + 309);
        *(_BYTE *)(a1 + 1240) = *((_BYTE *)a2 + 1240);
        *(_DWORD *)(a1 + 1236) = v133;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_80:
        *(_QWORD *)(a1 + 1248) = a2[156];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 1256) = a2[157];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_DWORD *)(a1 + 1264) = *((_DWORD *)a2 + 316);
        v134 = (void *)a2[159];
        v135 = *(void **)(a1 + 1272);
        *(_QWORD *)(a1 + 1272) = v134;
        v136 = v134;

        goto LABEL_83;
      }
      outlined destroy of ConnectionInterfaceReport(a1 + 952);
    }
    else if (v113)
    {
      *(_QWORD *)(a1 + 952) = a2[119];
      *(_QWORD *)(a1 + 960) = a2[120];
      *(_QWORD *)(a1 + 968) = a2[121];
      *(_QWORD *)(a1 + 976) = a2[122];
      *(_BYTE *)(a1 + 984) = *((_BYTE *)a2 + 984);
      *(_DWORD *)(a1 + 988) = *((_DWORD *)a2 + 247);
      v115 = a2[125];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v115 == 1)
      {
        v116 = (void *)(a1 + 992);
        v117 = a2 + 124;
LABEL_78:
        v118 = 249;
        goto LABEL_79;
      }
      goto LABEL_74;
    }
    v116 = (void *)(a1 + 952);
    v117 = a2 + 119;
    v118 = 289;
LABEL_79:
    memcpy(v116, v117, v118);
    goto LABEL_80;
  }
  outlined destroy of ConnectionSnapshotReport(a1 + 568);
LABEL_53:
  memcpy((void *)(a1 + 568), a2 + 71, 0x2C8uLL);
LABEL_83:
  *(_QWORD *)(a1 + 1280) = a2[160];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1288) = a2[161];
  *(_QWORD *)(a1 + 1296) = a2[162];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1304) = a2[163];
  *(_QWORD *)(a1 + 1312) = a2[164];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v149 = a2[165];
  *(_BYTE *)(a1 + 1328) = *((_BYTE *)a2 + 1328);
  *(_QWORD *)(a1 + 1320) = v149;
  v150 = a2[167];
  *(_BYTE *)(a1 + 1344) = *((_BYTE *)a2 + 1344);
  *(_QWORD *)(a1 + 1336) = v150;
  v151 = a2[169];
  *(_BYTE *)(a1 + 1360) = *((_BYTE *)a2 + 1360);
  *(_QWORD *)(a1 + 1352) = v151;
  *(_QWORD *)(a1 + 1368) = a2[171];
  *(_QWORD *)(a1 + 1376) = a2[172];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v152 = *((_DWORD *)a2 + 346);
  *(_BYTE *)(a1 + 1388) = *((_BYTE *)a2 + 1388);
  *(_DWORD *)(a1 + 1384) = v152;
  v153 = a2[174];
  *(_BYTE *)(a1 + 1400) = *((_BYTE *)a2 + 1400);
  *(_QWORD *)(a1 + 1392) = v153;
  v154 = a2[176];
  *(_BYTE *)(a1 + 1416) = *((_BYTE *)a2 + 1416);
  *(_QWORD *)(a1 + 1408) = v154;
  v155 = a2[178];
  *(_BYTE *)(a1 + 1432) = *((_BYTE *)a2 + 1432);
  *(_QWORD *)(a1 + 1424) = v155;
  return a1;
}

uint64_t outlined destroy of ConnectionHTTPHeaderReport(uint64_t a1)
{
  destroy for ConnectionHTTPHeaderReport(a1);
  return a1;
}

uint64_t outlined destroy of ConnectionPreparationReport(uint64_t a1)
{
  destroy for ConnectionPreparationReport(a1);
  return a1;
}

uint64_t outlined destroy of ConnectionEstablishmentReport(uint64_t a1)
{
  destroy for ConnectionEstablishmentReport(a1);
  return a1;
}

uint64_t outlined destroy of ConnectionSnapshotReport(uint64_t a1)
{
  destroy for ConnectionSnapshotReport(a1);
  return a1;
}

void *__swift_memcpy1433_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x599uLL);
}

_QWORD *assignWithTake for ConnectionMetrics(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  size_t v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *a1 = *a2;
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  *((_DWORD *)a1 + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)a1 + 52) = *((_BYTE *)a2 + 52);
  if (a1[11])
  {
    if (a2[11])
    {
      v5 = a2[8];
      a1[7] = a2[7];
      a1[8] = v5;
      swift_bridgeObjectRelease();
      v6 = a2[10];
      a1[9] = a2[9];
      a1[10] = v6;
      swift_bridgeObjectRelease();
      v7 = (void *)a1[11];
      a1[11] = a2[11];

      goto LABEL_6;
    }
    outlined destroy of ConnectionHTTPHeaderReport((uint64_t)(a1 + 7));
  }
  v8 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 9) = v8;
  a1[11] = a2[11];
LABEL_6:
  if (!a1[54])
  {
LABEL_15:
    memcpy(a1 + 12, a2 + 12, 0x168uLL);
    goto LABEL_20;
  }
  if (!a2[54])
  {
    outlined destroy of ConnectionPreparationReport((uint64_t)(a1 + 12));
    goto LABEL_15;
  }
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  *((_BYTE *)a1 + 129) = *((_BYTE *)a2 + 129);
  *((_BYTE *)a1 + 130) = *((_BYTE *)a2 + 130);
  *((_BYTE *)a1 + 131) = *((_BYTE *)a2 + 131);
  *((_BYTE *)a1 + 132) = *((_BYTE *)a2 + 132);
  if (!a1[18])
  {
LABEL_17:
    v14 = a1 + 17;
    v15 = a2 + 17;
    v16 = 289;
    goto LABEL_18;
  }
  v11 = a2[18];
  if (!v11)
  {
    outlined destroy of ConnectionInterfaceReport((uint64_t)(a1 + 17));
    goto LABEL_17;
  }
  a1[17] = a2[17];
  a1[18] = v11;
  swift_bridgeObjectRelease();
  v12 = a2[20];
  a1[19] = a2[19];
  a1[20] = v12;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
  *((_DWORD *)a1 + 43) = *((_DWORD *)a2 + 43);
  if (a1[23] != 1)
  {
    v13 = a2[23];
    if (v13 != 1)
    {
      a1[22] = a2[22];
      a1[23] = v13;
      swift_bridgeObjectRelease();
      v29 = a2[25];
      a1[24] = a2[24];
      a1[25] = v29;
      swift_bridgeObjectRelease();
      *((_BYTE *)a1 + 208) = *((_BYTE *)a2 + 208);
      a1[27] = a2[27];
      *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
      a1[29] = a2[29];
      *((_BYTE *)a1 + 240) = *((_BYTE *)a2 + 240);
      a1[31] = a2[31];
      *((_BYTE *)a1 + 256) = *((_BYTE *)a2 + 256);
      *((_BYTE *)a1 + 272) = *((_BYTE *)a2 + 272);
      a1[33] = a2[33];
      v30 = a2[35];
      *((_BYTE *)a1 + 288) = *((_BYTE *)a2 + 288);
      a1[35] = v30;
      a1[37] = a2[37];
      *((_BYTE *)a1 + 304) = *((_BYTE *)a2 + 304);
      a1[39] = a2[39];
      *((_BYTE *)a1 + 320) = *((_BYTE *)a2 + 320);
      a1[41] = a2[41];
      *((_BYTE *)a1 + 336) = *((_BYTE *)a2 + 336);
      *((_BYTE *)a1 + 344) = *((_BYTE *)a2 + 344);
      *((_DWORD *)a1 + 85) = *((_DWORD *)a2 + 85);
      *((_BYTE *)a1 + 352) = *((_BYTE *)a2 + 352);
      *((_DWORD *)a1 + 87) = *((_DWORD *)a2 + 87);
      *((_BYTE *)a1 + 360) = *((_BYTE *)a2 + 360);
      *((_DWORD *)a1 + 89) = *((_DWORD *)a2 + 89);
      *((_BYTE *)a1 + 368) = *((_BYTE *)a2 + 368);
      *((_DWORD *)a1 + 91) = *((_DWORD *)a2 + 91);
      *((_BYTE *)a1 + 384) = *((_BYTE *)a2 + 384);
      a1[47] = a2[47];
      v31 = a2[49];
      *((_BYTE *)a1 + 400) = *((_BYTE *)a2 + 400);
      a1[49] = v31;
      LODWORD(v31) = *((_DWORD *)a2 + 101);
      *((_BYTE *)a1 + 408) = *((_BYTE *)a2 + 408);
      *((_DWORD *)a1 + 101) = v31;
      LODWORD(v31) = *((_DWORD *)a2 + 103);
      *((_BYTE *)a1 + 416) = *((_BYTE *)a2 + 416);
      *((_DWORD *)a1 + 103) = v31;
      LODWORD(v31) = *((_DWORD *)a2 + 105);
      *((_BYTE *)a1 + 424) = *((_BYTE *)a2 + 424);
      *((_DWORD *)a1 + 105) = v31;
      goto LABEL_19;
    }
    outlined destroy of ConnectionTCPInfoMetrics((uint64_t)(a1 + 22));
  }
  v14 = a1 + 22;
  v15 = a2 + 22;
  v16 = 249;
LABEL_18:
  memcpy(v14, v15, v16);
LABEL_19:
  a1[54] = a2[54];
  swift_bridgeObjectRelease();
  a1[55] = a2[55];
  swift_bridgeObjectRelease();
  v17 = (void *)a1[56];
  a1[56] = a2[56];

LABEL_20:
  if (a1[64])
  {
    if (a2[64])
    {
      v18 = a2[58];
      a1[57] = a2[57];
      a1[58] = v18;
      swift_bridgeObjectRelease();
      *((_DWORD *)a1 + 118) = *((_DWORD *)a2 + 118);
      *((_BYTE *)a1 + 476) = *((_BYTE *)a2 + 476);
      a1[60] = a2[60];
      *((_BYTE *)a1 + 488) = *((_BYTE *)a2 + 488);
      a1[62] = a2[62];
      *((_BYTE *)a1 + 504) = *((_BYTE *)a2 + 504);
      a1[64] = a2[64];
      swift_bridgeObjectRelease();
      a1[65] = a2[65];
      swift_bridgeObjectRelease();
      *((_BYTE *)a1 + 528) = *((_BYTE *)a2 + 528);
      *((_BYTE *)a1 + 529) = *((_BYTE *)a2 + 529);
      a1[67] = a2[67];
      a1[68] = a2[68];
      swift_bridgeObjectRelease();
      a1[69] = a2[69];
      v19 = (void *)a1[70];
      a1[70] = a2[70];

      goto LABEL_25;
    }
    outlined destroy of ConnectionEstablishmentReport((uint64_t)(a1 + 57));
  }
  memcpy(a1 + 57, a2 + 57, 0x70uLL);
LABEL_25:
  if (a1[73])
  {
    v20 = a2[73];
    if (v20)
    {
      *((_DWORD *)a1 + 142) = *((_DWORD *)a2 + 142);
      a1[72] = a2[72];
      a1[73] = v20;
      swift_bridgeObjectRelease();
      a1[74] = a2[74];
      a1[75] = a2[75];
      swift_bridgeObjectRelease();
      if (a1[89])
      {
        if (a2[89])
        {
          *((_DWORD *)a1 + 152) = *((_DWORD *)a2 + 152);
          *((_BYTE *)a1 + 612) = *((_BYTE *)a2 + 612);
          a1[77] = a2[77];
          a1[78] = a2[78];
          swift_bridgeObjectRelease();
          a1[79] = a2[79];
          *((_BYTE *)a1 + 640) = *((_BYTE *)a2 + 640);
          a1[81] = a2[81];
          a1[82] = a2[82];
          swift_bridgeObjectRelease();
          a1[83] = a2[83];
          a1[84] = a2[84];
          swift_bridgeObjectRelease();
          a1[85] = a2[85];
          a1[86] = a2[86];
          swift_bridgeObjectRelease();
          *((_DWORD *)a1 + 174) = *((_DWORD *)a2 + 174);
          *((_BYTE *)a1 + 700) = *((_BYTE *)a2 + 700);
          *((_DWORD *)a1 + 176) = *((_DWORD *)a2 + 176);
          *((_BYTE *)a1 + 708) = *((_BYTE *)a2 + 708);
          a1[89] = a2[89];
          swift_bridgeObjectRelease();
          a1[90] = a2[90];
          a1[91] = a2[91];
          swift_bridgeObjectRelease();
          a1[92] = a2[92];
          *((_BYTE *)a1 + 744) = *((_BYTE *)a2 + 744);
          a1[94] = a2[94];
          *((_BYTE *)a1 + 760) = *((_BYTE *)a2 + 760);
          a1[96] = a2[96];
          *((_BYTE *)a1 + 776) = *((_BYTE *)a2 + 776);
          *((_BYTE *)a1 + 792) = *((_BYTE *)a2 + 792);
          a1[98] = a2[98];
          v21 = a2[100];
          *((_BYTE *)a1 + 808) = *((_BYTE *)a2 + 808);
          a1[100] = v21;
          a1[102] = a2[102];
          *((_BYTE *)a1 + 824) = *((_BYTE *)a2 + 824);
          a1[104] = a2[104];
          a1[105] = a2[105];
          swift_bridgeObjectRelease();
          a1[106] = a2[106];
          *((_BYTE *)a1 + 856) = *((_BYTE *)a2 + 856);
          a1[108] = a2[108];
          *((_BYTE *)a1 + 872) = *((_BYTE *)a2 + 872);
          *((_BYTE *)a1 + 873) = *((_BYTE *)a2 + 873);
          a1[110] = a2[110];
          *((_BYTE *)a1 + 888) = *((_BYTE *)a2 + 888);
          *((_BYTE *)a1 + 904) = *((_BYTE *)a2 + 904);
          a1[112] = a2[112];
          a1[114] = a2[114];
          *((_BYTE *)a1 + 920) = *((_BYTE *)a2 + 920);
          goto LABEL_34;
        }
        outlined destroy of ConnectionNetworkReport((uint64_t)(a1 + 76));
      }
      memcpy(a1 + 76, a2 + 76, 0x139uLL);
LABEL_34:
      *((_OWORD *)a1 + 58) = *((_OWORD *)a2 + 58);
      *((_BYTE *)a1 + 944) = *((_BYTE *)a2 + 944);
      if (a1[120])
      {
        v22 = a2[120];
        if (v22)
        {
          a1[119] = a2[119];
          a1[120] = v22;
          swift_bridgeObjectRelease();
          a1[121] = a2[121];
          a1[122] = a2[122];
          swift_bridgeObjectRelease();
          *((_BYTE *)a1 + 984) = *((_BYTE *)a2 + 984);
          *((_DWORD *)a1 + 247) = *((_DWORD *)a2 + 247);
          if (a1[125] != 1)
          {
            v23 = a2[125];
            if (v23 != 1)
            {
              a1[124] = a2[124];
              a1[125] = v23;
              swift_bridgeObjectRelease();
              a1[126] = a2[126];
              a1[127] = a2[127];
              swift_bridgeObjectRelease();
              *((_BYTE *)a1 + 1024) = *((_BYTE *)a2 + 1024);
              a1[129] = a2[129];
              *((_BYTE *)a1 + 1040) = *((_BYTE *)a2 + 1040);
              a1[131] = a2[131];
              *((_BYTE *)a1 + 1056) = *((_BYTE *)a2 + 1056);
              a1[133] = a2[133];
              *((_BYTE *)a1 + 1072) = *((_BYTE *)a2 + 1072);
              *((_BYTE *)a1 + 1088) = *((_BYTE *)a2 + 1088);
              a1[135] = a2[135];
              v32 = a2[137];
              *((_BYTE *)a1 + 1104) = *((_BYTE *)a2 + 1104);
              a1[137] = v32;
              a1[139] = a2[139];
              *((_BYTE *)a1 + 1120) = *((_BYTE *)a2 + 1120);
              a1[141] = a2[141];
              *((_BYTE *)a1 + 1136) = *((_BYTE *)a2 + 1136);
              a1[143] = a2[143];
              *((_BYTE *)a1 + 1152) = *((_BYTE *)a2 + 1152);
              *((_BYTE *)a1 + 1160) = *((_BYTE *)a2 + 1160);
              *((_DWORD *)a1 + 289) = *((_DWORD *)a2 + 289);
              *((_BYTE *)a1 + 1168) = *((_BYTE *)a2 + 1168);
              *((_DWORD *)a1 + 291) = *((_DWORD *)a2 + 291);
              *((_BYTE *)a1 + 1176) = *((_BYTE *)a2 + 1176);
              *((_DWORD *)a1 + 293) = *((_DWORD *)a2 + 293);
              *((_BYTE *)a1 + 1184) = *((_BYTE *)a2 + 1184);
              *((_DWORD *)a1 + 295) = *((_DWORD *)a2 + 295);
              *((_BYTE *)a1 + 1200) = *((_BYTE *)a2 + 1200);
              a1[149] = a2[149];
              v33 = a2[151];
              *((_BYTE *)a1 + 1216) = *((_BYTE *)a2 + 1216);
              a1[151] = v33;
              LODWORD(v33) = *((_DWORD *)a2 + 305);
              *((_BYTE *)a1 + 1224) = *((_BYTE *)a2 + 1224);
              *((_DWORD *)a1 + 305) = v33;
              LODWORD(v33) = *((_DWORD *)a2 + 307);
              *((_BYTE *)a1 + 1232) = *((_BYTE *)a2 + 1232);
              *((_DWORD *)a1 + 307) = v33;
              LODWORD(v33) = *((_DWORD *)a2 + 309);
              *((_BYTE *)a1 + 1240) = *((_BYTE *)a2 + 1240);
              *((_DWORD *)a1 + 309) = v33;
              goto LABEL_43;
            }
            outlined destroy of ConnectionTCPInfoMetrics((uint64_t)(a1 + 124));
          }
          v24 = a1 + 124;
          v25 = a2 + 124;
          v26 = 249;
LABEL_42:
          memcpy(v24, v25, v26);
LABEL_43:
          a1[156] = a2[156];
          swift_bridgeObjectRelease();
          a1[157] = a2[157];
          swift_bridgeObjectRelease();
          *((_DWORD *)a1 + 316) = *((_DWORD *)a2 + 316);
          v27 = (void *)a1[159];
          a1[159] = a2[159];

          goto LABEL_44;
        }
        outlined destroy of ConnectionInterfaceReport((uint64_t)(a1 + 119));
      }
      v24 = a1 + 119;
      v25 = a2 + 119;
      v26 = 289;
      goto LABEL_42;
    }
    outlined destroy of ConnectionSnapshotReport((uint64_t)(a1 + 71));
  }
  memcpy(a1 + 71, a2 + 71, 0x2C8uLL);
LABEL_44:
  a1[160] = a2[160];
  swift_bridgeObjectRelease();
  a1[161] = a2[161];
  a1[162] = a2[162];
  swift_bridgeObjectRelease();
  a1[163] = a2[163];
  a1[164] = a2[164];
  swift_bridgeObjectRelease();
  a1[165] = a2[165];
  *((_BYTE *)a1 + 1328) = *((_BYTE *)a2 + 1328);
  a1[167] = a2[167];
  *((_BYTE *)a1 + 1344) = *((_BYTE *)a2 + 1344);
  a1[169] = a2[169];
  *((_BYTE *)a1 + 1360) = *((_BYTE *)a2 + 1360);
  a1[171] = a2[171];
  a1[172] = a2[172];
  swift_bridgeObjectRelease();
  *((_DWORD *)a1 + 346) = *((_DWORD *)a2 + 346);
  *((_BYTE *)a1 + 1388) = *((_BYTE *)a2 + 1388);
  a1[174] = a2[174];
  *((_BYTE *)a1 + 1400) = *((_BYTE *)a2 + 1400);
  a1[176] = a2[176];
  *((_BYTE *)a1 + 1416) = *((_BYTE *)a2 + 1416);
  *((_BYTE *)a1 + 1432) = *((_BYTE *)a2 + 1432);
  a1[178] = a2[178];
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionMetrics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 1433))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 1432) = 0;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 1433) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 1433) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionMetrics()
{
  return &type metadata for ConnectionMetrics;
}

void *OUTLINED_FUNCTION_3_12()
{
  void *v0;
  const void *v1;

  return memmove(v0, v1, 0x599uLL);
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_7_10()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of ConnectionMetrics?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  uint64_t v0;

  return outlined retain of ConnectionMetrics(v0);
}

uint64_t OUTLINED_FUNCTION_10_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t NoneDataDecompressor.decompressedDataForData(_:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data?(a1, a2);
  return a1;
}

uint64_t NoneDataDecompressor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NoneDataDecompressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for DataDecompressing.decompressedDataForData(_:) in conformance NoneDataDecompressor(uint64_t a1, unint64_t a2)
{
  return NoneDataDecompressor.decompressedDataForData(_:)(a1, a2);
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL specialized == infix<A>(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

{
  return ((a2 ^ a1) & 1) == 0;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

{
  return qword_246F73F20[a1] == qword_246F73F20[a2];
}

{
  return (0x70403020100FFuLL >> (8 * a1)) == (0x70403020100FFuLL >> (8 * a2));
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_246F0E988(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_246F0E9E0 + 4 * byte_246F73D84[a2]))(6578530);
}

uint64_t sub_246F0E9E0(uint64_t a1)
{
  uint64_t v1;
  char v3;

  if (a1 == 6578530 && v1 == 0xE300000000000000)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t ConnectionType.rawValue.getter()
{
  char *v0;

  return OUTLINED_FUNCTION_4_16(*v0);
}

uint64_t ConnectionType.stringRawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_246F0EB10 + 4 * byte_246F73D88[*v0]))(0x6E776F6E6B6E55, 0xE700000000000000);
}

uint64_t sub_246F0EB10()
{
  return 0x69462D6957;
}

uint64_t sub_246F0EB24()
{
  return 1312905047;
}

uint64_t sub_246F0EB34()
{
  return 0x4E41525455;
}

uint64_t sub_246F0EB48()
{
  return 0x31414D4443204732;
}

uint64_t sub_246F0EB64()
{
  return 0x53525047204732;
}

uint64_t sub_246F0EB78()
{
  return 0x65676445204732;
}

uint64_t sub_246F0EB8C()
{
  return 0x414D444357204733;
}

uint64_t sub_246F0EBA4()
{
  return 0x4150445348204733;
}

uint64_t sub_246F0EBD0()
{
  return 0x44564520414D4443;
}

uint64_t sub_246F0EC14()
{
  return 1146114632;
}

uint64_t sub_246F0EC24()
{
  return 4543564;
}

uint64_t sub_246F0EC34()
{
  return 0x41534E524E204735;
}

uint64_t sub_246F0EC4C()
{
  return 0x524E204735;
}

uint64_t sub_246F0EC60()
{
  return 0x504354504DLL;
}

uint64_t sub_246F0EC74()
{
  return 0x796C6C654264654CLL;
}

uint64_t sub_246F0EC8C()
{
  return 5456969;
}

uint64_t sub_246F0EC9C()
{
  return 5263184;
}

uint64_t sub_246F0ECAC()
{
  return 0x65636E65726F6C46;
}

uint64_t sub_246F0ECC4()
{
  return 0x6C61636F4CLL;
}

uint64_t sub_246F0ECD8()
{
  return 0x504354504D574ELL;
}

uint64_t sub_246F0ECEC()
{
  return 0x6365737069;
}

SiriNetwork::ConnectionType_optional __swiftcall ConnectionType.init(fromStringValue:)(Swift::String fromStringValue)
{
  char *v1;
  char *v2;
  Swift::String v3;
  BOOL v4;
  SiriNetwork::ConnectionType_optional result;
  char v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  char v31;

  v2 = v1;
  v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  v4 = v3._countAndFlagsBits == 0x6E776F6E6B6E75 && v3._object == (void *)0xE700000000000000;
  if (v4 || (OUTLINED_FUNCTION_1_4(), (OUTLINED_FUNCTION_0_24() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v6 = 0;
  }
  else
  {
    v7 = v3._countAndFlagsBits == 0x69662D6977 && v3._object == (void *)0xE500000000000000;
    if (v7 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
    {
      result.value = swift_bridgeObjectRelease();
      v6 = 1;
    }
    else
    {
      v8 = v3._countAndFlagsBits == 1851881335 && v3._object == (void *)0xE400000000000000;
      if (v8 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
      {
        result.value = swift_bridgeObjectRelease();
        v6 = 2;
      }
      else
      {
        v9 = v3._countAndFlagsBits == 0x6E61727475 && v3._object == (void *)0xE500000000000000;
        if (v9 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
        {
          result.value = swift_bridgeObjectRelease();
          v6 = 3;
        }
        else
        {
          v10 = v3._countAndFlagsBits == 0x31616D6463206732 && v3._object == (void *)0xE900000000000078;
          if (v10 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
          {
            result.value = swift_bridgeObjectRelease();
            v6 = 4;
          }
          else
          {
            v11 = v3._countAndFlagsBits == 0x73727067206732 && v3._object == (void *)0xE700000000000000;
            if (v11 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
            {
              result.value = swift_bridgeObjectRelease();
              v6 = 5;
            }
            else
            {
              v12 = v3._countAndFlagsBits == 0x65676465206732 && v3._object == (void *)0xE700000000000000;
              if (v12 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
              {
                result.value = swift_bridgeObjectRelease();
                v6 = 6;
              }
              else
              {
                v13 = v3._countAndFlagsBits == 0x616D646377206733 && v3._object == (void *)0xE800000000000000;
                if (v13 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                {
                  result.value = swift_bridgeObjectRelease();
                  v6 = 7;
                }
                else
                {
                  v14 = v3._countAndFlagsBits == 0x6170647368206733 && v3._object == (void *)0xE800000000000000;
                  if (v14 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                  {
                    result.value = swift_bridgeObjectRelease();
                    v6 = 8;
                  }
                  else
                  {
                    v15 = v3._countAndFlagsBits == 0x6170757368206733 && v3._object == (void *)0xE800000000000000;
                    if (v15 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                    {
                      result.value = swift_bridgeObjectRelease();
                      v6 = 9;
                    }
                    else
                    {
                      v16 = v3._countAndFlagsBits == 0x64766520616D6463 && v3._object == (void *)0xED0000307665726FLL;
                      if (v16 || (OUTLINED_FUNCTION_1_19(), (OUTLINED_FUNCTION_0_24() & 1) != 0))
                      {
                        result.value = swift_bridgeObjectRelease();
                        v6 = 10;
                      }
                      else
                      {
                        v17 = v3._countAndFlagsBits == 0x64766520616D6463
                           && v3._object == (void *)0xED0000617665726FLL;
                        if (v17 || (OUTLINED_FUNCTION_1_19(), (OUTLINED_FUNCTION_0_24() & 1) != 0))
                        {
                          result.value = swift_bridgeObjectRelease();
                          v6 = 11;
                        }
                        else
                        {
                          v18 = v3._countAndFlagsBits == 0x64766520616D6463
                             && v3._object == (void *)0xED0000627665726FLL;
                          if (v18 || (OUTLINED_FUNCTION_1_19(), (OUTLINED_FUNCTION_0_24() & 1) != 0))
                          {
                            result.value = swift_bridgeObjectRelease();
                            v6 = 12;
                          }
                          else
                          {
                            v19 = v3._countAndFlagsBits == 1685090920 && v3._object == (void *)0xE400000000000000;
                            if (v19 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                            {
                              result.value = swift_bridgeObjectRelease();
                              v6 = 13;
                            }
                            else
                            {
                              v20 = v3._countAndFlagsBits == 6648940 && v3._object == (void *)0xE300000000000000;
                              if (v20 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                              {
                                result.value = swift_bridgeObjectRelease();
                                v6 = 14;
                              }
                              else
                              {
                                v21 = v3._countAndFlagsBits == 0x61736E726E206735
                                   && v3._object == (void *)0xE800000000000000;
                                if (v21 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                {
                                  result.value = swift_bridgeObjectRelease();
                                  v6 = 15;
                                }
                                else
                                {
                                  v22 = v3._countAndFlagsBits == 0x726E206735
                                     && v3._object == (void *)0xE500000000000000;
                                  if (v22 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                  {
                                    result.value = swift_bridgeObjectRelease();
                                    v6 = 16;
                                  }
                                  else
                                  {
                                    v23 = v3._countAndFlagsBits == 0x706374706DLL
                                       && v3._object == (void *)0xE500000000000000;
                                    if (v23 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                    {
                                      result.value = swift_bridgeObjectRelease();
                                      v6 = 17;
                                    }
                                    else
                                    {
                                      v24 = v3._countAndFlagsBits == 0x796C6C656264656CLL
                                         && v3._object == (void *)0xE800000000000000;
                                      if (v24 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                      {
                                        result.value = swift_bridgeObjectRelease();
                                        v6 = 18;
                                      }
                                      else
                                      {
                                        v25 = v3._countAndFlagsBits == 7562345
                                           && v3._object == (void *)0xE300000000000000;
                                        if (v25 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                        {
                                          result.value = swift_bridgeObjectRelease();
                                          v6 = 19;
                                        }
                                        else
                                        {
                                          v26 = v3._countAndFlagsBits == 7368560
                                             && v3._object == (void *)0xE300000000000000;
                                          if (v26 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                          {
                                            result.value = swift_bridgeObjectRelease();
                                            v6 = 20;
                                          }
                                          else
                                          {
                                            v27 = v3._countAndFlagsBits == 0x65636E65726F6C66
                                               && v3._object == (void *)0xE800000000000000;
                                            if (v27 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                            {
                                              result.value = swift_bridgeObjectRelease();
                                              v6 = 21;
                                            }
                                            else
                                            {
                                              v28 = v3._countAndFlagsBits == 0x6C61636F6CLL
                                                 && v3._object == (void *)0xE500000000000000;
                                              if (v28 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                              {
                                                result.value = swift_bridgeObjectRelease();
                                                v6 = 22;
                                              }
                                              else
                                              {
                                                v29 = v3._countAndFlagsBits == 0x706374706D776ELL
                                                   && v3._object == (void *)0xE700000000000000;
                                                if (v29 || (OUTLINED_FUNCTION_0_24() & 1) != 0)
                                                {
                                                  result.value = swift_bridgeObjectRelease();
                                                  v6 = 23;
                                                }
                                                else if (v3._countAndFlagsBits == 0x6365737069
                                                       && v3._object == (void *)0xE500000000000000)
                                                {
                                                  result.value = swift_bridgeObjectRelease();
                                                  v6 = 24;
                                                }
                                                else
                                                {
                                                  v31 = OUTLINED_FUNCTION_0_24();
                                                  result.value = swift_bridgeObjectRelease();
                                                  if ((v31 & 1) != 0)
                                                    v6 = 24;
                                                  else
                                                    v6 = 25;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *v2 = v6;
  return result;
}

Swift::Bool __swiftcall ConnectionType.isWWAN()()
{
  unsigned __int8 *v0;

  return *v0 - 2 < 0xF;
}

Swift::Bool __swiftcall ConnectionType.isEdge()()
{
  char *v0;

  return OUTLINED_FUNCTION_3_13(*v0);
}

Swift::Bool __swiftcall ConnectionType.canUseWifiDirectly()()
{
  unsigned __int8 *v0;

  return OUTLINED_FUNCTION_2_17(*v0);
}

uint64_t ConnectionType.diagnosticConnectionType()()
{
  _BYTE *v0;
  uint64_t result;
  int v2;

  result = 2;
  v2 = 1 << *v0;
  if ((v2 & 0x1FFFC) == 0)
    return (v2 & 0x1FE0001) == 0;
  return result;
}

uint64_t ConnectionType.aggregatorConnectionType()()
{
  char *v0;

  return OUTLINED_FUNCTION_4_16(*v0);
}

SiriNetwork::ConnectionType_optional __swiftcall ConnectionType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 7;
  switch(rawValue)
  {
    case 2000:
      v2 = 2;
      break;
    case 2001:
      v2 = 3;
      break;
    case 2002:
      v2 = 4;
      break;
    case 2003:
      v2 = 5;
      break;
    case 2004:
      v2 = 6;
      break;
    case 2005:
      break;
    case 2006:
      v2 = 8;
      break;
    case 2007:
      v2 = 9;
      break;
    case 2008:
      v2 = 10;
      break;
    case 2009:
      v2 = 11;
      break;
    case 2010:
      v2 = 12;
      break;
    case 2011:
      v2 = 13;
      break;
    case 2012:
      v2 = 14;
      break;
    case 2013:
      v2 = 15;
      break;
    case 2014:
      v2 = 16;
      break;
    default:
      switch(rawValue)
      {
        case 3000:
          v2 = 17;
          break;
        case 3001:
          v2 = 18;
          break;
        case 3002:
          v2 = 19;
          break;
        case 3003:
          v2 = 20;
          break;
        case 3004:
          v2 = 21;
          break;
        case 3005:
          v2 = 22;
          break;
        case 3006:
          v2 = 23;
          break;
        default:
          if (rawValue)
          {
            if (rawValue == 4000)
            {
              v2 = 24;
            }
            else if (rawValue == 1000)
            {
              v2 = 1;
            }
            else
            {
              v2 = 25;
            }
          }
          else
          {
            v2 = 0;
          }
          break;
      }
      break;
  }
  *v1 = v2;
  return (SiriNetwork::ConnectionType_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ConnectionType()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ConnectionType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriNetwork::ConnectionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionType(Swift::Int *a1)
{
  return ConnectionType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ConnectionType.rawValue.getter();
  *a1 = result;
  return result;
}

void ConnectionTypeWrapper.connectionType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR___SNConnectionTypeInternal_connectionType);
}

id ConnectionTypeWrapper.__allocating_init(_:)(Swift::Int a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ConnectionTypeWrapper.init(_:)(a1);
}

id ConnectionTypeWrapper.init(_:)(Swift::Int a1)
{
  _BYTE *v1;
  char v2;
  objc_super v4;
  char v5;

  ConnectionType.init(rawValue:)(a1);
  v2 = v5;
  if (v5 == 25)
    v2 = 0;
  v1[OBJC_IVAR___SNConnectionTypeInternal_connectionType] = v2;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ConnectionTypeWrapper();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for ConnectionTypeWrapper()
{
  return objc_opt_self();
}

Swift::Int __swiftcall ConnectionTypeWrapper.connectionTypeRawValue()()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_4_16(*(char *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

Swift::String __swiftcall ConnectionTypeWrapper.connectionTypeStringRawValue()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = ConnectionType.stringRawValue.getter();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall ConnectionTypeWrapper.isWWAN()()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType) - 2 < 0xF;
}

Swift::Bool __swiftcall ConnectionTypeWrapper.isEdge()()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_3_13(*(_BYTE *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

Swift::Bool __swiftcall ConnectionTypeWrapper.canUseWiFiDirectly()()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_2_17(*(unsigned __int8 *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

uint64_t ConnectionTypeWrapper.diagnosticConnectionType()()
{
  uint64_t v0;
  uint64_t result;
  int v2;

  result = 2;
  v2 = 1 << *(_BYTE *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType);
  if ((v2 & 0x1FFFC) == 0)
    return (v2 & 0x1FE0001) == 0;
  return result;
}

uint64_t ConnectionTypeWrapper.aggregatorConnectionType()()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_4_16(*(char *)(v0 + OBJC_IVAR___SNConnectionTypeInternal_connectionType));
}

id ConnectionTypeWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConnectionTypeWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConnectionTypeWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConnectionTypeWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ConnectionType and conformance ConnectionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionType and conformance ConnectionType;
  if (!lazy protocol witness table cache variable for type ConnectionType and conformance ConnectionType)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionType, &type metadata for ConnectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionType and conformance ConnectionType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE8)
  {
    if (a2 + 24 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 24) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 25;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v5 = v6 - 25;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_246F0FB74 + 4 * byte_246F73DBC[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_246F0FBA8 + 4 * byte_246F73DB7[v4]))();
}

uint64_t sub_246F0FBA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F0FBB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246F0FBB8);
  return result;
}

uint64_t sub_246F0FBC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246F0FBCCLL);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_246F0FBD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F0FBD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionType()
{
  return &type metadata for ConnectionType;
}

uint64_t method lookup function for ConnectionTypeWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.connectionTypeRawValue()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.connectionTypeStringRawValue()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.isWWAN()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.isEdge()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.canUseWiFiDirectly()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.diagnosticConnectionType()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ConnectionTypeWrapper.aggregatorConnectionType()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t OUTLINED_FUNCTION_0_24()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  return 0x64766520616D6463;
}

uint64_t OUTLINED_FUNCTION_2_17@<X0>(unint64_t a1@<X8>)
{
  return (a1 < 0x18) & (0xB60003u >> a1);
}

uint64_t OUTLINED_FUNCTION_3_13@<X0>(char a1@<W8>)
{
  int v1;
  unsigned int v2;

  return v1 & (v2 >> a1);
}

uint64_t OUTLINED_FUNCTION_4_16@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 8 * a1);
}

uint64_t AceObject.internalAceId.getter()
{
  void *v0;

  return outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_aceId);
}

void AceObject.internalAceId.setter(uint64_t a1, uint64_t a2)
{
  AceObject.internalAceId.setter(a1, a2, (SEL *)&selRef_setAceId_);
}

void (*AceObject.internalAceId.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  uint64_t v3;

  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v1, (SEL *)&selRef_aceId);
  a1[1] = v3;
  return AceObject.internalAceId.modify;
}

void AceObject.internalAceId.modify(uint64_t a1, char a2)
{
  AceObject.internalAceId.modify(a1, a2);
}

{
  if ((a2 & 1) != 0)
  {
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_23_1();
  }
}

uint64_t AceObject.internalRefId.getter()
{
  void *v0;

  return outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_refId);
}

void key path setter for AceObject.internalAceId : AceObject()
{
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_2_18();
  OUTLINED_FUNCTION_23_1();
}

void AceObject.internalRefId.setter(uint64_t a1, uint64_t a2)
{
  AceObject.internalAceId.setter(a1, a2, (SEL *)&selRef_setRefId_);
}

void AceObject.internalAceId.setter(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  id v5;

  if (a2)
  {
    v5 = (id)MEMORY[0x24956D034]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(v3, *a3, v5);

}

void (*AceObject.internalRefId.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  uint64_t v3;

  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v1, (SEL *)&selRef_refId);
  a1[1] = v3;
  return AceObject.internalRefId.modify;
}

void AceObject.internalRefId.modify(uint64_t a1, char a2)
{
  AceObject.internalAceId.modify(a1, a2);
}

uint64_t AceObject.serializedAceData()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  static AceSerialization.aceDataForObject(_:)(v0);
  if (!v1)
  {
    if (v3 >> 60 != 15)
      __asm { BR              X10 }
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(_OWORD *)v4 = xmmword_246F740B0;
    *(_BYTE *)(v4 + 16) = 3;
    swift_willThrow();
  }
  return v2;
}

void sub_246F0FF90()
{
  unint64_t v0;
  uint64_t v1;

  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n044_sSo9AceObjectC11SiriNetworkE010serializedA4lug1_h1_I13CyKFAFSWXEfU_Tf1ncn_n(v0, v1 & 0xFFFFFFFFFFFFLL, BYTE6(v1));
  OUTLINED_FUNCTION_3_14();
  JUMPOUT(0x246F0FF5CLL);
}

id @objc AceObject.serializedAceData()(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)AceObject.serializedAceData()();

  return v2;
}

uint64_t @objc AceObject.bufferingAllowedDuringActiveSession()()
{
  return 1;
}

uint64_t @objc AceObject.isRetryable()()
{
  return 1;
}

Swift::Bool __swiftcall AceObject.isRestartable()()
{
  void *v0;

  return objc_msgSend(v0, sel_isRetryable);
}

BOOL @objc AceObject.isRestartable()(void *a1)
{
  id v1;
  Swift::Bool v2;

  v1 = a1;
  v2 = AceObject.isRestartable()();

  return v2;
}

uint64_t @objc AceObject.isProvisional()()
{
  return 0;
}

Swift::String_optional __swiftcall AceObject.sessionRequestId()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = 0;
  v1 = 0;
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

id @objc AceObject.sessionRequestId()()
{
  return 0;
}

uint64_t @objc AceObject.setSessionRequestId(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t @objc AceObject.supportedByLocalSession()()
{
  return 1;
}

uint64_t @objc AceObject.supportedByRemoteLimitedSession()()
{
  return 1;
}

uint64_t protocol witness for SessionObject.internalAceId.getter in conformance AceObject()
{
  return AceObject.internalAceId.getter();
}

void protocol witness for SessionObject.internalAceId.setter in conformance AceObject(uint64_t a1, uint64_t a2)
{
  AceObject.internalAceId.setter(a1, a2);
}

void (*protocol witness for SessionObject.internalAceId.modify in conformance AceObject(uint64_t *a1))(uint64_t a1, char a2)
{
  void **v1;
  void *v3;
  uint64_t v4;

  v3 = *v1;
  a1[2] = (uint64_t)*v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v3, (SEL *)&selRef_aceId);
  a1[1] = v4;
  return AceObject.internalAceId.modify;
}

uint64_t protocol witness for SessionObject.internalRefId.getter in conformance AceObject()
{
  return AceObject.internalRefId.getter();
}

void protocol witness for SessionObject.internalRefId.setter in conformance AceObject(uint64_t a1, uint64_t a2)
{
  AceObject.internalRefId.setter(a1, a2);
}

void (*protocol witness for SessionObject.internalRefId.modify in conformance AceObject(uint64_t *a1))(uint64_t a1, char a2)
{
  void **v1;
  void *v3;
  uint64_t v4;

  v3 = *v1;
  a1[2] = (uint64_t)*v1;
  *a1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v3, (SEL *)&selRef_refId);
  a1[1] = v4;
  return AceObject.internalRefId.modify;
}

id protocol witness for SessionObject.serializedAceData() in conformance AceObject()
{
  void **v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *v0;
  v6[0] = 0;
  v2 = objc_msgSend(v1, sel_serializedAceDataAndReturnError_, v6);
  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

id protocol witness for SessionObject.bufferingAllowedDuringActiveSession() in conformance AceObject()
{
  id *v0;

  return objc_msgSend(*v0, sel_bufferingAllowedDuringActiveSession);
}

id protocol witness for SessionObject.isRetryable() in conformance AceObject()
{
  id *v0;

  return objc_msgSend(*v0, sel_isRetryable);
}

id protocol witness for SessionObject.isRestartable() in conformance AceObject()
{
  id *v0;

  return objc_msgSend(*v0, sel_isRestartable);
}

id protocol witness for SessionObject.isProvisional() in conformance AceObject()
{
  id *v0;

  return objc_msgSend(*v0, sel_isProvisional);
}

id protocol witness for SessionObject.logDiagnostics() in conformance AceObject()
{
  id *v0;

  return objc_msgSend(*v0, sel_logDiagnostics);
}

uint64_t protocol witness for SessionObject.sessionRequestId() in conformance AceObject()
{
  void **v0;

  return outlined bridged method (pb) of @objc AceObject.aceId.getter(*v0, (SEL *)&selRef_sessionRequestId);
}

void protocol witness for SessionObject.setSessionRequestId(_:) in conformance AceObject(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *v2;
  if (a2)
    v4 = MEMORY[0x24956D034]();
  else
    v4 = 0;
  v5 = (id)v4;
  objc_msgSend(v3, sel_setSessionRequestId_);

}

id protocol witness for SessionObject.supportedByLocalSession() in conformance AceObject()
{
  id *v0;

  return objc_msgSend(*v0, sel_supportedByLocalSession);
}

id protocol witness for SessionObject.supportedByRemoteLimitedSession() in conformance AceObject()
{
  id *v0;

  return objc_msgSend(*v0, sel_supportedByRemoteLimitedSession);
}

uint64_t @objc SASyncGetAnchors.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SASyncGetAnchors.isRetryable()()
{
  return 0;
}

uint64_t @objc SASyncChunk.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SASyncChunk.isRetryable()()
{
  return 0;
}

uint64_t @objc SASyncFinished.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SASyncFinished.isRetryable()()
{
  return 0;
}

uint64_t @objc SACFFetchScriptCommand.bufferingAllowedDuringActiveSession()()
{
  return 0;
}

uint64_t @objc SACFFetchScriptCommand.isRetryable()()
{
  return 0;
}

uint64_t @objc SACFFetchScriptCommand.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SAMetrics.isRetryable()()
{
  return 0;
}

uint64_t @objc SAMetrics.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASStartSpeech.isRestartable()()
{
  return 0;
}

uint64_t @objc SASSpeechPacket.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASUpdateAudioInfo.isRestartable()()
{
  return 0;
}

uint64_t @objc SASEnableServerEndpointer.isRestartable()()
{
  return 0;
}

uint64_t @objc SASEnableServerEndpointer.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASEnableServerEndpointer.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASFinishSpeech.isRestartable()()
{
  return 0;
}

uint64_t @objc SASFinishSpeech.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASFinishSpeech.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASCancelSpeech.isRestartable()()
{
  return 0;
}

uint64_t @objc SASCancelSpeech.supportedByRemoteLimitedSession()()
{
  return 0;
}

Swift::String_optional __swiftcall SARollbackRequest.sessionRequestId()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  Swift::String_optional result;

  v1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_requestId);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

id @objc SARollbackRequest.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SARollbackRequest.sessionRequestId());
}

Swift::Void __swiftcall SARollbackRequest.setSessionRequestId(_:)(Swift::String_optional a1)
{
  SARollbackRequest.setSessionRequestId(_:)(a1.value._countAndFlagsBits, (uint64_t)a1.value._object, (SEL *)&selRef_setRequestId_);
}

uint64_t @objc SARollbackRequest.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3);
}

{
  id v4;

  if (a3)
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = a1;
  OUTLINED_FUNCTION_2_18();

  return OUTLINED_FUNCTION_1_20();
}

id @objc SAUIGetResponseAlternatives.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SAUIGetResponseAlternatives.sessionRequestId());
}

Swift::Void __swiftcall SAUIGetResponseAlternatives.setSessionRequestId(_:)(Swift::String_optional a1)
{
  SARollbackRequest.setSessionRequestId(_:)(a1.value._countAndFlagsBits, (uint64_t)a1.value._object, (SEL *)&selRef_setRequestId_);
}

uint64_t @objc SAUIGetResponseAlternatives.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3);
}

uint64_t @objc SASServerBoundConfusionNetwork.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASServerBoundConfusionNetwork.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASDisableServerEndpointer.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASDisableServerEndpointer.supportedByRemoteLimitedSession()()
{
  return 0;
}

uint64_t @objc SASSpeechCorrectionStatistics.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASSpeechCorrectionStatistics.supportedByRemoteLimitedSession()()
{
  return 0;
}

Swift::String_optional __swiftcall SASSpeechCorrectionStatistics.sessionRequestId()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  Swift::String_optional result;

  v1 = outlined bridged method (pb) of @objc AceObject.aceId.getter(v0, (SEL *)&selRef_interactionId);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

id @objc SASSpeechCorrectionStatistics.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SASSpeechCorrectionStatistics.sessionRequestId());
}

Swift::Void __swiftcall SASSpeechCorrectionStatistics.setSessionRequestId(_:)(Swift::String_optional a1)
{
  SARollbackRequest.setSessionRequestId(_:)(a1.value._countAndFlagsBits, (uint64_t)a1.value._object, (SEL *)&selRef_setInteractionId_);
}

uint64_t @objc SASSpeechCorrectionStatistics.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3);
}

uint64_t @objc SASSpeechEndpointIdentified.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASSpeechEndpointIdentified.supportedByRemoteLimitedSession()()
{
  return 0;
}

id @objc SASStartCorrectedSpeechRequest.sessionRequestId()(void *a1, uint64_t a2)
{
  return @objc SARollbackRequest.sessionRequestId()(a1, a2, (uint64_t (*)(void))SASStartCorrectedSpeechRequest.sessionRequestId());
}

id @objc SARollbackRequest.sessionRequestId()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  if (v7)
  {
    v8 = (void *)MEMORY[0x24956D034](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

Swift::Void __swiftcall SASStartCorrectedSpeechRequest.setSessionRequestId(_:)(Swift::String_optional a1)
{
  SARollbackRequest.setSessionRequestId(_:)(a1.value._countAndFlagsBits, (uint64_t)a1.value._object, (SEL *)&selRef_setInteractionId_);
}

void SARollbackRequest.setSessionRequestId(_:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  uint64_t v5;
  id v6;

  if (a2)
    v5 = MEMORY[0x24956D034]();
  else
    v5 = 0;
  v6 = (id)v5;
  objc_msgSend(v3, *a3);

}

uint64_t @objc SASStartCorrectedSpeechRequest.setSessionRequestId(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc SARollbackRequest.setSessionRequestId(_:)(a1, a2, a3);
}

uint64_t @objc SAStartBackgroundActionRequest.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SASetClientFlowState.supportedByLocalSession()()
{
  return 0;
}

uint64_t @objc SAGetResultObjects.isRetryable()()
{
  return 0;
}

uint64_t @objc SAGetResultObjects.isProvisional()()
{
  return 1;
}

uint64_t @objc SAResultSelected.isRetryable()()
{
  return 0;
}

uint64_t @objc SAResultSelected.isProvisional()()
{
  return 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for DispatchData();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      DispatchData.init(bytes:)();
      v9 = DispatchData._bridgeToObjectiveC()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n044_sSo9AceObjectC11SiriNetworkE010serializedA4lug1_h1_I13CyKFAFSWXEfU_Tf1ncn_n(unint64_t a1, unint64_t a2, uint64_t a3)
{
  char v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;

  v24 = a3;
  v3 = a2;
  v4 = a1;
  v5 = a1 >> 8;
  v6 = a1 >> 16;
  v7 = a1 >> 24;
  v8 = HIDWORD(a1);
  v39 = *MEMORY[0x24BDAC8D0];
  v16 = a1 >> 40;
  v17 = HIWORD(a1);
  v18 = HIBYTE(a1);
  v19 = a2 >> 8;
  v20 = a2 >> 16;
  v21 = a2 >> 24;
  v22 = HIDWORD(a2);
  v23 = a2 >> 40;
  v9 = type metadata accessor for DispatchData();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v4;
  v26 = v5;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  v30 = v16;
  v31 = v17;
  v32 = v18;
  v33 = v3;
  v34 = v19;
  v35 = v20;
  v36 = v21;
  v37 = v22;
  v38 = v23;
  DispatchData.init(bytes:)();
  v13 = DispatchData._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t outlined bridged method (pb) of @objc AceObject.aceId.getter(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_246F10B2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AceObject.internalAceId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_246F10B54()
{
  key path setter for AceObject.internalAceId : AceObject();
}

uint64_t sub_246F10B70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AceObject.internalRefId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_246F10B98()
{
  key path setter for AceObject.internalAceId : AceObject();
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_18()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_7_11(uint64_t a1, uint64_t a2)
{
  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2);
}

double *PingInfo.init(pingAcknowledgedCount:avgPingTime:)(uint64_t a1, double a2)
{
  double *v2;

  v2[3] = 0.0;
  *((_QWORD *)v2 + 4) = Dictionary.init(dictionaryLiteral:)();
  *((_QWORD *)v2 + 2) = a1;
  v2[3] = a2;
  return v2;
}

Swift::Void __swiftcall PingInfo.markPingSent(withIndex:)(Swift::UInt32 withIndex)
{
  id v2;
  double v3;
  double v4;

  v2 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  objc_msgSend(v2, sel_systemUptime);
  v4 = v3;

  OUTLINED_FUNCTION_0_2();
  specialized Dictionary._Variant.setValue(_:forKey:)(withIndex, v4);
  swift_endAccess();
}

Swift::Void __swiftcall PingInfo.markPongReceived(withIndex:)(Swift::UInt32 withIndex)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  double v7;
  id v8;
  double v9;
  double v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  double v14;

  v2 = v1;
  OUTLINED_FUNCTION_0_2();
  v4 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(withIndex);
    if ((v6 & 1) != 0)
    {
      v7 = *(double *)(*(_QWORD *)(v4 + 56) + 8 * v5);
      OUTLINED_FUNCTION_0_2();
      specialized Dictionary._Variant.removeValue(forKey:)();
      swift_endAccess();
      v8 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
      objc_msgSend(v8, sel_systemUptime);
      v10 = v9;

      v11 = *(_QWORD *)(v2 + 16);
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)(v2 + 16) = v13;
        v14 = (v10 - v7 - *(double *)(v2 + 24)) / (double)v13;
        if (v14 > 0.0)
          *(double *)(v2 + 24) = v14;
      }
    }
  }
}

Swift::Int __swiftcall PingInfo.numberOfUnacknowledgedPings()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_0_25();
  return *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
}

Swift::Int __swiftcall PingInfo.totalPingCount()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int result;

  OUTLINED_FUNCTION_0_25();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
  v2 = *(_QWORD *)(v0 + 16);
  result = v1 + v2;
  if (__OFADD__(v1, v2))
    __break(1u);
  return result;
}

uint64_t PingInfo.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PingInfo()
{
  return objc_opt_self();
}

uint64_t OUTLINED_FUNCTION_0_25()
{
  return swift_beginAccess();
}

uint64_t type metadata accessor for NoneDataCompressor()
{
  return objc_opt_self();
}

Swift::Void __swiftcall NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(Swift::Int wifiAssertionTypeRawValue)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = OUTLINED_FUNCTION_18();
  v3 = OUTLINED_FUNCTION_4_0(v2);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_8_8();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  v5 = OUTLINED_FUNCTION_14_0();
  swift_unknownObjectWeakInit();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = wifiAssertionTypeRawValue;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_20_7();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_15();
}

void sub_246F10FB0()
{
  void *v0;

  OUTLINED_FUNCTION_180();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

uint64_t sub_246F10FD4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x24956E090](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(id *)(v4 + OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager);
    NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(a2);

  }
}

uint64_t sub_246F11074()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)()
{
  uint64_t v0;

  closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

void sub_246F110E4()
{
  void *v0;

}

Swift::Void __swiftcall NetworkManager.acquireWiFiAssertion(wifiAssertionType:)(SiriNetwork::WiFiAssertionType wifiAssertionType)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = (char *)wifiAssertionType;
  v2 = OUTLINED_FUNCTION_18();
  v3 = OUTLINED_FUNCTION_4_0(v2);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_8_8();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_3_0();
  v5 = *v1;
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_41_3();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v1;
  *(_BYTE *)(v6 + 24) = v5;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_20_7();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_15();
}

void sub_246F111F4()
{
  void *v0;

  OUTLINED_FUNCTION_180();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionType:)(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  char v8;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x24956E090](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(void **)(v4 + OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager);
    v8 = a2;
    v7 = v6;
    NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)((SiriNetwork::WiFiAssertionType)&v8);

  }
}

uint64_t sub_246F11298()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionType:)()
{
  uint64_t v0;

  closure #1 in NetworkManager.acquireWiFiAssertion(wifiAssertionType:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

Swift::Void __swiftcall NetworkManager.releaseWiFiAssertion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = OUTLINED_FUNCTION_18();
  v1 = OUTLINED_FUNCTION_4_0(v0);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_8_8();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_41_3();
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_20_7();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_15();
}

void sub_246F113A0()
{
  void *v0;

  OUTLINED_FUNCTION_180();

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkManager.releaseWiFiAssertion()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x24956E090](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(id *)(v2 + OBJC_IVAR___SNNetworkManagerInternal_networkWiFiManager);
    NetworkWiFiManager.releaseWiFiAssertion()();

  }
}

void partial apply for closure #1 in NetworkManager.releaseWiFiAssertion()()
{
  uint64_t v0;

  closure #1 in NetworkManager.releaseWiFiAssertion()(v0);
}

void sub_246F11458()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_0_26()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void OUTLINED_FUNCTION_3_15()
{
  JUMPOUT(0x24956D244);
}

uint64_t OUTLINED_FUNCTION_7_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

id OUTLINED_FUNCTION_20_7()
{
  void *v0;

  return v0;
}

SiriNetwork::ConnectionQualityReport __swiftcall NetworkManager.currentConnectionQualityReport()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality), sel_lock);
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport);
  v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 1);
  v4 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 2);
  v5 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 3);
  objc_msgSend(*(id *)(v0 + v1), sel_unlock);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v10 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v9 = 136315138;
    v14 = v10;
    v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v7, v8, "NetworkManager - PerformanceFeed: Current connection quality report: %s", v9, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  return (SiriNetwork::ConnectionQualityReport)(v2 | (v3 << 8) | (v4 << 16) | (v5 << 24));
}

Swift::Void __swiftcall NetworkManager.updateNetworkPerformanceFeed()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  double v4;
  double v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char aBlock;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_processInfo);
  objc_msgSend(v3, sel_systemUptime);
  v5 = v4;

  v6 = OBJC_IVAR___SNNetworkManagerInternal_lastTimeSymptomsFetch;
  if (v5 - *(double *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_lastTimeSymptomsFetch) > 90.0)
  {
    v7 = objc_msgSend(v2, sel_processInfo);
    objc_msgSend(v7, sel_systemUptime);
    v9 = v8;

    *(_QWORD *)(v1 + v6) = v9;
    v10 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality), sel_lock);
    *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport) = 50529027;
    objc_msgSend(*(id *)(v1 + v10), sel_unlock);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;
    v14 = objc_allocWithZone(MEMORY[0x24BEB35F8]);
    v40 = @nonobjc AnalyticsWorkspace.init(workspaceWithService:)(v11, v13);
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB3628]), sel_initWithWorkspace_, v40);
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, sel_setQueue_, *(_QWORD *)(v1 + OBJC_IVAR___SNNetworkManagerInternal_queue));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_246F72C60;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 40) = v18;
      *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 56) = v19;
      v20 = OUTLINED_FUNCTION_10_8();
      v21 = swift_initStackObject();
      *(_OWORD *)(v21 + 16) = xmmword_246F72C60;
      *(_QWORD *)(v21 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(v21 + 40) = v22;
      *(_QWORD *)(v21 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(v21 + 56) = v23;
      v24 = OUTLINED_FUNCTION_10_8();
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v20);
      v26 = v25;
      v27 = OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_14_4();
      v28 = (_QWORD *)OUTLINED_FUNCTION_6();
      v28[2] = v27;
      v28[3] = v16;
      v28[4] = v24;
      aBlock = MEMORY[0x24BDAC760];
      v30 = OUTLINED_FUNCTION_26_3((uint64_t)&block_descriptor_9, 1, 2, (uint64_t)v40, MEMORY[0x24BDAC760], 1107296256, v43, v45);
      v31 = v16;
      swift_bridgeObjectRetain();
      swift_release();
      outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(1, v26, (uint64_t)v30, v31);
      _Block_release(v30);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v20);
      v33 = v32;
      swift_bridgeObjectRelease();
      v34 = OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_14_4();
      v35 = (_QWORD *)OUTLINED_FUNCTION_6();
      v35[2] = v34;
      v35[3] = v31;
      v35[4] = v24;
      v36 = OUTLINED_FUNCTION_26_3((uint64_t)&block_descriptor_10_2, v38, v39, v41, aBlock, 1107296256, v44, v46);
      v37 = v31;
      swift_release();
      outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(2, v33, (uint64_t)v36, v37);

      _Block_release(v36);
    }
    else
    {
      __break(1u);
    }
  }
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  _OWORD v38[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = OUTLINED_FUNCTION_8_9();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  OUTLINED_FUNCTION_16_7();
  v5 = -(-1 << v4);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v3;
  OUTLINED_FUNCTION_27_5();
  v8 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = 0;
  if (!v7)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v20 = v19[1];
    *(_QWORD *)&v38[0] = *v19;
    *((_QWORD *)&v38[0] + 1) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_7_13();
    OUTLINED_FUNCTION_7_13();
    v34 = v31;
    v35 = v32;
    v36 = v33;
    OUTLINED_FUNCTION_17_7();
    v31 = v34;
    v32 = v35;
    v33 = v36;
    outlined init with take of Any(&v37, v38);
    outlined init with take of Any(v38, &v34);
    v21 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40)) & ~(-1 << *(_BYTE *)(v2 + 32));
    if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) == 0)
    {
      OUTLINED_FUNCTION_21_5();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        v25 = v23 == v24;
        if (v23 == v24)
          v23 = 0;
        v22 |= v25;
        if (*(_QWORD *)(v8 + 8 * v23) != -1)
        {
          OUTLINED_FUNCTION_20_8();
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_23_4();
LABEL_40:
    OUTLINED_FUNCTION_19_6();
    *(_QWORD *)(v8 + v26) |= v27;
    v29 = *(_QWORD *)(v2 + 48) + 40 * v28;
    *(_OWORD *)v29 = v31;
    *(_OWORD *)(v29 + 16) = v32;
    *(_QWORD *)(v29 + 32) = v33;
    outlined init with take of Any(&v34, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v28));
    ++*(_QWORD *)(v2 + 16);
    if (v7)
      goto LABEL_8;
LABEL_9:
    if (__OFADD__(v9, 1))
      goto LABEL_44;
    OUTLINED_FUNCTION_22_6();
    if (v13 == v14)
      goto LABEL_42;
    v15 = *(_QWORD *)(v30 + 8 * v12);
    v16 = v12;
    if (!v15)
    {
      OUTLINED_FUNCTION_0_27();
      if (v13 == v14)
        goto LABEL_42;
      OUTLINED_FUNCTION_4_17();
      if (!v15)
      {
        OUTLINED_FUNCTION_0_27();
        if (v13 == v14)
          goto LABEL_42;
        OUTLINED_FUNCTION_4_17();
        if (!v15)
        {
          OUTLINED_FUNCTION_0_27();
          if (v13 == v14)
            goto LABEL_42;
          OUTLINED_FUNCTION_4_17();
          if (!v15)
            break;
        }
      }
    }
LABEL_30:
    v7 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
  }
  OUTLINED_FUNCTION_22_6();
  if (v13 == v14)
  {
LABEL_42:
    OUTLINED_FUNCTION_13_7();
    OUTLINED_FUNCTION_11_8();
    return;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v17;
    goto LABEL_30;
  }
  while (!__OFADD__(v17, 1))
  {
    OUTLINED_FUNCTION_0_27();
    if (v13 == v14)
      goto LABEL_42;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    v17 = v18 + 1;
    if (v15)
      goto LABEL_30;
  }
LABEL_45:
  __break(1u);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  _OWORD v38[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = OUTLINED_FUNCTION_8_9();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  OUTLINED_FUNCTION_16_7();
  v5 = -(-1 << v4);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v3;
  OUTLINED_FUNCTION_27_5();
  v8 = v2 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = 0;
  if (!v7)
    goto LABEL_9;
LABEL_8:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v20 = v19[1];
    *(_QWORD *)&v38[0] = *v19;
    *((_QWORD *)&v38[0] + 1) = v20;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_7_13();
    OUTLINED_FUNCTION_7_13();
    v34 = v31;
    v35 = v32;
    v36 = v33;
    OUTLINED_FUNCTION_17_7();
    v31 = v34;
    v32 = v35;
    v33 = v36;
    outlined init with take of Any(&v37, v38);
    outlined init with take of Any(v38, &v34);
    v21 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40)) & ~(-1 << *(_BYTE *)(v2 + 32));
    if (((-1 << v21) & ~*(_QWORD *)(v8 + 8 * (v21 >> 6))) == 0)
    {
      OUTLINED_FUNCTION_21_5();
      while (++v23 != v24 || (v22 & 1) == 0)
      {
        v25 = v23 == v24;
        if (v23 == v24)
          v23 = 0;
        v22 |= v25;
        if (*(_QWORD *)(v8 + 8 * v23) != -1)
        {
          OUTLINED_FUNCTION_20_8();
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    OUTLINED_FUNCTION_23_4();
LABEL_40:
    OUTLINED_FUNCTION_19_6();
    *(_QWORD *)(v8 + v26) |= v27;
    v29 = *(_QWORD *)(v2 + 48) + 40 * v28;
    *(_OWORD *)v29 = v31;
    *(_OWORD *)(v29 + 16) = v32;
    *(_QWORD *)(v29 + 32) = v33;
    outlined init with take of Any(&v34, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v28));
    ++*(_QWORD *)(v2 + 16);
    if (v7)
      goto LABEL_8;
LABEL_9:
    if (__OFADD__(v9, 1))
      goto LABEL_44;
    OUTLINED_FUNCTION_22_6();
    if (v13 == v14)
      goto LABEL_42;
    v15 = *(_QWORD *)(v30 + 8 * v12);
    v16 = v12;
    if (!v15)
    {
      OUTLINED_FUNCTION_0_27();
      if (v13 == v14)
        goto LABEL_42;
      OUTLINED_FUNCTION_4_17();
      if (!v15)
      {
        OUTLINED_FUNCTION_0_27();
        if (v13 == v14)
          goto LABEL_42;
        OUTLINED_FUNCTION_4_17();
        if (!v15)
        {
          OUTLINED_FUNCTION_0_27();
          if (v13 == v14)
            goto LABEL_42;
          OUTLINED_FUNCTION_4_17();
          if (!v15)
            break;
        }
      }
    }
LABEL_30:
    v7 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
  }
  OUTLINED_FUNCTION_22_6();
  if (v13 == v14)
  {
LABEL_42:
    OUTLINED_FUNCTION_13_7();
    OUTLINED_FUNCTION_11_8();
    return;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v17;
    goto LABEL_30;
  }
  while (!__OFADD__(v17, 1))
  {
    OUTLINED_FUNCTION_0_27();
    if (v13 == v14)
      goto LABEL_42;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    v17 = v18 + 1;
    if (v15)
      goto LABEL_30;
  }
LABEL_45:
  __break(1u);
}

void closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  __int128 aBlock;
  __int128 v39;
  void (*v40)(uint64_t, void *);
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;

  v9 = a3 + 16;
  swift_beginAccess();
  v10 = MEMORY[0x24956E090](v9);
  if (v10)
  {
    v11 = (_BYTE *)v10;
    v37 = v9;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    v13 = a2;
    v14 = a2;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v35 = a5;
      v36 = a4;
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v18;
      *(_DWORD *)v17 = 136315138;
      if (a2)
      {
        v42 = (uint64_t)a2;
        v19 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        v20 = String.init<A>(describing:)();
        v22 = v21;
      }
      else
      {
        v22 = 0xE300000000000000;
        v20 = 7104878;
      }
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_246EC7000, v15, v16, "NetworkManager - PerformanceFeed: Instant data for WiFi. Error: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v18, -1, -1);
      MEMORY[0x24956E018](v17, -1, -1);

      a5 = v35;
      a4 = v36;
    }
    else
    {

    }
    v43 = 0;
    if (a1)
    {
      *((_QWORD *)&v39 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(_QWORD *)&aBlock = a1;
    }
    else
    {
      aBlock = 0u;
      v39 = 0u;
    }
    swift_bridgeObjectRetain();
    v23 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&aBlock, &v43);
    outlined destroy of Any?((uint64_t)&aBlock);
    v24 = v43;
    v25 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v11[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v24 == 1)
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport] = (v23 & 1) == 0;
      objc_msgSend(*(id *)&v11[v25], sel_unlock);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v28 = 67109120;
        LODWORD(aBlock) = v23 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_246EC7000, v26, v27, "NetworkManager - PerformanceFeed: Symptoms WiFi Instant: %{BOOL}d", v28, 8u);
        MEMORY[0x24956E018](v28, -1, -1);
      }

      if ((v23 & 1) == 0)
      {
        specialized _dictionaryUpCast<A, B, C, D>(_:)(a5);
        v30 = v29;
        v31 = swift_allocObject();
        swift_beginAccess();
        v32 = (void *)MEMORY[0x24956E090](v37);
        swift_unknownObjectWeakInit();

        v40 = partial apply for closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed();
        v41 = v31;
        *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v39 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
        *((_QWORD *)&v39 + 1) = &block_descriptor_18_0;
        v33 = _Block_copy(&aBlock);
        swift_release();
        outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(1, v30, (uint64_t)v33, a4);

        _Block_release(v33);
        return;
      }
    }
    else
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport] = 2;
      v34 = *(id *)&v11[v25];
      objc_msgSend(v34, sel_unlock);

    }
  }
}

uint64_t NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)(uint64_t a1, _BYTE *a2)
{
  double v2;
  double v3;
  double v4;
  void *v6;
  uint64_t v7;
  char **v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t result;
  double v25;
  void *v26;
  _QWORD v27[3];
  uint64_t v28;
  BOOL v29;

  v29 = 0;
  outlined init with copy of Any?(a1, (uint64_t)v27);
  if (!v28)
    goto LABEL_32;
  v6 = (void *)type metadata accessor for NSDictionary();
  v7 = MEMORY[0x24BEE4AD8];
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0)
  {
LABEL_36:
    swift_beginAccess();
    return v29;
  }
  if ((uint64_t)objc_msgSend(v26, sel_count) < 1)
    goto LABEL_35;
  v8 = &selRef_carrierBundleChange_;
  v9 = objc_msgSend(v26, sel_allValues);
  v10 = (void *)(v7 + 8);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v11 + 16))
  {
    __break(1u);
    goto LABEL_38;
  }
  outlined init with copy of Any(v11 + 32, (uint64_t)v27);
  OUTLINED_FUNCTION_6_4();
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0)
  {
LABEL_35:

    goto LABEL_36;
  }
  v10 = v26;
  if ((uint64_t)objc_msgSend(v26, sel_count) < 1)
  {

    goto LABEL_36;
  }
  v12 = objc_msgSend(v26, sel_allValues);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  outlined init with copy of Any(v13 + 32, (uint64_t)v27);
  swift_bridgeObjectRelease();
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0)
  {
LABEL_34:

    goto LABEL_35;
  }
  v6 = v26;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_12_5();
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v14 = OUTLINED_FUNCTION_9_9();
  v15 = OUTLINED_FUNCTION_24_4();
  if (v13)
  {
    OUTLINED_FUNCTION_25_5();
    v15 = swift_unknownObjectRelease();
  }
  OUTLINED_FUNCTION_15_6(v15, v16);
  if (!v28)
  {
LABEL_31:
    OUTLINED_FUNCTION_6_4();

LABEL_32:
    outlined destroy of Any?((uint64_t)v27);
    goto LABEL_36;
  }
  if ((OUTLINED_FUNCTION_11_4() & 1) == 0)
  {
LABEL_33:
    OUTLINED_FUNCTION_6_4();

    goto LABEL_34;
  }
  v4 = v25;
  OUTLINED_FUNCTION_6_4();
  if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
    goto LABEL_39;
  v2 = -9.22337204e18;
  if (v25 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v25 < 9.22337204e18)
  {
    v8 = (char **)(uint64_t)v25;
    if ((uint64_t)v25 < 7)
    {

LABEL_30:
      goto LABEL_36;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_12_5();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v17 = OUTLINED_FUNCTION_9_9();
    v18 = OUTLINED_FUNCTION_24_4();
    if (v13)
    {
      OUTLINED_FUNCTION_25_5();
      v18 = swift_unknownObjectRelease();
    }
    OUTLINED_FUNCTION_15_6(v18, v19);
    if (v28)
    {
      if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
      {
        v3 = v25;
        OUTLINED_FUNCTION_6_4();
        *a2 = 1;
        v4 = v25 / v25;
        v29 = v25 / v25 > 0.5;
        if (one-time initialization token for siriNetwork == -1)
          goto LABEL_24;
        goto LABEL_42;
      }
      goto LABEL_33;
    }
    goto LABEL_31;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  swift_once();
LABEL_24:
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriNetwork);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v21, v22))
  {

    goto LABEL_30;
  }
  v23 = OUTLINED_FUNCTION_2_2();
  *(_DWORD *)v23 = 134219008;
  *(double *)v27 = v4;
  OUTLINED_FUNCTION_1_21();
  *(_WORD *)(v23 + 12) = 1024;
  LODWORD(v27[0]) = v4 > 0.5;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v23 + 18) = 2048;
  v27[0] = 0x3FE0000000000000;
  result = OUTLINED_FUNCTION_1_21();
  *(_WORD *)(v23 + 28) = 2048;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
  {
    if (v3 > v2)
    {
      if (v3 < 9.22337204e18)
      {
        v27[0] = (uint64_t)v3;
        OUTLINED_FUNCTION_1_21();
        *(_WORD *)(v23 + 38) = 2048;
        v27[0] = v8;
        OUTLINED_FUNCTION_1_21();
        _os_log_impl(&dword_246EC7000, v21, v22, "NetworkManager - PerformanceFeed: Success rate %f is acceptable: %{BOOL}d (success rate higher than %f). successes = %ld attempts = %ld", (uint8_t *)v23, 0x30u);
        OUTLINED_FUNCTION_0_4();
      }
      goto LABEL_45;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

void closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x24956E090](v5);
  if (v6)
  {
    v7 = (_BYTE *)v6;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
    v9 = a2;
    v10 = a2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_QWORD *)&v26 = v14;
      *(_DWORD *)v13 = 136315138;
      if (a2)
      {
        v25 = (uint64_t)a2;
        v15 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        v16 = String.init<A>(describing:)();
        v18 = v17;
      }
      else
      {
        v18 = 0xE300000000000000;
        v16 = 7104878;
      }
      v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_246EC7000, v11, v12, "NetworkManager - PerformanceFeed: Historical data for WiFi. Error: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v14, -1, -1);
      MEMORY[0x24956E018](v13, -1, -1);
    }
    else
    {

    }
    LOBYTE(v25) = 0;
    if (a1)
    {
      *((_QWORD *)&v27 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(_QWORD *)&v26 = a1;
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRetain();
    v19 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&v26, &v25);
    outlined destroy of Any?((uint64_t)&v26);
    v20 = v25;
    v21 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v7[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v20 == 1)
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 2] = (v19 & 1) == 0;
      objc_msgSend(*(id *)&v7[v21], sel_unlock);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v24 = 67109120;
        LODWORD(v26) = v19 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_246EC7000, v22, v23, "NetworkManager - PerformanceFeed: Symptoms WiFi Historical: %{BOOL}d", v24, 8u);
        MEMORY[0x24956E018](v24, -1, -1);
      }
    }
    else
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 2] = 2;
      v22 = *(id *)&v7[v21];
      -[NSObject unlock](v22, sel_unlock);
    }

  }
}

void closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  __int128 aBlock;
  __int128 v39;
  void (*v40)(uint64_t, void *);
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;

  v9 = a3 + 16;
  swift_beginAccess();
  v10 = MEMORY[0x24956E090](v9);
  if (v10)
  {
    v11 = (_BYTE *)v10;
    v37 = v9;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    v13 = a2;
    v14 = a2;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v35 = a5;
      v36 = a4;
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v18;
      *(_DWORD *)v17 = 136315138;
      if (a2)
      {
        v42 = (uint64_t)a2;
        v19 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        v20 = String.init<A>(describing:)();
        v22 = v21;
      }
      else
      {
        v22 = 0xE300000000000000;
        v20 = 7104878;
      }
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_246EC7000, v15, v16, "NetworkManager - PerformanceFeed: Instant data for Cell. Error: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v18, -1, -1);
      MEMORY[0x24956E018](v17, -1, -1);

      a5 = v35;
      a4 = v36;
    }
    else
    {

    }
    v43 = 0;
    if (a1)
    {
      *((_QWORD *)&v39 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(_QWORD *)&aBlock = a1;
    }
    else
    {
      aBlock = 0u;
      v39 = 0u;
    }
    swift_bridgeObjectRetain();
    v23 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&aBlock, &v43);
    outlined destroy of Any?((uint64_t)&aBlock);
    v24 = v43;
    v25 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v11[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v24 == 1)
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 1] = (v23 & 1) == 0;
      objc_msgSend(*(id *)&v11[v25], sel_unlock);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v28 = 67109120;
        LODWORD(aBlock) = v23 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_246EC7000, v26, v27, "NetworkManager - PerformanceFeed: Symptoms Cellular Instant: %{BOOL}d", v28, 8u);
        MEMORY[0x24956E018](v28, -1, -1);
      }

      if ((v23 & 1) == 0)
      {
        specialized _dictionaryUpCast<A, B, C, D>(_:)(a5);
        v30 = v29;
        v31 = swift_allocObject();
        swift_beginAccess();
        v32 = (void *)MEMORY[0x24956E090](v37);
        swift_unknownObjectWeakInit();

        v40 = partial apply for closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed();
        v41 = v31;
        *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v39 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
        *((_QWORD *)&v39 + 1) = &block_descriptor_14_0;
        v33 = _Block_copy(&aBlock);
        swift_release();
        outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(2, v30, (uint64_t)v33, a4);

        _Block_release(v33);
        return;
      }
    }
    else
    {
      v11[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 1] = 2;
      v34 = *(id *)&v11[v25];
      objc_msgSend(v34, sel_unlock);

    }
  }
}

void closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x24956E090](v5);
  if (v6)
  {
    v7 = (_BYTE *)v6;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
    v9 = a2;
    v10 = a2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_QWORD *)&v26 = v14;
      *(_DWORD *)v13 = 136315138;
      if (a2)
      {
        v25 = (uint64_t)a2;
        v15 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        v16 = String.init<A>(describing:)();
        v18 = v17;
      }
      else
      {
        v18 = 0xE300000000000000;
        v16 = 7104878;
      }
      v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_246EC7000, v11, v12, "NetworkManager - PerformanceFeed: Historical data for Cell. Error: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v14, -1, -1);
      MEMORY[0x24956E018](v13, -1, -1);
    }
    else
    {

    }
    LOBYTE(v25) = 0;
    if (a1)
    {
      *((_QWORD *)&v27 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *(_QWORD *)&v26 = a1;
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRetain();
    v19 = NetworkManager.acceptableSuccessRate(fullScorecard:hasMetrics:)((uint64_t)&v26, &v25);
    outlined destroy of Any?((uint64_t)&v26);
    v20 = v25;
    v21 = OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality;
    objc_msgSend(*(id *)&v7[OBJC_IVAR___SNNetworkManagerInternal_lockConnectionQuality], sel_lock);
    if (v20 == 1)
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 3] = (v19 & 1) == 0;
      objc_msgSend(*(id *)&v7[v21], sel_unlock);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v24 = 67109120;
        LODWORD(v26) = v19 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_246EC7000, v22, v23, "NetworkManager - PerformanceFeed: Symptoms Cellular Historical: %{BOOL}d", v24, 8u);
        MEMORY[0x24956E018](v24, -1, -1);
      }
    }
    else
    {
      v7[OBJC_IVAR___SNNetworkManagerInternal_connectionQualityReport + 3] = 2;
      v22 = *(id *)&v7[v21];
      -[NSObject unlock](v22, sel_unlock);
    }

  }
}

uint64_t NetworkManager.networkQuality(networkType:)(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  v2 = NetworkManager.currentConnectionQualityReport()();
  v3 = v2;
  if (!a1)
    return qword_246F74158[(char)v3];
  if (a1 == 1)
  {
    v3 = v2 >> 8;
    return qword_246F74158[(char)v3];
  }
  if (a1 != 2)
    return 0;
  result = 1;
  if ((_BYTE)v3)
  {
    v5 = v3 >> 8;
    v6 = BYTE1(v3) == 1 || v3 == 1;
    v7 = 2;
    if (!v6)
      v7 = 0;
    if ((_BYTE)v5)
      return v7;
  }
  return result;
}

id @nonobjc AnalyticsWorkspace.init(workspaceWithService:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  if (a2)
  {
    v3 = (void *)MEMORY[0x24956D034]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v2, sel_initWorkspaceWithService_, v3);

  return v4;
}

uint64_t sub_246F136D8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

id outlined bridged method (mnbnnn) of @objc NetworkPerformanceFeed.fullScorecard(for:options:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa;
  id v8;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(a4, sel_fullScorecardFor_options_reply_, a1, isa, a3);

  return v8;
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #2 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void partial apply for closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in closure #2 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, v2);
}

unint64_t type metadata accessor for NSDictionary()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSDictionary;
  if (!lazy cache variable for type metadata for NSDictionary)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  }
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed()(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in closure #1 in NetworkManager.updateNetworkPerformanceFeed()(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_1_21()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_7_13()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

id OUTLINED_FUNCTION_9_9()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, (SEL)(v2 + 3606), v1);
}

uint64_t OUTLINED_FUNCTION_10_8()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_11_8()
{
  uint64_t v0;

  outlined consume of [String : UInt64].Iterator._Variant();
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return swift_unknownObjectWeakInit();
}

uint64_t OUTLINED_FUNCTION_15_6(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  return outlined init with take of Any?((uint64_t)va, (uint64_t)va1);
}

_OWORD *OUTLINED_FUNCTION_17_7()
{
  _OWORD *v0;
  _OWORD *v1;

  return outlined init with take of Any(v0, v1);
}

uint64_t OUTLINED_FUNCTION_24_4()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_25_5()
{
  return _bridgeAnyObjectToAny(_:)();
}

void *OUTLINED_FUNCTION_26_3@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, char aBlock, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  a7 = v8;
  a8 = a1;
  return _Block_copy(&aBlock);
}

uint64_t NWConnection.init(endpoint:configuration:with:)(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  uint64_t v11;
  _BYTE v14[520];

  v6 = type metadata accessor for NWEndpoint();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  memcpy(v14, a2, 0x204uLL);
  type metadata accessor for NWParameters();
  v10 = a3;
  NWParameters.init(configuration:with:)(v14, a3);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v11 = dispatch thunk of NWConnection.__allocating_init(to:using:)();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v11;
}

uint64_t closure #1 in NWConnection.readyEstablishmentReport(queue:completion:)(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[14];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NWConnection.EstablishmentReport?(a1, (uint64_t)v6);
  ConnectionEstablishmentReport.init(report:)((uint64_t)v6, v8);
  a2(v8);
  return outlined release of ConnectionEstablishmentReport?((uint64_t)v8);
}

uint64_t protocol witness for NetworkConnectionProtocol.stateUpdateHandler.setter in conformance NWConnection()
{
  return NWConnection.stateUpdateHandler.setter();
}

uint64_t protocol witness for NetworkConnectionProtocol.viabilityUpdateHandler.setter in conformance NWConnection()
{
  return NWConnection.viabilityUpdateHandler.setter();
}

uint64_t protocol witness for NetworkConnectionProtocol.betterPathUpdateHandler.setter in conformance NWConnection()
{
  return NWConnection.betterPathUpdateHandler.setter();
}

uint64_t outlined init with copy of NWConnection.EstablishmentReport?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWConnection.EstablishmentReport?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of ConnectionEstablishmentReport?(uint64_t a1)
{
  outlined consume of ConnectionEstablishmentReport?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(void **)(a1 + 104));
  return a1;
}

void static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char isEscapingClosureAtFileLocation;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  _QWORD *countAndFlagsBits;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  Swift::String v46;
  char v47;
  int v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  char v52;
  uint64_t v53;
  _BOOL8 v54;
  Swift::Int v55;
  unint64_t v56;
  char v57;
  Swift::Bool v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _DWORD v79[4];
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  void *v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  int v89;
  void (*v90)(char *, uint64_t);
  int countAndFlagsBits_low;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  Swift::String aBlock;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  void *v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;

  v5 = type metadata accessor for NWInterface.InterfaceType();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_193();
  v99 = v7;
  v8 = OUTLINED_FUNCTION_21_6();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v79 - v13;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWInterface?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_41_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || (a2 & 1) == 0)
    goto LABEL_11;
  v97 = v6;
  v95 = v5;
  swift_retain();
  aBlock._countAndFlagsBits = NWConnection.identifier.getter();
  v19 = dispatch thunk of CustomStringConvertible.description.getter();
  v98 = v20;
  MEMORY[0x24956CCF8]();
  v21 = (void *)nw_connection_copy_tcp_info();
  swift_unknownObjectRelease();
  if (!v21)
  {
LABEL_6:
    v23 = v19;
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriNetwork);
    v25 = v98;
    OUTLINED_FUNCTION_12_6();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      aBlock._countAndFlagsBits = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v28 = 136315138;
      OUTLINED_FUNCTION_12_6();
      v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &aBlock._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_24_5();
      _os_log_impl(&dword_246EC7000, v26, v27, "NetworkMetrics: TCP Info not reachable for connection %s because path doesn't exist", v28, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_2_7();
    OUTLINED_FUNCTION_7_14();
    goto LABEL_11;
  }
  v22 = MEMORY[0x24956E12C](v21);
  if (v22 != XPC_TYPE_DICTIONARY.getter() || (uint64_t)xpc_dictionary_get_count(v21) < 1)
  {
    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  v82 = v19;
  v107 = MEMORY[0x24BEE4B00];
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = &v107;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:);
  *(_QWORD *)(v30 + 24) = v29;
  v84 = v29;
  v105 = partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool);
  v106 = v30;
  aBlock._countAndFlagsBits = MEMORY[0x24BDAC760];
  aBlock._object = (void *)1107296256;
  v103 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool);
  v104 = &block_descriptor_10;
  v31 = _Block_copy(&aBlock);
  v96 = v106;
  swift_retain();
  swift_release();
  v85 = v21;
  xpc_dictionary_apply(v21, v31);
  _Block_release(v31);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v33 = v97;
  if (*(_QWORD *)(v107 + 16))
  {
    NWConnection.currentPath.getter();
    v34 = type metadata accessor for NWPath();
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v34) == 1)
    {
      outlined destroy of NWPath?((uint64_t)v18);
      goto LABEL_52;
    }
    v35 = NWPath.availableInterfaces.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v18, v34);
    v36 = *(_QWORD *)(v35 + 16);
    v80 = v35;
    if (!v36)
    {
LABEL_50:
      OUTLINED_FUNCTION_17_8(v2, 1);
LABEL_51:
      swift_bridgeObjectRelease();
LABEL_52:
      swift_bridgeObjectRelease();
      v8 = v98;
      swift_retain();
      v70 = swift_bridgeObjectRetain();
      static ConnectionTCPInfoMetrics.setConnectionMetricsTCPInfo(_:from:)(v70, a1);
      OUTLINED_FUNCTION_10_2();
      OUTLINED_FUNCTION_7_14();
      if (one-time initialization token for siriNetwork == -1)
      {
LABEL_53:
        v71 = type metadata accessor for Logger();
        __swift_project_value_buffer(v71, (uint64_t)static Logger.siriNetwork);
        swift_bridgeObjectRetain_n();
        OUTLINED_FUNCTION_12_6();
        v72 = Logger.logObject.getter();
        v73 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = OUTLINED_FUNCTION_2_2();
          aBlock._countAndFlagsBits = OUTLINED_FUNCTION_2_2();
          *(_DWORD *)v74 = 136315394;
          OUTLINED_FUNCTION_12_6();
          v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v8, &aBlock._countAndFlagsBits);
          OUTLINED_FUNCTION_8_10();
          OUTLINED_FUNCTION_24_5();
          *(_WORD *)(v74 + 12) = 2080;
          v75 = swift_bridgeObjectRetain();
          v76 = MEMORY[0x24956D148](v75, &type metadata for ConnectionTCPInfoMetrics);
          v78 = v77;
          swift_bridgeObjectRelease();
          v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, &aBlock._countAndFlagsBits);
          OUTLINED_FUNCTION_8_10();
          OUTLINED_FUNCTION_2_7();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_246EC7000, v72, v73, "NetworkMetrics: TCP Info by interface for connection %s: %s", (uint8_t *)v74, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_4();
        }

        OUTLINED_FUNCTION_5_15();
        OUTLINED_FUNCTION_2_7();
        OUTLINED_FUNCTION_2_7();
        OUTLINED_FUNCTION_7_14();
        swift_release();
        OUTLINED_FUNCTION_10_2();
        goto LABEL_11;
      }
LABEL_59:
      swift_once();
      goto LABEL_53;
    }
    v37 = v35 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v87 = *(_QWORD *)(v9 + 72);
    v38 = *(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 16);
    v89 = *MEMORY[0x24BDE00B0];
    v83 = *MEMORY[0x24BDE00A8];
    v81 = *MEMORY[0x24BDE00B8];
    v79[3] = *MEMORY[0x24BDE00A0];
    v79[2] = *MEMORY[0x24BDE00C0];
    countAndFlagsBits = (_QWORD *)MEMORY[0x24BEE4B00];
    v88 = a1;
    v86 = v38;
    while (1)
    {
      v40 = v33;
      v93 = v36;
      v41 = (void (*)(char *, char *, uint64_t))v38;
      v38(v2, v37, v8);
      OUTLINED_FUNCTION_17_8(v2, 0);
      if (__swift_getEnumTagSinglePayload(v2, 1, v8) == 1)
        goto LABEL_51;
      v92 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v14, v2, v8);
      v94 = NWInterface.name.getter();
      v96 = v42;
      v41(v12, v14, v8);
      v43 = v99;
      NWInterface.type.getter();
      v44 = v95;
      v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 88))(v43, v95);
      if (v45 == v89)
        goto LABEL_22;
      OUTLINED_FUNCTION_20_9();
      if (v67)
        break;
      OUTLINED_FUNCTION_20_9();
      if (!v67)
      {
        OUTLINED_FUNCTION_20_9();
        if (v68)
        {
          OUTLINED_FUNCTION_0_28();
          v48 = 23;
        }
        else
        {
          OUTLINED_FUNCTION_20_9();
          if (!v69)
          {
            OUTLINED_FUNCTION_0_28();
            (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v99, v44);
            countAndFlagsBits_low = 0;
            goto LABEL_29;
          }
LABEL_22:
          NWInterface.name.getter();
          v46 = String.lowercased()();
          OUTLINED_FUNCTION_10_2();
          aBlock = v46;
          v100 = 0x6365737069;
          v101 = 0xE500000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          v47 = OUTLINED_FUNCTION_23_5();
          OUTLINED_FUNCTION_0_28();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v47 & 1) != 0)
            v48 = 24;
          else
            v48 = 0;
        }
LABEL_28:
        countAndFlagsBits_low = v48;
LABEL_29:
        v49 = v96;
        goto LABEL_30;
      }
      v49 = v96;
      if (one-time initialization token for shared != -1)
        swift_once();
      NetworkManager.connectionTechnologyForCellularInterface()();
      OUTLINED_FUNCTION_0_28();
      countAndFlagsBits_low = LOBYTE(aBlock._countAndFlagsBits);
LABEL_30:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v49);
      v53 = countAndFlagsBits[2];
      v54 = (v52 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
      {
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v56 = v51;
      v57 = v52;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, ConnectionType>);
      v58 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v55);
      a1 = v88;
      if (v58)
      {
        v59 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v96);
        if ((v57 & 1) != (v60 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        v56 = v59;
      }
      countAndFlagsBits = (_QWORD *)aBlock._countAndFlagsBits;
      if ((v57 & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(aBlock._countAndFlagsBits + 56) + v56) = countAndFlagsBits_low;
        v33 = v97;
        v61 = v92;
      }
      else
      {
        *(_QWORD *)(aBlock._countAndFlagsBits + 8 * (v56 >> 6) + 64) |= 1 << v56;
        v62 = (_QWORD *)(countAndFlagsBits[6] + 16 * v56);
        v63 = v96;
        *v62 = v94;
        v62[1] = v63;
        *(_BYTE *)(countAndFlagsBits[7] + v56) = countAndFlagsBits_low;
        v64 = countAndFlagsBits[2];
        v65 = __OFADD__(v64, 1);
        v66 = v64 + 1;
        v61 = v92;
        if (v65)
          goto LABEL_57;
        countAndFlagsBits[2] = v66;
        swift_bridgeObjectRetain();
        v33 = v97;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v90(v14, v8);
      v37 = v61 + v87;
      v36 = v93 - 1;
      v38 = v86;
      if (v93 == 1)
        goto LABEL_50;
    }
    OUTLINED_FUNCTION_0_28();
    v48 = 1;
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_5_15();
  OUTLINED_FUNCTION_7_14();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_10_2();
LABEL_11:
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(int a1, xpc_object_t xdata)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = (uint64_t)xpc_data_get_bytes_ptr(xdata);
  if (result)
  {
    v4 = result;
    if (xpc_data_get_length(xdata) == 408 && (v5 = MEMORY[0x24956E12C](xdata), v5 == XPC_TYPE_DATA.getter()))
    {
      v6 = String.init(cString:)();
      v8 = v7;
      v9 = MEMORY[0x24956C938](v4, 408);
      v11 = v10;
      outlined copy of Data._Representation(v9, v10);
      specialized Dictionary._Variant.setValue(_:forKey:)(v9, v11, v6, v8);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v9, v11);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void static ConnectionTCPInfoMetrics.setConnectionMetricsTCPInfo(_:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumTagSinglePayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  int *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  Swift::String v29;
  char v30;
  char countAndFlagsBits;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  Swift::Int v38;
  unint64_t v39;
  char v40;
  Swift::Bool v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD);
  int v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t (**v74)(uint64_t, uint64_t);
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[132];
  unint64_t v83;
  int v84;
  Swift::String v85;

  v81 = a1;
  v4 = type metadata accessor for NWInterface.InterfaceType();
  v74 = *(uint64_t (***)(uint64_t, uint64_t))(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_193();
  v73 = v5;
  v6 = OUTLINED_FUNCTION_21_6();
  v76 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v75 = (int *)&v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v57[-v9];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWInterface?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v57[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_41_1();
  if (a2)
  {
    v72 = v10;
    swift_retain();
    v85._countAndFlagsBits = NWConnection.identifier.getter();
    v62 = dispatch thunk of CustomStringConvertible.description.getter();
    v64 = v15;
    NWConnection.currentPath.getter();
    v16 = type metadata accessor for NWPath();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v16);
    v63 = a2;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of NWPath?(v2);
      v77 = MEMORY[0x24BEE4B00];
      goto LABEL_35;
    }
    v18 = NWPath.availableInterfaces.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v2, v16);
    v19 = *(_QWORD *)(v18 + 16);
    v60 = v18;
    if (!v19)
    {
      v77 = MEMORY[0x24BEE4B00];
LABEL_33:
      OUTLINED_FUNCTION_18_5((uint64_t)v13, 1);
LABEL_34:
      swift_bridgeObjectRelease();
LABEL_35:
      v49 = *(_QWORD *)(v81 + 64);
      v79 = v81 + 64;
      v50 = 1 << *(_BYTE *)(v81 + 32);
      v51 = -1;
      if (v50 < 64)
        v51 = ~(-1 << v50);
      v52 = v51 & v49;
      v80 = (unint64_t)(v50 + 63) >> 6;
      v74 = (uint64_t (**)(uint64_t, uint64_t))v82;
      v75 = &v84;
      swift_bridgeObjectRetain();
      v76 = MEMORY[0x24BEE4AF8];
      if (v52)
      {
        v53 = __clz(__rbit64(v52));
        goto LABEL_52;
      }
      if (v80 > 1)
      {
        v54 = *(_QWORD *)(v79 + 8);
        v55 = 1;
        if (v54)
          goto LABEL_51;
        v55 = 2;
        if (v80 > 2)
        {
          v54 = *(_QWORD *)(v79 + 16);
          if (v54)
            goto LABEL_51;
          v55 = 3;
          if (v80 > 3)
          {
            v54 = *(_QWORD *)(v79 + 24);
            if (!v54)
            {
              v56 = 4;
              if (v80 > 4)
              {
                v54 = *(_QWORD *)(v79 + 32);
                if (!v54)
                {
                  while (1)
                  {
                    v55 = v56 + 1;
                    if (__OFADD__(v56, 1))
                      goto LABEL_56;
                    if (v55 >= v80)
                      goto LABEL_53;
                    v54 = *(_QWORD *)(v79 + 8 * v55);
                    ++v56;
                    if (v54)
                      goto LABEL_51;
                  }
                }
                v55 = 4;
                goto LABEL_51;
              }
              goto LABEL_53;
            }
LABEL_51:
            v53 = __clz(__rbit64(v54)) + (v55 << 6);
LABEL_52:
            __asm { BR              X9 }
          }
        }
      }
LABEL_53:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    v20 = v76;
    v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v66 = *(_QWORD *)(v76 + 72);
    v22 = *(void (**)(_QWORD, _QWORD, _QWORD))(v76 + 16);
    v70 = *MEMORY[0x24BDE00B0];
    v65 = *MEMORY[0x24BDE00A8];
    v61 = *MEMORY[0x24BDE00B8];
    v59 = *MEMORY[0x24BDE00A0];
    v58 = *MEMORY[0x24BDE00C0];
    v77 = MEMORY[0x24BEE4B00];
    v71 = v4;
    v67 = v13;
    v68 = v6;
    v23 = v75;
    v24 = v72;
    v69 = v22;
    while (1)
    {
      v22(v13, v21, v6);
      OUTLINED_FUNCTION_18_5((uint64_t)v13, 0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v6) == 1)
        goto LABEL_34;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v24, v13, v6);
      v80 = NWInterface.name.getter();
      v26 = v25;
      v22(v23, v24, v6);
      v27 = v73;
      NWInterface.type.getter();
      v28 = v74[11](v27, v71);
      v78 = v19;
      if (v28 == v70)
        goto LABEL_9;
      if (v28 == v65)
      {
        OUTLINED_FUNCTION_1_22();
        countAndFlagsBits = 1;
        goto LABEL_22;
      }
      if (v28 != v61)
        break;
      if (one-time initialization token for shared != -1)
        swift_once();
      NetworkManager.connectionTechnologyForCellularInterface()();
      OUTLINED_FUNCTION_1_22();
      countAndFlagsBits = v85._countAndFlagsBits;
LABEL_22:
      v32 = v77;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v85._countAndFlagsBits = v32;
      v34 = OUTLINED_FUNCTION_19_7();
      v36 = *(_QWORD *)(v32 + 16);
      v37 = (v35 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x246F153A0);
      }
      v39 = v34;
      v40 = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, ConnectionType>);
      v41 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38);
      v20 = v76;
      v24 = v72;
      v22 = v69;
      if (v41)
      {
        v42 = OUTLINED_FUNCTION_19_7();
        if ((v40 & 1) != (v43 & 1))
          goto LABEL_58;
        v39 = v42;
      }
      v44 = (_QWORD *)v85._countAndFlagsBits;
      v77 = v85._countAndFlagsBits;
      if ((v40 & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(v85._countAndFlagsBits + 56) + v39) = countAndFlagsBits;
      }
      else
      {
        *(_QWORD *)(v85._countAndFlagsBits + 8 * (v39 >> 6) + 64) |= 1 << v39;
        v45 = (uint64_t *)(v44[6] + 16 * v39);
        *v45 = v80;
        v45[1] = v26;
        *(_BYTE *)(v44[7] + v39) = countAndFlagsBits;
        v46 = v44[2];
        v47 = __OFADD__(v46, 1);
        v48 = v46 + 1;
        if (v47)
          goto LABEL_57;
        v44[2] = v48;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v68;
      ((void (*)(_BYTE *, uint64_t))v79)(v24, v68);
      v13 = v67;
      v21 += v66;
      v19 = v78 - 1;
      v23 = v75;
      if (v78 == 1)
        goto LABEL_33;
    }
    if (v28 == v59)
    {
      OUTLINED_FUNCTION_1_22();
      countAndFlagsBits = 23;
      goto LABEL_22;
    }
    if (v28 != v58)
    {
      OUTLINED_FUNCTION_1_22();
      v74[1](v73, v71);
      countAndFlagsBits = 0;
      goto LABEL_22;
    }
LABEL_9:
    NWInterface.name.getter();
    v29 = String.lowercased()();
    swift_bridgeObjectRelease();
    v85 = v29;
    *(_QWORD *)&v82[124] = 0x6365737069;
    v83 = 0xE500000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v30 = OUTLINED_FUNCTION_23_5();
    v79 = *(_QWORD *)(v20 + 8);
    ((void (*)(int *, uint64_t))v79)(v23, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      countAndFlagsBits = 24;
    else
      countAndFlagsBits = 0;
    goto LABEL_22;
  }
LABEL_54:
  OUTLINED_FUNCTION_1_1();
}

uint64_t sub_246F153B0()
{
  return OUTLINED_FUNCTION_6_8();
}

uint64_t partial apply for closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(int a1, void *a2)
{
  return closure #1 in static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(a1, a2);
}

uint64_t sub_246F153C4()
{
  return OUTLINED_FUNCTION_6_8();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t outlined destroy of NWPath?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24956DF70](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x24956DF70](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t _sSo8tcp_infoVSgWOi_(uint64_t result)
{
  *(_BYTE *)(result + 408) = 0;
  return result;
}

uint64_t outlined init with take of tcp_info?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for tcp_info?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _So8tcp_infoV_tcpi_tfo_syn_data_acked_getter(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 244) >> 4) & 1;
}

uint64_t OUTLINED_FUNCTION_0_28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  *(_QWORD *)(v3 - 240) = v4;
  return v4(v2, v0);
}

uint64_t OUTLINED_FUNCTION_1_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(_QWORD *)(v0 + 200) = v4;
  return v4(v1, v3);
}

uint64_t OUTLINED_FUNCTION_5_15()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_8_10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_12_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_15_7()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_16_8()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_17_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_18_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

unint64_t OUTLINED_FUNCTION_19_7()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 208), v1);
}

uint64_t OUTLINED_FUNCTION_21_6()
{
  return type metadata accessor for NWInterface();
}

uint64_t OUTLINED_FUNCTION_23_5()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_24_5()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t SpeechPacket.internalAceId.getter()
{
  return SpeechPacket.internalAceId.getter(&OBJC_IVAR___SNSpeechPacketInternal_internalAceId);
}

uint64_t SpeechPacket.internalAceId.setter(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalAceId.setter(a1, a2, &OBJC_IVAR___SNSpeechPacketInternal_internalAceId);
}

void SpeechPacket.internalAceId.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

id @objc SpeechPacket.internalAceId.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a3();
  if (v4)
  {
    v5 = (void *)MEMORY[0x24956D034](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

uint64_t SpeechPacket.internalRefId.getter()
{
  return SpeechPacket.internalAceId.getter(&OBJC_IVAR___SNSpeechPacketInternal_internalRefId);
}

uint64_t SpeechPacket.internalAceId.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  OUTLINED_FUNCTION_0_2();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

void @objc SpeechPacket.internalAceId.setter(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = a1;
  a4(v6, v8);

}

uint64_t SpeechPacket.internalRefId.setter(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalAceId.setter(a1, a2, &OBJC_IVAR___SNSpeechPacketInternal_internalRefId);
}

uint64_t SpeechPacket.internalAceId.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  OUTLINED_FUNCTION_0_2();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for SpeechPacket.internalAceId : SpeechPacket(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

void SpeechPacket.internalRefId.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

void SpeechPacket.packets.getter()
{
  OUTLINED_FUNCTION_0_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_4();
}

void SpeechPacket.packets.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___SNSpeechPacketInternal_packets);
  OUTLINED_FUNCTION_0_2();
  *v3 = a1;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4();
}

void key path setter for SpeechPacket.packets : SpeechPacket()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  SpeechPacket.packets.setter(v0);
}

void SpeechPacket.packets.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

void SpeechPacket.packetNumber.getter()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_4();
}

void SpeechPacket.packetNumber.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___SNSpeechPacketInternal_packetNumber);
  OUTLINED_FUNCTION_0_2();
  *v3 = a1;
  OUTLINED_FUNCTION_4();
}

void SpeechPacket.packetNumber.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

id SpeechPacket.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SpeechPacket.init()()
{
  char *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v1 = &v0[OBJC_IVAR___SNSpeechPacketInternal_internalAceId];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR___SNSpeechPacketInternal_internalRefId];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR___SNSpeechPacketInternal_packets] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR___SNSpeechPacketInternal_packetNumber] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SpeechPacket();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for SpeechPacket()
{
  return objc_opt_self();
}

id SpeechPacket.__allocating_init(aceId:refId:packets:packetNumber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return SpeechPacket.init(aceId:refId:packets:packetNumber:)(a1, a2, a3, a4, a5, a6);
}

id SpeechPacket.init(aceId:refId:packets:packetNumber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  objc_super v19;

  v11 = &v6[OBJC_IVAR___SNSpeechPacketInternal_internalAceId];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = &v6[OBJC_IVAR___SNSpeechPacketInternal_internalRefId];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v6[OBJC_IVAR___SNSpeechPacketInternal_packets];
  *(_QWORD *)&v6[OBJC_IVAR___SNSpeechPacketInternal_packets] = MEMORY[0x24BEE4AF8];
  v14 = &v6[OBJC_IVAR___SNSpeechPacketInternal_packetNumber];
  *(_QWORD *)&v6[OBJC_IVAR___SNSpeechPacketInternal_packetNumber] = 0;
  OUTLINED_FUNCTION_0_2();
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  v15 = v6;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_2();
  *(_QWORD *)v12 = a3;
  *((_QWORD *)v12 + 1) = a4;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_2();
  *(_QWORD *)v13 = a5;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_2();
  *(_QWORD *)v14 = a6;

  v19.receiver = v15;
  v19.super_class = (Class)type metadata accessor for SpeechPacket();
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t SpeechPacket.serializedAceData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  static AceSerialization.aceDataForSpeechPacket(_:)(v0);
  if (!v1)
  {
    if (v3 >> 60 != 15)
      __asm { BR              X10 }
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(_OWORD *)v4 = xmmword_246F740B0;
    *(_BYTE *)(v4 + 16) = 3;
    swift_willThrow();
  }
  return v2;
}

void sub_246F15DA0()
{
  unint64_t v0;
  uint64_t v1;

  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSo16OS_dispatch_dataCTg5037_s10Foundation4DataV06InlineB0V15withb29BytesyxxSWKXEKlFxSWKXEfU_So16g1_h1_I5C_TG5SWxsAC_pRi_zRi0_zlyAGIsgyrzo_SiTf1nc_n044_sSo9AceObjectC11SiriNetworkE010serializedA4lug1_h1_I13CyKFAFSWXEfU_Tf1ncn_n(v0, v1 & 0xFFFFFFFFFFFFLL, BYTE6(v1));
  OUTLINED_FUNCTION_3_14();
  JUMPOUT(0x246F15D6CLL);
}

Swift::String_optional __swiftcall SpeechPacket.sessionRequestId()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = 0;
  v1 = 0;
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

id SpeechPacket.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpeechPacket();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for SessionObject.internalAceId.getter in conformance SpeechPacket()
{
  return SpeechPacket.internalAceId.getter();
}

uint64_t protocol witness for SessionObject.internalAceId.setter in conformance SpeechPacket(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalAceId.setter(a1, a2);
}

uint64_t (*protocol witness for SessionObject.internalAceId.modify in conformance SpeechPacket())()
{
  swift_beginAccess();
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t protocol witness for SessionObject.internalRefId.getter in conformance SpeechPacket()
{
  return SpeechPacket.internalRefId.getter();
}

uint64_t protocol witness for SessionObject.internalRefId.setter in conformance SpeechPacket(uint64_t a1, uint64_t a2)
{
  return SpeechPacket.internalRefId.setter(a1, a2);
}

uint64_t (*protocol witness for SessionObject.internalRefId.modify in conformance SpeechPacket())()
{
  swift_beginAccess();
  return RPCOspreyConnectionProvider.connectionMetrics.modify;
}

uint64_t protocol witness for SessionObject.serializedAceData() in conformance SpeechPacket()
{
  return SpeechPacket.serializedAceData()();
}

void sub_246F1613C()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  *v0 = SpeechPacket.internalAceId.getter();
  v0[1] = v1;
  OUTLINED_FUNCTION_3();
}

uint64_t sub_246F1615C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SpeechPacket.internalAceId : SpeechPacket(a1, a2, a3, a4, SpeechPacket.internalAceId.setter);
}

void sub_246F16178()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  *v0 = SpeechPacket.internalRefId.getter();
  v0[1] = v1;
  OUTLINED_FUNCTION_3();
}

uint64_t sub_246F16198(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SpeechPacket.internalAceId : SpeechPacket(a1, a2, a3, a4, SpeechPacket.internalRefId.setter);
}

void sub_246F161B4()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  SpeechPacket.packets.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_3();
}

void sub_246F161D8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  SpeechPacket.packetNumber.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_3();
}

void sub_246F161F8(uint64_t *a1)
{
  SpeechPacket.packetNumber.setter(*a1);
  OUTLINED_FUNCTION_3();
}

uint64_t method lookup function for SpeechPacket()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SpeechPacket.internalAceId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SpeechPacket.internalAceId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SpeechPacket.internalAceId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SpeechPacket.internalRefId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SpeechPacket.internalRefId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SpeechPacket.internalRefId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SpeechPacket.packets.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SpeechPacket.packets.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SpeechPacket.packets.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SpeechPacket.packetNumber.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SpeechPacket.packetNumber.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SpeechPacket.packetNumber.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SpeechPacket.__allocating_init(aceId:refId:packets:packetNumber:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of SpeechPacket.serializedAceData()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SpeechPacket.bufferingAllowedDuringActiveSession()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SpeechPacket.isRetryable()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SpeechPacket.isRestartable()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SpeechPacket.isProvisional()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SpeechPacket.logDiagnostics()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SpeechPacket.sessionRequestId()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SpeechPacket.setSessionRequestId(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SpeechPacket.supportedByLocalSession()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SpeechPacket.supportedByRemoteLimitedSession()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

uint64_t NWParameters.init(configuration:with:)(const void *a1, void *a2)
{
  os_log_type_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  double v24;
  char v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  float *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  float *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  char *__ptr32 *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  os_log_type_t v47;
  _WORD *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  xpc_object_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  NSObject *v81;
  id v82;
  uint64_t v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  os_log_type_t v87;
  _WORD *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  void *v93;
  os_log_type_t v94;
  _WORD *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  os_log_type_t v100;
  _WORD *v101;
  _BYTE v103[16];
  _DWORD *v104;
  int v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  __int128 v114;
  __int128 v115;
  mach_msg_type_number_t v116;
  __int128 v117;
  __int128 v118;
  _QWORD v119[12];
  char v120;
  char v121;
  unsigned __int8 v122;
  BOOL v123;
  double v124;
  char v125;
  unsigned __int8 v126;
  char v127;
  char v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v5 = type metadata accessor for NWParameters.ServiceClass();
  v108 = *(_QWORD *)(v5 - 8);
  v109 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v107 = &v103[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OUTLINED_FUNCTION_28(v119, a1);
  v7 = v122;
  OUTLINED_FUNCTION_28(&v117, a1);
  ConnectionConfiguration.usingTLS.getter();
  v9 = v8;
  v10 = 0x254436000;
  if ((v8 & 1) != 0 && (v121 & 1) == 0)
  {
    OUTLINED_FUNCTION_9_11();
    if (!v11)
      swift_once();
    v12 = OUTLINED_FUNCTION_5_1();
    v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    Logger.logObject.getter();
    v14 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_7_0(v14))
    {
      v15 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_246EC7000, v13, v2, "Provider - Network setup: TLS enabled", v15, 2u);
      OUTLINED_FUNCTION_0_4();
    }

    type metadata accessor for NWProtocolTLS.Options();
    OUTLINED_FUNCTION_21_7();
    v16 = (void *)NWProtocolTLS.Options.init()();
    swift_retain();
    v17 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter();
    v113 = v16;
    swift_release();
    sec_protocol_options_set_tls_tickets_enabled(v17, v123);
    if (v131 && (v130 & 0x1010000) != 0)
    {
      OUTLINED_FUNCTION_17_9();
      v18 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_1_23(v18))
      {
        v19 = (_WORD *)OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_13_8(v19);
        OUTLINED_FUNCTION_2_19(&dword_246EC7000, v20, v21, "Provider - Network setup: TLS13 enabled");
        OUTLINED_FUNCTION_0_4();
      }

      sec_protocol_options_set_max_tls_protocol_version(v17, tls_protocol_version_TLSv13);
      sec_protocol_options_set_tls_resumption_enabled(v17, 1);
      sec_protocol_options_set_tls_false_start_enabled(v17, 1);
      sec_protocol_options_add_tls_application_protocol(v17, "http/1.1");
    }
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = 0;
    v113 = 0;
  }
  type metadata accessor for NWProtocolTCP.Options();
  OUTLINED_FUNCTION_21_7();
  v22 = NWProtocolTCP.Options.init()();
  LODWORD(v104) = v9;
  if (v131)
  {
    v105 = v130 & 1;
    v111 = (v130 >> 8) & 1;
    v7 = HIDWORD(v130) & 1;
  }
  else
  {
    v105 = 0;
    v111 = 1;
  }
  v23 = v22;
  dispatch thunk of NWProtocolTCP.Options.noDelay.setter();
  v110 = v7;
  dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter();
  v24 = v124;
  v25 = v125;
  LOBYTE(v26) = v127;
  v112 = a2;
  if (v125 != 1 || !v126 || (v128 & 1) == 0)
  {
    OUTLINED_FUNCTION_15_8(v126);
    dispatch thunk of NWProtocolTCP.Options.keepaliveCount.setter();
    OUTLINED_FUNCTION_9_11();
    if (!v11)
      swift_once();
    v27 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_123();
    v28 = OUTLINED_FUNCTION_17_9();
    v29 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_14_5(v28))
    {
      v30 = (float *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_28_2(v30, 3.852e-34);
      v31 = dispatch thunk of NWProtocolTCP.Options.keepaliveCount.getter();
      OUTLINED_FUNCTION_12_7(v31);
      OUTLINED_FUNCTION_34_0();
      OUTLINED_FUNCTION_11_9(&dword_246EC7000, v28, v29, "Provider - Network setup: keepaliveCount (number of keepalive probes to send before terminating): %ld");
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_34_0();
    if ((v25 & 1) == 0)
      Double.seconds.getter(v24);
    dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.setter();
    OUTLINED_FUNCTION_123();
    v32 = OUTLINED_FUNCTION_17_9();
    v33 = static os_log_type_t.default.getter();
    if (OUTLINED_FUNCTION_14_5(v32))
    {
      v34 = (float *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_28_2(v34, 3.852e-34);
      v35 = dispatch thunk of NWProtocolTCP.Options.keepaliveIdle.getter();
      OUTLINED_FUNCTION_12_7(v35);
      OUTLINED_FUNCTION_34_0();
      OUTLINED_FUNCTION_11_9(&dword_246EC7000, v32, v33, "Provider - Network setup: keepaliveIdle (number of seconds of idleness to wait before keepalive): %ld");
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_34_0();
    a2 = v112;
    if ((v103[12] & 1) == 0)
      OUTLINED_FUNCTION_20_10();
    v23 = v22;
    dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.setter();
    OUTLINED_FUNCTION_123();
    v26 = OUTLINED_FUNCTION_17_9();
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v36))
    {
      *(_DWORD *)OUTLINED_FUNCTION_2_2() = 134217984;
      v37 = dispatch thunk of NWProtocolTCP.Options.keepaliveInterval.getter();
      OUTLINED_FUNCTION_27_6(v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_34_0();
      OUTLINED_FUNCTION_11_9(&dword_246EC7000, v26, v36, "Provider - Network setup: keepaliveInterval (number of seconds to wait before resending TCP): %ld");
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_34_0();
    v10 = 0x254436000;
  }
  v38 = (char)v104;
  if ((v129 & 1) == 0)
  {
    OUTLINED_FUNCTION_9_11();
    if (!v11)
      swift_once();
    v39 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v39, (uint64_t)static Logger.siriNetwork);
    v40 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_1_23(v40))
    {
      *(_DWORD *)OUTLINED_FUNCTION_2_2() = 134217984;
      v41 = OUTLINED_FUNCTION_20_10();
      OUTLINED_FUNCTION_27_6(v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_24_6(&dword_246EC7000, v23, (os_log_type_t)v26, "Provider - Network setup: Connection drop time (timeout for TCP retransmission attempts, in seconds): %ld");
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_20_10();
    dispatch thunk of NWProtocolTCP.Options.connectionDropTime.setter();
  }
  if ((v38 & 1) != 0)
    swift_retain();
  OUTLINED_FUNCTION_123();
  v42 = NWParameters.__allocating_init(tls:tcp:)();
  v43 = &off_246F72000;
  if ((v38 & 1) != 0 && (v121 & 1) == 0)
  {
    OUTLINED_FUNCTION_28(&v117, v119);
    swift_retain();
    v61 = ConnectionConfiguration.resolvedHost.getter();
    if (v62)
    {
      v63 = v61;
      v64 = v62;
      v65 = String.utf8CString.getter();
      v66 = strdup((const char *)(v65 + 32));
      swift_release();
      if (v66)
      {
        v67 = strlen(v66);
        v68 = xpc_data_create(v66, v67);
        OUTLINED_FUNCTION_4_18();
        nw_parameters_set_tls_session_id();
        OUTLINED_FUNCTION_5_16();
        OUTLINED_FUNCTION_9_11();
        if (!v11)
          swift_once();
        v69 = OUTLINED_FUNCTION_5_1();
        v70 = __swift_project_value_buffer(v69, (uint64_t)static Logger.siriNetwork);
        swift_bridgeObjectRetain();
        Logger.logObject.getter();
        v71 = OUTLINED_FUNCTION_35_0();
        if (OUTLINED_FUNCTION_14_5(v70))
        {
          v72 = OUTLINED_FUNCTION_2_2();
          v106 = (uint64_t)v68;
          v73 = (_DWORD *)v72;
          *(_QWORD *)&v117 = OUTLINED_FUNCTION_2_2();
          *v73 = 136315138;
          v104 = v73 + 1;
          swift_bridgeObjectRetain();
          v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, (uint64_t *)&v117);
          OUTLINED_FUNCTION_19_8(v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_24_6(&dword_246EC7000, v70, v71, "Provider - Network setup: session set %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_4();
        }

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();
        v10 = 0x254436000;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v43 = &off_246F72000;
    }
  }
  else
  {
    swift_retain();
  }
  v44 = nw_context_create();
  nw_context_set_scheduling_mode();
  nw_context_set_isolate_protocol_stack();
  nw_context_set_privacy_level();
  nw_context_set_isolate_protocol_cache();
  OUTLINED_FUNCTION_4_18();
  v106 = v44;
  nw_parameters_set_context();
  OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_4_18();
  nw_parameters_set_data_mode();
  OUTLINED_FUNCTION_5_16();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v108 + 104))(v107, *MEMORY[0x24BDE0398], v109);
  NWParameters.serviceClass.setter();
  v45 = (void *)NWParameters.nw.getter();
  nw_parameters_set_traffic_class();
  OUTLINED_FUNCTION_5_16();
  if (((AFIsHorseman() | v105) & 1) == 0)
  {
    OUTLINED_FUNCTION_9_11();
    if (!v11)
      swift_once();
    v52 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v52, (uint64_t)static Logger.siriNetwork);
    v53 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_1_23(v53))
    {
      v54 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_13_8(v54);
      OUTLINED_FUNCTION_2_19(&dword_246EC7000, v55, v56, "Provider - Network setup: Multipath service interactive");
      OUTLINED_FUNCTION_0_4();
    }

    v57 = OUTLINED_FUNCTION_4_18();
    nw_parameters_set_multipath_service(v57, nw_multipath_service_interactive);
    goto LABEL_61;
  }
  if (v120 == 1 && AFHasCellularData())
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    if ((*(_BYTE *)(static NetworkManager.shared + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength + 8) & 1) == 0
      && *(uint64_t *)(static NetworkManager.shared + OBJC_IVAR___SNNetworkManagerInternal_lastSignalStrength) >= 2)
    {
      OUTLINED_FUNCTION_9_11();
      if (!v11)
        swift_once();
      v46 = OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_3_1(v46, (uint64_t)static Logger.siriNetwork);
      v47 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_1_23(v47))
      {
        v48 = (_WORD *)OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_13_8(v48);
        OUTLINED_FUNCTION_2_19(&dword_246EC7000, v49, v50, "Provider - Network setup: Force to use cellular interface");
        OUTLINED_FUNCTION_0_4();
      }

      v51 = OUTLINED_FUNCTION_4_18();
      nw_parameters_set_required_interface_type(v51, nw_interface_type_cellular);
LABEL_61:
      OUTLINED_FUNCTION_5_16();
    }
  }
  OUTLINED_FUNCTION_4_18();
  nw_parameters_set_indefinite();
  OUTLINED_FUNCTION_5_16();
  v58 = (void *)OUTLINED_FUNCTION_4_18();
  nw_parameters_set_tfo();
  OUTLINED_FUNCTION_5_16();
  if (v121 != 1)
  {
    OUTLINED_FUNCTION_25_6();
    goto LABEL_79;
  }
  if (v132 == 1 || (v59 = v134) == 0)
  {
    v60 = v119[6];
    v59 = v119[7];
    OUTLINED_FUNCTION_16_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_6();
    if (!v59)
      goto LABEL_79;
  }
  else
  {
    v60 = v133;
    OUTLINED_FUNCTION_16_0();
    OUTLINED_FUNCTION_25_6();
  }
  OUTLINED_FUNCTION_9_11();
  if (!v11)
    swift_once();
  v75 = OUTLINED_FUNCTION_5_1();
  v76 = __swift_project_value_buffer(v75, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain_n();
  Logger.logObject.getter();
  v77 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_14_5(v76))
  {
    v78 = OUTLINED_FUNCTION_2_2();
    v110 = v60;
    v79 = (_DWORD *)v78;
    *(_QWORD *)&v117 = OUTLINED_FUNCTION_2_2();
    *v79 = *((_QWORD *)v43 + 422);
    OUTLINED_FUNCTION_16_0();
    v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v59, (uint64_t *)&v117);
    OUTLINED_FUNCTION_19_8(v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_11_9(&dword_246EC7000, v76, v77, "Provider - Network setup: Service proxy enabled for %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_4_18();
  NetworkServiceProxyEnableInParameters();
  OUTLINED_FUNCTION_5_16();
  v58 = (void *)OUTLINED_FUNCTION_4_18();
  v43 = (char *__ptr32 *)MEMORY[0x24956D034](v60, v59);
  swift_bridgeObjectRelease();
  NetworkServiceProxySetServiceNameInParameters();
  OUTLINED_FUNCTION_5_16();

  v10 = 0x254436000uLL;
LABEL_79:
  if (a2)
  {
    v81 = *(NSObject **)(v10 + 3968);
    v82 = a2;
    if (v81 != -1)
      swift_once();
    v83 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v83, (uint64_t)static Logger.siriNetwork);
    v84 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_7_0(v84))
    {
      v85 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v85 = 0;
      _os_log_impl(&dword_246EC7000, v81, (os_log_type_t)v43, "Provider - Network setup: Connection with initial payload", v85, 2u);
      OUTLINED_FUNCTION_0_4();
    }

    v58 = (void *)OUTLINED_FUNCTION_4_18();
    nw_parameters_set_initial_data_payload();

    OUTLINED_FUNCTION_5_16();
  }
  if ((_DWORD)v111)
  {
    OUTLINED_FUNCTION_9_11();
    if (!v11)
      swift_once();
    v86 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v86, (uint64_t)static Logger.siriNetwork);
    v87 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_1_23(v87))
    {
      v88 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_13_8(v88);
      OUTLINED_FUNCTION_2_19(&dword_246EC7000, v89, v90, "Provider - Network setup: Optimistic DNS enabled");
      OUTLINED_FUNCTION_0_4();
    }

    v91 = OUTLINED_FUNCTION_4_18();
    nw_parameters_set_expired_dns_behavior(v91, nw_parameters_expired_dns_behavior_allow);
    OUTLINED_FUNCTION_5_16();
  }
  v117 = 0u;
  v118 = 0u;
  v116 = 8;
  if (task_info(*MEMORY[0x24BDAEC58], 0xFu, (task_info_t)&v117, &v116))
  {
    OUTLINED_FUNCTION_9_11();
    if (!v11)
      swift_once();
    v92 = OUTLINED_FUNCTION_5_1();
    v93 = (void *)OUTLINED_FUNCTION_3_1(v92, (uint64_t)static Logger.siriNetwork);
    v94 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_1_23(v94))
    {
      v95 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_13_8(v95);
      v98 = "Provider - Network setup: Failed to get audit_token_t for current task.";
      goto LABEL_100;
    }
  }
  else
  {
    v93 = (void *)OUTLINED_FUNCTION_4_18();
    v114 = v117;
    v115 = v118;
    nw_parameters_set_source_application();
    OUTLINED_FUNCTION_5_16();
    OUTLINED_FUNCTION_9_11();
    if (!v11)
      swift_once();
    v99 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v99, (uint64_t)static Logger.siriNetwork);
    v100 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_1_23(v100))
    {
      v101 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_13_8(v101);
      v98 = "Provider - Network setup: Source application assigned (audit_token_t).";
LABEL_100:
      OUTLINED_FUNCTION_2_19(&dword_246EC7000, v96, v97, v98);
      OUTLINED_FUNCTION_0_4();
    }
  }

  swift_release();
  OUTLINED_FUNCTION_26_4();
  OUTLINED_FUNCTION_34_0();

  swift_release();
  return v42;
}

BOOL OUTLINED_FUNCTION_1_23(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_2_19(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return NWParameters.nw.getter();
}

uint64_t OUTLINED_FUNCTION_5_16()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_11_9(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_12_7(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

_WORD *OUTLINED_FUNCTION_13_8(_WORD *result)
{
  *result = 0;
  return result;
}

BOOL OUTLINED_FUNCTION_14_5(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_15_8@<X0>(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = a1;
  return dispatch thunk of NWProtocolTCP.Options.enableKeepalive.setter();
}

uint64_t OUTLINED_FUNCTION_17_9()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_19_8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = a1;
  return v1 + 96;
}

uint64_t OUTLINED_FUNCTION_20_10()
{
  double v0;

  return Double.seconds.getter(v0);
}

uint64_t OUTLINED_FUNCTION_21_7()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_24_6(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

_QWORD *OUTLINED_FUNCTION_25_6()
{
  uint64_t v0;

  return outlined release of ConnectionConfiguration((_QWORD *)(v0 + 664));
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27_6(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return v1 + 144;
}

float *OUTLINED_FUNCTION_28_2(float *result, float a2)
{
  *result = a2;
  return result;
}

void default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  OUTLINED_FUNCTION_55_2();
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OUTLINED_FUNCTION_18_6();
}

uint64_t default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = *MEMORY[0x24BEE5400];
  OUTLINED_FUNCTION_196_0();
  OUTLINED_FUNCTION_186();
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 104))(a1, v2);
}

void CommunicationProtocolAce.aceDelegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x24956E090](v0 + 16);
  if (v1)
  {
    v2 = v1;
    swift_getObjectType();
    if (!dynamic_cast_existential_1_conditional(v2))
      OUTLINED_FUNCTION_3_6();
  }
  OUTLINED_FUNCTION_3();
}

void CommunicationProtocolAce.bufferedInputData.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

void CommunicationProtocolAce.bufferedUncompressedData.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

void CommunicationProtocolAce.safetyNetBuffer.modify()
{
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_3();
}

uint64_t CommunicationProtocolAce.__allocating_init(withDelegate:connectionQueue:)()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_6();
  CommunicationProtocolAce.init(withDelegate:connectionQueue:)();
  return v0;
}

void CommunicationProtocolAce.init(withDelegate:connectionQueue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_55_2();
  v2 = v1;
  v4 = v3;
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v0 + 40) = xmmword_246F725D0;
  *(_OWORD *)(v0 + 56) = xmmword_246F725C0;
  *(_OWORD *)(v0 + 72) = xmmword_246F725D0;
  *(_OWORD *)(v0 + 88) = xmmword_246F725D0;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_QWORD *)(v0 + 200) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  *(_QWORD *)(v0 + 208) = Dictionary.init(dictionaryLiteral:)();
  *(_DWORD *)(v0 + 216) = -100000;
  *(_QWORD *)(v0 + 224) = 0;
  *(_DWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 240) = 0;
  *(_BYTE *)(v0 + 248) = 0;
  *(_OWORD *)(v0 + 256) = xmmword_246F725D0;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_QWORD *)(v0 + 320) = 0;
  *(_QWORD *)(v0 + 328) = 0xF000000000000000;
  swift_getObjectType();
  if (dynamic_cast_existential_1_conditional(v4))
  {
    v6 = *(_QWORD *)(v5 + 8);
  }
  else
  {
    swift_unknownObjectRelease();
    v6 = 0;
  }
  *(_QWORD *)(v0 + 24) = v6;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 32) = v2;
  OUTLINED_FUNCTION_18_6();
}

uint64_t CommunicationProtocolAce.deinit()
{
  uint64_t v0;

  CommunicationProtocolAce.closeConnection(prepareForReconnect:)(0);
  CommunicationProtocolAce.cancelAceHeaderTimeoutTimer()();
  CommunicationProtocolAce.cancelPingTimer()();
  outlined destroy of weak ConnectionProviderDelegate?(v0 + 16);

  outlined consume of Data?(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  outlined consume of Data?(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  outlined consume of Data?(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  outlined destroy of RPCOspreyConnectionProtocol?(v0 + 112, &demangling cache variable for type metadata for DataDecompressing?);
  outlined destroy of RPCOspreyConnectionProtocol?(v0 + 152, &demangling cache variable for type metadata for DataCompressing?);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data?(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  outlined consume of Data?(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
  return v0;
}

uint64_t CommunicationProtocolAce.__deallocating_deinit()
{
  CommunicationProtocolAce.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CommunicationProtocolAce()
{
  return objc_opt_self();
}

Swift::Void __swiftcall CommunicationProtocolAce.connectionStarted(fallingBack:)(Swift::Bool fallingBack)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  void (*v20)(uint64_t *, _QWORD);
  void (*v21)(uint64_t *, _QWORD);
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31[4];

  v2 = v1;
  if (fallingBack)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v3 = OUTLINED_FUNCTION_5_1();
    v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_16_2();
    Logger.logObject.getter();
    v5 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_106(v5))
    {
      v6 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v6 = 134218240;
      OUTLINED_FUNCTION_0_2();
      v7 = 0;
      if (v2[41] >> 60 != 15)
      {
        v8 = OUTLINED_FUNCTION_157_0();
        outlined copy of Data._Representation(v8, v9);
        OUTLINED_FUNCTION_157_0();
        v7 = Data.count.getter();
        v10 = OUTLINED_FUNCTION_157_0();
        outlined consume of Data?(v10, v11);
      }
      v31[0] = v7;
      OUTLINED_FUNCTION_151_0();
      *(_WORD *)(v6 + 12) = 2048;
      OUTLINED_FUNCTION_0_2();
      v12 = 0;
      if (v2[10] >> 60 != 15)
      {
        v13 = OUTLINED_FUNCTION_84_2();
        outlined copy of Data._Representation(v13, v14);
        OUTLINED_FUNCTION_84_2();
        v12 = Data.count.getter();
        v15 = OUTLINED_FUNCTION_84_2();
        outlined consume of Data?(v15, v16);
      }
      v31[0] = v12;
      OUTLINED_FUNCTION_151_0();
      OUTLINED_FUNCTION_14();
      _os_log_impl(&dword_246EC7000, v4, v5, "CommunicationProtocol - Ace: safety net has %ld bytes, output buffer has %ld bytes", (uint8_t *)v6, 0x16u);
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_0_2();
    v17 = v2[10];
    if (v17 >> 60 != 15 && (specialized Collection.isEmpty.getter(v2[9], v17) & 1) == 0)
    {
      OUTLINED_FUNCTION_0_2();
      OUTLINED_FUNCTION_47_2();
      if (!(!v19 & v18))
      {
        CommunicationProtocolAce.safetyNetBuffer.modify();
        v21 = v20;
        OUTLINED_FUNCTION_47_2();
        if (!(!v19 & v18))
        {
          OUTLINED_FUNCTION_0_2();
          v22 = v2[10];
          if (v22 >> 60 == 15)
            v23 = 0;
          else
            v23 = v2[9];
          if (v22 >> 60 == 15)
            v24 = 0xC000000000000000;
          else
            v24 = v2[10];
          outlined copy of Data?(v2[9], v22);
          Data.append(_:)();
          outlined consume of Data._Representation(v23, v24);
        }
        v21(v31, 0);
      }
    }
    OUTLINED_FUNCTION_0_2();
    v25 = v2[41];
    if (v25 >> 60 == 15 || (v26 = v2[40], (specialized Collection.isEmpty.getter(v26, v2[41]) & 1) != 0))
    {
      v26 = 0;
      v25 = 0xF000000000000000;
    }
    else
    {
      outlined copy of Data._Representation(v26, v25);
    }
    v27 = v2[9];
    v28 = v2[10];
    v2[9] = v26;
    v2[10] = v25;
    outlined consume of Data?(v27, v28);
  }
  OUTLINED_FUNCTION_0_2();
  v29 = v2[40];
  v30 = v2[41];
  *((_OWORD *)v2 + 20) = xmmword_246F725C0;
  outlined consume of Data?(v29, v30);
}

uint64_t CommunicationProtocolAce.initialPayload(withBufferedInitialLength:forceReconnect:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;

  v15 = 0xF000000000000000;
  CommunicationProtocolAce.aceDelegate.getter();
  if (v3)
  {
    if (BackgroundConnection.isUsingPop()())
    {
      v15 = 0xC000000000000000;
      OUTLINED_FUNCTION_0_2();
      if (*(_QWORD *)(v1 + 80) >> 60 == 15)
      {
        CommunicationProtocolAce.httpHeaderData()();
        if (v5 >> 60 == 15)
          v6 = 0;
        else
          v6 = v4;
        OUTLINED_FUNCTION_175_0();
        OUTLINED_FUNCTION_44_3(v6);
        OUTLINED_FUNCTION_47_2();
        if (!v8 & v7)
          goto LABEL_13;
        if (one-time initialization token for aceHeaderMagic != -1)
          swift_once();
        static AceStreamHeader.createAceStreamHeaderData(withMagic:compressionType:)(static AceSerialization.aceHeaderMagic, 1);
        OUTLINED_FUNCTION_191_0();
        Data.append(_:)();
        OUTLINED_FUNCTION_44_3(v6);
      }
      else
      {
        v9 = OUTLINED_FUNCTION_141_0();
        outlined copy of Data._Representation(v9, v10);
        OUTLINED_FUNCTION_141_0();
        Data.append(_:)();
        OUTLINED_FUNCTION_141_0();
        v11 = Data.count.getter();
        v12 = OUTLINED_FUNCTION_141_0();
        outlined consume of Data?(v12, v13);
        *a1 = v11;
      }
    }
    if (v15 >> 60 != 15)
      __asm { BR              X10 }
LABEL_13:
    OUTLINED_FUNCTION_3_6();
  }
  return 0;
}

void CommunicationProtocolAce.updateBuffers(forInitialPayload:bufferedLength:forceReconnect:)()
{
  NSObject *v0;
  NSObject *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t isa;
  uint64_t v24;
  char v25;
  char v26;
  void (*v27)(uint64_t *, _QWORD);
  void (*v28)(uint64_t *, _QWORD);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_19();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchData?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_131();
  v0[13].isa = CFHTTPMessageCreateEmpty(0, 0);
  if (v7)
  {
    static DispatchData._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = type metadata accessor for DispatchData();
    v10 = 0;
  }
  else
  {
    v9 = type metadata accessor for DispatchData();
    v10 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v0, v10, 1, v9);
  Data.init(copying:)((uint64_t)v0);
  OUTLINED_FUNCTION_191_0();
  if (v11 >> 60 == 15)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v12, (uint64_t)static Logger.siriNetwork);
    v13 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_27_0(v13))
    {
      v14 = (uint8_t *)OUTLINED_FUNCTION_1_2();
      *(_WORD *)v14 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v0, (os_log_type_t)v5, "CommunicationProtocol - Ace: No initial payload", v14);
      OUTLINED_FUNCTION_0_4();
    }

    CommunicationProtocolAce.prepareProviderHeader(withForceReconnect:)(v3 & 1);
    v15 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_174_0();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v16 = OUTLINED_FUNCTION_5_1();
    v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
    v18 = OUTLINED_FUNCTION_133_0();
    outlined copy of Data?(v18, v19);
    OUTLINED_FUNCTION_16_2();
    Logger.logObject.getter();
    v20 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_106(v20))
    {
      v21 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v21 = 134218240;
      OUTLINED_FUNCTION_133_0();
      v39 = Data.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_22_7();
      *(_WORD *)(v21 + 12) = 2048;
      OUTLINED_FUNCTION_0_2();
      v22 = 0;
      isa = (unint64_t)v1[10].isa;
      if (isa >> 60 != 15)
      {
        v24 = (uint64_t)v1[9].isa;
        OUTLINED_FUNCTION_164_0();
        v22 = Data.count.getter();
        outlined consume of Data?(v24, isa);
      }
      v39 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_14();
      _os_log_impl(&dword_246EC7000, v17, v20, "CommunicationProtocol - Ace: Stream opened with initial payload length %ld, buffered general output length %ld", (uint8_t *)v21, 0x16u);
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_22_7();

    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_47_2();
    if (!(!v26 & v25))
    {
      CommunicationProtocolAce.safetyNetBuffer.modify();
      v28 = v27;
      OUTLINED_FUNCTION_47_2();
      if (!(!v26 & v25))
        OUTLINED_FUNCTION_175_0();
      v28(&v39, 0);
    }
    OUTLINED_FUNCTION_0_2();
    v29 = (uint64_t)v1[9].isa;
    v30 = (unint64_t)v1[10].isa;
    if (v30 >> 60 == 15)
    {
      OUTLINED_FUNCTION_22_7();
    }
    else
    {
      outlined copy of Data._Representation((uint64_t)v1[9].isa, (unint64_t)v1[10].isa);
      Data.truncateBeginning(removeSize:)(v5, v29, v30);
      v32 = v31;
      v34 = v33;
      OUTLINED_FUNCTION_22_7();
      outlined consume of Data?(v29, v30);
      v29 = v32;
      v30 = v34;
    }
    v35 = (uint64_t)v1[9].isa;
    v36 = (unint64_t)v1[10].isa;
    v1[9].isa = (Class)v29;
    v1[10].isa = (Class)v30;
    outlined consume of Data?(v35, v36);
    v37 = OUTLINED_FUNCTION_133_0();
    v15 = specialized Collection.isEmpty.getter(v37, v38) ^ 1;
  }
  CommunicationProtocolAce.initializeBufferedGeneralOutputData(hasInitialPayload:)(v15 & 1);
  OUTLINED_FUNCTION_22_7();
  OUTLINED_FUNCTION_1_1();
}

uint64_t CommunicationProtocolAce.bufferGeneralData(data:)(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferGeneralData(data:)(a1, a2, (uint64_t (*)(_BYTE *))RPCOspreyConnectionProvider.connectionMetrics.modify);
}

uint64_t CommunicationProtocolAce.bufferUncompressedData(data:)(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferGeneralData(data:)(a1, a2, (uint64_t (*)(_BYTE *))CommunicationProtocolAce.bufferedUncompressedData.modify);
}

uint64_t CommunicationProtocolAce.bufferGeneralData(data:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_BYTE *))
{
  uint64_t (*v3)(_BYTE *, _QWORD);
  char v4;
  char v5;
  _BYTE v7[32];

  v3 = (uint64_t (*)(_BYTE *, _QWORD))a3(v7);
  OUTLINED_FUNCTION_47_2();
  if (!(!v5 & v4))
    Data.append(_:)();
  return v3(v7, 0);
}

uint64_t CommunicationProtocolAce.getBufferedUncompressedDataToWrite()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  OUTLINED_FUNCTION_0_2();
  v1 = *(_QWORD *)(v0 + 96);
  OUTLINED_FUNCTION_90_1();
  if (!(!v3 & v2))
    __asm { BR              X10 }
  return 0;
}

void CommunicationProtocolAce.getBufferedOutputDataToWrite()()
{
  OUTLINED_FUNCTION_0_2();
  __asm { BR              X10 }
}

uint64_t sub_246F182CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t *, _QWORD);
  void (*v13)(uint64_t *, _QWORD);
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if ((v0 & 0xFF000000000000) != 0)
  {
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_62_1();
    v3 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_90_1();
    if (!v5 & v4)
      return OUTLINED_FUNCTION_173_0();
    v1 = v2[9];
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_62_1();
    v3 = 1;
  }
  v6 = OUTLINED_FUNCTION_173_0();
  if ((specialized Collection.isEmpty.getter(v6, v7) & 1) != 0)
  {
    OUTLINED_FUNCTION_10_1(v1);
    v8 = OUTLINED_FUNCTION_173_0();
    outlined consume of Data._Representation(v8, v9);
  }
  else if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_10_1(v1);
    OUTLINED_FUNCTION_0_2();
    v10 = v2[9];
    v11 = v2[10];
    *(_OWORD *)(v2 + 9) = xmmword_246F725C0;
    outlined consume of Data?(v10, v11);
  }
  else
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_47_2();
    if (!(!v5 & v4))
    {
      CommunicationProtocolAce.safetyNetBuffer.modify();
      v13 = v12;
      OUTLINED_FUNCTION_47_2();
      if (!(!v5 & v4))
      {
        OUTLINED_FUNCTION_173_0();
        Data.append(_:)();
      }
      v13(&v17, 0);
    }
    OUTLINED_FUNCTION_10_1(v1);
    v14 = v2[7];
    v15 = v2[8];
    *(_OWORD *)(v2 + 7) = xmmword_246F725C0;
    outlined consume of Data._Representation(v14, v15);
  }
  return OUTLINED_FUNCTION_173_0();
}

Swift::Void __swiftcall CommunicationProtocolAce.closeConnection(prepareForReconnect:)(Swift::Bool prepareForReconnect)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  _BYTE v10[40];

  OUTLINED_FUNCTION_0_2();
  v3 = v1[5];
  v4 = v1[6];
  *(_OWORD *)(v1 + 5) = xmmword_246F725D0;
  outlined consume of Data?(v3, v4);
  OUTLINED_FUNCTION_71_2();
  OUTLINED_FUNCTION_0_2();
  outlined assign with take of DataCompressing?((uint64_t)v10, (uint64_t)(v1 + 14), &demangling cache variable for type metadata for DataDecompressing?);
  swift_endAccess();
  if (!prepareForReconnect)
  {
    OUTLINED_FUNCTION_0_2();
    v5 = v1[9];
    v6 = v1[10];
    *(_OWORD *)(v1 + 9) = xmmword_246F725D0;
    outlined consume of Data?(v5, v6);
    OUTLINED_FUNCTION_71_2();
    OUTLINED_FUNCTION_0_2();
    outlined assign with take of DataCompressing?((uint64_t)v10, (uint64_t)(v1 + 19), &demangling cache variable for type metadata for DataCompressing?);
    swift_endAccess();
    OUTLINED_FUNCTION_0_2();
    v7 = v1[11];
    v8 = v1[12];
    *(_OWORD *)(v1 + 11) = xmmword_246F725D0;
    outlined consume of Data?(v7, v8);
    CommunicationProtocolAce.cancelOutstandingBarriers()();
  }
  v9 = (void *)v1[13];
  if (v9)
  {

    v1[13] = 0;
  }
}

Swift::Void __swiftcall CommunicationProtocolAce.setSendPings(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint8_t *v2;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;

  CommunicationProtocolAce.aceDelegate.getter();
  if (v4)
  {
    *(_BYTE *)(v1 + 248) = a1;
    if (a1)
    {
      if (*(_BYTE *)(v4 + 1185) == 1 && !*(_QWORD *)(v1 + 224))
        CommunicationProtocolAce.resumePingTimer()();
    }
    else if (*(_QWORD *)(v1 + 224))
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v5 = OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_3_1(v5, (uint64_t)static Logger.siriNetwork);
      v6 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_7_0(v6))
      {
        v7 = (_WORD *)OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_102_1(v7);
        OUTLINED_FUNCTION_8_0(&dword_246EC7000, v1, (os_log_type_t)a1, "CommunicationProtocol - Ace pings: Stop sending pings", v2);
        OUTLINED_FUNCTION_0_4();
      }

      CommunicationProtocolAce.cancelPingTimer()();
    }
    OUTLINED_FUNCTION_24_7();
  }
  else
  {
    OUTLINED_FUNCTION_17_0();
  }
}

Swift::Void __swiftcall CommunicationProtocolAce.resumePingTimer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80[7];

  OUTLINED_FUNCTION_19();
  v2 = type metadata accessor for DispatchTime();
  v73 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_11_5();
  v72 = v4;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_117();
  v74 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_11_5();
  v68 = v8;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_117();
  v70 = v10;
  v75 = OUTLINED_FUNCTION_196_0();
  v71 = *(_QWORD *)(v75 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_11_5();
  v67 = v12;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v13);
  v76 = (uint64_t *)((char *)&v63 - v14);
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v15);
  v77 = (uint64_t)&v63 - v16;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_117();
  v78 = v18;
  v69 = OUTLINED_FUNCTION_183_0();
  v19 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  OUTLINED_FUNCTION_132_0();
  v20 = type metadata accessor for DispatchQoS();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_1_0();
  v24 = v23 - v22;
  v25 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_1_0();
  v29 = v28 - v27;
  if (*(_BYTE *)(v0 + 248) == 1 && !*(_QWORD *)(v0 + 224))
  {
    v66 = v2;
    *(_QWORD *)(v0 + 240) = 0;
    v30 = swift_release();
    OUTLINED_FUNCTION_195_0(v30, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
    v65 = v31;
    v80[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
    v64 = v32;
    v63 = v19;
    v33 = v0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v34 = *(id *)(v0 + 32);
    OUTLINED_FUNCTION_187_0();
    v35 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
    ObjectType = swift_getObjectType();
    v37 = OUTLINED_FUNCTION_6();
    v65 = v33;
    swift_weakInit();
    v80[4] = (uint64_t)partial apply for closure #1 in CommunicationProtocolAce.resumePingTimer();
    v80[5] = v37;
    v80[0] = MEMORY[0x24BDAC760];
    v80[1] = 1107296256;
    v80[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v80[3] = (uint64_t)&block_descriptor_19;
    v38 = _Block_copy(v80);
    OUTLINED_FUNCTION_139_0();
    static DispatchQoS.unspecified.getter();
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    v64 = ObjectType;
    v39 = v35;
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v38);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v1, v69);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v24, v20);
    OUTLINED_FUNCTION_140_0();
    OUTLINED_FUNCTION_78_0();
    v40 = v78;
    Double.dispatchTimeInterval.getter(v78, 1.0);
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v41 = OUTLINED_FUNCTION_5_1();
    v42 = __swift_project_value_buffer(v41, (uint64_t)static Logger.siriNetwork);
    v43 = v71;
    v44 = v77;
    v45 = v75;
    OUTLINED_FUNCTION_171_0(v77, (uint64_t)v40);
    Logger.logObject.getter();
    v46 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_106(v46))
    {
      v47 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v80[0] = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v47 = 136315138;
      v48 = v70;
      OUTLINED_FUNCTION_171_0(v70, v44);
      __swift_storeEnumTagSinglePayload(v48, 0, 1, v45);
      v49 = v68;
      outlined init with copy of DataCompressing?(v48, v68, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
      if (__swift_getEnumTagSinglePayload(v49, 1, v45) == 1)
      {
        v50 = 0xE100000000000000;
        v51 = 45;
      }
      else
      {
        v52 = v76;
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v43 + 32))(v76, v49, v45);
        OUTLINED_FUNCTION_171_0(v67, (uint64_t)v52);
        v51 = String.init<A>(describing:)();
        v53 = v43;
        v50 = v54;
        (*(void (**)(_QWORD *, uint64_t))(v53 + 8))(v52, v45);
      }
      outlined destroy of RPCOspreyConnectionProtocol?(v70, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
      v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v50, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_8_2();
      OUTLINED_FUNCTION_93_2(v77);
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v42, v46, "CommunicationProtocol - Ace pings: Start sending pings with interval %s", v47);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_93_2(v44);

    v55 = v39;
    v56 = v72;
    static DispatchTime.now()();
    v57 = v74;
    DispatchTime.advanced(by:)();
    v58 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
    v58(v56, v66);
    v59 = v76;
    v60 = v64;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v76);
    MEMORY[0x24956D2B0](v57, v40, v59, v60);
    OUTLINED_FUNCTION_93_2((uint64_t)v59);
    v61 = OUTLINED_FUNCTION_166_0();
    ((void (*)(uint64_t))v58)(v61);
    v62 = v65;
    *(_QWORD *)(v65 + 224) = v55;
    swift_unknownObjectRetain();
    OUTLINED_FUNCTION_5_16();
    if (*(_QWORD *)(v62 + 224))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.resume()();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_5_16();
      OUTLINED_FUNCTION_93_2((uint64_t)v40);
    }
    else
    {
      OUTLINED_FUNCTION_93_2((uint64_t)v40);
      swift_unknownObjectRelease();
    }
  }
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in CommunicationProtocolAce.resumePingTimer()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    CommunicationProtocolAce.pingTimerFired()();
    return swift_release();
  }
  return result;
}

void CommunicationProtocolAce.bytesAvailable(_:)(uint64_t a1, unint64_t a2)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  unint64_t isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD);
  void (*v26)(_QWORD *, _QWORD);
  char v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  const __CFString *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  os_log_type_t v56;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  __int128 v82;
  os_log_type_t v83;
  uint8_t *v84;
  _QWORD v85[3];
  uint64_t v86;
  NSObject *v87;
  __int128 v88;
  _QWORD v89[3];
  uint64_t v90;

  v4 = v2;
  OUTLINED_FUNCTION_0_2();
  isa = (unint64_t)v2[41].isa;
  if (isa >> 60 != 15)
  {
    v8 = (uint64_t)v2[40].isa;
    *(_OWORD *)&v2[40].isa = xmmword_246F725D0;
    outlined consume of Data?(v8, isa);
    OUTLINED_FUNCTION_147();
    if (v9)
    {
      BackgroundConnection.updateFirstByteReadTime()();
      OUTLINED_FUNCTION_5_16();
    }
  }
  v10 = (uint64_t)&v2[14];
  OUTLINED_FUNCTION_0_2();
  outlined init with copy of DataCompressing?((uint64_t)&v2[14], (uint64_t)v89, &demangling cache variable for type metadata for DataDecompressing?);
  if (!v90)
  {
    OUTLINED_FUNCTION_113(v11, &demangling cache variable for type metadata for DataDecompressing?);
    v46 = 0;
    v48 = 0xF000000000000000;
LABEL_7:
    v20 = OUTLINED_FUNCTION_126_0();
    outlined copy of Data._Representation(v20, v21);
    outlined consume of Data?(v46, v48);
    v46 = a1;
    v48 = a2;
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_153_0(v11, v12, v13, v14, v15, v16);
  OUTLINED_FUNCTION_113(v17, &demangling cache variable for type metadata for DataDecompressing?);
  v3 = v87;
  __swift_project_boxed_opaque_existential_1(v85, v86);
  v18 = OUTLINED_FUNCTION_126_0();
  v46 = v19(v18);
  v48 = v47;
  OUTLINED_FUNCTION_150_0(v46, v47, v49, v50, v51, v52);
  if (v48 >> 60 == 15)
    goto LABEL_7;
LABEL_8:
  v22 = v2 + 5;
  OUTLINED_FUNCTION_0_2();
  v23 = (unint64_t)v2[6].isa;
  if (v23 >> 60 == 15)
  {
    v24 = (uint64_t)v4[5].isa;
    v4[5].isa = (Class)v46;
    v4[6].isa = (Class)v48;
    outlined copy of Data._Representation(v46, v48);
    outlined consume of Data?(v24, v23);
  }
  else
  {
    CommunicationProtocolAce.bufferedInputData.modify();
    v26 = v25;
    OUTLINED_FUNCTION_47_2();
    if (!(!v28 & v27))
      Data.append(_:)();
    v26(v89, 0);
  }
  v29 = (unint64_t)v4[6].isa;
  if (v29 >> 60 == 15)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v30 = OUTLINED_FUNCTION_5_1();
    v31 = OUTLINED_FUNCTION_3_1(v30, (uint64_t)static Logger.siriNetwork);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)OUTLINED_FUNCTION_1_2();
      *(_WORD *)v33 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v31, v32, "CommunicationProtocol - Ace bytes available: Unexpected nil input data", v33);
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_28_3();

  }
  else
  {
    *&v88 = (NSObject)v22->isa;
    *((_QWORD *)&v88 + 1) = v29;
    outlined copy of Data._Representation(v88, v29);
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v34 = OUTLINED_FUNCTION_5_1();
    v35 = __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_11_10();
    v36 = OUTLINED_FUNCTION_35_0();
    if (os_log_type_enabled((os_log_t)0x254436000, v36))
    {
      v37 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v37 = 134217984;
      OUTLINED_FUNCTION_0_2();
      v38 = Data.count.getter();
      OUTLINED_FUNCTION_86_2();
      v89[0] = v38;
      OUTLINED_FUNCTION_145();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, 0x254436000, v36, "CommunicationProtocol - Ace bytes available: workingData is %ld bytes", v37);
      OUTLINED_FUNCTION_0_4();
    }

    if (v4[13].isa)
    {
      OUTLINED_FUNCTION_0_2();
      v39 = CommunicationProtocolAce.consumeHttpHeader(withData:)(&v88);
      OUTLINED_FUNCTION_86_2();
      v3 = v4 + 14;
      Logger.logObject.getter();
      v40 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_60(v40))
      {
        v41 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v41 = 134217984;
        v89[0] = v39;
        OUTLINED_FUNCTION_37_3();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, v35, (os_log_type_t)((_BYTE)v4 + 112), "CommunicationProtocol - Ace bytes available (!hasReadHttpHeader): Consumed %ld bytes", v41);
        OUTLINED_FUNCTION_0_4();
      }

    }
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_137_0();
    if (!v3)
    {
      OUTLINED_FUNCTION_0_2();
      v53 = CommunicationProtocolAce.consumeAceHeader(withData:)(&v88);
      OUTLINED_FUNCTION_86_2();
      OUTLINED_FUNCTION_107_0();
      v56 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_60(v56))
      {
        v58 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v58 = 134217984;
        v89[0] = v53;
        OUTLINED_FUNCTION_37_3();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, v4, (os_log_type_t)v10, "CommunicationProtocol - Ace bytes available (!hasReadAceHeader): Consumed %ld bytes", v58);
        OUTLINED_FUNCTION_0_4();
      }

      outlined init with copy of DataCompressing?(v10, (uint64_t)v89, &demangling cache variable for type metadata for DataDecompressing?);
      if (v90)
      {
        OUTLINED_FUNCTION_153_0(v59, v60, v61, v62, v63, v64);
        OUTLINED_FUNCTION_113(v65, &demangling cache variable for type metadata for DataDecompressing?);
        v66 = v86;
        v67 = v87;
        v68 = __swift_project_boxed_opaque_existential_1(v85, v86);
        v69 = v88;
        v3 = v67[2].isa;
        OUTLINED_FUNCTION_164_0();
        v70 = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, NSObject *))v3)(v69, *((_QWORD *)&v69 + 1), v66, v67);
        v72 = v71;
        v73 = outlined consume of Data._Representation(v69, *((unint64_t *)&v69 + 1));
        OUTLINED_FUNCTION_150_0(v73, v74, v75, v76, v77, v78);
        if (v72 >> 60 != 15)
        {
          OUTLINED_FUNCTION_107_0();
          v79 = OUTLINED_FUNCTION_35_0();
          if (OUTLINED_FUNCTION_27_0(v79))
          {
            v80 = (uint8_t *)OUTLINED_FUNCTION_2_2();
            *(_DWORD *)v80 = 134217984;
            OUTLINED_FUNCTION_0_2();
            v81 = Data.count.getter();
            OUTLINED_FUNCTION_86_2();
            v89[0] = v81;
            OUTLINED_FUNCTION_163_0();
            OUTLINED_FUNCTION_30_0(&dword_246EC7000, v68, (os_log_type_t)v3, "CommunicationProtocol - Ace bytes available: Still have %ld after Ace Header, decompressing", v80);
            OUTLINED_FUNCTION_0_4();
          }

          v82 = v88;
          *(_QWORD *)&v88 = v70;
          *((_QWORD *)&v88 + 1) = v72;
          OUTLINED_FUNCTION_158_0();
          outlined consume of Data._Representation(v82, *((unint64_t *)&v82 + 1));
          OUTLINED_FUNCTION_158_0();
          OUTLINED_FUNCTION_107_0();
          v83 = OUTLINED_FUNCTION_35_0();
          if (os_log_type_enabled((os_log_t)v82, v83))
          {
            v84 = (uint8_t *)OUTLINED_FUNCTION_2_2();
            *(_DWORD *)v84 = 134217984;
            v89[0] = Data.count.getter();
            OUTLINED_FUNCTION_145();
            OUTLINED_FUNCTION_163_0();
            OUTLINED_FUNCTION_58_2();
            OUTLINED_FUNCTION_30_0(&dword_246EC7000, v82, v83, "CommunicationProtocol - Ace bytes available: Decompressed %ld bytes", v84);
            OUTLINED_FUNCTION_0_4();
          }
          OUTLINED_FUNCTION_58_2();
          OUTLINED_FUNCTION_58_2();

        }
      }
      else
      {
        OUTLINED_FUNCTION_113(v59, &demangling cache variable for type metadata for DataDecompressing?);
      }
    }
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_137_0();
    if (v3)
    {
      OUTLINED_FUNCTION_0_2();
      CommunicationProtocolAce.consumeAceData(withData:)((uint64_t)&v88);
      v43 = v42;
      OUTLINED_FUNCTION_86_2();
      OUTLINED_FUNCTION_107_0();
      v44 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_1_23(v44))
      {
        v45 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v45 = 134217984;
        v89[0] = v43;
        OUTLINED_FUNCTION_37_3();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, v4, OS_LOG_TYPE_DEFAULT, "CommunicationProtocol - Ace bytes available (hasReadAceHeader): Consumed %ld bytes", v45);
        OUTLINED_FUNCTION_0_4();
      }
      OUTLINED_FUNCTION_28_3();

    }
    else
    {
      OUTLINED_FUNCTION_28_3();
    }
    OUTLINED_FUNCTION_0_2();
    v54 = (uint64_t)v4[5].isa;
    v55 = (unint64_t)v4[6].isa;
    *(_OWORD *)&v4[5].isa = v88;
    outlined consume of Data?(v54, v55);
  }
}

Swift::Void __swiftcall CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(Swift::Double withInterval)
{
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  objc_class *v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t *v42;
  void (*v43)(uint64_t *, uint64_t);
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD aBlock[7];

  v4 = v1;
  v58 = type metadata accessor for DispatchTime();
  v56 = *(_QWORD *)(v58 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_11_5();
  v55 = v7;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_117();
  v57 = v9;
  v53 = OUTLINED_FUNCTION_183_0();
  v51 = *(_QWORD *)(v53 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_1_0();
  v49 = v12 - v11;
  v13 = type metadata accessor for DispatchQoS();
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_1_0();
  v17 = v16 - v15;
  type metadata accessor for OS_dispatch_source.TimerFlags();
  OUTLINED_FUNCTION_193_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_1_0();
  v21 = v20 - v19;
  v54 = OUTLINED_FUNCTION_196_0();
  v52 = *(_QWORD *)(v54 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_11_5();
  v50 = v23;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (uint64_t *)((char *)&v46 - v25);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v27 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v27, (uint64_t)static Logger.siriNetwork);
  v28 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_7_0(v28))
  {
    v29 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v29 = 134217984;
    *(Swift::Double *)aBlock = withInterval;
    OUTLINED_FUNCTION_37_3();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v1, v2, "CommunicationProtocol - Ace header: Scheduling Ace header timeout for %f seconds", v29);
    OUTLINED_FUNCTION_0_4();
  }

  if (v1[24].isa)
    CommunicationProtocolAce.cancelAceHeaderTimeoutTimer()();
  if (withInterval > 0.0)
  {
    Double.dispatchTimeInterval.getter(v26, withInterval);
    OUTLINED_FUNCTION_195_0(v30, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v31 = v1[4].isa;
    v32 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

    (*(void (**)(uint64_t))(v3 + 8))(v21);
    ObjectType = swift_getObjectType();
    v34 = OUTLINED_FUNCTION_6();
    swift_weakInit();
    v35 = OUTLINED_FUNCTION_6();
    *(_QWORD *)(v35 + 16) = v32;
    *(_QWORD *)(v35 + 24) = v34;
    *(Swift::Double *)(v35 + 32) = withInterval;
    aBlock[4] = partial apply for closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:);
    aBlock[5] = v35;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_11;
    v36 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    OUTLINED_FUNCTION_83();
    static DispatchQoS.unspecified.getter();
    v37 = v49;
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v36);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v37, v53);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v17, v48);
    swift_release();
    OUTLINED_FUNCTION_78_0();
    v38 = v55;
    static DispatchTime.now()();
    v39 = v57;
    DispatchTime.advanced(by:)();
    v40 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v41 = v58;
    v40(v38, v58);
    v42 = v50;
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v50);
    MEMORY[0x24956D2B0](v39, v26, v42, ObjectType);
    v43 = *(void (**)(uint64_t *, uint64_t))(v52 + 8);
    v44 = v42;
    v45 = v54;
    v43(v44, v54);
    v40(v39, v41);
    OS_dispatch_source.resume()();
    v43(v26, v45);
    v4[24].isa = (Class)v32;
    swift_unknownObjectRelease();
  }
}

uint64_t closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(objc_class *a1, double a2)
{
  uint64_t result;

  swift_getObjectType();
  OS_dispatch_source.cancel()();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    CommunicationProtocolAce.aceHeaderTimeoutFired(fromTimer:afterTimeout:)(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t CommunicationProtocolAce.barrier(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t (*v8)(unsigned __int8 *);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;

  v3 = v2;
  CommunicationProtocolAce.sendAcePing(withId:)(*(unsigned int *)(v2 + 216));
  v6 = *(_DWORD *)(v2 + 216);
  if (a1)
  {
    v7 = OUTLINED_FUNCTION_6();
    *(_QWORD *)(v7 + 16) = a1;
    *(_QWORD *)(v7 + 24) = a2;
    v8 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  OUTLINED_FUNCTION_0_2();
  if (a1)
  {
    v9 = OUTLINED_FUNCTION_166_0();
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v9);
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v8, v7, v6);
  }
  else
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(0);
    v10 = specialized Dictionary._Variant.removeValue(forKey:)(v6);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v10);
  }
  result = OUTLINED_FUNCTION_91_0();
  v12 = *(_DWORD *)(v3 + 216);
  if (v12 == -1)
    v13 = -100000;
  else
    v13 = v12 + 1;
  *(_DWORD *)(v3 + 216) = v13;
  return result;
}

#error "246F19C3C: call analysis failed (funcsize=149)"

uint64_t CommunicationProtocolAce.initializeBufferedGeneralOutputData(hasInitialPayload:)(uint64_t a1)
{
  NSObject *v1;
  uint8_t *v2;
  uint8_t *v3;
  NSObject *v4;
  NSObject *v6;
  unint64_t isa;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  _BYTE v32[40];
  _QWORD v33[5];

  v4 = v1;
  v6 = v1 + 9;
  OUTLINED_FUNCTION_0_2();
  isa = (unint64_t)v4[10].isa;
  if (isa >> 60 == 15)
  {
    v8 = (uint64_t)v6->isa;
    *(_OWORD *)&v6->isa = xmmword_246F725C0;
    outlined consume of Data?(v8, isa);
    if ((a1 & 1) == 0)
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v9 = OUTLINED_FUNCTION_5_1();
      v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_11_10();
      v11 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_27_0(v11))
      {
        v12 = (_WORD *)OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_92_2(v12);
        OUTLINED_FUNCTION_8_0(&dword_246EC7000, v6, (os_log_type_t)v2, "CommunicationProtocol - Ace header: Buffering HTTP Header", v3);
        OUTLINED_FUNCTION_0_4();
      }

      CommunicationProtocolAce.httpHeaderData()();
      if (v14 >> 60 == 15)
      {
        Logger.logObject.getter();
        v15 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_7_0(v15))
        {
          v16 = (_WORD *)OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_102_1(v16);
          OUTLINED_FUNCTION_8_0(&dword_246EC7000, v10, (os_log_type_t)v10, "CommunicationProtocol - Ace header: Unable to initialize HTTP Header", v2);
          OUTLINED_FUNCTION_0_4();
        }

      }
      else
      {
        v17 = v13;
        v18 = v14;
        CommunicationProtocolAce.bufferGeneralData(data:)(v13, v14);
        outlined consume of Data?(v17, v18);
      }
    }
    v19 = type metadata accessor for ZlibDataCompressor();
    OUTLINED_FUNCTION_6();
    ZlibDataCompressor.init()();
    if (v20)
    {
      v33[3] = v19;
      v33[4] = &protocol witness table for ZlibDataCompressor;
      v33[0] = v20;
    }
    else
    {
      OUTLINED_FUNCTION_71_2();
    }
    outlined init with take of SessionObject?((uint64_t)v33, (uint64_t)v32, &demangling cache variable for type metadata for DataCompressing?);
    OUTLINED_FUNCTION_0_2();
    outlined assign with take of DataCompressing?((uint64_t)v32, (uint64_t)&v4[19], &demangling cache variable for type metadata for DataCompressing?);
    OUTLINED_FUNCTION_91_0();
    if ((a1 & 1) == 0)
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v21 = OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_3_1(v21, (uint64_t)static Logger.siriNetwork);
      v22 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_1_23(v22))
      {
        v23 = (_WORD *)OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_13_8(v23);
        OUTLINED_FUNCTION_2_19(&dword_246EC7000, v24, v25, "CommunicationProtocol - Ace header: Buffering ACE Header");
        OUTLINED_FUNCTION_0_4();
      }

      if (one-time initialization token for aceHeaderMagic != -1)
        swift_once();
      static AceStreamHeader.createAceStreamHeaderData(withMagic:compressionType:)(static AceSerialization.aceHeaderMagic, 1);
      OUTLINED_FUNCTION_191_0();
      CommunicationProtocolAce.bufferGeneralData(data:)(v26, v27);
      OUTLINED_FUNCTION_44_3(a1);
    }
  }
  v28 = (uint64_t *)&v4[11];
  result = OUTLINED_FUNCTION_0_2();
  v30 = (unint64_t)v4[12].isa;
  if (v30 >> 60 == 15)
  {
    v31 = *v28;
    *(_OWORD *)v28 = xmmword_246F725C0;
    return outlined consume of Data?(v31, v30);
  }
  return result;
}

void CommunicationProtocolAce.httpHeaderData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  _QWORD v21[65];
  _QWORD v22[66];

  OUTLINED_FUNCTION_19();
  v4 = type metadata accessor for URL.DirectoryHint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_132_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_1_0();
  v9 = v8 - v7;
  type metadata accessor for URL();
  OUTLINED_FUNCTION_193_0();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v21[-1] - v14;
  v20 = v0;
  CommunicationProtocolAce.aceDelegate.getter();
  if (v16)
  {
    OUTLINED_FUNCTION_28(v22, (const void *)(v16 + 40));
    outlined retain of ConnectionConfiguration(v22);
    OUTLINED_FUNCTION_5_16();
    OUTLINED_FUNCTION_28(v21, v22);
    ConnectionConfiguration.resolvedURL.getter();
    if (__swift_getEnumTagSinglePayload(v9, 1, v1) == 1)
    {
      outlined release of ConnectionConfiguration(v22);
      outlined destroy of RPCOspreyConnectionProtocol?(v9, (uint64_t *)&demangling cache variable for type metadata for URL?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v15, v9, v1);
      v21[0] = 1701011759;
      v21[1] = 0xE400000000000000;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, *MEMORY[0x24BDCD7A0], v4);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(path:directoryHint:)();
      v17 = OUTLINED_FUNCTION_126_0();
      v18(v17);
      swift_bridgeObjectRelease();
      CommunicationProtocolAce.headerData(forURL:aceHost:languageCode:syncAssistantId:)();
      outlined release of ConnectionConfiguration(v22);
      v19 = *(void (**)(char *, uint64_t))(v3 + 8);
      v19(v13, v1);
      v19(v15, v1);
    }
  }
  OUTLINED_FUNCTION_1_1();
}

void CommunicationProtocolAce.headerData(forURL:aceHost:languageCode:syncAssistantId:)()
{
  uint64_t v0;
  void *v1;
  __CFString *v2;
  id v3;
  NSURL *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  _QWORD v7[67];

  OUTLINED_FUNCTION_19();
  v7[65] = *MEMORY[0x24BDAC8D0];
  CommunicationProtocolAce.aceDelegate.getter();
  if (v0)
  {
    OUTLINED_FUNCTION_28(v7, (const void *)(v0 + 40));
    outlined retain of ConnectionConfiguration(v7);
    if (one-time initialization token for httpMethodACE != -1)
      swift_once();
    v1 = (void *)static ConnectionConfigurationConstants.httpMethodACE;
    if (static ConnectionConfigurationConstants.httpMethodACE)
    {
      v2 = (__CFString *)static ConnectionConfigurationConstants.httpMethodACE;
    }
    else
    {
      v2 = (__CFString *)MEMORY[0x24956D034](4539201, 0xE300000000000000);
      v1 = 0;
    }
    v3 = v1;
    URL._bridgeToObjectiveC()(v4);
    v6 = v5;
    CFHTTPMessageCreateRequest(0, v2, v5, (CFStringRef)*MEMORY[0x24BDB7690]);

    URL.host(percentEncoded:)(1);
    MEMORY[0x24956D034](1953722184, 0xE400000000000000);
    OUTLINED_FUNCTION_179();
  }
  OUTLINED_FUNCTION_1_1();
}

void CommunicationProtocolAce.prepareProviderHeader(withForceReconnect:)(char a1)
{
  uint64_t v1;
  unint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  os_log_type_t v11;
  _WORD *v12;

  OUTLINED_FUNCTION_0_2();
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  *(_OWORD *)(v1 + 56) = xmmword_246F725C0;
  outlined consume of Data._Representation(v6, v7);
  CommunicationProtocolAce.aceDelegate.getter();
  if (v8)
  {
    v9 = v8;
    BackgroundConnection.providerHeaderData(forceReconnect:)(a1 & 1);
    OUTLINED_FUNCTION_191_0();
    OUTLINED_FUNCTION_5_16();
    if (v2 >> 60 != 15)
    {
      OUTLINED_FUNCTION_174_0();
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v10 = OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_3_1(v10, (uint64_t)static Logger.siriNetwork);
      v11 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_27_0(v11))
      {
        v12 = (_WORD *)OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_92_2(v12);
        OUTLINED_FUNCTION_8_0(&dword_246EC7000, v9, v3, "CommunicationProtocol - Ace header: Preparing Provider Header", v4);
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_0_2();
      OUTLINED_FUNCTION_133_0();
      Data.append(_:)();
      OUTLINED_FUNCTION_91_0();
      OUTLINED_FUNCTION_22_7();
      OUTLINED_FUNCTION_22_7();
    }
  }
  OUTLINED_FUNCTION_99_1();
}

const __CFString *CommunicationProtocolAce.consumeHttpHeader(withData:)(NSObject *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint8_t *v3;
  CFStringRef v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _WORD *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  const __CFString *result;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v7 = v2;
  v8 = v1;
  v9 = *(void **)(v1 + 104);
  if (!v9)
  {
    OUTLINED_FUNCTION_124();
    if (!v30)
      swift_once();
    v18 = OUTLINED_FUNCTION_5_1();
    v19 = OUTLINED_FUNCTION_3_1(v18, (uint64_t)static Logger.siriNetwork);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_102_1(v21);
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v19, v20, "CommunicationProtocol - Ace header: We shouldn't be trying to handle http header if we're not expecting it", v3);
      OUTLINED_FUNCTION_0_4();
    }

    return 0;
  }
  v11 = v9;
  CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)((uint64_t)a1);
  if (v2)
  {
LABEL_20:
    v47 = v7;
    OUTLINED_FUNCTION_104_1();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if ((OUTLINED_FUNCTION_11_4() & 1) != 0)
    {
      v30 = v46 == 4 && v42 == 4;
      if (v30 && !(v44 | v43 | v45))
      {
        OUTLINED_FUNCTION_124();
        if (!v30)
          swift_once();
        v36 = OUTLINED_FUNCTION_5_1();
        OUTLINED_FUNCTION_3_1(v36, (uint64_t)static Logger.siriNetwork);
        v37 = OUTLINED_FUNCTION_35_0();
        if (OUTLINED_FUNCTION_122_0(v37))
        {
          v38 = (uint8_t *)OUTLINED_FUNCTION_2_2();
          v39 = (_QWORD *)OUTLINED_FUNCTION_2_2();
          *(_DWORD *)v38 = 138412290;
          lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
          OUTLINED_FUNCTION_11_2();
          *(_QWORD *)v40 = 4;
          *(_QWORD *)(v40 + 8) = 0;
          *(_QWORD *)(v40 + 16) = 0;
          *(_QWORD *)(v40 + 24) = 0;
          *(_BYTE *)(v40 + 32) = 4;
          _swift_stdlib_bridgeErrorToNSError();
          OUTLINED_FUNCTION_53_2();
          *v39 = v6;
          OUTLINED_FUNCTION_30_0(&dword_246EC7000, a1, (os_log_type_t)v8, "CommunicationProtocol - Ace header: Need more data to read Http Header %@", v38);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_20_1();
          OUTLINED_FUNCTION_0_4();
        }

        OUTLINED_FUNCTION_36_2();
        return 0;
      }
      outlined consume of BackgroundConnectionError(v42, (void *)v43, v44, v45, v46);
    }
    OUTLINED_FUNCTION_124();
    if (!v30)
      swift_once();
    v31 = OUTLINED_FUNCTION_5_1();
    v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_104_1();
    OUTLINED_FUNCTION_104_1();
    Logger.logObject.getter();
    v33 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_122_0(v33))
    {
      v34 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      v35 = (_QWORD *)OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v34 = 138412290;
      OUTLINED_FUNCTION_104_1();
      _swift_stdlib_bridgeErrorToNSError();
      OUTLINED_FUNCTION_53_2();
      *v35 = v6;
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v32, (os_log_type_t)v8, "CommunicationProtocol - Ace header: Error reading http header %@", v34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_36_2();
    OUTLINED_FUNCTION_36_2();

    swift_willThrow();
    return v4;
  }
  v14 = v12;
  if (v12 == 200)
  {
    v4 = v13;
    OUTLINED_FUNCTION_124();
    if (!v30)
      swift_once();
    v15 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v15, (uint64_t)static Logger.siriNetwork);
    v16 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_27_0(v16))
    {
      v17 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v17 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, a1, (os_log_type_t)0xC8u, "CommunicationProtocol - Ace header: HTTP header is complete", v17);
      OUTLINED_FUNCTION_0_4();
    }

    *(_QWORD *)(v8 + 104) = 0;
    return v4;
  }
  v22 = objc_msgSend((id)objc_opt_self(), sel_localizedStringForStatusCode_, v12);
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v23;

  OUTLINED_FUNCTION_124();
  if (!v30)
    swift_once();
  v24 = OUTLINED_FUNCTION_5_1();
  v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.siriNetwork);
  swift_bridgeObjectRetain_n();
  Logger.logObject.getter();
  v26 = OUTLINED_FUNCTION_58();
  if (OUTLINED_FUNCTION_15_9(v26))
  {
    v27 = OUTLINED_FUNCTION_2_2();
    v42 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v27 = 134218242;
    v47 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v6, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_246EC7000, v25, v5, "CommunicationProtocol - Ace header: HTTP status code %ld %s", (uint8_t *)v27, 0x16u);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }

  swift_bridgeObjectRelease_n();
  result = (id)__CFStringMakeConstantString("Location");
  if (result)
  {
    a1 = result;
    v4 = CFHTTPMessageCopyHeaderFieldValue((CFHTTPMessageRef)v11, result);

    lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
    v7 = OUTLINED_FUNCTION_11_2();
    *(_QWORD *)v29 = v14;
    *(_QWORD *)(v29 + 8) = v4;
    *(_QWORD *)(v29 + 16) = v41;
    *(_QWORD *)(v29 + 24) = v6;
    *(_BYTE *)(v29 + 32) = 0;
    OUTLINED_FUNCTION_105_0();
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(OUTLINED_FUNCTION_6() + 16) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  OUTLINED_FUNCTION_117_0();
  Data.count.getter();
  __asm { BR              X10 }
}

uint64_t sub_246F1B63C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[18];

  v17[2] = v17;
  v5 = v3;
  OUTLINED_FUNCTION_122();
  v6 = OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_94_2(v6, v7, BYTE6(v4), v8, v9, v10, v11);
  if (v5)
  {
    OUTLINED_FUNCTION_78_0();
  }
  else
  {
    OUTLINED_FUNCTION_155_0();
    swift_beginAccess();
    *(_QWORD *)(v1 + 16) = v3;
    v12 = *v0;
    v13 = Data.advanced(by:)();
    v15 = v14;
    OUTLINED_FUNCTION_149_0(v12);
    OUTLINED_FUNCTION_78_0();
    *v0 = v13;
    v0[1] = v15;
  }
  return v2;
}

void closure #1 in CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)(UInt8 *newBytes@<X0>, CFHTTPMessageRef message@<X2>, CFIndex numBytes@<X3>, uint64_t a4@<X4>, CFIndex *a5@<X5>, CFIndex *a6@<X8>)
{
  CFIndex *v11;
  CFDataRef v12;
  CFDataRef v13;
  const __CFData *v14;
  CFIndex Length;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex ResponseStatusCode;
  uint8_t *buf;
  NSObject *v29;

  if (!newBytes || !CFHTTPMessageAppendBytes(message, newBytes, numBytes))
  {
    lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
    swift_allocError();
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_BYTE *)(v20 + 32) = 4;
LABEL_11:
    swift_willThrow();
    return;
  }
  v11 = (CFIndex *)(a4 + 16);
  swift_beginAccess();
  *(_QWORD *)(a4 + 16) = numBytes;
  if (!CFHTTPMessageIsHeaderComplete(message))
  {
    lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
    swift_allocError();
    *(_QWORD *)v21 = 4;
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_BYTE *)(v21 + 32) = 4;
    goto LABEL_11;
  }
  v12 = CFHTTPMessageCopyBody(message);
  v13 = v12;
  if (!v12)
  {
LABEL_21:
    ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(message);

    *a5 = ResponseStatusCode;
    *a6 = ResponseStatusCode;
    swift_beginAccess();
    a6[1] = *v11;
    return;
  }
  v14 = v12;
  Length = CFDataGetLength(v14);
  swift_beginAccess();
  v29 = v14;
  if (Length < *v11)
  {
    swift_beginAccess();
    if (__OFSUB__(*v11, Length))
    {
      __break(1u);
    }
    else
    {
      *v11 -= Length;
      if (one-time initialization token for siriNetwork == -1)
      {
LABEL_8:
        v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
        swift_retain();
        v17 = Logger.logObject.getter();
        v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v19 = 134217984;
          buf = v19;
          swift_beginAccess();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_246EC7000, v17, v18, "CommunicationProtocol - Ace header: Header is complete. Bytes read %ld", buf, 0xCu);
          MEMORY[0x24956E018](buf, -1, -1);

        }
        else
        {

          swift_release();
          v17 = v29;
        }

        goto LABEL_21;
      }
    }
    swift_once();
    goto LABEL_8;
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc();
    *(_DWORD *)v25 = 134218240;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_246EC7000, v23, v24, "CommunicationProtocol - Ace header: Something has gone terribly wrong. bytesRead: %ld bodyLength: %ld", (uint8_t *)v25, 0x16u);
    MEMORY[0x24956E018](v25, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  *v11 = 0;
  *a5 = CFHTTPMessageGetResponseStatusCode(message);
  lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
  swift_allocError();
  *(_QWORD *)v26 = 2;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_BYTE *)(v26 + 32) = 4;
  swift_willThrow();

}

#error "246F1C064: call analysis failed (funcsize=296)"

void CommunicationProtocolAce.consumeAceData(withData:)(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_246F1C224()
{
  uint64_t v0;

  if (BYTE6(v0))
    __asm { BR              X9 }
  return 0;
}

void CommunicationProtocolAce.handlePacket(_:)(char a1)
{
  __asm { BR              X10 }
}

void sub_246F1C868()
{
  CommunicationProtocolAce.handleAceNop()();
}

void sub_246F1C874()
{
  CommunicationProtocolAce.handleAcePing(_:)();
}

void sub_246F1C87C()
{
  CommunicationProtocolAce.handleAcePong(_:)();
}

void sub_246F1C884()
{
  CommunicationProtocolAce.handleAceEnd()();
}

void CommunicationProtocolAce.handleAceObject(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  AceObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17[5];

  OUTLINED_FUNCTION_19();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_5_1();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_131();
  outlined init with copy of DataCompressing?(v2, (uint64_t)v17, &demangling cache variable for type metadata for SessionObject?);
  if (!v17[3])
  {
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v17, &demangling cache variable for type metadata for SessionObject?);
    goto LABEL_9;
  }
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionObject);
  OUTLINED_FUNCTION_195_0(v5, (unint64_t *)&lazy cache variable for type metadata for AceObject);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v7 = (AceObject *)OUTLINED_FUNCTION_3_1(v3, (uint64_t)static Logger.siriNetwork);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(&v7->super, v13))
    {
      v14 = (uint8_t *)OUTLINED_FUNCTION_1_2();
      *(_WORD *)v14 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, &v7->super, v13, "CommunicationProtocol - Ace object: Received SessionObject could not be cast to AceObject", v14);
      OUTLINED_FUNCTION_0_4();
    }
    goto LABEL_15;
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v6 = __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v0, v6, v3);
  v7 = v16;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v8, v9))
  {

    OUTLINED_FUNCTION_120();
    CommunicationProtocolAce.aceDelegate.getter();
    if (v15)
      BackgroundConnection.didReceiveAceObject(aceObject:)(v7);
LABEL_15:

    OUTLINED_FUNCTION_1_1();
    return;
  }
  v10 = (uint8_t *)OUTLINED_FUNCTION_2_2();
  v17[0] = OUTLINED_FUNCTION_2_2();
  *(_DWORD *)v10 = 136315138;
  v11 = outlined bridged method (pb) of @objc AceObject.encodedClassName()(v7);
  if (v12)
  {
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_0(&dword_246EC7000, v8, v9, "CommunicationProtocol - Ace object: Connection got AceObject %s", v10);
    OUTLINED_FUNCTION_20_1();
    OUTLINED_FUNCTION_0_4();
  }

  __break(1u);
}

void CommunicationProtocolAce.handleAcePing(_:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_55_2();
  v2 = v1;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v3, (uint64_t)static Logger.siriNetwork);
  v4 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_7_0(v4))
  {
    v5 = (float *)OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_128_0(v5, 1.5047e-36);
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_38_4(&dword_246EC7000, v6, v7, "CommunicationProtocol - Ace pings: Connection got ping %u");
    OUTLINED_FUNCTION_0_4();
  }

  CommunicationProtocolAce.sendAcePong(withId:)(v2);
  OUTLINED_FUNCTION_18_6();
}

void CommunicationProtocolAce.handleAcePong(_:)()
{
  _QWORD *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;
  uint64_t v3;
  os_log_type_t v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_55_2();
  v2 = v1;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v3, (uint64_t)static Logger.siriNetwork);
  v4 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_7_0(v4))
  {
    v5 = (float *)OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_128_0(v5, 1.5047e-36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_38_4(&dword_246EC7000, v6, v7, "CommunicationProtocol - Ace pings: Connection got pong %u");
    OUTLINED_FUNCTION_0_4();
  }

  if (v2 <= 0xFFFE795F)
  {
    if (v0[30])
    {
      OUTLINED_FUNCTION_122();
      PingInfo.markPongReceived(withIndex:)(v2);
      OUTLINED_FUNCTION_78_0();
    }
  }
  else
  {
    CommunicationProtocolAce.handleBarrierReply(barrierValue:)(v2);
  }
  OUTLINED_FUNCTION_18_6();
}

void CommunicationProtocolAce.handleAceEnd()()
{
  _QWORD *v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _WORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_5_1();
  v3 = OUTLINED_FUNCTION_3_1(v2, (uint64_t)static Logger.siriNetwork);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (_WORD *)OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_102_1(v5);
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v3, v4, "CommunicationProtocol - Ace object: Connection got Ace end. Terminating connection", v1);
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_0_2();
  v6 = v0[6];
  if (v6 >> 60 != 15)
  {
    OUTLINED_FUNCTION_111_0();
    v7 = OUTLINED_FUNCTION_189_0();
    outlined consume of Data?((uint64_t)(v0 + 5), v6);
    if (v7 > 0)
      goto LABEL_10;
  }
  if ((OUTLINED_FUNCTION_0_2(), v8 = v0[10], v8 >> 60 != 15)
    && (OUTLINED_FUNCTION_111_0(),
        v9 = OUTLINED_FUNCTION_189_0(),
        outlined consume of Data?((uint64_t)(v0 + 9), v8),
        v9 > 0)
    || v0[28])
  {
LABEL_10:
    Logger.logObject.getter();
    v10 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_1_23(v10))
    {
      v11 = (_WORD *)OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_13_8(v11);
      OUTLINED_FUNCTION_2_19(&dword_246EC7000, v12, v13, "CommunicationProtocol - Ace object: Ace end is unexpected, returning error");
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_147();
    if (v14)
    {
      lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
      v15 = (void *)OUTLINED_FUNCTION_11_2();
      *(_QWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_BYTE *)(v16 + 32) = 4;
      BackgroundConnection.didEncounterError(_:)(v15);
      OUTLINED_FUNCTION_5_16();
      OUTLINED_FUNCTION_42_0();
    }
  }
  OUTLINED_FUNCTION_147();
  if (v17)
  {
    BackgroundConnection.cancel()();
    OUTLINED_FUNCTION_5_16();
  }
  OUTLINED_FUNCTION_99_1();
}

void CommunicationProtocolAce.handleAceNop()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_5_1();
  oslog = OUTLINED_FUNCTION_3_1(v0, (uint64_t)static Logger.siriNetwork);
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)OUTLINED_FUNCTION_1_2();
    *(_WORD *)v2 = 0;
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, oslog, v1, "CommunicationProtocol - Ace object: Connection got nop", v2);
    OUTLINED_FUNCTION_0_4();
  }

}

void CommunicationProtocolAce.aceHeaderTimeoutFired(fromTimer:afterTimeout:)(objc_class *a1, double a2)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  Class isa;
  BOOL v6;
  NSObject *v7;
  uint64_t v9;
  uint64_t v10;
  Class v11;
  BOOL v12;
  objc_class *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  const char *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  os_log_type_t v30;
  _WORD *v31;
  os_log_type_t v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  NSObject *v38;

  isa = v2[24].isa;
  if (isa)
    v6 = isa == a1;
  else
    v6 = 0;
  if (v6)
  {
    v7 = v2;
    CommunicationProtocolAce.aceDelegate.getter();
    if (v9)
    {
      v10 = v9;
      v2[24].isa = 0;
      swift_unknownObjectRelease();
      v11 = v2[25].isa;
      v12 = __CFADD__(v11, 1);
      v13 = (Class)((char *)v11 + 1);
      if (v12)
      {
        __break(1u);
        goto LABEL_48;
      }
      v2[25].isa = v13;
      OUTLINED_FUNCTION_0_2();
      outlined init with copy of DataCompressing?((uint64_t)&v2[14], (uint64_t)v37, &demangling cache variable for type metadata for DataDecompressing?);
      v2 = v38;
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v37, &demangling cache variable for type metadata for DataDecompressing?);
      if (v2)
      {
LABEL_34:
        OUTLINED_FUNCTION_3_6();
        return;
      }
      if (*(_BYTE *)(v10 + 1185) != 1 || v7[25].isa > (Class)1)
      {
        v3 = 0;
        v4 = 0;
        goto LABEL_24;
      }
      v2 = v10;
      if (BackgroundConnection.isUsingPop()())
      {
        OUTLINED_FUNCTION_148_0();
        if (!v6)
          swift_once();
        v14 = OUTLINED_FUNCTION_5_1();
        OUTLINED_FUNCTION_3_1(v14, (uint64_t)static Logger.siriNetwork);
        v15 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_7_0(v15))
        {
          v16 = (uint8_t *)OUTLINED_FUNCTION_1_2();
          *(_WORD *)v16 = 0;
          v17 = "CommunicationProtocol - Ace header: Ace header timeout while using POP Connection Method";
          goto LABEL_22;
        }
LABEL_23:

        v3 = 0;
        v4 = 1;
        goto LABEL_24;
      }
      v2 = v10;
      if (BackgroundConnection.isUsingFlorence()())
      {
        OUTLINED_FUNCTION_148_0();
        if (!v6)
          swift_once();
        v18 = OUTLINED_FUNCTION_5_1();
        OUTLINED_FUNCTION_3_1(v18, (uint64_t)static Logger.siriNetwork);
        v19 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_7_0(v19))
        {
          v16 = (uint8_t *)OUTLINED_FUNCTION_1_2();
          *(_WORD *)v16 = 0;
          v17 = "CommunicationProtocol - Ace header: Ace header timeout while using Florence";
LABEL_22:
          OUTLINED_FUNCTION_8_0(&dword_246EC7000, v2, (os_log_type_t)&demangling cache variable for type metadata for DataDecompressing?, v17, v16);
          OUTLINED_FUNCTION_0_4();
        }
        goto LABEL_23;
      }
      if (OUTLINED_FUNCTION_198_0())
      {
        v2 = v10;
        if (BackgroundConnection.isWifiOrCellularMaybeBetterThanCurrentStream()())
        {
          v4 = 0;
          v3 = 1;
LABEL_24:
          OUTLINED_FUNCTION_148_0();
          if (v6)
          {
LABEL_26:
            v20 = OUTLINED_FUNCTION_5_1();
            OUTLINED_FUNCTION_3_1(v20, (uint64_t)static Logger.siriNetwork);
            v21 = OUTLINED_FUNCTION_58();
            if (OUTLINED_FUNCTION_1_23(v21))
            {
              v22 = (_WORD *)OUTLINED_FUNCTION_1_2();
              OUTLINED_FUNCTION_13_8(v22);
              OUTLINED_FUNCTION_2_19(&dword_246EC7000, v23, v24, "CommunicationProtocol - Ace header: Ace header timeout error");
              OUTLINED_FUNCTION_0_4();
            }

            lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
            OUTLINED_FUNCTION_11_2();
            v26 = 256;
            if (!v4)
              v26 = v3;
            *(_QWORD *)v25 = v26;
            *(_QWORD *)(v25 + 8) = 0;
            if (v4)
              v27 = 3;
            else
              v27 = 1;
            *(_QWORD *)(v25 + 16) = 0;
            *(_QWORD *)(v25 + 24) = 0;
            *(_BYTE *)(v25 + 32) = v27;
            BackgroundConnection.fallbackToNextConnectionMethod(error:)();
            OUTLINED_FUNCTION_42_0();
            goto LABEL_34;
          }
LABEL_48:
          swift_once();
          goto LABEL_26;
        }
      }
      OUTLINED_FUNCTION_148_0();
      if (!v6)
        swift_once();
      v28 = OUTLINED_FUNCTION_5_1();
      v29 = (void *)__swift_project_value_buffer(v28, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_11_10();
      v30 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_27_0(v30))
      {
        v31 = (_WORD *)OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_92_2(v31);
        OUTLINED_FUNCTION_8_0(&dword_246EC7000, v2, OS_LOG_TYPE_DEFAULT, "CommunicationProtocol - Ace header: Rescheduling aceheader timeout since wifi isn't available or bt link is ok", (uint8_t *)v3);
        OUTLINED_FUNCTION_0_4();
      }

      CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(30.0 - a2);
      if ((*(_BYTE *)(v10 + 1185) & 1) == 0)
        goto LABEL_34;
      Logger.logObject.getter();
      v32 = OUTLINED_FUNCTION_58();
      if (OUTLINED_FUNCTION_1_23(v32))
      {
        v33 = (_WORD *)OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_13_8(v33);
        OUTLINED_FUNCTION_2_19(&dword_246EC7000, v34, v35, "CommunicationProtocol - Ace header: Ace header timeout Intermediate error");
        OUTLINED_FUNCTION_0_4();
      }

      lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
      OUTLINED_FUNCTION_11_2();
      *(_OWORD *)v36 = 0u;
      *(_OWORD *)(v36 + 16) = 0u;
      *(_BYTE *)(v36 + 32) = 1;
      BackgroundConnection.didEncounterIntermediateError(_:)();
      OUTLINED_FUNCTION_3_6();
      OUTLINED_FUNCTION_42_0();
    }
  }
}

void CommunicationProtocolAce.pingTimerFired()()
{
  _QWORD *v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isa;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  _WORD *v20;
  char v21;
  Class v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _WORD *v28;
  os_log_type_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  Swift::Int *v43;

  v3 = v0;
  v4 = v0 + 5;
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_90_1();
  if (!(!v6 & v5))
  {
    v7 = *v4;
    OUTLINED_FUNCTION_66_0(v7);
    v8 = OUTLINED_FUNCTION_178_0();
    OUTLINED_FUNCTION_10_1(v7);
    if (v8 > 0)
      goto LABEL_5;
  }
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_90_1();
  if (!v6 & v5
    || (isa = (uint64_t)v3[9].isa,
        OUTLINED_FUNCTION_66_0(isa),
        v10 = OUTLINED_FUNCTION_178_0(),
        OUTLINED_FUNCTION_10_1(isa),
        v10 < 1))
  {
    CommunicationProtocolAce.checkPings()();
  }
  else
  {
LABEL_5:
    v11 = CommunicationProtocolAce.checkForProgressOnReadingData()();
  }
  v12 = v11;
  v13 = v3;
  CommunicationProtocolAce.aceDelegate.getter();
  if (v14)
  {
    v15 = v14;
    if ((v12 & 2) == 0 || (v13 = v14, !BackgroundConnection.shouldFallbackQuickly()()))
    {
      if ((v12 & 4) == 0)
      {
        if (v12 >= 8)
        {
          v16 = 0;
          if ((v12 & 1) == 0)
            goto LABEL_33;
          goto LABEL_24;
        }
        goto LABEL_25;
      }
    }
    if (!OUTLINED_FUNCTION_198_0())
    {
      if (BackgroundConnection.isUsingPop()() || (v13 = v15, BackgroundConnection.isUsingFlorence()()))
      {
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v18 = OUTLINED_FUNCTION_5_1();
        OUTLINED_FUNCTION_3_1(v18, (uint64_t)static Logger.siriNetwork);
        v19 = OUTLINED_FUNCTION_35_0();
        if (OUTLINED_FUNCTION_27_0(v19))
        {
          v20 = (_WORD *)OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_92_2(v20);
          OUTLINED_FUNCTION_8_0(&dword_246EC7000, v13, v1, "CommunicationProtocol - Ace pings: Ping timeout while using POP or Florence method", v2);
          OUTLINED_FUNCTION_0_4();
        }

        v16 = 1;
        if ((v12 & 1) == 0)
          goto LABEL_33;
LABEL_24:
        v21 = 1;
        goto LABEL_27;
      }
LABEL_25:
      if ((v12 & 1) == 0)
        goto LABEL_48;
      v16 = 0;
      v21 = 0;
LABEL_27:
      v13 = v15;
      if ((!BackgroundConnection.isUsingPop()() || OUTLINED_FUNCTION_198_0())
        && (v13 = v15, BackgroundConnection.logTcpInfoIndicatesPoorLinkQuality()()))
      {
        v22 = v3[30].isa;
        if (v22)
        {
          v23 = PingInfo.totalPingCount()();
          v24 = PingInfo.numberOfUnacknowledgedPings()();
        }
        else
        {
          v24 = 0;
          v23 = 0;
        }
        v42 = v22 == 0;
        lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
        v2 = (uint8_t *)OUTLINED_FUNCTION_11_2();
        *v43 = v23;
        v43[1] = v42;
        v43[2] = v24;
        v43[3] = v42 | 0x3000000000000000;
        v43[4] = 0;
        v13 = v15;
        BackgroundConnection.didEncounterIntermediateError(_:)();

        v17 = 0;
        if ((v21 & 1) != 0)
          goto LABEL_34;
      }
      else if ((v21 & 1) != 0)
      {
LABEL_33:
        v17 = 0;
        goto LABEL_34;
      }
LABEL_48:
      OUTLINED_FUNCTION_3_6();
      return;
    }
    if (BackgroundConnection.isWifiOrCellularMaybeBetterThanCurrentStream()())
    {
      v16 = 0;
      v17 = 1;
LABEL_34:
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v25 = OUTLINED_FUNCTION_5_1();
      v26 = OUTLINED_FUNCTION_3_1(v25, (uint64_t)static Logger.siriNetwork);
      v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (_WORD *)OUTLINED_FUNCTION_1_2();
        OUTLINED_FUNCTION_92_2(v28);
        OUTLINED_FUNCTION_8_0(&dword_246EC7000, v26, v27, "CommunicationProtocol - Ace pings: Ping timeout", v2);
        OUTLINED_FUNCTION_0_4();
      }

      if (v3[13].isa)
      {
        Logger.logObject.getter();
        v29 = OUTLINED_FUNCTION_35_0();
        if (OUTLINED_FUNCTION_1_23(v29))
        {
          v30 = (_WORD *)OUTLINED_FUNCTION_1_2();
          OUTLINED_FUNCTION_13_8(v30);
          OUTLINED_FUNCTION_2_19(&dword_246EC7000, v31, v32, "CommunicationProtocol - Ace pings: Overriding ping error since we haven't read our http header yet");
          OUTLINED_FUNCTION_0_4();
        }

        lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
        OUTLINED_FUNCTION_11_2();
        if (v16)
        {
          *(_QWORD *)v33 = v17 | 0x100;
          v34 = 3;
        }
        else
        {
          *(_QWORD *)v33 = v17;
          v34 = 1;
        }
      }
      else
      {
        v35 = 256;
        if (!v16)
          v35 = 0;
        v36 = v35 | v17;
        lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError();
        OUTLINED_FUNCTION_11_2();
        *(_QWORD *)v33 = v36;
        v34 = 2;
      }
      *(_QWORD *)(v33 + 8) = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_BYTE *)(v33 + 32) = v34;
      BackgroundConnection.fallbackToNextConnectionMethod(error:)();
      OUTLINED_FUNCTION_42_0();
      goto LABEL_48;
    }
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v37 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v37, (uint64_t)static Logger.siriNetwork);
    v38 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_1_23(v38))
    {
      v39 = (_WORD *)OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_13_8(v39);
      OUTLINED_FUNCTION_2_19(&dword_246EC7000, v40, v41, "CommunicationProtocol - Ace pings: Ignoring Ping timeout since wifi isn't available to fallback to");
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_3_6();

  }
}

void CommunicationProtocolAce.checkPings()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 v12;

  OUTLINED_FUNCTION_55_2();
  v2 = *(_DWORD *)(v1 + 232);
  v3 = __CFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
    swift_once();
    v6 = OUTLINED_FUNCTION_5_1();
    v7 = (void *)__swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_16_2();
    Logger.logObject.getter();
    v8 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_7_0(v8))
    {
      v9 = (float *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_128_0(v9, 1.5047e-36);
      OUTLINED_FUNCTION_119_0();
      OUTLINED_FUNCTION_14();
      OUTLINED_FUNCTION_38_4(&dword_246EC7000, v10, v11, "CommunicationProtocol - Ace pings: Error sending Ace Ping %u");
      OUTLINED_FUNCTION_0_4();
    }
    OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_42_0();

  }
  else
  {
    v0 = v1;
    if (v4 <= 0xFFFE795F)
      v5 = v4;
    else
      v5 = 0;
    *(_DWORD *)(v1 + 232) = v5;
    CommunicationProtocolAce.sendAcePing(withId:)(v5);
  }
  if (*(_QWORD *)(v0 + 240)
    || (type metadata accessor for PingInfo(),
        OUTLINED_FUNCTION_6(),
        *(_QWORD *)(v0 + 240) = PingInfo.init(pingAcknowledgedCount:avgPingTime:)(0, 0.0),
        swift_release(),
        *(_QWORD *)(v0 + 240)))
  {
    v12 = *(_DWORD *)(v0 + 232);
    OUTLINED_FUNCTION_122();
    PingInfo.markPingSent(withIndex:)(v12);
    OUTLINED_FUNCTION_78_0();
    if (*(_QWORD *)(v0 + 240))
      PingInfo.numberOfUnacknowledgedPings()();
  }
  OUTLINED_FUNCTION_18_6();
}

uint64_t CommunicationProtocolAce.checkForProgressOnReadingData()()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;

  OUTLINED_FUNCTION_0_2();
  v1 = v0[6];
  OUTLINED_FUNCTION_90_1();
  if (!(!v7 & v2))
  {
    OUTLINED_FUNCTION_29_3();
    __asm { BR              X9 }
  }
  OUTLINED_FUNCTION_0_2();
  v3 = v0[10];
  OUTLINED_FUNCTION_90_1();
  if (!(!v7 & v2))
  {
    OUTLINED_FUNCTION_29_3();
    __asm { BR              X9 }
  }
  v4 = v0[36];
  v5 = v0[39];
  v6 = v4 + v5;
  if (__OFADD__(v4, v5))
  {
    __break(1u);
    JUMPOUT(0x246F1DBE8);
  }
  v7 = v6 == 1;
  if (v6 < 1)
  {
    if (v4 <= 9)
    {
      v13 = __OFSUB__(v5, 10);
      v12 = v5 - 10 < 0;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    if (v12 != v13)
      return 0;
    else
      return 12;
  }
  else
  {
    result = v6 != 1;
    v9 = 12;
    if (!v7)
      v9 = 13;
    if (v4 <= 9)
    {
      v11 = __OFSUB__(v5, 10);
      v10 = v5 - 10 < 0;
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    if (v10 == v11)
      return v9;
  }
  return result;
}

void closure #1 in CommunicationProtocolAce.checkForProgressOnReadingData()(uint64_t a1@<X0>, _QWORD *a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  const char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint32_t v32;
  os_log_type_t v33;
  _BYTE *v34;
  uint64_t v35[3];
  uint64_t v36;

  if (!a1)
    goto LABEL_24;
  v34 = a3;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v35[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v36 = a2[34];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeRawPointer?);
    v10 = Optional.debugDescription.getter();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v6, v7, "CommunicationProtocol - Ace objects: lastInputDataPointer %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v9, -1, -1);
    MEMORY[0x24956E018](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v35[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v36 = a1;
    v16 = _Pointer.debugDescription.getter();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v12, v13, "CommunicationProtocol - Ace objects: baseAddress %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v15, -1, -1);
    MEMORY[0x24956E018](v14, -1, -1);
  }

  v18 = a2[34];
  if (!v18 || v18 != a1)
  {
    a2[35] = 0;
    a2[36] = 0;
    a2[34] = a1;
LABEL_23:
    a3 = v34;
LABEL_24:
    *a3 = 0;
    return;
  }
  swift_beginAccess();
  v19 = 0;
  v20 = a2[6];
  if (v20 >> 60 == 15
    || (v21 = a2[5],
        outlined copy of Data._Representation(v21, a2[6]),
        v19 = Data.count.getter(),
        outlined consume of Data?(v21, v20),
        v19 < 1)
    || v19 != a2[35])
  {
    a2[36] = 0;
    v25 = Logger.logObject.getter();
    v33 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v33))
    {
LABEL_21:

LABEL_22:
      a2[35] = v19;
      goto LABEL_23;
    }
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    v28 = "CommunicationProtocol - Ace objects: Reset Input Unchanged Counter to 0";
    v29 = v25;
    v30 = v33;
    v31 = v27;
    v32 = 2;
LABEL_20:
    _os_log_impl(&dword_246EC7000, v29, v30, v28, v31, v32);
    MEMORY[0x24956E018](v27, -1, -1);
    goto LABEL_21;
  }
  v22 = a2[36];
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    a2[36] = v24;
    swift_retain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26))
    {

      swift_release();
      goto LABEL_22;
    }
    v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v27 = 134217984;
    v36 = a2[36];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    v28 = "CommunicationProtocol - Ace objects: Incremented Input Unchanged Counter to %ld";
    v29 = v25;
    v30 = v26;
    v31 = v27;
    v32 = 12;
    goto LABEL_20;
  }
  __break(1u);
}

void closure #2 in CommunicationProtocolAce.checkForProgressOnReadingData()(uint64_t a1@<X0>, _QWORD *a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  const char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint32_t v21;
  uint64_t v22;
  os_log_type_t v23;

  if (a1)
  {
    v5 = a2[37];
    if (v5)
      v6 = v5 == a1;
    else
      v6 = 0;
    if (!v6)
    {
      a2[38] = 0;
      a2[39] = 0;
      a2[37] = a1;
      goto LABEL_21;
    }
    swift_beginAccess();
    v7 = 0;
    v8 = a2[10];
    if (v8 >> 60 == 15
      || (v9 = a2[9],
          outlined copy of Data._Representation(v9, a2[10]),
          v7 = Data.count.getter(),
          outlined consume of Data?(v9, v8),
          v7 < 1)
      || v7 != a2[38])
    {
      a2[39] = 0;
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
      v14 = Logger.logObject.getter();
      v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v14, v23))
        goto LABEL_19;
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      v17 = "CommunicationProtocol - Ace objects: Reset Output Unchanged Counter to 0";
      v18 = v14;
      v19 = v23;
      v20 = v16;
      v21 = 2;
LABEL_18:
      _os_log_impl(&dword_246EC7000, v18, v19, v17, v20, v21);
      MEMORY[0x24956E018](v16, -1, -1);
LABEL_19:

LABEL_20:
      a2[38] = v7;
      goto LABEL_21;
    }
    v10 = a2[39];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
    {
      __break(1u);
    }
    else
    {
      a2[39] = v12;
      if (one-time initialization token for siriNetwork == -1)
      {
LABEL_12:
        v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.siriNetwork);
        swift_retain();
        v14 = Logger.logObject.getter();
        v15 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v14, v15))
        {

          swift_release();
          goto LABEL_20;
        }
        v16 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v16 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        v17 = "CommunicationProtocol - Ace objects: Incremented Output Unchanged Counter to %ld";
        v18 = v14;
        v19 = v15;
        v20 = v16;
        v21 = 12;
        goto LABEL_18;
      }
    }
    swift_once();
    goto LABEL_12;
  }
LABEL_21:
  *a3 = 0;
}

uint64_t CommunicationProtocolAce.sendAcePing(withId:)(uint64_t a1)
{
  int vars0;

  return CommunicationProtocolAce.sendAcePing(withId:)(a1, "CommunicationProtocol - Ace pings: Sending ACE Ping %u", vars0);
}

uint64_t CommunicationProtocolAce.sendAcePong(withId:)(uint64_t a1)
{
  int vars0;

  return CommunicationProtocolAce.sendAcePing(withId:)(a1, "CommunicationProtocol - Ace pings: Sending ACE Pong %u", vars0);
}

#error "246F1E488: call analysis failed (funcsize=117)"

void CommunicationProtocolAce.cancelPingTimer()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;

  if (*(_QWORD *)(v0 + 224))
  {
    v3 = v0;
    v4 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v4 != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v5, (uint64_t)static Logger.siriNetwork);
    v6 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_7_0(v6))
    {
      v7 = (_WORD *)OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_102_1(v7);
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v4, v1, "CommunicationProtocol - Ping: Ping timer cancelled.", v2);
      OUTLINED_FUNCTION_0_4();
    }

    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    *(_QWORD *)(v3 + 224) = 0;
    OUTLINED_FUNCTION_24_7();
  }
  else
  {
    OUTLINED_FUNCTION_17_0();
  }
}

void CommunicationProtocolAce.cancelAceHeaderTimeoutTimer()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;

  if (*(_QWORD *)(v0 + 192))
  {
    v3 = v0;
    v4 = one-time initialization token for siriNetwork;
    swift_unknownObjectRetain();
    if (v4 != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v5, (uint64_t)static Logger.siriNetwork);
    v6 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_7_0(v6))
    {
      v7 = (_WORD *)OUTLINED_FUNCTION_1_2();
      OUTLINED_FUNCTION_102_1(v7);
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v4, v1, "CommunicationProtocol - Ace header: Ace header timeout timer cancelled.", v2);
      OUTLINED_FUNCTION_0_4();
    }

    swift_getObjectType();
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease();
    *(_QWORD *)(v3 + 192) = 0;
    OUTLINED_FUNCTION_24_7();
  }
  else
  {
    OUTLINED_FUNCTION_17_0();
  }
}

uint64_t CommunicationProtocolAce.handleBarrierReply(barrierValue:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  char v5;
  void (*v6)(char *);
  uint64_t v7;
  char v8[24];

  result = OUTLINED_FUNCTION_0_2();
  v4 = *(_QWORD *)(v1 + 208);
  if (*(_QWORD *)(v4 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v5 & 1) != 0)
    {
      v6 = *(void (**)(char *))(*(_QWORD *)(v4 + 56) + 16 * result);
      v8[0] = 1;
      OUTLINED_FUNCTION_122();
      v6(v8);
      OUTLINED_FUNCTION_78_0();
      OUTLINED_FUNCTION_0_2();
      v7 = specialized Dictionary._Variant.removeValue(forKey:)(a1);
      OUTLINED_FUNCTION_91_0();
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v7);
    }
  }
  return result;
}

uint64_t CommunicationProtocolAce.cancelOutstandingBarriers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *);
  _BYTE v18[24];

  OUTLINED_FUNCTION_0_2();
  v1 = *(_QWORD *)(v0 + 208);
  v2 = v1 + 64;
  OUTLINED_FUNCTION_85_2();
  v5 = v4 & v3;
  v7 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v5)
    goto LABEL_3;
LABEL_2:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v9 << 6); ; i = v16 + (v9 << 6))
  {
    v17 = *(void (**)(_BYTE *))(*(_QWORD *)(v1 + 56) + 16 * i);
    v18[0] = 0;
    OUTLINED_FUNCTION_122();
    v17(v18);
    result = OUTLINED_FUNCTION_78_0();
    if (v5)
      goto LABEL_2;
LABEL_3:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v12 >= v7)
      goto LABEL_19;
    ++v9;
    if (!*(_QWORD *)(v2 + 8 * v12))
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_19;
      if (!*(_QWORD *)(v2 + 8 * v9))
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_19;
        if (!*(_QWORD *)(v2 + 8 * v9))
          break;
      }
    }
LABEL_16:
    OUTLINED_FUNCTION_109_0();
    v5 = v15 & v14;
  }
  v13 = v12 + 3;
  if (v13 >= v7)
  {
LABEL_19:
    swift_release();
    OUTLINED_FUNCTION_0_2();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32 : (_:)]._Variant);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    return OUTLINED_FUNCTION_91_0();
  }
  if (*(_QWORD *)(v2 + 8 * v13))
  {
    v9 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    v9 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v9 >= v7)
      goto LABEL_19;
    ++v13;
    if (*(_QWORD *)(v2 + 8 * v9))
      goto LABEL_16;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t protocol witness for CommunicationProtocol.init(withDelegate:connectionQueue:) in conformance CommunicationProtocolAce@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CommunicationProtocolAce.__allocating_init(withDelegate:connectionQueue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CommunicationProtocol.safetyNetBuffer.getter in conformance CommunicationProtocolAce()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 320);
  outlined copy of Data?(v2, *(_QWORD *)(v1 + 328));
  return v2;
}

uint64_t protocol witness for CommunicationProtocol.safetyNetBuffer.setter in conformance CommunicationProtocolAce(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v5 = *v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 320);
  v7 = *(_QWORD *)(v5 + 328);
  *(_QWORD *)(v5 + 320) = a1;
  *(_QWORD *)(v5 + 328) = a2;
  return outlined consume of Data?(v6, v7);
}

uint64_t protocol witness for CommunicationProtocol.pingInfo.getter in conformance CommunicationProtocolAce()
{
  return swift_retain();
}

void protocol witness for CommunicationProtocol.connectionStarted(fallingBack:) in conformance CommunicationProtocolAce(Swift::Bool a1)
{
  CommunicationProtocolAce.connectionStarted(fallingBack:)(a1);
}

uint64_t protocol witness for CommunicationProtocol.initialPayload(withBufferedInitialLength:forceReconnect:) in conformance CommunicationProtocolAce(uint64_t *a1)
{
  return CommunicationProtocolAce.initialPayload(withBufferedInitialLength:forceReconnect:)(a1);
}

void protocol witness for CommunicationProtocol.updateBuffers(forInitialPayload:bufferedLength:forceReconnect:) in conformance CommunicationProtocolAce()
{
  CommunicationProtocolAce.updateBuffers(forInitialPayload:bufferedLength:forceReconnect:)();
}

uint64_t protocol witness for CommunicationProtocol.bufferGeneralData(data:) in conformance CommunicationProtocolAce(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferGeneralData(data:)(a1, a2);
}

void protocol witness for CommunicationProtocol.getBufferedOutputDataToWrite() in conformance CommunicationProtocolAce()
{
  CommunicationProtocolAce.getBufferedOutputDataToWrite()();
}

uint64_t protocol witness for CommunicationProtocol.bufferUncompressedData(data:) in conformance CommunicationProtocolAce(uint64_t a1, uint64_t a2)
{
  return CommunicationProtocolAce.bufferUncompressedData(data:)(a1, a2);
}

uint64_t protocol witness for CommunicationProtocol.getBufferedUncompressedDataToWrite() in conformance CommunicationProtocolAce()
{
  return CommunicationProtocolAce.getBufferedUncompressedDataToWrite()();
}

void protocol witness for CommunicationProtocol.closeConnection(prepareForReconnect:) in conformance CommunicationProtocolAce(Swift::Bool a1)
{
  CommunicationProtocolAce.closeConnection(prepareForReconnect:)(a1);
}

void protocol witness for CommunicationProtocol.setSendPings(_:) in conformance CommunicationProtocolAce(Swift::Bool a1)
{
  CommunicationProtocolAce.setSendPings(_:)(a1);
}

void protocol witness for CommunicationProtocol.checkPing() in conformance CommunicationProtocolAce()
{
  CommunicationProtocolAce.checkPing()();
}

void protocol witness for CommunicationProtocol.resumePingTimer() in conformance CommunicationProtocolAce()
{
  CommunicationProtocolAce.resumePingTimer()();
}

void protocol witness for CommunicationProtocol.bytesAvailable(_:) in conformance CommunicationProtocolAce(uint64_t a1, unint64_t a2)
{
  CommunicationProtocolAce.bytesAvailable(_:)(a1, a2);
}

BOOL protocol witness for CommunicationProtocol.hasBufferedDataOrOutstandPings() in conformance CommunicationProtocolAce()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;

  v1 = (_QWORD *)*v0;
  swift_beginAccess();
  v2 = v1[6];
  if (v2 >> 60 != 15)
    __asm { BR              X12 }
  swift_beginAccess();
  v3 = v1[10];
  if (v3 >> 60 != 15)
    __asm { BR              X12 }
  return v1[28] != 0;
}

uint64_t protocol witness for CommunicationProtocol.compressData(_:) in conformance CommunicationProtocolAce()
{
  return CommunicationProtocolAce.compressData(_:)();
}

uint64_t specialized OptionSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t specialized OptionSet<>.formUnion(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  a5(&v18, v11, v17, a4);
  result = OUTLINED_FUNCTION_197_0();
  if (!a3)
    return v18;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, __CFHTTPMessage *a4, CFIndex a5, uint64_t a6, CFIndex *a7)
{
  uint64_t v7;
  uint64_t result;
  UInt8 *v15;
  __CFHTTPMessage *v16;

  result = __DataStorage._bytes.getter();
  v15 = (UInt8 *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_10:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  __DataStorage._length.getter();
  closure #1 in CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)(v15, a4, a5, a6, a7, (CFIndex *)&v16);
  if (v7)
  {
    swift_release();

  }
  else
  {

    a4 = v16;
    swift_release();
  }
  return (uint64_t)a4;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pytSgTg5037_s10Foundation4DataV06InlineB0V15withB33BytesyxxSWKXEKlFxSWKXEfU_ytSg_TG5SWxsAC_pRi_zRi0_zlyAFIsgyrzo_SiTf1nc_n0129_s11SiriNetwork24CommunicationProtocolAceC29checkForProgressOnReadingData33_66EA1B3E09C1242C99E70AFFE1E0A77ALLAA10PingStatusVyFytS8SWXEfU0_0V7Network0xyZ0CTf1ncn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unsigned __int8 *__return_ptr, uint64_t *, char *, uint64_t))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = BYTE2(a2);
  v10 = BYTE3(a2);
  v11 = BYTE4(a2);
  v12 = BYTE5(a2);
  a5(&v13, &v7, (char *)&v7 + a3, a4);
  result = OUTLINED_FUNCTION_197_0();
  if (!v5)
    return v13;
  return result;
}

CFHTTPMessageRef _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSi_SitTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_Si_Sit_TG5SWxsAC_pRi_zRi0_zlySi_SitIsgyrzo_SiTf1nc_n0117_s11SiriNetwork24CommunicationProtocolAceC19parseHttpHeaderData33_66EA1B3E09C1242C99E70AFFE1E0A77ALL_14partialMessager49_Sit10Foundation0I0Vz_So16CFHTTPMessageRefatKFSi_sQ2U_So16CFHTTPMessageRefaS2iz_XxSiTf1ncn_n(uint64_t a1, uint64_t a2, int a3, CFHTTPMessageRef message, CFIndex numBytes, uint64_t a6, CFIndex *a7)
{
  uint64_t v7;
  CFHTTPMessageRef v8;
  __CFHTTPMessage *v10;
  uint64_t newBytes;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v8 = message;
  v17 = *MEMORY[0x24BDAC8D0];
  newBytes = a1;
  v12 = a2;
  v13 = BYTE2(a2);
  v14 = BYTE3(a2);
  v15 = BYTE4(a2);
  v16 = BYTE5(a2);
  closure #1 in CommunicationProtocolAce.parseHttpHeaderData(_:partialMessage:)((UInt8 *)&newBytes, message, numBytes, a6, a7, (CFIndex *)&v10);
  if (v7)
  {
    swift_release();

  }
  else
  {

    v8 = v10;
    swift_release();
  }
  return v8;
}

#error "246F1F19C: call analysis failed (funcsize=40)"

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  _QWORD *v0;
  _QWORD *v1;
  unsigned int v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_55_2();
  v1 = v0;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  swift_isUniquelyReferenced_nonNull_native();
  v17 = *v0;
  *v0 = 0x8000000000000000;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, Double>);
  OUTLINED_FUNCTION_43_2(v6, v7, v8, v9, v10, v11, v12, v13, v16, v17);
  v14 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v5);
  OUTLINED_FUNCTION_141_0();
  _NativeDictionary._delete(at:)();
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(unsigned int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, (_:)>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  _NativeDictionary._delete(at:)();
  *v2 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

#error "246F1F3E4: call analysis failed (funcsize=41)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  char v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_81_2();
  v3 = (_OWORD *)OUTLINED_FUNCTION_79_1();
  v5 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, a2, v4);
  OUTLINED_FUNCTION_35_1((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  return OUTLINED_FUNCTION_70_1();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(unsigned int a1, double a2)
{
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_115_0();
  v5 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, a2);
  OUTLINED_FUNCTION_35_1(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  return swift_bridgeObjectRelease();
}

#error "246F1F514: call analysis failed (funcsize=20)"

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *v3 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, char a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_81_2();
  v3 = OUTLINED_FUNCTION_79_1();
  v5 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, a2, v4);
  OUTLINED_FUNCTION_35_1(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  return OUTLINED_FUNCTION_70_1();
}

#error "246F1F5F8: call analysis failed (funcsize=11)"

#error "246F1F624: call analysis failed (funcsize=11)"

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  Swift::Int *v0;
  Swift::Int *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t *v23;

  OUTLINED_FUNCTION_19();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = *v0;
  specialized __RawDictionaryStorage.find<A>(_:)(v6, v4);
  OUTLINED_FUNCTION_160();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v13;
  v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
    goto LABEL_5;
  v18 = OUTLINED_FUNCTION_166_0();
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
  if ((v17 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v16 = v20;
LABEL_5:
  v22 = (_QWORD *)*v1;
  if ((v17 & 1) != 0)
  {
    v23 = (uint64_t *)(v22[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *v23 = v11;
    v23[1] = v9;
    OUTLINED_FUNCTION_1_1();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, v7, v5, v11, v9, v22);
    swift_bridgeObjectRetain();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = (_OWORD *)(v18[7] + 32 * v14);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
    return outlined init with take of Any(a1, v19);
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v21);
    return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v21, a1, v18);
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::Int *v4;
  Swift::Int *v5;
  Swift::Int v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = v4;
  v10 = *v4;
  specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  OUTLINED_FUNCTION_160();
  if (v13)
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v11;
  v15 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SNConnectionTCPInfoMetrics>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v14 = v16;
LABEL_5:
  v18 = (_QWORD *)*v5;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];

    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a1, v18);
    swift_bridgeObjectRetain();
  }
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(unsigned int a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  _QWORD *v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, Double>);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a2 & 1, v13);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = result;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a1, v18, a3);
  *(double *)(v18[7] + 8 * v14) = a3;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  Swift::Int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v13;
  v19 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17))
    goto LABEL_5;
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v18 = v20;
LABEL_5:
  v22 = *v6;
  if ((v19 & 1) != 0)
  {
    v23 = v22[7] + 16 * v18;
    result = outlined consume of Data._Representation(*(_QWORD *)v23, *(_QWORD *)(v23 + 8));
    *(_QWORD *)v23 = a1;
    *(_QWORD *)(v23 + 8) = a2;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v18, a3, a4, a1, a2, v22);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  unint64_t result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt32, (_:)>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v16, a3, a1, a2, v20);
  v21 = (uint64_t *)(v20[7] + 16 * v16);
  result = swift_release();
  *v21 = a1;
  v21[1] = a2;
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<NetworkActivityLabel, NetworkActivity<NWConnection, NWActivity>>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
  v19 = v18[7];
  result = swift_release();
  *(_QWORD *)(v19 + 8 * v14) = a1;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  _QWORD *v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, UInt64>);
  result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15);
  if ((result & 1) == 0)
    goto LABEL_5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = result;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(v20[7] + 8 * v16) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (_OWORD *)(v20[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
    return outlined init with take of Any(a1, v21);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a3[6] + 4 * result) = a2;
  *(double *)(a3[7] + 8 * result) = a4;
  v4 = a3[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a3[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t lazy protocol witness table accessor for type BackgroundConnectionError and conformance BackgroundConnectionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError;
  if (!lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for BackgroundConnectionError, &type metadata for BackgroundConnectionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError;
  if (!lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for BackgroundConnectionError, &type metadata for BackgroundConnectionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundConnectionError and conformance BackgroundConnectionError);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc NETSchemaNETSessionConnectionHttpHeaderCreated.userAgent.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x24956D034]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setUserAgent_, v4);

}

uint64_t outlined bridged method (ob) of @objc AFPreferences.configOverrides()(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_configOverrides);

  if (!v2)
    return 0;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc AceObject.encodedClassName()(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_encodedClassName);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined assign with copy of DataDecompressing?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DataDecompressing?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_246F20388()
{
  return swift_deallocObject();
}

uint64_t outlined consume of BackgroundConnectionError(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (!a5)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

void outlined init with take of SessionObject?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  OUTLINED_FUNCTION_171(a1, a2, a3);
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_230(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32));
  OUTLINED_FUNCTION_3();
}

uint64_t sub_246F203F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void type metadata accessor for AceObject(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    objc_opt_self();
    atomic_store(swift_getObjCClassMetadata(), a2);
  }
  OUTLINED_FUNCTION_3();
}

uint64_t sub_246F2046C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_246F20490()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)()
{
  uint64_t v0;

  return closure #1 in CommunicationProtocolAce.scheduleAceHeaderTimeout(withInterval:)(*(objc_class **)(v0 + 16), *(double *)(v0 + 32));
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

void outlined init with copy of DataCompressing(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_3();
}

uint64_t partial apply for closure #1 in CommunicationProtocolAce.resumePingTimer()()
{
  return closure #1 in CommunicationProtocolAce.resumePingTimer()();
}

void outlined init with copy of DataCompressing?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  OUTLINED_FUNCTION_171(a1, a2, a3);
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_230(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_3();
}

void outlined assign with take of DataCompressing?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  OUTLINED_FUNCTION_171(a1, a2, a3);
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_230(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40));
  OUTLINED_FUNCTION_3();
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2())
    return a1;
  else
    return 0;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_11_10()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_14_6(CFStringRef value)
{
  const __CFString *v1;
  __CFHTTPMessage *v2;

  CFHTTPMessageSetHeaderFieldValue(v2, v1, value);
}

BOOL OUTLINED_FUNCTION_15_9(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_22_7()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_24_7()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_26_5()
{
  JUMPOUT(0x24956D034);
}

uint64_t OUTLINED_FUNCTION_28_3()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_29_3()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_35_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

void OUTLINED_FUNCTION_36_2()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_37_3()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_38_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 8u);
}

void OUTLINED_FUNCTION_40_3(__CFHTTPMessage *a1, const __CFString *a2)
{
  const __CFString *v2;

  CFHTTPMessageSetHeaderFieldValue(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_42_4()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

BOOL OUTLINED_FUNCTION_43_2(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::Bool v10;
  Swift::Int v11;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t OUTLINED_FUNCTION_44_3(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data._Representation(a1, v1);
}

void OUTLINED_FUNCTION_46_3()
{
  JUMPOUT(0x24956D034);
}

uint64_t OUTLINED_FUNCTION_52_1()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_53_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_56_1(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 4;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  unint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  return outlined copy of AceSerializationError(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_58_2()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  unint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  return outlined copy of AceSerializationError(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_61_2@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v3;

  v2 = &v1[a1];
  if (v1)
    v3 = (uint64_t)v2;
  else
    v3 = 0;
  return closure #1 in static AceSerialization.parsePacket(data:)(v1, v3);
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_66_0(uint64_t a1)
{
  unint64_t v1;

  return outlined copy of Data._Representation(a1, v1);
}

uint64_t OUTLINED_FUNCTION_70_1()
{
  return swift_bridgeObjectRelease();
}

double OUTLINED_FUNCTION_71_2()
{
  return 0.0;
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  unint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  outlined consume of AceSerializationError(v1, v0, v2);
  return outlined consume of AceSerializationError(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_73_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_75_2()
{
  unint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  outlined consume of AceSerializationError(v1, v0, v2);
  return outlined consume of AceSerializationError(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_79_1()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_81_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  return 0;
}

void OUTLINED_FUNCTION_83_2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)va, a2);
}

uint64_t OUTLINED_FUNCTION_84_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_86_2()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_87_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v8, v6, v5, a5);
}

uint64_t OUTLINED_FUNCTION_88_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v7, v6, v8, v5, a5);
}

void OUTLINED_FUNCTION_89_2()
{
  JUMPOUT(0x24956D034);
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  return swift_endAccess();
}

_WORD *OUTLINED_FUNCTION_92_2(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_93_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

CFHTTPMessageRef OUTLINED_FUNCTION_94_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, CFIndex *a7)
{
  uint64_t v7;
  __CFHTTPMessage *v8;
  CFIndex v9;

  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_pSi_SitTg5037_s10Foundation4DataV06InlineB0V15withB35BytesyxxSWKXEKlFxSWKXEfU_Si_Sit_TG5SWxsAC_pRi_zRi0_zlySi_SitIsgyrzo_SiTf1nc_n0117_s11SiriNetwork24CommunicationProtocolAceC19parseHttpHeaderData33_66EA1B3E09C1242C99E70AFFE1E0A77ALL_14partialMessager49_Sit10Foundation0I0Vz_So16CFHTTPMessageRefatKFSi_sQ2U_So16CFHTTPMessageRefaS2iz_XxSiTf1ncn_n(a1, a2, a3, v8, v9, v7, a7);
}

void OUTLINED_FUNCTION_95_0()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_96_1()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_97_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(v0, v1);
}

_WORD *OUTLINED_FUNCTION_102_1(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

id OUTLINED_FUNCTION_104_1()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_105_0()
{
  return swift_willThrow();
}

void OUTLINED_FUNCTION_106_0(CFStringRef headerField)
{
  const __CFString *v1;
  __CFHTTPMessage *v2;

  CFHTTPMessageSetHeaderFieldValue(v2, headerField, v1);
}

uint64_t OUTLINED_FUNCTION_107_0()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return swift_beginAccess();
}

char *OUTLINED_FUNCTION_110_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return &a17;
}

uint64_t OUTLINED_FUNCTION_111_0()
{
  unint64_t v0;
  uint64_t *v1;

  return outlined copy of Data._Representation(*v1, v0);
}

void OUTLINED_FUNCTION_112_0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)va, a2);
}

void OUTLINED_FUNCTION_113(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of RPCOspreyConnectionProtocol?(v2 - 152, a2);
}

void OUTLINED_FUNCTION_114_0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of DataCompressing?(v1, v2 - 152, v0);
}

void OUTLINED_FUNCTION_115_0()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_117_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_119_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

BOOL OUTLINED_FUNCTION_122_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

_OWORD *OUTLINED_FUNCTION_123_0()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;

  return outlined init with take of Any((_OWORD *)(*(_QWORD *)(v0 + 56) + 32 * v2), v1);
}

uint64_t OUTLINED_FUNCTION_125_0(uint64_t a1, uint64_t a2, uint64_t a3, __CFHTTPMessage *a4, uint64_t a5, uint64_t a6, CFIndex *a7)
{
  uint64_t v7;
  CFIndex v8;

  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, a3, a4, v8, v7, a7);
}

uint64_t OUTLINED_FUNCTION_126_0()
{
  uint64_t v0;

  return v0;
}

float *OUTLINED_FUNCTION_128_0(float *result, float a2)
{
  *result = a2;
  return result;
}

void OUTLINED_FUNCTION_129_0()
{
  JUMPOUT(0x24956D034);
}

uint64_t OUTLINED_FUNCTION_130_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_133_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_136_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_137_0()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of RPCOspreyConnectionProtocol?(v1 - 152, v0);
}

uint64_t OUTLINED_FUNCTION_138_0()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_140_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_144_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_145()
{
  uint64_t v0;

  return v0 - 152;
}

void OUTLINED_FUNCTION_147()
{
  CommunicationProtocolAce.aceDelegate.getter();
}

uint64_t OUTLINED_FUNCTION_149_0(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data._Representation(a1, v1);
}

uint64_t OUTLINED_FUNCTION_150_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_151_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_152(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v1 = va_arg(va1, _QWORD);
  v3 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  outlined init with copy of DataCompressing((uint64_t)va1, (uint64_t)va);
}

void OUTLINED_FUNCTION_153_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  outlined init with copy of DataCompressing(v6 - 152, (uint64_t)va);
}

void OUTLINED_FUNCTION_154_0()
{
  JUMPOUT(0x24956D034);
}

uint64_t OUTLINED_FUNCTION_157_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_158_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_159_0()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_162()
{
  JUMPOUT(0x24956D034);
}

uint64_t OUTLINED_FUNCTION_163_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_164_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_166_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_167_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

void OUTLINED_FUNCTION_169_0(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of RPCOspreyConnectionProtocol?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_171_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_173_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_174_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_175_0()
{
  return Data.append(_:)();
}

uint64_t OUTLINED_FUNCTION_178_0()
{
  return Data.count.getter();
}

void OUTLINED_FUNCTION_179()
{
  JUMPOUT(0x24956D034);
}

uint64_t OUTLINED_FUNCTION_180_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_183_0()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t OUTLINED_FUNCTION_184_0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_187_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_188_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_189_0()
{
  return Data.count.getter();
}

uint64_t OUTLINED_FUNCTION_192_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_194_0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  outlined init with copy of DataCompressing?(v12, (uint64_t)va, a3);
}

void OUTLINED_FUNCTION_195_0(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for AceObject(0, a2);
}

uint64_t OUTLINED_FUNCTION_196_0()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t OUTLINED_FUNCTION_197_0()
{
  return swift_release();
}

BOOL OUTLINED_FUNCTION_198_0()
{
  return BackgroundConnection.isUsingPeer()();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.cancelConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of CommunicationProtocolDelegateAce.didReceiveAceObject(aceObject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionQualityReport(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFD && a1[4])
    {
      v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 4;
      v2 = v3 - 4;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionQualityReport(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionQualityReport()
{
  return &type metadata for ConnectionQualityReport;
}

void ConnectionQualityReport.symptomsBasedNetworkQuality.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_246F20EE8()
{
  __int16 v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_12();
  OUTLINED_FUNCTION_8_11();
  OUTLINED_FUNCTION_5_17();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v1 = OUTLINED_FUNCTION_7_15();
  return ((uint64_t (*)(uint64_t))((char *)sub_246F20F50 + 4 * byte_246F74354[HIBYTE(v0)]))(v1);
}

uint64_t sub_246F20F50()
{
  int v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_12();
  OUTLINED_FUNCTION_8_11();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v1 = OUTLINED_FUNCTION_7_15();
  return ((uint64_t (*)(uint64_t))((char *)sub_246F20FD0 + 4 * byte_246F74358[BYTE2(v0)]))(v1);
}

uint64_t sub_246F20FD0()
{
  unsigned int v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_12();
  OUTLINED_FUNCTION_8_11();
  OUTLINED_FUNCTION_5_17();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  v1 = OUTLINED_FUNCTION_7_15();
  return ((uint64_t (*)(uint64_t))((char *)sub_246F2102C + 4 * byte_246F7435C[HIBYTE(v0)]))(v1);
}

uint64_t sub_246F2102C()
{
  uint64_t v0;

  OUTLINED_FUNCTION_8_11();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
  swift_bridgeObjectRelease();
  return v0;
}

SiriNetwork::ConnectionQuality_optional __swiftcall ConnectionQuality.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConnectionQuality.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return (SiriNetwork::ConnectionQuality_optional)4;
  else
    return (SiriNetwork::ConnectionQuality_optional)v3;
}

uint64_t ConnectionQuality.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_246F21128 + 4 * byte_246F74360[a1]))(1685024615, 0xE400000000000000);
}

uint64_t sub_246F21128()
{
  return 6578530;
}

uint64_t sub_246F21138()
{
  return OUTLINED_FUNCTION_3_16();
}

uint64_t sub_246F21154()
{
  return OUTLINED_FUNCTION_1_4();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ConnectionQuality(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ConnectionQuality()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ConnectionQuality(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionQuality()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriNetwork::ConnectionQuality_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionQuality@<W0>(Swift::String *a1@<X0>, SiriNetwork::ConnectionQuality_optional *a2@<X8>)
{
  SiriNetwork::ConnectionQuality_optional result;

  result.value = ConnectionQuality.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionQuality@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ConnectionQuality.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void ConnectionQualityReport.debugDescription.getter(char a1)
{
  OUTLINED_FUNCTION_6_11();
  _StringGuts.grow(_:)(22);
  OUTLINED_FUNCTION_10_9();
  __asm { BR              X10 }
}

uint64_t sub_246F21264()
{
  __int16 v0;
  Swift::String v1;

  v1._countAndFlagsBits = 6578530;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  OUTLINED_FUNCTION_10_9();
  return ((uint64_t (*)(uint64_t))((char *)sub_246F21304 + 4 * byte_246F74368[HIBYTE(v0)]))(1685024615);
}

uint64_t sub_246F21304()
{
  int v0;
  Swift::String v1;

  v1._countAndFlagsBits = 6578530;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_11();
  _StringGuts.grow(_:)(25);
  OUTLINED_FUNCTION_10_9();
  return ((uint64_t (*)(uint64_t))((char *)sub_246F2139C + 4 * byte_246F7436C[BYTE2(v0)]))(1685024615);
}

uint64_t sub_246F2139C()
{
  unsigned int v0;
  Swift::String v1;
  uint64_t v2;

  v1._countAndFlagsBits = 6578530;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_11();
  _StringGuts.grow(_:)(29);
  v2 = OUTLINED_FUNCTION_10_9();
  return ((uint64_t (*)(uint64_t))((char *)sub_246F21428 + 4 * byte_246F74370[HIBYTE(v0)]))(v2);
}

uint64_t sub_246F21428(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Swift::String a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v36;
  Swift::String v37;

  v29._countAndFlagsBits = 6578530;
  v29._object = (void *)0xE300000000000000;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_11();
  _StringGuts.grow(_:)(58);
  v30._countAndFlagsBits = v28 + 23;
  v30._object = (void *)0x8000000246F781C0;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v36;
  v31._object = v23;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_16();
  v32._countAndFlagsBits = v26;
  v32._object = v25;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_16();
  v33._countAndFlagsBits = v27;
  v33._object = v24;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_16();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 93;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  return v37._countAndFlagsBits;
}

void protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionQualityReport()
{
  _DWORD *v0;

  ConnectionQualityReport.debugDescription.getter(*v0);
}

uint64_t storeEnumTagSinglePayload for ConnectionQuality(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_246F21594 + 4 * byte_246F74379[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_246F215C8 + 4 * byte_246F74374[v4]))();
}

uint64_t sub_246F215C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F215D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246F215D8);
  return result;
}

uint64_t sub_246F215E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246F215ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_246F215F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F215F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionQuality()
{
  return &type metadata for ConnectionQuality;
}

unint64_t lazy protocol witness table accessor for type ConnectionQuality and conformance ConnectionQuality()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionQuality and conformance ConnectionQuality;
  if (!lazy protocol witness table cache variable for type ConnectionQuality and conformance ConnectionQuality)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionQuality, &type metadata for ConnectionQuality);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionQuality and conformance ConnectionQuality);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_16()
{
  return 0x616C696176616E75;
}

uint64_t OUTLINED_FUNCTION_5_17()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_7_15()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_11()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_10_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t ConnectionType.init(fromInterface:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  Swift::String v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  char countAndFlagsBits;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  Swift::String v17;

  v2 = type metadata accessor for NWInterface.InterfaceType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  NWInterface.type.getter();
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x24BDE00B0])
  {
LABEL_2:
    NWInterface.name.getter();
    v7 = String.lowercased()();
    swift_bridgeObjectRelease();
    v17 = v7;
    v16[0] = 0x6365737069;
    v16[1] = 0xE500000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v8 = StringProtocol.contains<A>(_:)();
    v9 = OUTLINED_FUNCTION_1_25();
    OUTLINED_FUNCTION_0_30(v9);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      countAndFlagsBits = 24;
    else
      countAndFlagsBits = 0;
    goto LABEL_15;
  }
  if (v6 == *MEMORY[0x24BDE00A8])
  {
    v12 = OUTLINED_FUNCTION_1_25();
    result = OUTLINED_FUNCTION_0_30(v12);
    countAndFlagsBits = 1;
    goto LABEL_15;
  }
  if (v6 != *MEMORY[0x24BDE00B8])
  {
    if (v6 == *MEMORY[0x24BDE00A0])
    {
      v14 = OUTLINED_FUNCTION_1_25();
      result = OUTLINED_FUNCTION_0_30(v14);
      countAndFlagsBits = 23;
      goto LABEL_15;
    }
    if (v6 != *MEMORY[0x24BDE00C0])
    {
      v15 = OUTLINED_FUNCTION_1_25();
      OUTLINED_FUNCTION_0_30(v15);
      result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      countAndFlagsBits = 0;
      goto LABEL_15;
    }
    goto LABEL_2;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  NetworkManager.connectionTechnologyForCellularInterface()();
  v13 = OUTLINED_FUNCTION_1_25();
  result = OUTLINED_FUNCTION_0_30(v13);
  countAndFlagsBits = v17._countAndFlagsBits;
LABEL_15:
  *a1 = countAndFlagsBits;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_30(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_1_25()
{
  return type metadata accessor for NWInterface();
}

void NetworkWiFiManager.queueGroup.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup);
  *(_QWORD *)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup) = a1;

}

id one-time initialization function for shared()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NetworkWiFiManager()), sel_init);
  static NetworkWiFiManager.shared = (uint64_t)result;
  return result;
}

{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NetworkActivityTracing()), sel_init);
  static NetworkActivityTracing.shared = (uint64_t)result;
  return result;
}

id static NetworkWiFiManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static NetworkWiFiManager.shared;
}

id NetworkWiFiManager.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;
  uint64_t v17;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v13 = *(_QWORD *)(v1 - 8);
  v14 = v1;
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_1_0();
  v4 = v3 - v2;
  type metadata accessor for OS_dispatch_queue.Attributes();
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_1_0();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_1_0();
  v15 = OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiManager;
  *(_QWORD *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiDevice] = 0;
  *(_DWORD *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiClientType] = 0;
  v7 = OBJC_IVAR___SNNetworkWiFiManagerInternal_interface;
  *(_QWORD *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_queueGroup] = 0;
  type metadata accessor for OS_dispatch_queue();
  v8 = v0;
  static DispatchQoS.unspecified.getter();
  v17 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v4, *MEMORY[0x24BEE5750], v14);
  *(_QWORD *)&v8[OBJC_IVAR___SNNetworkWiFiManagerInternal_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE29F18]), sel_initWithServiceType_, 3);
  v10 = *(void **)&v0[v7];
  *(_QWORD *)&v0[v7] = v9;

  v11 = *(void **)&v0[v7];
  if (v11)
    objc_msgSend(v11, sel_resume);
  *(_QWORD *)&v0[v15] = WiFiManagerClientCreate();

  v16.receiver = v8;
  v16.super_class = (Class)type metadata accessor for NetworkWiFiManager();
  return objc_msgSendSuper2(&v16, sel_init);
}

id NetworkWiFiManager.__deallocating_deinit()
{
  char *v0;
  void *v1;
  objc_super v3;

  v1 = *(void **)&v0[OBJC_IVAR___SNNetworkWiFiManagerInternal_interface];
  if (v1)
    objc_msgSend(v1, sel_invalidate);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for NetworkWiFiManager();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for NetworkWiFiManager()
{
  return objc_opt_self();
}

void NetworkWiFiManager.currentNetwork()()
{
  os_log_type_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = WiFiManagerClientCopyDevices();
  if (v1)
  {
    v2 = (void *)v1;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_5_1();
  v4 = OUTLINED_FUNCTION_3_1(v3, (uint64_t)static Logger.siriNetwork);
  v5 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_9_13(v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_WORD *)v6 = 0;
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v4, v0, "NetworkWiFiManager - CurrentNetwork: Not available device to get WiFiRecord", v6);
    OUTLINED_FUNCTION_0_4();
  }

}

id NetworkWiFiManager.getWiFiRecordRepresentation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_1_0();
  v3 = v2 - v1;
  v4 = type metadata accessor for WiFiRecord(0);
  OUTLINED_FUNCTION_19_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_1_0();
  v8 = v7 - v6;
  NetworkWiFiManager.getWiFiRecord()(v3);
  if (__swift_getEnumTagSinglePayload(v3, 1, v4) == 1)
  {
    outlined destroy of WiFiRecord?(v3);
    return 0;
  }
  else
  {
    outlined init with take of WiFiRecord(v3, v8);
    type metadata accessor for WiFiRecordRepresentation(0);
    v9 = static WiFiRecordRepresentation.wiFiRecordRepresentation(from:)(v8);
    outlined destroy of WiFiRecord(v8);
  }
  return v9;
}

uint64_t NetworkWiFiManager.getWiFiRecord()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t result;
  uint64_t v59;
  id v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[3];

  v4 = type metadata accessor for WiFiRecord(0);
  OUTLINED_FUNCTION_19_3();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v59 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  OUTLINED_FUNCTION_19_3();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v64 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v67 = (uint64_t)&v59 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v59 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v59 - v19;
  OUTLINED_FUNCTION_30_1((uint64_t)&v59 - v19, 1);
  NetworkWiFiManager.currentNetwork()();
  v63 = v8;
  if (!v21)
  {
    v22 = 0;
    v65 = 0;
    v66 = 0;
    v26 = 0xE700000000000000;
    v24 = 0x6E776F6E6B6E75;
LABEL_6:
    v27 = *(void **)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_interface);
    if (v27)
    {
      v61 = v10;
      v28 = v27;
      v29 = outlined bridged method (pb) of @objc CWFInterface.ssid()(v28);
      v1 = v30;
      outlined consume of Data?(v29, v30);
      if (v1 >> 60 != 15)
      {
        v62 = a1;
        v60 = objc_msgSend(v28, sel_RSSI);
        v35 = objc_msgSend(v28, sel_CCA);
        v36 = static WiFiPhyModeApple80211.wifiPhyMode(_:)((int)objc_msgSend(v28, sel_PHYMode));
        v38 = v37;
        if (v35)
          v39 = (uint64_t)v35;
        else
          v39 = v22;
        v59 = v39;
        CWFInterface.channelInfo.getter();
        v41 = v40;
        v43 = v42;
        v44 = v36 == 0x6E776F6E6B6E75 && v38 == 0xE700000000000000;
        if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          OUTLINED_FUNCTION_10_2();
          v24 = v36;
          v26 = v38;
        }
        v45 = v62;
        Date.init()();
        v46 = v66;
        *(_QWORD *)v18 = v60;
        *((_QWORD *)v18 + 1) = v46;
        *((_QWORD *)v18 + 2) = v59;
        *((_QWORD *)v18 + 3) = v41;
        *((_QWORD *)v18 + 4) = v43;
        *((_QWORD *)v18 + 5) = v24;
        *((_QWORD *)v18 + 6) = v26;
        v18[56] = v65;
        OUTLINED_FUNCTION_30_1((uint64_t)v18, 0);
        outlined assign with take of WiFiRecord?((uint64_t)v18, (uint64_t)v20);
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v47 = OUTLINED_FUNCTION_5_1();
        v48 = OUTLINED_FUNCTION_3_1(v47, (uint64_t)static Logger.siriNetwork);
        v49 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)OUTLINED_FUNCTION_2_2();
          v69[0] = OUTLINED_FUNCTION_2_2();
          *(_DWORD *)v50 = 136315138;
          OUTLINED_FUNCTION_11_12();
          v51 = v67;
          outlined init with copy of WiFiRecord?((uint64_t)v20, v67);
          v52 = v51;
          v53 = v64;
          outlined init with copy of WiFiRecord?(v52, v64);
          if (__swift_getEnumTagSinglePayload(v53, 1, v4) == 1)
          {
            v54 = 0xEB00000000656C62;
            v55 = 0x616C696176616E75;
          }
          else
          {
            v56 = (uint64_t)v61;
            outlined init with take of WiFiRecord(v53, (uint64_t)v61);
            outlined init with copy of WiFiRecord(v56, (uint64_t)v63);
            v55 = String.init<A>(describing:)();
            v54 = v57;
            outlined destroy of WiFiRecord(v56);
          }
          outlined destroy of WiFiRecord?(v67);
          v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v54, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_246EC7000, v48, v49, "NetworkWiFiManager - WiFiRecord: %s", v50, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0_4();
        }

        OUTLINED_FUNCTION_11_12();
        outlined init with copy of WiFiRecord?((uint64_t)v20, v45);
        return outlined destroy of WiFiRecord?((uint64_t)v20);
      }

    }
    OUTLINED_FUNCTION_10_2();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v31 = OUTLINED_FUNCTION_5_1();
    v32 = OUTLINED_FUNCTION_3_1(v31, (uint64_t)static Logger.siriNetwork);
    v33 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_9_13(v33))
    {
      v34 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v34 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v32, (os_log_type_t)v1, "NetworkWiFiManager - WiFiRecord: Not available device to get WiFiRecord", v34);
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_30_1(a1, 1);
    return outlined destroy of WiFiRecord?((uint64_t)v20);
  }
  MEMORY[0x24956D034](5394003, 0xE300000000000000);
  v66 = OUTLINED_FUNCTION_5_18();

  v65 = WiFiNetworkIsCaptive() != 0;
  MEMORY[0x24956D034](4277059, 0xE300000000000000);
  v22 = OUTLINED_FUNCTION_5_18();

  MEMORY[0x24956D034](0x45444F4D5F594850, 0xE800000000000000);
  v23 = OUTLINED_FUNCTION_5_18();

  if ((v23 & 0x8000000000000000) == 0 && !HIDWORD(v23))
  {
    v24 = static WiFiPhyModeApple80211.wifiPhyMode(_:)(v23);
    v26 = v25;
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_0_0();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of WiFiRecord?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of WiFiRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WiFiRecord(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Bool __swiftcall NetworkWiFiManager.isWiFiEnabled()()
{
  NSObject *v0;
  os_log_type_t v1;
  void *v2;
  id v3;
  unsigned __int8 v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = *(Class *)((char *)&v0->isa + OBJC_IVAR___SNNetworkWiFiManagerInternal_interface);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v3, sel_powerOn);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v5, (uint64_t)static Logger.siriNetwork);
  v6 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_7_0(v6))
  {
    v7 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_246EC7000, v0, v1, "NetworkWiFiManager - WiFiEnabled: %{BOOL}d", v7, 8u);
    OUTLINED_FUNCTION_0_4();
  }

  return v4;
}

uint64_t NetworkWiFiManager.setWiFiManagerClientType(_:)(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiClientType) != (_DWORD)result)
  {
    *(_DWORD *)(v1 + OBJC_IVAR___SNNetworkWiFiManagerInternal_wifiClientType) = result;
    return WiFiManagerClientSetType();
  }
  return result;
}

Swift::Void __swiftcall NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)(Swift::Int wifiAssertionTypeRawValue)
{
  char v1;
  char v2;

  v1 = wifiAssertionTypeRawValue == 2;
  if (wifiAssertionTypeRawValue == 3)
    v1 = 2;
  v2 = v1;
  NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)((SiriNetwork::WiFiAssertionType)&v2);
}

Swift::Void __swiftcall NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)(SiriNetwork::WiFiAssertionType wifiAssertionType)
{
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(char *)wifiAssertionType;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v4, (uint64_t)static Logger.siriNetwork);
  v5 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_7_0(v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v9 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v6 = 136315138;
    v7 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v1, v2, "NetworkWiFiManager - Assertion: acquireWiFiAssertion: %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_4();
  }

  NetworkWiFiManager.setWiFiManagerClientType(_:)(dword_246F744CC[v3]);
}

Swift::Void __swiftcall NetworkWiFiManager.releaseWiFiAssertion()()
{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v1, (uint64_t)static Logger.siriNetwork);
  v2 = OUTLINED_FUNCTION_35_0();
  if (os_log_type_enabled(v0, v2))
  {
    v3 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_WORD *)v3 = 0;
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v0, v2, "NetworkWiFiManager - Assertion: releaseWiFiAssertion", v3);
    OUTLINED_FUNCTION_0_4();
  }

  NetworkWiFiManager.setWiFiManagerClientType(_:)(0);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_13_9(a1);
  *a2 = result;
  return result;
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return OUTLINED_FUNCTION_13_9(a1) & 1;
}

{
  return OUTLINED_FUNCTION_13_9(a1);
}

uint64_t outlined bridged method (pb) of @objc CWFInterface.ssid()(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_SSID);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined assign with take of WiFiRecord?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of WiFiRecord?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WiFiRecord?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of WiFiRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for NetworkWiFiManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkWiFiManager.getWiFiRecordRepresentation()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of NetworkWiFiManager.getWiFiRecord()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of NetworkWiFiManager.isWiFiEnabled()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionTypeRawValue:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of NetworkWiFiManager.acquireWiFiAssertion(wifiAssertionType:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of NetworkWiFiManager.releaseWiFiAssertion()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t OUTLINED_FUNCTION_5_18()
{
  return WiFiNetworkGetIntProperty();
}

BOOL OUTLINED_FUNCTION_9_13(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_13_9(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t ConnectionNetworkReport.init(ospreyConnectionMetrics:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t result;
  _BYTE v28[7];
  int v29;
  __int16 v30;
  _BYTE v31[7];
  _BYTE v32[7];
  char v33;
  _BYTE v34[7];
  char v35;
  _BYTE v36[7];
  _BYTE v37[7];
  char v38;
  _BYTE v39[7];
  char v40;
  _BYTE v41[7];
  char v42;
  __int16 v43;
  char v44;
  __int16 v45;
  char v46;
  _BYTE v47[7];
  __int16 v48;
  char v49;

  v42 = 1;
  v40 = 1;
  v38 = 1;
  v35 = 1;
  v33 = 1;
  v4 = objc_msgSend(a1, sel_fetchStartToFirstByteTime);
  v6 = v5;
  OUTLINED_FUNCTION_44_0((uint64_t)v4, sel_fetchStartToDomainLookupStartTime);
  v8 = Double.milliseconds.getter(v7);
  if (v8 < 1)
  {
    v10 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_44_0(v8, sel_fetchStartToDomainLookupStartTime);
    v8 = Double.milliseconds.getter(v9);
    if (v8 < 0)
      goto LABEL_22;
    v10 = v8;
    v40 = 0;
  }
  OUTLINED_FUNCTION_44_0(v8, sel_dnsResolutionTime);
  v12 = Double.milliseconds.getter(v11);
  if (v12 < 1)
  {
    v14 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_44_0(v12, sel_dnsResolutionTime);
    v12 = Double.milliseconds.getter(v13);
    if (v12 < 0)
      goto LABEL_22;
    v14 = v12;
    v42 = 0;
  }
  OUTLINED_FUNCTION_44_0(v12, sel_tcpConnectTime);
  v16 = Double.milliseconds.getter(v15);
  if (v16 < 1)
  {
    v18 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_44_0(v16, sel_tcpConnectTime);
    v16 = Double.milliseconds.getter(v17);
    if (v16 < 0)
      goto LABEL_22;
    v18 = v16;
    v35 = 0;
  }
  OUTLINED_FUNCTION_44_0(v16, sel_connectionEstablishmentTime);
  v20 = Double.milliseconds.getter(v19);
  if (v20 < 1)
  {
    v22 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_44_0(v20, sel_connectionEstablishmentTime);
    v20 = Double.milliseconds.getter(v21);
    if (v20 < 0)
      goto LABEL_22;
    v22 = v20;
    v38 = 0;
  }
  OUTLINED_FUNCTION_44_0(v20, sel_secureConnectionTime);
  v24 = Double.milliseconds.getter(v23);
  if (v24 < 1)
  {

    result = 0;
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_44_0(v24, sel_secureConnectionTime);
  v26 = v25;

  result = Double.milliseconds.getter(v26);
  if ((result & 0x8000000000000000) == 0)
  {
    v33 = 0;
LABEL_21:
    *(_WORD *)(a2 + 5) = v48;
    *(_BYTE *)(a2 + 7) = v49;
    *(_DWORD *)(a2 + 33) = *(_DWORD *)v47;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)&v47[3];
    *(_WORD *)(a2 + 93) = v45;
    *(_BYTE *)(a2 + 95) = v46;
    *(_BYTE *)(a2 + 103) = v44;
    *(_WORD *)(a2 + 101) = v43;
    *(_DWORD *)(a2 + 137) = *(_DWORD *)v41;
    *(_DWORD *)(a2 + 140) = *(_DWORD *)&v41[3];
    *(_DWORD *)(a2 + 153) = *(_DWORD *)v39;
    *(_DWORD *)(a2 + 156) = *(_DWORD *)&v39[3];
    *(_DWORD *)(a2 + 172) = *(_DWORD *)&v37[3];
    *(_DWORD *)(a2 + 169) = *(_DWORD *)v37;
    *(_DWORD *)(a2 + 188) = *(_DWORD *)&v36[3];
    *(_DWORD *)(a2 + 185) = *(_DWORD *)v36;
    *(_DWORD *)(a2 + 204) = *(_DWORD *)&v34[3];
    *(_DWORD *)(a2 + 201) = *(_DWORD *)v34;
    *(_DWORD *)(a2 + 220) = *(_DWORD *)&v32[3];
    *(_DWORD *)(a2 + 217) = *(_DWORD *)v32;
    *(_DWORD *)(a2 + 249) = *(_DWORD *)v31;
    *(_DWORD *)(a2 + 252) = *(_DWORD *)&v31[3];
    *(_WORD *)(a2 + 270) = v30;
    *(_DWORD *)(a2 + 266) = v29;
    *(_DWORD *)(a2 + 284) = *(_DWORD *)&v28[3];
    *(_DWORD *)(a2 + 281) = *(_DWORD *)v28;
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 4) = 1;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    *(_DWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_BYTE *)(a2 + 92) = 1;
    *(_DWORD *)(a2 + 96) = 0;
    *(_BYTE *)(a2 + 100) = 1;
    *(_QWORD *)(a2 + 104) = MEMORY[0x24BEE4B00];
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = v14;
    *(_BYTE *)(a2 + 136) = v42;
    *(_QWORD *)(a2 + 144) = v10;
    *(_BYTE *)(a2 + 152) = v40;
    *(_QWORD *)(a2 + 160) = v22;
    *(_BYTE *)(a2 + 168) = v38;
    *(_QWORD *)(a2 + 176) = 0;
    *(_BYTE *)(a2 + 184) = 1;
    *(_QWORD *)(a2 + 192) = v18;
    *(_BYTE *)(a2 + 200) = v35;
    *(_QWORD *)(a2 + 208) = result;
    *(_BYTE *)(a2 + 216) = v33;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_BYTE *)(a2 + 248) = 1;
    *(_QWORD *)(a2 + 256) = v6;
    *(_WORD *)(a2 + 264) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    *(_BYTE *)(a2 + 280) = 1;
    *(_QWORD *)(a2 + 288) = 0;
    *(_BYTE *)(a2 + 296) = 1;
    *(_QWORD *)(a2 + 304) = 0;
    *(_BYTE *)(a2 + 312) = 1;
    return result;
  }
LABEL_22:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id static AceSerialization.aceDataForObject(_:)(void *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  void *v17;
  id result;
  id v19[3];

  v19[2] = *(id *)MEMORY[0x24BDAC8D0];
  if (!a1)
    goto LABEL_10;
  v1 = outlined bridged method (pb) of @objc AceObject._serializedData()(a1);
  v4 = v3;
  if (v3 >> 60 != 15)
    goto LABEL_6;
  v5 = objc_msgSend(a1, sel_dictionary);
  if (!v5)
  {
LABEL_10:
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_11_2();
    *v15 = xmmword_246F73350;
    OUTLINED_FUNCTION_2_20((uint64_t)v15, 3);
    return (id)v1;
  }
  v6 = v5;
  v19[0] = 0;
  v7 = objc_msgSend((id)objc_opt_self(), sel_dataWithPropertyList_format_options_error_, v5, 200, 0, v19);
  v8 = v19[0];
  if (!v7)
  {
    v17 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)v1;
  }
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined copy of Data._Representation(v9, v11);
LABEL_6:
  outlined copy of Data?(v1, v4);
  v12 = Data.count.getter();
  if (v12 > 4294967294)
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_11_2();
    *v16 = xmmword_246F740B0;
    OUTLINED_FUNCTION_2_20((uint64_t)v16, 3);
    OUTLINED_FUNCTION_16_8();
    OUTLINED_FUNCTION_167_0();
    return (id)v1;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    static AceDataHeader.createHeaderData(forType:lengthOrIdentifier:)(3, v12);
    v19[0] = v13;
    v19[1] = (id)v14;
    if (v14 >> 60 == 15)
    {
      v1 = (uint64_t)v13;
      OUTLINED_FUNCTION_167_0();
      OUTLINED_FUNCTION_16_8();
    }
    else
    {
      OUTLINED_FUNCTION_14_7();
      OUTLINED_FUNCTION_16_8();
      OUTLINED_FUNCTION_167_0();
      return v19[0];
    }
    return (id)v1;
  }
  OUTLINED_FUNCTION_0_0();
  result = (id)OUTLINED_FUNCTION_16_9();
  __break(1u);
  return result;
}

uint64_t static AceSerialization.aceDataForSpeechPacket(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t result;
  id v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t (*v31)(_QWORD);
  id v32;
  uint64_t v33;
  uint64_t (*v34)(void);
  unint64_t v35;
  char *v36;
  id v37;
  _OWORD *v38;
  size_t v39;
  char *v40;
  uint64_t v41;
  __int16 v42;
  const void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v2 = v1;
  v4 = type metadata accessor for Data.Deallocator();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_1_0();
  v8 = (char *)(v7 - v6);
  v9 = (uint64_t *)(a1 + OBJC_IVAR___SNSpeechPacketInternal_internalRefId);
  OUTLINED_FUNCTION_3_17();
  v10 = v9[1];
  if (!v10)
    goto LABEL_6;
  v11 = *v9;
  swift_bridgeObjectRetain();
  v12 = (void *)MEMORY[0x24956D034](v11, v10);
  swift_bridgeObjectRelease();
  v10 = (uint64_t)objc_msgSend(v12, sel_UTF8String);
  v13 = v12;
  if (!v10)
    goto LABEL_6;
  v14 = strlen((const char *)v10);
  if (v14 > 127)
  {
LABEL_12:
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_11_2();
    *v21 = xmmword_246F725D0;
    return OUTLINED_FUNCTION_2_20((uint64_t)v21, 2);
  }
  v15 = v14;
  if (v14 < -128)
  {
    __break(1u);
LABEL_6:
    v15 = 0;
  }
  v16 = (_QWORD *)(a1 + OBJC_IVAR___SNSpeechPacketInternal_packetNumber);
  OUTLINED_FUNCTION_3_17();
  if (*v16 != (__int16)*v16)
    goto LABEL_12;
  LOWORD(v47) = *v16;
  v17 = (uint64_t *)(a1 + OBJC_IVAR___SNSpeechPacketInternal_packets);
  OUTLINED_FUNCTION_3_17();
  v18 = *v17;
  v19 = (unint64_t)*v17 >> 62;
  if (v19)
    goto LABEL_59;
  v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  OUTLINED_FUNCTION_9_10();
  while (1)
  {
    if (v20 >= 0x8000)
    {
      OUTLINED_FUNCTION_201();
      goto LABEL_12;
    }
    v45 = v15;
    if (v20 < (uint64_t)0xC000000000000000)
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    v15 = 2 * v20;
    if (v20 < -32768 || v15 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_61;
    if (v15 > 0x7FFFFFFF)
      goto LABEL_62;
    v41 = v4;
    v43 = (const void *)v10;
    if (v19)
    {
      OUTLINED_FUNCTION_9_10();
      v4 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v4 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      OUTLINED_FUNCTION_9_10();
    }
    v39 = v5;
    v40 = v8;
    v42 = v20;
    if (v4)
    {
      if (v4 < 1)
        __break(1u);
      v5 = 0;
      v19 = v18 & 0xC000000000000001;
      v8 = (char *)0xFFFFFFFF80000000;
      v10 = 0x7FFFFFFFLL;
      while (1)
      {
        v24 = v19 ? (id)MEMORY[0x24956D43C](v5, v18) : *(id *)(v18 + 8 * v5 + 32);
        v20 = (uint64_t)v24;
        v2 = (uint64_t)objc_msgSend(v24, sel_length, v39, v40);

        if (v2 < (uint64_t)0xFFFFFFFF80000000)
          break;
        if (v2 > 0x7FFFFFFF)
          goto LABEL_56;
        v25 = __OFADD__((_DWORD)v15, (_DWORD)v2);
        v15 = (v15 + v2);
        if (v25)
          goto LABEL_57;
        if (v4 == ++v5)
          goto LABEL_32;
      }
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
LABEL_32:
    OUTLINED_FUNCTION_201();
    v26 = v15 + 1;
    if (__OFADD__((_DWORD)v15, 1))
      goto LABEL_63;
    v20 = v45;
    v25 = __OFADD__(v26, (char)v45);
    v27 = v26 + (char)v45;
    if (v25)
      goto LABEL_64;
    v5 = (v27 + 4);
    if (__OFADD__(v27, 4))
      goto LABEL_65;
    v2 = (int)v5;
    v28 = swift_slowAlloc();
    if ((v5 & 0x80000000) != 0)
      goto LABEL_69;
    v8 = (char *)v28;
    static AceDataHeader.createHeaderData(forType:lengthOrIdentifier:)(6, v5);
    v48 = v29;
    v49 = v30;
    *v8 = v45;
    v5 = (size_t)(v8 + 1);
    if ((char)v45 >= 1)
    {
      memmove(v8 + 1, v43, v45);
      v5 += v45;
    }
    v20 = (__int16)v47;
    if (one-time initialization token for htons == -1)
    {
      if ((v20 & 0x80000000) != 0)
        goto LABEL_69;
      goto LABEL_40;
    }
LABEL_66:
    swift_once();
    if ((v20 & 0x80000000) != 0)
    {
LABEL_69:
      OUTLINED_FUNCTION_0_0();
      result = OUTLINED_FUNCTION_16_9();
      __break(1u);
      return result;
    }
LABEL_40:
    v44 = v8;
    v46 = v2;
    v31 = static Endian.htons;
    *(_WORD *)v5 = static Endian.htons(v20);
    if (v42 < 0)
      goto LABEL_69;
    *(_WORD *)(v5 + 2) = v31(v42);
    if (!v4)
      break;
    v8 = (char *)(v5 + 4);
    v47 = v18 & 0xC000000000000001;
    v19 = 4;
    while (1)
    {
      v10 = v19 - 4;
      v32 = v47 ? (id)MEMORY[0x24956D43C](v19 - 4, v18) : *(id *)(v18 + 8 * v19);
      v15 = (uint64_t)v32;
      v2 = v19 - 3;
      if (__OFADD__(v10, 1))
        break;
      v33 = (uint64_t)objc_msgSend(v32, sel_length);
      if (v33 >= 0x10000)
      {
        OUTLINED_FUNCTION_201();
        lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
        OUTLINED_FUNCTION_11_2();
        *v38 = xmmword_246F725D0;
        OUTLINED_FUNCTION_2_20((uint64_t)v38, 2);

        return outlined consume of Data?(v48, v49);
      }
      v5 = v33;
      v34 = (uint64_t (*)(void))static Endian.htons;
      v35 = (unint64_t)objc_msgSend((id)v15, (SEL)&selRef_SSID);
      if ((v35 & 0x8000000000000000) != 0 || v35 >= 0x10000)
        goto LABEL_69;
      *(_WORD *)v8 = v34();
      v36 = v8 + 2;
      v37 = objc_retainAutorelease((id)v15);
      memmove(v36, objc_msgSend(v37, sel_bytes), v5);

      v8 = &v36[v5];
      ++v19;
      if (v2 == v4)
        goto LABEL_51;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    swift_bridgeObjectRetain_n();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_201();
  }
LABEL_51:
  OUTLINED_FUNCTION_201();
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v40, *MEMORY[0x24BDCDB90], v41);
  MEMORY[0x24956C908](v44, v46, v40);
  if (v49 >> 60 != 15)
    OUTLINED_FUNCTION_14_7();
  OUTLINED_FUNCTION_16_8();
  return v48;
}

uint64_t static AceSerialization.parseAceStreamHeader(data:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (one-time initialization token for aceHeaderMagic != -1)
    swift_once();
  v2 = *(_QWORD *)(static AceSerialization.aceHeaderMagic + 16);
  v3 = *(_QWORD *)(a1 + 8);
  if (OUTLINED_FUNCTION_19_9() > v2)
    __asm { BR              X10 }
  v4 = OUTLINED_FUNCTION_19_9();
  lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
  OUTLINED_FUNCTION_11_2();
  *(_QWORD *)v5 = v2 + 1;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = 0;
  swift_willThrow();
  return v2;
}

void one-time initialization function for isLittleEndian()
{
  static Endian.isLittleEndian = 1;
}

uint64_t one-time initialization function for htons()
{
  uint64_t (*v0)(unsigned __int16);
  uint64_t result;

  if (one-time initialization token for isLittleEndian != -1)
    result = swift_once();
  if (static Endian.isLittleEndian)
    v0 = @nonobjc _OSSwapInt16(_:);
  else
    v0 = (uint64_t (*)(unsigned __int16))destructiveProjectEnumData for ConnectionConfigurationError;
  static Endian.htons = (uint64_t)v0;
  unk_2576664D0 = 0;
  return result;
}

uint64_t @nonobjc _OSSwapInt16(_:)(unsigned __int16 a1)
{
  return _OSSwapInt16(a1);
}

uint64_t one-time initialization function for htonl()
{
  uint64_t (*v0)();
  uint64_t result;

  if (one-time initialization token for isLittleEndian != -1)
    result = swift_once();
  if (static Endian.isLittleEndian)
    v0 = @nonobjc _OSSwapInt32(_:);
  else
    v0 = (uint64_t (*)())destructiveProjectEnumData for ConnectionConfigurationError;
  static Endian.htonl = (uint64_t)v0;
  unk_2576664E0 = 0;
  return result;
}

uint64_t one-time initialization function for ntohs()
{
  uint64_t (*v0)(unsigned __int16);
  uint64_t result;

  if (one-time initialization token for isLittleEndian != -1)
    result = swift_once();
  if (static Endian.isLittleEndian)
    v0 = @nonobjc _OSSwapInt16(_:);
  else
    v0 = (uint64_t (*)(unsigned __int16))destructiveProjectEnumData for ConnectionConfigurationError;
  static Endian.ntohs = (uint64_t)v0;
  unk_2576664F0 = 0;
  return result;
}

uint64_t one-time initialization function for ntohl()
{
  uint64_t (*v0)();
  uint64_t result;

  if (one-time initialization token for isLittleEndian != -1)
    result = swift_once();
  if (static Endian.isLittleEndian)
    v0 = @nonobjc _OSSwapInt32(_:);
  else
    v0 = (uint64_t (*)())destructiveProjectEnumData for ConnectionConfigurationError;
  static Endian.ntohl = (uint64_t)v0;
  unk_257666500 = 0;
  return result;
}

uint64_t AceStreamCompressionType.init(rawValue:)(char a1)
{
  unsigned int v1;

  if (a1 == 2)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 1)
    return 0;
  else
    return v1;
}

uint64_t AceStreamCompressionType.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

uint64_t AceDataType.init(rawValue:)(char a1)
{
  if ((a1 + 1) > 8u)
    return 7;
  else
    return byte_246F744E0[(char)(a1 + 1)];
}

unint64_t AceDataType.rawValue.getter(char a1)
{
  return 0x70403020100FFuLL >> (8 * a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AceStreamCompressionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AceStreamCompressionType@<X0>(_BYTE *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = AceStreamCompressionType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AceDataType@<X0>(_BYTE *a1@<X8>)
{
  char *v1;
  unint64_t result;

  result = AceDataType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void static AceStreamHeader.createAceStreamHeaderData(withMagic:compressionType:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  char v10;
  void *v11;

  v4 = type metadata accessor for Data.Deallocator();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_1_0();
  v8 = v7 - v6;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = a2 & 1;
  v11 = (void *)swift_slowAlloc();
  memcpy(v11, (const void *)(a1 + 32), v9);
  *((_BYTE *)v11 + v9) = v10 + 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x24BDCDB90], v4);
  MEMORY[0x24956C908](v11, v9 + 1, v8);
  OUTLINED_FUNCTION_10_4();
}

void static AceDataHeader.createHeaderData(forType:lengthOrIdentifier:)(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for Data.Deallocator();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_1_0();
  v8 = v7 - v6;
  v9 = swift_slowAlloc();
  *(_BYTE *)v9 = 0x70403020100FFuLL >> (8 * a1);
  if (one-time initialization token for htonl != -1)
    swift_once();
  *(_DWORD *)(v9 + 1) = static Endian.htonl(a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x24BDCDB90], v4);
  Data.Deallocator._deallocator.getter();
  type metadata accessor for __DataStorage();
  swift_allocObject();
  swift_retain();
  v10 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
  MEMORY[0x24956C914](v10, 5);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  OUTLINED_FUNCTION_10_4();
}

void one-time initialization function for aceHeaderMagic()
{
  static AceSerialization.aceHeaderMagic = (uint64_t)&outlined read-only object #0 of one-time initialization function for aceHeaderMagic;
}

uint64_t closure #1 in static AceSerialization.parsePacket(data:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  if (a1)
  {
    v2 = a2 - (_QWORD)a1;
    if (a2 - (uint64_t)a1 >= 5)
    {
      v6 = (char *)sub_246F2409C + 4 * byte_246F744D8[AceDataType.init(rawValue:)(*a1)];
      __asm { BR              X10 }
    }
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_11_2();
    *(_QWORD *)v3 = 5;
    *(_QWORD *)(v3 + 8) = v2;
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    OUTLINED_FUNCTION_11_2();
    *(_OWORD *)v4 = xmmword_246F725D0;
    *(_BYTE *)(v4 + 16) = 1;
  }
  swift_willThrow();
  return outlined destroy of SessionObject?((uint64_t)v7);
}

void sub_246F2409C(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  char v8;
  int v9;
  va_list va;

  va_start(va, a7);
  v8 = static AceSerialization.rawPacketType(fromDataType:)(a1);
  if (one-time initialization token for ntohl != -1)
    swift_once();
  v9 = OUTLINED_FUNCTION_13_10((uint64_t (**)(_QWORD))&static Endian.ntohl);
  outlined init with take of SessionObject?((uint64_t)va, v7);
  *(_BYTE *)(v7 + 40) = v8;
  *(_DWORD *)(v7 + 44) = v9;
  *(_QWORD *)(v7 + 48) = 5;
  JUMPOUT(0x246F2404CLL);
}

id static AceSerialization.parseSpeechPacket(withBytes:length:)(unsigned __int8 *a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned __int16 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  unsigned __int16 v18;
  id v19;
  unsigned __int16 v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 v26;
  unsigned int v27;
  BOOL v28;
  id v29;
  id v30;
  unsigned __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v4);
  if (!a2)
    return 0;
  v5 = *a1;
  LODWORD(v6) = a2 - 1 - v5;
  if (a2 - 1 < v5)
    return 0;
  v7 = a1 + 1;
  v8 = MEMORY[0x24956C938](a1 + 1, *a1);
  v10 = v9;
  static String.Encoding.utf8.getter();
  v11 = String.init(data:encoding:)();
  if (!v12)
  {
    outlined consume of Data._Representation(v8, v10);
    return 0;
  }
  v13 = v12;
  if (v6 < 2)
  {
LABEL_8:
    outlined consume of Data._Representation(v8, v10);
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v14 = v11;
  v15 = (unint64_t)&v7[v5];
  v16 = *(unsigned __int16 *)v15;
  if (one-time initialization token for ntohs != -1)
    goto LABEL_36;
LABEL_6:
  v17 = static Endian.ntohs;
  v18 = static Endian.ntohs(v16);
  if ((v18 & 0x8000) != 0)
  {
    __break(1u);
LABEL_38:
    __break(1u);
  }
  if ((v6 & 0xFFFFFFFE) == 2)
    goto LABEL_8;
  v21 = v18;
  v33 = v13;
  v22 = v17(*(unsigned __int16 *)(v15 + 2));
  if (v22 < 0)
    goto LABEL_38;
  v23 = v22;
  v24 = MEMORY[0x24BEE4AF8];
  v34 = MEMORY[0x24BEE4AF8];
  if (!v22)
    goto LABEL_32;
  v31 = v21;
  v32 = v14;
  v16 = 0;
  v25 = (unsigned __int16 *)(v15 + 4);
  v14 = ((_DWORD)v6 - 4);
  do
  {
    if (v23 <= (__int16)v16)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      swift_once();
      goto LABEL_6;
    }
    v13 = (v14 - 2);
    if (v14 < 2)
      goto LABEL_31;
    v6 = (unsigned __int16 *)*v25;
    v15 = (unint64_t)static Endian.ntohs;
    if ((static Endian.ntohs(v6) & 0x8000) != 0)
      goto LABEL_31;
    v26 = ((uint64_t (*)(unsigned __int16 *))v15)(v6);
    if ((v26 & 0x8000) != 0)
      goto LABEL_34;
    v15 = (__int16)v26;
    v27 = v26;
    v28 = !v26 || v13 >= v26;
    if (!v28)
    {
LABEL_31:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v8, v10);
      goto LABEL_9;
    }
    v6 = v25 + 1;
    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE50]), sel_initWithBytes_length_, v25 + 1, v26);
    v28 = v13 >= v27;
    v14 = v13 - v27;
    if (!v28)
      goto LABEL_35;
    v13 = (uint64_t)v29;
    MEMORY[0x24956D118]();
    if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v16 = (v16 + 1);
    v25 = (unsigned __int16 *)((char *)v6 + (unsigned __int16)v15);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  while ((unsigned __int16)v16 != (unsigned __int16)v23);
  v24 = v34;
  v14 = v32;
  v21 = v31;
LABEL_32:
  v30 = objc_allocWithZone((Class)type metadata accessor for SpeechPacket());
  v19 = SpeechPacket.init(aceId:refId:packets:packetNumber:)(0, 0, v14, v33, v24, v21);
  outlined consume of Data._Representation(v8, v10);
  return v19;
}

id @nonobjc AceObject.__allocating_init(plistData:)(uint64_t a1, unint64_t a2)
{
  Class isa;
  id v5;

  if (a2 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(a1, a2);
  }
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_aceObjectWithPlistData_, isa);

  return v5;
}

uint64_t static AceSerialization.rawPacketType(fromDataType:)(unsigned __int8 a1)
{
  if (a1 >= 6u)
    return 0;
  else
    return (0x30200000104uLL >> (8 * a1));
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(char *a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  unsigned int v12;

  v6 = __DataStorage._bytes.getter();
  if (v6)
  {
    v7 = v6;
    v8 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v8))
    {
      __break(1u);
LABEL_16:
      swift_once();
      goto LABEL_7;
    }
    a1 = &a1[v7 - v8];
  }
  else
  {
    a1 = 0;
  }
  __DataStorage._length.getter();
  if (!a1)
  {
LABEL_8:
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 3;
    return swift_willThrow();
  }
  if (one-time initialization token for aceHeaderMagic != -1)
    goto LABEL_16;
LABEL_7:
  if (memcmp(a1, (const void *)(static AceSerialization.aceHeaderMagic + 32), a4))
    goto LABEL_8;
  v11 = a1[a4];
  if (v11 == 2)
    v12 = 1;
  else
    v12 = 2;
  if (v11 == 1)
    return 0;
  else
    return v12;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p11SiriNetwork24AceStreamCompressionTypeOSgTg5037_s10Foundation4DataV06InlineB0V15withb27BytesyxxSWKXEKlFxSWKXEfU_11g9Network24ijkL7OSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n04_s11g9Network16i24SerializationO05parseC12j18Header4dataAA0cF15kly6_Sit10nO17Vz_tKFZAHSWKXEfU_AF0I13SerializationOXMtSiTf1ncn_n(uint64_t a1, uint64_t a2, int a3, size_t __n)
{
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t __s1;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  __s1 = a1;
  v10 = a2;
  v11 = BYTE2(a2);
  v12 = BYTE3(a2);
  v13 = BYTE4(a2);
  v14 = BYTE5(a2);
  if (one-time initialization token for aceHeaderMagic != -1)
    swift_once();
  if (!memcmp(&__s1, (const void *)(static AceSerialization.aceHeaderMagic + 32), __n))
  {
    v7 = *((unsigned __int8 *)&__s1 + __n);
    if (v7 == 2)
      v8 = 1;
    else
      v8 = 2;
    if (v7 == 1)
      return 0;
    else
      return v8;
  }
  else
  {
    lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
    swift_allocError();
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t _OSSwapInt32(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t outlined destroy of SessionObject?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionObject?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SessionObject?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionObject?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for AceObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AceObject;
  if (!lazy cache variable for type metadata for AceObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AceObject);
  }
  return result;
}

uint64_t _OSSwapInt16(unsigned int a1)
{
  return __rev16(a1);
}

uint64_t outlined bridged method (pb) of @objc AceObject._serializedData()(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel__serializedData);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_2_20@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(a1 + 16) = a2;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_3_17()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_10_10(uint64_t a1, uint64_t a2, int a3)
{
  size_t v3;

  return _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_A13Et_sAC_p11SiriNetwork24AceStreamCompressionTypeOSgTg5037_s10Foundation4DataV06InlineB0V15withb27BytesyxxSWKXEKlFxSWKXEfU_11g9Network24ijkL7OSg_TG5SWxsAC_pRi_zRi0_zlyAIIsgyrzo_SiTf1nc_n04_s11g9Network16i24SerializationO05parseC12j18Header4dataAA0cF15kly6_Sit10nO17Vz_tKFZAHSWKXEfU_AF0I13SerializationOXMtSiTf1ncn_n(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_11_13(char *a1, uint64_t a2, uint64_t a3)
{
  size_t v3;

  return specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(a1, a2, a3, v3);
}

unint64_t OUTLINED_FUNCTION_12_9()
{
  return lazy protocol witness table accessor for type AceSerializationError and conformance AceSerializationError();
}

uint64_t OUTLINED_FUNCTION_13_10@<X0>(uint64_t (**a1)(_QWORD)@<X8>)
{
  uint64_t v1;

  return (*a1)(*(unsigned int *)(v1 + 1));
}

uint64_t OUTLINED_FUNCTION_14_7()
{
  return Data.append(_:)();
}

void OUTLINED_FUNCTION_15_10()
{
  JUMPOUT(0x24956C938);
}

uint64_t OUTLINED_FUNCTION_16_9()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_18_7()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_19_9()
{
  return Data.count.getter();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.setSendPings(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.sendData(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.sendCommand(_:moreComing:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of BackgroundConnectionProtocol.sendCommands(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didOpenConnectionType(_:type:routeId:delay:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didReceiveObject(_:object:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didReceiveAceObject(_:object:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didEncounterError(_:error:analysisInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of BackgroundConnectionDelegate.didEncounterIntermediateError(_:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

_QWORD *BackgroundConnectionProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v6[65];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 40))(v6, a2, a3);
  OUTLINED_FUNCTION_28(&v5, v6);
  ConnectionConfiguration.hash(into:)(a1);
  return outlined release of ConnectionConfiguration(v6);
}

uint64_t static BackgroundConnectionProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _BYTE v8[520];
  _BYTE v9[520];
  _QWORD v10[65];
  _QWORD v11[65];

  v4 = a4;
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 40);
  v6(v10, a3, a4);
  OUTLINED_FUNCTION_28(v9, v10);
  v6(v11, a3, v4);
  OUTLINED_FUNCTION_28(v8, v11);
  LOBYTE(v4) = static ConnectionConfiguration.== infix(_:_:)((uint64_t)v9, (uint64_t)v8);
  outlined release of ConnectionConfiguration(v11);
  outlined release of ConnectionConfiguration(v10);
  return v4 & 1;
}

uint64_t specialized NetworkActivity.token.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  if (*(_QWORD *)(v1 + 16)
    && (swift_retain(), v3 = NWActivity.isActivated.getter(), swift_release(), (v3 & 1) != 0)
    && *(_QWORD *)(v1 + 16))
  {
    swift_retain();
    NWActivity.token.getter();
    swift_release();
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  v5 = type metadata accessor for UUID();
  return __swift_storeEnumTagSinglePayload(a1, v4, 1, v5);
}

uint64_t specialized NetworkActivity.init(label:parentActivity:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;

  v3 = v2;
  *(_QWORD *)(v2 + 16) = 0;
  v6 = (uint64_t *)(v2 + 16);
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v7 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v7 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v2 + 24) = v7;
  *(_WORD *)(v2 + 32) = 11;
  *(_BYTE *)(v2 + 34) = 0;
  if (a1)
  {
    v8 = type metadata accessor for NWActivity();
    swift_allocObject();
    v9 = NWActivity.init(domain:label:)();
    swift_beginAccess();
    swift_release();
    *v6 = v9;
    if (a2)
    {
      *((_QWORD *)&v13 + 1) = v8;
      v14 = &protocol witness table for NWActivity;
      *(_QWORD *)&v12 = a2;
    }
    else
    {
      v14 = 0;
      v12 = 0u;
      v13 = 0u;
    }
    swift_retain();
    NWActivity.parent.setter((uint64_t)&v12);
    swift_endAccess();
    if (a2)
    {
      v10 = NWActivity.label.getter();
      swift_release();
      NetworkActivityLabel.init(rawValue:)(v10);
      *(_BYTE *)(v3 + 32) = v12;
    }
  }
  else
  {
    swift_release();
  }
  *(_BYTE *)(v3 + 35) = a1;
  return v3;
}

uint64_t NetworkActivityLabel.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SiriNetwork::NetworkActivityLabel_optional __swiftcall NetworkActivityLabel.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 11;
  if ((unint64_t)rawValue < 0xB)
    v2 = rawValue;
  *v1 = v2;
  return (SiriNetwork::NetworkActivityLabel_optional)rawValue;
}

void specialized NetworkActivity.activate()()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 33))
  {
    specialized NetworkActivity.moveTo(_:)();
    if (*(_BYTE *)(v0 + 33) == 1)
    {
      swift_beginAccess();
      if (*(_QWORD *)(v0 + 16))
      {
        swift_retain();
        NWActivity.activate()();
        swift_release();
      }
    }
  }
}

uint64_t specialized NetworkActivity.addConnection(_:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unsigned int v3;
  _QWORD v4[3];
  uint64_t v5;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v0 + 33);
    if (v3 > 1)
    {
      if (v3 != 2)
        return result;
      v5 = type metadata accessor for NWActivity();
      v4[0] = v2;
      swift_retain_n();
    }
    else
    {
      swift_retain();
      specialized NetworkActivity.moveTo(_:)();
      if (*(_BYTE *)(v0 + 33) != 2)
        return swift_release();
      v5 = type metadata accessor for NWActivity();
      v4[0] = v2;
      swift_retain();
    }
    NWConnection.startActivity(_:)((uint64_t)v4);
    outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v4, &demangling cache variable for type metadata for Any?);
    swift_beginAccess();
    swift_retain();
    specialized Set._Variant.insert(_:)();
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized NetworkActivity.removeConnection(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[4];

  if (*(_BYTE *)(v0 + 33) == 2)
  {
    swift_beginAccess();
    v1 = *(_QWORD *)(v0 + 16);
    if (v1)
    {
      v2[3] = type metadata accessor for NWActivity();
      v2[0] = v1;
      swift_retain_n();
      NWConnection.endActivity(_:)((uint64_t)v2);
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v2, &demangling cache variable for type metadata for Any?);
      swift_beginAccess();
      specialized Set._Variant.remove(_:)();
      swift_endAccess();
      swift_release();
      swift_release();
    }
  }
}

void specialized NetworkActivity.stop(completionReason:error:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  void *v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v47 = a2;
  v4 = type metadata accessor for NWActivity.CompletionReason();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (uint64_t *)((char *)&v40 - v9);
  specialized NetworkActivity.moveTo(_:)();
  v11 = (uint64_t *)(v2 + 24);
  swift_beginAccess();
  v12 = swift_bridgeObjectRetain();
  v13 = specialized Set.isEmpty.getter(v12);
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    swift_beginAccess();
    v14 = *(_QWORD *)(v2 + 16);
    if (v14)
    {
      v46 = v5;
      v15 = *v11;
      v16 = (*v11 & 0xC000000000000001) == 0;
      v43 = v4;
      v42 = v2;
      v41 = v10;
      v44 = a1;
      v45 = v8;
      if (v16)
      {
        v20 = -1 << *(_BYTE *)(v15 + 32);
        v21 = *(_QWORD *)(v15 + 56);
        v48 = v15 + 56;
        v17 = ~v20;
        v22 = -v20;
        if (v22 < 64)
          v23 = ~(-1 << v22);
        else
          v23 = -1;
        v19 = v23 & v21;
        swift_retain();
        swift_bridgeObjectRetain();
        v18 = 0;
      }
      else
      {
        swift_retain();
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for NWConnection();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0378], (uint64_t)&protocol conformance descriptor for NWConnection);
        Set.Iterator.init(_cocoa:)();
        v15 = v52;
        v48 = v53;
        v17 = v54;
        v18 = v55;
        v19 = v56;
      }
      v40 = v17;
      v24 = (unint64_t)(v17 + 64) >> 6;
      if (v15 < 0)
        goto LABEL_12;
      while (1)
      {
        if (v19)
        {
          v19 &= v19 - 1;
        }
        else
        {
          v26 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
            return;
          }
          if (v26 >= v24)
            goto LABEL_31;
          v27 = *(_QWORD *)(v48 + 8 * v26);
          v28 = v18 + 1;
          if (!v27)
          {
            v28 = v18 + 2;
            if (v18 + 2 >= v24)
              goto LABEL_31;
            v27 = *(_QWORD *)(v48 + 8 * v28);
            if (!v27)
            {
              v28 = v18 + 3;
              if (v18 + 3 >= v24)
                goto LABEL_31;
              v27 = *(_QWORD *)(v48 + 8 * v28);
              if (!v27)
              {
                v28 = v18 + 4;
                if (v18 + 4 >= v24)
                  goto LABEL_31;
                v27 = *(_QWORD *)(v48 + 8 * v28);
                if (!v27)
                {
                  v29 = v18 + 5;
                  while (v29 < v24)
                  {
                    v27 = *(_QWORD *)(v48 + 8 * v29++);
                    if (v27)
                    {
                      v28 = v29 - 1;
                      goto LABEL_27;
                    }
                  }
LABEL_31:
                  v4 = v43;
                  v2 = v42;
                  v10 = v41;
                  outlined consume of [String : UInt64].Iterator._Variant();
                  swift_release();
                  v8 = v45;
                  v5 = v46;
                  LOBYTE(a1) = v44;
                  break;
                }
              }
            }
          }
LABEL_27:
          v19 = (v27 - 1) & v27;
          v18 = v28;
        }
        swift_retain();
        while (1)
        {
          v50 = type metadata accessor for NWActivity();
          *(_QWORD *)&v49 = v14;
          swift_retain();
          NWConnection.endActivity(_:)((uint64_t)&v49);
          swift_release();
          outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v49, &demangling cache variable for type metadata for Any?);
          if ((v15 & 0x8000000000000000) == 0)
            break;
LABEL_12:
          v25 = (void *)__CocoaSet.Iterator.next()();
          if (!v25)
            goto LABEL_31;
          v51 = v25;
          type metadata accessor for NWConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          swift_unknownObjectRelease();
        }
      }
    }
  }
  if (v47)
  {
    *(_QWORD *)&v49 = v47;
    v30 = v47;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for NSError);
    if (swift_dynamicCast())
    {
      v31 = v2;
      v32 = v51;
      v33 = objc_msgSend(v51, sel_code);
      v34 = objc_msgSend(v32, sel_userInfo);
      v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      specialized Dictionary.subscript.getter(v36, v37, v35, &v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v50)
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v38 = v51;
          v39 = (uint64_t)objc_msgSend(v51, sel_code);

          goto LABEL_41;
        }
      }
      else
      {
        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)&v49, &demangling cache variable for type metadata for Any?);
      }
      v39 = -1;
LABEL_41:
      *v10 = v33;
      v10[1] = v39;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v10, *MEMORY[0x24BDDFE50], v4);
      swift_beginAccess();
      if (*(_QWORD *)(v31 + 16))
      {
        swift_retain();
        NWActivity.complete(reason:)();
        swift_release();

        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v10, v4);
      }
      else
      {
        (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v10, v4);

      }
      return;
    }
  }
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 16))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, **((unsigned int **)&unk_2518434E8 + (char)a1), v4);
    swift_retain();
    NWActivity.complete(reason:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_release();
  }
}

void specialized NetworkActivity.moveTo(_:)()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X9 }
}

uint64_t sub_246F25748()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (v1 >= 2)
    LOBYTE(v1) = 0;
  *(_BYTE *)(v0 + 33) = v1;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, (os_log_type_t)v8))
  {
    *(_DWORD *)(v5 - 108) = v8;
    *(_QWORD *)(v5 - 128) = v3;
    v9 = (_DWORD *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_QWORD *)(v5 - 120) = v10;
    *(_QWORD *)(v5 - 88) = v10;
    *v9 = 136315906;
    v11 = *(unsigned __int8 *)(v0 + 35);
    *(_QWORD *)(v5 - 136) = v4;
    *(_QWORD *)(v5 - 104) = v2;
    __asm { BR              X10 }
  }

  return swift_release_n();
}

void specialized NetworkActivity.abort()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.siriNetwork);
  swift_retain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    v18 = v13;
    v16[2] = v5;
    v14 = (_DWORD *)OUTLINED_FUNCTION_2_2();
    v17 = OUTLINED_FUNCTION_2_2();
    v20 = v17;
    *v14 = 136315394;
    v15 = *(unsigned __int8 *)(v3 + 35);
    v16[1] = v8;
    v19 = a1;
    __asm { BR              X10 }
  }

  swift_release_n();
  OUTLINED_FUNCTION_1_1();
}

uint64_t NetworkActivityParentLabel.rawValue.getter()
{
  return 1;
}

uint64_t NetworkActivityLabel.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_246F26060 + 4 * byte_246F7456A[*v0]))(0x64696C61766E69, 0xE700000000000000);
}

uint64_t sub_246F26060()
{
  return 0x7365757165526975;
}

uint64_t sub_246F2607C()
{
  return 0x6973734164616F6CLL;
}

uint64_t sub_246F260A0()
{
  return 0x7274536F69647561;
}

uint64_t sub_246F260C4()
{
  return 0x686365657073;
}

uint64_t sub_246F260D8()
{
  return 0x73746C75736572;
}

uint64_t sub_246F260EC()
{
  return 0x7972746572;
}

unint64_t sub_246F26100()
{
  return 0xD000000000000016;
}

uint64_t sub_246F2611C()
{
  return 0x6D6D6F43636E7973;
}

void protocol witness for Hashable.hash(into:) in conformance NetworkActivityLabel(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

SiriNetwork::NetworkActivityLabel_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkActivityLabel(Swift::Int *a1)
{
  return NetworkActivityLabel.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NetworkActivityLabel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NetworkActivityLabel.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t NetworkActivityCompletionReason.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_246F261C4 + 4 * byte_246F74575[*v0]))(0xD00000000000001ALL, 0x8000000246F78390);
}

SiriNetwork::NetworkActivityCompletionReason_optional __swiftcall NetworkActivityCompletionReason.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 6;
  if ((unint64_t)rawValue < 6)
    v2 = rawValue;
  *v1 = v2;
  return (SiriNetwork::NetworkActivityCompletionReason_optional)rawValue;
}

SiriNetwork::NetworkActivityCompletionReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkActivityCompletionReason(Swift::Int *a1)
{
  return NetworkActivityCompletionReason.init(rawValue:)(*a1);
}

uint64_t NetworkActivityParentLabel.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkActivityParentLabel@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  return NetworkActivityParentLabel.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NetworkActivityParentLabel(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

id static NetworkActivityTracing.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static NetworkActivityTracing.shared;
}

id NetworkActivityTracing.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  objc_super v4;

  v1 = OBJC_IVAR___SNNetworkActivityTracingInternal_networkActivityTracing;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkActivityTracingInternal<NWConnection, NWActivity>);
  OUTLINED_FUNCTION_6();
  v2 = v0;
  *(_QWORD *)&v0[v1] = specialized NetworkActivityTracingInternal.init()();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for NetworkActivityTracing();
  return objc_msgSendSuper2(&v4, sel_init);
}

void NetworkActivityTracing.start(label:activate:completion:)(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (char *)OUTLINED_FUNCTION_5_19(a1);
  NetworkActivityTracing.start(label:activate:completion:)(v1, v2, v3, v4);
  OUTLINED_FUNCTION_30_3();
}

uint64_t NetworkActivityTracing.start(label:activate:completion:)(char *a1, char a2, uint64_t a3, uint64_t a4)
{
  char v7;

  v7 = *a1;
  OUTLINED_FUNCTION_122();
  specialized NetworkActivityTracingInternal.start(label:activate:completion:)(v7, a2, a3, a4);
  return OUTLINED_FUNCTION_0_31();
}

void NetworkActivityTracing.activate(label:completion:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (unsigned __int8 *)OUTLINED_FUNCTION_5_19(a1);
  NetworkActivityTracing.activate(label:completion:)(v1, v2, v3);
  OUTLINED_FUNCTION_30_3();
}

uint64_t NetworkActivityTracing.activate(label:completion:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *a1;
  OUTLINED_FUNCTION_122();
  specialized NetworkActivityTracingInternal.activate(label:completion:)(v5, a2, a3);
  return OUTLINED_FUNCTION_1_26();
}

void NetworkActivityTracing.stop(label:reason:error:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  char v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  char v8;

  if ((unint64_t)(a1 - 1) < 0xA)
    v5 = a1;
  else
    v5 = 0;
  v8 = v5;
  if (a2 >= 6)
    v6 = 1;
  else
    v6 = a2;
  v7 = v6;
  NetworkActivityTracing.stop(label:reason:error:completion:)(&v8, &v7, a3, a4, a5);
  OUTLINED_FUNCTION_30_3();
}

uint64_t NetworkActivityTracing.stop(label:reason:error:completion:)(char *a1, unsigned __int8 *a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v8;
  char v9;

  v8 = *a2;
  v9 = *a1;
  OUTLINED_FUNCTION_122();
  specialized NetworkActivityTracingInternal.stop(label:reason:error:completion:)(v9, v8, a3, a4, a5);
  return OUTLINED_FUNCTION_0_31();
}

uint64_t NetworkActivityTracing.tracingCancel(completion:)(uint64_t a1, uint64_t a2)
{
  return NetworkActivityTracing.tracingCancel(completion:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized NetworkActivityTracingInternal.tracingCancel(completion:));
}

uint64_t NetworkActivityTracing.addNWConnection(_:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return NetworkActivityTracing.addNWConnection(_:completion:)(a1, a2, a3, "NetworkActivity Tracing: Add connection %llu to activities", (uint64_t)&unk_251843250, (uint64_t)partial apply for specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:), (uint64_t)&block_descriptor_10_3);
}

uint64_t NetworkActivityTracing.removeNWConnection(_:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return NetworkActivityTracing.addNWConnection(_:completion:)(a1, a2, a3, "NetworkActivity Tracing: Remove connection %llu from activities", (uint64_t)&unk_251843200, (uint64_t)partial apply for specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:), (uint64_t)&block_descriptor_12);
}

uint64_t NetworkActivityTracing.addNWConnection(_:completion:)(uint64_t result, uint64_t (*a2)(void), uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;

  if (result)
  {
    v13 = result;
    swift_retain();
    OUTLINED_FUNCTION_122();
    specialized NetworkActivityTracingInternal.addConnection(_:completion:)(v13, (uint64_t)a2, a3, a4, a5, a6, a7);
    swift_release();
    return swift_release();
  }
  else if (a2)
  {
    return a2();
  }
  return result;
}

uint64_t NetworkActivityTracing.currentNetworkActivityToken(_:)(uint64_t a1, uint64_t a2)
{
  return NetworkActivityTracing.tracingCancel(completion:)(a1, a2, (void (*)(uint64_t, uint64_t))specialized NetworkActivityTracingInternal.currentNetworkActivityToken(_:));
}

uint64_t NetworkActivityTracing.tracingCancel(completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  OUTLINED_FUNCTION_122();
  a3(a1, a2);
  return OUTLINED_FUNCTION_1_26();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSUUID?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Class isa;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v6);
  v7 = type metadata accessor for UUID();
  isa = 0;
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void NetworkActivityTracing.__deallocating_deinit()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for NetworkActivityTracing();
  objc_msgSendSuper2(&v1, sel_dealloc);
  OUTLINED_FUNCTION_30_3();
}

_QWORD *specialized NetworkActivityTracingInternal.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkActivity<NWConnection, NWActivity>);
  lazy protocol witness table accessor for type NetworkActivityLabel and conformance NetworkActivityLabel();
  v7 = MEMORY[0x24BEE4AF8];
  v0[2] = Dictionary.init(dictionaryLiteral:)();
  v11[0] = v2;
  if ((v7 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    v8 = v1;
    v9 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  else
  {
    v8 = v1;
    v9 = MEMORY[0x24BEE4B08];
  }
  v0[3] = v9;
  type metadata accessor for CTServiceDescriptor(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.default.getter();
  v11[1] = v7;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v11[0] + 104))(v4, *MEMORY[0x24BEE5750], v8);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t specialized NetworkActivityTracingInternal.start(label:activate:completion:)(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags();
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v21 = *(_QWORD *)(v12 - 8);
  v22 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v4 + 32);
  v16 = swift_allocObject();
  swift_weakInit();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  *(_BYTE *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  *(_BYTE *)(v17 + 48) = a2;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_63;
  v18 = _Block_copy(aBlock);
  v19 = v15;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a3);
  static DispatchQoS.unspecified.getter();
  v24 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v14, v11, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v22);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:)(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, char a5)
{
  uint64_t v5;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _DWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void);
  unint64_t v43;

  LOBYTE(v5) = a5;
  LOBYTE(v7) = a2;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = result;
    v10 = result + 16;
    swift_beginAccess();
    if (specialized Dictionary.subscript.getter(v7, *(_QWORD *)(v9 + 16)))
    {
      if (a3)
        a3();
      goto LABEL_5;
    }
    if (one-time initialization token for siriNetwork == -1)
      goto LABEL_7;
LABEL_54:
    swift_once();
LABEL_7:
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.siriNetwork);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (_DWORD *)swift_slowAlloc();
      swift_slowAlloc();
      *v14 = 136315394;
      __asm { BR              X10 }
    }

    if (v7 == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkActivity<NWConnection, NWActivity>);
      swift_allocObject();
      v15 = 1;
      v16 = 0;
    }
    else
    {
      v17 = specialized Dictionary.subscript.getter(1u, *(_QWORD *)v10);
      if (!v17 || (v18 = v17, swift_beginAccess(), v19 = *(_QWORD *)(v18 + 16), swift_retain(), swift_release(), !v19))
      {
        if (!a3)
        {
LABEL_5:
          swift_release();
          return swift_release();
        }
LABEL_50:
        a3();
        swift_release();
        return swift_release();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkActivity<NWConnection, NWActivity>);
      swift_allocObject();
      v15 = v7;
      v16 = v19;
    }
    v20 = specialized NetworkActivity.init(label:parentActivity:)(v15, v16);
    swift_beginAccess();
    v21 = swift_retain_n();
    specialized Dictionary._Variant.setValue(_:forKey:)(v21, v7);
    swift_endAccess();
    if ((v5 & 1) != 0)
      specialized NetworkActivity.activate()();
    v22 = (uint64_t *)(v9 + 24);
    swift_beginAccess();
    v23 = swift_bridgeObjectRetain();
    v24 = specialized Set.isEmpty.getter(v23);
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      v5 = *v22;
      v36 = a3;
      if ((*v22 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for NWConnection();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NWConnection and conformance NWConnection, (uint64_t (*)(uint64_t))MEMORY[0x24BDE0378], (uint64_t)&protocol conformance descriptor for NWConnection);
        Set.Iterator.init(_cocoa:)();
        v5 = v39;
        v37 = v40;
        v25 = v41;
        v26 = v42;
        v10 = v43;
      }
      else
      {
        v27 = -1 << *(_BYTE *)(v5 + 32);
        v37 = v5 + 56;
        v25 = ~v27;
        v28 = -v27;
        if (v28 < 64)
          v29 = ~(-1 << v28);
        else
          v29 = -1;
        v10 = v29 & *(_QWORD *)(v5 + 56);
        swift_bridgeObjectRetain();
        v26 = 0;
      }
      v7 = (unint64_t)(v25 + 64) >> 6;
      while ((v5 & 0x8000000000000000) == 0)
      {
        if (v10)
        {
          v31 = (v10 - 1) & v10;
          v32 = __clz(__rbit64(v10)) | ((_QWORD)v26 << 6);
          a3 = v26;
        }
        else
        {
          v33 = (int64_t)v26 + 1;
          if (__OFADD__(v26, 1))
          {
            __break(1u);
            goto LABEL_54;
          }
          if (v33 >= v7)
            goto LABEL_48;
          v34 = *(_QWORD *)(v37 + 8 * v33);
          a3 = (void (*)(void))((char *)v26 + 1);
          if (!v34)
          {
            a3 = (void (*)(void))((char *)v26 + 2);
            if ((uint64_t)v26 + 2 >= v7)
              goto LABEL_48;
            v34 = *(_QWORD *)(v37 + 8 * (_QWORD)a3);
            if (!v34)
            {
              a3 = (void (*)(void))((char *)v26 + 3);
              if ((uint64_t)v26 + 3 >= v7)
                goto LABEL_48;
              v34 = *(_QWORD *)(v37 + 8 * (_QWORD)a3);
              if (!v34)
              {
                a3 = (void (*)(void))((char *)v26 + 4);
                if ((uint64_t)v26 + 4 >= v7)
                  goto LABEL_48;
                v34 = *(_QWORD *)(v37 + 8 * (_QWORD)a3);
                if (!v34)
                {
                  v35 = (int64_t)v26 + 5;
                  while (v35 < v7)
                  {
                    v34 = *(_QWORD *)(v37 + 8 * v35++);
                    if (v34)
                    {
                      a3 = (void (*)(void))(v35 - 1);
                      goto LABEL_45;
                    }
                  }
                  goto LABEL_48;
                }
              }
            }
          }
LABEL_45:
          v31 = (v34 - 1) & v34;
          v32 = __clz(__rbit64(v34)) + ((_QWORD)a3 << 6);
        }
        v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v32);
        swift_retain();
LABEL_47:
        if (!v30)
          goto LABEL_48;
        specialized NetworkActivity.addConnection(_:)();
        swift_release();
        v26 = a3;
        v10 = v31;
      }
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NWConnection();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v30 = v38;
        swift_unknownObjectRelease();
        a3 = v26;
        v31 = v10;
        goto LABEL_47;
      }
LABEL_48:
      outlined consume of [String : UInt64].Iterator._Variant();
      a3 = v36;
    }
    *(_BYTE *)(v20 + 34) = 1;
    swift_release();
    if (!a3)
      goto LABEL_5;
    goto LABEL_50;
  }
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.activate(label:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  _QWORD v25[4];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v4 = v3;
  v26 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v25[3] = v8;
    v17 = (_DWORD *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *v17 = 136315138;
    v25[1] = a1;
    v25[2] = a3;
    __asm { BR              X10 }
  }

  v18 = *(void **)(v4 + 32);
  v19 = swift_allocObject();
  swift_weakInit();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  *(_BYTE *)(v20 + 24) = a1;
  v21 = v26;
  *(_QWORD *)(v20 + 32) = v26;
  *(_QWORD *)(v20 + 40) = a3;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_56_1;
  v22 = _Block_copy(aBlock);
  v23 = v18;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v21);
  static DispatchQoS.unspecified.getter();
  v29 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v13, v10, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:)(uint64_t a1, unsigned __int8 a2, void (*a3)(unint64_t))
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  char v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16))
    {
      v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v8 & 1) != 0)
      {
        swift_retain();
        specialized NetworkActivity.activate()();
        v7 = swift_release();
      }
    }
    if (a3)
      a3(v7);
    return swift_release();
  }
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.stop(label:reason:error:completion:)(char a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  _BYTE v23[12];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v24 = a2;
  v10 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for DispatchQoS();
  v25 = *(_QWORD *)(v13 - 8);
  v26 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *(void **)(v5 + 32);
  v17 = swift_allocObject();
  swift_weakInit();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  *(_BYTE *)(v18 + 24) = a1;
  *(_BYTE *)(v18 + 25) = v24;
  *(_QWORD *)(v18 + 32) = a3;
  *(_QWORD *)(v18 + 40) = a4;
  *(_QWORD *)(v18 + 48) = a5;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_49_0;
  v19 = _Block_copy(aBlock);
  v20 = v16;
  swift_retain();
  v21 = a3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a4);
  static DispatchQoS.unspecified.getter();
  v28 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v15, v12, v19);
  _Block_release(v19);

  (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v12, v10);
  (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v15, v26);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:)(uint64_t a1, int a2, uint64_t a3, void *a4, int64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  void *v67;
  NSObject *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int EnumTagSinglePayload;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  _QWORD v83[6];
  uint64_t v84;
  char *v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  __int128 v96;
  int v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[7];

  v88 = a6;
  v110[6] = *MEMORY[0x24BDAC8D0];
  v101 = type metadata accessor for UUID();
  v92 = *(_QWORD *)(v101 - 8);
  v10 = MEMORY[0x24BDAC7A8](v101);
  v90 = (char *)v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v91 = (char *)v83 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v87 = (uint64_t)v83 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v100 = (uint64_t)v83 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v107 = ((char *)v83 - v21);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v23 = result;
    v99 = a3;
    v85 = v16;
    if (a2 == 1)
    {
      v86 = a5;
      swift_beginAccess();
      v84 = v23;
      v24 = *(_QWORD *)(v23 + 16);
      v27 = *(_QWORD *)(v24 + 64);
      v26 = v24 + 64;
      v25 = v27;
      v28 = 1 << *(_BYTE *)(*(_QWORD *)(v23 + 16) + 32);
      v29 = -1;
      if (v28 < 64)
        v29 = ~(-1 << v28);
      v30 = v29 & v25;
      v31 = (unint64_t)(v28 + 63) >> 6;
      v89 = v110;
      v32 = swift_bridgeObjectRetain();
      a5 = 0;
      *(_QWORD *)&v33 = 136315906;
      v96 = v33;
      v95 = "SiriNetworkActivityUnknown";
      v94 = a3;
      v93 = MEMORY[0x24BEE4AD8] + 8;
      v83[5] = "SiriNetworkActivitySucceeded";
      v83[4] = "SiriNetworkActivityTimedOut";
      v83[3] = "SiriNetworkActivityFailed";
      v83[2] = "SiriNetworkActivityCancelled";
      v83[1] = "remoteRequestExecution";
      v97 = a2;
      v34 = 0x254436000uLL;
      v98 = a4;
      v105 = v26;
      v106 = v32;
      v104 = v31;
      while (1)
      {
        if (v30)
        {
          v35 = __clz(__rbit64(v30));
          v30 &= v30 - 1;
          v36 = v35 | (a5 << 6);
        }
        else
        {
          v37 = a5 + 1;
          if (__OFADD__(a5, 1))
          {
            __break(1u);
            goto LABEL_48;
          }
          if (v37 >= v31)
            goto LABEL_32;
          v38 = *(_QWORD *)(v26 + 8 * v37);
          ++a5;
          if (!v38)
          {
            a5 = v37 + 1;
            if (v37 + 1 >= v31)
              goto LABEL_32;
            v38 = *(_QWORD *)(v26 + 8 * a5);
            if (!v38)
            {
              a5 = v37 + 2;
              if (v37 + 2 >= v31)
                goto LABEL_32;
              v38 = *(_QWORD *)(v26 + 8 * a5);
              if (!v38)
              {
                v39 = v37 + 3;
                if (v39 >= v31)
                {
LABEL_32:
                  swift_release();
                  a5 = v86;
                  v23 = v84;
                  break;
                }
                v38 = *(_QWORD *)(v26 + 8 * v39);
                if (!v38)
                {
                  while (1)
                  {
                    a5 = v39 + 1;
                    if (__OFADD__(v39, 1))
                      break;
                    if (a5 >= v31)
                      goto LABEL_32;
                    v38 = *(_QWORD *)(v26 + 8 * a5);
                    ++v39;
                    if (v38)
                      goto LABEL_21;
                  }
LABEL_48:
                  __break(1u);
LABEL_49:
                  swift_once();
LABEL_36:
                  v64 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v64, (uint64_t)static Logger.siriNetwork);
                  swift_retain_n();
                  v65 = a4;
                  swift_retain();
                  v66 = a4;
                  swift_retain();
                  v67 = a4;
                  v68 = Logger.logObject.getter();
                  v69 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v68, (os_log_type_t)v69))
                  {
                    v98 = v67;
                    v86 = a5;
                    v70 = swift_slowAlloc();
                    v105 = swift_slowAlloc();
                    v109 = swift_slowAlloc();
                    *(_DWORD *)v70 = 136315906;
                    LOBYTE(v108) = *(_BYTE *)(v34 + 35);
                    v71 = String.init<A>(describing:)();
                    v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v109);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    v73 = (uint64_t)v85;
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v70 + 12) = 2080;
                    v74 = v87;
                    specialized NetworkActivity.token.getter(v87);
                    outlined init with copy of UUID?(v74, v73);
                    v75 = v101;
                    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v73, 1, v101);
                    v107 = v68;
                    LODWORD(v106) = v69;
                    if (EnumTagSinglePayload == 1)
                    {
                      v77 = 0;
                      v78 = 0xE000000000000000;
                    }
                    else
                    {
                      v79 = v92;
                      v80 = v91;
                      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v91, v73, v75);
                      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v90, v80, v75);
                      v77 = String.init<A>(describing:)();
                      v78 = v81;
                      v82 = v80;
                      v74 = v87;
                      (*(void (**)(char *, uint64_t))(v79 + 8))(v82, v75);
                    }
                    outlined destroy of RPCOspreyConnectionProtocol?(v74, &demangling cache variable for type metadata for UUID?);
                    v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v109);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v70 + 22) = 2080;
                    __asm { BR              X10 }
                  }
                  swift_release_n();

                  *(_BYTE *)(v34 + 34) = 0;
                  specialized NetworkActivity.stop(completionReason:error:)(a3, v67);
                  goto LABEL_42;
                }
                a5 = v39;
              }
            }
          }
LABEL_21:
          v30 = (v38 - 1) & v38;
          v36 = __clz(__rbit64(v38)) + (a5 << 6);
        }
        v40 = *(_BYTE **)(*(_QWORD *)(v32 + 56) + 8 * v36);
        if (v40[32] == 1 && v40[34] == 1)
        {
          v41 = one-time initialization token for siriNetwork;
          swift_retain();
          if (v41 != -1)
            swift_once();
          v42 = type metadata accessor for Logger();
          __swift_project_value_buffer(v42, (uint64_t)static Logger.siriNetwork);
          swift_retain_n();
          v43 = a4;
          swift_retain();
          v44 = a4;
          v45 = Logger.logObject.getter();
          v46 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v45, v46))
          {
            v47 = swift_slowAlloc();
            v102 = swift_slowAlloc();
            v48 = swift_slowAlloc();
            v110[0] = v48;
            *(_DWORD *)v47 = v96;
            LOBYTE(v109) = v40[35];
            v49 = String.init<A>(describing:)();
            *(_QWORD *)(v47 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v110);
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v47 + 12) = 2080;
            v51 = (uint64_t)v107;
            specialized NetworkActivity.token.getter((uint64_t)v107);
            v52 = v51;
            v53 = v100;
            outlined init with copy of UUID?(v52, v100);
            v54 = v101;
            v55 = __swift_getEnumTagSinglePayload(v53, 1, v101);
            v103 = v48;
            if (v55 == 1)
            {
              v56 = 0;
              v57 = 0xE000000000000000;
            }
            else
            {
              v58 = v92;
              v59 = v91;
              (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v91, v53, v54);
              (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v90, v59, v54);
              v60 = String.init<A>(describing:)();
              v61 = v54;
              v56 = v60;
              v57 = v62;
              (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v61);
            }
            outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v107, &demangling cache variable for type metadata for UUID?);
            *(_QWORD *)(v47 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v110);
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v47 + 22) = 2080;
            __asm { BR              X8 }
          }
          swift_release_n();

          v40[34] = 0;
          specialized NetworkActivity.stop(completionReason:error:)(a3, a4);
          swift_release();
          v26 = v105;
          v32 = v106;
          v31 = v104;
        }
      }
    }
    swift_beginAccess();
    v63 = specialized Dictionary.subscript.getter(a2, *(_QWORD *)(v23 + 16));
    if (v63)
    {
      v34 = v63;
      if (*(_BYTE *)(v63 + 34) == 1)
      {
        if (one-time initialization token for siriNetwork != -1)
          goto LABEL_49;
        goto LABEL_36;
      }
LABEL_42:
      v63 = swift_release();
    }
    if (a5)
      ((void (*)(uint64_t))a5)(v63);
    return swift_release();
  }
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.tracingCancel(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_246EC7000, v13, v14, "NetworkActivity Tracing: Remove all activities, and connections.", v15, 2u);
    MEMORY[0x24956E018](v15, -1, -1);
  }

  v16 = *(void **)(v3 + 32);
  v17 = swift_allocObject();
  swift_weakInit();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v17;
  v18[3] = a1;
  v18[4] = a2;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_42;
  v19 = _Block_copy(aBlock);
  v20 = v16;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v11, v8, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v23);
  swift_release();
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NetworkActivityLabel : NetworkActivity<NWConnection, NWActivity>]._Variant);
    Dictionary._Variant.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    swift_beginAccess();
    *(_QWORD *)(v4 + 24) = MEMORY[0x24BEE4B08];
    v5 = swift_bridgeObjectRelease();
    if (a2)
      a2(v5);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v6 = result;
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain();
  specialized Set.contains(_:)(a2, v7);
  v9 = v8;
  v10 = swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_24:
    if (a3)
      a3(v10);
    return swift_release();
  }
  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  v11 = *(_QWORD *)(v6 + 16);
  v14 = *(_QWORD *)(v11 + 64);
  v13 = v11 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(*(_QWORD *)(v6 + 16) + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v18 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  if (!v17)
    goto LABEL_7;
LABEL_6:
  for (v17 &= v17 - 1; ; v17 = (v21 - 1) & v21)
  {
    swift_retain();
    specialized NetworkActivity.addConnection(_:)();
    result = swift_release();
    if (v17)
      goto LABEL_6;
LABEL_7:
    v20 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v18)
      goto LABEL_23;
    v21 = *(_QWORD *)(v13 + 8 * v20);
    ++v19;
    if (!v21)
    {
      v19 = v20 + 1;
      if (v20 + 1 >= v18)
        goto LABEL_23;
      v21 = *(_QWORD *)(v13 + 8 * v19);
      if (!v21)
      {
        v19 = v20 + 2;
        if (v20 + 2 >= v18)
          goto LABEL_23;
        v21 = *(_QWORD *)(v13 + 8 * v19);
        if (!v21)
          break;
      }
    }
LABEL_20:
    ;
  }
  v22 = v20 + 3;
  if (v22 >= v18)
  {
LABEL_23:
    v10 = swift_release();
    goto LABEL_24;
  }
  v21 = *(_QWORD *)(v13 + 8 * v22);
  if (v21)
  {
    v19 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v19 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v19 >= v18)
      goto LABEL_23;
    v21 = *(_QWORD *)(v13 + 8 * v19);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized NetworkActivityTracingInternal.addConnection(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  _QWORD v29[4];
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];

  v32 = a5;
  v33 = a6;
  v30 = a4;
  v34 = a2;
  v10 = type metadata accessor for DispatchWorkItemFlags();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS();
  v35 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    v29[3] = v11;
    v21 = v20;
    v29[1] = v13;
    v29[2] = v16;
    *(_DWORD *)v20 = 134217984;
    aBlock[0] = NWConnection.identifier.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_246EC7000, v18, v19, v30, v21, 0xCu);
    OUTLINED_FUNCTION_0_4();
  }

  swift_release();
  v22 = *(void **)(v31 + 32);
  v23 = OUTLINED_FUNCTION_6();
  swift_weakInit();
  v24 = (_QWORD *)OUTLINED_FUNCTION_6();
  v24[2] = v23;
  v24[3] = a1;
  v25 = v33;
  v26 = v34;
  v24[4] = v34;
  v24[5] = a3;
  aBlock[4] = v25;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a7;
  v27 = _Block_copy(aBlock);
  swift_retain();
  v28 = v22;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v26);
  static DispatchQoS.unspecified.getter();
  v37 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v16, v13, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_1_1();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v5 = result;
  swift_beginAccess();
  v6 = specialized Set._Variant.remove(_:)();
  swift_endAccess();
  v7 = swift_release();
  if (!v6)
  {
LABEL_24:
    if (a3)
      a3(v7);
    return swift_release();
  }
  swift_beginAccess();
  v8 = *(_QWORD *)(v5 + 16);
  v11 = *(_QWORD *)(v8 + 64);
  v10 = v8 + 64;
  v9 = v11;
  v12 = 1 << *(_BYTE *)(*(_QWORD *)(v5 + 16) + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v9;
  v15 = (unint64_t)(v12 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  if (!v14)
    goto LABEL_7;
LABEL_6:
  for (v14 &= v14 - 1; ; v14 = (v18 - 1) & v18)
  {
    swift_retain();
    specialized NetworkActivity.removeConnection(_:)();
    result = swift_release();
    if (v14)
      goto LABEL_6;
LABEL_7:
    v17 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v17 >= v15)
      goto LABEL_23;
    v18 = *(_QWORD *)(v10 + 8 * v17);
    ++v16;
    if (!v18)
    {
      v16 = v17 + 1;
      if (v17 + 1 >= v15)
        goto LABEL_23;
      v18 = *(_QWORD *)(v10 + 8 * v16);
      if (!v18)
      {
        v16 = v17 + 2;
        if (v17 + 2 >= v15)
          goto LABEL_23;
        v18 = *(_QWORD *)(v10 + 8 * v16);
        if (!v18)
          break;
      }
    }
LABEL_20:
    ;
  }
  v19 = v17 + 3;
  if (v19 >= v15)
  {
LABEL_23:
    v7 = swift_release();
    goto LABEL_24;
  }
  v18 = *(_QWORD *)(v10 + 8 * v19);
  if (v18)
  {
    v16 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v16 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v16 >= v15)
      goto LABEL_23;
    v18 = *(_QWORD *)(v10 + 8 * v16);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized NetworkActivityTracingInternal.currentNetworkActivityToken(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v2 + 32);
  v12 = swift_allocObject();
  swift_weakInit();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = partial apply for specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_35;
  v14 = _Block_copy(aBlock);
  v15 = v11;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a1);
  static DispatchQoS.unspecified.getter();
  v20 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v10, v7, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for NetworkActivityTracing()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type NetworkActivityLabel and conformance NetworkActivityLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel;
  if (!lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkActivityLabel, &type metadata for NetworkActivityLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel;
  if (!lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkActivityLabel, &type metadata for NetworkActivityLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityLabel and conformance NetworkActivityLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason;
  if (!lazy protocol witness table cache variable for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkActivityCompletionReason, &type metadata for NetworkActivityCompletionReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityCompletionReason and conformance NetworkActivityCompletionReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel;
  if (!lazy protocol witness table cache variable for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for NetworkActivityParentLabel, &type metadata for NetworkActivityParentLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkActivityParentLabel and conformance NetworkActivityParentLabel);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NetworkActivityLabel(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 10) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v5 = v6 - 11;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkActivityLabel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_246F299D8 + 4 * byte_246F7458B[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_246F29A0C + 4 * byte_246F74586[v4]))();
}

uint64_t sub_246F29A0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F29A14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246F29A1CLL);
  return result;
}

uint64_t sub_246F29A28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246F29A30);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_246F29A34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F29A3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for NetworkActivityLabel()
{
  OUTLINED_FUNCTION_8_12();
}

uint64_t getEnumTagSinglePayload for NetworkActivityCompletionReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkActivityCompletionReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_246F29B28 + 4 * byte_246F74595[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_246F29B5C + 4 * byte_246F74590[v4]))();
}

uint64_t sub_246F29B5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F29B64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246F29B6CLL);
  return result;
}

uint64_t sub_246F29B78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246F29B80);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_246F29B84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F29B8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for NetworkActivityCompletionReason()
{
  OUTLINED_FUNCTION_8_12();
}

uint64_t getEnumTagSinglePayload for NetworkActivityParentLabel(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for NetworkActivityParentLabel(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_246F29C38 + 4 * byte_246F7459A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_246F29C58 + 4 * byte_246F7459F[v4]))();
}

_BYTE *sub_246F29C38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_246F29C58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_246F29C60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_246F29C68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_246F29C70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_246F29C78(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for NetworkActivityParentLabel()
{
  OUTLINED_FUNCTION_8_12();
}

uint64_t method lookup function for NetworkActivityTracing()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkActivityTracing.start(label:activate:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of NetworkActivityTracing.activate(label:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of NetworkActivityTracing.stop(label:reason:error:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of NetworkActivityTracing.tracingCancel(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of NetworkActivityTracing.currentNetworkActivityToken(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t type metadata completion function for NetworkActivityTracingInternal()
{
  return swift_initClassMetadata2();
}

void specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:)(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _BYTE *v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE v32[12];
  int v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v32[-v9];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = &v32[-v16];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v32[-v18];
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v21 = Strong;
    v37 = a3;
    swift_beginAccess();
    if (specialized Dictionary.subscript.getter(1u, *(_QWORD *)(v21 + 16)))
    {
      specialized NetworkActivity.token.getter((uint64_t)v19);
      swift_release();
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 1, 1, v5);
    }
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.siriNetwork);
    outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v17);
    v23 = Logger.logObject.getter();
    LODWORD(v24) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      v35 = a2;
      v25 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v39 = v34;
      *(_DWORD *)v25 = 136315138;
      outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v14);
      if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v5) == 1)
      {
        v26 = 0xE100000000000000;
        v27 = 45;
      }
      else
      {
        v33 = (int)v24;
        v24 = v10;
        v28 = v36;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 32))(v24, v14, v5);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16))(v8, v24, v5);
        v27 = String.init<A>(describing:)();
        v26 = v29;
        v30 = v24;
        LOBYTE(v24) = v33;
        (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v30, v5);
      }
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_246EC7000, v23, (os_log_type_t)v24, "NetworkActivity Tracing: Current Network Activity Token: %s", v25, 0xCu);
      v31 = v34;
      swift_arrayDestroy();
      MEMORY[0x24956E018](v31, -1, -1);
      MEMORY[0x24956E018](v25, -1, -1);

      a2 = v35;
    }
    else
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);

    }
    if (a2)
    {
      a2(v19);
      swift_release();
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      swift_release();
    }
  }
}

uint64_t NetworkActivityTracingInternal.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t NetworkActivityTracingInternal.__deallocating_deinit()
{
  NetworkActivityTracingInternal.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for NetworkActivityTracingInternal()
{
  JUMPOUT(0x24956DF1CLL);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt64)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_246F2A218()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  Swift::UInt64 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NWConnection>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_25;
LABEL_9:
  v6 = 0;
  v7 = v3 + 56;
  v23 = v4;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      result = MEMORY[0x24956D43C](v6, v1);
      v8 = result;
    }
    else
    {
      if (v6 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_28;
      v8 = *(_QWORD *)(v1 + 32 + 8 * v6);
      result = swift_retain();
    }
    v9 = __OFADD__(v6++, 1);
    if (v9)
      break;
    Hasher.init(_seed:)();
    v10 = NWConnection.identifier.getter();
    Hasher._combine(_:)(v10);
    result = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v3 + 32);
    v12 = result & ~v11;
    v13 = v12 >> 6;
    v14 = *(_QWORD *)(v7 + 8 * (v12 >> 6));
    v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      swift_retain();
      v16 = NWConnection.identifier.getter();
      v17 = NWConnection.identifier.getter();
      result = swift_release();
      if (v16 == v17)
      {
LABEL_20:
        result = swift_release();
        v4 = v23;
        goto LABEL_24;
      }
      v18 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v18;
        v13 = v12 >> 6;
        v14 = *(_QWORD *)(v7 + 8 * (v12 >> 6));
        v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0)
          break;
        swift_retain();
        v19 = NWConnection.identifier.getter();
        v20 = NWConnection.identifier.getter();
        result = swift_release();
        if (v19 == v20)
          goto LABEL_20;
      }
      v4 = v23;
    }
    *(_QWORD *)(v7 + 8 * v13) = v15 | v14;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) = v8;
    v21 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v21, 1);
    v22 = v21 + 1;
    if (v9)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v22;
LABEL_24:
    if (v6 == v4)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t))
{
  return specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(a1, *a2, a3);
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)()
{
  uint64_t v0;

  return specialized closure #1 in NetworkActivityTracingInternal.removeConnection(_:completion:)(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t))
{
  return specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(a1, *a2, a3);
}

uint64_t objectdestroy_2Tm_0()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();
  swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)()
{
  uint64_t v0;

  return specialized closure #1 in NetworkActivityTracingInternal.addConnection(_:completion:)(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t sub_246F2A554()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSUUID?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSUUID?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:)()
{
  uint64_t v0;

  specialized closure #1 in NetworkActivityTracingInternal.currentNetworkActivityToken(_:)(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t objectdestroy_31Tm()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:)()
{
  uint64_t v0;

  return specialized closure #1 in NetworkActivityTracingInternal.tracingCancel(completion:)(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

uint64_t sub_246F2A60C()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();

  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:)()
{
  uint64_t v0;

  return specialized closure #1 in NetworkActivityTracingInternal.stop(label:reason:error:completion:)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(unsigned __int8 *)(v0 + 25), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_246F2A65C()
{
  return objectdestroy_52Tm();
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:)()
{
  uint64_t v0;

  return specialized closure #1 in NetworkActivityTracingInternal.activate(label:completion:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void (**)(unint64_t))(v0 + 32));
}

uint64_t sub_246F2A674()
{
  return objectdestroy_52Tm();
}

uint64_t objectdestroy_52Tm()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:)()
{
  uint64_t v0;

  return specialized closure #1 in NetworkActivityTracingInternal.start(label:activate:completion:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
}

uint64_t OUTLINED_FUNCTION_0_31()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_5_19(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((unint64_t)(a1 - 1) < 0xA)
    v2 = a1;
  else
    v2 = 0;
  *(_BYTE *)(v1 - 1) = v2;
  return v1 - 1;
}

id ConnectionTCPInfoMetrics.snConnectionTCPInfoMetrics.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  id v28;
  id v29;
  id v30;
  int v31;
  uint64_t v32;
  id v33;
  int v34;
  uint64_t v35;
  id v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  int v42;
  uint64_t v43;
  id v44;
  int v45;
  unsigned int v46;
  id v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;

  v32 = *(_QWORD *)(v0 + 88);
  v31 = *(unsigned __int8 *)(v0 + 96);
  v35 = *(_QWORD *)(v0 + 104);
  v34 = *(unsigned __int8 *)(v0 + 112);
  v40 = *(_QWORD *)(v0 + 120);
  v38 = *(unsigned __int8 *)(v0 + 128);
  v43 = *(_QWORD *)(v0 + 200);
  v42 = *(unsigned __int8 *)(v0 + 208);
  v39 = *(_QWORD *)(v0 + 216);
  v37 = *(unsigned __int8 *)(v0 + 224);
  v45 = *(unsigned __int8 *)(v0 + 232);
  v46 = *(_DWORD *)(v0 + 228);
  v48 = *(unsigned __int8 *)(v0 + 240);
  v49 = *(_DWORD *)(v0 + 236);
  if (*(_QWORD *)(v0 + 8))
  {
    v50 = *(_QWORD *)(v0 + 8);
    v51 = *(_QWORD *)v0;
  }
  else
  {
    v50 = 0xE000000000000000;
    v51 = 0;
  }
  if (*(_BYTE *)(v0 + 176))
    v1 = 0;
  else
    v1 = *(unsigned int *)(v0 + 172);
  v2 = OUTLINED_FUNCTION_0_32();
  swift_bridgeObjectRetain();
  v47 = objc_msgSend(v2, sel_initWithUnsignedInt_, v1);
  v3 = OUTLINED_FUNCTION_0_32();
  v44 = OUTLINED_FUNCTION_2_21(v3);
  v4 = OUTLINED_FUNCTION_0_32();
  v41 = OUTLINED_FUNCTION_2_21(v4);
  v5 = OUTLINED_FUNCTION_0_32();
  v36 = OUTLINED_FUNCTION_2_21(v5);
  v6 = OUTLINED_FUNCTION_0_32();
  v33 = OUTLINED_FUNCTION_1_27(v6);
  v7 = OUTLINED_FUNCTION_0_32();
  v30 = OUTLINED_FUNCTION_1_27(v7);
  v8 = OUTLINED_FUNCTION_0_32();
  v28 = OUTLINED_FUNCTION_1_27(v8);
  v9 = OUTLINED_FUNCTION_0_32();
  v29 = OUTLINED_FUNCTION_1_27(v9);
  v10 = OUTLINED_FUNCTION_0_32();
  v11 = OUTLINED_FUNCTION_1_27(v10);
  if (v31)
    v12 = 0;
  else
    v12 = v32;
  v13 = objc_msgSend(OUTLINED_FUNCTION_0_32(), sel_initWithUnsignedLongLong_, v12);
  if (v34)
    v14 = 0;
  else
    v14 = v35;
  v15 = objc_msgSend(OUTLINED_FUNCTION_0_32(), sel_initWithUnsignedLongLong_, v14);
  if (v38)
    v16 = 0;
  else
    v16 = v40;
  v17 = objc_msgSend(OUTLINED_FUNCTION_0_32(), sel_initWithUnsignedLongLong_, v16);
  if (v37)
    v18 = 0;
  else
    v18 = v39;
  v19 = objc_msgSend(OUTLINED_FUNCTION_0_32(), sel_initWithUnsignedLongLong_, v18);
  if (v42)
    v20 = 0;
  else
    v20 = v43;
  v21 = objc_msgSend(OUTLINED_FUNCTION_0_32(), sel_initWithUnsignedLongLong_, v20);
  if (v45)
    v22 = 0;
  else
    v22 = v46;
  v23 = objc_msgSend(OUTLINED_FUNCTION_0_32(), sel_initWithUnsignedInt_, v22);
  if (v48)
    v24 = 0;
  else
    v24 = v49;
  v25 = objc_msgSend(OUTLINED_FUNCTION_0_32(), (SEL)&selRef__cxx_destruct + 6, v24);
  v26 = objc_allocWithZone((Class)SNConnectionTCPInfoMetrics);
  return @nonobjc SNConnectionTCPInfoMetrics.init(interfaceName:rttCurrent:rttSmoothed:rttVariance:rttBest:packetsSent:packetsReceived:bytesSent:bytesReceived:bytesRetransmitted:bytesUnacked:duplicateBytesReceived:outOfOrderBytesReceived:sendBufferBytes:sendBandwidth:synRetransmits:tfoSynDataAcked:)(v51, v50, v47, v44, v41, v36, v33, v30, v28, v29, v11, v13, v15, v17, v19, v21, v23, v25);
}

id @nonobjc SNConnectionTCPInfoMetrics.init(interfaceName:rttCurrent:rttSmoothed:rttVariance:rttBest:packetsSent:packetsReceived:bytesSent:bytesReceived:bytesRetransmitted:bytesUnacked:duplicateBytesReceived:outOfOrderBytesReceived:sendBufferBytes:sendBandwidth:synRetransmits:tfoSynDataAcked:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v20;
  void *v26;
  id v27;

  v20 = (void *)MEMORY[0x24956D034]();
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v26, sel_initWithInterfaceName_rttCurrent_rttSmoothed_rttVariance_rttBest_packetsSent_packetsReceived_bytesSent_bytesReceived_bytesRetransmitted_bytesUnacked_duplicateBytesReceived_outOfOrderBytesReceived_sendBufferBytes_sendBandwidth_synRetransmits_tfoSynDataAcked_, v20, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);

  return v27;
}

id OUTLINED_FUNCTION_0_32()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 1760));
}

id OUTLINED_FUNCTION_1_27(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(a1, (SEL)(v2 + 140), v1);
}

id OUTLINED_FUNCTION_2_21(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(a1, (SEL)(v2 + 30), v1);
}

uint64_t QueueMonitorManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t QueueMonitorManager.__deallocating_deinit()
{
  QueueMonitorManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for QueueMonitorManager()
{
  return objc_opt_self();
}

uint64_t QueueObserver.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t QueueObserver.__deallocating_deinit()
{
  QueueObserver.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for QueueObserver()
{
  return objc_opt_self();
}

uint64_t QueueMonitor.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC11SiriNetwork12QueueMonitor_initialWaitingTime;
  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(*(_QWORD *)(v0 + OBJC_IVAR____TtC11SiriNetwork12QueueMonitor_handler));
  return v0;
}

uint64_t QueueMonitor.__deallocating_deinit()
{
  QueueMonitor.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for QueueMonitor()
{
  return type metadata accessor for QueueMonitor();
}

uint64_t type metadata accessor for QueueMonitor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for QueueMonitor;
  if (!type metadata singleton initialization cache for QueueMonitor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for QueueMonitor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t destroy for ConnectionNetworkReport()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionNetworkReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v9 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v10;
  v11 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v11;
  v12 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v12;
  v13 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v13;
  *(_BYTE *)(a1 + 265) = *(_BYTE *)(a2 + 265);
  v14 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v14;
  v15 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v15;
  v16 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionNetworkReport(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *((_QWORD *)a2 + 3);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[22];
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(a1 + 88) = v6;
  LOBYTE(v6) = *((_BYTE *)a2 + 100);
  *(_DWORD *)(a1 + 96) = a2[24];
  *(_BYTE *)(a1 + 100) = v6;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 16);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 128) = v7;
  v8 = *((_QWORD *)a2 + 18);
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_QWORD *)(a1 + 144) = v8;
  v9 = *((_QWORD *)a2 + 20);
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_QWORD *)(a1 + 160) = v9;
  v10 = *((_QWORD *)a2 + 22);
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(_QWORD *)(a1 + 176) = v10;
  v11 = *((_QWORD *)a2 + 24);
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(a1 + 192) = v11;
  v12 = *((_QWORD *)a2 + 26);
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(_QWORD *)(a1 + 208) = v12;
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *((_QWORD *)a2 + 30);
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  *(_QWORD *)(a1 + 240) = v13;
  v14 = *((_QWORD *)a2 + 32);
  *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
  *(_QWORD *)(a1 + 256) = v14;
  *(_BYTE *)(a1 + 265) = *((_BYTE *)a2 + 265);
  v15 = *((_QWORD *)a2 + 34);
  *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 280);
  *(_QWORD *)(a1 + 272) = v15;
  v16 = *((_QWORD *)a2 + 36);
  *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
  *(_QWORD *)(a1 + 288) = v16;
  v17 = *((_QWORD *)a2 + 38);
  *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
  *(_QWORD *)(a1 + 304) = v17;
  return a1;
}

void *__swift_memcpy313_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t assignWithTake for ConnectionNetworkReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v9 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v10 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_BYTE *)(a1 + 265) = *(_BYTE *)(a2 + 265);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionNetworkReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 313))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 104);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionNetworkReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 313) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 313) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionNetworkReport()
{
  return &type metadata for ConnectionNetworkReport;
}

uint64_t ConnectionNetworkReport.firstByteTimeInMs.getter()
{
  uint64_t v0;
  double v1;
  uint64_t result;
  _BYTE v3[16];
  double v4;
  char v5;

  outlined init with take of Double?(v0 + 256, (uint64_t)v3);
  outlined init with take of Double?((uint64_t)v3, (uint64_t)&v4);
  if ((v5 & 1) == 0 && v4 > 0.0)
  {
    v1 = v4 * 1000.0;
    if (v4 * 1000.0 <= -9.22337204e18)
      goto LABEL_14;
    if (v1 >= 9.22337204e18)
      return 0x7FFFFFFFFFFFFFFFLL;
    if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
    {
      if (v1 > -9.22337204e18)
      {
        result = (uint64_t)v1;
        if (((uint64_t)v1 & 0x8000000000000000) == 0)
          return result;
LABEL_14:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  return 0;
}

uint64_t ConnectionNetworkReport.openTimeInMs.getter()
{
  uint64_t v0;
  uint64_t result;
  double v2;

  result = *(uint64_t *)(v0 + 240);
  if ((*(_BYTE *)(v0 + 248) & 1) == 0)
  {
    v2 = *(double *)&result * 1000.0;
    *(double *)&result = -9.22337204e18;
    if (v2 > -9.22337204e18)
    {
      *(double *)&result = 9.22337204e18;
      if (v2 < 9.22337204e18)
      {
        if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) != 0)
        {
          if (v2 > -9.22337204e18)
          {
            *(double *)&result = (double)(uint64_t)v2;
            return result;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t ConnectionNetworkReport.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;

  v2 = 0x6E776F6E6B6E75;
  OUTLINED_FUNCTION_16_10(*(_DWORD *)v0);
  v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_11_14(v48);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v47 = v3;
  if (*(_QWORD *)(v0 + 16))
    v1 = *(_QWORD *)(v0 + 8);
  else
    OUTLINED_FUNCTION_5_20();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5(v1);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v46 = v4;
  _StringGuts.grow(_:)(21);
  OUTLINED_FUNCTION_13_11(0xD000000000000013, (uint64_t)"signalStrengthBars ");
  Double.write<A>(to:)();
  if (*(_QWORD *)(v0 + 48))
    v1 = *(_QWORD *)(v0 + 40);
  else
    OUTLINED_FUNCTION_5_20();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5(v1);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v45 = v5;
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_7_16();
  if (*(_QWORD *)(v0 + 64))
    v1 = *(_QWORD *)(v0 + 56);
  else
    OUTLINED_FUNCTION_5_20();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5(v1);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v44 = v6;
  _StringGuts.grow(_:)(30);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_14_8((uint64_t)"primarySubflowInterfaceName ");
  if (*(_QWORD *)(v0 + 80))
    v1 = *(_QWORD *)(v0 + 72);
  else
    OUTLINED_FUNCTION_5_20();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5(v1);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v43 = v7;
  OUTLINED_FUNCTION_16_10(*(_DWORD *)(v0 + 88));
  v49._countAndFlagsBits = OUTLINED_FUNCTION_4_19();
  OUTLINED_FUNCTION_10_11(v49);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_6_12();
  v42 = v8;
  _StringGuts.grow(_:)(24);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_8_13(0xD000000000000016);
  OUTLINED_FUNCTION_16_10(*(_DWORD *)(v0 + 96));
  v50._countAndFlagsBits = OUTLINED_FUNCTION_4_19();
  OUTLINED_FUNCTION_11_14(v50);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v41 = v9;
  _StringGuts.grow(_:)(22);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_14_8((uint64_t)"subflowSwitchCounts ");
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = Dictionary.description.getter();
  object = v10._object;
  String.append(_:)(v10);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_8_2();
  _StringGuts.grow(_:)(19);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_14_8((uint64_t)"connectionMethod ");
  if (*(_QWORD *)(v0 + 120))
    object = *(void **)(v0 + 112);
  else
    OUTLINED_FUNCTION_5_20();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5((uint64_t)object);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v40 = v12;
  _StringGuts.grow(_:)(24);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_8_13(0xD000000000000016);
  v51._countAndFlagsBits = OUTLINED_FUNCTION_4_19();
  OUTLINED_FUNCTION_10_11(v51);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_6_12();
  v39 = v13;
  _StringGuts.grow(_:)(27);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_8_13(0xD000000000000019);
  v52._countAndFlagsBits = OUTLINED_FUNCTION_3_18(*(_QWORD *)(v0 + 144));
  OUTLINED_FUNCTION_10_11(v52);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_6_12();
  v38 = v14;
  _StringGuts.grow(_:)(34);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_8_13(0xD000000000000020);
  v53._countAndFlagsBits = OUTLINED_FUNCTION_3_18(*(_QWORD *)(v0 + 160));
  OUTLINED_FUNCTION_10_11(v53);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_6_12();
  v37 = v15;
  _StringGuts.grow(_:)(41);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_8_13(0xD000000000000027);
  v54._countAndFlagsBits = OUTLINED_FUNCTION_3_18(*(_QWORD *)(v0 + 176));
  OUTLINED_FUNCTION_10_11(v54);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_6_12();
  v36 = v16;
  _StringGuts.grow(_:)(36);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_8_13(0xD000000000000022);
  v55._countAndFlagsBits = OUTLINED_FUNCTION_3_18(*(_QWORD *)(v0 + 192));
  OUTLINED_FUNCTION_10_11(v55);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_6_12();
  v35 = v17;
  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_7_16();
  v56._countAndFlagsBits = OUTLINED_FUNCTION_3_18(*(_QWORD *)(v0 + 208));
  OUTLINED_FUNCTION_11_14(v56);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v34 = v18;
  if (*(_QWORD *)(v0 + 232))
    v2 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_9_5(v2);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_12();
  v33 = v19;
  v20._countAndFlagsBits = 0x656D69546E65706FLL;
  v20._object = (void *)0xED000020734D6E49;
  String.append(_:)(v20);
  ConnectionNetworkReport.openTimeInMs.getter();
  Double.write<A>(to:)();
  OUTLINED_FUNCTION_6_12();
  v32 = v21;
  _StringGuts.grow(_:)(20);
  OUTLINED_FUNCTION_7_16();
  OUTLINED_FUNCTION_8_13(0xD000000000000012);
  ConnectionNetworkReport.firstByteTimeInMs.getter();
  v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  OUTLINED_FUNCTION_11_14(v57);
  OUTLINED_FUNCTION_8_2();
  if ((*(_BYTE *)(v0 + 265) & 1) != 0)
    v22 = 1702195828;
  else
    v22 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 265) & 1) != 0)
    v23 = 0xE400000000000000;
  else
    v23 = 0xE500000000000000;
  v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  OUTLINED_FUNCTION_8_2();
  v25._countAndFlagsBits = 0x2069737372;
  v25._object = (void *)0xE500000000000000;
  String.append(_:)(v25);
  OUTLINED_FUNCTION_9_15();
  v26._countAndFlagsBits = 544370291;
  v26._object = (void *)0xE400000000000000;
  String.append(_:)(v26);
  OUTLINED_FUNCTION_9_15();
  _StringGuts.grow(_:)(30);
  OUTLINED_FUNCTION_13_11(0xD00000000000001CLL, (uint64_t)"clearChannelAssessmentScore ");
  OUTLINED_FUNCTION_9_15();
  _StringGuts.grow(_:)(132);
  OUTLINED_FUNCTION_13_11(0xD00000000000002ALL, (uint64_t)"SiriNetwork - Report: Connection Network. ");
  OUTLINED_FUNCTION_9_5(v47);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v46);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(0);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v45);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v44);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v43);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v42);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v41);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(0);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v40);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v39);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v38);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v37);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v36);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v35);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v34);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v33);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(v32);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_9_5(0);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  v27._countAndFlagsBits = 0x7669747061437369;
  v27._object = (void *)0xEA00000000002065;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  String.append(_:)(v28);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_1_6();
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionNetworkReport()
{
  const void *v0;
  _BYTE v2[313];

  memcpy(v2, v0, sizeof(v2));
  return ConnectionNetworkReport.debugDescription.getter();
}

uint64_t OUTLINED_FUNCTION_3_18@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  if (v1)
    a1 = 0;
  *(_QWORD *)(v2 - 128) = a1;
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_4_19()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_7_16()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_8_13(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = a1;
  *(_QWORD *)(v2 - 112) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_9_15()
{
  return Double.write<A>(to:)();
}

void OUTLINED_FUNCTION_10_11(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_11_14(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_13_11(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_14_8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 112) = (a1 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_16_10(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  if (v1)
    a1 = 0;
  *(_DWORD *)(v2 - 128) = a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionPingInfoReport(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionPingInfoReport(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionPingInfoReport()
{
  return &type metadata for ConnectionPingInfoReport;
}

unint64_t ConnectionPingInfoReport.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v0._countAndFlagsBits = 0x676E69506E61656DLL;
  v0._object = (void *)0xED000020734D6E49;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._countAndFlagsBits = OUTLINED_FUNCTION_0_22();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = OUTLINED_FUNCTION_0_22();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_16();
  v4._countAndFlagsBits = 0x6E756F43676E6970;
  v4._object = (void *)0xEA00000000002074;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_16();
  v5._countAndFlagsBits = 0xD000000000000018;
  v5._object = (void *)0x8000000246F78830;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 93;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000022;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionPingInfoReport()
{
  return ConnectionPingInfoReport.debugDescription.getter();
}

uint64_t ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int EnumTagSinglePayload;
  id v53;
  void *v54;
  __int128 *v55;
  uint64_t *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, _QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t i;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  char v76;
  uint64_t v77;
  void *v78;
  const void *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v101[2];
  void (*v102)(_QWORD, _QWORD, _QWORD);
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t *v115;
  __int128 v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  uint64_t v140;
  char v141;
  _BYTE v142[320];
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  int v147;
  uint64_t v148;
  _BYTE v149[320];
  uint64_t v150[40];
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  int v155;
  uint64_t v156;
  uint64_t v157[40];
  int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  int v167;
  char v168;
  int v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  char v191;
  char v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  char v198;
  uint64_t v199[89];
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  int v204;
  uint64_t v205;
  _QWORD v206[5];
  int v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  _QWORD v212[42];
  char v213;
  _BYTE v214[296];
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  _BYTE v219[320];
  _QWORD v220[39];

  v9 = MEMORY[0x24BDAC7A8](a1);
  v115 = (uint64_t *)v10;
  v12 = v11;
  v112 = v13;
  v113 = v14;
  v16 = v15;
  LODWORD(v111) = v17;
  LODWORD(v116) = v18;
  v19 = v9;
  v121 = v20;
  v220[37] = *MEMORY[0x24BDAC8D0];
  v21 = type metadata accessor for NWInterface();
  v122 = *(_QWORD *)(v21 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_11_5();
  v118 = v23;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v24);
  v119 = (char *)v101 - v25;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v101 - v27;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NWInterface?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_11_5();
  v123 = v30;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v31);
  v117 = (char *)v101 - v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWPath?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_11_5();
  v107 = v34;
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)v101 - v36;
  v110 = type metadata accessor for NWPath();
  v108 = *(_QWORD *)(v110 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v38);
  v109 = (char *)v101 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = 0;
  v208 = 0;
  v209 = 0xE000000000000000;
  v210 = 0;
  v211 = 0xE000000000000000;
  _s11SiriNetwork010ConnectionB6ReportVSgWOi0_(v219);
  v124 = v212;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v219, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for ConnectionNetworkReport?);
  v212[41] = 0;
  v212[40] = 0;
  v213 = 1;
  _s11SiriNetwork25ConnectionInterfaceReportVSgWOi0_(v220);
  v114 = v214;
  outlined init with take of ConnectionSnapshotReport?((uint64_t)v220, (uint64_t)v214, (uint64_t *)&demangling cache variable for type metadata for ConnectionInterfaceReport?);
  v40 = MEMORY[0x24BEE4AF8];
  v215 = MEMORY[0x24BEE4AF8];
  v216 = MEMORY[0x24BEE4AF8];
  v217 = 4;
  if (one-time initialization token for sharedNetworkAnalytics != -1)
    swift_once();
  v41 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
  v218 = static NetworkAnalytics.sharedNetworkAnalytics;
  v120 = v19;
  outlined init with copy of NetworkConnectionProtocol?(v19, (uint64_t)v206);
  if (!v206[3])
  {
    v53 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_44_1();
    outlined destroy of NWError?((uint64_t)v206, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
LABEL_10:
    outlined destroy of NWError?(v120, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
    OUTLINED_FUNCTION_20_11(v199);
    outlined release of ConnectionSnapshotReport((uint64_t)v199);
    v54 = (void *)OUTLINED_FUNCTION_10_12();
    _s11SiriNetwork24ConnectionSnapshotReportVSgWOi0_(v54);
    v55 = (__int128 *)OUTLINED_FUNCTION_10_12();
    v57 = v121;
    return outlined init with take of ConnectionSnapshotReport?((uint64_t)v55, v57, v56);
  }
  v42 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkConnectionProtocol);
  type metadata accessor for NWConnection();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_44_1();
    goto LABEL_10;
  }
  v43 = v140;
  v207 = v111;
  swift_bridgeObjectRelease();
  v208 = v112;
  v209 = v16;
  v44 = v43;
  swift_bridgeObjectRelease();
  v210 = v113;
  v211 = v12;
  v45 = swift_retain();
  v46 = v116;
  static ConnectionTCPInfoMetrics.connectionTCPInfoMetrics(from:wasConnected:)(v45, v116 & 1);
  v48 = v47;
  OUTLINED_FUNCTION_200();
  swift_bridgeObjectRelease();
  v216 = v48;
  v139 = 1;
  v138 = 1;
  v137 = 1;
  v136 = 1;
  v135 = 1;
  v134 = 1;
  v133 = 1;
  v132 = 1;
  v131 = 1;
  v130 = 1;
  v129 = 1;
  v128 = 1;
  v127 = 1;
  v126 = 1;
  v125 = 1;
  v158 = 0;
  v159 = 1;
  v161 = 0;
  v160 = 0;
  v162 = 0;
  v163 = 1;
  v164 = 0u;
  v165 = 0u;
  v166 = 0u;
  v167 = 0;
  v168 = 1;
  v169 = 0;
  v170 = 1;
  v171 = MEMORY[0x24BEE4B00];
  v172 = 0;
  v174 = 0;
  v173 = 0;
  v175 = 1;
  v176 = 0;
  v177 = 1;
  v178 = 0;
  v179 = 1;
  v180 = 0;
  v181 = 1;
  v182 = 0;
  v183 = 1;
  v184 = 0;
  v185 = 1;
  v187 = 0;
  v186 = 0;
  v188 = 0;
  v189 = 1;
  v190 = 0;
  v191 = 1;
  v192 = 0;
  v193 = 0;
  v194 = 1;
  v195 = 0;
  v196 = 1;
  v197 = 0;
  v198 = 1;
  destructiveProjectEnumData for ConnectionConfigurationError(&v158);
  v49 = (uint64_t)v124;
  OUTLINED_FUNCTION_8_3((uint64_t)v124, (uint64_t)v199);
  outlined release of ConnectionNetworkReport?(v199);
  OUTLINED_FUNCTION_8_3((uint64_t)&v158, v49);
  swift_bridgeObjectRelease();
  v212[14] = v115;
  v212[15] = a9;
  v50 = swift_bridgeObjectRelease();
  v215 = v40;
  if ((v46 & 1) != 0)
  {
    NWConnection.currentPath.getter();
    v51 = v110;
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v110);
    v101[1] = v44;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of NWError?((uint64_t)v37, &demangling cache variable for type metadata for NWPath?);
      goto LABEL_46;
    }
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v109, v37, v51);
    NWPath.nw.getter();
    v58 = nw_path_copy_interface();
    OUTLINED_FUNCTION_23_6();
    if (v58)
    {
      LODWORD(v113) = nw_interface_get_index(v58);
      OUTLINED_FUNCTION_5_16();
    }
    else
    {
      LODWORD(v113) = 0;
    }
    v59 = (uint64_t)v117;
    v60 = NWPath.availableInterfaces.getter();
    v61 = v122;
    v111 = *(_QWORD *)(v60 + 16);
    v112 = v60;
    if (!v111)
    {
LABEL_44:
      OUTLINED_FUNCTION_18_5(v59, 1);
LABEL_45:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
LABEL_46:
      OUTLINED_FUNCTION_13_12();
    }
    v62 = 0;
    v106 = v112 + ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80));
    v63 = *(_QWORD *)(v122 + 72);
    v104 = v21;
    v105 = v63;
    v64 = *(void (**)(_QWORD, _QWORD, _QWORD))(v122 + 16);
    v115 = &v156;
    v101[0] = (uint64_t)&v148;
    v102 = v64;
    v103 = &v205;
LABEL_17:
    v64(v59, v106 + v105 * v62, v21);
    OUTLINED_FUNCTION_18_5(v59, 0);
    if (__swift_getEnumTagSinglePayload(v59, 1, v21) == 1)
      goto LABEL_45;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v28, v59, v21);
    v65 = (uint64_t)v119;
    v64(v119, v28, v21);
    ConnectionInterfaceReport.init(interface:)(v65, &v151);
    v66 = v216;
    v67 = *(_QWORD *)(v216 + 16);
    if (!v67)
      goto LABEL_34;
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_25_7(&v200, (const void *)(v66 + 32));
    v68 = *((_QWORD *)&v200 + 1);
    v69 = v67 - 1;
    for (i = 288; ; i += 256)
    {
      v71 = v200;
      v72 = OUTLINED_FUNCTION_10_12();
      outlined retain of ConnectionTCPInfoMetrics(v72);
      swift_bridgeObjectRetain();
      v73 = NWInterface.name.getter();
      if (v68)
      {
        v75 = v71 == v73 && v68 == v74;
        if (v75)
        {
          OUTLINED_FUNCTION_17_10();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_44_1();
LABEL_32:
          OUTLINED_FUNCTION_25_7(v150, &v200);
          destructiveProjectEnumData for ConnectionConfigurationError(v150);
          v80 = (uint64_t)v115;
          OUTLINED_FUNCTION_8_3((uint64_t)v115, (uint64_t)v157);
          outlined release of ConnectionTCPInfoMetrics?(v157);
          OUTLINED_FUNCTION_8_3((uint64_t)v150, v80);
LABEL_33:
          v59 = (uint64_t)v117;
LABEL_34:
          v81 = v155;
          if (v155 == (_DWORD)v113)
          {
            v116 = v151;
            v82 = v152;
            v83 = v153;
            v84 = v154;
            OUTLINED_FUNCTION_12_10((uint64_t)v115, (uint64_t)v142);
            v143 = v116;
            v144 = v82;
            v145 = v83;
            v146 = v84;
            v147 = v113;
            OUTLINED_FUNCTION_12_10((uint64_t)v142, v101[0]);
            OUTLINED_FUNCTION_16_6(v149, &v143);
            destructiveProjectEnumData for ConnectionConfigurationError(v149);
            v85 = (uint64_t)v114;
            OUTLINED_FUNCTION_12_10((uint64_t)v114, (uint64_t)v150);
            OUTLINED_FUNCTION_12_10((uint64_t)v149, v85);
            outlined retain of ConnectionInterfaceReport((uint64_t)&v143);
            outlined release of ConnectionInterfaceReport?(v150);
            OUTLINED_FUNCTION_8_3((uint64_t)v124, (uint64_t)v157);
            OUTLINED_FUNCTION_8_3((uint64_t)v157, (uint64_t)&v200);
            OUTLINED_FUNCTION_0_33();
            if (!v75)
            {
              v141 = v84;
              v86 = ConnectionType.stringRawValue.getter();
              v88 = v87;
              swift_bridgeObjectRelease();
              v212[7] = v86;
              v212[8] = v88;
            }
          }
          v116 = v151;
          v89 = v152;
          v90 = v153;
          v91 = v154;
          OUTLINED_FUNCTION_12_10((uint64_t)v115, (uint64_t)v150);
          v200 = v116;
          v201 = v89;
          v202 = v90;
          v203 = v91;
          v204 = v81;
          OUTLINED_FUNCTION_12_10((uint64_t)v150, (uint64_t)v103);
          v92 = v215;
          v93 = OUTLINED_FUNCTION_10_12();
          outlined retain of ConnectionInterfaceReport(v93);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_28_4();
            v92 = v95;
          }
          v94 = *(_QWORD *)(v92 + 16);
          v21 = v104;
          if (v94 >= *(_QWORD *)(v92 + 24) >> 1)
          {
            OUTLINED_FUNCTION_28_4();
            v92 = v96;
          }
          ++v62;
          *(_QWORD *)(v92 + 16) = v94 + 1;
          OUTLINED_FUNCTION_16_6((void *)(v92 + 296 * v94 + 32), &v200);
          v215 = v92;
          v61 = v122;
          OUTLINED_FUNCTION_21_8((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
          OUTLINED_FUNCTION_16_6(v157, &v151);
          outlined release of ConnectionInterfaceReport((uint64_t)v157);
          if (v62 == v111)
            goto LABEL_44;
          v64 = v102;
          if (v62 >= *(_QWORD *)(v112 + 16))
          {
            __break(1u);
            JUMPOUT(0x246F2D5B8);
          }
          goto LABEL_17;
        }
        v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_44_1();
        if ((v76 & 1) != 0)
        {
          OUTLINED_FUNCTION_17_10();
          goto LABEL_32;
        }
      }
      else
      {
        OUTLINED_FUNCTION_44_1();
      }
      v77 = OUTLINED_FUNCTION_10_12();
      outlined release of ConnectionTCPInfoMetrics(v77);
      if (!v69)
      {
        OUTLINED_FUNCTION_17_10();
        goto LABEL_33;
      }
      v78 = (void *)OUTLINED_FUNCTION_10_12();
      OUTLINED_FUNCTION_25_7(v78, v79);
      v68 = *((_QWORD *)&v200 + 1);
      --v69;
    }
  }
  OUTLINED_FUNCTION_8_14(v50, (uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  OUTLINED_FUNCTION_200();
  v97 = v121;
  v98 = (void *)OUTLINED_FUNCTION_10_12();
  OUTLINED_FUNCTION_20_11(v98);
  v99 = OUTLINED_FUNCTION_10_12();
  destructiveProjectEnumData for ConnectionConfigurationError(v99);
  v56 = (uint64_t *)&demangling cache variable for type metadata for ConnectionSnapshotReport?;
  v55 = &v200;
  v57 = v97;
  return outlined init with take of ConnectionSnapshotReport?((uint64_t)v55, v57, v56);
}

uint64_t outlined init with copy of NetworkConnectionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NetworkConnectionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @guaranteed OS_xpc_object) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  char v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t closure #2 in ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(int a1, xpc_object_t xuint)
{
  uint64_t value;

  value = xpc_uint64_get_value(xuint);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UnsafePointer<Int8>);
  _print_unlocked<A, B>(_:_:)();
  specialized Dictionary._Variant.setValue(_:forKey:)(value, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_246F2D734()
{
  return OUTLINED_FUNCTION_6_8();
}

uint64_t partial apply for closure #2 in ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(int a1, void *a2)
{
  return closure #2 in ConnectionSnapshotReport.init(connection:wasConnected:sequenceNumber:provider:snapshotTriggerReason:connectionMethod:)(a1, a2);
}

uint64_t sub_246F2D748()
{
  return OUTLINED_FUNCTION_6_8();
}

uint64_t _sSPys4Int8VGSo13OS_xpc_object_pSbIgygd_ACSoAD_pSbIegygd_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t *outlined release of ConnectionInterfaceReport?(uint64_t *a1)
{
  outlined consume of ConnectionInterfaceReport?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_33()
{
  uint64_t v0;

  return _s11SiriNetwork010ConnectionB6ReportVSgWOg(v0 + 4896);
}

uint64_t OUTLINED_FUNCTION_1_28()
{
  uint64_t v0;
  uint64_t *v1;

  return outlined init with take of ConnectionSnapshotReport?(v0 + 3544, v0 + 4896, v1);
}

uint64_t OUTLINED_FUNCTION_3_19()
{
  uint64_t v0;
  uint64_t *v1;

  return outlined init with take of ConnectionSnapshotReport?(*(_QWORD *)(v0 + 200), v0 + 3544, v1);
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  uint64_t v0;

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v0);
}

uint64_t OUTLINED_FUNCTION_8_14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of NWError?(*(_QWORD *)(v2 + 168), a2);
}

uint64_t OUTLINED_FUNCTION_9_16()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_12()
{
  uint64_t v0;

  return v0 + 4896;
}

uint64_t OUTLINED_FUNCTION_12_10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return outlined init with take of ConnectionSnapshotReport?(a1, a2, v2);
}

void OUTLINED_FUNCTION_13_12()
{
  JUMPOUT(0x24956CCF8);
}

uint64_t OUTLINED_FUNCTION_15_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_11()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_17_10()
{
  return swift_bridgeObjectRelease_n();
}

void *OUTLINED_FUNCTION_20_11(void *a1)
{
  uint64_t v1;

  return memcpy(a1, (const void *)(v1 + 5648), 0x2C8uLL);
}

uint64_t OUTLINED_FUNCTION_21_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_23_6()
{
  return swift_unknownObjectRelease();
}

void *OUTLINED_FUNCTION_25_7(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF9uLL);
}

void OUTLINED_FUNCTION_28_4()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void ConnectionPolicyRoute.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  int v9;
  Swift::UInt v10;
  Swift::UInt8 v11;

  v1 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 64);
  v11 = *(_BYTE *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(unsigned __int8 *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 104);
  v9 = *(unsigned __int8 *)(v0 + 112);
  v6 = *(unsigned __int8 *)(v0 + 113);
  if (*(_QWORD *)(v0 + 8))
  {
    OUTLINED_FUNCTION_1_29();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      OUTLINED_FUNCTION_1_29();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    OUTLINED_FUNCTION_2_22();
    if (v1)
      goto LABEL_3;
  }
  OUTLINED_FUNCTION_2_22();
LABEL_6:
  Hasher._combine(_:)(v10);
  if (v2)
  {
    OUTLINED_FUNCTION_1_29();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_8:
      OUTLINED_FUNCTION_1_29();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  else
  {
    OUTLINED_FUNCTION_2_22();
    if (v3)
      goto LABEL_8;
  }
  OUTLINED_FUNCTION_2_22();
LABEL_11:
  Hasher._combine(_:)(v11);
  if (v4)
  {
    OUTLINED_FUNCTION_1_29();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_2_22();
  }
  if ((_DWORD)v5 == 3)
  {
    OUTLINED_FUNCTION_2_22();
  }
  else
  {
    OUTLINED_FUNCTION_1_29();
    Hasher._combine(_:)(v5);
  }
  if (v9)
  {
    OUTLINED_FUNCTION_2_22();
  }
  else
  {
    OUTLINED_FUNCTION_1_29();
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v8;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
  if ((_DWORD)v6 == 5)
  {
    OUTLINED_FUNCTION_2_22();
  }
  else
  {
    OUTLINED_FUNCTION_1_29();
    Hasher._combine(_:)(v6);
  }
}

BOOL static ConnectionPolicyRoute.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  double v28;
  int v29;
  int v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  _BOOL8 result;
  char v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  int v52;
  int v53;
  int v54;
  int v55;
  char v56;
  int v58;
  int v59;
  char v60;
  char v61;
  char v63;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(unsigned __int8 *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v14 = *(unsigned __int8 *)(a1 + 96);
  v15 = *(double *)(a1 + 104);
  v16 = *(_BYTE *)(a1 + 112);
  v17 = *(unsigned __int8 *)(a1 + 113);
  v18 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 24);
  v100 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v23 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 64);
  v24 = *(unsigned __int8 *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 88);
  v27 = *(unsigned __int8 *)(a2 + 96);
  v28 = *(double *)(a2 + 104);
  v29 = *(unsigned __int8 *)(a2 + 112);
  v30 = *(unsigned __int8 *)(a2 + 113);
  if (!v3)
  {
    v99 = *(_QWORD *)(a2 + 16);
    if (v18)
      return 0;
    goto LABEL_10;
  }
  if (!v18)
    return 0;
  v99 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v18)
    goto LABEL_10;
  v91 = *(_QWORD *)(a1 + 48);
  v93 = *(_QWORD *)(a2 + 56);
  v77 = *(_QWORD *)(a1 + 80);
  v74 = *(unsigned __int8 *)(a2 + 96);
  v83 = *(unsigned __int8 *)(a2 + 112);
  v71 = *(unsigned __int8 *)(a1 + 96);
  v68 = *(unsigned __int8 *)(a2 + 113);
  v65 = *(_BYTE *)(a1 + 112);
  v32 = *(unsigned __int8 *)(a1 + 113);
  v66 = *(_QWORD *)(a2 + 88);
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_QWORD *)(a2 + 80);
  v97 = *(unsigned __int8 *)(a1 + 72);
  v35 = *(_QWORD *)(a1 + 56);
  v95 = *(_QWORD *)(a1 + 64);
  v36 = *(_QWORD *)(a2 + 64);
  v37 = *(_QWORD *)(a1 + 40);
  v87 = *(_QWORD *)(a1 + 32);
  v89 = *(_QWORD *)(a2 + 48);
  v38 = *(_QWORD *)(a2 + 40);
  v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v5 = v87;
  v20 = v89;
  v21 = v38;
  v7 = v91;
  v23 = v93;
  v8 = v37;
  v22 = v36;
  v10 = v95;
  v9 = v35;
  v11 = v97;
  v25 = v34;
  v12 = v33;
  v26 = v66;
  v17 = v32;
  v16 = v65;
  v30 = v68;
  v14 = v71;
  v29 = v83;
  v27 = v74;
  v13 = v77;
  v40 = v39;
  result = 0;
  if ((v40 & 1) != 0)
  {
LABEL_10:
    if (v6)
    {
      if (!v19)
        return 0;
      if (v4 == v99 && v6 == v19)
      {
        if (v5 != v100)
          return 0;
      }
      else
      {
        v88 = v5;
        v90 = v20;
        v67 = v21;
        v69 = v22;
        v92 = v7;
        v94 = v23;
        v78 = v25;
        v81 = v8;
        v96 = v10;
        v72 = v9;
        v98 = v11;
        v84 = v12;
        v75 = v17;
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v43 & 1) == 0)
          return result;
        v12 = v84;
        v17 = v75;
        v25 = v78;
        v8 = v81;
        v11 = v98;
        v22 = v69;
        v9 = v72;
        v23 = v94;
        v10 = v96;
        v20 = v90;
        v7 = v92;
        v21 = v67;
        if (v88 != v100)
          return result;
      }
    }
    else
    {
      result = 0;
      if (v19 || v5 != v100)
        return result;
    }
    if (v7)
    {
      if (!v20)
        return 0;
      if (v8 != v21 || v7 != v20)
      {
        v85 = v29;
        v76 = v17;
        v45 = v12;
        v82 = v24;
        v79 = v25;
        v46 = v11;
        v70 = v22;
        v73 = v9;
        v47 = v10;
        v48 = v23;
        v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v23 = v48;
        v22 = v70;
        v9 = v73;
        v10 = v47;
        v11 = v46;
        v25 = v79;
        v24 = v82;
        v12 = v45;
        v17 = v76;
        v29 = v85;
        v50 = v49;
        result = 0;
        if ((v50 & 1) == 0)
          return result;
      }
    }
    else if (v20)
    {
      return 0;
    }
    if (v10)
    {
      if (!v22)
        return 0;
      if (v9 == v23 && v10 == v22)
      {
        if (v11 != v24)
          return 0;
      }
      else
      {
        v52 = v24;
        v53 = v11;
        v80 = v25;
        v86 = v12;
        v54 = v29;
        v55 = v17;
        v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v56 & 1) == 0)
          return result;
        v17 = v55;
        v29 = v54;
        v12 = v86;
        v25 = v80;
        if (((v53 ^ v52) & 1) != 0)
          return result;
      }
    }
    else
    {
      result = 0;
      if (v22 || ((v11 ^ v24) & 1) != 0)
        return result;
    }
    if (v12)
    {
      if (v26)
      {
        if (v13 != v25 || v12 != v26)
        {
          v58 = v29;
          v59 = v17;
          v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v17 = v59;
          v29 = v58;
          v61 = v60;
          result = 0;
          if ((v61 & 1) == 0)
            return result;
        }
LABEL_54:
        if (v14 == 3)
        {
          if (v27 != 3)
            return 0;
        }
        else if (v27 == 3 || v14 != v27)
        {
          return 0;
        }
        if ((v16 & 1) != 0)
        {
          if (!v29)
            return 0;
        }
        else
        {
          if (v15 == v28)
            v63 = v29;
          else
            v63 = 1;
          if ((v63 & 1) != 0)
            return 0;
        }
        if (v17 == 5)
          return v30 == 5;
        else
          return v30 != 5 && v17 == v30;
      }
    }
    else if (!v26)
    {
      goto LABEL_54;
    }
    return 0;
  }
  return result;
}

void ConnectionPolicyRoute.hashValue.getter()
{
  OUTLINED_FUNCTION_0_34();
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_3_20();
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_20();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionPolicyRoute()
{
  OUTLINED_FUNCTION_0_34();
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_3_20();
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_20();
}

unint64_t lazy protocol witness table accessor for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute;
  if (!lazy protocol witness table cache variable for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionPolicyRoute, &type metadata for ConnectionPolicyRoute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionPolicyRoute and conformance ConnectionPolicyRoute);
  }
  return result;
}

__n128 OUTLINED_FUNCTION_0_34()
{
  __n128 *v0;

  return v0[5];
}

void OUTLINED_FUNCTION_1_29()
{
  Hasher._combine(_:)(1u);
}

void OUTLINED_FUNCTION_2_22()
{
  Hasher._combine(_:)(0);
}

void OUTLINED_FUNCTION_3_20()
{
  ConnectionPolicyRoute.hash(into:)();
}

uint64_t static WiFiRecord.channelInfo(channel:frequencyBand:channelInMHz:)(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  if (a1 < 1)
    return 0x6E776F6E6B6E75;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  OUTLINED_FUNCTION_6_4();
  v4._countAndFlagsBits = 10272;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  OUTLINED_FUNCTION_16_12(a2);
  OUTLINED_FUNCTION_1_6();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  OUTLINED_FUNCTION_10_2();
  v6._countAndFlagsBits = 695879757;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  return 0x206C656E6E616843;
}

uint64_t static WiFiPhyModeApple80211.wifiPhyMode(_:)(int a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_17_11();
  if ((v3 & 0x22) != 0)
    v5 = v1;
  else
    v5 = v4;
  if ((v3 & 4) != 0)
  {
    OUTLINED_FUNCTION_9_17();
    v5 = v5 & 0xFFFFFFFFFFFFLL | 0x62000000000000;
    OUTLINED_FUNCTION_4_21();
    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x40) == 0)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_4_21();
  OUTLINED_FUNCTION_14_9();
  if ((a1 & 0x40) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  OUTLINED_FUNCTION_4_21();
  OUTLINED_FUNCTION_14_9();
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0)
      goto LABEL_9;
LABEL_15:
    OUTLINED_FUNCTION_9_17();
    v5 = v5 & 0xFFFFFFFFFFFFLL | 0x6361000000000000;
    OUTLINED_FUNCTION_4_21();
    if ((a1 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_14:
  OUTLINED_FUNCTION_9_17();
  v5 = v5 & 0xFFFFFFFFFFFFLL | 0x6E000000000000;
  OUTLINED_FUNCTION_4_21();
  if ((a1 & 0x80) != 0)
    goto LABEL_15;
LABEL_9:
  if ((a1 & 0x100) != 0)
  {
LABEL_16:
    OUTLINED_FUNCTION_19_10();
    OUTLINED_FUNCTION_7_17();
  }
LABEL_17:
  if ((a1 & 0x400) != 0)
  {
    OUTLINED_FUNCTION_19_10();
    OUTLINED_FUNCTION_7_17();
  }
  else
  {
    v1 = 0x6E776F6E6B6E75;
    switch(a1)
    {
      case 0:
        goto LABEL_35;
      case 1:
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 2:
        OUTLINED_FUNCTION_17_11();
        goto LABEL_35;
      case 4:
        OUTLINED_FUNCTION_1_30();
        v1 = 0x62776F6E6B6E75;
        goto LABEL_35;
      case 8:
        goto LABEL_33;
      default:
        switch(a1)
        {
          case 16:
            OUTLINED_FUNCTION_1_30();
            v1 = 0x6E776F6E6B6E75;
            goto LABEL_35;
          case 32:
            goto LABEL_35;
          case 64:
LABEL_33:
            OUTLINED_FUNCTION_1_30();
            v1 = 0x67776F6E6B6E75;
            goto LABEL_35;
          case 128:
            OUTLINED_FUNCTION_1_30();
            v1 = 0x6361776F6E6B6E75;
            goto LABEL_35;
          case 256:
            goto LABEL_27;
        }
        break;
    }
  }
  if (a1 == 1024)
  {
LABEL_27:
    OUTLINED_FUNCTION_1_30();
    v1 = v1 & 0xFFFFFFFFFFFFLL | 0x7861000000000000;
LABEL_35:
    OUTLINED_FUNCTION_19_10();
    return v1;
  }
  return v5;
}

id static WiFiRecordRepresentation.wiFiRecordRepresentation(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v16;

  v2 = OUTLINED_FUNCTION_3_21();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  HIDWORD(v15) = *(unsigned __int8 *)(a1 + 56);
  v12 = type metadata accessor for WiFiRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + *(int *)(v12 + 40), v2);
  v13 = objc_allocWithZone((Class)type metadata accessor for WiFiRecordRepresentation(0));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return WiFiRecordRepresentation.init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(v16, v6, v7, v8, v9, v10, v11, SBYTE4(v15), (uint64_t)v5);
}

SiriNetwork::WiFiAssertionType_optional __swiftcall WiFiAssertionType.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4)
    LOBYTE(v2) = 3;
  *v1 = v2;
  return (SiriNetwork::WiFiAssertionType_optional)rawValue;
}

uint64_t WiFiAssertionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

void protocol witness for Hashable.hashValue.getter in conformance WiFiAssertionType()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance WiFiAssertionType(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance WiFiAssertionType(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriNetwork::WiFiAssertionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WiFiAssertionType(Swift::Int *a1)
{
  return WiFiAssertionType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WiFiAssertionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = WiFiAssertionType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t WiFiRecord.rssi.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t WiFiRecord.snr.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t WiFiRecord.cca.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void WiFiRecord.channelInfo.getter()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void WiFiRecord.phyMode.getter()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

uint64_t WiFiRecord.isCaptive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t WiFiRecord.timestamp.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for WiFiRecord(0);
  OUTLINED_FUNCTION_3_21();
  v0 = OUTLINED_FUNCTION_64();
  return OUTLINED_FUNCTION_6_14(v0, v1, v2, v3);
}

uint64_t type metadata accessor for WiFiRecord(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for WiFiRecord);
}

uint64_t WiFiRecord.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = 0x203A69737372;
  v31[1] = 0xE600000000000000;
  v30 = *v0;
  v32._countAndFlagsBits = OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_15_12(v32);
  OUTLINED_FUNCTION_10_2();
  v28 = (void *)v31[1];
  v29 = v31[0];
  v31[0] = 0x203A726E73;
  v31[1] = 0xE500000000000000;
  v30 = v0[1];
  v33._countAndFlagsBits = OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_15_12(v33);
  swift_bridgeObjectRelease();
  v4 = (void *)v31[1];
  v27 = v31[0];
  v31[0] = 0x203A616363;
  v31[1] = 0xE500000000000000;
  v30 = v0[2];
  v34._countAndFlagsBits = OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_15_12(v34);
  OUTLINED_FUNCTION_8_2();
  v5 = (void *)v31[1];
  v26 = v31[0];
  strcpy((char *)v31, "channelInfo: ");
  HIWORD(v31[1]) = -4864;
  v6 = v0[3];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_18_8(v6);
  OUTLINED_FUNCTION_6_4();
  v7 = (void *)v31[1];
  v25 = v31[0];
  strcpy((char *)v31, "phyMode: ");
  WORD1(v31[1]) = 0;
  HIDWORD(v31[1]) = -385875968;
  v8 = v0[5];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_18_8(v8);
  OUTLINED_FUNCTION_6_4();
  v24 = v31[0];
  strcpy((char *)v31, "isCaptive: ");
  HIDWORD(v31[1]) = -352321536;
  if (*((_BYTE *)v0 + 56))
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  OUTLINED_FUNCTION_16_12(v9);
  OUTLINED_FUNCTION_8_2();
  v23 = v31[0];
  strcpy((char *)v31, "timestamp: ");
  HIDWORD(v31[1]) = -352321536;
  type metadata accessor for WiFiRecord(0);
  static Locale.current.getter();
  v10 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 0, 1, v10);
  v11 = Date.description(with:)();
  v13 = v12;
  outlined destroy of Locale?((uint64_t)v3);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v16 = v31[0];
  v15 = (void *)v31[1];
  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  strcpy((char *)v31, "WiFiRecord: ");
  BYTE5(v31[1]) = 0;
  HIWORD(v31[1]) = -5120;
  v17._countAndFlagsBits = v29;
  v17._object = v28;
  String.append(_:)(v17);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_1_6();
  v18._countAndFlagsBits = v27;
  v18._object = v4;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  v19._countAndFlagsBits = v26;
  v19._object = v5;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  v20._countAndFlagsBits = v25;
  v20._object = v7;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_18_8(v24);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_16_12(v23);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_1_6();
  v21._countAndFlagsBits = v16;
  v21._object = v15;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  return v31[0];
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t WiFiRecordRepresentation.rssi.getter()
{
  return OUTLINED_FUNCTION_13_13(OBJC_IVAR___SNWiFiRecordInternal_rssi);
}

uint64_t WiFiRecordRepresentation.snr.getter()
{
  return OUTLINED_FUNCTION_13_13(OBJC_IVAR___SNWiFiRecordInternal_snr);
}

uint64_t WiFiRecordRepresentation.cca.getter()
{
  return OUTLINED_FUNCTION_13_13(OBJC_IVAR___SNWiFiRecordInternal_cca);
}

void WiFiRecordRepresentation.channelInfo.getter()
{
  OUTLINED_FUNCTION_8_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

id @objc WiFiRecordRepresentation.channelInfo.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  void *v4;

  v3 = a3();
  v4 = (void *)MEMORY[0x24956D034](v3);
  OUTLINED_FUNCTION_10_2();
  return v4;
}

void WiFiRecordRepresentation.phyMode.getter()
{
  OUTLINED_FUNCTION_8_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

uint64_t WiFiRecordRepresentation.isCaptive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SNWiFiRecordInternal_isCaptive);
}

uint64_t WiFiRecordRepresentation.timestamp.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_3_21();
  v0 = OUTLINED_FUNCTION_64();
  return OUTLINED_FUNCTION_6_14(v0, v1, v2, v3);
}

id WiFiRecordRepresentation.__allocating_init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  objc_class *v9;
  id v18;

  v18 = objc_allocWithZone(v9);
  return WiFiRecordRepresentation.init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

id WiFiRecordRepresentation.init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  _BYTE *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;

  *(_QWORD *)&v9[OBJC_IVAR___SNWiFiRecordInternal_rssi] = a1;
  *(_QWORD *)&v9[OBJC_IVAR___SNWiFiRecordInternal_snr] = a2;
  *(_QWORD *)&v9[OBJC_IVAR___SNWiFiRecordInternal_cca] = a3;
  v10 = &v9[OBJC_IVAR___SNWiFiRecordInternal_channelInfo];
  *v10 = a4;
  v10[1] = a5;
  v11 = &v9[OBJC_IVAR___SNWiFiRecordInternal_phyMode];
  *v11 = a6;
  v11[1] = a7;
  v9[OBJC_IVAR___SNWiFiRecordInternal_isCaptive] = a8;
  v12 = &v9[OBJC_IVAR___SNWiFiRecordInternal_timestamp];
  v13 = OUTLINED_FUNCTION_3_21();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a9, v13);
  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for WiFiRecordRepresentation(0);
  v15 = objc_msgSendSuper2(&v17, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a9, v13);
  return v15;
}

uint64_t type metadata accessor for WiFiRecordRepresentation(uint64_t a1)
{
  return type metadata accessor for NetworkConnectionProvider.StateUpdateHandler(a1, type metadata singleton initialization cache for WiFiRecordRepresentation);
}

id WiFiRecordRepresentation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void WiFiRecordRepresentation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id WiFiRecordRepresentation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WiFiRecordRepresentation(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type WiFiAssertionType and conformance WiFiAssertionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WiFiAssertionType and conformance WiFiAssertionType;
  if (!lazy protocol witness table cache variable for type WiFiAssertionType and conformance WiFiAssertionType)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for WiFiAssertionType, &type metadata for WiFiAssertionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WiFiAssertionType and conformance WiFiAssertionType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WiFiAssertionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WiFiAssertionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_246F2EE7C + 4 * byte_246F74BAE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_246F2EEB0 + 4 * byte_246F74BA9[v4]))();
}

uint64_t sub_246F2EEB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F2EEB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246F2EEC0);
  return result;
}

uint64_t sub_246F2EECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246F2EED4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_246F2EED8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F2EEE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WiFiAssertionType()
{
  return &type metadata for WiFiAssertionType;
}

_QWORD *initializeBufferWithCopyOfBuffer for WiFiRecord(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = a2[6];
    v7 = *(int *)(a3 + 40);
    v8 = (uint64_t)a2 + v7;
    v9 = a1 + v7;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = type metadata accessor for Date();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for WiFiRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(int *)(a3 + 40);
  v7 = a2 + v6;
  v8 = a1 + v6;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = type metadata accessor for Date();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for WiFiRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiRecord()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_246F2F278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_3_21();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WiFiRecord()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_246F2F2F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_3_21();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for WiFiRecord()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for WiFiRecordRepresentation()
{
  return type metadata accessor for WiFiRecordRepresentation(0);
}

uint64_t type metadata completion function for WiFiRecordRepresentation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for WiFiRecordRepresentation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WiFiRecordRepresentation.__allocating_init(rssi:snr:cca:channelInfo:phyMode:isCaptive:timestamp:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t OUTLINED_FUNCTION_2_23()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_4_21()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_8_15()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_13_13@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

void OUTLINED_FUNCTION_15_12(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_16_12(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_18_8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_19_10()
{
  return swift_bridgeObjectRelease();
}

void destroy for ConnectionHTTPHeaderReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for ConnectionHTTPHeaderReport(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for ConnectionHTTPHeaderReport(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[4];
  v5 = (void *)a1[4];
  a1[4] = v4;
  v6 = v4;

  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ConnectionHTTPHeaderReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionHTTPHeaderReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionHTTPHeaderReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionHTTPHeaderReport()
{
  return &type metadata for ConnectionHTTPHeaderReport;
}

uint64_t ConnectionHTTPHeaderReport.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  if (v0[1])
  {
    v1 = *v0;
    v2 = (void *)v0[1];
  }
  else
  {
    v1 = 0x6E776F6E6B6E75;
    v2 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_0_35();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(52);
  v4._object = (void *)0x8000000246F78980;
  v4._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x2074736F48656361;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  OUTLINED_FUNCTION_0_35();
  swift_bridgeObjectRelease();
  return 0;
}

void OUTLINED_FUNCTION_0_35()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t ConnectionType.netConnectionType.getter()
{
  char *v0;

  return dword_246F74D94[*v0];
}

uint64_t destroy for ConnectionInterfaceReport(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 48);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ConnectionInterfaceReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF9uLL);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v6;
    v7 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    v8 = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v8;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    LODWORD(v8) = *(_DWORD *)(a2 + 228);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_DWORD *)(a1 + 228) = v8;
    v9 = *(_QWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v9;
    v10 = *(_QWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
    *(_QWORD *)(a1 + 256) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 268);
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    *(_DWORD *)(a1 + 268) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 276);
    *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
    *(_DWORD *)(a1 + 276) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 284);
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_DWORD *)(a1 + 284) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ConnectionInterfaceReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v4 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    if (v4 != 1)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      v15 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v15;
      v16 = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v16;
      v17 = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v17;
      v18 = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = v18;
      v19 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v19;
      v20 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v20;
      v21 = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = v21;
      v22 = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 204);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_DWORD *)(a1 + 204) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 212);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v22;
      LODWORD(v22) = *(_DWORD *)(a2 + 228);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_DWORD *)(a1 + 228) = v22;
      v23 = *(_QWORD *)(a2 + 240);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_QWORD *)(a1 + 240) = v23;
      v24 = *(_QWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      *(_QWORD *)(a1 + 256) = v24;
      LODWORD(v24) = *(_DWORD *)(a2 + 268);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
      *(_DWORD *)(a1 + 268) = v24;
      LODWORD(v24) = *(_DWORD *)(a2 + 276);
      *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
      *(_DWORD *)(a1 + 276) = v24;
      LODWORD(v24) = *(_DWORD *)(a2 + 284);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_DWORD *)(a1 + 284) = v24;
      return a1;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 40);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF9uLL);
    return a1;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v7;
  v8 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v8;
  v9 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v9;
  v10 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v10;
  v11 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v11;
  v12 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 204);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_DWORD *)(a1 + 212) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_DWORD *)(a1 + 220) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_DWORD *)(a1 + 228) = v12;
  v13 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v13;
  v14 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 268);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_DWORD *)(a1 + 268) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_DWORD *)(a1 + 276) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 284);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_DWORD *)(a1 + 284) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *__swift_memcpy289_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x121uLL);
}

uint64_t assignWithTake for ConnectionInterfaceReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  if (*(_QWORD *)(a1 + 48) != 1)
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      v7 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v8 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v8;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      v9 = *(_QWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      *(_QWORD *)(a1 + 256) = v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 268);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
      *(_DWORD *)(a1 + 268) = v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 276);
      *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
      *(_DWORD *)(a1 + 276) = v9;
      LODWORD(v9) = *(_DWORD *)(a2 + 284);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_DWORD *)(a1 + 284) = v9;
      return a1;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 40);
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF9uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionInterfaceReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 289))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionInterfaceReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_BYTE *)(result + 288) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 289) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 289) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionInterfaceReport()
{
  return &type metadata for ConnectionInterfaceReport;
}

uint64_t ConnectionInterfaceReport.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  int v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[249];
  _QWORD __src[32];
  unint64_t v34;
  unint64_t v35;
  _BYTE v36[256];
  uint64_t v37;
  unint64_t v38;

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v5 = *(_DWORD *)(v0 + 36);
  outlined init with take of ConnectionTCPInfoMetrics?(v0 + 40, (uint64_t)v36);
  v37 = 0x20656D616ELL;
  v38 = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  OUTLINED_FUNCTION_8_2();
  v31 = v37;
  v7 = (void *)v38;
  v37 = 0x2065707974;
  v38 = 0xE500000000000000;
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v30 = v37;
  v9 = (void *)v38;
  v37 = 0;
  v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v10._countAndFlagsBits = 0x697463656E6E6F63;
  v10._object = (void *)0xEF20657079546E6FLL;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  v11 = v37;
  v12 = (void *)v38;
  v37 = 0x207865646E69;
  v38 = 0xE600000000000000;
  LODWORD(__src[0]) = v5;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  OUTLINED_FUNCTION_8_2();
  v14 = v37;
  v15 = (void *)v38;
  v37 = 0;
  v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v34 = 0xD000000000000019;
  v35 = 0x8000000246F77750;
  outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v36, (uint64_t)&v37);
  if (_s11SiriNetwork24ConnectionTCPInfoMetricsVSgWOg((uint64_t)&v37) == 1)
  {
    v16 = 0xE700000000000000;
    v17 = 0x6E776F6E6B6E75;
  }
  else
  {
    outlined init with take of ConnectionTCPInfoMetrics?((uint64_t)v36, (uint64_t)__src);
    memcpy(v32, __src, sizeof(v32));
    outlined retain of ConnectionTCPInfoMetrics((uint64_t)__src);
    v17 = String.init<A>(describing:)();
    v16 = v18;
  }
  v19 = v16;
  String.append(_:)(*(Swift::String *)&v17);
  OUTLINED_FUNCTION_8_2();
  v20 = v34;
  v21 = (void *)v35;
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v22._countAndFlagsBits = 0xD00000000000002DLL;
  v22._object = (void *)0x8000000246F789B0;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v31;
  v23._object = v7;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_36();
  v24._countAndFlagsBits = v30;
  v24._object = v9;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_36();
  v25._countAndFlagsBits = v11;
  v25._object = v12;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_36();
  v26._countAndFlagsBits = v14;
  v26._object = v15;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_36();
  v27._countAndFlagsBits = v20;
  v27._object = v21;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 93;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return __src[0];
}

void OUTLINED_FUNCTION_0_36()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t dispatch thunk of CommunicationProtocol.updateBuffers(forInitialPayload:bufferedLength:forceReconnect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

uint64_t dispatch thunk of CommunicationProtocol.bufferGeneralData(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of CommunicationProtocol.bytesAvailable(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 176))();
}

uint64_t dispatch thunk of CommunicationProtocol.compressData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

BOOL specialized Set.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 0xC000000000000001) != 0)
    v1 = __CocoaSet.count.getter();
  else
    v1 = *(_QWORD *)(a1 + 16);
  return v1 == 0;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  BOOL v13;
  uint64_t v14;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = __CocoaSet.startIndex.getter();
    v4 = v3;
    v5 = 1;
  }
  else
  {
    v2 = specialized _NativeSet.startIndex.getter(a1);
    v4 = v6;
    v5 = v7 & 1;
  }
  v8 = specialized Set.endIndex.getter(a1);
  v10 = v9;
  v12 = v11 & 1;
  v13 = specialized static Set.Index.== infix(_:_:)(v2, v4, v5, v8, v9, v11 & 1);
  outlined consume of Set<BackgroundConnection>.Index._Variant(v8, v10, v12);
  if (v13)
  {
    outlined consume of Set<BackgroundConnection>.Index._Variant(v2, v4, v5);
    return 0;
  }
  else
  {
    v14 = specialized Set.subscript.getter(v2, v4, v5, a1);
    outlined consume of Set<BackgroundConnection>.Index._Variant(v2, v4, v5);
  }
  return v14;
}

id sub_246F30684(id a1)
{
  return a1;
}

void Connection.delegate.getter()
{
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_95_1();
}

uint64_t Connection.delegate.setter()
{
  OUTLINED_FUNCTION_0_2();
  swift_unknownObjectWeakAssign();
  return OUTLINED_FUNCTION_3_6();
}

uint64_t key path setter for Connection.delegate : Connection()
{
  swift_unknownObjectRetain();
  return Connection.delegate.setter();
}

void Connection.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___SNConnectionInternal_delegate;
  v3[4] = v1;
  v3[5] = v4;
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_95_1();
}

uint64_t (*sub_246F307D8(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return Connection.delegate.modify;
}

_QWORD *Connection.connectionConfiguration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _QWORD v5[65];

  v3 = (const void *)(v1 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration);
  OUTLINED_FUNCTION_28(v5, v3);
  OUTLINED_FUNCTION_28(a1, v3);
  return outlined retain of ConnectionConfiguration(v5);
}

id Connection.connectionQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SNConnectionInternal_connectionQueue);
}

uint64_t Connection.activeBackgroundConnection.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection) = a1;
  return swift_release();
}

uint64_t Connection.activeRoute.setter(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_WORD *)(a1 + 112);
  v3 = v1 + OBJC_IVAR___SNConnectionInternal_activeRoute;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___SNConnectionInternal_activeRoute);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___SNConnectionInternal_activeRoute + 8);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v6;
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 48) = v7;
  v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 80) = v8;
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a1 + 96);
  *(_WORD *)(v3 + 112) = v2;
  return outlined consume of ConnectionPolicyRoute?(v5, v4);
}

id Connection.__allocating_init(connectionConfiguration:connectionQueue:)(const void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _BYTE v7[520];

  OUTLINED_FUNCTION_28(v7, a1);
  v3 = objc_allocWithZone((Class)type metadata accessor for ConnectionInfo());
  v4 = ConnectionInfo.init(connectionConfiguration:)(v7);
  v5 = objc_allocWithZone((Class)type metadata accessor for Connection());
  return Connection.init(connectionInfo:connectionQueue:)(v4, a2);
}

void Connection.__allocating_init(connectionInfo:connectionQueue:)()
{
  void *v0;
  objc_class *v1;
  void *v2;
  id v3;

  OUTLINED_FUNCTION_8_7();
  v3 = objc_allocWithZone(v1);
  Connection.init(connectionInfo:connectionQueue:)(v2, v0);
  OUTLINED_FUNCTION_23_1();
}

id Connection.init(connectionInfo:connectionQueue:)(void *a1, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  objc_super v18;
  _BYTE v19[520];

  v3 = v2;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection] = 0;
  OUTLINED_FUNCTION_106_1((uint64_t)&v3[OBJC_IVAR___SNConnectionInternal_activeRoute], (__n128)xmmword_246F729D0);
  v3[OBJC_IVAR___SNConnectionInternal_isCanceled] = 0;
  v3[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory] = MEMORY[0x24BEE4AF8];
  v6 = OBJC_IVAR___SNConnectionInternal_networkManager;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_networkManager] = 0;
  ConnectionInfo.connectionConfiguration.getter(v19);
  OUTLINED_FUNCTION_28(&v3[OBJC_IVAR___SNConnectionInternal_connectionConfiguration], v19);
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_connectionQueue] = a2;
  v7 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections] = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_pendingRoutes] = v7;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_comatoseBackgroundConnections] = v7;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_comatoseRoutes] = v7;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_scheduledRoutes] = v7;
  v8 = v3;
  v9 = a2;
  v10 = dispatch_group_create();
  *(_QWORD *)&v8[OBJC_IVAR___SNConnectionInternal_activeConnectionGroup] = v10;
  dispatch_group_enter(v10);
  if (one-time initialization token for shared != -1)
    swift_once();
  v11 = (void *)static NetworkManager.shared;
  v12 = *(void **)&v3[v6];
  *(_QWORD *)&v3[v6] = static NetworkManager.shared;
  v13 = v11;

  if (one-time initialization token for sharedNetworkAnalytics != -1)
    swift_once();
  v14 = (void *)static NetworkAnalytics.sharedNetworkAnalytics;
  *(_QWORD *)&v8[OBJC_IVAR___SNConnectionInternal_networkAnalytics] = static NetworkAnalytics.sharedNetworkAnalytics;
  v15 = v14;

  v18.receiver = v8;
  v18.super_class = (Class)type metadata accessor for Connection();
  v16 = objc_msgSendSuper2(&v18, sel_init);

  return v16;
}

id Connection.init(connectionInfo:connectionQueue:networkManager:networkAnalytics:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSObject *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  objc_super v22;
  _BYTE v23[80];
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_19();
  v24 = v1;
  v25 = v2;
  v3 = v0;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection] = 0;
  OUTLINED_FUNCTION_106_1((uint64_t)&v3[OBJC_IVAR___SNConnectionInternal_activeRoute], (__n128)xmmword_246F729D0);
  v3[OBJC_IVAR___SNConnectionInternal_isCanceled] = 0;
  v3[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory] = MEMORY[0x24BEE4AF8];
  v12 = OBJC_IVAR___SNConnectionInternal_networkManager;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_networkManager] = 0;
  ConnectionInfo.connectionConfiguration.getter(v23);
  OUTLINED_FUNCTION_28(&v3[OBJC_IVAR___SNConnectionInternal_connectionConfiguration], v23);
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_connectionQueue] = v9;
  v13 = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections] = MEMORY[0x24BEE4B08];
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_pendingRoutes] = v13;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_comatoseBackgroundConnections] = v13;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_comatoseRoutes] = v13;
  *(_QWORD *)&v3[OBJC_IVAR___SNConnectionInternal_scheduledRoutes] = v13;
  v14 = v3;
  v15 = v9;
  v16 = dispatch_group_create();
  *(_QWORD *)&v14[OBJC_IVAR___SNConnectionInternal_activeConnectionGroup] = v16;
  dispatch_group_enter(v16);
  v17 = *(void **)&v3[v12];
  *(_QWORD *)&v3[v12] = v7;
  v18 = v7;

  *(_QWORD *)&v14[OBJC_IVAR___SNConnectionInternal_networkAnalytics] = v5;
  v19 = v5;

  v22.receiver = v14;
  v22.super_class = (Class)type metadata accessor for Connection();
  v20 = objc_msgSendSuper2(&v22, sel_init);

  return v20;
}

void Connection.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v0 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
    dispatch_group_leave(*(dispatch_group_t *)(v0 + OBJC_IVAR___SNConnectionInternal_activeConnectionGroup));
  v4 = *(void **)(v0 + OBJC_IVAR___SNConnectionInternal_networkAnalytics);
  v5 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v5);
  v6 = v4;
  NetworkAnalytics.setNetworkConnectionId(_:)();
}

id sub_246F30E80()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  outlined destroy of RPCOspreyConnectionProtocol?(v2, &demangling cache variable for type metadata for UUID?);
  v5 = *(id *)(v0 + v3);
  NetworkAnalytics.setConnectionProvider(_:)((Swift::String_optional)0);

  v6 = type metadata accessor for Connection();
  *(_QWORD *)(v4 - 48) = v0;
  *(_QWORD *)(v4 - 40) = v6;
  return objc_msgSendSuper2((objc_super *)(v4 - 48), sel_dealloc);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.start()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  _WORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unsigned __int8 v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  _WORD *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;

  v2 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_1_0();
  v6 = v5 - v4;
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.siriNetwork);
  Logger.logObject.getter();
  v9 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_122_0(v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_246EC7000, v8, v1, "Connection - Start: Starting connection", v10, 2u);
    OUTLINED_FUNCTION_0_4();
  }

  if (*(_QWORD *)(v2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    OUTLINED_FUNCTION_111_1();
    v11 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_7_0(v11))
    {
      v12 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_102_1(v12);
      OUTLINED_FUNCTION_4_1(&dword_246EC7000, v13, v14, "Connection - Start: Not starting connection because we already have an active one");
      OUTLINED_FUNCTION_0_4();
    }

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    OUTLINED_FUNCTION_11_2();
    v16 = 2;
LABEL_13:
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)v15 = v16;
    *(_OWORD *)(v15 + 24) = xmmword_246F72F10;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v2 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) & 1) != 0)
  {
    OUTLINED_FUNCTION_111_1();
    v17 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_7_0(v17))
    {
      v18 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_102_1(v18);
      OUTLINED_FUNCTION_4_1(&dword_246EC7000, v19, v20, "Connection - Start: Not starting connection because it was canceled");
      OUTLINED_FUNCTION_0_4();
    }

    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    OUTLINED_FUNCTION_11_2();
    v16 = 1;
    goto LABEL_13;
  }
  v21 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v22 = objc_msgSend(v21, sel_isDictationHIPAACompliant);

  if ((v22 & 1) != 0)
  {
    OUTLINED_FUNCTION_111_1();
    v23 = OUTLINED_FUNCTION_58();
    if (OUTLINED_FUNCTION_7_0(v23))
    {
      v24 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_102_1(v24);
      OUTLINED_FUNCTION_4_1(&dword_246EC7000, v25, v26, "Connection - Start: Not starting connection because we have HIPAA On-Device Dictation enabled");
      OUTLINED_FUNCTION_0_4();
    }

    lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();
    OUTLINED_FUNCTION_11_2();
    *v27 = 1;
  }
  else
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration + 392))
    {
      v29 = v2 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration;
      v28 = (uint64_t *)(v2 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration);
      outlined copy of ConnectionPolicy?(v28[40], v28[41], v28[42], v28[43], v28[44], v28[45], v28[46], v28[47], v28[48], *(_QWORD *)(v2 + OBJC_IVAR___SNConnectionInternal_connectionConfiguration + 392));
      v30 = OUTLINED_FUNCTION_8_6();
      specialized Sequence.filter(_:)(v30);
      v32 = *(_QWORD *)(v31 + 16);
      v33 = swift_bridgeObjectRelease();
      if (v32 || *(_QWORD *)(v29 + 408) != 1)
      {
        v41 = OUTLINED_FUNCTION_8_6();
        specialized Sequence.filter(_:)(v41);
        v43 = (void *)v42;
        v44 = static ConnectionPolicyRoute.policyTypePOPVerification(_:)(v42);
        OUTLINED_FUNCTION_44_1();
        if (*(_QWORD *)(v44 + 16))
        {
          v45 = *(id *)(v2 + OBJC_IVAR___SNConnectionInternal_networkAnalytics);
          UUID.init()();
          v46 = type metadata accessor for UUID();
          __swift_storeEnumTagSinglePayload(v6, 0, 1, v46);
          NetworkAnalytics.setNetworkConnectionId(_:)();
        }
        v47 = swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_27_7(v47, v48, v49, v50, v51, v52, v53, v54, v60, v61);
        OUTLINED_FUNCTION_111_1();
        v55 = OUTLINED_FUNCTION_58();
        if (OUTLINED_FUNCTION_7_0(v55))
        {
          v56 = (_WORD *)OUTLINED_FUNCTION_2_2();
          OUTLINED_FUNCTION_102_1(v56);
          OUTLINED_FUNCTION_4_1(&dword_246EC7000, v57, v58, "Connection - Start: Not starting connection because we don't have acceptable routes");
          OUTLINED_FUNCTION_0_4();
        }

      }
      else
      {
        OUTLINED_FUNCTION_27_7(v33, v34, v35, v36, v37, v38, v39, v40, v60, v61);
      }
    }
    lazy protocol witness table accessor for type ConnectionConfigurationError and conformance ConnectionConfigurationError();
    OUTLINED_FUNCTION_11_2();
    *v59 = 0;
  }
LABEL_14:
  swift_willThrow();
}

void Connection.sendData(_:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _OWORD v11[2];

  OUTLINED_FUNCTION_19();
  v9 = *(_QWORD *)(OUTLINED_FUNCTION_43_3() - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_88_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_3_0();
  v6 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_14();
  outlined init with copy of Any(v3, (uint64_t)v11);
  v7 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v7 + 16) = v6;
  outlined init with take of Any(v11, (_OWORD *)(v7 + 24));
  *(_QWORD *)(v7 + 56) = v2;
  *(_QWORD *)(v7 + 64) = v1;
  v10[4] = partial apply for closure #1 in Connection.sendData(_:with:);
  v10[5] = v7;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v10[3] = &block_descriptor_14;
  _Block_copy(v10);
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_39_4();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_19_11();
  v8 = OUTLINED_FUNCTION_171_1();
  MEMORY[0x24956D244](v8);
  OUTLINED_FUNCTION_190_0();
  OUTLINED_FUNCTION_14_10(v9);
  OUTLINED_FUNCTION_46_0(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in Connection.sendData(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[2];

  v7 = a1 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x24956E090](v7);
  if (v8)
  {
    v9 = (void *)v8;
    outlined init with copy of Any(a2, (uint64_t)v11);
    v10 = swift_allocObject();
    outlined init with take of Any(v11, (_OWORD *)(v10 + 16));
    *(_QWORD *)(v10 + 48) = a3;
    *(_QWORD *)(v10 + 56) = a4;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(a3);
    Connection.accessPotentiallyActiveConnections(_:)();
    swift_release();

  }
}

void closure #1 in closure #1 in Connection.sendData(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  void *v7;
  uint64_t v8;

  if (a1)
  {
    swift_retain();
    BackgroundConnection.sendData(_:with:)(a2, a3, a4);
    swift_release();
  }
  else if (a3)
  {
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v7 = (void *)swift_allocError();
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 3;
    *(_OWORD *)(v8 + 24) = xmmword_246F72F10;
    a3();

  }
}

void Connection.sendCommand(_:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_19();
  v3 = OUTLINED_FUNCTION_43_3();
  v4 = OUTLINED_FUNCTION_33_3(v3);
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_0_3();
  v6 = OUTLINED_FUNCTION_23(v5);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_3_0();
  v7 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_104_2();
  v8 = (_QWORD *)OUTLINED_FUNCTION_6();
  v8[2] = v7;
  v8[3] = v2;
  v8[4] = v1;
  v8[5] = v0;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_83();
  swift_unknownObjectRetain();
  OUTLINED_FUNCTION_39_4();
  OUTLINED_FUNCTION_137_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v9, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_19_11();
  OUTLINED_FUNCTION_90_2();
}

void sub_246F32958()
{
  uint64_t v0;

  OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_14_10(*(_QWORD *)(v0 - 144));
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void sub_246F32A00()
{
  uint64_t v0;
  void *v1;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v0);
  swift_unknownObjectRelease();

}

void Connection.sendCommands(_:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_19();
  v3 = OUTLINED_FUNCTION_43_3();
  v4 = OUTLINED_FUNCTION_33_3(v3);
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_0_3();
  v6 = OUTLINED_FUNCTION_23(v5);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_3_0();
  v7 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_104_2();
  v8 = (_QWORD *)OUTLINED_FUNCTION_6();
  v8[2] = v7;
  v8[3] = v2;
  v8[4] = v1;
  v8[5] = v0;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_83();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_39_4();
  OUTLINED_FUNCTION_137_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v9, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_19_11();
  OUTLINED_FUNCTION_90_2();
}

void sub_246F32B50()
{
  uint64_t v0;

  OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_14_10(*(_QWORD *)(v0 - 144));
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in Connection.sendCommand(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t, uint64_t), void (*a7)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v13 = a1 + 16;
  OUTLINED_FUNCTION_48();
  v14 = MEMORY[0x24956E090](v13);
  if (v14)
  {
    v15 = (void *)v14;
    a5(a2);
    a6(a3, a4);
    a7(v15, a2, a3, a4);

  }
}

uint64_t closure #1 in closure #1 in Connection.sendCommands(_:with:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, void *))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  if (a1)
  {
    swift_retain();
    BackgroundConnection.sendCommands(_:with:)();
    return swift_release();
  }
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v6 = result;
    if (result)
      goto LABEL_5;
    return swift_bridgeObjectRelease();
  }
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v6)
    return swift_bridgeObjectRelease();
LABEL_5:
  if (v6 >= 1)
  {
    v7 = 0;
    while ((a2 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x24956D43C](v7, a2);
      if (a3)
        goto LABEL_9;
LABEL_10:
      ++v7;
      swift_unknownObjectRelease();
      if (v6 == v7)
        return swift_bridgeObjectRelease();
    }
    v8 = *(_QWORD *)(a2 + 8 * v7 + 32);
    swift_unknownObjectRetain();
    if (!a3)
      goto LABEL_10;
LABEL_9:
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v9 = (void *)swift_allocError();
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)v10 = 3;
    *(_OWORD *)(v10 + 24) = xmmword_246F72F10;
    a3(v8, v9);

    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_246F32E24()
{
  void *v0;
  uint64_t v1;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?(v1);

  return swift_bridgeObjectRelease();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned SNSessionObject?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

Swift::Void __swiftcall Connection.setSendPings(_:)(Swift::Bool a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_14();
  v3 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v3 + 16) = v2;
  *(_BYTE *)(v3 + 24) = a1;
  OUTLINED_FUNCTION_85_1();
  Connection.waitForActiveConnectionToExecute(_:)();
  swift_release();
  OUTLINED_FUNCTION_1_26();
}

void closure #1 in Connection.setSendPings(_:)(uint64_t a1, char a2)
{
  uint64_t v3;
  char *v4;
  void *v5;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = (char *)MEMORY[0x24956E090](v3);
  if (v4)
  {
    v5 = v4;
    if (*(_QWORD *)&v4[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection]
      && (v4[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] & 1) == 0)
    {
      swift_retain();
      BackgroundConnection.setSendPings(_:)(a2 & 1);

      swift_release();
    }
    else
    {

    }
  }
}

void Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  void (*v5)(void);
  char v6;
  char v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  os_log_type_t v27;
  _WORD *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  objc_class *v34;
  uint64_t v35;
  os_log_type_t v36;
  _WORD *v37;
  objc_class *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_19();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = OUTLINED_FUNCTION_18();
  v11 = OUTLINED_FUNCTION_33_3(v10);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_1_0();
  v14 = v13 - v12;
  v46 = type metadata accessor for DispatchQoS();
  v15 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_1_0();
  v18 = v17 - v16;
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_1_0();
  LOBYTE(v22) = v21 - v20;
  if ((*((_BYTE *)v1 + OBJC_IVAR___SNConnectionInternal_isCanceled) & 1) != 0)
  {
    if (v5)
      v5();
    goto LABEL_33;
  }
  v45 = v3;
  *((_BYTE *)v1 + OBJC_IVAR___SNConnectionInternal_isCanceled) = 1;
  dispatch_queue_get_label(0);
  static String.Encoding.utf8.getter();
  v23 = String.init(cString:encoding:)();
  v25 = v24;
  if ((v7 & 1) != 0)
  {
    OUTLINED_FUNCTION_40_0();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v26 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v26, (uint64_t)static Logger.siriNetwork);
    v27 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_81_3(v27))
    {
      v28 = (_WORD *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_102_1(v28);
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v9, (os_log_type_t)v22, "Connection - Cancel: on connection queue", (uint8_t *)v10);
      OUTLINED_FUNCTION_0_4();
    }

    Connection.cancelSynchronously(_:)((void (*)(uint64_t))v5, v45);
    goto LABEL_33;
  }
  if ((v9 & 1) == 0)
  {
    v32 = v24;
LABEL_27:
    OUTLINED_FUNCTION_44_1();
LABEL_28:
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v39 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v39, (uint64_t)static Logger.siriNetwork);
    v40 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_81_3(v40))
    {
      v41 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v41 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v32, (os_log_type_t)v22, "Connection - Cancel: async", v41);
      OUTLINED_FUNCTION_0_4();
    }

    v42 = OUTLINED_FUNCTION_6();
    swift_unknownObjectWeakInit();
    v43 = (_QWORD *)OUTLINED_FUNCTION_6();
    v43[2] = v42;
    v43[3] = v5;
    v43[4] = v45;
    v44 = OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v5);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    OUTLINED_FUNCTION_13();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24956D244](0, v18, v14, v44);
    _Block_release(v44);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v14, v10);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v46);
    swift_release();
    OUTLINED_FUNCTION_14();
    goto LABEL_33;
  }
  v22 = (void *)v23;
  v29 = *(NSObject **)((char *)v1 + OBJC_IVAR___SNConnectionInternal_connectionQueue);
  v30 = OS_dispatch_queue.label.getter();
  v32 = v31;
  if (v25)
  {
    if (v22 == (void *)v30 && v25 == v31)
      goto LABEL_26;
    LOBYTE(v22) = OUTLINED_FUNCTION_178_1();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_44_1();
    v34 = (objc_class *)v45;
    if ((v22 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
    OUTLINED_FUNCTION_44_1();
    v34 = (objc_class *)v45;
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v35 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v35, (uint64_t)static Logger.siriNetwork);
  v36 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_81_3(v36))
  {
    v37 = (_WORD *)OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_102_1(v37);
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v32, (os_log_type_t)v22, "Connection - Cancel: synchronously", (uint8_t *)v10);
    OUTLINED_FUNCTION_0_4();
  }

  v32 = OUTLINED_FUNCTION_6();
  v32[2].isa = v1;
  v32[3].isa = (Class)v5;
  v32[4].isa = v34;
  v10 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:);
  *(_QWORD *)(v10 + 24) = v32;
  v22 = OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed () -> ());
  v14 = v10;
  v38 = v1;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v5);
  swift_retain();
  OUTLINED_FUNCTION_200();
  dispatch_sync(v29, v22);
  _Block_release(v22);
  LOBYTE(v22) = OUTLINED_FUNCTION_177_0();
  OUTLINED_FUNCTION_78_0();
  swift_release();
  if ((v22 & 1) != 0)
  {
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_40_0();
    goto LABEL_27;
  }
LABEL_33:
  OUTLINED_FUNCTION_1_1();
}

void closure #2 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x24956E090](v5);
  if (v6)
  {
    v7 = (void *)v6;
    Connection.cancelSynchronously(_:)(a2, a3);

  }
}

void Connection.getConnectionMetrics(_:with:)()
{
  char *v0;
  uint64_t v1;
  char *v2;
  objc_class *v3;
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  BOOL v25;
  objc_class *v26;
  objc_class *v27;
  char v28;
  _QWORD *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[180];
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)();
  _QWORD *v48;

  OUTLINED_FUNCTION_19();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = OUTLINED_FUNCTION_18();
  v43 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_1_0();
  v13 = v12 - v11;
  v14 = type metadata accessor for DispatchQoS();
  v41 = *(_QWORD *)(v14 - 8);
  v42 = v14;
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_3_0();
  type metadata accessor for String.Encoding();
  OUTLINED_FUNCTION_4_10();
  MEMORY[0x24BDAC7A8](v16);
  dispatch_queue_get_label(0);
  static String.Encoding.utf8.getter();
  v17 = String.init(cString:encoding:)();
  v19 = v18;
  if ((v8 & 1) == 0)
  {
    OUTLINED_FUNCTION_8_2();
    v29 = (_QWORD *)OUTLINED_FUNCTION_6();
    v29[2] = v2;
    v29[3] = v6;
    v29[4] = v4;
    v47 = partial apply for closure #2 in Connection.getConnectionMetrics(_:with:);
    v48 = v29;
    v45 = MEMORY[0x24BDAC760];
    v46 = 1107296256;
    v30 = OUTLINED_FUNCTION_134((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
    v31 = v2;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v6);
    OUTLINED_FUNCTION_17();
    v44[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    OUTLINED_FUNCTION_13();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24956D244](0, v1, v13, v30);
    _Block_release(v30);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v13, v9);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v1, v42);
    swift_release();
    goto LABEL_26;
  }
  v20 = v17;
  v21 = *(NSObject **)&v2[OBJC_IVAR___SNConnectionInternal_connectionQueue];
  v22 = OS_dispatch_queue.label.getter();
  v24 = v23;
  if (v19)
  {
    v25 = v20 == v22 && v19 == v23;
    v26 = v4;
    v27 = (objc_class *)v6;
    if (v25)
      goto LABEL_17;
    v28 = OUTLINED_FUNCTION_178_1();
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_44_1();
    if ((v28 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    OUTLINED_FUNCTION_44_1();
    v26 = v4;
    v27 = (objc_class *)v6;
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v32 = OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_1(v32, (uint64_t)static Logger.siriNetwork);
  v33 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_1_23(v33))
  {
    v34 = (uint8_t *)OUTLINED_FUNCTION_2_2();
    *(_WORD *)v34 = 0;
    OUTLINED_FUNCTION_8_0(&dword_246EC7000, v24, (os_log_type_t)v19, "Connection - Get Connection Metrics: synchronously", v34);
    OUTLINED_FUNCTION_0_4();
  }

  v24 = OUTLINED_FUNCTION_6();
  v24[2].isa = (Class)v2;
  v24[3].isa = v27;
  v24[4].isa = v26;
  v35 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v35 + 16) = partial apply for closure #1 in Connection.getConnectionMetrics(_:with:);
  *(_QWORD *)(v35 + 24) = v24;
  v47 = thunk for @callee_guaranteed () -> ()partial apply;
  v48 = (_QWORD *)v35;
  v45 = MEMORY[0x24BDAC760];
  v46 = 1107296256;
  v19 = OUTLINED_FUNCTION_134((uint64_t)thunk for @escaping @callee_guaranteed () -> ());
  v36 = v2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?((uint64_t)v27);
  swift_retain();
  swift_release();
  dispatch_sync(v21, v19);
  _Block_release(v19);
  LOBYTE(v19) = OUTLINED_FUNCTION_177_0();
  OUTLINED_FUNCTION_78_0();
  swift_release();
  if ((v19 & 1) != 0)
  {
    __break(1u);
LABEL_17:
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_44_1();
LABEL_18:
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v37 = OUTLINED_FUNCTION_5_1();
    OUTLINED_FUNCTION_3_1(v37, (uint64_t)static Logger.siriNetwork);
    v38 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_1_23(v38))
    {
      v39 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      *(_WORD *)v39 = 0;
      OUTLINED_FUNCTION_8_0(&dword_246EC7000, v24, (os_log_type_t)v19, "Connection - Get Connection Metrics: on connection queue", v39);
      OUTLINED_FUNCTION_0_4();
    }

    if (Connection.activeOrAnyPendingConnection()())
    {
      OUTLINED_FUNCTION_48();
      v40 = OUTLINED_FUNCTION_16_0();
      BackgroundConnection.getConnectionMetrics(connectionMethodHistory:with:)(v40);
      OUTLINED_FUNCTION_78_0();
      OUTLINED_FUNCTION_8_2();
    }
    else if (v27)
    {
      _s11SiriNetwork17ConnectionMetricsVSgWOi0_(&v45);
      _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v45, (uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
      ((void (*)(_QWORD *))v27)(v44);
    }
  }
LABEL_26:
  OUTLINED_FUNCTION_1_1();
}

uint64_t closure #1 in Connection.getConnectionMetrics(_:with:)(uint64_t a1, uint64_t (*a2)(_BYTE *))
{
  uint64_t result;
  uint64_t v4;
  _BYTE v5[1440];
  _BYTE v6[1440];

  result = Connection.activeOrAnyPendingConnection()();
  if (result)
  {
    swift_beginAccess();
    v4 = swift_bridgeObjectRetain();
    BackgroundConnection.getConnectionMetrics(connectionMethodHistory:with:)(v4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else if (a2)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v6);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v6, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    return a2(v5);
  }
  return result;
}

uint64_t closure #2 in Connection.getConnectionMetrics(_:with:)(uint64_t a1, uint64_t (*a2)(_BYTE *))
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[1440];
  _BYTE v10[1440];

  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriNetwork);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_246EC7000, v4, v5, "Connection - Get Connection Metrics: async", v6, 2u);
    MEMORY[0x24956E018](v6, -1, -1);
  }

  result = Connection.activeOrAnyPendingConnection()();
  if (result)
  {
    swift_beginAccess();
    v8 = swift_bridgeObjectRetain();
    BackgroundConnection.getConnectionMetrics(connectionMethodHistory:with:)(v8);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else if (a2)
  {
    _s11SiriNetwork17ConnectionMetricsVSgWOi0_(v10);
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v10, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    return a2(v9);
  }
  return result;
}

uint64_t Connection.getSNConnectionMetrics(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  OUTLINED_FUNCTION_108_0();
  Connection.getConnectionMetrics(_:with:)();
  return OUTLINED_FUNCTION_0_31();
}

void closure #1 in Connection.getSNConnectionMetrics(_:with:)(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(id);
  void (*v3)(id);
  id v4;
  _BYTE v5[1433];
  _BYTE __src[1440];
  _BYTE v7[1440];

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0(v1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
  if (v3)
  {
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)v7, (uint64_t)__src, (uint64_t *)&demangling cache variable for type metadata for ConnectionMetrics?);
    if (_s11SiriNetwork24ConnectionSnapshotReportVSgWOg((uint64_t)__src) == 1)
    {
      v4 = 0;
    }
    else
    {
      memcpy(v5, __src, sizeof(v5));
      v4 = ConnectionMetrics.snConnectionMetrics.getter();
    }
    v3(v4);

  }
}

void Connection.getConnectionAnalysisInfo(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_19();
  v2 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_18();
  v6 = OUTLINED_FUNCTION_33_3(v5);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_88_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_3_0();
  v8 = OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  v9 = (_QWORD *)OUTLINED_FUNCTION_6();
  v9[2] = v8;
  v9[3] = v4;
  v9[4] = v2;
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_39_4();
  OUTLINED_FUNCTION_137_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v10, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_19_11();
  v11 = OUTLINED_FUNCTION_171_1();
  MEMORY[0x24956D244](v11);
  OUTLINED_FUNCTION_190_0();
  OUTLINED_FUNCTION_14_10(v12);
  OUTLINED_FUNCTION_46_0(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in Connection.getConnectionAnalysisInfo(_:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v7 = MEMORY[0x24956E090](a1 + 16);
  if (v7)
  {
    v8 = (void *)v7;
    if (Connection.activeOrAnyPendingConnection()())
    {
      if (a2)
      {
        BackgroundConnection.connectionAnalysisInfo.getter((uint64_t)v6);
        a2(v6);

        swift_release();
LABEL_7:
        outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v6, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
        return;
      }

      swift_release();
    }
    else
    {
      if (a2)
      {
        v9 = type metadata accessor for ConnectionAnalysisInfo();
        __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v9);
        a2(v6);

        goto LABEL_7;
      }

    }
  }
}

uint64_t Connection.getSNConnectionAnalysisInfo(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  v2 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0;
  OUTLINED_FUNCTION_108_0();
  Connection.getConnectionAnalysisInfo(_:)();
  return OUTLINED_FUNCTION_1_26();
}

void closure #1 in Connection.getSNConnectionAnalysisInfo(_:)(uint64_t a1, void (*a2)(id))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int *v11;
  id v12;
  id v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v20 - v9;
  if (a2)
  {
    outlined init with copy of NetworkConnectionProtocol?(a1, (uint64_t)&v20 - v9, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    v11 = (int *)type metadata accessor for ConnectionAnalysisInfo();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)v11) == 1)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v10, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
      v12 = 0;
    }
    else
    {
      v13 = objc_msgSend(objc_allocWithZone((Class)SNConnectionType), sel_initWithTechnology_, qword_246F74F10[v10[v11[8]]]);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)v10, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for URL?);
      v14 = &v10[v11[5]];
      if (v14[4])
        v15 = 0;
      else
        v15 = *(unsigned int *)v14;
      if ((v15 & 0x80000000) != 0)
      {
        __break(1u);
        return;
      }
      isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      v16 = v10[v11[7]];
      v17 = (uint64_t *)&v10[v11[9]];
      v18 = *v17;
      v19 = v17[1];
      objc_allocWithZone((Class)SNConnectionAnalysisInfo);
      swift_bridgeObjectRetain();
      v12 = @nonobjc SNConnectionAnalysisInfo.init(connectionURL:interfaceIndex:sendBufferSize:wwanPreferred:connectionType:policyId:)((uint64_t)v6, v15, isa, v16, v13, v18, v19);
      outlined destroy of ConnectionAnalysisInfo((uint64_t)v10);
    }
    a2(v12);

  }
}

Swift::Void __swiftcall Connection.probeConnection()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_19();
  v3 = OUTLINED_FUNCTION_18();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_88_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  v6 = OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_137_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v7, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_87_2();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24956D244](0, v1, v0, v6);
  _Block_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
  OUTLINED_FUNCTION_46_0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in Connection.probeConnection()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x24956E090](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (Connection.activeOrAnyPendingConnection()())
    {
      BackgroundConnection.probeConnection()();

      swift_release();
    }
    else
    {

    }
  }
}

uint64_t Connection.barrier(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_8_7();
  v2 = OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_14();
  v3 = (_QWORD *)OUTLINED_FUNCTION_6();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0;
  OUTLINED_FUNCTION_139_0();
  OUTLINED_FUNCTION_108_0();
  Connection.waitForActiveConnectionToExecute(_:)();
  swift_release();
  return OUTLINED_FUNCTION_0_31();
}

void closure #1 in Connection.barrier(with:)(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;
  char *v6;
  void *v7;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = (char *)MEMORY[0x24956E090](v5);
  if (v6)
  {
    v7 = v6;
    if (*(_QWORD *)&v6[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection]
      && (v6[OBJC_IVAR___SNConnectionInternal_isCanceledInternal] & 1) == 0)
    {
      swift_retain();
      BackgroundConnection.barrier(with:)((uint64_t)a2, a3);

      swift_release();
      return;
    }

  }
  if (a2)
    a2(0);
}

void closure #1 in Connection.willStartConnection(_:type:)()
{
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_95_1();
}

void sub_246F34864(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_132_1();
    Logger.logObject.getter();
    v3 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_106(v3))
    {
      v4 = (uint8_t *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v4 = 136315138;
      OUTLINED_FUNCTION_164_1();
      if (v5)
      {
        OUTLINED_FUNCTION_161_0();
        v6 = String.init<A>(describing:)();
      }
      else
      {
        OUTLINED_FUNCTION_11_7();
        v6 = OUTLINED_FUNCTION_1_4();
      }
      OUTLINED_FUNCTION_127_0(v6, v7);
      OUTLINED_FUNCTION_149_1();
      OUTLINED_FUNCTION_35_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_30_0(&dword_246EC7000, v1, v3, "Connection - Start: Background Connection. Connection route %s will start.", v4);
      OUTLINED_FUNCTION_20_1();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_73_3();
  }
  OUTLINED_FUNCTION_65_1();
}

void closure #1 in Connection.willStartConnection(_:with:)()
{
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_95_1();
}

void sub_246F34A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (a1)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_5_1();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_132_1();
    swift_bridgeObjectRetain_n();
    Logger.logObject.getter();
    v13 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_106(v13))
    {
      v14 = OUTLINED_FUNCTION_2_2();
      a10 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v14 = 136315394;
      OUTLINED_FUNCTION_164_1();
      if (v15)
      {
        OUTLINED_FUNCTION_161_0();
        v16 = String.init<A>(describing:)();
      }
      else
      {
        OUTLINED_FUNCTION_11_7();
        v16 = OUTLINED_FUNCTION_1_4();
      }
      a11 = OUTLINED_FUNCTION_127_0(v16, v17);
      OUTLINED_FUNCTION_149_1();
      OUTLINED_FUNCTION_35_2();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      OUTLINED_FUNCTION_16_0();
      v18 = Dictionary.description.getter();
      v20 = v19;
      OUTLINED_FUNCTION_8_2();
      a11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &a10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_2_7();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_80_2(&dword_246EC7000, v11, v13, "Connection - Start: Background Connection. Connection route %s will start, HTTP Header %s.", (uint8_t *)v14);
      OUTLINED_FUNCTION_99_2();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_2_7();
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_73_3();
  }
  OUTLINED_FUNCTION_65_1();
}

void closure #1 in Connection.didOpenConnectionType(_:type:routeId:delay:)()
{
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_95_1();
}

void sub_246F34CAC(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[34];

  if (a1)
  {
    countAndFlagsBits = BackgroundConnection.getConnectionMethod()()._countAndFlagsBits;
    v5 = *(_QWORD *)&a1[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection];
    if (!v5)
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v12 = OUTLINED_FUNCTION_5_1();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_69_1();
      swift_bridgeObjectRetain_n();
      Logger.logObject.getter();
      v13 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_106(v13))
      {
        v14 = OUTLINED_FUNCTION_2_2();
        v53[0] = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v14 = 136315394;
        v15 = *(_QWORD *)(v1 + 448);
        if (v15 >= 2)
        {
          OUTLINED_FUNCTION_118_1(v15);
          v16 = OUTLINED_FUNCTION_192_1();
        }
        else
        {
          OUTLINED_FUNCTION_11_7();
          v16 = OUTLINED_FUNCTION_1_4();
        }
        *(_QWORD *)(v2 - 224) = OUTLINED_FUNCTION_124_0(v16, v17, v53);
        OUTLINED_FUNCTION_158_1();
        OUTLINED_FUNCTION_38_5();
        OUTLINED_FUNCTION_135_1();
        *(_WORD *)(v14 + 12) = 2080;
        OUTLINED_FUNCTION_34_4();
        *(_QWORD *)(v2 - 224) = OUTLINED_FUNCTION_121_0(countAndFlagsBits, v36, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_153_1();
        OUTLINED_FUNCTION_80_2(&dword_246EC7000, v1, v13, "Connection - Status: Background Connection. Connection route %s ready. Method %s", (uint8_t *)v14);
        OUTLINED_FUNCTION_99_2();
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_2_7();
      OUTLINED_FUNCTION_38_5();
      v37 = OUTLINED_FUNCTION_85_1();
      Connection.activeBackgroundConnection.setter(v37);
      v38 = *(_QWORD *)(v1 + 448);
      if (v38 != 1)
      {
        v39 = (_OWORD *)(v2 - 224);
        v40 = *(_WORD *)(v1 + 552);
        v41 = *(_QWORD *)(v1 + 544);
        v42 = *(_QWORD *)(v1 + 520);
        v43 = *(_QWORD *)(v1 + 480);
        v44 = *(_QWORD *)(v1 + 456);
        *(_QWORD *)(v2 - 224) = *(_QWORD *)(v1 + 440);
        *(_QWORD *)(v2 - 216) = v38;
        *(_OWORD *)((char *)v39 + 24) = *(_OWORD *)(v1 + 464);
        *(_QWORD *)(v2 - 208) = v44;
        *(_QWORD *)(v2 - 184) = v43;
        v45 = *(_OWORD *)(v1 + 504);
        v39[3] = *(_OWORD *)(v1 + 488);
        v39[4] = v45;
        *(_OWORD *)((char *)v39 + 88) = *(_OWORD *)(v1 + 528);
        *(_QWORD *)(v2 - 144) = v42;
        *(_QWORD *)(v2 - 120) = v41;
        *(_WORD *)(v2 - 112) = v40;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_4_15();
        OUTLINED_FUNCTION_16_0();
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_9_10();
        Connection.activeRoute.setter(v2 - 224);
      }
      OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_73_3();
    }
    if (v5 == v1)
    {
      OUTLINED_FUNCTION_6_1();
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v18 = OUTLINED_FUNCTION_5_1();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_69_1();
      Logger.logObject.getter();
      v19 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_106(v19))
      {
        v20 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        v53[0] = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v20 = 136315138;
        v21 = *(_QWORD *)(v1 + 448);
        if (v21 >= 2)
        {
          OUTLINED_FUNCTION_118_1(v21);
          v22 = OUTLINED_FUNCTION_192_1();
        }
        else
        {
          OUTLINED_FUNCTION_11_7();
          v22 = OUTLINED_FUNCTION_1_4();
        }
        *(_QWORD *)(v2 - 224) = OUTLINED_FUNCTION_124_0(v22, v23, v53);
        OUTLINED_FUNCTION_158_1();
        OUTLINED_FUNCTION_38_5();
        OUTLINED_FUNCTION_135_1();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, v1, v19, "Connection - Status: Background Connection. Connection route %s open twice or became viable again.", v20);
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_38_5();
    }
    else
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v6 = OUTLINED_FUNCTION_5_1();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_69_1();
      OUTLINED_FUNCTION_34_4();
      Logger.logObject.getter();
      v7 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_106(v7))
      {
        v8 = OUTLINED_FUNCTION_2_2();
        v53[0] = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v8 = 136315394;
        v9 = *(_QWORD *)(v1 + 448);
        if (v9 >= 2)
        {
          OUTLINED_FUNCTION_118_1(v9);
          v11 = OUTLINED_FUNCTION_192_1();
          v10 = v24;
        }
        else
        {
          OUTLINED_FUNCTION_11_7();
          v10 = 0xE700000000000000;
          v11 = OUTLINED_FUNCTION_1_4();
        }
        *(_QWORD *)(v2 - 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, v53);
        OUTLINED_FUNCTION_149_1();
        OUTLINED_FUNCTION_38_5();
        OUTLINED_FUNCTION_6_4();
        *(_WORD *)(v8 + 12) = 2080;
        OUTLINED_FUNCTION_34_4();
        *(_QWORD *)(v2 - 224) = OUTLINED_FUNCTION_121_0(countAndFlagsBits, v25, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_153_1();
        OUTLINED_FUNCTION_80_2(&dword_246EC7000, v1, v7, "Connection - Status: Background Connection. Connection route %s race lost. Cancelling background connection. Method used %s", (uint8_t *)v8);
        OUTLINED_FUNCTION_99_2();
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_2_7();
      OUTLINED_FUNCTION_38_5();
      BackgroundConnection.cancel()();
      OUTLINED_FUNCTION_0_2();
      specialized Set._Variant.remove(_:)(v1);
      swift_endAccess();
      OUTLINED_FUNCTION_78_0();
      v26 = *(_QWORD *)(v1 + 448);
      if (v26 == 1)
      {

      }
      else
      {
        v27 = *(_QWORD *)(v1 + 544);
        v48 = *(_QWORD *)(v1 + 536);
        v28 = *(_QWORD *)(v1 + 528);
        v30 = *(_QWORD *)(v1 + 504);
        v29 = *(_QWORD *)(v1 + 520);
        v49 = *(_QWORD *)(v1 + 512);
        v31 = *(_QWORD *)(v1 + 488);
        v32 = *(_QWORD *)(v1 + 480);
        v52 = *(_QWORD *)(v1 + 496);
        v34 = *(_QWORD *)(v1 + 464);
        v33 = *(_QWORD *)(v1 + 456);
        v51 = *(_QWORD *)(v1 + 472);
        v50 = *(_QWORD *)(v1 + 440);
        v47 = *(_WORD *)(v1 + 552);
        *(_QWORD *)(v2 - 224) = v50;
        *(_QWORD *)(v2 - 216) = v26;
        *(_QWORD *)(v2 - 208) = v33;
        *(_QWORD *)(v2 - 200) = v34;
        *(_QWORD *)(v2 - 192) = v51;
        *(_QWORD *)(v2 - 184) = v32;
        *(_QWORD *)(v2 - 176) = v31;
        *(_QWORD *)(v2 - 168) = v52;
        *(_QWORD *)(v2 - 160) = v30;
        *(_BYTE *)(v2 - 152) = v49 & 1;
        *(_QWORD *)(v2 - 144) = v29;
        *(_QWORD *)(v2 - 136) = v28;
        *(_BYTE *)(v2 - 128) = v48;
        *(_QWORD *)(v2 - 120) = v27;
        *(_BYTE *)(v2 - 112) = v47 & 1;
        *(_BYTE *)(v2 - 111) = HIBYTE(v47);
        OUTLINED_FUNCTION_0_2();
        OUTLINED_FUNCTION_16_0();
        OUTLINED_FUNCTION_34_4();
        OUTLINED_FUNCTION_9_10();
        OUTLINED_FUNCTION_47_3();
        OUTLINED_FUNCTION_8_6();
        specialized Set._Variant.remove(_:)((void *)(v2 - 224), (uint64_t)v53);
        v35 = v53[1];
        v46 = v53[0];
        swift_endAccess();
        outlined consume of ConnectionPolicyRoute?(v46, v35);

        outlined consume of ConnectionPolicyRoute?(v50, v26);
      }
    }
  }
  OUTLINED_FUNCTION_63_2();
}

void closure #1 in Connection.didReceiveObject(_:object:)()
{
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_73_3();
}

void sub_246F354D0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    OUTLINED_FUNCTION_45_0();
    v2 = OUTLINED_FUNCTION_188_1();
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)&a1[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection];
      if (v4)
        v5 = v2 == v4;
      else
        v5 = 0;
      if (v5)
      {
        OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_73_3();
      }
      v6 = one-time initialization token for siriNetwork;
      OUTLINED_FUNCTION_163();
      if (v6 != -1)
        swift_once();
      v7 = OUTLINED_FUNCTION_5_1();
      v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.siriNetwork);
      OUTLINED_FUNCTION_84_3();
      Logger.logObject.getter();
      v9 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_106(v9))
      {
        v10 = (uint8_t *)OUTLINED_FUNCTION_2_2();
        v13 = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v10 = 136315138;
        if (*(_QWORD *)(v3 + 448) >= 2uLL)
        {
          OUTLINED_FUNCTION_166_1();
          v11 = String.init<A>(describing:)();
        }
        else
        {
          OUTLINED_FUNCTION_11_7();
          v11 = OUTLINED_FUNCTION_1_4();
        }
        OUTLINED_FUNCTION_124_0(v11, v12, &v13);
        OUTLINED_FUNCTION_163_1();
        OUTLINED_FUNCTION_158_1();
        OUTLINED_FUNCTION_35_2();
        OUTLINED_FUNCTION_135_1();
        OUTLINED_FUNCTION_30_0(&dword_246EC7000, v8, v9, "Connection - Reader: Background Connection. Ignoring object from inactive background connection route %s", v10);
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_183_1();
    }

  }
}

void closure #1 in Connection.didReceiveAceObject(_:object:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  os_log_type_t v44;
  uint64_t v45;

  v5 = a1 + 16;
  OUTLINED_FUNCTION_48();
  v6 = MEMORY[0x24956E090](v5);
  if (!v6)
    goto LABEL_23;
  v7 = (char *)v6;
  OUTLINED_FUNCTION_45_0();
  v8 = OUTLINED_FUNCTION_188_1();
  if (!v8)
  {
LABEL_22:

    goto LABEL_23;
  }
  v9 = *(_QWORD *)&v7[OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection];
  if (v9)
    v10 = v8 == v9;
  else
    v10 = 0;
  if (!v10
    || (v11 = &v7[OBJC_IVAR___SNConnectionInternal_delegate],
        OUTLINED_FUNCTION_48(),
        (v12 = MEMORY[0x24956E090](v11)) == 0))
  {
    v29 = one-time initialization token for siriNetwork;
    OUTLINED_FUNCTION_163();
    if (v29 != -1)
      swift_once();
    v30 = OUTLINED_FUNCTION_5_1();
    v31 = __swift_project_value_buffer(v30, (uint64_t)static Logger.siriNetwork);
    OUTLINED_FUNCTION_84_3();
    v32 = a4;
    v33 = v31;
    Logger.logObject.getter();
    v34 = OUTLINED_FUNCTION_35_0();
    if (OUTLINED_FUNCTION_106(v34))
    {
      v44 = v34;
      v35 = OUTLINED_FUNCTION_2_2();
      v45 = OUTLINED_FUNCTION_2_2();
      *(_DWORD *)v35 = 136315394;
      v36 = v32;
      v37 = objc_msgSend(v36, sel_description);
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v40 = v39;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v45);
      OUTLINED_FUNCTION_151_1();
      OUTLINED_FUNCTION_149_1();

      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      OUTLINED_FUNCTION_164_1();
      if (v26)
      {
        OUTLINED_FUNCTION_162_0();
        v41 = String.init<A>(describing:)();
      }
      else
      {
        OUTLINED_FUNCTION_11_7();
        v41 = OUTLINED_FUNCTION_1_4();
      }
      OUTLINED_FUNCTION_121_0(v41, v42, &v45);
      OUTLINED_FUNCTION_86_3();
      OUTLINED_FUNCTION_35_2();
      OUTLINED_FUNCTION_6_1();
      OUTLINED_FUNCTION_80_2(&dword_246EC7000, v33, v44, "Connection - Reader: Background Connection. Ignoring ace object %s from inactive background connection route %s", (uint8_t *)v35);
      OUTLINED_FUNCTION_99_2();
      OUTLINED_FUNCTION_0_4();
    }

    OUTLINED_FUNCTION_183_1();
    goto LABEL_22;
  }
  v13 = (void *)v12;
  v14 = one-time initialization token for siriNetwork;
  OUTLINED_FUNCTION_163();
  if (v14 != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_5_1();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.siriNetwork);
  OUTLINED_FUNCTION_84_3();
  v17 = a4;
  v18 = v16;
  Logger.logObject.getter();
  v19 = OUTLINED_FUNCTION_35_0();
  if (OUTLINED_FUNCTION_106(v19))
  {
    v43 = v19;
    v20 = OUTLINED_FUNCTION_2_2();
    v45 = OUTLINED_FUNCTION_2_2();
    *(_DWORD *)v20 = 136315394;
    v21 = v17;
    v22 = objc_msgSend(v21, sel_description);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v45);
    OUTLINED_FUNCTION_151_1();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    OUTLINED_FUNCTION_40_0();
    *(_WORD *)(v20 + 12) = 2080;
    OUTLINED_FUNCTION_164_1();
    if (v26)
    {
      OUTLINED_FUNCTION_162_0();
      v27 = String.init<A>(describing:)();
    }
    else
    {
      OUTLINED_FUNCTION_11_7();
      v27 = OUTLINED_FUNCTION_1_4();
    }
    OUTLINED_FUNCTION_121_0(v27, v28, &v45);
    OUTLINED_FUNCTION_86_3();
    OUTLINED_FUNCTION_35_2();
    OUTLINED_FUNCTION_6_1();
    OUTLINED_FUNCTION_80_2(&dword_246EC7000, v18, v43, "Connection - Reader: Background Connection. Received ace object %s from active background connection route %s", (uint8_t *)v20);
    OUTLINED_FUNCTION_99_2();
    OUTLINED_FUNCTION_0_4();
  }

  OUTLINED_FUNCTION_35_2();
  objc_msgSend(v13, sel_didReceiveAceObject_object_, v7, v17);
  swift_unknownObjectRelease();

  OUTLINED_FUNCTION_3_6();
LABEL_23:
  OUTLINED_FUNCTION_62_2();
}

void closure #1 in Connection.didClose(_:)()
{
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_73_3();
}

uint64_t sub_246F35C7C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  id v3;

  if (result)
  {
    v2 = (void *)result;
    *(_QWORD *)(OUTLINED_FUNCTION_6() + 16) = result;
    swift_retain();
    OUTLINED_FUNCTION_85_1();
    v3 = v2;
    specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(v1, (uint64_t)v3, v1, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in Connection.didClose(_:));

    return swift_release();
  }
  return result;
}

void *closure #1 in closure #1 in Connection.didClose(_:)(uint64_t a1)
{
  uint64_t v2;
  void *result;

  v2 = a1 + OBJC_IVAR___SNConnectionInternal_delegate;
  swift_beginAccess();
  result = (void *)MEMORY[0x24956E090](v2);
  if (result)
  {
    objc_msgSend(result, sel_didCloseConnection_, a1);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void closure #2 in closure #1 in Connection.didClose(_:)(char a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  unint64_t v19;
  NSObject *oslog;
  uint64_t v21;

  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.siriNetwork);
    swift_retain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8))
    {

      v15 = swift_release_n();
LABEL_22:
      a4(v15);
      return;
    }
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v21 = v10;
    *(_DWORD *)v9 = 136315138;
    if (*(_QWORD *)(a3 + 448) >= 2uLL)
    {
      swift_bridgeObjectRetain();
      v12 = String.init<A>(describing:)();
      v11 = v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      v11 = 0xE700000000000000;
      v12 = 0x6E776F6E6B6E75;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_246EC7000, v7, v8, "Connection - Status: Background connection. Closing active background connection route %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v10, -1, -1);
    goto LABEL_20;
  }
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriNetwork);
    v7 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v14))
      goto LABEL_21;
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_246EC7000, v7, v14, "Connection - Status: Background connection. Ran out of pending connections; forwarding close from last background connection",
      v9,
      2u);
LABEL_20:
    MEMORY[0x24956E018](v9, -1, -1);
LABEL_21:

    goto LABEL_22;
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
  oslog = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_246EC7000, oslog, v17, "Connection - Status: Background connection. Ignoring connection close from inactive backgrund connection", v18, 2u);
    MEMORY[0x24956E018](v18, -1, -1);
  }

}

void closure #1 in Connection.didEncounterError(_:error:analysisInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  _BYTE v20[32];

  OUTLINED_FUNCTION_19();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_48();
  v15 = MEMORY[0x24956E090](v11 + 16);
  if (v15)
  {
    v16 = (void *)v15;
    outlined init with copy of NetworkConnectionProtocol?(v7, (uint64_t)&v20[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v9;
    _s11SiriNetwork24ConnectionSnapshotReportVSgWObTm_0((uint64_t)&v20[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v18 + v17, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    OUTLINED_FUNCTION_41_0();
    v19 = v16;
    OUTLINED_FUNCTION_41_0();
    swift_retain();
    swift_retain();
    OUTLINED_FUNCTION_34_4();
    specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(v5, (uint64_t)v19, v5, v9, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:), v18, (uint64_t)v19, v3, v1);

    swift_release();
  }
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int *v15;
  id v16;
  id v17;
  unsigned int *v18;
  uint64_t v19;
  NSNumber v20;
  uint64_t v21;
  Class isa;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  _BYTE v27[12];
  int v28;
  void *v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1 + OBJC_IVAR___SNConnectionInternal_delegate;
  swift_beginAccess();
  v12 = MEMORY[0x24956E090](v11);
  if (v12)
  {
    v13 = (void *)v12;
    v14 = (void *)_convertErrorToNSError(_:)();
    outlined init with copy of NetworkConnectionProtocol?(a3, (uint64_t)v10, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
    v15 = (int *)type metadata accessor for ConnectionAnalysisInfo();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, (uint64_t)v15) == 1)
    {
      outlined destroy of RPCOspreyConnectionProtocol?((uint64_t)v10, &demangling cache variable for type metadata for ConnectionAnalysisInfo?);
      v16 = 0;
    }
    else
    {
      v17 = objc_msgSend(objc_allocWithZone((Class)SNConnectionType), sel_initWithTechnology_, qword_246F74F10[(char)v10[v15[8]]]);
      outlined init with copy of NetworkConnectionProtocol?((uint64_t)v10, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for URL?);
      v18 = (unsigned int *)&v10[v15[5]];
      if (*((_BYTE *)v18 + 4))
        v19 = 0;
      else
        v19 = *v18;
      if ((v19 & 0x80000000) != 0)
      {
        __break(1u);
        return;
      }
      v20.super.super.isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      v29 = v14;
      v21 = a1;
      isa = v20.super.super.isa;
      v28 = v10[v15[7]];
      v23 = (uint64_t *)&v10[v15[9]];
      v24 = *v23;
      v25 = v23[1];
      objc_allocWithZone((Class)SNConnectionAnalysisInfo);
      swift_bridgeObjectRetain();
      v26 = isa;
      a1 = v21;
      v14 = v29;
      v16 = @nonobjc SNConnectionAnalysisInfo.init(connectionURL:interfaceIndex:sendBufferSize:wwanPreferred:connectionType:policyId:)((uint64_t)v7, v19, v26, v28, v17, v24, v25);
      outlined destroy of ConnectionAnalysisInfo((uint64_t)v10);
    }
    objc_msgSend(v13, sel_didEncounterError_error_analysisInfo_, a1, v14, v16);
    swift_unknownObjectRelease();

  }
}

void closure #2 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(char a1, char a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  id v71;

  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    v13 = a4;
    swift_retain();
    v14 = a4;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = (_QWORD *)swift_slowAlloc();
      v19 = (void *)swift_slowAlloc();
      v71 = v19;
      *(_DWORD *)v17 = 136315394;
      if (*(_QWORD *)(a3 + 448) >= 2uLL)
      {
        v67 = *(_QWORD *)(a3 + 448);
        swift_bridgeObjectRetain();
        v21 = String.init<A>(describing:)();
        v20 = v44;
      }
      else
      {
        swift_bridgeObjectRelease();
        v20 = 0xE700000000000000;
        v21 = 0x6E776F6E6B6E75;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2112;
      v45 = a4;
      v64 = (void *)_swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v18 = v64;

      _os_log_impl(&dword_246EC7000, v15, v16, "Connection - Error: Background Connection. Got an error from active background connection route %s. Error: %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v19, -1, -1);
      MEMORY[0x24956E018](v17, -1, -1);

    }
    else
    {
      swift_release_n();

    }
    v71 = a4;
    v46 = a4;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      outlined consume of NetworkConnectionError(v64, v67, v68, v69, v70);
      if (v69 >> 60 == 5)
        BackgroundConnection.updateActiveBackgroundConnectionWithSecondary()();
    }

LABEL_31:
    a5(v47);
    return;
  }
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriNetwork);
    swift_retain();
    v25 = a4;
    swift_retain();
    v26 = a4;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v60 = a7;
      v61 = a8;
      v63 = a5;
      v29 = swift_slowAlloc();
      v30 = (_QWORD *)swift_slowAlloc();
      v31 = (void *)swift_slowAlloc();
      v71 = v31;
      *(_DWORD *)v29 = 136315394;
      if (*(_QWORD *)(a3 + 448) >= 2uLL)
      {
        swift_bridgeObjectRetain();
        v33 = String.init<A>(describing:)();
        v32 = v48;
      }
      else
      {
        swift_bridgeObjectRelease();
        v32 = 0xE700000000000000;
        v33 = 0x6E776F6E6B6E75;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2112;
      v49 = a4;
      v65 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v30 = v65;

      _os_log_impl(&dword_246EC7000, v27, v28, "Connection - Error: Background Connection. Ran out of pending connections; forwarding error from last background"
        " connection route %s. Error: %@",
        (uint8_t *)v29,
        0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v30, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v31, -1, -1);
      MEMORY[0x24956E018](v29, -1, -1);

      a5 = v63;
      a8 = v61;
      a7 = v60;
    }
    else
    {
      swift_release_n();

    }
    if (!*(_QWORD *)(a7 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
    {
      v50 = (uint64_t *)(a7 + OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v51 = *(_QWORD *)(*v50 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      v52 = *v50;
      *(_QWORD *)(v52 + 16) = v51 + 1;
      v53 = v52 + 16 * v51;
      *(_QWORD *)(v53 + 32) = a8;
      *(_QWORD *)(v53 + 40) = a9;
      v47 = swift_endAccess();
    }
    goto LABEL_31;
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.siriNetwork);
  swift_retain();
  v35 = a4;
  swift_retain();
  v36 = a4;
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v62 = a8;
    v39 = swift_slowAlloc();
    v40 = (_QWORD *)swift_slowAlloc();
    v41 = (void *)swift_slowAlloc();
    v71 = v41;
    *(_DWORD *)v39 = 136315394;
    if (*(_QWORD *)(a3 + 448) >= 2uLL)
    {
      swift_bridgeObjectRetain();
      v43 = String.init<A>(describing:)();
      v42 = v54;
    }
    else
    {
      swift_bridgeObjectRelease();
      v42 = 0xE700000000000000;
      v43 = 0x6E776F6E6B6E75;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, (uint64_t *)&v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2112;
    v55 = a4;
    v66 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v40 = v66;

    _os_log_impl(&dword_246EC7000, v37, v38, "Connection - Error: Background Connection. Ignoring error from inactive background connection route %s. Error: %@", (uint8_t *)v39, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v40, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24956E018](v41, -1, -1);
    MEMORY[0x24956E018](v39, -1, -1);

    a8 = v62;
  }
  else
  {
    swift_release_n();

  }
  if (!*(_QWORD *)(a7 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    v56 = (uint64_t *)(a7 + OBJC_IVAR___SNConnectionInternal_connectionMethodUsedHistory);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v57 = *(_QWORD *)(*v56 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v57);
    v58 = *v56;
    *(_QWORD *)(v58 + 16) = v57 + 1;
    v59 = v58 + 16 * v57;
    *(_QWORD *)(v59 + 32) = a8;
    *(_QWORD *)(v59 + 40) = a9;
    swift_endAccess();
  }
}

uint64_t implicit closure #4 in implicit closure #3 in Connection.didEncounterIntermediateError(_:error:)()
{
  return OUTLINED_FUNCTION_1_4();
}

void closure #1 in Connection.didEncounterIntermediateError(_:error:)()
{
  OUTLINED_FUNCTION_142_0();
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_95_1();
}

uint64_t sub_246F36D40(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_73_3();
  }
  return result;
}

void Connection.scheduleBackgroundConnection(_:after:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  os_log_type_t v37;
  uint64_t v38;
  NSObject *v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  char v71;
  _BYTE v72[7];
  _BYTE v73[7];

  v5 = v2;
  v8 = OUTLINED_FUNCTION_18();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = OUTLINED_FUNCTION_0_3();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_3_0();
  if (!*(_QWORD *)(v5 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection)
    && (*(_BYTE *)(v5 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 448);
    if (v12 != 1)
    {
      v44 = v9;
      v50 = *(_QWORD *)(a1 + 440);
      v13 = *(_QWORD *)(a1 + 464);
      v49 = *(_QWORD *)(a1 + 456);
      v47 = *(_QWORD *)(a1 + 472);
      v14 = *(_QWORD *)(a1 + 488);
      v46 = *(_QWORD *)(a1 + 480);
      v43 = *(_QWORD *)(a1 + 496);
      v56 = *(_QWORD *)(a1 + 504);
      v53 = *(_QWORD *)(a1 + 520);
      v15 = *(_QWORD *)(a1 + 528);
      v55 = *(_QWORD *)(a1 + 544);
      v51 = *(_BYTE *)(a1 + 536);
      v42 = *(_BYTE *)(a1 + 512) & 1;
      v40 = *(unsigned __int16 *)(a1 + 552);
      v71 = v40 & 1;
      v38 = one-time initialization token for siriNetwork;
      v54 = v12;
      swift_bridgeObjectRetain();
      v48 = v13;
      swift_bridgeObjectRetain();
      v45 = v14;
      OUTLINED_FUNCTION_12_6();
      swift_bridgeObjectRetain();
      v52 = v15;
      OUTLINED_FUNCTION_4_15();
      if (v38 != -1)
        swift_once();
      v41 = v40 >> 8;
      v16 = OUTLINED_FUNCTION_5_1();
      v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriNetwork);
      swift_retain_n();
      Logger.logObject.getter();
      v18 = OUTLINED_FUNCTION_35_0();
      if (OUTLINED_FUNCTION_106(v18))
      {
        v37 = v18;
        v39 = v17;
        v19 = OUTLINED_FUNCTION_2_2();
        v70 = OUTLINED_FUNCTION_2_2();
        *(_DWORD *)v19 = 134218242;
        aBlock = *(_QWORD *)&a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v20 = (uint8_t *)v19;
        *(_WORD *)(v19 + 12) = 2080;
        v21 = *(_QWORD *)(a1 + 448);
        if (v21 == 1)
        {
          v22 = 0xE100000000000000;
          v23 = 45;
        }
        else
        {
          v24 = *(_WORD *)(a1 + 552);
          v25 = *(_QWORD *)(a1 + 544);
          v26 = *(_QWORD *)(a1 + 536);
          v27 = *(_QWORD *)(a1 + 528);
          v28 = *(_QWORD *)(a1 + 520);
          v29 = *(_BYTE *)(a1 + 512);
          v30 = *(_QWORD *)(a1 + 504);
          v31 = *(_QWORD *)(a1 + 480);
          v32 = *(uint64_t (**)(uint64_t))(a1 + 456);
          aBlock = *(_QWORD *)(a1 + 440);
          v58 = v21;
          v59 = v32;
          v60 = *(_OWORD *)(a1 + 464);
          v61 = v31;
          v62 = *(_OWORD *)(a1 + 488);
          v63 = v30;
          v64 = v29 & 1;
          v65 = v28;
          v66 = v27;
          v67 = v26;
          v68 = v25;
          v69 = v24 & 0xFF01;
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_4_15();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v23 = String.init<A>(describing:)();
          v22 = v33;
        }
        aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_69();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_80_2(&dword_246EC7000, v39, v37, "Connection - Start: Background Connection. Scheduling route after delay %f: %s", v20);
        OUTLINED_FUNCTION_20_1();
        OUTLINED_FUNCTION_0_4();
      }

      OUTLINED_FUNCTION_69();
      v34 = OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_104_2();
      v35 = OUTLINED_FUNCTION_6();
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = v50;
      *(_QWORD *)(v35 + 32) = v54;
      *(_QWORD *)(v35 + 40) = v49;
      *(_QWORD *)(v35 + 48) = v48;
      *(_QWORD *)(v35 + 56) = v47;
      *(_QWORD *)(v35 + 64) = v46;
      *(_QWORD *)(v35 + 72) = v45;
      *(_QWORD *)(v35 + 80) = v43;
      *(_QWORD *)(v35 + 88) = v56;
      *(_BYTE *)(v35 + 96) = v42;
      *(_DWORD *)(v35 + 97) = *(_DWORD *)v73;
      *(_DWORD *)(v35 + 100) = *(_DWORD *)&v73[3];
      *(_QWORD *)(v35 + 104) = v53;
      *(_QWORD *)(v35 + 112) = v52;
      *(_BYTE *)(v35 + 120) = v51;
      *(_DWORD *)(v35 + 121) = *(_DWORD *)v72;
      *(_DWORD *)(v35 + 124) = *(_DWORD *)&v72[3];
      *(_QWORD *)(v35 + 128) = v55;
      *(_BYTE *)(v35 + 136) = v71;
      *(_BYTE *)(v35 + 137) = v41;
      *(_QWORD *)(v35 + 144) = a1;
      *(double *)(v35 + 152) = a2;
      *((_QWORD *)&v60 + 1) = partial apply for closure #1 in Connection.scheduleBackgroundConnection(_:after:);
      v61 = v35;
      aBlock = MEMORY[0x24BDAC760];
      v58 = 1107296256;
      v59 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *(_QWORD *)&v60 = &block_descriptor_115_0;
      v36 = _Block_copy(&aBlock);
      OUTLINED_FUNCTION_83();
      swift_retain();
      OUTLINED_FUNCTION_17();
      v70 = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_87_2();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x24956D244](0, v4, v3, v36);
      OUTLINED_FUNCTION_180();
      OUTLINED_FUNCTION_14_10(v44);
      OUTLINED_FUNCTION_46_0(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      swift_release();
      OUTLINED_FUNCTION_14();
    }
  }
  OUTLINED_FUNCTION_63_2();
}

uint64_t closure #1 in Connection.scheduleBackgroundConnection(_:after:)(uint64_t a1, _QWORD *a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51[3];
  uint64_t aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  void (*v56)();
  _QWORD *v57;

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v50 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for DispatchTime();
  v47 = *(_QWORD *)(v49 - 8);
  v15 = MEMORY[0x24BDAC7A8](v49);
  v46 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v48 = (char *)&v39 - v17;
  swift_beginAccess();
  result = MEMORY[0x24956E090](a1 + 16);
  if (result)
  {
    v19 = (char *)result;
    v41 = v13;
    v42 = v12;
    v43 = v11;
    v44 = v9;
    v45 = v8;
    swift_beginAccess();
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    specialized Set._Variant.insert(_:)((char *)&aBlock, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_retain();
    specialized Set._Variant.insert(_:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    specialized Set._Variant.insert(_:)((char *)&aBlock, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v51[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = a2[1];
      if (v25)
      {
        aBlock = *a2;
        v53 = v25;
        swift_bridgeObjectRetain();
        v26 = String.init<A>(describing:)();
        v28 = v27;
      }
      else
      {
        v28 = 0xE700000000000000;
        v26 = 0x6E776F6E6B6E75;
      }
      aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      _os_log_impl(&dword_246EC7000, v21, v22, "Connection - Start: Background Connection. Scheduled route %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v24, -1, -1);
      MEMORY[0x24956E018](v23, -1, -1);
    }
    else
    {
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
    }

    v29 = (_QWORD *)swift_allocObject();
    v29[2] = v19;
    memcpy(v29 + 3, a2, 0x72uLL);
    v29[18] = a3;
    v29[19] = a1;
    if (a4 <= 0.0)
    {
      outlined retain of ConnectionPolicyRoute((uint64_t)a2);
      swift_retain();
      v38 = v19;
      swift_retain();
      closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)((uint64_t)v38, a2, a3, a1);

    }
    else
    {
      v39 = *(_QWORD *)&v19[OBJC_IVAR___SNConnectionInternal_connectionQueue];
      outlined retain of ConnectionPolicyRoute((uint64_t)a2);
      swift_retain();
      v40 = v19;
      swift_retain();
      v30 = v46;
      static DispatchTime.now()();
      v31 = v48;
      MEMORY[0x24956CFC8](v30, a4);
      v32 = *(void (**)(char *, uint64_t))(v47 + 8);
      v33 = v49;
      v32(v30, v49);
      v56 = partial apply for closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:);
      v57 = v29;
      aBlock = MEMORY[0x24BDAC760];
      v53 = 1107296256;
      v54 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v55 = &block_descriptor_121;
      v34 = _Block_copy(&aBlock);
      swift_retain();
      v35 = v50;
      static DispatchQoS.unspecified.getter();
      v51[0] = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      v36 = v43;
      v37 = v45;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x24956D22C](v31, v35, v36, v34);
      _Block_release(v34);
      swift_release();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v35, v42);
      v32(v31, v33);

    }
    return swift_release();
  }
  return result;
}

void closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  _UNKNOWN **v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *oslog;
  uint64_t v32[65];
  _QWORD __dst[65];
  uint64_t v34[3];

  if (*(_QWORD *)(a1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    oslog = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v32[0] = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = a2[1];
      if (v9)
      {
        __dst[0] = *a2;
        __dst[1] = v9;
        swift_bridgeObjectRetain();
        v10 = String.init<A>(describing:)();
        v12 = v11;
      }
      else
      {
        v10 = 0x6E776F6E6B6E75;
        v12 = 0xE700000000000000;
      }
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      _os_log_impl(&dword_246EC7000, oslog, v6, "Connection - Start: Background Connection. Starting route %s cancelled. Race lost", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v8, -1, -1);
      MEMORY[0x24956E018](v7, -1, -1);

    }
    else
    {
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);

    }
  }
  else
  {
    v29 = a4 + 16;
    swift_beginAccess();
    specialized Set._Variant.remove(_:)(a2, (uint64_t)__dst);
    v13 = __dst[1];
    v28 = __dst[0];
    swift_endAccess();
    outlined consume of ConnectionPolicyRoute?(v28, v13);
    if (one-time initialization token for siriNetwork != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriNetwork);
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    swift_retain();
    outlined retain of ConnectionPolicyRoute((uint64_t)a2);
    swift_retain();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v34[0] = v18;
      *(_DWORD *)v17 = 136315394;
      v19 = a2[1];
      if (v19)
      {
        __dst[0] = *a2;
        __dst[1] = v19;
        swift_bridgeObjectRetain();
        v20 = String.init<A>(describing:)();
        v22 = v21;
      }
      else
      {
        v20 = 0x6E776F6E6B6E75;
        v22 = 0xE700000000000000;
      }
      __dst[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      *(_WORD *)(v17 + 12) = 2080;
      memcpy(__dst, (const void *)(a3 + 40), 0x204uLL);
      memcpy(v32, (const void *)(a3 + 40), 0x204uLL);
      outlined retain of ConnectionConfiguration(__dst);
      v23 = String.init<A>(describing:)();
      v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_246EC7000, v15, v16, "Connection - Start: Background Connection. Starting route %s with connection configuration: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24956E018](v18, -1, -1);
      MEMORY[0x24956E018](v17, -1, -1);

    }
    else
    {
      outlined release of ConnectionPolicyRoute((uint64_t)a2);
      outlined release of ConnectionPolicyRoute((uint64_t)a2);

      swift_release_n();
    }
    swift_beginAccess();
    v25 = (void *)MEMORY[0x24956E090](v29);
    v26 = &protocol witness table for Connection;
    if (!v25)
      v26 = 0;
    *(_QWORD *)(a3 + 24) = v26;
    swift_unknownObjectWeakAssign();

    BackgroundConnection.start()();
    if (v27)

  }
}

void Connection.waitForActiveConnectionToExecute(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;

  OUTLINED_FUNCTION_19();
  v1 = OUTLINED_FUNCTION_18();
  v2 = OUTLINED_FUNCTION_33_3(v1);
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_0_3();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_3_0();
  v5 = *(void **)(v0 + OBJC_IVAR___SNConnectionInternal_activeConnectionGroup);
  OUTLINED_FUNCTION_16((uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ());
  v6 = v5;
  swift_retain();
  OUTLINED_FUNCTION_17();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_87_2();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  OUTLINED_FUNCTION_190_0();

  OUTLINED_FUNCTION_14_10(v7);
  OUTLINED_FUNCTION_46_0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_release();
  OUTLINED_FUNCTION_1_1();
}

uint64_t specialized Connection.accessPotentiallyActiveConnections(_:)(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (*(_BYTE *)(a1 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) == 1)
  {
    if (!a3)
    {
LABEL_39:
      swift_unknownObjectRelease();
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
    }
LABEL_3:
    lazy protocol witness table accessor for type NetworkConnectionError and conformance NetworkConnectionError();
    v7 = (void *)swift_allocError();
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 3;
    *(_OWORD *)(v8 + 24) = xmmword_246F72F10;
    a3();

    goto LABEL_39;
  }
  if (*(_QWORD *)(a1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    swift_retain();
    BackgroundConnection.sendCommand(_:moreComing:with:)(a2, 0, a3, a4);
    swift_unknownObjectRelease();
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
  }
  v9 = (uint64_t *)(a1 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  v10 = *v9;
  v11 = swift_bridgeObjectRetain();
  result = specialized Set.isEmpty.getter(v11);
  if ((result & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (!a3)
      goto LABEL_39;
    goto LABEL_3;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundConnection();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundConnection, (uint64_t)&protocol conformance descriptor for BackgroundConnection);
    result = Set.Iterator.init(_cocoa:)();
    v10 = v29;
    v27 = v30;
    v13 = v31;
    v14 = v32;
    v15 = v33;
  }
  else
  {
    v14 = 0;
    v16 = -1 << *(_BYTE *)(v10 + 32);
    v27 = v10 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(v10 + 56);
  }
  v19 = (unint64_t)(v13 + 64) >> 6;
  if (v10 < 0)
    goto LABEL_18;
LABEL_16:
  if (v15)
  {
    v20 = (v15 - 1) & v15;
    v21 = __clz(__rbit64(v15)) | (v14 << 6);
    v22 = v14;
    goto LABEL_34;
  }
  v24 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v24 < v19)
    {
      v25 = *(_QWORD *)(v27 + 8 * v24);
      v22 = v14 + 1;
      if (v25)
        goto LABEL_33;
      v22 = v14 + 2;
      if (v14 + 2 >= v19)
        goto LABEL_38;
      v25 = *(_QWORD *)(v27 + 8 * v22);
      if (v25)
        goto LABEL_33;
      v22 = v14 + 3;
      if (v14 + 3 >= v19)
        goto LABEL_38;
      v25 = *(_QWORD *)(v27 + 8 * v22);
      if (v25)
      {
LABEL_33:
        v20 = (v25 - 1) & v25;
        v21 = __clz(__rbit64(v25)) + (v22 << 6);
LABEL_34:
        v23 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21);
        swift_retain();
        while (v23)
        {
          swift_retain();
          BackgroundConnection.sendCommand(_:moreComing:with:)(a2, 0, a3, a4);
          result = swift_release_n();
          v14 = v22;
          v15 = v20;
          if ((v10 & 0x8000000000000000) == 0)
            goto LABEL_16;
LABEL_18:
          if (!__CocoaSet.Iterator.next()())
            goto LABEL_38;
          type metadata accessor for BackgroundConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v23 = v28;
          swift_unknownObjectRelease();
          v22 = v14;
          v20 = v15;
        }
        goto LABEL_38;
      }
      v22 = v14 + 4;
      if (v14 + 4 < v19)
      {
        v25 = *(_QWORD *)(v27 + 8 * v22);
        if (!v25)
        {
          v26 = v14 + 5;
          while (v26 < v19)
          {
            v25 = *(_QWORD *)(v27 + 8 * v26++);
            if (v25)
            {
              v22 = v26 - 1;
              goto LABEL_33;
            }
          }
          goto LABEL_38;
        }
        goto LABEL_33;
      }
    }
LABEL_38:
    outlined consume of [String : UInt64].Iterator._Variant();
    goto LABEL_39;
  }
  __break(1u);
  return result;
}

uint64_t specialized Connection.accessPotentiallyActiveConnections(_:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, void *))
{
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  if (*(_BYTE *)(a1 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) == 1)
    goto LABEL_2;
  if (*(_QWORD *)(a1 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    v5 = swift_retain();
    closure #1 in closure #1 in Connection.sendCommands(_:with:)(v5, a2, a3);
    swift_bridgeObjectRelease();
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
  }
  v7 = (uint64_t *)(a1 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  v8 = *v7;
  v9 = swift_bridgeObjectRetain();
  result = specialized Set.isEmpty.getter(v9);
  if ((result & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_2:
    closure #1 in closure #1 in Connection.sendCommands(_:with:)(0, a2, a3);
LABEL_3:
    swift_bridgeObjectRelease();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed SNLinkRecommendationInfo?) -> ())?((uint64_t)a3);
  }
  if ((v8 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundConnection();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundConnection, (uint64_t)&protocol conformance descriptor for BackgroundConnection);
    result = Set.Iterator.init(_cocoa:)();
    v8 = v26;
    v24 = v27;
    v10 = v28;
    v11 = v29;
    v12 = v30;
  }
  else
  {
    v11 = 0;
    v13 = -1 << *(_BYTE *)(v8 + 32);
    v24 = v8 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(v8 + 56);
  }
  v16 = (unint64_t)(v10 + 64) >> 6;
  if (v8 < 0)
    goto LABEL_18;
LABEL_16:
  if (v12)
  {
    v17 = (v12 - 1) & v12;
    v18 = __clz(__rbit64(v12)) | (v11 << 6);
    v19 = v11;
    goto LABEL_34;
  }
  v21 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v21 < v16)
    {
      v22 = *(_QWORD *)(v24 + 8 * v21);
      v19 = v11 + 1;
      if (v22)
        goto LABEL_33;
      v19 = v11 + 2;
      if (v11 + 2 >= v16)
        goto LABEL_38;
      v22 = *(_QWORD *)(v24 + 8 * v19);
      if (v22)
        goto LABEL_33;
      v19 = v11 + 3;
      if (v11 + 3 >= v16)
        goto LABEL_38;
      v22 = *(_QWORD *)(v24 + 8 * v19);
      if (v22)
      {
LABEL_33:
        v17 = (v22 - 1) & v22;
        v18 = __clz(__rbit64(v22)) + (v19 << 6);
LABEL_34:
        v20 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18);
        swift_retain();
        while (v20)
        {
          swift_retain();
          BackgroundConnection.sendCommands(_:with:)();
          result = swift_release_n();
          v11 = v19;
          v12 = v17;
          if ((v8 & 0x8000000000000000) == 0)
            goto LABEL_16;
LABEL_18:
          if (!__CocoaSet.Iterator.next()())
            goto LABEL_38;
          type metadata accessor for BackgroundConnection();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v20 = v25;
          swift_unknownObjectRelease();
          v19 = v11;
          v17 = v12;
        }
        goto LABEL_38;
      }
      v19 = v11 + 4;
      if (v11 + 4 < v16)
      {
        v22 = *(_QWORD *)(v24 + 8 * v19);
        if (!v22)
        {
          v23 = v11 + 5;
          while (v23 < v16)
          {
            v22 = *(_QWORD *)(v24 + 8 * v23++);
            if (v22)
            {
              v19 = v23 - 1;
              goto LABEL_33;
            }
          }
          goto LABEL_38;
        }
        goto LABEL_33;
      }
    }
LABEL_38:
    outlined consume of [String : UInt64].Iterator._Variant();
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void Connection.accessPotentiallyActiveConnections(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if ((*(_BYTE *)(v0 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) & 1) != 0)
    goto LABEL_2;
  if (*(_QWORD *)(v0 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection))
  {
    OUTLINED_FUNCTION_139_0();
    OUTLINED_FUNCTION_168_0();
    swift_release();
    return;
  }
  v1 = (uint64_t *)(v0 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  OUTLINED_FUNCTION_48();
  v2 = *v1;
  v3 = OUTLINED_FUNCTION_34_4();
  if (specialized Set.isEmpty.getter(v3))
  {
    OUTLINED_FUNCTION_6_1();
LABEL_2:
    OUTLINED_FUNCTION_168_0();
LABEL_3:
    OUTLINED_FUNCTION_62_2();
    return;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    OUTLINED_FUNCTION_45_0();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundConnection, (uint64_t)&protocol conformance descriptor for BackgroundConnection);
    Set.Iterator.init(_cocoa:)();
    v2 = v20;
    v18 = v21;
    v4 = v22;
    v5 = v23;
    v6 = v24;
  }
  else
  {
    v5 = 0;
    v7 = -1 << *(_BYTE *)(v2 + 32);
    v18 = v2 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(v2 + 56);
  }
  v10 = (unint64_t)(v4 + 64) >> 6;
  if (v2 < 0)
    goto LABEL_17;
LABEL_15:
  if (v6)
  {
    v11 = (v6 - 1) & v6;
    v12 = __clz(__rbit64(v6)) | (v5 << 6);
    v13 = v5;
    goto LABEL_33;
  }
  v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 < v10)
    {
      v16 = *(_QWORD *)(v18 + 8 * v15);
      v13 = v5 + 1;
      if (v16)
        goto LABEL_32;
      v13 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_37;
      v16 = *(_QWORD *)(v18 + 8 * v13);
      if (v16)
        goto LABEL_32;
      v13 = v5 + 3;
      if (v5 + 3 >= v10)
        goto LABEL_37;
      v16 = *(_QWORD *)(v18 + 8 * v13);
      if (v16)
      {
LABEL_32:
        v11 = (v16 - 1) & v16;
        v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_33:
        v14 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12);
        OUTLINED_FUNCTION_83();
        while (v14)
        {
          OUTLINED_FUNCTION_83();
          OUTLINED_FUNCTION_168_0();
          OUTLINED_FUNCTION_69();
          v5 = v13;
          v6 = v11;
          if ((v2 & 0x8000000000000000) == 0)
            goto LABEL_15;
LABEL_17:
          if (!__CocoaSet.Iterator.next()())
            goto LABEL_37;
          OUTLINED_FUNCTION_45_0();
          swift_unknownObjectRetain();
          OUTLINED_FUNCTION_7_13();
          v14 = v19;
          OUTLINED_FUNCTION_5_16();
          v13 = v5;
          v11 = v6;
        }
        goto LABEL_37;
      }
      v13 = v5 + 4;
      if (v5 + 4 < v10)
      {
        v16 = *(_QWORD *)(v18 + 8 * v13);
        if (!v16)
        {
          v17 = v5 + 5;
          while (v17 < v10)
          {
            v16 = *(_QWORD *)(v18 + 8 * v17++);
            if (v16)
            {
              v13 = v17 - 1;
              goto LABEL_32;
            }
          }
          goto LABEL_37;
        }
        goto LABEL_32;
      }
    }
LABEL_37:
    outlined consume of [String : UInt64].Iterator._Variant();
    goto LABEL_3;
  }
  __break(1u);
}

uint64_t Connection.activeOrAnyPendingConnection()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection);
  if (!v1)
  {
    OUTLINED_FUNCTION_48();
    v2 = OUTLINED_FUNCTION_34_4();
    v1 = specialized Collection.first.getter(v2);
    OUTLINED_FUNCTION_6_1();
    if (!v1)
    {
      OUTLINED_FUNCTION_48();
      v3 = OUTLINED_FUNCTION_4_15();
      v1 = specialized Collection.first.getter(v3);
      OUTLINED_FUNCTION_44_1();
    }
  }
  swift_retain();
  return v1;
}

void Connection.cancelSynchronously(_:)(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;

  v6 = v2;
  v9 = *(_QWORD *)(v2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection);
  if (v9)
  {
    swift_retain();
    BackgroundConnection.cancel()();
    OUTLINED_FUNCTION_78_0();
  }
  v10 = v6 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections;
  OUTLINED_FUNCTION_48();
  v11 = *(_QWORD *)v10;
  v23 = v6;
  if ((*(_QWORD *)v10 & 0xC000000000000001) != 0)
  {
    OUTLINED_FUNCTION_47_3();
    __CocoaSet.makeIterator()();
    v9 = OUTLINED_FUNCTION_45_0();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundConnection, (uint64_t)&protocol conformance descriptor for BackgroundConnection);
    OUTLINED_FUNCTION_184_1();
    v11 = v25;
    v6 = v26;
    v10 = v27;
    v12 = v28;
    v3 = v29;
  }
  else
  {
    OUTLINED_FUNCTION_31_2();
    v12 = 0;
  }
  OUTLINED_FUNCTION_172_0();
  if (v11 < 0)
    goto LABEL_9;
  while (1)
  {
    if (v3)
    {
      OUTLINED_FUNCTION_110_1();
      goto LABEL_26;
    }
    v13 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      return;
    }
    if (v13 >= a2)
      goto LABEL_29;
    v10 = v12 + 1;
    if (!*(_QWORD *)(v6 + 8 * v13))
    {
      v10 = v12 + 2;
      if (v12 + 2 >= a2)
        goto LABEL_29;
      if (!*(_QWORD *)(v6 + 8 * v10))
      {
        v10 = v12 + 3;
        if (v12 + 3 >= a2)
          goto LABEL_29;
        if (!*(_QWORD *)(v6 + 8 * v10))
        {
          v10 = v12 + 4;
          if (v12 + 4 >= a2)
            goto LABEL_29;
          if (!*(_QWORD *)(v6 + 8 * v10))
            break;
        }
      }
    }
LABEL_25:
    OUTLINED_FUNCTION_140_1();
LABEL_26:
    OUTLINED_FUNCTION_129_1();
    if (!v9)
      goto LABEL_30;
    while (1)
    {
      BackgroundConnection.cancel()();
      OUTLINED_FUNCTION_78_0();
      v12 = v10;
      v3 = v4;
      if ((v11 & 0x8000000000000000) == 0)
        break;
LABEL_9:
      v9 = v5;
      if (__CocoaSet.Iterator.next()())
      {
        OUTLINED_FUNCTION_45_0();
        OUTLINED_FUNCTION_163();
        OUTLINED_FUNCTION_7_13();
        v9 = v30;
        OUTLINED_FUNCTION_3_6();
        v10 = v12;
        v4 = v3;
        if (v30)
          continue;
      }
      goto LABEL_30;
    }
  }
  v14 = v12 + 5;
  while (v14 < a2)
  {
    if (*(_QWORD *)(v6 + 8 * v14++))
    {
      v10 = v14 - 1;
      goto LABEL_25;
    }
  }
LABEL_29:
  v3 = 0;
LABEL_30:
  OUTLINED_FUNCTION_91_1();
  v16 = (uint64_t *)(v23 + OBJC_IVAR___SNConnectionInternal_comatoseBackgroundConnections);
  OUTLINED_FUNCTION_48();
  v17 = *v16;
  if ((*v16 & 0xC000000000000001) != 0)
  {
    OUTLINED_FUNCTION_47_3();
    __CocoaSet.makeIterator()();
    v9 = OUTLINED_FUNCTION_45_0();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundConnection and conformance BackgroundConnection, (uint64_t (*)(uint64_t))type metadata accessor for BackgroundConnection, (uint64_t)&protocol conformance descriptor for BackgroundConnection);
    OUTLINED_FUNCTION_184_1();
    v17 = v30;
    v6 = v31;
    v16 = v32;
    v18 = v33;
    v3 = v34;
  }
  else
  {
    OUTLINED_FUNCTION_31_2();
    v18 = 0;
  }
  OUTLINED_FUNCTION_172_0();
  if (v17 < 0)
    goto LABEL_36;
LABEL_34:
  if (v3)
  {
    OUTLINED_FUNCTION_110_1();
LABEL_53:
    OUTLINED_FUNCTION_129_1();
    if (!v9)
      goto LABEL_56;
    while (1)
    {
      BackgroundConnection.cancel()();
      OUTLINED_FUNCTION_78_0();
      v18 = v16;
      v3 = v4;
      if ((v17 & 0x8000000000000000) == 0)
        goto LABEL_34;
LABEL_36:
      if (__CocoaSet.Iterator.next()())
      {
        OUTLINED_FUNCTION_45_0();
        OUTLINED_FUNCTION_163();
        OUTLINED_FUNCTION_7_13();
        v9 = v24;
        OUTLINED_FUNCTION_3_6();
        v16 = v18;
        v4 = v3;
        if (v24)
          continue;
      }
      goto LABEL_56;
    }
  }
  v19 = (uint64_t)v18 + 1;
  if (__OFADD__(v18, 1))
    goto LABEL_60;
  if (v19 >= a2)
    goto LABEL_56;
  v16 = (uint64_t *)((char *)v18 + 1);
  if (*(_QWORD *)(v6 + 8 * v19))
    goto LABEL_52;
  v16 = (uint64_t *)((char *)v18 + 2);
  if ((uint64_t)v18 + 2 >= a2)
    goto LABEL_56;
  if (*(_QWORD *)(v6 + 8 * (_QWORD)v16))
    goto LABEL_52;
  v16 = (uint64_t *)((char *)v18 + 3);
  if ((uint64_t)v18 + 3 >= a2)
    goto LABEL_56;
  if (*(_QWORD *)(v6 + 8 * (_QWORD)v16))
    goto LABEL_52;
  v16 = (uint64_t *)((char *)v18 + 4);
  if ((uint64_t)v18 + 4 >= a2)
    goto LABEL_56;
  if (*(_QWORD *)(v6 + 8 * (_QWORD)v16))
  {
LABEL_52:
    OUTLINED_FUNCTION_140_1();
    goto LABEL_53;
  }
  v20 = (uint64_t)v18 + 5;
  while (v20 < a2)
  {
    if (*(_QWORD *)(v6 + 8 * v20++))
    {
      v16 = (uint64_t *)(v20 - 1);
      goto LABEL_52;
    }
  }
LABEL_56:
  v22 = OUTLINED_FUNCTION_91_1();
  *(_BYTE *)(v23 + OBJC_IVAR___SNConnectionInternal_isCanceledInternal) = 1;
  if (a1)
    a1(v22);
}

uint64_t specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[516];
  _QWORD __dst[65];

  v4 = a4;
  v5 = OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection;
  v6 = *(_QWORD *)(a2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection);
  if (v6)
    v7 = v6 == a1;
  else
    v7 = 0;
  if (v7)
  {
    closure #2 in closure #1 in Connection.didClose(_:)(1, 0, a3, a4);
LABEL_9:
    swift_release();
    return swift_release();
  }
  v8 = a2;
  v10 = (uint64_t *)(a2 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  v11 = *v10;
  if ((*v10 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = __CocoaSet.contains(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    if ((v12 & 1) == 0)
      goto LABEL_17;
    goto LABEL_7;
  }
  if (*(_QWORD *)(v11 + 16))
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v11 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      v53 = v4;
      v16 = ~v14;
      while (1)
      {
        memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v15) + 40), 0x204uLL);
        memcpy(v60, (const void *)(a1 + 40), sizeof(v60));
        if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v60))
          break;
        v15 = (v15 + 1) & v16;
        if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v4 = v53;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      v4 = v53;
LABEL_7:
      swift_beginAccess();
      swift_retain();
      specialized Set._Variant.insert(_:)();
      swift_endAccess();
      swift_release();
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(a1);
      swift_endAccess();
      swift_release();
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
LABEL_17:
  v17 = *(_QWORD *)(a1 + 448);
  if (v17 != 1)
  {
    v54 = v4;
    v18 = v8;
    v55 = *(_QWORD *)(a1 + 440);
    v56 = *(_QWORD *)(a1 + 456);
    v19 = *(_QWORD *)(a1 + 472);
    v57 = *(_QWORD *)(a1 + 480);
    v50 = v5;
    v51 = *(_QWORD *)(a1 + 488);
    v58 = *(_QWORD *)(a1 + 496);
    v59 = *(_QWORD *)(a1 + 464);
    v20 = *(_QWORD *)(a1 + 504);
    v21 = *(_QWORD *)(a1 + 512);
    v22 = *(_QWORD *)(a1 + 520);
    v23 = *(_QWORD *)(a1 + 528);
    v24 = *(_QWORD *)(a1 + 536);
    v25 = *(_QWORD *)(a1 + 544);
    v26 = *(_WORD *)(a1 + 552);
    __dst[0] = v55;
    __dst[1] = v17;
    __dst[2] = v56;
    __dst[3] = v59;
    __dst[4] = v19;
    __dst[5] = v57;
    __dst[6] = v51;
    __dst[7] = v58;
    __dst[8] = v20;
    LOBYTE(__dst[9]) = v21 & 1;
    __dst[10] = v22;
    __dst[11] = v23;
    LOBYTE(__dst[12]) = v24;
    __dst[13] = v25;
    LOWORD(__dst[14]) = v26 & 0xFF01;
    v52 = v18;
    v27 = (uint64_t *)(v18 + OBJC_IVAR___SNConnectionInternal_pendingRoutes);
    swift_beginAccess();
    v28 = *v27;
    outlined copy of ConnectionPolicyRoute?(v55, v17);
    swift_bridgeObjectRetain();
    LOBYTE(v22) = specialized Set.contains(_:)(__dst, v28);
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(v60, __dst);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(__dst, (uint64_t)v60);
      v48 = *(_QWORD *)&v60[8];
      v49 = *(_QWORD *)v60;
      swift_endAccess();
      v5 = v50;
      v4 = v54;
      outlined consume of ConnectionPolicyRoute?(v49, v48);
      outlined consume of ConnectionPolicyRoute?(v55, v17);
      v8 = v52;
    }
    else
    {
      outlined consume of ConnectionPolicyRoute?(v55, v17);
      v4 = v54;
      v8 = v52;
      v5 = v50;
    }
  }
  if (!*(_QWORD *)(v8 + v5))
  {
    v29 = swift_bridgeObjectRetain();
    v30 = specialized Set.isEmpty.getter(v29);
    swift_bridgeObjectRelease();
    if (v30)
    {
      v31 = v8 + OBJC_IVAR___SNConnectionInternal_scheduledRoutes;
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v31 + 16))
      {
        if (one-time initialization token for siriNetwork != -1)
          swift_once();
        v37 = type metadata accessor for Logger();
        __swift_project_value_buffer(v37, (uint64_t)static Logger.siriNetwork);
        v38 = Logger.logObject.getter();
        v39 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v40 = 0;
          _os_log_impl(&dword_246EC7000, v38, v39, "Connection - Status: Background connection. Ran out of pending connections; forwarding close from last backg"
            "round connection",
            v40,
            2u);
          MEMORY[0x24956E018](v40, -1, -1);
        }

        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v4)(v41, v42, v43, v44, v45, v46, v47);
        goto LABEL_9;
      }
    }
  }
  if (one-time initialization token for siriNetwork != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriNetwork);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_246EC7000, v33, v34, "Connection - Status: Background connection. Ignoring connection close from inactive backgrund connection", v35, 2u);
    MEMORY[0x24956E018](v35, -1, -1);
  }
  swift_release();

  return swift_release();
}

uint64_t specialized Connection.handleCloseAndErrorEventsFromBackgroundConnection(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  void *v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v66[516];
  _QWORD __dst[65];

  v9 = (void *)a7;
  v10 = a6;
  v11 = a4;
  v12 = a3;
  v13 = a9;
  v14 = OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection;
  v15 = *(_QWORD *)(a2 + OBJC_IVAR___SNConnectionInternal_activeBackgroundConnection);
  if (v15)
    v16 = v15 == a1;
  else
    v16 = 0;
  if (v16)
  {
    closure #2 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(1, 0, a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_26;
  }
  v17 = a2;
  v19 = (uint64_t *)(a2 + OBJC_IVAR___SNConnectionInternal_pendingBackgroundConnections);
  swift_beginAccess();
  v20 = *v19;
  if ((*v19 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v20 + 16))
      goto LABEL_17;
    v22 = v9;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v20 + 32);
    v25 = v23 & ~v24;
    if (((*(_QWORD *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v9 = v22;
LABEL_16:
      v13 = a9;
      goto LABEL_17;
    }
    v54 = v11;
    v26 = v10;
    v27 = ~v24;
    while (1)
    {
      memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)(v20 + 48) + 8 * v25) + 40), 0x204uLL);
      memcpy(v66, (const void *)(a1 + 40), sizeof(v66));
      if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v66))
        break;
      v25 = (v25 + 1) & v27;
      if (((*(_QWORD *)(v20 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v10 = v26;
        v9 = v22;
        v11 = v54;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    v10 = v26;
    v9 = v22;
    v11 = v54;
    v13 = a9;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  v21 = __CocoaSet.contains(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  if ((v21 & 1) != 0)
  {
LABEL_7:
    swift_beginAccess();
    swift_retain();
    specialized Set._Variant.insert(_:)();
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    specialized Set._Variant.remove(_:)(a1);
    swift_endAccess();
    swift_release();
  }
LABEL_17:
  v28 = *(_QWORD *)(a1 + 448);
  if (v28 != 1)
  {
    v56 = v14;
    v57 = v13;
    v51 = v9;
    v52 = v10;
    v50 = v12;
    v55 = v11;
    v58 = *(_QWORD *)(a1 + 456);
    v59 = *(_QWORD *)(a1 + 464);
    v30 = v17;
    v60 = *(_QWORD *)(a1 + 472);
    v61 = *(_QWORD *)(a1 + 480);
    v62 = *(_QWORD *)(a1 + 496);
    v63 = *(_QWORD *)(a1 + 488);
    v31 = *(_QWORD *)(a1 + 504);
    v32 = *(_QWORD *)(a1 + 512);
    v33 = *(_QWORD *)(a1 + 520);
    v34 = *(_QWORD *)(a1 + 528);
    v35 = *(_QWORD *)(a1 + 536);
    v36 = *(_QWORD *)(a1 + 544);
    v37 = *(_WORD *)(a1 + 552);
    __dst[0] = *(_QWORD *)(a1 + 440);
    v29 = __dst[0];
    __dst[1] = v28;
    __dst[2] = v58;
    __dst[3] = v59;
    __dst[4] = v60;
    __dst[5] = v61;
    __dst[6] = v63;
    __dst[7] = v62;
    __dst[8] = v31;
    LOBYTE(__dst[9]) = v32 & 1;
    __dst[10] = v33;
    __dst[11] = v34;
    LOBYTE(__dst[12]) = v35;
    __dst[13] = v36;
    LOWORD(__dst[14]) = v37 & 0xFF01;
    v53 = v30;
    v38 = (uint64_t *)(v30 + OBJC_IVAR___SNConnectionInternal_pendingRoutes);
    v39 = v28;
    swift_beginAccess();
    v40 = *v38;
    v49 = v29;
    outlined copy of ConnectionPolicyRoute?(v29, v39);
    swift_bridgeObjectRetain();
    LOBYTE(v37) = specialized Set.contains(_:)(__dst, v40);
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(v66, __dst);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(__dst, (uint64_t)v66);
      v47 = *(_QWORD *)&v66[8];
      v48 = *(_QWORD *)v66;
      swift_endAccess();
      v14 = v56;
      v9 = v51;
      v10 = v52;
      outlined consume of ConnectionPolicyRoute?(v48, v47);
      outlined consume of ConnectionPolicyRoute?(v49, v39);
      v17 = v53;
      v11 = v55;
      v13 = v57;
      v12 = v50;
    }
    else
    {
      outlined consume of ConnectionPolicyRoute?(v29, v39);
      v17 = v53;
      v11 = v55;
      v14 = v56;
      v13 = v57;
      v12 = v50;
      v9 = v51;
      v10 = v52;
    }
  }
  if (*(_QWORD *)(v17 + v14)
    || (v41 = swift_bridgeObjectRetain(), v42 = specialized Set.isEmpty.getter(v41), swift_bridgeObjectRelease(), !v42)
    || (v43 = v17 + OBJC_IVAR___SNConnectionInternal_scheduledRoutes,
        swift_beginAccess(),
        *(_QWORD *)(*(_QWORD *)v43 + 16)))
  {
    v46 = v13;
    v44 = 0;
  }
  else
  {
    v46 = v13;
    v44 = 1;
  }
  closure #2 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(0, v44, v12, v11, a5, v10, (uint64_t)v9, a8, v46);
LABEL_26:
  swift_release();

  swift_bridgeObjectRelease();
  return swift_release();
}

id Connection.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void Connection.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t (*protocol witness for ConnectionProtocol.delegate.modify in conformance Connection(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___SNConnectionInternal_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24956E090](v5);
  return Connection.delegate.modify;
}

void Connection.delegate.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    OUTLINED_FUNCTION_5_16();
  }
  free(v3);
}

void protocol witness for ConnectionProtocol.start() in conformance Connection()
{
  Connection.start()();
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

uint64_t type metadata accessor for Connection()
{
  return objc_opt_self();
}

id @nonobjc SNConnectionAnalysisInfo.init(connectionURL:interfaceIndex:sendBufferSize:wwanPreferred:connectionType:policyId:)(uint64_t a1, uint64_t a2, void *a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  uint64_t v16;
  NSURL *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  v8 = v7;
  v16 = type metadata accessor for URL();
  v18 = 0;
  if (__swift_getEnumTagSinglePayload(a1, 1, v16) != 1)
  {
    URL._bridgeToObjectiveC()(v17);
    v18 = v19;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
  }
  if (a7)
  {
    v20 = (void *)MEMORY[0x24956D034](a6, a7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  v21 = objc_msgSend(v8, sel_initWithConnectionURL_interfaceIndex_sendBufferSize_wwanPreferred_connectionType_policyId_, v18, a2, a3, a4 & 1, a5, v20);

  return v21;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v5 = (const void *)OUTLINED_FUNCTION_6();
    v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_125_1(v6 - 32);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_23_1();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionTCPInfoMetrics>);
    v5 = (const void *)OUTLINED_FUNCTION_6();
    v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_125_1(v6 - 32);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_23_1();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionInterfaceReport>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_10_13(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionResolutionReport>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_10_13(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionHandshakeReport>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_10_13(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionEndpointReport>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_10_13(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v5 = (const void *)OUTLINED_FUNCTION_6();
    v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_125_1(v6 - 32);
  }
  if ((v0 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_23_1();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionMetrics>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_10_13(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_58_3();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_18_9();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_59_2();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_17_12();
    }
  }
  OUTLINED_FUNCTION_15_13();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionPolicyRoute>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_6();
    OUTLINED_FUNCTION_10_13(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_57_3();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_12_11();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_21_9();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_17_0();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 8) + 32;
    v6 = a3 + (v4 << 8);
    if (v5 >= v6 || v5 + (v4 << 8) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 296 * a1 + 32;
    v6 = a3 + 296 * v4;
    if (v5 >= v6 || v5 + 296 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 80 * a1 + 32;
    v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 1440 * a1 + 32;
    v6 = a3 + 1440 * v4;
    if (v5 >= v6 || v5 + 1440 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 120 * a1 + 32;
    v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_0();
    result = (char *)OUTLINED_FUNCTION_23_7();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_26_6(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_0();
    result = (char *)OUTLINED_FUNCTION_23_7();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_26_6(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[256 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 8);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[296 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 296 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[80 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 80 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_0();
    __src = (char *)OUTLINED_FUNCTION_23_7();
    __break(1u);
  }
  else if (__dst != __src || &__src[120 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 120 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[1440 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 1440 * a2);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_98_0();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return OUTLINED_FUNCTION_51_3();
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_97_1();
  }
  result = OUTLINED_FUNCTION_25_8();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_98_0();
  }
  else
  {
    if (a3 + 120 * a2 <= a1 || a1 + 120 * a2 <= a3)
      return OUTLINED_FUNCTION_51_3();
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_97_1();
  }
  result = OUTLINED_FUNCTION_25_8();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_98_0();
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return OUTLINED_FUNCTION_51_3();
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_97_1();
  }
  result = OUTLINED_FUNCTION_25_8();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_98_0();
  }
  else
  {
    OUTLINED_FUNCTION_8_7();
    if (v4 + 16 * v3 <= v2 || v2 + 16 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: [ConnectionPolicyRoute]));
      return swift_arrayInitWithCopy();
    }
    OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_97_1();
  }
  result = OUTLINED_FUNCTION_25_8();
  __break(1u);
  return result;
}

void thunk for @escaping @callee_guaranteed () -> (@unowned Int)(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1();
  OUTLINED_FUNCTION_3();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;

  a4();
  v5 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t sub_246F3B790()
{
  swift_unknownObjectWeakDestroy();
  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

uint64_t sub_246F3B7AC()
{
  uint64_t v0;

  OUTLINED_FUNCTION_99();
  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Connection.sendData(_:with:)()
{
  uint64_t *v0;

  closure #1 in Connection.sendData(_:with:)(v0[2], (uint64_t)(v0 + 3), v0[7], v0[8]);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_246F3B80C()
{
  return objectdestroy_6Tm((void (*)(_QWORD))MEMORY[0x24BEE4F70]);
}

void partial apply for closure #1 in Connection.sendCommand(_:with:)()
{
  uint64_t *v0;

  closure #1 in Connection.sendCommand(_:with:)(v0[2], v0[3], v0[4], v0[5], (void (*)(uint64_t))MEMORY[0x24BEE4F80], (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?, (void (*)(void *, uint64_t, uint64_t, uint64_t))specialized Connection.accessPotentiallyActiveConnections(_:));
}

uint64_t sub_246F3B84C()
{
  return objectdestroy_6Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t objectdestroy_6Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  OUTLINED_FUNCTION_99();
  a1(*(_QWORD *)(v1 + 24));
  if (*(_QWORD *)(v1 + 32))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Connection.sendCommands(_:with:)()
{
  uint64_t *v0;

  closure #1 in Connection.sendCommand(_:with:)(v0[2], v0[3], v0[4], v0[5], (void (*)(uint64_t))MEMORY[0x24BEE4BD0], (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error?) -> ())?, (void (*)(void *, uint64_t, uint64_t, uint64_t))specialized Connection.accessPotentiallyActiveConnections(_:));
}

uint64_t sub_246F3B8D0()
{
  OUTLINED_FUNCTION_99();
  return swift_deallocObject();
}

void partial apply for closure #1 in Connection.setSendPings(_:)()
{
  uint64_t v0;

  closure #1 in Connection.setSendPings(_:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void partial apply for closure #2 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  uint64_t v0;

  closure #2 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

void partial apply for closure #1 in Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  uint64_t v0;

  Connection.cancelSynchronously(_:)(*(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
  OUTLINED_FUNCTION_3();
}

void _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  thunk for @callee_guaranteed () -> ()(*(void (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #2 in Connection.getConnectionMetrics(_:with:)()
{
  uint64_t v0;

  return closure #2 in Connection.getConnectionMetrics(_:with:)(*(_QWORD *)(v0 + 16), *(uint64_t (**)(_BYTE *))(v0 + 24));
}

uint64_t objectdestroy_30Tm()
{
  uint64_t v0;

  OUTLINED_FUNCTION_141_1();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Connection.getConnectionMetrics(_:with:)()
{
  uint64_t v0;

  return closure #1 in Connection.getConnectionMetrics(_:with:)(*(_QWORD *)(v0 + 16), *(uint64_t (**)(_BYTE *))(v0 + 24));
}

void partial apply for closure #1 in Connection.getSNConnectionMetrics(_:with:)(uint64_t a1)
{
  closure #1 in Connection.getSNConnectionMetrics(_:with:)(a1);
}

void partial apply for closure #1 in Connection.getConnectionAnalysisInfo(_:)()
{
  uint64_t v0;

  closure #1 in Connection.getConnectionAnalysisInfo(_:)(*(_QWORD *)(v0 + 16), *(void (**)(char *))(v0 + 24));
}

void partial apply for closure #1 in Connection.getSNConnectionAnalysisInfo(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Connection.getSNConnectionAnalysisInfo(_:)(a1, *(void (**)(id))(v1 + 16));
}

void partial apply for closure #1 in Connection.probeConnection()()
{
  uint64_t v0;

  closure #1 in Connection.probeConnection()(v0);
}

void partial apply for closure #1 in Connection.barrier(with:)()
{
  uint64_t v0;

  closure #1 in Connection.barrier(with:)(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_246F3B9D4()
{
  Connection.delegate.getter();
}

void sub_246F3B9EC(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  OUTLINED_FUNCTION_3();
}

uint64_t method lookup function for Connection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Connection.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of Connection.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of Connection.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of Connection.__allocating_init(connectionInfo:connectionQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 552))();
}

uint64_t dispatch thunk of Connection.start()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of Connection.sendData(_:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of Connection.sendCommand(_:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of Connection.sendCommands(_:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of Connection.setSendPings(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x258))();
}

uint64_t dispatch thunk of Connection.cancelSynchronously(_:isOnConnectionQueue:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of Connection.getConnectionMetrics(_:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of Connection.getSNConnectionMetrics(_:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of Connection.getConnectionAnalysisInfo(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of Connection.getSNConnectionAnalysisInfo(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x280))();
}

uint64_t dispatch thunk of Connection.probeConnection()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of Connection.barrier(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x290))();
}

uint64_t sub_246F3BBC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?)
                                      - 8)
                          + 80);
  v2 = (v1 + 32) & ~v1;
  OUTLINED_FUNCTION_141_1();

  v3 = type metadata accessor for ConnectionAnalysisInfo();
  if (!__swift_getEnumTagSinglePayload(v0 + v2, 1, v3))
  {
    v4 = type metadata accessor for URL();
    if (!__swift_getEnumTagSinglePayload(v0 + v2, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + v2, v4);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConnectionAnalysisInfo?)
                                      - 8)
                          + 80);
  closure #1 in closure #1 in Connection.didEncounterError(_:error:analysisInfo:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

void specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;

  OUTLINED_FUNCTION_142_0();
  if (!v21)
  {
    OUTLINED_FUNCTION_3_6();
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NWConnection>);
  OUTLINED_FUNCTION_109_1();
  OUTLINED_FUNCTION_128_1();
  if (!OUTLINED_FUNCTION_180_1())
  {
LABEL_16:
    OUTLINED_FUNCTION_14();
LABEL_18:
    OUTLINED_FUNCTION_70_2();
    return;
  }
  type metadata accessor for NWConnection();
  OUTLINED_FUNCTION_167_1();
  while (1)
  {
    OUTLINED_FUNCTION_67_2();
    if (*(_QWORD *)(a20 + 24) <= *(_QWORD *)(a20 + 16))
      specialized _NativeSet.resize(capacity:)();
    OUTLINED_FUNCTION_114_1();
    v22 = OUTLINED_FUNCTION_174_1();
    OUTLINED_FUNCTION_165_0(v22);
    OUTLINED_FUNCTION_103_2();
    OUTLINED_FUNCTION_66_1();
    if (v26)
      break;
    OUTLINED_FUNCTION_160_0();
LABEL_15:
    if (!OUTLINED_FUNCTION_29_4(v27))
      goto LABEL_16;
  }
  v28 = 0;
  v29 = (unint64_t)(v20 - v25) >> 6;
  while (++v24 != v29 || (v28 & 1) == 0)
  {
    v30 = v24 == v29;
    if (v24 == v29)
      v24 = 0;
    v28 |= v30;
    if (*(_QWORD *)(v23 + 8 * v24) != -1)
    {
      OUTLINED_FUNCTION_156_0();
      goto LABEL_15;
    }
  }
  __break(1u);
}

#error "246F3BE48: call analysis failed (funcsize=67)"

void specialized _NativeSet._unsafeInsertNew(_:)()
{
  Swift::UInt64 v0;
  unint64_t v1;

  OUTLINED_FUNCTION_114_1();
  v0 = NWConnection.identifier.getter();
  OUTLINED_FUNCTION_165_0(v0);
  OUTLINED_FUNCTION_103_2();
  v1 = OUTLINED_FUNCTION_56_2();
  OUTLINED_FUNCTION_37_4(v1);
  OUTLINED_FUNCTION_119_1();
}

{
  unint64_t v0;
  _BYTE v1[72];

  OUTLINED_FUNCTION_114_1();
  specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)v1);
  OUTLINED_FUNCTION_103_2();
  v0 = OUTLINED_FUNCTION_56_2();
  OUTLINED_FUNCTION_37_4(v0);
  OUTLINED_FUNCTION_119_1();
}

uint64_t specialized Set._Variant.remove(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  v2 = v0;
  v3 = *v0;
  if ((*v0 & 0xC000000000000001) == 0)
  {
    OUTLINED_FUNCTION_114_1();
    OUTLINED_FUNCTION_16_0();
    v6 = NWConnection.identifier.getter();
    OUTLINED_FUNCTION_165_0(v6);
    v7 = OUTLINED_FUNCTION_103_2();
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v9 = v7 & ~v8;
    OUTLINED_FUNCTION_191_1();
    if ((v10 & 1) != 0)
    {
      OUTLINED_FUNCTION_83();
      OUTLINED_FUNCTION_174_1();
      v11 = OUTLINED_FUNCTION_176_0();
      OUTLINED_FUNCTION_200();
      if (v1 == v11)
      {
LABEL_9:
        OUTLINED_FUNCTION_8_2();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v16 = *v2;
        v18 = *v2;
        *v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeSet.copy()();
          v16 = v18;
        }
        v5 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v9);
        specialized _NativeSet._delete(at:)(v9);
        *v2 = v18;
        goto LABEL_12;
      }
      v12 = ~v8;
      while (1)
      {
        v9 = (v9 + 1) & v12;
        OUTLINED_FUNCTION_191_1();
        if ((v13 & 1) == 0)
          break;
        OUTLINED_FUNCTION_83();
        OUTLINED_FUNCTION_174_1();
        v14 = OUTLINED_FUNCTION_176_0();
        OUTLINED_FUNCTION_200();
        if (v1 == v14)
          goto LABEL_9;
      }
    }
LABEL_13:
    OUTLINED_FUNCTION_8_2();
    return 0;
  }
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_139_0();
  v4 = __CocoaSet.contains(_:)();
  swift_release();
  if ((v4 & 1) == 0)
    goto LABEL_13;
  v5 = specialized Set._Variant._migrateToNative(_:removing:)();
LABEL_12:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[114];
  _BYTE __dst[120];

  v3 = v2;
  memcpy(__dst, __src, 0x72uLL);
  v6 = *v3;
  memcpy(v33, __src, sizeof(v33));
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ConnectionPolicyRoute.hash(into:)();
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v6 + 48);
    while (1)
    {
      v12 = v11 + 120 * v9;
      v13 = *(_QWORD *)(v12 + 64);
      v14 = *(_BYTE *)(v12 + 72);
      v15 = *(_BYTE *)(v12 + 96);
      v16 = *(_QWORD *)(v12 + 104);
      v17 = *(_BYTE *)(v12 + 112);
      v18 = *(_BYTE *)(v12 + 113);
      v19 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)v33 = *(_OWORD *)v12;
      *(_OWORD *)&v33[16] = v19;
      v20 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)&v33[32] = *(_OWORD *)(v12 + 32);
      *(_OWORD *)&v33[48] = v20;
      *(_QWORD *)&v33[64] = v13;
      v33[72] = v14;
      *(_OWORD *)&v33[80] = *(_OWORD *)(v12 + 80);
      v33[96] = v15;
      *(_QWORD *)&v33[104] = v16;
      v33[112] = v17;
      v33[113] = v18;
      if (static ConnectionPolicyRoute.== infix(_:_:)((uint64_t)v33, (uint64_t)__dst))
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v3;
    *(_QWORD *)v33 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = *(_QWORD *)v33;
    }
    v24 = *(_QWORD *)(v23 + 48) + 120 * v9;
    v25 = *(_QWORD *)(v24 + 64);
    v26 = *(_BYTE *)(v24 + 72);
    v27 = *(_BYTE *)(v24 + 96);
    v28 = *(_QWORD *)(v24 + 104);
    v29 = *(_BYTE *)(v24 + 112);
    v30 = *(_BYTE *)(v24 + 113);
    v31 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v24;
    *(_OWORD *)(a2 + 16) = v31;
    v32 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(a2 + 48) = v32;
    *(_QWORD *)(a2 + 64) = v25;
    *(_BYTE *)(a2 + 72) = v26;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(v24 + 80);
    *(_BYTE *)(a2 + 96) = v27;
    *(_QWORD *)(a2 + 104) = v28;
    *(_BYTE *)(a2 + 112) = v29;
    *(_BYTE *)(a2 + 113) = v30;
    specialized _NativeSet._delete(at:)(v9);
    *v3 = *(_QWORD *)v33;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    result = swift_bridgeObjectRelease();
    *(_OWORD *)a2 = xmmword_246F729D0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_WORD *)(a2 + 112) = 0;
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v14[520];
  _QWORD __dst[65];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *v1;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v5 = __CocoaSet.contains(_:)();
    swift_release();
    if ((v5 & 1) != 0)
    {
      v6 = specialized Set._Variant._migrateToNative(_:removing:)(v4, a1);
LABEL_15:
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
    v7 = Hasher._finalize()();
    v8 = -1 << *(_BYTE *)(v3 + 32);
    v9 = v7 & ~v8;
    if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      v10 = ~v8;
      while (1)
      {
        memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9) + 40), 0x204uLL);
        memcpy(v14, (const void *)(a1 + 40), 0x204uLL);
        if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v14))
          break;
        v9 = (v9 + 1) & v10;
        if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = *v1;
      __dst[0] = *v1;
      *v1 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeSet.copy()();
        v12 = __dst[0];
      }
      v6 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v9);
      specialized _NativeSet._delete(at:)(v9);
      *v1 = __dst[0];
      goto LABEL_15;
    }
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[5];

  v3 = v2;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 40);
  OUTLINED_FUNCTION_47_3();
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v18);
      v12 = MEMORY[0x24956D3DC](v18, a1);
      outlined destroy of AnyHashable((uint64_t)v18);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    OUTLINED_FUNCTION_6_4();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    v18[0] = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v15 = v18[0];
    }
    v16 = *(_QWORD *)(v15 + 48) + 40 * v10;
    v17 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v16;
    *(_OWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v16 + 32);
    specialized _NativeSet._delete(at:)(v10);
    *v3 = v18[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    result = OUTLINED_FUNCTION_6_4();
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = __CocoaSet.count.getter();
  v3 = swift_unknownObjectRetain();
  specialized _NativeSet.init(_:capacity:)(v3, v2, v4, v5, v6, v7, v8, v9, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v36,
    v37);
  v11 = v10;
  v35 = v10;
  Hasher.init(_seed:)();
  swift_retain();
  v12 = NWConnection.identifier.getter();
  Hasher._combine(_:)(v12);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    swift_retain();
    v16 = NWConnection.identifier.getter();
    v17 = NWConnection.identifier.getter();
    swift_release();
    if (v16 == v17)
    {
LABEL_6:
      swift_release();
      v21 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v15);
      specialized _NativeSet._delete(at:)(v15);
      swift_retain();
      swift_retain();
      v22 = NWConnection.identifier.getter();
      v23 = NWConnection.identifier.getter();
      swift_release();
      swift_release();
      if (v22 == v23)
      {
        *v1 = v35;
        return v21;
      }
      __break(1u);
    }
    else
    {
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v11 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        swift_retain();
        v19 = NWConnection.identifier.getter();
        v20 = NWConnection.identifier.getter();
        swift_release();
        if (v19 == v20)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t result;
  _BYTE v14[520];
  _BYTE __dst[520];
  uint64_t v16;

  swift_bridgeObjectRelease();
  v4 = __CocoaSet.count.getter();
  v5 = swift_unknownObjectRetain();
  v6 = specialized _NativeSet.init(_:capacity:)(v5, v4);
  v16 = v6;
  Hasher.init(_seed:)();
  swift_retain();
  specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    v11 = (const void *)(a2 + 40);
    while (1)
    {
      memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9) + 40), 0x204uLL);
      memcpy(v14, v11, 0x204uLL);
      if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v14))
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    v12 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v9);
    specialized _NativeSet._delete(at:)(v9);
    memcpy(__dst, v11, 0x204uLL);
    memcpy(v14, (const void *)(v12 + 40), 0x204uLL);
    if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v14))
    {
      *v2 = v16;
      return v12;
    }
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt64 v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        v10 = NWConnection.identifier.getter();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()();
        swift_release();
        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_15:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            v18 = v2 != v6 || v16 >= v17 + 1;
            v2 = v6;
            if (v18)
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v13;
  void *v14;
  const void *v15;
  unint64_t v16;
  BOOL v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v23 = v3;
      v24 = v4;
      do
      {
        v25 = 120 * v6;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ConnectionPolicyRoute.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_9:
            v3 = v23;
            v4 = v24;
            v13 = *(_QWORD *)(v23 + 48);
            v14 = (void *)(v13 + 120 * v2);
            v15 = (const void *)(v13 + v25);
            v16 = v13 + v25 + 120;
            v18 = 120 * v2 >= v25 && (unint64_t)v14 < v16 && v2 == v6;
            v2 = v6;
            if (!v18)
            {
              memmove(v14, v15, 0x78uLL);
              v2 = v6;
            }
            goto LABEL_23;
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_9;
        }
        v3 = v23;
        v4 = v24;
LABEL_23:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v21[72];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)v21);
        v10 = Hasher._finalize()();
        swift_release();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            v14 = *(_QWORD *)(v3 + 48);
            v15 = (_QWORD *)(v14 + 8 * v2);
            v16 = (_QWORD *)(v14 + 8 * v6);
            v17 = v2 != v6 || v15 >= v16 + 1;
            v2 = v6;
            if (v17)
            {
              *v15 = *v16;
              v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  BOOL v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _BYTE v25[40];

  v2 = v1;
  v3 = result;
  v4 = *v1;
  v5 = *v1 + 56;
  v6 = -1 << *(_BYTE *)(*v1 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    v8 = ~v6;
    swift_retain();
    v9 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (v9 + 1) & v8;
      do
      {
        outlined init with copy of AnyHashable(*(_QWORD *)(v4 + 48) + 40 * v7, (uint64_t)v25);
        v11 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        outlined destroy of AnyHashable((uint64_t)v25);
        v12 = v11 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v12 >= v10 && v3 >= v12)
          {
LABEL_15:
            v15 = *(_QWORD *)(v4 + 48);
            v16 = v15 + 40 * v3;
            v17 = (__int128 *)(v15 + 40 * v7);
            v18 = v3 != v7 || v16 >= (unint64_t)v17 + 40;
            v3 = v7;
            if (v18)
            {
              v19 = *v17;
              v20 = v17[1];
              *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
              *(_OWORD *)v16 = v19;
              *(_OWORD *)(v16 + 16) = v20;
              v3 = v7;
            }
          }
        }
        else if (v12 >= v10 || v3 >= v12)
        {
          goto LABEL_15;
        }
        v7 = (v7 + 1) & v8;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(_QWORD *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *v2;
  v22 = *(_QWORD *)(*v2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
  return result;
}

uint64_t sub_246F3CFCC()
{
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in Connection.didClose(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in Connection.didClose(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  uint64_t v0;

  return OUTLINED_FUNCTION_115_1(*(_QWORD *)(v0 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SNSessionObject?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) (@unowned SNSessionObject?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_246F3D010()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  OUTLINED_FUNCTION_157();
  return swift_deallocObject();
}

uint64_t specialized Set.endIndex.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
    return __CocoaSet.endIndex.getter();
  else
    return 1 << *(_BYTE *)(a1 + 32);
}

uint64_t specialized Set.subscript.getter(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[65];
  _QWORD __dst[65];

  v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
      {
        if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        {
LABEL_20:
          v7 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    result = __CocoaSet.Index.age.getter();
    if ((_DWORD)result == *(_DWORD *)(a4 + 36))
    {
      v12[0] = __CocoaSet.Index.element.getter();
      type metadata accessor for BackgroundConnection();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v8 = __dst[0];
      swift_unknownObjectRelease();
      Hasher.init(_seed:)();
      specialized BackgroundConnectionProtocol.hash(into:)((uint64_t)__dst);
      v9 = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(a4 + 32);
      v5 = v9 & ~v10;
      if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        v11 = ~v10;
        while (1)
        {
          memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v5) + 40), 0x204uLL);
          memcpy(v12, (const void *)(v8 + 40), 0x204uLL);
          if (static ConnectionConfiguration.== infix(_:_:)((uint64_t)__dst, (uint64_t)v12))
            break;
          v5 = (v5 + 1) & v11;
          if (((*(_QWORD *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        swift_release();
        __break(1u);
      }
      swift_release();
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v6 = a4;
    else
      v6 = a4 & 0xFFFFFFFFFFFFFF8;
    v12[0] = MEMORY[0x24956D3A0](result, a2, v6);
    type metadata accessor for BackgroundConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v7 = __dst[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

BOOL specialized static Set.Index.== infix(_:_:)(uint64_t a1, int a2, char a3, uint64_t a4, int a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0)
LABEL_9:
      JUMPOUT(0x24956D364);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((a6 & 1) != 0)
    goto LABEL_8;
  if (a2 != a5)
  {
    __break(1u);
    goto LABEL_8;
  }
  return a1 == a4;
}

uint64_t outlined consume of Set<BackgroundConnection>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_246F3D538()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  if (*(_QWORD *)(v0 + 48))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in Connection.sendData(_:with:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in Connection.sendData(_:with:)(a1, v1 + 16, *(void (**)(void))(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_246F3D578()
{
  OUTLINED_FUNCTION_99();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Connection.scheduleBackgroundConnection(_:after:)()
{
  uint64_t v0;

  return closure #1 in Connection.scheduleBackgroundConnection(_:after:)(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 144), *(double *)(v0 + 152));
}

uint64_t outlined retain of ConnectionPolicyRoute(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ConnectionPolicyRoute(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_246F3D6AC()
{
  OUTLINED_FUNCTION_141_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)()
{
  uint64_t *v0;

  closure #1 in closure #1 in Connection.scheduleBackgroundConnection(_:after:)(v0[2], v0 + 3, v0[18], v0[19]);
}

size_t OUTLINED_FUNCTION_10_13(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_12_11()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14_10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_19_11()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_23_7()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_25_8()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void *OUTLINED_FUNCTION_26_6@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_27_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t v11;

  return outlined consume of ConnectionPolicy?(v10[92], v10[93], v10[94], v10[100], *(_QWORD *)(v11 - 72), v10[101], v10[102], v10[103], a9, a10);
}

uint64_t OUTLINED_FUNCTION_29_4@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(a1 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= v4 << v1;
  *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v1) = v3;
  ++*(_QWORD *)(v2 + 16);
  return __CocoaSet.Iterator.next()();
}

uint64_t OUTLINED_FUNCTION_30_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;

  return outlined consume of ConnectionPolicy?(a1, a2, a3, a4, a5, v10[101], v10[102], v10[103], a9, a10);
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_33_3(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_34_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return swift_unknownObjectRelease_n();
}

unint64_t OUTLINED_FUNCTION_37_4(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * result) = v3;
  ++*(_QWORD *)(v1 + 16);
  return result;
}

uint64_t OUTLINED_FUNCTION_38_5()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_39_4()
{
  uint64_t v0;

  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v0);
  return static DispatchQoS.unspecified.getter();
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return type metadata accessor for BackgroundConnection();
}

uint64_t OUTLINED_FUNCTION_47_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_51_3()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_55_3()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 736);
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t OUTLINED_FUNCTION_57_3()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_64_2()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_67_2()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_69_1()
{
  return swift_retain_n();
}

void OUTLINED_FUNCTION_73_3()
{
  JUMPOUT(0x24956E090);
}

void OUTLINED_FUNCTION_80_2(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

BOOL OUTLINED_FUNCTION_81_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_84_3()
{
  return swift_unknownObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_85_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_86_3()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_90_2()
{
  JUMPOUT(0x24956D244);
}

uint64_t OUTLINED_FUNCTION_91_1()
{
  return outlined consume of [String : UInt64].Iterator._Variant();
}

void OUTLINED_FUNCTION_95_1()
{
  JUMPOUT(0x24956E090);
}

uint64_t OUTLINED_FUNCTION_99_2()
{
  return swift_arrayDestroy();
}

Swift::Int OUTLINED_FUNCTION_103_2()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_104_2()
{
  return swift_unknownObjectWeakInit();
}

void OUTLINED_FUNCTION_106_1(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *(__n128 *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_WORD *)(a1 + 112) = 0;
}

uint64_t OUTLINED_FUNCTION_108_0()
{
  uint64_t v0;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed LinkRecommendationInfo?) -> ())?(v0);
}

uint64_t OUTLINED_FUNCTION_109_1()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t OUTLINED_FUNCTION_111_1()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_114_1()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_115_1(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t OUTLINED_FUNCTION_118_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 224) = *(_QWORD *)(v1 + 440);
  *(_QWORD *)(v2 - 216) = a1;
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_120_0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  return objc_msgSend(v4, a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_121_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_122_1(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return BackgroundConnection.init(connectionConfiguration:connectionQueue:networkManager:networkAnalytics:)(a1, v5, v4, a4);
}

uint64_t OUTLINED_FUNCTION_124_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

void OUTLINED_FUNCTION_125_1(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_127_0(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  va_list va;

  va_start(va, a2);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_128_1()
{
  return __CocoaSet.makeIterator()();
}

uint64_t OUTLINED_FUNCTION_129_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_132_1()
{
  return swift_unknownObjectRetain_n();
}

void *OUTLINED_FUNCTION_134@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  v2[185] = a1;
  v2[186] = v1;
  return _Block_copy(v2 + 183);
}

uint64_t OUTLINED_FUNCTION_135_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_137_1(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a1, v3, a3);
}

void OUTLINED_FUNCTION_141_1()
{
  uint64_t v0;

}

id OUTLINED_FUNCTION_147_0()
{
  Swift::Int v0;

  return ConnectionTypeWrapper.init(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_149_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_150_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_153_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_154_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_155_1()
{
  return type metadata accessor for ConnectionTypeWrapper();
}

uint64_t OUTLINED_FUNCTION_158_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_159_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_161_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_162_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_164_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 448);
}

void OUTLINED_FUNCTION_165_0(Swift::UInt64 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_166_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_168_0()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t OUTLINED_FUNCTION_171_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_174_1()
{
  return NWConnection.identifier.getter();
}

uint64_t OUTLINED_FUNCTION_176_0()
{
  return NWConnection.identifier.getter();
}

uint64_t OUTLINED_FUNCTION_177_0()
{
  return swift_isEscapingClosureAtFileLocation();
}

uint64_t OUTLINED_FUNCTION_178_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_180_1()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t OUTLINED_FUNCTION_181_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_183_1()
{
  return swift_unknownObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_184_1()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t OUTLINED_FUNCTION_188_1()
{
  return swift_dynamicCastClass();
}

void OUTLINED_FUNCTION_190_0()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t OUTLINED_FUNCTION_192_1()
{
  return String.init<A>(describing:)();
}

void *ConnectionPingInfoReport.netPingInfo.getter(unint64_t a1, double a2)
{
  id v4;
  void *v5;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE952D8]), sel_init);
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, sel_setPingCount_, a1);
    objc_msgSend(v5, sel_setMeanPingInMs_, a2);
    objc_msgSend(v5, sel_setUnacknowledgedPingCount_, HIDWORD(a1));
  }
  return v5;
}

void destroy for ConnectionEstablishmentReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for ConnectionEstablishmentReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v6 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v6;
  return a1;
}

uint64_t assignWithCopy for ConnectionEstablishmentReport(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v7 = *(void **)(a2 + 104);
  v8 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for ConnectionEstablishmentReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v6 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionEstablishmentReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 56);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionEstablishmentReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionEstablishmentReport()
{
  return &type metadata for ConnectionEstablishmentReport;
}

unint64_t ConnectionEstablishmentReport.attemptDelayInMs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t result;
  _BYTE v12[16];
  double v13;
  char v14;

  v1 = outlined init with take of Double?(v0 + 24, (uint64_t)v12);
  OUTLINED_FUNCTION_9_18(v1, v2, v3, v4);
  if ((v14 & 1) != 0 || v13 <= 0.0)
  {
    v9 = 0;
    LOBYTE(v10) = 1;
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_12_12();
  if (v6 ^ v7 | v5)
    goto LABEL_15;
  OUTLINED_FUNCTION_12_12();
  if (!v6)
    goto LABEL_15;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
  {
    if (v8 > -9.22337204e18)
    {
      v9 = (uint64_t)v8;
      if ((uint64_t)v8 < 0)
        goto LABEL_15;
      v10 = HIDWORD(v9);
      if (HIDWORD(v9))
        goto LABEL_15;
LABEL_12:
      LOBYTE(v13) = v10;
      return v9 | ((unint64_t)v10 << 32);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_15:
  OUTLINED_FUNCTION_0_0();
  result = OUTLINED_FUNCTION_16_9();
  __break(1u);
  return result;
}

uint64_t ConnectionEstablishmentReport.durationInMs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  double v8;
  uint64_t result;
  _BYTE v10[16];
  double v11;
  char v12;

  v1 = outlined init with take of Double?(v0 + 40, (uint64_t)v10);
  OUTLINED_FUNCTION_9_18(v1, v2, v3, v4);
  if ((v12 & 1) == 0 && v11 > 0.0)
  {
    OUTLINED_FUNCTION_12_12();
    if (v6 ^ v7 | v5)
      goto LABEL_14;
    OUTLINED_FUNCTION_12_12();
    if (!v6)
      return 0x7FFFFFFFFFFFFFFFLL;
    if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
    {
      if (v8 > -9.22337204e18)
      {
        result = (uint64_t)v8;
        if (((uint64_t)v8 & 0x8000000000000000) == 0)
          return result;
LABEL_14:
        OUTLINED_FUNCTION_0_0();
        result = OUTLINED_FUNCTION_16_9();
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  return 0;
}

uint64_t ConnectionEstablishmentReport.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[3];
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;

  _StringGuts.grow(_:)(23);
  OUTLINED_FUNCTION_2_24();
  v67[0] = 0xD000000000000015;
  v67[1] = 0x8000000246F78C00;
  if ((*(_BYTE *)(v0 + 20) & 1) != 0)
  {
    v1 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    LODWORD(v68._countAndFlagsBits) = *(_DWORD *)(v0 + 16);
    v1 = OUTLINED_FUNCTION_10_14();
  }
  OUTLINED_FUNCTION_3_22(v1);
  OUTLINED_FUNCTION_10_2();
  v3 = v67[0];
  v2 = v67[1];
  _StringGuts.grow(_:)(19);
  OUTLINED_FUNCTION_2_24();
  v67[0] = 0xD000000000000011;
  v67[1] = 0x8000000246F78C20;
  v4 = ConnectionEstablishmentReport.attemptDelayInMs.getter();
  v65 = v2;
  if ((v4 & 0x100000000) != 0)
  {
    v5 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    LODWORD(v68._countAndFlagsBits) = v4;
    v5 = OUTLINED_FUNCTION_10_14();
  }
  OUTLINED_FUNCTION_3_22(v5);
  OUTLINED_FUNCTION_10_2();
  v7 = v67[0];
  v6 = v67[1];
  strcpy((char *)v67, "durationInMs ");
  HIWORD(v67[1]) = -4864;
  v8 = ConnectionEstablishmentReport.durationInMs.getter();
  v62 = v6;
  v60 = v7;
  if ((v9 & 1) != 0)
  {
    v10 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    v68._countAndFlagsBits = v8;
    v10 = OUTLINED_FUNCTION_10_14();
  }
  OUTLINED_FUNCTION_3_22(v10);
  OUTLINED_FUNCTION_10_2();
  v56 = v67[0];
  v58 = v67[1];
  _StringGuts.grow(_:)(29);
  OUTLINED_FUNCTION_2_24();
  v11 = swift_bridgeObjectRetain();
  v69._countAndFlagsBits = MEMORY[0x24956D148](v11, &type metadata for ConnectionHandshakeReport);
  OUTLINED_FUNCTION_11_15(v69);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_1();
  _StringGuts.grow(_:)(30);
  OUTLINED_FUNCTION_2_24();
  v12 = swift_bridgeObjectRetain();
  v70._countAndFlagsBits = MEMORY[0x24956D148](v12, &type metadata for ConnectionResolutionReport);
  OUTLINED_FUNCTION_11_15(v70);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_6_1();
  _StringGuts.grow(_:)(18);
  OUTLINED_FUNCTION_2_24();
  v67[0] = 0xD000000000000010;
  v67[1] = 0x8000000246F78C80;
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  OUTLINED_FUNCTION_3_22(v13);
  OUTLINED_FUNCTION_10_2();
  v14 = (void *)v67[1];
  v52 = v67[0];
  strcpy((char *)v67, "usedProxy ");
  BYTE3(v67[1]) = 0;
  HIDWORD(v67[1]) = -369098752;
  if ((*(_BYTE *)(v0 + 73) & 1) != 0)
    v15 = 1702195828;
  else
    v15 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 73) & 1) != 0)
    v16 = 0xE400000000000000;
  else
    v16 = 0xE500000000000000;
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  OUTLINED_FUNCTION_6_1();
  v18 = (void *)v67[1];
  v50 = v67[0];
  OUTLINED_FUNCTION_6_15();
  OUTLINED_FUNCTION_2_24();
  strcpy((char *)&v68, "proxyEndpoint ");
  HIBYTE(v68._object) = -18;
  v19 = *(_QWORD *)(v0 + 88);
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 96);
    v67[0] = *(_QWORD *)(v0 + 80);
    v67[1] = v19;
    v67[2] = v20;
    swift_bridgeObjectRetain();
    v21 = String.init<A>(describing:)();
    v23 = v22;
  }
  else
  {
    v23 = 0xE700000000000000;
    v21 = OUTLINED_FUNCTION_1_4();
  }
  v24 = v23;
  String.append(_:)(*(Swift::String *)&v21);
  OUTLINED_FUNCTION_6_1();
  v25._countAndFlagsBits = 41;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  OUTLINED_FUNCTION_6_15();
  OUTLINED_FUNCTION_2_24();
  v26 = swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_8_16(v26, v27, v28, v29, v30, v31, v32, v33, v48, v50, v52, 0xD00000000000001CLL, 0xD00000000000001BLL, v56, v58, v60, v62, v3, v65,
    99);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(82);
  v34._countAndFlagsBits = 0xD000000000000030;
  v34._object = (void *)0x8000000246F78CA0;
  String.append(_:)(v34);
  OUTLINED_FUNCTION_15_14(v64);
  OUTLINED_FUNCTION_115();
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_15_14(v61);
  OUTLINED_FUNCTION_115();
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_15_14(v57);
  OUTLINED_FUNCTION_115();
  OUTLINED_FUNCTION_0_37();
  v35._countAndFlagsBits = v55;
  v35._object = (void *)0x8000000246F78C40;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_37();
  v36._countAndFlagsBits = v54;
  v36._object = (void *)0x8000000246F78C60;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_37();
  v37._countAndFlagsBits = v53;
  v37._object = v14;
  String.append(_:)(v37);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_0_37();
  v38._countAndFlagsBits = v51;
  v38._object = v18;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_37();
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_37();
  OUTLINED_FUNCTION_8_16(v39, v40, v41, v42, v43, v44, v45, v46, v49, v51, v53, v54, v55, v57, v59, v61, v63, v64, v66,
    0);
  swift_bridgeObjectRelease();
  return v67[0];
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConnectionEstablishmentReport()
{
  const void *v0;
  _BYTE v2[112];

  memcpy(v2, v0, sizeof(v2));
  return ConnectionEstablishmentReport.debugDescription.getter();
}

void OUTLINED_FUNCTION_0_37()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_2_24()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_3_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_6_15()
{
  _StringGuts.grow(_:)(17);
}

void OUTLINED_FUNCTION_8_16(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  uint64_t v21;
  Swift::String v22;

  v22._countAndFlagsBits = v21;
  v22._object = v20;
  String.append(_:)(v22);
}

uint64_t OUTLINED_FUNCTION_9_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  return outlined init with take of Double?((uint64_t)va, v4 - 16);
}

uint64_t OUTLINED_FUNCTION_10_14()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_11_15(Swift::String a1)
{
  String.append(_:)(a1);
}

void OUTLINED_FUNCTION_15_14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t dispatch thunk of ConnectionProtocol.connectionConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConnectionProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConnectionProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ConnectionProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ConnectionProtocol.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConnectionProtocol.sendData(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of ConnectionProtocol.sendCommand(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of ConnectionProtocol.sendCommands(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ConnectionProtocol.setSendPings(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ConnectionProtocol.cancelSynchronously(_:isOnConnectionQueue:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of ConnectionProtocol.getConnectionMetrics(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of ConnectionProtocol.getConnectionAnalysisInfo(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of ConnectionProtocol.barrier(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of ConnectionProtocol.probeConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

SiriNetwork::ConnectionType __swiftcall ConnectionType.init(fromCoreTelephonyeRATString:)(Swift::String fromCoreTelephonyeRATString)
{
  char *v1;
  char v2;
  void *object;
  uint64_t countAndFlagsBits;
  char *v5;
  void *v6;
  SiriNetwork::ConnectionType result;
  char v9;
  void *v10;
  void *v12;
  void *v14;
  void *v16;
  void *v18;
  void *v20;
  void *v22;
  void *v24;
  void *v26;
  void *v28;
  void *v30;
  void *v32;
  char v34;

  object = fromCoreTelephonyeRATString._object;
  countAndFlagsBits = fromCoreTelephonyeRATString._countAndFlagsBits;
  v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == fromCoreTelephonyeRATString._countAndFlagsBits
    && v6 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_8:
    v9 = 5;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v10 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_17:
    v9 = 6;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_25:
    v9 = 7;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_33:
    v9 = 8;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_41:
    v9 = 9;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_49;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_49:
    v9 = 4;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_57;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_57:
    v9 = 10;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v22 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_65;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_65:
    v9 = 11;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v24 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_73;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_73:
    v9 = 12;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v26 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_81;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_81:
    v9 = 13;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v28 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_89;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_89:
    v9 = 14;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v30 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    goto LABEL_97;
  }
  OUTLINED_FUNCTION_0_38();
  OUTLINED_FUNCTION_2_25();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_44_1();
LABEL_97:
    v9 = 15;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v32 == object)
  {
    result = OUTLINED_FUNCTION_8_4();
    v9 = 16;
  }
  else
  {
    v34 = OUTLINED_FUNCTION_0_38();
    OUTLINED_FUNCTION_44_1();
    result = swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
      v9 = 16;
    else
      v9 = 0;
  }
LABEL_9:
  *v5 = v9;
  return result;
}

uint64_t OUTLINED_FUNCTION_0_38()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_2_25()
{
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall NWError.sn_isNetworkUnreachable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  Swift::Bool result;
  uint64_t v5;

  OUTLINED_FUNCTION_4_22();
  OUTLINED_FUNCTION_5_21();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_39(v2, v5);
  v3 = OUTLINED_FUNCTION_3_23();
  if (v3 == *MEMORY[0x24BDE0680])
  {
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
  }
  else if (v3 == *MEMORY[0x24BDE0678])
  {
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
    OUTLINED_FUNCTION_15_15();
  }
  else
  {
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  }
  OUTLINED_FUNCTION_23_1();
  return result;
}

Swift::Bool __swiftcall NWError.sn_isNetworkUnreachableForServerCause()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Bool result;
  uint64_t v4;

  OUTLINED_FUNCTION_4_22();
  OUTLINED_FUNCTION_5_21();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_39(v2, v4);
  if (OUTLINED_FUNCTION_3_23() == *MEMORY[0x24BDE0680])
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
  else
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_23_1();
  return result;
}

Swift::Bool __swiftcall NWError.sn_isNetworkDown()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Bool result;
  uint64_t v4;

  OUTLINED_FUNCTION_4_22();
  OUTLINED_FUNCTION_5_21();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_39(v2, v4);
  if (OUTLINED_FUNCTION_3_23() == *MEMORY[0x24BDE0680])
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
  else
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_23_1();
  return result;
}

Swift::Bool __swiftcall NWError.sn_isNetworkConnectionRetryableNow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Bool result;
  uint64_t v4;

  OUTLINED_FUNCTION_4_22();
  OUTLINED_FUNCTION_5_21();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_39(v2, v4);
  if (OUTLINED_FUNCTION_3_23() == *MEMORY[0x24BDE0680])
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
  else
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_23_1();
  return result;
}

Swift::Bool __swiftcall NWError.sn_isNetworkConnectionRetryableAfterDelay()()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  Swift::Bool result;
  uint64_t v16;

  OUTLINED_FUNCTION_4_22();
  OUTLINED_FUNCTION_141();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_10_15();
  v5 = MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_7_18(v5, v6, v7, v8, v9, v10, v11, v12, v16);
  v13 = OUTLINED_FUNCTION_12_13();
  v14 = *MEMORY[0x24BDE0680];
  if (v13 == *MEMORY[0x24BDE0680])
  {
    OUTLINED_FUNCTION_104((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    if (*v1 == 54)
      goto LABEL_8;
  }
  else
  {
    OUTLINED_FUNCTION_104((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  OUTLINED_FUNCTION_8_17(v0);
  if (OUTLINED_FUNCTION_13_14() == v14)
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
  else
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
LABEL_8:
  OUTLINED_FUNCTION_10_4();
  return result;
}

Swift::Bool __swiftcall NWError.sn_isNetworkOperationRetryable()()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  Swift::Bool result;
  uint64_t v18;

  OUTLINED_FUNCTION_4_22();
  OUTLINED_FUNCTION_141();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_10_15();
  v5 = MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_7_18(v5, v6, v7, v8, v9, v10, v11, v12, v18);
  v13 = OUTLINED_FUNCTION_12_13();
  v14 = *MEMORY[0x24BDE0680];
  if (v13 == *MEMORY[0x24BDE0680])
  {
    OUTLINED_FUNCTION_104((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    if ((*v1 - 49) < 3)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (v13 != *MEMORY[0x24BDE0678])
  {
    OUTLINED_FUNCTION_104((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
LABEL_12:
    OUTLINED_FUNCTION_8_17(v0);
    if (OUTLINED_FUNCTION_13_14() == v14)
      OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    else
      OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_104((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
  v15 = *v1;
  if (v15 != -65554 && v15 != -65537)
    goto LABEL_12;
LABEL_15:
  OUTLINED_FUNCTION_10_4();
  return result;
}

Swift::Bool __swiftcall NWError.isFallbackConnectionMethodRetryable(for:)(SiriNetwork::ConnectionMethod a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  Swift::Bool result;
  uint64_t v11;

  v3 = v1;
  v5 = type metadata accessor for NWError();
  OUTLINED_FUNCTION_141();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (int *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(int *, uint64_t, uint64_t))(v2 + 16))(v8, v3, v5);
  if ((*(unsigned int (**)(int *, uint64_t))(v2 + 88))(v8, v5) != *MEMORY[0x24BDE0680])
  {
    OUTLINED_FUNCTION_14_11(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    return 0;
  }
  OUTLINED_FUNCTION_14_11(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
  v9 = *v8;
  result = 1;
  if (*v8 != 9 && v9 != 57)
  {
    if (v9 == 54)
      return a1 == SiriNetwork_ConnectionMethod_peer;
    return 0;
  }
  return result;
}

Swift::Bool __swiftcall NWError.sn_isNetworkConnectionRetryable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  Swift::Bool result;
  uint64_t v5;

  OUTLINED_FUNCTION_4_22();
  OUTLINED_FUNCTION_5_21();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_0_39(v2, v5);
  v3 = OUTLINED_FUNCTION_3_23();
  if (v3 == *MEMORY[0x24BDE0680])
  {
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
  }
  else if (v3 == *MEMORY[0x24BDE0678])
  {
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
    OUTLINED_FUNCTION_15_15();
  }
  else
  {
    OUTLINED_FUNCTION_1_31(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  }
  OUTLINED_FUNCTION_23_1();
  return result;
}

uint64_t OUTLINED_FUNCTION_0_39@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v2);
}

uint64_t OUTLINED_FUNCTION_1_31@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_3_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_22()
{
  return type metadata accessor for NWError();
}

uint64_t OUTLINED_FUNCTION_7_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&a9 - v9, v11, v10);
}

uint64_t OUTLINED_FUNCTION_8_17(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_12_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_13_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

uint64_t OUTLINED_FUNCTION_14_11@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void ConnectionPolicyType.stringRawValue.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_246F3F4CC()
{
  return OUTLINED_FUNCTION_31_3();
}

uint64_t static ConnectionPolicyRoute.maxTimeoutFromRoutes(_:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_BYTE *)(swift_bridgeObjectRetain() + 144);
    v3 = MEMORY[0x24BEE4AF8];
    do
    {
      if ((*v2 & 1) == 0)
      {
        v4 = *((_QWORD *)v2 - 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_38_6();
          v3 = v7;
        }
        v6 = *(_QWORD *)(v3 + 16);
        v5 = *(_QWORD *)(v3 + 24);
        if (v6 >= v5 >> 1)
        {
          OUTLINED_FUNCTION_34_5(v5);
          OUTLINED_FUNCTION_38_6();
          v3 = v8;
        }
        *(_QWORD *)(v3 + 16) = v6 + 1;
        *(_QWORD *)(v3 + 8 * v6 + 32) = v4;
      }
      v2 += 120;
      --v1;
    }
    while (v1);
    OUTLINED_FUNCTION_44_1();
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
  }
  specialized Sequence<>.max()(v3);
  return OUTLINED_FUNCTION_10_2();
}

void *ConnectionPolicyRoute.init(from:)@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  char v32;
  id v33;
  void *v34;
  Swift::String_optional v35;
  char v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  char v48;
  char v49;

  if (!result)
  {
    *(_OWORD *)a2 = xmmword_246F729D0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_WORD *)(a2 + 112) = 0;
    return result;
  }
  v3 = result;
  v4 = outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v3, (SEL *)&selRef_routeId);
  v6 = v5;
  v7 = OUTLINED_FUNCTION_21_10();
  v8 = OUTLINED_FUNCTION_16_13(v7, (SEL *)&selRef_connectionId);
  v10 = v9;
  v11 = OUTLINED_FUNCTION_21_10();
  v12 = OUTLINED_FUNCTION_44_0(v11, sel_priority);
  v44 = OUTLINED_FUNCTION_16_13((uint64_t)v12, (SEL *)&selRef_cname);
  v14 = v13;
  v15 = OUTLINED_FUNCTION_21_10();
  v43 = OUTLINED_FUNCTION_16_13(v15, (SEL *)&selRef_host);
  v17 = v16;
  v18 = OUTLINED_FUNCTION_21_10();
  v19 = OUTLINED_FUNCTION_44_0(v18, sel_mptcp);
  v40 = v4;
  v45 = v12;
  v46 = v8;
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, sel_BOOLValue);

  }
  else
  {
    v21 = 1;
  }
  v41 = OUTLINED_FUNCTION_16_13((uint64_t)v19, (SEL *)&selRef_resolver);
  v23 = v22;
  v24 = OUTLINED_FUNCTION_21_10();
  v25 = OUTLINED_FUNCTION_16_13(v24, (SEL *)&selRef_resolverProtocol);
  v42 = v21;
  if (v26)
  {
    v27 = v25;
    v28 = v26;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v25 && v28 == v29)
    {
      OUTLINED_FUNCTION_6_4();
LABEL_15:
      v25 = swift_bridgeObjectRelease();
      v32 = 1;
      goto LABEL_16;
    }
    v31 = OUTLINED_FUNCTION_22_8();
    OUTLINED_FUNCTION_40_0();
    if ((v31 & 1) != 0)
      goto LABEL_15;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v27 && v28 == v37)
    {
      OUTLINED_FUNCTION_6_4();
      v25 = OUTLINED_FUNCTION_40_0();
      v32 = 2;
    }
    else
    {
      v39 = OUTLINED_FUNCTION_22_8();
      OUTLINED_FUNCTION_6_4();
      v25 = OUTLINED_FUNCTION_40_0();
      if ((v39 & 1) != 0)
        v32 = 2;
      else
        v32 = 0;
    }
  }
  else
  {
    v32 = 0;
  }
LABEL_16:
  v33 = OUTLINED_FUNCTION_44_0(v25, sel_timeout);
  v34 = v33;
  if (v33)
  {
    v47 = 0;
    v48 = 1;
    MEMORY[0x24956D19C](v33, &v47);

    if (v48)
      v34 = 0;
    else
      v34 = v47;
  }
  v35.value._countAndFlagsBits = OUTLINED_FUNCTION_16_13((uint64_t)v33, (SEL *)&selRef_type);
  ConnectionPolicyType.init(fromRawValue:)(v35);

  v36 = v49;
  *(_QWORD *)a2 = v40;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v45;
  *(_QWORD *)(a2 + 40) = v44;
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = v43;
  *(_QWORD *)(a2 + 64) = v17;
  *(_BYTE *)(a2 + 72) = v42;
  *(_QWORD *)(a2 + 80) = v41;
  *(_QWORD *)(a2 + 88) = v23;
  *(_BYTE *)(a2 + 96) = v32;
  *(_QWORD *)(a2 + 104) = v34;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 113) = v36;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_8_2();
  return (void *)swift_bridgeObjectRelease();
}

uint64_t static ConnectionPolicyRoute.policyTypePOPVerification(_:)(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  Swift::String v15;
  Swift::String v16;
  Swift::Bool v17;
  Swift::String v18;
  Swift::String v19;
  char v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;

  if (AFIsInternalInstall())
    v30 = _AFPreferencesGetTuscanyStatus() ^ 1;
  else
    LOBYTE(v30) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain();
  if (v2)
  {
    v4 = 0;
    v5 = a1 + 145;
    v27 = v2 - 1;
    v6 = MEMORY[0x24BEE4AF8];
    v37 = v2;
    v28 = a1 + 145;
    while (1)
    {
      v29 = v6;
      v7 = (unsigned __int8 *)(v5 + 120 * v4);
      v8 = v4;
      while (1)
      {
        if (v8 >= v2)
        {
          __break(1u);
          return result;
        }
        v36 = *(_QWORD *)(v7 - 113);
        v9 = *(_QWORD *)(v7 - 73);
        v10 = *(_QWORD *)(v7 - 65);
        v11 = *(_QWORD *)(v7 - 57);
        v12 = *(_QWORD *)(v7 - 49);
        v35 = *(v7 - 41);
        v34 = *(_QWORD *)(v7 - 33);
        v13 = *(_QWORD *)(v7 - 25);
        v33 = *(v7 - 17);
        v32 = *(_QWORD *)(v7 - 9);
        v31 = *(v7 - 1);
        v14 = *v7;
        v38 = *(_OWORD *)(v7 - 105);
        v39 = *(_OWORD *)(v7 - 89);
        if (!v10)
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_12_6();
          OUTLINED_FUNCTION_62();
          OUTLINED_FUNCTION_47_3();
LABEL_13:
          if (!v12)
            goto LABEL_24;
          OUTLINED_FUNCTION_47_3();
          v18._countAndFlagsBits = OUTLINED_FUNCTION_4_12();
          if (!String.hasSuffix(_:)(v18))
          {
            v19._countAndFlagsBits = OUTLINED_FUNCTION_12_14();
            if (!String.hasPrefix(_:)(v19))
            {
              OUTLINED_FUNCTION_11_7();
LABEL_24:
              swift_bridgeObjectRelease_n();
              goto LABEL_25;
            }
          }
          OUTLINED_FUNCTION_6_4();
          goto LABEL_17;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        OUTLINED_FUNCTION_12_6();
        OUTLINED_FUNCTION_62();
        OUTLINED_FUNCTION_47_3();
        v15._countAndFlagsBits = OUTLINED_FUNCTION_4_12();
        if (!String.hasSuffix(_:)(v15))
        {
          v16._countAndFlagsBits = OUTLINED_FUNCTION_12_14();
          v17 = String.hasPrefix(_:)(v16);
          OUTLINED_FUNCTION_6_1();
          if (v17)
            goto LABEL_18;
          goto LABEL_13;
        }
LABEL_17:
        swift_bridgeObjectRelease();
LABEL_18:
        v20 = v30;
        if (v14 != 4)
          v20 = 1;
        if ((v20 & 1) != 0)
          break;
        swift_bridgeObjectRelease();
LABEL_25:
        ++v8;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_201();
        OUTLINED_FUNCTION_6_1();
        result = OUTLINED_FUNCTION_8_2();
        v7 += 120;
        v2 = v37;
        if (v37 == v8)
        {
          v6 = v29;
          goto LABEL_34;
        }
      }
      v6 = v29;
      result = OUTLINED_FUNCTION_8_11();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
        v6 = v29;
      }
      v22 = v38;
      v21 = v39;
      v24 = *(_QWORD *)(v6 + 16);
      v23 = *(_QWORD *)(v6 + 24);
      if (v24 >= v23 >> 1)
      {
        v26 = OUTLINED_FUNCTION_34_5(v23);
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)v26, v24 + 1, 1);
        v22 = v38;
        v21 = v39;
        v6 = v29;
      }
      *(_QWORD *)(v6 + 16) = v24 + 1;
      v25 = v6 + 120 * v24;
      *(_QWORD *)(v25 + 32) = v36;
      v4 = v8 + 1;
      *(_OWORD *)(v25 + 40) = v22;
      *(_OWORD *)(v25 + 56) = v21;
      *(_QWORD *)(v25 + 72) = v9;
      *(_QWORD *)(v25 + 80) = v10;
      *(_QWORD *)(v25 + 88) = v11;
      *(_QWORD *)(v25 + 96) = v12;
      *(_BYTE *)(v25 + 104) = v35;
      *(_QWORD *)(v25 + 112) = v34;
      *(_QWORD *)(v25 + 120) = v13;
      *(_BYTE *)(v25 + 128) = v33;
      *(_QWORD *)(v25 + 136) = v32;
      *(_BYTE *)(v25 + 144) = v31;
      *(_BYTE *)(v25 + 145) = v14;
      v2 = v37;
      v5 = v28;
      if (v27 == v8)
        goto LABEL_34;
    }
  }
  v6 = MEMORY[0x24BEE4AF8];
LABEL_34:
  swift_bridgeObjectRelease();
  return v6;
}

_QWORD *static ConnectionPolicyRoute.groupedRoutesAndSortedByPriority(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *result;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;

  v1 = (_QWORD *)MEMORY[0x24BEE4B00];
  v51 = (_QWORD *)MEMORY[0x24BEE4B00];
  if (*(_QWORD *)(a1 + 16))
  {
    v49 = *(_QWORD *)(a1 + 16);
    v2 = swift_bridgeObjectRetain() + 72;
    while (1)
    {
      v3 = *(_QWORD *)(v2 - 32);
      v4 = *(_QWORD *)(v2 - 16);
      v39 = *(_QWORD *)(v2 - 40);
      v40 = *(_QWORD *)(v2 - 24);
      v5 = *(_QWORD *)(v2 + 8);
      v41 = *(_QWORD *)v2;
      v42 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      v43 = *(_BYTE *)(v2 + 32);
      v7 = *(_QWORD *)(v2 + 48);
      v44 = *(_QWORD *)(v2 + 40);
      v45 = *(_BYTE *)(v2 + 56);
      v46 = *(_QWORD *)(v2 + 64);
      v47 = *(_BYTE *)(v2 + 72);
      v48 = *(_BYTE *)(v2 + 73);
      v38 = *(_QWORD *)(v2 - 8);
      v8 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
      v10 = v1[2];
      v11 = (v9 & 1) == 0;
      v12 = v10 + v11;
      if (__OFADD__(v10, v11))
        break;
      v13 = v8;
      v14 = v9;
      v50 = v1;
      v15 = v1[3];
      OUTLINED_FUNCTION_8_6();
      OUTLINED_FUNCTION_9_10();
      OUTLINED_FUNCTION_34_4();
      OUTLINED_FUNCTION_62();
      OUTLINED_FUNCTION_12_6();
      if (v15 < v12)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, 1);
        v50 = v51;
        v16 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
        if ((v14 & 1) != (v17 & 1))
          goto LABEL_20;
        v13 = v16;
      }
      if ((v14 & 1) != 0)
      {
        v18 = v50[7];
        v19 = *(_QWORD *)(v18 + 8 * v13);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v18 + 8 * v13) = v19;
        v21 = v49;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          OUTLINED_FUNCTION_27_8();
          v21 = v19;
          v19 = v31;
          *(_QWORD *)(v18 + 8 * v13) = v31;
        }
        v23 = *(_QWORD *)(v19 + 16);
        v22 = *(_QWORD *)(v19 + 24);
        v24 = v23 + 1;
        v25 = v7;
        if (v23 >= v22 >> 1)
        {
          OUTLINED_FUNCTION_34_5(v22);
          v37 = v32;
          OUTLINED_FUNCTION_27_8();
          v24 = v37;
          v21 = v19;
          v19 = v33;
          v25 = v7;
          *(_QWORD *)(v18 + 8 * v13) = v33;
        }
        *(_QWORD *)(v19 + 16) = v24;
        v26 = v19 + 120 * v23;
        *(_QWORD *)(v26 + 32) = v39;
        *(_QWORD *)(v26 + 40) = v3;
        *(_QWORD *)(v26 + 48) = v40;
        *(_QWORD *)(v26 + 56) = v4;
        *(_QWORD *)(v26 + 64) = v38;
        *(_QWORD *)(v26 + 72) = v41;
        *(_QWORD *)(v26 + 80) = v5;
        *(_QWORD *)(v26 + 88) = v42;
        *(_QWORD *)(v26 + 96) = v6;
        *(_BYTE *)(v26 + 104) = v43;
        *(_QWORD *)(v26 + 112) = v44;
        *(_QWORD *)(v26 + 120) = v25;
        *(_BYTE *)(v26 + 128) = v45;
        *(_QWORD *)(v26 + 136) = v46;
        *(_BYTE *)(v26 + 144) = v47;
        *(_BYTE *)(v26 + 145) = v48;
        v1 = v50;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConnectionPolicyRoute>);
        v27 = swift_allocObject();
        *(_OWORD *)(v27 + 16) = xmmword_246F72C60;
        *(_QWORD *)(v27 + 32) = v39;
        *(_QWORD *)(v27 + 40) = v3;
        *(_QWORD *)(v27 + 48) = v40;
        *(_QWORD *)(v27 + 56) = v4;
        *(_QWORD *)(v27 + 64) = v38;
        *(_QWORD *)(v27 + 72) = v41;
        *(_QWORD *)(v27 + 80) = v5;
        *(_QWORD *)(v27 + 88) = v42;
        *(_QWORD *)(v27 + 96) = v6;
        *(_BYTE *)(v27 + 104) = v43;
        *(_QWORD *)(v27 + 112) = v44;
        *(_QWORD *)(v27 + 120) = v7;
        *(_BYTE *)(v27 + 128) = v45;
        *(_QWORD *)(v27 + 136) = v46;
        *(_BYTE *)(v27 + 144) = v47;
        *(_BYTE *)(v27 + 145) = v48;
        v1 = v50;
        v50[(v13 >> 6) + 8] |= 1 << v13;
        *(_QWORD *)(v50[6] + 8 * v13) = v38;
        *(_QWORD *)(v50[7] + 8 * v13) = v27;
        v28 = v50[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        v21 = v49;
        if (v29)
          goto LABEL_19;
        v50[2] = v30;
      }
      v2 += 120;
      v49 = v21 - 1;
      if (v21 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    result = (_QWORD *)swift_release();
    __break(1u);
  }
  else
  {
LABEL_17:
    v34 = OUTLINED_FUNCTION_4_15();
    v35 = specialized _copyCollectionToContiguousArray<A>(_:)(v34);
    swift_release();
    v51 = v35;
    specialized MutableCollection<>.sort(by:)(&v51);
    swift_release();
    return v51;
  }
  return result;
}

uint64_t static ConnectionPolicyRoute.prioritizedPOPRoutes(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  v2 = swift_bridgeObjectRetain() + 72;
  v3 = MEMORY[0x24BEE4AF8];
  do
  {
    v4 = *(_QWORD *)(v2 - 32);
    v5 = *(_QWORD *)(v2 - 16);
    v18 = *(_QWORD *)(v2 - 40);
    v19 = *(_QWORD *)(v2 - 24);
    v6 = *(_QWORD *)(v2 + 8);
    v20 = *(_QWORD *)(v2 - 8);
    v21 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 24);
    v22 = *(_QWORD *)(v2 + 16);
    v23 = *(_BYTE *)(v2 + 32);
    v24 = *(_QWORD *)(v2 + 40);
    v26 = *(_BYTE *)(v2 + 56);
    v27 = *(_QWORD *)(v2 + 64);
    v28 = *(_BYTE *)(v2 + 72);
    v8 = *(unsigned __int8 *)(v2 + 73);
    v25 = *(_QWORD *)(v2 + 48);
    if (v8 == 4)
    {
      v9 = *(_QWORD *)(v3 + 16);
      OUTLINED_FUNCTION_34_4();
      OUTLINED_FUNCTION_12_6();
      OUTLINED_FUNCTION_8_6();
      OUTLINED_FUNCTION_9_10();
      OUTLINED_FUNCTION_47_3();
      if (!OUTLINED_FUNCTION_8_11() || v9 >= *(_QWORD *)(v3 + 24) >> 1)
      {
        OUTLINED_FUNCTION_18_10();
        v3 = v10;
      }
      swift_arrayDestroy();
      v11 = *(_QWORD *)(v3 + 16);
      memmove((void *)(v3 + 152), (const void *)(v3 + 32), 120 * v11);
      *(_QWORD *)(v3 + 16) = v11 + 1;
      *(_QWORD *)(v3 + 32) = v18;
      *(_QWORD *)(v3 + 40) = v4;
      *(_QWORD *)(v3 + 48) = v19;
      *(_QWORD *)(v3 + 56) = v5;
      *(_QWORD *)(v3 + 64) = v20;
      *(_QWORD *)(v3 + 72) = v21;
      *(_QWORD *)(v3 + 80) = v6;
      *(_QWORD *)(v3 + 88) = v22;
      *(_QWORD *)(v3 + 96) = v7;
      *(_BYTE *)(v3 + 104) = v23;
      *(_QWORD *)(v3 + 112) = v24;
      *(_QWORD *)(v3 + 120) = v25;
      *(_BYTE *)(v3 + 128) = v26;
      *(_QWORD *)(v3 + 136) = v27;
      *(_BYTE *)(v3 + 144) = v28;
      *(_BYTE *)(v3 + 145) = 4;
    }
    else
    {
      OUTLINED_FUNCTION_34_4();
      OUTLINED_FUNCTION_12_6();
      OUTLINED_FUNCTION_8_6();
      OUTLINED_FUNCTION_9_10();
      OUTLINED_FUNCTION_47_3();
      if ((OUTLINED_FUNCTION_8_11() & 1) == 0)
      {
        OUTLINED_FUNCTION_18_10();
        v3 = v15;
      }
      v13 = *(_QWORD *)(v3 + 16);
      v12 = *(_QWORD *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        OUTLINED_FUNCTION_34_5(v12);
        OUTLINED_FUNCTION_18_10();
        v3 = v16;
      }
      *(_QWORD *)(v3 + 16) = v13 + 1;
      v14 = v3 + 120 * v13;
      *(_QWORD *)(v14 + 32) = v18;
      *(_QWORD *)(v14 + 40) = v4;
      *(_QWORD *)(v14 + 48) = v19;
      *(_QWORD *)(v14 + 56) = v5;
      *(_QWORD *)(v14 + 64) = v20;
      *(_QWORD *)(v14 + 72) = v21;
      *(_QWORD *)(v14 + 80) = v6;
      *(_QWORD *)(v14 + 88) = v22;
      *(_QWORD *)(v14 + 96) = v7;
      *(_BYTE *)(v14 + 104) = v23;
      *(_QWORD *)(v14 + 112) = v24;
      *(_QWORD *)(v14 + 120) = v25;
      *(_BYTE *)(v14 + 128) = v26;
      *(_QWORD *)(v14 + 136) = v27;
      *(_BYTE *)(v14 + 144) = v28;
      *(_BYTE *)(v14 + 145) = v8;
    }
    v2 += 120;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

SiriNetwork::ConnectionPolicyType __swiftcall ConnectionPolicyType.init(fromRawValue:)(Swift::String_optional fromRawValue)
{
  char *v1;
  char *v2;
  void *object;
  void *v4;
  BOOL v5;
  char v6;
  char v7;
  void *v8;
  char v10;
  void *v11;
  char v13;
  void *v14;
  char v16;

  v2 = v1;
  if (fromRawValue.value._object)
  {
    object = fromRawValue.value._object;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_44_4();
    v5 = v5 && v4 == object;
    if (v5)
    {
      OUTLINED_FUNCTION_44_1();
LABEL_10:
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      v7 = 1;
      goto LABEL_11;
    }
    v6 = OUTLINED_FUNCTION_4_23();
    OUTLINED_FUNCTION_6_1();
    if ((v6 & 1) != 0)
      goto LABEL_10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_44_4();
    if (v5 && v8 == object)
    {
      OUTLINED_FUNCTION_44_1();
LABEL_19:
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      v7 = 2;
      goto LABEL_11;
    }
    v10 = OUTLINED_FUNCTION_4_23();
    OUTLINED_FUNCTION_6_1();
    if ((v10 & 1) != 0)
      goto LABEL_19;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_44_4();
    if (v5 && v11 == object)
    {
      OUTLINED_FUNCTION_44_1();
LABEL_27:
      LOBYTE(fromRawValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      v7 = 3;
      goto LABEL_11;
    }
    v13 = OUTLINED_FUNCTION_4_23();
    OUTLINED_FUNCTION_6_1();
    if ((v13 & 1) != 0)
      goto LABEL_27;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_44_4();
    if (v5 && v14 == object)
    {
      OUTLINED_FUNCTION_44_1();
      LOBYTE(fromRawValue.value._countAndFlagsBits) = OUTLINED_FUNCTION_6_1();
      v7 = 4;
    }
    else
    {
      v16 = OUTLINED_FUNCTION_4_23();
      OUTLINED_FUNCTION_44_1();
      LOBYTE(fromRawValue.value._countAndFlagsBits) = OUTLINED_FUNCTION_6_1();
      if ((v16 & 1) != 0)
        v7 = 4;
      else
        v7 = 0;
    }
  }
  else
  {
    v7 = 0;
  }
LABEL_11:
  *v2 = v7;
  return fromRawValue.value._countAndFlagsBits;
}

SiriNetwork::ConnectionPolicyType_optional __swiftcall ConnectionPolicyType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (SiriNetwork::ConnectionPolicyType_optional)rawValue;
}

uint64_t ConnectionPolicyType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SiriNetwork::ConnectionPolicyType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionPolicyType(Swift::Int *a1)
{
  return ConnectionPolicyType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConnectionPolicyType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ConnectionPolicyType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t ConnectionPolicyProtocol.stringRawValue.getter()
{
  _BYTE *v0;
  uint64_t result;

  result = *v0;
  if (*v0)
    return OUTLINED_FUNCTION_31_3();
  return result;
}

SiriNetwork::ConnectionPolicyProtocol_optional __swiftcall ConnectionPolicyProtocol.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (SiriNetwork::ConnectionPolicyProtocol_optional)rawValue;
}

SiriNetwork::ConnectionPolicyProtocol_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ConnectionPolicyProtocol(Swift::Int *a1)
{
  return ConnectionPolicyProtocol.init(rawValue:)(*a1);
}

double static ConnectionPolicyRoute.maxTimeoutBetweenScheduledRoute.getter()
{
  return 5.0;
}

void ConnectionPolicyRoute.routeId.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionPolicyRoute.routeId.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionPolicyRoute.routeId.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionPolicyRoute.connectionId.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionPolicyRoute.connectionId.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionPolicyRoute.connectionId.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.priority.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ConnectionPolicyRoute.priority.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.priority.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.routeHost.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v8;
  Swift::Bool v9;

  v1 = v0[7];
  v2 = v0[8];
  if (v0[6])
  {
    v3 = v0[5];
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = OUTLINED_FUNCTION_4_12();
    if (String.hasSuffix(_:)(v4))
      return v3;
    v5._countAndFlagsBits = OUTLINED_FUNCTION_12_14();
    if (String.hasPrefix(_:)(v5))
      return v3;
    OUTLINED_FUNCTION_8_2();
  }
  if (v2 && (OUTLINED_FUNCTION_47_3(), v6._countAndFlagsBits = OUTLINED_FUNCTION_4_12(), !String.hasSuffix(_:)(v6)))
  {
    v8._countAndFlagsBits = OUTLINED_FUNCTION_12_14();
    v9 = String.hasPrefix(_:)(v8);
    OUTLINED_FUNCTION_11_7();
    if (!v9)
    {
      OUTLINED_FUNCTION_6_4();
      return 0;
    }
  }
  else
  {
    OUTLINED_FUNCTION_11_7();
  }
  return v1;
}

void ConnectionPolicyRoute.cname.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionPolicyRoute.cname.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionPolicyRoute.cname.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionPolicyRoute.host.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionPolicyRoute.host.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionPolicyRoute.host.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.mptcp.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t ConnectionPolicyRoute.mptcp.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 72) = result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.mptcp.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionPolicyRoute.resolver.getter()
{
  OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_3();
}

void ConnectionPolicyRoute.resolver.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_8_7();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v0;
  OUTLINED_FUNCTION_23_1();
}

uint64_t (*ConnectionPolicyRoute.resolver.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionPolicyRoute.resolverProtocol.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

_BYTE *ConnectionPolicyRoute.resolverProtocol.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = *result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.resolverProtocol.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

uint64_t ConnectionPolicyRoute.timeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t ConnectionPolicyRoute.timeout.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = result;
  *(_BYTE *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*ConnectionPolicyRoute.timeout.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void ConnectionPolicyRoute.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 113);
}

_BYTE *ConnectionPolicyRoute.type.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 113) = *result;
  return result;
}

uint64_t (*ConnectionPolicyRoute.type.modify())()
{
  return destructiveProjectEnumData for ConnectionConfigurationError;
}

void __swiftcall ConnectionPolicyRoute.init()(SiriNetwork::ConnectionPolicyRoute *__return_ptr retstr)
{
  retstr->host.value._object = 0;
  *(_OWORD *)&retstr->priority = 0u;
  *(_OWORD *)&retstr->cname.value._object = 0u;
  retstr->routeId = 0u;
  retstr->connectionId = 0u;
  retstr->mptcp = 1;
  retstr->resolver.value._countAndFlagsBits = 0;
  retstr->resolver.value._object = 0;
  retstr->resolverProtocol.value = SiriNetwork_ConnectionPolicyProtocol_unknownDefault;
  retstr->timeout.value = 0.0;
  *(_WORD *)&retstr->timeout.is_nil = 1281;
}

void ConnectionPolicyRoute.connectionPolicyRouteObject()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Class isa;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v17 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 80);
  v18 = *(unsigned __int8 *)(v0 + 96);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE811C0]), sel_init);
  if (v3)
    v3 = (void *)MEMORY[0x24956D034](v4, v3);
  objc_msgSend(v8, sel_setCname_, v3);

  if (v2)
  {
    v9 = MEMORY[0x24956D034](v1, v2);
    v10 = (void *)v9;
  }
  else
  {
    v10 = 0;
  }
  OUTLINED_FUNCTION_3_24(v9, sel_setConnectionId_);

  if (v6)
  {
    v11 = MEMORY[0x24956D034](v5, v6);
    v12 = (void *)v11;
  }
  else
  {
    v12 = 0;
  }
  OUTLINED_FUNCTION_3_24(v11, sel_setHost_);

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  OUTLINED_FUNCTION_3_24((uint64_t)isa, sel_setMptcp_);

  v14 = objc_msgSend(v8, sel_setPriority_, v17);
  if (v7)
  {
    v14 = (id)MEMORY[0x24956D034](v16, v7);
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  OUTLINED_FUNCTION_3_24((uint64_t)v14, sel_setResolver_);

  __asm { BR              X10 }
}

uint64_t sub_246F408D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16, uint64_t a17)
{
  double v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;

  v18 = OUTLINED_FUNCTION_31_3();
  v19 = (void *)MEMORY[0x24956D034](v18);
  v20 = OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_3_24(v20, sel_setResolverProtocol_);

  if (a14)
  {
    v21 = MEMORY[0x24956D034](a11);
    v22 = (void *)v21;
  }
  else
  {
    v22 = 0;
  }
  OUTLINED_FUNCTION_3_24(v21, sel_setRouteId_);

  if ((a16 & 1) == 0)
  {
    v23 = (void *)MEMORY[0x24956D190](v17);
    OUTLINED_FUNCTION_3_24((uint64_t)v23, sel_setTimeout_);

  }
  return ((uint64_t (*)())((char *)sub_246F40978 + 4 * byte_246F75079[a17]))();
}

uint64_t sub_246F40978()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_31_3();
  v2 = (void *)MEMORY[0x24956D034](v1);
  v3 = OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_3_24(v3, sel_setType_);

  return v0;
}

uint64_t ConnectionPolicyRoute.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *object;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t countAndFlagsBits;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  unint64_t v62;

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v32 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 64);
  v44 = *(unsigned __int8 *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 88);
  v41 = *(_QWORD *)(v0 + 56);
  v43 = *(_QWORD *)(v0 + 80);
  v36 = *(unsigned __int8 *)(v0 + 96);
  v37 = *(_QWORD *)(v0 + 104);
  v45 = *(_BYTE *)(v0 + 112);
  v39 = *(unsigned __int8 *)(v0 + 113);
  v46._countAndFlagsBits = 0x3A64496574756F72;
  v46._object = (void *)0xE900000000000020;
  v35 = *(_QWORD *)v0;
  if (v2)
  {
    v61 = v1;
    v62 = (unint64_t)v2;
    OUTLINED_FUNCTION_47_3();
    v9 = OUTLINED_FUNCTION_6_16();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_39_5(v9);
  OUTLINED_FUNCTION_135_1();
  countAndFlagsBits = v46._countAndFlagsBits;
  OUTLINED_FUNCTION_28_5();
  _StringGuts.grow(_:)(16);
  OUTLINED_FUNCTION_35_3();
  strcpy((char *)&v46, "connectionId: ");
  HIBYTE(v46._object) = -18;
  if (v3)
  {
    v61 = v4;
    v62 = v3;
    OUTLINED_FUNCTION_9_10();
    v10 = OUTLINED_FUNCTION_6_16();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_39_5(v10);
  OUTLINED_FUNCTION_135_1();
  v38 = v46._countAndFlagsBits;
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  OUTLINED_FUNCTION_135_1();
  v61 = 0x736F486574756F72;
  v62 = 0xEB00000000203A74;
  v46._countAndFlagsBits = v35;
  v46._object = v2;
  v47 = v4;
  v48 = v3;
  v49 = v5;
  v50 = v32;
  v51 = v6;
  v52 = v41;
  v53 = v7;
  v54 = v44;
  v55 = v43;
  v56 = v8;
  v57 = v36;
  v58 = v37;
  v59 = v45;
  v60 = v39;
  v12 = ConnectionPolicyRoute.routeHost.getter();
  if (v13)
  {
    v46._countAndFlagsBits = v12;
    v46._object = v13;
    v14 = String.init<A>(describing:)();
    v16 = v15;
  }
  else
  {
    v14 = OUTLINED_FUNCTION_1_4();
    v16 = 0xE700000000000000;
  }
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v14);
  OUTLINED_FUNCTION_201();
  v34 = v61;
  v46._countAndFlagsBits = 0x203A656D616E63;
  v46._object = (void *)0xE700000000000000;
  if (v6)
  {
    v61 = v32;
    v62 = v6;
    swift_bridgeObjectRetain();
    v18 = OUTLINED_FUNCTION_6_16();
  }
  else
  {
    v18 = OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_18_8(v18);
  OUTLINED_FUNCTION_6_4();
  v19 = v46._countAndFlagsBits;
  v46._countAndFlagsBits = 0x203A74736F68;
  v46._object = (void *)0xE600000000000000;
  if (v7)
  {
    v61 = v41;
    v62 = v7;
    swift_bridgeObjectRetain();
    v20 = OUTLINED_FUNCTION_6_16();
  }
  else
  {
    v20 = OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_10_16(v20);
  OUTLINED_FUNCTION_10_2();
  object = v46._object;
  v42 = v46._countAndFlagsBits;
  v46._countAndFlagsBits = 0x203A706374706DLL;
  v46._object = (void *)0xE700000000000000;
  if (v44)
    v22 = 1702195828;
  else
    v22 = 0x65736C6166;
  OUTLINED_FUNCTION_10_16(v22);
  OUTLINED_FUNCTION_10_2();
  v33 = v46._countAndFlagsBits;
  v46._countAndFlagsBits = 0x7265766C6F736572;
  v46._object = (void *)0xEA0000000000203ALL;
  if (v8)
  {
    v61 = v43;
    v62 = v8;
    OUTLINED_FUNCTION_34_4();
    v23 = OUTLINED_FUNCTION_6_16();
  }
  else
  {
    v23 = OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_40_4(v23);
  OUTLINED_FUNCTION_8_2();
  v24 = v46;
  OUTLINED_FUNCTION_28_5();
  _StringGuts.grow(_:)(20);
  OUTLINED_FUNCTION_35_3();
  v46._countAndFlagsBits = 0xD000000000000012;
  v46._object = (void *)0x8000000246F78CE0;
  if (v36 == 3)
  {
    v25 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    LOBYTE(v61) = v36;
    v25 = OUTLINED_FUNCTION_6_16();
  }
  OUTLINED_FUNCTION_10_16(v25);
  OUTLINED_FUNCTION_10_2();
  v26 = v46;
  v46._countAndFlagsBits = 0x3A74756F656D6974;
  v46._object = (void *)0xE900000000000020;
  if ((v45 & 1) != 0)
  {
    v27 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    v61 = v37;
    v27 = OUTLINED_FUNCTION_6_16();
  }
  OUTLINED_FUNCTION_10_16(v27);
  OUTLINED_FUNCTION_10_2();
  v28 = v46;
  v46._countAndFlagsBits = 0x203A65707974;
  v46._object = (void *)0xE600000000000000;
  if (v39 == 5)
  {
    v29 = OUTLINED_FUNCTION_1_4();
  }
  else
  {
    LOBYTE(v61) = v39;
    v29 = OUTLINED_FUNCTION_6_16();
  }
  OUTLINED_FUNCTION_40_4(v29);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_28_5();
  _StringGuts.grow(_:)(42);
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_0_40();
  OUTLINED_FUNCTION_43_4(v38);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_0_40();
  OUTLINED_FUNCTION_43_4(0x797469726F697270);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_0_40();
  OUTLINED_FUNCTION_43_4(v34);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_0_40();
  OUTLINED_FUNCTION_18_8(v19);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_0_40();
  v30._countAndFlagsBits = v42;
  v30._object = object;
  String.append(_:)(v30);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_0_40();
  OUTLINED_FUNCTION_18_8(v33);
  OUTLINED_FUNCTION_6_4();
  OUTLINED_FUNCTION_0_40();
  String.append(_:)(v24);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_0_40();
  String.append(_:)(v26);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_0_40();
  String.append(_:)(v28);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_0_40();
  OUTLINED_FUNCTION_39_5(v46._countAndFlagsBits);
  OUTLINED_FUNCTION_135_1();
  return countAndFlagsBits;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: [ConnectionPolicyRoute]));
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [ConnectionPolicyRoute]>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v9 = *(_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v11;
    v31 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & v9;
    v32 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    if ((v12 & v9) == 0)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    for (i = v15 | (v8 << 6); ; i = __clz(__rbit64(v18)) + (v8 << 6))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v14 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v25) = v20;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v25) = v21;
      ++*(_QWORD *)(v7 + 16);
      if (v13)
        goto LABEL_6;
LABEL_7:
      v17 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_40;
      if (v17 >= v32)
        goto LABEL_32;
      v18 = v10[v17];
      ++v8;
      if (!v18)
      {
        v8 = v17 + 1;
        if (v17 + 1 >= v32)
          goto LABEL_32;
        v18 = v10[v8];
        if (!v18)
        {
          v19 = v17 + 2;
          if (v19 >= v32)
          {
LABEL_32:
            if ((a2 & 1) != 0)
            {
              if (v31 >= 64)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, v32, (_QWORD *)(v5 + 64));
              else
                *v10 = v30;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v18 = v10[v19];
          if (!v18)
          {
            while (1)
            {
              v8 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_41;
              if (v8 >= v32)
                goto LABEL_32;
              v18 = v10[v8];
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          v8 = v19;
        }
      }
LABEL_18:
      v13 = (v18 - 1) & v18;
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: [ConnectionPolicyRoute])>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : UInt64].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Swift::Int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return result;
    }
    goto LABEL_124;
  }
  v5 = result;
  result = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v89 = a1;
  v90 = result;
  v94 = v6;
  v92 = v3;
  if (v3 <= 0)
  {
    v9 = MEMORY[0x24BEE4AF8];
    v32 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v32 < 2)
    {
LABEL_101:
      result = swift_bridgeObjectRelease();
      if (v92 >= -1)
      {
        *(_QWORD *)(v90 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    v81 = *v89;
    while (1)
    {
      v82 = v32 - 2;
      if (v32 < 2)
        break;
      if (!v81)
        goto LABEL_133;
      v83 = *(_QWORD *)(v9 + 32 + 16 * v82);
      v84 = *(_QWORD *)(v9 + 32 + 16 * (v32 - 1) + 8);
      result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v81 + 16 * v83), (char *)(v81 + 16 * *(_QWORD *)(v9 + 32 + 16 * (v32 - 1))), v81 + 16 * v84, v94);
      if (v1)
        goto LABEL_86;
      if (v84 < v83)
        goto LABEL_119;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        v9 = result;
      }
      if (v82 >= *(_QWORD *)(v9 + 16))
        goto LABEL_120;
      v85 = (_QWORD *)(v9 + 32 + 16 * v82);
      *v85 = v83;
      v85[1] = v84;
      v86 = *(_QWORD *)(v9 + 16);
      if (v32 > v86)
        goto LABEL_121;
      result = (uint64_t)memmove((void *)(v9 + 32 + 16 * (v32 - 1)), (const void *)(v9 + 32 + 16 * v32), 16 * (v86 - v32));
      *(_QWORD *)(v9 + 16) = v86 - 1;
      v32 = v86 - 1;
      if (v86 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return result;
  }
  v7 = 0;
  v8 = *a1;
  v87 = *a1 - 16;
  v88 = *a1 + 32;
  v9 = MEMORY[0x24BEE4AF8];
  v91 = v5;
  v93 = *a1;
  while (1)
  {
    v10 = v7++;
    if (v7 < v3)
    {
      v11 = *(_QWORD *)(v8 + 16 * v7);
      v12 = 16 * v10;
      v13 = *(_QWORD *)(v8 + 16 * v10);
      v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        v14 = (uint64_t *)(v88 + 16 * v10);
        v15 = v11;
        while (1)
        {
          v17 = *v14;
          v14 += 2;
          v16 = v17;
          if (v13 < v11 == v15 >= v17)
            break;
          ++v7;
          v15 = v16;
          if (v7 >= v3)
          {
            v7 = v3;
            break;
          }
        }
      }
      if (v13 < v11)
      {
        if (v7 < v10)
          goto LABEL_126;
        if (v10 < v7)
        {
          v18 = 16 * v7;
          v19 = v7;
          v20 = v10;
          do
          {
            if (v20 != --v19)
            {
              if (!v8)
                goto LABEL_132;
              v21 = v8 + v18;
              v22 = *(_QWORD *)(v8 + v12);
              v23 = *(_QWORD *)(v8 + v12 + 8);
              *(_OWORD *)(v8 + v12) = *(_OWORD *)(v8 + v18 - 16);
              *(_QWORD *)(v21 - 16) = v22;
              *(_QWORD *)(v21 - 8) = v23;
            }
            ++v20;
            v18 -= 16;
            v12 += 16;
          }
          while (v20 < v19);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10))
        goto LABEL_123;
      if (v7 - v10 < v5)
      {
        v24 = v10 + v5;
        if (__OFADD__(v10, v5))
          goto LABEL_127;
        if (v24 >= v3)
          v24 = v3;
        if (v24 < v10)
          goto LABEL_128;
        if (v7 != v24)
        {
          v25 = v87 + 16 * v7;
          do
          {
            v26 = *(_QWORD *)(v8 + 16 * v7);
            v27 = v10;
            v28 = v25;
            do
            {
              if (*(_QWORD *)v28 >= v26)
                break;
              if (!v8)
                goto LABEL_130;
              v29 = *(_QWORD *)(v28 + 24);
              *(_OWORD *)(v28 + 16) = *(_OWORD *)v28;
              *(_QWORD *)v28 = v26;
              *(_QWORD *)(v28 + 8) = v29;
              v28 -= 16;
              ++v27;
            }
            while (v7 != v27);
            ++v7;
            v25 += 16;
          }
          while (v7 != v24);
          v7 = v24;
        }
      }
    }
    if (v7 < v10)
      goto LABEL_122;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
      v9 = result;
    }
    v31 = *(_QWORD *)(v9 + 16);
    v30 = *(_QWORD *)(v9 + 24);
    v32 = v31 + 1;
    v8 = v93;
    if (v31 >= v30 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, (char *)v9);
      v8 = v93;
      v9 = result;
    }
    *(_QWORD *)(v9 + 16) = v32;
    v33 = v9 + 32;
    v34 = (Swift::Int *)(v9 + 32 + 16 * v31);
    *v34 = v10;
    v34[1] = v7;
    if (v31)
      break;
    v32 = 1;
LABEL_81:
    v5 = v91;
    v3 = v92;
    if (v7 >= v92)
      goto LABEL_90;
  }
  while (1)
  {
    v35 = v32 - 1;
    if (v32 >= 4)
    {
      v40 = v33 + 16 * v32;
      v41 = *(_QWORD *)(v40 - 64);
      v42 = *(_QWORD *)(v40 - 56);
      v46 = __OFSUB__(v42, v41);
      v43 = v42 - v41;
      if (v46)
        goto LABEL_107;
      v45 = *(_QWORD *)(v40 - 48);
      v44 = *(_QWORD *)(v40 - 40);
      v46 = __OFSUB__(v44, v45);
      v38 = v44 - v45;
      v39 = v46;
      if (v46)
        goto LABEL_108;
      v47 = v32 - 2;
      v48 = (uint64_t *)(v33 + 16 * (v32 - 2));
      v50 = *v48;
      v49 = v48[1];
      v46 = __OFSUB__(v49, v50);
      v51 = v49 - v50;
      if (v46)
        goto LABEL_109;
      v46 = __OFADD__(v38, v51);
      v52 = v38 + v51;
      if (v46)
        goto LABEL_111;
      if (v52 >= v43)
      {
        v70 = (uint64_t *)(v33 + 16 * v35);
        v72 = *v70;
        v71 = v70[1];
        v46 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v46)
          goto LABEL_117;
        v63 = v38 < v73;
        goto LABEL_70;
      }
    }
    else
    {
      if (v32 != 3)
      {
        v64 = *(_QWORD *)(v9 + 32);
        v65 = *(_QWORD *)(v9 + 40);
        v46 = __OFSUB__(v65, v64);
        v57 = v65 - v64;
        v58 = v46;
        goto LABEL_64;
      }
      v37 = *(_QWORD *)(v9 + 32);
      v36 = *(_QWORD *)(v9 + 40);
      v46 = __OFSUB__(v36, v37);
      v38 = v36 - v37;
      v39 = v46;
    }
    if ((v39 & 1) != 0)
      goto LABEL_110;
    v47 = v32 - 2;
    v53 = (uint64_t *)(v33 + 16 * (v32 - 2));
    v55 = *v53;
    v54 = v53[1];
    v56 = __OFSUB__(v54, v55);
    v57 = v54 - v55;
    v58 = v56;
    if (v56)
      goto LABEL_112;
    v59 = (uint64_t *)(v33 + 16 * v35);
    v61 = *v59;
    v60 = v59[1];
    v46 = __OFSUB__(v60, v61);
    v62 = v60 - v61;
    if (v46)
      goto LABEL_114;
    if (__OFADD__(v57, v62))
      goto LABEL_116;
    if (v57 + v62 >= v38)
    {
      v63 = v38 < v62;
LABEL_70:
      if (v63)
        v35 = v47;
      goto LABEL_72;
    }
LABEL_64:
    if ((v58 & 1) != 0)
      goto LABEL_113;
    v66 = (uint64_t *)(v33 + 16 * v35);
    v68 = *v66;
    v67 = v66[1];
    v46 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v46)
      goto LABEL_115;
    if (v69 < v57)
      goto LABEL_81;
LABEL_72:
    v74 = v9;
    v75 = v35 - 1;
    if (v35 - 1 >= v32)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8)
      goto LABEL_131;
    v76 = (uint64_t *)(v33 + 16 * v75);
    v77 = *v76;
    v78 = (_QWORD *)(v33 + 16 * v35);
    v79 = v78[1];
    result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 16 * *v76), (char *)(v8 + 16 * *v78), v8 + 16 * v79, v94);
    if (v1)
      break;
    if (v79 < v77)
      goto LABEL_104;
    if (v35 > *(_QWORD *)(v74 + 16))
      goto LABEL_105;
    *v76 = v77;
    *(_QWORD *)(v33 + 16 * v75 + 8) = v79;
    v80 = *(_QWORD *)(v74 + 16);
    if (v35 >= v80)
      goto LABEL_106;
    v9 = v74;
    v32 = v80 - 1;
    result = (uint64_t)memmove((void *)(v33 + 16 * v35), v78 + 2, 16 * (v80 - 1 - v35));
    *(_QWORD *)(v74 + 16) = v80 - 1;
    v8 = v93;
    if (v80 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  result = swift_bridgeObjectRelease();
  if (v92 < -1)
    goto LABEL_125;
  *(_QWORD *)(v90 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 16 * a3 - 16;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 16 * a3);
      v7 = result;
      v8 = v5;
      do
      {
        if (*(_QWORD *)v8 >= v6)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)v8;
        *(_QWORD *)v8 = v6;
        *(_QWORD *)(v8 + 8) = v9;
        v8 -= 16;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 16;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  BOOL v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_39;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = v6 - 16;
      if (*((_QWORD *)v6 - 2) >= *((_QWORD *)v12 - 2))
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = v12 - 16;
        v12 -= 16;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 16;
        if (!v21)
          goto LABEL_35;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_35:
      v18 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (*(_QWORD *)v4 >= *(_QWORD *)v6)
    {
      v14 = v4;
      v15 = v7 == v4;
      v4 += 16;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v14 = v6;
    v15 = v7 == v6;
    v6 += 16;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_OWORD *)v7 = *(_OWORD *)v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 16, v6);
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  return OUTLINED_FUNCTION_64();
}

unint64_t lazy protocol witness table accessor for type ConnectionPolicyType and conformance ConnectionPolicyType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionPolicyType and conformance ConnectionPolicyType;
  if (!lazy protocol witness table cache variable for type ConnectionPolicyType and conformance ConnectionPolicyType)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionPolicyType, &type metadata for ConnectionPolicyType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionPolicyType and conformance ConnectionPolicyType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConnectionPolicyProtocol and conformance ConnectionPolicyProtocol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionPolicyProtocol and conformance ConnectionPolicyProtocol;
  if (!lazy protocol witness table cache variable for type ConnectionPolicyProtocol and conformance ConnectionPolicyProtocol)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionPolicyProtocol, &type metadata for ConnectionPolicyProtocol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionPolicyProtocol and conformance ConnectionPolicyProtocol);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionPolicyType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionPolicyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_246F41ED0 + 4 * byte_246F75084[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_246F41F04 + 4 * byte_246F7507F[v4]))();
}

uint64_t sub_246F41F04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F41F0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246F41F14);
  return result;
}

uint64_t sub_246F41F20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246F41F28);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_246F41F2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F41F34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ConnectionPolicyType()
{
  OUTLINED_FUNCTION_8_12();
}

uint64_t storeEnumTagSinglePayload for ConnectionPolicyProtocol(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_246F41F98 + 4 * byte_246F7508E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_246F41FCC + 4 * byte_246F75089[v4]))();
}

uint64_t sub_246F41FCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F41FD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x246F41FDCLL);
  return result;
}

uint64_t sub_246F41FE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x246F41FF0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_246F41FF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_246F41FFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ConnectionPolicyProtocol()
{
  OUTLINED_FUNCTION_8_12();
}

uint64_t destroy for ConnectionPolicyRoute()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConnectionPolicyRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConnectionPolicyRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v4 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v4;
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  return a1;
}

void *__swift_memcpy114_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x72uLL);
}

uint64_t assignWithTake for ConnectionPolicyRoute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionPolicyRoute(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 114))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionPolicyRoute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 114) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 114) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for ConnectionPolicyRoute()
{
  OUTLINED_FUNCTION_8_12();
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void OUTLINED_FUNCTION_0_40()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

id OUTLINED_FUNCTION_3_24(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_4_23()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_6_16()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_10_16(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_12_14()
{
  return 3028785;
}

uint64_t OUTLINED_FUNCTION_16_13(uint64_t a1, SEL *a2)
{
  void *v2;

  return outlined bridged method (pb) of @objc SAConnectionPolicyRoute.routeId.getter(v2, a2);
}

void OUTLINED_FUNCTION_18_10()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_21_10()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_22_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_27_8()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL OUTLINED_FUNCTION_34_5@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_35_3()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_38_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_39_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_40_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_43_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void NetworkManager.addObserver(_:)(uint64_t a1)
{
  NetworkManager.addObserver(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v2 = v1;
  v4 = OUTLINED_FUNCTION_18();
  v5 = OUTLINED_FUNCTION_4_0(v4);
  MEMORY[0x24BDAC7A8](v5);
  v10 = OUTLINED_FUNCTION_0_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_3_0();
  v6 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  v7 = OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  v8 = OUTLINED_FUNCTION_6();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = a1;
  OUTLINED_FUNCTION_34_3();
  v9 = v6;
  OUTLINED_FUNCTION_83();
  swift_unknownObjectRetain();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_10();
}

uint64_t sub_246F42694()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in NetworkManager.addObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v3 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x24956E090](v3);
  if (result)
  {
    v5 = (void *)result;
    v6[0] = a2;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManagerObserver);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v10[0] = v7;
      v10[1] = v8;
      v11 = v9;
      outlined init with copy of AnyHashable((uint64_t)v10, (uint64_t)v6);
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((uint64_t)&v7, (uint64_t)v6);
      outlined destroy of AnyHashable((uint64_t)&v7);
      swift_endAccess();

      return outlined destroy of AnyHashable((uint64_t)v10);
    }
    else
    {
      v9 = 0;
      v7 = 0u;
      v8 = 0u;

      return outlined destroy of AnyHashable?((uint64_t)&v7);
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in NetworkManager.addObserver(_:)()
{
  uint64_t v0;

  return closure #1 in NetworkManager.addObserver(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

void NetworkManager.removeObserver(_:)(uint64_t a1)
{
  NetworkManager.addObserver(_:)(a1);
}

void sub_246F4292C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;

  _Block_release(v23);

  OUTLINED_FUNCTION_2_1();
  (*(void (**)(uint64_t, _QWORD))(v20 + 8))(v21, *(_QWORD *)(v24 - 152));
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkManager.removeObserver(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x24956E090](v1);
  if (v2)
  {
    v3 = (char *)v2;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkManagerObserver);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8[0] = v5;
      v8[1] = v6;
      v9 = v7;
      swift_beginAccess();
      specialized Set._Variant.remove(_:)((uint64_t)v8, (uint64_t)&v5);
      outlined destroy of AnyHashable?((uint64_t)&v5);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)v8);
    }
    else
    {
      v7 = 0;
      v5 = 0u;
      v6 = 0u;
      outlined destroy of AnyHashable?((uint64_t)&v5);
    }
    v4 = &v3[OBJC_IVAR___SNNetworkManagerInternal_observers];
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
      objc_msgSend(v3, sel_stopMonitoringNetwork);

  }
}

uint64_t objectdestroy_2Tm_1()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.removeObserver(_:)()
{
  uint64_t v0;

  closure #1 in NetworkManager.removeObserver(_:)(*(_QWORD *)(v0 + 16));
}

void @objc NetworkManager.addObserver(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_unknownObjectRetain();
  a1;
  a4(a3);
  JUMPOUT(0x246F42B1CLL);
}

Swift::Void __swiftcall NetworkManager.startMonitoringNetwork(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = OUTLINED_FUNCTION_18();
  v6 = OUTLINED_FUNCTION_4_0(v5);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_8_8();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_3_0();
  v8 = *(void **)(v2 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  v9 = OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  v10 = (_QWORD *)OUTLINED_FUNCTION_6();
  v10[2] = v9;
  v10[3] = countAndFlagsBits;
  v10[4] = object;
  OUTLINED_FUNCTION_34_3();
  v11 = v8;
  OUTLINED_FUNCTION_83();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_0_26();
  OUTLINED_FUNCTION_3_10();
}

void sub_246F42C5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  const void *v21;

  _Block_release(v21);

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkManager.startMonitoringNetwork(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t evaluator_for_endpoint;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  uint64_t aBlock[6];

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = (char *)MEMORY[0x24956E090](v5);
  if (v6)
  {
    v7 = v6;
    if (*(_QWORD *)&v6[OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator])
    {

    }
    else
    {
      if (one-time initialization token for siriNetwork != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
      swift_bridgeObjectRetain_n();
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        aBlock[0] = v12;
        *(_DWORD *)v11 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_246EC7000, v9, v10, "NetworkManager - PathEvaluator: Start monitoring network %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24956E018](v12, -1, -1);
        MEMORY[0x24956E018](v11, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v13 = String.utf8CString.getter();
      nw_endpoint_create_host((const char *)(v13 + 32), "443");
      swift_release();
      evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
      v15 = *(void **)&v7[OBJC_IVAR___SNNetworkManagerInternal_queue];
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v7;
      aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in NetworkManager.startMonitoringNetwork(_:);
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_path?) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_27_0;
      v17 = _Block_copy(aBlock);
      v18 = v15;
      v19 = v7;
      swift_release();
      nw_path_evaluator_set_update_handler();
      _Block_release(v17);

      NetworkManager.pathEvaluator.setter(evaluator_for_endpoint);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_246F42F64()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in NetworkManager.startMonitoringNetwork(_:)()
{
  uint64_t v0;

  closure #1 in NetworkManager.startMonitoringNetwork(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void closure #1 in closure #1 in NetworkManager.startMonitoringNetwork(_:)(NSObject *a1)
{
  NSObject *v2;
  nw_path_status_t status;
  Swift::Bool v4;

  if (a1)
  {
    v2 = swift_unknownObjectRetain();
    status = nw_path_get_status(v2);
    v4 = nw_path_uses_interface_type(a1, nw_interface_type_cellular);
    swift_unknownObjectRelease();
  }
  else
  {
    v4 = 0;
    status = nw_path_status_invalid;
  }
  NetworkManager.pathUpdated(status:usesCellular:)(status, v4);
}

Swift::Void __swiftcall NetworkManager.pathUpdated(status:usesCellular:)(nw_path_status_t status, Swift::Bool usesCellular)
{
  char *v2;
  char *v3;
  int64_t v4;
  nw_path_status_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v2;
  v4 = usesCellular;
  v5 = status;
  v6 = OBJC_IVAR___SNNetworkManagerInternal_pathStatus;
  v7 = &OBJC_IVAR___SNNetworkManagerInternal_pathUsesCellular;
  if (*(_DWORD *)&v2[OBJC_IVAR___SNNetworkManagerInternal_pathStatus] == status
    && v2[OBJC_IVAR___SNNetworkManagerInternal_pathUsesCellular] == usesCellular)
  {
    return;
  }
  if (one-time initialization token for siriNetwork != -1)
    goto LABEL_101;
LABEL_4:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriNetwork);
  v9 = v3;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    *(_DWORD *)v12 = 67109888;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 1024;
    OUTLINED_FUNCTION_9_19();
    *(_WORD *)(v12 + 14) = 1024;
    OUTLINED_FUNCTION_9_19();
    *(_WORD *)(v12 + 20) = 1024;
    v7 = &OBJC_IVAR___SNNetworkManagerInternal_pathUsesCellular;
    OUTLINED_FUNCTION_9_19();

    _os_log_impl(&dword_246EC7000, v10, v11, "NetworkManager - PathEvaluator: Path updated, status %u from %u, usesCellular %{BOOL}d from %{BOOL}d", (uint8_t *)v12, 0x1Au);
    MEMORY[0x24956E018](v12, -1, -1);

  }
  else
  {

  }
  v13 = *v7;
  v14 = v9[*v7];
  v15 = *(_DWORD *)&v3[v6];
  if (v15 == 3)
  {
    if (v5 == nw_path_status_satisfiable)
    {
      if (v14 & 1 | ((v4 & 1) == 0))
        goto LABEL_92;
      OUTLINED_FUNCTION_18_11();
LABEL_44:
      HIDWORD(v38) = v16;
LABEL_47:
      v7 = (uint64_t *)v9;
      OUTLINED_FUNCTION_10_17();
      OUTLINED_FUNCTION_0_41();
      v28 = 0;
      v5 = 40;
      while (1)
      {
        if (v3)
        {
          OUTLINED_FUNCTION_15_16();
        }
        else
        {
          v30 = v28 + 1;
          if (__OFADD__(v28, 1))
          {
            __break(1u);
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          if (v30 >= v4)
            goto LABEL_66;
          ++v28;
          if (!*(_QWORD *)(v6 + 8 * v30))
          {
            v28 = v30 + 1;
            if (v30 + 1 >= v4)
              goto LABEL_66;
            if (!*(_QWORD *)(v6 + 8 * v28))
            {
              v28 = v30 + 2;
              if (v30 + 2 >= v4)
                goto LABEL_66;
              if (!*(_QWORD *)(v6 + 8 * v28))
              {
                v31 = v30 + 3;
                if (v31 >= v4)
                {
LABEL_66:
                  OUTLINED_FUNCTION_78_0();
                  v3 = (char *)v39;
                  v13 = v40;
                  v5 = v42;
                  v4 = HIDWORD(v42);
                  v6 = v41;
                  v9 = (char *)v7;
                  v17 = v43;
                  if ((v38 & 0x100000000) == 0)
                    goto LABEL_92;
LABEL_69:
                  if (v17)
                    goto LABEL_92;
                  goto LABEL_70;
                }
                if (!*(_QWORD *)(v6 + 8 * v31))
                {
                  while (1)
                  {
                    v28 = v31 + 1;
                    if (__OFADD__(v31, 1))
                      break;
                    if (v28 >= v4)
                      goto LABEL_66;
                    ++v31;
                    if (*(_QWORD *)(v6 + 8 * v28))
                      goto LABEL_63;
                  }
LABEL_98:
                  __break(1u);
                  goto LABEL_99;
                }
                v28 = v31;
              }
            }
          }
LABEL_63:
          OUTLINED_FUNCTION_16_14();
        }
        OUTLINED_FUNCTION_11_16(v29, v38, v39, v40, v41, v42, v43, (uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, v52);
        OUTLINED_FUNCTION_3_25();
        v32 = OUTLINED_FUNCTION_8_18();
        if ((v32 & 1) != 0)
        {
          OUTLINED_FUNCTION_24_8(v32, sel_networkManagerLostNonWWANConnectivity_);
          OUTLINED_FUNCTION_23_8();
        }
      }
    }
    v17 = v5 == nw_path_status_satisfied;
    if (!v9[*v7])
    {
      if ((v4 & 1) == 0)
        goto LABEL_69;
      OUTLINED_FUNCTION_22_9();
      v16 = 1;
      goto LABEL_44;
    }
    if ((v4 & 1) != 0)
      goto LABEL_69;
    if (v5 != nw_path_status_satisfied)
    {
LABEL_70:
      v40 = v13;
      v41 = v6;
      v42 = __PAIR64__(v4, v5);
      v39 = (uint64_t)v3;
      v7 = (uint64_t *)v9;
      OUTLINED_FUNCTION_10_17();
      OUTLINED_FUNCTION_0_41();
      v33 = 0;
      v5 = 40;
      while (1)
      {
        if (v3)
        {
          OUTLINED_FUNCTION_15_16();
        }
        else
        {
          v35 = v33 + 1;
          if (__OFADD__(v33, 1))
            goto LABEL_97;
          if (v35 >= v4)
          {
LABEL_89:
            OUTLINED_FUNCTION_78_0();
            v3 = (char *)v39;
            v5 = v42;
            LOBYTE(v4) = BYTE4(v42);
            v6 = v41;
            v9 = (char *)v7;
            goto LABEL_91;
          }
          ++v33;
          if (!*(_QWORD *)(v6 + 8 * v35))
          {
            v33 = v35 + 1;
            if (v35 + 1 >= v4)
              goto LABEL_89;
            if (!*(_QWORD *)(v6 + 8 * v33))
            {
              v33 = v35 + 2;
              if (v35 + 2 >= v4)
                goto LABEL_89;
              if (!*(_QWORD *)(v6 + 8 * v33))
              {
                v36 = v35 + 3;
                if (v36 >= v4)
                  goto LABEL_89;
                if (!*(_QWORD *)(v6 + 8 * v36))
                {
                  while (1)
                  {
                    v33 = v36 + 1;
                    if (__OFADD__(v36, 1))
                      break;
                    if (v33 >= v4)
                      goto LABEL_89;
                    ++v36;
                    if (*(_QWORD *)(v6 + 8 * v33))
                      goto LABEL_86;
                  }
LABEL_99:
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  swift_once();
                  goto LABEL_4;
                }
                v33 = v36;
              }
            }
          }
LABEL_86:
          OUTLINED_FUNCTION_16_14();
        }
        OUTLINED_FUNCTION_11_16(v34, v38, v39, v40, v41, v42, v43, (uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, v52);
        OUTLINED_FUNCTION_3_25();
        v37 = OUTLINED_FUNCTION_8_18();
        if ((v37 & 1) != 0)
        {
          OUTLINED_FUNCTION_24_8(v37, sel_networkManagerNetworkUnreachable_);
          OUTLINED_FUNCTION_23_8();
        }
      }
    }
LABEL_21:
    v40 = *v7;
    v41 = v6;
    v42 = __PAIR64__(v4, v5);
    v43 = (uint64_t)v9;
    v18 = &v9[OBJC_IVAR___SNNetworkManagerInternal_observers];
    OUTLINED_FUNCTION_10_17();
    v19 = *(_QWORD *)v18;
    v6 = v19 + 56;
    v20 = 1 << *(_BYTE *)(v19 + 32);
    v21 = -1;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    v22 = v21 & *(_QWORD *)(v19 + 56);
    v4 = (unint64_t)(v20 + 63) >> 6;
    swift_bridgeObjectRetain();
    v7 = 0;
    v5 = 40;
    while (1)
    {
      if (v22)
      {
        v23 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        v24 = v23 | ((_QWORD)v7 << 6);
      }
      else
      {
        v25 = (int64_t)v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_100;
        if (v25 >= v4)
        {
LABEL_90:
          OUTLINED_FUNCTION_78_0();
          v5 = v42;
          LOBYTE(v4) = BYTE4(v42);
          v6 = v41;
          v9 = (char *)v43;
LABEL_91:
          v13 = v40;
          goto LABEL_92;
        }
        v26 = *(_QWORD *)(v6 + 8 * v25);
        v7 = (uint64_t *)((char *)v7 + 1);
        if (!v26)
        {
          v7 = (uint64_t *)(v25 + 1);
          if (v25 + 1 >= v4)
            goto LABEL_90;
          v26 = *(_QWORD *)(v6 + 8 * (_QWORD)v7);
          if (!v26)
          {
            v7 = (uint64_t *)(v25 + 2);
            if (v25 + 2 >= v4)
              goto LABEL_90;
            v26 = *(_QWORD *)(v6 + 8 * (_QWORD)v7);
            if (!v26)
            {
              v27 = (uint64_t *)(v25 + 3);
              if ((uint64_t)v27 >= v4)
                goto LABEL_90;
              v26 = *(_QWORD *)(v6 + 8 * (_QWORD)v27);
              if (!v26)
              {
                while (1)
                {
                  v7 = (uint64_t *)((char *)v27 + 1);
                  if (__OFADD__(v27, 1))
                    break;
                  if ((uint64_t)v7 >= v4)
                    goto LABEL_90;
                  v26 = *(_QWORD *)(v6 + 8 * (_QWORD)v7);
                  v27 = (uint64_t *)((char *)v27 + 1);
                  if (v26)
                    goto LABEL_39;
                }
                __break(1u);
                return;
              }
              v7 = v27;
            }
          }
        }
LABEL_39:
        v22 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + ((_QWORD)v7 << 6);
      }
      OUTLINED_FUNCTION_11_16(v24, v38, v39, v40, v41, v42, v43, (uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, v52);
      OUTLINED_FUNCTION_3_25();
      if ((OUTLINED_FUNCTION_8_18() & 1) != 0)
      {
        objc_msgSend(v44, sel_networkManagerNonWWANDidBecomeAvailable_, v43);
        OUTLINED_FUNCTION_23_8();
      }
    }
  }
  if (v5 == nw_path_status_satisfiable)
  {
    if (v14 & 1 | ((v4 & 1) == 0))
      goto LABEL_92;
    HIDWORD(v38) = v15 == 1;
    OUTLINED_FUNCTION_18_11();
    goto LABEL_47;
  }
  v17 = v5 == nw_path_status_satisfied;
  if ((v9[*v7] & 1) == 0)
  {
    if ((v4 & 1) != 0)
    {
      HIDWORD(v38) = v15 == 1;
      OUTLINED_FUNCTION_22_9();
      goto LABEL_47;
    }
LABEL_68:
    if (v15 != 1)
      goto LABEL_92;
    goto LABEL_69;
  }
  if ((v4 & 1) != 0)
    goto LABEL_68;
  if (v5 == nw_path_status_satisfied)
    goto LABEL_21;
  if (v15 == 1)
    goto LABEL_70;
LABEL_92:
  *(_DWORD *)&v3[v6] = v5;
  v9[v13] = v4 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_nw_path?) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_246F436B0()
{
  void *v0;

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall NetworkManager.stopMonitoringNetwork()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v3 = OUTLINED_FUNCTION_18();
  v4 = OUTLINED_FUNCTION_4_0(v3);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_8_8();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_3_0();
  v6 = *(void **)(v0 + OBJC_IVAR___SNNetworkManagerInternal_queue);
  OUTLINED_FUNCTION_6();
  swift_unknownObjectWeakInit();
  v7 = OUTLINED_FUNCTION_34_3();
  v8 = v6;
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_0_26();
  MEMORY[0x24956D244](0, v2, v1, v7);
  _Block_release(v7);

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_1_1();
}

void closure #1 in NetworkManager.stopMonitoringNetwork()(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (char *)MEMORY[0x24956E090](v1);
  if (v2)
  {
    v3 = v2;
    if (*(_QWORD *)&v2[OBJC_IVAR___SNNetworkManagerInternal_pathEvaluator])
    {
      v4 = one-time initialization token for siriNetwork;
      swift_unknownObjectRetain();
      if (v4 != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.siriNetwork);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_246EC7000, v6, v7, "NetworkManager - PathEvaluator: Stop monitoring network", v8, 2u);
        MEMORY[0x24956E018](v8, -1, -1);
      }

      nw_path_evaluator_cancel();
      NetworkManager.pathEvaluator.setter(0);

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

void partial apply for closure #1 in NetworkManager.stopMonitoringNetwork()()
{
  uint64_t v0;

  closure #1 in NetworkManager.stopMonitoringNetwork()(v0);
}

uint64_t sub_246F4397C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in NetworkManager.startMonitoringNetwork(_:)(NSObject *a1)
{
  closure #1 in closure #1 in NetworkManager.startMonitoringNetwork(_:)(a1);
}

uint64_t outlined destroy of AnyHashable?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_41()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_3_25()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_9_19()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_10_17()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_11_16@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  return outlined init with copy of AnyHashable(*(_QWORD *)(v16 + 48) + a1 * v17, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_23_8()
{
  return swift_unknownObjectRelease();
}

id OUTLINED_FUNCTION_24_8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

void ConnectionInfo.__allocating_init(connectionConfiguration:)(const void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  ConnectionInfo.init(connectionConfiguration:)(a1);
  OUTLINED_FUNCTION_3();
}

void key path setter for ConnectionInfo.connectionConfiguration : ConnectionInfo(void *__src)
{
  _QWORD __dst[65];

  memcpy(__dst, __src, 0x204uLL);
  outlined retain of ConnectionConfiguration(__dst);
  ConnectionInfo.connectionConfiguration.setter();
}

void ConnectionInfo.connectionConfiguration.getter(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _QWORD v4[65];

  v3 = (const void *)(v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration);
  swift_beginAccess();
  OUTLINED_FUNCTION_28(v4, v3);
  OUTLINED_FUNCTION_28(a1, v3);
  outlined retain of ConnectionConfiguration(v4);
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.connectionConfiguration.setter()
{
  uint64_t v0;
  const void *v1;
  void *v2;
  const void *v3;
  _QWORD v4[65];

  v1 = (const void *)(v0 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration);
  OUTLINED_FUNCTION_0_42();
  OUTLINED_FUNCTION_28(v4, v1);
  v2 = (void *)OUTLINED_FUNCTION_33_4();
  OUTLINED_FUNCTION_28(v2, v3);
  outlined release of ConnectionConfiguration(v4);
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.connectionConfiguration.modify()
{
  swift_beginAccess();
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.policy.getter()
{
  OUTLINED_FUNCTION_30_5(OBJC_IVAR___SNConnectionInfoInternal_policy);
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.policy.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_25_9(a1, OBJC_IVAR___SNConnectionInfoInternal_policy);
}

void ConnectionInfo.policyRoute.getter()
{
  OUTLINED_FUNCTION_30_5(OBJC_IVAR___SNConnectionInfoInternal_policyRoute);
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.policyRoute.setter(uint64_t a1)
{
  OUTLINED_FUNCTION_25_9(a1, OBJC_IVAR___SNConnectionInfoInternal_policyRoute);
}

id ConnectionInfo.init(connectionConfiguration:)(const void *a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR___SNConnectionInfoInternal_policy] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___SNConnectionInfoInternal_policyRoute] = 0;
  OUTLINED_FUNCTION_28(&v1[OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration], a1);
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for ConnectionInfo();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for ConnectionInfo()
{
  return objc_opt_self();
}

id ConnectionInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ConnectionInfo.init()()
{
  char *v0;
  char *v1;
  int v2;
  char *v3;
  objc_super v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  *(_QWORD *)&v0[OBJC_IVAR___SNConnectionInfoInternal_policy] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___SNConnectionInfoInternal_policyRoute] = 0;
  v1 = v0;
  v2 = AFIsInternalInstall();
  if (v2)
    LOBYTE(v2) = _AFPreferencesShouldUseTFO();
  v13 = 1;
  v12 = 1;
  v11 = 1;
  v10 = 1;
  v9 = 1;
  v8 = 1;
  v7 = 1;
  v6 = 1;
  v3 = &v1[OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration];
  *(int64x2_t *)v3 = vdupq_n_s64(1uLL);
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_DWORD *)v3 + 24) = 1;
  *((_QWORD *)v3 + 13) = 0;
  *(_DWORD *)(v3 + 111) = 0;
  *((_QWORD *)v3 + 15) = 0;
  v3[128] = v13;
  *(int64x2_t *)(v3 + 136) = vdupq_n_s64(0x4056800000000000uLL);
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  v3[200] = v2;
  v3[201] = 1;
  *((_QWORD *)v3 + 26) = 0;
  v3[216] = v12;
  *((_QWORD *)v3 + 28) = 0;
  v3[232] = v11;
  *((_QWORD *)v3 + 30) = 0;
  v3[248] = v10;
  *((_QWORD *)v3 + 32) = 0;
  v3[264] = v9;
  *((_QWORD *)v3 + 34) = 0;
  v3[280] = v8;
  *((_QWORD *)v3 + 36) = 0;
  v3[296] = v7;
  *((_QWORD *)v3 + 38) = 0;
  v3[312] = v6;
  v3[313] = 0;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_QWORD *)v3 + 50) = 0;
  *((_QWORD *)v3 + 51) = 1;
  *((_DWORD *)v3 + 128) = 0;
  *((_OWORD *)v3 + 30) = 0u;
  *((_OWORD *)v3 + 31) = 0u;
  *((_OWORD *)v3 + 28) = 0u;
  *((_OWORD *)v3 + 29) = 0u;
  *((_OWORD *)v3 + 26) = 0u;
  *((_OWORD *)v3 + 27) = 0u;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ConnectionInfo();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t ConnectionInfo.connectionProtocolTechnology.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  return v3;
}

void ConnectionInfo.connectionProtocolTechnology.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  if (a1 == 2)
    v2 = 2;
  else
    v2 = 1;
  v3 = (uint64_t *)(v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration);
  OUTLINED_FUNCTION_1_32();
  *v3 = v2;
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.connectionProtocolTechnology.modify()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_34_6();
  OUTLINED_FUNCTION_26_7(v1);
  OUTLINED_FUNCTION_17_13();
  v0[65] = *v0;
  OUTLINED_FUNCTION_23_1();
}

void ConnectionInfo.connectionProtocolTechnology.modify(uint64_t a1, uint64_t a2)
{
  ConnectionInfo.connectionProtocolTechnology.modify(a1, a2, ConnectionInfo.connectionProtocolTechnology.setter);
}

uint64_t ConnectionInfo.communicationProtocolTechnology.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  return v3;
}

void ConnectionInfo.communicationProtocolTechnology.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1 == 2)
    v2 = 2;
  else
    v2 = 1;
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_1_32();
  *(_QWORD *)(v3 + 8) = v2;
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.communicationProtocolTechnology.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_34_6();
  OUTLINED_FUNCTION_26_7(v1);
  OUTLINED_FUNCTION_17_13();
  *(_QWORD *)(v0 + 520) = *(_QWORD *)(v0 + 8);
  OUTLINED_FUNCTION_23_1();
}

void ConnectionInfo.communicationProtocolTechnology.modify(uint64_t a1, uint64_t a2)
{
  ConnectionInfo.connectionProtocolTechnology.modify(a1, a2, ConnectionInfo.communicationProtocolTechnology.setter);
}

void ConnectionInfo.connectionProtocolTechnology.modify(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  void *v3;

  v3 = *(void **)a1;
  a3(*(_QWORD *)(*(_QWORD *)a1 + 520));
  free(v3);
}

void ConnectionInfo.assistantIdentifier.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  v1 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.assistantIdentifier.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.assistantIdentifier.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_24_9(a1);
  ConnectionInfo.assistantIdentifier.getter(v2);
  *v1 = v3;
  v1[1] = v4;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.assistantIdentifier.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_18();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_23_1();
  }
}

void ConnectionInfo.peerAssistantIdentifier.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  v1 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.peerAssistantIdentifier.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.peerAssistantIdentifier.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_24_9(a1);
  ConnectionInfo.peerAssistantIdentifier.getter(v2);
  *v1 = v3;
  v1[1] = v4;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.peerAssistantIdentifier.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

uint64_t ConnectionInfo.connectionId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int16 v64;
  char v65;
  char v66;
  _OWORD v67[3];
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  char v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int16 v117;
  char v118;
  char v119;

  ConnectionInfo.connectionConfiguration.getter(v67);
  v0 = v68;
  v1 = v69;
  v8 = v108;
  v2 = v109;
  v3 = v110;
  v4 = v111;
  v12 = v113;
  v13 = v112;
  v10 = v115;
  v11 = v114;
  v9 = v116;
  v6 = v117;
  if (v109 == 1 || !v111)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7 = v0;
  }
  else
  {
    OUTLINED_FUNCTION_4_15();
    v7 = v3;
  }
  v15 = v0;
  v16 = v1;
  v19 = v72;
  v20 = v73;
  v21 = v74;
  v22 = v75;
  v23 = v76;
  v24 = v77;
  v25 = v78;
  v26 = v79;
  v27 = v80;
  v28 = v81;
  v29 = v82;
  v30 = v83;
  v31 = v84;
  v32 = v85;
  v33 = v86;
  v34 = v87;
  v35 = v88;
  v36 = v89;
  v37 = v90;
  v38 = v91;
  v39 = v92;
  v40 = v93;
  v42 = v95;
  v41 = v94;
  v43 = v96;
  v44 = v97;
  v46 = v99;
  v48 = v101;
  v45 = v98;
  v47 = v100;
  v49 = v102;
  v55 = v8;
  v56 = v2;
  v57 = v3;
  v58 = v4;
  v64 = v6;
  v65 = v118;
  v66 = v119;
  v14[0] = v67[0];
  v14[1] = v67[1];
  v14[2] = v67[2];
  v17 = v70;
  v18 = v71;
  v50 = v103;
  v51 = v104;
  v52 = v105;
  v53 = v106;
  v54 = v107;
  v59 = v13;
  v60 = v12;
  v61 = v11;
  v62 = v10;
  v63 = v9;
  outlined release of ConnectionConfiguration(v14);
  return v7;
}

void ConnectionInfo.connectionId.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 56) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.connectionId.modify(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_24_9(a1);
  *v1 = ConnectionInfo.connectionId.getter();
  v1[1] = v2;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.connectionId.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

void ConnectionInfo.aceHost.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  v1 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.aceHost.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 64) = v2;
  *(_QWORD *)(v3 + 72) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.aceHost.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_24_9(a1);
  ConnectionInfo.aceHost.getter(v2);
  *v1 = v3;
  v1[1] = v4;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.aceHost.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

void ConnectionInfo.languageCode.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  v1 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.languageCode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 80) = v2;
  *(_QWORD *)(v3 + 88) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.languageCode.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_24_9(a1);
  ConnectionInfo.languageCode.getter(v2);
  *v1 = v3;
  v1[1] = v4;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.languageCode.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

void ConnectionInfo.prefersWWAN.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.prefersWWAN.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 96) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.prefersWWAN.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 96);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 96) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

void ConnectionInfo.skipPeer.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.skipPeer.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 97) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.skipPeer.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 97);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 97) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

void ConnectionInfo.useWiFiHint.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.useWiFiHint.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 98) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.useWiFiHint.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 98);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 98) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

void ConnectionInfo.skipPeerErrorReason.getter()
{
  id v0;
  id v1[66];

  ConnectionInfo.connectionConfiguration.getter(v1);
  v0 = v1[13];
  outlined release of ConnectionConfiguration(v1);
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.skipPeerErrorReason.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  v4 = *(void **)(v3 + 104);
  *(_QWORD *)(v3 + 104) = a1;

  OUTLINED_FUNCTION_4();
}

void key path setter for ConnectionInfo.skipPeerErrorReason : ConnectionInfo(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  ConnectionInfo.skipPeerErrorReason.setter((uint64_t)v1);
}

void ConnectionInfo.skipPeerErrorReason.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  ConnectionInfo.skipPeerErrorReason.getter();
  *a1 = v3;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.skipPeerErrorReason.modify(uint64_t *a1, char a2)
{
  void *v2;
  id v3;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    ConnectionInfo.skipPeerErrorReason.setter((uint64_t)v2);

  }
  else
  {
    ConnectionInfo.skipPeerErrorReason.setter(*a1);
    OUTLINED_FUNCTION_3();
  }
}

void ConnectionInfo.forceReconnect.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.forceReconnect.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 113) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.forceReconnect.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 113);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 113) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

double ConnectionInfo.timeout.getter(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  char v4;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  result = v3;
  if (v4)
    return 0.0;
  return result;
}

uint64_t ConnectionInfo.timeout.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  result = OUTLINED_FUNCTION_1_32();
  *(double *)(v3 + 120) = a1;
  *(_BYTE *)(v3 + 128) = 0;
  return result;
}

void ConnectionInfo.timeout.modify(double **a1)
{
  uint64_t v1;
  double *v3;

  v3 = (double *)malloc(0x40uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 7) = v1;
  v3[6] = ConnectionInfo.timeout.getter((uint64_t)v3);
  OUTLINED_FUNCTION_23_1();
}

void ConnectionInfo.timeout.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 56) + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 120) = v2;
  *(_BYTE *)(v3 + 128) = 0;
  OUTLINED_FUNCTION_2_26(v1);
}

void ConnectionInfo.imposePolicyBan.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.imposePolicyBan.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 313) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.imposePolicyBan.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 313);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 313) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

void ConnectionInfo.connectionPolicy.setter(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v3 = a1;
  ConnectionInfo.policy.setter((uint64_t)a1);
  v4 = v3;
  ConnectionPolicy.init(from:)(a1, (uint64_t)&v23);
  v5 = v23;
  v6 = v25;
  v21 = v26;
  v22 = v24;
  v7 = v27;
  v20 = v28;
  v8 = v29;
  v9 = (_QWORD *)(v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration);
  OUTLINED_FUNCTION_0_42();
  v10 = v9[40];
  v11 = v9[41];
  v12 = v9[42];
  v13 = v9[43];
  v14 = v9[44];
  v15 = v9[45];
  v16 = v9[46];
  v17 = v9[47];
  v18 = v9[48];
  v19 = v9[49];
  v9[40] = v5;
  *(_OWORD *)(v9 + 41) = v22;
  v9[43] = v6;
  *((_OWORD *)v9 + 22) = v21;
  v9[46] = v7;
  *(_OWORD *)(v9 + 47) = v20;
  v9[49] = v8;
  outlined consume of ConnectionPolicy?(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);

}

void key path setter for ConnectionInfo.connectionPolicy : ConnectionInfo(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  ConnectionInfo.connectionPolicy.setter(v1);
}

void ConnectionInfo.connectionPolicy.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + OBJC_IVAR___SNConnectionInfoInternal_policy);
  *a1 = v2;
  a1[1] = v1;
  v3 = v2;
  OUTLINED_FUNCTION_33_4();
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.connectionPolicy.modify(void **a1, char a2)
{
  ConnectionInfo.connectionPolicy.modify(a1, a2, ConnectionInfo.connectionPolicy.setter);
}

void ConnectionInfo.connectionPolicyRoute.setter(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v3 = a1;
  ConnectionInfo.policyRoute.setter((uint64_t)a1);
  v4 = v3;
  ConnectionPolicyRoute.init(from:)(a1, (uint64_t)&v19);
  v5 = v19;
  v6 = v21;
  v17 = v22;
  v18 = v20;
  v7 = v23;
  v8 = v25;
  v15 = v26;
  v16 = v24;
  v9 = v27;
  v10 = v28;
  v11 = v29;
  v12 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  v13 = *(_QWORD *)(v12 + 400);
  v14 = *(_QWORD *)(v12 + 408);
  *(_QWORD *)(v12 + 400) = v5;
  *(_OWORD *)(v12 + 408) = v18;
  *(_QWORD *)(v12 + 424) = v6;
  *(_OWORD *)(v12 + 432) = v17;
  *(_QWORD *)(v12 + 448) = v7;
  *(_OWORD *)(v12 + 456) = v16;
  *(_QWORD *)(v12 + 472) = v8;
  *(_OWORD *)(v12 + 480) = v15;
  *(_QWORD *)(v12 + 496) = v9;
  *(_QWORD *)(v12 + 504) = v10;
  *(_WORD *)(v12 + 512) = v11;
  outlined consume of ConnectionPolicyRoute?(v13, v14);

}

void key path setter for ConnectionInfo.connectionPolicyRoute : ConnectionInfo(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  ConnectionInfo.connectionPolicyRoute.setter(v1);
}

void ConnectionInfo.connectionPolicyRoute.modify(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + OBJC_IVAR___SNConnectionInfoInternal_policyRoute);
  *a1 = v2;
  a1[1] = v1;
  v3 = v2;
  OUTLINED_FUNCTION_33_4();
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.connectionPolicyRoute.modify(void **a1, char a2)
{
  ConnectionInfo.connectionPolicy.modify(a1, a2, ConnectionInfo.connectionPolicyRoute.setter);
}

void ConnectionInfo.connectionPolicy.modify(void **a1, char a2, void (*a3)(void *))
{
  void *v4;
  id v5;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v5 = v4;
    a3(v4);
    OUTLINED_FUNCTION_0_12(v5);
  }
  else
  {
    a3(*a1);
  }
}

void ConnectionInfo.forceOnDeviceOnlyDictation.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.forceOnDeviceOnlyDictation.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 114) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.forceOnDeviceOnlyDictation.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 114);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 114) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

void ConnectionInfo.productTypePrefix.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  v1 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.productTypePrefix.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 152) = v2;
  *(_QWORD *)(v3 + 160) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.productTypePrefix.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_24_9(a1);
  ConnectionInfo.productTypePrefix.getter(v2);
  *v1 = v3;
  v1[1] = v4;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.productTypePrefix.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

void ConnectionInfo.peerType.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  v1 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_85();
}

void ConnectionInfo.peerType.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 168) = v2;
  *(_QWORD *)(v3 + 176) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void ConnectionInfo.peerType.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_24_9(a1);
  ConnectionInfo.peerType.getter(v2);
  *v1 = v3;
  v1[1] = v4;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.peerType.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

id @objc ConnectionInfo.assistantIdentifier.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  a3();
  v6 = v5;

  if (v6)
  {
    v7 = OUTLINED_FUNCTION_33_4();
    v8 = (void *)MEMORY[0x24956D034](v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

void ConnectionInfo.peerVersion.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  v1 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_16_15();
  OUTLINED_FUNCTION_85();
}

void @objc ConnectionInfo.assistantIdentifier.setter(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = a1;
  a4(v6, v8);
  OUTLINED_FUNCTION_0_12(v9);
}

void ConnectionInfo.peerVersion.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_7();
  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_QWORD *)(v3 + 184) = v2;
  *(_QWORD *)(v3 + 192) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_22();
}

void key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo()
{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_2_18();
  OUTLINED_FUNCTION_23_1();
}

void ConnectionInfo.peerVersion.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_24_9(a1);
  ConnectionInfo.peerVersion.getter(v2);
  *v1 = v3;
  v1[1] = v4;
  OUTLINED_FUNCTION_3();
}

void ConnectionInfo.peerVersion.modify(uint64_t a1, char a2)
{
  ConnectionInfo.assistantIdentifier.modify(a1, a2);
}

void ConnectionInfo.deviceIsInWalkaboutExperimentGroup.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.deviceIsInWalkaboutExperimentGroup.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 514) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.deviceIsInWalkaboutExperimentGroup.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 514);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 514) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

void ConnectionInfo.usesProxyConnection.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.usesProxyConnection.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 99) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.usesProxyConnection.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 99);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 99) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

void ConnectionInfo.usesPeerManagedSync.getter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_20(a1);
  OUTLINED_FUNCTION_8_19(v1);
  OUTLINED_FUNCTION_18_12();
}

void ConnectionInfo.usesPeerManagedSync.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___SNConnectionInfoInternal_connectionConfiguration;
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v3 + 515) = a1;
  OUTLINED_FUNCTION_4();
}

void ConnectionInfo.usesPeerManagedSync.modify()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_3_26(v1);
  OUTLINED_FUNCTION_17_13();
  *(_BYTE *)(v0 + 516) = *(_BYTE *)(v0 + 515);
  OUTLINED_FUNCTION_23_1();
}

{
  void *v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_12_15();
  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_0_42();
  *(_BYTE *)(v1 + 515) = v2;
  OUTLINED_FUNCTION_2_26(v0);
}

id ConnectionInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConnectionInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_246F45D94(void *a1@<X8>)
{
  ConnectionInfo.connectionConfiguration.getter(a1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45DB4()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  *v0 = ConnectionInfo.connectionProtocolTechnology.getter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45DD4(uint64_t *a1)
{
  ConnectionInfo.connectionProtocolTechnology.setter(*a1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45DF4()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  *v0 = ConnectionInfo.communicationProtocolTechnology.getter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45E14(uint64_t *a1)
{
  ConnectionInfo.communicationProtocolTechnology.setter(*a1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45E34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.assistantIdentifier.getter(v1);
  *v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_3();
}

void sub_246F45E54()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F45E70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.peerAssistantIdentifier.getter(v1);
  *v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_3();
}

void sub_246F45E90()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F45EAC()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  *v0 = ConnectionInfo.connectionId.getter();
  v0[1] = v1;
  OUTLINED_FUNCTION_3();
}

void sub_246F45ECC()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F45EE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.aceHost.getter(v1);
  *v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_3();
}

void sub_246F45F08()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F45F24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.languageCode.getter(v1);
  *v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_3();
}

void sub_246F45F44()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F45F60()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.prefersWWAN.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45F80(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.prefersWWAN.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45F9C()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.skipPeer.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45FBC(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.skipPeer.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45FD8()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.useWiFiHint.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F45FF8(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.useWiFiHint.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46014()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.skipPeerErrorReason.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_3();
}

void sub_246F46038()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.forceReconnect.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46058(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.forceReconnect.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46074()
{
  double *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  *v0 = ConnectionInfo.timeout.getter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46094(double *a1)
{
  ConnectionInfo.timeout.setter(*a1);
  OUTLINED_FUNCTION_3();
}

void sub_246F460B4()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.imposePolicyBan.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F460D4(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.imposePolicyBan.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F460F0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.policy.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_3();
}

void sub_246F46114()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.policyRoute.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_3();
}

void sub_246F46138()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.forceOnDeviceOnlyDictation.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46158(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.forceOnDeviceOnlyDictation.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46174()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.productTypePrefix.getter(v1);
  *v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_3();
}

void sub_246F46194()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F461B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.peerType.getter(v1);
  *v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_3();
}

void sub_246F461D0()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F461EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.peerVersion.getter(v1);
  *v0 = v2;
  v0[1] = v3;
  OUTLINED_FUNCTION_3();
}

void sub_246F4620C()
{
  key path setter for ConnectionInfo.assistantIdentifier : ConnectionInfo();
}

void sub_246F46228()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.deviceIsInWalkaboutExperimentGroup.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46248(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.deviceIsInWalkaboutExperimentGroup.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46264()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.usesProxyConnection.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F46284(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.usesProxyConnection.setter(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F462A0()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_6_9();
  ConnectionInfo.usesPeerManagedSync.getter(v0);
  OUTLINED_FUNCTION_20_12(v1);
  OUTLINED_FUNCTION_3();
}

void sub_246F462C0(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_19_12(a1);
  ConnectionInfo.usesPeerManagedSync.setter(v1);
  OUTLINED_FUNCTION_3();
}

uint64_t method lookup function for ConnectionInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConnectionInfo.connectionConfiguration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionConfiguration.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionConfiguration.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConnectionInfo.__allocating_init(connectionConfiguration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionProtocolTechnology.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionProtocolTechnology.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionProtocolTechnology.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ConnectionInfo.communicationProtocolTechnology.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of ConnectionInfo.communicationProtocolTechnology.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of ConnectionInfo.communicationProtocolTechnology.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of ConnectionInfo.assistantIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of ConnectionInfo.assistantIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of ConnectionInfo.assistantIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of ConnectionInfo.peerAssistantIdentifier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of ConnectionInfo.peerAssistantIdentifier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ConnectionInfo.peerAssistantIdentifier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ConnectionInfo.aceHost.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ConnectionInfo.aceHost.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ConnectionInfo.aceHost.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ConnectionInfo.languageCode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of ConnectionInfo.languageCode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of ConnectionInfo.languageCode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of ConnectionInfo.prefersWWAN.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of ConnectionInfo.prefersWWAN.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of ConnectionInfo.prefersWWAN.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of ConnectionInfo.skipPeer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of ConnectionInfo.skipPeer.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of ConnectionInfo.skipPeer.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of ConnectionInfo.useWiFiHint.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ConnectionInfo.useWiFiHint.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ConnectionInfo.useWiFiHint.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ConnectionInfo.skipPeerErrorReason.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ConnectionInfo.skipPeerErrorReason.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ConnectionInfo.skipPeerErrorReason.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ConnectionInfo.forceReconnect.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ConnectionInfo.forceReconnect.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ConnectionInfo.forceReconnect.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ConnectionInfo.timeout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ConnectionInfo.timeout.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ConnectionInfo.timeout.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ConnectionInfo.imposePolicyBan.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ConnectionInfo.imposePolicyBan.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ConnectionInfo.imposePolicyBan.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionPolicy.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionPolicy.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionPolicy.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionPolicyRoute.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionPolicyRoute.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of ConnectionInfo.connectionPolicyRoute.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of ConnectionInfo.forceOnDeviceOnlyDictation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of ConnectionInfo.forceOnDeviceOnlyDictation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ConnectionInfo.forceOnDeviceOnlyDictation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of ConnectionInfo.productTypePrefix.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of ConnectionInfo.productTypePrefix.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x258))();
}

uint64_t dispatch thunk of ConnectionInfo.productTypePrefix.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of ConnectionInfo.peerType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of ConnectionInfo.peerType.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of ConnectionInfo.peerType.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of ConnectionInfo.peerVersion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x280))();
}

uint64_t dispatch thunk of ConnectionInfo.peerVersion.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ConnectionInfo.peerVersion.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of ConnectionInfo.deviceIsInWalkaboutExperimentGroup.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x298))();
}

uint64_t dispatch thunk of ConnectionInfo.deviceIsInWalkaboutExperimentGroup.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ConnectionInfo.deviceIsInWalkaboutExperimentGroup.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ConnectionInfo.usesProxyConnection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ConnectionInfo.usesProxyConnection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ConnectionInfo.usesProxyConnection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of ConnectionInfo.usesPeerManagedSync.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of ConnectionInfo.usesPeerManagedSync.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ConnectionInfo.usesPeerManagedSync.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2D8))();
}

uint64_t OUTLINED_FUNCTION_0_42()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_1_32()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_2_26(void *a1)
{
  free(a1);
}

void OUTLINED_FUNCTION_3_26(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = a1;
  a1[71] = v2;
  ConnectionInfo.connectionConfiguration.getter(a1);
}

_QWORD *OUTLINED_FUNCTION_8_19(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return outlined release of ConnectionConfiguration((uint64_t *)va);
}

void OUTLINED_FUNCTION_9_20(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  ConnectionInfo.connectionConfiguration.getter(va);
}

void *OUTLINED_FUNCTION_11_17()
{
  return malloc(0x240uLL);
}

uint64_t OUTLINED_FUNCTION_16_15()
{
  uint64_t v0;

  return v0;
}

_QWORD *OUTLINED_FUNCTION_17_13()
{
  _QWORD *v0;

  return outlined release of ConnectionConfiguration(v0);
}

uint64_t OUTLINED_FUNCTION_19_12(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t OUTLINED_FUNCTION_20_12(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_24_9(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 16) = v1;
  return result;
}

void OUTLINED_FUNCTION_25_9(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v3 = *(void **)(v2 + a2);
  *(_QWORD *)(v2 + a2) = a1;

}

void OUTLINED_FUNCTION_26_7(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = a1;
  a1[66] = v2;
  ConnectionInfo.connectionConfiguration.getter(a1);
}

id OUTLINED_FUNCTION_30_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(id *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  uint64_t v0;

  return v0;
}

void *OUTLINED_FUNCTION_34_6()
{
  return malloc(0x218uLL);
}

uint64_t static SNUtilities.createUserAgentString(fromProductTypePrefix:)(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_bridgeObjectRetain();
  v3 = (id)AFProductType();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_246F752F0;
  swift_bridgeObjectRetain();
  v8 = (id)AFDeviceName();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
  v13 = lazy protocol witness table accessor for type String and conformance String();
  v14 = v13;
  *(_QWORD *)(v7 + 64) = v13;
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  if (!a2)
  {
    v17 = (uint64_t *)(v7 + 72);
    *(_QWORD *)(v7 + 96) = v12;
    *(_QWORD *)(v7 + 104) = v13;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = specialized StringProtocol.appending<A>(_:)();
  v16 = v15;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_44_1();
  v17 = (uint64_t *)(v7 + 72);
  *(_QWORD *)(v7 + 96) = v12;
  *(_QWORD *)(v7 + 104) = v14;
  if (!v16)
  {
LABEL_5:
    *v17 = v4;
    v16 = v6;
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_44_1();
  *v17 = v9;
LABEL_6:
  *(_QWORD *)(v7 + 80) = v16;
  v18 = (id)AFProductName();
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_0_43();
  *(_QWORD *)(v7 + 136) = v12;
  *(_QWORD *)(v7 + 144) = v14;
  *(_QWORD *)(v7 + 112) = v16;
  *(_QWORD *)(v7 + 120) = v9;
  v19 = (id)AFProductVersion();
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_0_43();
  *(_QWORD *)(v7 + 176) = v12;
  *(_QWORD *)(v7 + 184) = v14;
  *(_QWORD *)(v7 + 152) = v16;
  *(_QWORD *)(v7 + 160) = v9;
  v20 = (id)AFBuildVersion();
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_0_43();
  *(_QWORD *)(v7 + 216) = v12;
  *(_QWORD *)(v7 + 224) = v14;
  *(_QWORD *)(v7 + 192) = v16;
  *(_QWORD *)(v7 + 200) = v9;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v7 + 256) = v12;
  *(_QWORD *)(v7 + 264) = v14;
  *(_QWORD *)(v7 + 232) = v21;
  *(_QWORD *)(v7 + 240) = v22;
  v23 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_44_1();
  return v23;
}

uint64_t specialized StringProtocol.appending<A>(_:)()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  v1 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  return v1;
}

SNUtilities __swiftcall SNUtilities.init()()
{
  return (SNUtilities)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id SNUtilities.init()()
{
  objc_super v1;

  v1.super_class = (Class)SNUtilities;
  return objc_msgSendSuper2(&v1, sel_init);
}

unint64_t type metadata accessor for SNUtilities()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SNUtilities;
  if (!lazy cache variable for type metadata for SNUtilities)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SNUtilities);
  }
  return result;
}

void OUTLINED_FUNCTION_0_43()
{
  void *v0;

}

uint64_t ConnectionPolicy.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt64 v10;
  int v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt v15;
  Swift::UInt64 v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = v1;
  v4 = *(_BYTE *)(v2 + 16);
  v5 = *(_BYTE *)(v2 + 17);
  v6 = *(_BYTE *)(v2 + 18);
  v7 = *(_BYTE *)(v2 + 19);
  v8 = *(_BYTE *)(v2 + 20);
  v9 = *(_BYTE *)(v2 + 21);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(unsigned __int8 *)(v2 + 32);
  v15 = *(_QWORD *)(v2 + 40);
  v16 = *(_QWORD *)(v2 + 56);
  v18 = *(unsigned __int8 *)(v2 + 48);
  v19 = *(unsigned __int8 *)(v2 + 64);
  v17 = *(_QWORD *)(v2 + 72);
  if (*(_QWORD *)(v2 + 8))
  {
    OUTLINED_FUNCTION_1_29();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_2_22();
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v11)
  {
    OUTLINED_FUNCTION_2_22();
  }
  else
  {
    OUTLINED_FUNCTION_1_29();
    if ((v10 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v10;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  if (v18)
  {
    OUTLINED_FUNCTION_2_22();
  }
  else
  {
    OUTLINED_FUNCTION_1_29();
    Hasher._combine(_:)(v15);
  }
  if (v19)
  {
    OUTLINED_FUNCTION_2_22();
  }
  else
  {
    OUTLINED_FUNCTION_1_29();
    if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v13 = v16;
    else
      v13 = 0;
    Hasher._combine(_:)(v13);
  }
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v17);
  return swift_bridgeObjectRelease();
}

void static ConnectionPolicy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  double v6;
  char v7;
  uint64_t v8;
  char v9;
  double v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  int v18;
  uint64_t v19;
  int v20;
  double v21;
  int v22;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 17);
  v6 = *(double *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_BYTE *)(a1 + 48);
  v10 = *(double *)(a1 + 56);
  v11 = *(_BYTE *)(a1 + 64);
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(unsigned __int8 *)(a2 + 16);
  v14 = *(unsigned __int8 *)(a2 + 17);
  v15 = *(unsigned __int8 *)(a2 + 18);
  v16 = *(unsigned __int8 *)(a2 + 19);
  v17 = *(double *)(a2 + 24);
  v18 = *(unsigned __int8 *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v20 = *(unsigned __int8 *)(a2 + 48);
  v21 = *(double *)(a2 + 56);
  v22 = *(unsigned __int8 *)(a2 + 64);
  if (!v3)
  {
    if (!v12)
      goto LABEL_16;
LABEL_38:
    OUTLINED_FUNCTION_2_27();
    return;
  }
  if (!v12)
    goto LABEL_38;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v12)
  {
LABEL_16:
    if (v4 != v13
      || ((v5 ^ v14) & 1) != 0
      || ((*(unsigned __int8 *)(a1 + 18) ^ v15) & 1) != 0
      || ((*(unsigned __int8 *)(a1 + 19) ^ v16) & 1) != 0
      || ((*(unsigned __int8 *)(a1 + 20) ^ *(unsigned __int8 *)(a2 + 20)) & 1) != 0
      || ((*(unsigned __int8 *)(a1 + 21) ^ *(unsigned __int8 *)(a2 + 21)) & 1) != 0)
    {
      goto LABEL_38;
    }
    goto LABEL_22;
  }
  v38 = *(unsigned __int8 *)(a2 + 32);
  v39 = *(unsigned __int8 *)(a1 + 21);
  v34 = *(unsigned __int8 *)(a1 + 18);
  v35 = *(unsigned __int8 *)(a2 + 21);
  v24 = *(_BYTE *)(a1 + 64);
  v40 = *(_QWORD *)(a2 + 40);
  v33 = *(unsigned __int8 *)(a2 + 20);
  v25 = *(_QWORD *)(a1 + 40);
  v42 = *(unsigned __int8 *)(a2 + 64);
  v26 = *(_BYTE *)(a1 + 48);
  v41 = *(unsigned __int8 *)(a2 + 48);
  v36 = *(unsigned __int8 *)(a1 + 19);
  v37 = *(unsigned __int8 *)(a1 + 20);
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v18 = v38;
  v19 = v40;
  v20 = v41;
  v22 = v42;
  if ((v27 & 1) == 0)
    goto LABEL_38;
  if (((v4 ^ v13) & 1) != 0)
    goto LABEL_38;
  if (((v5 ^ v14) & 1) != 0)
    goto LABEL_38;
  if (((v34 ^ v15) & 1) != 0)
    goto LABEL_38;
  if (((v36 ^ v16) & 1) != 0)
    goto LABEL_38;
  if (((v37 ^ v33) & 1) != 0)
    goto LABEL_38;
  v9 = v26;
  v8 = v25;
  v11 = v24;
  if (((v39 ^ v35) & 1) != 0)
    goto LABEL_38;
LABEL_22:
  if ((v7 & 1) != 0)
  {
    if (!v18)
      goto LABEL_38;
  }
  else
  {
    if (v6 == v17)
      v28 = v18;
    else
      v28 = 1;
    if ((v28 & 1) != 0)
      goto LABEL_38;
  }
  if ((v9 & 1) != 0)
  {
    if (!v20)
      goto LABEL_38;
  }
  else
  {
    if (v8 == v19)
      v29 = v20;
    else
      v29 = 1;
    if ((v29 & 1) != 0)
      goto LABEL_38;
  }
  if ((v11 & 1) != 0)
  {
    if (!v22)
      goto LABEL_38;
  }
  else
  {
    if (v10 == v21)
      v30 = v22;
    else
      v30 = 1;
    if ((v30 & 1) != 0)
      goto LABEL_38;
  }
  OUTLINED_FUNCTION_2_27();
  specialized static Set.== infix(_:_:)(v31, v32);
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD v60[9];
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v44 = result;
  v45 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v46 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  if (!v6)
    goto LABEL_8;
LABEL_7:
  v47 = (v6 - 1) & v6;
  v48 = v3;
  for (i = __clz(__rbit64(v6)) | (v3 << 6); ; i = __clz(__rbit64(v10)) + (v11 << 6))
  {
    v13 = *(_QWORD *)(result + 48) + 120 * i;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    v18 = *(_QWORD *)(v13 + 32);
    v19 = *(_QWORD *)(v13 + 40);
    v21 = *(_QWORD *)(v13 + 48);
    v20 = *(_QWORD *)(v13 + 56);
    v22 = *(_QWORD *)(v13 + 64);
    v23 = *(_BYTE *)(v13 + 72);
    v24 = *(_QWORD *)(v13 + 80);
    v25 = *(_QWORD *)(v13 + 88);
    v26 = *(_BYTE *)(v13 + 96);
    v27 = *(_QWORD *)(v13 + 104);
    v28 = *(_BYTE *)(v13 + 112);
    LOBYTE(v13) = *(_BYTE *)(v13 + 113);
    v60[0] = v14;
    v60[1] = v15;
    v60[2] = v16;
    v60[3] = v17;
    v60[4] = v18;
    v60[5] = v19;
    v60[6] = v21;
    v60[7] = v20;
    v60[8] = v22;
    v61 = v23;
    v62 = v24;
    v63 = v25;
    v64 = v26;
    v65 = v27;
    v66 = v28;
    v67 = v13;
    *(_QWORD *)&v49 = v14;
    *((_QWORD *)&v49 + 1) = v15;
    *(_QWORD *)&v50 = v16;
    *((_QWORD *)&v50 + 1) = v17;
    *(_QWORD *)&v51 = v18;
    *((_QWORD *)&v51 + 1) = v19;
    *(_QWORD *)&v52 = v21;
    *((_QWORD *)&v52 + 1) = v20;
    v53 = v22;
    v54 = v23;
    *(_QWORD *)&v55 = v24;
    *((_QWORD *)&v55 + 1) = v25;
    v56 = v26;
    v57 = v27;
    v58 = v28;
    v59 = v13;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ConnectionPolicyRoute.hash(into:)();
    v29 = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v2 + 32);
    v31 = v29 & ~v30;
    if (((*(_QWORD *)(v7 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v32 = v2;
    v33 = ~v30;
    v34 = *(_QWORD *)(v2 + 48);
    while (1)
    {
      v35 = (__int128 *)(v34 + 120 * v31);
      v36 = *((_QWORD *)v35 + 8);
      v37 = *((_BYTE *)v35 + 72);
      v38 = *((_BYTE *)v35 + 96);
      v39 = *((_QWORD *)v35 + 13);
      v40 = *((_BYTE *)v35 + 112);
      v41 = *((_BYTE *)v35 + 113);
      v42 = v35[1];
      v49 = *v35;
      v50 = v42;
      v43 = v35[3];
      v51 = v35[2];
      v52 = v43;
      v53 = v36;
      v54 = v37;
      v55 = v35[5];
      v56 = v38;
      v57 = v39;
      v58 = v40;
      v59 = v41;
      if (static ConnectionPolicyRoute.== infix(_:_:)((uint64_t)&v49, (uint64_t)v60))
        break;
      v31 = (v31 + 1) & v33;
      if (((*(_QWORD *)(v7 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
        goto LABEL_32;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v32;
    result = v44;
    v6 = v47;
    v3 = v48;
    if (v47)
      goto LABEL_7;
LABEL_8:
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v9 >= v46)
      return 1;
    v10 = *(_QWORD *)(v45 + 8 * v9);
    v11 = v3 + 1;
    if (!v10)
    {
      v11 = v9 + 1;
      if (v9 + 1 >= v46)
        return 1;
      v10 = *(_QWORD *)(v45 + 8 * v11);
      if (!v10)
      {
        v11 = v9 + 2;
        if (v9 + 2 >= v46)
          return 1;
        v10 = *(_QWORD *)(v45 + 8 * v11);
        if (!v10)
        {
          v11 = v9 + 3;
          if (v9 + 3 >= v46)
            return 1;
          v10 = *(_QWORD *)(v45 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_23:
    v47 = (v10 - 1) & v10;
    v48 = v11;
  }
  v12 = v9 + 4;
  if (v12 >= v46)
    return 1;
  v10 = *(_QWORD *)(v45 + 8 * v12);
  if (v10)
  {
    v11 = v12;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v46)
      return 1;
    v10 = *(_QWORD *)(v45 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_23;
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Int ConnectionPolicy.hashValue.getter()
{
  __int128 *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v15[72];
  __int128 v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v1 = *((_BYTE *)v0 + 16);
  v2 = *((_BYTE *)v0 + 17);
  v3 = *((_BYTE *)v0 + 18);
  v4 = *((_BYTE *)v0 + 19);
  v5 = *((_BYTE *)v0 + 20);
  v6 = *((_BYTE *)v0 + 21);
  v7 = *((_QWORD *)v0 + 3);
  v8 = *((_BYTE *)v0 + 32);
  v9 = *((_QWORD *)v0 + 5);
  v10 = *((_BYTE *)v0 + 48);
  v11 = *((_QWORD *)v0 + 7);
  v12 = *((_BYTE *)v0 + 64);
  v13 = *((_QWORD *)v0 + 9);
  v16 = *v0;
  v17 = v1;
  v18 = v2;
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  Hasher.init(_seed:)();
  ConnectionPolicy.hash(into:)((uint64_t)v15);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConnectionPolicy()
{
  __int128 *v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v15[72];
  __int128 v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v1 = *((_BYTE *)v0 + 16);
  v2 = *((_BYTE *)v0 + 17);
  v3 = *((_BYTE *)v0 + 18);
  v4 = *((_BYTE *)v0 + 19);
  v5 = *((_BYTE *)v0 + 20);
  v6 = *((_BYTE *)v0 + 21);
  v7 = *((_QWORD *)v0 + 3);
  v8 = *((_BYTE *)v0 + 32);
  v9 = *((_QWORD *)v0 + 5);
  v10 = *((_BYTE *)v0 + 48);
  v11 = *((_QWORD *)v0 + 7);
  v12 = *((_BYTE *)v0 + 64);
  v13 = *((_QWORD *)v0 + 9);
  v16 = *v0;
  v17 = v1;
  v18 = v2;
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v10;
  v27 = v11;
  v28 = v12;
  v29 = v13;
  Hasher.init(_seed:)();
  ConnectionPolicy.hash(into:)((uint64_t)v15);
  return Hasher._finalize()();
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  Swift::UInt v7;
  int64_t v8;
  uint64_t v10;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;

  v13 = a2 + 56;
  Hasher._finalize()();
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  for (v5 &= v5 - 1; ; v5 = (v10 - 1) & v10)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ConnectionPolicyRoute.hash(into:)();
    v12 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 ^= v12;
    if (v5)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v8++, 1))
      goto LABEL_19;
    if (v8 >= v6)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v7);
      return;
    }
    v10 = *(_QWORD *)(v13 + 8 * v8);
    if (!v10)
      break;
LABEL_14:
    ;
  }
  v11 = v8 + 1;
  if (v8 + 1 >= v6)
    goto LABEL_17;
  v10 = *(_QWORD *)(v13 + 8 * v11);
  if (v10)
  {
    ++v8;
    goto LABEL_14;
  }
  while (1)
  {
    v8 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v8 >= v6)
      goto LABEL_17;
    v10 = *(_QWORD *)(v13 + 8 * v8);
    ++v11;
    if (v10)
      goto LABEL_14;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type ConnectionPolicy and conformance ConnectionPolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConnectionPolicy and conformance ConnectionPolicy;
  if (!lazy protocol witness table cache variable for type ConnectionPolicy and conformance ConnectionPolicy)
  {
    result = MEMORY[0x24956DF70](&protocol conformance descriptor for ConnectionPolicy, &type metadata for ConnectionPolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConnectionPolicy and conformance ConnectionPolicy);
  }
  return result;
}

void destroy for ConnectionPreparationReport(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 88) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for ConnectionPreparationReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v6;
    v7 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    v8 = *(_QWORD *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != 1)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v8;
      v12 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v12;
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = v13;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
      LODWORD(v13) = *(_DWORD *)(a2 + 268);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
      *(_DWORD *)(a1 + 268) = v13;
      v14 = *(_QWORD *)(a2 + 280);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = v14;
      v15 = *(_QWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v15;
      LODWORD(v15) = *(_DWORD *)(a2 + 308);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_DWORD *)(a1 + 308) = v15;
      LODWORD(v15) = *(_DWORD *)(a2 + 316);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_DWORD *)(a1 + 316) = v15;
      LODWORD(v15) = *(_DWORD *)(a2 + 324);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      *(_DWORD *)(a1 + 324) = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
    v9 = (void *)(a1 + 80);
    v10 = (const void *)(a2 + 80);
    v11 = 249;
  }
  else
  {
    v9 = (void *)(a1 + 40);
    v10 = (const void *)(a2 + 40);
    v11 = 289;
  }
  memcpy(v9, v10, v11);
LABEL_7:
  v16 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v16;
  v17 = *(void **)(a2 + 352);
  *(_QWORD *)(a1 + 352) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v17;
  return a1;
}

uint64_t assignWithCopy for ConnectionPreparationReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  v4 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
      v6 = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v6 == 1)
      {
        v7 = (void *)(a1 + 80);
        v8 = (const void *)(a2 + 80);
LABEL_15:
        v9 = 249;
        goto LABEL_16;
      }
      goto LABEL_11;
    }
LABEL_10:
    v7 = (void *)(a1 + 40);
    v8 = (const void *)(a2 + 40);
    v9 = 289;
LABEL_16:
    memcpy(v7, v8, v9);
    goto LABEL_17;
  }
  if (!v4)
  {
    outlined destroy of ConnectionInterfaceReport(a1 + 40);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  v5 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88) != 1)
  {
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v24 = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = v24;
      v25 = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = v25;
      v26 = *(_QWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = v26;
      v27 = *(_QWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = v27;
      v28 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v28;
      v29 = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = v29;
      v30 = *(_QWORD *)(a2 + 216);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = v30;
      v31 = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = v31;
      LODWORD(v31) = *(_DWORD *)(a2 + 244);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_DWORD *)(a1 + 244) = v31;
      LODWORD(v31) = *(_DWORD *)(a2 + 252);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_DWORD *)(a1 + 252) = v31;
      LODWORD(v31) = *(_DWORD *)(a2 + 260);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      *(_DWORD *)(a1 + 260) = v31;
      LODWORD(v31) = *(_DWORD *)(a2 + 268);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
      *(_DWORD *)(a1 + 268) = v31;
      v32 = *(_QWORD *)(a2 + 280);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = v32;
      v33 = *(_QWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v33;
      LODWORD(v33) = *(_DWORD *)(a2 + 308);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_DWORD *)(a1 + 308) = v33;
      LODWORD(v33) = *(_DWORD *)(a2 + 316);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_DWORD *)(a1 + 316) = v33;
      LODWORD(v33) = *(_DWORD *)(a2 + 324);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      *(_DWORD *)(a1 + 324) = v33;
      goto LABEL_17;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 80);
    goto LABEL_14;
  }
  if (v5 == 1)
  {
LABEL_14:
    v7 = (void *)(a1 + 80);
    v8 = (const void *)(a2 + 80);
    goto LABEL_15;
  }
LABEL_11:
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v11;
  v12 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v12;
  v13 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v13;
  v14 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v14;
  v15 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v15;
  v16 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v16;
  v17 = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 244);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_DWORD *)(a1 + 244) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 252);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_DWORD *)(a1 + 252) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 260);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_DWORD *)(a1 + 260) = v17;
  LODWORD(v17) = *(_DWORD *)(a2 + 268);
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_DWORD *)(a1 + 268) = v17;
  v18 = *(_QWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = v18;
  v19 = *(_QWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_DWORD *)(a1 + 308) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 316);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_DWORD *)(a1 + 316) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 324);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_DWORD *)(a1 + 324) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_17:
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *(void **)(a2 + 352);
  v21 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v20;
  v22 = v20;

  return a1;
}

void *__swift_memcpy360_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t assignWithTake for ConnectionPreparationReport(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_8;
  v6 = *(_QWORD *)(a2 + 48);
  if (!v6)
  {
    outlined destroy of ConnectionInterfaceReport(a1 + 40);
LABEL_8:
    v9 = (void *)(a1 + 40);
    v10 = (const void *)(a2 + 40);
    v11 = 289;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  if (*(_QWORD *)(a1 + 88) != 1)
  {
    v8 = *(_QWORD *)(a2 + 88);
    if (v8 != 1)
    {
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v8;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v14;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v15 = *(_QWORD *)(a2 + 184);
      *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v15;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
      *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
      *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
      *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
      *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      v16 = *(_QWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v16;
      LODWORD(v16) = *(_DWORD *)(a2 + 308);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_DWORD *)(a1 + 308) = v16;
      LODWORD(v16) = *(_DWORD *)(a2 + 316);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_DWORD *)(a1 + 316) = v16;
      LODWORD(v16) = *(_DWORD *)(a2 + 324);
      *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
      *(_DWORD *)(a1 + 324) = v16;
      goto LABEL_10;
    }
    outlined destroy of ConnectionTCPInfoMetrics(a1 + 80);
  }
  v9 = (void *)(a1 + 80);
  v10 = (const void *)(a2 + 80);
  v11 = 249;
LABEL_9:
  memcpy(v9, v10, v11);
LABEL_10:
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRelease();
  v12 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);

  return a1;
}

uint64_t getEnumTagSinglePayload for ConnectionPreparationReport(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 360))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 336);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionPreparationReport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 360) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 336) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 360) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionPreparationReport()
{
  return &type metadata for ConnectionPreparationReport;
}

uint64_t ConnectionPreparationReport.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE __dst[289];
  _QWORD __src[37];
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE v58[304];
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;

  v1 = 0x6E776F6E6B6E75;
  v2 = *(_QWORD *)v0;
  v3 = *(void **)(v0 + 8);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v6 = *(unsigned __int8 *)(v0 + 32);
  v7 = *(unsigned __int8 *)(v0 + 33);
  v45 = *(unsigned __int8 *)(v0 + 34);
  v43 = *(unsigned __int8 *)(v0 + 35);
  v40 = *(unsigned __int8 *)(v0 + 36);
  outlined init with take of ConnectionInterfaceReport?(v0 + 40, (uint64_t)v58);
  v54 = 0;
  v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  OUTLINED_FUNCTION_7_19();
  OUTLINED_FUNCTION_9_21(0x697463656E6E6F63uLL);
  if (v3)
    v8 = v2;
  else
    v8 = 0x6E776F6E6B6E75;
  v9 = (void *)0xE700000000000000;
  if (v3)
    v10 = v3;
  else
    v10 = (void *)0xE700000000000000;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_27();
  v49 = v12;
  OUTLINED_FUNCTION_9_21(0x7461745368746170uLL);
  if (v4)
    v13 = v5;
  else
    v13 = 0x6E776F6E6B6E75;
  if (v4)
    v14 = v4;
  else
    v14 = (void *)0xE700000000000000;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_27();
  v48 = v16;
  v54 = 0x20534E44736168;
  v55 = 0xE700000000000000;
  if (v6)
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  OUTLINED_FUNCTION_9_5(v17);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_3_27();
  v47 = v18;
  OUTLINED_FUNCTION_9_21(0x736E657078457369uLL);
  if (v7)
    v19 = 1702195828;
  else
    v19 = 0x65736C6166;
  OUTLINED_FUNCTION_9_5(v19);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_3_27();
  v46 = v20;
  v54 = 0;
  v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  OUTLINED_FUNCTION_7_19();
  OUTLINED_FUNCTION_9_21(0x7274736E6F437369uLL);
  if (v45)
    v21 = 1702195828;
  else
    v21 = 0x65736C6166;
  OUTLINED_FUNCTION_9_5(v21);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_3_27();
  v44 = v22;
  v54 = 0x2034767049736168;
  v55 = 0xE800000000000000;
  if (v43)
    v23 = 1702195828;
  else
    v23 = 0x65736C6166;
  OUTLINED_FUNCTION_9_5(v23);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_3_27();
  v42 = v24;
  v56 = 0x2036767049736168;
  v57 = 0xE800000000000000;
  if (v40)
    v25 = 1702195828;
  else
    v25 = 0x65736C6166;
  OUTLINED_FUNCTION_9_5(v25);
  OUTLINED_FUNCTION_10_2();
  v26 = v56;
  v54 = 0;
  v55 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  OUTLINED_FUNCTION_7_19();
  v52 = 0xD000000000000011;
  v53 = 0x8000000246F77710;
  outlined init with take of ConnectionInterfaceReport?((uint64_t)v58, (uint64_t)&v54);
  if (_s11SiriNetwork25ConnectionInterfaceReportVSgWOg((uint64_t)&v54) != 1)
  {
    outlined init with take of ConnectionInterfaceReport?((uint64_t)v58, (uint64_t)__src);
    memcpy(__dst, __src, sizeof(__dst));
    outlined retain of ConnectionInterfaceReport((uint64_t)__src);
    v1 = String.init<A>(describing:)();
    v9 = v27;
  }
  v28._countAndFlagsBits = v1;
  v28._object = v9;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v41 = v52;
  v29 = (void *)v53;
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  __src[0] = 0x65746E4968746170;
  __src[1] = 0xEF20736563616672;
  v30 = swift_bridgeObjectRetain();
  v59._countAndFlagsBits = MEMORY[0x24956D148](v30, &type metadata for ConnectionInterfaceReport);
  OUTLINED_FUNCTION_8_20(v59);
  OUTLINED_FUNCTION_6_1();
  swift_bridgeObjectRelease();
  v31 = __src[0];
  v32 = (void *)__src[1];
  strcpy((char *)__src, "pathGateways ");
  HIWORD(__src[1]) = -4864;
  v33 = swift_bridgeObjectRetain();
  v60._countAndFlagsBits = MEMORY[0x24956D148](v33, &type metadata for ConnectionEndpointReport);
  OUTLINED_FUNCTION_8_20(v60);
  OUTLINED_FUNCTION_6_1();
  swift_bridgeObjectRelease();
  v35 = __src[0];
  v34 = (void *)__src[1];
  __src[0] = 0;
  __src[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v61._countAndFlagsBits = 0xD00000000000002ELL;
  v61._object = (void *)0x8000000246F790E0;
  OUTLINED_FUNCTION_8_20(v61);
  OUTLINED_FUNCTION_5_23(v48);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_23(v47);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_23(v46);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_23(v44);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_5_23(v42);
  OUTLINED_FUNCTION_201();
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_9_5(v26);
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_0_44();
  v36._countAndFlagsBits = v41;
  v36._object = v29;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_44();
  v37._countAndFlagsBits = v31;
  v37._object = v32;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_44();
  v38._countAndFlagsBits = v35;
  v38._object = v34;
  String.append(_:)(v38);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_0_44();
  OUTLINED_FUNCTION_9_5(v49);
  OUTLINED_FUNCTION_10_2();
  return __src[0];
}

