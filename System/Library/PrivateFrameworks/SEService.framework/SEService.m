uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t keypath_setTm(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x20BD202D8](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)(*a1 + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x20BD202CC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

id SESEndPointListContainers(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id *v7;
  id *v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD v13[6];
  id obj;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v5 = a1;
  v6 = a2;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy_;
  v25 = __Block_byref_object_dispose_;
  v26 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy_;
  v19 = __Block_byref_object_dispose_;
  v20 = 0;
  +[SESClient sharedClient]();
  v7 = (id *)objc_claimAutoreleasedReturnValue();
  v8 = (id *)(v16 + 5);
  obj = (id)v16[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v7, &obj);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v8, obj);

  if (v9 && !v16[5])
  {
    +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v5, v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __SESEndPointListContainers_block_invoke;
    v13[3] = &unk_24C2BCBF8;
    v13[4] = &v21;
    v13[5] = &v15;
    objc_msgSend(v9, "listEndPointContainers:reply:", v11, v13);

    if (a3)
      *a3 = objc_retainAutorelease((id)v16[5]);
    v10 = (id)v22[5];
  }
  else
  {
    v10 = 0;
    if (a3)
      *a3 = objc_retainAutorelease((id)v16[5]);
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);

  return v10;
}

void sub_20A04A538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

_QWORD *SESLegacyKeyCreate(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (v7)
  {
    +[SESClient sharedClient]();
    v10 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v10, a4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      v22 = 0;
      v23 = &v22;
      v24 = 0x3032000000;
      v25 = __Block_byref_object_copy__0;
      v26 = __Block_byref_object_dispose__0;
      v27 = 0;
      v16 = 0;
      v17 = &v16;
      v18 = 0x3032000000;
      v19 = __Block_byref_object_copy__0;
      v20 = __Block_byref_object_dispose__0;
      v21 = 0;
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __SESLegacyKeyCreate_block_invoke;
      v15[3] = &unk_24C2BCC88;
      v15[4] = &v16;
      v15[5] = &v22;
      objc_msgSend(v11, "createSELegacyKey:subjectIdentifier:metaData:localValidationList:reply:", 0, v7, v8, v9, v15);
      if (a4)
        *a4 = objc_retainAutorelease((id)v17[5]);
      a4 = (id)v23[5];
      _Block_object_dispose(&v16, 8);

      _Block_object_dispose(&v22, 8);
    }
    else
    {
      a4 = 0;
    }

  }
  else if (a4)
  {
    SESDefaultLogObject();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
  }

  return a4;
}

void sub_20A04AE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

id SESLegacyKeyDelete(void *a1)
{
  id v1;
  id *v2;
  id *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[5];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  if (v1)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__0;
    v14 = __Block_byref_object_dispose__0;
    v15 = 0;
    +[SESClient sharedClient]();
    v2 = (id *)objc_claimAutoreleasedReturnValue();
    v3 = (id *)(v11 + 5);
    obj = (id)v11[5];
    -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v3, obj);

    if (v4)
    {
      v8[0] = MEMORY[0x24BDAC760];
      v8[1] = 3221225472;
      v8[2] = __SESLegacyKeyDelete_block_invoke;
      v8[3] = &unk_24C2BCCB0;
      v8[4] = &v10;
      objc_msgSend(v4, "deleteSELegacyKey:keySlot:reply:", 0, v1, v8);
    }
    v5 = (id)v11[5];

    _Block_object_dispose(&v10, 8);
  }
  else
  {
    SESDefaultLogObject();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

void sub_20A04B078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESLegacyKeySign(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = v12;
  if (v9 && v10 && v11 && v12)
  {
    +[SESClient sharedClient]();
    v14 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v14, a5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v15)
    {
      v26 = 0;
      v27 = &v26;
      v28 = 0x3032000000;
      v29 = __Block_byref_object_copy__0;
      v30 = __Block_byref_object_dispose__0;
      v31 = 0;
      v20 = 0;
      v21 = &v20;
      v22 = 0x3032000000;
      v23 = __Block_byref_object_copy__0;
      v24 = __Block_byref_object_dispose__0;
      v25 = 0;
      v19[0] = MEMORY[0x24BDAC760];
      v19[1] = 3221225472;
      v19[2] = __SESLegacyKeySign_block_invoke;
      v19[3] = &unk_24C2BCCD8;
      v19[4] = &v20;
      v19[5] = &v26;
      objc_msgSend(v15, "signWithSELegacyKey:keySlot:challenge:metaData:authorization:reply:", 0, v11, v10, v9, v13, v19);
      if (a5)
        *a5 = objc_retainAutorelease((id)v21[5]);
      a5 = (id)v27[5];
      _Block_object_dispose(&v20, 8);

      _Block_object_dispose(&v26, 8);
    }
    else
    {
      a5 = 0;
    }

  }
  else if (a5)
  {
    SESDefaultLogObject();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    a5 = 0;
  }

  return a5;
}

void sub_20A04B2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

_QWORD *SESLegacyKeySignWithListenerEndpoint(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = v15;
  if (v11 && v12 && v13 && v14 && v15)
  {
    +[SESClient sharedClient]();
    v17 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v17, a6);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      v30 = 0;
      v31 = &v30;
      v32 = 0x3032000000;
      v33 = __Block_byref_object_copy__0;
      v34 = __Block_byref_object_dispose__0;
      v35 = 0;
      v24 = 0;
      v25 = &v24;
      v26 = 0x3032000000;
      v27 = __Block_byref_object_copy__0;
      v28 = __Block_byref_object_dispose__0;
      v29 = 0;
      +[SEProxy withEndpoint:](SEProxy, "withEndpoint:", v11);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
      {
        v23[0] = MEMORY[0x24BDAC760];
        v23[1] = 3221225472;
        v23[2] = __SESLegacyKeySignWithListenerEndpoint_block_invoke;
        v23[3] = &unk_24C2BCCD8;
        v23[4] = &v24;
        v23[5] = &v30;
        objc_msgSend(v18, "signWithSELegacyKey:keySlot:challenge:metaData:authorization:reply:", v19, v14, v13, v12, v16, v23);
        if (a6)
          *a6 = objc_retainAutorelease((id)v25[5]);
        a6 = (id)v31[5];
      }
      else if (a6)
      {
        SESDefaultLogObject();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        SESCreateAndLogError();
        *a6 = (id)objc_claimAutoreleasedReturnValue();

        a6 = 0;
      }

      _Block_object_dispose(&v24, 8);
      _Block_object_dispose(&v30, 8);

    }
    else
    {
      a6 = 0;
    }

  }
  else if (a6)
  {
    SESDefaultLogObject();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a6 = (id)objc_claimAutoreleasedReturnValue();

    a6 = 0;
  }

  return a6;
}

void sub_20A04B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESLegacyKeySignPrecomputedDigest(void *a1, void *a2, void *a3, _QWORD *a4)
{
  return _signPrecomputedDigestWithProxy(0, a1, a2, a3, 0, a4);
}

_QWORD *_signPrecomputedDigestWithProxy(void *a1, void *a2, void *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v21[6];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v14;
  if (!v12 || !v13 || !v14)
  {
    if (!a6)
      goto LABEL_15;
LABEL_12:
    SESDefaultLogObject();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a6 = (id)objc_claimAutoreleasedReturnValue();

    a6 = 0;
    goto LABEL_15;
  }
  if (objc_msgSend(v12, "length") != 32)
  {
    if (!a6)
      goto LABEL_15;
    goto LABEL_12;
  }
  +[SESClient sharedClient]();
  v16 = (id *)objc_claimAutoreleasedReturnValue();
  -[SESClient synchronousRemoteObjectProxyWithError:](v16, a6);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    v28 = 0;
    v29 = &v28;
    v30 = 0x3032000000;
    v31 = __Block_byref_object_copy__0;
    v32 = __Block_byref_object_dispose__0;
    v33 = 0;
    v22 = 0;
    v23 = &v22;
    v24 = 0x3032000000;
    v25 = __Block_byref_object_copy__0;
    v26 = __Block_byref_object_dispose__0;
    v27 = 0;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a5);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x24BDAC760];
    v21[1] = 3221225472;
    v21[2] = ___signPrecomputedDigestWithProxy_block_invoke;
    v21[3] = &unk_24C2BCCD8;
    v21[4] = &v22;
    v21[5] = &v28;
    objc_msgSend(v17, "signPrecomputedWithSELegacyKey:keySlot:metaData:authorization:authorizationType:reply:", v11, v13, v12, v15, v18, v21);

    if (a6)
      *a6 = objc_retainAutorelease((id)v23[5]);
    a6 = (id)v29[5];
    _Block_object_dispose(&v22, 8);

    _Block_object_dispose(&v28, 8);
  }
  else
  {
    a6 = 0;
  }

LABEL_15:
  return a6;
}

void sub_20A04B8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESLegacyKeySignPrecomputedDigestWithListenerEndpoint(uint64_t a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;

  if (a1)
  {
    v9 = a4;
    v10 = a3;
    v11 = a2;
    +[SEProxy withEndpoint:](SEProxy, "withEndpoint:", a1);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    _signPrecomputedDigestWithProxy(v12, v11, v10, v9, 0, a5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = a4;
    v11 = a3;
    v12 = a2;
    _signPrecomputedDigestWithProxy(0, v12, v11, v10, 0, a5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v13;
}

id SESLegacyKeySignPrecomputedWithIDV(uint64_t a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;

  if (a1)
  {
    v9 = a4;
    v10 = a3;
    v11 = a2;
    +[SEProxy withEndpoint:](SEProxy, "withEndpoint:", a1);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    _signPrecomputedDigestWithProxy(v12, v11, v10, v9, 1, a5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = a4;
    v11 = a3;
    v12 = a2;
    _signPrecomputedDigestWithProxy(0, v12, v11, v10, 1, a5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v13;
}

id SESLegacyKeyGetOccupiedSlots(_QWORD *a1)
{
  id *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = __Block_byref_object_copy__0;
    v18 = __Block_byref_object_dispose__0;
    v19 = 0;
    v8 = 0;
    v9 = &v8;
    v10 = 0x3032000000;
    v11 = __Block_byref_object_copy__0;
    v12 = __Block_byref_object_dispose__0;
    v13 = 0;
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __SESLegacyKeyGetOccupiedSlots_block_invoke;
    v7[3] = &unk_24C2BCBF8;
    v7[4] = &v8;
    v7[5] = &v14;
    objc_msgSend(v3, "getSELegacyKeyOccupiedSlots:reply:", 0, v7);
    if (a1)
      *a1 = objc_retainAutorelease((id)v9[5]);
    v5 = (id)v15[5];
    _Block_object_dispose(&v8, 8);

    _Block_object_dispose(&v14, 8);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_20A04BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

_QWORD *SESLegacyKeyGetOccupiedSlotsWithListenerEndpoint(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v3 = a1;
  +[SESClient sharedClient]();
  v4 = (id *)objc_claimAutoreleasedReturnValue();
  -[SESClient synchronousRemoteObjectProxyWithError:](v4, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x3032000000;
    v19 = __Block_byref_object_copy__0;
    v20 = __Block_byref_object_dispose__0;
    v21 = 0;
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__0;
    v14 = __Block_byref_object_dispose__0;
    v15 = 0;
    +[SEProxy withEndpoint:](SEProxy, "withEndpoint:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v9[0] = MEMORY[0x24BDAC760];
      v9[1] = 3221225472;
      v9[2] = __SESLegacyKeyGetOccupiedSlotsWithListenerEndpoint_block_invoke;
      v9[3] = &unk_24C2BCBF8;
      v9[4] = &v10;
      v9[5] = &v16;
      objc_msgSend(v5, "getSELegacyKeyOccupiedSlots:reply:", v6, v9);
      if (a2)
        *a2 = objc_retainAutorelease((id)v11[5]);
      a2 = (id)v17[5];
    }
    else if (a2)
    {
      SESDefaultLogObject();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a2 = (id)objc_claimAutoreleasedReturnValue();

      a2 = 0;
    }

    _Block_object_dispose(&v10, 8);
    _Block_object_dispose(&v16, 8);

  }
  else
  {
    a2 = 0;
  }

  return a2;
}

void sub_20A04BE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id extractACLsSet()
{
  void *v0;
  void *v1;
  void *v2;

  SecAccessControlGetConstraints();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDC6C80]), "initWithPropertyList:", v0);
  objc_msgSend(v1, "data");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

_QWORD *SESKeyCreateWithExtractedACLs(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v3 = a1;
  if (v3)
  {
    +[SESClient sharedClient]();
    v4 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v4, a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      v16 = 0;
      v17 = &v16;
      v18 = 0x3032000000;
      v19 = __Block_byref_object_copy__0;
      v20 = __Block_byref_object_dispose__0;
      v21 = 0;
      v10 = 0;
      v11 = &v10;
      v12 = 0x3032000000;
      v13 = __Block_byref_object_copy__0;
      v14 = __Block_byref_object_dispose__0;
      v15 = 0;
      v9[0] = MEMORY[0x24BDAC760];
      v9[1] = 3221225472;
      v9[2] = __SESKeyCreateWithExtractedACLs_block_invoke;
      v9[3] = &unk_24C2BCD00;
      v9[4] = &v10;
      v9[5] = &v16;
      objc_msgSend(v5, "createSEKey:extractedACLs:reply:", 0, v3, v9);
      if (a2)
        *a2 = objc_retainAutorelease((id)v11[5]);
      a2 = (id)v17[5];
      _Block_object_dispose(&v10, 8);

      _Block_object_dispose(&v16, 8);
    }
    else
    {
      a2 = 0;
    }

  }
  else if (a2)
  {
    SESDefaultLogObject();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a2 = (id)objc_claimAutoreleasedReturnValue();

    a2 = 0;
  }

  return a2;
}

void sub_20A04C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

id SESKeyCreate(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    extractACLsSet();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      SESKeyCreateWithExtractedACLs(v3, a2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (a2)
      {
        SESDefaultLogObject();
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        SESCreateAndLogError();
        *a2 = (id)objc_claimAutoreleasedReturnValue();

      }
      v5 = 0;
    }
  }
  else
  {
    if (!a2)
    {
      v5 = 0;
      return v5;
    }
    SESDefaultLogObject();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    v5 = 0;
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

_QWORD *SESKeyCreateWithSession(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  id *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v7 = a1;
  v8 = a2;
  if (a3)
  {
    extractACLsSet();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      +[SESClient sharedClient]();
      v10 = (id *)objc_claimAutoreleasedReturnValue();
      -[SESClient synchronousRemoteObjectProxyWithError:](v10, a4);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v11)
      {
        v23 = 0;
        v24 = &v23;
        v25 = 0x3032000000;
        v26 = __Block_byref_object_copy__0;
        v27 = __Block_byref_object_dispose__0;
        v28 = 0;
        v17 = 0;
        v18 = &v17;
        v19 = 0x3032000000;
        v20 = __Block_byref_object_copy__0;
        v21 = __Block_byref_object_dispose__0;
        v22 = 0;
        +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v16[0] = MEMORY[0x24BDAC760];
        v16[1] = 3221225472;
        v16[2] = __SESKeyCreateWithSession_block_invoke;
        v16[3] = &unk_24C2BCD00;
        v16[4] = &v17;
        v16[5] = &v23;
        objc_msgSend(v11, "createSEKey:extractedACLs:reply:", v12, v9, v16);

        if (a4)
          *a4 = objc_retainAutorelease((id)v18[5]);
        a4 = (id)v24[5];
        _Block_object_dispose(&v17, 8);

        _Block_object_dispose(&v23, 8);
      }
      else
      {
        a4 = 0;
      }

    }
    else if (a4)
    {
      SESDefaultLogObject();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a4 = (id)objc_claimAutoreleasedReturnValue();

      a4 = 0;
    }

  }
  else if (a4)
  {
    SESDefaultLogObject();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
  }

  return a4;
}

void sub_20A04C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void SESKeyDelete(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  void *v5;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v3 = a1;
  if (v3)
  {
    +[SESClient sharedClient]();
    v4 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v4, a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v7 = 0;
      v8 = &v7;
      v9 = 0x3032000000;
      v10 = __Block_byref_object_copy__0;
      v11 = __Block_byref_object_dispose__0;
      v12 = 0;
      v6[0] = MEMORY[0x24BDAC760];
      v6[1] = 3221225472;
      v6[2] = __SESKeyDelete_block_invoke;
      v6[3] = &unk_24C2BCCB0;
      v6[4] = &v7;
      objc_msgSend(v5, "deleteSEKey:keyData:reply:", 0, v3, v6);
      if (a2)
        *a2 = objc_retainAutorelease((id)v8[5]);
      _Block_object_dispose(&v7, 8);

    }
    goto LABEL_8;
  }
  if (a2)
  {
    SESDefaultLogObject();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a2 = (id)objc_claimAutoreleasedReturnValue();
LABEL_8:

  }
}

void sub_20A04C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void SESKeyDeleteWithSession(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (v9)
  {
    +[SESClient sharedClient]();
    v10 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v10, a4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v14 = 0;
      v15 = &v14;
      v16 = 0x3032000000;
      v17 = __Block_byref_object_copy__0;
      v18 = __Block_byref_object_dispose__0;
      v19 = 0;
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = MEMORY[0x24BDAC760];
      v13[1] = 3221225472;
      v13[2] = __SESKeyDeleteWithSession_block_invoke;
      v13[3] = &unk_24C2BCCB0;
      v13[4] = &v14;
      objc_msgSend(v11, "deleteSEKey:keyData:reply:", v12, v9, v13);

      if (a4)
        *a4 = objc_retainAutorelease((id)v15[5]);
      _Block_object_dispose(&v14, 8);

    }
    goto LABEL_8;
  }
  if (a4)
  {
    SESDefaultLogObject();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_8:

  }
}

void sub_20A04C84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESKeyPublicKey(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  +[PTClassicKey withData:error:](PTClassicKey, "withData:error:", a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "publicKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id SESKeyGetAccessControlConstraints(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  +[PTClassicKey withData:error:](PTClassicKey, "withData:error:", a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "accessControlConstraints");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

_QWORD *SESKeySignData(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id *v14;
  void *v15;
  void *v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = v12;
  if (v9 && v10 && v11 && v12)
  {
    +[SESClient sharedClient]();
    v14 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v14, a5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v25 = 0;
      v26 = &v25;
      v27 = 0x3032000000;
      v28 = __Block_byref_object_copy__0;
      v29 = __Block_byref_object_dispose__0;
      v30 = 0;
      v19 = 0;
      v20 = &v19;
      v21 = 0x3032000000;
      v22 = __Block_byref_object_copy__0;
      v23 = __Block_byref_object_dispose__0;
      v24 = 0;
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 3221225472;
      v18[2] = __SESKeySignData_block_invoke;
      v18[3] = &unk_24C2BCD00;
      v18[4] = &v25;
      v18[5] = &v19;
      objc_msgSend(v15, "signWithSEKey:keyData:data:algorithm:laExternalizedContext:reply:", 0, v9, v10, v11, v13, v18);
      if (a5)
        *a5 = objc_retainAutorelease((id)v20[5]);
      a5 = (id)v26[5];
      _Block_object_dispose(&v19, 8);

      _Block_object_dispose(&v25, 8);
    }
    else
    {
      a5 = 0;
    }

  }
  else if (a5)
  {
    SESDefaultLogObject();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    a5 = 0;
  }

  return a5;
}

void sub_20A04CAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeySignDataWithSession(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = v18;
  if (v13 && v14 && v15 && v16 && v17 && v18)
  {
    +[SESClient sharedClient]();
    v20 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v20, a7);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      v32 = 0;
      v33 = &v32;
      v34 = 0x3032000000;
      v35 = __Block_byref_object_copy__0;
      v36 = __Block_byref_object_dispose__0;
      v37 = 0;
      v26 = 0;
      v27 = &v26;
      v28 = 0x3032000000;
      v29 = __Block_byref_object_copy__0;
      v30 = __Block_byref_object_dispose__0;
      v31 = 0;
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v13, v14);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __SESKeySignDataWithSession_block_invoke;
      v25[3] = &unk_24C2BCD00;
      v25[4] = &v32;
      v25[5] = &v26;
      objc_msgSend(v21, "signWithSEKey:keyData:data:algorithm:laExternalizedContext:reply:", v22, v15, v16, v17, v19, v25);

      if (a7)
        *a7 = objc_retainAutorelease((id)v27[5]);
      a7 = (id)v33[5];
      _Block_object_dispose(&v26, 8);

      _Block_object_dispose(&v32, 8);
    }
    else
    {
      a7 = 0;
    }

  }
  else if (a7)
  {
    SESDefaultLogObject();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a7 = (id)objc_claimAutoreleasedReturnValue();

    a7 = 0;
  }

  return a7;
}

void sub_20A04CDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeySignPrecomputedDigest(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  return _SESKeySignPrecomputedDigest(0, a1, a2, a3, a4, a5);
}

_QWORD *_SESKeySignPrecomputedDigest(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id *v17;
  void *v18;
  void *v19;
  _QWORD v21[6];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = v15;
  if (v12 && v13 && v14 && v15)
  {
    +[SESClient sharedClient]();
    v17 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v17, a6);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      v28 = 0;
      v29 = &v28;
      v30 = 0x3032000000;
      v31 = __Block_byref_object_copy__0;
      v32 = __Block_byref_object_dispose__0;
      v33 = 0;
      v22 = 0;
      v23 = &v22;
      v24 = 0x3032000000;
      v25 = __Block_byref_object_copy__0;
      v26 = __Block_byref_object_dispose__0;
      v27 = 0;
      v21[0] = MEMORY[0x24BDAC760];
      v21[1] = 3221225472;
      v21[2] = ___SESKeySignPrecomputedDigest_block_invoke;
      v21[3] = &unk_24C2BCD00;
      v21[4] = &v28;
      v21[5] = &v22;
      objc_msgSend(v18, "signPrecomputedDigest:keyData:digest:algorithm:laExternalizedContext:reply:", v11, v12, v13, v14, v16, v21);
      if (a6)
        *a6 = objc_retainAutorelease((id)v23[5]);
      a6 = (id)v29[5];
      _Block_object_dispose(&v22, 8);

      _Block_object_dispose(&v28, 8);
    }
    else
    {
      a6 = 0;
    }

  }
  else if (a6)
  {
    SESDefaultLogObject();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a6 = (id)objc_claimAutoreleasedReturnValue();

    a6 = 0;
  }

  return a6;
}

void sub_20A04D078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESKeySignPrecomputedDigestWithSession(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;

  v13 = a6;
  v14 = a5;
  v15 = a4;
  v16 = a3;
  +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", a1, a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  _SESKeySignPrecomputedDigest(v17, v16, v15, v14, v13, a7);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

id SESKeySignPrecomputedDigestWithListenerEndpoint(uint64_t a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;

  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  +[SEProxy withEndpoint:](SEProxy, "withEndpoint:", a1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  _SESKeySignPrecomputedDigest(v15, v14, v13, v12, v11, a6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

_QWORD *SESKeyExchange(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id *v14;
  void *v15;
  void *v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = v12;
  if (v9 && v10 && v11 && v12)
  {
    +[SESClient sharedClient]();
    v14 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v14, a5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      v25 = 0;
      v26 = &v25;
      v27 = 0x3032000000;
      v28 = __Block_byref_object_copy__0;
      v29 = __Block_byref_object_dispose__0;
      v30 = 0;
      v19 = 0;
      v20 = &v19;
      v21 = 0x3032000000;
      v22 = __Block_byref_object_copy__0;
      v23 = __Block_byref_object_dispose__0;
      v24 = 0;
      v18[0] = MEMORY[0x24BDAC760];
      v18[1] = 3221225472;
      v18[2] = __SESKeyExchange_block_invoke;
      v18[3] = &unk_24C2BCD00;
      v18[4] = &v25;
      v18[5] = &v19;
      objc_msgSend(v15, "sharedSecretWithSEKey:keyData:publicKey:algorithm:laExternalizedContext:reply:", 0, v9, v10, v11, v13, v18);
      if (a5)
        *a5 = objc_retainAutorelease((id)v20[5]);
      a5 = (id)v26[5];
      _Block_object_dispose(&v19, 8);

      _Block_object_dispose(&v25, 8);
    }
    else
    {
      a5 = 0;
    }

  }
  else if (a5)
  {
    SESDefaultLogObject();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    a5 = 0;
  }

  return a5;
}

void sub_20A04D400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeyExchangeWithSession(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = v18;
  if (v15 && v16 && v17 && v18)
  {
    +[SESClient sharedClient]();
    v20 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v20, a7);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
    {
      v32 = 0;
      v33 = &v32;
      v34 = 0x3032000000;
      v35 = __Block_byref_object_copy__0;
      v36 = __Block_byref_object_dispose__0;
      v37 = 0;
      v26 = 0;
      v27 = &v26;
      v28 = 0x3032000000;
      v29 = __Block_byref_object_copy__0;
      v30 = __Block_byref_object_dispose__0;
      v31 = 0;
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v13, v14);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __SESKeyExchangeWithSession_block_invoke;
      v25[3] = &unk_24C2BCD00;
      v25[4] = &v32;
      v25[5] = &v26;
      objc_msgSend(v21, "sharedSecretWithSEKey:keyData:publicKey:algorithm:laExternalizedContext:reply:", v22, v15, v16, v17, v19, v25);

      if (a7)
        *a7 = objc_retainAutorelease((id)v27[5]);
      a7 = (id)v33[5];
      _Block_object_dispose(&v26, 8);

      _Block_object_dispose(&v32, 8);
    }
    else
    {
      a7 = 0;
    }

  }
  else if (a7)
  {
    SESDefaultLogObject();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a7 = (id)objc_claimAutoreleasedReturnValue();

    a7 = 0;
  }

  return a7;
}

void sub_20A04D6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESKeyEncryptData(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v27[7];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  if (v15 && v16 && v17 && v18 && v19)
  {
    +[SESClient sharedClient]();
    v22 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v22, a8);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      v40 = 0;
      v41 = &v40;
      v42 = 0x3032000000;
      v43 = __Block_byref_object_copy__0;
      v44 = __Block_byref_object_dispose__0;
      v45 = 0;
      v34 = 0;
      v35 = &v34;
      v36 = 0x3032000000;
      v37 = __Block_byref_object_copy__0;
      v38 = __Block_byref_object_dispose__0;
      v39 = 0;
      v28 = 0;
      v29 = &v28;
      v30 = 0x3032000000;
      v31 = __Block_byref_object_copy__0;
      v32 = __Block_byref_object_dispose__0;
      v33 = 0;
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = __SESKeyEncryptData_block_invoke;
      v27[3] = &unk_24C2BCD28;
      v27[4] = &v40;
      v27[5] = &v34;
      v27[6] = &v28;
      objc_msgSend(v23, "encryptWithSEKey:plainText:publicKey:algorithm:laExternalizedContext:sharedInfo:authenticationData:reply:", v15, v16, v17, v18, v19, v20, v21, v27);
      v24 = (void *)objc_msgSend((id)v41[5], "mutableCopy");
      objc_msgSend(v24, "appendData:", v35[5]);
      if (a8)
        *a8 = objc_retainAutorelease((id)v29[5]);
      _Block_object_dispose(&v28, 8);

      _Block_object_dispose(&v34, 8);
      _Block_object_dispose(&v40, 8);

    }
    else
    {
      v24 = 0;
    }

  }
  else
  {
    if (a8)
    {
      SESDefaultLogObject();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a8 = (id)objc_claimAutoreleasedReturnValue();

    }
    v24 = 0;
  }

  return v24;
}

void sub_20A04D9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 136), 8);
  _Unwind_Resume(a1);
}

id SESKeyDecryptData(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, _QWORD *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id *v26;
  void *v27;
  void *v28;
  id v30;
  _QWORD v31[6];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  void (*v42)(uint64_t);
  id v43;

  v16 = a9;
  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  v24 = a8;
  if (v17 && v18 && v19 && v20 && v21)
  {
    v30 = v23;
    v25 = v22;
    +[SESClient sharedClient]();
    v26 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v26, a9);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      v38 = 0;
      v39 = &v38;
      v40 = 0x3032000000;
      v41 = __Block_byref_object_copy__0;
      v42 = __Block_byref_object_dispose__0;
      v43 = 0;
      v32 = 0;
      v33 = &v32;
      v34 = 0x3032000000;
      v35 = __Block_byref_object_copy__0;
      v36 = __Block_byref_object_dispose__0;
      v37 = 0;
      v31[0] = MEMORY[0x24BDAC760];
      v31[1] = 3221225472;
      v31[2] = __SESKeyDecryptData_block_invoke;
      v31[3] = &unk_24C2BCD00;
      v31[4] = &v38;
      v31[5] = &v32;
      v22 = v25;
      objc_msgSend(v27, "decryptWithSEKey:cipherText:publicKey:algorithm:laExternalizedContext:sharedInfo:authenticationData:authenticationTag:reply:", v17, v18, v19, v20, v21, v25, v30, v24, v31);
      if (a9)
        *a9 = objc_retainAutorelease((id)v33[5]);
      v16 = (id)v39[5];
      _Block_object_dispose(&v32, 8);

      _Block_object_dispose(&v38, 8);
    }
    else
    {
      v16 = 0;
      v22 = v25;
    }
    v23 = v30;

  }
  else if (a9)
  {
    SESDefaultLogObject();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a9 = (id)objc_claimAutoreleasedReturnValue();

    v16 = 0;
  }

  return v16;
}

void sub_20A04DD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id SESKeyRewrapData(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, _QWORD *a13)
{
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  _QWORD v43[7];
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t);
  id v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t);
  id v61;

  v20 = a1;
  v42 = a2;
  v21 = a3;
  v22 = a4;
  v39 = a5;
  v23 = a6;
  v41 = a7;
  v24 = a8;
  v25 = a9;
  v26 = a10;
  v40 = a11;
  v27 = a12;
  v28 = v27;
  if (v20 && v42 && v21 && v22 && v23 && v24 && v25)
  {
    v38 = v26;
    +[SESClient sharedClient]();
    v29 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v29, a13);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    if (v30)
    {
      v56 = 0;
      v57 = &v56;
      v58 = 0x3032000000;
      v59 = __Block_byref_object_copy__0;
      v60 = __Block_byref_object_dispose__0;
      v61 = 0;
      v50 = 0;
      v51 = &v50;
      v52 = 0x3032000000;
      v53 = __Block_byref_object_copy__0;
      v54 = __Block_byref_object_dispose__0;
      v55 = 0;
      v44 = 0;
      v45 = &v44;
      v46 = 0x3032000000;
      v47 = __Block_byref_object_copy__0;
      v48 = __Block_byref_object_dispose__0;
      v49 = 0;
      v43[0] = MEMORY[0x24BDAC760];
      v43[1] = 3221225472;
      v43[2] = __SESKeyRewrapData_block_invoke;
      v43[3] = &unk_24C2BCD28;
      v43[4] = &v56;
      v43[5] = &v50;
      v43[6] = &v44;
      v37 = v28;
      v31 = v28;
      v32 = v39;
      objc_msgSend(v30, "rewrapWithSEKey:cipherText:publicKey:decryptAlgorithm:decryptSharedInfo:encryptAlgorithm:encryptSharedInfo:certificate:laExternalizedContext:decryptAuthenticationData:decryptAuthenticationTag:encryptAuthenticationData:reply:", v20, v42, v21, v22, v39, v23, v41, v24, v25, v38, v40, v37, v43);
      v33 = (void *)objc_msgSend((id)v57[5], "mutableCopy");
      objc_msgSend(v33, "appendData:", v51[5]);
      if (a13)
        *a13 = objc_retainAutorelease((id)v45[5]);
      _Block_object_dispose(&v44, 8);

      _Block_object_dispose(&v50, 8);
      _Block_object_dispose(&v56, 8);

    }
    else
    {
      v31 = v28;
      v33 = 0;
      v32 = v39;
    }

    v26 = v38;
  }
  else
  {
    v31 = v27;
    if (a13)
    {
      SESDefaultLogObject();
      v34 = v26;
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a13 = (id)objc_claimAutoreleasedReturnValue();

      v26 = v34;
    }
    v33 = 0;
    v32 = v39;
  }

  return v33;
}

void sub_20A04E110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 184), 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeyCreateSEBAASCertificate(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  return SESKeyAttestWithSEBAA(a1, a2, a3, a4, 0, a5);
}

_QWORD *SESKeyAttestWithSEBAA(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id *v16;
  void *v17;
  void *v18;
  _QWORD v20[6];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  if (v11 && v12)
  {
    +[SESClient sharedClient]();
    v16 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v16, a6);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      v27 = 0;
      v28 = &v27;
      v29 = 0x3032000000;
      v30 = __Block_byref_object_copy__0;
      v31 = __Block_byref_object_dispose__0;
      v32 = 0;
      v21 = 0;
      v22 = &v21;
      v23 = 0x3032000000;
      v24 = __Block_byref_object_copy__0;
      v25 = __Block_byref_object_dispose__0;
      v26 = 0;
      v20[0] = MEMORY[0x24BDAC760];
      v20[1] = 3221225472;
      v20[2] = __SESKeyAttestWithSEBAA_block_invoke;
      v20[3] = &unk_24C2BCD00;
      v20[4] = &v27;
      v20[5] = &v21;
      objc_msgSend(v17, "createSEABAASCertificate:subjectIdentifier:nonce:OIDs:validityInterval:reply:", v11, v12, v13, v14, v15, v20);
      if (a6)
        *a6 = objc_retainAutorelease((id)v22[5]);
      a6 = (id)v28[5];
      _Block_object_dispose(&v21, 8);

      _Block_object_dispose(&v27, 8);
    }
    else
    {
      a6 = 0;
    }

  }
  else if (a6)
  {
    SESDefaultLogObject();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a6 = (id)objc_claimAutoreleasedReturnValue();

    a6 = 0;
  }

  return a6;
}

void sub_20A04E3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeyCreateCertificate(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id *v22;
  void *v23;
  void *v24;
  _QWORD v26[6];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  if (v15 && v16 && v17 && v18 && v19)
  {
    +[SESClient sharedClient]();
    v22 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v22, a8);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      v33 = 0;
      v34 = &v33;
      v35 = 0x3032000000;
      v36 = __Block_byref_object_copy__0;
      v37 = __Block_byref_object_dispose__0;
      v38 = 0;
      v27 = 0;
      v28 = &v27;
      v29 = 0x3032000000;
      v30 = __Block_byref_object_copy__0;
      v31 = __Block_byref_object_dispose__0;
      v32 = 0;
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 3221225472;
      v26[2] = __SESKeyCreateCertificate_block_invoke;
      v26[3] = &unk_24C2BCD00;
      v26[4] = &v33;
      v26[5] = &v27;
      objc_msgSend(v23, "createCertificateForKeyData:withKeyData:subjectIdentifier:authorityIdentifier:laExternalizedContext:nonce:OIDs:reply:", v15, v16, v18, v19, v17, v20, v21, v26);
      if (a8)
        *a8 = objc_retainAutorelease((id)v28[5]);
      a8 = (id)v34[5];
      _Block_object_dispose(&v27, 8);

      _Block_object_dispose(&v33, 8);
    }
    else
    {
      a8 = 0;
    }

  }
  else if (a8)
  {
    SESDefaultLogObject();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a8 = (id)objc_claimAutoreleasedReturnValue();

    a8 = 0;
  }

  return a8;
}

void sub_20A04E6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeyCreatePTAttestation(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id *v13;
  void *v14;
  void *v15;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  if (v9 && v10)
  {
    +[SESClient sharedClient]();
    v13 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v13, a5);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      v24 = 0;
      v25 = &v24;
      v26 = 0x3032000000;
      v27 = __Block_byref_object_copy__0;
      v28 = __Block_byref_object_dispose__0;
      v29 = 0;
      v18 = 0;
      v19 = &v18;
      v20 = 0x3032000000;
      v21 = __Block_byref_object_copy__0;
      v22 = __Block_byref_object_dispose__0;
      v23 = 0;
      v17[0] = MEMORY[0x24BDAC760];
      v17[1] = 3221225472;
      v17[2] = __SESKeyCreatePTAttestation_block_invoke;
      v17[3] = &unk_24C2BCD00;
      v17[4] = &v24;
      v17[5] = &v18;
      objc_msgSend(v14, "createPTAttestation:keyData:subjectIdentifier:nonce:OIDs:reply:", 0, v9, v10, v11, v12, v17);
      if (a5)
        *a5 = objc_retainAutorelease((id)v19[5]);
      a5 = (id)v25[5];
      _Block_object_dispose(&v18, 8);

      _Block_object_dispose(&v24, 8);
    }
    else
    {
      a5 = 0;
    }

  }
  else if (a5)
  {
    SESDefaultLogObject();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a5 = (id)objc_claimAutoreleasedReturnValue();

    a5 = 0;
  }

  return a5;
}

void sub_20A04E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESKeyGetPTAttestationCASD(_QWORD *a1)
{
  id *v2;
  void *v3;
  id v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x3032000000;
    v16 = __Block_byref_object_copy__0;
    v17 = __Block_byref_object_dispose__0;
    v18 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x3032000000;
    v10 = __Block_byref_object_copy__0;
    v11 = __Block_byref_object_dispose__0;
    v12 = 0;
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __SESKeyGetPTAttestationCASD_block_invoke;
    v6[3] = &unk_24C2BCD00;
    v6[4] = &v13;
    v6[5] = &v7;
    objc_msgSend(v3, "getCASDCertificate:reply:", 0, v6);
    if (a1)
      *a1 = objc_retainAutorelease((id)v8[5]);
    v4 = (id)v14[5];
    _Block_object_dispose(&v7, 8);

    _Block_object_dispose(&v13, 8);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_20A04EAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeyCreatePTAttestationWithSession(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  if (v15 && v16)
  {
    +[SESClient sharedClient]();
    v19 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v19, a7);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      v31 = 0;
      v32 = &v31;
      v33 = 0x3032000000;
      v34 = __Block_byref_object_copy__0;
      v35 = __Block_byref_object_dispose__0;
      v36 = 0;
      v25 = 0;
      v26 = &v25;
      v27 = 0x3032000000;
      v28 = __Block_byref_object_copy__0;
      v29 = __Block_byref_object_dispose__0;
      v30 = 0;
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v13, v14);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = MEMORY[0x24BDAC760];
      v24[1] = 3221225472;
      v24[2] = __SESKeyCreatePTAttestationWithSession_block_invoke;
      v24[3] = &unk_24C2BCD00;
      v24[4] = &v31;
      v24[5] = &v25;
      objc_msgSend(v20, "createPTAttestation:keyData:subjectIdentifier:nonce:OIDs:reply:", v21, v15, v16, v17, v18, v24);

      if (a7)
        *a7 = objc_retainAutorelease((id)v26[5]);
      a7 = (id)v32[5];
      _Block_object_dispose(&v25, 8);

      _Block_object_dispose(&v31, 8);
    }
    else
    {
      a7 = 0;
    }

  }
  else if (a7)
  {
    SESDefaultLogObject();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a7 = (id)objc_claimAutoreleasedReturnValue();

    a7 = 0;
  }

  return a7;
}

void sub_20A04EDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

_QWORD *SESKeyUpdateACL(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  id *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v7 = a1;
  v8 = a3;
  v9 = v8;
  if (v7 && a2 && v8)
  {
    extractACLsSet();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      +[SESClient sharedClient]();
      v11 = (id *)objc_claimAutoreleasedReturnValue();
      -[SESClient synchronousRemoteObjectProxyWithError:](v11, a4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        v23 = 0;
        v24 = &v23;
        v25 = 0x3032000000;
        v26 = __Block_byref_object_copy__0;
        v27 = __Block_byref_object_dispose__0;
        v28 = 0;
        v17 = 0;
        v18 = &v17;
        v19 = 0x3032000000;
        v20 = __Block_byref_object_copy__0;
        v21 = __Block_byref_object_dispose__0;
        v22 = 0;
        v16[0] = MEMORY[0x24BDAC760];
        v16[1] = 3221225472;
        v16[2] = __SESKeyUpdateACL_block_invoke;
        v16[3] = &unk_24C2BCD00;
        v16[4] = &v17;
        v16[5] = &v23;
        objc_msgSend(v12, "updateACLForSEKey:extractedACLs:laExternalizedContext:reply:", v7, v10, v9, v16);
        if (a4)
          *a4 = objc_retainAutorelease((id)v18[5]);
        a4 = (id)v24[5];
        _Block_object_dispose(&v17, 8);

        _Block_object_dispose(&v23, 8);
      }
      else
      {
        a4 = 0;
      }

    }
    else if (a4)
    {
      SESDefaultLogObject();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a4 = (id)objc_claimAutoreleasedReturnValue();

      a4 = 0;
    }

  }
  else if (a4)
  {
    SESDefaultLogObject();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
  }

  return a4;
}

void sub_20A04F07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t SESKeyGetSupportedFeatures(_QWORD *a1)
{
  id *v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v13 = 0;
    v14 = &v13;
    v15 = 0x2020000000;
    v16 = 0;
    v7 = 0;
    v8 = &v7;
    v9 = 0x3032000000;
    v10 = __Block_byref_object_copy__0;
    v11 = __Block_byref_object_dispose__0;
    v12 = 0;
    v6[0] = MEMORY[0x24BDAC760];
    v6[1] = 3221225472;
    v6[2] = __SESKeyGetSupportedFeatures_block_invoke;
    v6[3] = &unk_24C2BCD50;
    v6[4] = &v13;
    v6[5] = &v7;
    objc_msgSend(v3, "getSESKeySupportedFeatures:", v6);
    if (a1)
      *a1 = objc_retainAutorelease((id)v8[5]);
    v4 = v14[3];
    _Block_object_dispose(&v7, 8);

    _Block_object_dispose(&v13, 8);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_20A04F230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL SESKeyIsValid(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  void *v5;
  _BOOL8 v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v3 = a1;
  +[SESClient sharedClient]();
  v4 = (id *)objc_claimAutoreleasedReturnValue();
  -[SESClient synchronousRemoteObjectProxyWithError:](v4, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x2020000000;
    v12 = 0;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESKeyIsValid_block_invoke;
    v8[3] = &unk_24C2BCD78;
    v8[4] = &v9;
    objc_msgSend(v5, "checkKeyValidity:completion:", v3, v8);
    v6 = *((_BYTE *)v10 + 24) != 0;
    _Block_object_dispose(&v9, 8);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_20A04F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL SESKeyDesignate(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  _BOOL8 v10;
  id *v11;
  void *v12;
  void *v13;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v7 = a1;
  v8 = a2;
  if (v7)
  {
    if (a4)
    {
      SESDefaultLogObject();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a4 = (id)objc_claimAutoreleasedReturnValue();

    }
    v10 = 0;
  }
  else
  {
    +[SESClient sharedClient]();
    v11 = (id *)objc_claimAutoreleasedReturnValue();
    -[SESClient synchronousRemoteObjectProxyWithError:](v11, a4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      v16 = 0;
      v17 = &v16;
      v18 = 0x3032000000;
      v19 = __Block_byref_object_copy__0;
      v20 = __Block_byref_object_dispose__0;
      v21 = 0;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 3221225472;
      v15[2] = __SESKeyDesignate_block_invoke;
      v15[3] = &unk_24C2BCCB0;
      v15[4] = &v16;
      objc_msgSend(v12, "designateKey:designation:completion:", v8, v13, v15);

      v10 = v17[5] == 0;
      _Block_object_dispose(&v16, 8);

    }
    else
    {
      v10 = 0;
    }

  }
  return v10;
}

void sub_20A04F514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL SESKeyRemoveDesignation(uint64_t a1, _QWORD *a2)
{
  id *v4;
  void *v5;
  void *v6;
  _BOOL8 v7;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  +[SESClient sharedClient]();
  v4 = (id *)objc_claimAutoreleasedReturnValue();
  -[SESClient synchronousRemoteObjectProxyWithError:](v4, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__0;
    v14 = __Block_byref_object_dispose__0;
    v15 = 0;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __SESKeyRemoveDesignation_block_invoke;
    v9[3] = &unk_24C2BCCB0;
    v9[4] = &v10;
    objc_msgSend(v5, "designateKey:designation:completion:", 0, v6, v9);

    v7 = v11[5] == 0;
    _Block_object_dispose(&v10, 8);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_20A04F658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___signPrecomputedDigestWithProxy_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v5 = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
  v8 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_20A04F930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A0523C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_20A0545E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_20A059298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_20A0599E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_20A059C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A059EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_20A05A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_20A05C2C4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20A05C93C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20A05EE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id *location,id *a24)
{
  void *v24;
  uint64_t v25;

  objc_destroyWeak(location);
  objc_destroyWeak(a24);
  objc_destroyWeak((id *)(v25 - 112));
  objc_sync_exit(v24);
  _Unwind_Resume(a1);
}

void sub_20A05F0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_20A05F264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointAppletCleanup(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id *v6;
  id *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  _QWORD v14[5];
  id obj;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x3032000000;
    v19 = __Block_byref_object_copy__3;
    v20 = __Block_byref_object_dispose__3;
    v21 = 0;
    +[SESClient sharedClient]();
    v6 = (id *)objc_claimAutoreleasedReturnValue();
    v7 = (id *)(v17 + 5);
    obj = (id)v17[5];
    -[SESClient synchronousRemoteObjectProxyWithError:](v6, &obj);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v7, obj);

    if (v8 && !v17[5])
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v3, v5);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = MEMORY[0x24BDAC760];
      v14[1] = 3221225472;
      v14[2] = __SESEndPointAppletCleanup_block_invoke;
      v14[3] = &unk_24C2BCCB0;
      v14[4] = &v16;
      objc_msgSend(v8, "cleanupAppletsWithNoEndpoints:reply:", v12, v14);

      v10 = (id)v17[5];
    }
    else
    {
      SESDefaultLogObject();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      v10 = (id)objc_claimAutoreleasedReturnValue();

    }
    _Block_object_dispose(&v16, 8);

  }
  else
  {
    SESDefaultLogObject();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    v10 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v10;
}

void sub_20A05F4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointTSMDictionary(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  const __CFString *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t i;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  id obj;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  id v83;
  id v84;
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  _BYTE v89[128];
  _QWORD v90[4];
  _QWORD v91[4];
  _BYTE v92[128];
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5 && v6)
  {
    v84 = 0;
    SESEndPointListWithSession(v5, v6, &v84);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v84;
    if (v9 || !v8)
    {
      if (a3)
      {
        SESDefaultLogObject();
        v11 = (id)objc_claimAutoreleasedReturnValue();
        SESCreateAndLogError();
        v57 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        v10 = v8;
        goto LABEL_50;
      }
      v57 = 0;
    }
    else
    {
      objc_msgSend(v8, "filter:", &__block_literal_global_591);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v83 = 0;
      SESEndPointListContainers(v5, v7, &v83);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      v9 = v83;
      if (!v9 && v11)
      {
        v62 = v7;
        v63 = v5;
        objc_msgSend(v11, "filter:", &__block_literal_global_595);
        v60 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v10, "count"));
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v61 = v10;
        obj = v10;
        v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v92, 16);
        if (!v12)
          goto LABEL_31;
        v13 = v12;
        v14 = CFSTR("appletAid");
        v73 = *(_QWORD *)v80;
        while (1)
        {
          v15 = 0;
          v64 = v13;
          do
          {
            if (*(_QWORD *)v80 != v73)
              objc_enumerationMutation(obj);
            v16 = *(void **)(*((_QWORD *)&v79 + 1) + 8 * v15);
            v17 = (void *)objc_opt_new();
            objc_msgSend(v16, "appletIdentifier");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "asHexString");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, v14);

            objc_msgSend(v16, "publicKeyIdentifier");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "asHexString");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, CFSTR("keyId"));

            v22 = objc_msgSend(v16, "endPointType");
            v23 = (void *)MEMORY[0x24BDD16E0];
            objc_msgSend(v16, "revocationAttestation");
            v24 = objc_claimAutoreleasedReturnValue();
            v25 = (void *)v24;
            if (v22 != 1)
            {
              if (v24)
                v27 = 129;
              else
                v27 = 15;
              objc_msgSend(v23, "numberWithUnsignedInt:", v27);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "setObject:forKeyedSubscript:", v28, CFSTR("state"));
LABEL_23:

              goto LABEL_24;
            }
            if (v24)
            {
              v26 = 129;
            }
            else
            {
              objc_msgSend(v16, "trackingReceipt");
              v7 = (void *)objc_claimAutoreleasedReturnValue();
              if (v7)
                v26 = 15;
              else
                v26 = 21;
            }
            objc_msgSend(v23, "numberWithUnsignedInt:", v26);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setObject:forKeyedSubscript:", v29, CFSTR("state"));

            v28 = v7;
            if (!v25)
              goto LABEL_23;
LABEL_24:

            objc_msgSend(v16, "revocationAttestation");
            v30 = (void *)objc_claimAutoreleasedReturnValue();

            if (v30)
            {
              objc_msgSend(v16, "revocationAttestation");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "asHexString");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v17, "setObject:forKeyedSubscript:", v32, CFSTR("terminationAttestation"));

              objc_msgSend(v16, "carOEMProprietaryData");
              v33 = (void *)objc_claimAutoreleasedReturnValue();

              if (v33)
              {
                v90[0] = CFSTR("version");
                objc_msgSend(v16, "carOEMProprietaryData");
                v72 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v72, "version");
                v71 = (void *)objc_claimAutoreleasedReturnValue();
                v91[0] = v71;
                v90[1] = CFSTR("cipherText");
                objc_msgSend(v16, "carOEMProprietaryData");
                v70 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v70, "cipherText");
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v69, "asHexString");
                v68 = (void *)objc_claimAutoreleasedReturnValue();
                v91[1] = v68;
                v90[2] = CFSTR("ephemeralPK");
                objc_msgSend(v16, "carOEMProprietaryData");
                v67 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v67, "ephemeralPublicKeydata");
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v66, "asHexString");
                v34 = (void *)objc_claimAutoreleasedReturnValue();
                v91[2] = v34;
                v90[3] = CFSTR("receiverPKID");
                objc_msgSend(v16, "carOEMProprietaryData");
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v35, "receiverPublicKeyHash");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v36, "asHexString");
                v37 = v7;
                v38 = v14;
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                v91[3] = v39;
                objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v91, v90, 4);
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "setObject:forKeyedSubscript:", v40, CFSTR("carOemProprietaryData"));

                v14 = v38;
                v7 = v37;

                v13 = v64;
              }
              objc_msgSend(v16, "terminatedByTaskID");
              v41 = (void *)objc_claimAutoreleasedReturnValue();

              if (v41)
              {
                objc_msgSend(v16, "terminatedByTaskID");
                v42 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "setObject:forKeyedSubscript:", v42, CFSTR("terminatedByTaskID"));

              }
            }
            objc_msgSend(v74, "addObject:", v17);

            ++v15;
          }
          while (v13 != v15);
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v79, v92, 16);
          if (!v13)
          {
LABEL_31:

            objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(v60, "count"));
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            v75 = 0u;
            v76 = 0u;
            v77 = 0u;
            v78 = 0u;
            v11 = v60;
            v44 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v75, v89, 16);
            if (v44)
            {
              v45 = v44;
              v46 = *(_QWORD *)v76;
              do
              {
                v47 = v11;
                for (i = 0; i != v45; ++i)
                {
                  if (*(_QWORD *)v76 != v46)
                    objc_enumerationMutation(v47);
                  v49 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * i);
                  v87[0] = CFSTR("appletAid");
                  objc_msgSend(v49, "appletAID");
                  v50 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v50, "asHexString");
                  v51 = (void *)objc_claimAutoreleasedReturnValue();
                  v87[1] = CFSTR("state");
                  v88[0] = v51;
                  v52 = (void *)MEMORY[0x24BDD16E0];
                  if (objc_msgSend(v49, "isSuspended"))
                    v53 = 143;
                  else
                    v53 = 15;
                  objc_msgSend(v52, "numberWithUnsignedInt:", v53);
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  v88[1] = v54;
                  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v88, v87, 2);
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v43, "addObject:", v55);

                }
                v11 = v47;
                v45 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v75, v89, 16);
              }
              while (v45);
            }

            v85[0] = CFSTR("PTKeys");
            v85[1] = CFSTR("ptaContainers");
            v56 = v74;
            v86[0] = v74;
            v86[1] = v43;
            objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v86, v85, 2);
            v57 = (void *)objc_claimAutoreleasedReturnValue();

            v7 = v62;
            v5 = v63;
            v10 = v61;
            v9 = 0;
LABEL_49:

            goto LABEL_50;
          }
        }
      }
      if (a3)
      {
        SESDefaultLogObject();
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        SESCreateAndLogError();
        v57 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_49;
      }
      v57 = 0;
LABEL_50:

      v8 = v10;
    }

  }
  else
  {
    if (a3)
    {
      SESDefaultLogObject();
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();

    }
    v57 = 0;
  }

  return v57;
}

void SESClientSetMachServiceName(void *a1)
{
  id v1;
  id v2;

  if (a1)
  {
    v1 = a1;
    +[SESClient sharedClient]();
    v2 = (id)objc_claimAutoreleasedReturnValue();
    -[SESClient setServiceName:]((uint64_t)v2, v1);

  }
}

void SESPrivateLogSERProtocolDetails(void *a1, void *a2, void *a3)
{
  id v5;
  Protocol *v6;
  id v7;
  const char *Name;
  int v9;
  NSObject *v10;
  objc_class *v11;
  Protocol **v12;
  NSObject *v13;
  NSObject *v14;
  unint64_t i;
  NSObject *v16;
  Protocol *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  unsigned int outCount;
  uint8_t buf[4];
  _BYTE v25[28];
  __int16 v26;
  id v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    Name = protocol_getName(v6);
    if (v7)
    {
      v9 = objc_msgSend(v7, "conformsToProtocol:", v6);
      SESDefaultLogObject();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138544386;
        *(_QWORD *)v25 = v5;
        *(_WORD *)&v25[8] = 2050;
        *(_QWORD *)&v25[10] = v6;
        *(_WORD *)&v25[18] = 2082;
        *(_QWORD *)&v25[20] = Name;
        v26 = 2114;
        v27 = v7;
        v28 = 1026;
        v29 = v9;
        _os_log_impl(&dword_20A048000, v10, OS_LOG_TYPE_ERROR, "[%{public}@] SERProto %{public}p/%{public}s candidate %{public}@ conforms %{public}d", buf, 0x30u);
      }

      outCount = 0;
      v11 = (objc_class *)objc_opt_class();
      v12 = class_copyProtocolList(v11, &outCount);
      SESDefaultLogObject();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v25 = outCount;
          _os_log_impl(&dword_20A048000, v14, OS_LOG_TYPE_INFO, "Candidate conforms to %u protocols:", buf, 8u);
        }

        if (outCount)
        {
          for (i = 0; i < outCount; ++i)
          {
            SESDefaultLogObject();
            v16 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              v17 = v12[i];
              v18 = protocol_getName(v17);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)v25 = i;
              *(_WORD *)&v25[4] = 2048;
              *(_QWORD *)&v25[6] = v17;
              *(_WORD *)&v25[14] = 2080;
              *(_QWORD *)&v25[16] = v18;
              _os_log_impl(&dword_20A048000, v16, OS_LOG_TYPE_INFO, "    %u : protocol %p/%s", buf, 0x1Cu);
            }

          }
        }
        free(v12);
        goto LABEL_23;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v20 = "Failed to class_copyProtocolList";
        v21 = v14;
        v22 = 2;
        goto LABEL_21;
      }
    }
    else
    {
      SESDefaultLogObject();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)v25 = v5;
        *(_WORD *)&v25[8] = 2050;
        *(_QWORD *)&v25[10] = v6;
        *(_WORD *)&v25[18] = 2082;
        *(_QWORD *)&v25[20] = Name;
        v20 = "[%{public}@] SERProto %{public}p/%{public}s";
        v21 = v14;
        v22 = 32;
LABEL_21:
        _os_log_impl(&dword_20A048000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
      }
    }

    goto LABEL_23;
  }
  SESDefaultLogObject();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v25 = v5;
    _os_log_impl(&dword_20A048000, v19, OS_LOG_TYPE_ERROR, "[%{public}@] SERProto nil protocol", buf, 0xCu);
  }

LABEL_23:
}

void sub_20A060E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_20A061088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A0612FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A0632DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_20A0638DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void sub_20A063B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A063DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A064048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A064360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A0645DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A0648E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointCAList(_QWORD *a1)
{
  id *v2;
  id *v3;
  void *v4;
  id v5;
  _QWORD v7[6];
  id obj;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;

  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__7;
  v19 = __Block_byref_object_dispose__7;
  v20 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__7;
  v13 = __Block_byref_object_dispose__7;
  v14 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v10 + 5);
  obj = (id)v10[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  if (v4 && !v10[5])
  {
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 3221225472;
    v7[2] = __SESEndPointCAList_block_invoke;
    v7[3] = &unk_24C2BCBF8;
    v7[4] = &v15;
    v7[5] = &v9;
    objc_msgSend(v4, "listEndPointCAs:", v7);
    if (a1)
      *a1 = objc_retainAutorelease((id)v10[5]);
    v5 = (id)v16[5];
  }
  else
  {
    v5 = 0;
  }

  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v15, 8);

  return v5;
}

void sub_20A0650DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

id SESEndPointCreateCA(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id *v7;
  id *v8;
  void *v9;
  id v10;
  _QWORD v12[6];
  id obj;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v5 = a1;
  v6 = a2;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__7;
  v24 = __Block_byref_object_dispose__7;
  v25 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__7;
  v18 = __Block_byref_object_dispose__7;
  v19 = 0;
  +[SESClient sharedClient]();
  v7 = (id *)objc_claimAutoreleasedReturnValue();
  v8 = (id *)(v15 + 5);
  obj = (id)v15[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v7, &obj);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v8, obj);

  if (v9 && !v15[5])
  {
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 3221225472;
    v12[2] = __SESEndPointCreateCA_block_invoke;
    v12[3] = &unk_24C2BD320;
    v12[4] = &v20;
    v12[5] = &v14;
    objc_msgSend(v9, "createEndPointCA:subjectIdentifier:reply:", v5, v6, v12);
    if (a3)
      *a3 = objc_retainAutorelease((id)v15[5]);
    v10 = (id)v21[5];
  }
  else
  {
    v10 = 0;
  }

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v20, 8);

  return v10;
}

void sub_20A065314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

BOOL SESEndPointDeleteCA(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  id *v5;
  void *v6;
  _BOOL8 v7;
  _QWORD v9[5];
  id obj;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v3 = a1;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__7;
  v15 = __Block_byref_object_dispose__7;
  v16 = 0;
  +[SESClient sharedClient]();
  v4 = (id *)objc_claimAutoreleasedReturnValue();
  v5 = (id *)(v12 + 5);
  obj = (id)v12[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v4, &obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v5, obj);

  if (v6 && !v12[5])
  {
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __SESEndPointDeleteCA_block_invoke;
    v9[3] = &unk_24C2BCCB0;
    v9[4] = &v11;
    objc_msgSend(v6, "deleteEndPointCA:reply:", v3, v9);
    if (a2)
      *a2 = objc_retainAutorelease((id)v12[5]);
    v7 = v12[5] == 0;
  }
  else
  {
    v7 = 0;
  }

  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_20A0654F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A0664FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20A06691C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20A066D34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20A066E2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20A067070(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 64));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20A0671F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_20A067394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_20A067660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void sub_20A0678CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A067B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_20A067E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A068380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A068670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_20A068748(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void SESEndPointPreWarmWithReply(void *a1)
{
  SESEndPointPreWarm(0, a1);
}

void SESEndPointPreWarm(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, id);
  id *v5;
  void *v6;
  id v7;
  id v8;

  v3 = a1;
  v4 = a2;
  +[SESClient sharedClient]();
  v5 = (id *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  -[SESClient remoteObjectProxyWithError:](v5, &v8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v8;
  if (v7)
    v4[2](v4, v7);
  else
    objc_msgSend(v6, "preWarm:reply:", v3, v4);

}

id SESEndPointList(_QWORD *a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[6];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__9;
  v20 = __Block_byref_object_dispose__9;
  v21 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__9;
  v14 = __Block_byref_object_dispose__9;
  v15 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v11 + 5);
  obj = (id)v11[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v11[5];
  if (v5)
  {
    v6 = 0;
    if (a1)
      *a1 = objc_retainAutorelease(v5);
  }
  else
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndPointList_block_invoke;
    v8[3] = &unk_24C2BCBF8;
    v8[4] = &v16;
    v8[5] = &v10;
    objc_msgSend(v4, "listEndPointsWithProxy:reply:", 0, v8);
    if (a1)
      *a1 = objc_retainAutorelease((id)v11[5]);
    v6 = (id)v17[5];
  }

  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v16, 8);

  return v6;
}

void sub_20A068A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

id SESEndPointFilterDigitalCarKeys(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[4];
  id v12;
  id v13;

  v3 = a1;
  v13 = 0;
  SESEndPointList(&v13);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v13;
  v6 = v5;
  if (v5)
  {
    v7 = 0;
    if (a2)
      *a2 = objc_retainAutorelease(v5);
  }
  else
  {
    objc_msgSend(v4, "filterMap:", &__block_literal_global_6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __SESEndPointFilterDigitalCarKeys_block_invoke_2;
    v11[3] = &unk_24C2BD430;
    v12 = v8;
    v9 = v8;
    objc_msgSend(v3, "filter:", v11);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

id SESEndPointListWithSession(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id *v7;
  id *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD v14[6];
  id obj;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v5 = a1;
  v6 = a2;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__9;
  v26 = __Block_byref_object_dispose__9;
  v27 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__9;
  v20 = __Block_byref_object_dispose__9;
  v21 = 0;
  +[SESClient sharedClient]();
  v7 = (id *)objc_claimAutoreleasedReturnValue();
  v8 = (id *)(v17 + 5);
  obj = (id)v17[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v7, &obj);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v8, obj);

  v10 = (void *)v17[5];
  if (v10)
  {
    v11 = 0;
    if (a3)
      *a3 = objc_retainAutorelease(v10);
  }
  else
  {
    +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v5, v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 3221225472;
    v14[2] = __SESEndPointListWithSession_block_invoke;
    v14[3] = &unk_24C2BCBF8;
    v14[4] = &v22;
    v14[5] = &v16;
    objc_msgSend(v9, "listEndPointsWithProxy:reply:", v12, v14);

    if (a3)
      *a3 = objc_retainAutorelease((id)v17[5]);
    v11 = (id)v23[5];
  }

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);

  return v11;
}

void sub_20A068E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreateForAlishaWithSession(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, _QWORD *a16)
{
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id *v29;
  id *v30;
  void *v31;
  id v32;
  id v33;
  BOOL v34;
  int v35;
  void *v36;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  _QWORD v47[6];
  id v48;
  uint64_t v49;
  id *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  id v60;

  v46 = a1;
  v45 = a2;
  v44 = a3;
  v43 = a4;
  v42 = a5;
  v41 = a6;
  v40 = a7;
  v39 = a8;
  v38 = a9;
  v23 = a10;
  v24 = a11;
  v25 = a12;
  v26 = a13;
  v27 = a14;
  v28 = a15;
  v55 = 0;
  v56 = &v55;
  v57 = 0x3032000000;
  v58 = __Block_byref_object_copy__9;
  v59 = __Block_byref_object_dispose__9;
  v60 = 0;
  v49 = 0;
  v50 = (id *)&v49;
  v51 = 0x3032000000;
  v52 = __Block_byref_object_copy__9;
  v53 = __Block_byref_object_dispose__9;
  v54 = 0;
  +[SESClient sharedClient]();
  v29 = (id *)objc_claimAutoreleasedReturnValue();
  v30 = v50;
  v48 = v50[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v29, &v48);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v30 + 5, v48);

  v32 = v50[5];
  if (v32)
  {
    v33 = 0;
    if (a16)
      *a16 = objc_retainAutorelease(v32);
  }
  else
  {
    if (v46)
      v34 = v45 == 0;
    else
      v34 = 1;
    v35 = !v34;
    if (v34)
    {
      v36 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v47[0] = MEMORY[0x24BDAC760];
    v47[1] = 3221225472;
    v47[2] = __SESEndPointCreateForAlishaWithSession_block_invoke;
    v47[3] = &unk_24C2BD458;
    v47[4] = &v55;
    v47[5] = &v49;
    objc_msgSend(v31, "createAlishaEndpointWithProxy:identifier:authorityIdentifier:subjectIdentifier:configuration:readerIdentifier:readerPublicKey:readerInformation:startDate:endDate:keyIdentifier:authorizedKeys:confidentialMailBoxSize:privateMailBoxSize:reply:", v36, v44, v43, v42, v41, v40, v39, v38, v23, v24, v25, v26, v27, v28, v47);
    if (v35)

    if (a16)
      *a16 = objc_retainAutorelease(v50[5]);
    v33 = (id)v56[5];
  }

  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v55, 8);

  return v33;
}

void sub_20A069224(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreateForHydraWithSession(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  BOOL v15;
  int v16;
  void *v17;
  _QWORD v19[6];
  id obj;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__9;
  v31 = __Block_byref_object_dispose__9;
  v32 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__9;
  v25 = __Block_byref_object_dispose__9;
  v26 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v22 + 5);
  obj = (id)v22[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v22[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    if (v7)
      v15 = v8 == 0;
    else
      v15 = 1;
    v16 = !v15;
    if (v15)
    {
      v17 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __SESEndPointCreateForHydraWithSession_block_invoke;
    v19[3] = &unk_24C2BD458;
    v19[4] = &v27;
    v19[5] = &v21;
    objc_msgSend(v12, "createHydraEndpointWithProxy:serverParams:reply:", v17, v9, v19);
    if (v16)

    if (a4)
      *a4 = objc_retainAutorelease((id)v22[5]);
    v14 = (id)v28[5];
  }

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);

  return v14;
}

void sub_20A0694AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreateForLyonHydraWithSession(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  BOOL v15;
  int v16;
  void *v17;
  _QWORD v19[6];
  id obj;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__9;
  v31 = __Block_byref_object_dispose__9;
  v32 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__9;
  v25 = __Block_byref_object_dispose__9;
  v26 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v22 + 5);
  obj = (id)v22[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v22[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    if (v7)
      v15 = v8 == 0;
    else
      v15 = 1;
    v16 = !v15;
    if (v15)
    {
      v17 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __SESEndPointCreateForLyonHydraWithSession_block_invoke;
    v19[3] = &unk_24C2BD458;
    v19[4] = &v27;
    v19[5] = &v21;
    objc_msgSend(v12, "createLyonHydraEndpointWithProxy:serverParams:reply:", v17, v9, v19);
    if (v16)

    if (a4)
      *a4 = objc_retainAutorelease((id)v22[5]);
    v14 = (id)v28[5];
  }

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);

  return v14;
}

void sub_20A069730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreateForHomeWithSession(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id *v13;
  id *v14;
  void *v15;
  void *v16;
  id v17;
  BOOL v18;
  int v19;
  void *v20;
  _QWORD v22[6];
  id obj;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = __Block_byref_object_copy__9;
  v34 = __Block_byref_object_dispose__9;
  v35 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__9;
  v28 = __Block_byref_object_dispose__9;
  v29 = 0;
  +[SESClient sharedClient]();
  v13 = (id *)objc_claimAutoreleasedReturnValue();
  v14 = (id *)(v25 + 5);
  obj = (id)v25[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v13, &obj);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v14, obj);

  v16 = (void *)v25[5];
  if (v16)
  {
    v17 = 0;
    if (a5)
      *a5 = objc_retainAutorelease(v16);
  }
  else
  {
    if (v9)
      v18 = v10 == 0;
    else
      v18 = 1;
    v19 = !v18;
    if (v18)
    {
      v20 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v9, v10);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __SESEndPointCreateForHomeWithSession_block_invoke;
    v22[3] = &unk_24C2BD458;
    v22[4] = &v30;
    v22[5] = &v24;
    objc_msgSend(v15, "createLocalEndpointWithProxy:readerIdentifier:readerPublicKey:reply:", v20, v11, v12, v22);
    if (v19)

    if (a5)
      *a5 = objc_retainAutorelease((id)v25[5]);
    v17 = (id)v31[5];
  }

  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v30, 8);

  return v17;
}

void sub_20A0699CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreateForLyonWithSession(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, _QWORD *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id *v19;
  id *v20;
  void *v21;
  void *v22;
  id v23;
  BOOL v24;
  int v25;
  void *v26;
  _QWORD v28[6];
  id obj;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v36 = 0;
  v37 = &v36;
  v38 = 0x3032000000;
  v39 = __Block_byref_object_copy__9;
  v40 = __Block_byref_object_dispose__9;
  v41 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = __Block_byref_object_copy__9;
  v34 = __Block_byref_object_dispose__9;
  v35 = 0;
  +[SESClient sharedClient]();
  v19 = (id *)objc_claimAutoreleasedReturnValue();
  v20 = (id *)(v31 + 5);
  obj = (id)v31[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v19, &obj);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v20, obj);

  v22 = (void *)v31[5];
  if (v22)
  {
    v23 = 0;
    if (a7)
      *a7 = objc_retainAutorelease(v22);
  }
  else
  {
    if (v13)
      v24 = v14 == 0;
    else
      v24 = 1;
    v25 = !v24;
    if (v24)
    {
      v26 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v13, v14);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = __SESEndPointCreateForLyonWithSession_block_invoke;
    v28[3] = &unk_24C2BD458;
    v28[4] = &v36;
    v28[5] = &v30;
    objc_msgSend(v21, "createLyonEndpointWithProxy:readerGroupIdentifier:readerPublicKey:homeUUID:privateMailboxSize:reply:", v26, v15, v16, v18, v17, v28);
    if (v25)

    if (a7)
      *a7 = objc_retainAutorelease((id)v31[5]);
    v23 = (id)v37[5];
  }

  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v36, 8);

  return v23;
}

void sub_20A069C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreate(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, _QWORD *a15)
{
  return SESEndPointCreateForAlishaWithSession(0, 0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15);
}

id SESEndPointCreateWithSession(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, _QWORD *a17)
{
  return SESEndPointCreateForAlishaWithSession(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a17);
}

id SESEndPointCreateNew(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, _QWORD *a16)
{
  return SESEndPointCreateForAlishaWithSession(0, 0, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a16);
}

id SESEndPointRevoke(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  id obj;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v31 = 0;
  v32 = &v31;
  v33 = 0x3032000000;
  v34 = __Block_byref_object_copy__9;
  v35 = __Block_byref_object_dispose__9;
  v36 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v32 + 5);
  obj = (id)v32[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v32[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = __Block_byref_object_copy__9;
    v28 = __Block_byref_object_dispose__9;
    v29 = 0;
    getEndpointQueue();
    v15 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __SESEndPointRevoke_block_invoke;
    block[3] = &unk_24C2BD480;
    v18 = v12;
    v19 = v7;
    v20 = v8;
    v21 = v9;
    v22 = &v24;
    v23 = &v31;
    dispatch_sync(v15, block);

    if (a4)
      *a4 = objc_retainAutorelease((id)v32[5]);
    v14 = (id)v25[5];

    _Block_object_dispose(&v24, 8);
  }

  _Block_object_dispose(&v31, 8);
  return v14;
}

void sub_20A06A008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

id getEndpointQueue()
{
  if (getEndpointQueue_onceToken != -1)
    dispatch_once(&getEndpointQueue_onceToken, &__block_literal_global_353);
  return (id)getEndpointQueue_endpointQueue;
}

id updateLyonCredentialDocumentStatusWithSession(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id *v18;
  id *v19;
  void *v20;
  void *v21;
  BOOL v22;
  int v23;
  void *v24;
  id v25;
  _QWORD v27[5];
  id obj;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a5;
  v17 = a7;
  v29 = 0;
  v30 = &v29;
  v31 = 0x3032000000;
  v32 = __Block_byref_object_copy__9;
  v33 = __Block_byref_object_dispose__9;
  v34 = 0;
  +[SESClient sharedClient]();
  v18 = (id *)objc_claimAutoreleasedReturnValue();
  v19 = (id *)(v30 + 5);
  obj = (id)v30[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v18, &obj);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v19, obj);

  v21 = (void *)v30[5];
  if (!v21)
  {
    if (v13)
      v22 = v14 == 0;
    else
      v22 = 1;
    v23 = !v22;
    if (v22)
    {
      v24 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v13, v14);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v27[0] = MEMORY[0x24BDAC760];
    v27[1] = 3221225472;
    v27[2] = __updateLyonCredentialDocumentStatusWithSession_block_invoke;
    v27[3] = &unk_24C2BCCB0;
    v27[4] = &v29;
    objc_msgSend(v20, "updateLyonCredentialDocumentStatusWithProxy:endpointIdentifier:accessDocumentPresent:accessDocumentSignedTimestamp:revocationDocumentPresent:revocationDocumentSignedTimestamp:reply:", v24, v15, a4, v16, a6, v17, v27);
    if (v23)

    v21 = (void *)v30[5];
  }
  v25 = v21;

  _Block_object_dispose(&v29, 8);
  return v25;
}

void sub_20A06A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __updateLyonCredentialDocumentStatusWithSession_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

BOOL SESEndPointRemoteTerminationRequestFromTSM(void *a1, void *a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id *v15;
  id *v16;
  void *v17;
  id v18;
  _BOOL8 v19;
  NSObject *v20;
  _QWORD block[4];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  id obj;
  uint64_t v39;
  id *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;

  v10 = a1;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v39 = 0;
  v40 = (id *)&v39;
  v41 = 0x3032000000;
  v42 = __Block_byref_object_copy__9;
  v43 = __Block_byref_object_dispose__9;
  v44 = 0;
  +[SESClient sharedClient]();
  v15 = (id *)objc_claimAutoreleasedReturnValue();
  v16 = v40;
  obj = v40[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v15, &obj);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v16 + 5, obj);

  v18 = v40[5];
  if (v18)
  {
    v19 = 0;
    if (a6)
      *a6 = objc_retainAutorelease(v18);
  }
  else
  {
    v32 = 0;
    v33 = &v32;
    v34 = 0x3032000000;
    v35 = __Block_byref_object_copy__9;
    v36 = __Block_byref_object_dispose__9;
    v37 = 0;
    getEndpointQueue();
    v20 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __SESEndPointRemoteTerminationRequestFromTSM_block_invoke;
    block[3] = &unk_24C2BD4A8;
    v24 = v17;
    v25 = v10;
    v26 = v11;
    v27 = v12;
    v28 = v13;
    v29 = v14;
    v30 = &v32;
    v31 = &v39;
    dispatch_sync(v20, block);

    if (a6)
      *a6 = objc_retainAutorelease(v40[5]);
    v19 = v33[5] != 0;

    _Block_object_dispose(&v32, 8);
  }

  _Block_object_dispose(&v39, 8);
  return v19;
}

void sub_20A06A578(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

BOOL SESEndPointDelete(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  id *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;
  _QWORD v10[5];
  id obj;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v3 = a1;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__9;
  v16 = __Block_byref_object_dispose__9;
  v17 = 0;
  +[SESClient sharedClient]();
  v4 = (id *)objc_claimAutoreleasedReturnValue();
  v5 = (id *)(v13 + 5);
  obj = (id)v13[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v4, &obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v5, obj);

  v7 = (void *)v13[5];
  if (v7)
  {
    v8 = 0;
    if (a2)
      *a2 = objc_retainAutorelease(v7);
  }
  else
  {
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __SESEndPointDelete_block_invoke;
    v10[3] = &unk_24C2BCCB0;
    v10[4] = &v12;
    objc_msgSend(v6, "deleteEndPointWithProxy:identifier:mustBeTerminated:reply:", 0, v3, 0, v10);
    if (a2)
      *a2 = objc_retainAutorelease((id)v13[5]);
    v8 = v13[5] == 0;
  }

  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_20A06A7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL SESEndPointDeleteWithSession(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  _BOOL8 v14;
  void *v15;
  _QWORD v17[5];
  id obj;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__9;
  v23 = __Block_byref_object_dispose__9;
  v24 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v20 + 5);
  obj = (id)v20[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v20[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __SESEndPointDeleteWithSession_block_invoke;
    v17[3] = &unk_24C2BCCB0;
    v17[4] = &v19;
    objc_msgSend(v12, "deleteEndPointWithProxy:identifier:mustBeTerminated:reply:", v15, v9, 1, v17);

    if (a4)
      *a4 = objc_retainAutorelease((id)v20[5]);
    v14 = v20[5] == 0;
  }

  _Block_object_dispose(&v19, 8);
  return v14;
}

void sub_20A06A9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointUpdate()
{
  void *v0;
  void *v1;

  SESDefaultLogObject();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id SESEndPointUpdateWithBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id *v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  id obj;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v3 = a1;
  v4 = a2;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__9;
  v22 = __Block_byref_object_dispose__9;
  v23 = 0;
  +[SESClient sharedClient]();
  v5 = (id *)objc_claimAutoreleasedReturnValue();
  v6 = (id *)(v19 + 5);
  obj = (id)v19[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v5, &obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v6, obj);

  v8 = (void *)v19[5];
  if (v8)
  {
    v9 = v8;
  }
  else
  {
    getEndpointQueue();
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __SESEndPointUpdateWithBlock_block_invoke;
    block[3] = &unk_24C2BD4F8;
    v13 = v7;
    v16 = &v18;
    v14 = v3;
    v15 = v4;
    dispatch_sync(v10, block);

    v9 = (id)v19[5];
  }

  _Block_object_dispose(&v18, 8);
  return v9;
}

void sub_20A06ABC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A06ADAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

BOOL SESEndPointConfigureMailBoxes(void *a1, void *a2, void *a3, _QWORD *a4)
{
  return SESEndPointConfigureWithProxy(0, a1, a2, a3, 0, 0, 0, 0, 0, 0, a4);
}

BOOL SESEndPointConfigureWithProxy(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, _QWORD *a11)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id *v24;
  id *v25;
  void *v26;
  id v27;
  void *v28;
  _BOOL8 v29;
  NSObject *v30;
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD block[4];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  uint64_t *v48;
  id v49;
  uint64_t v50;
  id *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v32 = a4;
  v35 = a5;
  v34 = a6;
  v33 = a7;
  v21 = a8;
  v22 = a9;
  v23 = a10;
  v50 = 0;
  v51 = (id *)&v50;
  v52 = 0x3032000000;
  v53 = __Block_byref_object_copy__9;
  v54 = __Block_byref_object_dispose__9;
  v55 = 0;
  +[SESClient sharedClient]();
  v24 = (id *)objc_claimAutoreleasedReturnValue();
  v25 = v51;
  v49 = v51[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v24, &v49);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v25 + 5, v49);

  v27 = v51[5];
  if (v27)
  {
    v28 = v32;
    v29 = 0;
    if (a11)
      *a11 = objc_retainAutorelease(v27);
  }
  else
  {
    getEndpointQueue();
    v30 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = __SESEndPointConfigureWithProxy_block_invoke;
    block[3] = &unk_24C2BD630;
    v37 = v26;
    v38 = v18;
    v39 = v19;
    v40 = v20;
    v28 = v32;
    v41 = v32;
    v42 = v34;
    v43 = v35;
    v44 = v21;
    v45 = v33;
    v46 = v22;
    v47 = v23;
    v48 = &v50;
    dispatch_sync(v30, block);

    if (a11)
      *a11 = objc_retainAutorelease(v51[5]);
    v29 = v51[5] == 0;

  }
  _Block_object_dispose(&v50, 8);

  return v29;
}

void sub_20A06B1A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL SESEndPointConfigureMailBoxesWithSession(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  _BOOL8 v15;

  if (a1 && a2)
  {
    v11 = a5;
    v12 = a4;
    v13 = a3;
    +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", a1, a2);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v15 = SESEndPointConfigureWithProxy(v14, v13, v12, v11, 0, 0, 0, 0, 0, 0, a6);

  }
  else
  {
    v12 = a5;
    v13 = a4;
    v14 = a3;
    v15 = SESEndPointConfigureWithProxy(0, v14, v13, v12, 0, 0, 0, 0, 0, 0, a6);
  }

  return v15;
}

BOOL SESEndPointConfigureNFCExpressInLPM(void *a1, void *a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  BOOL v13;
  int v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  uint8_t buf[4];
  _BOOL4 v20;
  __int16 v21;
  _BOOL4 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  SESDefaultLogObject();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    v20 = v9 != 0;
    v21 = 1024;
    v22 = v10 != 0;
    _os_log_impl(&dword_20A048000, v12, OS_LOG_TYPE_INFO, "session %d seid %d", buf, 0xEu);
  }

  if (v9)
    v13 = v10 == 0;
  else
    v13 = 1;
  v14 = !v13;
  if (v13)
  {
    v15 = 0;
  }
  else
  {
    +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v9, v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = SESEndPointConfigureWithProxy(v15, v11, 0, 0, 0, 0, 0, 0, 0, v16, a5);

  if (v14)
  return v17;
}

BOOL SESEndPointEnableVolatileVisibilityOnContactless(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, 0, v5, 0, 0, 0, 0, a2);

  return v6;
}

BOOL SESEndPointDisableVolatileVisibilityOnContactless(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, 0, v5, 0, 0, 0, 0, a2);

  return v6;
}

BOOL SESEndPointEnablePersistentVisibilityOnContactless(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, v5, 0, 0, 0, 0, 0, a2);

  return v6;
}

BOOL SESEndPointDisablePersistentVisibilityOnContactless(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, v5, 0, 0, 0, 0, 0, a2);

  return v6;
}

BOOL SESEndPointEnableVolatileVisibilityOnWired(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, 0, 0, 0, v5, 0, 0, a2);

  return v6;
}

BOOL SESEndPointDisableVolatileVisibilityOnWired(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, 0, 0, 0, v5, 0, 0, a2);

  return v6;
}

BOOL SESEndPointEnablePersistentVisibilityOnWired(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, 0, 0, v5, 0, 0, 0, a2);

  return v6;
}

BOOL SESEndPointDisablePersistentVisibilityOnWired(void *a1, _QWORD *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  v3 = (void *)MEMORY[0x24BDD16E0];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = SESEndPointConfigureWithProxy(0, v4, 0, 0, 0, 0, v5, 0, 0, 0, a2);

  return v6;
}

_QWORD *SESEndPointConfigureKeySlot(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;

  v5 = a1;
  v6 = a2;
  if (objc_msgSend(v6, "length") && (unint64_t)objc_msgSend(v6, "length") < 9)
  {
    a3 = (_QWORD *)SESEndPointConfigureWithProxy(0, v5, 0, 0, 0, 0, 0, 0, v6, 0, a3);
  }
  else if (a3)
  {
    SESDefaultLogObject();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a3 = (id)objc_claimAutoreleasedReturnValue();

    a3 = 0;
  }

  return a3;
}

BOOL SESEndPointSetPrivateData(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  return SESEndPointSetPrivateDataWithSession(0, 0, a1, a2, a3, a4);
}

BOOL SESEndPointSetPrivateDataWithSession(void *a1, void *a2, void *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  _BOOL8 v16;
  id *v17;
  id *v18;
  void *v19;
  void *v20;
  BOOL v21;
  int v22;
  void *v23;
  _QWORD v25[5];
  id obj;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  if ((v11 != 0) == (v12 != 0))
  {
    v27 = 0;
    v28 = &v27;
    v29 = 0x3032000000;
    v30 = __Block_byref_object_copy__9;
    v31 = __Block_byref_object_dispose__9;
    v32 = 0;
    +[SESClient sharedClient]();
    v17 = (id *)objc_claimAutoreleasedReturnValue();
    v18 = (id *)(v28 + 5);
    obj = (id)v28[5];
    -[SESClient synchronousRemoteObjectProxyWithError:](v17, &obj);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v18, obj);

    v20 = (void *)v28[5];
    if (v20)
    {
      v16 = 0;
      if (a6)
        *a6 = objc_retainAutorelease(v20);
    }
    else
    {
      if (v11)
        v21 = v12 == 0;
      else
        v21 = 1;
      v22 = !v21;
      if (v21)
      {
        v23 = 0;
      }
      else
      {
        +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v11, v12);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __SESEndPointSetPrivateDataWithSession_block_invoke;
      v25[3] = &unk_24C2BCCB0;
      v25[4] = &v27;
      objc_msgSend(v19, "setPrivateDataWithProxy:identifier:privateData:privateDataOffset:reply:", v23, v13, v14, a5, v25);
      if (v22)

      if (a6)
        *a6 = objc_retainAutorelease((id)v28[5]);
      v16 = v28[5] == 0;
    }

    _Block_object_dispose(&v27, 8);
  }
  else
  {
    if (a6)
    {
      SESDefaultLogObject();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a6 = (id)objc_claimAutoreleasedReturnValue();

    }
    v16 = 0;
  }

  return v16;
}

void sub_20A06BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointGetPrivateData(void *a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  return SESEndPointGetPrivateDataWithSession(0, 0, a1, a2, a3, a4);
}

id SESEndPointGetPrivateDataWithSession(void *a1, void *a2, void *a3, uint64_t a4, unsigned int a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id *v16;
  id *v17;
  void *v18;
  void *v19;
  BOOL v20;
  int v21;
  void *v22;
  unsigned int v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  id obj;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  if ((v11 != 0) == (v12 != 0))
  {
    v24 = a5;
    v33 = 0;
    v34 = &v33;
    v35 = 0x3032000000;
    v36 = __Block_byref_object_copy__9;
    v37 = __Block_byref_object_dispose__9;
    v38 = 0;
    +[SESClient sharedClient]();
    v16 = (id *)objc_claimAutoreleasedReturnValue();
    v17 = (id *)(v34 + 5);
    obj = (id)v34[5];
    -[SESClient synchronousRemoteObjectProxyWithError:](v16, &obj);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v17, obj);

    v19 = (void *)v34[5];
    if (v19)
    {
      v15 = 0;
      if (a6)
        *a6 = objc_retainAutorelease(v19);
    }
    else
    {
      v26 = 0;
      v27 = &v26;
      v28 = 0x3032000000;
      v29 = __Block_byref_object_copy__9;
      v30 = __Block_byref_object_dispose__9;
      v31 = 0;
      if (v11)
        v20 = v12 == 0;
      else
        v20 = 1;
      v21 = !v20;
      if (v20)
      {
        v22 = 0;
      }
      else
      {
        +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v11, v12);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v25[0] = MEMORY[0x24BDAC760];
      v25[1] = 3221225472;
      v25[2] = __SESEndPointGetPrivateDataWithSession_block_invoke;
      v25[3] = &unk_24C2BCD00;
      v25[4] = &v26;
      v25[5] = &v33;
      objc_msgSend(v18, "getPrivateDataWithProxy:identifier:privateDataOffset:privateDataLength:reply:", v22, v13, a4, v24, v25);
      if (v21)

      if (a6)
        *a6 = objc_retainAutorelease((id)v34[5]);
      v15 = (id)v27[5];
      _Block_object_dispose(&v26, 8);

    }
    _Block_object_dispose(&v33, 8);

  }
  else
  {
    if (a6)
    {
      SESDefaultLogObject();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      *a6 = (id)objc_claimAutoreleasedReturnValue();

    }
    v15 = 0;
  }

  return v15;
}

void sub_20A06BED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreateEncryptionKey(void *a1, _QWORD *a2)
{
  return SESEndPointCreateEncryptionKeyWithSession(a1, 0, 0, a2);
}

id SESEndPointCreateEncryptionKeyWithSession(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  BOOL v15;
  int v16;
  void *v17;
  _QWORD v19[6];
  id obj;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__9;
  v31 = __Block_byref_object_dispose__9;
  v32 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__9;
  v25 = __Block_byref_object_dispose__9;
  v26 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v28 + 5);
  obj = (id)v28[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v28[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    if (v8)
      v15 = v9 == 0;
    else
      v15 = 1;
    v16 = !v15;
    if (v15)
    {
      v17 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v8, v9);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __SESEndPointCreateEncryptionKeyWithSession_block_invoke;
    v19[3] = &unk_24C2BCD00;
    v19[4] = &v21;
    v19[5] = &v27;
    objc_msgSend(v12, "createEncryptionKeyEndPointWithProxy:identifier:reply:", v17, v7, v19);
    if (v16)

    if (a4)
      *a4 = objc_retainAutorelease((id)v28[5]);
    v14 = (id)v22[5];
  }

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);

  return v14;
}

void sub_20A06C170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL SESEndPointSetConfidentialData(void *a1, void *a2, void *a3, _QWORD *a4)
{
  return SESEndPointSetConfidentialDataWithOffset(a1, a2, a3, 0, a4);
}

BOOL SESEndPointSetConfidentialDataWithOffset(void *a1, void *a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id *v12;
  id *v13;
  void *v14;
  void *v15;
  _BOOL8 v16;
  _QWORD v18[5];
  id obj;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__9;
  v24 = __Block_byref_object_dispose__9;
  v25 = 0;
  +[SESClient sharedClient]();
  v12 = (id *)objc_claimAutoreleasedReturnValue();
  v13 = (id *)(v21 + 5);
  obj = (id)v21[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v12, &obj);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v13, obj);

  v15 = (void *)v21[5];
  if (v15)
  {
    v16 = 0;
    if (a5)
      *a5 = objc_retainAutorelease(v15);
  }
  else
  {
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __SESEndPointSetConfidentialDataWithOffset_block_invoke;
    v18[3] = &unk_24C2BCCB0;
    v18[4] = &v20;
    objc_msgSend(v14, "setConfidentialDataEndPointWithIdentifier:senderEphemeralPublicKey:encryptedData:offset:reply:", v9, v10, v11, a4, v18);
    if (a5)
      *a5 = objc_retainAutorelease((id)v21[5]);
    v16 = v21[5] == 0;
  }

  _Block_object_dispose(&v20, 8);
  return v16;
}

void sub_20A06C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL SESEndPointUpdateHydraMailboxes(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id *v13;
  id *v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  BOOL v18;
  int v19;
  void *v20;
  _QWORD v22[5];
  id obj;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__9;
  v28 = __Block_byref_object_dispose__9;
  v29 = 0;
  +[SESClient sharedClient]();
  v13 = (id *)objc_claimAutoreleasedReturnValue();
  v14 = (id *)(v25 + 5);
  obj = (id)v25[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v13, &obj);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v14, obj);

  v16 = (void *)v25[5];
  if (v16)
  {
    v17 = 0;
    if (a5)
      *a5 = objc_retainAutorelease(v16);
  }
  else
  {
    if (v10)
      v18 = v11 == 0;
    else
      v18 = 1;
    v19 = !v18;
    if (v18)
    {
      v20 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v10, v11);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 3221225472;
    v22[2] = __SESEndPointUpdateHydraMailboxes_block_invoke;
    v22[3] = &unk_24C2BCCB0;
    v22[4] = &v24;
    objc_msgSend(v15, "updateHydraMailboxesWithProxy:identifier:encryptedSEBlob:reply:", v20, v9, v12, v22);
    if (v19)

    if (a5)
      *a5 = objc_retainAutorelease((id)v25[5]);
    v17 = v25[5] == 0;
  }

  _Block_object_dispose(&v24, 8);
  return v17;
}

void sub_20A06C590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointSignDataWithAuth(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v16[6];
  id obj;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__9;
  v28 = __Block_byref_object_dispose__9;
  v29 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__9;
  v22 = __Block_byref_object_dispose__9;
  v23 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v25 + 5);
  obj = (id)v25[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v25[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __SESEndPointSignDataWithAuth_block_invoke;
    v16[3] = &unk_24C2BD520;
    v16[4] = &v18;
    v16[5] = &v24;
    objc_msgSend(v12, "signatureWithEndPointIdentifier:metaDataHash:authorization:reply:", v7, v8, v9, v16);
    if (a4)
      *a4 = objc_retainAutorelease((id)v25[5]);
    v14 = (id)v19[5];
  }

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v24, 8);

  return v14;
}

void sub_20A06C77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointSignISO18013DataWithAuth(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id *v7;
  id *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v13[6];
  id obj;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v5 = a1;
  v6 = a2;
  v21 = 0;
  v22 = (id *)&v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__9;
  v25 = __Block_byref_object_dispose__9;
  v26 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__9;
  v19 = __Block_byref_object_dispose__9;
  v20 = 0;
  +[SESClient sharedClient]();
  v7 = (id *)objc_claimAutoreleasedReturnValue();
  v8 = v22;
  obj = v22[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v7, &obj);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v8 + 5, obj);

  v10 = v22[5];
  if (v10)
  {
    v11 = 0;
    if (a3)
      *a3 = objc_retainAutorelease(v10);
  }
  else
  {
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __SESEndPointSignISO18013DataWithAuth_block_invoke;
    v13[3] = &unk_24C2BD520;
    v13[4] = &v15;
    v13[5] = &v21;
    objc_msgSend(v9, "signatureISO18013WithEndPointIdentifier:toBeSigned:reply:", v5, v6, v13);
    if (a3)
      *a3 = objc_retainAutorelease(v22[5]);
    v11 = (id)v16[5];
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);

  return v11;
}

void sub_20A06C9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id SESEndPointCreateAuthorizationID(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id *v7;
  id *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v13[6];
  id obj;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v5 = a1;
  v6 = a2;
  v21 = 0;
  v22 = (id *)&v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__9;
  v25 = __Block_byref_object_dispose__9;
  v26 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__9;
  v19 = __Block_byref_object_dispose__9;
  v20 = 0;
  +[SESClient sharedClient]();
  v7 = (id *)objc_claimAutoreleasedReturnValue();
  v8 = v22;
  obj = v22[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v7, &obj);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v8 + 5, obj);

  v10 = v22[5];
  if (v10)
  {
    v11 = 0;
    if (a3)
      *a3 = objc_retainAutorelease(v10);
  }
  else
  {
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __SESEndPointCreateAuthorizationID_block_invoke;
    v13[3] = &unk_24C2BD548;
    v13[4] = &v15;
    v13[5] = &v21;
    objc_msgSend(v9, "createEndPointAuthorizationID:userAuth:reply:", v5, v6, v13);
    if (a3)
      *a3 = objc_retainAutorelease(v22[5]);
    v11 = (id)v16[5];
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);

  return v11;
}

void sub_20A06CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id SESEndPointListAuthorizations(_QWORD *a1)
{
  id *v2;
  id *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v8[6];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v16 = 0;
  v17 = (id *)&v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__9;
  v20 = __Block_byref_object_dispose__9;
  v21 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__9;
  v14 = __Block_byref_object_dispose__9;
  v15 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = v17;
  obj = v17[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3 + 5, obj);

  v5 = v17[5];
  if (v5)
  {
    v6 = 0;
    if (a1)
      *a1 = objc_retainAutorelease(v5);
  }
  else
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndPointListAuthorizations_block_invoke;
    v8[3] = &unk_24C2BCBF8;
    v8[4] = &v10;
    v8[5] = &v16;
    objc_msgSend(v4, "listEndPointAuthorizations:", v8);
    if (a1)
      *a1 = objc_retainAutorelease(v17[5]);
    v6 = (id)v11[5];
  }

  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v16, 8);

  return v6;
}

void sub_20A06CDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id SESEndPointDeleteAuthorizationID(void *a1)
{
  id v1;
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__9;
  v14 = __Block_byref_object_dispose__9;
  v15 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v11 + 5);
  obj = (id)v11[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v11[5];
  if (!v5)
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndPointDeleteAuthorizationID_block_invoke;
    v8[3] = &unk_24C2BCCB0;
    v8[4] = &v10;
    objc_msgSend(v4, "deleteEndPointAuthorizationID:reply:", v1, v8);
    v5 = (void *)v11[5];
  }
  v6 = v5;

  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_20A06CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointAuthorizeWithAuth(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, __int16 a7, __int16 a8, void *a9, void *a10, _QWORD *a11)
{
  int v12;

  HIWORD(v12) = a8;
  LOWORD(v12) = a7;
  return SESEndPointAuthorizeWithSession(0, 0, 1u, a1, a2, a3, a4, a5, a6, 0, v12, a9, a10, a11);
}

id SESEndPointAuthorizeWithSession(void *a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, int a11, void *a12, void *a13, _QWORD *a14)
{
  id v20;
  id v21;
  id v22;
  id v23;
  id *v24;
  id *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  BOOL v32;
  int v33;
  void *v34;
  void *v35;
  uint64_t v37;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[6];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  id v52;
  id v53;
  uint64_t v54;
  id *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t);
  id v59;

  v41 = a1;
  v40 = a2;
  v20 = a4;
  v39 = a5;
  v45 = a6;
  v44 = a7;
  v43 = a8;
  v42 = a9;
  v21 = a10;
  v22 = a12;
  v23 = a13;
  v54 = 0;
  v55 = (id *)&v54;
  v56 = 0x3032000000;
  v57 = __Block_byref_object_copy__9;
  v58 = __Block_byref_object_dispose__9;
  v59 = 0;
  +[SESClient sharedClient]();
  v24 = (id *)objc_claimAutoreleasedReturnValue();
  v25 = v55;
  v53 = v55[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v24, &v53);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v25 + 5, v53);

  v27 = v55[5];
  if (v27)
  {
    v28 = v20;
    v29 = 0;
    if (a14)
      *a14 = objc_retainAutorelease(v27);
    v30 = v40;
    v31 = v41;
    v34 = v39;
  }
  else
  {
    v47 = 0;
    v48 = &v47;
    v49 = 0x3032000000;
    v50 = __Block_byref_object_copy__9;
    v51 = __Block_byref_object_dispose__9;
    v52 = 0;
    v30 = v40;
    v31 = v41;
    if (v41)
      v32 = v40 == 0;
    else
      v32 = 1;
    v33 = !v32;
    v28 = v20;
    if (v32)
    {
      v35 = 0;
      v34 = v39;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v41, v40);
      v34 = v39;
      v35 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v46[0] = MEMORY[0x24BDAC760];
    v46[1] = 3221225472;
    v46[2] = __SESEndPointAuthorizeWithSession_block_invoke;
    v46[3] = &unk_24C2BD570;
    v46[4] = &v47;
    v46[5] = &v54;
    LODWORD(v37) = a11;
    objc_msgSend(v26, "authorizeEndPointWithProxy:version:identifier:externalCA:instanceCA:endpointCertificate:encryptionKeyAttestation:bindingAttestation:bindingAttestationToken:confidentialDataOffset:confidentialDataLength:metaData:authorizationID:reply:", v35, a3, v28, v34, v45, v44, v43, v42, v21, v37, v22, v23, v46);
    if (v33)

    if (a14)
      *a14 = objc_retainAutorelease(v55[5]);
    v29 = (id)v48[5];
    _Block_object_dispose(&v47, 8);

  }
  _Block_object_dispose(&v54, 8);

  return v29;
}

void sub_20A06D324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 152), 8);
  _Unwind_Resume(a1);
}

id SESEndPointAuthorizeWithAuthEx(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, __int16 a8, __int16 a9, void *a10, void *a11, _QWORD *a12)
{
  int v13;

  HIWORD(v13) = a9;
  LOWORD(v13) = a8;
  return SESEndPointAuthorizeWithSession(0, 0, 1u, a1, a2, a3, a4, a5, a6, a7, v13, a10, a11, a12);
}

id SESEndpointPreAuthorizeWithSession(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id *v11;
  id *v12;
  void *v13;
  void *v14;
  BOOL v15;
  int v16;
  void *v17;
  id v18;
  _QWORD v20[5];
  id obj;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__9;
  v26 = __Block_byref_object_dispose__9;
  v27 = 0;
  +[SESClient sharedClient]();
  v11 = (id *)objc_claimAutoreleasedReturnValue();
  v12 = (id *)(v23 + 5);
  obj = (id)v23[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v11, &obj);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v12, obj);

  v14 = (void *)v23[5];
  if (!v14)
  {
    if (v7)
      v15 = v8 == 0;
    else
      v15 = 1;
    v16 = !v15;
    if (v15)
    {
      v17 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __SESEndpointPreAuthorizeWithSession_block_invoke;
    v20[3] = &unk_24C2BCCB0;
    v20[4] = &v22;
    objc_msgSend(v13, "preAuthorizeEndpointWithProxy:keyIdentifier:bindingAttestation:reply:", v17, v9, v10, v20);
    if (v16)

    v14 = (void *)v23[5];
  }
  v18 = v14;

  _Block_object_dispose(&v22, 8);
  return v18;
}

void sub_20A06D558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointPrivacyEncryption(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id *v7;
  id *v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v13[6];
  id obj;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v5 = a1;
  v6 = a2;
  v21 = 0;
  v22 = (id *)&v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__9;
  v25 = __Block_byref_object_dispose__9;
  v26 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x3032000000;
  v18 = __Block_byref_object_copy__9;
  v19 = __Block_byref_object_dispose__9;
  v20 = 0;
  +[SESClient sharedClient]();
  v7 = (id *)objc_claimAutoreleasedReturnValue();
  v8 = v22;
  obj = v22[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v7, &obj);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v8 + 5, obj);

  v10 = v22[5];
  if (v10)
  {
    v11 = 0;
    if (a3)
      *a3 = objc_retainAutorelease(v10);
  }
  else
  {
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = __SESEndPointPrivacyEncryption_block_invoke;
    v13[3] = &unk_24C2BD598;
    v13[4] = &v15;
    v13[5] = &v21;
    objc_msgSend(v9, "privacyEncryptDataWithEndPoint:data:reply:", v5, v6, v13);
    if (a3)
      *a3 = objc_retainAutorelease(v22[5]);
    v11 = (id)v16[5];
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);

  return v11;
}

void sub_20A06D78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id SESEndPointPrivacyDecryption(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id *v11;
  id *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v18;
  _QWORD v19[6];
  id obj;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = v9;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__9;
  v31 = __Block_byref_object_dispose__9;
  v32 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = __Block_byref_object_copy__9;
  v25 = __Block_byref_object_dispose__9;
  v26 = 0;
  if (v7 && v8 && v9)
  {
    +[SESClient sharedClient]();
    v11 = (id *)objc_claimAutoreleasedReturnValue();
    v12 = (id *)(v28 + 5);
    obj = (id)v28[5];
    -[SESClient synchronousRemoteObjectProxyWithError:](v11, &obj);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v12, obj);

    v14 = (void *)v28[5];
    if (!v14)
    {
      v19[0] = MEMORY[0x24BDAC760];
      v19[1] = 3221225472;
      v19[2] = __SESEndPointPrivacyDecryption_block_invoke;
      v19[3] = &unk_24C2BCD00;
      v19[4] = &v21;
      v19[5] = &v27;
      objc_msgSend(v13, "privacyDecryptDataWithEndPoint:data:ephemeralPublicKey:reply:", v7, v8, v10, v19);
      if (a4)
        *a4 = objc_retainAutorelease((id)v28[5]);
      v15 = (id)v22[5];
      goto LABEL_14;
    }
    if (a4)
    {
      v15 = 0;
      *a4 = objc_retainAutorelease(v14);
LABEL_14:

      goto LABEL_15;
    }
LABEL_9:
    v15 = 0;
    goto LABEL_14;
  }
  if (a4)
  {
    SESDefaultLogObject();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "asHexString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "asHexString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_9;
  }
  v15 = 0;
LABEL_15:
  _Block_object_dispose(&v21, 8);

  _Block_object_dispose(&v27, 8);
  return v15;
}

void sub_20A06DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointGetInvitations(_QWORD *a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;
  id obj;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__9;
  v20 = __Block_byref_object_dispose__9;
  v21 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v17 + 5);
  obj = (id)v17[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v17[5];
  if (v5)
  {
    v6 = 0;
    if (a1)
      *a1 = objc_retainAutorelease(v5);
  }
  else
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = __Block_byref_object_copy__9;
    v13 = __Block_byref_object_dispose__9;
    v14 = 0;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndPointGetInvitations_block_invoke;
    v8[3] = &unk_24C2BCBF8;
    v8[4] = &v16;
    v8[5] = &v9;
    objc_msgSend(v4, "getInvitations:", v8);
    if (a1)
      *a1 = objc_retainAutorelease((id)v17[5]);
    v6 = (id)v10[5];
    _Block_object_dispose(&v9, 8);

  }
  _Block_object_dispose(&v16, 8);

  return v6;
}

void sub_20A06DC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointGetInvitationWithId(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  id *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  id obj;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v3 = a1;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__9;
  v22 = __Block_byref_object_dispose__9;
  v23 = 0;
  +[SESClient sharedClient]();
  v4 = (id *)objc_claimAutoreleasedReturnValue();
  v5 = (id *)(v19 + 5);
  obj = (id)v19[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v4, &obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v5, obj);

  v7 = (void *)v19[5];
  if (v7)
  {
    v8 = 0;
    if (a2)
      *a2 = objc_retainAutorelease(v7);
  }
  else
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x3032000000;
    v14 = __Block_byref_object_copy__9;
    v15 = __Block_byref_object_dispose__9;
    v16 = 0;
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __SESEndPointGetInvitationWithId_block_invoke;
    v10[3] = &unk_24C2BCD00;
    v10[4] = &v18;
    v10[5] = &v11;
    objc_msgSend(v6, "getInvitationWithId:reply:", v3, v10);
    if (a2)
      *a2 = objc_retainAutorelease((id)v19[5]);
    v8 = (id)v12[5];
    _Block_object_dispose(&v11, 8);

  }
  _Block_object_dispose(&v18, 8);

  return v8;
}

void sub_20A06DEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointAddInvitationWithId(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  id obj;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = a2;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__9;
  v17 = __Block_byref_object_dispose__9;
  v18 = 0;
  +[SESClient sharedClient]();
  v5 = (id *)objc_claimAutoreleasedReturnValue();
  v6 = (id *)(v14 + 5);
  obj = (id)v14[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v5, &obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v6, obj);

  v8 = (void *)v14[5];
  if (!v8)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __SESEndPointAddInvitationWithId_block_invoke;
    v11[3] = &unk_24C2BCCB0;
    v11[4] = &v13;
    objc_msgSend(v7, "addInvitationWithId:data:reply:", v3, v4, v11);
    v8 = (void *)v14[5];
  }
  v9 = v8;

  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_20A06E074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointDeleteInvitationWithId(void *a1)
{
  id v1;
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__9;
  v14 = __Block_byref_object_dispose__9;
  v15 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v11 + 5);
  obj = (id)v11[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v11[5];
  if (!v5)
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndPointDeleteInvitationWithId_block_invoke;
    v8[3] = &unk_24C2BCCB0;
    v8[4] = &v10;
    objc_msgSend(v4, "deleteInvitationWithId:reply:", v1, v8);
    v5 = (void *)v11[5];
  }
  v6 = v5;

  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_20A06E1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointGetEndpointIdWithUuid(void *a1, _QWORD *a2)
{
  id v3;
  id *v4;
  id *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  id obj;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;

  v3 = a1;
  v18 = 0;
  v19 = &v18;
  v20 = 0x3032000000;
  v21 = __Block_byref_object_copy__9;
  v22 = __Block_byref_object_dispose__9;
  v23 = 0;
  +[SESClient sharedClient]();
  v4 = (id *)objc_claimAutoreleasedReturnValue();
  v5 = (id *)(v19 + 5);
  obj = (id)v19[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v4, &obj);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v5, obj);

  v7 = (void *)v19[5];
  if (v7)
  {
    v8 = 0;
    if (a2)
      *a2 = objc_retainAutorelease(v7);
  }
  else
  {
    v11 = 0;
    v12 = &v11;
    v13 = 0x3032000000;
    v14 = __Block_byref_object_copy__9;
    v15 = __Block_byref_object_dispose__9;
    v16 = 0;
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = __SESEndPointGetEndpointIdWithUuid_block_invoke;
    v10[3] = &unk_24C2BD5C0;
    v10[4] = &v11;
    v10[5] = &v18;
    objc_msgSend(v6, "getEndpointIdWithUuid:reply:", v3, v10);
    if (a2)
      *a2 = objc_retainAutorelease((id)v19[5]);
    v8 = (id)v12[5];
    _Block_object_dispose(&v11, 8);

  }
  _Block_object_dispose(&v18, 8);

  return v8;
}

void sub_20A06E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointAddEndpointIdWithUuid(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  id obj;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = a2;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__9;
  v17 = __Block_byref_object_dispose__9;
  v18 = 0;
  +[SESClient sharedClient]();
  v5 = (id *)objc_claimAutoreleasedReturnValue();
  v6 = (id *)(v14 + 5);
  obj = (id)v14[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v5, &obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v6, obj);

  v8 = (void *)v14[5];
  if (!v8)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __SESEndPointAddEndpointIdWithUuid_block_invoke;
    v11[3] = &unk_24C2BCCB0;
    v11[4] = &v13;
    objc_msgSend(v7, "addEndpointId:withUuid:reply:", v3, v4, v11);
    v8 = (void *)v14[5];
  }
  v9 = v8;

  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_20A06E548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndPointDeleteEndpointIdWithUuid(void *a1)
{
  id v1;
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__9;
  v14 = __Block_byref_object_dispose__9;
  v15 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v11 + 5);
  obj = (id)v11[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v11[5];
  if (!v5)
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndPointDeleteEndpointIdWithUuid_block_invoke;
    v8[3] = &unk_24C2BCCB0;
    v8[4] = &v10;
    objc_msgSend(v4, "deleteEndpointIdWithUuid:reply:", v1, v8);
    v5 = (void *)v11[5];
  }
  v6 = v5;

  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_20A06E68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndpointGetBindingAttestationRequestWithSession(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  BOOL v15;
  int v16;
  void *v17;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  id obj;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__9;
  v31 = __Block_byref_object_dispose__9;
  v32 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v28 + 5);
  obj = (id)v28[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v28[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = __Block_byref_object_copy__9;
    v24 = __Block_byref_object_dispose__9;
    v25 = 0;
    if (v7)
      v15 = v8 == 0;
    else
      v15 = 1;
    v16 = !v15;
    if (v15)
    {
      v17 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __SESEndpointGetBindingAttestationRequestWithSession_block_invoke;
    v19[3] = &unk_24C2BD5E8;
    v19[4] = &v20;
    v19[5] = &v27;
    objc_msgSend(v12, "getEndpointBindingAttestationRequestWithProxy:authorityIdentifier:reply:", v17, v9, v19);
    if (v16)

    if (a4)
      *a4 = objc_retainAutorelease((id)v28[5]);
    v14 = (id)v21[5];
    _Block_object_dispose(&v20, 8);

  }
  _Block_object_dispose(&v27, 8);

  return v14;
}

void sub_20A06E8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointIsCarKeySupported(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  id obj;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__9;
  v28 = __Block_byref_object_dispose__9;
  v29 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v25 + 5);
  obj = (id)v25[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v25[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    v17 = 0;
    v18 = &v17;
    v19 = 0x3032000000;
    v20 = __Block_byref_object_copy__9;
    v21 = __Block_byref_object_dispose__9;
    v22 = 0;
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 3221225472;
    v16[2] = __SESEndPointIsCarKeySupported_block_invoke;
    v16[3] = &unk_24C2BCF68;
    v16[4] = &v17;
    v16[5] = &v24;
    objc_msgSend(v12, "isCarKeySupported:brand:uuid:reply:", v7, v8, v9, v16);
    if (a4)
      *a4 = objc_retainAutorelease((id)v25[5]);
    v14 = (id)v18[5];
    _Block_object_dispose(&v17, 8);

  }
  _Block_object_dispose(&v24, 8);

  return v14;
}

void sub_20A06EB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointGetCAGeneralStatisticsInfo(_QWORD *a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;
  id obj;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__9;
  v20 = __Block_byref_object_dispose__9;
  v21 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v17 + 5);
  obj = (id)v17[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v17[5];
  if (v5)
  {
    v6 = 0;
    if (a1)
      *a1 = objc_retainAutorelease(v5);
  }
  else
  {
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = __Block_byref_object_copy__9;
    v13 = __Block_byref_object_dispose__9;
    v14 = 0;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndPointGetCAGeneralStatisticsInfo_block_invoke;
    v8[3] = &unk_24C2BD3C0;
    v8[4] = &v9;
    v8[5] = &v16;
    objc_msgSend(v4, "getCAGeneralStatisticsInfo:", v8);
    if (a1)
      *a1 = objc_retainAutorelease((id)v17[5]);
    v6 = (id)v10[5];
    _Block_object_dispose(&v9, 8);

  }
  _Block_object_dispose(&v16, 8);

  return v6;
}

void sub_20A06ED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointTriggerHeadUnitPairing(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  id obj;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = a2;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__9;
  v17 = __Block_byref_object_dispose__9;
  v18 = 0;
  +[SESClient sharedClient]();
  v5 = (id *)objc_claimAutoreleasedReturnValue();
  v6 = (id *)(v14 + 5);
  obj = (id)v14[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v5, &obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v6, obj);

  v8 = (void *)v14[5];
  if (!v8)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __SESEndPointTriggerHeadUnitPairing_block_invoke;
    v11[3] = &unk_24C2BCCB0;
    v11[4] = &v13;
    objc_msgSend(v7, "triggerHeadUnitPairing:data:reply:", v3, v4, v11);
    v8 = (void *)v14[5];
  }
  v9 = v8;

  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_20A06EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndpointSendDeviceIntent(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  id obj;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v3 = a1;
  v4 = a2;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__9;
  v17 = __Block_byref_object_dispose__9;
  v18 = 0;
  +[SESClient sharedClient]();
  v5 = (id *)objc_claimAutoreleasedReturnValue();
  v6 = (id *)(v14 + 5);
  obj = (id)v14[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v5, &obj);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v6, obj);

  v8 = (void *)v14[5];
  if (!v8)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = __SESEndpointSendDeviceIntent_block_invoke;
    v11[3] = &unk_24C2BCCB0;
    v11[4] = &v13;
    objc_msgSend(v7, "sendDeviceIntentWithConfidence:keyIdentifier:reply:", v3, v4, v11);
    v8 = (void *)v14[5];
  }
  v9 = v8;

  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_20A06F05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndpointConvertWithSession(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id *v11;
  id *v12;
  void *v13;
  void *v14;
  BOOL v15;
  int v16;
  void *v17;
  id v18;
  _QWORD v20[5];
  id obj;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__9;
  v26 = __Block_byref_object_dispose__9;
  v27 = 0;
  +[SESClient sharedClient]();
  v11 = (id *)objc_claimAutoreleasedReturnValue();
  v12 = (id *)(v23 + 5);
  obj = (id)v23[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v11, &obj);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v12, obj);

  v14 = (void *)v23[5];
  if (!v14)
  {
    if (v7)
      v15 = v8 == 0;
    else
      v15 = 1;
    v16 = !v15;
    if (v15)
    {
      v17 = 0;
    }
    else
    {
      +[SEProxy withSession:seid:](SEProxy, "withSession:seid:", v7, v8);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v20[0] = MEMORY[0x24BDAC760];
    v20[1] = 3221225472;
    v20[2] = __SESEndpointConvertWithSession_block_invoke;
    v20[3] = &unk_24C2BCCB0;
    v20[4] = &v22;
    objc_msgSend(v13, "convertEndpointWithProxy:keyIdentifier:notBeforeDate:reply:", v17, v9, v10, v20);
    if (v16)

    v14 = (void *)v23[5];
  }
  v18 = v14;

  _Block_object_dispose(&v22, 8);
  return v18;
}

void sub_20A06F224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndpointNotifyTracked(void *a1)
{
  id v1;
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__9;
  v14 = __Block_byref_object_dispose__9;
  v15 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v11 + 5);
  obj = (id)v11[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v11[5];
  if (!v5)
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndpointNotifyTracked_block_invoke;
    v8[3] = &unk_24C2BCCB0;
    v8[4] = &v10;
    objc_msgSend(v4, "notifyEndpointTracked:reply:", v1, v8);
    v5 = (void *)v11[5];
  }
  v6 = v5;

  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_20A06F368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndpointNotifyPassAdded(void *a1)
{
  id v1;
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  id obj;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v1 = a1;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__9;
  v14 = __Block_byref_object_dispose__9;
  v15 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v11 + 5);
  obj = (id)v11[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v11[5];
  if (!v5)
  {
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 3221225472;
    v8[2] = __SESEndpointNotifyPassAdded_block_invoke;
    v8[3] = &unk_24C2BCCB0;
    v8[4] = &v10;
    objc_msgSend(v4, "notifyPassAdded:reply:", v1, v8);
    v5 = (void *)v11[5];
  }
  v6 = v5;

  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_20A06F4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id SESEndpointGetSupportedLyonVersions(_QWORD *a1)
{
  id *v2;
  id *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  id obj;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__9;
  v21 = __Block_byref_object_dispose__9;
  v22 = 0;
  +[SESClient sharedClient]();
  v2 = (id *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v18 + 5);
  obj = (id)v18[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v2, &obj);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v3, obj);

  v5 = (void *)v18[5];
  if (v5)
  {
    v6 = 0;
    if (a1)
      *a1 = objc_retainAutorelease(v5);
  }
  else
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x3032000000;
    v13 = __Block_byref_object_copy__9;
    v14 = __Block_byref_object_dispose__9;
    v15 = 0;
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __SESEndpointGetSupportedLyonVersions_block_invoke;
    v9[3] = &unk_24C2BD3C0;
    v9[4] = &v10;
    v9[5] = &v17;
    objc_msgSend(v4, "getSupportedLyonVersionsWithReply:", v9);
    v7 = (void *)v18[5];
    if (v7)
    {
      v6 = 0;
      if (a1)
        *a1 = objc_retainAutorelease(v7);
    }
    else
    {
      v6 = (id)v11[5];
    }
    _Block_object_dispose(&v10, 8);

  }
  _Block_object_dispose(&v17, 8);

  return v6;
}

void sub_20A06F660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

SESKeyPair *SESEndPointCreateKeyPair(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;
  __SecKey *v5;
  __SecKey *v6;
  CFErrorRef v7;
  CFDataRef v8;
  void *v9;
  SESKeyPair *v10;
  void *v11;
  void *v12;
  SESKeyPair *v13;
  CFErrorRef error;
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  error = 0;
  v2 = *MEMORY[0x24BDE9060];
  v3 = *MEMORY[0x24BDE9048];
  v16[0] = *MEMORY[0x24BDE9050];
  v16[1] = v3;
  v17[0] = v2;
  v17[1] = &unk_24C2CB770;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v5 = SecKeyCreateRandomKey(v4, &error);
  v6 = v5;
  v7 = error;
  if (!error && v5)
  {
    v8 = SecKeyCopyExternalRepresentation(v5, &error);
    v9 = v8;
    v7 = error;
    if (error || !v8)
    {
      if (a1)
      {
        SESDefaultLogObject();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
        SESCreateAndLogError();
        v13 = 0;
        *a1 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_15;
      }
    }
    else
    {
      if (-[__CFData length](v8, "length") == 97)
      {
        v10 = [SESKeyPair alloc];
        objc_msgSend(v9, "subdataWithRange:", 0, 65);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "subdataWithRange:", 65, 32);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = -[SESKeyPair initWithPublicKey:secretKey:](v10, "initWithPublicKey:secretKey:", v11, v12);

LABEL_15:
        goto LABEL_17;
      }
      if (a1)
      {
        SESDefaultLogObject();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "length");
        goto LABEL_14;
      }
    }
    v13 = 0;
    goto LABEL_17;
  }
  if (a1)
  {
    SESDefaultLogObject();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    v13 = 0;
    *a1 = (id)objc_claimAutoreleasedReturnValue();
LABEL_17:

    goto LABEL_18;
  }
  v13 = 0;
LABEL_18:

  return v13;
}

id SESEndPointPrivacyEncryptionWithManufacturer(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id *v13;
  id *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  id obj;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__9;
  v31 = __Block_byref_object_dispose__9;
  v32 = 0;
  +[SESClient sharedClient]();
  v13 = (id *)objc_claimAutoreleasedReturnValue();
  v14 = (id *)(v28 + 5);
  obj = (id)v28[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v13, &obj);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v14, obj);

  v16 = (void *)v28[5];
  if (v16)
  {
    v17 = 0;
    if (a5)
      *a5 = objc_retainAutorelease(v16);
  }
  else
  {
    v20 = 0;
    v21 = &v20;
    v22 = 0x3032000000;
    v23 = __Block_byref_object_copy__9;
    v24 = __Block_byref_object_dispose__9;
    v25 = 0;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 3221225472;
    v19[2] = __SESEndPointPrivacyEncryptionWithManufacturer_block_invoke;
    v19[3] = &unk_24C2BD598;
    v19[4] = &v20;
    v19[5] = &v27;
    objc_msgSend(v15, "privacyEncryptDataWithManufacturer:environment:region:data:reply:", v9, v10, v11, v12, v19);
    if (a5)
      *a5 = objc_retainAutorelease((id)v28[5]);
    v17 = (id)v21[5];
    _Block_object_dispose(&v20, 8);

  }
  _Block_object_dispose(&v27, 8);

  return v17;
}

void sub_20A06FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESEndPointPrivacyDecryptionWithKeyPair(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  id obj;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v26 = 0;
  v27 = &v26;
  v28 = 0x3032000000;
  v29 = __Block_byref_object_copy__9;
  v30 = __Block_byref_object_dispose__9;
  v31 = 0;
  +[SESClient sharedClient]();
  v10 = (id *)objc_claimAutoreleasedReturnValue();
  v11 = (id *)(v27 + 5);
  obj = (id)v27[5];
  -[SESClient synchronousRemoteObjectProxyWithError:](v10, &obj);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(v11, obj);

  v13 = (void *)v27[5];
  if (v13)
  {
    v14 = 0;
    if (a4)
      *a4 = objc_retainAutorelease(v13);
  }
  else
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x3032000000;
    v22 = __Block_byref_object_copy__9;
    v23 = __Block_byref_object_dispose__9;
    v24 = 0;
    objc_msgSend(v7, "publicKey");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "secretKey");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x24BDAC760];
    v18[1] = 3221225472;
    v18[2] = __SESEndPointPrivacyDecryptionWithKeyPair_block_invoke;
    v18[3] = &unk_24C2BCD00;
    v18[4] = &v19;
    v18[5] = &v26;
    objc_msgSend(v12, "privacyDecryptDataWithKeyPair:secretKey:data:ephemeralPublicKey:reply:", v15, v16, v8, v9, v18);

    if (a4)
      *a4 = objc_retainAutorelease((id)v27[5]);
    v14 = (id)v20[5];
    _Block_object_dispose(&v19, 8);

  }
  _Block_object_dispose(&v26, 8);

  return v14;
}

void sub_20A06FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __getEndpointQueue_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("com.apple.seservice.endpoint", attr);
  v2 = (void *)getEndpointQueue_endpointQueue;
  getEndpointQueue_endpointQueue = (uint64_t)v1;

}

void sub_20A07023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_20A07049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_20A0706A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A070874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_20A070AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id SESKeyGetDesignatedKeys()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", CFSTR("com.apple.seserviced.designatedkeys"));
  objc_msgSend(v0, "arrayForKey:", CFSTR("keys"));
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)v1;
  v3 = (void *)MEMORY[0x24BDBD1A8];
  if (v1)
    v3 = (void *)v1;
  v4 = v3;

  objc_msgSend(v4, "filterMap:", &__block_literal_global_8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void SESDesignatedKeyCommit(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  id v4;

  v1 = (objc_class *)MEMORY[0x24BDBCF50];
  v2 = a1;
  v4 = (id)objc_msgSend([v1 alloc], "initWithSuiteName:", CFSTR("com.apple.seserviced.designatedkeys"));
  objc_msgSend(v2, "ses_map:", &__block_literal_global_310);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setObject:forKey:", v3, CFSTR("keys"));
  _CFPreferencesFlushCachesForIdentifier();

}

void sub_20A071988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void sub_20A071CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A071F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A072274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A07258C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20A072840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_20A072C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_20A074414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CredentialType.isCopernicus.getter()
{
  uint64_t v0;
  char v1;

  v1 = sub_20A07473C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), (uint64_t)&unk_24C2BA2B0);
  swift_arrayDestroy();
  return v1 & 1;
}

uint64_t sub_20A07473C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return 0;
  swift_bridgeObjectRetain();
  v7 = (unint64_t *)(a3 + 40);
  while (2)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    switch(*v7)
    {
      case 0uLL:
        if (a2)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 0;
        goto LABEL_68;
      case 1uLL:
        if (a2 != 1)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 1;
        goto LABEL_68;
      case 2uLL:
        if (a2 != 2)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 2;
        goto LABEL_68;
      case 3uLL:
        if (a2 != 3)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 3;
        goto LABEL_68;
      case 4uLL:
        if (a2 != 4)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 4;
        goto LABEL_68;
      case 5uLL:
        if (a2 != 5)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 5;
        goto LABEL_68;
      case 6uLL:
        if (a2 != 6)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 6;
        goto LABEL_68;
      case 7uLL:
        if (a2 != 7)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 7;
        goto LABEL_68;
      case 8uLL:
        if (a2 != 8)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 8;
        goto LABEL_68;
      case 9uLL:
        if (a2 != 9)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 9;
        goto LABEL_68;
      case 0xAuLL:
        if (a2 != 10)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 10;
        goto LABEL_68;
      case 0xBuLL:
        if (a2 != 11)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 11;
        goto LABEL_68;
      case 0xCuLL:
        if (a2 != 12)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 12;
        goto LABEL_68;
      case 0xDuLL:
        if (a2 != 13)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 13;
        goto LABEL_68;
      case 0xEuLL:
        if (a2 != 14)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 14;
        goto LABEL_68;
      case 0xFuLL:
        if (a2 != 15)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 15;
        goto LABEL_68;
      case 0x10uLL:
        if (a2 != 16)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 16;
        goto LABEL_68;
      case 0x11uLL:
        if (a2 != 17)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 17;
        goto LABEL_68;
      case 0x12uLL:
        if (a2 != 18)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 18;
        goto LABEL_68;
      case 0x13uLL:
        if (a2 != 19)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 19;
        goto LABEL_68;
      case 0x14uLL:
        if (a2 != 20)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 20;
        goto LABEL_68;
      case 0x15uLL:
        if (a2 != 21)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 21;
        goto LABEL_68;
      case 0x16uLL:
        if (a2 != 22)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 22;
        goto LABEL_68;
      case 0x17uLL:
        if (a2 != 23)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 23;
        goto LABEL_68;
      case 0x18uLL:
        if (a2 != 24)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 24;
        goto LABEL_68;
      case 0x19uLL:
        if (a2 != 25)
          goto LABEL_57;
        v13 = *(v7 - 1);
        v14 = 25;
        goto LABEL_68;
      default:
        if (a2 < 0x1A)
        {
LABEL_57:
          sub_20A074C44(a1, a2);
          sub_20A074C44(v8, v9);
          sub_20A075F1C(v8, v9);
          sub_20A075F1C(a1, a2);
LABEL_58:
          v7 += 2;
          if (!--v3)
          {
            v12 = 0;
            goto LABEL_70;
          }
          continue;
        }
        if (v8 != a1 || v9 != a2)
        {
          v11 = sub_20A0E0CEC();
          sub_20A074C44(a1, a2);
          sub_20A074C44(v8, v9);
          sub_20A075F1C(v8, v9);
          sub_20A075F1C(a1, a2);
          if ((v11 & 1) != 0)
            goto LABEL_69;
          goto LABEL_58;
        }
        sub_20A074C44(a1, a2);
        sub_20A074C44(a1, a2);
        v13 = a1;
        v14 = a2;
LABEL_68:
        sub_20A075F1C(v13, v14);
        sub_20A075F1C(a1, a2);
LABEL_69:
        v12 = 1;
LABEL_70:
        swift_bridgeObjectRelease();
        return v12;
    }
  }
}

uint64_t sub_20A074B1C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_20A0E0CEC();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_20A0E0CEC() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t CredentialType.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_20A074C44(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  sub_20A0E0824();
  v1 = sub_20A0E0830();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_20A074C44(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x1A)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t CredentialType.formattedDescription.getter()
{
  uint64_t v0;

  sub_20A074C44(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return sub_20A0E0824();
}

uint64_t CredentialType.rawValue.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = 0x614372657473614DLL;
  switch(*(_QWORD *)(v0 + 8))
  {
    case 0:
      return result;
    case 1:
      result = 0xD000000000000010;
      break;
    case 2:
      result = 0x20676E696A696542;
      break;
    case 3:
      result = 0x696168676E616853;
      break;
    case 4:
      result = 4342602;
      break;
    case 5:
      result = 4347733;
      break;
    case 6:
      result = 0x7265766F63736944;
      break;
    case 7:
      result = 2019913025;
      break;
    case 8:
      result = 0x7369736F6E6548;
      break;
    case 9:
      result = 1634953558;
      break;
    case 0xALL:
      result = 0x6E5520616E696843;
      break;
    case 0xBLL:
      result = 0x79654B656D6F48;
      break;
    case 0xCLL:
      result = 0x79654B726143;
      break;
    case 0xDLL:
      result = 0x7461726F70726F43;
      break;
    case 0xELL:
      result = 0x676E6152656D6F48;
      break;
    case 0xFLL:
      result = 1397704019;
      break;
    case 0x10:
      result = 0x54206164616E6143;
      break;
    case 0x11:
      result = 0xD000000000000011;
      break;
    case 0x12:
      v2 = 0x206165726F4BLL;
      goto LABEL_22;
    case 0x13:
      v2 = 0x207369726150;
LABEL_22:
      result = v2 & 0xFFFFFFFFFFFFLL | 0x7254000000000000;
      break;
    case 0x14:
      result = 0x65726166694DLL;
      break;
    case 0x15:
      result = 0x6143694C6546;
      break;
    case 0x16:
      result = 0x4F4D20616E696843;
      break;
    case 0x17:
      result = 0xD000000000000014;
      break;
    case 0x18:
      result = 0x65644920494B504ALL;
      break;
    case 0x19:
      result = 0x72616D746867694ELL;
      break;
    default:
      sub_20A0E0854();
      result = 0x20616E6E656956;
      break;
  }
  return result;
}

uint64_t CredentialType.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8E78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8E80);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8E88);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  v25 = a2;
  v27 = a1;
  v28 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8E90);
  sub_20A0E0710();
  sub_20A075E98();
  sub_20A07B6D0(&qword_2545C8EA0, &qword_2545C8E78, MEMORY[0x24BEE7460]);
  sub_20A0E07DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_20A075EDC((uint64_t)v10);
    v15 = v25;
    v16 = v24;
    if (v24 == 0x614372657473614DLL && v25 == 0xEA00000000006472 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 0;
    }
    else if (v16 == 0xD000000000000010 && v15 == 0x800000020A0F0360 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 1;
    }
    else if (v16 == 0x20676E696A696542 && v15 == 0xEB00000000434F4DLL || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 2;
    }
    else if (v16 == 0x696168676E616853 && v15 == 0xEC000000434F4D20 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 3;
    }
    else if (v16 == 4342602 && v15 == 0xE300000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 4;
    }
    else if (v16 == 4347733 && v15 == 0xE300000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 5;
    }
    else if (v16 == 0x7265766F63736944 && v15 == 0xE800000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 6;
    }
    else if (v16 == 2019913025 && v15 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 7;
    }
    else if (v16 == 0x7369736F6E6548 && v15 == 0xE700000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 8;
    }
    else if (v16 == 1634953558 && v15 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 9;
    }
    else if (v16 == 0x6E5520616E696843 && v15 == 0xEF796150206E6F69 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 10;
    }
    else if (v16 == 0x79654B656D6F48 && v15 == 0xE700000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 11;
    }
    else if (v16 == 0x79654B726143 && v15 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 12;
    }
    else if (v16 == 0x7461726F70726F43 && v15 == 0xEC00000079654B65 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 13;
    }
    else if (v16 == 0x676E6152656D6F48 && v15 == 0xEE0079654B676E69 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 14;
    }
    else if (v16 == 1397704019 && v15 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 15;
    }
    else if (v16 == 0x54206164616E6143 && v15 == 0xEE007469736E6172 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 16;
    }
    else if (v16 == 0xD000000000000011 && v15 == 0x800000020A0F0340 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 17;
    }
    else if (v16 == 0x7254206165726F4BLL && v15 == 0xED00007469736E61 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 18;
    }
    else if (v16 == 0x7254207369726150 && v15 == 0xED00007469736E61 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 19;
    }
    else if (v16 == 0x65726166694DLL && v15 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 20;
    }
    else if (v16 == 0x6143694C6546 && v15 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 21;
    }
    else if (v16 == 0x4F4D20616E696843 && v15 == 0xE900000000000043 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 22;
    }
    else if (v16 == 0xD000000000000014 && v15 == 0x800000020A0F0320 || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 23;
    }
    else if (v16 == 0x65644920494B504ALL && v15 == 0xED0000797469746ELL || (sub_20A0E0CEC() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 24;
    }
    else if (v16 == 0x72616D746867694ELL && v15 == 0xE900000000000065)
    {
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v19 = 25;
    }
    else
    {
      v22 = sub_20A0E0CEC();
      result = swift_bridgeObjectRelease();
      v17 = 0;
      if ((v22 & 1) != 0)
        v19 = 25;
      else
        v19 = 26;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    sub_20A0E071C();
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x20BD1F3A8](v29, v30, v31, v32);
    v19 = v18;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  v21 = v26;
  *v26 = v17;
  v21[1] = v19;
  return result;
}

uint64_t CredentialType.init(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  v1 = 0;
  while (1)
  {
    v2 = *(_QWORD *)((char *)&unk_24C2BA6E0 + v1 + 32);
    v3 = *(_QWORD *)((char *)&unk_24C2BA6E0 + v1 + 40);
    sub_20A074C44(v2, v3);
    sub_20A074C44(v2, v3);
    sub_20A074C44(v2, v3);
    sub_20A0E0824();
    v4 = sub_20A0E0830();
    v6 = v5;
    swift_bridgeObjectRelease();
    sub_20A075F1C(v2, v3);
    if (v4 == sub_20A0E0830() && v6 == v7)
      break;
    v8 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      goto LABEL_8;
    sub_20A075F1C(v2, v3);
    v1 += 16;
    if (v1 == 416)
    {
      v2 = 0;
      v3 = 26;
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_8:
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

void *static CredentialType.allCases.getter()
{
  return &unk_24C2BA6E0;
}

unint64_t sub_20A075E98()
{
  unint64_t result;

  result = qword_2545C8E98;
  if (!qword_2545C8E98)
  {
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2545C8E98);
  }
  return result;
}

uint64_t sub_20A075EDC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8E80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20A075F1C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x1A)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t CredentialType.init(moduleAID:dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v8 = *a3;
  v9 = a3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_20A07A8E8((uint64_t)&unk_24C2BA6E0, v8, v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v10 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7E0);
    v11 = sub_20A0E0BFC();
  }
  else
  {
    v11 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)&v17 = v11;
  v12 = (_QWORD *)swift_bridgeObjectRetain();
  sub_20A07A3C0(v12, 1, &v17);
  if (v4)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = v17;
    swift_bridgeObjectRetain();
    sub_20A0760BC(v13, a1, a2, (uint64_t *)&v17);
    swift_release();
    swift_bridgeObjectRelease();
    result = v18;
    if (v18)
    {
      v16 = v17;
      result = swift_bridgeObjectRelease();
      v15 = v16;
    }
    else
    {
      v15 = xmmword_20A0E6A20;
    }
    *a4 = v15;
  }
  return result;
}

uint64_t sub_20A0760BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;

  v6 = a1;
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v37 = result;
  v34 = v11;
  v35 = v7;
  while (1)
  {
    while (1)
    {
LABEL_5:
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        if (__OFADD__(v13++, 1))
          goto LABEL_48;
        if (v13 >= v11)
        {
LABEL_45:
          swift_bridgeObjectRelease();
          result = swift_release();
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          return result;
        }
        v18 = *(_QWORD *)(v7 + 8 * v13);
        if (!v18)
        {
          v19 = v13 + 1;
          if (v13 + 1 >= v11)
            goto LABEL_45;
          v18 = *(_QWORD *)(v7 + 8 * v19);
          if (v18)
            goto LABEL_16;
          v19 = v13 + 2;
          if (v13 + 2 >= v11)
            goto LABEL_45;
          v18 = *(_QWORD *)(v7 + 8 * v19);
          if (v18)
            goto LABEL_16;
          v19 = v13 + 3;
          if (v13 + 3 >= v11)
            goto LABEL_45;
          v18 = *(_QWORD *)(v7 + 8 * v19);
          if (v18)
          {
LABEL_16:
            v13 = v19;
          }
          else
          {
            v32 = v13 + 4;
            if (v13 + 4 >= v11)
              goto LABEL_45;
            v18 = *(_QWORD *)(v7 + 8 * v32);
            for (v13 += 4; !v18; ++v32)
            {
              v13 = v32 + 1;
              if (__OFADD__(v32, 1))
                goto LABEL_49;
              if (v13 >= v11)
                goto LABEL_45;
              v18 = *(_QWORD *)(v7 + 8 * v13);
            }
          }
        }
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v16);
      v22 = *v20;
      v21 = v20[1];
      v23 = *(_QWORD **)(*(_QWORD *)(v6 + 56) + 8 * v16);
      v24 = v23[2];
      v39 = v13;
      if (v24)
        break;
      v14 = v21;
      sub_20A074C44(v22, v21);
      swift_bridgeObjectRetain();
      sub_20A075F1C(v22, v14);
      result = swift_bridgeObjectRelease();
      v13 = v39;
    }
    if (v23[4] == a2 && v23[5] == a3)
      goto LABEL_44;
    v38 = v10;
    v26 = v22;
    v27 = v21;
    result = sub_20A0E0CEC();
    if ((result & 1) != 0)
    {
      v21 = v27;
LABEL_43:
      v22 = v26;
LABEL_44:
      v33 = v21;
      sub_20A074C44(v22, v21);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = swift_release();
      *a4 = v22;
      a4[1] = v33;
      a4[2] = (uint64_t)v23;
      return result;
    }
    v21 = v27;
    if (v24 != 1)
      break;
    sub_20A074C44(v22, v27);
    swift_bridgeObjectRetain();
    sub_20A075F1C(v22, v27);
    result = swift_bridgeObjectRelease();
    v13 = v39;
    v10 = v38;
  }
  v28 = v23 + 7;
  v29 = 1;
  while (1)
  {
    v30 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (*(v28 - 1) == a2 && *v28 == a3)
      goto LABEL_43;
    result = sub_20A0E0CEC();
    if ((result & 1) != 0)
    {
      v21 = v27;
      goto LABEL_43;
    }
    v28 += 2;
    ++v29;
    v21 = v27;
    if (v30 == v24)
    {
      sub_20A074C44(v26, v27);
      swift_bridgeObjectRetain();
      sub_20A075F1C(v26, v27);
      result = swift_bridgeObjectRelease();
      v6 = v37;
      v10 = v38;
      v11 = v34;
      v7 = v35;
      v13 = v39;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t CredentialType.policy.getter()
{
  return 0;
}

uint64_t CredentialType.hash(into:)()
{
  uint64_t v0;
  uint64_t result;

  switch(*(_QWORD *)(v0 + 8))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xALL:
    case 0xBLL:
    case 0xCLL:
    case 0xDLL:
    case 0xELL:
    case 0xFLL:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
      result = sub_20A0E0D88();
      break;
    default:
      sub_20A0E0D88();
      result = sub_20A0E0848();
      break;
  }
  return result;
}

uint64_t sub_20A076560()
{
  return 0;
}

uint64_t sub_20A07656C()
{
  return 0;
}

void sub_20A076578(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_20A076584()
{
  sub_20A07B000();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0765AC()
{
  sub_20A07B000();
  return sub_20A0E0DC4();
}

uint64_t sub_20A0765D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A076604 + 4 * byte_20A0E517E[a1]))(0x6E6F677241, 0xE500000000000000);
}

uint64_t sub_20A076604()
{
  return 1852797513;
}

uint64_t sub_20A076618()
{
  return 0x7265656E6F6950;
}

uint64_t sub_20A076630()
{
  return 0x746962724FLL;
}

uint64_t sub_20A076640()
{
  return 1969321292;
}

uint64_t sub_20A076650()
{
  return 0x74697270736E7553;
}

uint64_t sub_20A076838()
{
  sub_20A07B660();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076860()
{
  sub_20A07B660();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076888()
{
  sub_20A07B154();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0768B0()
{
  sub_20A07B154();
  return sub_20A0E0DC4();
}

BOOL sub_20A0768D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20A0768EC()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

uint64_t sub_20A076930()
{
  return sub_20A0E0D88();
}

uint64_t sub_20A076958()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

uint64_t sub_20A076998()
{
  unsigned __int8 *v0;

  return sub_20A0765D4(*v0);
}

uint64_t sub_20A0769A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A07CE0C(a1, a2);
  *a3 = result;
  return result;
}

void sub_20A0769C4(_BYTE *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_20A0769D0()
{
  sub_20A07AF34();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0769F8()
{
  sub_20A07AF34();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076A20()
{
  sub_20A07B2EC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076A48()
{
  sub_20A07B2EC();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076A70()
{
  sub_20A07B2A8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076A98()
{
  sub_20A07B2A8();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076AC0()
{
  sub_20A07B330();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076AE8()
{
  sub_20A07B330();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076B10()
{
  sub_20A07B374();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076B38()
{
  sub_20A07B374();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076B60()
{
  sub_20A07B088();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076B88()
{
  sub_20A07B088();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076BB0()
{
  sub_20A07B3FC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076BD8()
{
  sub_20A07B3FC();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076C00()
{
  sub_20A07B440();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076C28()
{
  sub_20A07B440();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076C50()
{
  sub_20A07B61C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076C78()
{
  sub_20A07B61C();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076CA0()
{
  sub_20A07B3B8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076CC8()
{
  sub_20A07B3B8();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076CF0()
{
  sub_20A07B1DC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076D18()
{
  sub_20A07B1DC();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076D40()
{
  sub_20A07B550();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076D68()
{
  sub_20A07B550();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076D90()
{
  sub_20A07B110();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076DB8()
{
  sub_20A07B110();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076DE0()
{
  sub_20A07B484();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076E08()
{
  sub_20A07B484();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076E30()
{
  sub_20A07B198();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076E58()
{
  sub_20A07B198();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076E80()
{
  sub_20A07AF78();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076EA8()
{
  sub_20A07AF78();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076ED0()
{
  sub_20A07B594();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076EF8()
{
  sub_20A07B594();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076F20@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_20A076F4C()
{
  sub_20A07B044();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076F74()
{
  sub_20A07B044();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076F9C()
{
  sub_20A07B5D8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A076FC4()
{
  sub_20A07B5D8();
  return sub_20A0E0DC4();
}

uint64_t sub_20A076FEC()
{
  sub_20A07B264();
  return sub_20A0E0DB8();
}

uint64_t sub_20A077014()
{
  sub_20A07B264();
  return sub_20A0E0DC4();
}

uint64_t sub_20A07703C()
{
  sub_20A07B0CC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A077064()
{
  sub_20A07B0CC();
  return sub_20A0E0DC4();
}

uint64_t sub_20A07708C()
{
  sub_20A07B220();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0770B4()
{
  sub_20A07B220();
  return sub_20A0E0DC4();
}

uint64_t sub_20A0770DC()
{
  sub_20A07B50C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A077104()
{
  sub_20A07B50C();
  return sub_20A0E0DC4();
}

uint64_t sub_20A07712C()
{
  return 1;
}

uint64_t sub_20A077134()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

uint64_t sub_20A077174()
{
  return sub_20A0E0D88();
}

uint64_t sub_20A077198()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

unint64_t sub_20A0771D4()
{
  return 0xD000000000000010;
}

uint64_t sub_20A0771F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A07D87C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_20A077218()
{
  sub_20A07AFBC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A077240()
{
  sub_20A07AFBC();
  return sub_20A0E0DC4();
}

uint64_t sub_20A077268()
{
  sub_20A07B4C8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A077290()
{
  sub_20A07B4C8();
  return sub_20A0E0DC4();
}

uint64_t CredentialType.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t result;
  void (*v49)(char *, _QWORD);
  char *v50;
  char **v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EA8);
  v150 = *(_QWORD *)(v3 - 8);
  v151 = v3;
  MEMORY[0x24BDAC7A8]();
  v148 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EB0);
  v147 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8]();
  v146 = (char *)v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EB8);
  v144 = *(_QWORD *)(v6 - 8);
  v145 = v6;
  MEMORY[0x24BDAC7A8]();
  v143 = (char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EC0);
  v141 = *(_QWORD *)(v8 - 8);
  v142 = v8;
  MEMORY[0x24BDAC7A8]();
  v140 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EC8);
  v138 = *(_QWORD *)(v10 - 8);
  v139 = v10;
  MEMORY[0x24BDAC7A8]();
  v137 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8ED0);
  v135 = *(_QWORD *)(v12 - 8);
  v136 = v12;
  MEMORY[0x24BDAC7A8]();
  v134 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8ED8);
  v132 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8]();
  v131 = (char *)v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EE0);
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x24BDAC7A8]();
  v128 = (char *)v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EE8);
  v126 = *(_QWORD *)(v127 - 8);
  MEMORY[0x24BDAC7A8]();
  v125 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EF0);
  v123 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8]();
  v122 = (char *)v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8EF8);
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8]();
  v119 = (char *)v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F00);
  v117 = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8]();
  v116 = (char *)v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F08);
  v114 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8]();
  v113 = (char *)v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F10);
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x24BDAC7A8]();
  v110 = (char *)v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F18);
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x24BDAC7A8]();
  v107 = (char *)v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F20);
  v105 = *(_QWORD *)(v106 - 8);
  MEMORY[0x24BDAC7A8]();
  v104 = (char *)v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F28);
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x24BDAC7A8]();
  v101 = (char *)v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F30);
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8]();
  v98 = (char *)v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F38);
  v96 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8]();
  v95 = (char *)v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F40);
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x24BDAC7A8]();
  v92 = (char *)v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F48);
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8]();
  v89 = (char *)v74 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F50);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8]();
  v86 = (char *)v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F58);
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8]();
  v83 = (char *)v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F60);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8]();
  v80 = (char *)v74 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F68);
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8]();
  v77 = (char *)v74 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F70);
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8]();
  v34 = (char *)v74 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F78);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8]();
  v38 = (char *)v74 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C8F80);
  v152 = *(_QWORD *)(v154 - 8);
  MEMORY[0x24BDAC7A8]();
  v40 = (char *)v74 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v1[1];
  v74[1] = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A07AF34();
  v153 = v40;
  sub_20A0E0DAC();
  switch(v41)
  {
    case 0:
      v156 = 0;
      sub_20A07B660();
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
      goto LABEL_25;
    case 1:
      v156 = 1;
      sub_20A07B61C();
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v75 + 8);
      v50 = v34;
      v51 = (char **)&v108;
      goto LABEL_24;
    case 2:
      v156 = 2;
      sub_20A07B5D8();
      v52 = v77;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v78 + 8);
      v50 = v52;
      v51 = (char **)&v111;
      goto LABEL_24;
    case 3:
      v156 = 3;
      sub_20A07B594();
      v53 = v80;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v81 + 8);
      v50 = v53;
      v51 = (char **)&v114;
      goto LABEL_24;
    case 4:
      v156 = 4;
      sub_20A07B550();
      v54 = v83;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v84 + 8);
      v50 = v54;
      v51 = (char **)&v117;
      goto LABEL_24;
    case 5:
      v156 = 5;
      sub_20A07B50C();
      v55 = v86;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v87 + 8);
      v50 = v55;
      v51 = (char **)&v120;
      goto LABEL_24;
    case 6:
      v156 = 6;
      sub_20A07B4C8();
      v56 = v89;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v90 + 8);
      v50 = v56;
      v51 = (char **)&v123;
      goto LABEL_24;
    case 7:
      v156 = 7;
      sub_20A07B484();
      v57 = v92;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v93 + 8);
      v50 = v57;
      v51 = (char **)&v126;
      goto LABEL_24;
    case 8:
      v156 = 8;
      sub_20A07B440();
      v58 = v95;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v96 + 8);
      v50 = v58;
      v51 = (char **)&v129;
      goto LABEL_24;
    case 9:
      v156 = 9;
      sub_20A07B3FC();
      v59 = v98;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v99 + 8);
      v50 = v59;
      v51 = (char **)&v132;
      goto LABEL_24;
    case 10:
      v156 = 10;
      sub_20A07B3B8();
      v60 = v101;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v102 + 8);
      v50 = v60;
      v51 = (char **)&v135;
      goto LABEL_24;
    case 11:
      v156 = 11;
      sub_20A07B374();
      v61 = v104;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v105 + 8);
      v50 = v61;
      v51 = (char **)&v138;
      goto LABEL_24;
    case 12:
      v156 = 12;
      sub_20A07B330();
      v62 = v107;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v108 + 8);
      v50 = v62;
      v51 = (char **)&v141;
      goto LABEL_24;
    case 13:
      v156 = 13;
      sub_20A07B2EC();
      v63 = v110;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v111 + 8);
      v50 = v63;
      v51 = (char **)&v144;
      goto LABEL_24;
    case 14:
      v156 = 14;
      sub_20A07B2A8();
      v64 = v113;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v114 + 8);
      v50 = v64;
      v51 = (char **)&v147;
      goto LABEL_24;
    case 15:
      v156 = 15;
      sub_20A07B264();
      v65 = v116;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v117 + 8);
      v50 = v65;
      v51 = (char **)&v150;
      goto LABEL_24;
    case 16:
      v156 = 16;
      sub_20A07B220();
      v66 = v119;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v120 + 8);
      v50 = v66;
      v51 = &v153;
      goto LABEL_24;
    case 17:
      v156 = 17;
      sub_20A07B1DC();
      v67 = v122;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v123 + 8);
      v50 = v67;
      v51 = (char **)&v155;
      goto LABEL_24;
    case 18:
      v156 = 18;
      sub_20A07B198();
      v68 = v125;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v126 + 8);
      v50 = v68;
      v51 = (char **)&v157;
      goto LABEL_24;
    case 19:
      v156 = 19;
      sub_20A07B154();
      v69 = v128;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v129 + 8);
      v50 = v69;
      v51 = (char **)&v158;
      goto LABEL_24;
    case 20:
      v156 = 20;
      sub_20A07B110();
      v70 = v131;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v49 = *(void (**)(char *, _QWORD))(v132 + 8);
      v50 = v70;
      v51 = (char **)&v159;
LABEL_24:
      v49(v50, *(v51 - 32));
      goto LABEL_25;
    case 21:
      v156 = 21;
      sub_20A07B0CC();
      v71 = v134;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v73 = v135;
      v72 = v136;
      goto LABEL_32;
    case 22:
      v156 = 22;
      sub_20A07B088();
      v71 = v137;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v73 = v138;
      v72 = v139;
      goto LABEL_32;
    case 23:
      v156 = 23;
      sub_20A07B044();
      v71 = v140;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v73 = v141;
      v72 = v142;
      goto LABEL_32;
    case 24:
      v156 = 24;
      sub_20A07B000();
      v71 = v143;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v73 = v144;
      v72 = v145;
      goto LABEL_32;
    case 25:
      v156 = 26;
      sub_20A07AF78();
      v71 = v148;
      v43 = v153;
      v42 = v154;
      sub_20A0E0C74();
      v73 = v150;
      v72 = v151;
LABEL_32:
      (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v72);
LABEL_25:
      result = (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v43, v42);
      break;
    default:
      v156 = 25;
      sub_20A07AFBC();
      v44 = v146;
      v46 = v153;
      v45 = v154;
      sub_20A0E0C74();
      v47 = v149;
      sub_20A0E0C8C();
      (*(void (**)(char *, uint64_t))(v147 + 8))(v44, v47);
      result = (*(uint64_t (**)(char *, uint64_t))(v152 + 8))(v46, v45);
      break;
  }
  return result;
}

uint64_t CredentialType.hashValue.getter()
{
  sub_20A0E0D7C();
  CredentialType.hash(into:)();
  return sub_20A0E0D94();
}

uint64_t CredentialType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD v45[7];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;

  v117 = a2;
  v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9068);
  v93 = *(_QWORD *)(v123 - 8);
  MEMORY[0x24BDAC7A8]();
  v122 = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9070);
  v95 = *(_QWORD *)(v94 - 8);
  MEMORY[0x24BDAC7A8]();
  v116 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9078);
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8]();
  v115 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9080);
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8]();
  v114 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9088);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8]();
  v113 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9090);
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8]();
  v112 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9098);
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8]();
  v111 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90A0);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8]();
  v110 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90A8);
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8]();
  v109 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90B0);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8]();
  v108 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90B8);
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8]();
  v107 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90C0);
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8]();
  v106 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90C8);
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8]();
  v105 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90D0);
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8]();
  v104 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90D8);
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8]();
  v103 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90E0);
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8]();
  v102 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90E8);
  v62 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8]();
  v121 = (char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90F0);
  v59 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8]();
  v120 = (char *)v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C90F8);
  v60 = *(_QWORD *)(v61 - 8);
  MEMORY[0x24BDAC7A8]();
  v119 = (char *)v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9100);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8]();
  v101 = (char *)v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9108);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8]();
  v100 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9110);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8]();
  v99 = (char *)v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9118);
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8]();
  v98 = (char *)v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9120);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8]();
  v97 = (char *)v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9128);
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8]();
  v96 = (char *)v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9130);
  v45[6] = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8]();
  v29 = (char *)v45 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9138);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8]();
  v33 = (char *)v45 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9140);
  v34 = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8]();
  v36 = (char *)v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1[3];
  v124 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v37);
  sub_20A07AF34();
  v38 = v125;
  sub_20A0E0DA0();
  if (!v38)
  {
    v45[3] = v33;
    v45[1] = v31;
    v45[2] = v30;
    v45[4] = v29;
    v45[5] = 0;
    v125 = v34;
    v39 = v118;
    v40 = sub_20A0E0C68();
    if (*(_QWORD *)(v40 + 16) == 1)
      __asm { BR              X10 }
    v41 = sub_20A0E0AF4();
    swift_allocError();
    v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9148);
    *v43 = &type metadata for CredentialType;
    sub_20A0E0C20();
    sub_20A0E0AE8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, *MEMORY[0x24BEE26D0], v41);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v36, v39);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
}

void sub_20A078EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 1;
  sub_20A07B61C();
  v3 = *(_QWORD *)(v2 - 752);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 736) + 8))(v3, *(_QWORD *)(v2 - 728));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 1;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A078F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 2;
  sub_20A07B5D8();
  v3 = *(_QWORD *)(v2 - 328);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 720) + 8))(v3, *(_QWORD *)(v2 - 712));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 2;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A078FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 3;
  sub_20A07B594();
  v3 = *(_QWORD *)(v2 - 320);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 704) + 8))(v3, *(_QWORD *)(v2 - 696));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 3;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 4;
  sub_20A07B550();
  v3 = *(_QWORD *)(v2 - 312);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 688) + 8))(v3, *(_QWORD *)(v2 - 680));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 4;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A0790DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 5;
  sub_20A07B50C();
  v3 = *(_QWORD *)(v2 - 304);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 672) + 8))(v3, *(_QWORD *)(v2 - 664));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 5;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 6;
  sub_20A07B4C8();
  v3 = *(_QWORD *)(v2 - 296);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 656) + 8))(v3, *(_QWORD *)(v2 - 648));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 6;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A0791F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 7;
  sub_20A07B484();
  v3 = *(_QWORD *)(v2 - 288);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 640) + 8))(v3, *(_QWORD *)(v2 - 632));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 7;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v3 - 65) = 8;
  sub_20A07B440();
  v4 = *(_QWORD *)(v3 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 616) + 8))(v0, *(_QWORD *)(v3 - 608));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v2, v1);
    v5 = *(_QWORD **)(v3 - 160);
    *v5 = 0;
    v5[1] = 8;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v3 - 65) = 9;
  sub_20A07B3FC();
  v4 = *(_QWORD *)(v3 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 624) + 8))(v0, *(_QWORD *)(v3 - 592));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v2, v1);
    v5 = *(_QWORD **)(v3 - 160);
    *v5 = 0;
    v5[1] = 9;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v3 - 65) = 10;
  sub_20A07B3B8();
  v4 = *(_QWORD *)(v3 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 600) + 8))(v0, *(_QWORD *)(v3 - 584));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v2, v1);
    v5 = *(_QWORD **)(v3 - 160);
    *v5 = 0;
    v5[1] = 10;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A07940C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 11;
  sub_20A07B374();
  v3 = *(_QWORD *)(v2 - 280);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 576) + 8))(v3, *(_QWORD *)(v2 - 568));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 11;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 12;
  sub_20A07B330();
  v3 = *(_QWORD *)(v2 - 272);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 560) + 8))(v3, *(_QWORD *)(v2 - 552));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 12;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 13;
  sub_20A07B2EC();
  v3 = *(_QWORD *)(v2 - 264);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 544) + 8))(v3, *(_QWORD *)(v2 - 536));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 13;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A0795B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 14;
  sub_20A07B2A8();
  v3 = *(_QWORD *)(v2 - 256);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 528) + 8))(v3, *(_QWORD *)(v2 - 520));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 14;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 15;
  sub_20A07B264();
  v3 = *(_QWORD *)(v2 - 248);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 512) + 8))(v3, *(_QWORD *)(v2 - 504));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 15;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A0796C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 16;
  sub_20A07B220();
  v3 = *(_QWORD *)(v2 - 240);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 496) + 8))(v3, *(_QWORD *)(v2 - 488));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 16;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 17;
  sub_20A07B1DC();
  v3 = *(_QWORD *)(v2 - 232);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 480) + 8))(v3, *(_QWORD *)(v2 - 472));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 17;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A0797D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 18;
  sub_20A07B198();
  v3 = *(_QWORD *)(v2 - 224);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 464) + 8))(v3, *(_QWORD *)(v2 - 456));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 18;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 19;
  sub_20A07B154();
  v3 = *(_QWORD *)(v2 - 216);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 448) + 8))(v3, *(_QWORD *)(v2 - 440));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 19;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A0798E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 20;
  sub_20A07B110();
  v3 = *(_QWORD *)(v2 - 208);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 432) + 8))(v3, *(_QWORD *)(v2 - 424));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 20;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 21;
  sub_20A07B0CC();
  v3 = *(_QWORD *)(v2 - 200);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 416) + 8))(v3, *(_QWORD *)(v2 - 408));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 21;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A0799F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 22;
  sub_20A07B088();
  v3 = *(_QWORD *)(v2 - 192);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 400) + 8))(v3, *(_QWORD *)(v2 - 392));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 22;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 23;
  sub_20A07B044();
  v3 = *(_QWORD *)(v2 - 184);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 384) + 8))(v3, *(_QWORD *)(v2 - 376));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 23;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_BYTE *)(v2 - 65) = 24;
  sub_20A07B000();
  v3 = *(_QWORD *)(v2 - 176);
  v4 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 368) + 8))(v3, *(_QWORD *)(v2 - 360));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
    v5 = *(_QWORD **)(v2 - 160);
    *v5 = 0;
    v5[1] = 24;
    JUMPOUT(0x20A078E84);
  }
  JUMPOUT(0x20A078E64);
}

void sub_20A079B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 65) = 25;
  sub_20A07AFBC();
  v3 = *(_QWORD *)(v2 - 168);
  v4 = v0;
  v5 = *(_QWORD *)(v2 - 744);
  sub_20A0E0C14();
  if (v5)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x20A078E7CLL);
  }
  v6 = *(_QWORD *)(v2 - 344);
  sub_20A0E0C38();
  v7 = *(_QWORD *)(v2 - 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 336) + 8))(v3, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v4);
  JUMPOUT(0x20A079D6CLL);
}

void sub_20A079BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 65) = 26;
  sub_20A07AF78();
  v5 = *(_QWORD *)(v4 - 744);
  sub_20A0E0C14();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v3, v1);
    JUMPOUT(0x20A078E84);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 352) + 8))(v0, v2);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v3, v1);
  JUMPOUT(0x20A079D74);
}

uint64_t sub_20A079D7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CredentialType.init(from:)(a1, a2);
}

uint64_t sub_20A079D90(_QWORD *a1)
{
  return CredentialType.encode(to:)(a1);
}

void sub_20A079DA4(_QWORD *a1@<X8>)
{
  *a1 = &unk_24C2BA6E0;
}

uint64_t sub_20A079DB8(uint64_t a1, uint64_t a2)
{
  return sub_20A079DCC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_20A079DCC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  sub_20A074C44(a3, a4);
  sub_20A074C44(a3, a4);
  sub_20A0E0824();
  v8 = sub_20A0E0830();
  v10 = v9;
  swift_bridgeObjectRelease();
  sub_20A075F1C(a3, a4);
  sub_20A074C44(a1, a2);
  sub_20A074C44(a1, a2);
  sub_20A0E0824();
  v11 = sub_20A0E0830();
  v13 = v12;
  swift_bridgeObjectRelease();
  sub_20A075F1C(a1, a2);
  if (v8 == v11 && v10 == v13)
  {
    swift_bridgeObjectRelease_n();
    v14 = 1;
  }
  else
  {
    v15 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v15 ^ 1;
  }
  return v14 & 1;
}

uint64_t sub_20A079F0C(uint64_t a1, uint64_t a2)
{
  return sub_20A079F20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_20A079F20(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  sub_20A074C44(a1, a2);
  sub_20A074C44(a1, a2);
  sub_20A0E0824();
  v8 = sub_20A0E0830();
  v10 = v9;
  swift_bridgeObjectRelease();
  sub_20A075F1C(a1, a2);
  sub_20A074C44(a3, a4);
  sub_20A074C44(a3, a4);
  sub_20A0E0824();
  v11 = sub_20A0E0830();
  v13 = v12;
  swift_bridgeObjectRelease();
  sub_20A075F1C(a3, a4);
  if (v8 == v11 && v10 == v13)
  {
    swift_bridgeObjectRelease_n();
    v14 = 1;
  }
  else
  {
    v15 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v15 ^ 1;
  }
  return v14 & 1;
}

uint64_t sub_20A07A058(uint64_t a1, uint64_t a2)
{
  return sub_20A07A06C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_20A07A06C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  sub_20A074C44(a3, a4);
  sub_20A074C44(a3, a4);
  sub_20A0E0824();
  v8 = sub_20A0E0830();
  v10 = v9;
  swift_bridgeObjectRelease();
  sub_20A075F1C(a3, a4);
  sub_20A074C44(a1, a2);
  sub_20A074C44(a1, a2);
  sub_20A0E0824();
  v11 = sub_20A0E0830();
  v13 = v12;
  swift_bridgeObjectRelease();
  sub_20A075F1C(a1, a2);
  if (v8 == v11 && v10 == v13)
    v14 = 0;
  else
    v14 = sub_20A0E0CEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14 & 1;
}

uint64_t sub_20A07A1A4()
{
  sub_20A0E0D7C();
  CredentialType.hash(into:)();
  return sub_20A0E0D94();
}

uint64_t sub_20A07A1F0()
{
  sub_20A0E0D7C();
  CredentialType.hash(into:)();
  return sub_20A0E0D94();
}

uint64_t sub_20A07A234(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_20A07A23C(unint64_t a1)
{
  uint64_t v2;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = sub_20A0E0BD8();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_20A07A298(uint64_t a1)
{
  MEMORY[0x20BD202E4](&unk_20A0E69A4, a1);
  return sub_20A0E0704();
}

uint64_t sub_20A07A2D4()
{
  MEMORY[0x20BD202E4](&unk_20A0E69A4);
  return sub_20A0E06F8();
}

uint64_t sub_20A07A31C(uint64_t a1, uint64_t a2)
{
  sub_20A0E0D7C();
  MEMORY[0x20BD202E4](&unk_20A0E69A4, a2);
  sub_20A0E06F8();
  return sub_20A0E0D94();
}

uint64_t sub_20A07A374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x20BD202E4](&unk_20A0E69A4, a3);
  return sub_20A0E06EC();
}

void sub_20A07A3C0(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[4];
  sub_20A074C44(v9, v7);
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_23;
  v10 = (_QWORD *)*a3;
  v11 = sub_20A0B8934(v9, v7);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  LOBYTE(v17) = v12;
  if (v10[3] < v16)
  {
    sub_20A0C61CC(v16, a2 & 1);
    v11 = sub_20A0B8934(v9, v7);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    v11 = sub_20A0E0D28();
    __break(1u);
  }
  if ((a2 & 1) != 0)
  {
LABEL_8:
    if ((v17 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v11;
  sub_20A0C5224();
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_20A075F1C(v9, v7);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = (uint64_t *)(v22[6] + 16 * v11);
  *v23 = v9;
  v23[1] = v7;
  *(_QWORD *)(v22[7] + 8 * v11) = v8;
  v24 = v22[2];
  v15 = __OFADD__(v24, 1);
  v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_20A0E0AC4();
    sub_20A0E0854();
    sub_20A0E0B48();
    sub_20A0E0854();
    sub_20A0E0BCC();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    v17 = a1 + 9;
    v26 = 1;
    while (v26 < a1[2])
    {
      v7 = *(v17 - 1);
      v8 = *v17;
      v9 = *(v17 - 2);
      sub_20A074C44(v9, v7);
      swift_bridgeObjectRetain();
      if (!v8)
        goto LABEL_23;
      v27 = (_QWORD *)*a3;
      v28 = sub_20A0B8934(v9, v7);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v15 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v15)
        goto LABEL_25;
      a2 = v29;
      if (v27[3] < v32)
      {
        sub_20A0C61CC(v32, 1);
        v28 = sub_20A0B8934(v9, v7);
        if ((a2 & 1) != (v33 & 1))
          goto LABEL_6;
      }
      if ((a2 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v35 = (uint64_t *)(v34[6] + 16 * v28);
      *v35 = v9;
      v35[1] = v7;
      *(_QWORD *)(v34[7] + 8 * v28) = v8;
      v36 = v34[2];
      v15 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v15)
        goto LABEL_26;
      ++v26;
      v34[2] = v37;
      v17 += 3;
      if (v6 == v26)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

uint64_t sub_20A07A770(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_20A0A6AB4(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

unint64_t sub_20A07A8C8(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_20A07A8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v27 = MEMORY[0x24BEE4AF8];
    sub_20A097258(0, v3, 0);
    v4 = v27;
    v6 = (unint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      sub_20A074C44(v7, *v6);
      sub_20A074C44(v7, v8);
      sub_20A074C44(v7, v8);
      sub_20A0E0824();
      v9 = sub_20A0E0830();
      v11 = v10;
      swift_bridgeObjectRelease();
      sub_20A075F1C(v7, v8);
      if (*(_QWORD *)(a3 + 16))
      {
        v12 = sub_20A0B8998(v9, v11);
        v13 = MEMORY[0x24BEE4AF8];
        if ((v14 & 1) != 0)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 32 * v12);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v13 = MEMORY[0x24BEE4AF8];
      }
      v25 = v13;
      swift_bridgeObjectRelease();
      sub_20A074C44(v7, v8);
      sub_20A074C44(v7, v8);
      sub_20A0E0824();
      v15 = sub_20A0E0830();
      v17 = v16;
      swift_bridgeObjectRelease();
      sub_20A075F1C(v7, v8);
      if (*(_QWORD *)(a3 + 16) && (v18 = sub_20A0B8998(v15, v17), (v19 & 1) != 0))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 32 * v18 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      sub_20A07A770(v20);
      v22 = *(_QWORD *)(v27 + 16);
      v21 = *(_QWORD *)(v27 + 24);
      if (v22 >= v21 >> 1)
        sub_20A097258(v21 > 1, v22 + 1, 1);
      v6 += 2;
      *(_QWORD *)(v27 + 16) = v22 + 1;
      v23 = (_QWORD *)(v27 + 24 * v22);
      v23[4] = v7;
      v23[5] = v8;
      v23[6] = v25;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t _s9SEService14CredentialTypeO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  switch(v3)
  {
    case 0uLL:
      if (v5)
        goto LABEL_55;
      v3 = 0;
      v6 = 1;
      break;
    case 1uLL:
      if (v5 != 1)
        goto LABEL_55;
      v3 = 1;
      v6 = 1;
      break;
    case 2uLL:
      if (v5 != 2)
        goto LABEL_55;
      v6 = 1;
      v3 = 2;
      break;
    case 3uLL:
      if (v5 != 3)
        goto LABEL_55;
      v6 = 1;
      v3 = 3;
      break;
    case 4uLL:
      if (v5 != 4)
        goto LABEL_55;
      v6 = 1;
      v3 = 4;
      break;
    case 5uLL:
      if (v5 != 5)
        goto LABEL_55;
      v6 = 1;
      v3 = 5;
      break;
    case 6uLL:
      if (v5 != 6)
        goto LABEL_55;
      v6 = 1;
      v3 = 6;
      break;
    case 7uLL:
      if (v5 != 7)
        goto LABEL_55;
      v6 = 1;
      v3 = 7;
      break;
    case 8uLL:
      if (v5 != 8)
        goto LABEL_55;
      v6 = 1;
      v3 = 8;
      break;
    case 9uLL:
      if (v5 != 9)
        goto LABEL_55;
      v6 = 1;
      v3 = 9;
      break;
    case 0xAuLL:
      if (v5 != 10)
        goto LABEL_55;
      v6 = 1;
      v3 = 10;
      break;
    case 0xBuLL:
      if (v5 != 11)
        goto LABEL_55;
      v6 = 1;
      v3 = 11;
      break;
    case 0xCuLL:
      if (v5 != 12)
        goto LABEL_55;
      v6 = 1;
      v3 = 12;
      break;
    case 0xDuLL:
      if (v5 != 13)
        goto LABEL_55;
      v6 = 1;
      v3 = 13;
      break;
    case 0xEuLL:
      if (v5 != 14)
        goto LABEL_55;
      v6 = 1;
      v3 = 14;
      break;
    case 0xFuLL:
      if (v5 != 15)
        goto LABEL_55;
      v6 = 1;
      v3 = 15;
      break;
    case 0x10uLL:
      if (v5 != 16)
        goto LABEL_55;
      v6 = 1;
      v3 = 16;
      break;
    case 0x11uLL:
      if (v5 != 17)
        goto LABEL_55;
      v6 = 1;
      v3 = 17;
      break;
    case 0x12uLL:
      if (v5 != 18)
        goto LABEL_55;
      v6 = 1;
      v3 = 18;
      break;
    case 0x13uLL:
      if (v5 != 19)
        goto LABEL_55;
      v6 = 1;
      v3 = 19;
      break;
    case 0x14uLL:
      if (v5 != 20)
        goto LABEL_55;
      v6 = 1;
      v3 = 20;
      break;
    case 0x15uLL:
      if (v5 != 21)
        goto LABEL_55;
      v6 = 1;
      v3 = 21;
      break;
    case 0x16uLL:
      if (v5 != 22)
        goto LABEL_55;
      v6 = 1;
      v3 = 22;
      break;
    case 0x17uLL:
      if (v5 != 23)
        goto LABEL_55;
      v6 = 1;
      v3 = 23;
      break;
    case 0x18uLL:
      if (v5 != 24)
        goto LABEL_55;
      v6 = 1;
      v3 = 24;
      break;
    case 0x19uLL:
      if (v5 != 25)
        goto LABEL_55;
      v6 = 1;
      v3 = 25;
      break;
    default:
      if (v5 >= 0x1A)
      {
        if (v2 == v4 && v3 == v5)
          v6 = 1;
        else
          v6 = sub_20A0E0CEC();
      }
      else
      {
LABEL_55:
        v6 = 0;
      }
      sub_20A074C44(v4, v5);
      sub_20A074C44(v2, v3);
      break;
  }
  sub_20A075F1C(v2, v3);
  sub_20A075F1C(v4, v5);
  return v6 & 1;
}

uint64_t _s9SEService14CredentialTypeO1loiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  sub_20A074C44(*a1, v3);
  sub_20A074C44(v2, v3);
  sub_20A0E0824();
  v6 = sub_20A0E0830();
  v8 = v7;
  swift_bridgeObjectRelease();
  sub_20A075F1C(v2, v3);
  sub_20A074C44(v4, v5);
  sub_20A074C44(v4, v5);
  sub_20A0E0824();
  v9 = sub_20A0E0830();
  v11 = v10;
  swift_bridgeObjectRelease();
  sub_20A075F1C(v4, v5);
  if (v6 == v9 && v8 == v11)
    v12 = 0;
  else
    v12 = sub_20A0E0CEC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

unint64_t sub_20A07AF34()
{
  unint64_t result;

  result = qword_2545C8F88;
  if (!qword_2545C8F88)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E68D4, &type metadata for CredentialType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8F88);
  }
  return result;
}

unint64_t sub_20A07AF78()
{
  unint64_t result;

  result = qword_2545C8F90;
  if (!qword_2545C8F90)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6884, &type metadata for CredentialType.NightmareCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8F90);
  }
  return result;
}

unint64_t sub_20A07AFBC()
{
  unint64_t result;

  result = qword_2545C8F98;
  if (!qword_2545C8F98)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6834, &type metadata for CredentialType.ViennaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8F98);
  }
  return result;
}

unint64_t sub_20A07B000()
{
  unint64_t result;

  result = qword_2545C8FA0;
  if (!qword_2545C8FA0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E67E4, &type metadata for CredentialType.AlphonsoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FA0);
  }
  return result;
}

unint64_t sub_20A07B044()
{
  unint64_t result;

  result = qword_2545C8FA8;
  if (!qword_2545C8FA8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6794, &type metadata for CredentialType.PTCCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FA8);
  }
  return result;
}

unint64_t sub_20A07B088()
{
  unint64_t result;

  result = qword_2545C8FB0;
  if (!qword_2545C8FB0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6744, &type metadata for CredentialType.HaishanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FB0);
  }
  return result;
}

unint64_t sub_20A07B0CC()
{
  unint64_t result;

  result = qword_2545C8FB8;
  if (!qword_2545C8FB8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E66F4, &type metadata for CredentialType.SlalomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FB8);
  }
  return result;
}

unint64_t sub_20A07B110()
{
  unint64_t result;

  result = qword_2545C8FC0;
  if (!qword_2545C8FC0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E66A4, &type metadata for CredentialType.MifareCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FC0);
  }
  return result;
}

unint64_t sub_20A07B154()
{
  unint64_t result;

  result = qword_2545C8FC8;
  if (!qword_2545C8FC8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6654, &type metadata for CredentialType.AtlasCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FC8);
  }
  return result;
}

unint64_t sub_20A07B198()
{
  unint64_t result;

  result = qword_2545C8FD0;
  if (!qword_2545C8FD0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6604, &type metadata for CredentialType.NightfuryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FD0);
  }
  return result;
}

unint64_t sub_20A07B1DC()
{
  unint64_t result;

  result = qword_2545C8FD8;
  if (!qword_2545C8FD8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E65B4, &type metadata for CredentialType.LithiumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FD8);
  }
  return result;
}

unint64_t sub_20A07B220()
{
  unint64_t result;

  result = qword_2545C8FE0;
  if (!qword_2545C8FE0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6564, &type metadata for CredentialType.SodiumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FE0);
  }
  return result;
}

unint64_t sub_20A07B264()
{
  unint64_t result;

  result = qword_2545C8FE8;
  if (!qword_2545C8FE8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6514, &type metadata for CredentialType.ShubaoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FE8);
  }
  return result;
}

unint64_t sub_20A07B2A8()
{
  unint64_t result;

  result = qword_2545C8FF0;
  if (!qword_2545C8FF0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E64C4, &type metadata for CredentialType.CopernicusAliroCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FF0);
  }
  return result;
}

unint64_t sub_20A07B2EC()
{
  unint64_t result;

  result = qword_2545C8FF8;
  if (!qword_2545C8FF8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6474, &type metadata for CredentialType.CopernicusAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C8FF8);
  }
  return result;
}

unint64_t sub_20A07B330()
{
  unint64_t result;

  result = qword_2545C9000;
  if (!qword_2545C9000)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6424, &type metadata for CredentialType.CopernicusCarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9000);
  }
  return result;
}

unint64_t sub_20A07B374()
{
  unint64_t result;

  result = qword_2545C9008;
  if (!qword_2545C9008)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E63D4, &type metadata for CredentialType.CopernicusHomeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9008);
  }
  return result;
}

unint64_t sub_20A07B3B8()
{
  unint64_t result;

  result = qword_2545C9010;
  if (!qword_2545C9010)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6384, &type metadata for CredentialType.KryptonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9010);
  }
  return result;
}

unint64_t sub_20A07B3FC()
{
  unint64_t result;

  result = qword_2545C9018;
  if (!qword_2545C9018)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6334, &type metadata for CredentialType.HeliumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9018);
  }
  return result;
}

unint64_t sub_20A07B440()
{
  unint64_t result;

  result = qword_2545C9020;
  if (!qword_2545C9020)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E62E4, &type metadata for CredentialType.HenosisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9020);
  }
  return result;
}

unint64_t sub_20A07B484()
{
  unint64_t result;

  result = qword_2545C9028;
  if (!qword_2545C9028)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6294, &type metadata for CredentialType.NeonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9028);
  }
  return result;
}

unint64_t sub_20A07B4C8()
{
  unint64_t result;

  result = qword_2545C9030;
  if (!qword_2545C9030)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6244, &type metadata for CredentialType.XenonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9030);
  }
  return result;
}

unint64_t sub_20A07B50C()
{
  unint64_t result;

  result = qword_2545C9038;
  if (!qword_2545C9038)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E61F4, &type metadata for CredentialType.SunspriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9038);
  }
  return result;
}

unint64_t sub_20A07B550()
{
  unint64_t result;

  result = qword_2545C9040;
  if (!qword_2545C9040)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E61A4, &type metadata for CredentialType.LuauCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9040);
  }
  return result;
}

unint64_t sub_20A07B594()
{
  unint64_t result;

  result = qword_2545C9048;
  if (!qword_2545C9048)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6154, &type metadata for CredentialType.OrbitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9048);
  }
  return result;
}

unint64_t sub_20A07B5D8()
{
  unint64_t result;

  result = qword_2545C9050;
  if (!qword_2545C9050)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6104, &type metadata for CredentialType.PioneerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9050);
  }
  return result;
}

unint64_t sub_20A07B61C()
{
  unint64_t result;

  result = qword_2545C9058;
  if (!qword_2545C9058)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E60B4, &type metadata for CredentialType.IronCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9058);
  }
  return result;
}

unint64_t sub_20A07B660()
{
  unint64_t result;

  result = qword_2545C9060;
  if (!qword_2545C9060)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6064, &type metadata for CredentialType.ArgonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9060);
  }
  return result;
}

uint64_t sub_20A07B6A4()
{
  return sub_20A07B6D0(&qword_2545C9150, &qword_2545C9158, MEMORY[0x24BEE12E0]);
}

uint64_t sub_20A07B6D0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x20BD202E4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20A07B714()
{
  unint64_t result;

  result = qword_2545C9160;
  if (!qword_2545C9160)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for CredentialType, &type metadata for CredentialType);
    atomic_store(result, (unint64_t *)&qword_2545C9160);
  }
  return result;
}

unint64_t destroy for CredentialType(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s9SEService14CredentialTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for CredentialType(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for CredentialType(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFE5 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483622);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 25;
  if (v4 >= 0x1B)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CredentialType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFE6)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483622;
    if (a3 >= 0x7FFFFFE6)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFE6)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 25;
  }
  return result;
}

uint64_t sub_20A07B970(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_20A07B98C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialType()
{
  return &type metadata for CredentialType;
}

uint64_t getEnumTagSinglePayload for CredentialType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_20A07BA98 + 4 * byte_20A0E5223[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_20A07BACC + 4 * byte_20A0E521E[v4]))();
}

uint64_t sub_20A07BACC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A07BAD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A07BADCLL);
  return result;
}

uint64_t sub_20A07BAE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A07BAF0);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_20A07BAF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A07BAFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A07BB08(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_20A07BB10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CredentialType.CodingKeys()
{
  return &type metadata for CredentialType.CodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.ArgonCodingKeys()
{
  return &type metadata for CredentialType.ArgonCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.IronCodingKeys()
{
  return &type metadata for CredentialType.IronCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.PioneerCodingKeys()
{
  return &type metadata for CredentialType.PioneerCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.OrbitCodingKeys()
{
  return &type metadata for CredentialType.OrbitCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.LuauCodingKeys()
{
  return &type metadata for CredentialType.LuauCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.SunspriteCodingKeys()
{
  return &type metadata for CredentialType.SunspriteCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.XenonCodingKeys()
{
  return &type metadata for CredentialType.XenonCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.NeonCodingKeys()
{
  return &type metadata for CredentialType.NeonCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.HenosisCodingKeys()
{
  return &type metadata for CredentialType.HenosisCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.HeliumCodingKeys()
{
  return &type metadata for CredentialType.HeliumCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.KryptonCodingKeys()
{
  return &type metadata for CredentialType.KryptonCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.CopernicusHomeCodingKeys()
{
  return &type metadata for CredentialType.CopernicusHomeCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.CopernicusCarCodingKeys()
{
  return &type metadata for CredentialType.CopernicusCarCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.CopernicusAccessCodingKeys()
{
  return &type metadata for CredentialType.CopernicusAccessCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.CopernicusAliroCodingKeys()
{
  return &type metadata for CredentialType.CopernicusAliroCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.ShubaoCodingKeys()
{
  return &type metadata for CredentialType.ShubaoCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.SodiumCodingKeys()
{
  return &type metadata for CredentialType.SodiumCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.LithiumCodingKeys()
{
  return &type metadata for CredentialType.LithiumCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.NightfuryCodingKeys()
{
  return &type metadata for CredentialType.NightfuryCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.AtlasCodingKeys()
{
  return &type metadata for CredentialType.AtlasCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.MifareCodingKeys()
{
  return &type metadata for CredentialType.MifareCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.SlalomCodingKeys()
{
  return &type metadata for CredentialType.SlalomCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.HaishanCodingKeys()
{
  return &type metadata for CredentialType.HaishanCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.PTCCodingKeys()
{
  return &type metadata for CredentialType.PTCCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.AlphonsoCodingKeys()
{
  return &type metadata for CredentialType.AlphonsoCodingKeys;
}

uint64_t getEnumTagSinglePayload for CredentialType.ViennaCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CredentialType.ViennaCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20A07BD48 + 4 * byte_20A0E5228[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20A07BD68 + 4 * byte_20A0E522D[v4]))();
}

_BYTE *sub_20A07BD48(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20A07BD68(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20A07BD70(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20A07BD78(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20A07BD80(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20A07BD88(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_20A07BD94()
{
  return 0;
}

ValueMetadata *type metadata accessor for CredentialType.ViennaCodingKeys()
{
  return &type metadata for CredentialType.ViennaCodingKeys;
}

ValueMetadata *type metadata accessor for CredentialType.NightmareCodingKeys()
{
  return &type metadata for CredentialType.NightmareCodingKeys;
}

unint64_t sub_20A07BDC0()
{
  unint64_t result;

  result = qword_2545C9168;
  if (!qword_2545C9168)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E57B4, &type metadata for CredentialType.ViennaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9168);
  }
  return result;
}

unint64_t sub_20A07BE08()
{
  unint64_t result;

  result = qword_2545C9170;
  if (!qword_2545C9170)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E603C, &type metadata for CredentialType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9170);
  }
  return result;
}

unint64_t sub_20A07BE50()
{
  unint64_t result;

  result = qword_2545C9178;
  if (!qword_2545C9178)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5F5C, &type metadata for CredentialType.ArgonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9178);
  }
  return result;
}

unint64_t sub_20A07BE98()
{
  unint64_t result;

  result = qword_2545C9180;
  if (!qword_2545C9180)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5F84, &type metadata for CredentialType.ArgonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9180);
  }
  return result;
}

unint64_t sub_20A07BEE0()
{
  unint64_t result;

  result = qword_2545C9188;
  if (!qword_2545C9188)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5F0C, &type metadata for CredentialType.IronCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9188);
  }
  return result;
}

unint64_t sub_20A07BF28()
{
  unint64_t result;

  result = qword_2545C9190;
  if (!qword_2545C9190)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5F34, &type metadata for CredentialType.IronCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9190);
  }
  return result;
}

unint64_t sub_20A07BF70()
{
  unint64_t result;

  result = qword_2545C9198;
  if (!qword_2545C9198)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5EBC, &type metadata for CredentialType.PioneerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9198);
  }
  return result;
}

unint64_t sub_20A07BFB8()
{
  unint64_t result;

  result = qword_2545C91A0;
  if (!qword_2545C91A0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5EE4, &type metadata for CredentialType.PioneerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91A0);
  }
  return result;
}

unint64_t sub_20A07C000()
{
  unint64_t result;

  result = qword_2545C91A8;
  if (!qword_2545C91A8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5E6C, &type metadata for CredentialType.OrbitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91A8);
  }
  return result;
}

unint64_t sub_20A07C048()
{
  unint64_t result;

  result = qword_2545C91B0;
  if (!qword_2545C91B0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5E94, &type metadata for CredentialType.OrbitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91B0);
  }
  return result;
}

unint64_t sub_20A07C090()
{
  unint64_t result;

  result = qword_2545C91B8;
  if (!qword_2545C91B8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5E1C, &type metadata for CredentialType.LuauCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91B8);
  }
  return result;
}

unint64_t sub_20A07C0D8()
{
  unint64_t result;

  result = qword_2545C91C0;
  if (!qword_2545C91C0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5E44, &type metadata for CredentialType.LuauCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91C0);
  }
  return result;
}

unint64_t sub_20A07C120()
{
  unint64_t result;

  result = qword_2545C91C8;
  if (!qword_2545C91C8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5DCC, &type metadata for CredentialType.SunspriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91C8);
  }
  return result;
}

unint64_t sub_20A07C168()
{
  unint64_t result;

  result = qword_2545C91D0;
  if (!qword_2545C91D0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5DF4, &type metadata for CredentialType.SunspriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91D0);
  }
  return result;
}

unint64_t sub_20A07C1B0()
{
  unint64_t result;

  result = qword_2545C91D8;
  if (!qword_2545C91D8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5D7C, &type metadata for CredentialType.XenonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91D8);
  }
  return result;
}

unint64_t sub_20A07C1F8()
{
  unint64_t result;

  result = qword_2545C91E0;
  if (!qword_2545C91E0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5DA4, &type metadata for CredentialType.XenonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91E0);
  }
  return result;
}

unint64_t sub_20A07C240()
{
  unint64_t result;

  result = qword_2545C91E8;
  if (!qword_2545C91E8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5D2C, &type metadata for CredentialType.NeonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91E8);
  }
  return result;
}

unint64_t sub_20A07C288()
{
  unint64_t result;

  result = qword_2545C91F0;
  if (!qword_2545C91F0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5D54, &type metadata for CredentialType.NeonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91F0);
  }
  return result;
}

unint64_t sub_20A07C2D0()
{
  unint64_t result;

  result = qword_2545C91F8;
  if (!qword_2545C91F8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5CDC, &type metadata for CredentialType.HenosisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C91F8);
  }
  return result;
}

unint64_t sub_20A07C318()
{
  unint64_t result;

  result = qword_2545C9200;
  if (!qword_2545C9200)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5D04, &type metadata for CredentialType.HenosisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9200);
  }
  return result;
}

unint64_t sub_20A07C360()
{
  unint64_t result;

  result = qword_2545C9208;
  if (!qword_2545C9208)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5C8C, &type metadata for CredentialType.HeliumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9208);
  }
  return result;
}

unint64_t sub_20A07C3A8()
{
  unint64_t result;

  result = qword_2545C9210;
  if (!qword_2545C9210)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5CB4, &type metadata for CredentialType.HeliumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9210);
  }
  return result;
}

unint64_t sub_20A07C3F0()
{
  unint64_t result;

  result = qword_2545C9218;
  if (!qword_2545C9218)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5C3C, &type metadata for CredentialType.KryptonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9218);
  }
  return result;
}

unint64_t sub_20A07C438()
{
  unint64_t result;

  result = qword_2545C9220;
  if (!qword_2545C9220)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5C64, &type metadata for CredentialType.KryptonCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9220);
  }
  return result;
}

unint64_t sub_20A07C480()
{
  unint64_t result;

  result = qword_2545C9228;
  if (!qword_2545C9228)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5BEC, &type metadata for CredentialType.CopernicusHomeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9228);
  }
  return result;
}

unint64_t sub_20A07C4C8()
{
  unint64_t result;

  result = qword_2545C9230;
  if (!qword_2545C9230)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5C14, &type metadata for CredentialType.CopernicusHomeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9230);
  }
  return result;
}

unint64_t sub_20A07C510()
{
  unint64_t result;

  result = qword_2545C9238;
  if (!qword_2545C9238)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5B9C, &type metadata for CredentialType.CopernicusCarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9238);
  }
  return result;
}

unint64_t sub_20A07C558()
{
  unint64_t result;

  result = qword_2545C9240;
  if (!qword_2545C9240)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5BC4, &type metadata for CredentialType.CopernicusCarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9240);
  }
  return result;
}

unint64_t sub_20A07C5A0()
{
  unint64_t result;

  result = qword_2545C9248;
  if (!qword_2545C9248)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5B4C, &type metadata for CredentialType.CopernicusAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9248);
  }
  return result;
}

unint64_t sub_20A07C5E8()
{
  unint64_t result;

  result = qword_2545C9250;
  if (!qword_2545C9250)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5B74, &type metadata for CredentialType.CopernicusAccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9250);
  }
  return result;
}

unint64_t sub_20A07C630()
{
  unint64_t result;

  result = qword_2545C9258;
  if (!qword_2545C9258)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5AFC, &type metadata for CredentialType.CopernicusAliroCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9258);
  }
  return result;
}

unint64_t sub_20A07C678()
{
  unint64_t result;

  result = qword_2545C9260;
  if (!qword_2545C9260)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5B24, &type metadata for CredentialType.CopernicusAliroCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9260);
  }
  return result;
}

unint64_t sub_20A07C6C0()
{
  unint64_t result;

  result = qword_2545C9268;
  if (!qword_2545C9268)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5AAC, &type metadata for CredentialType.ShubaoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9268);
  }
  return result;
}

unint64_t sub_20A07C708()
{
  unint64_t result;

  result = qword_2545C9270;
  if (!qword_2545C9270)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5AD4, &type metadata for CredentialType.ShubaoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9270);
  }
  return result;
}

unint64_t sub_20A07C750()
{
  unint64_t result;

  result = qword_2545C9278;
  if (!qword_2545C9278)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5A5C, &type metadata for CredentialType.SodiumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9278);
  }
  return result;
}

unint64_t sub_20A07C798()
{
  unint64_t result;

  result = qword_2545C9280;
  if (!qword_2545C9280)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5A84, &type metadata for CredentialType.SodiumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9280);
  }
  return result;
}

unint64_t sub_20A07C7E0()
{
  unint64_t result;

  result = qword_2545C9288;
  if (!qword_2545C9288)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5A0C, &type metadata for CredentialType.LithiumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9288);
  }
  return result;
}

unint64_t sub_20A07C828()
{
  unint64_t result;

  result = qword_2545C9290;
  if (!qword_2545C9290)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5A34, &type metadata for CredentialType.LithiumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9290);
  }
  return result;
}

unint64_t sub_20A07C870()
{
  unint64_t result;

  result = qword_2545C9298;
  if (!qword_2545C9298)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E59BC, &type metadata for CredentialType.NightfuryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9298);
  }
  return result;
}

unint64_t sub_20A07C8B8()
{
  unint64_t result;

  result = qword_2545C92A0;
  if (!qword_2545C92A0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E59E4, &type metadata for CredentialType.NightfuryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92A0);
  }
  return result;
}

unint64_t sub_20A07C900()
{
  unint64_t result;

  result = qword_2545C92A8;
  if (!qword_2545C92A8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E596C, &type metadata for CredentialType.AtlasCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92A8);
  }
  return result;
}

unint64_t sub_20A07C948()
{
  unint64_t result;

  result = qword_2545C92B0;
  if (!qword_2545C92B0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5994, &type metadata for CredentialType.AtlasCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92B0);
  }
  return result;
}

unint64_t sub_20A07C990()
{
  unint64_t result;

  result = qword_2545C92B8;
  if (!qword_2545C92B8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E591C, &type metadata for CredentialType.MifareCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92B8);
  }
  return result;
}

unint64_t sub_20A07C9D8()
{
  unint64_t result;

  result = qword_2545C92C0;
  if (!qword_2545C92C0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5944, &type metadata for CredentialType.MifareCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92C0);
  }
  return result;
}

unint64_t sub_20A07CA20()
{
  unint64_t result;

  result = qword_2545C92C8;
  if (!qword_2545C92C8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E58CC, &type metadata for CredentialType.SlalomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92C8);
  }
  return result;
}

unint64_t sub_20A07CA68()
{
  unint64_t result;

  result = qword_2545C92D0;
  if (!qword_2545C92D0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E58F4, &type metadata for CredentialType.SlalomCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92D0);
  }
  return result;
}

unint64_t sub_20A07CAB0()
{
  unint64_t result;

  result = qword_2545C92D8;
  if (!qword_2545C92D8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E587C, &type metadata for CredentialType.HaishanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92D8);
  }
  return result;
}

unint64_t sub_20A07CAF8()
{
  unint64_t result;

  result = qword_2545C92E0;
  if (!qword_2545C92E0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E58A4, &type metadata for CredentialType.HaishanCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92E0);
  }
  return result;
}

unint64_t sub_20A07CB40()
{
  unint64_t result;

  result = qword_2545C92E8;
  if (!qword_2545C92E8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E582C, &type metadata for CredentialType.PTCCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92E8);
  }
  return result;
}

unint64_t sub_20A07CB88()
{
  unint64_t result;

  result = qword_2545C92F0;
  if (!qword_2545C92F0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5854, &type metadata for CredentialType.PTCCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92F0);
  }
  return result;
}

unint64_t sub_20A07CBD0()
{
  unint64_t result;

  result = qword_2545C92F8;
  if (!qword_2545C92F8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E57DC, &type metadata for CredentialType.AlphonsoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C92F8);
  }
  return result;
}

unint64_t sub_20A07CC18()
{
  unint64_t result;

  result = qword_2545C9300;
  if (!qword_2545C9300)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5804, &type metadata for CredentialType.AlphonsoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9300);
  }
  return result;
}

unint64_t sub_20A07CC60()
{
  unint64_t result;

  result = qword_2545C9308;
  if (!qword_2545C9308)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5724, &type metadata for CredentialType.ViennaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9308);
  }
  return result;
}

unint64_t sub_20A07CCA8()
{
  unint64_t result;

  result = qword_2545C9310;
  if (!qword_2545C9310)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E574C, &type metadata for CredentialType.ViennaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9310);
  }
  return result;
}

unint64_t sub_20A07CCF0()
{
  unint64_t result;

  result = qword_2545C9318;
  if (!qword_2545C9318)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E56D4, &type metadata for CredentialType.NightmareCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9318);
  }
  return result;
}

unint64_t sub_20A07CD38()
{
  unint64_t result;

  result = qword_2545C9320;
  if (!qword_2545C9320)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E56FC, &type metadata for CredentialType.NightmareCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9320);
  }
  return result;
}

unint64_t sub_20A07CD80()
{
  unint64_t result;

  result = qword_2545C9328;
  if (!qword_2545C9328)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5FAC, &type metadata for CredentialType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9328);
  }
  return result;
}

unint64_t sub_20A07CDC8()
{
  unint64_t result;

  result = qword_2545C9330;
  if (!qword_2545C9330)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E5FD4, &type metadata for CredentialType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9330);
  }
  return result;
}

uint64_t sub_20A07CE0C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F677241 && a2 == 0xE500000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1852797513 && a2 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265656E6F6950 && a2 == 0xE700000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746962724FLL && a2 == 0xE500000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1969321292 && a2 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74697270736E7553 && a2 == 0xE900000000000065 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6F6E6558 && a2 == 0xE500000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1852794190 && a2 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7369736F6E6548 && a2 == 0xE700000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6D75696C6548 && a2 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E6F747079724BLL && a2 == 0xE700000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x63696E7265706F43 && a2 == 0xEE00656D6F487375 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x63696E7265706F43 && a2 == 0xED00007261437375 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000020A0F0400 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x63696E7265706F43 && a2 == 0xEF6F72696C417375 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6F6162756853 && a2 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6D7569646F53 && a2 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6D75696874694CLL && a2 == 0xE700000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x727566746867694ELL && a2 == 0xE900000000000079 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x73616C7441 && a2 == 0xE500000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x65726166694DLL && a2 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6D6F6C616C53 && a2 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x6E616873696148 && a2 == 0xE700000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 4412496 && a2 == 0xE300000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6F736E6F68706C41 && a2 == 0xE800000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x616E6E656956 && a2 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x72616D746867694ELL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 26;
    else
      return 27;
  }
}

uint64_t sub_20A07D87C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x800000020A0F0420)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_20A07D928(a1, &qword_2545C9338);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_20A07D928(a1, &qword_2545C9340);
}

void sub_20A07D928(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_20A07D96C()
{
  return sub_20A07D9B4(&qword_2545C9348, (uint64_t)&unk_20A0E69D0);
}

uint64_t sub_20A07D990()
{
  return sub_20A07D9B4((unint64_t *)&unk_2545C9350, (uint64_t)&unk_20A0E6978);
}

uint64_t sub_20A07D9B4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x20BD202E4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void SERError.failureReason.getter()
{
  __asm { BR              X10 }
}

unint64_t sub_20A07DA30()
{
  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  return 0xD000000000000019;
}

void sub_20A07DBCC()
{
  JUMPOUT(0x20A07DBB8);
}

void sub_20A07DBF0()
{
  JUMPOUT(0x20A07DBFCLL);
}

void sub_20A07DC08(void *a1, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:

      break;
    default:
      return;
  }
}

unint64_t sub_20A07DC44()
{
  unint64_t result;

  result = qword_2545C9370;
  if (!qword_2545C9370)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SERError, &type metadata for SERError);
    atomic_store(result, (unint64_t *)&qword_2545C9370);
  }
  return result;
}

id sub_20A07DCAC(id result, id a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      result = result;
      break;
    default:
      return result;
  }
  return result;
}

void destroy for SERError(uint64_t a1)
{
  sub_20A07DC08(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9SEService8SERErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_20A07DCAC(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SERError(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_20A07DCAC(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_20A07DC08(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SERError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_20A07DC08(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SERError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SERError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_20A07DE60(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_20A07DE78(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SERError()
{
  return &type metadata for SERError;
}

id Reservation.__allocating_init(uuid:type:metadata:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  objc_super v19;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = *a2;
  v11 = a2[1];
  v12 = &v9[OBJC_IVAR____TtC9SEService11Reservation_uuid];
  v13 = sub_20A0E06D4();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  v15 = &v9[OBJC_IVAR____TtC9SEService11Reservation_type];
  *(_QWORD *)v15 = v10;
  *((_QWORD *)v15 + 1) = v11;
  v16 = &v9[OBJC_IVAR____TtC9SEService11Reservation_metadata];
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;
  v19.receiver = v9;
  v19.super_class = v4;
  v17 = objc_msgSendSuper2(&v19, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v17;
}

id Reservation.init(uuid:type:metadata:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = *a2;
  v11 = a2[1];
  v12 = &v4[OBJC_IVAR____TtC9SEService11Reservation_uuid];
  v13 = sub_20A0E06D4();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a1, v13);
  v15 = &v4[OBJC_IVAR____TtC9SEService11Reservation_type];
  *(_QWORD *)v15 = v10;
  *((_QWORD *)v15 + 1) = v11;
  v16 = &v4[OBJC_IVAR____TtC9SEService11Reservation_metadata];
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v19, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return v17;
}

id Reservation.decodedMetadata.getter()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v8;
  id v9;
  unint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_20A0E0644();
  v9 = 0;
  v2 = objc_msgSend(v0, sel_propertyListWithData_options_format_error_, v1, 0, 0, &v9);

  v3 = v9;
  if (v2)
  {
    sub_20A0E0A34();
    swift_unknownObjectRelease();
    sub_20A07F148((uint64_t)v11, (uint64_t)&v9);
    sub_20A0801C0(0, &qword_2545C9368);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = v8;
    }
    else
    {
      v9 = 0;
      v10 = 0xE000000000000000;
      sub_20A0E0AC4();
      sub_20A0E0854();
      sub_20A0E0B48();
      sub_20A0E0854();
      v2 = v9;
      v5 = v10;
      sub_20A07DC44();
      swift_allocError();
      *(_QWORD *)v6 = v2;
      *(_QWORD *)(v6 + 8) = v5;
      *(_BYTE *)(v6 + 16) = 1;
      swift_willThrow();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v4 = v3;
    sub_20A0E0620();

    swift_willThrow();
  }
  return v2;
}

uint64_t Reservation.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  __int128 v11;
  uint64_t v12[3];
  uint64_t v13;

  swift_getObjectType();
  sub_20A07F184(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_20A0801F8((uint64_t)v12, &qword_2545C9378);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    v9 = 0;
    return v9 & 1;
  }
  v3 = (char *)v11;
  if ((sub_20A0E06B0() & 1) == 0
    || (*(_OWORD *)v12 = *(_OWORD *)(v1 + OBJC_IVAR____TtC9SEService11Reservation_type),
        v11 = *(_OWORD *)(v11 + OBJC_IVAR____TtC9SEService11Reservation_type),
        (_s9SEService14CredentialTypeO2eeoiySbAC_ACtFZ_0(v12, (uint64_t *)&v11) & 1) == 0))
  {

    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11Reservation_metadata);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11Reservation_metadata + 8);
  v6 = *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService11Reservation_metadata];
  v7 = *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService11Reservation_metadata + 8];
  sub_20A07F854(v6, v7);
  sub_20A07F70C(v4, v5);
  v9 = v8;
  sub_20A07F898(v6, v7);

  return v9 & 1;
}

Swift::Void __swiftcall Reservation.encode(with:)(NSCoder with)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  sub_20A0E068C();
  CredentialType.rawValue.getter();
  v2 = (void *)sub_20A0E0800();
  swift_bridgeObjectRelease();
  v3 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v2, v3);

  v4 = (void *)sub_20A0E0800();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  v6 = (void *)sub_20A0E0644();
  v7 = (id)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

}

id Reservation.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_20A07F8DC();

  return v4;
}

id Reservation.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_20A07F8DC();

  return v2;
}

uint64_t Reservation.description.getter()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "Reservation ");
  BYTE5(v4[1]) = 0;
  HIWORD(v4[1]) = -5120;
  sub_20A0E0698();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService11Reservation_type);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService11Reservation_type + 8);
  sub_20A074C44(v2, v3);
  sub_20A074C44(v2, v3);
  sub_20A0E0824();
  sub_20A0E0830();
  swift_bridgeObjectRelease();
  sub_20A075F1C(v2, v3);
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  sub_20A0E062C();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  return v4[0];
}

uint64_t Reservation.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC9SEService11Reservation_uuid;
  v4 = sub_20A0E06D4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Reservation.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11Reservation_type);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11Reservation_type + 8);
  *a1 = v2;
  a1[1] = v3;
  return sub_20A074C44(v2, v3);
}

uint64_t Reservation.metadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService11Reservation_metadata);
  sub_20A07F854(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService11Reservation_metadata + 8));
  return v1;
}

uint64_t static Reservation.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545C9360;
}

uint64_t static Reservation.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545C9360 = a1;
  return result;
}

uint64_t (*static Reservation.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id Reservation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void Reservation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_20A07EA70()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701869940;
  if (*v0 != 1)
    v1 = 0x617461646174656DLL;
  if (*v0)
    return v1;
  else
    return 1684632949;
}

uint64_t sub_20A07EABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A08008C(a1, a2);
  *a3 = result;
  return result;
}

void sub_20A07EAE0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_20A07EAEC()
{
  sub_20A07FBCC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A07EB14()
{
  sub_20A07FBCC();
  return sub_20A0E0DC4();
}

id Reservation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t Reservation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  __int128 v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9380);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A07FBCC();
  sub_20A0E0DAC();
  LOBYTE(v12) = 0;
  sub_20A0E06D4();
  sub_20A07FC98((unint64_t *)&unk_2545C9390, MEMORY[0x24BDCEA70]);
  sub_20A0E0CB0();
  if (!v2)
  {
    v12 = *(_OWORD *)(v3 + OBJC_IVAR____TtC9SEService11Reservation_type);
    v11 = 1;
    sub_20A07FC10();
    sub_20A0E0CB0();
    v12 = *(_OWORD *)(v3 + OBJC_IVAR____TtC9SEService11Reservation_metadata);
    v11 = 2;
    sub_20A07FC54();
    sub_20A0E0CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Reservation.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return Reservation.init(from:)(a1);
}

uint64_t Reservation.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(void);
  objc_class *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t ObjectType;
  _QWORD *v21;
  objc_super v22;
  __int128 v23;
  char v24;

  ObjectType = swift_getObjectType();
  v16 = sub_20A0E06D4();
  v3 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8]();
  v17 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C93A8);
  v5 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A07FBCC();
  v8 = v1;
  v19 = v7;
  v9 = (uint64_t)v21;
  sub_20A0E0DA0();
  if (v9)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v14 = ObjectType;

    swift_deallocPartialClassInstance();
  }
  else
  {
    v21 = a1;
    LOBYTE(v23) = 0;
    sub_20A07FC98((unint64_t *)&unk_2545C93B0, MEMORY[0x24BDCEAA8]);
    v10 = v18;
    sub_20A0E0C5C();
    v12 = *(void (**)(void))(v3 + 32);
    v15[1] = &v8[OBJC_IVAR____TtC9SEService11Reservation_uuid];
    v12();
    v24 = 1;
    sub_20A07FCD8();
    sub_20A0E0C5C();
    *(_OWORD *)&v8[OBJC_IVAR____TtC9SEService11Reservation_type] = v23;
    v24 = 2;
    sub_20A07FD1C();
    sub_20A0E0C5C();
    v13 = (objc_class *)ObjectType;
    *(_OWORD *)&v8[OBJC_IVAR____TtC9SEService11Reservation_metadata] = v23;

    v22.receiver = v8;
    v22.super_class = v13;
    v14 = (uint64_t)objc_msgSendSuper2(&v22, sel_init);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  return v14;
}

uint64_t sub_20A07F0DC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  uint64_t result;

  v6 = objc_allocWithZone(v2);
  result = Reservation.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_20A07F128(_QWORD *a1)
{
  return Reservation.encode(to:)(a1);
}

uint64_t sub_20A07F148(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_20A07F184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9378);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_20A07F1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_20A07F22C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x20A07F410);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_20A07F434(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20A07F490()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_20A07F1CC((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_20A07F898(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_20A07F658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_20A0E0584();
  v11 = result;
  if (result)
  {
    result = sub_20A0E059C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_20A0E0590();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_20A07F1CC(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_20A07F70C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_20A07F750()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_20A07F784 + dword_20A07F844[v0 >> 62]))();
}

uint64_t sub_20A07F794@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      v5 = 1;
    }
    else
    {
      sub_20A07F854(v2, v1);
      sub_20A07F434(v4, v3);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_20A07F854(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_20A07F898(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

id sub_20A07F8DC()
{
  void *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  id result;
  objc_class *v23;
  char *v24;
  objc_super v25;
  __int128 v26;

  ObjectType = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9458);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_20A0E06D4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  v8 = v0;
  v9 = (void *)sub_20A0E09D4();
  v10 = (void *)sub_20A0E09D4();
  sub_20A0801C0(0, &qword_2545C9468);
  v11 = sub_20A0E09D4();
  if (!v9)
  {
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    sub_20A080234(v1, (unint64_t)v4);
    goto LABEL_11;
  }
  v12 = (void *)v11;
  sub_20A0E080C();
  v1 = v13;
  sub_20A0E0680();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_20A0801F8((uint64_t)v4, &qword_2545C9458);
    goto LABEL_13;
  }
  v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v24, v4, v5);
  if (!v10)
    goto LABEL_9;
  v15 = sub_20A0E080C();
  CredentialType.init(rawValue:)(v15, v16, (uint64_t *)&v26);
  v4 = (char *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1) != 26)
  {
    v23 = (objc_class *)ObjectType;
    v1 = v26;
    if (v12)
    {
      v26 = xmmword_20A0E6B00;
      v17 = v12;
      sub_20A0E065C();

      v18 = *((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1) >> 60 != 15)
      {
        v19 = v26;

        v14(&v8[OBJC_IVAR____TtC9SEService11Reservation_uuid], v24, v5);
        v20 = (uint64_t *)&v8[OBJC_IVAR____TtC9SEService11Reservation_type];
        *v20 = v1;
        v20[1] = (uint64_t)v4;
        v21 = &v8[OBJC_IVAR____TtC9SEService11Reservation_metadata];
        *(_QWORD *)v21 = v19;
        *((_QWORD *)v21 + 1) = v18;

        v25.receiver = v8;
        v25.super_class = v23;
        return objc_msgSendSuper2(&v25, sel_init);
      }
    }
    goto LABEL_10;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v24, v5);
LABEL_13:
  result = (id)sub_20A0E0BCC();
  __break(1u);
  return result;
}

unint64_t sub_20A07FBCC()
{
  unint64_t result;

  result = qword_2545C9388;
  if (!qword_2545C9388)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6C84, &type metadata for Reservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9388);
  }
  return result;
}

unint64_t sub_20A07FC10()
{
  unint64_t result;

  result = qword_2545C9D70;
  if (!qword_2545C9D70)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for CredentialType, &type metadata for CredentialType);
    atomic_store(result, (unint64_t *)&qword_2545C9D70);
  }
  return result;
}

unint64_t sub_20A07FC54()
{
  unint64_t result;

  result = qword_2545C93A0;
  if (!qword_2545C93A0)
  {
    result = MEMORY[0x20BD202E4](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2545C93A0);
  }
  return result;
}

uint64_t sub_20A07FC98(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_20A0E06D4();
    result = MEMORY[0x20BD202E4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20A07FCD8()
{
  unint64_t result;

  result = qword_2545C9D90;
  if (!qword_2545C9D90)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for CredentialType, &type metadata for CredentialType);
    atomic_store(result, (unint64_t *)&qword_2545C9D90);
  }
  return result;
}

unint64_t sub_20A07FD1C()
{
  unint64_t result;

  result = qword_2545C93C0;
  if (!qword_2545C93C0)
  {
    result = MEMORY[0x20BD202E4](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2545C93C0);
  }
  return result;
}

uint64_t sub_20A07FD60()
{
  return type metadata accessor for Reservation();
}

uint64_t type metadata accessor for Reservation()
{
  uint64_t result;

  result = qword_2545C9430;
  if (!qword_2545C9430)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_20A07FDA4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20A0E06D4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Reservation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Reservation.__allocating_init(uuid:type:metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of Reservation.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of Reservation.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t getEnumTagSinglePayload for Reservation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Reservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20A07FF34 + 4 * byte_20A0E6B15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20A07FF68 + 4 * byte_20A0E6B10[v4]))();
}

uint64_t sub_20A07FF68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A07FF70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A07FF78);
  return result;
}

uint64_t sub_20A07FF84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A07FF8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20A07FF90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A07FF98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Reservation.CodingKeys()
{
  return &type metadata for Reservation.CodingKeys;
}

unint64_t sub_20A07FFB8()
{
  unint64_t result;

  result = qword_2545C9440;
  if (!qword_2545C9440)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6C5C, &type metadata for Reservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9440);
  }
  return result;
}

unint64_t sub_20A080000()
{
  unint64_t result;

  result = qword_2545C9448;
  if (!qword_2545C9448)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6BCC, &type metadata for Reservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9448);
  }
  return result;
}

unint64_t sub_20A080048()
{
  unint64_t result;

  result = qword_2545C9450;
  if (!qword_2545C9450)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E6BF4, &type metadata for Reservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9450);
  }
  return result;
}

uint64_t sub_20A08008C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20A0801C0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_20A0801F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20A080234(uint64_t a1, unint64_t a2)
{
  if (a2 != 26)
    return sub_20A075F1C(a1, a2);
  return a1;
}

uint64_t AppletState.init(rawValue:)(uint64_t a1)
{
  return sub_20A080404(a1);
}

BOOL sub_20A080260(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20A080274()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

uint64_t sub_20A0802B8()
{
  return sub_20A0E0D88();
}

uint64_t sub_20A0802E0()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

uint64_t sub_20A080320@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_20A080404(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_20A080350(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_20A08035C()
{
  sub_20A08047C();
  return sub_20A0E0890();
}

uint64_t sub_20A0803B8()
{
  sub_20A08047C();
  return sub_20A0E0884();
}

uint64_t sub_20A080404(uint64_t result)
{
  if ((unint64_t)(result - 129) >= 2 && result != 7 && result != 15)
    return 0;
  return result;
}

unint64_t sub_20A080428()
{
  unint64_t result;

  result = qword_2545C94D0;
  if (!qword_2545C94D0)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletState, &type metadata for AppletState);
    atomic_store(result, (unint64_t *)&qword_2545C94D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppletState()
{
  return &type metadata for AppletState;
}

unint64_t sub_20A08047C()
{
  unint64_t result;

  result = qword_2545C94D8;
  if (!qword_2545C94D8)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletState, &type metadata for AppletState);
    atomic_store(result, (unint64_t *)&qword_2545C94D8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MIDContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for SEMemoryCalculator(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SEMemoryCalculator(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SEMemoryCalculator()
{
  return &type metadata for SEMemoryCalculator;
}

void sub_20A08055C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v33 = MEMORY[0x24BEE4AF8];
    sub_20A097290(0, v1, 0);
    v4 = sub_20A09E624(v2);
    v5 = 0;
    v6 = v2 + 64;
    v7 = *(_BYTE *)(v2 + 32);
    v27 = v2 + 80;
    v28 = v1;
    v30 = v2 + 64;
    v31 = v2;
    v29 = v3;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << v7)
    {
      v10 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_26;
      if (*(_DWORD *)(v2 + 36) != v3)
        goto LABEL_27;
      v32 = v5;
      v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v4);
      v13 = *v11;
      v12 = v11[1];
      v14 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v4);
      sub_20A074C44(*v11, v12);
      v15 = v14;
      sub_20A074C44(v13, v12);
      v16 = (char *)v15;
      sub_20A075F1C(v13, v12);

      v17 = &v16[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances];
      swift_beginAccess();
      if (*(_QWORD *)v17 >> 62)
      {
        sub_20A074C44(v13, v12);
        swift_bridgeObjectRetain();
        v18 = sub_20A0E0BD8();
        swift_bridgeObjectRelease();
      }
      else
      {
        v18 = *(_QWORD *)((*(_QWORD *)v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        sub_20A074C44(v13, v12);
      }
      sub_20A075F1C(v13, v12);

      v20 = *(_QWORD *)(v33 + 16);
      v19 = *(_QWORD *)(v33 + 24);
      if (v20 >= v19 >> 1)
        sub_20A097290(v19 > 1, v20 + 1, 1);
      *(_QWORD *)(v33 + 16) = v20 + 1;
      v21 = (_QWORD *)(v33 + 24 * v20);
      v21[4] = v13;
      v21[5] = v12;
      v21[6] = v18;
      v2 = v31;
      v7 = *(_BYTE *)(v31 + 32);
      v8 = 1 << v7;
      if (v4 >= 1 << v7)
        goto LABEL_28;
      v6 = v30;
      v22 = *(_QWORD *)(v30 + 8 * v10);
      if ((v22 & (1 << v4)) == 0)
        goto LABEL_29;
      v3 = v29;
      if (*(_DWORD *)(v31 + 36) != v29)
        goto LABEL_30;
      v23 = v22 & (-2 << (v4 & 0x3F));
      if (v23)
      {
        v8 = __clz(__rbit64(v23)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v9 = v28;
      }
      else
      {
        v24 = v10 + 1;
        v25 = (v8 + 63) >> 6;
        v9 = v28;
        if (v10 + 1 < v25)
        {
          v26 = *(_QWORD *)(v30 + 8 * v24);
          if (v26)
          {
LABEL_22:
            v8 = __clz(__rbit64(v26)) + (v24 << 6);
          }
          else
          {
            while (v25 - 2 != v10)
            {
              v26 = *(_QWORD *)(v27 + 8 * v10++);
              if (v26)
              {
                v24 = v10 + 1;
                goto LABEL_22;
              }
            }
          }
        }
      }
      v5 = v32 + 1;
      v4 = v8;
      if (v32 + 1 == v9)
        return;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
  }
}

uint64_t sub_20A080834()
{
  uint64_t v0;

  v0 = sub_20A0E0740();
  __swift_allocate_value_buffer(v0, qword_2545D79C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2545D79C8);
  return sub_20A0E0734();
}

uint64_t sub_20A0808AC(unint64_t a1, NSObject *a2, unint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t KeyPath;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char *v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  void *v112;
  void *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  unint64_t v119;
  id v120[4];

  v5 = v4;
  v99 = a4;
  v98 = a3;
  v8 = sub_20A0E0740();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2545C8E10 == -1)
    goto LABEL_2;
LABEL_163:
  swift_once();
LABEL_2:
  v12 = __swift_project_value_buffer(v8, (uint64_t)qword_2545D79C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v13 = sub_20A0E0728();
  v14 = sub_20A0E09B0();
  v15 = os_log_type_enabled(v13, (os_log_type_t)v14);
  v108 = a2;
  if (v15)
  {
    LODWORD(v113) = v14;
    v114 = v5;
    v16 = swift_slowAlloc();
    v112 = (void *)swift_slowAlloc();
    v120[0] = v112;
    *(_DWORD *)v16 = 136315906;
    v118 = sub_20A0A6D5C(0xD00000000000003FLL, 0x800000020A0F0C90, (uint64_t *)v120);
    sub_20A0E0A10();
    *(_WORD *)(v16 + 12) = 2080;
    sub_20A08558C();
    v17 = sub_20A0E07B8();
    v118 = sub_20A0A6D5C(v17, v18, (uint64_t *)v120);
    sub_20A0E0A10();
    v115 = (_QWORD *)a1;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2080;
    v19 = sub_20A0E0A40();
    v118 = sub_20A0A6D5C(v19, v20, (uint64_t *)v120);
    sub_20A0E0A10();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 2080;
    if ((v99 & 1) != 0)
    {
      v23 = 0xE500000000000000;
      v21 = 0x3E6C696E3CLL;
    }
    else
    {
      v118 = v98;
      sub_20A085548();
      v21 = sub_20A0E0A28();
      v23 = v22;
    }
    v24 = v113;
    v118 = sub_20A0A6D5C(v21, v23, (uint64_t *)v120);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v13, v24, "%s %s %s %s", (uint8_t *)v16, 0x2Au);
    v25 = (uint64_t)v112;
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v25, -1, -1);
    MEMORY[0x20BD20380](v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    a2 = v108;
    v5 = v114;
    a1 = (unint64_t)v115;
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v26 = MEMORY[0x20BD2041C](v109);
  if (!v26)
  {
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v33 = 0xD00000000000003CLL;
    *(_QWORD *)(v33 + 8) = 0x800000020A0F0A10;
    *(_BYTE *)(v33 + 16) = 0;
    swift_willThrow();
    return v9;
  }
  v27 = (char *)v26;
  v11 = (char *)a1;
  v28 = SEState.friendlyDetails.getter();
  v29 = v5;
  sub_20A08055C(v28);
  v31 = v30;
  a1 = v29;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
    v32 = sub_20A0E0BFC();
  }
  else
  {
    v32 = MEMORY[0x24BEE4B00];
  }
  v120[0] = (id)v32;
  v34 = (_QWORD *)swift_bridgeObjectRetain();
  sub_20A09D6D0(v34, 1, v120);
  if (v29)
    goto LABEL_169;
  swift_bridgeObjectRelease();
  v35 = (uint64_t)v120[0];
  v36 = swift_bridgeObjectRetain();
  v107 = sub_20A081BD0(v36, v35);
  v37 = SEState.friendlyDetails.getter();
  v38 = *(_QWORD *)(v37 + 16);
  v102 = v27;
  v114 = 0;
  if (v38 && (v39 = sub_20A0B8934(0, 5), (v40 & 1) != 0))
    v41 = *(id *)(*(_QWORD *)(v37 + 56) + 8 * v39);
  else
    v41 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SEPackageDetails()), sel_init);
  v5 = (unint64_t)v41;
  swift_bridgeObjectRelease();
  v110 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded);

  v113 = 0;
  v105 = 0;
  v8 = 0;
  v42 = *(_QWORD *)(v107 + 64);
  v103 = v107 + 64;
  v43 = 1 << *(_BYTE *)(v107 + 32);
  v44 = -1;
  if (v43 < 64)
    v44 = ~(-1 << v43);
  v45 = v44 & v42;
  v101 = OBJC_IVAR____TtC9SEService10SESnapshot_deviceCapability;
  v104 = (unint64_t)(v43 + 63) >> 6;
  v46 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v106 = 26;
  v9 = (uint64_t)&unk_24C2BC110;
  v100 = xmmword_20A0E6DF0;
  v115 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v44 & v42) != 0)
  {
LABEL_21:
    v111 = (v45 - 1) & v45;
    v47 = __clz(__rbit64(v45)) | (v8 << 6);
    goto LABEL_33;
  }
LABEL_22:
  v48 = __OFADD__(v8++, 1);
  if (v48)
    goto LABEL_160;
  if (v8 >= v104)
    goto LABEL_124;
  v49 = *(_QWORD *)(v103 + 8 * v8);
  if (!v49)
  {
    v50 = v8 + 1;
    if (v8 + 1 >= v104)
      goto LABEL_124;
    v49 = *(_QWORD *)(v103 + 8 * v50);
    if (v49)
      goto LABEL_31;
    v50 = v8 + 2;
    if (v8 + 2 >= v104)
      goto LABEL_124;
    v49 = *(_QWORD *)(v103 + 8 * v50);
    if (v49)
    {
LABEL_31:
      v8 = v50;
      goto LABEL_32;
    }
    v50 = v8 + 3;
    if (v8 + 3 < v104)
    {
      v49 = *(_QWORD *)(v103 + 8 * v50);
      if (!v49)
      {
        while (1)
        {
          v8 = v50 + 1;
          if (__OFADD__(v50, 1))
            goto LABEL_162;
          if (v8 >= v104)
            goto LABEL_124;
          v49 = *(_QWORD *)(v103 + 8 * v8);
          ++v50;
          if (v49)
            goto LABEL_32;
        }
      }
      goto LABEL_31;
    }
LABEL_124:
    swift_release();
    v8 = (uint64_t)v102;
    v5 = v98;
    if ((v99 & 1) != 0)
      v5 = v46[2];
    v120[0] = v46;
    swift_bridgeObjectRetain_n();
    v73 = v114;
    sub_20A084898((uint64_t *)v120);
    if (v73)
      goto LABEL_170;
    v11 = 0;
    swift_bridgeObjectRelease();
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v74 = *((_QWORD *)v120[0] + 2);
      v75 = v74 - v5;
      if (v74 < v5)
        v75 = 0;
      if (v75 == v74)
      {
        swift_unknownObjectRelease();
        v9 = 0;
        goto LABEL_141;
      }
      if (v75 < v74)
      {
        v9 = 0;
        if (v5 >= v74)
          v76 = *((_QWORD *)v120[0] + 2);
        else
          v76 = v5;
        v77 = -(uint64_t)v76;
        v78 = (uint64_t)v120[0] + 8 * v74 + 32;
        do
        {
          v79 = *(_QWORD *)(v78 + 8 * v77);
          v48 = __OFADD__(v9, v79);
          v9 += v79;
          if (v48)
            goto LABEL_161;
        }
        while (!__CFADD__(v77++, 1));
        swift_unknownObjectRelease();
LABEL_141:
        if (v105 <= 1
          || (sub_20A0E0A58(),
              KeyPath = swift_getKeyPath(),
              v82 = MEMORY[0x20BD1F5B8](a2, KeyPath),
              swift_release(),
              (v82 & 1) == 0)
          && (v83 = swift_getKeyPath(), v84 = MEMORY[0x20BD1F5B8](a2, v83), swift_release(), (v84 & 1) == 0))
        {

          sub_20A080234((uint64_t)v113, v106);
LABEL_148:
          swift_bridgeObjectRelease();
          return v9;
        }
        if (v106 == 26)
        {
          sub_20A07DC44();
          swift_allocError();
          *(_QWORD *)v85 = 0xD000000000000035;
          *(_QWORD *)(v85 + 8) = 0x800000020A0F0BE0;
          *(_BYTE *)(v85 + 16) = 2;
LABEL_146:
          swift_willThrow();
          swift_bridgeObjectRelease();

          return v9;
        }
        v120[0] = v113;
        v120[1] = (id)v106;
        v87 = sub_20A082838((uint64_t *)v120);
        if (!v87)
        {
          v120[0] = 0;
          v120[1] = (id)0xE000000000000000;
          sub_20A0E0AC4();
          v93 = (uint64_t)v113;
          v94 = v106;
          v118 = (uint64_t)v113;
          v119 = v106;
          sub_20A0E0B48();
          sub_20A080234(v93, v94);
          sub_20A0E0854();
          v95 = *(_OWORD *)v120;
          sub_20A07DC44();
          swift_allocError();
          *(_OWORD *)v96 = v95;
          *(_BYTE *)(v96 + 16) = 0;
          goto LABEL_146;
        }
        sub_20A080234((uint64_t)v113, v106);
        v120[0] = *(id *)&v87[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory];
        v88 = v120[0];
        swift_getAtKeyPath();

        v89 = v118;
        v117 = *(id *)&v87[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory];
        v90 = v117;
        swift_getAtKeyPath();

        v91 = v89 + v116;
        if (!__OFADD__(v89, v116))
        {
          v92 = (v105 - 1) * v91;
          if ((unsigned __int128)((v105 - 1) * (__int128)v91) >> 64 == v92 >> 63)
          {
            v48 = __OFSUB__(v9, v92);
            v9 -= v92;
            if (!v48)
            {
              if (v9 < 1)
              {
                sub_20A07DC44();
                swift_allocError();
                *(_QWORD *)v97 = 0xD000000000000042;
                *(_QWORD *)(v97 + 8) = 0x800000020A0F0C40;
                *(_BYTE *)(v97 + 16) = 2;
                swift_willThrow();
                swift_bridgeObjectRelease();

                return v9;
              }

              goto LABEL_148;
            }
LABEL_168:
            __break(1u);
LABEL_169:
            swift_unexpectedError();
            __break(1u);
LABEL_170:
            swift_release();
            __break(1u);
            JUMPOUT(0x20A081B68);
          }
LABEL_167:
          __break(1u);
          goto LABEL_168;
        }
LABEL_166:
        __break(1u);
        goto LABEL_167;
      }
    }
    __break(1u);
    goto LABEL_166;
  }
LABEL_32:
  v111 = (v49 - 1) & v49;
  v47 = __clz(__rbit64(v49)) + (v8 << 6);
LABEL_33:
  v51 = (uint64_t *)(*(_QWORD *)(v107 + 48) + 16 * v47);
  v53 = *v51;
  v52 = v51[1];
  v112 = *(void **)(*(_QWORD *)(v107 + 56) + 8 * v47);
  sub_20A074C44(v53, v52);
  sub_20A074C44(v53, v52);
  v54 = 0;
  while (2)
  {
    v55 = *(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32);
    v56 = *(_QWORD *)((char *)&unk_24C2BC110 + v54 + 40);
    switch(v56)
    {
      case 0uLL:
        if (v52)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0);
        sub_20A075F1C(v53, 0);
        v59 = v55;
        v60 = 0;
        goto LABEL_103;
      case 1uLL:
        if (v52 != 1)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 1uLL);
        sub_20A075F1C(v53, 1uLL);
        v59 = v55;
        v60 = 1;
        goto LABEL_103;
      case 2uLL:
        if (v52 != 2)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 2uLL);
        sub_20A075F1C(v53, 2uLL);
        v59 = v55;
        v60 = 2;
        goto LABEL_103;
      case 3uLL:
        if (v52 != 3)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 3uLL);
        sub_20A075F1C(v53, 3uLL);
        v59 = v55;
        v60 = 3;
        goto LABEL_103;
      case 4uLL:
        if (v52 != 4)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 4uLL);
        sub_20A075F1C(v53, 4uLL);
        v59 = v55;
        v60 = 4;
        goto LABEL_103;
      case 5uLL:
        if (v52 != 5)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 5uLL);
        sub_20A075F1C(v53, 5uLL);
        v59 = v55;
        v60 = 5;
        goto LABEL_103;
      case 6uLL:
        if (v52 != 6)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 6uLL);
        sub_20A075F1C(v53, 6uLL);
        v59 = v55;
        v60 = 6;
        goto LABEL_103;
      case 7uLL:
        if (v52 != 7)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 7uLL);
        sub_20A075F1C(v53, 7uLL);
        v59 = v55;
        v60 = 7;
        goto LABEL_103;
      case 8uLL:
        if (v52 != 8)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 8uLL);
        sub_20A075F1C(v53, 8uLL);
        v59 = v55;
        v60 = 8;
        goto LABEL_103;
      case 9uLL:
        if (v52 != 9)
          goto LABEL_88;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 9uLL);
        sub_20A075F1C(v53, 9uLL);
        v59 = v55;
        v60 = 9;
        goto LABEL_103;
      case 0xAuLL:
        if (v52 != 10)
          goto LABEL_88;
        a1 = 10;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0xAuLL);
        sub_20A075F1C(v53, 0xAuLL);
        v61 = v55;
        v62 = 10;
        goto LABEL_101;
      case 0xBuLL:
        if (v52 != 11)
          goto LABEL_88;
        a1 = 11;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0xBuLL);
        sub_20A075F1C(v53, 0xBuLL);
        v61 = v55;
        v62 = 11;
        goto LABEL_101;
      case 0xCuLL:
        if (v52 != 12)
          goto LABEL_88;
        a1 = 12;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0xCuLL);
        v61 = v53;
        v62 = 12;
        goto LABEL_101;
      case 0xDuLL:
        if (v52 != 13)
          goto LABEL_88;
        a1 = 13;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0xDuLL);
        v61 = v53;
        v62 = 13;
        goto LABEL_101;
      case 0xEuLL:
        if (v52 != 14)
          goto LABEL_88;
        a1 = 14;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0xEuLL);
        v61 = v53;
        v62 = 14;
        goto LABEL_101;
      case 0xFuLL:
        if (v52 != 15)
          goto LABEL_88;
        a1 = 15;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0xFuLL);
        v61 = v53;
        v62 = 15;
        goto LABEL_101;
      case 0x10uLL:
        if (v52 != 16)
          goto LABEL_88;
        a1 = 16;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x10uLL);
        v61 = v53;
        v62 = 16;
        goto LABEL_101;
      case 0x11uLL:
        if (v52 != 17)
          goto LABEL_88;
        a1 = 17;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x11uLL);
        v61 = v53;
        v62 = 17;
        goto LABEL_101;
      case 0x12uLL:
        if (v52 != 18)
          goto LABEL_88;
        a1 = 18;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x12uLL);
        v61 = v53;
        v62 = 18;
        goto LABEL_101;
      case 0x13uLL:
        if (v52 != 19)
          goto LABEL_88;
        a1 = 19;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x13uLL);
        v61 = v53;
        v62 = 19;
        goto LABEL_101;
      case 0x14uLL:
        if (v52 != 20)
          goto LABEL_88;
        a1 = 20;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x14uLL);
        v61 = v53;
        v62 = 20;
        goto LABEL_101;
      case 0x15uLL:
        if (v52 != 21)
          goto LABEL_88;
        a1 = 21;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x15uLL);
        v61 = v53;
        v62 = 21;
        goto LABEL_101;
      case 0x16uLL:
        if (v52 != 22)
          goto LABEL_88;
        a1 = 22;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x16uLL);
        v61 = v53;
        v62 = 22;
        goto LABEL_101;
      case 0x17uLL:
        if (v52 != 23)
          goto LABEL_88;
        a1 = 23;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x17uLL);
        v61 = v53;
        v62 = 23;
        goto LABEL_101;
      case 0x18uLL:
        if (v52 != 24)
          goto LABEL_88;
        a1 = 24;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x18uLL);
        v61 = v53;
        v62 = 24;
        goto LABEL_101;
      case 0x19uLL:
        if (v52 != 25)
          goto LABEL_88;
        a1 = 25;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), 0x19uLL);
        v61 = v53;
        v62 = 25;
LABEL_101:
        sub_20A075F1C(v61, v62);
        goto LABEL_105;
      default:
        if (v52 < 0x1A)
        {
LABEL_88:
          sub_20A074C44(*(_QWORD *)((char *)&unk_24C2BC110 + v54 + 32), *(_QWORD *)((char *)&unk_24C2BC110 + v54 + 40));
          sub_20A074C44(v53, v52);
          sub_20A074C44(v55, v56);
          sub_20A075F1C(v55, v56);
          sub_20A075F1C(v53, v52);
          sub_20A075F1C(v55, v56);
LABEL_89:
          v54 += 16;
          if (v54 == 64)
          {
            swift_arrayDestroy();
            sub_20A075F1C(v53, v52);
            a2 = v108;
            v58 = (uint64_t)v113;
            goto LABEL_107;
          }
          continue;
        }
        if (v55 != v53 || v56 != v52)
        {
          v5 = sub_20A0E0CEC();
          sub_20A074C44(v53, v52);
          sub_20A074C44(v55, v56);
          sub_20A075F1C(v55, v56);
          sub_20A075F1C(v53, v52);
          if ((v5 & 1) != 0)
            goto LABEL_104;
          goto LABEL_89;
        }
        sub_20A074C44(v53, v52);
        sub_20A074C44(v53, v52);
        sub_20A075F1C(v53, v52);
        v59 = v53;
        v60 = v52;
LABEL_103:
        sub_20A075F1C(v59, v60);
LABEL_104:
        a1 = v52;
LABEL_105:
        sub_20A075F1C(v53, a1);
        sub_20A080234((uint64_t)v113, v106);
        v48 = __OFADD__(v105++, 1);
        a2 = v108;
        if (v48)
        {
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        sub_20A074C44(v53, v52);
        v58 = v53;
        v106 = v52;
LABEL_107:
        v113 = (void *)v58;
        if ((v52 & 0xFFFFFFFFFFFFFFFDLL) != 0xC)
        {
LABEL_116:
          v120[0] = (id)v53;
          v120[1] = (id)v52;
          v70 = v114;
          sub_20A081C4C((uint64_t)v120, (uint64_t)v112, a2);
          v114 = v70;
          if (v70)
          {
            sub_20A080234((uint64_t)v113, v106);
            swift_bridgeObjectRelease();
            swift_release();

            sub_20A075F1C(v53, v52);
            return v9;
          }
          v5 = v71;
          sub_20A075F1C(v53, v52);
          v46 = v115;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v46 = sub_20A0A6BC0(0, v46[2] + 1, 1, v46);
          v45 = v111;
          a1 = v46[2];
          v72 = v46[3];
          if (a1 >= v72 >> 1)
            v46 = sub_20A0A6BC0((_QWORD *)(v72 > 1), a1 + 1, 1, v46);
          v46[2] = a1 + 1;
          v46[a1 + 4] = v5;
          v115 = v46;
          if (v45)
            goto LABEL_21;
          goto LABEL_22;
        }
        v63 = *(unsigned __int8 *)(*(_QWORD *)&v102[v101] + OBJC_IVAR____TtC9SEService16DeviceCapability_supportsUWB);
        if (v110 & 1 | ((v63 & 1) == 0))
        {
          v110 |= v63;
          goto LABEL_116;
        }
        *(_OWORD *)v120 = v100;
        v64 = v114;
        sub_20A081C4C((uint64_t)v120, 1, a2);
        v114 = v64;
        if (!v64)
        {
          v66 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v115 = sub_20A0A6BC0(0, v115[2] + 1, 1, v115);
          v68 = v115[2];
          v67 = v115[3];
          if (v68 >= v67 >> 1)
            v115 = sub_20A0A6BC0((_QWORD *)(v67 > 1), v68 + 1, 1, v115);
          v69 = v115;
          v115[2] = v68 + 1;
          v69[v68 + 4] = v66;
          v110 = 1;
          goto LABEL_116;
        }
        sub_20A080234((uint64_t)v113, v106);

        sub_20A075F1C(v53, v52);
        swift_bridgeObjectRelease();
        swift_release();
        return v9;
    }
  }
}

uint64_t sub_20A081BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_20A084594(a1, (uint64_t)sub_20A0A8CFC, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

void sub_20A081C4C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  os_log_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  id v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  char *v50;
  id *v51;
  int64_t v52;
  uint64_t i;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  char *v83;
  os_log_t v84;
  int64_t v85;
  char *v86;
  char *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91[2];
  id v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = v3;
  v89 = a2;
  v7 = sub_20A0E0740();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  if (qword_2545C8E10 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v7, (uint64_t)qword_2545D79C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
  sub_20A074C44((uint64_t)v11, v12);
  swift_retain();
  sub_20A074C44((uint64_t)v11, v12);
  swift_retain();
  v14 = sub_20A0E0728();
  v15 = sub_20A0E09B0();
  v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    v17 = swift_slowAlloc();
    v87 = (char *)v8;
    v18 = v17;
    v86 = (char *)swift_slowAlloc();
    v91[0] = v86;
    *(_DWORD *)v18 = 136315906;
    LODWORD(v85) = v16;
    v92 = (id)sub_20A0A6D5C(0xD00000000000003CLL, 0x800000020A0F0B00, (uint64_t *)v91);
    sub_20A0E0A10();
    *(_WORD *)(v18 + 12) = 2080;
    v83 = (char *)(v18 + 14);
    v92 = v11;
    v93 = v12;
    sub_20A074C44((uint64_t)v11, v12);
    sub_20A074C44((uint64_t)v11, v12);
    sub_20A0E0824();
    v84 = v14;
    v19 = sub_20A0E0830();
    v88 = v3;
    v20 = v19;
    v21 = a3;
    v23 = v22;
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v11, v12);
    v92 = (id)sub_20A0A6D5C(v20, v23, (uint64_t *)v91);
    sub_20A0E0A10();
    a3 = v21;
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v11, v12);
    sub_20A075F1C((uint64_t)v11, v12);
    *(_WORD *)(v18 + 22) = 2080;
    v92 = (id)v89;
    sub_20A085548();
    v24 = sub_20A0E0A28();
    v92 = (id)sub_20A0A6D5C(v24, v25, (uint64_t *)v91);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 32) = 2080;
    v26 = sub_20A0E0A40();
    v92 = (id)sub_20A0A6D5C(v26, v27, (uint64_t *)v91);
    v4 = v88;
    sub_20A0E0A10();
    swift_release_n();
    swift_bridgeObjectRelease();
    v28 = v84;
    _os_log_impl(&dword_20A048000, v84, (os_log_type_t)v85, "%s %s %s %s", (uint8_t *)v18, 0x2Au);
    v29 = v86;
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v29, -1, -1);
    MEMORY[0x20BD20380](v18, -1, -1);

    (*((void (**)(char *, uint64_t))v87 + 1))(v10, v7);
  }
  else
  {
    sub_20A075F1C((uint64_t)v11, v12);
    sub_20A075F1C((uint64_t)v11, v12);

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v30 = MEMORY[0x20BD2041C](v90);
  if (!v30)
  {
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v33 = 0xD00000000000003CLL;
    *(_QWORD *)(v33 + 8) = 0x800000020A0F0A10;
    *(_BYTE *)(v33 + 16) = 0;
    swift_willThrow();
    return;
  }
  v31 = (char *)v30;
  v92 = v11;
  v93 = v12;
  v32 = sub_20A082838((uint64_t *)&v92);
  if (v4)
  {
LABEL_8:

    return;
  }
  v88 = (void *)v12;
  if (!v32)
  {
    v92 = 0;
    v93 = 0xE000000000000000;
    sub_20A0E0AC4();
    v55 = (unint64_t)v88;
    v92 = v11;
    v93 = (unint64_t)v88;
    sub_20A074C44((uint64_t)v11, (unint64_t)v88);
    sub_20A074C44((uint64_t)v11, v55);
    sub_20A0E0824();
    v56 = (uint64_t)v11;
    v57 = (void *)sub_20A0E0830();
    v59 = v58;
    swift_bridgeObjectRelease();
    sub_20A075F1C(v56, v55);
    swift_bridgeObjectRelease();
    v92 = v57;
    v93 = v59;
    sub_20A0E0854();
    v60 = v92;
    v61 = v93;
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v62 = v60;
    *(_QWORD *)(v62 + 8) = v61;
    *(_BYTE *)(v62 + 16) = 0;
    swift_willThrow();
    goto LABEL_8;
  }
  v87 = v32;
  v34 = SEState.friendlyDetails.getter();
  v35 = *(_QWORD *)(v34 + 16);
  v36 = (uint64_t)v11;
  v37 = (char *)v11;
  v38 = (unint64_t)v88;
  sub_20A074C44(v36, (unint64_t)v88);
  v82 = v37;
  if (v35 && (v39 = sub_20A0B8934((uint64_t)v37, v38), (v40 & 1) != 0))
    v41 = (char *)*(id *)(*(_QWORD *)(v34 + 56) + 8 * v39);
  else
    v41 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SEPackageDetails()), sel_init);
  v42 = v41;
  swift_bridgeObjectRelease();
  sub_20A075F1C((uint64_t)v37, v38);
  if (!v89)
  {
    v52 = (int64_t)v42;
    v63 = &v42[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances];
    swift_beginAccess();
    v64 = *(_QWORD *)v63;
    v44 = v87;
    if (v64 >> 62)
      goto LABEL_73;
    v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
    v66 = (char *)v52;
    if (!v65)
      goto LABEL_74;
LABEL_36:

    return;
  }
  v86 = v42;
  if (*(uint64_t *)&v42[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers] <= 1)
    v43 = 1;
  else
    v43 = *(_QWORD *)&v42[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers];
  v44 = v87;
  v92 = *(id *)&v87[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory];
  v45 = v92;
  swift_getAtKeyPath();

  v46 = (char *)v91[0];
  v95 = *(_QWORD *)&v44[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory];
  v47 = (unint64_t)(id)v95;
  swift_getAtKeyPath();

  v48 = v94 * v43;
  if ((unsigned __int128)(v94 * (__int128)v43) >> 64 != (v94 * v43) >> 63)
  {
    __break(1u);
    goto LABEL_38;
  }
  v49 = __OFADD__(v46, v48);
  v50 = &v46[v48];
  if (v49)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    v52 = sub_20A0E0BD8();
    if (v52)
      goto LABEL_23;
    goto LABEL_40;
  }
  v85 = (int64_t)v50;
  v51 = (id *)&v86[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances];
  swift_beginAccess();
  v47 = (unint64_t)*v51;
  v91[0] = (id)MEMORY[0x24BEE4AF8];
  if (v47 >> 62)
    goto LABEL_39;
  v52 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v52)
  {
LABEL_23:
    v83 = v31;
    v84 = a3;
    if (v52 < 1)
      goto LABEL_72;
    for (i = 0; i != v52; ++i)
    {
      if ((v47 & 0xC000000000000001) != 0)
        v54 = (char *)MEMORY[0x20BD1F648](i, v47);
      else
        v54 = (char *)*(id *)(v47 + 8 * i + 32);
      v10 = v54;
      if (*(_QWORD *)&v54[OBJC_IVAR____TtC9SEService8SEApplet_lifecycleState] == 7)
      {
        sub_20A0E0B0C();
        sub_20A0E0B30();
        sub_20A0E0B3C();
        sub_20A0E0B18();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v52 = (int64_t)v91[0];
    v31 = v83;
    a3 = v84;
    goto LABEL_41;
  }
LABEL_40:
  swift_bridgeObjectRelease();
  v52 = MEMORY[0x24BEE4AF8];
LABEL_41:
  v67 = v82;
  v44 = (char *)v88;
  sub_20A074C44((uint64_t)v82, (unint64_t)v88);
  v68 = sub_20A07473C((uint64_t)v67, (unint64_t)v44, (uint64_t)&unk_24C2BC0B0);
  swift_arrayDestroy();
  sub_20A075F1C((uint64_t)v67, (unint64_t)v44);
  if ((v68 & 1) == 0)
  {
    swift_retain();
    v72 = v87;
    v73 = sub_20A0853BC(v52, (unint64_t)v72);

    swift_release();
    v74 = *(_QWORD *)(v73 + 16);
    if (v74)
    {
      v44 = 0;
      v75 = (uint64_t *)(v73 + 32);
      do
      {
        v76 = *v75++;
        v49 = __OFADD__(v44, v76);
        v44 += v76;
        if (v49)
          goto LABEL_71;
        --v74;
      }
      while (v74);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  v69 = v87;
  if (v52 < 0 || (v52 & 0x4000000000000000) != 0)
    goto LABEL_81;
  v70 = *(_QWORD *)(v52 + 16);
  while (1)
  {
    swift_release();
    if (v70)
    {
      sub_20A07DC44();
      swift_allocError();
      *(_QWORD *)v71 = 0xD000000000000066;
      *(_QWORD *)(v71 + 8) = 0x800000020A0F0A90;
      *(_BYTE *)(v71 + 16) = 1;
      swift_willThrow();

      return;
    }
    if (v89 < 1)
    {
LABEL_66:
      v52 = v85;
      goto LABEL_67;
    }
    v91[0] = *(id *)&v69[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory];
    v72 = (char *)v91[0];
    swift_getAtKeyPath();

    v52 = v85 + v95;
    if (__OFADD__(v85, v95))
      break;
LABEL_67:
    v91[0] = *(id *)&v69[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory];
    v78 = v91[0];
    swift_getAtKeyPath();

    if ((unsigned __int128)(v95 * (__int128)v89) >> 64 != (v95 * v89) >> 63)
      goto LABEL_87;
    if (!__OFADD__(v52, v95 * v89))
      return;
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    swift_bridgeObjectRetain();
    v79 = sub_20A0E0BD8();
    swift_bridgeObjectRelease();
    v66 = (char *)v52;
    if (v79)
      goto LABEL_36;
LABEL_74:
    if (v66[OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded] == 1)
    {
      v91[0] = *(id *)&v44[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory];
      v80 = v91[0];
      swift_getAtKeyPath();

      v66 = (char *)v52;
      v69 = (char *)v95;
    }
    else
    {
      v69 = 0;
    }
    v81 = *(_QWORD *)&v66[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers];
    v91[0] = *(id *)&v44[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory];
    v67 = v66;
    v72 = (char *)v91[0];
    swift_getAtKeyPath();

    if ((unsigned __int128)(v81 * (__int128)v95) >> 64 != (v81 * v95) >> 63)
      goto LABEL_83;
    if (!__OFADD__(v69, v81 * v95))
      return;
    __break(1u);
LABEL_81:
    swift_bridgeObjectRetain();
    v70 = sub_20A0E0BD8();
    swift_release();
  }
  __break(1u);
LABEL_56:
  v44 = 0;
LABEL_57:
  v10 = v31;
  v31 = (char *)a3;
  swift_bridgeObjectRelease();
  a3 = &v44[v85];
  if (__OFADD__(v85, v44))
  {
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v91[0] = v82;
  v91[1] = v88;
  v67 = v72;
  v72 = sub_20A083F6C((uint64_t)v91, (uint64_t)v31, v87);

  if ((v52 & 0x8000000000000000) == 0 && (v52 & 0x4000000000000000) == 0)
  {
    v69 = *(char **)(v52 + 16);

    goto LABEL_61;
  }
LABEL_84:
  swift_bridgeObjectRetain();
  v69 = (char *)sub_20A0E0BD8();

  swift_release();
LABEL_61:
  swift_release();

  v77 = v89 - (_QWORD)v69;
  if (!__OFSUB__(v89, v69))
  {
    if ((unsigned __int128)((uint64_t)v72 * (__int128)v77) >> 64 != ((uint64_t)v72 * v77) >> 63)
      goto LABEL_86;
    if (!__OFADD__(a3, (_QWORD)v72 * v77))
      return;
    __break(1u);
    goto LABEL_66;
  }
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
}

char *sub_20A082838(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  __int128 v35;
  uint64_t v36;
  int v37;
  char v38;

  v3 = v1;
  v5 = sub_20A0E0740();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = a1[1];
  if (qword_2545C8E10 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v5, (uint64_t)qword_2545D79C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v11, v5);
  sub_20A074C44(v9, v10);
  sub_20A074C44(v9, v10);
  v12 = sub_20A0E0728();
  v13 = sub_20A0E09B0();
  v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    v15 = swift_slowAlloc();
    v32 = v3;
    v16 = v15;
    v17 = swift_slowAlloc();
    v31 = v17;
    *(_DWORD *)v16 = 136315394;
    v33 = v2;
    v34[0] = v17;
    *(_QWORD *)&v35 = sub_20A0A6D5C(0xD00000000000001CLL, 0x800000020A0F0A50, v34);
    sub_20A0E0A10();
    *(_WORD *)(v16 + 12) = 2080;
    v29[1] = v16 + 14;
    *(_QWORD *)&v35 = v9;
    *((_QWORD *)&v35 + 1) = v10;
    sub_20A074C44(v9, v10);
    sub_20A074C44(v9, v10);
    sub_20A0E0824();
    v18 = sub_20A0E0830();
    v37 = v14;
    v19 = v18;
    v30 = v6;
    v21 = v20;
    swift_bridgeObjectRelease();
    sub_20A075F1C(v9, v10);
    *(_QWORD *)&v35 = sub_20A0A6D5C(v19, v21, v34);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A075F1C(v9, v10);
    sub_20A075F1C(v9, v10);
    _os_log_impl(&dword_20A048000, v12, (os_log_type_t)v37, "%s %s", (uint8_t *)v16, 0x16u);
    v22 = v31;
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v22, -1, -1);
    v23 = v16;
    v3 = v32;
    MEMORY[0x20BD20380](v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v5);
  }
  else
  {
    sub_20A075F1C(v9, v10);
    sub_20A075F1C(v9, v10);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v24 = MEMORY[0x20BD2041C](v3);
  if (v24)
  {
    v25 = (void *)v24;
    v26 = *(_QWORD *)(v24 + OBJC_IVAR____TtC9SEService10SESnapshot_dataSource + 16);
    v35 = *(_OWORD *)(v24 + OBJC_IVAR____TtC9SEService10SESnapshot_dataSource);
    v36 = v26;
    v34[0] = v9;
    v34[1] = v10;
    v38 = *(_BYTE *)(*(_QWORD *)(v24 + OBJC_IVAR____TtC9SEService10SESnapshot_seState)
                   + OBJC_IVAR____TtC9SEService7SEState_seType);
    v8 = (char *)SERDataSource.getMemoryInfo(type:seType:)(v34, &v38);

  }
  else
  {
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v27 = 0xD00000000000003CLL;
    *(_QWORD *)(v27 + 8) = 0x800000020A0F0A10;
    *(_BYTE *)(v27 + 16) = 0;
    swift_willThrow();
  }
  return v8;
}

char *sub_20A082BD8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  BOOL v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  void *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;

  v4 = sub_20A0E0740();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2545C8E10 != -1)
    goto LABEL_114;
  while (1)
  {
    v8 = __swift_project_value_buffer(v4, (uint64_t)qword_2545D79C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v9 = sub_20A0E0728();
    v10 = sub_20A0E09B0();
    v11 = v10;
    v12 = os_log_type_enabled(v9, v10);
    v63 = (uint64_t)a2;
    v64 = a1;
    if (v12)
    {
      v13 = swift_slowAlloc();
      v68 = (void *)swift_slowAlloc();
      *(_QWORD *)&v70 = v68;
      *(_DWORD *)v13 = 136315650;
      LODWORD(v67) = v11;
      v71 = sub_20A0A6D5C(0xD000000000000041, 0x800000020A0F0B40, (uint64_t *)&v70);
      sub_20A0E0A10();
      *(_WORD *)(v13 + 12) = 2080;
      sub_20A08558C();
      v14 = sub_20A0E07B8();
      v71 = sub_20A0A6D5C(v14, v15, (uint64_t *)&v70);
      sub_20A0E0A10();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2080;
      v16 = sub_20A0E0A40();
      v71 = sub_20A0A6D5C(v16, v17, (uint64_t *)&v70);
      a1 = v64;
      sub_20A0E0A10();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20A048000, v9, (os_log_type_t)v67, "%s %s %s", (uint8_t *)v13, 0x20u);
      v18 = v68;
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v18, -1, -1);
      MEMORY[0x20BD20380](v13, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v19 = MEMORY[0x20BD2041C](v65);
    if (!v19)
      goto LABEL_107;
    v20 = (char *)v19;
    v21 = SEState.friendlyDetails.getter();
    v22 = *(_QWORD *)(v21 + 16);
    v59 = v20;
    if (v22 && (v23 = sub_20A0B8934(0, 5), (v24 & 1) != 0))
      v25 = (unsigned __int8 *)*(id *)(*(_QWORD *)(v21 + 56) + 8 * v23);
    else
      v25 = (unsigned __int8 *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SEPackageDetails()), sel_init);
    v26 = v25;
    swift_bridgeObjectRelease();
    v62 = v26[OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded];

    v27 = *(_QWORD *)(a1 + 64);
    v60 = a1 + 64;
    v28 = 1 << *(_BYTE *)(a1 + 32);
    v29 = -1;
    if (v28 < 64)
      v29 = ~(-1 << v28);
    v30 = v29 & v27;
    v58 = OBJC_IVAR____TtC9SEService10SESnapshot_deviceCapability;
    v61 = (unint64_t)(v28 + 63) >> 6;
    swift_bridgeObjectRetain();
    v7 = 0;
    v31 = 0;
    a2 = &unk_24C2BC170;
    v57 = xmmword_20A0E6DF0;
    v5 = v69;
LABEL_13:
    if (v30)
    {
      v69 = v5;
      v66 = (v30 - 1) & v30;
      v67 = v31;
      v32 = __clz(__rbit64(v30)) | (v31 << 6);
      goto LABEL_26;
    }
    v33 = __OFADD__(v31, 1);
    v34 = v31 + 1;
    if (!v33)
      break;
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    swift_once();
  }
  if (v34 >= v61)
    goto LABEL_109;
  v35 = *(_QWORD *)(v60 + 8 * v34);
  if (!v35)
  {
    v36 = v34 + 1;
    if (v34 + 1 >= v61)
      goto LABEL_109;
    v35 = *(_QWORD *)(v60 + 8 * v36);
    if (!v35)
    {
      v36 = v34 + 2;
      if (v34 + 2 >= v61)
        goto LABEL_109;
      v35 = *(_QWORD *)(v60 + 8 * v36);
      if (!v35)
      {
        v36 = v34 + 3;
        if (v34 + 3 >= v61)
          goto LABEL_109;
        v35 = *(_QWORD *)(v60 + 8 * v36);
        if (!v35)
        {
          while (1)
          {
            v34 = v36 + 1;
            if (__OFADD__(v36, 1))
            {
              __break(1u);
              JUMPOUT(0x20A083830);
            }
            if (v34 >= v61)
              break;
            v35 = *(_QWORD *)(v60 + 8 * v34);
            ++v36;
            if (v35)
              goto LABEL_25;
          }
LABEL_109:

          swift_release();
          return v7;
        }
      }
    }
    v34 = v36;
  }
LABEL_25:
  v69 = v5;
  v66 = (v35 - 1) & v35;
  v67 = v34;
  v32 = __clz(__rbit64(v35)) + (v34 << 6);
LABEL_26:
  v37 = *(_QWORD *)(a1 + 56);
  v38 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v32);
  a1 = *v38;
  v39 = v38[1];
  v68 = *(void **)(v37 + 8 * v32);
  sub_20A074C44(a1, v39);
  sub_20A074C44(a1, v39);
  v40 = 0;
  while (2)
  {
    v41 = *(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32);
    v42 = *(_QWORD *)((char *)&unk_24C2BC170 + v40 + 40);
    switch(v42)
    {
      case 0uLL:
        if (v39)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0);
        sub_20A075F1C(a1, 0);
        v45 = v41;
        v46 = 0;
        goto LABEL_95;
      case 1uLL:
        if (v39 != 1)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 1uLL);
        sub_20A075F1C(a1, 1uLL);
        v45 = v41;
        v46 = 1;
        goto LABEL_95;
      case 2uLL:
        if (v39 != 2)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 2uLL);
        sub_20A075F1C(a1, 2uLL);
        v45 = v41;
        v46 = 2;
        goto LABEL_95;
      case 3uLL:
        if (v39 != 3)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 3uLL);
        sub_20A075F1C(a1, 3uLL);
        v45 = v41;
        v46 = 3;
        goto LABEL_95;
      case 4uLL:
        if (v39 != 4)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 4uLL);
        sub_20A075F1C(a1, 4uLL);
        v45 = v41;
        v46 = 4;
        goto LABEL_95;
      case 5uLL:
        if (v39 != 5)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 5uLL);
        sub_20A075F1C(a1, 5uLL);
        v45 = v41;
        v46 = 5;
        goto LABEL_95;
      case 6uLL:
        if (v39 != 6)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 6uLL);
        sub_20A075F1C(a1, 6uLL);
        v45 = v41;
        v46 = 6;
        goto LABEL_95;
      case 7uLL:
        if (v39 != 7)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 7uLL);
        sub_20A075F1C(a1, 7uLL);
        v45 = v41;
        v46 = 7;
        goto LABEL_95;
      case 8uLL:
        if (v39 != 8)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 8uLL);
        sub_20A075F1C(a1, 8uLL);
        v45 = v41;
        v46 = 8;
        goto LABEL_95;
      case 9uLL:
        if (v39 != 9)
          goto LABEL_86;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 9uLL);
        sub_20A075F1C(a1, 9uLL);
        v45 = v41;
        v46 = 9;
        goto LABEL_95;
      case 0xAuLL:
        if (v39 != 10)
          goto LABEL_86;
        v47 = 10;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0xAuLL);
        sub_20A075F1C(a1, 0xAuLL);
        sub_20A075F1C(v41, 0xAuLL);
        goto LABEL_97;
      case 0xBuLL:
        if (v39 != 11)
          goto LABEL_86;
        v47 = 11;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0xBuLL);
        sub_20A075F1C(a1, 0xBuLL);
        sub_20A075F1C(v41, 0xBuLL);
        goto LABEL_97;
      case 0xCuLL:
        if (v39 != 12)
          goto LABEL_86;
        v47 = 12;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0xCuLL);
        sub_20A075F1C(a1, 0xCuLL);
        goto LABEL_97;
      case 0xDuLL:
        if (v39 != 13)
          goto LABEL_86;
        v47 = 13;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0xDuLL);
        sub_20A075F1C(a1, 0xDuLL);
        goto LABEL_97;
      case 0xEuLL:
        if (v39 != 14)
          goto LABEL_86;
        v47 = 14;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0xEuLL);
        sub_20A075F1C(a1, 0xEuLL);
        goto LABEL_97;
      case 0xFuLL:
        if (v39 != 15)
          goto LABEL_86;
        v47 = 15;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0xFuLL);
        sub_20A075F1C(a1, 0xFuLL);
        goto LABEL_97;
      case 0x10uLL:
        if (v39 != 16)
          goto LABEL_86;
        v47 = 16;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x10uLL);
        sub_20A075F1C(a1, 0x10uLL);
        goto LABEL_97;
      case 0x11uLL:
        if (v39 != 17)
          goto LABEL_86;
        v47 = 17;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x11uLL);
        sub_20A075F1C(a1, 0x11uLL);
        goto LABEL_97;
      case 0x12uLL:
        if (v39 != 18)
          goto LABEL_86;
        v47 = 18;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x12uLL);
        sub_20A075F1C(a1, 0x12uLL);
        goto LABEL_97;
      case 0x13uLL:
        if (v39 != 19)
          goto LABEL_86;
        v47 = 19;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x13uLL);
        sub_20A075F1C(a1, 0x13uLL);
        goto LABEL_97;
      case 0x14uLL:
        if (v39 != 20)
          goto LABEL_86;
        v47 = 20;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x14uLL);
        sub_20A075F1C(a1, 0x14uLL);
        goto LABEL_97;
      case 0x15uLL:
        if (v39 != 21)
          goto LABEL_86;
        v47 = 21;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x15uLL);
        sub_20A075F1C(a1, 0x15uLL);
        goto LABEL_97;
      case 0x16uLL:
        if (v39 != 22)
          goto LABEL_86;
        v47 = 22;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x16uLL);
        sub_20A075F1C(a1, 0x16uLL);
        goto LABEL_97;
      case 0x17uLL:
        if (v39 != 23)
          goto LABEL_86;
        v47 = 23;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x17uLL);
        sub_20A075F1C(a1, 0x17uLL);
        goto LABEL_97;
      case 0x18uLL:
        if (v39 != 24)
          goto LABEL_86;
        v47 = 24;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x18uLL);
        sub_20A075F1C(a1, 0x18uLL);
        goto LABEL_97;
      case 0x19uLL:
        if (v39 != 25)
          goto LABEL_86;
        v47 = 25;
        sub_20A075F1C(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), 0x19uLL);
        sub_20A075F1C(a1, 0x19uLL);
        goto LABEL_97;
      default:
        if (v39 < 0x1A)
        {
LABEL_86:
          sub_20A074C44(*(_QWORD *)((char *)&unk_24C2BC170 + v40 + 32), *(_QWORD *)((char *)&unk_24C2BC170 + v40 + 40));
          sub_20A074C44(a1, v39);
          sub_20A074C44(v41, v42);
          sub_20A075F1C(v41, v42);
          sub_20A075F1C(a1, v39);
          sub_20A075F1C(v41, v42);
LABEL_87:
          v40 += 16;
          if (v40 == 64)
          {
            swift_arrayDestroy();
            sub_20A075F1C(a1, v39);
            goto LABEL_99;
          }
          continue;
        }
        if (v41 != a1 || v42 != v39)
        {
          v44 = sub_20A0E0CEC();
          sub_20A074C44(a1, v39);
          sub_20A074C44(v41, v42);
          sub_20A075F1C(v41, v42);
          sub_20A075F1C(a1, v39);
          if ((v44 & 1) != 0)
            goto LABEL_96;
          goto LABEL_87;
        }
        sub_20A074C44(a1, v39);
        sub_20A074C44(a1, v39);
        sub_20A075F1C(a1, v39);
        v45 = a1;
        v46 = v39;
LABEL_95:
        sub_20A075F1C(v45, v46);
LABEL_96:
        v47 = v39;
LABEL_97:
        v48 = v59;
        sub_20A075F1C(a1, v47);
        v49 = *(unsigned __int8 *)(*(_QWORD *)&v48[v58] + OBJC_IVAR____TtC9SEService16DeviceCapability_supportsUWB);
        if (!(v62 & 1 | ((v49 & 1) == 0)))
        {
          v70 = v57;
          v50 = v63;
          v51 = v69;
          sub_20A083898((uint64_t)&v70, (void *)1, v63);
          v5 = v51;
          if (v51)
          {
            swift_release();
            sub_20A075F1C(a1, v39);

            return v7;
          }
          v33 = __OFADD__(v7, v52);
          v7 += v52;
          if (!v33)
          {
            v62 = 1;
            goto LABEL_103;
          }
          goto LABEL_113;
        }
        v62 |= v49;
LABEL_99:
        v5 = v69;
        v50 = v63;
LABEL_103:
        *(_QWORD *)&v70 = a1;
        *((_QWORD *)&v70 + 1) = v39;
        sub_20A083898((uint64_t)&v70, v68, v50);
        if (v5)
        {

          swift_release();
          sub_20A075F1C(a1, v39);
        }
        else
        {
          v54 = v53;
          sub_20A075F1C(a1, v39);
          v33 = __OFADD__(v7, v54);
          v7 += v54;
          a1 = v64;
          v30 = v66;
          v31 = v67;
          if (!v33)
            goto LABEL_13;
          __break(1u);
LABEL_107:
          sub_20A07DC44();
          swift_allocError();
          *(_QWORD *)v55 = 0xD00000000000003CLL;
          *(_QWORD *)(v55 + 8) = 0x800000020A0F0A10;
          *(_BYTE *)(v55 + 16) = 0;
          swift_willThrow();
        }
        return v7;
    }
  }
}

void sub_20A083898(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  char *v53;
  _QWORD v54[2];
  uint64_t v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  unint64_t v64;
  uint64_t v65;

  v4 = v3;
  v8 = sub_20A0E0740();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  if (qword_2545C8E10 != -1)
    swift_once();
  v14 = __swift_project_value_buffer(v8, (uint64_t)qword_2545D79C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
  sub_20A074C44((uint64_t)v13, v12);
  swift_retain();
  sub_20A074C44((uint64_t)v13, v12);
  swift_retain();
  v15 = v9;
  v16 = sub_20A0E0728();
  v17 = sub_20A0E09B0();
  v60 = v17;
  v18 = os_log_type_enabled(v16, v17);
  v62 = a3;
  if (v18)
  {
    v19 = swift_slowAlloc();
    v57 = swift_slowAlloc();
    v65 = v57;
    *(_DWORD *)v19 = 136315906;
    v56 = v16;
    v63 = (id)sub_20A0A6D5C(0xD000000000000048, 0x800000020A0F0B90, &v65);
    sub_20A0E0A10();
    *(_WORD *)(v19 + 12) = 2080;
    v54[1] = v19 + 14;
    v63 = v13;
    v64 = v12;
    sub_20A074C44((uint64_t)v13, v12);
    sub_20A074C44((uint64_t)v13, v12);
    sub_20A0E0824();
    v20 = sub_20A0E0830();
    v58 = v4;
    v59 = (uint64_t)a2;
    v21 = v20;
    v55 = v15;
    v23 = v22;
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v13, v12);
    v63 = (id)sub_20A0A6D5C(v21, v23, &v65);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v13, v12);
    sub_20A075F1C((uint64_t)v13, v12);
    *(_WORD *)(v19 + 22) = 2080;
    v63 = a2;
    sub_20A085548();
    v24 = sub_20A0E0A28();
    v63 = (id)sub_20A0A6D5C(v24, v25, &v65);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 32) = 2080;
    v26 = sub_20A0E0A40();
    v63 = (id)sub_20A0A6D5C(v26, v27, &v65);
    v4 = v58;
    sub_20A0E0A10();
    swift_release_n();
    a2 = (void *)v59;
    swift_bridgeObjectRelease();
    v28 = v56;
    _os_log_impl(&dword_20A048000, v56, (os_log_type_t)v60, "%s %s %s %s", (uint8_t *)v19, 0x2Au);
    v29 = v57;
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v29, -1, -1);
    MEMORY[0x20BD20380](v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v8);
  }
  else
  {
    sub_20A075F1C((uint64_t)v13, v12);
    sub_20A075F1C((uint64_t)v13, v12);

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v8);
  }
  v30 = MEMORY[0x20BD2041C](v4);
  if (!v30)
  {
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v34 = 0xD00000000000003CLL;
    *(_QWORD *)(v34 + 8) = 0x800000020A0F0A10;
    *(_BYTE *)(v34 + 16) = 0;
    swift_willThrow();
    return;
  }
  v31 = (void *)v30;
  v63 = v13;
  v64 = v12;
  v32 = v61;
  v33 = sub_20A082838((uint64_t *)&v63);
  if (v32)
  {
LABEL_8:

    return;
  }
  v35 = v33;
  if (!v33)
  {
    v63 = 0;
    v64 = 0xE000000000000000;
    sub_20A0E0AC4();
    v63 = v13;
    v64 = v12;
    sub_20A074C44((uint64_t)v13, v12);
    sub_20A074C44((uint64_t)v13, v12);
    sub_20A0E0824();
    v43 = (void *)sub_20A0E0830();
    v45 = v44;
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v13, v12);
    swift_bridgeObjectRelease();
    v63 = v43;
    v64 = v45;
    sub_20A0E0854();
    v46 = v63;
    v47 = v64;
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v48 = v46;
    *(_QWORD *)(v48 + 8) = v47;
    *(_BYTE *)(v48 + 16) = 0;
    swift_willThrow();
    goto LABEL_8;
  }
  v58 = v4;
  v36 = SEState.friendlyDetails.getter();
  v37 = *(_QWORD *)(v36 + 16);
  sub_20A074C44((uint64_t)v13, v12);
  if (v37 && (v38 = sub_20A0B8934((uint64_t)v13, v12), (v39 & 1) != 0))
    v40 = *(id *)(*(_QWORD *)(v36 + 56) + 8 * v38);
  else
    v40 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SEPackageDetails()), sel_init);
  v41 = v40;
  v59 = (uint64_t)a2;
  swift_bridgeObjectRelease();
  sub_20A075F1C((uint64_t)v13, v12);
  if ((v41[OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded] & 1) != 0)
  {
    v42 = 0;
    goto LABEL_20;
  }
  v49 = *(_QWORD *)&v41[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers];
  v63 = *(id *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory];
  v50 = v63;
  swift_getAtKeyPath();

  v61 = v65;
  v63 = *(id *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory];
  v51 = v63;
  swift_getAtKeyPath();

  v52 = v65 * v49;
  if ((unsigned __int128)(v65 * (__int128)v49) >> 64 != (v65 * v49) >> 63)
  {
    __break(1u);
    goto LABEL_27;
  }
  v42 = v61 + v52;
  if (__OFADD__(v61, v52))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_20:
  if (!v59)
  {
LABEL_25:

    return;
  }
  v63 = v13;
  v64 = v12;
  v53 = v35;
  v35 = sub_20A083F6C((uint64_t)&v63, v62, v35);

  if ((unsigned __int128)((uint64_t)v35 * (__int128)v59) >> 64 != ((uint64_t)v35 * v59) >> 63)
  {
LABEL_28:
    __break(1u);
    return;
  }
  if (__OFADD__(v42, (_QWORD)v35 * v59))
  {
    __break(1u);
    goto LABEL_25;
  }
}

char *sub_20A083F6C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  os_log_t v31;
  uint64_t v32;
  char *result;
  char *v34;
  char v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  id v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  os_log_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;

  v6 = sub_20A0E0740();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  if (qword_2545C8E10 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v6, (uint64_t)qword_2545D79C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
  sub_20A074C44((uint64_t)v11, v10);
  v13 = a3;
  swift_retain();
  sub_20A074C44((uint64_t)v11, v10);
  swift_retain();
  v14 = v13;
  v15 = v6;
  v16 = sub_20A0E0728();
  v56 = sub_20A0E09B0();
  if (os_log_type_enabled(v16, (os_log_type_t)v56))
  {
    v50 = v16;
    v51 = v9;
    v48 = v14;
    v52 = v7;
    v53 = v15;
    v17 = swift_slowAlloc();
    v49 = swift_slowAlloc();
    v62 = v49;
    *(_DWORD *)v17 = 136315906;
    v58 = (id)sub_20A0A6D5C(0xD000000000000037, 0x800000020A0F09D0, &v62);
    sub_20A0E0A10();
    *(_WORD *)(v17 + 12) = 2080;
    v58 = v11;
    v59 = v10;
    sub_20A074C44((uint64_t)v11, v10);
    sub_20A074C44((uint64_t)v11, v10);
    sub_20A0E0824();
    v18 = sub_20A0E0830();
    v54 = a3;
    v19 = a2;
    v20 = v18;
    v22 = v21;
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v11, v10);
    v58 = (id)sub_20A0A6D5C(v20, v22, &v62);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v11, v10);
    sub_20A075F1C((uint64_t)v11, v10);
    *(_WORD *)(v17 + 22) = 2080;
    v23 = sub_20A0E0A40();
    v58 = (id)sub_20A0A6D5C(v23, v24, &v62);
    sub_20A0E0A10();
    v55 = v19;
    a3 = v54;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 32) = 2080;
    if (a3)
    {
      v25 = v48;
      v26 = objc_msgSend(v48, sel_debugDescription);
      v27 = sub_20A0E080C();
      v29 = v28;

    }
    else
    {
      v29 = 0xE500000000000000;
      v27 = 0x3E6C696E3CLL;
      v25 = v48;
    }
    v58 = (id)sub_20A0A6D5C(v27, v29, &v62);
    sub_20A0E0A10();

    swift_bridgeObjectRelease();
    v31 = v50;
    _os_log_impl(&dword_20A048000, v50, (os_log_type_t)v56, "%s %s %s %s", (uint8_t *)v17, 0x2Au);
    v32 = v49;
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v32, -1, -1);
    MEMORY[0x20BD20380](v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
    v30 = v57;
    v14 = v25;
    if (a3)
      goto LABEL_12;
  }
  else
  {
    sub_20A075F1C((uint64_t)v11, v10);
    sub_20A075F1C((uint64_t)v11, v10);

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
    v30 = v57;
    if (a3)
      goto LABEL_12;
  }
  v58 = v11;
  v59 = v10;
  result = sub_20A082838((uint64_t *)&v58);
  if (v30)
    return result;
  a3 = result;
  if (!result)
  {
    v58 = 0;
    v59 = 0xE000000000000000;
    sub_20A0E0AC4();
    v58 = v11;
    v59 = v10;
    sub_20A074C44((uint64_t)v11, v10);
    sub_20A074C44((uint64_t)v11, v10);
    sub_20A0E0824();
    v41 = (void *)sub_20A0E0830();
    v43 = v42;
    swift_bridgeObjectRelease();
    sub_20A075F1C((uint64_t)v11, v10);
    swift_bridgeObjectRelease();
    v58 = v41;
    v59 = v43;
    sub_20A0E0854();
    v44 = v58;
    v45 = v59;
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v46 = v44;
    *(_QWORD *)(v46 + 8) = v45;
    *(_BYTE *)(v46 + 16) = 0;
    return (char *)swift_willThrow();
  }
LABEL_12:
  sub_20A074C44((uint64_t)v11, v10);
  v34 = v14;
  v35 = sub_20A07473C((uint64_t)v11, v10, (uint64_t)&unk_24C2BC050);
  swift_arrayDestroy();
  sub_20A075F1C((uint64_t)v11, v10);
  if ((v35 & 1) != 0)
  {
    v58 = *(id *)&a3[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory];
    v36 = v58;
    swift_getAtKeyPath();

    return (char *)v62;
  }
  else
  {
    v58 = *(id *)&a3[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory];
    v37 = v58;
    swift_getAtKeyPath();
    v38 = v62;
    v39 = a3;

    v40 = *(id *)&v39[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory];
    v61 = v40;
    swift_getAtKeyPath();

    result = (char *)(v38 + v60);
    if (__OFADD__(v38, v60))
      __break(1u);
  }
  return result;
}

uint64_t sub_20A084594(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v51 = a1;
  v52 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v53 = v8;
  v54 = 0;
  v55 = v11 & v9;
  v56 = a2;
  v57 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_20A0A8D18((uint64_t)&v48);
  v12 = v49;
  if (v49 == 26)
  {
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_20A0855E0();
    return swift_release();
  }
  v13 = v48;
  v47 = v50;
  v14 = (_QWORD *)*a5;
  v16 = sub_20A0B8934(v48, v49);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      v23 = (_QWORD *)*a5;
      if ((v15 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      sub_20A0C5588();
      v23 = (_QWORD *)*a5;
      if ((v20 & 1) == 0)
        goto LABEL_15;
    }
LABEL_12:
    v24 = *(_QWORD *)(v23[7] + 8 * v16);
    sub_20A075F1C(v13, v12);
    if (!__OFADD__(v24, v47))
    {
      *(_QWORD *)(v23[7] + 8 * v16) = v24 + v47;
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  sub_20A0C6B90(v19, a4 & 1);
  v21 = sub_20A0B8934(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    v23 = (_QWORD *)*a5;
    if ((v20 & 1) == 0)
    {
LABEL_15:
      v23[(v16 >> 6) + 8] |= 1 << v16;
      v25 = (uint64_t *)(v23[6] + 16 * v16);
      *v25 = v13;
      v25[1] = v12;
      *(_QWORD *)(v23[7] + 8 * v16) = v47;
      v26 = v23[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (!v27)
      {
        v23[2] = v28;
LABEL_26:
        while (1)
        {
          sub_20A0A8D18((uint64_t)&v48);
          v45 = v49;
          if (v49 == 26)
            goto LABEL_27;
          v29 = v48;
          v30 = v50;
          v31 = (_QWORD *)*a5;
          v33 = sub_20A0B8934(v48, v49);
          v34 = v31[2];
          v35 = (v32 & 1) == 0;
          v36 = v34 + v35;
          if (__OFADD__(v34, v35))
            goto LABEL_28;
          v37 = v32;
          if (v31[3] < v36)
          {
            sub_20A0C6B90(v36, 1);
            v38 = sub_20A0B8934(v29, v45);
            if ((v37 & 1) != (v39 & 1))
              goto LABEL_31;
            v33 = v38;
          }
          v40 = (_QWORD *)*a5;
          if ((v37 & 1) != 0)
          {
            v41 = *(_QWORD *)(v40[7] + 8 * v33);
            sub_20A075F1C(v29, v45);
            if (__OFADD__(v41, v30))
              goto LABEL_29;
            *(_QWORD *)(v40[7] + 8 * v33) = v41 + v30;
          }
          else
          {
            v40[(v33 >> 6) + 8] |= 1 << v33;
            v42 = (uint64_t *)(v40[6] + 16 * v33);
            *v42 = v29;
            v42[1] = v45;
            *(_QWORD *)(v40[7] + 8 * v33) = v30;
            v43 = v40[2];
            v27 = __OFADD__(v43, 1);
            v44 = v43 + 1;
            if (v27)
              goto LABEL_30;
            v40[2] = v44;
          }
        }
      }
      goto LABEL_30;
    }
    goto LABEL_12;
  }
LABEL_31:
  result = sub_20A0E0D28();
  __break(1u);
  return result;
}

uint64_t sub_20A084898(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_20A0853A8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_20A084900(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_20A084900(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_20A0E0CBC();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_20A084F88((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = sub_20A085394((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_20A0E08E4();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_20A0851F4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_20A0851F4((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_20A084F88((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_20A0E0BC0();
  __break(1u);
  return result;
}

uint64_t sub_20A084F88(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_20A0852EC((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

char *sub_20A0851F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C94E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_20A0852EC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_20A0E0C08();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_20A085394(uint64_t a1)
{
  return sub_20A0851F4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_20A0853A8(uint64_t a1)
{
  return sub_20A097594(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_20A0853BC(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v15 = MEMORY[0x24BEE4AF8];
    result = sub_20A097274(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v15;
    v8 = *(void **)(a2 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory);
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x20BD1F648](v7, a1);
      else
        v9 = *(id *)(a1 + 8 * v7 + 32);
      v10 = v9;
      v11 = v8;
      swift_getAtKeyPath();

      v13 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      a2 = v13 + 1;
      if (v13 >= v12 >> 1)
        sub_20A097274(v12 > 1, v13 + 1, 1);
      ++v7;
      *(_QWORD *)(v15 + 16) = a2;
      *(_QWORD *)(v15 + 8 * v13 + 32) = v14;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = sub_20A0E0BD8();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t sub_20A085548()
{
  unint64_t result;

  result = qword_2545C94E0;
  if (!qword_2545C94E0)
  {
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2545C94E0);
  }
  return result;
}

unint64_t sub_20A08558C()
{
  unint64_t result;

  result = qword_2545C9FC0;
  if (!qword_2545C9FC0)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for CredentialType, &type metadata for CredentialType);
    atomic_store(result, (unint64_t *)&qword_2545C9FC0);
  }
  return result;
}

uint64_t sub_20A0855E0()
{
  return swift_release();
}

BOOL static JPKIInternalTypes.CertificateType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t JPKIInternalTypes.CertificateType.hash(into:)()
{
  return sub_20A0E0D88();
}

uint64_t sub_20A085630()
{
  _BYTE *v0;

  if (*v0)
    return 0x676E696E676973;
  else
    return 1919251317;
}

uint64_t sub_20A085664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0923EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_20A085688(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_20A085694()
{
  sub_20A085958();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0856BC()
{
  sub_20A085958();
  return sub_20A0E0DC4();
}

uint64_t sub_20A0856E4()
{
  sub_20A08599C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08570C()
{
  sub_20A08599C();
  return sub_20A0E0DC4();
}

uint64_t sub_20A085734()
{
  sub_20A0859E0();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08575C()
{
  sub_20A0859E0();
  return sub_20A0E0DC4();
}

uint64_t JPKIInternalTypes.CertificateType.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C94F0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C94F8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9500);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A085958();
  sub_20A0E0DAC();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_20A08599C();
    sub_20A0E0C74();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_20A0859E0();
    sub_20A0E0C74();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_20A085958()
{
  unint64_t result;

  result = qword_2545C9508;
  if (!qword_2545C9508)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9EA4, &type metadata for JPKIInternalTypes.CertificateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9508);
  }
  return result;
}

unint64_t sub_20A08599C()
{
  unint64_t result;

  result = qword_2545C9510;
  if (!qword_2545C9510)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9E54, &type metadata for JPKIInternalTypes.CertificateType.SigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9510);
  }
  return result;
}

unint64_t sub_20A0859E0()
{
  unint64_t result;

  result = qword_2545C9518;
  if (!qword_2545C9518)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9E04, &type metadata for JPKIInternalTypes.CertificateType.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9518);
  }
  return result;
}

uint64_t JPKIInternalTypes.CertificateType.hashValue.getter()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

uint64_t JPKIInternalTypes.CertificateType.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9520);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8]();
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9528);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9530);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A085958();
  v11 = v33;
  sub_20A0E0DA0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_20A0E0C68();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_20A0E0AF4();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9148);
    *v21 = &type metadata for JPKIInternalTypes.CertificateType;
    sub_20A0E0C20();
    sub_20A0E0AE8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_20A08599C();
    sub_20A0E0C14();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_20A0859E0();
    v22 = v6;
    sub_20A0E0C14();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

BOOL sub_20A085DC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_20A085DD8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return JPKIInternalTypes.CertificateType.init(from:)(a1, a2);
}

uint64_t sub_20A085DEC(_QWORD *a1)
{
  return JPKIInternalTypes.CertificateType.encode(to:)(a1);
}

uint64_t JPKIInternalTypes.CertificateData.certificate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_20A07F854(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_20A085E38()
{
  return 0x6369666974726563;
}

uint64_t sub_20A085E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6369666974726563 && a2 == 0xEB00000000657461)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A085F04()
{
  sub_20A086090();
  return sub_20A0E0DB8();
}

uint64_t sub_20A085F2C()
{
  sub_20A086090();
  return sub_20A0E0DC4();
}

uint64_t JPKIInternalTypes.CertificateData.deinit()
{
  uint64_t v0;

  sub_20A07F898(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t JPKIInternalTypes.CertificateData.__deallocating_deinit()
{
  uint64_t v0;

  sub_20A07F898(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t JPKIInternalTypes.CertificateData.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9538);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A086090();
  sub_20A0E0DAC();
  v9 = *(_OWORD *)(v2 + 16);
  sub_20A07FC54();
  sub_20A0E0CB0();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_20A086090()
{
  unint64_t result;

  result = qword_2545C9540;
  if (!qword_2545C9540)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9DB4, &type metadata for JPKIInternalTypes.CertificateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9540);
  }
  return result;
}

uint64_t JPKIInternalTypes.CertificateData.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  JPKIInternalTypes.CertificateData.init(from:)(a1);
  return v2;
}

uint64_t JPKIInternalTypes.CertificateData.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9548);
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A086090();
  sub_20A0E0DA0();
  if (v2)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_20A07FD1C();
    sub_20A0E0C5C();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v4);
    *(_OWORD *)(v1 + 16) = v8;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

uint64_t sub_20A086268@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_20A087028(a1, (uint64_t (*)(uint64_t))JPKIInternalTypes.CertificateData.init(from:), a2);
}

uint64_t sub_20A086288(_QWORD *a1)
{
  return JPKIInternalTypes.CertificateData.encode(to:)(a1);
}

uint64_t sub_20A0862A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x69426D6574737973;
  else
    return 0x647261646E617473;
}

uint64_t sub_20A0862F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0924CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A086314()
{
  sub_20A086634();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08633C()
{
  sub_20A086634();
  return sub_20A0E0DC4();
}

uint64_t sub_20A086364()
{
  return 12383;
}

uint64_t sub_20A086374()
{
  sub_20A0866BC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08639C()
{
  sub_20A0866BC();
  return sub_20A0E0DC4();
}

uint64_t sub_20A0863C4()
{
  sub_20A086678();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0863EC()
{
  sub_20A086678();
  return sub_20A0E0DC4();
}

uint64_t JPKIInternalTypes.UserAuthentication.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9550);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8]();
  v15 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9558);
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9560);
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1[1];
  v18 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A086634();
  sub_20A0E0DAC();
  if (v11)
  {
    v21 = 0;
    sub_20A0866BC();
    sub_20A0E0C74();
    sub_20A0E0C8C();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v5);
  }
  else
  {
    v22 = 1;
    sub_20A086678();
    v13 = v15;
    sub_20A0E0C74();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
}

unint64_t sub_20A086634()
{
  unint64_t result;

  result = qword_2545C9568;
  if (!qword_2545C9568)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9D64, &type metadata for JPKIInternalTypes.UserAuthentication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9568);
  }
  return result;
}

unint64_t sub_20A086678()
{
  unint64_t result;

  result = qword_2545C9570;
  if (!qword_2545C9570)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9D14, &type metadata for JPKIInternalTypes.UserAuthentication.SystemBiometryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9570);
  }
  return result;
}

unint64_t sub_20A0866BC()
{
  unint64_t result;

  result = qword_2545C9578;
  if (!qword_2545C9578)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9CC4, &type metadata for JPKIInternalTypes.UserAuthentication.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9578);
  }
  return result;
}

uint64_t JPKIInternalTypes.UserAuthentication.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  char v44;

  v37 = a2;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9580);
  v36 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8]();
  v39 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9588);
  v4 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9590);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A086634();
  v41 = v10;
  v11 = v42;
  sub_20A0E0DA0();
  if (v11)
    goto LABEL_7;
  v34 = v4;
  v35 = a1;
  v12 = v39;
  v13 = v40;
  v14 = v38;
  v42 = v8;
  v15 = sub_20A0E0C68();
  v16 = v15;
  v17 = v7;
  if (*(_QWORD *)(v15 + 16) != 1)
  {
    v19 = sub_20A0E0AF4();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9148);
    *v21 = &type metadata for JPKIInternalTypes.UserAuthentication;
    v22 = v41;
    sub_20A0E0C20();
    sub_20A0E0AE8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v7);
    a1 = v35;
LABEL_7:
    v29 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v29);
  }
  v18 = v41;
  if ((*(_BYTE *)(v15 + 32) & 1) != 0)
  {
    v44 = 1;
    sub_20A086678();
    sub_20A0E0C14();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v17);
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v43 = 0;
    sub_20A0866BC();
    v23 = v6;
    sub_20A0E0C14();
    v40 = v16;
    v26 = v14;
    v27 = sub_20A0E0C38();
    v28 = v42;
    v24 = v27;
    v25 = v31;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v17);
  }
  v32 = v37;
  *v37 = v24;
  v32[1] = v25;
  v29 = (uint64_t)v35;
  return __swift_destroy_boxed_opaque_existential_1(v29);
}

uint64_t sub_20A086ABC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return JPKIInternalTypes.UserAuthentication.init(from:)(a1, a2);
}

uint64_t sub_20A086AD0(_QWORD *a1)
{
  return JPKIInternalTypes.UserAuthentication.encode(to:)(a1);
}

uint64_t JPKIInternalTypes.DigitalSignature.certificateData.getter()
{
  return swift_retain();
}

uint64_t JPKIInternalTypes.DigitalSignature.signature.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_20A07F854(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t sub_20A086B1C()
{
  _BYTE *v0;

  if (*v0)
    return 0x727574616E676973;
  else
    return 0x6369666974726563;
}

uint64_t sub_20A086B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0925E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A086B8C()
{
  sub_20A086D8C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A086BB4()
{
  sub_20A086D8C();
  return sub_20A0E0DC4();
}

uint64_t JPKIInternalTypes.DigitalSignature.deinit()
{
  uint64_t v0;

  swift_release();
  sub_20A07F898(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t JPKIInternalTypes.DigitalSignature.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  sub_20A07F898(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t JPKIInternalTypes.DigitalSignature.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  char v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9598);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A086D8C();
  sub_20A0E0DAC();
  *(_QWORD *)&v10 = *(_QWORD *)(v3 + 16);
  v11 = 0;
  type metadata accessor for JPKIInternalTypes.CertificateData();
  sub_20A08EDF4(&qword_2545C95A8, type metadata accessor for JPKIInternalTypes.CertificateData, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.CertificateData);
  sub_20A0E0CB0();
  if (!v2)
  {
    v10 = *(_OWORD *)(v3 + 24);
    v11 = 1;
    sub_20A07FC54();
    sub_20A0E0CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_20A086D8C()
{
  unint64_t result;

  result = qword_2545C95A0;
  if (!qword_2545C95A0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9C74, &type metadata for JPKIInternalTypes.DigitalSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C95A0);
  }
  return result;
}

uint64_t type metadata accessor for JPKIInternalTypes.CertificateData()
{
  return objc_opt_self();
}

uint64_t JPKIInternalTypes.DigitalSignature.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  JPKIInternalTypes.DigitalSignature.init(from:)(a1);
  return v2;
}

uint64_t JPKIInternalTypes.DigitalSignature.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95B0);
  v4 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A086D8C();
  sub_20A0E0DA0();
  if (v2)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    v7 = v4;
    type metadata accessor for JPKIInternalTypes.CertificateData();
    v13 = 0;
    sub_20A08EDF4(&qword_2545C95B8, type metadata accessor for JPKIInternalTypes.CertificateData, (uint64_t)&protocol conformance descriptor for JPKIInternalTypes.CertificateData);
    v8 = v11;
    sub_20A0E0C5C();
    *(_QWORD *)(v1 + 16) = v12;
    v13 = 1;
    sub_20A07FD1C();
    sub_20A0E0C5C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v6, v8);
    *(_OWORD *)(v1 + 24) = v12;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

uint64_t sub_20A087008@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_20A087028(a1, (uint64_t (*)(uint64_t))JPKIInternalTypes.DigitalSignature.init(from:), a2);
}

uint64_t sub_20A087028@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X4>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  v7 = swift_allocObject();
  result = a2(a1);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t sub_20A087088(_QWORD *a1)
{
  return JPKIInternalTypes.DigitalSignature.encode(to:)(a1);
}

void sub_20A0870A8()
{
  __asm { BR              X10 }
}

uint64_t sub_20A0870E8()
{
  _QWORD v1[10];

  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "Type Mismatch ");
  sub_20A0E0854();
  return v1[0];
}

void sub_20A087560()
{
  JUMPOUT(0x20A087548);
}

uint64_t sub_20A0875E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A087620 + 4 * byte_20A0E6EAA[a1]))(0x6D73694D65707974, 0xEC00000068637461);
}

uint64_t sub_20A087620()
{
  return 0x726F727245637078;
}

unint64_t sub_20A087638()
{
  return 0xD000000000000015;
}

uint64_t sub_20A08778C()
{
  return 0x456E776F6E6B6E75;
}

uint64_t sub_20A0877AC()
{
  return 0x43726F727245616CLL;
}

uint64_t sub_20A0877CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x43726F727245616CLL && a2 == 0xEB0000000065646FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A087878()
{
  sub_20A0891F0();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0878A0()
{
  sub_20A0891F0();
  return sub_20A0E0DC4();
}

uint64_t sub_20A0878C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6369666974726563;
  else
    return 7956599;
}

uint64_t sub_20A087908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A092700(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A08792C()
{
  sub_20A089058();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087954()
{
  sub_20A089058();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08797C()
{
  unsigned __int8 *v0;

  return sub_20A0875E4(*v0);
}

uint64_t sub_20A087984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A092804(a1, a2);
  *a3 = result;
  return result;
}

void sub_20A0879A8(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_20A0879B4()
{
  sub_20A088F04();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0879DC()
{
  sub_20A088F04();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087A04()
{
  sub_20A089234();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087A2C()
{
  sub_20A089234();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087A54()
{
  sub_20A089278();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087A7C()
{
  sub_20A089278();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087AA4()
{
  return 1952540791;
}

uint64_t sub_20A087AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1952540791 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A087B38()
{
  sub_20A0891AC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087B60()
{
  sub_20A0891AC();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087B88()
{
  _BYTE *v0;

  if (*v0)
    return 7956599;
  else
    return 0x6F6974617265706FLL;
}

uint64_t sub_20A087BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A092E7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A087BE4()
{
  sub_20A089014();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087C0C()
{
  sub_20A089014();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087C34()
{
  return 7956599;
}

uint64_t sub_20A087C48()
{
  sub_20A088F8C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087C70()
{
  sub_20A088F8C();
  return sub_20A0E0DC4();
}

unint64_t sub_20A087C98()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x444973736170;
  if (*v0 != 1)
    v1 = 0x496465776F6C6C61;
  if (*v0)
    return v1;
  else
    return 0xD000000000000015;
}

uint64_t sub_20A087CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A092F68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A087D1C()
{
  sub_20A089124();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087D44()
{
  sub_20A089124();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087D6C()
{
  sub_20A0890E0();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087D94()
{
  sub_20A0890E0();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087DBC()
{
  return 0x444973736170;
}

uint64_t sub_20A087DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x444973736170 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A087E5C()
{
  sub_20A089168();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087E84()
{
  sub_20A089168();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087EAC()
{
  _BYTE *v0;

  if (*v0)
    return 7956599;
  else
    return 6580577;
}

uint64_t sub_20A087ED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0930BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A087EF4()
{
  sub_20A08909C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087F1C()
{
  sub_20A08909C();
  return sub_20A0E0DC4();
}

uint64_t sub_20A087F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 7956599 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A087FC8()
{
  sub_20A088FD0();
  return sub_20A0E0DB8();
}

uint64_t sub_20A087FF0()
{
  sub_20A088FD0();
  return sub_20A0E0DC4();
}

uint64_t sub_20A088018()
{
  sub_20A089300();
  return sub_20A0E0DB8();
}

uint64_t sub_20A088040()
{
  sub_20A089300();
  return sub_20A0E0DC4();
}

uint64_t sub_20A088068()
{
  sub_20A088F48();
  return sub_20A0E0DB8();
}

uint64_t sub_20A088090()
{
  sub_20A088F48();
  return sub_20A0E0DC4();
}

uint64_t sub_20A0880B8()
{
  return 0x69796C7265646E75;
}

uint64_t sub_20A0880DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x69796C7265646E75 && a2 == 0xEF726F727245676ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A088194()
{
  sub_20A0892BC();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0881BC()
{
  sub_20A0892BC();
  return sub_20A0E0DC4();
}

void JPKIInternalTypes.InternalError.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95C0);
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8]();
  v23 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95C8);
  v36 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8]();
  v58 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95D0);
  v34 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8]();
  v53 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95D8);
  v35 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8]();
  v56 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95E0);
  v32 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8]();
  v51 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95E8);
  v33 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8]();
  v52 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95F0);
  v30 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8]();
  v47 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C95F8);
  v31 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8]();
  v49 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9600);
  v29 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8]();
  v45 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9608);
  v43 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8]();
  v42 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9610);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8]();
  v39 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9618);
  v21[2] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8]();
  v21[1] = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9620);
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8]();
  v26 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9628);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8]();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9630);
  MEMORY[0x24BDAC7A8]();
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9638);
  v65 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8]();
  v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *v1;
  v18 = v1[1];
  v19 = v1[2];
  v63 = v1[3];
  v64 = v18;
  v61 = v1[4];
  v62 = v19;
  v20 = *((unsigned __int8 *)v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A088F04();
  v66 = v17;
  sub_20A0E0DAC();
  __asm { BR              X9 }
}

uint64_t sub_20A088734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 104) = 0;
  sub_20A089300();
  v5 = *(_QWORD *)(v3 - 136);
  v4 = *(_QWORD *)(v3 - 128);
  sub_20A0E0C74();
  sub_20A0E0C8C();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 8))(v5, v4);
}

void sub_20A088D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 - 160);
  v2 = *(_QWORD *)(v0 - 176);
  v3 = *(_QWORD *)(v0 - 168) | *(_QWORD *)(v0 - 152);
  v4 = *(_QWORD *)(v0 - 112);
  if (v3 | v4 | v1 | v2)
  {
    if (v4 != 1 || v3 | v1 | v2)
    {
      *(_BYTE *)(v0 - 104) = 14;
      sub_20A088F48();
      v9 = *(_QWORD *)(v0 - 480);
      v7 = *(_QWORD *)(v0 - 136);
      v6 = *(_QWORD *)(v0 - 128);
      sub_20A0E0C74();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 - 472) + 8))(v9, *(_QWORD *)(v0 - 464));
    }
    else
    {
      *(_BYTE *)(v0 - 104) = 3;
      sub_20A089234();
      v5 = *(_QWORD *)(v0 - 504);
      v7 = *(_QWORD *)(v0 - 136);
      v6 = *(_QWORD *)(v0 - 128);
      sub_20A0E0C74();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 - 496) + 8))(v5, *(_QWORD *)(v0 - 488));
    }
  }
  else
  {
    *(_BYTE *)(v0 - 104) = 2;
    sub_20A089278();
    v8 = *(_QWORD *)(v0 - 456);
    v7 = *(_QWORD *)(v0 - 136);
    v6 = *(_QWORD *)(v0 - 128);
    sub_20A0E0C74();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 - 448) + 8))(v8, *(_QWORD *)(v0 - 440));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 144) + 8))(v7, v6);
  JUMPOUT(0x20A088D54);
}

unint64_t sub_20A088F04()
{
  unint64_t result;

  result = qword_2545C9640;
  if (!qword_2545C9640)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9C24, &type metadata for JPKIInternalTypes.InternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9640);
  }
  return result;
}

unint64_t sub_20A088F48()
{
  unint64_t result;

  result = qword_2545C9648;
  if (!qword_2545C9648)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9BD4, &type metadata for JPKIInternalTypes.InternalError.UnknownErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9648);
  }
  return result;
}

unint64_t sub_20A088F8C()
{
  unint64_t result;

  result = qword_2545C9650;
  if (!qword_2545C9650)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9B84, &type metadata for JPKIInternalTypes.InternalError.OperationApprovalFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9650);
  }
  return result;
}

unint64_t sub_20A088FD0()
{
  unint64_t result;

  result = qword_2545C9658;
  if (!qword_2545C9658)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9B34, &type metadata for JPKIInternalTypes.InternalError.SigningFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9658);
  }
  return result;
}

unint64_t sub_20A089014()
{
  unint64_t result;

  result = qword_2545C9660;
  if (!qword_2545C9660)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9AE4, &type metadata for JPKIInternalTypes.InternalError.InvalidPINorPasscodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9660);
  }
  return result;
}

unint64_t sub_20A089058()
{
  unint64_t result;

  result = qword_2545C9668;
  if (!qword_2545C9668)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9A94, &type metadata for JPKIInternalTypes.InternalError.CertificateReadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9668);
  }
  return result;
}

unint64_t sub_20A08909C()
{
  unint64_t result;

  result = qword_2545C9670;
  if (!qword_2545C9670)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9A44, &type metadata for JPKIInternalTypes.InternalError.SelectFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9670);
  }
  return result;
}

unint64_t sub_20A0890E0()
{
  unint64_t result;

  result = qword_2545C9678;
  if (!qword_2545C9678)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E99F4, &type metadata for JPKIInternalTypes.InternalError.PassInvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9678);
  }
  return result;
}

unint64_t sub_20A089124()
{
  unint64_t result;

  result = qword_2545C9680;
  if (!qword_2545C9680)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E99A4, &type metadata for JPKIInternalTypes.InternalError.PassAccessForbiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9680);
  }
  return result;
}

unint64_t sub_20A089168()
{
  unint64_t result;

  result = qword_2545C9698;
  if (!qword_2545C9698)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9954, &type metadata for JPKIInternalTypes.InternalError.PassLookupFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9698);
  }
  return result;
}

unint64_t sub_20A0891AC()
{
  unint64_t result;

  result = qword_2545C96A0;
  if (!qword_2545C96A0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9904, &type metadata for JPKIInternalTypes.InternalError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C96A0);
  }
  return result;
}

unint64_t sub_20A0891F0()
{
  unint64_t result;

  result = qword_2545C96A8;
  if (!qword_2545C96A8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E98B4, &type metadata for JPKIInternalTypes.InternalError.BiometryFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C96A8);
  }
  return result;
}

unint64_t sub_20A089234()
{
  unint64_t result;

  result = qword_2545C96B0;
  if (!qword_2545C96B0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9864, &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyCorruptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C96B0);
  }
  return result;
}

unint64_t sub_20A089278()
{
  unint64_t result;

  result = qword_2545C96B8;
  if (!qword_2545C96B8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9814, &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C96B8);
  }
  return result;
}

unint64_t sub_20A0892BC()
{
  unint64_t result;

  result = qword_2545C96C0;
  if (!qword_2545C96C0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E97C4, &type metadata for JPKIInternalTypes.InternalError.XpcErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C96C0);
  }
  return result;
}

unint64_t sub_20A089300()
{
  unint64_t result;

  result = qword_2545C96C8;
  if (!qword_2545C96C8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9774, &type metadata for JPKIInternalTypes.InternalError.TypeMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C96C8);
  }
  return result;
}

uint64_t JPKIInternalTypes.InternalError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v34[17];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;

  v59 = a2;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C96D0);
  v46 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8]();
  v56 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C96D8);
  v34[15] = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8]();
  v58 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C96E0);
  v34[13] = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8]();
  v55 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C96E8);
  v34[14] = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8]();
  v57 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C96F0);
  v34[12] = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8]();
  v54 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C96F8);
  v34[10] = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8]();
  v53 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9700);
  v60 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8]();
  v52 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9708);
  v34[11] = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8]();
  v63 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9710);
  v34[9] = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8]();
  v50 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9718);
  v34[8] = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8]();
  v62 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9720);
  v34[7] = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8]();
  v51 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9728);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8]();
  v61 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9730);
  v34[16] = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8]();
  v49 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9738);
  v34[6] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8]();
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9740);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8]();
  v21 = (char *)v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9748);
  v22 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8]();
  v24 = (char *)v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1[3];
  v67 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_20A088F04();
  v26 = v68;
  sub_20A0E0DA0();
  if (v26)
  {
    v27 = (uint64_t)v67;
  }
  else
  {
    v34[2] = v21;
    v34[0] = v19;
    v34[1] = v18;
    v34[3] = v17;
    v34[5] = 0;
    v68 = v22;
    v28 = v66;
    v29 = sub_20A0E0C68();
    if (*(_QWORD *)(v29 + 16) == 1)
    {
      v34[4] = v24;
      __asm { BR              X10 }
    }
    v30 = sub_20A0E0AF4();
    swift_allocError();
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9148);
    *v32 = &type metadata for JPKIInternalTypes.InternalError;
    sub_20A0E0C20();
    sub_20A0E0AE8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x24BEE26D0], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v24, v28);
    v27 = (uint64_t)v67;
  }
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t sub_20A08A95C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545C9688);
    v8 = a2;
    result = MEMORY[0x20BD202E4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20A08A9BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JPKIInternalTypes.InternalError.init(from:)(a1, a2);
}

void sub_20A08A9D0(_QWORD *a1)
{
  JPKIInternalTypes.InternalError.encode(to:)(a1);
}

uint64_t JPKIInternalTypes.CertificateData.__allocating_init(certificateData:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

_QWORD *JPKIInternalTypes.DigitalSignature.__allocating_init(certificate:signature:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t JPKIXPCRequest.passIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t JPKIXPCRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_BYTE *)(v1 + 56);
  *(_BYTE *)(a1 + 40) = v7;
  return sub_20A08AAB4(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_20A08AAB4(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 a6)
{
  int v8;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v8 = a6 >> 6;
  if (v8 == 2)
  {
    v13 = a6 & 1;
    sub_20A07F854(result, a2);
    v11 = a4;
    v12 = a5;
    v10 = v13;
    return sub_20A08AB4C(v11, v12, v10);
  }
  if (v8 != 1)
  {
    if (a6 >> 6)
      return result;
    v10 = a4 & 1;
    v11 = a2;
    v12 = a3;
    return sub_20A08AB4C(v11, v12, v10);
  }
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_20A08AB4C(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return sub_20A07F854(a1, a2);
  else
    return swift_bridgeObjectRetain();
}

uint64_t JPKIXPCRequest.JPKIOperation.description.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A08AB9C
                                                            + 4 * byte_20A0E6EF2[*(unsigned __int8 *)(v0 + 40) >> 6]))(0x7472654364616572, 0xEF65746163696669);
}

unint64_t sub_20A08AB9C()
{
  return 0xD000000000000013;
}

uint64_t sub_20A08ABB8()
{
  return 1852270963;
}

uint64_t sub_20A08ABC8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int8x16_t v2;

  v2 = vorrq_s8(*(int8x16_t *)(v1 + 8), *(int8x16_t *)(v1 + 24));
  if (((a1 == 192) & ((*(_QWORD *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(_QWORD *)v1) == 0)) != 0)
    return 0xD00000000000001CLL;
  else
    return 0x4C4341746567;
}

uint64_t sub_20A08AC34(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_20A08AC70 + 4 * byte_20A0E6EF6[a1]))(0xD00000000000001CLL, 0x800000020A0F0D80);
}

uint64_t sub_20A08AC70()
{
  return 0x7472654364616572;
}

unint64_t sub_20A08AC94()
{
  return 0xD000000000000013;
}

uint64_t sub_20A08ACB0()
{
  return 1852270963;
}

uint64_t sub_20A08ACC0()
{
  return 0x4C4341746567;
}

uint64_t sub_20A08ACD4()
{
  sub_20A08B894();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08ACFC()
{
  sub_20A08B894();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08AD24()
{
  unsigned __int8 *v0;

  return sub_20A08AC34(*v0);
}

uint64_t sub_20A08AD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A09318C(a1, a2);
  *a3 = result;
  return result;
}

void sub_20A08AD50(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_20A08AD5C()
{
  sub_20A08B730();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08AD84()
{
  sub_20A08B730();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08ADAC()
{
  sub_20A08B774();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08ADD4()
{
  sub_20A08B774();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08ADFC()
{
  sub_20A08B9F8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08AE24()
{
  sub_20A08B9F8();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08AE4C()
{
  _BYTE *v0;

  if (*v0)
    return 12639;
  else
    return 12383;
}

uint64_t sub_20A08AE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0933AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A08AE8C()
{
  sub_20A08B91C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08AEB4()
{
  sub_20A08B91C();
  return sub_20A0E0DC4();
}

unint64_t sub_20A08AEDC()
{
  unsigned __int8 *v0;

  return ((unint64_t)*v0 << 8) + 12383;
}

uint64_t sub_20A08AEF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A09346C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A08AF14()
{
  sub_20A08B7B8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08AF3C()
{
  sub_20A08B7B8();
  return sub_20A0E0DC4();
}

void JPKIXPCRequest.JPKIOperation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9758);
  v15[1] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8]();
  v15[0] = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9760);
  v19 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8]();
  v24 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9768);
  v17 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8]();
  v22 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9770);
  v18 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8]();
  v20 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9778);
  MEMORY[0x24BDAC7A8]();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9780);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x24BDAC7A8]();
  v31 = *v1;
  v9 = v1[2];
  v28 = v1[3];
  v10 = v1[4];
  v26 = v9;
  v27 = v10;
  v11 = *((unsigned __int8 *)v1 + 40);
  v12 = a1[3];
  v13 = a1;
  v14 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v13, v12);
  sub_20A08B730();
  v32 = v14;
  sub_20A0E0DAC();
  __asm { BR              X10 }
}

uint64_t sub_20A08B19C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)(v2 - 200) = v0;
  v3 = *(_QWORD *)(v2 - 160);
  *(_BYTE *)(v2 - 112) = 1;
  v4 = v1;
  v5 = *(_QWORD *)(v2 - 176);
  sub_20A08AB4C(v1, v5, v3 & 1);
  sub_20A08B91C();
  v6 = *(_QWORD *)(v2 - 224);
  v7 = *(_QWORD *)(v2 - 144);
  sub_20A0E0C74();
  v8 = *(_QWORD *)(v2 - 128);
  *(_BYTE *)(v2 - 112) = *(_BYTE *)(v2 - 128) & 1;
  *(_BYTE *)(v2 - 65) = 0;
  sub_20A08B80C();
  v9 = *(_QWORD *)(v2 - 216);
  v10 = *(_QWORD *)(v2 - 136);
  sub_20A0E0CB0();
  if (v10)
  {
    sub_20A08B960(v8, v4, v5, v3, *(_QWORD *)(v2 - 168), *(_DWORD *)(v2 - 200));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 240) + 8))(v6, v9);
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(*(_QWORD *)(v2 - 120), v7);
  }
  else
  {
    *(_QWORD *)(v2 - 112) = v4;
    *(_QWORD *)(v2 - 104) = v5;
    *(_BYTE *)(v2 - 96) = v3 & 1;
    *(_BYTE *)(v2 - 65) = 1;
    sub_20A08B850();
    sub_20A0E0CB0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 240) + 8))(v6, v9);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(*(_QWORD *)(v2 - 120), v7);
    return sub_20A08B960(v8, v4, v5, v3, *(_QWORD *)(v2 - 168), *(_DWORD *)(v2 - 200));
  }
}

unint64_t sub_20A08B730()
{
  unint64_t result;

  result = qword_2545C9788;
  if (!qword_2545C9788)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9724, &type metadata for JPKIXPCRequest.JPKIOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9788);
  }
  return result;
}

unint64_t sub_20A08B774()
{
  unint64_t result;

  result = qword_2545C9790;
  if (!qword_2545C9790)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E96D4, &type metadata for JPKIXPCRequest.JPKIOperation.GetACLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9790);
  }
  return result;
}

unint64_t sub_20A08B7B8()
{
  unint64_t result;

  result = qword_2545C9798;
  if (!qword_2545C9798)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9684, &type metadata for JPKIXPCRequest.JPKIOperation.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9798);
  }
  return result;
}

uint64_t sub_20A08B7FC(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return sub_20A07F898(a1, a2);
  else
    return swift_bridgeObjectRelease();
}

unint64_t sub_20A08B80C()
{
  unint64_t result;

  result = qword_2545C97A0;
  if (!qword_2545C97A0)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.CertificateType, &type metadata for JPKIInternalTypes.CertificateType);
    atomic_store(result, (unint64_t *)&qword_2545C97A0);
  }
  return result;
}

unint64_t sub_20A08B850()
{
  unint64_t result;

  result = qword_2545C97A8;
  if (!qword_2545C97A8)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.UserAuthenticationInternal, &type metadata for JPKIInternalTypes.UserAuthenticationInternal);
    atomic_store(result, (unint64_t *)&qword_2545C97A8);
  }
  return result;
}

unint64_t sub_20A08B894()
{
  unint64_t result;

  result = qword_2545C97B0;
  if (!qword_2545C97B0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9634, &type metadata for JPKIXPCRequest.JPKIOperation.ChangeAuthorizationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C97B0);
  }
  return result;
}

unint64_t sub_20A08B8D8()
{
  unint64_t result;

  result = qword_2545C97B8;
  if (!qword_2545C97B8)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.UserAuthentication, &type metadata for JPKIInternalTypes.UserAuthentication);
    atomic_store(result, (unint64_t *)&qword_2545C97B8);
  }
  return result;
}

unint64_t sub_20A08B91C()
{
  unint64_t result;

  result = qword_2545C97C0;
  if (!qword_2545C97C0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E95E4, &type metadata for JPKIXPCRequest.JPKIOperation.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C97C0);
  }
  return result;
}

uint64_t sub_20A08B960(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 a6)
{
  int v8;
  uint64_t v9;
  char v11;
  char v12;

  v8 = a6 >> 6;
  if (v8 == 2)
  {
    v12 = a6 & 1;
    sub_20A07F898(result, a2);
    v9 = a4;
    a3 = a5;
    v11 = v12;
    return sub_20A08B7FC(v9, a3, v11);
  }
  if (v8 != 1)
  {
    if (a6 >> 6)
      return result;
    v9 = a2;
    v11 = a4 & 1;
    return sub_20A08B7FC(v9, a3, v11);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_20A08B9F8()
{
  unint64_t result;

  result = qword_2545C97C8;
  if (!qword_2545C97C8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9594, &type metadata for JPKIXPCRequest.JPKIOperation.GetInstalledCertificateTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C97C8);
  }
  return result;
}

uint64_t JPKIXPCRequest.JPKIOperation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v27 = a2;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C97D0);
  v23[7] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8]();
  v32 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C97D8);
  v28 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8]();
  v31 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C97E0);
  v23[6] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8]();
  v30 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C97E8);
  v23[5] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8]();
  v29 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C97F0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C97F8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_20A08B730();
  v16 = v35;
  sub_20A0E0DA0();
  if (!v16)
  {
    v23[3] = v10;
    v23[1] = v8;
    v23[2] = v7;
    v23[4] = 0;
    v35 = v12;
    v17 = sub_20A0E0C68();
    if (*(_QWORD *)(v17 + 16) == 1)
      __asm { BR              X10 }
    v18 = v14;
    v19 = sub_20A0E0AF4();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9148);
    *v21 = &type metadata for JPKIXPCRequest.JPKIOperation;
    sub_20A0E0C20();
    sub_20A0E0AE8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
}

unint64_t sub_20A08C364()
{
  unint64_t result;

  result = qword_2545C9800;
  if (!qword_2545C9800)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.CertificateType, &type metadata for JPKIInternalTypes.CertificateType);
    atomic_store(result, (unint64_t *)&qword_2545C9800);
  }
  return result;
}

unint64_t sub_20A08C3A8()
{
  unint64_t result;

  result = qword_2545C9808;
  if (!qword_2545C9808)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.UserAuthenticationInternal, &type metadata for JPKIInternalTypes.UserAuthenticationInternal);
    atomic_store(result, (unint64_t *)&qword_2545C9808);
  }
  return result;
}

unint64_t sub_20A08C3EC()
{
  unint64_t result;

  result = qword_2545C9810;
  if (!qword_2545C9810)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.UserAuthentication, &type metadata for JPKIInternalTypes.UserAuthentication);
    atomic_store(result, (unint64_t *)&qword_2545C9810);
  }
  return result;
}

uint64_t sub_20A08C430@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JPKIXPCRequest.JPKIOperation.init(from:)(a1, a2);
}

void sub_20A08C444(_QWORD *a1)
{
  JPKIXPCRequest.JPKIOperation.encode(to:)(a1);
}

void JPKIXPCRequest.description.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 56);
  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  __asm { BR              X10 }
}

uint64_t sub_20A08C548()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v7;

  sub_20A08AAB4(v0, v1, v2, v3, v4, v5);
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A08B960(v0, v1, v2, v3, v4, v5);
  return v7;
}

uint64_t sub_20A08C634()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F6974617265706FLL;
  else
    return 0x6E65644973736170;
}

uint64_t sub_20A08C680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A093578(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A08C6A4()
{
  sub_20A08C87C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08C6CC()
{
  sub_20A08C87C();
  return sub_20A0E0DC4();
}

uint64_t JPKIXPCRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9818);
  v15 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = v7;
  v8 = *(_QWORD *)(v1 + 32);
  v11 = *(_QWORD *)(v1 + 40);
  v12 = v8;
  v10 = *(_QWORD *)(v1 + 48);
  v22 = *(unsigned __int8 *)(v1 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A08C87C();
  sub_20A0E0DAC();
  LOBYTE(v16) = 0;
  sub_20A0E0C8C();
  if (!v2)
  {
    v16 = v14;
    v17 = v13;
    v18 = v12;
    v19 = v11;
    v20 = v10;
    v21 = v22;
    v23 = 1;
    sub_20A08C8C0();
    sub_20A0E0CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v6, v4);
}

unint64_t sub_20A08C87C()
{
  unint64_t result;

  result = qword_2545C9820;
  if (!qword_2545C9820)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9544, &type metadata for JPKIXPCRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9820);
  }
  return result;
}

unint64_t sub_20A08C8C0()
{
  unint64_t result;

  result = qword_2545C9828;
  if (!qword_2545C9828)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIXPCRequest.JPKIOperation, &type metadata for JPKIXPCRequest.JPKIOperation);
    atomic_store(result, (unint64_t *)&qword_2545C9828);
  }
  return result;
}

uint64_t JPKIXPCRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  char v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9830);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A08C87C();
  sub_20A0E0DA0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v26) = 0;
  v9 = sub_20A0E0C38();
  v11 = v10;
  v32 = 1;
  sub_20A08CB30();
  swift_bridgeObjectRetain();
  sub_20A0E0C5C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v26;
  v13 = v27;
  v14 = v29;
  v24 = v28;
  v25 = v26;
  v22 = v29;
  v23 = v27;
  v15 = v30;
  v16 = v31;
  swift_bridgeObjectRetain();
  v17 = v13;
  v18 = v24;
  sub_20A08AAB4(v12, v17, v24, v14, v15, v16);
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  v19 = v23;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v18;
  v20 = v22;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v15;
  *(_BYTE *)(a2 + 56) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return sub_20A08B960(v25, v19, v24, v20, v15, v16);
}

unint64_t sub_20A08CB30()
{
  unint64_t result;

  result = qword_2545C9838;
  if (!qword_2545C9838)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIXPCRequest.JPKIOperation, &type metadata for JPKIXPCRequest.JPKIOperation);
    atomic_store(result, (unint64_t *)&qword_2545C9838);
  }
  return result;
}

uint64_t sub_20A08CB74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JPKIXPCRequest.init(from:)(a1, a2);
}

uint64_t sub_20A08CB88(_QWORD *a1)
{
  return JPKIXPCRequest.encode(to:)(a1);
}

uint64_t sub_20A08CBA0()
{
  return 0x68747541747865;
}

uint64_t sub_20A08CBB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x68747541747865 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A08CC4C()
{
  sub_20A08D048();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08CC74()
{
  sub_20A08D048();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08CC9C()
{
  _BYTE *v0;

  if (*v0)
    return 0x797274656D6F6962;
  else
    return 0x647261646E617473;
}

uint64_t sub_20A08CCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A093698(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A08CCF4()
{
  sub_20A08D004();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08CD1C()
{
  sub_20A08D004();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08CD44()
{
  sub_20A08D08C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08CD6C()
{
  sub_20A08D08C();
  return sub_20A0E0DC4();
}

uint64_t JPKIInternalTypes.UserAuthenticationInternal.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9840);
  v22 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9848);
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9850);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 8);
  v24 = *(_QWORD *)v1;
  v25 = v12;
  v13 = *(_BYTE *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A08D004();
  sub_20A0E0DAC();
  if ((v13 & 1) != 0)
  {
    LOBYTE(v28) = 1;
    v15 = v24;
    v14 = v25;
    sub_20A07F854(v24, v25);
    sub_20A08D048();
    v16 = v27;
    sub_20A0E0C74();
    v28 = v15;
    v29 = v14;
    sub_20A07FC54();
    v17 = v23;
    sub_20A0E0CB0();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v17);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v16);
    return sub_20A08B7FC(v15, v14, 1);
  }
  else
  {
    LOBYTE(v28) = 0;
    sub_20A08D08C();
    v19 = v27;
    sub_20A0E0C74();
    sub_20A0E0C8C();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, v19);
  }
}

unint64_t sub_20A08D004()
{
  unint64_t result;

  result = qword_2545C9858;
  if (!qword_2545C9858)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E94F4, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9858);
  }
  return result;
}

unint64_t sub_20A08D048()
{
  unint64_t result;

  result = qword_2545C9860;
  if (!qword_2545C9860)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E94A4, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.BiometryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9860);
  }
  return result;
}

unint64_t sub_20A08D08C()
{
  unint64_t result;

  result = qword_2545C9868;
  if (!qword_2545C9868)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9454, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9868);
  }
  return result;
}

uint64_t JPKIInternalTypes.UserAuthenticationInternal.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v34 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9870);
  v4 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v36 = v4;
  MEMORY[0x24BDAC7A8]();
  v37 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9878);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9880);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_20A08D004();
  v15 = v41;
  sub_20A0E0DA0();
  if (!v15)
  {
    v33 = v7;
    v16 = v6;
    v17 = v37;
    v41 = v11;
    v18 = sub_20A0E0C68();
    v19 = v18;
    v20 = (char *)v10;
    if (*(_QWORD *)(v18 + 16) == 1)
    {
      v21 = *(_BYTE *)(v18 + 32);
      if ((v21 & 1) != 0)
      {
        LODWORD(v33) = *(unsigned __int8 *)(v18 + 32);
        LOBYTE(v39) = 1;
        sub_20A08D048();
        sub_20A0E0C14();
        sub_20A07FD1C();
        v22 = v35;
        sub_20A0E0C5C();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *))(v41 + 8))(v13, v20);
        v23 = v39;
        v24 = v40;
        v21 = v33;
      }
      else
      {
        LOBYTE(v39) = 0;
        sub_20A08D08C();
        sub_20A0E0C14();
        v36 = v19;
        v37 = v20;
        v29 = sub_20A0E0C38();
        v30 = v41;
        v23 = v29;
        v24 = v31;
        (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v16);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *))(v30 + 8))(v13, v37);
      }
      v32 = v34;
      *v34 = v23;
      v32[1] = v24;
      *((_BYTE *)v32 + 16) = v21;
    }
    else
    {
      v25 = sub_20A0E0AF4();
      swift_allocError();
      v27 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9148);
      *v27 = &type metadata for JPKIInternalTypes.UserAuthenticationInternal;
      sub_20A0E0C20();
      sub_20A0E0AE8();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v41 + 8))(v13, v20);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

uint64_t sub_20A08D4C8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return JPKIInternalTypes.UserAuthenticationInternal.init(from:)(a1, a2);
}

uint64_t sub_20A08D4DC(_QWORD *a1)
{
  return JPKIInternalTypes.UserAuthenticationInternal.encode(to:)(a1);
}

void JPKIXPCResponse.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_20A08D548()
{
  unsigned __int8 v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  sub_20A08D654(*v1, v4, v5, v6, v7, v0);
  sub_20A0870A8();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A08D710(v2, v4, v5, v6, v7, v0);
  return 0x2021726F727245;
}

uint64_t sub_20A08D654(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  switch(a6 >> 5)
  {
    case 0:
      result = sub_20A08D68C(result, a2, a3, a4, a5, a6);
      break;
    case 1:
      result = swift_bridgeObjectRetain();
      break;
    case 2:
    case 3:
      result = swift_retain();
      break;
    case 4:
      result = sub_20A07F854(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20A08D68C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 6:
    case 10:
    case 11:
      goto LABEL_5;
    case 5:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 7:
      sub_20A07F854(result, a2);
      goto LABEL_5;
    case 8:
    case 9:
      swift_bridgeObjectRetain();
LABEL_5:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20A08D710(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  switch(a6 >> 5)
  {
    case 0:
      result = sub_20A08D748(result, a2, a3, a4, a5, a6);
      break;
    case 1:
      result = swift_bridgeObjectRelease();
      break;
    case 2:
    case 3:
      result = swift_release();
      break;
    case 4:
      result = sub_20A07F898(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20A08D748(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 6:
    case 10:
    case 11:
      goto LABEL_5;
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 7:
      sub_20A07F898(result, a2);
      goto LABEL_5;
    case 8:
    case 9:
      swift_bridgeObjectRelease();
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20A08D7CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A08D7FC + 4 * byte_20A0E6F30[a1]))(0x726F727265, 0xE500000000000000);
}

unint64_t sub_20A08D7FC()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_20A08D81C()
{
  return 0x7472654364616572;
}

unint64_t sub_20A08D840()
{
  return 0xD000000000000013;
}

uint64_t sub_20A08D85C()
{
  return 1852270963;
}

uint64_t sub_20A08D86C()
{
  return 0x4C4341746567;
}

uint64_t sub_20A08D880()
{
  sub_20A08E33C();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08D8A8()
{
  sub_20A08E33C();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08D8D0()
{
  unsigned __int8 *v0;

  return sub_20A08D7CC(*v0);
}

uint64_t sub_20A08D8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A093788(a1, a2);
  *a3 = result;
  return result;
}

void sub_20A08D8FC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_20A08D908()
{
  sub_20A08E250();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08D930()
{
  sub_20A08E250();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08D958()
{
  sub_20A08E408();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08D980()
{
  sub_20A08E408();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08D9A8()
{
  sub_20A08E294();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08D9D0()
{
  sub_20A08E294();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08D9F8()
{
  sub_20A08E3C4();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08DA20()
{
  sub_20A08E3C4();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08DA48()
{
  sub_20A08E380();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08DA70()
{
  sub_20A08E380();
  return sub_20A0E0DC4();
}

uint64_t sub_20A08DA98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A08DB14()
{
  sub_20A08E2D8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A08DB3C()
{
  sub_20A08E2D8();
  return sub_20A0E0DC4();
}

void JPKIXPCResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9888);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  MEMORY[0x24BDAC7A8]();
  v26 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9890);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  MEMORY[0x24BDAC7A8]();
  v23 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9898);
  v18 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8]();
  v16 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C98A0);
  v21 = *(_QWORD *)(v8 - 8);
  v22 = v8;
  MEMORY[0x24BDAC7A8]();
  v20 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C98A8);
  v15 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C98B0);
  v13[1] = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C98B8);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8]();
  v11 = *(_QWORD *)(v1 + 8);
  v29 = *(_QWORD *)(v1 + 16);
  v30 = *(_QWORD *)(v1 + 24);
  v31 = v11;
  v32 = *(_QWORD *)(v1 + 32);
  v12 = *(unsigned __int8 *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A08E250();
  sub_20A0E0DAC();
  __asm { BR              X10 }
}

uint64_t sub_20A08DDE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v4 - 136) = 0;
  v5 = v1;
  v6 = v1;
  *(_QWORD *)(v4 - 320) = v1;
  v8 = *(_QWORD *)(v4 - 176);
  v7 = *(_QWORD *)(v4 - 168);
  v9 = *(_QWORD *)(v4 - 184);
  sub_20A08D68C(v5, v7, v9, v8, *(_QWORD *)(v4 - 160), v3);
  sub_20A08E408();
  v10 = *(_QWORD *)(v4 - 144);
  sub_20A0E0C74();
  *(_QWORD *)(v4 - 136) = v6;
  *(_QWORD *)(v4 - 128) = v7;
  *(_QWORD *)(v4 - 120) = v9;
  *(_QWORD *)(v4 - 112) = v8;
  v11 = *(_QWORD *)(v4 - 160);
  *(_QWORD *)(v4 - 104) = v11;
  *(_BYTE *)(v4 - 96) = v3;
  sub_20A08E44C();
  v12 = *(_QWORD *)(v4 - 304);
  sub_20A0E0CB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 312) + 8))(v2, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 8))(v0, v10);
  return sub_20A08D710(*(_QWORD *)(v4 - 320), *(_QWORD *)(v4 - 168), v9, v8, v11, v3);
}

unint64_t sub_20A08E250()
{
  unint64_t result;

  result = qword_2545C98C0;
  if (!qword_2545C98C0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9404, &type metadata for JPKIXPCResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C98C0);
  }
  return result;
}

unint64_t sub_20A08E294()
{
  unint64_t result;

  result = qword_2545C98C8;
  if (!qword_2545C98C8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E93B4, &type metadata for JPKIXPCResponse.GetACLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C98C8);
  }
  return result;
}

unint64_t sub_20A08E2D8()
{
  unint64_t result;

  result = qword_2545C98D0;
  if (!qword_2545C98D0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9364, &type metadata for JPKIXPCResponse.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C98D0);
  }
  return result;
}

uint64_t type metadata accessor for JPKIInternalTypes.DigitalSignature()
{
  return objc_opt_self();
}

unint64_t sub_20A08E33C()
{
  unint64_t result;

  result = qword_2545C98E0;
  if (!qword_2545C98E0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9314, &type metadata for JPKIXPCResponse.ChangeAuthorizationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C98E0);
  }
  return result;
}

unint64_t sub_20A08E380()
{
  unint64_t result;

  result = qword_2545C98E8;
  if (!qword_2545C98E8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E92C4, &type metadata for JPKIXPCResponse.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C98E8);
  }
  return result;
}

unint64_t sub_20A08E3C4()
{
  unint64_t result;

  result = qword_2545C98F0;
  if (!qword_2545C98F0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9274, &type metadata for JPKIXPCResponse.GetInstalledCertificateTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C98F0);
  }
  return result;
}

unint64_t sub_20A08E408()
{
  unint64_t result;

  result = qword_2545C9908;
  if (!qword_2545C9908)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9224, &type metadata for JPKIXPCResponse.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9908);
  }
  return result;
}

unint64_t sub_20A08E44C()
{
  unint64_t result;

  result = qword_2545C9910;
  if (!qword_2545C9910)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.InternalError, &type metadata for JPKIInternalTypes.InternalError);
    atomic_store(result, (unint64_t *)&qword_2545C9910);
  }
  return result;
}

uint64_t JPKIXPCResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v40 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9918);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  MEMORY[0x24BDAC7A8]();
  v35 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9920);
  v37 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8]();
  v36 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9928);
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8]();
  v33 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9930);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x24BDAC7A8]();
  v34 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9938);
  v25[5] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8]();
  v32 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9940);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9948);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8]();
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v41 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_20A08E250();
  v19 = v42;
  sub_20A0E0DA0();
  if (!v19)
  {
    v25[3] = v13;
    v25[1] = v11;
    v25[2] = v10;
    v25[4] = 0;
    v42 = v15;
    v20 = sub_20A0E0C68();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X10 }
    v21 = sub_20A0E0AF4();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9148);
    *v23 = &type metadata for JPKIXPCResponse;
    sub_20A0E0C20();
    sub_20A0E0AE8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
}

void sub_20A08EB7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v4 - 144) = 5;
  sub_20A08E294();
  v5 = *(_QWORD *)(v4 - 200);
  v6 = v0;
  v7 = *(_QWORD *)(v4 - 288);
  sub_20A0E0C14();
  if (v7)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x20A08EB4CLL);
  }
  sub_20A07FD1C();
  sub_20A0E0C5C();
  v8 = *(_QWORD *)(v4 - 72);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
  JUMPOUT(0x20A08EDE4);
}

uint64_t sub_20A08EDF4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = MEMORY[0x20BD202E4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20A08EE30(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545C98F8);
    v8 = a2();
    result = MEMORY[0x20BD202E4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20A08EE98()
{
  unint64_t result;

  result = qword_2545C9960;
  if (!qword_2545C9960)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.InternalError, &type metadata for JPKIInternalTypes.InternalError);
    atomic_store(result, (unint64_t *)&qword_2545C9960);
  }
  return result;
}

unint64_t sub_20A08EEE0()
{
  unint64_t result;

  result = qword_2545C9968;
  if (!qword_2545C9968)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.CertificateType, &type metadata for JPKIInternalTypes.CertificateType);
    atomic_store(result, (unint64_t *)&qword_2545C9968);
  }
  return result;
}

uint64_t sub_20A08EF24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return JPKIXPCResponse.init(from:)(a1, a2);
}

void sub_20A08EF38(_QWORD *a1)
{
  JPKIXPCResponse.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for JPKIInternalTypes()
{
  return &type metadata for JPKIInternalTypes;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.CertificateType()
{
  return &type metadata for JPKIInternalTypes.CertificateType;
}

uint64_t method lookup function for JPKIInternalTypes.CertificateData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JPKIInternalTypes.CertificateData.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

_QWORD *initializeBufferWithCopyOfBuffer for JPKIInternalTypes.UserAuthentication(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for JPKIInternalTypes.UserAuthentication()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for JPKIInternalTypes.UserAuthentication(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for JPKIInternalTypes.UserAuthentication(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JPKIInternalTypes.UserAuthentication(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for JPKIInternalTypes.UserAuthentication(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthentication()
{
  return &type metadata for JPKIInternalTypes.UserAuthentication;
}

uint64_t method lookup function for JPKIInternalTypes.DigitalSignature()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JPKIInternalTypes.DigitalSignature.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t destroy for JPKIInternalTypes.InternalError(uint64_t a1, uint64_t a2)
{
  return sub_20A08F7E4(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_20A08D748);
}

uint64_t initializeWithCopy for JPKIInternalTypes.InternalError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_20A08F80C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D68C);
}

uint64_t *assignWithCopy for JPKIInternalTypes.InternalError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_20A08F898(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D68C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D748);
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for JPKIInternalTypes.InternalError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_20A08F934(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D748);
}

uint64_t getEnumTagSinglePayload for JPKIInternalTypes.InternalError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 0xC)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JPKIInternalTypes.InternalError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 244;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_20A08F1FC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 0xBu)
    return *(unsigned __int8 *)(a1 + 40);
  else
    return (*(_DWORD *)a1 + 12);
}

uint64_t sub_20A08F214(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(_QWORD *)result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 12;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError()
{
  return &type metadata for JPKIInternalTypes.InternalError;
}

uint64_t destroy for JPKIXPCRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_20A08B960(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for JPKIXPCRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  sub_20A08AAB4(v4, v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  return a1;
}

uint64_t assignWithCopy for JPKIXPCRequest(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  sub_20A08AAB4(v4, v5, v6, v7, v8, v2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v14 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  sub_20A08B960(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for JPKIXPCRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unsigned __int8 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 48) = v5;
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v6;
  sub_20A08B960(v7, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for JPKIXPCRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JPKIXPCRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest()
{
  return &type metadata for JPKIXPCRequest;
}

uint64_t destroy for JPKIXPCRequest.JPKIOperation(uint64_t a1, uint64_t a2)
{
  return sub_20A08F7E4(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_20A08B960);
}

uint64_t initializeWithCopy for JPKIXPCRequest.JPKIOperation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_20A08F80C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08AAB4);
}

uint64_t *assignWithCopy for JPKIXPCRequest.JPKIOperation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_20A08F898(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08AAB4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08B960);
}

uint64_t *assignWithTake for JPKIXPCRequest.JPKIOperation(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_20A08F934(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08B960);
}

uint64_t getEnumTagSinglePayload for JPKIXPCRequest.JPKIOperation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 125);
  v3 = ((*(unsigned __int8 *)(a1 + 40) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for JPKIXPCRequest.JPKIOperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_20A08F5C0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40) >> 6;
  if (v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t sub_20A08F5DC(uint64_t result)
{
  *(_BYTE *)(result + 40) &= 0x3Fu;
  return result;
}

uint64_t sub_20A08F5EC(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_BYTE *)(result + 40) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.JPKIOperation()
{
  return &type metadata for JPKIXPCRequest.JPKIOperation;
}

uint64_t destroy for JPKIInternalTypes.UserAuthenticationInternal(uint64_t a1)
{
  return sub_20A08B7FC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9SEService17JPKIInternalTypesO26UserAuthenticationInternalOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_20A08AB4C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JPKIInternalTypes.UserAuthenticationInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_20A08AB4C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_20A08B7FC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for JPKIInternalTypes.UserAuthenticationInternal(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_20A08B7FC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JPKIInternalTypes.UserAuthenticationInternal(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JPKIInternalTypes.UserAuthenticationInternal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_20A08F7B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_20A08F7BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal()
{
  return &type metadata for JPKIInternalTypes.UserAuthenticationInternal;
}

uint64_t destroy for JPKIXPCResponse(uint64_t a1, uint64_t a2)
{
  return sub_20A08F7E4(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_20A08D710);
}

uint64_t sub_20A08F7E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a3(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t initializeWithCopy for JPKIXPCResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_20A08F80C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D654);
}

uint64_t sub_20A08F80C(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = *((unsigned __int8 *)a2 + 40);
  a4(*a2, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  return a1;
}

uint64_t *assignWithCopy for JPKIXPCResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_20A08F898(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D654, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D710);
}

uint64_t *sub_20A08F898(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  v12 = *((unsigned __int8 *)a2 + 40);
  a4(*a2, v8, v9, v10, v11, v12);
  v13 = *a1;
  v14 = a1[1];
  v15 = a1[2];
  v16 = a1[3];
  v17 = a1[4];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a1[4] = v11;
  v18 = *((unsigned __int8 *)a1 + 40);
  *((_BYTE *)a1 + 40) = v12;
  a5(v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t *assignWithTake for JPKIXPCResponse(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_20A08F934(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20A08D710);
}

uint64_t *sub_20A08F934(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *a1;
  v10 = a1[1];
  v9 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  a1[4] = v6;
  v14 = *((unsigned __int8 *)a1 + 40);
  *((_BYTE *)a1 + 40) = v7;
  a4(v8, v10, v9, v11, v12, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for JPKIXPCResponse(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xB && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 11);
  v3 = ((*(unsigned __int8 *)(a1 + 40) >> 1) & 8 | (*(unsigned __int8 *)(a1 + 40) >> 5)) ^ 0xF;
  if (v3 >= 0xA)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for JPKIXPCResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 11;
    if (a3 >= 0xB)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xB)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 40) = 16 * (((-a2 & 8) != 0) - 2 * a2);
    }
  }
  return result;
}

uint64_t sub_20A08FA44(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 <= 0x9F)
    return v1 >> 5;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_20A08FA60(uint64_t result)
{
  *(_BYTE *)(result + 40) &= 0x1Fu;
  return result;
}

uint64_t sub_20A08FA70(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    *(_BYTE *)(result + 40) = *(_BYTE *)(result + 40) & 0xF | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_BYTE *)(result + 40) = -96;
  }
  return result;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse()
{
  return &type metadata for JPKIXPCResponse;
}

uint64_t getEnumTagSinglePayload for SEType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JPKIXPCResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_20A08FB94 + 4 * byte_20A0E6F4D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_20A08FBC8 + 4 * byte_20A0E6F48[v4]))();
}

uint64_t sub_20A08FBC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A08FBD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A08FBD8);
  return result;
}

uint64_t sub_20A08FBE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A08FBECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_20A08FBF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A08FBF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse.CodingKeys()
{
  return &type metadata for JPKIXPCResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse.ErrorCodingKeys()
{
  return &type metadata for JPKIXPCResponse.ErrorCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse.GetInstalledCertificateTypesCodingKeys()
{
  return &type metadata for JPKIXPCResponse.GetInstalledCertificateTypesCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse.ReadCertificateCodingKeys()
{
  return &type metadata for JPKIXPCResponse.ReadCertificateCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse.ChangeAuthorizationCodingKeys()
{
  return &type metadata for JPKIXPCResponse.ChangeAuthorizationCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse.SignCodingKeys()
{
  return &type metadata for JPKIXPCResponse.SignCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCResponse.GetACLCodingKeys()
{
  return &type metadata for JPKIXPCResponse.GetACLCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal.CodingKeys()
{
  return &type metadata for JPKIInternalTypes.UserAuthenticationInternal.CodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal.StandardCodingKeys()
{
  return &type metadata for JPKIInternalTypes.UserAuthenticationInternal.StandardCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal.BiometryCodingKeys()
{
  return &type metadata for JPKIInternalTypes.UserAuthenticationInternal.BiometryCodingKeys;
}

_BYTE *sub_20A08FCAC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.CodingKeys()
{
  return &type metadata for JPKIXPCRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for JPKIXPCRequest.JPKIOperation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JPKIXPCRequest.JPKIOperation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_20A08FDA4 + 4 * byte_20A0E6F57[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_20A08FDD8 + 4 * byte_20A0E6F52[v4]))();
}

uint64_t sub_20A08FDD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A08FDE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A08FDE8);
  return result;
}

uint64_t sub_20A08FDF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A08FDFCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_20A08FE00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A08FE08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.JPKIOperation.CodingKeys()
{
  return &type metadata for JPKIXPCRequest.JPKIOperation.CodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.JPKIOperation.GetInstalledCertificateTypesCodingKeys()
{
  return &type metadata for JPKIXPCRequest.JPKIOperation.GetInstalledCertificateTypesCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.JPKIOperation.ReadCertificateCodingKeys()
{
  return &type metadata for JPKIXPCRequest.JPKIOperation.ReadCertificateCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.JPKIOperation.ChangeAuthorizationCodingKeys()
{
  return &type metadata for JPKIXPCRequest.JPKIOperation.ChangeAuthorizationCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.JPKIOperation.SignCodingKeys()
{
  return &type metadata for JPKIXPCRequest.JPKIOperation.SignCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIXPCRequest.JPKIOperation.GetACLCodingKeys()
{
  return &type metadata for JPKIXPCRequest.JPKIOperation.GetACLCodingKeys;
}

uint64_t getEnumTagSinglePayload for JPKIInternalTypes.InternalError.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JPKIInternalTypes.InternalError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_20A08FF58 + 4 * byte_20A0E6F61[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_20A08FF8C + 4 * byte_20A0E6F5C[v4]))();
}

uint64_t sub_20A08FF8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A08FF94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A08FF9CLL);
  return result;
}

uint64_t sub_20A08FFA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A08FFB0);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_20A08FFB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A08FFBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.CodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.CodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.TypeMismatchCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.TypeMismatchCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.XpcErrorCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.XpcErrorCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.DesignatedKeyNotFoundCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyNotFoundCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.DesignatedKeyCorruptCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyCorruptCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.BiometryFailedCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.BiometryFailedCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.InternalErrorCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.InternalErrorCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.PassLookupFailedCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.PassLookupFailedCodingKeys;
}

uint64_t _s9SEService14JPKIXPCRequestV13JPKIOperationO29ChangeAuthorizationCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20A090094 + 4 * byte_20A0E6F6B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20A0900C8 + 4 * byte_20A0E6F66[v4]))();
}

uint64_t sub_20A0900C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0900D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0900D8);
  return result;
}

uint64_t sub_20A0900E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0900ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20A0900F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0900F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.PassAccessForbiddenCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.PassAccessForbiddenCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.PassInvalidCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.PassInvalidCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.SelectFailedCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.SelectFailedCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.CertificateReadFailedCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.CertificateReadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.InvalidPINorPasscodeCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.InvalidPINorPasscodeCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.SigningFailedCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.SigningFailedCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.OperationApprovalFailedCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.OperationApprovalFailedCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.InternalError.UnknownErrorCodingKeys()
{
  return &type metadata for JPKIInternalTypes.InternalError.UnknownErrorCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.DigitalSignature.CodingKeys()
{
  return &type metadata for JPKIInternalTypes.DigitalSignature.CodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthentication.CodingKeys()
{
  return &type metadata for JPKIInternalTypes.UserAuthentication.CodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthentication.StandardCodingKeys()
{
  return &type metadata for JPKIInternalTypes.UserAuthentication.StandardCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.UserAuthentication.SystemBiometryCodingKeys()
{
  return &type metadata for JPKIInternalTypes.UserAuthentication.SystemBiometryCodingKeys;
}

uint64_t _s9SEService15JPKIXPCResponseO15ErrorCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20A090204 + 4 * byte_20A0E6F70[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20A090224 + 4 * byte_20A0E6F75[v4]))();
}

_BYTE *sub_20A090204(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20A090224(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20A09022C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20A090234(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20A09023C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20A090244(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.CertificateData.CodingKeys()
{
  return &type metadata for JPKIInternalTypes.CertificateData.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ReservationState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s9SEService17JPKIInternalTypesO15CertificateTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20A09033C + 4 * byte_20A0E6F7F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20A090370 + 4 * byte_20A0E6F7A[v4]))();
}

uint64_t sub_20A090370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A090378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A090380);
  return result;
}

uint64_t sub_20A09038C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A090394);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20A090398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0903A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.CertificateType.CodingKeys()
{
  return &type metadata for JPKIInternalTypes.CertificateType.CodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.CertificateType.UserCodingKeys()
{
  return &type metadata for JPKIInternalTypes.CertificateType.UserCodingKeys;
}

ValueMetadata *type metadata accessor for JPKIInternalTypes.CertificateType.SigningCodingKeys()
{
  return &type metadata for JPKIInternalTypes.CertificateType.SigningCodingKeys;
}

unint64_t sub_20A0903E0()
{
  unint64_t result;

  result = qword_2545C9970;
  if (!qword_2545C9970)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7984, &type metadata for JPKIInternalTypes.CertificateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9970);
  }
  return result;
}

unint64_t sub_20A090428()
{
  unint64_t result;

  result = qword_2545C9978;
  if (!qword_2545C9978)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7A3C, &type metadata for JPKIInternalTypes.CertificateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9978);
  }
  return result;
}

unint64_t sub_20A090470()
{
  unint64_t result;

  result = qword_2545C9980;
  if (!qword_2545C9980)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7B44, &type metadata for JPKIInternalTypes.UserAuthentication.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9980);
  }
  return result;
}

unint64_t sub_20A0904B8()
{
  unint64_t result;

  result = qword_2545C9988;
  if (!qword_2545C9988)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7BFC, &type metadata for JPKIInternalTypes.UserAuthentication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9988);
  }
  return result;
}

unint64_t sub_20A090500()
{
  unint64_t result;

  result = qword_2545C9990;
  if (!qword_2545C9990)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7CB4, &type metadata for JPKIInternalTypes.DigitalSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9990);
  }
  return result;
}

unint64_t sub_20A090548()
{
  unint64_t result;

  result = qword_2545C9998;
  if (!qword_2545C9998)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7DBC, &type metadata for JPKIInternalTypes.InternalError.OperationApprovalFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9998);
  }
  return result;
}

unint64_t sub_20A090590()
{
  unint64_t result;

  result = qword_2545C99A0;
  if (!qword_2545C99A0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7E74, &type metadata for JPKIInternalTypes.InternalError.SigningFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99A0);
  }
  return result;
}

unint64_t sub_20A0905D8()
{
  unint64_t result;

  result = qword_2545C99A8;
  if (!qword_2545C99A8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7F2C, &type metadata for JPKIInternalTypes.InternalError.InvalidPINorPasscodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99A8);
  }
  return result;
}

unint64_t sub_20A090620()
{
  unint64_t result;

  result = qword_2545C99B0;
  if (!qword_2545C99B0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7FE4, &type metadata for JPKIInternalTypes.InternalError.CertificateReadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99B0);
  }
  return result;
}

unint64_t sub_20A090668()
{
  unint64_t result;

  result = qword_2545C99B8;
  if (!qword_2545C99B8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E809C, &type metadata for JPKIInternalTypes.InternalError.SelectFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99B8);
  }
  return result;
}

unint64_t sub_20A0906B0()
{
  unint64_t result;

  result = qword_2545C99C0;
  if (!qword_2545C99C0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8154, &type metadata for JPKIInternalTypes.InternalError.PassInvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99C0);
  }
  return result;
}

unint64_t sub_20A0906F8()
{
  unint64_t result;

  result = qword_2545C99C8;
  if (!qword_2545C99C8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E820C, &type metadata for JPKIInternalTypes.InternalError.PassAccessForbiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99C8);
  }
  return result;
}

unint64_t sub_20A090740()
{
  unint64_t result;

  result = qword_2545C99D0;
  if (!qword_2545C99D0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E82C4, &type metadata for JPKIInternalTypes.InternalError.PassLookupFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99D0);
  }
  return result;
}

unint64_t sub_20A090788()
{
  unint64_t result;

  result = qword_2545C99D8;
  if (!qword_2545C99D8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E837C, &type metadata for JPKIInternalTypes.InternalError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99D8);
  }
  return result;
}

unint64_t sub_20A0907D0()
{
  unint64_t result;

  result = qword_2545C99E0;
  if (!qword_2545C99E0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8434, &type metadata for JPKIInternalTypes.InternalError.BiometryFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99E0);
  }
  return result;
}

unint64_t sub_20A090818()
{
  unint64_t result;

  result = qword_2545C99E8;
  if (!qword_2545C99E8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E858C, &type metadata for JPKIInternalTypes.InternalError.XpcErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99E8);
  }
  return result;
}

unint64_t sub_20A090860()
{
  unint64_t result;

  result = qword_2545C99F0;
  if (!qword_2545C99F0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8644, &type metadata for JPKIInternalTypes.InternalError.TypeMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99F0);
  }
  return result;
}

unint64_t sub_20A0908A8()
{
  unint64_t result;

  result = qword_2545C99F8;
  if (!qword_2545C99F8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E86FC, &type metadata for JPKIInternalTypes.InternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C99F8);
  }
  return result;
}

unint64_t sub_20A0908F0()
{
  unint64_t result;

  result = qword_2545C9A00;
  if (!qword_2545C9A00)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8804, &type metadata for JPKIXPCRequest.JPKIOperation.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A00);
  }
  return result;
}

unint64_t sub_20A090938()
{
  unint64_t result;

  result = qword_2545C9A08;
  if (!qword_2545C9A08)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E88BC, &type metadata for JPKIXPCRequest.JPKIOperation.ChangeAuthorizationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A08);
  }
  return result;
}

unint64_t sub_20A090980()
{
  unint64_t result;

  result = qword_2545C9A10;
  if (!qword_2545C9A10)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8974, &type metadata for JPKIXPCRequest.JPKIOperation.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A10);
  }
  return result;
}

unint64_t sub_20A0909C8()
{
  unint64_t result;

  result = qword_2545C9A18;
  if (!qword_2545C9A18)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8A7C, &type metadata for JPKIXPCRequest.JPKIOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A18);
  }
  return result;
}

unint64_t sub_20A090A10()
{
  unint64_t result;

  result = qword_2545C9A20;
  if (!qword_2545C9A20)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8B34, &type metadata for JPKIXPCRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A20);
  }
  return result;
}

unint64_t sub_20A090A58()
{
  unint64_t result;

  result = qword_2545C9A28;
  if (!qword_2545C9A28)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8BEC, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.BiometryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A28);
  }
  return result;
}

unint64_t sub_20A090AA0()
{
  unint64_t result;

  result = qword_2545C9A30;
  if (!qword_2545C9A30)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8CA4, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A30);
  }
  return result;
}

unint64_t sub_20A090AE8()
{
  unint64_t result;

  result = qword_2545C9A38;
  if (!qword_2545C9A38)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8D5C, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A38);
  }
  return result;
}

unint64_t sub_20A090B30()
{
  unint64_t result;

  result = qword_2545C9A40;
  if (!qword_2545C9A40)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8E14, &type metadata for JPKIXPCResponse.GetACLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A40);
  }
  return result;
}

unint64_t sub_20A090B78()
{
  unint64_t result;

  result = qword_2545C9A48;
  if (!qword_2545C9A48)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8ECC, &type metadata for JPKIXPCResponse.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A48);
  }
  return result;
}

unint64_t sub_20A090BC0()
{
  unint64_t result;

  result = qword_2545C9A50;
  if (!qword_2545C9A50)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8FD4, &type metadata for JPKIXPCResponse.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A50);
  }
  return result;
}

unint64_t sub_20A090C08()
{
  unint64_t result;

  result = qword_2545C9A58;
  if (!qword_2545C9A58)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E908C, &type metadata for JPKIXPCResponse.GetInstalledCertificateTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A58);
  }
  return result;
}

unint64_t sub_20A090C50()
{
  unint64_t result;

  result = qword_2545C9A60;
  if (!qword_2545C9A60)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9144, &type metadata for JPKIXPCResponse.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A60);
  }
  return result;
}

unint64_t sub_20A090C98()
{
  unint64_t result;

  result = qword_2545C9A68;
  if (!qword_2545C9A68)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E91FC, &type metadata for JPKIXPCResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A68);
  }
  return result;
}

unint64_t sub_20A090CE0()
{
  unint64_t result;

  result = qword_2545C9A70;
  if (!qword_2545C9A70)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E90B4, &type metadata for JPKIXPCResponse.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A70);
  }
  return result;
}

unint64_t sub_20A090D28()
{
  unint64_t result;

  result = qword_2545C9A78;
  if (!qword_2545C9A78)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E90DC, &type metadata for JPKIXPCResponse.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A78);
  }
  return result;
}

unint64_t sub_20A090D70()
{
  unint64_t result;

  result = qword_2545C9A80;
  if (!qword_2545C9A80)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8FFC, &type metadata for JPKIXPCResponse.GetInstalledCertificateTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A80);
  }
  return result;
}

unint64_t sub_20A090DB8()
{
  unint64_t result;

  result = qword_2545C9A88;
  if (!qword_2545C9A88)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9024, &type metadata for JPKIXPCResponse.GetInstalledCertificateTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A88);
  }
  return result;
}

unint64_t sub_20A090E00()
{
  unint64_t result;

  result = qword_2545C9A90;
  if (!qword_2545C9A90)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8F44, &type metadata for JPKIXPCResponse.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A90);
  }
  return result;
}

unint64_t sub_20A090E48()
{
  unint64_t result;

  result = qword_2545C9A98;
  if (!qword_2545C9A98)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8F6C, &type metadata for JPKIXPCResponse.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9A98);
  }
  return result;
}

unint64_t sub_20A090E90()
{
  unint64_t result;

  result = qword_2545C9AA0;
  if (!qword_2545C9AA0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8EF4, &type metadata for JPKIXPCResponse.ChangeAuthorizationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AA0);
  }
  return result;
}

unint64_t sub_20A090ED8()
{
  unint64_t result;

  result = qword_2545C9AA8;
  if (!qword_2545C9AA8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8F1C, &type metadata for JPKIXPCResponse.ChangeAuthorizationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AA8);
  }
  return result;
}

unint64_t sub_20A090F20()
{
  unint64_t result;

  result = qword_2545C9AB0;
  if (!qword_2545C9AB0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8E3C, &type metadata for JPKIXPCResponse.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AB0);
  }
  return result;
}

unint64_t sub_20A090F68()
{
  unint64_t result;

  result = qword_2545C9AB8;
  if (!qword_2545C9AB8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8E64, &type metadata for JPKIXPCResponse.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AB8);
  }
  return result;
}

unint64_t sub_20A090FB0()
{
  unint64_t result;

  result = qword_2545C9AC0;
  if (!qword_2545C9AC0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8D84, &type metadata for JPKIXPCResponse.GetACLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AC0);
  }
  return result;
}

unint64_t sub_20A090FF8()
{
  unint64_t result;

  result = qword_2545C9AC8;
  if (!qword_2545C9AC8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8DAC, &type metadata for JPKIXPCResponse.GetACLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AC8);
  }
  return result;
}

unint64_t sub_20A091040()
{
  unint64_t result;

  result = qword_2545C9AD0;
  if (!qword_2545C9AD0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E916C, &type metadata for JPKIXPCResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AD0);
  }
  return result;
}

unint64_t sub_20A091088()
{
  unint64_t result;

  result = qword_2545C9AD8;
  if (!qword_2545C9AD8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9194, &type metadata for JPKIXPCResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AD8);
  }
  return result;
}

unint64_t sub_20A0910D0()
{
  unint64_t result;

  result = qword_2545C9AE0;
  if (!qword_2545C9AE0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8C14, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AE0);
  }
  return result;
}

unint64_t sub_20A091118()
{
  unint64_t result;

  result = qword_2545C9AE8;
  if (!qword_2545C9AE8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8C3C, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AE8);
  }
  return result;
}

unint64_t sub_20A091160()
{
  unint64_t result;

  result = qword_2545C9AF0;
  if (!qword_2545C9AF0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8B5C, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.BiometryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AF0);
  }
  return result;
}

unint64_t sub_20A0911A8()
{
  unint64_t result;

  result = qword_2545C9AF8;
  if (!qword_2545C9AF8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8B84, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.BiometryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9AF8);
  }
  return result;
}

unint64_t sub_20A0911F0()
{
  unint64_t result;

  result = qword_2545C9B00;
  if (!qword_2545C9B00)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8CCC, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B00);
  }
  return result;
}

unint64_t sub_20A091238()
{
  unint64_t result;

  result = qword_2545C9B08;
  if (!qword_2545C9B08)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8CF4, &type metadata for JPKIInternalTypes.UserAuthenticationInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B08);
  }
  return result;
}

unint64_t sub_20A091280()
{
  unint64_t result;

  result = qword_2545C9B10;
  if (!qword_2545C9B10)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8AA4, &type metadata for JPKIXPCRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B10);
  }
  return result;
}

unint64_t sub_20A0912C8()
{
  unint64_t result;

  result = qword_2545C9B18;
  if (!qword_2545C9B18)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8ACC, &type metadata for JPKIXPCRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B18);
  }
  return result;
}

unint64_t sub_20A091310()
{
  unint64_t result;

  result = qword_2545C9B20;
  if (!qword_2545C9B20)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E899C, &type metadata for JPKIXPCRequest.JPKIOperation.GetInstalledCertificateTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B20);
  }
  return result;
}

unint64_t sub_20A091358()
{
  unint64_t result;

  result = qword_2545C9B28;
  if (!qword_2545C9B28)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E89C4, &type metadata for JPKIXPCRequest.JPKIOperation.GetInstalledCertificateTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B28);
  }
  return result;
}

unint64_t sub_20A0913A0()
{
  unint64_t result;

  result = qword_2545C9B30;
  if (!qword_2545C9B30)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E88E4, &type metadata for JPKIXPCRequest.JPKIOperation.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B30);
  }
  return result;
}

unint64_t sub_20A0913E8()
{
  unint64_t result;

  result = qword_2545C9B38;
  if (!qword_2545C9B38)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E890C, &type metadata for JPKIXPCRequest.JPKIOperation.ReadCertificateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B38);
  }
  return result;
}

unint64_t sub_20A091430()
{
  unint64_t result;

  result = qword_2545C9B40;
  if (!qword_2545C9B40)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E882C, &type metadata for JPKIXPCRequest.JPKIOperation.ChangeAuthorizationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B40);
  }
  return result;
}

unint64_t sub_20A091478()
{
  unint64_t result;

  result = qword_2545C9B48;
  if (!qword_2545C9B48)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8854, &type metadata for JPKIXPCRequest.JPKIOperation.ChangeAuthorizationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B48);
  }
  return result;
}

unint64_t sub_20A0914C0()
{
  unint64_t result;

  result = qword_2545C9B50;
  if (!qword_2545C9B50)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8774, &type metadata for JPKIXPCRequest.JPKIOperation.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B50);
  }
  return result;
}

unint64_t sub_20A091508()
{
  unint64_t result;

  result = qword_2545C9B58;
  if (!qword_2545C9B58)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E879C, &type metadata for JPKIXPCRequest.JPKIOperation.SignCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B58);
  }
  return result;
}

unint64_t sub_20A091550()
{
  unint64_t result;

  result = qword_2545C9B60;
  if (!qword_2545C9B60)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8724, &type metadata for JPKIXPCRequest.JPKIOperation.GetACLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B60);
  }
  return result;
}

unint64_t sub_20A091598()
{
  unint64_t result;

  result = qword_2545C9B68;
  if (!qword_2545C9B68)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E874C, &type metadata for JPKIXPCRequest.JPKIOperation.GetACLCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B68);
  }
  return result;
}

unint64_t sub_20A0915E0()
{
  unint64_t result;

  result = qword_2545C9B70;
  if (!qword_2545C9B70)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E89EC, &type metadata for JPKIXPCRequest.JPKIOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B70);
  }
  return result;
}

unint64_t sub_20A091628()
{
  unint64_t result;

  result = qword_2545C9B78;
  if (!qword_2545C9B78)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8A14, &type metadata for JPKIXPCRequest.JPKIOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B78);
  }
  return result;
}

unint64_t sub_20A091670()
{
  unint64_t result;

  result = qword_2545C9B80;
  if (!qword_2545C9B80)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E85B4, &type metadata for JPKIInternalTypes.InternalError.TypeMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B80);
  }
  return result;
}

unint64_t sub_20A0916B8()
{
  unint64_t result;

  result = qword_2545C9B88;
  if (!qword_2545C9B88)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E85DC, &type metadata for JPKIInternalTypes.InternalError.TypeMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B88);
  }
  return result;
}

unint64_t sub_20A091700()
{
  unint64_t result;

  result = qword_2545C9B90;
  if (!qword_2545C9B90)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E84FC, &type metadata for JPKIInternalTypes.InternalError.XpcErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B90);
  }
  return result;
}

unint64_t sub_20A091748()
{
  unint64_t result;

  result = qword_2545C9B98;
  if (!qword_2545C9B98)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8524, &type metadata for JPKIInternalTypes.InternalError.XpcErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9B98);
  }
  return result;
}

unint64_t sub_20A091790()
{
  unint64_t result;

  result = qword_2545C9BA0;
  if (!qword_2545C9BA0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E84AC, &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BA0);
  }
  return result;
}

unint64_t sub_20A0917D8()
{
  unint64_t result;

  result = qword_2545C9BA8;
  if (!qword_2545C9BA8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E84D4, &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BA8);
  }
  return result;
}

unint64_t sub_20A091820()
{
  unint64_t result;

  result = qword_2545C9BB0;
  if (!qword_2545C9BB0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E845C, &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyCorruptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BB0);
  }
  return result;
}

unint64_t sub_20A091868()
{
  unint64_t result;

  result = qword_2545C9BB8;
  if (!qword_2545C9BB8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8484, &type metadata for JPKIInternalTypes.InternalError.DesignatedKeyCorruptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BB8);
  }
  return result;
}

unint64_t sub_20A0918B0()
{
  unint64_t result;

  result = qword_2545C9BC0;
  if (!qword_2545C9BC0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E83A4, &type metadata for JPKIInternalTypes.InternalError.BiometryFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BC0);
  }
  return result;
}

unint64_t sub_20A0918F8()
{
  unint64_t result;

  result = qword_2545C9BC8;
  if (!qword_2545C9BC8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E83CC, &type metadata for JPKIInternalTypes.InternalError.BiometryFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BC8);
  }
  return result;
}

unint64_t sub_20A091940()
{
  unint64_t result;

  result = qword_2545C9BD0;
  if (!qword_2545C9BD0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E82EC, &type metadata for JPKIInternalTypes.InternalError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BD0);
  }
  return result;
}

unint64_t sub_20A091988()
{
  unint64_t result;

  result = qword_2545C9BD8;
  if (!qword_2545C9BD8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8314, &type metadata for JPKIInternalTypes.InternalError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BD8);
  }
  return result;
}

unint64_t sub_20A0919D0()
{
  unint64_t result;

  result = qword_2545C9BE0;
  if (!qword_2545C9BE0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8234, &type metadata for JPKIInternalTypes.InternalError.PassLookupFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BE0);
  }
  return result;
}

unint64_t sub_20A091A18()
{
  unint64_t result;

  result = qword_2545C9BE8;
  if (!qword_2545C9BE8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E825C, &type metadata for JPKIInternalTypes.InternalError.PassLookupFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BE8);
  }
  return result;
}

unint64_t sub_20A091A60()
{
  unint64_t result;

  result = qword_2545C9BF0;
  if (!qword_2545C9BF0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E817C, &type metadata for JPKIInternalTypes.InternalError.PassAccessForbiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BF0);
  }
  return result;
}

unint64_t sub_20A091AA8()
{
  unint64_t result;

  result = qword_2545C9BF8;
  if (!qword_2545C9BF8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E81A4, &type metadata for JPKIInternalTypes.InternalError.PassAccessForbiddenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9BF8);
  }
  return result;
}

unint64_t sub_20A091AF0()
{
  unint64_t result;

  result = qword_2545C9C00;
  if (!qword_2545C9C00)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E80C4, &type metadata for JPKIInternalTypes.InternalError.PassInvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C00);
  }
  return result;
}

unint64_t sub_20A091B38()
{
  unint64_t result;

  result = qword_2545C9C08;
  if (!qword_2545C9C08)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E80EC, &type metadata for JPKIInternalTypes.InternalError.PassInvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C08);
  }
  return result;
}

unint64_t sub_20A091B80()
{
  unint64_t result;

  result = qword_2545C9C10;
  if (!qword_2545C9C10)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E800C, &type metadata for JPKIInternalTypes.InternalError.SelectFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C10);
  }
  return result;
}

unint64_t sub_20A091BC8()
{
  unint64_t result;

  result = qword_2545C9C18;
  if (!qword_2545C9C18)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8034, &type metadata for JPKIInternalTypes.InternalError.SelectFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C18);
  }
  return result;
}

unint64_t sub_20A091C10()
{
  unint64_t result;

  result = qword_2545C9C20;
  if (!qword_2545C9C20)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7F54, &type metadata for JPKIInternalTypes.InternalError.CertificateReadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C20);
  }
  return result;
}

unint64_t sub_20A091C58()
{
  unint64_t result;

  result = qword_2545C9C28;
  if (!qword_2545C9C28)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7F7C, &type metadata for JPKIInternalTypes.InternalError.CertificateReadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C28);
  }
  return result;
}

unint64_t sub_20A091CA0()
{
  unint64_t result;

  result = qword_2545C9C30;
  if (!qword_2545C9C30)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7E9C, &type metadata for JPKIInternalTypes.InternalError.InvalidPINorPasscodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C30);
  }
  return result;
}

unint64_t sub_20A091CE8()
{
  unint64_t result;

  result = qword_2545C9C38;
  if (!qword_2545C9C38)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7EC4, &type metadata for JPKIInternalTypes.InternalError.InvalidPINorPasscodeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C38);
  }
  return result;
}

unint64_t sub_20A091D30()
{
  unint64_t result;

  result = qword_2545C9C40;
  if (!qword_2545C9C40)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7DE4, &type metadata for JPKIInternalTypes.InternalError.SigningFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C40);
  }
  return result;
}

unint64_t sub_20A091D78()
{
  unint64_t result;

  result = qword_2545C9C48;
  if (!qword_2545C9C48)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7E0C, &type metadata for JPKIInternalTypes.InternalError.SigningFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C48);
  }
  return result;
}

unint64_t sub_20A091DC0()
{
  unint64_t result;

  result = qword_2545C9C50;
  if (!qword_2545C9C50)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7D2C, &type metadata for JPKIInternalTypes.InternalError.OperationApprovalFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C50);
  }
  return result;
}

unint64_t sub_20A091E08()
{
  unint64_t result;

  result = qword_2545C9C58;
  if (!qword_2545C9C58)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7D54, &type metadata for JPKIInternalTypes.InternalError.OperationApprovalFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C58);
  }
  return result;
}

unint64_t sub_20A091E50()
{
  unint64_t result;

  result = qword_2545C9C60;
  if (!qword_2545C9C60)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7CDC, &type metadata for JPKIInternalTypes.InternalError.UnknownErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C60);
  }
  return result;
}

unint64_t sub_20A091E98()
{
  unint64_t result;

  result = qword_2545C9C68;
  if (!qword_2545C9C68)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7D04, &type metadata for JPKIInternalTypes.InternalError.UnknownErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C68);
  }
  return result;
}

unint64_t sub_20A091EE0()
{
  unint64_t result;

  result = qword_2545C9C70;
  if (!qword_2545C9C70)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E866C, &type metadata for JPKIInternalTypes.InternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C70);
  }
  return result;
}

unint64_t sub_20A091F28()
{
  unint64_t result;

  result = qword_2545C9C78;
  if (!qword_2545C9C78)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E8694, &type metadata for JPKIInternalTypes.InternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C78);
  }
  return result;
}

unint64_t sub_20A091F70()
{
  unint64_t result;

  result = qword_2545C9C80;
  if (!qword_2545C9C80)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7C24, &type metadata for JPKIInternalTypes.DigitalSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C80);
  }
  return result;
}

unint64_t sub_20A091FB8()
{
  unint64_t result;

  result = qword_2545C9C88;
  if (!qword_2545C9C88)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7C4C, &type metadata for JPKIInternalTypes.DigitalSignature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C88);
  }
  return result;
}

unint64_t sub_20A092000()
{
  unint64_t result;

  result = qword_2545C9C90;
  if (!qword_2545C9C90)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7AB4, &type metadata for JPKIInternalTypes.UserAuthentication.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C90);
  }
  return result;
}

unint64_t sub_20A092048()
{
  unint64_t result;

  result = qword_2545C9C98;
  if (!qword_2545C9C98)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7ADC, &type metadata for JPKIInternalTypes.UserAuthentication.StandardCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9C98);
  }
  return result;
}

unint64_t sub_20A092090()
{
  unint64_t result;

  result = qword_2545C9CA0;
  if (!qword_2545C9CA0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7A64, &type metadata for JPKIInternalTypes.UserAuthentication.SystemBiometryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CA0);
  }
  return result;
}

unint64_t sub_20A0920D8()
{
  unint64_t result;

  result = qword_2545C9CA8;
  if (!qword_2545C9CA8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7A8C, &type metadata for JPKIInternalTypes.UserAuthentication.SystemBiometryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CA8);
  }
  return result;
}

unint64_t sub_20A092120()
{
  unint64_t result;

  result = qword_2545C9CB0;
  if (!qword_2545C9CB0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7B6C, &type metadata for JPKIInternalTypes.UserAuthentication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CB0);
  }
  return result;
}

unint64_t sub_20A092168()
{
  unint64_t result;

  result = qword_2545C9CB8;
  if (!qword_2545C9CB8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7B94, &type metadata for JPKIInternalTypes.UserAuthentication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CB8);
  }
  return result;
}

unint64_t sub_20A0921B0()
{
  unint64_t result;

  result = qword_2545C9CC0;
  if (!qword_2545C9CC0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E79AC, &type metadata for JPKIInternalTypes.CertificateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CC0);
  }
  return result;
}

unint64_t sub_20A0921F8()
{
  unint64_t result;

  result = qword_2545C9CC8;
  if (!qword_2545C9CC8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E79D4, &type metadata for JPKIInternalTypes.CertificateData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CC8);
  }
  return result;
}

unint64_t sub_20A092240()
{
  unint64_t result;

  result = qword_2545C9CD0;
  if (!qword_2545C9CD0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E78A4, &type metadata for JPKIInternalTypes.CertificateType.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CD0);
  }
  return result;
}

unint64_t sub_20A092288()
{
  unint64_t result;

  result = qword_2545C9CD8;
  if (!qword_2545C9CD8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E78CC, &type metadata for JPKIInternalTypes.CertificateType.UserCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CD8);
  }
  return result;
}

unint64_t sub_20A0922D0()
{
  unint64_t result;

  result = qword_2545C9CE0;
  if (!qword_2545C9CE0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E7854, &type metadata for JPKIInternalTypes.CertificateType.SigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CE0);
  }
  return result;
}

unint64_t sub_20A092318()
{
  unint64_t result;

  result = qword_2545C9CE8;
  if (!qword_2545C9CE8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E787C, &type metadata for JPKIInternalTypes.CertificateType.SigningCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CE8);
  }
  return result;
}

unint64_t sub_20A092360()
{
  unint64_t result;

  result = qword_2545C9CF0;
  if (!qword_2545C9CF0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E78F4, &type metadata for JPKIInternalTypes.CertificateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CF0);
  }
  return result;
}

unint64_t sub_20A0923A8()
{
  unint64_t result;

  result = qword_2545C9CF8;
  if (!qword_2545C9CF8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E791C, &type metadata for JPKIInternalTypes.CertificateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9CF8);
  }
  return result;
}

uint64_t sub_20A0923EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1919251317 && a2 == 0xE400000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696E676973 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A0924CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x647261646E617473 && a2 == 0xE800000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69426D6574737973 && a2 == 0xEE00797274656D6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A0925E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6369666974726563 && a2 == 0xEF61746144657461;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A092700(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7956599 && a2 == 0xE300000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6369666974726563 && a2 == 0xED00006449657461)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A092804(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D73694D65707974 && a2 == 0xEC00000068637461;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727245637078 && a2 == 0xE800000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000020A0F0E50 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000020A0F0E70 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x797274656D6F6962 && a2 == 0xEE0064656C696146 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C616E7265746E69 && a2 == 0xED0000726F727245 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000020A0F0E90 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000020A0F0EB0 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x61766E4973736170 && a2 == 0xEB0000000064696CLL || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x61467463656C6573 && a2 == 0xEC00000064656C69 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000020A0F0ED0 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000020A0F0EF0 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x46676E696E676973 && a2 == 0xED000064656C6961 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000020A0F0F10 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x456E776F6E6B6E75 && a2 == 0xEC000000726F7272)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_20A092E7C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7956599 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A092F68(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x800000020A0F0F30 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x444973736170 && a2 == 0xE600000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x496465776F6C6C61 && a2 == 0xEA00000000007344)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20A0930BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 6580577 && a2 == 0xE300000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7956599 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A09318C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001CLL && a2 == 0x800000020A0F0D80 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7472654364616572 && a2 == 0xEF65746163696669 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000020A0F0D60 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1852270963 && a2 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4C4341746567 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_20A0933AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A09346C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 12895 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20A093578(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E65644973736170 && a2 == 0xEE00726569666974;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A093698(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x647261646E617473 && a2 == 0xE800000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797274656D6F6962 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A093788(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F727265 && a2 == 0xE500000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000020A0F0D80 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7472654364616572 && a2 == 0xEF65746163696669 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000020A0F0D60 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1852270963 && a2 == 0xE400000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4C4341746567 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t static DeviceCapability.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545C9D00;
}

uint64_t static DeviceCapability.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545C9D00 = a1;
  return result;
}

uint64_t (*static DeviceCapability.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id DeviceCapability.__allocating_init(supportsUWB:)(char a1)
{
  objc_class *v1;
  _BYTE *v3;
  objc_super v5;

  v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR____TtC9SEService16DeviceCapability_supportsUWB] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id DeviceCapability.init(supportsUWB:)(char a1)
{
  _BYTE *v1;
  objc_super v3;

  v1[OBJC_IVAR____TtC9SEService16DeviceCapability_supportsUWB] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DeviceCapability();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DeviceCapability()
{
  return objc_opt_self();
}

void sub_20A093C1C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC9SEService16DeviceCapability_supportsUWB);
  v4 = (id)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeBool_forKey_, v3, v4);

}

id DeviceCapability.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  _BYTE *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  objc_super v8;

  v3 = objc_allocWithZone(v1);
  v4 = (void *)sub_20A0E0800();
  v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR____TtC9SEService16DeviceCapability_supportsUWB] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id DeviceCapability.init(coder:)(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  objc_super v8;

  v3 = v1;
  v4 = (void *)sub_20A0E0800();
  v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR____TtC9SEService16DeviceCapability_supportsUWB] = v5;
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for DeviceCapability();
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id DeviceCapability.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DeviceCapability.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DeviceCapability.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceCapability();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for DeviceCapability()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DeviceCapability.__allocating_init(supportsUWB:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DeviceCapability.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of DeviceCapability.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

id sub_20A093FF4()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id sub_20A094014()
{
  objc_class *ObjectType;
  _BYTE *v1;
  char *v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  v1 = objc_allocWithZone(ObjectType);
  v2 = &v1[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
  *(_OWORD *)v2 = xmmword_20A0E6A20;
  v1[OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances] = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)v2;
  v4 = *((_QWORD *)v2 + 1);
  *(_OWORD *)v2 = xmmword_20A0E6A20;
  sub_20A080234(v3, v4);
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, sel_init);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t static SEPackageDetails.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545C9D10;
}

uint64_t static SEPackageDetails.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545C9D10 = a1;
  return result;
}

uint64_t (*static SEPackageDetails.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

Swift::Void __swiftcall SEPackageDetails.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded);
  v4 = (void *)sub_20A0E0800();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService16SEPackageDetails_containers);
  v6 = (void *)sub_20A0E0800();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v5, v6);

  swift_beginAccess();
  type metadata accessor for SEApplet();
  swift_bridgeObjectRetain();
  v7 = (void *)sub_20A0E08A8();
  swift_bridgeObjectRelease();
  v8 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService16SEPackageDetails_type + 8) != 26)
  {
    CredentialType.rawValue.getter();
    v9 = (void *)sub_20A0E0800();
    swift_bridgeObjectRelease();
    v10 = (void *)sub_20A0E0800();
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

  }
}

id SEPackageDetails.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SEPackageDetails.init(coder:)(a1);
}

id SEPackageDetails.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  char *v5;
  char *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  __int128 v20;
  objc_super v21;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = &v2[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
  *(_OWORD *)&v2[OBJC_IVAR____TtC9SEService16SEPackageDetails_type] = xmmword_20A0E6A20;
  v6 = v2;
  v7 = (void *)sub_20A0E0800();
  v8 = objc_msgSend(a1, sel_decodeBoolForKey_, v7);

  v6[OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded] = v8;
  v9 = (void *)sub_20A0E0800();
  v10 = objc_msgSend(a1, sel_decodeIntegerForKey_, v9);

  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers] = v10;
  type metadata accessor for SEApplet();
  v11 = sub_20A0E09EC();
  if (v11)
  {
    *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances] = v11;
    sub_20A094638();
    v12 = sub_20A0E09D4();
    if (v12)
    {
      v13 = (void *)v12;
      v14 = sub_20A0E080C();
      CredentialType.init(rawValue:)(v14, v15, (uint64_t *)&v20);

      v16 = *(_QWORD *)v5;
      v17 = *((_QWORD *)v5 + 1);
      *(_OWORD *)v5 = v20;
      sub_20A080234(v16, v17);
    }

    v21.receiver = v6;
    v21.super_class = ObjectType;
    v18 = objc_msgSendSuper2(&v21, sel_init);

  }
  else
  {

    sub_20A080234(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v18;
}

unint64_t sub_20A094638()
{
  unint64_t result;

  result = qword_2545C9460;
  if (!qword_2545C9460)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2545C9460);
  }
  return result;
}

uint64_t SEPackageDetails.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  sub_20A0E0CC8();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_beginAccess();
  v1 = type metadata accessor for SEApplet();
  v2 = swift_bridgeObjectRetain();
  MEMORY[0x20BD1F42C](v2, v1);
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SEService16SEPackageDetails_type);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService16SEPackageDetails_type + 8);
  if (v4 != 26)
  {
    v5 = *v3;
    sub_20A074C44(*v3, v4);
    sub_20A074C44(v5, v4);
    sub_20A0E0824();
    sub_20A0E0830();
    swift_bridgeObjectRelease();
    sub_20A080234(v5, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9D40);
  sub_20A0E0824();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  return 0;
}

uint64_t sub_20A09496C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A0949A8 + 4 * byte_20A0E9F30[*v0]))(0x4C6567616B636170, 0xED0000646564616FLL);
}

uint64_t sub_20A0949A8()
{
  return 0x656E6961746E6F63;
}

uint64_t sub_20A0949C4()
{
  return 0x65636E6174736E69;
}

uint64_t sub_20A0949E0()
{
  return 1701869940;
}

uint64_t sub_20A0949F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0953D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_20A094A14(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_20A094A20()
{
  sub_20A094CD8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A094A48()
{
  sub_20A094CD8();
  return sub_20A0E0DC4();
}

id SEPackageDetails.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t SEPackageDetails.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  __int128 v11;
  char v12;
  char v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9D48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A094CD8();
  sub_20A0E0DAC();
  v13 = 0;
  sub_20A0E0C98();
  if (!v2)
  {
    v13 = 1;
    sub_20A0E0CA4();
    v9 = (_QWORD *)(v3 + OBJC_IVAR____TtC9SEService16SEPackageDetails_instances);
    swift_beginAccess();
    *(_QWORD *)&v11 = *v9;
    v12 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9D58);
    sub_20A095028(&qword_2545C9D60, &qword_2545C9D68, (uint64_t)&protocol conformance descriptor for SEApplet, MEMORY[0x24BEE12A0]);
    sub_20A0E0CB0();
    v11 = *(_OWORD *)(v3 + OBJC_IVAR____TtC9SEService16SEPackageDetails_type);
    v12 = 3;
    sub_20A07FC10();
    sub_20A0E0C80();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_20A094CD8()
{
  unint64_t result;

  result = qword_2545C9D50;
  if (!qword_2545C9D50)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA07C, &type metadata for SEPackageDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9D50);
  }
  return result;
}

id SEPackageDetails.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SEPackageDetails.init(from:)(a1);
}

id SEPackageDetails.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  objc_class *ObjectType;
  uint64_t v19;
  objc_super v20;
  __int128 v21;
  char v22;

  ObjectType = (objc_class *)swift_getObjectType();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9D78);
  v3 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1;
  v17 = &v1[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
  *(_OWORD *)v17 = xmmword_20A0E6A20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A094CD8();
  v6 = v1;
  v7 = v19;
  sub_20A0E0DA0();
  if (v7)
  {
    v9 = v17;
    v13 = ObjectType;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    sub_20A080234(*(_QWORD *)v9, *((_QWORD *)v9 + 1));

    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v21) = 0;
    v8 = v15;
    v6[OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded] = sub_20A0E0C44() & 1;
    LOBYTE(v21) = 1;
    *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers] = sub_20A0E0C50();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9D58);
    v22 = 2;
    sub_20A095028(&qword_2545C9D80, &qword_2545C9D88, (uint64_t)&protocol conformance descriptor for SEApplet, MEMORY[0x24BEE12D0]);
    sub_20A0E0C5C();
    *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances] = v21;
    v22 = 3;
    sub_20A07FCD8();
    sub_20A0E0C2C();
    v11 = *(_QWORD *)v17;
    v12 = *((_QWORD *)v17 + 1);
    *(_OWORD *)v17 = v21;
    sub_20A080234(v11, v12);

    v20.receiver = v6;
    v20.super_class = ObjectType;
    v13 = objc_msgSendSuper2(&v20, sel_init);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  return v13;
}

uint64_t sub_20A095028(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545C9D58);
    v10 = sub_20A0950A4(a2, a3);
    result = MEMORY[0x20BD202E4](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20A0950A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for SEApplet();
    result = MEMORY[0x20BD202E4](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id sub_20A0950E4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  id result;

  v6 = objc_allocWithZone(v2);
  result = SEPackageDetails.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_20A095130(_QWORD *a1)
{
  return SEPackageDetails.encode(to:)(a1);
}

uint64_t type metadata accessor for SEPackageDetails()
{
  return objc_opt_self();
}

uint64_t method lookup function for SEPackageDetails()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SEPackageDetails.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SEPackageDetails.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t getEnumTagSinglePayload for SEPackageDetails.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SEPackageDetails.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_20A095278 + 4 * byte_20A0E9F39[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20A0952AC + 4 * byte_20A0E9F34[v4]))();
}

uint64_t sub_20A0952AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0952B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0952BCLL);
  return result;
}

uint64_t sub_20A0952C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0952D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_20A0952D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0952DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEPackageDetails.CodingKeys()
{
  return &type metadata for SEPackageDetails.CodingKeys;
}

unint64_t sub_20A0952FC()
{
  unint64_t result;

  result = qword_2545C9DA0;
  if (!qword_2545C9DA0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA054, &type metadata for SEPackageDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9DA0);
  }
  return result;
}

unint64_t sub_20A095344()
{
  unint64_t result;

  result = qword_2545C9DA8;
  if (!qword_2545C9DA8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9FC4, &type metadata for SEPackageDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9DA8);
  }
  return result;
}

unint64_t sub_20A09538C()
{
  unint64_t result;

  result = qword_2545C9DB0;
  if (!qword_2545C9DB0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0E9FEC, &type metadata for SEPackageDetails.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545C9DB0);
  }
  return result;
}

uint64_t sub_20A0953D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4C6567616B636170 && a2 == 0xED0000646564616FLL;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6961746E6F63 && a2 == 0xEA00000000007372 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736E69 && a2 == 0xE900000000000073 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_20A0955B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8_t *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  os_log_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint8_t *v48;
  uint8_t *v49;
  os_log_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  unsigned __int8 v67;
  uint64_t v68[5];
  unsigned __int8 v69;

  v53 = a2;
  v3 = sub_20A0E0764();
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 8);
  v56 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v59 = *(_QWORD *)(a1 + 40);
  v9 = *(uint8_t **)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  if (qword_2545C8E18 != -1)
    swift_once();
  v11 = sub_20A0E0740();
  v12 = __swift_project_value_buffer(v11, (uint64_t)qword_2545C9DD0);
  swift_bridgeObjectRetain();
  v13 = v59;
  sub_20A08AAB4(v6, v7, v8, v59, (unint64_t)v9, v10);
  swift_bridgeObjectRetain();
  sub_20A08AAB4(v6, v7, v8, v13, (unint64_t)v9, v10);
  v54 = (uint8_t *)v12;
  v14 = sub_20A0E0728();
  v15 = sub_20A0E09B0();
  v16 = v15;
  v17 = os_log_type_enabled(v14, v15);
  v55 = v9;
  if (v17)
  {
    v18 = swift_slowAlloc();
    v51 = v16;
    v19 = (uint8_t *)v18;
    v52 = swift_slowAlloc();
    v68[0] = v52;
    v20 = v59;
    v50 = v14;
    v49 = v19;
    *(_DWORD *)v19 = 136315138;
    v48 = v19 + 4;
    v60 = v56;
    v61 = v5;
    v62 = v6;
    v63 = v7;
    v64 = v8;
    v65 = v20;
    v66 = v9;
    v67 = v10;
    JPKIXPCRequest.description.getter();
    v60 = sub_20A0A6D5C(v21, v22, v68);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20A08B960(v6, v7, v8, v20, (unint64_t)v9, v10);
    swift_bridgeObjectRelease();
    sub_20A08B960(v6, v7, v8, v20, (unint64_t)v9, v10);
    v23 = v50;
    v24 = v49;
    _os_log_impl(&dword_20A048000, v50, (os_log_type_t)v51, "Sending request %s", v49, 0xCu);
    v25 = v52;
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v25, -1, -1);
    MEMORY[0x20BD20380](v24, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = v59;
    sub_20A08B960(v6, v7, v8, v59, (unint64_t)v9, v10);
    swift_bridgeObjectRelease();
    sub_20A08B960(v6, v7, v8, v26, (unint64_t)v9, v10);

  }
  sub_20A0E0788();
  swift_bridgeObjectRetain();
  sub_20A0E0758();
  v27 = v58;
  v28 = sub_20A0E074C();
  if (v27)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9DE8);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_20A0EA0E0;
    v60 = 0;
    v61 = 0xE000000000000000;
    sub_20A0E0AC4();
    swift_bridgeObjectRelease();
    v60 = 0xD000000000000016;
    v61 = 0x800000020A0F12C0;
    swift_getErrorValue();
    sub_20A0E0D34();
    sub_20A0E0854();
    swift_bridgeObjectRelease();
    v31 = v60;
    v32 = v61;
    *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v30 + 32) = v31;
    *(_QWORD *)(v30 + 40) = v32;
    sub_20A0E0D70();
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  else
  {
    v29 = (char *)v28;
    v60 = v56;
    v61 = v5;
    v62 = v6;
    v63 = v7;
    v64 = v8;
    v65 = v59;
    v66 = v55;
    v67 = v10;
    sub_20A095D90();
    sub_20A095DD4();
    sub_20A0E077C();
    v34 = v68[0];
    v35 = v68[1];
    v36 = v68[2];
    v37 = v68[3];
    v38 = v68[4];
    v39 = v69;
    sub_20A0E0770();
    sub_20A08D654(v34, v35, v36, v37, v38, v39);
    sub_20A08D654(v34, v35, v36, v37, v38, v39);
    v40 = sub_20A0E0728();
    v41 = sub_20A0E09B0();
    LODWORD(v59) = v41;
    if (os_log_type_enabled(v40, v41))
    {
      v58 = v40;
      v42 = (uint8_t *)swift_slowAlloc();
      v56 = swift_slowAlloc();
      v68[0] = v56;
      v57 = v29;
      v55 = v42;
      *(_DWORD *)v42 = 136315138;
      v54 = v42 + 4;
      v60 = v34;
      v61 = v35;
      v62 = v36;
      v63 = v37;
      v64 = v38;
      LOBYTE(v65) = v39;
      JPKIXPCResponse.description.getter();
      v60 = sub_20A0A6D5C(v43, v44, v68);
      sub_20A0E0A10();
      swift_bridgeObjectRelease();
      sub_20A08D710(v34, v35, v36, v37, v38, v39);
      sub_20A08D710(v34, v35, v36, v37, v38, v39);
      v45 = v55;
      _os_log_impl(&dword_20A048000, v58, (os_log_type_t)v59, "Received response %s", v55, 0xCu);
      v46 = v56;
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v46, -1, -1);
      MEMORY[0x20BD20380](v45, -1, -1);

    }
    else
    {
      sub_20A08D710(v34, v35, v36, v37, v38, v39);
      sub_20A08D710(v34, v35, v36, v37, v38, v39);

    }
    result = swift_release();
    v47 = v53;
    *v53 = v34;
    v47[1] = v35;
    v47[2] = v36;
    v47[3] = v37;
    v47[4] = v38;
    *((_BYTE *)v47 + 40) = v39;
  }
  return result;
}

uint64_t sub_20A095CC8()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for JPKIXPCClient()
{
  return objc_opt_self();
}

uint64_t sub_20A095D04()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_20A095D10()
{
  uint64_t v0;

  v0 = sub_20A0E0740();
  __swift_allocate_value_buffer(v0, qword_2545C9DD0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2545C9DD0);
  return sub_20A0E0734();
}

unint64_t sub_20A095D90()
{
  unint64_t result;

  result = qword_2545C9DF0;
  if (!qword_2545C9DF0)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIXPCRequest, &type metadata for JPKIXPCRequest);
    atomic_store(result, (unint64_t *)&qword_2545C9DF0);
  }
  return result;
}

unint64_t sub_20A095DD4()
{
  unint64_t result;

  result = qword_2545C9DF8;
  if (!qword_2545C9DF8)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIXPCResponse, &type metadata for JPKIXPCResponse);
    atomic_store(result, (unint64_t *)&qword_2545C9DF8);
  }
  return result;
}

id sub_20A095E54()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FindClass()
{
  return objc_opt_self();
}

id sub_20A095EA8()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for FindClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_2545D79E0 = (uint64_t)result;
  return result;
}

void sub_20A095EFC()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_2545C8E20 != -1)
    swift_once();
  v0 = (id)qword_2545D79E0;
  v1 = (void *)sub_20A0E0800();
  v2 = (void *)sub_20A0E0800();
  v3 = objc_msgSend(v0, sel_localizedStringForKey_value_table_, v1, 0, v2);

  v4 = sub_20A0E080C();
  v6 = v5;

  qword_2545C9E00 = v4;
  *(_QWORD *)algn_2545C9E08 = v6;
}

uint64_t static SESSettingsLocalizedStringFactory.touchIDAlertMessagePrefix.getter()
{
  return sub_20A0964CC(&qword_2545C8E28, &qword_2545C9E00);
}

void sub_20A09602C()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_2545C8E20 != -1)
    swift_once();
  v0 = (id)qword_2545D79E0;
  v1 = (void *)sub_20A0E0800();
  v2 = (void *)sub_20A0E0800();
  v3 = objc_msgSend(v0, sel_localizedStringForKey_value_table_, v1, 0, v2);

  v4 = sub_20A0E080C();
  v6 = v5;

  qword_2545C9E10 = v4;
  *(_QWORD *)algn_2545C9E18 = v6;
}

uint64_t static SESSettingsLocalizedStringFactory.nonTouchIDAlertMessagePrefix.getter()
{
  return sub_20A0964CC(&qword_2545C8E30, &qword_2545C9E10);
}

void sub_20A09615C()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_2545C8E20 != -1)
    swift_once();
  v0 = (id)qword_2545D79E0;
  v1 = (void *)sub_20A0E0800();
  v2 = (void *)sub_20A0E0800();
  v3 = objc_msgSend(v0, sel_localizedStringForKey_value_table_, v1, 0, v2);

  v4 = sub_20A0E080C();
  v6 = v5;

  qword_2545C9E20 = v4;
  *(_QWORD *)algn_2545C9E28 = v6;
}

uint64_t static SESSettingsLocalizedStringFactory.passbookDefaultAlertMessage.getter()
{
  return sub_20A0964CC(&qword_2545C8E38, &qword_2545C9E20);
}

void sub_20A09628C()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_2545C8E20 != -1)
    swift_once();
  v0 = (id)qword_2545D79E0;
  v1 = (void *)sub_20A0E0800();
  v2 = (void *)sub_20A0E0800();
  v3 = objc_msgSend(v0, sel_localizedStringForKey_value_table_, v1, 0, v2);

  v4 = sub_20A0E080C();
  v6 = v5;

  qword_2545C9E30 = v4;
  *(_QWORD *)algn_2545C9E38 = v6;
}

uint64_t static SESSettingsLocalizedStringFactory.thirdPartyDefaultAlertMessage.getter()
{
  return sub_20A0964CC(&qword_2545C8E40, &qword_2545C9E30);
}

void sub_20A0963BC()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_2545C8E20 != -1)
    swift_once();
  v0 = (id)qword_2545D79E0;
  v1 = (void *)sub_20A0E0800();
  v2 = (void *)sub_20A0E0800();
  v3 = objc_msgSend(v0, sel_localizedStringForKey_value_table_, v1, 0, v2);

  v4 = sub_20A0E080C();
  v6 = v5;

  qword_2545C9E40 = v4;
  *(_QWORD *)algn_2545C9E48 = v6;
}

uint64_t static SESSettingsLocalizedStringFactory.expressModeDefaultAlertMessagePostfix.getter()
{
  return sub_20A0964CC(&qword_2545C8E48, &qword_2545C9E40);
}

uint64_t sub_20A0964CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

id sub_20A09653C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v3;

  if (*a3 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  v3 = (void *)sub_20A0E0800();
  swift_bridgeObjectRelease();
  return v3;
}

id SESSettingsLocalizedStringFactory.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SESSettingsLocalizedStringFactory.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SESSettingsLocalizedStringFactory.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SESSettingsLocalizedStringFactory()
{
  return objc_opt_self();
}

id SERCredentialInfo.__allocating_init(moduleAIDs:packageAID:containerSize:requiredMemoryForCredential:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  objc_super v14;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR____TtC9SEService17SERCredentialInfo_moduleAIDs] = a1;
  v12 = &v11[OBJC_IVAR____TtC9SEService17SERCredentialInfo_packageAID];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  *(_QWORD *)&v11[OBJC_IVAR____TtC9SEService17SERCredentialInfo_containerSize] = a4;
  *(_QWORD *)&v11[OBJC_IVAR____TtC9SEService17SERCredentialInfo_requiredMemoryForCredential] = a5;
  v14.receiver = v11;
  v14.super_class = v5;
  return objc_msgSendSuper2(&v14, sel_init);
}

id SERCredentialInfo.init(moduleAIDs:packageAID:containerSize:requiredMemoryForCredential:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  objc_class *ObjectType;
  char *v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v5[OBJC_IVAR____TtC9SEService17SERCredentialInfo_moduleAIDs] = a1;
  v12 = &v5[OBJC_IVAR____TtC9SEService17SERCredentialInfo_packageAID];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9SEService17SERCredentialInfo_containerSize] = a4;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9SEService17SERCredentialInfo_requiredMemoryForCredential] = a5;
  v14.receiver = v5;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, sel_init);
}

id SERCredentialInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SERCredentialInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SERCredentialInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static SERCredentialInfo.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545C9E50;
}

uint64_t static SERCredentialInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545C9E50 = a1;
  return result;
}

uint64_t (*static SERCredentialInfo.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

Swift::Void __swiftcall SERCredentialInfo.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService17SERCredentialInfo_moduleAIDs);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_20A0E0B24();
    v6 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_20A0E0800();
      swift_bridgeObjectRelease();
      sub_20A0E0B0C();
      sub_20A0E0B30();
      sub_20A0E0B3C();
      sub_20A0E0B18();
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  sub_20A094638();
  v7 = (void *)sub_20A0E08A8();
  swift_bridgeObjectRelease();
  v8 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  swift_bridgeObjectRetain();
  v9 = (void *)sub_20A0E0800();
  swift_bridgeObjectRelease();
  v10 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

  v11 = *(id *)(v2 + OBJC_IVAR____TtC9SEService17SERCredentialInfo_containerSize);
  v12 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

  v13 = *(id *)(v2 + OBJC_IVAR____TtC9SEService17SERCredentialInfo_requiredMemoryForCredential);
  v14 = (id)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);

}

id SERCredentialInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

uint64_t SERCredentialInfo.init(coder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  void *v36;
  void *v37;
  objc_class *v38;
  uint64_t v39;
  objc_super v40;
  uint64_t v41;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_20A094638();
  v4 = v1;
  v5 = sub_20A0E09EC();
  if (!v5)
    goto LABEL_17;
  v6 = v5;
  v7 = sub_20A0E09D4();
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_17:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v8 = (void *)v7;
  type metadata accessor for MemoryUsage();
  v9 = sub_20A0E09D4();
  if (!v9)
  {
    swift_bridgeObjectRelease();

    goto LABEL_17;
  }
  v10 = (void *)v9;
  v11 = sub_20A0E09D4();
  if (!v11)
  {
    swift_bridgeObjectRelease();

    goto LABEL_17;
  }
  v12 = v11;

  if (!(v6 >> 62))
  {
    v13 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v39 = v12;
    if (v13)
      goto LABEL_7;
LABEL_25:
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
LABEL_26:
    v31 = sub_20A0E080C();
    v33 = v32;
    v34 = (char *)objc_allocWithZone(ObjectType);
    *(_QWORD *)&v34[OBJC_IVAR____TtC9SEService17SERCredentialInfo_moduleAIDs] = v15;
    v35 = (uint64_t *)&v34[OBJC_IVAR____TtC9SEService17SERCredentialInfo_packageAID];
    *v35 = v31;
    v35[1] = v33;
    *(_QWORD *)&v34[OBJC_IVAR____TtC9SEService17SERCredentialInfo_containerSize] = v10;
    *(_QWORD *)&v34[OBJC_IVAR____TtC9SEService17SERCredentialInfo_requiredMemoryForCredential] = v39;
    v40.receiver = v34;
    v40.super_class = ObjectType;
    v23 = objc_msgSendSuper2(&v40, sel_init);

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return (uint64_t)v23;
  }
  swift_bridgeObjectRetain();
  v13 = sub_20A0E0BD8();
  swift_bridgeObjectRelease();
  v39 = v12;
  if (!v13)
    goto LABEL_25;
LABEL_7:
  v41 = MEMORY[0x24BEE4AF8];
  result = sub_20A0972AC(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v36 = v10;
    v37 = v8;
    v38 = ObjectType;
    v15 = v41;
    if ((v6 & 0xC000000000000001) != 0)
    {
      v16 = 0;
      do
      {
        MEMORY[0x20BD1F648](v16, v6);
        v17 = sub_20A0E080C();
        v19 = v18;
        swift_unknownObjectRelease();
        v41 = v15;
        v21 = *(_QWORD *)(v15 + 16);
        v20 = *(_QWORD *)(v15 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_20A0972AC(v20 > 1, v21 + 1, 1);
          v15 = v41;
        }
        ++v16;
        *(_QWORD *)(v15 + 16) = v21 + 1;
        v22 = v15 + 16 * v21;
        *(_QWORD *)(v22 + 32) = v17;
        *(_QWORD *)(v22 + 40) = v19;
      }
      while (v13 != v16);
    }
    else
    {
      v24 = v6 + 32;
      do
      {
        v25 = sub_20A0E080C();
        v27 = v26;
        v41 = v15;
        v29 = *(_QWORD *)(v15 + 16);
        v28 = *(_QWORD *)(v15 + 24);
        if (v29 >= v28 >> 1)
        {
          sub_20A0972AC(v28 > 1, v29 + 1, 1);
          v15 = v41;
        }
        *(_QWORD *)(v15 + 16) = v29 + 1;
        v30 = v15 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v25;
        *(_QWORD *)(v30 + 40) = v27;
        v24 += 8;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease();
    ObjectType = v38;
    v10 = v36;
    v8 = v37;
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_20A0970C8()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_20A0970D4(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int64_t v5;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return sub_20A0972AC(result, v5, 0);
  }
  return result;
}

uint64_t sub_20A097138(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = sub_20A0E0BC0();
    __break(1u);
  }
  else if (a1)
  {
    result = sub_20A0E08E4();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_20A0971D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return sub_20A0972AC(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

uint64_t sub_20A097218(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return sub_20A0972AC(v2 > 1, result + 1, 1);
  return result;
}

uint64_t sub_20A097240(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

uint64_t sub_20A097258(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A0973F0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20A097274(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20A097594(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20A097290(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A0976F0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20A0972AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20A097894(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t type metadata accessor for SERCredentialInfo()
{
  return objc_opt_self();
}

uint64_t method lookup function for SERCredentialInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SERCredentialInfo.__allocating_init(moduleAIDs:packageAID:containerSize:requiredMemoryForCredential:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_20A0972FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A097F2C(a1, a2, a3, (_QWORD *)*v3, &qword_2545C9EF0, &qword_2545C9EF8);
  *v3 = result;
  return result;
}

uint64_t sub_20A097328(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A097F2C(a1, a2, a3, (_QWORD *)*v3, &qword_2545C9E98, &qword_2545C9EA0);
  *v3 = result;
  return result;
}

uint64_t sub_20A097354(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A0979FC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20A097370(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A097BE4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20A09738C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A097D88(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20A0973A8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A097F2C(a1, a2, a3, (_QWORD *)*v3, &qword_2545C9E88, &qword_2545C9E90);
  *v3 = result;
  return result;
}

uint64_t sub_20A0973D4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20A0980B8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20A0973F0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EA8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EB0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A097594(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EB8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A0976F0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EE0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EE8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A097894(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F00);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A0979FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545C9ED0);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA000) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA000) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A097BE4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F08);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545C9F10);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A097D88(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EC0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EC8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A097F2C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11)
      memmove(v13 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A0980B8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9E78);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9E80);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t TCCContext.TCCService.tccString.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t result;

  if (a1 == 1)
  {
    v1 = (void *)*MEMORY[0x24BEB38F0];
    if (*MEMORY[0x24BEB38F0])
    {
LABEL_6:
      v2 = sub_20A0E080C();

      return v2;
    }
    __break(1u);
  }
  if (!a1)
  {
    v1 = (void *)*MEMORY[0x24BEB3850];
    if (*MEMORY[0x24BEB3850])
      goto LABEL_6;
    __break(1u);
  }
  result = sub_20A0E0D04();
  __break(1u);
  return result;
}

uint64_t TCCContext.TCCService.serviceEntitlement.getter(uint64_t a1)
{
  uint64_t result;

  result = 0xD00000000000001BLL;
  if (a1)
  {
    if (a1 == 1)
    {
      return 0xD00000000000002DLL;
    }
    else
    {
      result = sub_20A0E0D04();
      __break(1u);
    }
  }
  return result;
}

uint64_t TCCContext.TCCService.defaultAppEntitlement.getter(uint64_t a1)
{
  uint64_t result;

  result = 0xD000000000000033;
  if (a1)
  {
    if (a1 == 1)
    {
      return 0xD000000000000045;
    }
    else
    {
      result = sub_20A0E0D04();
      __break(1u);
    }
  }
  return result;
}

uint64_t TCCContext.TCCService.fallbackTCCService.getter(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 1;
  if (a1 == 1)
    return 0;
  result = sub_20A0E0D04();
  __break(1u);
  return result;
}

BOOL TCCContext.TCCService.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

_QWORD *sub_20A098448@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t TCCContext.TCCAccess.description.getter(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      return 0x6465746E617267;
    case 2:
      return 0x6E776F6E6B6E75;
    case 1:
      return 0x6465696E6564;
  }
  result = sub_20A0E0D04();
  __break(1u);
  return result;
}

unint64_t TCCContext.TCCAccess.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t *sub_20A098514@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_20A098530()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  if (!*v0)
    return 0x6465746E617267;
  if (v1 == 2)
    return 0x6E776F6E6B6E75;
  if (v1 == 1)
    return 0x6465696E6564;
  result = sub_20A0E0D04();
  __break(1u);
  return result;
}

uint64_t TCCContext.checkTCCAccess(to:for:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v7;
  void (*v8)(id *, _QWORD);
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t result;
  id v20[4];
  id v21;

  if (a1 <= 1)
  {
    swift_getKeyPath();
    v21 = v3;
    swift_retain_n();
    v7 = v3;
    v8 = (void (*)(id *, _QWORD))swift_readAtKeyPath();
    v10 = *v9;
    swift_bridgeObjectRetain();
    v8(v20, 0);
    swift_release();

    if (v10)
    {
      swift_release();
      if (*(_QWORD *)(v10 + 16))
      {
        swift_bridgeObjectRetain();
        v11 = sub_20A0B8998(a2, a3);
        if ((v12 & 1) != 0)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
          swift_bridgeObjectRelease();
LABEL_9:
          swift_bridgeObjectRelease();
          swift_release();
          return v13;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v14 = (_QWORD *)sub_20A099C64(a1);
      v20[0] = v7;
      v21 = v14;
      v15 = v7;
      swift_bridgeObjectRetain();
      swift_setAtReferenceWritableKeyPath();

      swift_release();
      v16 = v14[2];
      swift_bridgeObjectRetain();
      if (v16)
      {
        v17 = sub_20A0B8998(a2, a3);
        if ((v18 & 1) != 0)
        {
          v13 = *(_QWORD *)(v14[7] + 8 * v17);
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    return 2;
  }
  result = sub_20A0E0D04();
  __break(1u);
  return result;
}

uint64_t TCCContext.getTCCKnownBundleIds(for:filter:)(unint64_t a1)
{
  void *v1;
  id v3;
  void (*v4)(id *, _QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  id v13[4];
  id v14;

  if (a1 > 1)
  {
    result = sub_20A0E0D04();
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    v14 = v1;
    swift_retain_n();
    v3 = v1;
    v4 = (void (*)(id *, _QWORD))swift_readAtKeyPath();
    v6 = *v5;
    swift_bridgeObjectRetain();
    v4(v13, 0);
    swift_release();

    if (v6)
    {
      v7 = swift_release();
      MEMORY[0x24BDAC7A8](v7);
      v8 = sub_20A09A318(v6, sub_20A09A740);
    }
    else
    {
      v9 = (void *)sub_20A099C64(a1);
      v13[0] = v3;
      v14 = v9;
      v10 = v3;
      swift_bridgeObjectRetain();
      swift_setAtReferenceWritableKeyPath();

      v11 = swift_release();
      MEMORY[0x24BDAC7A8](v11);
      v8 = sub_20A09A318((uint64_t)v9, sub_20A09A300);
    }
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_20A098A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  char v7;

  if (!a4)
  {
    if (a3 != 2)
      goto LABEL_3;
    return 0;
  }
  swift_retain();
  v7 = a4(a3);
  sub_20A09A628((uint64_t)a4);
  if ((v7 & 1) == 0)
    return 0;
LABEL_3:
  swift_bridgeObjectRetain();
  return a1;
}

void sub_20A098A9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t authorization_right;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  unint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;

  v7 = &unk_253E70000;
  if (!a2)
  {
LABEL_6:
    if (!a1)
      goto LABEL_16;
    goto LABEL_9;
  }
  v8 = qword_253E70FF8;
  v9 = a2;
  if (v8 != -1)
    swift_once();
  v10 = sub_20A0E0740();
  __swift_project_value_buffer(v10, (uint64_t)qword_253E70FE0);
  v11 = v9;
  v12 = sub_20A0E0728();
  v13 = sub_20A0E0998();
  if (os_log_type_enabled(v12, v13))
  {
    v46 = a4;
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v48[0] = v15;
    *(_DWORD *)v14 = 136315394;
    v49 = (uint64_t)v11;
    type metadata accessor for CFError(0);
    sub_20A09A6C4(&qword_2545C9F40, (uint64_t (*)(uint64_t))type metadata accessor for CFError, MEMORY[0x24BDCFD90]);
    v16 = sub_20A0E0D34();
    v49 = sub_20A0A6D5C(v16, v17, v48);
    sub_20A0E0A10();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v18 = TCCContext.TCCService.tccString.getter(a3);
    v49 = sub_20A0A6D5C(v18, v19, v48);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v12, v13, "Error %s while getting auth records for service %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    v20 = v15;
    v7 = (_QWORD *)&unk_253E70000;
    MEMORY[0x20BD20380](v20, -1, -1);
    v21 = v14;
    a4 = v46;
    MEMORY[0x20BD20380](v21, -1, -1);

    goto LABEL_6;
  }

  if (!a1)
  {
LABEL_16:
    if (v7[511] != -1)
      swift_once();
    v34 = sub_20A0E0740();
    __swift_project_value_buffer(v34, (uint64_t)qword_253E70FE0);
    v35 = sub_20A0E0728();
    v36 = sub_20A0E098C();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v48[0] = v38;
      *(_DWORD *)v37 = 136315138;
      v39 = TCCContext.TCCService.tccString.getter(a3);
      v49 = sub_20A0A6D5C(v39, v40, v48);
      sub_20A0E0A10();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20A048000, v35, v36, "No authorizationRecord / identity for tccService %s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v38, -1, -1);
      MEMORY[0x20BD20380](v37, -1, -1);
    }

    return;
  }
LABEL_9:
  swift_unknownObjectRetain();
  if (!(id)tcc_authorization_record_get_subject_identity())
  {
    swift_unknownObjectRelease();
    goto LABEL_16;
  }
  v47 = a3;
  authorization_right = tcc_authorization_record_get_authorization_right();
  tcc_identity_get_identifier();
  v23 = sub_20A0E0860();
  v25 = v24;
  if (v7[511] != -1)
    swift_once();
  v26 = (uint64_t *)(a4 + 16);
  v27 = sub_20A0E0740();
  __swift_project_value_buffer(v27, (uint64_t)qword_253E70FE0);
  swift_bridgeObjectRetain_n();
  v28 = sub_20A0E0728();
  v29 = sub_20A0E098C();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc();
    v45 = swift_slowAlloc();
    v48[0] = v45;
    *(_DWORD *)v30 = 136315650;
    swift_bridgeObjectRetain();
    v49 = sub_20A0A6D5C(v23, v25, v48);
    sub_20A0E0A10();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2080;
    v31 = 0xD00000000000001ELL;
    v32 = 0x800000020A0F1880;
    switch(authorization_right)
    {
      case 0:
        goto LABEL_30;
      case 1:
        v33 = "TCC_AUTHORIZATION_RIGHT_UNKNOWN";
        goto LABEL_25;
      case 2:
        v33 = "TCC_AUTHORIZATION_RIGHT_ALLOWED";
        goto LABEL_25;
      case 3:
        v33 = "TCC_AUTHORIZATION_RIGHT_LIMITED";
LABEL_25:
        v32 = (unint64_t)(v33 - 32) | 0x8000000000000000;
        v31 = 0xD00000000000001FLL;
        goto LABEL_30;
      case 4:
        v31 = 0xD000000000000028;
        v41 = "TCC_AUTHORIZATION_RIGHT_ADD_MODIFY_ADDED";
        goto LABEL_29;
      case 5:
        v31 = 0xD000000000000023;
        v41 = "TCC_AUTHORIZATION_RIGHT_SESSION_PID";
        goto LABEL_29;
      case 6:
        v31 = 0xD000000000000022;
        v41 = "TCC_AUTHORIZATION_RIGHT_LEARN_MORE";
        goto LABEL_29;
      default:
        v31 = 0xD00000000000001BLL;
        v41 = "TCC_AUTHORIZATION_NEW_VALUE";
LABEL_29:
        v32 = (unint64_t)(v41 - 32) | 0x8000000000000000;
LABEL_30:
        v49 = sub_20A0A6D5C(v31, v32, v48);
        sub_20A0E0A10();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 22) = 2080;
        v42 = TCCContext.TCCService.tccString.getter(v47);
        v49 = sub_20A0A6D5C(v42, v43, v48);
        sub_20A0E0A10();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20A048000, v28, v29, "Found auth record for bundle ID %s with authorization %s for service %s", (uint8_t *)v30, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x20BD20380](v45, -1, -1);
        MEMORY[0x20BD20380](v30, -1, -1);

        break;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v49 = *v26;
  *v26 = 0x8000000000000000;
  sub_20A0C14A4(authorization_right != 2, v23, v25, isUniquelyReferenced_nonNull_native);
  *v26 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_20A099198(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

id TCCContext.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TCCContext.init()()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC9SEService10TCCContext_hceService] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC9SEService10TCCContext_secService] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

id TCCContext.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20A09932C()
{
  uint64_t v0;

  v0 = sub_20A0E0740();
  __swift_allocate_value_buffer(v0, qword_253E70FE0);
  __swift_project_value_buffer(v0, (uint64_t)qword_253E70FE0);
  return sub_20A0E0734();
}

uint64_t sub_20A0993A4(unint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;

  v4 = a1;
  v28 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_33:
    v5 = sub_20A0E0BD8();
    if (v5)
      goto LABEL_3;
    return MEMORY[0x24BEE4AF8];
  }
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return MEMORY[0x24BEE4AF8];
LABEL_3:
  v19 = a3;
  v6 = 0;
  v7 = v4 & 0xC000000000000001;
  v8 = v4 & 0xFFFFFFFFFFFFFF8;
  a3 = &qword_2545C9F48;
  v22 = v4 & 0xFFFFFFFFFFFFFF8;
  v23 = v4;
  v21 = v4 & 0xC000000000000001;
  while (1)
  {
    if (v7)
    {
      v9 = MEMORY[0x20BD1F648](v6, v4);
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_30:
        __break(1u);
        return v28;
      }
    }
    else
    {
      if (v6 >= *(_QWORD *)(v8 + 16))
      {
        __break(1u);
        goto LABEL_33;
      }
      v9 = *(_QWORD *)(v4 + 8 * v6 + 32);
      swift_unknownObjectRetain();
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_30;
    }
    v27[0] = v9;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F48);
    if (swift_dynamicCast())
      break;
    swift_unknownObjectRelease();
LABEL_5:
    ++v6;
    if (v10 == v5)
      return v28;
  }
  v11 = v25;
  v25 = a2;
  type metadata accessor for CFString(0);
  sub_20A09A6C4(&qword_2545C9348, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_20A0E69D0);
  v12 = a2;
  sub_20A0E0AA0();
  if (!v11[2] || (sub_20A0B8A34((uint64_t)v27), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    sub_20A09A704((uint64_t)v27);
    swift_unknownObjectRelease();
    v7 = v21;
LABEL_17:
    v8 = v22;
    v4 = v23;
    a3 = &qword_2545C9F48;
    goto LABEL_5;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  sub_20A09A704((uint64_t)v27);
  if (!swift_dynamicCast())
  {
    swift_unknownObjectRelease();
    v7 = v21;
    goto LABEL_17;
  }
  v4 = v23;
  if (v19 != (void *)1)
  {
    if (v19)
      goto LABEL_36;
    v14 = (void *)*MEMORY[0x24BEB3850];
    if (!*MEMORY[0x24BEB3850])
      goto LABEL_35;
LABEL_21:
    v15 = sub_20A0E080C();
    v20 = v16;

    if (a2 == (_QWORD *)v15 && v26 == v20)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v17 = sub_20A0E0CEC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        swift_unknownObjectRelease();
        goto LABEL_27;
      }
    }
    sub_20A0E0B0C();
    sub_20A0E0B30();
    sub_20A0E0B3C();
    sub_20A0E0B18();
LABEL_27:
    v7 = v21;
    v8 = v22;
    a3 = &qword_2545C9F48;
    goto LABEL_5;
  }
  v14 = (void *)*MEMORY[0x24BEB38F0];
  if (*MEMORY[0x24BEB38F0])
    goto LABEL_21;
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  v27[0] = v19;
  result = sub_20A0E0D04();
  __break(1u);
  return result;
}

uint64_t sub_20A099720(unint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  void *v12;
  unsigned __int8 v13;
  unint64_t v15;
  _QWORD v17[5];
  _QWORD *v18;

  v2 = a1;
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    v3 = sub_20A0E0BD8();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      v4 = v2 & 0xC000000000000001;
      v5 = 4;
      v15 = v2;
      do
      {
        v6 = v5 - 4;
        if (v4)
        {
          v7 = MEMORY[0x20BD1F648](v5 - 4, v2);
          v8 = v5 - 3;
          if (__OFADD__(v6, 1))
            goto LABEL_21;
        }
        else
        {
          v7 = *(_QWORD *)(v2 + 8 * v5);
          swift_unknownObjectRetain();
          v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
        }
        v17[0] = v7;
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F48);
        if (swift_dynamicCast())
        {
          v9 = v18;
          v18 = a2;
          type metadata accessor for CFString(0);
          sub_20A09A6C4(&qword_2545C9348, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_20A0E69D0);
          v10 = a2;
          sub_20A0E0AA0();
          if (!v9[2] || (sub_20A0B8A34((uint64_t)v17), (v11 & 1) == 0))
          {
            swift_bridgeObjectRelease();
            sub_20A09A704((uint64_t)v17);
LABEL_18:
            swift_unknownObjectRelease();
            v2 = v15;
            goto LABEL_5;
          }
          swift_unknownObjectRetain();
          swift_bridgeObjectRelease();
          sub_20A09A704((uint64_t)v17);
          objc_opt_self();
          v12 = (void *)swift_dynamicCastObjCClass();
          if (!v12)
          {
            swift_unknownObjectRelease();
            goto LABEL_18;
          }
          v13 = objc_msgSend(v12, sel_BOOLValue);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v2 = v15;
          if ((v13 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 1;
          }
        }
        else
        {
          swift_unknownObjectRelease();
        }
LABEL_5:
        ++v5;
      }
      while (v8 != v3);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void _s9SEService10TCCContextC28checkTCCAccessWithoutLoading2to3forAC0D0OAC10TCCServiceO_SStFZ_0(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  id v10;
  _QWORD *v11;
  id v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (void *)sub_20A0E0800();
  v7 = (void *)TCCAccessCopyInformationForBundleId();

  if (!v7)
  {
    if (qword_253E70FF8 != -1)
      swift_once();
    v15 = sub_20A0E0740();
    __swift_project_value_buffer(v15, (uint64_t)qword_253E70FE0);
    swift_bridgeObjectRetain_n();
    v16 = sub_20A0E0728();
    v17 = sub_20A0E09A4();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v20 = v19;
      *(_DWORD *)v18 = 136446210;
      swift_bridgeObjectRetain();
      sub_20A0A6D5C(a2, a3, &v20);
      sub_20A0E0A10();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_20A048000, v16, v17, "Unable to look up TCC for %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v19, -1, -1);
      MEMORY[0x20BD20380](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v8 = sub_20A0E08B4();

  if (!*MEMORY[0x24BEB3828])
  {
    __break(1u);
    goto LABEL_15;
  }
  v9 = (void *)*MEMORY[0x24BEB3818];
  v10 = (id)*MEMORY[0x24BEB3828];
  if (!v9)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v11 = v10;
  v12 = v9;
  v13 = sub_20A0993A4(v8, v11, a1);
  swift_bridgeObjectRelease();

  if (v13 >> 62)
  {
    if (sub_20A0E0BD8())
      goto LABEL_6;
  }
  else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_6:
    v14 = v12;
    sub_20A099720(v13, v14);
    swift_bridgeObjectRelease();

    return;
  }

  swift_bridgeObjectRelease();
}

unint64_t sub_20A099C64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t aBlock[6];

  v2 = sub_20A0E0794();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253E70FF8 != -1)
    swift_once();
  v44 = a1;
  v6 = sub_20A0E0740();
  v7 = __swift_project_value_buffer(v6, (uint64_t)qword_253E70FE0);
  v8 = sub_20A0E0728();
  v9 = sub_20A0E0980();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v43 = v7;
    v12 = v11;
    aBlock[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v13 = TCCContext.TCCService.tccString.getter(v44);
    v46 = sub_20A0A6D5C(v13, v14, aBlock);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v8, v9, "Loading TCC information for %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v12, -1, -1);
    MEMORY[0x20BD20380](v10, -1, -1);
  }

  sub_20A09A638();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5490], v2);
  v15 = (void *)sub_20A0E09BC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v16 = tcc_server_create();

  if (v16)
  {
    v17 = v44;
    TCCContext.TCCService.tccString.getter(v44);
    v18 = (void *)sub_20A0E0800();
    swift_bridgeObjectRelease();
    v19 = (id)tcc_service_singleton_for_CF_name();

    if (v19)
    {
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = MEMORY[0x24BEE4B00];
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v17;
      *(_QWORD *)(v21 + 24) = v20;
      aBlock[4] = (uint64_t)sub_20A09A6BC;
      aBlock[5] = v21;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_20A099198;
      aBlock[3] = (uint64_t)&block_descriptor;
      v22 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      tcc_server_message_get_authorization_records_by_service();
      _Block_release(v22);
      swift_retain_n();
      v23 = sub_20A0E0728();
      v24 = sub_20A0E098C();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc();
        v43 = swift_slowAlloc();
        aBlock[0] = v43;
        *(_DWORD *)v25 = 136315394;
        v26 = TCCContext.TCCService.tccString.getter(v17);
        v46 = sub_20A0A6D5C(v26, v27, aBlock);
        sub_20A0E0A10();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2080;
        v44 = v25 + 14;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        v28 = sub_20A0E07B8();
        v30 = v29;
        swift_bridgeObjectRelease();
        v45 = sub_20A0A6D5C(v28, v30, aBlock);
        sub_20A0E0A10();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20A048000, v23, v24, "Loaded TCC information for service %s --> %s", (uint8_t *)v25, 0x16u);
        v31 = v43;
        swift_arrayDestroy();
        MEMORY[0x20BD20380](v31, -1, -1);
        MEMORY[0x20BD20380](v25, -1, -1);

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_release_n();
      }
      swift_beginAccess();
      v35 = *(_QWORD *)(v20 + 16);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      v36 = sub_20A0E0728();
      v37 = sub_20A0E0998();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        aBlock[0] = v39;
        *(_DWORD *)v38 = 136315138;
        v40 = TCCContext.TCCService.tccString.getter(v17);
        v46 = sub_20A0A6D5C(v40, v41, aBlock);
        sub_20A0E0A10();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20A048000, v36, v37, "Unable to create tcc Service string %s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x20BD20380](v39, -1, -1);
        MEMORY[0x20BD20380](v38, -1, -1);
      }

      v35 = sub_20A0A0838(MEMORY[0x24BEE4AF8]);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v32 = sub_20A0E0728();
    v33 = sub_20A0E0998();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_20A048000, v32, v33, "Failed to create tcc server", v34, 2u);
      MEMORY[0x20BD20380](v34, -1, -1);
    }

    return sub_20A0A0838(MEMORY[0x24BEE4AF8]);
  }
  return v35;
}

uint64_t sub_20A09A300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_20A098A14(a1, a2, a3, *(uint64_t (**)(uint64_t))(v3 + 16));
}

uint64_t sub_20A09A318(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v6)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v20)) + (v9 << 6))
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    v16 = a2(v13, v14, v15);
    v18 = v17;
    result = swift_bridgeObjectRelease();
    if (v18)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_20A0A6AB4(0, v26[2] + 1, 1, v26);
        v26 = (_QWORD *)result;
      }
      v23 = v26[2];
      v22 = v26[3];
      v24 = v23 + 1;
      if (v23 >= v22 >> 1)
      {
        result = (uint64_t)sub_20A0A6AB4((_QWORD *)(v22 > 1), v23 + 1, 1, v26);
        v24 = v23 + 1;
        v26 = (_QWORD *)result;
      }
      v26[2] = v24;
      v25 = &v26[2 * v23];
      v25[4] = v16;
      v25[5] = v18;
      if (v6)
        goto LABEL_4;
    }
    else if (v6)
    {
      goto LABEL_4;
    }
LABEL_7:
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v19 >= v7)
      goto LABEL_29;
    v20 = *(_QWORD *)(v27 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v7)
        goto LABEL_29;
      v20 = *(_QWORD *)(v27 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v7)
          goto LABEL_29;
        v20 = *(_QWORD *)(v27 + 8 * v9);
        if (!v20)
        {
          v9 = v19 + 3;
          if (v19 + 3 >= v7)
            goto LABEL_29;
          v20 = *(_QWORD *)(v27 + 8 * v9);
          if (!v20)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v20 - 1) & v20;
  }
  v21 = v19 + 4;
  if (v21 >= v7)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v26;
  }
  v20 = *(_QWORD *)(v27 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v7)
      goto LABEL_29;
    v20 = *(_QWORD *)(v27 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_20A09A55C()
{
  unint64_t result;

  result = qword_2545C9F30;
  if (!qword_2545C9F30)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for TCCContext.TCCService, &type metadata for TCCContext.TCCService);
    atomic_store(result, (unint64_t *)&qword_2545C9F30);
  }
  return result;
}

unint64_t sub_20A09A5A4()
{
  unint64_t result;

  result = qword_2545C9F38;
  if (!qword_2545C9F38)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for TCCContext.TCCAccess, &type metadata for TCCContext.TCCAccess);
    atomic_store(result, (unint64_t *)&qword_2545C9F38);
  }
  return result;
}

uint64_t type metadata accessor for TCCContext()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TCCContext.TCCService()
{
  return &type metadata for TCCContext.TCCService;
}

ValueMetadata *type metadata accessor for TCCContext.TCCAccess()
{
  return &type metadata for TCCContext.TCCAccess;
}

uint64_t sub_20A09A628(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

unint64_t sub_20A09A638()
{
  unint64_t result;

  result = qword_253E71358;
  if (!qword_253E71358)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_253E71358);
  }
  return result;
}

uint64_t sub_20A09A674()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_20A09A698()
{
  swift_release();
  return swift_deallocObject();
}

void sub_20A09A6BC(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_20A098A9C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_20A09A6C4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x20BD202E4](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20A09A704(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_20A09A748()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for SERClient();
  v0 = swift_allocObject();
  result = swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = 0;
  qword_2545D79E8 = v0;
  return result;
}

void sub_20A09A784(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (qword_2545C8E58 != -1)
    swift_once();
  v2 = sub_20A0E0740();
  __swift_project_value_buffer(v2, (uint64_t)qword_2545C9F50);
  v3 = a1;
  v4 = a1;
  oslog = sub_20A0E0728();
  v5 = sub_20A0E0998();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue();
    v8 = sub_20A0E0D34();
    sub_20A0A6D5C(v8, v9, &v11);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, oslog, v5, "Failed to get remote object : %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v7, -1, -1);
    MEMORY[0x20BD20380](v6, -1, -1);

  }
  else
  {

  }
}

id sub_20A09A95C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  Class isa;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t aBlock;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  uint64_t (*v26)();
  uint64_t v27;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v2 = *(id *)(v0 + 112);
  }
  else
  {
    v3 = v0;
    v4 = objc_allocWithZone(MEMORY[0x24BDD1988]);
    v5 = (void *)sub_20A0E0800();
    v6 = objc_msgSend(v4, sel_initWithMachServiceName_options_, v5, 4096);

    objc_msgSend(v6, sel_setExportedInterface_, 0);
    objc_msgSend(v6, sel_setExportedObject_, v3);
    isa = SERInterface()().super.isa;
    objc_msgSend(v6, sel_setRemoteObjectInterface_, isa);

    if (qword_2545C8E58 != -1)
      swift_once();
    v8 = sub_20A0E0740();
    __swift_project_value_buffer(v8, (uint64_t)qword_2545C9F50);
    v9 = sub_20A0E0728();
    v10 = sub_20A0E0998();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_20A048000, v9, v10, "SERProto remoteObjectInterface ^", v11, 2u);
      MEMORY[0x20BD20380](v11, -1, -1);
    }

    v26 = sub_20A09ACC0;
    v27 = 0;
    v12 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v23 = 1107296256;
    v24 = sub_20A09AE98;
    v25 = &block_descriptor_0;
    v13 = _Block_copy(&aBlock);
    objc_msgSend(v6, sel_setInterruptionHandler_, v13);
    _Block_release(v13);
    v26 = sub_20A09AEC4;
    v27 = 0;
    aBlock = v12;
    v23 = 1107296256;
    v24 = sub_20A09AE98;
    v25 = &block_descriptor_3;
    v14 = _Block_copy(&aBlock);
    objc_msgSend(v6, sel_setInvalidationHandler_, v14);
    _Block_release(v14);
    objc_msgSend(v6, sel_activate);
    v15 = sub_20A0E0728();
    v16 = sub_20A0E0980();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      aBlock = v18;
      *(_DWORD *)v17 = 136315138;
      sub_20A0A6D5C(0xD000000000000029, 0x800000020A0F18E0, &aBlock);
      sub_20A0E0A10();
      _os_log_impl(&dword_20A048000, v15, v16, "Connected and activated XPC service %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v18, -1, -1);
      MEMORY[0x20BD20380](v17, -1, -1);
    }

    v19 = *(void **)(v3 + 112);
    *(_QWORD *)(v3 + 112) = v6;
    v2 = v6;

    v1 = 0;
  }
  v20 = v1;
  return v2;
}

uint64_t sub_20A09ACC0()
{
  return sub_20A09AEE0("XPC Client interrupted", (uint64_t)&unk_24C2BDE70, (uint64_t)&unk_2545C9F98);
}

uint64_t sub_20A09ACDC()
{
  return swift_task_switch();
}

uint64_t sub_20A09ACF0()
{
  uint64_t v0;

  if (qword_2545C8E50 != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = qword_2545D79E8;
  return swift_task_switch();
}

uint64_t sub_20A09AD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_20A0E092C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_20A0E0920();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_20A09B4A4(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_20A0E08FC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_20A09AE98(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_20A09AEC4()
{
  return sub_20A09AEE0("XPC Client invalidated", (uint64_t)&unk_24C2BDE20, (uint64_t)&unk_2545C9F78);
}

uint64_t sub_20A09AEE0(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F68);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2545C8E58 != -1)
    swift_once();
  v8 = sub_20A0E0740();
  __swift_project_value_buffer(v8, (uint64_t)qword_2545C9F50);
  v9 = sub_20A0E0728();
  v10 = sub_20A0E0998();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_20A048000, v9, v10, a1, v11, 2u);
    MEMORY[0x20BD20380](v11, -1, -1);
  }

  v12 = sub_20A0E092C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  sub_20A09AD54((uint64_t)v7, a3, v13);
  return swift_release();
}

uint64_t sub_20A09B04C()
{
  return swift_task_switch();
}

uint64_t sub_20A09B060()
{
  uint64_t v0;

  if (qword_2545C8E50 != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = qword_2545D79E8;
  return swift_task_switch();
}

uint64_t sub_20A09B0C4()
{
  uint64_t v0;

  sub_20A09B0F4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_20A09B0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = v0;
  if (qword_2545C8E58 != -1)
    swift_once();
  v2 = sub_20A0E0740();
  __swift_project_value_buffer(v2, (uint64_t)qword_2545C9F50);
  v3 = sub_20A0E0728();
  v4 = sub_20A0E0998();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v8 = v6;
    *(_DWORD *)v5 = 136315138;
    sub_20A0A6D5C(0xD000000000000029, 0x800000020A0F18E0, &v8);
    sub_20A0E0A10();
    _os_log_impl(&dword_20A048000, v3, v4, "Invalidting %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v6, -1, -1);
    MEMORY[0x20BD20380](v5, -1, -1);
  }

  v7 = *(void **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;

}

uint64_t sub_20A09B274()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for SERClient()
{
  return objc_opt_self();
}

uint64_t sub_20A09B2B8()
{
  uint64_t v0;

  v0 = sub_20A0E0740();
  __swift_allocate_value_buffer(v0, qword_2545C9F50);
  __swift_project_value_buffer(v0, (uint64_t)qword_2545C9F50);
  return sub_20A0E0734();
}

uint64_t sub_20A09B330(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_20A09B394;
  return v6(a1);
}

uint64_t sub_20A09B394()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_20A09B3E0()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_20A09B404()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_20A09B45C;
  return swift_task_switch();
}

uint64_t sub_20A09B45C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_20A09B4A4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20A09B4E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20A09B508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_20A09B45C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2545C9F80 + dword_2545C9F80))(a1, v4);
}

uint64_t sub_20A09B578()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_20A09B5D4;
  return swift_task_switch();
}

uint64_t sub_20A09B5E4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v29 = MEMORY[0x24BEE4AF8];
  sub_20A097328(0, v1, 0);
  v2 = v29;
  result = sub_20A09E62C(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v23 = v1;
  v24 = v5;
  v25 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v26 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = *v12;
    v28 = v12[1];
    sub_20A074C44(*v12, v28);
    CredentialType.rawValue.getter();
    v27 = sub_20A0E0800();
    swift_bridgeObjectRelease();
    v14 = sub_20A0E0974();
    result = sub_20A075F1C(v13, v28);
    v16 = *(_QWORD *)(v29 + 16);
    v15 = *(_QWORD *)(v29 + 24);
    if (v16 >= v15 >> 1)
      result = sub_20A097328(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v29 + 16) = v16 + 1;
    v17 = v29 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v27;
    *(_QWORD *)(v17 + 40) = v14;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v18 = *(_QWORD *)(v25 + 8 * v11);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v24;
    if (*(_DWORD *)(a1 + 36) != v24)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v23;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v23;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v26 + 1;
    v6 = v9;
    if (v26 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

id ReservationState.__allocating_init(counts:reservations:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC9SEService16ReservationState_counts] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC9SEService16ReservationState_reservations] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id ReservationState.init(counts:reservations:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v2[OBJC_IVAR____TtC9SEService16ReservationState_counts] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC9SEService16ReservationState_reservations] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t ReservationState.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  swift_getObjectType();
  sub_20A0E0608();
  swift_allocObject();
  sub_20A0E05FC();
  sub_20A09BB6C((unint64_t *)&unk_2545CA1A0, v0, (uint64_t (*)(uint64_t))type metadata accessor for ReservationState, (uint64_t)&protocol conformance descriptor for ReservationState);
  v1 = sub_20A0E05F0();
  v3 = v2;
  v4 = sub_20A0E0650();
  sub_20A07F898(v1, v3);
  swift_release();
  return v4;
}

uint64_t type metadata accessor for ReservationState()
{
  return objc_opt_self();
}

uint64_t sub_20A09BB6C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x20BD202E4](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t ReservationState.description.getter()
{
  uint64_t (*v0)(uint64_t);

  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_20A08558C();
  swift_bridgeObjectRetain();
  sub_20A0E07B8();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_beginAccess();
  sub_20A0E06D4();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  type metadata accessor for Reservation();
  sub_20A09BB6C((unint64_t *)&unk_2545CA1B0, 255, v0, MEMORY[0x24BDCEA88]);
  swift_bridgeObjectRetain();
  sub_20A0E07B8();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

id sub_20A09BD6C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  void *v5;

  v4 = a1;
  a3();

  v5 = (void *)sub_20A0E0800();
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t ReservationState.debugDescription.getter()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  swift_getObjectType();
  sub_20A0E0AC4();
  v0 = ReservationState.description.getter();
  swift_bridgeObjectRelease();
  v6 = v0;
  sub_20A0E0854();
  sub_20A0E0608();
  swift_allocObject();
  sub_20A0E05FC();
  sub_20A09BB6C((unint64_t *)&unk_2545CA1A0, v1, (uint64_t (*)(uint64_t))type metadata accessor for ReservationState, (uint64_t)&protocol conformance descriptor for ReservationState);
  v2 = sub_20A0E05F0();
  v4 = v3;
  sub_20A0E0650();
  sub_20A07F898(v2, v4);
  swift_release();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Void __swiftcall ReservationState.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  id v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  Class v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  Class isa;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];

  v2 = v1;
  v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545C9FD0);
  v4 = MEMORY[0x24BDAC7A8](v76);
  v75 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v74 = (char *)&v64 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v73 = (uint64_t)&v64 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v72 = (char *)&v64 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v71 = (char *)&v64 - v12;
  swift_beginAccess();
  v13 = swift_bridgeObjectRetain();
  v14 = sub_20A09B5E4(v13);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA1E0);
    v15 = sub_20A0E0BFC();
  }
  else
  {
    v15 = MEMORY[0x24BEE4B00];
  }
  v81[0] = v15;
  v16 = (_QWORD *)swift_bridgeObjectRetain();
  sub_20A09DE08(v16, 1, v81);
  v65 = 0;
  swift_bridgeObjectRelease();
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  sub_20A0801C0(0, (unint64_t *)&unk_2545CA1F0);
  sub_20A09E938((unint64_t *)&qword_2545C9FE0, (unint64_t *)&qword_2545C9460);
  v17 = (void *)sub_20A0E07A0();
  swift_release();
  v18 = (void *)sub_20A0E0800();
  isa = with.super.isa;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v17, v18);

  v19 = (uint64_t *)(v2 + OBJC_IVAR____TtC9SEService16ReservationState_reservations);
  swift_beginAccess();
  v20 = *v19;
  v21 = *(_QWORD *)(*v19 + 16);
  v22 = MEMORY[0x24BEE4AF8];
  if (v21)
  {
    v80 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_20A0972FC(0, v21, 0);
    v24 = sub_20A09E62C(v20);
    v25 = 0;
    v26 = v20 + 64;
    v27 = *(_BYTE *)(v20 + 32);
    v64 = v20 + 80;
    v70 = v20;
    v67 = v21;
    v68 = v23;
    v69 = v20 + 64;
    while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << v27)
    {
      v30 = (unint64_t)v24 >> 6;
      if ((*(_QWORD *)(v26 + 8 * ((unint64_t)v24 >> 6)) & (1 << v24)) == 0)
        goto LABEL_33;
      if (*(_DWORD *)(v20 + 36) != (_DWORD)v23)
        goto LABEL_34;
      v77 = v25;
      v78 = 1 << v24;
      v31 = v76;
      v32 = *(int *)(v76 + 48);
      v33 = *(_QWORD *)(v20 + 48);
      v34 = sub_20A0E06D4();
      v35 = *(_QWORD **)(v34 - 8);
      v36 = v33 + v35[9] * v24;
      v37 = (void (*)(char *, uint64_t, uint64_t))v35[2];
      v38 = (uint64_t)v71;
      v37(v71, v36, v34);
      v39 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v24);
      *(_QWORD *)(v38 + v32) = v39;
      v40 = (uint64_t)v72;
      v37(v72, v38, v34);
      *(_QWORD *)(v40 + *(int *)(v31 + 48)) = v39;
      v41 = v73;
      sub_20A09EBF0(v40, v73, (uint64_t *)&unk_2545C9FD0);
      v42 = v39;
      sub_20A09E978(v38);
      v43 = *(int *)(v31 + 48);
      v44 = v74;
      v37(v74, v41, v34);
      v45 = *(void **)(v41 + v43);
      *(_QWORD *)&v44[v43] = v45;
      v79 = sub_20A0E06A4();
      v46 = *(int *)(v31 + 48);
      v47 = v75;
      v37(v75, v41, v34);
      *(_QWORD *)&v47[v46] = v45;
      v48 = (void (*)(char *, uint64_t))v35[1];
      v49 = v45;
      v48(v47, v34);
      v48(v44, v34);
      sub_20A09E978(v41);
      v22 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_20A0972FC(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v22 = v80;
      }
      v51 = *(_QWORD *)(v22 + 16);
      v50 = *(_QWORD *)(v22 + 24);
      v20 = v70;
      if (v51 >= v50 >> 1)
      {
        sub_20A0972FC(v50 > 1, v51 + 1, 1);
        v22 = v80;
      }
      *(_QWORD *)(v22 + 16) = v51 + 1;
      v52 = v22 + 16 * v51;
      *(_QWORD *)(v52 + 32) = v79;
      *(_QWORD *)(v52 + 40) = v49;
      v27 = *(_BYTE *)(v20 + 32);
      v28 = 1 << v27;
      if (v24 >= 1 << v27)
        goto LABEL_35;
      v26 = v69;
      v53 = *(_QWORD *)(v69 + 8 * v30);
      if ((v53 & v78) == 0)
        goto LABEL_36;
      LODWORD(v23) = v68;
      if (*(_DWORD *)(v20 + 36) != (_DWORD)v68)
        goto LABEL_37;
      v54 = v53 & (-2 << (v24 & 0x3F));
      if (v54)
      {
        v28 = __clz(__rbit64(v54)) | v24 & 0xFFFFFFFFFFFFFFC0;
        v29 = v67;
      }
      else
      {
        v55 = v30 + 1;
        v56 = (v28 + 63) >> 6;
        v29 = v67;
        if (v30 + 1 < v56)
        {
          v57 = *(_QWORD *)(v69 + 8 * v55);
          if (v57)
          {
LABEL_25:
            v28 = __clz(__rbit64(v57)) + (v55 << 6);
          }
          else
          {
            while (v56 - 2 != v30)
            {
              v57 = *(_QWORD *)(v64 + 8 * v30++);
              if (v57)
              {
                v55 = v30 + 1;
                goto LABEL_25;
              }
            }
          }
        }
      }
      v25 = v77 + 1;
      v24 = v28;
      if (v77 + 1 == v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
LABEL_27:
    if (*(_QWORD *)(v22 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7D0);
      v58 = sub_20A0E0BFC();
    }
    else
    {
      v58 = MEMORY[0x24BEE4B00];
    }
    v59 = isa;
    v80 = v58;
    v60 = (_QWORD *)swift_bridgeObjectRetain();
    v61 = v65;
    sub_20A09DA74(v60, 1, &v80);
    if (!v61)
    {
      swift_bridgeObjectRelease();
      sub_20A0801C0(0, &qword_2545C9FF0);
      type metadata accessor for Reservation();
      sub_20A09E938(&qword_2545C9FF8, &qword_2545C9FF0);
      v62 = (void *)sub_20A0E07A0();
      swift_release();
      v63 = (void *)sub_20A0E0800();
      -[objc_class encodeObject:forKey:](v59, sel_encodeObject_forKey_, v62, v63);

      return;
    }
  }
  swift_unexpectedError();
  __break(1u);
}

uint64_t ReservationState.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ReservationState.init(coder:)(a1);
}

uint64_t ReservationState.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void (*v38)(uint64_t *, _QWORD);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void (*v66)(uint64_t *, _QWORD);
  uint64_t v67;
  void *v68;
  objc_class *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  objc_class *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  objc_super v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA000);
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  sub_20A0801C0(0, (unint64_t *)&unk_2545CA1F0);
  v8 = v2;
  v9 = sub_20A0E09E0();
  if (!v9)
    goto LABEL_6;
  v10 = v9;
  sub_20A0801C0(0, &qword_2545C9FF0);
  type metadata accessor for Reservation();
  v11 = sub_20A0E09E0();
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_6:

    swift_deallocPartialClassInstance();
    return 0;
  }
  v81 = v11;
  v76 = a1;
  v77 = v8;
  v75 = (objc_class *)ObjectType;
  if ((v10 & 0xC000000000000001) != 0)
    v12 = sub_20A0E0B90();
  else
    v12 = *(_QWORD *)(v10 + 16);
  if (v12)
  {
    v89 = MEMORY[0x24BEE4AF8];
    sub_20A097290(0, v12 & ~(v12 >> 63), 0);
    v86 = sub_20A09E6B4(v10);
    v87 = v14;
    v88 = v15 & 1;
    if ((v12 & 0x8000000000000000) == 0)
    {
      v16 = v10 & 0xFFFFFFFFFFFFFF8;
      if (v10 < 0)
        v16 = v10;
      v78 = v16;
      while (1)
      {
        sub_20A09E9B8(&v85, v86, v87, v88, v10);
        v27 = v26;
        v28 = v85;
        v29 = sub_20A0E080C();
        CredentialType.init(rawValue:)(v29, v30, &v83);
        v31 = v84;
        if (v84 == 26)
          goto LABEL_57;
        v32 = v83;
        v33 = sub_20A0E0968();

        v34 = v89;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_20A097290(0, *(_QWORD *)(v34 + 16) + 1, 1);
          v34 = v89;
        }
        v36 = *(_QWORD *)(v34 + 16);
        v35 = *(_QWORD *)(v34 + 24);
        if (v36 >= v35 >> 1)
        {
          sub_20A097290(v35 > 1, v36 + 1, 1);
          v34 = v89;
        }
        *(_QWORD *)(v34 + 16) = v36 + 1;
        v37 = (_QWORD *)(v34 + 24 * v36);
        v37[4] = v32;
        v37[5] = v31;
        v37[6] = v33;
        if ((v10 & 0xC000000000000001) != 0)
        {
          if ((v88 & 1) == 0)
            goto LABEL_58;
          if (sub_20A0E0B6C())
            swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA220);
          v38 = (void (*)(uint64_t *, _QWORD))sub_20A0E07C4();
          sub_20A0E0BB4();
          v38(&v83, 0);
          if (!--v12)
          {
LABEL_24:
            sub_20A09EBE4(v86, v87, v88);
            swift_bridgeObjectRelease();
            v39 = v89;
            goto LABEL_26;
          }
        }
        else
        {
          v17 = v86;
          v18 = v87;
          v19 = v88;
          sub_20A09E790(v86, v87, v88, v10, (unint64_t *)&qword_2545C9460, 0x24BDD17C8, (void (*)())sub_20A0B8AB0);
          v21 = v20;
          v23 = v22;
          v25 = v24;
          sub_20A09EBE4(v17, v18, v19);
          v86 = v21;
          v87 = v23;
          v88 = v25 & 1;
          if (!--v12)
            goto LABEL_24;
        }
      }
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  swift_bridgeObjectRelease();
  v39 = MEMORY[0x24BEE4AF8];
LABEL_26:
  v40 = v77;
  v41 = v81;
  if (*(_QWORD *)(v39 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
    v42 = sub_20A0E0BFC();
  }
  else
  {
    v42 = MEMORY[0x24BEE4B00];
  }
  v83 = v42;
  v43 = (_QWORD *)swift_bridgeObjectRetain();
  v44 = 0;
  sub_20A09D6D0(v43, 1, &v83);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v40[OBJC_IVAR____TtC9SEService16ReservationState_counts] = v83;
  v45 = v41 & 0xC000000000000001;
  if ((v41 & 0xC000000000000001) != 0)
    v46 = sub_20A0E0B90();
  else
    v46 = *(_QWORD *)(v41 + 16);
  if (v46)
  {
    v74 = 0;
    v89 = MEMORY[0x24BEE4AF8];
    sub_20A097354(0, v46 & ~(v46 >> 63), 0);
    v86 = sub_20A09E6B4(v41);
    v87 = v47;
    v88 = v48 & 1;
    if (v46 < 0)
      goto LABEL_56;
    v49 = v41 & 0xFFFFFFFFFFFFFF8;
    if (v41 < 0)
      v49 = v41;
    v78 = v49;
    do
    {
      while (1)
      {
        v57 = v86;
        v56 = v87;
        v58 = v88;
        sub_20A09F04C(&v83, v86, v87, v88, v81, &qword_2545C9FF0, 0x24BDD1880, (uint64_t (*)())sub_20A0B8A64, (void (*)(_QWORD))type metadata accessor for Reservation);
        v60 = v59;
        v61 = v83;
        v62 = *(int *)(v80 + 48);
        sub_20A0E06BC();

        *(_QWORD *)&v7[v62] = v61;
        v63 = v89;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_20A097354(0, *(_QWORD *)(v63 + 16) + 1, 1);
          v63 = v89;
        }
        v65 = *(_QWORD *)(v63 + 16);
        v64 = *(_QWORD *)(v63 + 24);
        if (v65 >= v64 >> 1)
        {
          sub_20A097354(v64 > 1, v65 + 1, 1);
          v63 = v89;
        }
        *(_QWORD *)(v63 + 16) = v65 + 1;
        sub_20A09EBF0((uint64_t)v7, v63+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v65, (uint64_t *)&unk_2545CA000);
        if (v45)
          break;
        sub_20A09E790(v57, v56, v58, v81, &qword_2545C9FF0, 0x24BDD1880, (void (*)())sub_20A0B8A64);
        v51 = v50;
        v53 = v52;
        v55 = v54;
        sub_20A09EBE4(v57, v56, v58);
        v86 = v51;
        v87 = v53;
        v88 = v55 & 1;
        if (!--v46)
          goto LABEL_47;
      }
      if ((v58 & 1) == 0)
        goto LABEL_59;
      if (sub_20A0E0B6C())
        swift_isUniquelyReferenced_nonNull_native();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA018);
      v66 = (void (*)(uint64_t *, _QWORD))sub_20A0E07C4();
      sub_20A0E0BB4();
      v66(&v83, 0);
      --v46;
    }
    while (v46);
LABEL_47:
    sub_20A09EBE4(v86, v87, v88);
    swift_bridgeObjectRelease();
    v67 = v89;
    v40 = v77;
    v44 = v74;
  }
  else
  {
    swift_bridgeObjectRelease();
    v67 = MEMORY[0x24BEE4AF8];
  }
  v69 = v75;
  v68 = v76;
  if (*(_QWORD *)(v67 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA020);
    v70 = sub_20A0E0BFC();
  }
  else
  {
    v70 = MEMORY[0x24BEE4B00];
  }
  v83 = v70;
  v71 = swift_bridgeObjectRetain();
  sub_20A09E19C(v71, 1, &v83);
  if (!v44)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)&v40[OBJC_IVAR____TtC9SEService16ReservationState_reservations] = v83;

    v82.receiver = v40;
    v82.super_class = v69;
    v13 = objc_msgSendSuper2(&v82, sel_init);

    return (uint64_t)v13;
  }
LABEL_60:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static ReservationState.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545C9FA0;
}

uint64_t static ReservationState.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545C9FA0 = a1;
  return result;
}

uint64_t (*static ReservationState.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id ReservationState.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ReservationState.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_20A09D0F0()
{
  _BYTE *v0;

  if (*v0)
    return 0x7461767265736572;
  else
    return 0x73746E756F63;
}

uint64_t sub_20A09D130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A09F270(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A09D154()
{
  sub_20A09EC34();
  return sub_20A0E0DB8();
}

uint64_t sub_20A09D17C()
{
  sub_20A09EC34();
  return sub_20A0E0DC4();
}

id ReservationState.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ReservationState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t *v10;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA028);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A09EC34();
  sub_20A0E0DAC();
  v9 = (uint64_t *)(v3 + OBJC_IVAR____TtC9SEService16ReservationState_counts);
  swift_beginAccess();
  v14 = *v9;
  LOBYTE(v13) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA180);
  sub_20A09ED1C((unint64_t *)&qword_2545CA040, (uint64_t (*)(void))sub_20A07FC10, MEMORY[0x24BEE1770], MEMORY[0x24BEE04C0]);
  sub_20A0E0CB0();
  if (!v2)
  {
    v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC9SEService16ReservationState_reservations);
    swift_beginAccess();
    v13 = *v10;
    v12[7] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA050);
    sub_20A09EC78();
    sub_20A0E0CB0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t ReservationState.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ReservationState.init(from:)(a1);
}

unint64_t ReservationState.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  objc_class *ObjectType;
  objc_super v15;
  char v16;
  uint64_t v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA070);
  v4 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v7 = sub_20A09EC34();
  v8 = v1;
  sub_20A0E0DA0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA180);
    v16 = 0;
    sub_20A09ED1C((unint64_t *)&unk_2545CA078, (uint64_t (*)(void))sub_20A07FCD8, MEMORY[0x24BEE1798], MEMORY[0x24BEE04E0]);
    v10 = v13;
    sub_20A0E0C5C();
    *(_QWORD *)&v8[OBJC_IVAR____TtC9SEService16ReservationState_counts] = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA050);
    v16 = 1;
    sub_20A09ED90();
    sub_20A0E0C5C();
    *(_QWORD *)&v8[OBJC_IVAR____TtC9SEService16ReservationState_reservations] = v17;

    v15.receiver = v8;
    v15.super_class = ObjectType;
    v7 = (unint64_t)objc_msgSendSuper2(&v15, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_20A09D664@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  unint64_t result;

  v6 = objc_allocWithZone(v2);
  result = ReservationState.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_20A09D6B0(_QWORD *a1)
{
  return ReservationState.encode(to:)(a1);
}

void sub_20A09D6D0(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  LOBYTE(v4) = a2;
  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_3;
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[4];
  sub_20A074C44(v9, v8);
  if (v8 == 26)
    goto LABEL_3;
  v10 = (_QWORD *)*a3;
  v11 = sub_20A0B8934(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_20A0C6B90(v16, v4 & 1);
    v11 = sub_20A0B8934(v9, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_9;
LABEL_7:
    v11 = sub_20A0E0D28();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_9:
    if ((v17 & 1) != 0)
      goto LABEL_10;
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v23 = (uint64_t *)(v22[6] + 16 * v11);
    *v23 = v9;
    v23[1] = v8;
    *(_QWORD *)(v22[7] + 8 * v11) = v7;
    v24 = v22[2];
    v15 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (!v15)
    {
      v22[2] = v25;
      if (v6 == 1)
      {
LABEL_3:
        swift_bridgeObjectRelease_n();
        return;
      }
      v4 = a1 + 9;
      v7 = 1;
      while (v7 < a1[2])
      {
        v8 = *(v4 - 1);
        v26 = *v4;
        v9 = *(v4 - 2);
        sub_20A074C44(v9, v8);
        if (v8 == 26)
          goto LABEL_3;
        v27 = (_QWORD *)*a3;
        v28 = sub_20A0B8934(v9, v8);
        v30 = v27[2];
        v31 = (v29 & 1) == 0;
        v15 = __OFADD__(v30, v31);
        v32 = v30 + v31;
        if (v15)
          goto LABEL_25;
        v17 = v29;
        if (v27[3] < v32)
        {
          sub_20A0C6B90(v32, 1);
          v28 = sub_20A0B8934(v9, v8);
          if ((v17 & 1) != (v33 & 1))
            goto LABEL_7;
        }
        if ((v17 & 1) != 0)
          goto LABEL_10;
        v34 = (_QWORD *)*a3;
        *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
        v35 = (uint64_t *)(v34[6] + 16 * v28);
        *v35 = v9;
        v35[1] = v8;
        *(_QWORD *)(v34[7] + 8 * v28) = v26;
        v36 = v34[2];
        v15 = __OFADD__(v36, 1);
        v37 = v36 + 1;
        if (v15)
          goto LABEL_26;
        ++v7;
        v34[2] = v37;
        v4 += 3;
        if (v6 == v7)
          goto LABEL_3;
      }
      goto LABEL_27;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v21 = v11;
  sub_20A0C5588();
  v11 = v21;
  if ((v17 & 1) == 0)
    goto LABEL_13;
LABEL_10:
  v19 = (void *)swift_allocError();
  swift_willThrow();
  v20 = v19;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_20A075F1C(v9, v8);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_28:
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

void sub_20A09DA74(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = sub_20A0B8A64((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_20A0C58E0();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v30 = (_QWORD *)*a3;
      v10 = *(v28 - 1);
      v11 = v29;
      v31 = sub_20A0B8A64((uint64_t)v10);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_20A0C736C(v35, 1);
        v31 = sub_20A0B8A64((uint64_t)v10);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = 8 * v31;
      *(_QWORD *)(v38[6] + v39) = v10;
      *(_QWORD *)(v38[7] + v39) = v11;
      v40 = v38[2];
      v25 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v41;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_20A0C736C(v16, a2 & 1);
  v18 = sub_20A0B8A64((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_20A0801C0(0, &qword_2545C9FF0);
  sub_20A0E0D28();
  __break(1u);
LABEL_26:
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0801C0(0, &qword_2545C9FF0);
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

void sub_20A09DE08(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = sub_20A0B8AB0((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_20A0C58EC();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v30 = (_QWORD *)*a3;
      v10 = *(v28 - 1);
      v11 = v29;
      v31 = sub_20A0B8AB0((uint64_t)v10);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_20A0C7378(v35, 1);
        v31 = sub_20A0B8AB0((uint64_t)v10);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = 8 * v31;
      *(_QWORD *)(v38[6] + v39) = v10;
      *(_QWORD *)(v38[7] + v39) = v11;
      v40 = v38[2];
      v25 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v41;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_20A0C7378(v16, a2 & 1);
  v18 = sub_20A0B8AB0((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  sub_20A0E0D28();
  __break(1u);
LABEL_26:
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

void sub_20A09E19C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void *v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(unint64_t, char *, uint64_t);
  uint64_t v64;
  unint64_t v65;
  id v66;

  v7 = sub_20A0E06D4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA000);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v59) = a2;
  v56 = v3;
  v17 = *(int *)(v12 + 48);
  v55 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v55;
  v61 = *(_QWORD *)(v13 + 72);
  v58 = a1;
  swift_bridgeObjectRetain();
  sub_20A09F37C(v18, (uint64_t)v15);
  v57 = v8;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v62 = v7;
  v63 = v19;
  v19((unint64_t)v10, v15, v7);
  v60 = v17;
  v20 = *(void **)&v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = sub_20A0B8AFC((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v59 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_20A0C58F8();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v35 = v34[6];
    v59 = *(_QWORD *)(v57 + 72);
    v36 = v62;
    v63(v35 + v59 * v23, v10, v62);
    *(_QWORD *)(v34[7] + 8 * v23) = v20;
    v37 = v34[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v34[2] = v39;
    v40 = v16 - 1;
    if (v16 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v41 = v58 + v61 + v55;
    while (1)
    {
      sub_20A09F37C(v41, (uint64_t)v15);
      v63((unint64_t)v10, v15, v36);
      v20 = *(void **)&v15[v60];
      v42 = (_QWORD *)*a3;
      v44 = sub_20A0B8AFC((uint64_t)v10);
      v45 = v42[2];
      v46 = (v43 & 1) == 0;
      v47 = v45 + v46;
      if (__OFADD__(v45, v46))
        break;
      v48 = v43;
      if (v42[3] < v47)
      {
        sub_20A0C7384(v47, 1);
        v49 = sub_20A0B8AFC((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1))
          goto LABEL_26;
        v44 = v49;
      }
      if ((v48 & 1) != 0)
        goto LABEL_10;
      v51 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      v36 = v62;
      v63(v51[6] + v59 * v44, v10, v62);
      *(_QWORD *)(v51[7] + 8 * v44) = v20;
      v52 = v51[2];
      v38 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v38)
        goto LABEL_25;
      v51[2] = v53;
      v41 += v61;
      if (!--v40)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_20A0C7384(v26, v59 & 1);
  v28 = sub_20A0B8AFC((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = (void *)swift_allocError();
    swift_willThrow();
    v66 = v30;
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    v32 = swift_dynamicCast();
    v33 = v62;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v33);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  sub_20A0E0D28();
  __break(1u);
LABEL_27:
  v64 = 0;
  v65 = 0xE000000000000000;
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

uint64_t sub_20A09E62C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_20A09E6B4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if ((a1 & 0xC000000000000001) != 0)
    return sub_20A0E0B54();
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v1 = 1 << v5;
  if (v6 < 7)
    return v1;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v3 = 64;
  while (v8)
  {
    v10 = *v9++;
    v2 = v10;
    --v8;
    v3 += 64;
    if (v10)
      return __clz(__rbit64(v2)) + v3;
  }
  return v1;
}

void sub_20A09E774(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_20A09E790(a1, a2, a3, a4, (unint64_t *)&qword_2545C9460, 0x24BDD17C8, (void (*)())sub_20A0B8AB0);
}

void sub_20A09E790(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, uint64_t a6, void (*a7)())
{
  char v11;
  char v12;
  void *v13;

  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
      {
        sub_20A0E0A7C();
        return;
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (sub_20A0E0B78() != *(_DWORD *)(a4 + 36))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_20A0E0B84();
  sub_20A09F370(a1, a2, 1);
  sub_20A0801C0(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  a7();
  v12 = v11;

  if ((v12 & 1) != 0)
  {
    sub_20A0E0B60();
    sub_20A0E0B9C();
    sub_20A09EBE4(a1, a2, 1);
    swift_unknownObjectRelease();
    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_20A09E938(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_20A0801C0(255, a2);
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE5BD8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20A09E978(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545C9FD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_20A09E9B8(_QWORD *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  unint64_t v6;
  char v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;

  v6 = a2;
  if ((a5 & 0xC000000000000001) != 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_20A0E0BA8();
      sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      sub_20A0801C0(0, (unint64_t *)&unk_2545CA1F0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v13;
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_18;
  }
  if ((a4 & 1) != 0)
  {
LABEL_10:
    if (sub_20A0E0B78() == *(_DWORD *)(a5 + 36))
    {
      sub_20A0E0B84();
      sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      v6 = sub_20A0B8AB0((uint64_t)v13);
      v9 = v8;

      if ((v9 & 1) != 0)
        goto LABEL_12;
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  v10 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * v6);
  v11 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v6);
  *a1 = v11;
  v10;
  v12 = v11;
}

uint64_t sub_20A09EBE4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_20A09EBF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_20A09EC34()
{
  unint64_t result;

  result = qword_2545CA030;
  if (!qword_2545CA030)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA53C, &type metadata for ReservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA030);
  }
  return result;
}

unint64_t sub_20A09EC78()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2545CA058;
  if (!qword_2545CA058)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA050);
    v2[0] = sub_20A09BB6C((unint64_t *)&unk_2545C9390, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v2[1] = sub_20A09BB6C(&qword_2545CA068, 255, (uint64_t (*)(uint64_t))type metadata accessor for Reservation, (uint64_t)&protocol conformance descriptor for Reservation);
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE04C0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2545CA058);
  }
  return result;
}

uint64_t sub_20A09ED1C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA180);
    v10[0] = a2();
    v10[1] = a3;
    result = MEMORY[0x20BD202E4](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20A09ED90()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2545CA088;
  if (!qword_2545CA088)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA050);
    v2[0] = sub_20A09BB6C((unint64_t *)&unk_2545C93B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v2[1] = sub_20A09BB6C((unint64_t *)&unk_2545CA098, 255, (uint64_t (*)(uint64_t))type metadata accessor for Reservation, (uint64_t)&protocol conformance descriptor for Reservation);
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2545CA088);
  }
  return result;
}

uint64_t method lookup function for ReservationState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReservationState.__allocating_init(counts:reservations:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ReservationState.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ReservationState.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t storeEnumTagSinglePayload for ReservationState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20A09EEB4 + 4 * byte_20A0EA3F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20A09EEE8 + 4 * byte_20A0EA3F0[v4]))();
}

uint64_t sub_20A09EEE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A09EEF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A09EEF8);
  return result;
}

uint64_t sub_20A09EF04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A09EF0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20A09EF10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A09EF18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReservationState.CodingKeys()
{
  return &type metadata for ReservationState.CodingKeys;
}

unint64_t sub_20A09EF38()
{
  unint64_t result;

  result = qword_2545CA0A8;
  if (!qword_2545CA0A8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA514, &type metadata for ReservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA0A8);
  }
  return result;
}

unint64_t sub_20A09EF80()
{
  unint64_t result;

  result = qword_2545CA0B0;
  if (!qword_2545CA0B0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA484, &type metadata for ReservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA0B0);
  }
  return result;
}

unint64_t sub_20A09EFC8()
{
  unint64_t result;

  result = qword_2545CA0B8;
  if (!qword_2545CA0B8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA4AC, &type metadata for ReservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA0B8);
  }
  return result;
}

void sub_20A09F00C(_QWORD *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  sub_20A09F04C(a1, a2, a3, a4, a5, (unint64_t *)&qword_2545C9460, 0x24BDD17C8, (uint64_t (*)())sub_20A0B8AB0, (void (*)(_QWORD))type metadata accessor for SEPackageDetails);
}

void sub_20A09F04C(_QWORD *a1, uint64_t a2, int a3, char a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t (*a8)(), void (*a9)(_QWORD))
{
  uint64_t v11;
  char v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;

  v11 = a2;
  if ((a5 & 0xC000000000000001) != 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_20A0E0BA8();
      sub_20A0801C0(0, a6);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      a9(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v19;
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_18;
  }
  if ((a4 & 1) != 0)
  {
LABEL_10:
    if (sub_20A0E0B78() == *(_DWORD *)(a5 + 36))
    {
      sub_20A0E0B84();
      sub_20A0801C0(0, a6);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      v11 = a8();
      v15 = v14;

      if ((v15 & 1) != 0)
        goto LABEL_12;
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  v16 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * v11);
  v17 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v11);
  *a1 = v17;
  v16;
  v18 = v17;
}

uint64_t sub_20A09F270(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73746E756F63 && a2 == 0xE600000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461767265736572 && a2 == 0xEC000000736E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20A09F370(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_20A09F37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static SEApplet.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545CA0D0;
}

uint64_t static SEApplet.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545CA0D0 = a1;
  return result;
}

uint64_t (*static SEApplet.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

Swift::Void __swiftcall SEApplet.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = (void *)sub_20A0E0800();
  v4 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = (void *)sub_20A0E0800();
  v6 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService8SEApplet_lifecycleState);
  v8 = (id)sub_20A0E0800();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v7, v8);

}

uint64_t SEApplet.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SEApplet.init(coder:)(a1);
}

uint64_t SEApplet.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  id v21;
  objc_super v22;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_20A094638();
  v5 = v2;
  v6 = sub_20A0E09D4();
  if (!v6)
    goto LABEL_6;
  v7 = (void *)v6;
  v8 = sub_20A0E09D4();
  if (!v8)
  {

LABEL_6:
    swift_deallocPartialClassInstance();
    return 0;
  }
  v9 = (void *)v8;
  v10 = sub_20A0E080C();
  v11 = (uint64_t *)&v5[OBJC_IVAR____TtC9SEService8SEApplet_identifier];
  *v11 = v10;
  v11[1] = v12;
  v13 = sub_20A0E080C();
  v14 = (uint64_t *)&v5[OBJC_IVAR____TtC9SEService8SEApplet_moduleIdentifier];
  *v14 = v13;
  v14[1] = v15;
  v16 = (void *)sub_20A0E0800();
  v17 = objc_msgSend(a1, sel_decodeIntegerForKey_, v16);

  result = sub_20A080404((uint64_t)v17);
  if ((v19 & 1) == 0)
  {
    v20 = result;

    *(_QWORD *)&v5[OBJC_IVAR____TtC9SEService8SEApplet_lifecycleState] = v20;
    v22.receiver = v5;
    v22.super_class = ObjectType;
    v21 = objc_msgSendSuper2(&v22, sel_init);

    return (uint64_t)v21;
  }
  __break(1u);
  return result;
}

uint64_t SEApplet.description.getter()
{
  sub_20A0E0AC4();
  sub_20A0E0854();
  swift_bridgeObjectRetain();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_bridgeObjectRetain();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  sub_20A0E0B48();
  sub_20A0E0854();
  return 0;
}

id SEApplet.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SEApplet.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_20A09FAAC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x6C6379636566696CLL;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_20A09FB1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0A035C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A09FB40()
{
  sub_20A0A00A0();
  return sub_20A0E0DB8();
}

uint64_t sub_20A09FB68()
{
  sub_20A0A00A0();
  return sub_20A0E0DC4();
}

id SEApplet.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t SEApplet.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;
  char v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA0F8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0A00A0();
  sub_20A0E0DAC();
  v13 = 0;
  sub_20A0E0C8C();
  if (!v2)
  {
    v12 = 1;
    sub_20A0E0C8C();
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService8SEApplet_lifecycleState);
    v10[15] = 2;
    sub_20A0A00E4();
    sub_20A0E0CB0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id SEApplet.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SEApplet.init(from:)(a1);
}

id SEApplet.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *ObjectType;
  objc_super v21;
  char v22;
  uint64_t v23;

  ObjectType = (objc_class *)swift_getObjectType();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA110);
  v4 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0A00A0();
  v7 = v1;
  sub_20A0E0DA0();
  if (v2)
  {
    v17 = ObjectType;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

    swift_deallocPartialClassInstance();
  }
  else
  {
    v8 = v4;
    LOBYTE(v23) = 0;
    v9 = v19;
    v10 = sub_20A0E0C38();
    v12 = (uint64_t *)&v7[OBJC_IVAR____TtC9SEService8SEApplet_identifier];
    *v12 = v10;
    v12[1] = v13;
    LOBYTE(v23) = 1;
    v14 = sub_20A0E0C38();
    v15 = (uint64_t *)&v7[OBJC_IVAR____TtC9SEService8SEApplet_moduleIdentifier];
    *v15 = v14;
    v15[1] = v16;
    v22 = 2;
    sub_20A0A0128();
    sub_20A0E0C5C();
    *(_QWORD *)&v7[OBJC_IVAR____TtC9SEService8SEApplet_lifecycleState] = v23;

    v21.receiver = v7;
    v21.super_class = ObjectType;
    v17 = objc_msgSendSuper2(&v21, sel_init);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v17;
}

id sub_20A0A0034@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  id result;

  v6 = objc_allocWithZone(v2);
  result = SEApplet.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_20A0A0080(_QWORD *a1)
{
  return SEApplet.encode(to:)(a1);
}

unint64_t sub_20A0A00A0()
{
  unint64_t result;

  result = qword_2545CA100;
  if (!qword_2545CA100)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA6CC, &type metadata for SEApplet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA100);
  }
  return result;
}

unint64_t sub_20A0A00E4()
{
  unint64_t result;

  result = qword_2545CA108;
  if (!qword_2545CA108)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletState, &type metadata for AppletState);
    atomic_store(result, (unint64_t *)&qword_2545CA108);
  }
  return result;
}

unint64_t sub_20A0A0128()
{
  unint64_t result;

  result = qword_2545CA118;
  if (!qword_2545CA118)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletState, &type metadata for AppletState);
    atomic_store(result, (unint64_t *)&qword_2545CA118);
  }
  return result;
}

uint64_t type metadata accessor for SEApplet()
{
  return objc_opt_self();
}

uint64_t method lookup function for SEApplet()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SEApplet.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SEApplet.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for SEApplet.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20A0A0204 + 4 * byte_20A0EA595[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20A0A0238 + 4 * byte_20A0EA590[v4]))();
}

uint64_t sub_20A0A0238(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0A0240(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0A0248);
  return result;
}

uint64_t sub_20A0A0254(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0A025CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20A0A0260(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0A0268(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEApplet.CodingKeys()
{
  return &type metadata for SEApplet.CodingKeys;
}

unint64_t sub_20A0A0288()
{
  unint64_t result;

  result = qword_2545CA128;
  if (!qword_2545CA128)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA6A4, &type metadata for SEApplet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA128);
  }
  return result;
}

unint64_t sub_20A0A02D0()
{
  unint64_t result;

  result = qword_2545CA130;
  if (!qword_2545CA130)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA614, &type metadata for SEApplet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA130);
  }
  return result;
}

unint64_t sub_20A0A0318()
{
  unint64_t result;

  result = qword_2545CA138;
  if (!qword_2545CA138)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EA63C, &type metadata for SEApplet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA138);
  }
  return result;
}

uint64_t sub_20A0A035C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000020A0F1A00 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6379636566696CLL && a2 == 0xEE00657461745365)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20A0A04D8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v29 = MEMORY[0x24BEE4AF8];
  sub_20A097328(0, v1, 0);
  v2 = v29;
  result = sub_20A09E624(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v23 = v1;
  v24 = v5;
  v25 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v26 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = *v12;
    v28 = v12[1];
    sub_20A074C44(*v12, v28);
    CredentialType.rawValue.getter();
    v27 = sub_20A0E0800();
    swift_bridgeObjectRelease();
    v14 = sub_20A0E0974();
    result = sub_20A075F1C(v13, v28);
    v16 = *(_QWORD *)(v29 + 16);
    v15 = *(_QWORD *)(v29 + 24);
    if (v16 >= v15 >> 1)
      result = sub_20A097328(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v29 + 16) = v16 + 1;
    v17 = v29 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v27;
    *(_QWORD *)(v17 + 40) = v14;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v18 = *(_QWORD *)(v25 + 8 * v11);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v24;
    if (*(_DWORD *)(a1 + 36) != v24)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v23;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v23;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v26 + 1;
    v6 = v9;
    if (v26 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_20A0A0724@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_20A0A0778@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_20A0A07CC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap);
}

uint64_t sub_20A0A07D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_20A0A082C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices);
}

unint64_t sub_20A0A0838(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA2D0);
  v2 = (_QWORD *)sub_20A0E0BFC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_20A0B8998(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20A0A0948(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
  v2 = (_QWORD *)sub_20A0E0BFC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    sub_20A074C44(v5, v6);
    result = sub_20A0B8934(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20A0A0A5C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA270);
  v2 = (_QWORD *)sub_20A0E0BFC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_20A0B8998(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20A0A0B74(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA260);
  v2 = sub_20A0E0BFC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_20A0AB1F8(v6, (uint64_t)v15, &qword_2545CA268);
    result = sub_20A0B8A34((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_20A0AB1E8(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SESnapshot.CanFitResult.FailureReason.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SESnapshot.CanFitResult.FailureReason.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*SESnapshot.CanFitResult.FailureReason.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t SESnapshot.CanFitResult.FailureReason.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t SESnapshot.CanFitResult.FailureReason.debugDescription.getter()
{
  char *v0;
  char v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v1 = *v0;
  if ((*v0 & 1) != 0)
  {
    v2 = sub_20A0A6AB4(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_20A0A6AB4((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = &v2[2 * v4];
    v5[4] = 0x7061654870;
    v5[5] = 0xE500000000000000;
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 2) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_20A0A6AB4(0, v2[2] + 1, 1, v2);
    v8 = v2[2];
    v7 = v2[3];
    if (v8 >= v7 >> 1)
      v2 = sub_20A0A6AB4((_QWORD *)(v7 > 1), v8 + 1, 1, v2);
    v2[2] = v8 + 1;
    v9 = &v2[2 * v8];
    v9[4] = 7499619;
    v9[5] = 0xE300000000000000;
    if ((v1 & 4) == 0)
    {
LABEL_8:
      if ((v1 & 8) == 0)
        goto LABEL_9;
LABEL_21:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v2 = sub_20A0A6AB4(0, v2[2] + 1, 1, v2);
      v14 = v2[2];
      v13 = v2[3];
      if (v14 >= v13 >> 1)
        v2 = sub_20A0A6AB4((_QWORD *)(v13 > 1), v14 + 1, 1, v2);
      v2[2] = v14 + 1;
      v15 = &v2[2 * v14];
      v15[4] = 0x73656369646E69;
      v15[5] = 0xE700000000000000;
      goto LABEL_26;
    }
  }
  else if ((v1 & 4) == 0)
  {
    goto LABEL_8;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_20A0A6AB4(0, v2[2] + 1, 1, v2);
  v11 = v2[2];
  v10 = v2[3];
  if (v11 >= v10 >> 1)
    v2 = sub_20A0A6AB4((_QWORD *)(v10 > 1), v11 + 1, 1, v2);
  v2[2] = v11 + 1;
  v12 = &v2[2 * v11];
  v12[4] = 6582115;
  v12[5] = 0xE300000000000000;
  if ((v1 & 8) != 0)
    goto LABEL_21;
LABEL_9:
  if (v2[2])
  {
LABEL_26:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
    sub_20A0A6A68();
    v6 = sub_20A0E07E8();
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  return 0x73736563637573;
}

_BYTE *sub_20A0A0F6C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_20A0A0F7C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_20A0A0F84@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_20A0A0F98@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_20A0A0FAC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_20A0A0FC0(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_20A0A0FF0@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_20A0A101C@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_20A0A1040(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_20A0A1054(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_20A0A1068(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_20A0A107C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_20A0A1090(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_20A0A10A4(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_20A0A10B8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_20A0A10CC()
{
  _BYTE *v0;

  return *v0 == 0;
}

uint64_t sub_20A0A10DC()
{
  return sub_20A0E0A64();
}

_BYTE *sub_20A0A10F4(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_20A0A1108@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_20A0A1118(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL static SESnapshot.CanFitResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[1] == 1)
    return (a2[1] & 1) != 0;
  if ((a2[1] & 1) != 0)
    return 0;
  return *a1 == *a2;
}

BOOL sub_20A0A1164(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[1] == 1)
    return (a2[1] & 1) != 0;
  if ((a2[1] & 1) != 0)
    return 0;
  return *a1 == *a2;
}

uint64_t static SESnapshot.getCurrentSnapshot(with:seid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  return swift_task_switch();
}

uint64_t sub_20A0A11BC()
{
  uint64_t v0;
  _QWORD *v1;
  char *v3;

  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  v3 = (char *)&dword_2545CA160 + dword_2545CA160;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_20A0A124C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v3)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), v0 + 16, v0 + 56);
}

uint64_t sub_20A0A124C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2 + 16;
  v5 = *v2;
  *(_QWORD *)(v5 + 112) = v1;
  swift_task_dealloc();
  sub_20A0801F8(v4, &qword_2545CA168);
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_20A0A12E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static SESnapshot.getCurrentSnapshot(with:seid:stateInfoProvider:dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2545CA160 + dword_2545CA160);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_20A0A1384;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t sub_20A0A1384(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_20A0A13D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_20A0A13F8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[3];
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 8) + *(_QWORD *)(v3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_20A0A147C;
  return v6(v0[4], v0[5], v0[6], v2, v3);
}

uint64_t sub_20A0A147C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t sub_20A0A14F8()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0A1510(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_20A0A1528()
{
  uint64_t v0;

  if (qword_2545C8E50 != -1)
    swift_once();
  *(_QWORD *)(v0 + 32) = qword_2545D79E8;
  return swift_task_switch();
}

uint64_t sub_20A0A158C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[4];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v2 = (_QWORD *)swift_task_alloc();
  v0[5] = v2;
  v2[2] = v1;
  v2[3] = &unk_2545CA2C0;
  v2[4] = 0;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  type metadata accessor for ReservationState();
  *v3 = v0;
  v3[1] = sub_20A0A1674;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0A1674()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(_QWORD **)(v2 + 24);
  swift_task_dealloc();
  *v4 = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_20A0A16F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_20A0A1710()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_20A0A17A4;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_20A0A1804;
  v3[3] = &block_descriptor_46;
  v3[4] = v2;
  objc_msgSend(v1, sel_getStateWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_20A0A17A4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0A1808(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_20A0A1820()
{
  uint64_t v0;

  if (qword_2545C8E50 != -1)
    swift_once();
  *(_QWORD *)(v0 + 32) = qword_2545D79E8;
  return swift_task_switch();
}

uint64_t sub_20A0A1884()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[4];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v2 = (_QWORD *)swift_task_alloc();
  v0[5] = v2;
  v2[2] = v1;
  v2[3] = &unk_2545CA2B0;
  v2[4] = 0;
  v3 = (_QWORD *)swift_task_alloc();
  v0[6] = v3;
  type metadata accessor for DeviceCapability();
  *v3 = v0;
  v3[1] = sub_20A0A196C;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0A196C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(_QWORD **)(v2 + 24);
  swift_task_dealloc();
  *v4 = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_20A0A19F0()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0A1A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_20A0A1A3C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_20A0A1AD0;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_20A0A1804;
  v3[3] = &block_descriptor_1;
  v3[4] = v2;
  objc_msgSend(v1, sel_getDeviceCapabilityWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_20A0A1AD0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0A1B30()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0A1B44()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0A1B80(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SESnapshot.debugDescription.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;

  sub_20A0E0608();
  swift_allocObject();
  sub_20A0E05FC();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA180);
  sub_20A0A9DA0();
  v0 = sub_20A0E05F0();
  v9 = v1;
  v10 = v0;
  swift_bridgeObjectRelease();
  swift_allocObject();
  sub_20A0E05FC();
  type metadata accessor for SEState();
  sub_20A09A6C4(&qword_2545CA190, (uint64_t (*)(uint64_t))type metadata accessor for SEState, (uint64_t)&protocol conformance descriptor for SEState);
  v2 = sub_20A0E05F0();
  v4 = v3;
  sub_20A0E0650();
  sub_20A07F898(v2, v4);
  swift_release();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_allocObject();
  sub_20A0E05FC();
  type metadata accessor for ReservationState();
  sub_20A09A6C4((unint64_t *)&unk_2545CA1A0, (uint64_t (*)(uint64_t))type metadata accessor for ReservationState, (uint64_t)&protocol conformance descriptor for ReservationState);
  v5 = sub_20A0E05F0();
  v7 = v6;
  sub_20A0E0650();
  sub_20A07F898(v5, v7);
  swift_release();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  sub_20A0E0650();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A07F898(v10, v9);
  swift_release();
  return 0;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SESnapshot.canFit(credentials:)(Swift::OpaquePointer credentials)
{
  uint64_t v1;
  char v2;
  _BYTE v4[2];

  SESnapshot.canFitWithReason(credentials:)((uint64_t)credentials._rawValue, v4);
  if (!v1)
    v2 = v4[1];
  return v2 & 1;
}

uint64_t SESnapshot.canFitWithReason(credentials:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v8;
  uint8_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  int64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *KeyPath;
  NSObject *v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  unint64_t v47;
  NSObject *v48;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  BOOL v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint8_t *v64;
  uint8_t *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint8_t *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint8_t *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint8_t *v80;
  _QWORD *v81;
  uint64_t v82;
  NSObject *v83;
  NSObject *v84;
  os_log_type_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _DWORD *v92;
  _DWORD *v93;
  char v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t CanFit;
  unint64_t v111;
  uint64_t result;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  int64_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  os_log_type_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD *v139;
  char v140;

  v5 = v3;
  v6 = v2;
  v126 = *(_QWORD *)&v2[OBJC_IVAR____TtC9SEService10SESnapshot_seState];
  v123 = OBJC_IVAR____TtC9SEService7SEState_freeMemory;
  v8 = *(_QWORD *)(v126 + OBJC_IVAR____TtC9SEService7SEState_freeMemory);
  v9 = (uint8_t **)(v8 + OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap);
  swift_beginAccess();
  v121 = *v9;
  v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC9SEService11MemoryUsage_cor);
  swift_beginAccess();
  v124 = *v10;
  v11 = (uint64_t *)(v8 + OBJC_IVAR____TtC9SEService11MemoryUsage_cod);
  swift_beginAccess();
  v122 = *v11;
  v12 = *(_QWORD *)(a1 + 16);
  v125 = a1;
  v128 = v12;
  if (v12)
  {
    v129 = v6;
    v139 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_20A097290(0, v12, 0);
    v13 = v139;
    v14 = (unint64_t *)(a1 + 40);
    v4 = 1;
    do
    {
      v15 = *(v14 - 1);
      v16 = *v14;
      sub_20A074C44(v15, *v14);
      v139 = v13;
      v18 = v13[2];
      v17 = v13[3];
      if (v18 >= v17 >> 1)
      {
        sub_20A097290(v17 > 1, v18 + 1, 1);
        v13 = v139;
      }
      v14 += 2;
      v13[2] = v18 + 1;
      v19 = &v13[3 * v18];
      v19[4] = v15;
      v19[5] = v16;
      v19[6] = 1;
      --v12;
    }
    while (v12);
    v6 = v129;
    v5 = v3;
    goto LABEL_8;
  }
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
  {
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
    v20 = sub_20A0E0BFC();
    goto LABEL_9;
  }
  v20 = MEMORY[0x24BEE4B00];
LABEL_9:
  v139 = (_QWORD *)v20;
  sub_20A0AA438(v13, 1, &v139);
  if (v5)
  {
LABEL_115:
    swift_bridgeObjectRelease();
    swift_release();
    __break(1u);
LABEL_116:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v21 = (uint64_t)v139;
  v22 = (uint64_t *)(*(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_reservationState]
                  + OBJC_IVAR____TtC9SEService16ReservationState_counts);
  swift_beginAccess();
  v23 = *v22;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v24 = swift_bridgeObjectRetain();
  v25 = sub_20A081BD0(v24, v23);
  v26 = sub_20A081BD0(v21, v25);
  v27 = (uint64_t)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator];
  swift_beginAccess();
  v131 = v27;
  sub_20A0AB1F8(v27, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
    goto LABEL_87;
  v28 = MEMORY[0x24BEE4AF8];
  v29 = sub_20A0A0948(MEMORY[0x24BEE4AF8]);
  KeyPath = swift_getKeyPath();
  v4 = sub_20A0808AC(v29, KeyPath, 0, 1);
  swift_bridgeObjectRelease();
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  v13 = (_QWORD *)v131;
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v31 = swift_getKeyPath();
  v116 = sub_20A0808AC(v26, v31, 0, 1);
  v129 = v6;
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  v32 = 26;
  v117 = v26;
  v118 = v4;
  v137 = v28;
  sub_20A09738C(0, 26, 0);
  v33 = (unint64_t *)&unk_24C2BA708;
  v34 = v137;
  do
  {
    v35 = *(v33 - 1);
    v36 = *v33;
    sub_20A074C44(v35, *v33);
    v137 = v34;
    v38 = *(_QWORD *)(v34 + 16);
    v37 = *(_QWORD *)(v34 + 24);
    if (v38 >= v37 >> 1)
    {
      sub_20A09738C(v37 > 1, v38 + 1, 1);
      v34 = v137;
    }
    v33 += 2;
    *(_QWORD *)(v34 + 16) = v38 + 1;
    v39 = (_QWORD *)(v34 + 24 * v38);
    v39[4] = v35;
    v39[5] = v36;
    v39[6] = 0;
    --v32;
  }
  while (v32);
  v26 = v117;
  v13 = (_QWORD *)v131;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA1C8);
  v137 = sub_20A0E0BFC();
  v40 = (_QWORD *)swift_bridgeObjectRetain();
  sub_20A0A73AC(v40, 1, &v137);
  swift_bridgeObjectRelease();
  v41 = v137;
  swift_retain();
  v42 = swift_bridgeObjectRetain();
  v6 = (uint8_t *)sub_20A0AA238(v42, v41, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_20A0A9E58);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v43 = swift_bridgeObjectRetain();
  v119 = sub_20A0AA238(v43, v41, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_20A0AA03C);
  swift_bridgeObjectRelease();
  swift_release_n();
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
    goto LABEL_90;
  v44 = sub_20A0A0948(MEMORY[0x24BEE4AF8]);
  v45 = swift_getKeyPath();
  v46 = sub_20A0808AC(v44, v45, 3uLL, 0);
  swift_bridgeObjectRelease();
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
  {
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  v47 = sub_20A0A0948(MEMORY[0x24BEE4AF8]);
  v48 = swift_getKeyPath();
  v118 = sub_20A0808AC(v47, v48, 1uLL, 0);
  swift_bridgeObjectRelease();
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
  {
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  v49 = sub_20A0A0948(MEMORY[0x24BEE4AF8]);
  v50 = swift_getKeyPath();
  v51 = sub_20A0808AC(v49, v50, 1uLL, 0);
  swift_bridgeObjectRelease();
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  v52 = v46 + v118;
  if (__OFADD__(v46, v118))
  {
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v117 = v51;
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  v53 = swift_getKeyPath();
  v54 = sub_20A0808AC((unint64_t)v6, v53, 3uLL, 0);
  v115 = v52;
  swift_release();
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
  {
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  v55 = swift_getKeyPath();
  v56 = sub_20A0808AC(v119, v55, 1uLL, 0);
  swift_release();
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  v57 = swift_getKeyPath();
  v13 = (_QWORD *)sub_20A0808AC(v26, v57, 1uLL, 0);
  swift_release();
  sub_20A0A9E24((uint64_t)&v137);
  v58 = __OFADD__(v54, v56);
  v6 = (uint8_t *)(v54 + v56);
  if (v58)
  {
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (*(unsigned __int8 *)(v126 + OBJC_IVAR____TtC9SEService7SEState_seType) >= 3u)
    v59 = 11500;
  else
    v59 = 24526;
  sub_20A0AB1F8(v131, (uint64_t)&v137, &qword_2545CA1C0);
  if ((v138 & 1) != 0)
    goto LABEL_116;
  v60 = (void *)swift_getKeyPath();
  v61 = (uint64_t)sub_20A082BD8(v26, v60);
  swift_release();
  swift_bridgeObjectRelease();
  sub_20A0A9E24((uint64_t)&v137);
  v140 = 0;
  if ((unint64_t)(v61 / 32 - 0x40000000000000) >> 55 != 511)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v26 = (v61 / 32) << 9;
  v114 = v59;
  if ((uint64_t)(v61 & 0x800000000000001FLL) >= 1)
  {
    v58 = __OFADD__(v26, 512);
    v26 += 512;
    if (v58)
      goto LABEL_102;
  }
  v62 = v52;
  v63 = &v121[v4];
  if (__OFADD__(v121, v4))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v58 = __OFSUB__(v63, v116);
  v64 = &v63[-v116];
  if (v58)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  v118 = v4;
  v58 = __OFADD__(v64, -25600);
  v65 = v64 - 25600;
  if (v58)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v4 = (uint64_t)&v65[-v26];
  if (__OFSUB__(v65, v26))
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v131 = v61;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_43;
  if (qword_2545C8E60 != -1)
    goto LABEL_105;
  while (1)
  {
    v66 = sub_20A0E0740();
    __swift_project_value_buffer(v66, (uint64_t)qword_2545D79F0);
    v67 = sub_20A0E0728();
    v68 = sub_20A0E0980();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v69 = 134217984;
      if (__OFSUB__(0, v4))
        goto LABEL_111;
      v70 = v69;
      v137 = -v4;
      sub_20A0E0A10();
      _os_log_impl(&dword_20A048000, v67, v68, "Missing %ld bytes pHeap", v70, 0xCu);
      MEMORY[0x20BD20380](v70, -1, -1);
    }

    v61 = v131;
    v62 = v115;
    if ((v140 & 1) == 0)
      v140 |= 1u;
LABEL_43:
    if (__OFSUB__(v6, v62))
    {
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      swift_once();
      goto LABEL_73;
    }
    v121 = &v6[-v62];
    if (v124 < (uint64_t)&v6[-v62])
    {
      if (qword_2545C8E60 != -1)
LABEL_103:
        swift_once();
      v71 = sub_20A0E0740();
      __swift_project_value_buffer(v71, (uint64_t)qword_2545D79F0);
      v72 = sub_20A0E0728();
      v73 = sub_20A0E0980();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v74 = 134217984;
        if (__OFSUB__(v121, v124))
          goto LABEL_107;
        v75 = v74;
        v137 = (uint64_t)&v121[-v124];
        sub_20A0E0A10();
        _os_log_impl(&dword_20A048000, v72, v73, "Missing %ld bytes COR", v75, 0xCu);
        MEMORY[0x20BD20380](v75, -1, -1);
      }

      v61 = v131;
      if ((v140 & 2) == 0)
        v140 |= 2u;
    }
    if (__OFSUB__(v13, v117))
      goto LABEL_97;
    if ((unint64_t)(((uint64_t)v13 - v117) / 16 - 0x7FFFFFFFFFFFFFFLL) >> 60 != 15)
      goto LABEL_98;
    v4 = (((unint64_t)v13 + ((uint64_t)v13 - v117 < 0 ? 0xFuLL : 0) - v117) & 0xFFFFFFFFFFFFFFF0) + 16;
    if (v122 < v4)
    {
      if (qword_2545C8E60 != -1)
        swift_once();
      v76 = sub_20A0E0740();
      __swift_project_value_buffer(v76, (uint64_t)qword_2545D79F0);
      v77 = sub_20A0E0728();
      v78 = sub_20A0E0980();
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v79 = 134217984;
        if (__OFSUB__(v4, v122))
          goto LABEL_108;
        v80 = v79;
        v137 = v4 - v122;
        sub_20A0E0A10();
        _os_log_impl(&dword_20A048000, v77, v78, "Missing %ld bytes COD", v80, 0xCu);
        MEMORY[0x20BD20380](v80, -1, -1);
      }

      v61 = v131;
      if ((v140 & 4) == 0)
        v140 |= 4u;
    }
    v81 = (_QWORD *)(*(_QWORD *)(v126 + v123) + OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices);
    swift_beginAccess();
    if (__OFADD__(v61, *v81))
      goto LABEL_99;
    if (v114 < v61 + *v81)
    {
      if (qword_2545C8E60 != -1)
        swift_once();
      v82 = sub_20A0E0740();
      __swift_project_value_buffer(v82, (uint64_t)qword_2545D79F0);
      v83 = v129;
      v84 = sub_20A0E0728();
      v85 = sub_20A0E0980();
      if (os_log_type_enabled(v84, v85))
      {
        v6 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v6 = 134217984;
        v86 = (_QWORD *)(*(_QWORD *)(v126 + v123) + OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices);
        swift_beginAccess();
        v87 = v131 + *v86;
        if (__OFADD__(v131, *v86))
          goto LABEL_109;
        v58 = __OFSUB__(v87, v114);
        v88 = v87 - v114;
        if (v58)
          goto LABEL_110;
        v135 = v88;
        sub_20A0E0A10();

        _os_log_impl(&dword_20A048000, v84, v85, "Missing %ld indices", v6, 0xCu);
        MEMORY[0x20BD20380](v6, -1, -1);
      }
      else
      {

        v84 = v83;
      }

      if ((v140 & 8) == 0)
        v140 |= 8u;
    }
    if (qword_2545C8E60 != -1)
      goto LABEL_100;
LABEL_73:
    v89 = sub_20A0E0740();
    __swift_project_value_buffer(v89, (uint64_t)qword_2545D79F0);
    v90 = sub_20A0E0728();
    v91 = sub_20A0E0980();
    if (!os_log_type_enabled(v90, v91))
      goto LABEL_76;
    v92 = (_DWORD *)swift_slowAlloc();
    *v92 = 134219008;
    if (!__OFSUB__(v116, v118))
      break;
    __break(1u);
LABEL_105:
    swift_once();
  }
  v93 = v92;
  sub_20A0E0A10();
  *((_WORD *)v93 + 6) = 2048;
  sub_20A0E0A10();
  *((_WORD *)v93 + 11) = 2048;
  sub_20A0E0A10();
  *((_WORD *)v93 + 16) = 2048;
  sub_20A0E0A10();
  *((_WORD *)v93 + 21) = 2048;
  v135 = v26;
  sub_20A0E0A10();
  _os_log_impl(&dword_20A048000, v90, v91, "Requires pHeap:%ld COD:%ld COR:%ld Indices:%ld IndicesPHeap:%ld", (uint8_t *)v93, 0x34u);
  MEMORY[0x20BD20380](v93, -1, -1);
LABEL_76:

  v94 = v140;
  swift_bridgeObjectRetain_n();
  v95 = sub_20A0E0728();
  v96 = sub_20A0E0980();
  if (os_log_type_enabled(v95, v96))
  {
    v127 = v94;
    v132 = v96;
    v97 = swift_slowAlloc();
    v130 = swift_slowAlloc();
    v134 = v130;
    *(_DWORD *)v97 = 136315650;
    v135 = sub_20A0A6D5C(0xD00000000000001ELL, 0x800000020A0F1B20, &v134);
    sub_20A0E0A10();
    *(_WORD *)(v97 + 12) = 2080;
    v98 = MEMORY[0x24BEE4AF8];
    if (v128)
    {
      v133 = MEMORY[0x24BEE4AF8];
      sub_20A0972AC(0, v128, 0);
      v98 = v133;
      v99 = (unint64_t *)(v125 + 40);
      do
      {
        v100 = *v99;
        v135 = *(v99 - 1);
        v136 = v100;
        sub_20A074C44(v135, v100);
        v101 = sub_20A0E0824();
        v103 = v102;
        v105 = *(_QWORD *)(v133 + 16);
        v104 = *(_QWORD *)(v133 + 24);
        if (v105 >= v104 >> 1)
          sub_20A0972AC(v104 > 1, v105 + 1, 1);
        v99 += 2;
        *(_QWORD *)(v133 + 16) = v105 + 1;
        v106 = v133 + 16 * v105;
        *(_QWORD *)(v106 + 32) = v101;
        *(_QWORD *)(v106 + 40) = v103;
        --v128;
      }
      while (v128);
    }
    v107 = MEMORY[0x20BD1F42C](v98, MEMORY[0x24BEE0D00]);
    v109 = v108;
    swift_bridgeObjectRelease();
    v135 = sub_20A0A6D5C(v107, v109, &v134);
    sub_20A0E0A10();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v97 + 22) = 2080;
    LOBYTE(v135) = v127;
    CanFit = SESnapshot.CanFitResult.FailureReason.debugDescription.getter();
    v135 = sub_20A0A6D5C(CanFit, v111, &v134);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v95, v132, "%s %s => %s", (uint8_t *)v97, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v130, -1, -1);
    MEMORY[0x20BD20380](v97, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  result = swift_beginAccess();
  v113 = v140 == 0;
  *a2 = v140;
  a2[1] = v113;
  return result;
}

uint64_t sub_20A0A348C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC9SEService11MemoryUsage_cor);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_20A0A34E0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_cor);
}

uint64_t sub_20A0A34EC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC9SEService11MemoryUsage_cod);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_20A0A3540(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_cod);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SESnapshot.addToSnapshot(credentials:)(Swift::OpaquePointer credentials)
{
  char *v1;
  uint64_t v2;
  char *v3;
  char v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  void *rawValue;
  uint64_t v32[3];
  uint64_t v33;

  v3 = v1;
  SESnapshot.canFitWithReason(credentials:)((uint64_t)credentials._rawValue, v32);
  if (v2)
    return v5 & 1;
  if ((v32[0] & 0x100) == 0)
  {
    v5 = 0;
    return v5 & 1;
  }
  v6 = *((_QWORD *)credentials._rawValue + 2);
  rawValue = credentials._rawValue;
  if (v6)
  {
    v32[0] = MEMORY[0x24BEE4AF8];
    sub_20A097290(0, v6, 0);
    v7 = (_QWORD *)v32[0];
    v8 = (unint64_t *)((char *)credentials._rawValue + 40);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      sub_20A074C44(v9, *v8);
      v32[0] = (uint64_t)v7;
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_20A097290(v11 > 1, v12 + 1, 1);
        v7 = (_QWORD *)v32[0];
      }
      v8 += 2;
      v7[2] = v12 + 1;
      v13 = &v7[3 * v12];
      v13[4] = v9;
      v13[5] = v10;
      v13[6] = 1;
      --v6;
    }
    while (v6);
    v3 = v1;
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
      v14 = MEMORY[0x24BEE4B00];
      goto LABEL_12;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
  v14 = sub_20A0E0BFC();
LABEL_12:
  v32[0] = v14;
  sub_20A0AA438(v7, 1, v32);
  swift_bridgeObjectRelease();
  v15 = v32[0];
  v16 = (uint64_t *)&v3[OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials];
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v33 = *v16;
  *v16 = 0x8000000000000000;
  sub_20A084594(v15, (uint64_t)sub_20A0A8CFC, 0, isUniquelyReferenced_nonNull_native, &v33);
  *v16 = v33;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v18 = (uint64_t *)&v3[OBJC_IVAR____TtC9SEService10SESnapshot_stagedCredentials];
  swift_beginAccess();
  v19 = swift_isUniquelyReferenced_nonNull_native();
  v33 = *v18;
  *v18 = 0x8000000000000000;
  sub_20A084594(v15, (uint64_t)sub_20A0A8CFC, 0, v19, &v33);
  *v18 = v33;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (qword_2545C8E60 != -1)
    swift_once();
  v20 = sub_20A0E0740();
  __swift_project_value_buffer(v20, (uint64_t)qword_2545D79F0);
  swift_bridgeObjectRetain_n();
  v21 = v3;
  v22 = sub_20A0E0728();
  v23 = sub_20A0E0980();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v32[0] = v30;
    *(_DWORD *)v24 = 136315394;
    v25 = MEMORY[0x20BD1F42C](rawValue, &type metadata for CredentialType);
    v33 = sub_20A0A6D5C(v25, v26, v32);
    sub_20A0E0A10();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    v27 = sub_20A0E068C();
    v33 = sub_20A0A6D5C(v27, v28, v32);
    sub_20A0E0A10();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v22, v23, "Added %s to snapshot, UUID: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v30, -1, -1);
    MEMORY[0x20BD20380](v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v5 = 1;
  return v5 & 1;
}

void SESnapshot.removeFromSnapshot(credential:)(uint64_t *a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  v5 = (uint64_t *)&v1[OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials];
  swift_beginAccess();
  v6 = *v5;
  if (!*(_QWORD *)(*v5 + 16))
  {
    swift_endAccess();
    goto LABEL_10;
  }
  sub_20A074C44(v4, v3);
  v7 = sub_20A0B8934(v4, v3);
  if ((v8 & 1) == 0)
  {
    swift_endAccess();
    sub_20A075F1C(v4, v3);
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  sub_20A075F1C(v4, v3);
  if (v9 <= 0)
  {
LABEL_10:
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_BYTE *)(v21 + 16) = 4;
    swift_willThrow();
    return;
  }
  v53 = v2;
  v10 = (uint64_t *)&v2[OBJC_IVAR____TtC9SEService10SESnapshot_stagedCredentials];
  swift_beginAccess();
  sub_20A074C44(v4, v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v55 = (_QWORD *)*v10;
  v12 = (uint64_t)v55;
  *v10 = 0x8000000000000000;
  v14 = sub_20A0B8934(v4, v3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v18 = v13;
  if (*(_QWORD *)(v12 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_20A0C5588();
      v12 = (uint64_t)v55;
    }
  }
  else
  {
    sub_20A0C6B90(v17, isUniquelyReferenced_nonNull_native);
    v12 = (uint64_t)v55;
    v19 = sub_20A0B8934(v4, v3);
    if ((v18 & 1) != (v20 & 1))
      goto LABEL_40;
    v14 = v19;
  }
  *v10 = v12;
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)*v10;
  if ((v18 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v22[(v14 >> 6) + 8] |= 1 << v14;
    v23 = (uint64_t *)(v22[6] + 16 * v14);
    *v23 = v4;
    v23[1] = v3;
    *(_QWORD *)(v22[7] + 8 * v14) = 0;
    v24 = v22[2];
    swift_bridgeObjectRetain();
    if (__OFADD__(v24, 1))
    {
      __break(1u);
LABEL_38:
      sub_20A0C5588();
      v30 = (uint64_t)v55;
      goto LABEL_23;
    }
    v22[2] = v24 + 1;
    sub_20A074C44(v4, v3);
  }
  v25 = v22[7];
  v26 = *(_QWORD *)(v25 + 8 * v14);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
    goto LABEL_33;
  *(_QWORD *)(v25 + 8 * v14) = v28;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v29 = swift_isUniquelyReferenced_nonNull_native();
  v55 = (_QWORD *)*v5;
  v30 = (uint64_t)v55;
  *v5 = 0x8000000000000000;
  v14 = sub_20A0B8934(v4, v3);
  v32 = *(_QWORD *)(v30 + 16);
  v33 = (v31 & 1) == 0;
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  LOBYTE(v10) = v31;
  if (*(_QWORD *)(v30 + 24) < v34)
  {
    sub_20A0C6B90(v34, v29);
    v30 = (uint64_t)v55;
    v35 = sub_20A0B8934(v4, v3);
    if ((v10 & 1) == (v36 & 1))
    {
      v14 = v35;
      goto LABEL_23;
    }
LABEL_40:
    sub_20A0E0D28();
    __break(1u);
    return;
  }
  if ((v29 & 1) == 0)
    goto LABEL_38;
LABEL_23:
  *v5 = v30;
  swift_bridgeObjectRelease();
  v37 = (_QWORD *)*v5;
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_27;
  }
  v37[(v14 >> 6) + 8] |= 1 << v14;
  v38 = (uint64_t *)(v37[6] + 16 * v14);
  *v38 = v4;
  v38[1] = v3;
  *(_QWORD *)(v37[7] + 8 * v14) = 0;
  v39 = v37[2];
  swift_bridgeObjectRetain();
  if (__OFADD__(v39, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  v37[2] = v39 + 1;
  sub_20A074C44(v4, v3);
LABEL_27:
  v40 = v37[7];
  v41 = *(_QWORD *)(v40 + 8 * v14);
  v27 = __OFSUB__(v41, 1);
  v42 = v41 - 1;
  if (!v27)
  {
    *(_QWORD *)(v40 + 8 * v14) = v42;
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_20A075F1C(v4, v3);
    if (qword_2545C8E60 == -1)
      goto LABEL_29;
    goto LABEL_36;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  swift_once();
LABEL_29:
  v43 = sub_20A0E0740();
  __swift_project_value_buffer(v43, (uint64_t)qword_2545D79F0);
  sub_20A074C44(v4, v3);
  v44 = v53;
  sub_20A074C44(v4, v3);
  v45 = v44;
  v46 = sub_20A0E0728();
  v47 = sub_20A0E0980();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc();
    v54 = swift_slowAlloc();
    v55 = (_QWORD *)v54;
    *(_DWORD *)v48 = 136315394;
    sub_20A074C44(v4, v3);
    v49 = sub_20A0E0824();
    sub_20A0A6D5C(v49, v50, (uint64_t *)&v55);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A075F1C(v4, v3);
    sub_20A075F1C(v4, v3);
    *(_WORD *)(v48 + 12) = 2080;
    v51 = sub_20A0E068C();
    sub_20A0A6D5C(v51, v52, (uint64_t *)&v55);
    sub_20A0E0A10();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v46, v47, "Removed %s from snapshot, UUID: %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v54, -1, -1);
    MEMORY[0x20BD20380](v48, -1, -1);

  }
  else
  {
    sub_20A075F1C(v4, v3);
    sub_20A075F1C(v4, v3);

  }
}

void sub_20A0A3FB8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

Swift::Void __swiftcall SESnapshot.resetSnapshot()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = &v0[OBJC_IVAR____TtC9SEService10SESnapshot_stagedCredentials];
  swift_beginAccess();
  v46 = v1;
  v47 = v0;
  v2 = *(_QWORD *)v1;
  v48 = *(_QWORD *)v1 + 64;
  v3 = 1 << *(_BYTE *)(*(_QWORD *)v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*(_QWORD *)v1 + 64);
  v6 = (uint64_t *)&v0[OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials];
  v49 = (unint64_t)(v3 + 63) >> 6;
  v50 = v2;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * i);
    swift_beginAccess();
    sub_20A074C44(v16, v15);
    sub_20A074C44(v16, v15);
    sub_20A09A628(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51 = *v6;
    v19 = v51;
    *v6 = 0x8000000000000000;
    v7 = sub_20A0B8934(v16, v15);
    v21 = *(_QWORD *)(v19 + 16);
    v22 = (v20 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v24 = v20;
    if (*(_QWORD *)(v19 + 24) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_20A0C5588();
        v19 = v51;
      }
    }
    else
    {
      sub_20A0C6B90(v23, isUniquelyReferenced_nonNull_native);
      v19 = v51;
      v25 = sub_20A0B8934(v16, v15);
      if ((v24 & 1) != (v26 & 1))
      {
        sub_20A0E0D28();
        __break(1u);
        return;
      }
      v7 = v25;
    }
    *v6 = v19;
    swift_bridgeObjectRelease();
    v27 = (_QWORD *)*v6;
    if ((v24 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v27[(v7 >> 6) + 8] |= 1 << v7;
      v28 = (uint64_t *)(v27[6] + 16 * v7);
      *v28 = v16;
      v28[1] = v15;
      *(_QWORD *)(v27[7] + 8 * v7) = 0;
      v29 = v27[2];
      v30 = v29 + 1;
      v31 = __OFADD__(v29, 1);
      swift_bridgeObjectRetain();
      if (v31)
        goto LABEL_42;
      v27[2] = v30;
      sub_20A074C44(v16, v15);
    }
    v32 = v27[7];
    v33 = *(_QWORD *)(v32 + 8 * v7);
    v34 = __OFSUB__(v33, v17);
    v35 = v33 - v17;
    if (v34)
      goto LABEL_41;
    *(_QWORD *)(v32 + 8 * v7) = v35;
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_20A075F1C(v16, v15);
    sub_20A075F1C(v16, v15);
    v7 = (unint64_t)sub_20A0A3FB8;
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_43;
    if (v11 >= v49)
      goto LABEL_35;
    v12 = *(_QWORD *)(v48 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v49)
        goto LABEL_35;
      v12 = *(_QWORD *)(v48 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v49)
          goto LABEL_35;
        v12 = *(_QWORD *)(v48 + 8 * v8);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 < v49)
  {
    v12 = *(_QWORD *)(v48 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v8 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_44;
        if (v8 >= v49)
          goto LABEL_35;
        v12 = *(_QWORD *)(v48 + 8 * v8);
        ++v13;
        if (v12)
          goto LABEL_18;
      }
    }
    v8 = v13;
    goto LABEL_18;
  }
LABEL_35:
  swift_release();
  swift_beginAccess();
  v36 = swift_bridgeObjectRetain();
  v37 = sub_20A0A7830(v36);
  swift_bridgeObjectRelease();
  *v6 = (uint64_t)v37;
  swift_bridgeObjectRelease();
  *(_QWORD *)v46 = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
  if (qword_2545C8E60 == -1)
    goto LABEL_36;
LABEL_45:
  swift_once();
LABEL_36:
  v38 = sub_20A0E0740();
  __swift_project_value_buffer(v38, (uint64_t)qword_2545D79F0);
  v39 = v47;
  v40 = sub_20A0E0728();
  v41 = sub_20A0E0980();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    *(_DWORD *)v42 = 136315138;
    v51 = v43;
    v44 = sub_20A0E068C();
    sub_20A0A6D5C(v44, v45, &v51);
    sub_20A0E0A10();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v40, v41, "Removed all staged credentials from snapshot, UUID: %s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v43, -1, -1);
    MEMORY[0x20BD20380](v42, -1, -1);

  }
  else
  {

  }
  sub_20A09A628(v7);
}

Swift::tuple_used_Int_total_Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SESnapshot.totalUsage()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  NSObject *KeyPath;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  Swift::tuple_used_Int_total_Int result;
  uint64_t v28;
  char v29;

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService10SESnapshot_seState)
                             + OBJC_IVAR____TtC9SEService7SEState_freeMemory)
                 + OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap);
  swift_beginAccess();
  v3 = *v2;
  v4 = (uint64_t *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState)
                 + OBJC_IVAR____TtC9SEService16ReservationState_counts);
  swift_beginAccess();
  v5 = *v4;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  v7 = sub_20A081BD0(v6, v5);
  v8 = v0 + OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator;
  swift_beginAccess();
  v9 = sub_20A0AB1F8(v8, (uint64_t)&v28, &qword_2545CA1C0);
  if ((v29 & 1) != 0)
    goto LABEL_26;
  KeyPath = swift_getKeyPath();
  v12 = sub_20A0808AC(v7, KeyPath, 0, 1);
  if (!v1)
  {
    v13 = v12;
    swift_release();
    sub_20A0A9E24((uint64_t)&v28);
    v9 = sub_20A0AB1F8(v8, (uint64_t)&v28, &qword_2545CA1C0);
    if ((v29 & 1) != 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v14 = swift_getKeyPath();
    v15 = sub_20A0808AC(v7, v14, 0, 1);
    swift_release();
    swift_bridgeObjectRelease();
    sub_20A0A9E24((uint64_t)&v28);
    v9 = sub_20A0AB1F8(v8, (uint64_t)&v28, &qword_2545CA1C0);
    if ((v29 & 1) != 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v16 = sub_20A0A0948(MEMORY[0x24BEE4AF8]);
    v17 = swift_getKeyPath();
    v18 = sub_20A0808AC(v16, v17, 0, 1);
    swift_bridgeObjectRelease();
    swift_release();
    sub_20A0A9E24((uint64_t)&v28);
    v9 = sub_20A0AB1F8(v8, (uint64_t)&v28, &qword_2545CA1C0);
    if ((v29 & 1) != 0)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v19 = sub_20A0A0948(MEMORY[0x24BEE4AF8]);
    v20 = swift_getKeyPath();
    v21 = sub_20A0808AC(v19, v20, 0, 1);
    swift_bridgeObjectRelease();
    swift_release();
    v9 = sub_20A0A9E24((uint64_t)&v28);
    v22 = v13 + 25600;
    if (!__OFADD__(v13, 25600))
    {
      if ((unint64_t)(v15 / 32 - 0x40000000000000) >> 55 != 511)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v23 = (v15 / 32) << 9;
      if ((uint64_t)(v15 & 0x800000000000001FLL) >= 1)
      {
        v24 = __OFADD__(v23, 512);
        v23 += 512;
        if (v24)
          goto LABEL_24;
      }
      v9 = v22 + v23;
      if (__OFADD__(v22, v23))
        goto LABEL_21;
      v25 = v18 + v3;
      if (__OFADD__(v18, v3))
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      if ((unint64_t)(v21 / 32 - 0x40000000000000) >> 55 != 511)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v26 = (v21 / 32) << 9;
      if ((uint64_t)(v21 & 0x800000000000001FLL) >= 1)
      {
        v24 = __OFADD__(v26, 512);
        v26 += 512;
        if (v24)
          goto LABEL_25;
      }
      v10 = v25 + v26;
      if (!__OFADD__(v25, v26))
        goto LABEL_30;
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
  swift_release();
  swift_bridgeObjectRelease();
  v9 = sub_20A0A9E24((uint64_t)&v28);
LABEL_30:
  result.total = v10;
  result.used = v9;
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SESnapshot.usage(ofCredentials:)(Swift::OpaquePointer ofCredentials)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v4 = swift_bridgeObjectRetain();
  v5 = sub_20A0AA6EC(v4);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6 != *((_QWORD *)ofCredentials._rawValue + 2))
  {
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v14 = 0xD00000000000001FLL;
    *(_QWORD *)(v14 + 8) = 0x800000020A0F1B40;
    *(_BYTE *)(v14 + 16) = 1;
    swift_willThrow();
    return (Swift::Int)ofCredentials._rawValue;
  }
  v7 = v1;
  v8 = sub_20A0A91C0((uint64_t)ofCredentials._rawValue);

  if (v2)
    return (Swift::Int)ofCredentials._rawValue;
  v10 = *(_QWORD *)(v8 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v11 = 0;
  ofCredentials._rawValue = 0;
  while (1)
  {
    v12 = *(_QWORD *)(v8 + 8 * v11 + 32);
    v13 = __OFADD__(ofCredentials._rawValue, v12);
    ofCredentials._rawValue = (char *)ofCredentials._rawValue + v12;
    if (v13)
      break;
    if (v10 == ++v11)
    {
      swift_bridgeObjectRelease();
      return (Swift::Int)ofCredentials._rawValue;
    }
  }
  __break(1u);
  return result;
}

uint64_t SESnapshot.usage(ofCredential:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  NSObject *KeyPath;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;

  v3 = v1;
  v4 = *a1;
  v5 = a1[1];
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials);
  swift_beginAccess();
  v7 = *v6;
  if (*(_QWORD *)(*v6 + 16))
  {
    sub_20A074C44(v4, v5);
    v8 = sub_20A0B8934(v4, v5);
    if ((v9 & 1) != 0)
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
    else
      v10 = 0;
    sub_20A075F1C(v4, v5);
  }
  else
  {
    v10 = 0;
  }
  swift_endAccess();
  v11 = v3 + OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator;
  swift_beginAccess();
  result = sub_20A0AB1F8(v11, (uint64_t)&v20, &qword_2545CA1C0);
  if ((BYTE8(v20) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)&v21 = v4;
  *((_QWORD *)&v21 + 1) = v5;
  KeyPath = swift_getKeyPath();
  sub_20A081C4C((uint64_t)&v21, v10, KeyPath);
  v15 = v14;
  swift_release();
  sub_20A0A9E24((uint64_t)&v20);
  if (v2)
    return v15;
  *(_QWORD *)&v21 = v4;
  *((_QWORD *)&v21 + 1) = v5;
  v20 = xmmword_20A0EA730;
  if ((_s9SEService14CredentialTypeO2eeoiySbAC_ACtFZ_0((uint64_t *)&v21, (uint64_t *)&v20) & 1) == 0)
    return v15;
  result = sub_20A0AB1F8(v11, (uint64_t)&v20, &qword_2545CA1C0);
  if ((BYTE8(v20) & 1) == 0)
  {
    v21 = xmmword_20A0E6DF0;
    v16 = swift_getKeyPath();
    sub_20A081C4C((uint64_t)&v21, v10, v16);
    v18 = v17;
    swift_release();
    result = sub_20A0A9E24((uint64_t)&v20);
    v19 = __OFADD__(v15, v18);
    v15 += v18;
    if (!v19)
      return v15;
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t SESnapshot.usage(ofInstance:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t KeyPath;
  char *v7;
  _QWORD v8[2];
  _BYTE v9[16];

  v2 = *a1;
  v3 = a1[1];
  v4 = v1 + OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator;
  swift_beginAccess();
  result = sub_20A0AB1F8(v4, (uint64_t)v9, &qword_2545CA1C0);
  if ((v9[8] & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v8[0] = v2;
    v8[1] = v3;
    KeyPath = swift_getKeyPath();
    v7 = sub_20A083F6C((uint64_t)v8, KeyPath, 0);
    swift_release();
    sub_20A0A9E24((uint64_t)v9);
    return (uint64_t)v7;
  }
  return result;
}

void SESnapshot.requiredUsage(for:count:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *KeyPath;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39[8];
  char v40;
  id v41;

  v4 = v2;
  v6 = *a1;
  v7 = a1[1];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 1;
  v9 = SEState.friendlyDetails.getter();
  v10 = *(_QWORD *)(v9 + 16);
  sub_20A074C44(v6, v7);
  if (v10 && (v11 = sub_20A0B8934(v6, v7), (v12 & 1) != 0))
    v13 = (char *)*(id *)(*(_QWORD *)(v9 + 56) + 8 * v11);
  else
    v13 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SEPackageDetails()), sel_init);
  v14 = v13;
  swift_bridgeObjectRelease();
  sub_20A075F1C(v6, v7);
  v41 = v14;
  v15 = &v14[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances];
  swift_beginAccess();
  v16 = *(_QWORD *)v15;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = sub_20A0E0BD8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState)
      + OBJC_IVAR____TtC9SEService16ReservationState_counts;
  swift_beginAccess();
  v19 = *(_QWORD *)v18;
  if (!*(_QWORD *)(*(_QWORD *)v18 + 16))
    goto LABEL_13;
  sub_20A074C44(v6, v7);
  v20 = sub_20A0B8934(v6, v7);
  if ((v21 & 1) == 0)
  {
LABEL_12:
    sub_20A075F1C(v6, v7);
LABEL_13:
    swift_endAccess();
    goto LABEL_14;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_endAccess();
  sub_20A075F1C(v6, v7);
  v23 = __OFADD__(v17, v22);
  v17 += v22;
  if (v23)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_14:
  v24 = (uint64_t *)(v4 + OBJC_IVAR____TtC9SEService10SESnapshot_stagedCredentials);
  swift_beginAccess();
  v25 = *v24;
  if (!*(_QWORD *)(*v24 + 16))
  {
LABEL_20:
    swift_endAccess();
    goto LABEL_21;
  }
  sub_20A074C44(v6, v7);
  v26 = sub_20A0B8934(v6, v7);
  if ((v27 & 1) == 0)
  {
LABEL_19:
    sub_20A075F1C(v6, v7);
    goto LABEL_20;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
  swift_endAccess();
  sub_20A075F1C(v6, v7);
  v23 = __OFADD__(v17, v28);
  v17 += v28;
  if (v23)
  {
    __break(1u);
    goto LABEL_19;
  }
LABEL_21:
  v29 = v4 + OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator;
  swift_beginAccess();
  sub_20A0AB1F8(v29, (uint64_t)v39, &qword_2545CA1C0);
  if ((v40 & 1) == 0)
  {
    v37 = v6;
    v38 = v7;
    if (__OFADD__(v17, a2))
    {
      __break(1u);
    }
    else
    {
      KeyPath = swift_getKeyPath();
      sub_20A081C4C((uint64_t)&v37, v17 + a2, KeyPath);
      if (v3)
      {
        swift_release();

        sub_20A0A9E24((uint64_t)v39);
        sub_20A0AA794(v6, v7, a2, v8);
        swift_release();
        return;
      }
      v32 = v31;
      swift_release();
      sub_20A0A9E24((uint64_t)v39);
      sub_20A0AB1F8(v29, (uint64_t)v39, &qword_2545CA1C0);
      if ((v40 & 1) != 0)
        goto LABEL_33;
      v37 = v6;
      v38 = v7;
      v33 = swift_getKeyPath();
      sub_20A081C4C((uint64_t)&v37, v17, v33);
      v35 = v34;
      swift_release();
      sub_20A0A9E24((uint64_t)v39);

      v23 = __OFSUB__(v32, v35);
      v36 = v32 - v35;
      if (!v23)
      {
        *(_QWORD *)(v8 + 16) = v36;
        *(_BYTE *)(v8 + 24) = 0;
        sub_20A0AA794(v6, v7, a2, v8);
        swift_release();
        return;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t SESnapshot.getCredential(forAID:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  BOOL v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  void *v55;
  uint64_t v56[3];
  __int128 v57;
  uint64_t v58[3];

  result = sub_20A0E0878();
  if ((result & 1) != 0)
  {
    *(_OWORD *)a3 = xmmword_20A0EA750;
    return result;
  }
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_20A0E6A20;
  v10 = v3;
  v11 = sub_20A0A8F98((uint64_t)&unk_24C2B9F80, (uint64_t)v10);
  v51 = v10;

  swift_arrayDestroy();
  if (*(_QWORD *)(v11 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7E0);
    v12 = sub_20A0E0BFC();
  }
  else
  {
    v12 = MEMORY[0x24BEE4B00];
  }
  v58[0] = v12;
  v13 = (_QWORD *)swift_bridgeObjectRetain();
  sub_20A07A3C0(v13, 1, v58);
  if (v4)
  {
LABEL_66:
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v14 = v58[0];
  swift_bridgeObjectRetain();
  sub_20A0760BC(v14, a1, a2, v58);
  swift_release();
  if (!v58[2])
  {
    v17 = *(_QWORD *)(*(_QWORD *)&v10[OBJC_IVAR____TtC9SEService10SESnapshot_seState]
                    + OBJC_IVAR____TtC9SEService7SEState_infoDictionary);
    v18 = *(_QWORD *)(v17 + 64);
    v48 = v17 + 64;
    v19 = 1 << *(_BYTE *)(v17 + 32);
    v20 = -1;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    v21 = v20 & v18;
    v49 = (unint64_t)(v19 + 63) >> 6;
    v53 = *(_QWORD *)(*(_QWORD *)&v10[OBJC_IVAR____TtC9SEService10SESnapshot_seState]
                    + OBJC_IVAR____TtC9SEService7SEState_infoDictionary);
    swift_bridgeObjectRetain();
    v22 = 0;
    v52 = v9;
    v50 = a3;
    while (1)
    {
      if (v21)
      {
        v23 = __clz(__rbit64(v21));
        v21 &= v21 - 1;
        v54 = v22;
        v24 = v23 | (v22 << 6);
      }
      else
      {
        v25 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_64;
        if (v25 >= v49)
        {
LABEL_62:
          swift_release();
          sub_20A080234(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
          *(_OWORD *)(v9 + 16) = xmmword_20A0EA740;
          *(_OWORD *)a3 = xmmword_20A0EA740;
          goto LABEL_9;
        }
        v26 = *(_QWORD *)(v48 + 8 * v25);
        v27 = v22 + 1;
        if (!v26)
        {
          v27 = v22 + 2;
          if (v22 + 2 >= v49)
            goto LABEL_62;
          v26 = *(_QWORD *)(v48 + 8 * v27);
          if (!v26)
          {
            v27 = v22 + 3;
            if (v22 + 3 >= v49)
              goto LABEL_62;
            v26 = *(_QWORD *)(v48 + 8 * v27);
            if (!v26)
            {
              v27 = v22 + 4;
              if (v22 + 4 >= v49)
                goto LABEL_62;
              v26 = *(_QWORD *)(v48 + 8 * v27);
              if (!v26)
              {
                v28 = v22 + 5;
                if (v22 + 5 >= v49)
                  goto LABEL_62;
                v26 = *(_QWORD *)(v48 + 8 * v28);
                if (!v26)
                {
                  while (1)
                  {
                    v27 = v28 + 1;
                    if (__OFADD__(v28, 1))
                      break;
                    if (v27 >= v49)
                      goto LABEL_62;
                    v26 = *(_QWORD *)(v48 + 8 * v27);
                    ++v28;
                    if (v26)
                      goto LABEL_31;
                  }
LABEL_65:
                  __break(1u);
                  goto LABEL_66;
                }
                v27 = v22 + 5;
              }
            }
          }
        }
LABEL_31:
        v21 = (v26 - 1) & v26;
        v54 = v27;
        v24 = __clz(__rbit64(v26)) + (v27 << 6);
      }
      v29 = *(char **)(*(_QWORD *)(v53 + 56) + 8 * v24);
      v30 = &v29[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances];
      swift_beginAccess();
      v31 = *(_QWORD *)v30;
      v55 = v29;
      if (*(_QWORD *)v30 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v41 = v29;
        v32 = sub_20A0E0BD8();
        swift_bridgeObjectRelease();
        if (!v32)
          goto LABEL_13;
      }
      else
      {
        v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        v33 = v29;
        if (!v32)
          goto LABEL_13;
      }
      if ((v31 & 0xC000000000000001) != 0)
        v34 = (char *)MEMORY[0x20BD1F648](0, v31);
      else
        v34 = (char *)*(id *)(v31 + 32);
      v35 = v34;
      v36 = *(_QWORD *)&v34[OBJC_IVAR____TtC9SEService8SEApplet_identifier] == a1
         && *(_QWORD *)&v34[OBJC_IVAR____TtC9SEService8SEApplet_identifier + 8] == a2;
      if (v36 || (sub_20A0E0CEC() & 1) != 0)
      {
LABEL_57:
        swift_bridgeObjectRelease_n();
        v43 = *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService8SEApplet_moduleIdentifier];
        v42 = *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService8SEApplet_moduleIdentifier + 8];
        v44 = *(_QWORD *)&v51[OBJC_IVAR____TtC9SEService10SESnapshot_dataSource + 8];
        v45 = *(_QWORD *)&v51[OBJC_IVAR____TtC9SEService10SESnapshot_dataSource + 16];
        v56[0] = *(_QWORD *)&v51[OBJC_IVAR____TtC9SEService10SESnapshot_dataSource];
        v56[1] = v44;
        v56[2] = v45;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        CredentialType.init(moduleAID:dataSource:)(v43, v42, v56, &v57);
        v46 = *((_QWORD *)&v57 + 1);
        if (*((_QWORD *)&v57 + 1) == 26)
        {
          sub_20A080234(*(_QWORD *)(v52 + 16), *(_QWORD *)(v52 + 24));

          v47 = 0;
          *(_OWORD *)(v52 + 16) = xmmword_20A0EA740;
          v46 = 25;
        }
        else
        {
          v47 = v57;
          sub_20A080234(*(_QWORD *)(v52 + 16), *(_QWORD *)(v52 + 24));
          *(_QWORD *)(v52 + 16) = v47;
          *(_QWORD *)(v52 + 24) = v46;
          sub_20A074C44(v47, v46);

        }
        swift_release();
        *v50 = v47;
        v50[1] = v46;
        sub_20A0AAAD4(a1, a2, v52);
        return swift_release();
      }

      if (v32 != 1)
      {
        v37 = 5;
        while (1)
        {
          v38 = (v31 & 0xC000000000000001) != 0
              ? (char *)MEMORY[0x20BD1F648](v37 - 4, v31)
              : (char *)*(id *)(v31 + 8 * v37);
          v35 = v38;
          v39 = v37 - 3;
          if (__OFADD__(v37 - 4, 1))
            break;
          v40 = *(_QWORD *)&v38[OBJC_IVAR____TtC9SEService8SEApplet_identifier] == a1
             && *(_QWORD *)&v38[OBJC_IVAR____TtC9SEService8SEApplet_identifier + 8] == a2;
          if (v40 || (sub_20A0E0CEC() & 1) != 0)
            goto LABEL_57;

          ++v37;
          if (v39 == v32)
            goto LABEL_13;
        }
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
LABEL_13:
      swift_bridgeObjectRelease_n();

      v9 = v52;
      a3 = v50;
      v22 = v54;
    }
  }
  v16 = v58[0];
  v15 = v58[1];
  swift_bridgeObjectRelease();
  sub_20A080234(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24));
  *(_QWORD *)(v9 + 16) = v16;
  *(_QWORD *)(v9 + 24) = v15;
  *a3 = v16;
  a3[1] = v15;
  sub_20A074C44(v16, v15);
LABEL_9:
  sub_20A0AAAD4(a1, a2, v9);
  return swift_release();
}

uint64_t SESnapshot.description.getter()
{
  sub_20A0E0AC4();
  sub_20A0E0854();
  SEState.description.getter();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  ReservationState.description.getter();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_beginAccess();
  sub_20A08558C();
  swift_bridgeObjectRetain();
  sub_20A0E07B8();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t SESnapshot.globalCredentials.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SESnapshot.globalCredentials.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SESnapshot.globalCredentials.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t static SESnapshot.seFreeSpaceMargin.getter()
{
  return 25600;
}

uint64_t sub_20A0A5930()
{
  uint64_t v0;

  v0 = sub_20A0E0740();
  __swift_allocate_value_buffer(v0, qword_2545D79F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2545D79F0);
  return sub_20A0E0734();
}

id sub_20A0A59B0(void *a1, void *a2, unint64_t a3, uint64_t a4, void *a5)
{
  char *v5;
  char *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  objc_class *ObjectType;
  _BYTE v32[16];
  objc_super v33;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType();
  v12 = sub_20A0E06D4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_BYTES_PER_INDEX] = 16;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_BYTES_PER_PAGE] = 512;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_INDEX_PER_PAGE] = 32;
  v17 = &v6[OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_seState] = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_reservationState] = a2;
  v18 = &v6[OBJC_IVAR____TtC9SEService10SESnapshot_dataSource];
  *(_OWORD *)v18 = *(_OWORD *)a4;
  *((_QWORD *)v18 + 2) = v16;
  v19 = v6;
  v20 = a1;
  v21 = a2;
  if (!a3)
    a3 = sub_20A0A0948(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_stagedCredentials] = a3;
  v22 = SEState.instances.getter();
  swift_beginAccess();
  v23 = swift_bridgeObjectRetain();
  v24 = sub_20A081BD0(v23, v22);
  swift_beginAccess();
  v25 = swift_bridgeObjectRetain();
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials] = sub_20A081BD0(v25, v24);
  sub_20A0E06C8();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v6[OBJC_IVAR____TtC9SEService10SESnapshot_uuid], v15, v12);
  *(_QWORD *)&v6[OBJC_IVAR____TtC9SEService10SESnapshot_deviceCapability] = a5;
  v26 = a5;

  v33.receiver = v6;
  v33.super_class = ObjectType;
  v27 = objc_msgSendSuper2(&v33, sel_init);
  swift_unknownObjectWeakInit();

  v32[8] = 0;
  v28 = (uint64_t)v27 + OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator;
  swift_beginAccess();
  sub_20A0AADC8((uint64_t)v32, v28);
  swift_endAccess();
  return v27;
}

uint64_t static SESnapshot.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545CA140;
}

uint64_t static SESnapshot.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545CA140 = a1;
  return result;
}

uint64_t (*static SESnapshot.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

Swift::Void __swiftcall SESnapshot.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService10SESnapshot_seState);
  v5 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState);
  v7 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  swift_beginAccess();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_20A0A04D8(v8);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA1E0);
    v10 = sub_20A0E0BFC();
  }
  else
  {
    v10 = MEMORY[0x24BEE4B00];
  }
  v18 = v10;
  v11 = (_QWORD *)swift_bridgeObjectRetain();
  sub_20A09DE08(v11, 1, &v18);
  swift_bridgeObjectRelease();
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  sub_20A0801C0(0, (unint64_t *)&unk_2545CA1F0);
  sub_20A0AAD70();
  v12 = (void *)sub_20A0E07A0();
  swift_release();
  v13 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v12, v13, v18);

  v14 = (void *)sub_20A0E06A4();
  v15 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v14, v15);

  v16 = *(id *)(v2 + OBJC_IVAR____TtC9SEService10SESnapshot_deviceCapability);
  v17 = (void *)sub_20A0E0800();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v16, v17);

}

uint64_t SESnapshot.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SESnapshot.init(coder:)(a1);
}

uint64_t SESnapshot.init(coder:)(void *a1)
{
  char *v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  void (*v55)(uint64_t *, _QWORD);
  uint64_t v56;
  objc_class *v57;
  id v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  objc_class *v81;
  id v82;
  id v83;
  uint64_t v84;
  void *v85;
  char v86;
  objc_super v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  ObjectType = swift_getObjectType();
  v4 = sub_20A0E06D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC9SEService10SESnapshot_BYTES_PER_INDEX] = 16;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9SEService10SESnapshot_BYTES_PER_PAGE] = 512;
  *(_QWORD *)&v1[OBJC_IVAR____TtC9SEService10SESnapshot_INDEX_PER_PAGE] = 32;
  v8 = (uint64_t)&v1[OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  type metadata accessor for SEState();
  v9 = v1;
  v10 = sub_20A0E09D4();
  if (!v10)
    goto LABEL_12;
  v11 = (void *)v10;
  type metadata accessor for ReservationState();
  v12 = (void *)sub_20A0E09D4();
  if (!v12)
  {

    goto LABEL_12;
  }
  v82 = v12;
  v83 = v11;
  v81 = (objc_class *)ObjectType;
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  sub_20A0801C0(0, (unint64_t *)&unk_2545CA1F0);
  v13 = sub_20A0E09E0();
  if (!v13)
  {

LABEL_12:
    goto LABEL_13;
  }
  v14 = v13;
  sub_20A0801C0(0, &qword_2545C9FF0);
  v15 = sub_20A0E09D4();
  if (!v15)
  {

LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v16 = (void *)v15;
  v17 = sub_20A0A0A5C(MEMORY[0x24BEE4AF8]);
  SERDataSource.init(credentialSizes:)((Swift::OpaquePointer)v17);
  if (v18)
  {

    swift_bridgeObjectRelease();
LABEL_13:
    sub_20A0801F8(v8, &qword_2545CA1C0);

    swift_deallocPartialClassInstance();
    return 0;
  }
  v76 = 0;
  v78 = v16;
  v21 = v92;
  v77 = v91;
  v22 = v93;
  type metadata accessor for DeviceCapability();
  v23 = sub_20A0E09D4();
  if (!v23)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v75 = v21;
  v73 = (void *)v23;
  v74 = v22;
  sub_20A0E06BC();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v9[OBJC_IVAR____TtC9SEService10SESnapshot_uuid], v7, v4);
  v24 = v83;
  v72 = OBJC_IVAR____TtC9SEService10SESnapshot_seState;
  *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService10SESnapshot_seState] = v83;
  v25 = v82;
  *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService10SESnapshot_reservationState] = v82;
  v80 = v14 & 0xC000000000000001;
  if ((v14 & 0xC000000000000001) != 0)
  {
    v26 = v24;
    v27 = v25;
    v28 = sub_20A0E0B90();
  }
  else
  {
    v28 = *(_QWORD *)(v14 + 16);
    v29 = v24;
    v30 = v25;
  }
  if (v28)
  {
    v84 = MEMORY[0x24BEE4AF8];
    sub_20A097290(0, v28 & ~(v28 >> 63), 0);
    v88 = sub_20A09E628(v14);
    v89 = v31;
    v90 = v32 & 1;
    if (v28 < 0)
    {
      __break(1u);
    }
    else
    {
      v33 = v14 & 0xFFFFFFFFFFFFFF8;
      if (v14 < 0)
        v33 = v14;
      v79 = v33;
      while (1)
      {
        sub_20A09E9B8(&v85, v88, v89, v90, v14);
        v44 = v43;
        v45 = v85;
        v46 = sub_20A0E080C();
        CredentialType.init(rawValue:)(v46, v47, &v91);
        v48 = v92;
        if (v92 == 26)
          break;
        v49 = v91;
        v50 = sub_20A0E0968();

        v51 = v84;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_20A097290(0, *(_QWORD *)(v51 + 16) + 1, 1);
          v51 = v84;
        }
        v53 = *(_QWORD *)(v51 + 16);
        v52 = *(_QWORD *)(v51 + 24);
        if (v53 >= v52 >> 1)
        {
          sub_20A097290(v52 > 1, v53 + 1, 1);
          v51 = v84;
        }
        *(_QWORD *)(v51 + 16) = v53 + 1;
        v54 = (_QWORD *)(v51 + 24 * v53);
        v54[4] = v49;
        v54[5] = v48;
        v54[6] = v50;
        if (v80)
        {
          if ((v90 & 1) == 0)
            goto LABEL_45;
          if (sub_20A0E0B6C())
            swift_isUniquelyReferenced_nonNull_native();
          __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA220);
          v55 = (void (*)(uint64_t *, _QWORD))sub_20A0E07C4();
          sub_20A0E0BB4();
          v55(&v91, 0);
          if (!--v28)
          {
LABEL_36:
            sub_20A09EBE4(v88, v89, v90);
            swift_bridgeObjectRelease();
            v56 = v84;
            goto LABEL_38;
          }
        }
        else
        {
          v34 = v88;
          v35 = v89;
          v36 = v90;
          sub_20A09E774(v88, v89, v90, v14);
          v38 = v37;
          v40 = v39;
          v42 = v41;
          sub_20A09EBE4(v34, v35, v36);
          v88 = v38;
          v89 = v40;
          v90 = v42 & 1;
          if (!--v28)
            goto LABEL_36;
        }
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v56 = MEMORY[0x24BEE4AF8];
LABEL_38:
    v57 = v81;
    v58 = v83;
    if (*(_QWORD *)(v56 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
      v59 = sub_20A0E0BFC();
    }
    else
    {
      v59 = MEMORY[0x24BEE4B00];
    }
    v91 = v59;
    v60 = (_QWORD *)swift_bridgeObjectRetain();
    v61 = v76;
    sub_20A09D6D0(v60, 1, &v91);
    if (!v61)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService10SESnapshot_stagedCredentials] = v91;
      v62 = SEState.instances.getter();
      v63 = v82;
      swift_beginAccess();
      v64 = swift_bridgeObjectRetain();
      v65 = sub_20A081BD0(v64, v62);
      swift_beginAccess();
      v66 = swift_bridgeObjectRetain();
      *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials] = sub_20A081BD0(v66, v65);
      v67 = (uint64_t *)&v9[OBJC_IVAR____TtC9SEService10SESnapshot_dataSource];
      v68 = v75;
      *v67 = v77;
      v67[1] = v68;
      v67[2] = v74;
      v69 = v73;
      *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService10SESnapshot_deviceCapability] = v73;
      v70 = v69;

      v87.receiver = v9;
      v87.super_class = v57;
      v19 = objc_msgSendSuper2(&v87, sel_init, v72);
      swift_unknownObjectWeakInit();

      v86 = 0;
      v71 = (uint64_t)v19 + OBJC_IVAR____TtC9SEService10SESnapshot_memoryCalculator;
      swift_beginAccess();
      sub_20A0AADC8((uint64_t)&v85, v71);
      swift_endAccess();
      return (uint64_t)v19;
    }
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

id SESnapshot.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SESnapshot.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SESnapshot.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20A0A6A20()
{
  return swift_slowAlloc();
}

uint64_t sub_20A0A6A28(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void sub_20A0A6A5C()
{
  JUMPOUT(0x20BD20380);
}

unint64_t sub_20A0A6A68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2545CA150;
  if (!qword_2545CA150)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA148);
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2545CA150);
  }
  return result;
}

_QWORD *sub_20A0A6AB4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F00);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_20A0A8EA8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_20A0A6BC0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9EB8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_20A0A92E4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_20A0A6CCC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_20A0A6CEC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_20A0A6D5C(v6, v7, a3);
  v8 = *a1 + 8;
  sub_20A0E0A10();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_20A0A6D5C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_20A0A6E2C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_20A07F148((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_20A07F148((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_20A0A6E2C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_20A0E0A1C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_20A0A6FE4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_20A0E0B00();
  if (!v8)
  {
    sub_20A0E0BC0();
    __break(1u);
LABEL_17:
    result = sub_20A0E0C08();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_20A0A6FE4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_20A0A7078(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_20A0A7250(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_20A0A7250(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_20A0A7078(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_20A0A71EC(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_20A0E0AD0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_20A0E0BC0();
      __break(1u);
LABEL_10:
      v2 = sub_20A0E086C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_20A0E0C08();
    __break(1u);
LABEL_14:
    result = sub_20A0E0BC0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_20A0A71EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA288);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_20A0A7250(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA288);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

_BYTE **sub_20A0A739C(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void sub_20A0A73AC(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  LOBYTE(v4) = a2;
  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_3;
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[4];
  sub_20A074C44(v9, v8);
  if (v8 == 26)
    goto LABEL_3;
  v10 = (_QWORD *)*a3;
  v11 = sub_20A0B8934(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_20A0C8044(v16, v4 & 1);
    v11 = sub_20A0B8934(v9, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_9;
LABEL_7:
    v11 = sub_20A0E0D28();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_9:
    if ((v17 & 1) != 0)
      goto LABEL_10;
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v23 = (uint64_t *)(v22[6] + 16 * v11);
    *v23 = v9;
    v23[1] = v8;
    *(_QWORD *)(v22[7] + 8 * v11) = v7;
    v24 = v22[2];
    v15 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (!v15)
    {
      v22[2] = v25;
      if (v6 == 1)
      {
LABEL_3:
        swift_bridgeObjectRelease_n();
        return;
      }
      v4 = a1 + 9;
      v7 = 1;
      while (v7 < a1[2])
      {
        v8 = *(v4 - 1);
        v26 = *v4;
        v9 = *(v4 - 2);
        sub_20A074C44(v9, v8);
        if (v8 == 26)
          goto LABEL_3;
        v27 = (_QWORD *)*a3;
        v28 = sub_20A0B8934(v9, v8);
        v30 = v27[2];
        v31 = (v29 & 1) == 0;
        v15 = __OFADD__(v30, v31);
        v32 = v30 + v31;
        if (v15)
          goto LABEL_25;
        v17 = v29;
        if (v27[3] < v32)
        {
          sub_20A0C8044(v32, 1);
          v28 = sub_20A0B8934(v9, v8);
          if ((v17 & 1) != (v33 & 1))
            goto LABEL_7;
        }
        if ((v17 & 1) != 0)
          goto LABEL_10;
        v34 = (_QWORD *)*a3;
        *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
        v35 = (uint64_t *)(v34[6] + 16 * v28);
        *v35 = v9;
        v35[1] = v8;
        *(_QWORD *)(v34[7] + 8 * v28) = v26;
        v36 = v34[2];
        v15 = __OFADD__(v36, 1);
        v37 = v36 + 1;
        if (v15)
          goto LABEL_26;
        ++v7;
        v34[2] = v37;
        v4 += 3;
        if (v6 == v7)
          goto LABEL_3;
      }
      goto LABEL_27;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v21 = v11;
  sub_20A0C5E84();
  v11 = v21;
  if ((v17 & 1) == 0)
    goto LABEL_13;
LABEL_10:
  v19 = (void *)swift_allocError();
  swift_willThrow();
  v20 = v19;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_20A075F1C(v9, v8);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_28:
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

unint64_t sub_20A0A7750(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_20A0A7798(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_20A0E06D4();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t *sub_20A0A7830(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unint64_t v4;
  size_t v5;
  unint64_t *v6;
  void *v7;
  _QWORD v9[2];

  v2 = (unint64_t *)isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = sub_20A0A7980((_QWORD *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, (uint64_t)v2);
    if (v1)
      swift_willThrow();
    else
      return v6;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v2 = sub_20A0A7980((unint64_t *)v7, v4, (uint64_t)v2);
    MEMORY[0x20BD20380](v7, -1, -1);
  }
  return v2;
}

unint64_t *sub_20A0A7980(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_20A0A7AC8(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_20A0A7AC8(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_20A0A7AC8(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12))
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_20A0A7AC8(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_20A0A7AC8(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_20A0A7AC8(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_20A0A7AC8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v33;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) != a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
    v7 = sub_20A0E0BFC();
    v8 = v7;
    v33 = a2;
    if (a2 < 1)
      v9 = 0;
    else
      v9 = *a1;
    v10 = 0;
    v11 = v7 + 64;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v10 << 6);
      }
      else
      {
        v14 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_43;
        if (v14 >= v33)
          return v8;
        v15 = a1[v14];
        ++v10;
        if (!v15)
        {
          v10 = v14 + 1;
          if (v14 + 1 >= v33)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v10 = v14 + 2;
            if (v14 + 2 >= v33)
              return v8;
            v15 = a1[v10];
            if (!v15)
            {
              v16 = v14 + 3;
              if (v16 >= v33)
                return v8;
              v15 = a1[v16];
              if (!v15)
              {
                while (1)
                {
                  v10 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_44;
                  if (v10 >= v33)
                    return v8;
                  v15 = a1[v10];
                  ++v16;
                  if (v15)
                    goto LABEL_24;
                }
              }
              v10 = v16;
            }
          }
        }
LABEL_24:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v13);
      sub_20A0E0D7C();
      switch(v18)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
          sub_20A0E0D88();
          break;
        default:
          sub_20A0E0D88();
          swift_bridgeObjectRetain();
          sub_20A0E0848();
          break;
      }
      v21 = sub_20A0E0D94();
      v22 = -1 << *(_BYTE *)(v8 + 32);
      v23 = v21 & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) != 0)
      {
        v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_38;
      }
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          JUMPOUT(0x20A0A7ED4);
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
LABEL_38:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v25);
      *v30 = v19;
      v30[1] = v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v25) = v20;
      ++*(_QWORD *)(v8 + 16);
      if (__OFSUB__(v5--, 1))
        goto LABEL_42;
      if (!v5)
        return v8;
    }
  }
  swift_retain();
  return v4;
}

uint64_t sub_20A0A7F3C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17[5];
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = a3;
  v5 = a2;
  v20 = a2;
  v21 = a3;
  v7 = *v3;
  v18 = a2;
  v19 = a3;
  sub_20A0E0D7C();
  swift_bridgeObjectRetain();
  CredentialType.hash(into:)();
  v8 = sub_20A0E0D94();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      v17[0] = *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v10);
      if ((_s9SEService14CredentialTypeO2eeoiySbAC_ACtFZ_0((uint64_t *)v17, &v20) & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v5 = v20;
        v4 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_20A075F1C(v5, v4);
    v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    *a1 = *v14;
    a1[1] = v16;
    sub_20A074C44(v15, v16);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v17[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_20A074C44(v5, v4);
    sub_20A0A856C(v5, v4, v10, isUniquelyReferenced_nonNull_native);
    *v3 = *(_QWORD *)&v17[0];
    swift_bridgeObjectRelease();
    *a1 = v5;
    a1[1] = v4;
    return 1;
  }
}

uint64_t sub_20A0A80C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA280);
  v3 = sub_20A0E0AB8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_40;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = (_QWORD *)(v2 + 56);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_41;
    if (v15 >= v8)
      break;
    v16 = v31[v15];
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        break;
      v16 = v31[v10];
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          break;
        v16 = v31[v10];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v8)
            break;
          v16 = v31[v17];
          if (!v16)
          {
            while (1)
            {
              v10 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v10 >= v8)
                goto LABEL_36;
              v16 = v31[v10];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v10 = v17;
        }
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_20A0E0D7C();
    switch(v19)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
        sub_20A0E0D88();
        break;
      default:
        sub_20A0E0D88();
        sub_20A0E0848();
        break;
    }
    v21 = sub_20A0E0D94();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x20A0A8504);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v9 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v20;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  swift_release();
  v1 = v0;
  v29 = 1 << *(_BYTE *)(v2 + 32);
  if (v29 > 63)
    bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v29;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_20A0A856C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18[5];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];

  v7 = result;
  v21[0] = result;
  v21[1] = a2;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0)
    goto LABEL_12;
  if ((a4 & 1) != 0)
  {
    sub_20A0A80C0();
  }
  else
  {
    if (v9 > v8)
    {
      result = (uint64_t)sub_20A0A86D0();
      goto LABEL_12;
    }
    sub_20A0A8880();
  }
  v10 = *v4;
  v19 = v7;
  v20 = a2;
  sub_20A0E0D7C();
  CredentialType.hash(into:)();
  result = sub_20A0E0D94();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a3 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      v18[0] = *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * a3);
      result = _s9SEService14CredentialTypeO2eeoiySbAC_ACtFZ_0((uint64_t *)v18, v21);
      if ((result & 1) != 0)
        goto LABEL_15;
      a3 = (a3 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_12:
  v13 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v14 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * a3);
  *v14 = v7;
  v14[1] = a2;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (!v16)
  {
    *(_QWORD *)(v13 + 16) = v17;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_20A0E0D1C();
  __break(1u);
  return result;
}

void *sub_20A0A86D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA280);
  v2 = *v0;
  v3 = sub_20A0E0AAC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_20A074C44(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_20A0A8880()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA280);
  v3 = sub_20A0E0AB8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_38;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v30 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  swift_retain();
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v15 >= v30)
      break;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v30)
        break;
      v16 = *(_QWORD *)(v6 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v30)
          break;
        v16 = *(_QWORD *)(v6 + 8 * v10);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v30)
            break;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v10 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_40;
              if (v10 >= v30)
                goto LABEL_36;
              v16 = *(_QWORD *)(v6 + 8 * v10);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v10 = v17;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    sub_20A0E0D7C();
    switch(v19)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
        sub_20A0E0D88();
        break;
      default:
        sub_20A0E0D88();
        swift_bridgeObjectRetain();
        sub_20A0E0848();
        break;
    }
    v21 = sub_20A0E0D94();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x20A0A8C94);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v9 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v9 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v20;
    v12[1] = v19;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_36:
  result = swift_release_n();
  v1 = v0;
LABEL_38:
  *v1 = v4;
  return result;
}

uint64_t sub_20A0A8CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)a1;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20A074C44(v2, v3);
}

uint64_t sub_20A0A8D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  _QWORD v21[3];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v8);
    v1[3] = v6;
    v1[4] = v7;
    v13 = (void (*)(_QWORD *))v1[5];
    v21[0] = v10;
    v21[1] = v11;
    v21[2] = v12;
    sub_20A074C44(v10, v11);
    v13(v21);
    return sub_20A075F1C(v10, v11);
  }
  v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)(v1[2] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v1[1];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        v7 = (v18 - 1) & v18;
        v8 = __clz(__rbit64(v18)) + (v15 << 6);
        v6 = v15;
        goto LABEL_3;
      }
      v19 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          v15 = v19;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * (v5 + 3));
          if (v18)
          {
            v15 = v5 + 3;
            goto LABEL_7;
          }
          v19 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v19);
            if (v18)
              goto LABEL_10;
            v15 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v16)
            {
              v18 = *(_QWORD *)(v17 + 8 * v15);
              if (v18)
                goto LABEL_7;
              v6 = v16 - 1;
              v20 = v5 + 6;
              while (v16 != v20)
              {
                v18 = *(_QWORD *)(v17 + 8 * v20++);
                if (v18)
                {
                  v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_OWORD *)a1 = xmmword_20A0E6A20;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_20A0A8EA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A0A8F98(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_20A097258(0, v3, 0);
    result = v21;
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC9SEService10SESnapshot_dataSource + 8);
    v7 = (unint64_t *)(a1 + 40);
    v19 = v6;
    while (1)
    {
      v20 = result;
      v9 = *(v7 - 1);
      v8 = *v7;
      sub_20A074C44(v9, *v7);
      sub_20A074C44(v9, v8);
      sub_20A074C44(v9, v8);
      sub_20A074C44(v9, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_20A0E0824();
      v10 = sub_20A0E0830();
      v12 = v11;
      swift_bridgeObjectRelease();
      sub_20A075F1C(v9, v8);
      if (!*(_QWORD *)(v6 + 16))
        break;
      v13 = sub_20A0B8998(v10, v12);
      if ((v14 & 1) == 0)
        break;
      v15 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 32 * v13 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_20A075F1C(v9, v8);
      result = v20;
      v17 = *(_QWORD *)(v20 + 16);
      v16 = *(_QWORD *)(v20 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_20A097258(v16 > 1, v17 + 1, 1);
        result = v20;
      }
      v7 += 2;
      *(_QWORD *)(result + 16) = v17 + 1;
      v18 = (_QWORD *)(result + 24 * v17);
      v18[4] = v9;
      v18[5] = v8;
      v18[6] = v15;
      --v3;
      v6 = v19;
      if (!v3)
        return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_20A0A91C0(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13[2];
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_20A097274(0, v2, 0);
    v3 = v14;
    v5 = (unint64_t *)(a1 + 40);
    while (1)
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v13[0] = v6;
      v13[1] = v7;
      sub_20A074C44(v6, v7);
      v8 = SESnapshot.usage(ofCredential:)(v13);
      if (v1)
        break;
      v9 = v8;
      sub_20A075F1C(v6, v7);
      v14 = v3;
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_20A097274(v10 > 1, v11 + 1, 1);
        v3 = v14;
      }
      v5 += 2;
      *(_QWORD *)(v3 + 16) = v11 + 1;
      *(_QWORD *)(v3 + 8 * v11 + 32) = v9;
      if (!--v2)
        return v3;
    }
    sub_20A075F1C(v6, v7);
    swift_release();
  }
  return v3;
}

char *sub_20A0A92E4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_20A0E0C08();
  __break(1u);
  return result;
}

uint64_t sub_20A0A93CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 2128) = a4;
  *(_QWORD *)(v5 + 2120) = a3;
  *(_QWORD *)(v5 + 2112) = a2;
  *(_QWORD *)(v5 + 2104) = a1;
  *(_OWORD *)(v5 + 2136) = *(_OWORD *)a5;
  *(_QWORD *)(v5 + 2152) = *(_QWORD *)(a5 + 16);
  return swift_task_switch();
}

uint64_t sub_20A0A9404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 2136);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 2152);
    v3 = *(_QWORD *)(v0 + 2144);
  }
  else
  {
    v5 = sub_20A0A0A5C(MEMORY[0x24BEE4AF8]);
    SERDataSource.init(credentialSizes:)((Swift::OpaquePointer)v5);
    if (v6)
      return (*(uint64_t (**)(void))(v0 + 8))();
    v1 = v13;
    v3 = v14;
    v2 = v15;
  }
  *(_QWORD *)(v0 + 2176) = v2;
  *(_QWORD *)(v0 + 2168) = v3;
  *(_QWORD *)(v0 + 2160) = v1;
  sub_20A0AB1F8(*(_QWORD *)(v0 + 2128), v0 + 16, &qword_2545CA168);
  v4 = *(_QWORD *)(v0 + 2136);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_20A0AB2EC((__int128 *)(v0 + 16), v0 + 2016);
    sub_20A0AB23C(v4);
  }
  else
  {
    *(_QWORD *)(v0 + 2040) = &type metadata for DefaultSEStateInfoProvider;
    *(_QWORD *)(v0 + 2048) = &off_24C2BC760;
    *(_QWORD *)(v0 + 2016) = v1;
    *(_QWORD *)(v0 + 2024) = v3;
    *(_QWORD *)(v0 + 2032) = v2;
    sub_20A0AB23C(v4);
    sub_20A0AB23C(v1);
    sub_20A0801F8(v0 + 16, &qword_2545CA168);
  }
  v8 = *(_QWORD *)(v0 + 2120);
  v9 = *(_QWORD *)(v0 + 2112);
  v10 = *(void **)(v0 + 2104);
  sub_20A0AB274(v0 + 2016, v0 + 1976);
  v11 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2184) = v11;
  sub_20A0AB2EC((__int128 *)(v0 + 1976), (uint64_t)(v11 + 2));
  v11[7] = v10;
  v11[8] = v9;
  v11[9] = v8;
  v12 = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  type metadata accessor for SEState();
  swift_asyncLet_begin();
  type metadata accessor for ReservationState();
  swift_asyncLet_begin();
  type metadata accessor for DeviceCapability();
  swift_asyncLet_begin();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_20A0A9664()
{
  uint64_t v0;
  _QWORD *v1;
  void *v3;
  id v4;

  v1[274] = v0;
  if (v0)
  {
    sub_20A0AB388(v1[270]);
    return swift_asyncLet_finish();
  }
  else
  {
    v3 = (void *)v1[260];
    v1[275] = v3;
    v4 = v3;
    return swift_asyncLet_get_throwing();
  }
}

uint64_t sub_20A0A9704()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;

  v1[276] = v0;
  if (!v0)
    return swift_task_switch();
  v2 = (void *)v1[275];
  sub_20A0AB388(v1[270]);

  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9794()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 2176);
  v2 = *(void **)(v0 + 2096);
  *(_QWORD *)(v0 + 2216) = v2;
  *(_OWORD *)(v0 + 2056) = *(_OWORD *)(v0 + 2160);
  *(_QWORD *)(v0 + 2072) = v1;
  v3 = v2;
  return swift_asyncLet_get_throwing();
}

uint64_t sub_20A0A9800()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;

  v1[278] = v0;
  if (v0)
  {
    v2 = (void *)v1[277];
    v3 = (void *)v1[275];
    sub_20A0AB388(v1[270]);

  }
  return swift_task_switch();
}

uint64_t sub_20A0A9868()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v1 = (void *)v0[277];
  v2 = (void *)v0[275];
  v3 = (void *)v0[261];
  objc_allocWithZone((Class)type metadata accessor for SESnapshot());
  v4 = sub_20A0A59B0(v2, v1, 0, (uint64_t)(v0 + 257), v3);
  v0[279] = v4;
  if (qword_2545C8E60 != -1)
    swift_once();
  v5 = sub_20A0E0740();
  __swift_project_value_buffer(v5, (uint64_t)qword_2545D79F0);
  v6 = v4;
  v7 = sub_20A0E0728();
  v8 = sub_20A0E0980();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v10 = v16;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_20A0E068C();
    v0[242] = sub_20A0A6D5C(v11, v12, &v16);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    *(_WORD *)(v9 + 12) = 2080;
    v13 = SESnapshot.debugDescription.getter();
    v0[242] = sub_20A0A6D5C(v13, v14, &v16);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, v7, v8, "Created new snapshot, UUID: %s! Debug code:\n%s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v10, -1, -1);
    MEMORY[0x20BD20380](v9, -1, -1);
  }
  else
  {

  }
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9AC4()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9AD8()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9AF0()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9B04()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9B1C()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9B30()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 2016);
  swift_release_n();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2232));
}

uint64_t sub_20A0A9B78()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9B8C()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9BA4()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9BB8()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9BD0()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9BE4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 2016);
  swift_release_n();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0A9C28()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9C3C()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9C54()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9C68()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9C80()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9C94()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 2016);
  swift_release_n();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0A9CD8()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9CF0()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9D04()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9D1C()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9D30()
{
  return swift_asyncLet_finish();
}

uint64_t sub_20A0A9D48()
{
  return swift_task_switch();
}

uint64_t sub_20A0A9D5C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 2016);
  swift_release_n();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_20A0A9DA0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2545CA040;
  if (!qword_2545CA040)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA180);
    v2[0] = sub_20A07FC10();
    v2[1] = MEMORY[0x24BEE1770];
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE04C0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_2545CA040);
  }
  return result;
}

uint64_t sub_20A0A9E0C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap, a2);
}

uint64_t sub_20A0A9E18(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap);
}

uint64_t sub_20A0A9E24(uint64_t a1)
{
  destroy for SEMemoryCalculator();
  return a1;
}

uint64_t sub_20A0A9E58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t *v23;
  uint64_t v24;

  v23 = (unint64_t *)result;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    while (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      if (*(_QWORD *)(a4 + 16))
      {
LABEL_19:
        v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v12);
        v17 = *v16;
        v18 = v16[1];
        sub_20A074C44(*v16, v18);
        v19 = sub_20A0B8934(v17, v18);
        if ((v20 & 1) != 0)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v19);
          result = sub_20A075F1C(v17, v18);
          if (!v21)
          {
            *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
            v13 = __OFADD__(v24++, 1);
            if (v13)
              goto LABEL_31;
          }
        }
        else
        {
          result = sub_20A075F1C(v17, v18);
        }
      }
    }
    v13 = __OFADD__(v5++, 1);
    if (v13)
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v5 >= v10)
      return sub_20A0A7AC8(v23, a2, v24, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    if (!v14)
      break;
LABEL_18:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_19;
  }
  v15 = v5 + 1;
  if (v5 + 1 >= v10)
    return sub_20A0A7AC8(v23, a2, v24, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v5 + 2;
  if (v5 + 2 >= v10)
    return sub_20A0A7AC8(v23, a2, v24, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v5 + 3;
  if (v5 + 3 >= v10)
    return sub_20A0A7AC8(v23, a2, v24, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v5 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return sub_20A0A7AC8(v23, a2, v24, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_20A0AA03C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = a3;
  v27 = (unint64_t *)result;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v29 = a3 + 64;
  while (1)
  {
    while (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      if (*(_QWORD *)(a4 + 16))
      {
LABEL_19:
        v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v13);
        v18 = *v17;
        v19 = v17[1];
        sub_20A074C44(*v17, v19);
        v20 = sub_20A0B8934(v18, v19);
        if ((v21 & 1) != 0)
        {
          v22 = v11;
          v23 = v5;
          v24 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v20);
          result = sub_20A075F1C(v18, v19);
          v25 = v24 == 1;
          v5 = v23;
          v11 = v22;
          v7 = v29;
          if (v25)
          {
            *(unint64_t *)((char *)v27 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
            v14 = __OFADD__(v28++, 1);
            if (v14)
              goto LABEL_32;
          }
        }
        else
        {
          result = sub_20A075F1C(v18, v19);
        }
      }
    }
    v14 = __OFADD__(v6++, 1);
    if (v14)
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v6 >= v11)
      return sub_20A0A7AC8(v27, a2, v28, v5);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    if (!v15)
      break;
LABEL_18:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_19;
  }
  v16 = v6 + 1;
  if (v6 + 1 >= v11)
    return sub_20A0A7AC8(v27, a2, v28, v5);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v6 + 2;
  if (v6 + 2 >= v11)
    return sub_20A0A7AC8(v27, a2, v28, v5);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v6 + 3;
  if (v6 + 3 >= v11)
    return sub_20A0A7AC8(v27, a2, v28, v5);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v6 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return sub_20A0A7AC8(v27, a2, v28, v5);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_20A0AA238(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    v12 = a3((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    v12 = a3((char *)v13, v9, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x20BD20380](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_20A0AA3F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC9SEService11MemoryUsage_cor, a2);
}

uint64_t sub_20A0AA3FC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_cor);
}

uint64_t sub_20A0AA408@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC9SEService11MemoryUsage_cod, a2);
}

uint64_t sub_20A0AA414(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_cod);
}

uint64_t sub_20A0AA420@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices, a2);
}

uint64_t sub_20A0AA42C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices);
}

uint64_t sub_20A0AA438(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t *i;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;

  v5 = a1[2];
  swift_bridgeObjectRetain();
  if (!v5)
    return swift_bridgeObjectRelease();
  v7 = a1[5];
  v6 = a1[6];
  v8 = a1[4];
  sub_20A074C44(v8, v7);
  if (v7 == 26)
    return swift_bridgeObjectRelease();
  v9 = (_QWORD *)*a3;
  v11 = sub_20A0B8934(v8, v7);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      v18 = (_QWORD *)*a3;
      if ((v10 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      sub_20A0C5588();
      v18 = (_QWORD *)*a3;
      if ((v15 & 1) == 0)
        goto LABEL_14;
    }
    goto LABEL_10;
  }
  sub_20A0C6B90(v14, a2 & 1);
  v16 = sub_20A0B8934(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    v18 = (_QWORD *)*a3;
    if ((v15 & 1) == 0)
    {
LABEL_14:
      v18[(v11 >> 6) + 8] |= 1 << v11;
      v22 = (uint64_t *)(v18[6] + 16 * v11);
      *v22 = v8;
      v22[1] = v7;
      *(_QWORD *)(v18[7] + 8 * v11) = v6;
      v23 = v18[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (!v24)
      {
        v18[2] = v25;
        v21 = v5 - 1;
        if (!v21)
          return swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      goto LABEL_30;
    }
LABEL_10:
    v19 = v6;
    v20 = *(_QWORD *)(v18[7] + 8 * v11);
    sub_20A075F1C(v8, v7);
    if (!__OFADD__(v20, v19))
    {
      *(_QWORD *)(v18[7] + 8 * v11) = v20 + v19;
      v21 = v5 - 1;
      if (!v21)
        return swift_bridgeObjectRelease();
LABEL_17:
      for (i = a1 + 9; ; i += 3)
      {
        v32 = *(i - 1);
        v31 = *i;
        v33 = *(i - 2);
        sub_20A074C44(v33, v32);
        if (v32 == 26)
          break;
        v34 = (_QWORD *)*a3;
        v36 = sub_20A0B8934(v33, v32);
        v37 = v34[2];
        v38 = (v35 & 1) == 0;
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          goto LABEL_29;
        v40 = v35;
        if (v34[3] < v39)
        {
          sub_20A0C6B90(v39, 1);
          v41 = sub_20A0B8934(v33, v32);
          if ((v40 & 1) != (v42 & 1))
            goto LABEL_32;
          v36 = v41;
        }
        v43 = (_QWORD *)*a3;
        if ((v40 & 1) != 0)
        {
          v44 = *(_QWORD *)(v43[7] + 8 * v36);
          sub_20A075F1C(v33, v32);
          if (__OFADD__(v44, v31))
            goto LABEL_31;
          *(_QWORD *)(v43[7] + 8 * v36) = v44 + v31;
        }
        else
        {
          v43[(v36 >> 6) + 8] |= 1 << v36;
          v28 = (uint64_t *)(v43[6] + 16 * v36);
          *v28 = v33;
          v28[1] = v32;
          *(_QWORD *)(v43[7] + 8 * v36) = v31;
          v29 = v43[2];
          v24 = __OFADD__(v29, 1);
          v30 = v29 + 1;
          if (v24)
            goto LABEL_30;
          v43[2] = v30;
        }
        if (!--v21)
          return swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    }
    goto LABEL_31;
  }
LABEL_32:
  result = sub_20A0E0D28();
  __break(1u);
  return result;
}

uint64_t sub_20A0AA6EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_20A08558C();
  result = sub_20A0E0950();
  v8 = result;
  if (v2)
  {
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      sub_20A074C44(v5, *v4);
      sub_20A0A7F3C(v7, v5, v6);
      sub_20A075F1C(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_20A0AA784()
{
  return swift_deallocObject();
}

void sub_20A0AA794(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (qword_2545C8E60 != -1)
    swift_once();
  v7 = sub_20A0E0740();
  __swift_project_value_buffer(v7, (uint64_t)qword_2545D79F0);
  sub_20A074C44(a1, a2);
  swift_retain();
  sub_20A074C44(a1, a2);
  swift_retain();
  v8 = sub_20A0E0728();
  v9 = sub_20A0E0980();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v17 = v11;
    *(_DWORD *)v10 = 136315906;
    sub_20A0A6D5C(0xD000000000000019, 0x800000020A0F1CF0, &v17);
    sub_20A0E0A10();
    *(_WORD *)(v10 + 12) = 2080;
    sub_20A074C44(a1, a2);
    v12 = sub_20A0E0824();
    sub_20A0A6D5C(v12, v13, &v17);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A075F1C(a1, a2);
    sub_20A075F1C(a1, a2);
    *(_WORD *)(v10 + 22) = 2048;
    sub_20A0E0A10();
    *(_WORD *)(v10 + 32) = 2080;
    swift_beginAccess();
    if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    {
      v14 = 0xE500000000000000;
      v15 = 0x726F727245;
    }
    else
    {
      sub_20A085548();
      v15 = sub_20A0E0A28();
      v14 = v16;
    }
    sub_20A0A6D5C(v15, v14, &v17);
    sub_20A0E0A10();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v8, v9, "%s %s %ld => %s", (uint8_t *)v10, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v11, -1, -1);
    MEMORY[0x20BD20380](v10, -1, -1);

  }
  else
  {
    sub_20A075F1C(a1, a2);
    sub_20A075F1C(a1, a2);

    swift_release_n();
  }
}

uint64_t sub_20A0AAAA8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24) >= 0x1BuLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_20A0AAAD4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (qword_2545C8E60 != -1)
    swift_once();
  v6 = sub_20A0E0740();
  __swift_project_value_buffer(v6, (uint64_t)qword_2545D79F0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v7 = sub_20A0E0728();
  v8 = sub_20A0E0980();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315650;
    sub_20A0A6D5C(0xD000000000000016, 0x800000020A0F1CD0, &v15);
    sub_20A0E0A10();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_20A0A6D5C(a1, a2, &v15);
    sub_20A0E0A10();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 22) = 2080;
    swift_beginAccess();
    v11 = *(_QWORD *)(a3 + 24);
    if (v11 == 26)
    {
      v12 = 0xE500000000000000;
      v13 = 0x726F727245;
    }
    else
    {
      sub_20A074C44(*(_QWORD *)(a3 + 16), v11);
      v13 = sub_20A0E0824();
      v12 = v14;
    }
    sub_20A0A6D5C(v13, v12, &v15);
    sub_20A0E0A10();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20A048000, v7, v8, "%s %s => %s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v10, -1, -1);
    MEMORY[0x20BD20380](v9, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
}

unint64_t sub_20A0AAD70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2545C9FE0;
  if (!qword_2545C9FE0)
  {
    v1 = sub_20A0801C0(255, (unint64_t *)&qword_2545C9460);
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2545C9FE0);
  }
  return result;
}

uint64_t sub_20A0AADC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_20A0AAE14()
{
  unint64_t result;

  result = qword_2545CA228;
  if (!qword_2545CA228)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SESnapshot.CanFitResult.FailureReason, &type metadata for SESnapshot.CanFitResult.FailureReason);
    atomic_store(result, (unint64_t *)&qword_2545CA228);
  }
  return result;
}

unint64_t sub_20A0AAE5C()
{
  unint64_t result;

  result = qword_2545CA230;
  if (!qword_2545CA230)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SESnapshot.CanFitResult.FailureReason, &type metadata for SESnapshot.CanFitResult.FailureReason);
    atomic_store(result, (unint64_t *)&qword_2545CA230);
  }
  return result;
}

unint64_t sub_20A0AAEA4()
{
  unint64_t result;

  result = qword_2545CA238;
  if (!qword_2545CA238)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SESnapshot.CanFitResult.FailureReason, &type metadata for SESnapshot.CanFitResult.FailureReason);
    atomic_store(result, (unint64_t *)&qword_2545CA238);
  }
  return result;
}

unint64_t sub_20A0AAEEC()
{
  unint64_t result;

  result = qword_2545CA240;
  if (!qword_2545CA240)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SESnapshot.CanFitResult.FailureReason, &type metadata for SESnapshot.CanFitResult.FailureReason);
    atomic_store(result, (unint64_t *)&qword_2545CA240);
  }
  return result;
}

uint64_t sub_20A0AAF30()
{
  return type metadata accessor for SESnapshot();
}

uint64_t type metadata accessor for SESnapshot()
{
  uint64_t result;

  result = qword_2545CA250;
  if (!qword_2545CA250)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_20A0AAF74()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20A0E06D4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SESnapshot()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SESnapshot.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SESnapshot.CanFitResult(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_20A0AB090 + 4 * byte_20A0EA760[v4]))();
}

uint64_t sub_20A0AB0A8(unsigned __int16 *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (a1[1])
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  return v1;
}

void sub_20A0AB0B4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2))
    JUMPOUT(0x20A0AB0BCLL);
  JUMPOUT(0x20A0AB0CCLL);
}

uint64_t storeEnumTagSinglePayload for SESnapshot.CanFitResult(_WORD *a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3)
    v5 = v5;
  else
    v5 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_20A0AB158 + 4 * byte_20A0EA76A[v5]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_20A0AB138 + 4 * byte_20A0EA765[v5]))();
}

uint64_t sub_20A0AB138(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_20A0AB158(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_20A0AB160(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_20A0AB168(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_20A0AB170(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_20A0AB178(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_20A0AB184(unsigned __int8 *a1)
{
  if (a1[1])
    return (*a1 | (a1[1] << 8)) - 255;
  else
    return 0;
}

_BYTE *sub_20A0AB1A4(_BYTE *result, int a2)
{
  if (a2)
  {
    *result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SESnapshot.CanFitResult()
{
  return &type metadata for SESnapshot.CanFitResult;
}

ValueMetadata *type metadata accessor for SESnapshot.CanFitResult.FailureReason()
{
  return &type metadata for SESnapshot.CanFitResult.FailureReason;
}

_OWORD *sub_20A0AB1E8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_20A0AB1F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20A0AB23C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_20A0AB274(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_20A0AB2B8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_20A0AB2EC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_20A0AB304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v4 = v1 + 16;
  v8 = *(_OWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_20A09B45C;
  *(_QWORD *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v4;
  return swift_task_switch();
}

uint64_t sub_20A0AB388(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_20A0AB3C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_20A0BB8B0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_20A0AB3CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_20A0BB894(a1, v1[2], v1[3], v1[4]);
}

uint64_t dispatch thunk of SEStateInfoProvider.getSEState(with:seid:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_20A0AB47C;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t sub_20A0AB47C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t destroy for DefaultSEStateInfoProvider()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s9SEService13SERDataSourceVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SERDataSource(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SERDataSource(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SERDataSource(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SERDataSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultSEStateInfoProvider()
{
  return &type metadata for DefaultSEStateInfoProvider;
}

void sub_20A0AB6B8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_20A0AB710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = BYTE6(v22);
  if (BYTE6(v22))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v22);
    sub_20A0972AC(0, BYTE6(v22), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v6 = (int)a1;
      else
        v6 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v3 - 136) = v22 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v6 < (int)a1 || v6 >= a1 >> 32)
            goto LABEL_29;
          v7 = sub_20A0E0584();
          if (!v7)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v8 = v7;
          v9 = sub_20A0E059C();
          v10 = v6 - v9;
          if (__OFSUB__(v6, v9))
            goto LABEL_32;
        }
        else
        {
          if (v6 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v6 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v12 = sub_20A0E0584();
          if (!v12)
            goto LABEL_36;
          v8 = v12;
          v13 = sub_20A0E059C();
          v10 = v6 - v13;
          if (__OFSUB__(v6, v13))
            goto LABEL_34;
        }
        v11 = *(_BYTE *)(v8 + v10);
      }
      else
      {
        if (v6 >= BYTE6(v22))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v22;
        *(_BYTE *)(v3 - 108) = BYTE2(v22);
        *(_BYTE *)(v3 - 107) = BYTE3(v22);
        *(_BYTE *)(v3 - 106) = BYTE4(v22);
        *(_BYTE *)(v3 - 105) = BYTE5(v22);
        v11 = *(_BYTE *)(v3 - 118 + v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA328);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20A0EA0E0;
      *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE4260];
      *(_QWORD *)(v14 + 64) = MEMORY[0x24BEE42B0];
      *(_BYTE *)(v14 + 32) = v11;
      v15 = sub_20A0E0818();
      v17 = v16;
      *(_QWORD *)(v3 - 104) = v2;
      v19 = *(_QWORD *)(v2 + 16);
      v18 = *(_QWORD *)(v2 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_20A0972AC(v18 > 1, v19 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v19 + 1;
      v20 = v2 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      ++v6;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x20A0ABA28);
  }
  return v2;
}

uint64_t sub_20A0ABA50()
{
  _QWORD *v0;

  MEMORY[0x20BD1F408]();
  if (*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_20A0E08D8();
  sub_20A0E08F0();
  return sub_20A0E08CC();
}

double sub_20A0ABAB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_20A0B8998(a1, a2), (v7 & 1) != 0))
  {
    sub_20A07F148(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

void *sub_20A0ABB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  void *v6;
  id v7;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_20A0B8998(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(void **)(*(_QWORD *)(a3 + 56) + 8 * v4);
  v7 = v6;
  return v6;
}

uint64_t sub_20A0ABB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_20A0C15C4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = sub_20A0B8998(a2, a3);
    v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      v12 = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v3;
      v17 = *v4;
      *v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        sub_20A0C5CD4();
        v13 = v17;
      }
      swift_bridgeObjectRelease();
      v14 = *(void **)(*(_QWORD *)(v13 + 56) + 8 * v9);
      sub_20A0C1030(v9, v13);
      *v4 = v13;

      swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_20A0ABC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 792) = a3;
  *(_QWORD *)(v4 + 784) = a2;
  *(_QWORD *)(v4 + 776) = a1;
  v5 = sub_20A0E0740();
  *(_QWORD *)(v4 + 800) = v5;
  *(_QWORD *)(v4 + 808) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 816) = swift_task_alloc();
  *(_QWORD *)(v4 + 824) = swift_task_alloc();
  *(_QWORD *)(v4 + 832) = swift_task_alloc();
  *(_QWORD *)(v4 + 840) = swift_task_alloc();
  *(_QWORD *)(v4 + 848) = swift_task_alloc();
  *(_OWORD *)(v4 + 856) = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 872) = *(_QWORD *)(v3 + 16);
  return swift_task_switch();
}

void sub_20A0ABD6C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  id v64;
  char v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unint64_t v81;
  char isUniquelyReferenced_nonNull_native;
  void *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  objc_super *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  char v122;
  char *v123;
  uint64_t (**v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  objc_super *v139;
  uint64_t v140;
  char v141;
  objc_super *v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  os_log_type_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint8_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  id v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t (**v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  unint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v198)(uint64_t, uint64_t, uint64_t);
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t (*v210)(uint64_t, uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint8_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  objc_class *v224;
  char *v225;
  char *v226;
  objc_super **v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  id v231;
  id v232;
  void *v233;
  void *v234;
  id v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v238)(uint64_t, uint64_t, uint64_t);
  uint64_t v239;
  uint64_t v240;
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v242)(uint64_t, uint64_t, uint64_t);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t (*v247)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v248)(uint64_t, uint64_t, uint64_t);
  uint64_t v249;
  const char *v250;
  unint64_t v251;
  void *v252;
  id v253;
  uint64_t (*v254)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v255)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v256)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v257)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v258)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v259)(uint64_t, uint64_t, uint64_t);
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  id v265;
  id v266;
  uint64_t v267;
  id v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char v272;
  unint64_t v273;
  uint64_t v274;
  _BOOL8 v275;
  uint64_t v276;
  char v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  BOOL v296;
  BOOL v297;
  char v298;
  BOOL v299;
  char v300;
  uint64_t v301;
  uint64_t (*v302)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v303)(uint64_t, uint64_t, uint64_t);
  uint64_t v304;
  uint64_t v305;
  objc_class *v306;
  _BYTE *v307;
  id v308;
  uint64_t (*v309)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v310)(uint64_t, uint64_t, uint64_t);
  uint64_t v311;
  char *v312;
  uint64_t (*v313)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v314;
  NSObject *oslog;
  os_log_type_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  int64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _OWORD *v324;
  objc_super *v325;
  objc_super *v326;
  objc_super *v327;
  objc_super *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  uint64_t v334;
  _OWORD *v335;
  objc_super *v336;
  uint64_t v337;
  uint64_t (*v338)(uint64_t, uint64_t, uint64_t);
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  NSObject *v361;
  uint64_t v362;
  uint64_t (*v363)(uint64_t, uint64_t, uint64_t);
  uint64_t v364;
  _QWORD v365[2];
  __int128 v366;
  uint64_t v367;
  uint64_t (*v368[2])(uint64_t, uint64_t, uint64_t);
  uint64_t v369;
  uint64_t v370;

  v370 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 776);
  *(_QWORD *)(v0 + 744) = 0;
  v2 = objc_msgSend(v1, sel_stateInformationWithoutFilteringWithError_, v0 + 744);
  v3 = *(void **)(v0 + 744);
  v4 = MEMORY[0x24BEE4AD8];
  if (!v2)
  {
    v8 = v3;
    v9 = (void *)sub_20A0E0620();

    swift_willThrow();
    goto LABEL_22;
  }
  v5 = v2;
  v6 = sub_20A0E08B4();
  v7 = v3;

  if (*(_QWORD *)(v6 + 16))
  {
    sub_20A07F148(v6 + 32, v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 40))
  {
    v19 = v0 + 16;
LABEL_20:
    sub_20A0B0208(v19);
    goto LABEL_22;
  }
  v10 = (uint64_t *)(v0 + 680);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA2F8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    v20 = *(void **)(v0 + 776);
    v368[0] = 0;
    v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))0xE000000000000000;
    sub_20A0E0AC4();
    *(_QWORD *)&v366 = 0;
    *((_QWORD *)&v366 + 1) = 0xE000000000000000;
    sub_20A0E0854();
    *(_QWORD *)(v0 + 640) = 0;
    v21 = objc_msgSend(v20, sel_stateInformationWithError_, v0 + 640);
    v22 = *(void **)(v0 + 640);
    if (v21)
    {
      v23 = v21;
      v24 = sub_20A0E08B4();
      v25 = v22;

      MEMORY[0x20BD1F42C](v24, v4 + 8);
      swift_bridgeObjectRelease();
      sub_20A0E0854();
      swift_bridgeObjectRelease();
      v26 = *((_QWORD *)&v366 + 1);
      sub_20A07DC44();
      swift_allocError();
      *(_QWORD *)v27 = v366;
      *(_QWORD *)(v27 + 8) = v26;
      *(_BYTE *)(v27 + 16) = 1;
    }
    else
    {
      v28 = v22;
      swift_bridgeObjectRelease();
      sub_20A0E0620();

    }
LABEL_26:
    swift_willThrow();
    goto LABEL_27;
  }
  v11 = *v10;
  if (!*(_QWORD *)(*v10 + 16))
    goto LABEL_21;
  v12 = sub_20A0B8998(0x656E6961746E6F63, 0xEA00000000007372);
  if ((v13 & 1) == 0)
    goto LABEL_21;
  sub_20A07F148(*(_QWORD *)(v11 + 56) + 32 * v12, v0 + 144);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA300);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_21;
  v14 = *(_QWORD **)(v0 + 712);
  sub_20A0ABAB0(0x736567616B636170, 0xE800000000000000, v11, (_OWORD *)(v0 + 208));
  if (!*(_QWORD *)(v0 + 232))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v0 + 208;
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_33;
  v15 = v0 + 272;
  v16 = *(_QWORD *)(v0 + 736);
  sub_20A0ABAB0(0x6572617764726168, 0xEC00000065707954, v11, (_OWORD *)(v0 + 272));
  if (!*(_QWORD *)(v0 + 296))
  {
    swift_bridgeObjectRelease();
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v15;
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v15 = v0 + 336;
  v17 = *(_QWORD *)(v0 + 768);
  sub_20A0ABAB0(0x6C62616C69617661, 0xEF79726F6D654D65, v11, (_OWORD *)(v0 + 336));
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 360))
    goto LABEL_31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA308);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_33:
    swift_bridgeObjectRelease();
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v334 = *(_QWORD *)(v0 + 664);
  v333 = 1;
  switch(v17)
  {
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_20A07DC44();
      swift_allocError();
      *(_QWORD *)v29 = 0xD000000000000013;
      *(_QWORD *)(v29 + 8) = 0x800000020A0F20F0;
      *(_BYTE *)(v29 + 16) = 0;
      goto LABEL_26;
    case 5:
      goto LABEL_38;
    case 6:
    case 7:
    case 8:
      v18 = 2;
      goto LABEL_37;
    case 9:
      v18 = 3;
      goto LABEL_37;
    default:
      v18 = 5;
LABEL_37:
      v333 = v18;
LABEL_38:
      v364 = MEMORY[0x24BEE4B00];
      v342 = v14;
      v349 = *(_QWORD *)(v16 + 16);
      if (v349)
      {
        v30 = 0;
        v335 = (_OWORD *)(v0 + 48);
        v336 = 0;
        v31 = *(_QWORD *)(v0 + 808);
        v347 = v16 + 32;
        v343 = v31;
        v344 = v16;
        while (1)
        {
          if (v30 >= *(_QWORD *)(v16 + 16))
          {
            __break(1u);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_release();
            goto LABEL_206;
          }
          v38 = *(_QWORD *)(v347 + 8 * v30);
          v39 = *(_QWORD *)(v38 + 16);
          swift_bridgeObjectRetain();
          v359 = v30;
          if (v39)
          {
            v40 = sub_20A0B8998(0x416567616B636170, 0xEA00000000006469);
            if ((v41 & 1) != 0)
            {
              sub_20A07F148(*(_QWORD *)(v38 + 56) + 32 * v40, v0 + 400);
              if ((swift_dynamicCast() & 1) != 0)
                break;
            }
          }
          if (qword_2545C8E68 != -1)
            swift_once();
          v54 = *(_QWORD *)(v0 + 840);
          v55 = *(_QWORD *)(v0 + 800);
          v56 = __swift_project_value_buffer(v55, (uint64_t)qword_2545D7A20);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v54, v56, v55);
          swift_bridgeObjectRetain();
          v57 = sub_20A0E0728();
          v47 = v31;
          v58 = sub_20A0E0980();
          v59 = os_log_type_enabled(v57, v58);
          v60 = *(_QWORD *)(v0 + 840);
          v353 = *(_QWORD *)(v0 + 800);
          if (!v59)
          {
            swift_bridgeObjectRelease_n();

            (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v60, v353);
            v30 = v359;
LABEL_55:
            v31 = v47;
            goto LABEL_41;
          }
          v32 = swift_slowAlloc();
          v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
          v368[0] = v33;
          *(_DWORD *)v32 = 136315138;
          swift_bridgeObjectRetain();
          v34 = sub_20A0E07B8();
          v36 = v35;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v32 + 4) = sub_20A0A6D5C(v34, v36, (uint64_t *)v368);
          v16 = v344;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_20A048000, v57, v58, "Invalid packageAid field for %s", (uint8_t *)v32, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x20BD20380](v33, -1, -1);
          v37 = v32;
          v14 = v342;
          MEMORY[0x20BD20380](v37, -1, -1);

          v31 = v343;
          (*(void (**)(uint64_t, uint64_t))(v343 + 8))(v60, v353);
          v30 = v359;
LABEL_41:
          if (++v30 == v349)
          {
            swift_bridgeObjectRelease();
            goto LABEL_122;
          }
        }
        v351 = v38;
        v42 = *(_QWORD *)(v0 + 520);
        v345 = *(_QWORD *)(v0 + 512);
        if ((sub_20A0E0878() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          if (qword_2545C8E68 != -1)
            swift_once();
          v43 = *(_QWORD *)(v0 + 848);
          v44 = *(_QWORD *)(v0 + 800);
          v45 = __swift_project_value_buffer(v44, (uint64_t)qword_2545D7A20);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v43, v45, v44);
          swift_bridgeObjectRetain();
          v46 = sub_20A0E0728();
          v47 = v31;
          v48 = sub_20A0E098C();
          v49 = os_log_type_enabled(v46, v48);
          v50 = *(_QWORD *)(v0 + 848);
          v352 = *(_QWORD *)(v0 + 800);
          if (!v49)
          {
            swift_bridgeObjectRelease_n();

            (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v50, v352);
            v16 = v344;
            goto LABEL_55;
          }
          v51 = swift_slowAlloc();
          v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
          v368[0] = v52;
          *(_DWORD *)v51 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v51 + 4) = sub_20A0A6D5C(v345, v42, (uint64_t *)v368);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_20A048000, v46, v48, "Skipping %s processing due to having PTA prefix", (uint8_t *)v51, 0xCu);
          swift_arrayDestroy();
          v53 = v52;
          v30 = v359;
          MEMORY[0x20BD20380](v53, -1, -1);
          MEMORY[0x20BD20380](v51, -1, -1);

          v31 = v343;
          (*(void (**)(uint64_t, uint64_t))(v343 + 8))(v50, v352);
          v16 = v344;
          goto LABEL_41;
        }
        v61 = objc_allocWithZone((Class)type metadata accessor for SEPackageDetails());
        swift_bridgeObjectRetain();
        v62 = objc_msgSend(v61, sel_init);
        v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v364;
        if (!v62)
        {
          swift_bridgeObjectRetain();
          v78 = sub_20A0B8998(v345, v42);
          v80 = v79;
          swift_bridgeObjectRelease();
          if ((v80 & 1) != 0)
          {
            v81 = v30;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v364;
            v16 = v344;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_20A0C5CD4();
              v63 = v368[0];
            }
            swift_bridgeObjectRelease();
            v83 = *(void **)(*((_QWORD *)v63 + 7) + 8 * v78);
            sub_20A0C1030(v78, (uint64_t)v63);
            v364 = (uint64_t)v63;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v30 = v81;
          }
          else
          {
            swift_bridgeObjectRelease();
            v16 = v344;
          }
          v85 = (uint64_t *)(v0 + 752);
          v31 = v343;
          goto LABEL_74;
        }
        v64 = v62;
        v65 = swift_isUniquelyReferenced_nonNull_native();
        v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v364;
        v67 = sub_20A0B8998(v345, v42);
        v68 = *(_QWORD *)(v364 + 16);
        v69 = (v66 & 1) == 0;
        v70 = v68 + v69;
        if (__OFADD__(v68, v69))
          goto LABEL_231;
        v71 = v66;
        if (*(_QWORD *)(v364 + 24) >= v70)
        {
          if ((v65 & 1) != 0)
          {
            if ((v66 & 1) == 0)
              goto LABEL_61;
          }
          else
          {
            sub_20A0C5CD4();
            v63 = v368[0];
            if ((v71 & 1) == 0)
              goto LABEL_61;
          }
        }
        else
        {
          sub_20A0C7D38(v70, v65);
          v63 = v368[0];
          v72 = sub_20A0B8998(v345, v42);
          if ((v71 & 1) != (v73 & 1))
          {
LABEL_192:
            sub_20A0E0D28();
            return;
          }
          v67 = v72;
          if ((v71 & 1) == 0)
          {
LABEL_61:
            *((_QWORD *)v63 + (v67 >> 6) + 8) |= 1 << v67;
            v74 = (uint64_t *)(*((_QWORD *)v63 + 6) + 16 * v67);
            *v74 = v345;
            v74[1] = v42;
            *(_QWORD *)(*((_QWORD *)v63 + 7) + 8 * v67) = v64;
            v75 = *((_QWORD *)v63 + 2);
            v76 = __OFADD__(v75, 1);
            v77 = v75 + 1;
            if (v76)
              goto LABEL_232;
            *((_QWORD *)v63 + 2) = v77;
            swift_bridgeObjectRetain();
LABEL_71:
            v31 = v343;
            v16 = v344;
            v30 = v359;
            v85 = (uint64_t *)(v0 + 752);
            v364 = (uint64_t)v63;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_74:
            if (*(_QWORD *)(v351 + 16)
              && (v86 = sub_20A0B8998(0x6941656C75646F6DLL, 0xEA00000000007364), (v87 & 1) != 0))
            {
              sub_20A07F148(*(_QWORD *)(v351 + 56) + 32 * v86, (uint64_t)v335);
            }
            else
            {
              *v335 = 0u;
              *(_OWORD *)(v0 + 64) = 0u;
            }
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v0 + 72))
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
              if ((swift_dynamicCast() & 1) != 0)
              {
                v88 = *v85;
                v323 = *v85;
                v339 = v42;
                if (*(_QWORD *)(*v85 + 16))
                {
                  v354 = *(_QWORD *)(*v85 + 16);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v89 = (uint64_t *)(v88 + 40);
                  v90 = v336;
                  while (1)
                  {
                    v91 = *(_QWORD *)(v0 + 864);
                    v93 = *(v89 - 1);
                    v92 = *v89;
                    v94 = swift_task_alloc();
                    *(_QWORD *)(v94 + 16) = v93;
                    *(_QWORD *)(v94 + 24) = v92;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    LOBYTE(v93) = sub_20A0B9D8C(v91, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_20A0B0AA4);
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_task_dealloc();
                    if ((v93 & 1) != 0)
                      break;
                    v89 += 2;
                    if (!--v354)
                    {
                      v88 = v323;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      goto LABEL_88;
                    }
                  }
                  v88 = v323;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                }
                else
                {
                  v90 = v336;
                }
LABEL_88:
                v321 = sub_20A07D9F4(v88);
                if (v321)
                {
                  v95 = 0;
                  v322 = v88 + 32;
                  do
                  {
                    sub_20A07A8C4(v95, 1, v88);
                    v96 = v95 + 1;
                    if (__OFADD__(v95, 1))
                      goto LABEL_230;
                    v97 = v322 + 16 * v95;
                    v98 = *(_QWORD *)(v97 + 8);
                    v327 = *(objc_super **)v97;
                    v99 = *(_QWORD *)(v0 + 864);
                    v100 = *(_QWORD *)(v0 + 856);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v329 = v98;
                    swift_bridgeObjectRetain();
                    v101 = sub_20A07A8E8((uint64_t)&unk_24C2BA6E0, v100, v99);
                    v325 = v90;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (sub_20A07A234(v101))
                    {
                      __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7E0);
                      v102 = (_QWORD *)sub_20A0E0BFC();
                    }
                    else
                    {
                      v102 = (_QWORD *)MEMORY[0x24BEE4B00];
                    }
                    v330 = v96;
                    *(_QWORD *)&v366 = v102;
                    v103 = sub_20A07D9F4(v101);
                    swift_bridgeObjectRetain_n();
                    v355 = v103;
                    if (v103)
                    {
                      v104 = 0;
                      v105 = (unint64_t *)(v101 + 48);
                      v337 = v101;
                      while (1)
                      {
                        sub_20A07A8C4(v104, 1, v101);
                        v106 = v104 + 1;
                        if (__OFADD__(v104, 1))
                          break;
                        v107 = *(v105 - 1);
                        v42 = *v105;
                        v108 = *(v105 - 2);
                        sub_20A074C44(v108, v107);
                        swift_bridgeObjectRetain();
                        if (!v42)
                        {
                          v42 = v339;
                          goto LABEL_109;
                        }
                        *(_QWORD *)(v0 + 480) = v108;
                        *(_QWORD *)(v0 + 488) = v107;
                        v109 = sub_20A0B8934(v108, v107);
                        v111 = v102[2];
                        v112 = (v110 & 1) == 0;
                        v76 = __OFADD__(v111, v112);
                        v113 = v111 + v112;
                        if (v76)
                          goto LABEL_228;
                        v114 = v110;
                        if (v102[3] < v113)
                        {
                          sub_20A0C61CC(v113, 1);
                          v102 = (_QWORD *)v366;
                          v109 = sub_20A0B8934(v108, v107);
                          if ((v114 & 1) != (v115 & 1))
                            goto LABEL_192;
                        }
                        if ((v114 & 1) != 0)
                        {
                          v252 = (void *)swift_allocError();
                          swift_willThrow();
                          *(_QWORD *)(v0 + 728) = v252;
                          v253 = v252;
                          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
                          if ((swift_dynamicCast() & 1) != 0)
                          {
                            v368[0] = 0;
                            v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))0xE000000000000000;
                            sub_20A0E0AC4();
                            v254 = v368[1];
                            *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 608) = v368[0];
                            *(_QWORD *)(v0 + 616) = v254;
                            sub_20A0E0854();
                            sub_20A0E0B48();
                            sub_20A0E0854();
                            sub_20A0E0BCC();
                          }
                          else
                          {
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            sub_20A075F1C(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 488));
                            swift_bridgeObjectRelease();

                            swift_unexpectedError();
                          }
                          return;
                        }
                        v102[(v109 >> 6) + 8] |= 1 << v109;
                        v116 = (uint64_t *)(v102[6] + 16 * v109);
                        *v116 = v108;
                        v116[1] = v107;
                        *(_QWORD *)(v102[7] + 8 * v109) = v42;
                        v117 = v102[2];
                        v76 = __OFADD__(v117, 1);
                        v118 = v117 + 1;
                        if (v76)
                          goto LABEL_229;
                        v102[2] = v118;
                        v105 += 3;
                        ++v104;
                        v101 = v337;
                        v42 = v339;
                        if (v106 == v355)
                          goto LABEL_109;
                      }
                      __break(1u);
LABEL_228:
                      __break(1u);
LABEL_229:
                      __break(1u);
LABEL_230:
                      __break(1u);
LABEL_231:
                      __break(1u);
LABEL_232:
                      __break(1u);
                      goto LABEL_233;
                    }
LABEL_109:
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRetain();
                    v90 = v325;
                    sub_20A0760BC((uint64_t)v102, (uint64_t)v327, v329, (uint64_t *)v368);
                    swift_bridgeObjectRelease();
                    swift_release();
                    if (v369)
                    {
                      v120 = v368[0];
                      v119 = v368[1];
                      swift_bridgeObjectRelease();
                      if (*(_QWORD *)(v364 + 16))
                      {
                        swift_bridgeObjectRetain();
                        v121 = sub_20A0B8998(v345, v42);
                        if ((v122 & 1) != 0)
                        {
                          v123 = (char *)*(id *)(*(_QWORD *)(v364 + 56) + 8 * v121);
                          swift_bridgeObjectRelease();
                          v124 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
                          v125 = *(_QWORD *)&v123[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
                          v126 = *(_QWORD *)&v123[OBJC_IVAR____TtC9SEService16SEPackageDetails_type + 8];
                          *v124 = v120;
                          v124[1] = v119;
                          sub_20A080234(v125, v126);

                          goto LABEL_92;
                        }
                        swift_bridgeObjectRelease();
                      }
                      sub_20A075F1C((uint64_t)v120, (unint64_t)v119);
                    }
LABEL_92:
                    v95 = v330;
                    v88 = v323;
                  }
                  while (v330 != v321);
                }
                v336 = v90;
                swift_bridgeObjectRelease();
                v14 = v342;
                v31 = v343;
                v16 = v344;
                v30 = v359;
              }
            }
            else
            {
              sub_20A0B0208((uint64_t)v335);
            }
            if (*(_QWORD *)(v364 + 16) && (v127 = sub_20A0B8998(v345, v42), (v128 & 1) != 0))
            {
              v129 = *(id *)(*(_QWORD *)(v364 + 56) + 8 * v127);
              swift_bridgeObjectRelease();
              v129[OBJC_IVAR____TtC9SEService16SEPackageDetails_packageLoaded] = 1;

            }
            else
            {
              swift_bridgeObjectRelease();
            }
            goto LABEL_41;
          }
        }
        v84 = *((_QWORD *)v63 + 7);

        *(_QWORD *)(v84 + 8 * v67) = v64;
        goto LABEL_71;
      }
      swift_bridgeObjectRelease();
LABEL_122:
      v341 = v14[2];
      if (!v341)
      {
LABEL_177:
        swift_bridgeObjectRelease();
        v233 = *(void **)(v0 + 776);
        v234 = (void *)sub_20A0E0800();
        v235 = SESEndPointListWithSession(v233, v234, 0);

        if (v235)
        {
          v236 = *(_QWORD *)(v0 + 872);
          v237 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 864);
          v238 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 856);
          sub_20A0B09B4();
          v42 = sub_20A0E08B4();

          v368[0] = v238;
          v368[1] = v237;
          v369 = v236;
          v366 = xmmword_20A0EA730;
          swift_getKeyPath();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v239 = SERDataSource.getNameInfo(type:for:)((uint64_t *)&v366);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v239)
          {
            if (*(_QWORD *)(v239 + 16))
            {
              v240 = *(_QWORD *)(v0 + 872);
              v241 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 864);
              v242 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 856);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v368[0] = v242;
              v368[1] = v241;
              v369 = v240;
              v366 = xmmword_20A0EAAC0;
              swift_getKeyPath();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v243 = SERDataSource.getNameInfo(type:for:)((uint64_t *)&v366);
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v243)
              {
                if (*(_QWORD *)(v243 + 16))
                {
                  v244 = *(_QWORD *)(v0 + 864);
                  v245 = *(_QWORD *)(v0 + 856);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v246 = sub_20A0B0250((uint64_t)&unk_24C2BD808, v245, v244);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_arrayDestroy();
                  v247 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4B00];
                  if (*(_QWORD *)(v246 + 16))
                  {
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA7F0);
                    v248 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0E0BFC();
                  }
                  else
                  {
                    v248 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4B00];
                  }
                  v368[0] = v248;
                  v261 = (_QWORD *)swift_bridgeObjectRetain();
                  sub_20A0AFE78(v261, 1, v368);
                  swift_bridgeObjectRelease();
                  v329 = (uint64_t)v368[0];
                  v368[0] = v247;
                  if (v42 >> 62)
                    goto LABEL_237;
                  v358 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
                  while (v358)
                  {
                    v262 = 0;
                    v363 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4B00];
                    while (1)
                    {
                      v265 = (v42 & 0xC000000000000001) != 0
                           ? (id)MEMORY[0x20BD1F648](v262, v42)
                           : *(id *)(v42 + 8 * v262 + 32);
                      v266 = v265;
                      v267 = v262 + 1;
                      if (__OFADD__(v262, 1))
                        break;
                      v268 = objc_msgSend(v265, sel_appletIdentifier);
                      v269 = sub_20A0E0668();
                      v271 = v270;

                      v273 = sub_20A0B8B6C(v269, v271);
                      v274 = *((_QWORD *)v363 + 2);
                      v275 = (v272 & 1) == 0;
                      v276 = v274 + v275;
                      if (__OFADD__(v274, v275))
                        goto LABEL_234;
                      v277 = v272;
                      if (*((_QWORD *)v363 + 3) < v276)
                      {
                        sub_20A0C771C(v276, 1);
                        v363 = v368[0];
                        v278 = sub_20A0B8B6C(v269, v271);
                        if ((v277 & 1) != (v279 & 1))
                          goto LABEL_192;
                        v273 = v278;
                      }
                      if ((v277 & 1) != 0)
                      {
                        v263 = sub_20A07F898(v269, v271);
                        v264 = (_QWORD *)(*((_QWORD *)v363 + 7) + 8 * v273);
                        MEMORY[0x20BD1F408](v263);
                        sub_20A0AFE4C(*(_QWORD *)((*v264 & 0xFFFFFFFFFFFFF8) + 0x10));
                        sub_20A0E08F0();
                        sub_20A0E08CC();
                      }
                      else
                      {
                        __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA320);
                        v280 = swift_allocObject();
                        *(_OWORD *)(v280 + 16) = xmmword_20A0EAAD0;
                        *(_QWORD *)(v280 + 32) = v266;
                        *(_QWORD *)&v366 = v280;
                        sub_20A0E08CC();
                        v281 = v366;
                        *((_QWORD *)v363 + (v273 >> 6) + 8) |= 1 << v273;
                        v282 = (uint64_t *)(*((_QWORD *)v363 + 6) + 16 * v273);
                        *v282 = v269;
                        v282[1] = v271;
                        *(_QWORD *)(*((_QWORD *)v363 + 7) + 8 * v273) = v281;
                        v283 = *((_QWORD *)v363 + 2);
                        v76 = __OFADD__(v283, 1);
                        v284 = v283 + 1;
                        if (v76)
                          goto LABEL_236;
                        *((_QWORD *)v363 + 2) = v284;
                      }
                      ++v262;
                      if (v267 == v358)
                        goto LABEL_239;
                    }
LABEL_233:
                    __break(1u);
LABEL_234:
                    __break(1u);
LABEL_235:
                    __break(1u);
LABEL_236:
                    __break(1u);
LABEL_237:
                    swift_bridgeObjectRetain();
                    v358 = sub_20A0E0BD8();
                    swift_bridgeObjectRelease();
                  }
                  v363 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE4B00];
LABEL_239:
                  swift_bridgeObjectRelease();
                  v285 = *((_QWORD *)v363 + 8);
                  v286 = -1;
                  v287 = -1 << *((_BYTE *)v363 + 32);
                  if (-v287 < 64)
                    v286 = ~(-1 << -(char)v287);
                  v320 = (unint64_t)(63 - v287) >> 6;
                  if ((v286 & v285) != 0)
                  {
                    v288 = __clz(__rbit64(v286 & v285));
LABEL_256:
                    v291 = (uint64_t *)(*((_QWORD *)v363 + 6) + 16 * v288);
                    v293 = *v291;
                    v292 = v291[1];
                    sub_20A07F854(*v291, v292);
                    sub_20A07F854(v293, v292);
                    swift_bridgeObjectRetain();
                    v346 = sub_20A0B05BC(v329, v293, v292);
                    v295 = v294;
                    sub_20A07F898(v293, v292);
                    if (v295)
                    {
                      v296 = v346 == 0x43494E5245504F43 && v295 == 0xEF4F52494C415355;
                      if (v296
                        || (sub_20A0E0CEC() & 1) != 0
                        || (v346 == 0x43494E5245504F43 ? (v297 = v295 == 0xEE00454D4F485355) : (v297 = 0),
                            v297
                         || ((v298 = sub_20A0E0CEC(), v346 == 0x43494E5245504F43)
                           ? (v299 = v295 == 0xED00005241435355)
                           : (v299 = 0),
                             !v299 ? (v300 = 0) : (v300 = 1),
                             (v298 & 1) != 0
                          || (v300 & 1) != 0
                          || (sub_20A0E0CEC() & 1) != 0
                          || v346 == 0xD000000000000010 && v295 == 0x800000020A0F0300
                          || (sub_20A0E0CEC() & 1) != 0)))
                      {
                        swift_bridgeObjectRetain();
                        __asm { BR              X9 }
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease();
                      v368[0] = 0;
                      v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))0xE000000000000000;
                      sub_20A0E0AC4();
                      sub_20A0E0CD4();
                      sub_20A074F9C();
                      sub_20A0E0CD4();
                      v309 = v368[0];
                      v310 = v368[1];
                      sub_20A07DC44();
                      swift_allocError();
                      *(_QWORD *)v311 = v309;
                      *(_QWORD *)(v311 + 8) = v310;
                      *(_BYTE *)(v311 + 16) = 1;
                      swift_willThrow();
                      sub_20A07F898(v293, v292);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_release();
                      swift_bridgeObjectRelease();
                      v368[0] = 0;
                      v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))0xE000000000000000;
                      sub_20A0E0AC4();
                      swift_bridgeObjectRelease();
                      strcpy((char *)v368, "Invalid AID ");
                      BYTE5(v368[1]) = 0;
                      HIWORD(v368[1]) = -5120;
                      sub_20A0AB6B8(v293, v292);
                      *(_QWORD *)(v0 + 720) = v301;
                      __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
                      sub_20A0A6A68();
                      sub_20A0E07E8();
                      swift_bridgeObjectRelease();
                      sub_20A0E0854();
                      swift_bridgeObjectRelease();
                      sub_20A0E0854();
                      v302 = v368[0];
                      v303 = v368[1];
                      sub_20A07DC44();
                      swift_allocError();
                      *(_QWORD *)v304 = v302;
                      *(_QWORD *)(v304 + 8) = v303;
                      *(_BYTE *)(v304 + 16) = 1;
                      swift_willThrow();
                      sub_20A07F898(v293, v292);
                    }
                    swift_release();
                    goto LABEL_206;
                  }
                  if ((unint64_t)(63 - v287) >> 6 > 1)
                  {
                    v289 = *((_QWORD *)v363 + 9);
                    v340 = 1;
                    if (v289)
                      goto LABEL_255;
                    v340 = 2;
                    if (v320 <= 2)
                      goto LABEL_281;
                    v289 = *((_QWORD *)v363 + 10);
                    if (v289)
                      goto LABEL_255;
                    v340 = 3;
                    if (v320 <= 3)
                      goto LABEL_281;
                    v289 = *((_QWORD *)v363 + 11);
                    if (v289)
                    {
LABEL_255:
                      v288 = __clz(__rbit64(v289)) + (v340 << 6);
                      goto LABEL_256;
                    }
                    v290 = 4;
                    if (v320 > 4)
                    {
                      v289 = *((_QWORD *)v363 + 12);
                      if (!v289)
                      {
                        while (1)
                        {
                          v340 = v290 + 1;
                          if (__OFADD__(v290, 1))
                            break;
                          if (v340 >= v320)
                            goto LABEL_281;
                          v289 = *((_QWORD *)v363 + v340 + 8);
                          ++v290;
                          if (v289)
                            goto LABEL_255;
                        }
                        __break(1u);
LABEL_284:
                        __break(1u);
                        JUMPOUT(0x20A0AF8ACLL);
                      }
                      v340 = 4;
                      goto LABEL_255;
                    }
                  }
LABEL_281:
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  v305 = sub_20A0AFAF4(v334);
                  swift_bridgeObjectRelease();
                  v306 = (objc_class *)type metadata accessor for SEState();
                  v307 = objc_allocWithZone(v306);
                  v307[OBJC_IVAR____TtC9SEService7SEState_seType] = v333;
                  *(_QWORD *)&v307[OBJC_IVAR____TtC9SEService7SEState_freeMemory] = v305;
                  *(_QWORD *)&v307[OBJC_IVAR____TtC9SEService7SEState_infoDictionary] = v364;
                  *(_QWORD *)(v0 + 544) = v307;
                  *(_QWORD *)(v0 + 552) = v306;
                  swift_bridgeObjectRetain();
                  v308 = objc_msgSendSuper2((objc_super *)(v0 + 544), sel_init);
                  swift_bridgeObjectRelease();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  (*(void (**)(id))(v0 + 8))(v308);
                  return;
                }
                swift_bridgeObjectRelease();
              }
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_20A07DC44();
          swift_allocError();
          v250 = "Could not get PTA info";
          v251 = 0xD000000000000016;
        }
        else
        {
          swift_bridgeObjectRelease();
          v368[0] = 0;
          v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))0xE000000000000000;
          sub_20A0E0AC4();
          swift_bridgeObjectRelease();
          sub_20A07DC44();
          swift_allocError();
          v250 = "could not get endpoints ";
          v251 = 0xD000000000000018;
        }
        *(_QWORD *)v249 = v251;
        *(_QWORD *)(v249 + 8) = (unint64_t)(v250 - 32) | 0x8000000000000000;
        *(_BYTE *)(v249 + 16) = 0;
        goto LABEL_205;
      }
      v130 = 0;
      v324 = (_OWORD *)(v0 + 80);
      v131 = (uint64_t *)(v0 + 704);
      v132 = *(_QWORD *)(v0 + 808);
      v329 = 3;
      v332 = v132;
      while (1)
      {
        v133 = v14[v130 + 4];
        v134 = *(_QWORD *)(v133 + 16);
        swift_bridgeObjectRetain();
        if (!v134)
          break;
        v135 = sub_20A0B8998(0x416567616B636170, 0xEA00000000006469);
        if ((v136 & 1) == 0)
          break;
        sub_20A07F148(*(_QWORD *)(v133 + 56) + 32 * v135, v0 + 368);
        if ((swift_dynamicCast() & 1) == 0)
          break;
        v360 = *(_QWORD *)(v0 + 600);
        if (!*(_QWORD *)(v133 + 16)
          || (v356 = *(_QWORD *)(v0 + 592),
              v137 = sub_20A0B8998(0x6941656C75646F6DLL, 0xE900000000000064),
              (v138 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_200;
        }
        sub_20A07F148(*(_QWORD *)(v133 + 56) + 32 * v137, v0 + 304);
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_198;
        v350 = *(_QWORD *)(v0 + 504);
        if (!*(_QWORD *)(v133 + 16))
          goto LABEL_191;
        v139 = *(objc_super **)(v0 + 496);
        v140 = sub_20A0B8998(0x694174656C707061, 0xE900000000000064);
        if ((v141 & 1) == 0)
          goto LABEL_191;
        sub_20A07F148(*(_QWORD *)(v133 + 56) + 32 * v140, v0 + 240);
        if ((swift_dynamicCast() & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_198:
          swift_bridgeObjectRelease();
          break;
        }
        v142 = *(objc_super **)(v0 + 536);
        if (!*(_QWORD *)(v133 + 16)
          || (v331 = *(_QWORD *)(v0 + 528),
              v143 = sub_20A0B8998(0x6C6379436566696CLL, 0xEE00657461745365),
              (v144 & 1) == 0))
        {
          swift_bridgeObjectRelease();
LABEL_191:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_200;
        }
        sub_20A07F148(*(_QWORD *)(v133 + 56) + 32 * v143, v0 + 176);
        if ((swift_dynamicCast() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_198;
        }
        v145 = *v131;
        v348 = v130;
        if ((sub_20A0E0878() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_2545C8E68 != -1)
            swift_once();
          v146 = *(_QWORD *)(v0 + 832);
          v147 = *(_QWORD *)(v0 + 800);
          v148 = __swift_project_value_buffer(v147, (uint64_t)qword_2545D7A20);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 16))(v146, v148, v147);
          v149 = swift_allocObject();
          *(_QWORD *)(v149 + 16) = v356;
          *(_QWORD *)(v149 + 24) = v360;
          v361 = sub_20A0E0728();
          v150 = sub_20A0E098C();
          v151 = swift_allocObject();
          *(_BYTE *)(v151 + 16) = 32;
          v152 = swift_allocObject();
          *(_BYTE *)(v152 + 16) = 8;
          v153 = swift_allocObject();
          *(_QWORD *)(v153 + 16) = sub_20A0B0A20;
          *(_QWORD *)(v153 + 24) = v149;
          v154 = v132;
          v155 = swift_allocObject();
          *(_QWORD *)(v155 + 16) = sub_20A0B0A6C;
          *(_QWORD *)(v155 + 24) = v153;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA310);
          v156 = swift_allocObject();
          *(_OWORD *)(v156 + 16) = xmmword_20A0EAAA0;
          *(_QWORD *)(v156 + 32) = sub_20A0B0A74;
          *(_QWORD *)(v156 + 40) = v151;
          *(_QWORD *)(v156 + 48) = sub_20A0B0A74;
          *(_QWORD *)(v156 + 56) = v152;
          *(_QWORD *)(v156 + 64) = sub_20A0B0A70;
          *(_QWORD *)(v156 + 72) = v155;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v361, v150))
          {
            v157 = (uint8_t *)swift_slowAlloc();
            v158 = swift_slowAlloc();
            v367 = 0;
            v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
            *(_QWORD *)&v366 = v158;
            *(_WORD *)v157 = 258;
            v365[0] = v157 + 2;
            v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v151;
            sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
            swift_release();
            v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
            v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v152;
            sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
            swift_release();
            v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A70;
            v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v155;
            sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
            swift_release();
            _os_log_impl(&dword_20A048000, v361, v150, "Skipping %s processing due to having PTA prefix", v157, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x20BD20380](v158, -1, -1);
            sub_20A0A6A5C();
          }
          v162 = *(_QWORD *)(v0 + 832);
          v163 = *(_QWORD *)(v0 + 800);
          swift_release();
          swift_release();
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v162, v163);
          v164 = v348;
          v131 = (uint64_t *)(v0 + 704);
          v132 = v154;
          goto LABEL_176;
        }
        v319 = v145;
        v328 = v142;
        v159 = *(_QWORD *)(v0 + 864);
        v160 = swift_task_alloc();
        v326 = v139;
        *(_QWORD *)(v160 + 16) = v139;
        *(_QWORD *)(v160 + 24) = v350;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v161 = sub_20A0B9D8C(v159, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_20A0B0248);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        if ((v161 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          if (*(_QWORD *)(v133 + 16)
            && (v165 = sub_20A0B8998(0xD000000000000011, 0x800000020A0F2050), (v166 & 1) != 0)
            && (sub_20A07F148(*(_QWORD *)(v133 + 56) + 32 * v165, v0 + 112), swift_dynamicCast()))
          {
            v318 = *(unsigned __int8 *)(v0 + 880);
          }
          else
          {
            v318 = 0;
          }
          sub_20A0ABAB0(0x736E4979786F7270, 0xED000065636E6174, v133, v324);
          swift_bridgeObjectRelease();
          if (!*(_QWORD *)(v0 + 104))
          {
            sub_20A0B0208((uint64_t)v324);
LABEL_155:
            v42 = v364;
            swift_bridgeObjectRetain();
            v167 = sub_20A0ABB00(v356, v360, v364);
            swift_bridgeObjectRelease();

            if (!v167)
            {
              v168 = *(_QWORD *)(v0 + 824);
              v169 = *(_QWORD *)(v0 + 800);
              v170 = sub_20A0AF8E0();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v332 + 16))(v168, v170, v169);
              v171 = swift_allocObject();
              *(_QWORD *)(v171 + 16) = v356;
              *(_QWORD *)(v171 + 24) = v360;
              swift_bridgeObjectRetain();
              v172 = sub_20A0E0728();
              v173 = sub_20A0E0980();
              v174 = swift_allocObject();
              *(_BYTE *)(v174 + 16) = 32;
              v175 = swift_allocObject();
              *(_BYTE *)(v175 + 16) = 8;
              v176 = swift_allocObject();
              *(_QWORD *)(v176 + 16) = sub_20A0B0AA8;
              *(_QWORD *)(v176 + 24) = v171;
              v177 = swift_allocObject();
              *(_QWORD *)(v177 + 16) = sub_20A0B0A6C;
              *(_QWORD *)(v177 + 24) = v176;
              __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA310);
              v178 = swift_allocObject();
              *(_OWORD *)(v178 + 16) = xmmword_20A0EAAA0;
              *(_QWORD *)(v178 + 32) = sub_20A0B0A74;
              *(_QWORD *)(v178 + 40) = v174;
              *(_QWORD *)(v178 + 48) = sub_20A0B0A74;
              *(_QWORD *)(v178 + 56) = v175;
              *(_QWORD *)(v178 + 64) = sub_20A0B0A70;
              *(_QWORD *)(v178 + 72) = v177;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              v316 = v173;
              if (os_log_type_enabled(v172, v173))
              {
                v179 = (uint8_t *)sub_20A0A6A20();
                v180 = swift_slowAlloc();
                *(_QWORD *)&v366 = v180;
                *(_WORD *)v179 = 258;
                v365[0] = v179 + 2;
                v367 = 0;
                v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
                v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v174;
                sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
                swift_release();
                v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
                v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v175;
                sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
                swift_release();
                v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A70;
                v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v177;
                sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
                swift_release();
                _os_log_impl(&dword_20A048000, v172, v316, "Adding %s to dictionary", v179, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x20BD20380](v180, -1, -1);
                sub_20A0A6A5C();
              }
              v181 = *(_QWORD *)(v0 + 824);
              v182 = *(_QWORD *)(v0 + 800);
              swift_release();
              swift_release();
              swift_release();

              (*(void (**)(uint64_t, uint64_t))(v332 + 8))(v181, v182);
              type metadata accessor for SEPackageDetails();
              swift_bridgeObjectRetain();
              v183 = sub_20A093FF4();
              sub_20A0ABB44((uint64_t)v183, v356, v360);
              v42 = v364;
            }
            v184 = v350;
            v185 = (char *)sub_20A0ABB00(v356, v360, v42);
            swift_bridgeObjectRelease();
            if (!v185)
              goto LABEL_284;
            v186 = *(_QWORD *)(v0 + 872);
            v187 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 864);
            v188 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 856);
            v189 = swift_allocObject();
            *(_OWORD *)(v189 + 16) = xmmword_20A0E6A20;
            v368[0] = v188;
            v368[1] = v187;
            v369 = v186;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            CredentialType.init(moduleAID:dataSource:)((uint64_t)v326, v350, (uint64_t *)v368, &v366);
            v190 = *((_QWORD *)&v366 + 1);
            v191 = v366;
            swift_beginAccess();
            v192 = *(_QWORD *)(v189 + 16);
            v193 = *(_QWORD *)(v189 + 24);
            *(_OWORD *)(v189 + 16) = __PAIR128__(v190, v191);
            sub_20A080234(v192, v193);
            v194 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v185[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
            v195 = *(_QWORD *)&v185[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
            v196 = *(_QWORD *)&v185[OBJC_IVAR____TtC9SEService16SEPackageDetails_type + 8];
            v198 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 16);
            v197 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 24);
            if (v196 == 26)
            {
              *v194 = v198;
              v194[1] = v197;
              sub_20A0B09F0((uint64_t)v198, (unint64_t)v197);
              sub_20A080234(v195, 0x1AuLL);
LABEL_168:
              if (v318)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v222 = *(_QWORD *)&v185[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers];
                v76 = __OFADD__(v222, 1);
                v223 = v222 + 1;
                if (v76)
                  goto LABEL_235;
                *(_QWORD *)&v185[OBJC_IVAR____TtC9SEService16SEPackageDetails_containers] = v223;
              }
              else
              {
                v224 = (objc_class *)type metadata accessor for SEApplet();
                v225 = (char *)objc_allocWithZone(v224);
                v226 = &v225[OBJC_IVAR____TtC9SEService8SEApplet_identifier];
                *(_QWORD *)v226 = v331;
                *((_QWORD *)v226 + 1) = v328;
                v227 = (objc_super **)&v225[OBJC_IVAR____TtC9SEService8SEApplet_moduleIdentifier];
                *v227 = v326;
                v227[1] = (objc_super *)v184;
                v228 = sub_20A080404(v319);
                v230 = 7;
                if ((v229 & 1) == 0)
                  v230 = v228;
                *(_QWORD *)&v225[OBJC_IVAR____TtC9SEService8SEApplet_lifecycleState] = v230;
                *(_QWORD *)(v0 + 624) = v225;
                *(_QWORD *)(v0 + 632) = v224;
                v231 = objc_msgSendSuper2((objc_super *)(v0 + 624), sel_init);
                swift_beginAccess();
                v232 = v231;
                sub_20A0ABA50();
                swift_endAccess();

              }
              swift_release();
              goto LABEL_175;
            }
            *(_QWORD *)&v366 = *(_QWORD *)&v185[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
            *((_QWORD *)&v366 + 1) = v196;
            if (v197 == (uint64_t (*)(uint64_t, uint64_t, uint64_t))26)
            {
              sub_20A074C44(v195, v196);
              sub_20A074C44(v195, v196);
              sub_20A075F1C(v195, v196);
              sub_20A080234(v195, v196);
              sub_20A080234((uint64_t)v198, 0x1AuLL);
            }
            else
            {
              v368[0] = v198;
              v368[1] = v197;
              sub_20A0B09F0(v195, v196);
              sub_20A0B09F0(v195, v196);
              v199 = _s9SEService14CredentialTypeO2eeoiySbAC_ACtFZ_0((uint64_t *)&v366, (uint64_t *)v368);
              sub_20A075F1C(v366, *((unint64_t *)&v366 + 1));
              sub_20A080234(v195, v196);
              if ((v199 & 1) != 0)
                goto LABEL_168;
            }
            v200 = *(_QWORD *)(v0 + 816);
            v201 = *(_QWORD *)(v0 + 800);
            v202 = sub_20A0AF8E0();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v332 + 16))(v200, v202, v201);
            v203 = swift_allocObject();
            *(_QWORD *)(v203 + 16) = v331;
            *(_QWORD *)(v203 + 24) = v328;
            v204 = swift_allocObject();
            *(_QWORD *)(v204 + 16) = v185;
            swift_bridgeObjectRetain();
            v312 = v185;
            v205 = v185;
            swift_retain();
            oslog = sub_20A0E0728();
            v314 = sub_20A0E0998();
            v362 = swift_allocObject();
            *(_BYTE *)(v362 + 16) = 32;
            v357 = swift_allocObject();
            *(_BYTE *)(v357 + 16) = 8;
            v206 = swift_allocObject();
            *(_QWORD *)(v206 + 16) = sub_20A0B0AA8;
            *(_QWORD *)(v206 + 24) = v203;
            v207 = swift_allocObject();
            *(_QWORD *)(v207 + 16) = sub_20A0B0964;
            *(_QWORD *)(v207 + 24) = v206;
            v208 = v207;
            v338 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v207;
            v209 = swift_allocObject();
            *(_BYTE *)(v209 + 16) = 32;
            v210 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v209;
            v317 = swift_allocObject();
            *(_BYTE *)(v317 + 16) = 8;
            v211 = swift_allocObject();
            *(_QWORD *)(v211 + 16) = sub_20A0B0908;
            *(_QWORD *)(v211 + 24) = v204;
            v212 = swift_allocObject();
            *(_QWORD *)(v212 + 16) = sub_20A0B0A6C;
            *(_QWORD *)(v212 + 24) = v211;
            v213 = swift_allocObject();
            *(_BYTE *)(v213 + 16) = 32;
            v214 = swift_allocObject();
            *(_BYTE *)(v214 + 16) = 8;
            v215 = swift_allocObject();
            *(_QWORD *)(v215 + 16) = sub_20A0B0910;
            *(_QWORD *)(v215 + 24) = v189;
            v216 = swift_allocObject();
            *(_QWORD *)(v216 + 16) = sub_20A0B0A6C;
            *(_QWORD *)(v216 + 24) = v215;
            __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA310);
            v217 = swift_allocObject();
            *(_OWORD *)(v217 + 16) = xmmword_20A0EAAB0;
            *(_QWORD *)(v217 + 32) = sub_20A0B0928;
            *(_QWORD *)(v217 + 40) = v362;
            *(_QWORD *)(v217 + 48) = sub_20A0B0A74;
            *(_QWORD *)(v217 + 56) = v357;
            *(_QWORD *)(v217 + 64) = sub_20A0B096C;
            *(_QWORD *)(v217 + 72) = v208;
            *(_QWORD *)(v217 + 80) = sub_20A0B0A74;
            v42 = (unint64_t)v210;
            *(_QWORD *)(v217 + 88) = v210;
            *(_QWORD *)(v217 + 96) = sub_20A0B0A74;
            *(_QWORD *)(v217 + 104) = v317;
            *(_QWORD *)(v217 + 112) = sub_20A0B0A70;
            *(_QWORD *)(v217 + 120) = v212;
            *(_QWORD *)(v217 + 128) = sub_20A0B0A74;
            *(_QWORD *)(v217 + 136) = v213;
            *(_QWORD *)(v217 + 144) = sub_20A0B0A74;
            *(_QWORD *)(v217 + 152) = v214;
            *(_QWORD *)(v217 + 160) = sub_20A0B0A70;
            *(_QWORD *)(v217 + 168) = v216;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            v313 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v213;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(oslog, v314))
            {
              v218 = (uint8_t *)sub_20A0A6A20();
              v219 = swift_slowAlloc();
              *(_QWORD *)&v366 = v219;
              *(_WORD *)v218 = 770;
              v365[0] = v218 + 2;
              v367 = 0;
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0928;
              v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v362;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
              v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v357;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B096C;
              v368[1] = v338;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
              v368[1] = v210;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
              v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v317;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A70;
              v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v212;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
              v368[1] = v313;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A74;
              v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v214;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              v368[0] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B0A70;
              v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v216;
              sub_20A0A6A28(v368, (uint64_t)v365, (uint64_t)&v367, (uint64_t)&v366);
              swift_release();
              _os_log_impl(&dword_20A048000, oslog, v314, "Type mismatch for %s: %s && %s", v218, 0x20u);
              swift_arrayDestroy();
              MEMORY[0x20BD20380](v219, -1, -1);
              sub_20A0A6A5C();
            }
            v220 = *(_QWORD *)(v0 + 816);
            v221 = *(_QWORD *)(v0 + 800);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            (*(void (**)(uint64_t, uint64_t))(v332 + 8))(v220, v221);
            v184 = v350;
            v185 = v312;
            goto LABEL_168;
          }
          if (!swift_dynamicCast() || (*(_BYTE *)(v0 + 881) & 1) == 0)
            goto LABEL_155;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
LABEL_175:
        v14 = v342;
        v164 = v348;
        v131 = (uint64_t *)(v0 + 704);
        v132 = v332;
LABEL_176:
        v130 = v164 + 1;
        if (v341 == v130)
          goto LABEL_177;
      }
      swift_bridgeObjectRelease();
LABEL_200:
      swift_bridgeObjectRelease();
      v368[0] = 0;
      v368[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))0xE000000000000000;
      sub_20A0E0AC4();
      v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0E07B8();
      v257 = v256;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v368[0] = v255;
      v368[1] = v257;
      sub_20A0E0854();
      v258 = v368[0];
      v259 = v368[1];
      sub_20A07DC44();
      swift_allocError();
      *(_QWORD *)v260 = v258;
      *(_QWORD *)(v260 + 8) = v259;
      *(_BYTE *)(v260 + 16) = 1;
LABEL_205:
      swift_willThrow();
LABEL_206:
      swift_bridgeObjectRelease();
LABEL_27:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      (*(void (**)(void))(v0 + 8))();
      return;
  }
}

uint64_t sub_20A0AF8E0()
{
  uint64_t v0;

  if (qword_2545C8E68 != -1)
    swift_once();
  v0 = sub_20A0E0740();
  return __swift_project_value_buffer(v0, (uint64_t)qword_2545D7A20);
}

uint64_t sub_20A0AF928(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9SEService16SEPackageDetails_type + 8);
  if (v1 == 26)
    return 0x296C696E28;
  sub_20A074C44(*(_QWORD *)(a1 + OBJC_IVAR____TtC9SEService16SEPackageDetails_type), v1);
  return sub_20A0E0824();
}

uint64_t sub_20A0AF98C(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;

  v2 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 == 26)
    return 0x296C696E28;
  sub_20A074C44(*v2, v3);
  return sub_20A0E0824();
}

uint64_t sub_20A0AFA04(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  if (a2 < 0)
  {
    result = sub_20A0E0BC0();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      type metadata accessor for SEApplet();
      v4 = sub_20A0E08E4();
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
      *(_QWORD *)(v5 + 16) = a2;
      v11 = v4;
      *(_QWORD *)(v5 + 32) = a1;
      if (a2 != 1)
      {
        *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = (_QWORD *)(v5 + 48);
          do
          {
            *v7++ = a1;
            v8 = a1;
            --v6;
          }
          while (v6);
        }
        v9 = a1;
      }
    }
    else
    {
      v11 = MEMORY[0x24BEE4AF8];

    }
    sub_20A0E08CC();
    return v11;
  }
  return result;
}

uint64_t sub_20A0AFAF4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *v18;
  char *v19;
  uint64_t v20;
  objc_super v21;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_13;
  v2 = sub_20A0B8998(0xD000000000000010, 0x800000020A0F2110);
  if ((v3 & 1) == 0)
    goto LABEL_13;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_13;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v2);
  v5 = sub_20A0B8998(0xD000000000000012, 0x800000020A0F2170);
  if ((v6 & 1) == 0)
    goto LABEL_13;
  if (*(_QWORD *)(a1 + 16)
    && (v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v5),
        v8 = sub_20A0B8998(0xD000000000000015, 0x800000020A0F2190),
        (v9 & 1) != 0)
    && *(_QWORD *)(a1 + 16)
    && (v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8),
        v11 = sub_20A0B8998(0xD000000000000011, 0x800000020A0F21B0),
        (v12 & 1) != 0)
    && *(_QWORD *)(a1 + 16)
    && (v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11),
        result = sub_20A0B8998(0xD000000000000015, 0x800000020A0F21D0),
        (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * result);
    v17 = v16 - v13;
    if (__OFSUB__(v16, v13))
    {
      __break(1u);
    }
    else
    {
      v18 = (objc_class *)type metadata accessor for MemoryUsage();
      v19 = (char *)objc_allocWithZone(v18);
      *(_QWORD *)&v19[OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap] = v4;
      *(_QWORD *)&v19[OBJC_IVAR____TtC9SEService11MemoryUsage_cor] = v7;
      *(_QWORD *)&v19[OBJC_IVAR____TtC9SEService11MemoryUsage_cod] = v10;
      *(_QWORD *)&v19[OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices] = v17;
      v21.receiver = v19;
      v21.super_class = v18;
      return (uint64_t)objc_msgSendSuper2(&v21, sel_init);
    }
  }
  else
  {
LABEL_13:
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v20 = 0xD000000000000033;
    *(_QWORD *)(v20 + 8) = 0x800000020A0F2130;
    *(_BYTE *)(v20 + 16) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_20A0AFCE0()
{
  uint64_t v0;

  v0 = sub_20A0E0740();
  __swift_allocate_value_buffer(v0, qword_2545D7A20);
  __swift_project_value_buffer(v0, (uint64_t)qword_2545D7A20);
  return sub_20A0E0734();
}

uint64_t sub_20A0AFD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_20A0A1384;
  return sub_20A0ABC88(a1, a2, a3);
}

uint64_t sub_20A0AFDC4@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA328);
  v4 = swift_allocObject();
  v5 = MEMORY[0x24BEE4260];
  *(_OWORD *)(v4 + 16) = xmmword_20A0EA0E0;
  v6 = MEMORY[0x24BEE42B0];
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = v6;
  *(_BYTE *)(v4 + 32) = v3;
  result = sub_20A0E0818();
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t sub_20A0AFE4C(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return sub_20A0E08D8();
  return result;
}

void sub_20A0AFE78(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v42 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_20A0B8998(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_20A0C5B20();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v6;
    *(_QWORD *)(v20[7] + 8 * v11) = v8;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v42 - 1;
    if (v42 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 9;
    while (1)
    {
      v28 = *(v26 - 2);
      v27 = *(v26 - 1);
      v29 = *v26;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = sub_20A0B8998(v28, v27);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v23 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v23)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_20A0C7A24(v35, 1);
        v31 = sub_20A0B8998(v28, v27);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v27;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v40 = v38[2];
      v23 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v23)
        goto LABEL_24;
      v38[2] = v41;
      v26 += 3;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_20A0C7A24(v14, a2 & 1);
  v16 = sub_20A0B8998(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_20A0E0D28();
  __break(1u);
LABEL_26:
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

uint64_t sub_20A0B0208(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9378);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20A0B0248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_20A0B521C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_20A0B0250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_20A097370(0, v4, 0);
    v7 = 0;
    result = v35;
    v31 = a3;
    v32 = a1 + 32;
    v30 = v4;
    do
    {
      v34 = result;
      v8 = (uint64_t *)(v32 + 16 * v7);
      v9 = *v8;
      v10 = v8[1];
      v11 = 26;
      swift_bridgeObjectRetain_n();
      v33 = v7 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = (unint64_t *)&unk_24C2BA708;
      while (1)
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        sub_20A074C44(v13, *v12);
        sub_20A074C44(v13, v14);
        sub_20A074C44(v13, v14);
        sub_20A0E0824();
        v15 = sub_20A0E0830();
        v17 = v16;
        swift_bridgeObjectRelease();
        sub_20A075F1C(v13, v14);
        if (v15 == sub_20A0E0830() && v17 == v18)
          break;
        v20 = sub_20A0E0CEC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_12;
        v12 += 2;
        sub_20A075F1C(v13, v14);
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          __break(1u);
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      sub_20A074C44(v13, v14);
      sub_20A074C44(v13, v14);
      sub_20A0E0824();
      v21 = sub_20A0E0830();
      v23 = v22;
      swift_bridgeObjectRelease();
      sub_20A075F1C(v13, v14);
      if (!*(_QWORD *)(v31 + 16) || (v24 = sub_20A0B8998(v21, v23), (v25 & 1) == 0))
      {
LABEL_18:
        swift_bridgeObjectRelease();
        sub_20A075F1C(v13, v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRetain();
        __break(1u);
        return result;
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 32 * v24 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_20A075F1C(v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = v34;
      v28 = *(_QWORD *)(v34 + 16);
      v27 = *(_QWORD *)(v34 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_20A097370(v27 > 1, v28 + 1, 1);
        result = v34;
      }
      *(_QWORD *)(result + 16) = v28 + 1;
      v29 = (_QWORD *)(result + 24 * v28);
      v29[4] = v9;
      v29[5] = v10;
      v29[6] = v26;
      v7 = v33;
    }
    while (v33 != v30);
  }
  return result;
}

uint64_t sub_20A0B05BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v32;

  v4 = v3;
  v26 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
    }
    else
    {
      if (__OFADD__(v9++, 1))
        goto LABEL_43;
      if (v9 >= v27)
      {
LABEL_41:
        swift_release();
        return 0;
      }
      v13 = *(_QWORD *)(v26 + 8 * v9);
      if (!v13)
      {
        v14 = v9 + 1;
        if (v9 + 1 >= v27)
          goto LABEL_41;
        v13 = *(_QWORD *)(v26 + 8 * v14);
        if (v13)
          goto LABEL_16;
        v14 = v9 + 2;
        if (v9 + 2 >= v27)
          goto LABEL_41;
        v13 = *(_QWORD *)(v26 + 8 * v14);
        if (v13)
          goto LABEL_16;
        v14 = v9 + 3;
        if (v9 + 3 >= v27)
          goto LABEL_41;
        v13 = *(_QWORD *)(v26 + 8 * v14);
        if (v13)
        {
LABEL_16:
          v9 = v14;
        }
        else
        {
          v25 = v9 + 4;
          if (v9 + 4 >= v27)
            goto LABEL_41;
          v13 = *(_QWORD *)(v26 + 8 * v25);
          for (v9 += 4; !v13; ++v25)
          {
            v9 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_44;
            if (v9 >= v27)
              goto LABEL_41;
            v13 = *(_QWORD *)(v26 + 8 * v9);
          }
        }
      }
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v9 << 6);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v15 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_20A0AB6B8(a2, a3);
    v32 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
    sub_20A0A6A68();
    v16 = sub_20A0E07E8();
    v18 = v17;
    swift_bridgeObjectRelease();
    v19 = v15[2];
    if (v19)
    {
      v20 = v15[4] == v16 && v15[5] == v18;
      if (v20 || (result = sub_20A0E0CEC(), (result & 1) != 0))
      {
LABEL_40:
        swift_release();
        swift_bridgeObjectRelease();
        return v28;
      }
      if (v19 != 1)
        break;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v4 = v32;
  }
  v21 = v15 + 7;
  v22 = 1;
  while (1)
  {
    v23 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (*(v21 - 1) == v16 && *v21 == v18)
      goto LABEL_40;
    result = sub_20A0E0CEC();
    if ((result & 1) != 0)
      goto LABEL_40;
    v21 += 2;
    ++v22;
    if (v23 == v19)
      goto LABEL_4;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_20A0B0894()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24) >= 0x1BuLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_20A0B08C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_20A0B08E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_20A0B0908()
{
  uint64_t v0;

  return sub_20A0AF928(*(_QWORD *)(v0 + 16));
}

uint64_t sub_20A0B0910()
{
  uint64_t v0;

  return sub_20A0AF98C(v0);
}

uint64_t sub_20A0B0918()
{
  return swift_deallocObject();
}

_BYTE **sub_20A0B0928(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_20A0A739C(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_20A0B0930()
{
  return swift_deallocObject();
}

uint64_t sub_20A0B0940()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20A0B0964()
{
  uint64_t v0;

  return sub_20A0A6CCC(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_20A0B096C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_20A0A6CEC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_20A0B0974()
{
  return swift_deallocObject();
}

uint64_t sub_20A0B0984()
{
  return swift_deallocObject();
}

uint64_t sub_20A0B0994()
{
  return swift_deallocObject();
}

uint64_t sub_20A0B09A4()
{
  return swift_deallocObject();
}

unint64_t sub_20A0B09B4()
{
  unint64_t result;

  result = qword_2545CA318;
  if (!qword_2545CA318)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2545CA318);
  }
  return result;
}

uint64_t sub_20A0B09F0(uint64_t a1, unint64_t a2)
{
  if (a2 != 26)
    return sub_20A074C44(a1, a2);
  return a1;
}

uint64_t sub_20A0B0A00()
{
  return swift_deallocObject();
}

uint64_t sub_20A0B0A10()
{
  return swift_deallocObject();
}

uint64_t sub_20A0B0A20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_20A0B0A4C()
{
  return swift_deallocObject();
}

uint64_t sub_20A0B0A5C()
{
  return swift_deallocObject();
}

_QWORD *JPKIInternalClient.__allocating_init(passIdentifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_allocObject();
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for JPKIXPCClient();
  v5 = swift_allocObject();
  swift_defaultActor_initialize();
  v4[4] = v5;
  return v4;
}

_QWORD *JPKIInternalClient.init(passIdentifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  type metadata accessor for JPKIXPCClient();
  v3 = swift_allocObject();
  swift_defaultActor_initialize();
  v2[4] = v3;
  return v2;
}

uint64_t JPKIInternalClient.installedCertificateTypes()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 192) = a1;
  *(_QWORD *)(v2 + 200) = v1;
  return swift_task_switch();
}

uint64_t sub_20A0B0B68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)(v0 + 200);
  v3 = v1[2];
  v2 = v1[3];
  *(_QWORD *)(v0 + 208) = v2;
  *(_QWORD *)(v0 + 216) = v1[4];
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 72) = -64;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_20A0B0BCC()
{
  uint64_t v0;

  sub_20A0955B4(v0 + 16, (uint64_t *)(v0 + 80));
  *(_QWORD *)(v0 + 224) = 0;
  return swift_task_switch();
}

uint64_t sub_20A0B0C30()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v18;
  NSObject *log;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(unsigned __int8 *)(v0 + 120);
  if (qword_2545C8E70 != -1)
    swift_once();
  v7 = sub_20A0E0740();
  __swift_project_value_buffer(v7, (uint64_t)qword_2545CA330);
  v20 = v6 >> 5;
  sub_20A08D654(v2, v1, v3, v4, v5, v6);
  sub_20A08D654(v2, v1, v3, v4, v5, v6);
  v8 = sub_20A0E0728();
  v9 = sub_20A0E09B0();
  if (os_log_type_enabled(v8, v9))
  {
    log = v8;
    v10 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v21 = v18;
    buf = v10;
    *(_DWORD *)v10 = 136315138;
    v23 = v2;
    v24 = v1;
    v25 = v3;
    v26 = v4;
    v27 = v5;
    v28 = v6;
    JPKIXPCResponse.description.getter();
    *(_QWORD *)(v0 + 16) = sub_20A0A6D5C(v11, v12, &v21);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    v8 = log;
    _os_log_impl(&dword_20A048000, log, v9, "Response %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v18, -1, -1);
    MEMORY[0x20BD20380](buf, -1, -1);
  }
  else
  {
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
  }

  if (!v20)
  {
    swift_bridgeObjectRelease();
    sub_20A08B960(0, 0, 0, 0, 0, 0xC0u);
LABEL_11:
    v13 = 1;
    goto LABEL_12;
  }
  if (v20 != 1)
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    sub_20A0E0AC4();
    swift_bridgeObjectRelease();
    v21 = 0xD00000000000002ELL;
    v22 = 0x800000020A0F21F0;
    v23 = v2;
    v24 = v1;
    v25 = v3;
    v26 = v4;
    v27 = v5;
    v28 = v6;
    JPKIXPCResponse.description.getter();
    sub_20A0E0854();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20A08B960(0, 0, 0, 0, 0, 0xC0u);
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    v3 = 0;
    v4 = 0;
    v5 = 0;
    LOBYTE(v6) = 0;
    v2 = v21;
    v1 = v22;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  sub_20A08B960(0, 0, 0, 0, 0, 0xC0u);
  v1 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  LOBYTE(v6) = 0;
  v13 = 0;
LABEL_12:
  v14 = *(uint64_t **)(v0 + 192);
  *v14 = v2;
  v14[1] = v1;
  v14[2] = v3;
  v14[3] = v4;
  v14[4] = v5;
  v15 = *(_QWORD *)(v0 + 192);
  *(_BYTE *)(v15 + 40) = v6;
  *(_BYTE *)(v15 + 41) = v13;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B0FF8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (qword_2545C8E70 != -1)
    swift_once();
  v1 = *(void **)(v0 + 224);
  v2 = sub_20A0E0740();
  __swift_project_value_buffer(v2, (uint64_t)qword_2545CA330);
  v3 = v1;
  v4 = v1;
  v5 = sub_20A0E0728();
  v6 = sub_20A0E0998();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 224);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v19 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue();
    v11 = sub_20A0E0D34();
    *(_QWORD *)(v0 + 16) = sub_20A0A6D5C(v11, v12, &v19);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, v5, v6, "Unhandled XPC error : %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v10, -1, -1);
    MEMORY[0x20BD20380](v9, -1, -1);
  }
  else
  {

  }
  v13 = *(void **)(v0 + 224);
  v14 = *(uint64_t **)(v0 + 192);
  swift_getErrorValue();
  v15 = sub_20A0E0D34();
  v17 = v16;
  swift_bridgeObjectRelease();
  sub_20A08B960(0, 0, 0, 0, 0, 0xC0u);

  *v14 = v15;
  v14[1] = v17;
  v14[3] = 0;
  v14[4] = 0;
  v14[2] = 0;
  *(_WORD *)(*(_QWORD *)(v0 + 192) + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t JPKIInternalClient.read(certificateType:userAuthentication:)(uint64_t a1, _BYTE *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 256) = a1;
  *(_QWORD *)(v4 + 264) = v3;
  *(_BYTE *)(v4 + 73) = *a2;
  *(_OWORD *)(v4 + 272) = *a3;
  return swift_task_switch();
}

uint64_t sub_20A0B1270()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 280);
  if (v1)
  {
    v3 = *(_QWORD **)(v0 + 264);
    v2 = *(_QWORD *)(v0 + 272);
    *(_QWORD *)(v0 + 328) = v2;
    *(_QWORD *)(v0 + 336) = v1;
    *(_QWORD *)(v0 + 312) = 0;
    *(_QWORD *)(v0 + 320) = 0;
    v4 = *(unsigned __int8 *)(v0 + 73);
    v6 = v3[2];
    v5 = v3[3];
    *(_QWORD *)(v0 + 344) = v5;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 352) = v3[4];
    *(_QWORD *)(v0 + 16) = v6;
    *(_QWORD *)(v0 + 24) = v5;
    *(_QWORD *)(v0 + 32) = v4;
    *(_QWORD *)(v0 + 40) = v2;
    *(_QWORD *)(v0 + 56) = 0;
    *(_QWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 48) = v1;
    *(_BYTE *)(v0 + 72) = 0;
    swift_bridgeObjectRetain();
    sub_20A08AB4C(v2, v1, 0);
    return swift_task_switch();
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v8;
    *v8 = v0;
    v8[1] = sub_20A0B1354;
    return sub_20A0B2FEC(v0 + 80);
  }
}

uint64_t sub_20A0B1354(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 296) = a1;
  *(_QWORD *)(v3 + 304) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0B13C0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[39];
  sub_20A0955B4((uint64_t)(v0 + 2), v0 + 16);
  v0[45] = v1;
  return swift_task_switch();
}

id sub_20A0B1424()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;

  result = objc_msgSend(*(id *)(v0 + 296), sel_externalizedContext);
  if (result)
  {
    v2 = result;
    v3 = sub_20A0E0668();
    v5 = v4;

    v7 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 304);
    *(_QWORD *)(v0 + 328) = v3;
    *(_QWORD *)(v0 + 336) = v5;
    *(_QWORD *)(v0 + 312) = v6;
    *(_QWORD *)(v0 + 320) = v7;
    v8 = *(unsigned __int8 *)(v0 + 73);
    v9 = *(_QWORD **)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 280) == 0;
    v12 = v9[2];
    v11 = v9[3];
    *(_QWORD *)(v0 + 344) = v11;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 352) = v9[4];
    *(_QWORD *)(v0 + 16) = v12;
    *(_QWORD *)(v0 + 24) = v11;
    *(_QWORD *)(v0 + 32) = v8;
    *(_QWORD *)(v0 + 40) = v3;
    *(_QWORD *)(v0 + 48) = v5;
    *(_QWORD *)(v0 + 56) = v10;
    *(_QWORD *)(v0 + 64) = 0;
    *(_BYTE *)(v0 + 72) = 0;
    swift_bridgeObjectRetain();
    sub_20A08AB4C(v3, v5, v10);
    return (id)swift_task_switch();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_20A0B1504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 80);
  v21 = *(_OWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_BYTE *)(v0 + 120);
  sub_20A0B49A4();
  v5 = (void *)swift_allocError();
  *(_QWORD *)v6 = v1;
  *(_OWORD *)(v6 + 8) = v21;
  *(_QWORD *)(v6 + 24) = v2;
  *(_QWORD *)(v6 + 32) = v3;
  *(_BYTE *)(v6 + 40) = v4;
  if (qword_2545C8E70 != -1)
    swift_once();
  v7 = sub_20A0E0740();
  __swift_project_value_buffer(v7, (uint64_t)qword_2545CA330);
  v8 = v5;
  v9 = v5;
  v10 = sub_20A0E0728();
  v11 = sub_20A0E0998();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v22 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_getErrorValue();
    v14 = sub_20A0E0D34();
    *(_QWORD *)(v0 + 232) = sub_20A0A6D5C(v14, v15, &v22);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, v10, v11, "Unhandled XPC error : %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v13, -1, -1);
    MEMORY[0x20BD20380](v12, -1, -1);
  }
  else
  {

  }
  v16 = *(_QWORD *)(v0 + 256);
  swift_getErrorValue();
  v17 = sub_20A0E0D34();
  v19 = v18;

  *(_QWORD *)v16 = v17;
  *(_QWORD *)(v16 + 8) = v19;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_WORD *)(v16 + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B1760()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  void *v30;
  uint64_t v31;
  uint8_t *buf;
  uint64_t v34;
  NSObject *log;
  uint64_t loga;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(unsigned __int8 *)(v0 + 168);
  if (qword_2545C8E70 != -1)
    swift_once();
  v7 = sub_20A0E0740();
  __swift_project_value_buffer(v7, (uint64_t)qword_2545CA330);
  v39 = v6 >> 5;
  sub_20A08D654(v2, v1, v3, v4, v5, v6);
  sub_20A08D654(v2, v1, v3, v4, v5, v6);
  v8 = sub_20A0E0728();
  v9 = sub_20A0E09B0();
  if (os_log_type_enabled(v8, v9))
  {
    log = v8;
    v10 = (uint8_t *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    v41 = v34;
    buf = v10;
    *(_DWORD *)v10 = 136315138;
    v43 = v2;
    v44 = v1;
    v45 = v3;
    v46 = v4;
    v47 = v5;
    v48 = v6;
    JPKIXPCResponse.description.getter();
    *(_QWORD *)(v0 + 248) = sub_20A0A6D5C(v11, v12, &v41);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    v8 = log;
    _os_log_impl(&dword_20A048000, log, v9, "Response %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v34, -1, -1);
    MEMORY[0x20BD20380](buf, -1, -1);
  }
  else
  {
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
  }

  if (!v39)
  {
    v20 = *(_QWORD *)(v0 + 336);
    v21 = *(_QWORD *)(v0 + 328);
    v37 = v1;
    v22 = *(_QWORD *)(v0 + 280);
    v23 = *(unsigned __int8 *)(v0 + 73);
    swift_bridgeObjectRelease();
    v24 = v22 == 0;
    sub_20A08B960(v23, v21, v20, v24, 0, 0);
    v25 = v20;
    v18 = v37;
    sub_20A08B7FC(v21, v25, v24);
LABEL_11:
    v19 = 1;
    goto LABEL_12;
  }
  if (v39 != 2)
  {
    v38 = v1;
    v40 = *(_QWORD *)(v0 + 336);
    v26 = v1;
    v27 = *(_QWORD *)(v0 + 328);
    loga = *(unsigned __int8 *)(v0 + 73);
    v28 = v2;
    v29 = *(_QWORD *)(v0 + 280) == 0;
    v43 = 0;
    v44 = 0xE000000000000000;
    sub_20A0E0AC4();
    swift_bridgeObjectRelease();
    v41 = 0xD000000000000021;
    v42 = 0x800000020A0F2220;
    v43 = v28;
    v44 = v26;
    v45 = v3;
    v46 = v4;
    v47 = v5;
    v48 = v6;
    JPKIXPCResponse.description.getter();
    sub_20A0E0854();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20A08B960(loga, v27, v40, v29, 0, 0);
    sub_20A08B7FC(v27, v40, v29);
    sub_20A08D710(v28, v38, v3, v4, v5, v6);
    v3 = 0;
    v4 = 0;
    v5 = 0;
    LOBYTE(v6) = 0;
    v2 = v41;
    v18 = v42;
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(unsigned __int8 *)(v0 + 73);
  swift_bridgeObjectRelease();
  v17 = v15 == 0;
  sub_20A08B960(v16, v14, v13, v17, 0, 0);
  sub_20A08B7FC(v14, v13, v17);
  v18 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  LOBYTE(v6) = 0;
  v19 = 0;
LABEL_12:
  v30 = *(void **)(v0 + 320);
  v31 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)v31 = v2;
  *(_QWORD *)(v31 + 8) = v18;
  *(_QWORD *)(v31 + 16) = v3;
  *(_QWORD *)(v31 + 24) = v4;
  *(_QWORD *)(v31 + 32) = v5;
  *(_BYTE *)(v31 + 40) = v6;
  *(_BYTE *)(v31 + 41) = v19;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B1BD8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(void **)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(unsigned __int8 *)(v0 + 73);
  v6 = v4 == 0;
  sub_20A08B7FC(v2, v1, v4 == 0);
  swift_bridgeObjectRelease();
  sub_20A08B960(v5, v2, v1, v6, 0, 0);

  v7 = *(void **)(v0 + 360);
  if (qword_2545C8E70 != -1)
    swift_once();
  v8 = sub_20A0E0740();
  __swift_project_value_buffer(v8, (uint64_t)qword_2545CA330);
  v9 = v7;
  v10 = v7;
  v11 = sub_20A0E0728();
  v12 = sub_20A0E0998();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v22 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_getErrorValue();
    v15 = sub_20A0E0D34();
    *(_QWORD *)(v0 + 232) = sub_20A0A6D5C(v15, v16, &v22);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, v11, v12, "Unhandled XPC error : %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v14, -1, -1);
    MEMORY[0x20BD20380](v13, -1, -1);
  }
  else
  {

  }
  v17 = *(_QWORD *)(v0 + 256);
  swift_getErrorValue();
  v18 = sub_20A0E0D34();
  v20 = v19;

  *(_QWORD *)v17 = v18;
  *(_QWORD *)(v17 + 8) = v20;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_WORD *)(v17 + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t JPKIInternalClient.changeAuthorization(certificateType:prevAuthentication:newAuthentication:)(uint64_t a1, _BYTE *a2, _OWORD *a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v5 + 192) = a1;
  *(_QWORD *)(v5 + 200) = v4;
  *(_BYTE *)(v5 + 73) = *a2;
  v6 = *a4;
  *(_OWORD *)(v5 + 208) = *a3;
  *(_OWORD *)(v5 + 224) = v6;
  return swift_task_switch();
}

uint64_t sub_20A0B1E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(unsigned __int8 *)(v0 + 73);
  v4 = *(_QWORD **)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v6 = v4[2];
  v5 = v4[3];
  *(_QWORD *)(v0 + 240) = v5;
  *(_QWORD *)(v0 + 248) = v4[4];
  *(_QWORD *)(v0 + 16) = v6;
  *(_QWORD *)(v0 + 24) = v5;
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v3;
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 64) = v1;
  *(_BYTE *)(v0 + 72) = 64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_20A0B1EF8()
{
  uint64_t v0;

  sub_20A0955B4(v0 + 16, (uint64_t *)(v0 + 80));
  *(_QWORD *)(v0 + 256) = 0;
  return swift_task_switch();
}

uint64_t sub_20A0B1F5C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint8_t *buf;
  uint8_t *bufa;
  uint64_t v28;
  unint64_t v29;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(unsigned __int8 *)(v0 + 120);
  if (qword_2545C8E70 != -1)
    swift_once();
  v7 = sub_20A0E0740();
  __swift_project_value_buffer(v7, (uint64_t)qword_2545CA330);
  v33 = v6 >> 5;
  sub_20A08D654(v1, v2, v3, v4, v5, v6);
  sub_20A08D654(v1, v2, v3, v4, v5, v6);
  v8 = sub_20A0E0728();
  v9 = sub_20A0E09B0();
  if (os_log_type_enabled(v8, v9))
  {
    log = v8;
    v10 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v36 = v28;
    buf = v10;
    *(_DWORD *)v10 = 136315138;
    v38 = v1;
    v39 = v2;
    v40 = v3;
    v41 = v4;
    v42 = v5;
    v43 = v6;
    JPKIXPCResponse.description.getter();
    *(_QWORD *)(v0 + 16) = sub_20A0A6D5C(v11, v12, &v36);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A08D710(v1, v2, v3, v4, v5, v6);
    sub_20A08D710(v1, v2, v3, v4, v5, v6);
    v8 = log;
    _os_log_impl(&dword_20A048000, log, v9, "Response %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v28, -1, -1);
    MEMORY[0x20BD20380](buf, -1, -1);
  }
  else
  {
    sub_20A08D710(v1, v2, v3, v4, v5, v6);
    sub_20A08D710(v1, v2, v3, v4, v5, v6);
  }

  if (!v33)
  {
    v19 = *(_QWORD *)(v0 + 216);
    logb = *(os_log_t *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 208);
    v21 = *(unsigned __int8 *)(v0 + 73);
    swift_bridgeObjectRelease();
    sub_20A08B960(v21, v20, v19, (uint64_t)logb, v35, 0x40u);
    goto LABEL_13;
  }
  if (v33 != 5 || v2 | v1 | v3 | v4 | v5 || v6 != 160)
  {
    loga = *(os_log_t *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 232);
    bufa = *(uint8_t **)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 216);
    v25 = *(unsigned __int8 *)(v0 + 73);
    v38 = 0;
    v39 = 0xE000000000000000;
    sub_20A0E0AC4();
    swift_bridgeObjectRelease();
    v36 = 0xD000000000000025;
    v37 = 0x800000020A0F2250;
    v38 = v1;
    v39 = v2;
    v40 = v3;
    v41 = v4;
    v42 = v5;
    v43 = v6;
    JPKIXPCResponse.description.getter();
    sub_20A0E0854();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20A08B960(v25, (unint64_t)bufa, v29, (uint64_t)loga, v34, 0x40u);
    sub_20A08D710(v1, v2, v3, v4, v5, v6);
    v3 = 0;
    v4 = 0;
    v5 = 0;
    LOBYTE(v6) = 0;
    v1 = v36;
    v2 = v37;
LABEL_13:
    v18 = 1;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(unsigned __int8 *)(v0 + 73);
  swift_bridgeObjectRelease();
  sub_20A08B960(v17, v16, v15, v14, v13, 0x40u);
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  LOBYTE(v6) = 0;
  v18 = 0;
LABEL_14:
  v22 = *(uint64_t **)(v0 + 192);
  *v22 = v1;
  v22[1] = v2;
  v22[2] = v3;
  v22[3] = v4;
  v22[4] = v5;
  v23 = *(_QWORD *)(v0 + 192);
  *(_BYTE *)(v23 + 40) = v6;
  *(_BYTE *)(v23 + 41) = v18;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B2368()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;

  if (qword_2545C8E70 != -1)
    swift_once();
  v1 = *(void **)(v0 + 256);
  v2 = sub_20A0E0740();
  __swift_project_value_buffer(v2, (uint64_t)qword_2545CA330);
  v3 = v1;
  v4 = v1;
  v5 = sub_20A0E0728();
  v6 = sub_20A0E0998();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 256);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v24 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue();
    v11 = sub_20A0E0D34();
    *(_QWORD *)(v0 + 16) = sub_20A0A6D5C(v11, v12, &v24);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, v5, v6, "Unhandled XPC error : %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v10, -1, -1);
    MEMORY[0x20BD20380](v9, -1, -1);
  }
  else
  {

  }
  v13 = *(void **)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(unsigned __int8 *)(v0 + 73);
  v18 = *(uint64_t **)(v0 + 192);
  swift_getErrorValue();
  v19 = sub_20A0E0D34();
  v21 = v20;
  swift_bridgeObjectRelease();
  sub_20A08B960(v17, v16, v15, v14, v23, 0x40u);

  *v18 = v19;
  v18[1] = v21;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = 0;
  *(_WORD *)(*(_QWORD *)(v0 + 192) + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t JPKIInternalClient.sign(data:certificateType:userAuthentication:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _OWORD *a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 272) = a3;
  *(_QWORD *)(v6 + 280) = v5;
  *(_QWORD *)(v6 + 256) = a1;
  *(_QWORD *)(v6 + 264) = a2;
  *(_BYTE *)(v6 + 73) = *a4;
  *(_OWORD *)(v6 + 288) = *a5;
  return swift_task_switch();
}

uint64_t sub_20A0B25F4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 296);
  if (v1)
  {
    v3 = *(_QWORD **)(v0 + 280);
    v2 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 344) = v2;
    *(_QWORD *)(v0 + 352) = v1;
    *(_QWORD *)(v0 + 328) = 0;
    *(_QWORD *)(v0 + 336) = 0;
    v4 = *(unsigned __int8 *)(v0 + 73);
    v6 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 272);
    v8 = v3[2];
    v7 = v3[3];
    *(_QWORD *)(v0 + 360) = v7;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 368) = v3[4];
    *(_QWORD *)(v0 + 16) = v8;
    *(_QWORD *)(v0 + 24) = v7;
    *(_QWORD *)(v0 + 32) = v6;
    *(_QWORD *)(v0 + 40) = v5;
    *(_QWORD *)(v0 + 48) = v4;
    *(_QWORD *)(v0 + 56) = v2;
    *(_QWORD *)(v0 + 64) = v1;
    *(_BYTE *)(v0 + 72) = 0x80;
    swift_bridgeObjectRetain();
    sub_20A07F854(v6, v5);
    sub_20A08AB4C(v2, v1, 0);
    return swift_task_switch();
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 304) = v10;
    *v10 = v0;
    v10[1] = sub_20A0B26F8;
    return sub_20A0B2FEC(v0 + 80);
  }
}

uint64_t sub_20A0B26F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 312) = a1;
  *(_QWORD *)(v3 + 320) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0B2764()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[41];
  sub_20A0955B4((uint64_t)(v0 + 2), v0 + 16);
  v0[47] = v1;
  return swift_task_switch();
}

id sub_20A0B27C8()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = objc_msgSend(*(id *)(v0 + 312), sel_externalizedContext);
  if (result)
  {
    v2 = result;
    v3 = sub_20A0E0668();
    v5 = v4;

    v7 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 344) = v3;
    *(_QWORD *)(v0 + 352) = v5;
    *(_QWORD *)(v0 + 328) = v6;
    *(_QWORD *)(v0 + 336) = v7;
    v14 = *(unsigned __int8 *)(v0 + 73);
    v8 = *(_QWORD *)(v0 + 272);
    v9 = *(_QWORD **)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 264);
    v11 = *(_QWORD *)(v0 + 296) == 0;
    v13 = v9[2];
    v12 = v9[3];
    *(_QWORD *)(v0 + 360) = v12;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 368) = v9[4];
    *(_QWORD *)(v0 + 16) = v13;
    *(_QWORD *)(v0 + 24) = v12;
    *(_QWORD *)(v0 + 32) = v10;
    *(_QWORD *)(v0 + 40) = v8;
    *(_QWORD *)(v0 + 48) = v14;
    *(_QWORD *)(v0 + 56) = v3;
    *(_QWORD *)(v0 + 64) = v5;
    *(_BYTE *)(v0 + 72) = v11 | 0x80;
    swift_bridgeObjectRetain();
    sub_20A07F854(v10, v8);
    sub_20A08AB4C(v3, v5, v11);
    return (id)swift_task_switch();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_20A0B28CC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  uint8_t *buf;
  uint8_t *bufa;
  uint64_t v43;
  NSObject *log;
  unint64_t loga;
  unint64_t logb;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  LODWORD(v6) = *(unsigned __int8 *)(v0 + 168);
  if (qword_2545C8E70 != -1)
    swift_once();
  v7 = sub_20A0E0740();
  __swift_project_value_buffer(v7, (uint64_t)qword_2545CA330);
  v49 = v6 >> 5;
  sub_20A08D654(v2, v1, v3, v4, v5, v6);
  sub_20A08D654(v2, v1, v3, v4, v5, v6);
  v8 = sub_20A0E0728();
  v9 = sub_20A0E09B0();
  if (os_log_type_enabled(v8, v9))
  {
    log = v8;
    v10 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    v52 = v43;
    buf = v10;
    *(_DWORD *)v10 = 136315138;
    v54 = v2;
    v55 = v1;
    v56 = v3;
    v57 = v4;
    v58 = v5;
    v59 = v6;
    JPKIXPCResponse.description.getter();
    *(_QWORD *)(v0 + 248) = sub_20A0A6D5C(v11, v12, &v52);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    v8 = log;
    _os_log_impl(&dword_20A048000, log, v9, "Response %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v43, -1, -1);
    MEMORY[0x20BD20380](buf, -1, -1);
  }
  else
  {
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
    sub_20A08D710(v2, v1, v3, v4, v5, v6);
  }

  if (!v49)
  {
    v23 = *(_QWORD *)(v0 + 352);
    v24 = *(_QWORD *)(v0 + 344);
    v25 = *(_QWORD *)(v0 + 296);
    loga = *(unsigned __int8 *)(v0 + 73);
    v47 = v1;
    v50 = v5;
    v26 = v4;
    v27 = v3;
    v28 = v2;
    v30 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 272);
    swift_bridgeObjectRelease();
    LOBYTE(v25) = v25 == 0;
    v31 = v30;
    v2 = v28;
    v19 = v27;
    v20 = v26;
    v32 = v29;
    v18 = v47;
    v21 = v50;
    sub_20A08B960(v31, v32, loga, v24, v23, v25 | 0x80);
    sub_20A08B7FC(v24, v23, v25);
LABEL_11:
    v22 = 1;
    goto LABEL_12;
  }
  if (v49 != 3)
  {
    v48 = v1;
    v51 = *(_QWORD *)(v0 + 352);
    v33 = v1;
    v34 = *(_QWORD *)(v0 + 344);
    logb = *(unsigned __int8 *)(v0 + 73);
    bufa = *(uint8_t **)(v0 + 272);
    v40 = *(_QWORD *)(v0 + 264);
    v35 = v2;
    v36 = *(_QWORD *)(v0 + 296) == 0;
    v54 = 0;
    v55 = 0xE000000000000000;
    sub_20A0E0AC4();
    swift_bridgeObjectRelease();
    v52 = 0xD00000000000001BLL;
    v53 = 0x800000020A0F2280;
    v54 = v35;
    v55 = v33;
    v56 = v3;
    v57 = v4;
    v58 = v5;
    v59 = v6;
    JPKIXPCResponse.description.getter();
    sub_20A0E0854();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20A08B960(v40, (unint64_t)bufa, logb, v34, v51, v36 | 0x80);
    sub_20A08B7FC(v34, v51, v36);
    sub_20A08D710(v35, v48, v3, v4, v5, v6);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    LOBYTE(v6) = 0;
    v2 = v52;
    v18 = v53;
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 296);
  v15 = *(unsigned __int8 *)(v0 + 73);
  v17 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRelease();
  LOBYTE(v6) = v6 == 0;
  sub_20A08B960(v17, v16, v15, v14, v13, v6 | 0x80);
  sub_20A08B7FC(v14, v13, v6);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  LOBYTE(v6) = 0;
  v22 = 0;
LABEL_12:
  v37 = *(void **)(v0 + 336);
  v38 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)v38 = v2;
  *(_QWORD *)(v38 + 8) = v18;
  *(_QWORD *)(v38 + 16) = v19;
  *(_QWORD *)(v38 + 24) = v20;
  *(_QWORD *)(v38 + 32) = v21;
  *(_BYTE *)(v38 + 40) = v6;
  *(_BYTE *)(v38 + 41) = v22;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B2D80()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(void **)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(unsigned __int8 *)(v0 + 73);
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 296) == 0;
  v8 = v7 | 0x80;
  sub_20A08B7FC(v2, v1, v7);
  swift_bridgeObjectRelease();
  sub_20A08B960(v6, v5, v4, v2, v1, v8);

  v9 = *(void **)(v0 + 376);
  if (qword_2545C8E70 != -1)
    swift_once();
  v10 = sub_20A0E0740();
  __swift_project_value_buffer(v10, (uint64_t)qword_2545CA330);
  v11 = v9;
  v12 = v9;
  v13 = sub_20A0E0728();
  v14 = sub_20A0E0998();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v24 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_getErrorValue();
    v17 = sub_20A0E0D34();
    *(_QWORD *)(v0 + 232) = sub_20A0A6D5C(v17, v18, &v24);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, v13, v14, "Unhandled XPC error : %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v16, -1, -1);
    MEMORY[0x20BD20380](v15, -1, -1);
  }
  else
  {

  }
  v19 = *(_QWORD *)(v0 + 256);
  swift_getErrorValue();
  v20 = sub_20A0E0D34();
  v22 = v21;

  *(_QWORD *)v19 = v20;
  *(_QWORD *)(v19 + 8) = v22;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_WORD *)(v19 + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B2FEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[40] = v1;
  v2[41] = a1;
  v3 = (_QWORD *)swift_task_alloc();
  v2[42] = v3;
  *v3 = v2;
  v3[1] = sub_20A0B3050;
  v3[25] = v1;
  v3[26] = v2 + 16;
  return swift_task_switch();
}

uint64_t sub_20A0B3050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[43] = a1;
  v4[44] = a2;
  v4[45] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0B30C0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  char *v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = sub_20A0B4668(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352), (char *)(v0 + 80));
  *(_QWORD *)(v0 + 368) = v2;
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 328);
    sub_20A07F898(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_BYTE *)(v0 + 120);
    v6 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)v3 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v3 + 16) = v6;
    *(_QWORD *)(v3 + 32) = v4;
    *(_BYTE *)(v3 + 40) = v5;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = v2;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDA938]), sel_init);
    *(_QWORD *)(v0 + 376) = v9;
    v10 = v8;
    v11 = sub_20A0E0800();
    *(_QWORD *)(v0 + 384) = v11;
    sub_20A0A0B74(MEMORY[0x24BEE4AF8]);
    v12 = sub_20A0E07A0();
    *(_QWORD *)(v0 + 392) = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v0 + 296;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_20A0B325C;
    v13 = swift_continuation_init();
    *(_QWORD *)(v0 + 224) = MEMORY[0x24BDAC760];
    v14 = (_QWORD *)(v0 + 224);
    v14[1] = 0x40000000;
    v14[2] = sub_20A0B480C;
    v14[3] = &block_descriptor_2;
    v14[4] = v13;
    objc_msgSend(v9, sel_evaluateAccessControl_aksOperation_options_reply_, v10, v11, v12, v14);
    return swift_continuation_await();
  }
}

uint64_t sub_20A0B325C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 400) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0B32BC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(void **)(v0 + 384);
  v1 = *(void **)(v0 + 392);
  v3 = *(void **)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 352);

  sub_20A07F898(v4, v5);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 376));
}

uint64_t sub_20A0B3330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_BYTE *)(v0 + 168);
  v4 = *(_OWORD *)(v0 + 144);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 40) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B3358()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v36[2];

  v1 = *(void **)(v0 + 392);
  v2 = *(void **)(v0 + 384);
  v3 = *(void **)(v0 + 368);
  swift_willThrow();

  if (qword_2545C8E70 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v6 = sub_20A0E0740();
  __swift_project_value_buffer(v6, (uint64_t)qword_2545CA330);
  sub_20A07F854(v5, v4);
  sub_20A07F854(v5, v4);
  v7 = sub_20A0E0728();
  v8 = sub_20A0E0998();
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 352);
  if (v9)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v36[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = sub_20A0E0650();
    *(_QWORD *)(v0 + 312) = sub_20A0A6D5C(v14, v15, v36);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A07F898(v11, v10);
    sub_20A07F898(v11, v10);
    _os_log_impl(&dword_20A048000, v7, v8, "ACL is %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v13, -1, -1);
    MEMORY[0x20BD20380](v12, -1, -1);
  }
  else
  {
    sub_20A07F898(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
    sub_20A07F898(v11, v10);
  }

  v16 = *(void **)(v0 + 400);
  v17 = v16;
  v18 = v16;
  v19 = sub_20A0E0728();
  v20 = sub_20A0E0998();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(void **)(v0 + 400);
  if (v21)
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v36[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_getErrorValue();
    v25 = sub_20A0E0D34();
    *(_QWORD *)(v0 + 304) = sub_20A0A6D5C(v25, v26, v36);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, v19, v20, "LAContext error %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v24, -1, -1);
    MEMORY[0x20BD20380](v23, -1, -1);
  }
  else
  {

  }
  v27 = *(void **)(v0 + 400);
  v29 = *(void **)(v0 + 368);
  v28 = *(void **)(v0 + 376);
  v31 = *(_QWORD *)(v0 + 344);
  v30 = *(_QWORD *)(v0 + 352);
  v32 = *(_QWORD *)(v0 + 328);
  v33 = (void *)sub_20A0E0614();
  v34 = objc_msgSend(v33, sel_code);

  *(_QWORD *)v32 = v34;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_BYTE *)(v32 + 40) = 2;
  *(_QWORD *)(v0 + 176) = v34;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_BYTE *)(v0 + 216) = 2;
  sub_20A0B49A4();
  swift_willThrowTypedImpl();

  sub_20A07F898(v31, v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0B3738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 200) = v1;
  *(_QWORD *)(v2 + 208) = a1;
  return swift_task_switch();
}

uint64_t sub_20A0B3750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 216) = v2;
  v4 = qword_2545C8E70;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = sub_20A0E0740();
  *(_QWORD *)(v0 + 224) = __swift_project_value_buffer(v5, (uint64_t)qword_2545CA330);
  v6 = sub_20A0E0728();
  v7 = sub_20A0E0980();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_20A048000, v6, v7, "Sending getACL request", v8, 2u);
    MEMORY[0x20BD20380](v8, -1, -1);
  }
  v9 = *(_QWORD *)(v0 + 200);

  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = 1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_BYTE *)(v0 + 72) = -64;
  return swift_task_switch();
}

uint64_t sub_20A0B3880()
{
  uint64_t v0;

  sub_20A0955B4(v0 + 16, (uint64_t *)(v0 + 80));
  *(_QWORD *)(v0 + 240) = 0;
  return swift_task_switch();
}

uint64_t sub_20A0B38E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  os_log_type_t type;
  uint64_t typea;
  uint64_t v50;
  os_log_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v1 = v0 + 80;
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(unsigned __int8 *)(v0 + 120);
  v8 = v7 >> 5;
  sub_20A08D654(v2, v3, v4, v6, v5, *(_BYTE *)(v0 + 120));
  sub_20A08D654(v2, v3, v4, v6, v5, v7);
  v9 = sub_20A0E0728();
  type = sub_20A0E09B0();
  v50 = v0;
  if (!os_log_type_enabled(v9, type))
  {
    sub_20A08D710(v2, v3, v4, v6, v5, v7);
    sub_20A08D710(v2, v3, v4, v6, v5, v7);

    if (v8)
      goto LABEL_3;
LABEL_6:
    sub_20A0B49A4();
    v16 = (void *)swift_allocError();
    *(_QWORD *)v17 = v2;
    *(_QWORD *)(v17 + 8) = v3;
    *(_QWORD *)(v17 + 16) = v4;
    *(_QWORD *)(v17 + 24) = v6;
    *(_QWORD *)(v17 + 32) = v5;
    *(_BYTE *)(v17 + 40) = v7;
    swift_willThrow();
    goto LABEL_8;
  }
  v51 = (os_log_t)v6;
  v10 = v4;
  v11 = (uint8_t *)swift_slowAlloc();
  v46 = swift_slowAlloc();
  v52 = v46;
  *(_DWORD *)v11 = 136315138;
  v54 = v2;
  v55 = v3;
  v56 = v10;
  v57 = (uint64_t)v51;
  v58 = v5;
  v59 = v7;
  JPKIXPCResponse.description.getter();
  *(_QWORD *)(v0 + 16) = sub_20A0A6D5C(v12, v13, &v52);
  sub_20A0E0A10();
  swift_bridgeObjectRelease();
  sub_20A08D710(v2, v3, v10, (uint64_t)v51, v5, v7);
  sub_20A08D710(v2, v3, v10, (uint64_t)v51, v5, v7);
  _os_log_impl(&dword_20A048000, v9, type, "Response %s", v11, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x20BD20380](v46, -1, -1);
  v14 = v11;
  v4 = v10;
  v6 = (uint64_t)v51;
  MEMORY[0x20BD20380](v14, -1, -1);

  if (!v8)
    goto LABEL_6;
LABEL_3:
  if (v8 == 4)
  {
    swift_bridgeObjectRelease();
    sub_20A08B960(1, 0, 0, 0, 0, 0xC0u);
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v2, v3);
  }
  v54 = 0;
  v55 = 0xE000000000000000;
  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  v52 = 0xD000000000000018;
  v53 = 0x800000020A0F2310;
  v54 = v2;
  v55 = v3;
  v56 = v4;
  v57 = v6;
  v58 = v5;
  v59 = v7;
  JPKIXPCResponse.description.getter();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  v18 = v52;
  v19 = v53;
  sub_20A0B49A4();
  v16 = (void *)swift_allocError();
  *(_QWORD *)v20 = v18;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_BYTE *)(v20 + 40) = 0;
  swift_willThrow();
  sub_20A08D710(v2, v3, v4, v6, v5, v7);
LABEL_8:
  *(_QWORD *)(v50 + 192) = v16;
  v21 = v16;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
  if (swift_dynamicCast())
  {

    v22 = *(_QWORD *)(v50 + 80);
    v23 = *(_QWORD *)(v50 + 88);
    v24 = *(_QWORD *)(v50 + 96);
    v25 = *(_QWORD *)(v50 + 104);
    v26 = *(_QWORD *)(v50 + 112);
    v27 = *(_BYTE *)(v50 + 120);
    sub_20A08D68C(v22, v23, v24, v25, v26, v27);
    sub_20A08D68C(v22, v23, v24, v25, v26, v27);
    v28 = sub_20A0E0728();
    v29 = sub_20A0E0998();
    if (os_log_type_enabled(v28, v29))
    {
      v47 = v29;
      v30 = (uint8_t *)swift_slowAlloc();
      typea = swift_slowAlloc();
      v52 = typea;
      *(_DWORD *)v30 = 136315138;
      v54 = v22;
      v55 = v23;
      v56 = v24;
      v57 = v25;
      v58 = v26;
      v59 = v27;
      sub_20A0870A8();
      *(_QWORD *)(v50 + 16) = sub_20A0A6D5C(v31, v32, &v52);
      sub_20A0E0A10();
      swift_bridgeObjectRelease();
      sub_20A08D748(v22, v23, v24, v25, v26, v27);
      sub_20A08D748(v22, v23, v24, v25, v26, v27);
      _os_log_impl(&dword_20A048000, v28, v47, "Internal error: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD20380](typea, -1, -1);
      MEMORY[0x20BD20380](v30, -1, -1);
    }
    else
    {
      sub_20A08D748(v22, v23, v24, v25, v26, v27);
      sub_20A08D748(v22, v23, v24, v25, v26, v27);
    }

    v41 = *(_QWORD *)(v50 + 208);
    *(_QWORD *)v41 = v22;
    *(_QWORD *)(v41 + 8) = v23;
    *(_QWORD *)(v41 + 16) = v24;
    *(_QWORD *)(v41 + 24) = v25;
    *(_QWORD *)(v41 + 32) = v26;
    *(_BYTE *)(v41 + 40) = v27;
    *(_QWORD *)(v50 + 16) = v22;
    *(_QWORD *)(v50 + 24) = v23;
    *(_QWORD *)(v50 + 32) = v24;
    *(_QWORD *)(v50 + 40) = v25;
    *(_QWORD *)(v50 + 48) = v26;
    *(_BYTE *)(v50 + 56) = v27;
    sub_20A08D68C(v22, v23, v24, v25, v26, v27);
    sub_20A0B49A4();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    sub_20A08B960(1, 0, 0, 0, 0, 0xC0u);
    sub_20A08D748(v22, v23, v24, v25, v26, v27);
    v42 = *(void **)(v50 + 192);
  }
  else
  {

    v33 = v16;
    v34 = v16;
    v35 = sub_20A0E0728();
    v36 = sub_20A0E0998();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v54 = v38;
      *(_DWORD *)v37 = 136315138;
      swift_getErrorValue();
      v39 = sub_20A0E0D34();
      *(_QWORD *)(v50 + 16) = sub_20A0A6D5C(v39, v40, &v54);
      sub_20A0E0A10();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20A048000, v35, v36, "Unhandled XPC error : %s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v38, -1, -1);
      MEMORY[0x20BD20380](v37, -1, -1);
    }
    else
    {

    }
    v43 = *(_QWORD *)(v50 + 208);
    swift_getErrorValue();
    v44 = sub_20A0E0D34();
    *(_QWORD *)v43 = v44;
    *(_QWORD *)(v43 + 8) = v45;
    *(_QWORD *)(v43 + 24) = 0;
    *(_QWORD *)(v43 + 32) = 0;
    *(_QWORD *)(v43 + 16) = 0;
    *(_BYTE *)(v43 + 40) = 1;
    *(_QWORD *)(v50 + 16) = v44;
    *(_QWORD *)(v50 + 24) = v45;
    *(_QWORD *)(v50 + 40) = 0;
    *(_QWORD *)(v50 + 48) = 0;
    *(_QWORD *)(v50 + 32) = 0;
    *(_BYTE *)(v50 + 56) = 1;
    sub_20A0B49A4();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    sub_20A08B960(1, 0, 0, 0, 0, 0xC0u);
    v42 = v16;
  }

  return (*(uint64_t (**)(void))(v50 + 8))();
}

uint64_t sub_20A0B4160()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[5];
  char v31;

  v1 = *(void **)(v0 + 240);
  *(_QWORD *)(v0 + 192) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
  if (swift_dynamicCast())
  {

    v3 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(_BYTE *)(v0 + 120);
    sub_20A08D68C(v3, v4, v5, v6, v7, v8);
    sub_20A08D68C(v3, v4, v5, v6, v7, v8);
    v9 = sub_20A0E0728();
    v10 = sub_20A0E0998();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v29 = v28;
      v30[0] = v3;
      *(_DWORD *)v11 = 136315138;
      v30[1] = v4;
      v30[2] = v5;
      v30[3] = v6;
      v30[4] = v7;
      v31 = v8;
      sub_20A0870A8();
      *(_QWORD *)(v0 + 16) = sub_20A0A6D5C(v12, v13, &v29);
      sub_20A0E0A10();
      swift_bridgeObjectRelease();
      sub_20A08D748(v3, v4, v5, v6, v7, v8);
      sub_20A08D748(v3, v4, v5, v6, v7, v8);
      _os_log_impl(&dword_20A048000, v9, v10, "Internal error: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v28, -1, -1);
      MEMORY[0x20BD20380](v11, -1, -1);
    }
    else
    {
      sub_20A08D748(v3, v4, v5, v6, v7, v8);
      sub_20A08D748(v3, v4, v5, v6, v7, v8);
    }

    v22 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)v22 = v3;
    *(_QWORD *)(v22 + 8) = v4;
    *(_QWORD *)(v22 + 16) = v5;
    *(_QWORD *)(v22 + 24) = v6;
    *(_QWORD *)(v22 + 32) = v7;
    *(_BYTE *)(v22 + 40) = v8;
    *(_QWORD *)(v0 + 16) = v3;
    *(_QWORD *)(v0 + 24) = v4;
    *(_QWORD *)(v0 + 32) = v5;
    *(_QWORD *)(v0 + 40) = v6;
    *(_QWORD *)(v0 + 48) = v7;
    *(_BYTE *)(v0 + 56) = v8;
    sub_20A08D68C(v3, v4, v5, v6, v7, v8);
    sub_20A0B49A4();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    sub_20A08B960(1, 0, 0, 0, 0, 0xC0u);
    sub_20A08D748(v3, v4, v5, v6, v7, v8);
    v23 = *(void **)(v0 + 192);
  }
  else
  {

    v14 = v1;
    v15 = v1;
    v16 = sub_20A0E0728();
    v17 = sub_20A0E0998();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v30[0] = v19;
      *(_DWORD *)v18 = 136315138;
      swift_getErrorValue();
      v20 = sub_20A0E0D34();
      *(_QWORD *)(v0 + 16) = sub_20A0A6D5C(v20, v21, v30);
      sub_20A0E0A10();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20A048000, v16, v17, "Unhandled XPC error : %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD20380](v19, -1, -1);
      MEMORY[0x20BD20380](v18, -1, -1);
    }
    else
    {

    }
    v24 = *(_QWORD *)(v0 + 208);
    swift_getErrorValue();
    v25 = sub_20A0E0D34();
    *(_QWORD *)v24 = v25;
    *(_QWORD *)(v24 + 8) = v26;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_BYTE *)(v24 + 40) = 1;
    *(_QWORD *)(v0 + 16) = v25;
    *(_QWORD *)(v0 + 24) = v26;
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 32) = 0;
    *(_BYTE *)(v0 + 56) = 1;
    sub_20A0B49A4();
    swift_willThrowTypedImpl();
    swift_bridgeObjectRelease();
    sub_20A08B960(1, 0, 0, 0, 0, 0xC0u);
    v23 = v1;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_20A0B4668(uint64_t a1, unint64_t a2, char *a3)
{
  void *v6;
  id v7;
  id v8;
  char *result;
  void *v10;

  sub_20A07F854(a1, a2);
  v6 = (void *)sub_20A0E0644();
  v7 = objc_msgSend((id)objc_opt_self(), sel_recordFromData_, v6);
  sub_20A07F898(a1, a2);

  if (!v7
    || (v8 = objc_msgSend(v7, sel_propertyList), v7, !v8)
    || (__swift_instantiateConcreteTypeFromMangledName(&qword_2545CA388),
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA390),
        (swift_dynamicCast() & 1) == 0))
  {
    *(_QWORD *)a3 = 1;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    a3[40] = 12;
    sub_20A0B49A4();
    swift_willThrowTypedImpl();
    return a3;
  }
  result = (char *)SecAccessControlCreate();
  if (result)
  {
    a3 = result;
    v10 = (void *)sub_20A0E07A0();
    swift_bridgeObjectRelease();
    SecAccessControlSetConstraints();

    return a3;
  }
  __break(1u);
  return result;
}

uint64_t sub_20A0B480C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    if (a2)
      v8 = sub_20A0E07AC();
    else
      v8 = 0;
    v9 = v8;
    sub_20A0B4A1C((uint64_t)&v9, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t JPKIInternalClient.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t JPKIInternalClient.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_20A0B4928()
{
  uint64_t v0;

  v0 = sub_20A0E0740();
  __swift_allocate_value_buffer(v0, qword_2545CA330);
  __swift_project_value_buffer(v0, (uint64_t)qword_2545CA330);
  return sub_20A0E0734();
}

unint64_t sub_20A0B49A4()
{
  unint64_t result;

  result = qword_2545CA360;
  if (!qword_2545CA360)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for JPKIInternalTypes.InternalError, &type metadata for JPKIInternalTypes.InternalError);
    atomic_store(result, (unint64_t *)&qword_2545CA360);
  }
  return result;
}

uint64_t type metadata accessor for JPKIInternalClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for JPKIInternalClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JPKIInternalClient.__allocating_init(passIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_20A0B4A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SERDataSource.getNameInfo(type:for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  unint64_t v10;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 8);
  v10 = a1[1];
  sub_20A074C44(*a1, v10);
  sub_20A074C44(v2, v10);
  sub_20A0E0824();
  v4 = sub_20A0E0830();
  v6 = v5;
  swift_bridgeObjectRelease();
  sub_20A075F1C(v2, v10);
  if (*(_QWORD *)(v3 + 16)
    && (sub_20A0B8B80(v4, v6, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B8C98), (v7 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_getAtKeyPath();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

id SERDataSource.getMemoryInfo(type:seType:)(uint64_t *a1, _BYTE *a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  id v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = *a1;
  v3 = a1[1];
  if (v3 < 0x1A)
  {
    v5 = *v2;
    v6 = 0xE300000000000000;
    v7 = 3356496;
    switch(*a2)
    {
      case 0:
        __break(1u);
        JUMPOUT(0x20A0B4DA4);
      case 1:
        goto LABEL_10;
      case 2:
        v6 = 0xE600000000000000;
        v7 = 0x303143333750;
        if (!*(_QWORD *)(v5 + 16))
          goto LABEL_18;
        goto LABEL_11;
      case 3:
        v7 = 5459781;
        if (!*(_QWORD *)(v5 + 16))
          goto LABEL_18;
        goto LABEL_11;
      default:
        v6 = 0xE600000000000000;
        v7 = 0x313242534F45;
LABEL_10:
        if (!*(_QWORD *)(v5 + 16))
          goto LABEL_18;
LABEL_11:
        v13 = sub_20A0B8B80(v7, v6, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B8C98);
        if ((v14 & 1) == 0)
          goto LABEL_18;
        v15 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_20A074C44(v4, v3);
        sub_20A074C44(v4, v3);
        sub_20A0E0824();
        v16 = sub_20A0E0830();
        v18 = v17;
        swift_bridgeObjectRelease();
        sub_20A075F1C(v4, v3);
        if (*(_QWORD *)(v15 + 16))
        {
          v19 = sub_20A0B8B80(v16, v18, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B8C98);
          if ((v20 & 1) != 0)
          {
            v11 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v11;
          }
        }
        swift_bridgeObjectRelease();
LABEL_18:
        swift_bridgeObjectRelease();
        break;
    }
    return 0;
  }
  v8 = v2[2];
  if (!*(_QWORD *)(v8 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v9 = sub_20A0B8B80(v4, v3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B8C98);
  if ((v10 & 1) == 0)
  {
    sub_20A075F1C(v4, v3);
    return 0;
  }
  v11 = *(id *)(*(_QWORD *)(v8 + 56) + 8 * v9);
  v12 = v11;
  sub_20A075F1C(v4, v3);
  return v11;
}

SEService::SERDataSource __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SERDataSource.init(credentialSizes:)(Swift::OpaquePointer credentialSizes)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  SEService::SERDataSource result;

  v4 = v1;
  v5 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
  v6 = (void *)sub_20A0E0800();
  v7 = objc_msgSend(v5, sel_initWithContentsOfFile_, v6);

  if (!v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v25 = v4;
  v8 = v7;
  v9 = sub_20A0E0668();
  v11 = v10;

  sub_20A0E05E4();
  swift_allocObject();
  sub_20A0E05D8();
  sub_20A0B89AC();
  sub_20A0E05CC();
  if (v2)
  {
    swift_bridgeObjectRelease();
    sub_20A07F898(v9, v11);

    swift_release();
LABEL_5:
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v12 = 0xD00000000000002BLL;
    *(_QWORD *)(v12 + 8) = 0x800000020A0F2360;
    *(_BYTE *)(v12 + 16) = 0;
    v13 = (void *)swift_willThrow();
    goto LABEL_9;
  }
  swift_release();
  v16 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
  swift_bridgeObjectRetain();
  v17 = (void *)sub_20A0E0800();
  v18 = objc_msgSend(v16, sel_initWithContentsOfFile_, v17);

  if (v18)
  {
    v19 = v18;
    v20 = sub_20A0E0668();
    v22 = v21;

    swift_allocObject();
    sub_20A0E05D8();
    sub_20A0B89F0();
    sub_20A0E05CC();
    swift_release();
    swift_bridgeObjectRetain();
    v24 = sub_20A0B9A20((uint64_t)credentialSizes._rawValue);
    sub_20A07F898(v9, v11);
    sub_20A07F898(v20, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13 = (void *)swift_bridgeObjectRelease_n();
    *v25 = v26;
    v25[1] = v26;
    v25[2] = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v23 = 0xD000000000000028;
    *(_QWORD *)(v23 + 8) = 0x800000020A0F23C0;
    *(_BYTE *)(v23 + 16) = 0;
    swift_willThrow();
    sub_20A07F898(v9, v11);
    v13 = (void *)swift_bridgeObjectRelease();
  }
LABEL_9:
  result.credentialSizes._rawValue = v15;
  result.midNameDict.nameToMID._rawValue = v14;
  result.memoryUsageDict.memoryUsageForSEType._rawValue = v13;
  return result;
}

Swift::Bool __swiftcall SERDataSource.isSystemApplet(moduleAID:)(Swift::String moduleAID)
{
  uint64_t v1;
  char v2;

  v1 = swift_bridgeObjectRetain();
  v2 = sub_20A0B9D8C(v1, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_20A0B0248);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id MemoryUsage.__allocating_init(pHeap:cor:cod:usedIndices:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  objc_super v11;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService11MemoryUsage_cor] = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService11MemoryUsage_cod] = a3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t sub_20A0B521C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v19;
  uint64_t i;
  uint64_t v21;

  if (*(_BYTE *)(a3 + 24) != 1)
    return 0;
  v8 = *(_QWORD **)a3;
  v7 = *(_QWORD **)(a3 + 8);
  v9 = *(_QWORD **)(a3 + 16);
  v10 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (v10)
  {
    if (v8[4] == a4 && v8[5] == a5)
      return 1;
    result = sub_20A0E0CEC();
    if ((result & 1) != 0)
      return 1;
    if (v10 != 1)
    {
      v13 = v8 + 7;
      v14 = 1;
      while (1)
      {
        v15 = v14 + 1;
        if (__OFADD__(v14, 1))
          break;
        if (*(v13 - 1) == a4 && *v13 == a5)
          return 1;
        result = sub_20A0E0CEC();
        if ((result & 1) != 0)
          return 1;
        v13 += 2;
        ++v14;
        if (v15 == v10)
          goto LABEL_17;
      }
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_17:
  v17 = v7[2];
  if (!v17)
    return sub_20A074B1C(a4, a5, v9);
  if (v7[4] == a4 && v7[5] == a5)
    return 1;
  result = sub_20A0E0CEC();
  if ((result & 1) != 0)
    return 1;
  if (v17 == 1)
    return sub_20A074B1C(a4, a5, v9);
  v19 = v7 + 7;
  for (i = 1; ; ++i)
  {
    v21 = i + 1;
    if (__OFADD__(i, 1))
      break;
    if (*(v19 - 1) == a4 && *v19 == a5)
      return 1;
    result = sub_20A0E0CEC();
    if ((result & 1) != 0)
      return 1;
    v19 += 2;
    if (v21 == v17)
      return sub_20A074B1C(a4, a5, v9);
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_20A0B5390()
{
  return 0xD000000000000014;
}

uint64_t sub_20A0B53AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0BA474(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_20A0B53D4()
{
  sub_20A0B9FC4();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0B53FC()
{
  sub_20A0B9FC4();
  return sub_20A0E0DC4();
}

uint64_t MemoryInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA3E0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0B9FC4();
  sub_20A0E0DAC();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA3F0);
  sub_20A0BA0AC(&qword_2545CA3F8, (uint64_t (*)(void))sub_20A0BA008, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
  sub_20A0E0CB0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MemoryInfo.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA418);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0B9FC4();
  sub_20A0E0DA0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA3F0);
    sub_20A0BA0AC(&qword_2545CA420, (uint64_t (*)(void))sub_20A0BA120, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    sub_20A0E0C5C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_20A0B5694@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return MemoryInfo.init(from:)(a1, a2);
}

uint64_t sub_20A0B56A8(_QWORD *a1)
{
  return MemoryInfo.encode(to:)(a1);
}

uint64_t sub_20A0B56BC()
{
  return 0x494D6F54656D616ELL;
}

uint64_t sub_20A0B56D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x494D6F54656D616ELL && a2 == 0xE900000000000044)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20A0E0CEC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20A0B5778()
{
  sub_20A0BA1A4();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0B57A0()
{
  sub_20A0BA1A4();
  return sub_20A0E0DC4();
}

uint64_t NameInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA438);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0BA1A4();
  sub_20A0E0DAC();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA448);
  sub_20A0BA1E8(&qword_2545CA450, (uint64_t (*)(void))sub_20A0BA25C, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
  sub_20A0E0CB0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NameInfo.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA460);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0BA1A4();
  sub_20A0E0DA0();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA448);
    sub_20A0BA1E8(&qword_2545CA468, (uint64_t (*)(void))sub_20A0BA2A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    sub_20A0E0C5C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_20A0B5A38@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NameInfo.init(from:)(a1, a2);
}

uint64_t sub_20A0B5A4C(_QWORD *a1)
{
  return NameInfo.encode(to:)(a1);
}

uint64_t sub_20A0B5A60()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A0B5A90 + 4 * byte_20A0EABA0[*v0]))(0x7972616D697270, 0xE700000000000000);
}

uint64_t sub_20A0B5A90()
{
  return 0x656E6961746E6F63;
}

uint64_t sub_20A0B5AAC()
{
  return 0x65636E6174736E69;
}

uint64_t sub_20A0B5AC4()
{
  return 0x6D65747379537369;
}

uint64_t sub_20A0B5AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0BA4F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A0B5B0C()
{
  sub_20A0BA2E4();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0B5B34()
{
  sub_20A0BA2E4();
  return sub_20A0E0DC4();
}

uint64_t MIDContainer.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA478);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v13 = v1[2];
  v14 = v8;
  v12[1] = *((unsigned __int8 *)v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0BA2E4();
  sub_20A0E0DAC();
  v16 = v9;
  v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
  sub_20A0BA328(&qword_2545CA490, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_20A0E0CB0();
  if (!v2)
  {
    v10 = v13;
    v16 = v14;
    v15 = 1;
    sub_20A0E0CB0();
    v16 = v10;
    v15 = 2;
    sub_20A0E0CB0();
    LOBYTE(v16) = 3;
    sub_20A0E0C98();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t MIDContainer.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA498);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0BA2E4();
  sub_20A0E0DA0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
  v19 = 0;
  sub_20A0BA328(&qword_2545CA4A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_20A0E0C5C();
  v18 = a2;
  v9 = v20;
  v19 = 1;
  swift_bridgeObjectRetain();
  sub_20A0E0C5C();
  v17 = v9;
  v10 = v20;
  v19 = 2;
  swift_bridgeObjectRetain();
  sub_20A0E0C5C();
  v11 = v10;
  v12 = v20;
  LOBYTE(v20) = 3;
  swift_bridgeObjectRetain();
  v14 = sub_20A0E0C44();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v18;
  *v18 = v17;
  v15[1] = v11;
  v15[2] = v12;
  *((_BYTE *)v15 + 24) = v14 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20A0B6044@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return MIDContainer.init(from:)(a1, a2);
}

uint64_t sub_20A0B6058(_QWORD *a1)
{
  return MIDContainer.encode(to:)(a1);
}

BOOL AppletPolicy.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

uint64_t sub_20A0B6090()
{
  sub_20A0BB810();
  return sub_20A0E0890();
}

uint64_t sub_20A0B60EC()
{
  sub_20A0BB810();
  return sub_20A0E0884();
}

uint64_t sub_20A0B6144()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v1 = v0;
  sub_20A0E0AC4();
  sub_20A0E0854();
  v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory), sel_description));
  sub_20A0E080C();

  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory), sel_description));
  sub_20A0E080C();

  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory), sel_description));
  sub_20A0E080C();

  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory), sel_description));
  sub_20A0E080C();

  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  sub_20A0E0B48();
  sub_20A0E0854();
  return 0;
}

uint64_t static AppletMemoryInfo.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545CA3A0;
}

uint64_t static AppletMemoryInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545CA3A0 = a1;
  return result;
}

uint64_t (*static AppletMemoryInfo.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_20A0B64E0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_pids);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_20A0E0B24();
    v6 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_20A0E0800();
      swift_bridgeObjectRelease();
      sub_20A0E0B0C();
      sub_20A0E0B30();
      sub_20A0E0B3C();
      sub_20A0E0B18();
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  v7 = (void *)sub_20A0E08A8();
  swift_bridgeObjectRelease();
  v8 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);

  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory);
  v10 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeObject_forKey_, v9, v10);

  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory);
  v12 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeObject_forKey_, v11, v12);

  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory);
  v14 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeObject_forKey_, v13, v14);

  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory);
  v16 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeObject_forKey_, v15, v16);

  v17 = sub_20A0E0D10();
  v18 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeObject_forKey_, v17, v18);
  swift_unknownObjectRelease();

}

uint64_t AppletMemoryInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AppletMemoryInfo.init(coder:)(a1);
}

uint64_t AppletMemoryInfo.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  objc_class *v34;
  char *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  objc_super v41;
  uint64_t v42;

  sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  v3 = v1;
  v4 = sub_20A0E09EC();
  if (!v4)
    goto LABEL_21;
  v5 = v4;
  type metadata accessor for MemoryUsage();
  v6 = sub_20A0E09D4();
  if (!v6)
  {
    swift_bridgeObjectRelease();
LABEL_21:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v7 = (void *)v6;
  v8 = sub_20A0E09D4();
  if (!v8)
  {
    swift_bridgeObjectRelease();

    goto LABEL_21;
  }
  v9 = (void *)v8;
  v10 = sub_20A0E09D4();
  if (!v10)
  {
    swift_bridgeObjectRelease();

    goto LABEL_21;
  }
  v11 = (void *)v10;
  v12 = sub_20A0E09D4();
  if (!v12)
  {
    swift_bridgeObjectRelease();

    goto LABEL_21;
  }
  v13 = (void *)v12;
  v14 = (void *)sub_20A0E0800();
  v15 = objc_msgSend(a1, sel_decodeIntegerForKey_, v14);

  if ((unint64_t)v15 >= 2)
  {
    swift_bridgeObjectRelease();

    goto LABEL_21;
  }
  if (!(v5 >> 62))
  {
    v16 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v40 = v11;
    if (v16)
      goto LABEL_9;
LABEL_29:

    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
LABEL_30:
    v34 = (objc_class *)type metadata accessor for AppletMemoryInfo();
    v35 = (char *)objc_allocWithZone(v34);
    *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_pids] = v18;
    *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory] = v7;
    *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory] = v9;
    *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory] = v40;
    *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory] = v13;
    *(_QWORD *)&v35[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_policy] = v15;
    v41.receiver = v35;
    v41.super_class = v34;
    v26 = objc_msgSendSuper2(&v41, sel_init);

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return (uint64_t)v26;
  }
  swift_bridgeObjectRetain();
  v16 = sub_20A0E0BD8();
  swift_bridgeObjectRelease();
  v40 = v11;
  if (!v16)
    goto LABEL_29;
LABEL_9:
  v42 = MEMORY[0x24BEE4AF8];
  result = sub_20A0972AC(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v36 = v15;
    v37 = v13;
    v38 = v9;
    v39 = v7;
    v18 = v42;
    if ((v5 & 0xC000000000000001) != 0)
    {
      v19 = 0;
      do
      {
        MEMORY[0x20BD1F648](v19, v5);
        v20 = sub_20A0E080C();
        v22 = v21;
        swift_unknownObjectRelease();
        v42 = v18;
        v24 = *(_QWORD *)(v18 + 16);
        v23 = *(_QWORD *)(v18 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_20A0972AC(v23 > 1, v24 + 1, 1);
          v18 = v42;
        }
        ++v19;
        *(_QWORD *)(v18 + 16) = v24 + 1;
        v25 = v18 + 16 * v24;
        *(_QWORD *)(v25 + 32) = v20;
        *(_QWORD *)(v25 + 40) = v22;
      }
      while (v16 != v19);
    }
    else
    {
      v27 = v5 + 32;
      do
      {
        v28 = sub_20A0E080C();
        v30 = v29;
        v42 = v18;
        v32 = *(_QWORD *)(v18 + 16);
        v31 = *(_QWORD *)(v18 + 24);
        if (v32 >= v31 >> 1)
        {
          sub_20A0972AC(v31 > 1, v32 + 1, 1);
          v18 = v42;
        }
        *(_QWORD *)(v18 + 16) = v32 + 1;
        v33 = v18 + 16 * v32;
        *(_QWORD *)(v33 + 32) = v28;
        *(_QWORD *)(v33 + 40) = v30;
        v27 += 8;
        --v16;
      }
      while (v16);
    }

    swift_bridgeObjectRelease();
    v9 = v38;
    v7 = v39;
    v15 = v36;
    v13 = v37;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void AppletMemoryInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_20A0B6CFC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A0B6D28 + 4 * byte_20A0EABA4[a1]))(1935960432, 0xE400000000000000);
}

uint64_t sub_20A0B6D28()
{
  return 0x4D6567616B636170;
}

uint64_t sub_20A0B6D4C()
{
  return 0x656E6961746E6F63;
}

unint64_t sub_20A0B6D70()
{
  return 0xD000000000000010;
}

unint64_t sub_20A0B6D8C()
{
  return 0xD000000000000012;
}

uint64_t sub_20A0B6DAC()
{
  return 0x7963696C6F70;
}

uint64_t sub_20A0B6DC0()
{
  unsigned __int8 *v0;

  return sub_20A0B6CFC(*v0);
}

uint64_t sub_20A0B6DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0BA6E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A0B6DEC()
{
  sub_20A0BA3A8();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0B6E14()
{
  sub_20A0BA3A8();
  return sub_20A0E0DC4();
}

id AppletMemoryInfo.__deallocating_deinit()
{
  return sub_20A0B8438(type metadata accessor for AppletMemoryInfo);
}

uint64_t sub_20A0B6EB0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA4E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0BA3A8();
  sub_20A0E0DAC();
  v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_pids);
  HIBYTE(v11) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
  sub_20A0BA328(&qword_2545CA490, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_20A0E0CB0();
  if (!v2)
  {
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory);
    HIBYTE(v11) = 1;
    type metadata accessor for MemoryUsage();
    sub_20A09BB6C(&qword_2545CA4F0, v9, (uint64_t (*)(uint64_t))type metadata accessor for MemoryUsage, (uint64_t)&protocol conformance descriptor for MemoryUsage);
    sub_20A0E0CB0();
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory);
    HIBYTE(v11) = 2;
    sub_20A0E0CB0();
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory);
    HIBYTE(v11) = 3;
    sub_20A0E0CB0();
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory);
    HIBYTE(v11) = 4;
    sub_20A0E0CB0();
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService16AppletMemoryInfo_policy);
    HIBYTE(v11) = 5;
    sub_20A0BA3EC();
    sub_20A0E0CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id AppletMemoryInfo.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AppletMemoryInfo.init(from:)(a1);
}

id AppletMemoryInfo.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v11;
  uint64_t v12;
  void *v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  objc_super v19;
  char v20;
  uint64_t v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA500);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v17 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  sub_20A0BA3A8();
  v18 = v1;
  sub_20A0E0DA0();
  if (v2)
  {
    v9 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v15 = v9;

    type metadata accessor for AppletMemoryInfo();
    swift_deallocPartialClassInstance();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA148);
    v20 = 0;
    sub_20A0BA328(&qword_2545CA4A0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_20A0E0C5C();
    v11 = v18;
    *(_QWORD *)&v18[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_pids] = v21;
    type metadata accessor for MemoryUsage();
    v20 = 1;
    sub_20A09BB6C(&qword_2545CA508, v12, (uint64_t (*)(uint64_t))type metadata accessor for MemoryUsage, (uint64_t)&protocol conformance descriptor for MemoryUsage);
    sub_20A0E0C5C();
    *(_QWORD *)&v11[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory] = v21;
    v20 = 2;
    sub_20A0E0C5C();
    *(_QWORD *)&v11[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory] = v21;
    v20 = 3;
    sub_20A0E0C5C();
    *(_QWORD *)&v18[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory] = v21;
    v20 = 4;
    sub_20A0E0C5C();
    *(_QWORD *)&v18[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory] = v21;
    v20 = 5;
    sub_20A0BA430();
    sub_20A0E0C5C();
    v13 = v18;
    *(_QWORD *)&v18[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_policy] = v21;

    v14 = (objc_class *)type metadata accessor for AppletMemoryInfo();
    v19.receiver = v13;
    v19.super_class = v14;
    v15 = objc_msgSendSuper2(&v19, sel_init);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  return v15;
}

uint64_t sub_20A0B7608@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_20A0B88C0(a1, type metadata accessor for AppletMemoryInfo, (uint64_t (*)(uint64_t))AppletMemoryInfo.init(from:), a2);
}

uint64_t sub_20A0B762C(_QWORD *a1)
{
  return sub_20A0B6EB0(a1);
}

id MemoryUsage.init(pHeap:cor:cod:usedIndices:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_super v6;

  *(_QWORD *)&v4[OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC9SEService11MemoryUsage_cor] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC9SEService11MemoryUsage_cod] = a3;
  *(_QWORD *)&v4[OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for MemoryUsage();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t sub_20A0B77CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_20A0B7858(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_20A0B78A0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_20A0B7928()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC9SEService11MemoryUsage_cor;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_20A0B79B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_cor);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_20A0B79FC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_20A0B7A84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC9SEService11MemoryUsage_cod;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_20A0B7B10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_cod);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_20A0B7B58())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_20A0B7BE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_20A0B7C6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_20A0B7CB4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_20A0B7D04()
{
  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_20A0E0CC8();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_beginAccess();
  sub_20A0E0CC8();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_beginAccess();
  sub_20A0E0CC8();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_beginAccess();
  sub_20A0E0CC8();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  return 0x203A70616548705BLL;
}

uint64_t static MemoryUsage.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_2545CA3A1;
}

uint64_t static MemoryUsage.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_2545CA3A1 = a1;
  return result;
}

uint64_t (*static MemoryUsage.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_20A0B8058(void *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap);
  swift_beginAccess();
  v4 = *v3;
  v5 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeInteger_forKey_, v4, v5);

  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_cor);
  swift_beginAccess();
  v7 = *v6;
  v8 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeInteger_forKey_, v7, v8);

  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_cod);
  swift_beginAccess();
  v10 = *v9;
  v11 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeInteger_forKey_, v10, v11);

  v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices);
  swift_beginAccess();
  v13 = *v12;
  v14 = (void *)sub_20A0E0800();
  objc_msgSend(a1, sel_encodeInteger_forKey_, v13, v14);

}

id MemoryUsage.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_20A0BA984(a1);

  return v4;
}

id MemoryUsage.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_20A0BA984(a1);

  return v2;
}

id MemoryUsage.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MemoryUsage.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_20A0B8348()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20A0B8374 + 4 * byte_20A0EABAA[*v0]))(0x7061654870, 0xE500000000000000);
}

uint64_t sub_20A0B8374()
{
  return 7499619;
}

uint64_t sub_20A0B8388()
{
  return 6582115;
}

uint64_t sub_20A0B8398()
{
  return 0x69646E4964657375;
}

uint64_t sub_20A0B83B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0BB66C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A0B83DC()
{
  sub_20A0BAAD0();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0B8404()
{
  sub_20A0BAAD0();
  return sub_20A0E0DC4();
}

id MemoryUsage.__deallocating_deinit()
{
  return sub_20A0B8438(type metadata accessor for MemoryUsage);
}

id sub_20A0B8438(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_20A0B8468(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[88];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA518);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0BAAD0();
  sub_20A0E0DAC();
  swift_beginAccess();
  v8[64] = 0;
  sub_20A0E0CA4();
  if (!v1)
  {
    swift_beginAccess();
    v8[40] = 1;
    sub_20A0E0CA4();
    swift_beginAccess();
    v8[16] = 2;
    sub_20A0E0CA4();
    swift_beginAccess();
    v8[15] = 3;
    sub_20A0E0CA4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

char *MemoryUsage.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MemoryUsage.init(from:)(a1);
}

char *MemoryUsage.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  objc_class *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  objc_super v17;
  char v18;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA528);
  v4 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v16 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_20A0BAAD0();
  v8 = v1;
  v14 = v6;
  sub_20A0E0DA0();
  if (v2)
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    type metadata accessor for MemoryUsage();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v18 = 0;
    v9 = v14;
    v10 = v15;
    *(_QWORD *)&v8[OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap] = sub_20A0E0C50();
    v18 = 1;
    *(_QWORD *)&v8[OBJC_IVAR____TtC9SEService11MemoryUsage_cor] = sub_20A0E0C50();
    v18 = 2;
    *(_QWORD *)&v8[OBJC_IVAR____TtC9SEService11MemoryUsage_cod] = sub_20A0E0C50();
    v18 = 3;
    *(_QWORD *)&v8[OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices] = sub_20A0E0C50();

    v12 = (objc_class *)type metadata accessor for MemoryUsage();
    v17.receiver = v8;
    v17.super_class = v12;
    v8 = (char *)objc_msgSendSuper2(&v17, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  return v8;
}

uint64_t sub_20A0B889C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_20A0B88C0(a1, type metadata accessor for MemoryUsage, (uint64_t (*)(uint64_t))MemoryUsage.init(from:), a2);
}

uint64_t sub_20A0B88C0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  id v8;
  uint64_t result;

  v8 = objc_allocWithZone((Class)a2());
  result = a3(a1);
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_20A0B8914(_QWORD *a1)
{
  return sub_20A0B8468(a1);
}

unint64_t sub_20A0B8934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_20A0E0D7C();
  CredentialType.hash(into:)();
  v4 = sub_20A0E0D94();
  return sub_20A0B8BF8(a1, a2, v4);
}

uint64_t sub_20A0B8998(uint64_t a1, uint64_t a2)
{
  return sub_20A0B8B80(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20A0B8C98);
}

unint64_t sub_20A0B89AC()
{
  unint64_t result;

  result = qword_2545CA3B0;
  if (!qword_2545CA3B0)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for MemoryInfo, &type metadata for MemoryInfo);
    atomic_store(result, (unint64_t *)&qword_2545CA3B0);
  }
  return result;
}

unint64_t sub_20A0B89F0()
{
  unint64_t result;

  result = qword_2545CA3B8;
  if (!qword_2545CA3B8)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for NameInfo, &type metadata for NameInfo);
    atomic_store(result, (unint64_t *)&qword_2545CA3B8);
  }
  return result;
}

unint64_t sub_20A0B8A34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20A0E0A88();
  return sub_20A0B8D78(a1, v2);
}

unint64_t sub_20A0B8A64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20A0E09F8();
  return sub_20A0B8E3C(a1, v2, &qword_2545C9FF0);
}

unint64_t sub_20A0B8AB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20A0E09F8();
  return sub_20A0B8E3C(a1, v2, (unint64_t *)&qword_2545C9460);
}

unint64_t sub_20A0B8AFC(uint64_t a1)
{
  uint64_t v2;

  sub_20A0E06D4();
  sub_20A09BB6C((unint64_t *)&unk_2545CA1B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = sub_20A0E07D0();
  return sub_20A0B8F4C(a1, v2);
}

uint64_t sub_20A0B8B6C(uint64_t a1, uint64_t a2)
{
  return sub_20A0B8B80(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BDCDCF8], sub_20A0B9090);
}

uint64_t sub_20A0B8B80(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  _BYTE v10[72];

  sub_20A0E0D7C();
  a3(v10, a1, a2);
  v7 = sub_20A0E0D94();
  return a4(a1, a2, v7);
}

unint64_t sub_20A0B8BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9[2];

  v9[0] = a1;
  v9[1] = a2;
  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v8 = *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * v5);
      if ((_s9SEService14CredentialTypeO2eeoiySbAC_ACtFZ_0((uint64_t *)&v8, v9) & 1) != 0)
        break;
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_20A0B8C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_20A0E0CEC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_20A0E0CEC() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_20A0B8D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_20A0BB854(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x20BD1F600](v9, a1);
      sub_20A09A704((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_20A0B8E3C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_20A0801C0(0, a3);
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v8 = sub_20A0E0A04();

    if ((v8 & 1) == 0)
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
        v11 = sub_20A0E0A04();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_20A0B8F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_20A0E06D4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_20A09BB6C(&qword_2545CA5C0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = sub_20A0E07F4();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_20A0B9090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

uint64_t sub_20A0B9A20(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  void *v18;
  objc_class *v19;
  char *v20;
  char *v21;
  id v22;
  id v23;
  void *v24;
  char *v25;
  id v26;
  id v27;
  objc_class *v28;
  char *v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  objc_super v44;
  objc_super v45;
  objc_super v46;
  uint64_t v47;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA5C8);
  result = sub_20A0E0BE4();
  v3 = 0;
  v38 = (_QWORD *)result;
  v39 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v35 = v5;
  v36 = (unint64_t)(v7 + 63) >> 6;
  v37 = result + 64;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v40 = (v9 - 1) & v9;
  v41 = v3;
  for (i = __clz(__rbit64(v9)) | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = *(_QWORD *)(v39 + 56);
    v16 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * i);
    v43 = *v16;
    v42 = v16[1];
    v47 = 8 * i;
    v17 = *(char **)(v15 + 8 * i);
    v18 = *(void **)&v17[OBJC_IVAR____TtC9SEService17SERCredentialInfo_containerSize];
    v19 = (objc_class *)type metadata accessor for MemoryUsage();
    v20 = (char *)objc_allocWithZone(v19);
    *(_QWORD *)&v20[OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap] = 0;
    *(_QWORD *)&v20[OBJC_IVAR____TtC9SEService11MemoryUsage_cor] = 0;
    *(_QWORD *)&v20[OBJC_IVAR____TtC9SEService11MemoryUsage_cod] = 0;
    *(_QWORD *)&v20[OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices] = 0;
    v46.receiver = v20;
    v46.super_class = v19;
    swift_bridgeObjectRetain();
    v21 = v17;
    v22 = v18;
    v23 = objc_msgSendSuper2(&v46, sel_init);
    v24 = *(void **)&v21[OBJC_IVAR____TtC9SEService17SERCredentialInfo_requiredMemoryForCredential];
    v25 = (char *)objc_allocWithZone(v19);
    *(_QWORD *)&v25[OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap] = 0;
    *(_QWORD *)&v25[OBJC_IVAR____TtC9SEService11MemoryUsage_cor] = 0;
    *(_QWORD *)&v25[OBJC_IVAR____TtC9SEService11MemoryUsage_cod] = 0;
    *(_QWORD *)&v25[OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices] = 0;
    v45.receiver = v25;
    v45.super_class = v19;
    v26 = v24;
    v27 = objc_msgSendSuper2(&v45, sel_init);
    v28 = (objc_class *)type metadata accessor for AppletMemoryInfo();
    v29 = (char *)objc_allocWithZone(v28);
    *(_QWORD *)&v29[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_pids] = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v29[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_packageMemory] = v22;
    *(_QWORD *)&v29[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_containerMemory] = v23;
    *(_QWORD *)&v29[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_selectableMemory] = v26;
    *(_QWORD *)&v29[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_personalizedMemory] = v27;
    *(_QWORD *)&v29[OBJC_IVAR____TtC9SEService16AppletMemoryInfo_policy] = 0;
    v44.receiver = v29;
    v44.super_class = v28;
    v30 = objc_msgSendSuper2(&v44, sel_init);

    result = (uint64_t)v38;
    *(_QWORD *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v31 = (_QWORD *)(v38[6] + 16 * i);
    *v31 = v43;
    v31[1] = v42;
    *(_QWORD *)(v38[7] + v47) = v30;
    v32 = v38[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v38[2] = v34;
    v9 = v40;
    v3 = v41;
    if (v40)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_24;
    if (v11 >= v36)
      return result;
    v12 = *(_QWORD *)(v35 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      v13 = v3 + 2;
      if (v3 + 2 >= v36)
        return result;
      v12 = *(_QWORD *)(v35 + 8 * v13);
      if (!v12)
      {
        v13 = v3 + 3;
        if (v3 + 3 >= v36)
          return result;
        v12 = *(_QWORD *)(v35 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v40 = (v12 - 1) & v12;
    v41 = v13;
  }
  v14 = v3 + 4;
  if (v3 + 4 >= v36)
    return result;
  v12 = *(_QWORD *)(v35 + 8 * v14);
  if (v12)
  {
    v13 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v36)
      return result;
    v12 = *(_QWORD *)(v35 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_20A0B9D8C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  _QWORD v23[3];
  char v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD *);

  v25 = a2;
  v21 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    v13 = *(_QWORD *)(a1 + 56) + 32 * v9;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_QWORD *)(v13 + 16);
    LOBYTE(v13) = *(_BYTE *)(v13 + 24);
    v23[0] = v14;
    v23[1] = v15;
    v23[2] = v16;
    v24 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v25(v11, v12, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      swift_release();
      return 1;
    }
  }
  v18 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v18 >= v22)
    goto LABEL_23;
  v19 = *(_QWORD *)(v21 + 8 * v18);
  ++v7;
  if (v19)
    goto LABEL_21;
  v7 = v18 + 1;
  if (v18 + 1 >= v22)
    goto LABEL_23;
  v19 = *(_QWORD *)(v21 + 8 * v7);
  if (v19)
    goto LABEL_21;
  v7 = v18 + 2;
  if (v18 + 2 >= v22)
    goto LABEL_23;
  v19 = *(_QWORD *)(v21 + 8 * v7);
  if (v19)
    goto LABEL_21;
  v7 = v18 + 3;
  if (v18 + 3 >= v22)
    goto LABEL_23;
  v19 = *(_QWORD *)(v21 + 8 * v7);
  if (v19)
    goto LABEL_21;
  v20 = v18 + 4;
  if (v20 >= v22)
  {
LABEL_23:
    swift_release();
    return 0;
  }
  v19 = *(_QWORD *)(v21 + 8 * v20);
  v7 = v20;
  if (v19)
  {
LABEL_21:
    v5 = (v19 - 1) & v19;
    v9 = __clz(__rbit64(v19)) + (v7 << 6);
    goto LABEL_5;
  }
  while (1)
  {
    v7 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v7 >= v22)
      goto LABEL_23;
    v19 = *(_QWORD *)(v21 + 8 * v7);
    ++v20;
    if (v19)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_20A0B9FC4()
{
  unint64_t result;

  result = qword_2545CA3E8;
  if (!qword_2545CA3E8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB3CC, &type metadata for MemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA3E8);
  }
  return result;
}

unint64_t sub_20A0BA008()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_2545CA400;
  if (!qword_2545CA400)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA408);
    v3 = sub_20A09BB6C(&qword_2545CA410, v2, (uint64_t (*)(uint64_t))type metadata accessor for AppletMemoryInfo, (uint64_t)&protocol conformance descriptor for AppletMemoryInfo);
    v4[0] = MEMORY[0x24BEE0D08];
    v4[1] = v3;
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE04C0], v1, v4);
    atomic_store(result, (unint64_t *)&qword_2545CA400);
  }
  return result;
}

uint64_t type metadata accessor for AppletMemoryInfo()
{
  return objc_opt_self();
}

uint64_t sub_20A0BA0AC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA3F0);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x20BD202E4](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20A0BA120()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_2545CA428;
  if (!qword_2545CA428)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA408);
    v3 = sub_20A09BB6C(&qword_2545CA430, v2, (uint64_t (*)(uint64_t))type metadata accessor for AppletMemoryInfo, (uint64_t)&protocol conformance descriptor for AppletMemoryInfo);
    v4[0] = MEMORY[0x24BEE0D38];
    v4[1] = v3;
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE04E0], v1, v4);
    atomic_store(result, (unint64_t *)&qword_2545CA428);
  }
  return result;
}

unint64_t sub_20A0BA1A4()
{
  unint64_t result;

  result = qword_2545CA440;
  if (!qword_2545CA440)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB37C, &type metadata for NameInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA440);
  }
  return result;
}

uint64_t sub_20A0BA1E8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA448);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x20BD202E4](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20A0BA25C()
{
  unint64_t result;

  result = qword_2545CA458;
  if (!qword_2545CA458)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for MIDContainer, &type metadata for MIDContainer);
    atomic_store(result, (unint64_t *)&qword_2545CA458);
  }
  return result;
}

unint64_t sub_20A0BA2A0()
{
  unint64_t result;

  result = qword_2545CA470;
  if (!qword_2545CA470)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for MIDContainer, &type metadata for MIDContainer);
    atomic_store(result, (unint64_t *)&qword_2545CA470);
  }
  return result;
}

unint64_t sub_20A0BA2E4()
{
  unint64_t result;

  result = qword_2545CA480;
  if (!qword_2545CA480)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB32C, &type metadata for MIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA480);
  }
  return result;
}

uint64_t sub_20A0BA328(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA148);
    v8 = a2;
    result = MEMORY[0x20BD202E4](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MemoryUsage()
{
  return objc_opt_self();
}

unint64_t sub_20A0BA3A8()
{
  unint64_t result;

  result = qword_2545CA4E8;
  if (!qword_2545CA4E8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB2DC, &type metadata for AppletMemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA4E8);
  }
  return result;
}

unint64_t sub_20A0BA3EC()
{
  unint64_t result;

  result = qword_2545CA4F8;
  if (!qword_2545CA4F8)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletPolicy, &type metadata for AppletPolicy);
    atomic_store(result, (unint64_t *)&qword_2545CA4F8);
  }
  return result;
}

unint64_t sub_20A0BA430()
{
  unint64_t result;

  result = qword_2545CA510;
  if (!qword_2545CA510)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletPolicy, &type metadata for AppletPolicy);
    atomic_store(result, (unint64_t *)&qword_2545CA510);
  }
  return result;
}

uint64_t sub_20A0BA474(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x800000020A0F2640)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_20A0BA4F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7972616D697270 && a2 == 0xE700000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6961746E6F63 && a2 == 0xE900000000000072 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736E69 && a2 == 0xE800000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D65747379537369 && a2 == 0xEE0074656C707041)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_20A0BA6E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1935960432 && a2 == 0xE400000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4D6567616B636170 && a2 == 0xED000079726F6D65 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6961746E6F63 && a2 == 0xEF79726F6D654D72 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000020A0F2470 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000020A0F2490 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7963696C6F70 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

id sub_20A0BA984(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  objc_super v13;

  v3 = v1;
  v4 = (void *)sub_20A0E0800();
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService11MemoryUsage_pHeap] = v5;
  v6 = (void *)sub_20A0E0800();
  v7 = objc_msgSend(a1, sel_decodeIntegerForKey_, v6);

  *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService11MemoryUsage_cor] = v7;
  v8 = (void *)sub_20A0E0800();
  v9 = objc_msgSend(a1, sel_decodeIntegerForKey_, v8);

  *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService11MemoryUsage_cod] = v9;
  v10 = (void *)sub_20A0E0800();
  v11 = objc_msgSend(a1, sel_decodeIntegerForKey_, v10);

  *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService11MemoryUsage_usedIndices] = v11;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for MemoryUsage();
  return objc_msgSendSuper2(&v13, sel_init);
}

unint64_t sub_20A0BAAD0()
{
  unint64_t result;

  result = qword_2545CA520;
  if (!qword_2545CA520)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB28C, &type metadata for MemoryUsage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA520);
  }
  return result;
}

unint64_t sub_20A0BAB18()
{
  unint64_t result;

  result = qword_2545CA530;
  if (!qword_2545CA530)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletPolicy, &type metadata for AppletPolicy);
    atomic_store(result, (unint64_t *)&qword_2545CA530);
  }
  return result;
}

ValueMetadata *type metadata accessor for SERDataSource()
{
  return &type metadata for SERDataSource;
}

ValueMetadata *type metadata accessor for MemoryInfo()
{
  return &type metadata for MemoryInfo;
}

ValueMetadata *type metadata accessor for NameInfo()
{
  return &type metadata for NameInfo;
}

uint64_t initializeWithCopy for MIDContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MIDContainer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MIDContainer(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MIDContainer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MIDContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MIDContainer()
{
  return &type metadata for MIDContainer;
}

ValueMetadata *type metadata accessor for AppletPolicy()
{
  return &type metadata for AppletPolicy;
}

uint64_t method lookup function for AppletMemoryInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppletMemoryInfo.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AppletMemoryInfo.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AppletMemoryInfo.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AppletMemoryInfo.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t method lookup function for MemoryUsage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MemoryUsage.__allocating_init(pHeap:cor:cod:usedIndices:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of MemoryUsage.pHeap.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of MemoryUsage.pHeap.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of MemoryUsage.pHeap.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of MemoryUsage.cor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of MemoryUsage.cor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of MemoryUsage.cor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of MemoryUsage.cod.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of MemoryUsage.cod.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of MemoryUsage.cod.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of MemoryUsage.usedIndices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of MemoryUsage.usedIndices.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of MemoryUsage.usedIndices.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of MemoryUsage.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of MemoryUsage.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of MemoryUsage.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of MemoryUsage.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

ValueMetadata *type metadata accessor for MemoryUsage.CodingKeys()
{
  return &type metadata for MemoryUsage.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AppletMemoryInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_20A0BB038 + 4 * byte_20A0EABB3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_20A0BB06C + 4 * byte_20A0EABAE[v4]))();
}

uint64_t sub_20A0BB06C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0BB074(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0BB07CLL);
  return result;
}

uint64_t sub_20A0BB088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0BB090);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_20A0BB094(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0BB09C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppletMemoryInfo.CodingKeys()
{
  return &type metadata for AppletMemoryInfo.CodingKeys;
}

uint64_t _s9SEService11MemoryUsageC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_20A0BB104 + 4 * byte_20A0EABBD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20A0BB138 + 4 * byte_20A0EABB8[v4]))();
}

uint64_t sub_20A0BB138(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0BB140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0BB148);
  return result;
}

uint64_t sub_20A0BB154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0BB15CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_20A0BB160(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0BB168(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MIDContainer.CodingKeys()
{
  return &type metadata for MIDContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for NameInfo.CodingKeys()
{
  return &type metadata for NameInfo.CodingKeys;
}

uint64_t _s9SEService8NameInfoV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20A0BB1D8 + 4 * byte_20A0EABC2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20A0BB1F8 + 4 * byte_20A0EABC7[v4]))();
}

_BYTE *sub_20A0BB1D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20A0BB1F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20A0BB200(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20A0BB208(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20A0BB210(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20A0BB218(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MemoryInfo.CodingKeys()
{
  return &type metadata for MemoryInfo.CodingKeys;
}

unint64_t sub_20A0BB238()
{
  unint64_t result;

  result = qword_2545CA538;
  if (!qword_2545CA538)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EAF84, &type metadata for MemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA538);
  }
  return result;
}

unint64_t sub_20A0BB280()
{
  unint64_t result;

  result = qword_2545CA540;
  if (!qword_2545CA540)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB03C, &type metadata for NameInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA540);
  }
  return result;
}

unint64_t sub_20A0BB2C8()
{
  unint64_t result;

  result = qword_2545CA548;
  if (!qword_2545CA548)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB0F4, &type metadata for MIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA548);
  }
  return result;
}

unint64_t sub_20A0BB310()
{
  unint64_t result;

  result = qword_2545CA550;
  if (!qword_2545CA550)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB1AC, &type metadata for AppletMemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA550);
  }
  return result;
}

unint64_t sub_20A0BB358()
{
  unint64_t result;

  result = qword_2545CA558;
  if (!qword_2545CA558)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB264, &type metadata for MemoryUsage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA558);
  }
  return result;
}

unint64_t sub_20A0BB3A0()
{
  unint64_t result;

  result = qword_2545CA560;
  if (!qword_2545CA560)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB1D4, &type metadata for MemoryUsage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA560);
  }
  return result;
}

unint64_t sub_20A0BB3E8()
{
  unint64_t result;

  result = qword_2545CA568;
  if (!qword_2545CA568)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB1FC, &type metadata for MemoryUsage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA568);
  }
  return result;
}

unint64_t sub_20A0BB430()
{
  unint64_t result;

  result = qword_2545CA570;
  if (!qword_2545CA570)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB11C, &type metadata for AppletMemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA570);
  }
  return result;
}

unint64_t sub_20A0BB478()
{
  unint64_t result;

  result = qword_2545CA578;
  if (!qword_2545CA578)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB144, &type metadata for AppletMemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA578);
  }
  return result;
}

unint64_t sub_20A0BB4C0()
{
  unint64_t result;

  result = qword_2545CA580;
  if (!qword_2545CA580)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB064, &type metadata for MIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA580);
  }
  return result;
}

unint64_t sub_20A0BB508()
{
  unint64_t result;

  result = qword_2545CA588;
  if (!qword_2545CA588)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB08C, &type metadata for MIDContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA588);
  }
  return result;
}

unint64_t sub_20A0BB550()
{
  unint64_t result;

  result = qword_2545CA590;
  if (!qword_2545CA590)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EAFAC, &type metadata for NameInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA590);
  }
  return result;
}

unint64_t sub_20A0BB598()
{
  unint64_t result;

  result = qword_2545CA598;
  if (!qword_2545CA598)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EAFD4, &type metadata for NameInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA598);
  }
  return result;
}

unint64_t sub_20A0BB5E0()
{
  unint64_t result;

  result = qword_2545CA5A0;
  if (!qword_2545CA5A0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EAEF4, &type metadata for MemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA5A0);
  }
  return result;
}

unint64_t sub_20A0BB628()
{
  unint64_t result;

  result = qword_2545CA5A8;
  if (!qword_2545CA5A8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EAF1C, &type metadata for MemoryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA5A8);
  }
  return result;
}

uint64_t sub_20A0BB66C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7061654870 && a2 == 0xE500000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7499619 && a2 == 0xE300000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6582115 && a2 == 0xE300000000000000 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69646E4964657375 && a2 == 0xEB00000000736563)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_20A0BB810()
{
  unint64_t result;

  result = qword_2545CA5B0;
  if (!qword_2545CA5B0)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for AppletPolicy, &type metadata for AppletPolicy);
    atomic_store(result, (unint64_t *)&qword_2545CA5B0);
  }
  return result;
}

uint64_t sub_20A0BB854(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_20A0BB894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_20A0BB8CC(a1, a2, a3, a4, &qword_2545CA6F8, (uint64_t)&unk_24C2BE940, (uint64_t)&unk_2545CA708);
}

uint64_t sub_20A0BB8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_20A0BB8CC(a1, a2, a3, a4, &qword_2545CA6E0, (uint64_t)&unk_24C2BE8F0, (uint64_t)&unk_2545CA6F0);
}

uint64_t sub_20A0BB8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a3;
  v23 = a7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9F68);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_20A0E092C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v17 = sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v18 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = a2;
  *((_QWORD *)v19 + 3) = v17;
  *((_QWORD *)v19 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v19[v18], (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v20 = &v19[(v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v20 = v22;
  *((_QWORD *)v20 + 1) = a4;
  swift_retain_n();
  swift_retain();
  sub_20A0BCF08((uint64_t)v15, v23, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_20A0BBA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  return swift_task_switch();
}

uint64_t sub_20A0BBA80()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;

  v1 = sub_20A09A95C();
  v0[2] = MEMORY[0x24BDAC760];
  v0[23] = v1;
  v0[6] = sub_20A09A784;
  v0[7] = 0;
  v0[3] = 1107296256;
  v0[4] = sub_20A0BCEB8;
  v0[5] = &block_descriptor_91;
  v2 = _Block_copy(v0 + 2);
  v3 = objc_msgSend(v1, sel_synchronousRemoteObjectProxyWithErrorHandler_, v2);
  _Block_release(v2);
  sub_20A0E0A34();
  swift_unknownObjectRelease();
  sub_20A07F148((uint64_t)(v0 + 8), (uint64_t)(v0 + 12));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA678);
  if (swift_dynamicCast())
  {
    v4 = (int *)v0[21];
    v5 = v0[16];
    v0[24] = v5;
    v13 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc();
    v0[25] = v6;
    *v6 = v0;
    v6[1] = sub_20A0BBCD8;
    return ((uint64_t (*)(_QWORD *, uint64_t))v13)(v0 + 18, v5);
  }
  else
  {
    v8 = (void *)sub_20A0E0800();
    __swift_project_boxed_opaque_existential_1(v0 + 8, v0[11]);
    v9 = &unk_2545E0DB0;
    v10 = (void *)sub_20A0E0CE0();
    SESPrivateLogSERProtocolDetails(v8, v9, v10);
    swift_unknownObjectRelease();

    sub_20A07DC44();
    v11 = swift_allocError();
    *(_OWORD *)v12 = xmmword_20A0EB420;
    *(_BYTE *)(v12 + 16) = 4;
    v0[17] = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6F8);
    sub_20A0E0908();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_20A0BBCD8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BBD3C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6F8);
  sub_20A0E0914();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BBDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  return swift_task_switch();
}

uint64_t sub_20A0BBDD0()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;

  v1 = sub_20A09A95C();
  v0[2] = MEMORY[0x24BDAC760];
  v0[23] = v1;
  v0[6] = sub_20A09A784;
  v0[7] = 0;
  v0[3] = 1107296256;
  v0[4] = sub_20A0BCEB8;
  v0[5] = &block_descriptor_82;
  v2 = _Block_copy(v0 + 2);
  v3 = objc_msgSend(v1, sel_synchronousRemoteObjectProxyWithErrorHandler_, v2);
  _Block_release(v2);
  sub_20A0E0A34();
  swift_unknownObjectRelease();
  sub_20A07F148((uint64_t)(v0 + 8), (uint64_t)(v0 + 12));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA678);
  if (swift_dynamicCast())
  {
    v4 = (int *)v0[21];
    v5 = v0[16];
    v0[24] = v5;
    v13 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc();
    v0[25] = v6;
    *v6 = v0;
    v6[1] = sub_20A0BC028;
    return ((uint64_t (*)(_QWORD *, uint64_t))v13)(v0 + 18, v5);
  }
  else
  {
    v8 = (void *)sub_20A0E0800();
    __swift_project_boxed_opaque_existential_1(v0 + 8, v0[11]);
    v9 = &unk_2545E0DB0;
    v10 = (void *)sub_20A0E0CE0();
    SESPrivateLogSERProtocolDetails(v8, v9, v10);
    swift_unknownObjectRelease();

    sub_20A07DC44();
    v11 = swift_allocError();
    *(_OWORD *)v12 = xmmword_20A0EB420;
    *(_BYTE *)(v12 + 16) = 4;
    v0[17] = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6E0);
    sub_20A0E0908();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_20A0BC028()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BC08C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6E0);
  sub_20A0E0914();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BC104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  return swift_task_switch();
}

uint64_t sub_20A0BC120()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;

  v1 = sub_20A09A95C();
  v0[2] = MEMORY[0x24BDAC760];
  v0[23] = v1;
  v0[6] = sub_20A09A784;
  v0[7] = 0;
  v0[3] = 1107296256;
  v0[4] = sub_20A0BCEB8;
  v0[5] = &block_descriptor_71;
  v2 = _Block_copy(v0 + 2);
  v3 = objc_msgSend(v1, sel_synchronousRemoteObjectProxyWithErrorHandler_, v2);
  _Block_release(v2);
  sub_20A0E0A34();
  swift_unknownObjectRelease();
  sub_20A07F148((uint64_t)(v0 + 8), (uint64_t)(v0 + 12));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA678);
  if (swift_dynamicCast())
  {
    v4 = (int *)v0[21];
    v5 = v0[16];
    v0[24] = v5;
    v13 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc();
    v0[25] = v6;
    *v6 = v0;
    v6[1] = sub_20A0BC378;
    return ((uint64_t (*)(_QWORD *, uint64_t))v13)(v0 + 18, v5);
  }
  else
  {
    v8 = (void *)sub_20A0E0800();
    __swift_project_boxed_opaque_existential_1(v0 + 8, v0[11]);
    v9 = &unk_2545E0DB0;
    v10 = (void *)sub_20A0E0CE0();
    SESPrivateLogSERProtocolDetails(v8, v9, v10);
    swift_unknownObjectRelease();

    sub_20A07DC44();
    v11 = swift_allocError();
    *(_OWORD *)v12 = xmmword_20A0EB420;
    *(_BYTE *)(v12 + 16) = 4;
    v0[17] = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6C8);
    sub_20A0E0908();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_20A0BC378()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BC3DC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6C8);
  sub_20A0E0914();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BC454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  return swift_task_switch();
}

uint64_t sub_20A0BC470()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;

  v1 = sub_20A09A95C();
  v0[2] = MEMORY[0x24BDAC760];
  v0[23] = v1;
  v0[6] = sub_20A09A784;
  v0[7] = 0;
  v0[3] = 1107296256;
  v0[4] = sub_20A0BCEB8;
  v0[5] = &block_descriptor_58;
  v2 = _Block_copy(v0 + 2);
  v3 = objc_msgSend(v1, sel_synchronousRemoteObjectProxyWithErrorHandler_, v2);
  _Block_release(v2);
  sub_20A0E0A34();
  swift_unknownObjectRelease();
  sub_20A07F148((uint64_t)(v0 + 8), (uint64_t)(v0 + 12));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA678);
  if (swift_dynamicCast())
  {
    v4 = (int *)v0[21];
    v5 = v0[16];
    v0[24] = v5;
    v13 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc();
    v0[25] = v6;
    *v6 = v0;
    v6[1] = sub_20A0BC6C8;
    return ((uint64_t (*)(_QWORD *, uint64_t))v13)(v0 + 18, v5);
  }
  else
  {
    v8 = (void *)sub_20A0E0800();
    __swift_project_boxed_opaque_existential_1(v0 + 8, v0[11]);
    v9 = &unk_2545E0DB0;
    v10 = (void *)sub_20A0E0CE0();
    SESPrivateLogSERProtocolDetails(v8, v9, v10);
    swift_unknownObjectRelease();

    sub_20A07DC44();
    v11 = swift_allocError();
    *(_OWORD *)v12 = xmmword_20A0EB420;
    *(_BYTE *)(v12 + 16) = 4;
    v0[17] = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6B0);
    sub_20A0E0908();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_20A0BC6C8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BC72C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6B0);
  sub_20A0E0914();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BC7A4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BC7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  return swift_task_switch();
}

uint64_t sub_20A0BC808()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  int *v4;
  _QWORD *v5;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  v1 = sub_20A09A95C();
  v0[2] = MEMORY[0x24BDAC760];
  v0[22] = v1;
  v0[6] = sub_20A09A784;
  v0[7] = 0;
  v0[3] = 1107296256;
  v0[4] = sub_20A0BCEB8;
  v0[5] = &block_descriptor_41;
  v2 = _Block_copy(v0 + 2);
  v3 = objc_msgSend(v1, sel_synchronousRemoteObjectProxyWithErrorHandler_, v2);
  _Block_release(v2);
  sub_20A0E0A34();
  swift_unknownObjectRelease();
  sub_20A07F148((uint64_t)(v0 + 8), (uint64_t)(v0 + 12));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA678);
  if (swift_dynamicCast())
  {
    v4 = (int *)v0[20];
    v0[23] = v0[16];
    v12 = (uint64_t (*)(void))((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc();
    v0[24] = v5;
    *v5 = v0;
    v5[1] = sub_20A0BCA54;
    return v12();
  }
  else
  {
    v7 = (void *)sub_20A0E0800();
    __swift_project_boxed_opaque_existential_1(v0 + 8, v0[11]);
    v8 = &unk_2545E0DB0;
    v9 = (void *)sub_20A0E0CE0();
    SESPrivateLogSERProtocolDetails(v7, v8, v9);
    swift_unknownObjectRelease();

    sub_20A07DC44();
    v10 = swift_allocError();
    *(_OWORD *)v11 = xmmword_20A0EB420;
    *(_BYTE *)(v11 + 16) = 4;
    v0[17] = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA680);
    sub_20A0E0908();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_20A0BCA54()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BCAB8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA680);
  sub_20A0E0914();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BCB20()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BCB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = a7;
  v7[19] = a4;
  v7[20] = a5;
  return swift_task_switch();
}

uint64_t sub_20A0BCB84()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;

  v1 = sub_20A09A95C();
  v0[2] = MEMORY[0x24BDAC760];
  v0[23] = v1;
  v0[6] = sub_20A09A784;
  v0[7] = 0;
  v0[3] = 1107296256;
  v0[4] = sub_20A0BCEB8;
  v0[5] = &block_descriptor_30;
  v2 = _Block_copy(v0 + 2);
  v3 = objc_msgSend(v1, sel_synchronousRemoteObjectProxyWithErrorHandler_, v2);
  _Block_release(v2);
  sub_20A0E0A34();
  swift_unknownObjectRelease();
  sub_20A07F148((uint64_t)(v0 + 8), (uint64_t)(v0 + 12));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA678);
  if (swift_dynamicCast())
  {
    v4 = (int *)v0[21];
    v5 = v0[16];
    v0[24] = v5;
    v13 = (int *)((char *)v4 + *v4);
    v6 = (_QWORD *)swift_task_alloc();
    v0[25] = v6;
    *v6 = v0;
    v6[1] = sub_20A0BCDDC;
    return ((uint64_t (*)(_QWORD *, uint64_t))v13)(v0 + 18, v5);
  }
  else
  {
    v8 = (void *)sub_20A0E0800();
    __swift_project_boxed_opaque_existential_1(v0 + 8, v0[11]);
    v9 = &unk_2545E0DB0;
    v10 = (void *)sub_20A0E0CE0();
    SESPrivateLogSERProtocolDetails(v8, v9, v10);
    swift_unknownObjectRelease();

    sub_20A07DC44();
    v11 = swift_allocError();
    *(_OWORD *)v12 = xmmword_20A0EB420;
    *(_BYTE *)(v12 + 16) = 4;
    v0[17] = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA660);
    sub_20A0E0908();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_20A0BCDDC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BCE40()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA660);
  sub_20A0E0914();

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_20A0BCEB8(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_20A0BCF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_20A0E092C();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_20A0E0920();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_20A09B4A4(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_20A0E08FC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t SESnapshot.addReservation(type:metadata:removeFromStaged:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 + 105) = a3;
  *(_QWORD *)(v4 + 184) = a2;
  *(_QWORD *)(v4 + 192) = v3;
  v6 = sub_20A0E06D4();
  *(_QWORD *)(v4 + 200) = v6;
  *(_QWORD *)(v4 + 208) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 216) = swift_task_alloc();
  v7 = sub_20A0E0740();
  *(_QWORD *)(v4 + 224) = v7;
  *(_QWORD *)(v4 + 232) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 240) = swift_task_alloc();
  *(_OWORD *)(v4 + 248) = *a1;
  return swift_task_switch();
}

void sub_20A0BD100()
{
  uint64_t v0;
  id *v1;
  void *v2;
  id *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  int v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t inited;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD **v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  NSObject *log;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (qword_2545C8E60 != -1)
    swift_once();
  v1 = (id *)(v0 + 184);
  v2 = *(void **)(v0 + 184);
  v3 = (id *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 224);
  v9 = __swift_project_value_buffer(v8, (uint64_t)qword_2545D79F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  sub_20A074C44(v4, v5);
  v10 = v2;
  sub_20A074C44(v4, v5);
  v11 = v10;
  v12 = sub_20A0E0728();
  v13 = sub_20A0E0980();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = *(_QWORD *)(v0 + 256);
  if (v14)
  {
    v61 = v13;
    log = v12;
    v64 = *(_QWORD *)(v0 + 184);
    v17 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    *(_QWORD *)&v66 = v60;
    *(_DWORD *)v17 = 136315906;
    *(_QWORD *)(v0 + 144) = sub_20A0A6D5C(0xD00000000000002FLL, 0x800000020A0F2660, (uint64_t *)&v66);
    sub_20A0E0A10();
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 112) = v15;
    *(_QWORD *)(v0 + 120) = v16;
    sub_20A074C44(v15, v16);
    v18 = sub_20A0E0824();
    *(_QWORD *)(v0 + 160) = sub_20A0A6D5C(v18, v19, (uint64_t *)&v66);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    sub_20A075F1C(v15, v16);
    sub_20A075F1C(v15, v16);
    *(_WORD *)(v17 + 22) = 2080;
    v20 = (void *)objc_opt_self();
    *(_QWORD *)(v0 + 168) = 0;
    v21 = objc_msgSend(v20, sel_dataWithJSONObject_options_error_, v64, 0, v0 + 168);
    v22 = *(void **)(v0 + 168);
    if (!v21)
    {

      v53 = v22;
      sub_20A0E0620();

      swift_willThrow();
      swift_unexpectedError();
      return;
    }
    v23 = v21;
    v24 = v22;
    v25 = sub_20A0E0668();
    v27 = v26;

    v28 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
    v29 = (void *)sub_20A0E0644();
    v30 = objc_msgSend(v28, sel_initWithData_encoding_, v29, 1);
    sub_20A07F898(v25, v27);

    if (!v30)
    {

      __break(1u);
      return;
    }
    v59 = *(_QWORD *)(v0 + 232);
    v63 = *(_QWORD *)(v0 + 224);
    v65 = *(_QWORD *)(v0 + 240);
    v31 = *(unsigned __int8 *)(v0 + 105);
    v32 = *(void **)(v0 + 184);
    v33 = sub_20A0E080C();
    v35 = v34;

    *(_QWORD *)(v0 + 176) = sub_20A0A6D5C(v33, v35, (uint64_t *)&v66);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    *(_WORD *)(v17 + 32) = 1024;
    *(_DWORD *)(v0 + 108) = v31;
    sub_20A0E0A10();
    _os_log_impl(&dword_20A048000, log, v61, "%s (%s, %s, %{BOOL}d)", (uint8_t *)v17, 0x26u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v60, -1, -1);
    MEMORY[0x20BD20380](v17, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v65, v63);
    v3 = (id *)(v0 + 152);
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 232);
    v37 = *(_QWORD *)(v0 + 240);
    v38 = *(_QWORD *)(v0 + 224);
    v39 = *(void **)(v0 + 184);
    sub_20A075F1C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
    sub_20A075F1C(v15, v16);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
  }
  if (*(_BYTE *)(v0 + 105) == 1)
  {
    v66 = *(_OWORD *)(v0 + 248);
    SESnapshot.removeFromSnapshot(credential:)((uint64_t *)&v66);
  }
  v41 = *(_QWORD *)(v0 + 248);
  v40 = *(_QWORD *)(v0 + 256);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA5D8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20A0EA0E0;
  *(_QWORD *)(inited + 32) = v41;
  *(_QWORD *)(inited + 40) = v40;
  sub_20A074C44(v41, v40);
  SESnapshot.canFitWithReason(credentials:)(inited, &v66);
  swift_setDeallocating();
  swift_arrayDestroy();
  if ((BYTE1(v66) & 1) == 0)
  {
    sub_20A07DC44();
    swift_allocError();
    *(_OWORD *)v54 = xmmword_20A0EB430;
    *(_BYTE *)(v54 + 16) = 4;
    swift_willThrow();
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v43 = *v1;
  v44 = (void *)objc_opt_self();
  *v3 = 0;
  v45 = objc_msgSend(v44, sel_dataWithPropertyList_format_options_error_, v43, 200, 0, v3);
  v46 = *v3;
  if (!v45)
  {
    v55 = v46;
    v57 = *(_QWORD *)(v0 + 248);
    v56 = *(_QWORD *)(v0 + 256);
    v58 = *(_QWORD ***)(v0 + 192);
    sub_20A0E0620();

    swift_willThrow();
    sub_20A0BDD14(v58, v57, v56);
    goto LABEL_17;
  }
  v47 = sub_20A0E0668();
  v49 = v48;

  *(_QWORD *)(v0 + 264) = v47;
  *(_QWORD *)(v0 + 272) = v49;
  if (qword_2545C8E50 != -1)
    swift_once();
  v51 = *(_QWORD *)(v0 + 248);
  v50 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 280) = qword_2545D79E8;
  v52 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 288) = v52;
  v52[2] = v51;
  v52[3] = v50;
  v52[4] = v47;
  v52[5] = v49;
  sub_20A074C44(v51, v50);
  sub_20A07F854(v47, v49);
  swift_task_switch();
}

uint64_t sub_20A0BD8AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[35];
  v2 = v0[36];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v3 = (_QWORD *)swift_task_alloc();
  v0[37] = v3;
  v3[2] = v1;
  v3[3] = &unk_2545CA5E8;
  v3[4] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[38] = v4;
  type metadata accessor for Reservation();
  *v4 = v0;
  v4[1] = sub_20A0BD9BC;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0BD9BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 312) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
    *(_QWORD *)(v2 + 320) = *(_QWORD *)(v2 + 136);
  }
  return swift_task_switch();
}

uint64_t sub_20A0BDA88()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BDAF0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD **v3;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD ***)(v0 + 192);
  sub_20A07F898(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  swift_release();
  sub_20A0BDD14(v3, v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BDB98()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD ***)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, (uint64_t)v1 + OBJC_IVAR____TtC9SEService11Reservation_uuid, v3);
  v8 = (uint64_t *)(v5 + OBJC_IVAR____TtC9SEService16ReservationState_reservations);
  swift_beginAccess();
  v9 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *v8;
  *v8 = 0x8000000000000000;
  sub_20A0C16F0((uint64_t)v9, v6, isUniquelyReferenced_nonNull_native);
  *v8 = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  swift_endAccess();
  sub_20A07F898(v2, v12);
  sub_20A0BDD14(v4, v13, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 320));
}

uint64_t sub_20A0BDD14(_QWORD **a1, uint64_t a2, unint64_t a3)
{
  char v3;
  _QWORD **v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;

  v6 = a1;
  v7 = *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState)
     + OBJC_IVAR____TtC9SEService16ReservationState_counts;
  swift_beginAccess();
  sub_20A074C44(a2, a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD **)v7;
  v34 = *(_QWORD **)v7;
  *(_QWORD *)v7 = 0x8000000000000000;
  v11 = sub_20A0B8934(a2, a3);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_20;
  }
  v3 = v10;
  if (v9[3] >= v14)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_23;
    while (1)
    {
LABEL_6:
      *(_QWORD *)v7 = v9;
      swift_bridgeObjectRelease();
      v17 = *(_QWORD **)v7;
      if ((v3 & 1) == 0)
      {
        sub_20A0A7750(v11, a2, a3, 0, *(_QWORD **)v7);
        sub_20A074C44(a2, a3);
      }
      v18 = v17[7];
      v19 = *(_QWORD *)(v18 + 8 * v11);
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        break;
      *(_QWORD *)(v18 + 8 * v11) = v21;
      swift_endAccess();
      v6 = (_QWORD **)((char *)v6 + OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials);
      swift_beginAccess();
      v3 = swift_isUniquelyReferenced_nonNull_native();
      v22 = *v6;
      v34 = *v6;
      *v6 = (_QWORD *)0x8000000000000000;
      v7 = sub_20A0B8934(a2, a3);
      v24 = v22[2];
      v25 = (v23 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        goto LABEL_21;
      v11 = v23;
      if (v22[3] >= v26)
      {
        if ((v3 & 1) == 0)
        {
          sub_20A0C5588();
          v22 = v34;
        }
      }
      else
      {
        sub_20A0C6B90(v26, v3);
        v22 = v34;
        v27 = sub_20A0B8934(a2, a3);
        if ((v11 & 1) != (v28 & 1))
          goto LABEL_24;
        v7 = v27;
      }
      *v6 = v22;
      swift_bridgeObjectRelease();
      v29 = *v6;
      if ((v11 & 1) == 0)
      {
        sub_20A0A7750(v7, a2, a3, 0, *v6);
        sub_20A074C44(a2, a3);
      }
      v30 = v29[7];
      v31 = *(_QWORD *)(v30 + 8 * v7);
      v20 = __OFADD__(v31, 1);
      v32 = v31 + 1;
      if (!v20)
      {
        *(_QWORD *)(v30 + 8 * v7) = v32;
        swift_endAccess();
        return sub_20A075F1C(a2, a3);
      }
LABEL_22:
      __break(1u);
LABEL_23:
      sub_20A0C5588();
      v9 = v34;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_20A0C6B90(v14, isUniquelyReferenced_nonNull_native);
  v9 = v34;
  v15 = sub_20A0B8934(a2, a3);
  if ((v3 & 1) == (v16 & 1))
  {
    v11 = v15;
    goto LABEL_6;
  }
LABEL_24:
  result = sub_20A0E0D28();
  __break(1u);
  return result;
}

uint64_t sub_20A0BDFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[20] = a5;
  v6[21] = a6;
  v6[18] = a3;
  v6[19] = a4;
  v6[16] = a1;
  v6[17] = a2;
  return swift_task_switch();
}

uint64_t sub_20A0BDFE0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = *(void **)(v0 + 136);
  v6 = *(_OWORD *)(v0 + 144);
  CredentialType.rawValue.getter();
  v2 = sub_20A0E0800();
  *(_QWORD *)(v0 + 176) = v2;
  swift_bridgeObjectRelease();
  v3 = sub_20A0E0644();
  *(_QWORD *)(v0 + 184) = v3;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_20A0BE0D8;
  v4 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 88) = 0x40000000;
  *(_QWORD *)(v0 + 96) = sub_20A0A1B80;
  *(_QWORD *)(v0 + 104) = &block_descriptor_74;
  *(_QWORD *)(v0 + 112) = v4;
  objc_msgSend(v1, sel_addReservationWithType_metadata_completionHandler_, v2, v3, v0 + 80, v6);
  return swift_continuation_await();
}

uint64_t sub_20A0BE0D8()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 192) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0BE138()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v2 = *(void **)(v0 + 176);
  v1 = *(void **)(v0 + 184);
  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BE178()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 184);
  v2 = *(void **)(v0 + 176);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SESnapshot.editReservation(uuid:newMetadata:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[8] = a1;
  v2[9] = a2;
  v3 = sub_20A0E06D4();
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 + 64);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v5 = sub_20A0E0740();
  v2[15] = v5;
  v2[16] = *(_QWORD *)(v5 - 8);
  v2[17] = swift_task_alloc();
  return swift_task_switch();
}

void sub_20A0BE288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  void *v55;
  id v56;
  uint64_t v57;
  os_log_type_t v58;
  NSObject *log;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[2];

  v64[1] = *MEMORY[0x24BDAC8D0];
  if (qword_2545C8E60 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(void **)(v0 + 72);
  v9 = __swift_project_value_buffer(v4, (uint64_t)qword_2545D79F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v9, v4);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v10(v5, v1, v6);
  v11 = v8;
  v12 = sub_20A0E0728();
  v13 = sub_20A0E0980();
  if (os_log_type_enabled(v12, v13))
  {
    v58 = v13;
    log = v12;
    v14 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 88);
    v60 = *(_QWORD *)(v0 + 80);
    v62 = *(_QWORD *)(v0 + 72);
    v16 = swift_slowAlloc();
    v57 = swift_slowAlloc();
    v64[0] = v57;
    *(_DWORD *)v16 = 136315650;
    *(_QWORD *)(v0 + 32) = sub_20A0A6D5C(0xD000000000000022, 0x800000020A0F26C0, v64);
    sub_20A0E0A10();
    *(_WORD *)(v16 + 12) = 2080;
    v17 = sub_20A0E068C();
    *(_QWORD *)(v0 + 40) = sub_20A0A6D5C(v17, v18, v64);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v60);
    *(_WORD *)(v16 + 22) = 2080;
    v19 = (void *)objc_opt_self();
    *(_QWORD *)(v0 + 48) = 0;
    v20 = objc_msgSend(v19, sel_dataWithJSONObject_options_error_, v62, 0, v0 + 48);
    v21 = *(void **)(v0 + 48);
    if (!v20)
    {

      v56 = v21;
      sub_20A0E0620();

      swift_willThrow();
      swift_unexpectedError();
      return;
    }
    v22 = v20;
    v23 = v21;
    v24 = sub_20A0E0668();
    v26 = v25;

    v27 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
    v28 = (void *)sub_20A0E0644();
    v29 = objc_msgSend(v27, sel_initWithData_encoding_, v28, 1);
    sub_20A07F898(v24, v26);

    if (!v29)
    {

      __break(1u);
      return;
    }
    v30 = *(_QWORD *)(v0 + 128);
    v61 = *(_QWORD *)(v0 + 120);
    v63 = *(_QWORD *)(v0 + 136);
    v31 = *(void **)(v0 + 72);
    v32 = sub_20A0E080C();
    v34 = v33;

    *(_QWORD *)(v0 + 56) = sub_20A0A6D5C(v32, v34, v64);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20A048000, log, v58, "%s (%s, %s)", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v57, -1, -1);
    MEMORY[0x20BD20380](v16, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v63, v61);
  }
  else
  {
    v35 = *(_QWORD *)(v0 + 128);
    v36 = *(_QWORD *)(v0 + 136);
    v37 = *(_QWORD *)(v0 + 120);
    v38 = *(void **)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80));

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
  }
  v39 = *(_QWORD *)(v0 + 72);
  v40 = (void *)objc_opt_self();
  *(_QWORD *)(v0 + 16) = 0;
  v41 = objc_msgSend(v40, sel_dataWithPropertyList_format_options_error_, v39, 200, 0, v0 + 16);
  v42 = *(id *)(v0 + 16);
  if (v41)
  {
    v43 = sub_20A0E0668();
    v45 = v44;

    *(_QWORD *)(v0 + 144) = v43;
    *(_QWORD *)(v0 + 152) = v45;
    if (qword_2545C8E50 != -1)
      swift_once();
    v47 = *(_QWORD *)(v0 + 96);
    v46 = *(_QWORD *)(v0 + 104);
    v48 = *(_QWORD *)(v0 + 80);
    v49 = *(_QWORD *)(v0 + 88);
    v50 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 160) = qword_2545D79E8;
    v10(v46, v50, v48);
    v51 = (*(unsigned __int8 *)(v49 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    v52 = (v47 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = swift_allocObject();
    *(_QWORD *)(v0 + 168) = v53;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v49 + 32))(v53 + v51, v46, v48);
    v54 = (uint64_t *)(v53 + v52);
    *v54 = v43;
    v54[1] = v45;
    sub_20A07F854(v43, v45);
    swift_task_switch();
  }
  else
  {
    v55 = v42;
    sub_20A0E0620();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_20A0BE848()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[20];
  v2 = v0[21];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v3 = (_QWORD *)swift_task_alloc();
  v0[22] = v3;
  v3[2] = v1;
  v3[3] = &unk_2545CA600;
  v3[4] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[23] = v4;
  type metadata accessor for Reservation();
  *v4 = v0;
  v4[1] = sub_20A0BE958;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0BE958()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
    *(_QWORD *)(v2 + 200) = *(_QWORD *)(v2 + 24);
  }
  return swift_task_switch();
}

uint64_t sub_20A0BEA24()
{
  uint64_t v0;

  sub_20A07F898(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 200));
}

uint64_t sub_20A0BEAB0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BEB18()
{
  uint64_t v0;

  sub_20A07F898(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BEBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[19] = a4;
  v5[20] = a5;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return swift_task_switch();
}

uint64_t sub_20A0BEBC8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[17];
  v2 = sub_20A0E06A4();
  v0[21] = v2;
  v3 = sub_20A0E0644();
  v0[22] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_20A0BEC98;
  v4 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_20A0A1B80;
  v5[3] = &block_descriptor_63;
  v5[4] = v4;
  objc_msgSend(v1, sel_editReservationWithUuid_metadata_completionHandler_, v2, v3, v5);
  return swift_continuation_await();
}

uint64_t sub_20A0BEC98()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0BECF8()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v2 = *(void **)(v0 + 168);
  v1 = *(void **)(v0 + 176);
  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BED38()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 176);
  v2 = *(void **)(v0 + 168);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SESnapshot.findReservation(uuid:fromCache:)(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, char);

  v7 = (uint64_t (*)(uint64_t, char))((char *)&dword_2545CA610 + dword_2545CA610);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_20A0BEDF0;
  return v7(a1, a2);
}

uint64_t sub_20A0BEDF0(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return (*(uint64_t (**)(void *))(v4 + 8))(a1);
}

uint64_t sub_20A0BEE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return swift_task_switch();
}

uint64_t sub_20A0BEE80()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[17];
  v2 = sub_20A0E06A4();
  v0[19] = v2;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_20A0BEF2C;
  v3 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_20A0BF008;
  v4[3] = &block_descriptor_61;
  v4[4] = v3;
  objc_msgSend(v1, sel_findReservationWithUuid_completionHandler_, v2, v4);
  return swift_continuation_await();
}

uint64_t sub_20A0BEF2C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0BEF8C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  **(_QWORD **)(v0 + 128) = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BEFC8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BF008(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  id v9;
  void *v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v10 = a2;
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v9 = a2;
    sub_20A09EBF0((uint64_t)&v10, v8, &qword_2545CA6A8);
    return swift_continuation_throwingResume();
  }
}

uint64_t SESnapshot.removeReservation(uuid:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[16] = a1;
  v2[17] = v1;
  v3 = sub_20A0E06D4();
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = *(_QWORD *)(v4 + 64);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20A0BF124()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, char);
  uint64_t v20;

  if (qword_2545C8E60 != -1)
    swift_once();
  v1 = v0[16];
  v2 = v0[22];
  v3 = v0[18];
  v4 = v0[19];
  v5 = sub_20A0E0740();
  __swift_project_value_buffer(v5, (uint64_t)qword_2545D79F0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[23] = v6;
  v6(v2, v1, v3);
  v7 = sub_20A0E0728();
  v8 = sub_20A0E0980();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[22];
  v11 = v0[18];
  if (v9)
  {
    v17 = v0[19];
    v12 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v12 = 136315394;
    v0[14] = sub_20A0A6D5C(0xD000000000000018, 0x800000020A0F26F0, &v20);
    sub_20A0E0A10();
    *(_WORD *)(v12 + 12) = 2080;
    sub_20A09A6C4(&qword_2545CA630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v13 = sub_20A0E0CC8();
    v0[15] = sub_20A0A6D5C(v13, v14, &v20);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v10, v11);
    _os_log_impl(&dword_20A048000, v7, v8, "%s (%s)", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v18, -1, -1);
    MEMORY[0x20BD20380](v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[19] + 8))(v0[22], v0[18]);
  }

  v19 = (uint64_t (*)(uint64_t, char))((char *)&dword_2545CA610 + dword_2545CA610);
  v15 = (_QWORD *)swift_task_alloc();
  v0[24] = v15;
  *v15 = v0;
  v15[1] = sub_20A0BF39C;
  return v19(v0[16], 1);
}

uint64_t sub_20A0BF39C(void *a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

  }
  else
  {
    *(_QWORD *)(v4 + 200) = a1;
    v5 = a1;
  }
  return swift_task_switch();
}

uint64_t sub_20A0BF418()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(char **)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = &v1[OBJC_IVAR____TtC9SEService11Reservation_type];
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC9SEService11Reservation_type];
  *(_QWORD *)(v0 + 208) = v4;
  v5 = *((_QWORD *)v3 + 1);
  *(_QWORD *)(v0 + 216) = v5;
  sub_20A074C44(v4, v5);

  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState);
  v7 = OBJC_IVAR____TtC9SEService16ReservationState_counts;
  *(_QWORD *)(v0 + 224) = v6;
  *(_QWORD *)(v0 + 232) = v7;
  v8 = v6 + v7;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v8 + 16))
    goto LABEL_7;
  sub_20A074C44(v4, v5);
  sub_20A0B8934(v4, v5);
  if ((v9 & 1) == 0)
  {
    sub_20A075F1C(v4, v5);
LABEL_7:
    swift_endAccess();
    sub_20A075F1C(v4, v5);
    sub_20A07DC44();
    swift_allocError();
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 4;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_endAccess();
  sub_20A075F1C(v4, v5);
  if (qword_2545C8E50 != -1)
    swift_once();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 240) = qword_2545D79E8;
  v10(v11, v14, v12);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v0 + 248) = v16;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v16 + v15, v11, v12);
  return swift_task_switch();
}

uint64_t sub_20A0BF620()
{
  uint64_t v0;
  uint64_t v1;

  sub_20A07DC44();
  swift_allocError();
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 4;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BF694()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[30];
  v2 = v0[31];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v3 = (_QWORD *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v1;
  v3[3] = &unk_2545CA628;
  v3[4] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[33] = v4;
  *v4 = v0;
  v4[1] = sub_20A0BF768;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0BF768()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_20A0BF7E0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = (_QWORD *)(*(_QWORD *)(v0 + 224) + *(_QWORD *)(v0 + 232));
  swift_beginAccess();
  sub_20A074C44(v2, v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v44 = (_QWORD *)*v3;
  v5 = (_QWORD *)*v3;
  *v3 = 0x8000000000000000;
  sub_20A074C44(v2, v1);
  v7 = sub_20A0B8934(v2, v1);
  v8 = v5[2];
  v9 = (v6 & 1) == 0;
  result = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
    goto LABEL_21;
  }
  LOBYTE(v1) = v6;
  if (v5[3] < result)
  {
    v12 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 216);
    sub_20A0C6B90(result, isUniquelyReferenced_nonNull_native);
    result = sub_20A0B8934(v12, v11);
    if ((v1 & 1) != (v13 & 1))
      return sub_20A0E0D28();
    v7 = result;
    if ((v1 & 1) != 0)
      goto LABEL_8;
    goto LABEL_25;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_24;
  if ((v6 & 1) != 0)
  {
LABEL_8:
    while (1)
    {
      v14 = v44[7];
      v15 = *(_QWORD *)(v14 + 8 * v7);
      v16 = __OFSUB__(v15, 1);
      v17 = v15 - 1;
      if (v16)
        break;
      v1 = *(_QWORD *)(v0 + 224);
      v18 = *(_QWORD *)(v0 + 232);
      v20 = *(_QWORD *)(v0 + 208);
      v19 = *(_QWORD *)(v0 + 216);
      v42 = *(_QWORD *)(v0 + 128);
      v43 = *(_QWORD *)(v0 + 136);
      *(_QWORD *)(v14 + 8 * v7) = v17;
      sub_20A075F1C(v20, v19);
      *(_QWORD *)(v1 + v18) = v44;
      swift_endAccess();
      sub_20A075F1C(v20, v19);
      LOBYTE(v1) = v0 + 88;
      swift_beginAccess();
      v21 = (void *)sub_20A0C0F58(v42);
      swift_endAccess();

      v22 = (_QWORD *)(v43 + OBJC_IVAR____TtC9SEService10SESnapshot_globalCredentials);
      swift_beginAccess();
      sub_20A074C44(v20, v19);
      v7 = swift_isUniquelyReferenced_nonNull_native();
      v44 = (_QWORD *)*v22;
      v23 = (_QWORD *)*v22;
      *v22 = 0x8000000000000000;
      v25 = sub_20A0B8934(v20, v19);
      v26 = v23[2];
      v27 = (v24 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
        goto LABEL_22;
      v29 = v24;
      if (v23[3] >= v28)
      {
        if ((v7 & 1) == 0)
        {
          sub_20A0C5588();
          v23 = v44;
        }
      }
      else
      {
        v31 = *(_QWORD *)(v0 + 208);
        v30 = *(_QWORD *)(v0 + 216);
        sub_20A0C6B90(v28, v7);
        v23 = v44;
        v32 = sub_20A0B8934(v31, v30);
        if ((v29 & 1) != (v33 & 1))
          return sub_20A0E0D28();
        v25 = v32;
      }
      *v22 = v23;
      swift_bridgeObjectRelease();
      v34 = (_QWORD *)*v22;
      swift_bridgeObjectRetain();
      if ((v29 & 1) == 0)
      {
        v36 = *(_QWORD *)(v0 + 208);
        v35 = *(_QWORD *)(v0 + 216);
        sub_20A0A7750(v25, v36, v35, 0, v34);
        sub_20A074C44(v36, v35);
      }
      v37 = v34[7];
      v38 = *(_QWORD *)(v37 + 8 * v25);
      v16 = __OFSUB__(v38, 1);
      v39 = v38 - 1;
      if (!v16)
      {
        v41 = *(_QWORD *)(v0 + 208);
        v40 = *(_QWORD *)(v0 + 216);
        *(_QWORD *)(v37 + 8 * v25) = v39;
        swift_endAccess();
        swift_bridgeObjectRelease();
        sub_20A075F1C(v41, v40);
        sub_20A075F1C(v41, v40);
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
LABEL_23:
      __break(1u);
LABEL_24:
      result = (uint64_t)sub_20A0C5588();
      if ((v1 & 1) == 0)
        goto LABEL_25;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_20A0BFB44()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  swift_release();
  sub_20A075F1C(v2, v1);
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0BFBA0()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BFBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 120) = a2;
  *(_QWORD *)(v3 + 128) = a3;
  return swift_task_switch();
}

uint64_t sub_20A0BFBF4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[15];
  v2 = sub_20A0E06A4();
  v0[17] = v2;
  v0[2] = v0;
  v0[3] = sub_20A0BFC98;
  v3 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_20A0BFD6C;
  v4[3] = &block_descriptor_44;
  v4[4] = v3;
  objc_msgSend(v1, sel_removeReservationWithUuid_completionHandler_, v2, v4);
  return swift_continuation_await();
}

uint64_t sub_20A0BFC98()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0BFCF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BFD2C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0BFD6C(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t SESnapshot.reservations(fromCache:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 80) = v1;
  *(_BYTE *)(v2 + 156) = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA000);
  *(_QWORD *)(v2 + 88) = v3;
  *(_QWORD *)(v2 + 96) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 104) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20A0BFE48()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  if (qword_2545C8E60 != -1)
    swift_once();
  v1 = sub_20A0E0740();
  __swift_project_value_buffer(v1, (uint64_t)qword_2545D79F0);
  v2 = sub_20A0E0728();
  v3 = sub_20A0E0980();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(unsigned __int8 *)(v0 + 156);
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315394;
    *(_QWORD *)(v0 + 72) = sub_20A0A6D5C(0xD000000000000018, 0x800000020A0F2710, &v10);
    sub_20A0E0A10();
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v0 + 152) = v4;
    sub_20A0E0A10();
    _os_log_impl(&dword_20A048000, v2, v3, "%s (%{BOOL}d)", (uint8_t *)v5, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v6, -1, -1);
    MEMORY[0x20BD20380](v5, -1, -1);
  }

  if ((*(_BYTE *)(v0 + 156) & 1) != 0)
  {
    swift_beginAccess();
    v7 = swift_bridgeObjectRetain();
    v8 = sub_20A0C0DA4(v7);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v8);
  }
  else
  {
    if (qword_2545C8E50 != -1)
      swift_once();
    *(_QWORD *)(v0 + 112) = qword_2545D79E8;
    return swift_task_switch();
  }
}

uint64_t sub_20A0C00BC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[14];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v2 = (_QWORD *)swift_task_alloc();
  v0[15] = v2;
  v2[2] = v1;
  v2[3] = &unk_2545CA640;
  v2[4] = 0;
  v3 = (_QWORD *)swift_task_alloc();
  v0[16] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA648);
  *v3 = v0;
  v3[1] = sub_20A0C01A8;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0C01A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    *(_QWORD *)(v2 + 144) = *(_QWORD *)(v2 + 64);
  }
  return swift_task_switch();
}

uint64_t sub_20A0C0220()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_20A0E0BD8();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      v28 = MEMORY[0x24BEE4AF8];
      result = sub_20A097354(0, v3 & ~(v3 >> 63), 0);
      if (v3 < 0)
      {
        __break(1u);
        return result;
      }
      v5 = 0;
      v6 = *(_QWORD *)(v0 + 96);
      v27 = *(_QWORD *)(v0 + 88);
      v7 = v28;
      v8 = v1 & 0xC000000000000001;
      v25 = v2;
      v26 = *(_QWORD *)(v0 + 144) + 32;
      do
      {
        if (v8)
          v9 = (char *)MEMORY[0x20BD1F648](v5, *(_QWORD *)(v0 + 144));
        else
          v9 = (char *)*(id *)(v26 + 8 * v5);
        v10 = v9;
        v11 = *(_QWORD *)(v0 + 104);
        v12 = *(int *)(v27 + 48);
        v13 = &v9[OBJC_IVAR____TtC9SEService11Reservation_uuid];
        v14 = sub_20A0E06D4();
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v13, v14);
        *(_QWORD *)(v11 + v12) = v10;
        v28 = v7;
        v16 = *(_QWORD *)(v7 + 16);
        v15 = *(_QWORD *)(v7 + 24);
        if (v16 >= v15 >> 1)
        {
          sub_20A097354(v15 > 1, v16 + 1, 1);
          v7 = v28;
        }
        v17 = *(_QWORD *)(v0 + 104);
        ++v5;
        *(_QWORD *)(v7 + 16) = v16 + 1;
        sub_20A09EBF0(v17, v7+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, (uint64_t *)&unk_2545CA000);
      }
      while (v3 != v5);
      swift_bridgeObjectRelease();
      v2 = v25;
      if (*(_QWORD *)(v7 + 16))
        goto LABEL_12;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
  {
LABEL_12:
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA020);
    v18 = sub_20A0E0BFC();
    goto LABEL_16;
  }
LABEL_15:
  v18 = MEMORY[0x24BEE4B00];
LABEL_16:
  v19 = *(_QWORD *)(v0 + 136);
  v28 = v18;
  v20 = swift_bridgeObjectRetain();
  sub_20A09E19C(v20, 1, &v28);
  if (v19)
    return swift_unexpectedError();
  swift_bridgeObjectRelease();
  v21 = v28;
  v22 = (uint64_t *)(v2 + OBJC_IVAR____TtC9SEService16ReservationState_reservations);
  swift_beginAccess();
  *v22 = v21;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v23 = swift_bridgeObjectRetain();
  v24 = sub_20A0C0DA4(v23);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v24);
}

uint64_t sub_20A0C052C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0C056C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_20A0C0584()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[17];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_20A0A1AD0;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_20A0C0618;
  v3[3] = &block_descriptor_33;
  v3[4] = v2;
  objc_msgSend(v1, sel_reservationsWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_20A0C0618(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    type metadata accessor for Reservation();
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = sub_20A0E08B4();
    return swift_continuation_throwingResume();
  }
}

uint64_t SESnapshot.clearReservations()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch();
}

uint64_t sub_20A0C06C8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  if (qword_2545C8E60 != -1)
    swift_once();
  v1 = sub_20A0E0740();
  __swift_project_value_buffer(v1, (uint64_t)qword_2545D79F0);
  v2 = sub_20A0E0728();
  v3 = sub_20A0E0980();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v7 = v5;
    *(_DWORD *)v4 = 136315138;
    *(_QWORD *)(v0 + 112) = sub_20A0A6D5C(0xD000000000000013, 0x800000020A0F2730, &v7);
    sub_20A0E0A10();
    _os_log_impl(&dword_20A048000, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v5, -1, -1);
    MEMORY[0x20BD20380](v4, -1, -1);
  }

  if (qword_2545C8E50 != -1)
    swift_once();
  *(_QWORD *)(v0 + 128) = qword_2545D79E8;
  return swift_task_switch();
}

uint64_t sub_20A0C087C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[16];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v2 = (_QWORD *)swift_task_alloc();
  v0[17] = v2;
  v2[2] = v1;
  v2[3] = &unk_2545CA658;
  v2[4] = 0;
  v3 = (_QWORD *)swift_task_alloc();
  v0[18] = v3;
  *v3 = v0;
  v3[1] = sub_20A0C0950;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0C0950()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0C09C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState);
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService16ReservationState_counts);
  swift_beginAccess();
  v3 = MEMORY[0x24BEE4B00];
  *v2 = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService16ReservationState_reservations);
  swift_beginAccess();
  *v4 = v3;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0C0A74()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20A0C0AB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState);
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService16ReservationState_counts);
  swift_beginAccess();
  v3 = MEMORY[0x24BEE4B00];
  *v2 = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC9SEService16ReservationState_reservations);
  swift_beginAccess();
  *v4 = v3;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0C0B64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a2;
  return swift_task_switch();
}

uint64_t sub_20A0C0B7C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_20A0C0C08;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_20A0BFD6C;
  v3[3] = &block_descriptor_3;
  v3[4] = v2;
  objc_msgSend(v1, sel_clearReservationsWithCompletionHandler_, v3);
  return swift_continuation_await();
}

uint64_t sub_20A0C0C08()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 128) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_20A0C0C68()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0C0C74()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0C0CB0()
{
  _QWORD *v0;

  if (v0[3] >= 0x1AuLL)
    swift_bridgeObjectRelease();
  sub_20A07F898(v0[4], v0[5]);
  return swift_deallocObject();
}

uint64_t sub_20A0C0CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *(_OWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v8 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *(_QWORD *)v8 = v3;
  *(_QWORD *)(v8 + 8) = sub_20A09B45C;
  *(_QWORD *)(v8 + 160) = v7;
  *(_QWORD *)(v8 + 168) = v6;
  *(_OWORD *)(v8 + 144) = v10;
  *(_QWORD *)(v8 + 128) = a1;
  *(_QWORD *)(v8 + 136) = a2;
  return swift_task_switch();
}

uint64_t sub_20A0C0D70(uint64_t a1)
{
  uint64_t *v1;

  return sub_20A0BB8CC(a1, v1[2], v1[3], v1[4], &qword_2545CA6C8, (uint64_t)&unk_24C2BE888, (uint64_t)&unk_2545CA6D8);
}

_QWORD *sub_20A0C0DA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA320);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  v6 = sub_20A0C1974(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_20A0855E0();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_20A0C0E8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_20A0B8998(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_20A0C5CD4();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_20A0C1030(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_20A0C0F58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_20A0B8AFC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_20A0C58F8();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = sub_20A0E06D4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  sub_20A0C1204(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_20A0C1030(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_20A0E0A70();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_20A0E0D7C();
        swift_bridgeObjectRetain();
        sub_20A0E0848();
        v9 = sub_20A0E0D94();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_20A0C1204(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_20A0E06D4();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_20A0E0A70();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_20A09A6C4((unint64_t *)&unk_2545CA1B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = sub_20A0E07D0();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_20A0C14A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_20A0B8998(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= result && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= result && (a4 & 1) == 0)
    {
      result = (uint64_t)sub_20A0C5734();
      goto LABEL_7;
    }
    sub_20A0C7064(result, a4 & 1);
    result = sub_20A0B8998(a2, a3);
    if ((v16 & 1) == (v19 & 1))
    {
      v12 = result;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_20A0A7750(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_20A0E0D28();
  __break(1u);
  return result;
}

void sub_20A0C15C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_20A0B8998(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_20A0C5CD4();
      goto LABEL_7;
    }
    sub_20A0C7D38(v15, a4 & 1);
    v20 = sub_20A0B8998(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_20A0A7750(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  sub_20A0E0D28();
  __break(1u);
}

void sub_20A0C16F0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = sub_20A0E06D4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_20A0B8AFC(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_20A0C58F8();
    goto LABEL_7;
  }
  sub_20A0C7384(v17, a3 & 1);
  v22 = sub_20A0B8AFC(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    sub_20A0E0D28();
    __break(1u);
    return;
  }
  v14 = v22;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_20A0A7798(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_20A0C184C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_20A0E06D4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_20A07F898(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  return swift_deallocObject();
}

uint64_t sub_20A0C18C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(sub_20A0E06D4() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v2 + v7;
  v9 = (uint64_t *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_20A09B5D4;
  v12[19] = v10;
  v12[20] = v11;
  v12[17] = a2;
  v12[18] = v8;
  v12[16] = a1;
  return swift_task_switch();
}

_QWORD *sub_20A0C1974(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_20A0C1B6C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 244) = a2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v2;
  v4 = sub_20A0E06D4();
  *(_QWORD *)(v3 + 128) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 136) = v5;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 152) = swift_task_alloc();
  *(_QWORD *)(v3 + 160) = swift_task_alloc();
  *(_QWORD *)(v3 + 168) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20A0C1BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34[2];

  if (qword_2545C8E60 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = sub_20A0E0740();
  __swift_project_value_buffer(v5, (uint64_t)qword_2545D79F0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v2, v1, v3);
  v7 = sub_20A0E0728();
  v8 = sub_20A0E0980();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 136);
  if (v9)
  {
    v31 = *(_QWORD *)(v0 + 128);
    v32 = *(unsigned __int8 *)(v0 + 244);
    v12 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v34[0] = v33;
    *(_DWORD *)v12 = 136315650;
    *(_QWORD *)(v0 + 96) = sub_20A0A6D5C(0xD000000000000020, 0x800000020A0F2790, v34);
    sub_20A0E0A10();
    *(_WORD *)(v12 + 12) = 2080;
    v13 = sub_20A0E068C();
    *(_QWORD *)(v0 + 104) = sub_20A0A6D5C(v13, v14, v34);
    sub_20A0E0A10();
    swift_bridgeObjectRelease();
    v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v10, v31);
    *(_WORD *)(v12 + 22) = 1024;
    *(_DWORD *)(v0 + 240) = v32;
    sub_20A0E0A10();
    _os_log_impl(&dword_20A048000, v7, v8, "%s (%s, %{BOOL}d)", (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x20BD20380](v33, -1, -1);
    MEMORY[0x20BD20380](v12, -1, -1);
  }
  else
  {
    v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 128));
  }

  *(_QWORD *)(v0 + 176) = v15;
  v16 = *(unsigned __int8 *)(v0 + 244);
  v17 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC9SEService10SESnapshot_reservationState);
  *(_QWORD *)(v0 + 184) = v17;
  if (v16 == 1)
  {
    v18 = (uint64_t *)(v17 + OBJC_IVAR____TtC9SEService16ReservationState_reservations);
    swift_beginAccess();
    v19 = *v18;
    if (*(_QWORD *)(v19 + 16) && (v20 = sub_20A0B8AFC(*(_QWORD *)(v0 + 112)), (v21 & 1) != 0))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      swift_endAccess();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
    }
    else
    {
      swift_endAccess();
      sub_20A07DC44();
      swift_allocError();
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_BYTE *)(v30 + 16) = 4;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v6(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 128));
    if (qword_2545C8E50 != -1)
      swift_once();
    v24 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v0 + 192) = qword_2545D79E8;
    v6(v24, v27, v25);
    v28 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v29 = swift_allocObject();
    *(_QWORD *)(v0 + 200) = v29;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v29 + v28, v24, v25);
    return swift_task_switch();
  }
}

uint64_t sub_20A0C2028()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[24];
  v2 = v0[25];
  sub_20A09A6C4(&qword_2545CA2B8, (uint64_t (*)(uint64_t))type metadata accessor for SERClient, (uint64_t)&unk_20A0EA3C4);
  v3 = (_QWORD *)swift_task_alloc();
  v0[26] = v3;
  v3[2] = v1;
  v3[3] = &unk_2545CA6A0;
  v3[4] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[27] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6A8);
  *v4 = v0;
  v4[1] = sub_20A0C2114;
  return sub_20A0E0CF8();
}

uint64_t sub_20A0C2114()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
    *(_QWORD *)(v2 + 232) = *(_QWORD *)(v2 + 88);
  }
  return swift_task_switch();
}

uint64_t sub_20A0C2194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184) + OBJC_IVAR____TtC9SEService16ReservationState_reservations;
  swift_beginAccess();
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 232);
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 128);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0x8000000000000000;
    sub_20A0C16F0(v3, v5, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v2 = v17;
    swift_bridgeObjectRelease();
    v4(v5, v6);
  }
  else
  {
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v9 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 128);
    v11 = (void *)sub_20A0C0F58(v9);
    v8(v9, v10);

  }
  swift_endAccess();
  swift_beginAccess();
  v12 = *(_QWORD *)v2;
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) && (v13 = sub_20A0B8AFC(*(_QWORD *)(v0 + 112)), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
  }
  else
  {
    result = swift_endAccess();
    __break(1u);
  }
  return result;
}

uint64_t sub_20A0C2310()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[22];
  v2 = v0[20];
  v3 = v0[16];
  swift_task_dealloc();
  v1(v2, v3);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_20A0C2374()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20A0C23C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_20A0E06D4() - 8) + 80);
  v6 = v2 + ((v5 + 16) & ~v5);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_20A09B5D4;
  v7[15] = a2;
  v7[16] = v6;
  return swift_task_switch();
}

uint64_t sub_20A0C2444(uint64_t a1)
{
  uint64_t *v1;

  return sub_20A0BB8CC(a1, v1[2], v1[3], v1[4], &qword_2545CA680, (uint64_t)&unk_24C2BE790, (uint64_t)&unk_2545CA690);
}

uint64_t sub_20A0C2478(uint64_t a1)
{
  uint64_t *v1;

  return sub_20A0BB8CC(a1, v1[2], v1[3], v1[4], &qword_2545CA660, (uint64_t)&unk_24C2BE740, (uint64_t)&unk_2545CA670);
}

uint64_t sub_20A0C24AC()
{
  return objectdestroy_27Tm(&qword_2545CA660);
}

uint64_t sub_20A0C24B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2545CA660) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_20A09B5D4;
  *(_OWORD *)(v7 + 168) = v8;
  *(_QWORD *)(v7 + 152) = v5;
  *(_QWORD *)(v7 + 160) = v6;
  return swift_task_switch();
}

uint64_t sub_20A0C2558()
{
  return objectdestroy_27Tm(&qword_2545CA680);
}

uint64_t sub_20A0C2564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2545CA680) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_20A09B5D4;
  *(_OWORD *)(v7 + 160) = v8;
  *(_QWORD *)(v7 + 144) = v5;
  *(_QWORD *)(v7 + 152) = v6;
  return swift_task_switch();
}

uint64_t objectdestroy_15Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_20A0E06D4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_20A0C2668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_20A0E06D4() - 8) + 80);
  v7 = v2 + ((v6 + 16) & ~v6);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_20A09B5D4;
  v8[17] = a2;
  v8[18] = v7;
  v8[16] = a1;
  return swift_task_switch();
}

uint64_t sub_20A0C26F4(uint64_t a1)
{
  uint64_t *v1;

  return sub_20A0BB8CC(a1, v1[2], v1[3], v1[4], &qword_2545CA6B0, (uint64_t)&unk_24C2BE820, (uint64_t)&unk_2545CA6C0);
}

uint64_t sub_20A0C2728()
{
  return objectdestroy_27Tm(&qword_2545CA6B0);
}

uint64_t sub_20A0C2734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6B0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_20A09B5D4;
  *(_OWORD *)(v7 + 168) = v8;
  *(_QWORD *)(v7 + 152) = v5;
  *(_QWORD *)(v7 + 160) = v6;
  return swift_task_switch();
}

uint64_t sub_20A0C27D4()
{
  return objectdestroy_27Tm(&qword_2545CA6C8);
}

uint64_t sub_20A0C27E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6C8) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_20A09B5D4;
  *(_OWORD *)(v7 + 168) = v8;
  *(_QWORD *)(v7 + 152) = v5;
  *(_QWORD *)(v7 + 160) = v6;
  return swift_task_switch();
}

uint64_t sub_20A0C2880()
{
  return objectdestroy_27Tm(&qword_2545CA6E0);
}

uint64_t sub_20A0C288C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6E0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_20A09B5D4;
  *(_OWORD *)(v7 + 168) = v8;
  *(_QWORD *)(v7 + 152) = v5;
  *(_QWORD *)(v7 + 160) = v6;
  return swift_task_switch();
}

uint64_t sub_20A0C292C()
{
  return objectdestroy_27Tm(&qword_2545CA6F8);
}

uint64_t objectdestroy_27Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20A0C29D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2545CA6F8) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_20A09B5D4;
  *(_OWORD *)(v7 + 168) = v8;
  *(_QWORD *)(v7 + 152) = v5;
  *(_QWORD *)(v7 + 160) = v6;
  return swift_task_switch();
}

uint64_t sub_20A0C2AA4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v28 = MEMORY[0x24BEE4AF8];
  sub_20A0973A8(0, v1, 0);
  v2 = v28;
  result = sub_20A09E624(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v23 = v3 + 80;
  v24 = v1;
  v25 = v5;
  v26 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v12 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v6);
    swift_bridgeObjectRetain();
    v27 = v12;
    v13 = sub_20A0E0800();
    result = swift_bridgeObjectRelease();
    v14 = v3;
    v16 = *(_QWORD *)(v28 + 16);
    v15 = *(_QWORD *)(v28 + 24);
    if (v16 >= v15 >> 1)
      result = sub_20A0973A8(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v28 + 16) = v16 + 1;
    v17 = v28 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v13;
    *(_QWORD *)(v17 + 40) = v27;
    v9 = 1 << *(_BYTE *)(v14 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v26;
    v18 = *(_QWORD *)(v26 + 8 * v11);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v14;
    v5 = v25;
    if (*(_DWORD *)(v14 + 36) != v25)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v24;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v24;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(v23 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_20A0C2CD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  void (*v24)(_QWORD *, _QWORD);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v1 = a1;
  v26 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v2 = sub_20A0E0B90();
  else
    v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v32 = MEMORY[0x24BEE4AF8];
    sub_20A0973D4(0, v2 & ~(v2 >> 63), 0);
    result = sub_20A09E628(v1);
    v29 = result;
    v30 = v4;
    v31 = v5 & 1;
    if (v2 < 0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
    }
    else
    {
      v25 = v1;
      do
      {
        while (1)
        {
          v12 = v29;
          v13 = v31;
          v27 = v30;
          sub_20A09F00C(v28, v29, v30, v31, v1);
          v15 = v14;
          v16 = v28[0];
          v17 = sub_20A0E080C();
          v19 = v18;

          v20 = v32;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = sub_20A0973D4(0, *(_QWORD *)(v20 + 16) + 1, 1);
            v20 = v32;
          }
          v22 = *(_QWORD *)(v20 + 16);
          v21 = *(_QWORD *)(v20 + 24);
          if (v22 >= v21 >> 1)
          {
            result = sub_20A0973D4(v21 > 1, v22 + 1, 1);
            v20 = v32;
          }
          *(_QWORD *)(v20 + 16) = v22 + 1;
          v23 = (_QWORD *)(v20 + 24 * v22);
          v23[4] = v17;
          v23[5] = v19;
          v23[6] = v16;
          if (v26)
            break;
          v1 = v25;
          sub_20A09E774(v12, v27, v13, v25);
          v7 = v6;
          v9 = v8;
          v11 = v10;
          sub_20A09EBE4(v12, v27, v13);
          v29 = v7;
          v30 = v9;
          v31 = v11 & 1;
          if (!--v2)
            goto LABEL_17;
        }
        v1 = v25;
        if ((v13 & 1) == 0)
          goto LABEL_20;
        if (sub_20A0E0B6C())
          swift_isUniquelyReferenced_nonNull_native();
        __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7C8);
        v24 = (void (*)(_QWORD *, _QWORD))sub_20A0E07C4();
        sub_20A0E0BB4();
        v24(v28, 0);
        --v2;
      }
      while (v2);
LABEL_17:
      sub_20A09EBE4(v29, v30, v31);
      return v32;
    }
  }
  return result;
}

uint64_t SEState.friendlyDetails.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  char *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService7SEState_infoDictionary);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v7 << 6);
LABEL_5:
    v11 = *(char **)(*(_QWORD *)(v1 + 56) + 8 * v10);
    v12 = *(_QWORD *)&v11[OBJC_IVAR____TtC9SEService16SEPackageDetails_type + 8];
    if (v12 != 26)
    {
      v16 = *(_QWORD *)&v11[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
      v35 = v11;
      sub_20A0B09F0(v16, v12);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v36 = v16;
      v19 = sub_20A0B8934(v16, v12);
      v20 = v8[2];
      v21 = (v18 & 1) == 0;
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        goto LABEL_37;
      v23 = v18;
      if (v8[3] >= v22)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_20A0C53D8();
        v24 = v36;
        if ((v23 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        sub_20A0C6698(v22, isUniquelyReferenced_nonNull_native);
        v24 = v36;
        v25 = sub_20A0B8934(v36, v12);
        if ((v23 & 1) != (v26 & 1))
          goto LABEL_39;
        v19 = v25;
        if ((v23 & 1) != 0)
        {
LABEL_32:
          v32 = v8[7];
          v33 = 8 * v19;

          *(_QWORD *)(v32 + v33) = v35;
          v31 = v35;
          goto LABEL_33;
        }
      }
      v8[(v19 >> 6) + 8] |= 1 << v19;
      v27 = (uint64_t *)(v8[6] + 16 * v19);
      *v27 = v24;
      v27[1] = v12;
      *(_QWORD *)(v8[7] + 8 * v19) = v35;
      v28 = v8[2];
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
        goto LABEL_38;
      v31 = v35;
      v8[2] = v30;
      sub_20A074C44(v24, v12);
LABEL_33:
      swift_bridgeObjectRelease();
      sub_20A080234(v24, v12);

    }
  }
  v13 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v13 >= v6)
    goto LABEL_34;
  v14 = *(_QWORD *)(v2 + 8 * v13);
  ++v7;
  if (v14)
    goto LABEL_22;
  v7 = v13 + 1;
  if (v13 + 1 >= v6)
    goto LABEL_34;
  v14 = *(_QWORD *)(v2 + 8 * v7);
  if (v14)
    goto LABEL_22;
  v7 = v13 + 2;
  if (v13 + 2 >= v6)
    goto LABEL_34;
  v14 = *(_QWORD *)(v2 + 8 * v7);
  if (v14)
    goto LABEL_22;
  v7 = v13 + 3;
  if (v13 + 3 >= v6)
    goto LABEL_34;
  v14 = *(_QWORD *)(v2 + 8 * v7);
  if (v14)
  {
LABEL_22:
    v5 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_5;
  }
  v15 = v13 + 4;
  if (v15 >= v6)
  {
LABEL_34:
    swift_release();
    return (uint64_t)v8;
  }
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v7 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v6)
      goto LABEL_34;
    v14 = *(_QWORD *)(v2 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = sub_20A0E0D28();
  __break(1u);
  return result;
}

uint64_t SEState.description.getter()
{
  uint64_t v0;
  id v1;
  _QWORD v3[2];

  sub_20A0E0AC4();
  swift_bridgeObjectRelease();
  strcpy((char *)v3, "FreeMemory: ");
  BYTE5(v3[1]) = 0;
  HIWORD(v3[1]) = -5120;
  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC9SEService7SEState_freeMemory), sel_description);
  sub_20A0E080C();

  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  type metadata accessor for SEPackageDetails();
  swift_bridgeObjectRetain();
  sub_20A0E07B8();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  sub_20A0E0854();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  return v3[0];
}

uint64_t SEState.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  swift_getObjectType();
  sub_20A0E0608();
  swift_allocObject();
  sub_20A0E05FC();
  sub_20A09BB6C(&qword_2545CA190, v0, (uint64_t (*)(uint64_t))type metadata accessor for SEState, (uint64_t)&protocol conformance descriptor for SEState);
  v1 = sub_20A0E05F0();
  v3 = v2;
  v4 = sub_20A0E0650();
  sub_20A07F898(v1, v3);
  swift_release();
  return v4;
}

uint64_t SEState.instances.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(_QWORD *@<X8>);
  void (*v6)(_QWORD *@<X8>);
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC9SEService7SEState_infoDictionary);
  v58 = v1 + 64;
  v2 = 1 << *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(v1 + 64);
  v59 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4B00];
  v57 = v1;
  while (1)
  {
    while (1)
    {
      if (v4)
      {
        v9 = __clz(__rbit64(v4));
        v4 &= v4 - 1;
        v10 = v9 | (v7 << 6);
      }
      else
      {
        v11 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_63;
        if (v11 >= v59)
        {
LABEL_59:
          swift_release();
          sub_20A09A628((uint64_t)v5);
          sub_20A09A628((uint64_t)v6);
          return (uint64_t)v8;
        }
        v12 = *(_QWORD *)(v58 + 8 * v11);
        ++v7;
        if (!v12)
        {
          v7 = v11 + 1;
          if (v11 + 1 >= v59)
            goto LABEL_59;
          v12 = *(_QWORD *)(v58 + 8 * v7);
          if (!v12)
          {
            v7 = v11 + 2;
            if (v11 + 2 >= v59)
              goto LABEL_59;
            v12 = *(_QWORD *)(v58 + 8 * v7);
            if (!v12)
            {
              v7 = v11 + 3;
              if (v11 + 3 >= v59)
                goto LABEL_59;
              v12 = *(_QWORD *)(v58 + 8 * v7);
              if (!v12)
              {
                v13 = v11 + 4;
                if (v13 >= v59)
                  goto LABEL_59;
                v12 = *(_QWORD *)(v58 + 8 * v13);
                if (!v12)
                {
                  while (1)
                  {
                    v7 = v13 + 1;
                    if (__OFADD__(v13, 1))
                      goto LABEL_64;
                    if (v7 >= v59)
                      goto LABEL_59;
                    v12 = *(_QWORD *)(v58 + 8 * v7);
                    ++v13;
                    if (v12)
                      goto LABEL_21;
                  }
                }
                v7 = v13;
              }
            }
          }
        }
LABEL_21:
        v4 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v7 << 6);
      }
      v14 = *(char **)(*(_QWORD *)(v1 + 56) + 8 * v10);
      v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC9SEService16SEPackageDetails_type + 8];
      v16 = &v14[OBJC_IVAR____TtC9SEService16SEPackageDetails_instances];
      if (v15 == 26)
        break;
      v35 = *(_QWORD *)&v14[OBJC_IVAR____TtC9SEService16SEPackageDetails_type];
      swift_beginAccess();
      if (*(_QWORD *)v16 >> 62)
      {
        v54 = v14;
        sub_20A0B09F0(v35, v15);
        swift_bridgeObjectRetain();
        v56 = sub_20A0E0BD8();
        swift_bridgeObjectRelease();
      }
      else
      {
        v56 = *(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFF8) + 0x10);
        v36 = v14;
        sub_20A0B09F0(v35, v15);
      }
      sub_20A09A628((uint64_t)v5);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v39 = sub_20A0B8934(v35, v15);
      v40 = v8[2];
      v41 = (v38 & 1) == 0;
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
        goto LABEL_65;
      v43 = v38;
      if (v8[3] >= v42)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_20A0C5588();
      }
      else
      {
        sub_20A0C6B90(v42, isUniquelyReferenced_nonNull_native);
        v44 = sub_20A0B8934(v35, v15);
        if ((v43 & 1) != (v45 & 1))
          goto LABEL_68;
        v39 = v44;
      }
      v1 = v57;
      swift_bridgeObjectRelease();
      if ((v43 & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v8[(v39 >> 6) + 8] |= 1 << v39;
        v46 = (uint64_t *)(v8[6] + 16 * v39);
        *v46 = v35;
        v46[1] = v15;
        *(_QWORD *)(v8[7] + 8 * v39) = 0;
        v47 = v8[2];
        v48 = v47 + 1;
        v49 = __OFADD__(v47, 1);
        swift_bridgeObjectRetain();
        if (v49)
          goto LABEL_67;
        v8[2] = v48;
        sub_20A074C44(v35, v15);
        v1 = v57;
      }
      v50 = v8[7];
      swift_bridgeObjectRelease();
      v51 = *(_QWORD *)(v50 + 8 * v39);
      v33 = __OFADD__(v51, v56);
      v52 = v51 + v56;
      if (v33)
        goto LABEL_66;
      *(_QWORD *)(v50 + 8 * v39) = v52;

      sub_20A080234(v35, v15);
      v5 = sub_20A0A3FB8;
    }
    swift_beginAccess();
    if (*(_QWORD *)v16 >> 62)
    {
      v53 = v14;
      swift_bridgeObjectRetain();
      v17 = sub_20A0E0BD8();
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = *(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      v18 = v14;
    }
    sub_20A09A628((uint64_t)v6);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v21 = sub_20A0B8934(0, 25);
    v22 = v8[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    if (v8[3] >= v24)
    {
      if ((v19 & 1) == 0)
        sub_20A0C5588();
    }
    else
    {
      sub_20A0C6B90(v24, v19);
      v26 = sub_20A0B8934(0, 25);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_68;
      v21 = v26;
    }
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v8[(v21 >> 6) + 8] |= 1 << v21;
      *(_OWORD *)(v8[6] + 16 * v21) = xmmword_20A0EA740;
      *(_QWORD *)(v8[7] + 8 * v21) = 0;
      v28 = v8[2];
      v29 = v28 + 1;
      v30 = __OFADD__(v28, 1);
      swift_bridgeObjectRetain();
      if (v30)
        goto LABEL_62;
      v8[2] = v29;
    }
    v31 = v8[7];
    swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v31 + 8 * v21);
    v33 = __OFADD__(v32, v17);
    v34 = v32 + v17;
    if (v33)
      goto LABEL_61;
    *(_QWORD *)(v31 + 8 * v21) = v34;

    v6 = sub_20A0A3FB8;
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  result = sub_20A0E0D28();
  __break(1u);
  return result;
}

id SEState.__allocating_init(seType:freeMemory:infoDictionary:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  _BYTE *v7;
  objc_super v9;

  v7 = objc_allocWithZone(v3);
  v7[OBJC_IVAR____TtC9SEService7SEState_seType] = *a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9SEService7SEState_freeMemory] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9SEService7SEState_infoDictionary] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, sel_init);
}

id SEState.init(seType:freeMemory:infoDictionary:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  objc_class *ObjectType;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v3[OBJC_IVAR____TtC9SEService7SEState_seType] = *a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService7SEState_freeMemory] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC9SEService7SEState_infoDictionary] = a3;
  v9.receiver = v3;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t SEState.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  swift_getObjectType();
  sub_20A0E0AC4();
  v0 = SEState.description.getter();
  swift_bridgeObjectRelease();
  v6 = v0;
  sub_20A0E0854();
  sub_20A0E0608();
  swift_allocObject();
  sub_20A0E05FC();
  sub_20A09BB6C(&qword_2545CA190, v1, (uint64_t (*)(uint64_t))type metadata accessor for SEState, (uint64_t)&protocol conformance descriptor for SEState);
  v2 = sub_20A0E05F0();
  v4 = v3;
  sub_20A0E0650();
  sub_20A07F898(v2, v4);
  swift_release();
  sub_20A0E0854();
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Void __swiftcall SEState.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  switch(*(_BYTE *)(v1 + OBJC_IVAR____TtC9SEService7SEState_seType))
  {
    case 0:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x20A0C4120);
    default:
      v3 = (void *)sub_20A0E0800();
      swift_bridgeObjectRelease();
      v4 = (void *)sub_20A0E0800();
      -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

      v5 = *(id *)(v1 + OBJC_IVAR____TtC9SEService7SEState_freeMemory);
      v6 = (void *)sub_20A0E0800();
      -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

      v7 = swift_bridgeObjectRetain();
      v8 = sub_20A0C2AA4(v7);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v8 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA730);
        v9 = sub_20A0E0BFC();
      }
      else
      {
        v9 = MEMORY[0x24BEE4B00];
      }
      v13 = v9;
      v10 = (_QWORD *)swift_bridgeObjectRetain();
      sub_20A0C4B0C(v10, 1, &v13);
      swift_bridgeObjectRelease();
      sub_20A094638();
      type metadata accessor for SEPackageDetails();
      sub_20A09BB6C((unint64_t *)&qword_2545C9FE0, 255, (uint64_t (*)(uint64_t))sub_20A094638, MEMORY[0x24BEE5BD8]);
      v11 = (void *)sub_20A0E07A0();
      swift_release();
      v12 = (void *)sub_20A0E0800();
      -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

      return;
  }
}

uint64_t SEState.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SEState.init(coder:)(a1);
}

uint64_t SEState.init(coder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t result;
  objc_super v19;
  uint64_t v20;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_20A094638();
  v4 = v1;
  v5 = sub_20A0E09D4();
  if (!v5)
    goto LABEL_10;
  v6 = (void *)v5;
  type metadata accessor for MemoryUsage();
  v7 = sub_20A0E09D4();
  if (!v7)
  {
LABEL_9:

LABEL_10:
    swift_deallocPartialClassInstance();
    return 0;
  }
  v8 = (void *)v7;
  type metadata accessor for SEPackageDetails();
  v9 = sub_20A0E09E0();
  if (!v9)
  {

    v6 = v8;
    goto LABEL_9;
  }
  v10 = v9;
  v11._countAndFlagsBits = sub_20A0E080C();
  SEType.init(plistString:)(v11);
  if (!v12)
  {
    if (v20 != 6)
    {
      v4[OBJC_IVAR____TtC9SEService7SEState_seType] = v20;
      *(_QWORD *)&v4[OBJC_IVAR____TtC9SEService7SEState_freeMemory] = v8;
      v13 = v8;
      v14 = sub_20A0C2CD4(v10);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v14 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA738);
        v15 = sub_20A0E0BFC();
      }
      else
      {
        v15 = MEMORY[0x24BEE4B00];
      }
      v20 = v15;
      v17 = (_QWORD *)swift_bridgeObjectRetain();
      sub_20A0C4E98(v17, 1, &v20);

      swift_bridgeObjectRelease();
      *(_QWORD *)&v4[OBJC_IVAR____TtC9SEService7SEState_infoDictionary] = v20;

      v19.receiver = v4;
      v19.super_class = ObjectType;
      v16 = objc_msgSendSuper2(&v19, sel_init);

      return (uint64_t)v16;
    }
    __break(1u);
  }
  swift_unexpectedError();
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static SEState.supportsSecureCoding.getter()
{
  return 1;
}

id SEState.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SEState.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_20A0C44AC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F6D654D65657266;
  if (*v0 != 1)
    v1 = 0x746369446F666E69;
  if (*v0)
    return v1;
  else
    return 0x657079546573;
}

uint64_t sub_20A0C4514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20A0C8B98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20A0C4538()
{
  sub_20A0C87E4();
  return sub_20A0E0DB8();
}

uint64_t sub_20A0C4560()
{
  sub_20A0C87E4();
  return sub_20A0E0DC4();
}

id SEState.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t SEState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA740);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0C87E4();
  sub_20A0E0DAC();
  LOBYTE(v10) = *(_BYTE *)(v3 + OBJC_IVAR____TtC9SEService7SEState_seType);
  v11 = 0;
  sub_20A0C8828();
  sub_20A0E0CB0();
  if (!v2)
  {
    v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService7SEState_freeMemory);
    v11 = 1;
    type metadata accessor for MemoryUsage();
    sub_20A09BB6C(&qword_2545CA4F0, 255, (uint64_t (*)(uint64_t))type metadata accessor for MemoryUsage, (uint64_t)&protocol conformance descriptor for MemoryUsage);
    sub_20A0E0CB0();
    v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC9SEService7SEState_infoDictionary);
    v11 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA760);
    sub_20A0C886C();
    sub_20A0E0CB0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id SEState.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SEState.init(from:)(a1);
}

id SEState.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *ObjectType;
  objc_super v15;
  uint64_t v16;
  char v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA778);
  v4 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_20A0C87E4();
  v7 = v1;
  sub_20A0E0DA0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v11 = v7;

    swift_deallocPartialClassInstance();
  }
  else
  {
    v8 = v4;
    v17 = 0;
    sub_20A0C88F4();
    v9 = v13;
    sub_20A0E0C5C();
    v7[OBJC_IVAR____TtC9SEService7SEState_seType] = v16;
    type metadata accessor for MemoryUsage();
    v17 = 1;
    sub_20A09BB6C(&qword_2545CA508, 255, (uint64_t (*)(uint64_t))type metadata accessor for MemoryUsage, (uint64_t)&protocol conformance descriptor for MemoryUsage);
    sub_20A0E0C5C();
    *(_QWORD *)&v7[OBJC_IVAR____TtC9SEService7SEState_freeMemory] = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA760);
    v17 = 2;
    sub_20A0C8938();
    sub_20A0E0C5C();
    *(_QWORD *)&v7[OBJC_IVAR____TtC9SEService7SEState_infoDictionary] = v16;

    v15.receiver = v7;
    v15.super_class = ObjectType;
    v11 = objc_msgSendSuper2(&v15, sel_init);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v11;
}

id sub_20A0C4AA0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  id result;

  v6 = objc_allocWithZone(v2);
  result = SEState.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_20A0C4AEC(_QWORD *a1)
{
  return SEState.encode(to:)(a1);
}

void sub_20A0C4B0C(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = sub_20A0B8AB0((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_20A0C6030(&qword_2545CA730);
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (!v27)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v30 = (_QWORD *)*a3;
      v10 = *(v28 - 1);
      v11 = v29;
      v31 = sub_20A0B8AB0((uint64_t)v10);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_20A0C8518(v35, 1, &qword_2545CA730);
        v31 = sub_20A0B8AB0((uint64_t)v10);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = 8 * v31;
      *(_QWORD *)(v38[6] + v39) = v10;
      *(_QWORD *)(v38[7] + v39) = v11;
      v40 = v38[2];
      v25 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v25)
        goto LABEL_24;
      v38[2] = v41;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_20A0C8518(v16, a2 & 1, &qword_2545CA730);
  v18 = sub_20A0B8AB0((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_20A094638();
  sub_20A0E0D28();
  __break(1u);
LABEL_26:
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A094638();
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

void sub_20A0C4E98(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v43 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v10 = v8;
  v12 = sub_20A0B8998(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_20A0C5CD4();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v12) = v10;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v43 - 1;
    if (v43 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (void **)(a1 + 9);
    while (1)
    {
      v29 = (uint64_t)*(v27 - 2);
      v28 = (uint64_t)*(v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v10 = v30;
      v32 = sub_20A0B8998(v29, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_20A0C7D38(v36, 1);
        v32 = sub_20A0B8998(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v10;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_20A0C7D38(v15, a2 & 1);
  v17 = sub_20A0B8998(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA0C0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_20A0E0D28();
  __break(1u);
LABEL_26:
  sub_20A0E0AC4();
  sub_20A0E0854();
  sub_20A0E0B48();
  sub_20A0E0854();
  sub_20A0E0BCC();
  __break(1u);
}

void *sub_20A0C5224()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7E0);
  v2 = *v0;
  v3 = sub_20A0E0BE4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_20A074C44(v19, *((unint64_t *)&v19 + 1));
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_20A0C53D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7D8);
  v2 = *v0;
  v3 = sub_20A0E0BE4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_20A074C44(v19, *((unint64_t *)&v19 + 1));
    result = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20A0C5588()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
  v2 = *v0;
  v3 = sub_20A0E0BE4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)sub_20A074C44(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20A0C5734()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA2D0);
  v2 = *v0;
  v3 = sub_20A0E0BE4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_20A0C58E0()
{
  return sub_20A0C6030(&qword_2545CA7D0);
}

id sub_20A0C58EC()
{
  return sub_20A0C6030((uint64_t *)&unk_2545CA1E0);
}

id sub_20A0C58F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_20A0E06D4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA020);
  v24 = v0;
  v5 = *v0;
  v6 = sub_20A0E0BE4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20A0C5B20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA7F0);
  v2 = *v0;
  v3 = sub_20A0E0BE4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_20A0C5CD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA738);
  v2 = *v0;
  v3 = sub_20A0E0BE4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20A0C5E84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA1C8);
  v2 = *v0;
  v3 = sub_20A0E0BE4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)sub_20A074C44(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_20A0C6030(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_20A0E0BE4();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_20A0C61CC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int64_t v31;
  _QWORD *v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7E0);
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_22;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_42;
    if (v16 >= v31)
      break;
    v17 = v32[v16];
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v31)
        break;
      v17 = v32[v12];
      if (!v17)
      {
        v18 = v16 + 2;
        if (v18 >= v31)
          break;
        v17 = v32[v18];
        if (!v17)
        {
          while (1)
          {
            v12 = v18 + 1;
            if (__OFADD__(v18, 1))
              goto LABEL_43;
            if (v12 >= v31)
              goto LABEL_36;
            v17 = v32[v12];
            ++v18;
            if (v17)
              goto LABEL_21;
          }
        }
        v12 = v18;
      }
    }
LABEL_21:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_22:
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
    v33 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15 + 8);
    if ((a2 & 1) == 0)
    {
      sub_20A074C44(v33, v20);
      swift_bridgeObjectRetain();
    }
    sub_20A0E0D7C();
    switch(v20)
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 3uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x19uLL:
        sub_20A0E0D88();
        break;
      default:
        sub_20A0E0D88();
        sub_20A0E0848();
        break;
    }
    v21 = sub_20A0E0D94();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        JUMPOUT(0x20A0C6630);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v11 + 8 * v24);
    }
    while (v28 == -1);
    v13 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13) = v33;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v19;
    ++*(_QWORD *)(v7 + 16);
  }
LABEL_36:
  swift_release();
  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v29 = 1 << *(_BYTE *)(v5 + 32);
    if (v29 >= 64)
      bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v32 = -1 << v29;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20A0C6698(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  __int128 v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7D8);
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = v2;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
LABEL_8:
  if (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_22;
  }
  v16 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_44;
  if (v16 >= v34)
  {
    swift_release();
    v3 = v33;
    v17 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) != 0)
    {
LABEL_39:
      v31 = 1 << *(_BYTE *)(v5 + 32);
      if (v31 >= 64)
        bzero(v17, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v17 = -1 << v31;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v35 + 8 * v16);
    ++v12;
    if (v18)
      goto LABEL_21;
    v12 = v16 + 1;
    if (v16 + 1 >= v34)
      goto LABEL_36;
    v18 = *(_QWORD *)(v35 + 8 * v12);
    if (v18)
    {
LABEL_21:
      v10 = (v18 - 1) & v18;
      v15 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_22:
      v20 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v15);
      v36 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15 + 8);
      if ((a2 & 1) == 0)
      {
        sub_20A074C44(v36, v21);
        v22 = v20;
      }
      sub_20A0E0D7C();
      switch(v21)
      {
        case 0uLL:
        case 1uLL:
        case 2uLL:
        case 3uLL:
        case 4uLL:
        case 5uLL:
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 9uLL:
        case 0xAuLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0xEuLL:
        case 0xFuLL:
        case 0x10uLL:
        case 0x11uLL:
        case 0x12uLL:
        case 0x13uLL:
        case 0x14uLL:
        case 0x15uLL:
        case 0x16uLL:
        case 0x17uLL:
        case 0x18uLL:
        case 0x19uLL:
          sub_20A0E0D88();
          break;
        default:
          sub_20A0E0D88();
          sub_20A0E0848();
          break;
      }
      v23 = sub_20A0E0D94();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v28 || (v27 & 1) == 0)
      {
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
        if (v30 != -1)
        {
          v13 = __clz(__rbit64(~v30)) + (v26 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13) = v36;
          *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v20;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      JUMPOUT(0x20A0C6B08);
    }
    v19 = v16 + 2;
    if (v19 < v34)
    {
      v18 = *(_QWORD *)(v35 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          v12 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_45;
          if (v12 >= v34)
            goto LABEL_36;
          v18 = *(_QWORD *)(v35 + 8 * v12);
          ++v19;
          if (v18)
            goto LABEL_21;
        }
      }
      v12 = v19;
      goto LABEL_21;
    }
LABEL_36:
    swift_release();
    v3 = v33;
    if ((a2 & 1) != 0)
      goto LABEL_39;
  }
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t type metadata accessor for SEState()
{
  return objc_opt_self();
}

uint64_t sub_20A0C6B90(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA010);
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v32 = v2;
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
LABEL_8:
  if (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_22;
  }
  v16 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_44;
  if (v16 >= v33)
  {
    swift_release();
    v3 = v32;
    v17 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) != 0)
    {
LABEL_39:
      v30 = 1 << *(_BYTE *)(v5 + 32);
      if (v30 >= 64)
        bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v17 = -1 << v30;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v34 + 8 * v16);
    ++v12;
    if (v18)
      goto LABEL_21;
    v12 = v16 + 1;
    if (v16 + 1 >= v33)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v12);
    if (v18)
    {
LABEL_21:
      v10 = (v18 - 1) & v18;
      v15 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_22:
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      v35 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15 + 8);
      if ((a2 & 1) == 0)
        sub_20A074C44(v35, v21);
      sub_20A0E0D7C();
      switch(v21)
      {
        case 0uLL:
        case 1uLL:
        case 2uLL:
        case 3uLL:
        case 4uLL:
        case 5uLL:
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 9uLL:
        case 0xAuLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0xEuLL:
        case 0xFuLL:
        case 0x10uLL:
        case 0x11uLL:
        case 0x12uLL:
        case 0x13uLL:
        case 0x14uLL:
        case 0x15uLL:
        case 0x16uLL:
        case 0x17uLL:
        case 0x18uLL:
        case 0x19uLL:
          sub_20A0E0D88();
          break;
        default:
          sub_20A0E0D88();
          sub_20A0E0848();
          break;
      }
      v22 = sub_20A0E0D94();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v27 || (v26 & 1) == 0)
      {
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
        if (v29 != -1)
        {
          v13 = __clz(__rbit64(~v29)) + (v25 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13) = v35;
          *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v20;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      JUMPOUT(0x20A0C6FFCLL);
    }
    v19 = v16 + 2;
    if (v19 < v33)
    {
      v18 = *(_QWORD *)(v34 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          v12 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_45;
          if (v12 >= v33)
            goto LABEL_36;
          v18 = *(_QWORD *)(v34 + 8 * v12);
          ++v19;
          if (v18)
            goto LABEL_21;
        }
      }
      v12 = v19;
      goto LABEL_21;
    }
LABEL_36:
    swift_release();
    v3 = v32;
    if ((a2 & 1) != 0)
      goto LABEL_39;
  }
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20A0C7064(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA2D0);
  v37 = a2;
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_20A0E0D7C();
    sub_20A0E0848();
    result = sub_20A0E0D94();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20A0C736C(uint64_t a1, char a2)
{
  return sub_20A0C8518(a1, a2, &qword_2545CA7D0);
}

uint64_t sub_20A0C7378(uint64_t a1, char a2)
{
  return sub_20A0C8518(a1, a2, (uint64_t *)&unk_2545CA1E0);
}

uint64_t sub_20A0C7384(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_20A0E06D4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA020);
  v42 = a2;
  v10 = sub_20A0E0BF0();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    sub_20A09BB6C((unint64_t *)&unk_2545CA1B0, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_20A0E07D0();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_20A0C771C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA7E8);
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_20A07F854(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
      swift_bridgeObjectRetain();
    }
    sub_20A0E0D7C();
    sub_20A0E0674();
    result = sub_20A0E0D94();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20A0C7A24(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2545CA7F0);
  v36 = a2;
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_20A0E0D7C();
    sub_20A0E0848();
    result = sub_20A0E0D94();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20A0C7D38(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA738);
  v38 = a2;
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_20A0E0D7C();
    sub_20A0E0848();
    result = sub_20A0E0D94();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20A0C8044(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA1C8);
  v6 = sub_20A0E0BF0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v32 = v2;
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  swift_retain();
  v12 = 0;
LABEL_8:
  if (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v12 << 6);
    goto LABEL_22;
  }
  v16 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_44;
  if (v16 >= v33)
  {
    swift_release();
    v3 = v32;
    v17 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) != 0)
    {
LABEL_39:
      v30 = 1 << *(_BYTE *)(v5 + 32);
      if (v30 >= 64)
        bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      else
        *v17 = -1 << v30;
      *(_QWORD *)(v5 + 16) = 0;
    }
  }
  else
  {
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v34 + 8 * v16);
    ++v12;
    if (v18)
      goto LABEL_21;
    v12 = v16 + 1;
    if (v16 + 1 >= v33)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v12);
    if (v18)
    {
LABEL_21:
      v10 = (v18 - 1) & v18;
      v15 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_22:
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      v35 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15);
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v15 + 8);
      if ((a2 & 1) == 0)
        sub_20A074C44(v35, v21);
      sub_20A0E0D7C();
      switch(v21)
      {
        case 0uLL:
        case 1uLL:
        case 2uLL:
        case 3uLL:
        case 4uLL:
        case 5uLL:
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 9uLL:
        case 0xAuLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0xEuLL:
        case 0xFuLL:
        case 0x10uLL:
        case 0x11uLL:
        case 0x12uLL:
        case 0x13uLL:
        case 0x14uLL:
        case 0x15uLL:
        case 0x16uLL:
        case 0x17uLL:
        case 0x18uLL:
        case 0x19uLL:
          sub_20A0E0D88();
          break;
        default:
          sub_20A0E0D88();
          sub_20A0E0848();
          break;
      }
      v22 = sub_20A0E0D94();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = v22 & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v27 || (v26 & 1) == 0)
      {
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v25);
        if (v29 != -1)
        {
          v13 = __clz(__rbit64(~v29)) + (v25 << 6);
LABEL_7:
          *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v13) = v35;
          *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v20;
          ++*(_QWORD *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      JUMPOUT(0x20A0C84B0);
    }
    v19 = v16 + 2;
    if (v19 < v33)
    {
      v18 = *(_QWORD *)(v34 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          v12 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_45;
          if (v12 >= v33)
            goto LABEL_36;
          v18 = *(_QWORD *)(v34 + 8 * v12);
          ++v19;
          if (v18)
            goto LABEL_21;
        }
      }
      v12 = v19;
      goto LABEL_21;
    }
LABEL_36:
    swift_release();
    v3 = v32;
    if ((a2 & 1) != 0)
      goto LABEL_39;
  }
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20A0C8518(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = sub_20A0E0BF0();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v3;
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_33;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          v4 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v15 >= v12)
              goto LABEL_33;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v15 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v6 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = sub_20A0E09F8();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

unint64_t sub_20A0C87E4()
{
  unint64_t result;

  result = qword_2545CA748;
  if (!qword_2545CA748)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB58C, &type metadata for SEState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA748);
  }
  return result;
}

unint64_t sub_20A0C8828()
{
  unint64_t result;

  result = qword_2545CA750;
  if (!qword_2545CA750)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SEType, &type metadata for SEType);
    atomic_store(result, (unint64_t *)&qword_2545CA750);
  }
  return result;
}

unint64_t sub_20A0C886C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_2545CA768;
  if (!qword_2545CA768)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA760);
    v2 = sub_20A09BB6C(&qword_2545CA770, 255, (uint64_t (*)(uint64_t))type metadata accessor for SEPackageDetails, (uint64_t)&protocol conformance descriptor for SEPackageDetails);
    v3[0] = MEMORY[0x24BEE0D08];
    v3[1] = v2;
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE04C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_2545CA768);
  }
  return result;
}

unint64_t sub_20A0C88F4()
{
  unint64_t result;

  result = qword_2545CA780;
  if (!qword_2545CA780)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SEType, &type metadata for SEType);
    atomic_store(result, (unint64_t *)&qword_2545CA780);
  }
  return result;
}

unint64_t sub_20A0C8938()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_2545CA790;
  if (!qword_2545CA790)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA760);
    v2 = sub_20A09BB6C((unint64_t *)&unk_2545CA798, 255, (uint64_t (*)(uint64_t))type metadata accessor for SEPackageDetails, (uint64_t)&protocol conformance descriptor for SEPackageDetails);
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = v2;
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE04E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_2545CA790);
  }
  return result;
}

uint64_t method lookup function for SEState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SEState.__allocating_init(seType:freeMemory:infoDictionary:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SEState.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SEState.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for SEState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20A0C8A40 + 4 * byte_20A0EB44D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20A0C8A74 + 4 * byte_20A0EB448[v4]))();
}

uint64_t sub_20A0C8A74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0C8A7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0C8A84);
  return result;
}

uint64_t sub_20A0C8A90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0C8A98);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20A0C8A9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0C8AA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEState.CodingKeys()
{
  return &type metadata for SEState.CodingKeys;
}

unint64_t sub_20A0C8AC4()
{
  unint64_t result;

  result = qword_2545CA7A8;
  if (!qword_2545CA7A8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB564, &type metadata for SEState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA7A8);
  }
  return result;
}

unint64_t sub_20A0C8B0C()
{
  unint64_t result;

  result = qword_2545CA7B0;
  if (!qword_2545CA7B0)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB4D4, &type metadata for SEState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA7B0);
  }
  return result;
}

unint64_t sub_20A0C8B54()
{
  unint64_t result;

  result = qword_2545CA7B8;
  if (!qword_2545CA7B8)
  {
    result = MEMORY[0x20BD202E4](&unk_20A0EB4FC, &type metadata for SEState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2545CA7B8);
  }
  return result;
}

uint64_t sub_20A0C8B98(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x657079546573 && a2 == 0xE600000000000000;
  if (v2 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6D654D65657266 && a2 == 0xEA00000000007972 || (sub_20A0E0CEC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746369446F666E69 && a2 == 0xEE007972616E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

const char *SESFeature.RuntimeFlag.domain.getter()
{
  return "SecureElementService";
}

const char *SESFeature.RuntimeFlag.feature.getter()
{
  _BYTE *v0;
  const char *v1;

  v1 = "secDynamicSE";
  if (*v0 != 1)
    v1 = "secGDPR";
  if (*v0)
    return v1;
  else
    return "secureElementCredential";
}

BOOL static SESFeature.RuntimeFlag.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SESFeature.RuntimeFlag.hash(into:)()
{
  return sub_20A0E0D88();
}

uint64_t SESFeature.RuntimeFlag.hashValue.getter()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

const char *sub_20A0C8DF0()
{
  return "SecureElementService";
}

const char *sub_20A0C8E04()
{
  _BYTE *v0;
  const char *v1;

  v1 = "secDynamicSE";
  if (*v0 != 1)
    v1 = "secGDPR";
  if (*v0)
    return v1;
  else
    return "secureElementCredential";
}

uint64_t static SESFeature.isEnabled(_:)(char *a1)
{
  char v1;
  char v2;
  _BYTE v4[24];
  ValueMetadata *v5;
  unint64_t v6;

  v1 = *a1;
  v5 = &type metadata for SESFeature.RuntimeFlag;
  v6 = sub_20A0C8EA0();
  v4[0] = v1;
  v2 = sub_20A0E06E0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2 & 1;
}

unint64_t sub_20A0C8EA0()
{
  unint64_t result;

  result = qword_2545CA800;
  if (!qword_2545CA800)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SESFeature.RuntimeFlag, &type metadata for SESFeature.RuntimeFlag);
    atomic_store(result, (unint64_t *)&qword_2545CA800);
  }
  return result;
}

unint64_t sub_20A0C8EE8()
{
  unint64_t result;

  result = qword_2545CA808;
  if (!qword_2545CA808)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SESFeature.RuntimeFlag, &type metadata for SESFeature.RuntimeFlag);
    atomic_store(result, (unint64_t *)&qword_2545CA808);
  }
  return result;
}

ValueMetadata *type metadata accessor for SESFeature()
{
  return &type metadata for SESFeature;
}

uint64_t storeEnumTagSinglePayload for SESFeature.RuntimeFlag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20A0C8F88 + 4 * byte_20A0EB5E1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20A0C8FBC + 4 * byte_20A0EB5DC[v4]))();
}

uint64_t sub_20A0C8FBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0C8FC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0C8FCCLL);
  return result;
}

uint64_t sub_20A0C8FD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0C8FE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20A0C8FE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0C8FEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SESFeature.RuntimeFlag()
{
  return &type metadata for SESFeature.RuntimeFlag;
}

NSXPCInterface __swiftcall SERInterface()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSXPCInterface result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_2545E0DB0);
  v0 = (void *)sub_20A0E0800();
  SESPrivateLogSERProtocolDetails(v0, &unk_2545E0DB0, 0);

  sub_20A0801C0(0, &qword_2545CA810);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2545C9DE8);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_20A0EB6B0;
  v2 = type metadata accessor for ReservationState();
  *(_QWORD *)(v1 + 56) = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA818);
  *(_QWORD *)(v1 + 32) = v2;
  v8 = type metadata accessor for Reservation();
  *(_QWORD *)(v1 + 88) = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA820);
  *(_QWORD *)(v1 + 64) = v8;
  v7 = sub_20A0801C0(0, &qword_2545C9FF0);
  *(_QWORD *)(v1 + 120) = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA828);
  *(_QWORD *)(v1 + 96) = v7;
  v9 = sub_20A0801C0(0, (unint64_t *)&unk_2545CA1F0);
  *(_QWORD *)(v1 + 152) = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA830);
  *(_QWORD *)(v1 + 128) = v9;
  v3 = sub_20A0801C0(0, (unint64_t *)&qword_2545C9460);
  *(_QWORD *)(v1 + 184) = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA838);
  *(_QWORD *)(v1 + 160) = v3;
  v4 = sub_20A0801C0(0, &qword_2545C9468);
  *(_QWORD *)(v1 + 216) = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA840);
  *(_QWORD *)(v1 + 192) = v4;
  v5 = sub_20A0801C0(0, &qword_2545CA848);
  *(_QWORD *)(v1 + 248) = __swift_instantiateConcreteTypeFromMangledName(&qword_2545CA850);
  *(_QWORD *)(v1 + 224) = v5;
  MEMORY[0x20BD1F534](v1);
  result.super.isa = (Class)sub_20A0E0944();
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

BOOL SEType.isEOS.getter()
{
  unsigned __int8 *v0;

  return *v0 > 2u;
}

SEService::SEType_optional __swiftcall SEType.init(hwType:)(Swift::Int hwType)
{
  char *v1;
  char v2;

  if ((unint64_t)(hwType - 3) >= 7)
    v2 = 5;
  else
    v2 = 0x3020202010500uLL >> (8 * (hwType - 3));
  *v1 = v2;
  return (SEService::SEType_optional)hwType;
}

uint64_t SEType.plistString.getter()
{
  char *v0;
  unint64_t v1;

  v1 = *v0;
  if (v1 > 3)
    return 0x313242534F45;
  else
    return qword_20A0EB848[v1];
}

SEService::SEType_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SEType.init(plistString:)(Swift::String plistString)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  char *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  SEService::SEType_optional result;

  object = plistString._object;
  countAndFlagsBits = plistString._countAndFlagsBits;
  v4 = v1;
  v5 = 1;
  if (plistString._countAndFlagsBits == 3356496 && plistString._object == (void *)0xE300000000000000)
    goto LABEL_15;
  v6 = sub_20A0E0CEC();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    v5 = 2;
    if (countAndFlagsBits == 0x303143333750 && object == (void *)0xE600000000000000)
      goto LABEL_15;
    v7 = sub_20A0E0CEC();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      v5 = 3;
      if (countAndFlagsBits == 5459781 && object == (void *)0xE300000000000000)
        goto LABEL_15;
      v8 = sub_20A0E0CEC();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0)
      {
        v5 = 4;
        if (countAndFlagsBits == 0x313242534F45 && object == (void *)0xE600000000000000)
          goto LABEL_15;
        v9 = sub_20A0E0CEC();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          v5 = 5;
          if (countAndFlagsBits == 0x313242534F45 && object == (void *)0xE600000000000000)
          {
LABEL_15:
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
          v10 = sub_20A0E0CEC();
          swift_bridgeObjectRelease();
          if ((v10 & 1) == 0)
          {
            result.value = swift_bridgeObjectRelease();
            v5 = 6;
            goto LABEL_18;
          }
        }
      }
    }
  }
LABEL_17:
  result.value = swift_bridgeObjectRelease();
LABEL_18:
  *v4 = v5;
  return result;
}

void *static SEType.allCases.getter()
{
  return &unk_24C2BC2D0;
}

uint64_t SEType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

void *static SEType.supportedPlatforms.getter()
{
  return &unk_24C2BC2A8;
}

SEService::SEType_optional __swiftcall SEType.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x5040302010006uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 7)
    LOBYTE(v2) = 6;
  *v1 = v2;
  return (SEService::SEType_optional)rawValue;
}

unint64_t sub_20A0C9B2C()
{
  unint64_t result;

  result = qword_2545CA870;
  if (!qword_2545CA870)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SEType, &type metadata for SEType);
    atomic_store(result, (unint64_t *)&qword_2545CA870);
  }
  return result;
}

uint64_t sub_20A0C9B70()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

uint64_t sub_20A0C9BB4()
{
  return sub_20A0E0D88();
}

uint64_t sub_20A0C9BE0()
{
  sub_20A0E0D7C();
  sub_20A0E0D88();
  return sub_20A0E0D94();
}

SEService::SEType_optional sub_20A0C9C20(Swift::Int *a1)
{
  return SEType.init(rawValue:)(*a1);
}

void sub_20A0C9C28(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_20A0C9C38()
{
  sub_20A0C9E0C();
  return sub_20A0E0890();
}

uint64_t sub_20A0C9C94()
{
  sub_20A0C9E0C();
  return sub_20A0E0884();
}

unint64_t sub_20A0C9CE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2545CA878;
  if (!qword_2545CA878)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2545CA880);
    result = MEMORY[0x20BD202E4](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2545CA878);
  }
  return result;
}

void sub_20A0C9D30(_QWORD *a1@<X8>)
{
  *a1 = &unk_24C2BC2D0;
}

uint64_t storeEnumTagSinglePayload for SEType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_20A0C9D8C + 4 * byte_20A0EB6ED[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_20A0C9DC0 + 4 * byte_20A0EB6E8[v4]))();
}

uint64_t sub_20A0C9DC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0C9DC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20A0C9DD0);
  return result;
}

uint64_t sub_20A0C9DDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20A0C9DE4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_20A0C9DE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20A0C9DF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SEType()
{
  return &type metadata for SEType;
}

unint64_t sub_20A0C9E0C()
{
  unint64_t result;

  result = qword_2545CA888;
  if (!qword_2545CA888)
  {
    result = MEMORY[0x20BD202E4](&protocol conformance descriptor for SEType, &type metadata for SEType);
    atomic_store(result, (unint64_t *)&qword_2545CA888);
  }
  return result;
}

uint64_t SSEIsFeatureSupported(int a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t DeviceFeatures;
  uint64_t v10;
  unsigned int v11;

  v11 = 0;
  v10 = 0;
  init();
  if (_hasSSE)
  {
    v2 = SSEGetVersion(&v11);
    if ((_DWORD)v2)
    {
      v3 = v2;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEIsFeatureSupported_cold_4();
    }
    else
    {
      v3 = 0;
      switch(a1)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
          return v3;
        case 7:
        case 11:
        case 15:
        case 26:
        case 27:
        case 28:
          v4 = HIWORD(v11);
          goto LABEL_8;
        case 12:
        case 25:
          v5 = v11 > 1;
          goto LABEL_26;
        case 13:
        case 14:
          v5 = v11 > 2;
          goto LABEL_26;
        case 16:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
          v4 = v11 >> 18;
          goto LABEL_8;
        case 17:
        case 40:
          v6 = v11;
          v7 = 393215;
          goto LABEL_25;
        case 29:
        case 30:
        case 31:
          v4 = v11 >> 17;
          goto LABEL_8;
        case 32:
        case 45:
        case 46:
        case 47:
        case 48:
          v4 = v11 >> 19;
LABEL_8:
          if (v4)
            return 0;
          else
            return 4294967279;
        case 33:
          v6 = v11;
          v7 = 655359;
          goto LABEL_25;
        case 34:
          DeviceFeatures = getDeviceFeatures(&v10);
          if ((_DWORD)DeviceFeatures)
          {
            v3 = DeviceFeatures;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              SSEIsFeatureSupported_cold_3();
          }
          else if ((v10 & 1) != 0)
          {
            return 0;
          }
          else
          {
            return 4294967279;
          }
          return v3;
        case 41:
        case 42:
          v5 = HIWORD(v11) > 4u;
          goto LABEL_26;
        case 43:
        case 44:
          v6 = v11;
          v7 = 458751;
          goto LABEL_25;
        case 49:
          v6 = v11;
          v7 = 589823;
LABEL_25:
          v5 = v6 > v7;
LABEL_26:
          if (v5)
            v3 = 0;
          else
            v3 = 4294967279;
          break;
        default:
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEIsFeatureSupported_cold_2();
          return 4294967279;
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEIsFeatureSupported_cold_1();
    return 4294967279;
  }
  return v3;
}

uint64_t SSEGetVersion(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  size_t outputStructCnt;
  unsigned int outputStruct;
  uint64_t inputStruct;

  if (SSEGetVersion_protocolVersion)
  {
    v2 = 0;
    goto LABEL_10;
  }
  inputStruct = 0x153534563;
  outputStruct = 0;
  v3 = init();
  if ((_DWORD)v3)
  {
    v2 = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetVersion_cold_4();
  }
  else
  {
    outputStructCnt = 4;
    v4 = IOConnectCallStructMethod(_connect, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!(_DWORD)v4)
    {
      if (outputStructCnt == 4)
      {
        v5 = outputStruct;
        if (outputStruct)
        {
          v2 = 0;
          if (outputStruct >= 0xA0000)
            v5 = 655360;
          SSEGetVersion_protocolVersion = v5;
          goto LABEL_10;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEGetVersion_cold_1();
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        SSEGetVersion_cold_2();
      }
      v2 = 4294967290;
      goto LABEL_10;
    }
    v2 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetVersion_cold_3();
  }
LABEL_10:
  if (a1)
    *a1 = SSEGetVersion_protocolVersion;
  return v2;
}

uint64_t getDeviceFeatures(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v7;
  uint64_t outputStruct;
  uint64_t inputStruct;
  unsigned int v10;

  if (a1)
  {
    if ((getDeviceFeatures_featuresValid & 1) != 0)
    {
LABEL_10:
      v5 = 0;
      *a1 = getDeviceFeatures_deviceFeatures;
      return v5;
    }
    v10 = 0;
    v2 = SSEGetVersion(&v10);
    if ((_DWORD)v2)
    {
      v5 = v2;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        getDeviceFeatures_cold_5();
    }
    else
    {
      if (v10 < 0x30000)
      {
LABEL_9:
        getDeviceFeatures_featuresValid = 1;
        goto LABEL_10;
      }
      outputStruct = 0;
      inputStruct = 0x1E53534563;
      v3 = init();
      if ((_DWORD)v3)
      {
        v5 = v3;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          getDeviceFeatures_cold_4();
      }
      else
      {
        v7 = 8;
        v4 = IOConnectCallStructMethod(_connect, 0, &inputStruct, 8uLL, &outputStruct, &v7);
        if ((_DWORD)v4)
        {
          v5 = v4;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            getDeviceFeatures_cold_3();
        }
        else
        {
          if (v7 == 8)
          {
            getDeviceFeatures_deviceFeatures = outputStruct;
            goto LABEL_9;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            getDeviceFeatures_cold_2();
          return 4294967290;
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getDeviceFeatures_cold_1();
    return 4294967292;
  }
  return v5;
}

uint64_t init()
{
  uint64_t v0;
  mach_port_t v1;
  const __CFDictionary *v2;
  io_service_t MatchingService;
  io_object_t v4;
  uint64_t v5;
  IONotificationPort *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  size_t v17;
  _QWORD v18[2];
  int v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((_initialized & 1) == 0)
  {
    if (isRestoreMode_onceToken != -1)
      dispatch_once(&isRestoreMode_onceToken, &__block_literal_global_160);
    if ((isRestoreMode_restoreMode & 1) != 0 || _skipSEAvailabilityCheck)
    {
      _hasSSE = 1;
    }
    else
    {
      if (getMGAnswers_onceToken != -1)
        dispatch_once(&getMGAnswers_onceToken, &__block_literal_global_164);
      _hasSSE = getMGAnswers_cachedHasSE;
      if (!getMGAnswers_cachedHasSE)
      {
        _initialized = 1;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          init_cold_5();
        goto LABEL_13;
      }
    }
    v1 = *MEMORY[0x24BDD8B20];
    v2 = IOServiceMatching("AppleSSE");
    MatchingService = IOServiceGetMatchingService(v1, v2);
    if (!MatchingService)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        init_cold_1();
      v0 = 4294967276;
      goto LABEL_14;
    }
    v4 = MatchingService;
    v5 = IOServiceOpen(MatchingService, *MEMORY[0x24BDAEC58], 0, (io_connect_t *)&_connect);
    if ((_DWORD)v5)
    {
      v0 = v5;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        init_cold_4();
      IOObjectRelease(v4);
      goto LABEL_14;
    }
    v6 = IONotificationPortCreate(v1);
    _notifyport = (uint64_t)v6;
    if (v6)
      goto LABEL_24;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      init_cold_3();
    v6 = (IONotificationPort *)_notifyport;
    if (_notifyport)
    {
LABEL_24:
      v7 = dispatch_get_global_queue(21, 0);
      IONotificationPortSetDispatchQueue(v6, v7);

      if (IOServiceAddInterestNotification((IONotificationPortRef)_notifyport, v4, "IOGeneralInterest", (IOServiceInterestCallback)serviceNotificationHandler, 0, (io_object_t *)&_notifyobj)&& os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        init_cold_2();
      }
    }
    if (getMGAnswers_onceToken != -1)
      dispatch_once(&getMGAnswers_onceToken, &__block_literal_global_164);
    if (getMGAnswers_cachedIsInternal)
    {
      if (isRestoreMode_onceToken != -1)
        dispatch_once(&isRestoreMode_onceToken, &__block_literal_global_160);
      if ((isRestoreMode_restoreMode & 1) == 0)
      {
        _logFile = (uint64_t)fopen("/var/mobile/Library/Logs/AppleSSE.log", "a");
        if (_logFile)
        {
          if (MEMORY[0x20BD1FCCC]() < 1)
            chmod("/var/mobile/Library/Logs/AppleSSE.log", 0x1B6u);
          else
            fputs("\n", (FILE *)_logFile);
          v18[1] = 0;
          *(_QWORD *)v19 = 0x4100000001;
          v17 = 16;
          v18[0] = 0;
          sysctl(v19, 2u, v18, &v17, 0, 0);
          logLine("AppleSSE Log Starts - System Version %s", v8, v9, v10, v11, v12, v13, v14, (char)v18);
          logState(0, 0);
        }
      }
    }
    _initialized = 1;
    v15 = dispatch_get_global_queue(21, 0);
    dispatch_async(v15, &__block_literal_global_10);

    IOObjectRelease(v4);
    return 0;
  }
  if (_hasSSE)
    return 0;
LABEL_13:
  v0 = 4294967279;
LABEL_14:
  if (_notifyobj)
  {
    IOObjectRelease(_notifyobj);
    _notifyobj = 0;
  }
  if (_notifyport)
  {
    IONotificationPortDestroy((IONotificationPortRef)_notifyport);
    _notifyport = 0;
  }
  if (_connect)
  {
    IOServiceClose(_connect);
    _connect = 0;
  }
  return v0;
}

uint64_t SSEGetHostChallenge(CFDataRef *a1)
{
  uint64_t v2;
  uint64_t v3;
  CFDataRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v10;
  uint64_t inputStruct;
  _QWORD outputStruct[2];

  outputStruct[1] = *MEMORY[0x24BDAC8D0];
  inputStruct = 0;
  outputStruct[0] = 0;
  v10 = 0;
  if (a1)
  {
    v2 = init();
    if ((_DWORD)v2)
    {
      v8 = v2;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetHostChallenge_cold_5();
    }
    else
    {
      LODWORD(inputStruct) = 1397966179;
      WORD2(inputStruct) = 2;
      v10 = 8;
      v3 = IOConnectCallStructMethod(_connect, 0, &inputStruct, 8uLL, outputStruct, &v10);
      if ((_DWORD)v3)
      {
        v8 = v3;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEGetHostChallenge_cold_4();
      }
      else if (v10 == 8)
      {
        v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)outputStruct, 8);
        *a1 = v4;
        if (v4)
        {
          v8 = 0;
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetHostChallenge_cold_2();
          v8 = 4294967291;
        }
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEGetHostChallenge_cold_3();
        v8 = 4294967290;
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetHostChallenge_cold_1();
    v8 = 4294967292;
  }
  logCmdCall((uint64_t)"SSEGetHostChallenge", v8, 0, 0, 0, v5, v6, v7);
  return v8;
}

uint64_t logCmdCall(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a2 || (_DWORD)a3)
  {
    if (_logFile)
    {
      logLine("%s() -> %d", a2, a3, a4, a5, a6, a7, a8, result);
      return logState(a4, a5);
    }
  }
  return result;
}

uint64_t SSEAuthorize(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, _DWORD *a8, CFDataRef *a9)
{
  return authorize(0, a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, 0, 0, 0);
}

uint64_t authorize(int a1, int a2, const __CFData *a3, int a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, char a9, _DWORD *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13, CFTypeRef *a14)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  UInt8 *v25;
  uint64_t v26;
  const __CFAllocator *v27;
  CFDataRef v28;
  CFDataRef v29;
  CFIndex v30;
  CFDataRef v31;
  CFDataRef v32;
  const UInt8 *v33;
  CFDataRef v34;
  CFDataRef v35;
  uint64_t CertificatesFromBuffer;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  UInt8 *v41;
  int v42;
  CFTypeRef cf;
  size_t outputStructCnt;
  int v45;
  __int128 inputStruct;
  _OWORD v47[8];
  uint64_t v48;
  CFRange v49;
  CFRange v50;
  CFRange v51;
  CFRange v52;
  CFRange v53;

  v48 = *MEMORY[0x24BDAC8D0];
  v45 = a4;
  memset(v47, 0, 126);
  inputStruct = 0u;
  cf = 0;
  outputStructCnt = 0;
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_1();
    goto LABEL_76;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_2();
    goto LABEL_76;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_3();
    goto LABEL_76;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_4();
    goto LABEL_76;
  }
  if (!a8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_5();
    goto LABEL_76;
  }
  if (!a10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_6();
    goto LABEL_76;
  }
  if (!a11)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_7();
    goto LABEL_76;
  }
  if (a1)
  {
    if (a12)
    {
      if (a13)
        goto LABEL_11;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        authorize_cold_9();
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      authorize_cold_8();
    }
LABEL_76:
    v25 = 0;
LABEL_77:
    CertificatesFromBuffer = 4294967292;
    goto LABEL_78;
  }
LABEL_11:
  v41 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x722A5B9EuLL);
  if (!v41)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_10();
    v25 = 0;
    goto LABEL_92;
  }
  v22 = init();
  if ((_DWORD)v22)
  {
    CertificatesFromBuffer = v22;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_24();
    goto LABEL_61;
  }
  if (a9 == 2 && a1)
  {
    v23 = SSEIsFeatureSupported(7);
    if ((_DWORD)v23)
    {
      CertificatesFromBuffer = v23;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        authorize_cold_23();
      goto LABEL_61;
    }
    v24 = baaPrepare();
    if ((_DWORD)v24)
    {
      CertificatesFromBuffer = v24;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        authorize_cold_22();
      goto LABEL_61;
    }
  }
  LODWORD(inputStruct) = 1397966179;
  WORD2(inputStruct) = 3;
  DWORD2(inputStruct) = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x41)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_11();
    goto LABEL_60;
  }
  v49.length = CFDataGetLength(a3);
  v49.location = 0;
  CFDataGetBytes(a3, v49, (UInt8 *)v47);
  HIDWORD(inputStruct) = CFDataGetLength(a3);
  LODWORD(v47[4]) = a4;
  if ((unint64_t)CFDataGetLength(a5) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_12();
LABEL_60:
    CertificatesFromBuffer = 4294967292;
LABEL_61:
    v25 = v41;
    goto LABEL_78;
  }
  v50.length = CFDataGetLength(a5);
  v50.location = 0;
  CFDataGetBytes(a5, v50, (UInt8 *)&v47[4] + 4);
  if (CFDataGetLength(a6) != 8)
  {
    v25 = v41;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_21();
    goto LABEL_77;
  }
  v51.length = CFDataGetLength(a6);
  v51.location = 0;
  CFDataGetBytes(a6, v51, (UInt8 *)&v47[5] + 12);
  v25 = v41;
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_20();
    goto LABEL_77;
  }
  v52.length = CFDataGetLength(a7);
  v52.location = 0;
  CFDataGetBytes(a7, v52, (UInt8 *)&v47[6] + 4);
  if (CFDataGetLength(a8) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_19();
    goto LABEL_77;
  }
  v53.length = CFDataGetLength(a8);
  v53.location = 0;
  CFDataGetBytes(a8, v53, (UInt8 *)&v47[6] + 12);
  *(_QWORD *)((char *)&v47[7] + 4) = 0;
  if (a1)
  {
    BYTE12(v47[7]) = 1;
    BYTE13(v47[7]) = a9;
  }
  outputStructCnt = 0x4000;
  v26 = IOConnectCallStructMethod(_connect, 0, &inputStruct, 0x8EuLL, v41, &outputStructCnt);
  if ((_DWORD)v26)
  {
    CertificatesFromBuffer = v26;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_18();
    goto LABEL_78;
  }
  v27 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v28 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v41 + 4, 8);
  if (!v28)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_13();
    goto LABEL_92;
  }
  v29 = v28;
  if (!a1)
  {
    CertificatesFromBuffer = 0;
    *a10 = *(_DWORD *)v41;
    *a11 = v28;
    goto LABEL_35;
  }
  v30 = *((unsigned int *)v41 + 3);
  if (outputStructCnt < v30 + (unint64_t)*((unsigned int *)v41 + 4) + 20)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_14();
    CFRelease(v29);
    CertificatesFromBuffer = 4294967290;
    goto LABEL_78;
  }
  v31 = CFDataCreate(v27, v41 + 20, v30);
  if (!v31)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_15();
    CFRelease(v29);
LABEL_92:
    CertificatesFromBuffer = 4294967291;
    goto LABEL_78;
  }
  v32 = v31;
  v33 = &v41[*((unsigned int *)v41 + 3) + 20];
  v34 = CFDataCreate(v27, v33, *((unsigned int *)v41 + 4));
  v35 = v34;
  if (v34)
  {
    if (!a14)
    {
      CertificatesFromBuffer = 0;
      *a10 = *(_DWORD *)v41;
      *a11 = v29;
      *a12 = v32;
      *a13 = v34;
      goto LABEL_35;
    }
    v42 = 0;
    CertificatesFromBuffer = getCertificatesFromBuffer((int *)&v33[*((unsigned int *)v41 + 4)], (unint64_t)&v41[outputStructCnt], &cf, &v42);
    if (!(_DWORD)CertificatesFromBuffer)
    {
      *a10 = *(_DWORD *)v41;
      *a11 = v29;
      *a12 = v32;
      *a13 = v35;
      *a14 = cf;
LABEL_35:
      free(v25);
      goto LABEL_36;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_17();
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorize_cold_16();
    CertificatesFromBuffer = 4294967291;
  }
  CFRelease(v29);
  CFRelease(v32);
  if (v35)
    CFRelease(v35);
LABEL_78:
  if (cf)
    CFRelease(cf);
  if (v25)
    goto LABEL_35;
LABEL_36:
  logCmdCall((uint64_t)"authorize", CertificatesFromBuffer, 0, (uint64_t)&v45, (uint64_t)&v47[4] + 4, v37, v38, v39);
  return CertificatesFromBuffer;
}

uint64_t SSEAuthorize(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, char a8, _DWORD *a9, CFDataRef *a10, CFDataRef *a11, CFDataRef *a12, CFTypeRef *a13)
{
  return authorize(1, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t SSEAuthorizeWithPIN(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, _DWORD *a8, CFDataRef *a9, CFDataRef *a10)
{
  return authorizeWithPIN(0, a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, 0, 0, 0);
}

uint64_t authorizeWithPIN(int a1, int a2, const __CFData *a3, int a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, char a9, _DWORD *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13, CFDataRef *a14, CFTypeRef *a15)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  UInt8 *v26;
  uint64_t v27;
  const __CFAllocator *v28;
  CFDataRef v29;
  CFDataRef v30;
  CFDataRef v31;
  CFDataRef v32;
  CFIndex v33;
  CFDataRef v34;
  CFDataRef v35;
  const UInt8 *v36;
  CFDataRef v37;
  CFDataRef v38;
  uint64_t CertificatesFromBuffer;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  UInt8 *v44;
  int v45;
  CFTypeRef cf;
  size_t outputStructCnt;
  int v48;
  __int128 inputStruct;
  _OWORD v50[8];
  uint64_t v51;
  CFRange v52;
  CFRange v53;
  CFRange v54;
  CFRange v55;
  CFRange v56;

  v51 = *MEMORY[0x24BDAC8D0];
  v48 = a4;
  memset(v50, 0, 126);
  inputStruct = 0u;
  cf = 0;
  outputStructCnt = 0;
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_1();
    goto LABEL_83;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_2();
    goto LABEL_83;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_3();
    goto LABEL_83;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_4();
    goto LABEL_83;
  }
  if (!a8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_5();
    goto LABEL_83;
  }
  if (!a10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_6();
    goto LABEL_83;
  }
  if (!a11)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_7();
    goto LABEL_83;
  }
  if (!a12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_8();
    goto LABEL_83;
  }
  if (a1)
  {
    if (a13)
    {
      if (a14)
        goto LABEL_12;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        authorizeWithPIN_cold_10();
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      authorizeWithPIN_cold_9();
    }
LABEL_83:
    v26 = 0;
LABEL_84:
    CertificatesFromBuffer = 4294967292;
    goto LABEL_85;
  }
LABEL_12:
  v44 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x468DD742uLL);
  if (!v44)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_11();
    v26 = 0;
    goto LABEL_78;
  }
  v23 = init();
  if ((_DWORD)v23)
  {
    CertificatesFromBuffer = v23;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_26();
    goto LABEL_93;
  }
  if (a9 == 2 && a1)
  {
    v24 = SSEIsFeatureSupported(11);
    if ((_DWORD)v24)
    {
      CertificatesFromBuffer = v24;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        authorizeWithPIN_cold_25();
      goto LABEL_93;
    }
    v25 = baaPrepare();
    if ((_DWORD)v25)
    {
      CertificatesFromBuffer = v25;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        authorizeWithPIN_cold_24();
      goto LABEL_93;
    }
  }
  strcpy((char *)&inputStruct, "cESS\b");
  DWORD2(inputStruct) = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x41)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_12();
    CertificatesFromBuffer = 4294967292;
LABEL_93:
    v26 = v44;
    goto LABEL_85;
  }
  v52.length = CFDataGetLength(a3);
  v52.location = 0;
  CFDataGetBytes(a3, v52, (UInt8 *)v50);
  HIDWORD(inputStruct) = CFDataGetLength(a3);
  LODWORD(v50[4]) = a4;
  if ((unint64_t)CFDataGetLength(a5) >= 0x19)
  {
    v26 = v44;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_13();
    goto LABEL_84;
  }
  v53.length = CFDataGetLength(a5);
  v53.location = 0;
  CFDataGetBytes(a5, v53, (UInt8 *)&v50[4] + 4);
  v26 = v44;
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_23();
    goto LABEL_84;
  }
  v54.length = CFDataGetLength(a6);
  v54.location = 0;
  CFDataGetBytes(a6, v54, (UInt8 *)&v50[5] + 12);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_22();
    goto LABEL_84;
  }
  v55.length = CFDataGetLength(a7);
  v55.location = 0;
  CFDataGetBytes(a7, v55, (UInt8 *)&v50[6] + 4);
  if (CFDataGetLength(a8) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      authorizeWithPIN_cold_21();
    goto LABEL_84;
  }
  v56.length = CFDataGetLength(a8);
  v56.location = 0;
  CFDataGetBytes(a8, v56, (UInt8 *)&v50[6] + 12);
  *(_QWORD *)((char *)&v50[7] + 4) = 0;
  if (a1)
  {
    BYTE12(v50[7]) = 1;
    BYTE13(v50[7]) = a9;
  }
  outputStructCnt = 0x4000;
  v27 = IOConnectCallStructMethod(_connect, 0, &inputStruct, 0x8EuLL, v44, &outputStructCnt);
  if (!(_DWORD)v27)
  {
    v28 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v29 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v44 + 4, 16);
    if (v29)
    {
      v30 = v29;
      v31 = CFDataCreate(v28, v44 + 20, 8);
      if (v31)
      {
        v32 = v31;
        if (!a1)
        {
          CertificatesFromBuffer = 0;
          *a10 = *(_DWORD *)v44;
          *a11 = v30;
          *a12 = v31;
          goto LABEL_37;
        }
        v33 = *((unsigned int *)v44 + 7);
        if (outputStructCnt < v33 + (unint64_t)*((unsigned int *)v44 + 8) + 36)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            authorizeWithPIN_cold_16();
          v38 = 0;
          v35 = 0;
          CertificatesFromBuffer = 4294967290;
        }
        else
        {
          v34 = CFDataCreate(v28, v44 + 36, v33);
          if (v34)
          {
            v35 = v34;
            v36 = &v44[*((unsigned int *)v44 + 7) + 36];
            v37 = CFDataCreate(v28, v36, *((unsigned int *)v44 + 8));
            if (v37)
            {
              v38 = v37;
              if (!a15)
              {
                CertificatesFromBuffer = 0;
                *a10 = *(_DWORD *)v44;
                *a11 = v30;
                *a12 = v32;
                *a13 = v35;
                *a14 = v37;
                goto LABEL_37;
              }
              v45 = 0;
              CertificatesFromBuffer = getCertificatesFromBuffer((int *)&v36[*((unsigned int *)v44 + 8)], (unint64_t)&v44[outputStructCnt], &cf, &v45);
              if (!(_DWORD)CertificatesFromBuffer)
              {
                *a10 = *(_DWORD *)v44;
                *a11 = v30;
                *a12 = v32;
                *a13 = v35;
                *a14 = v38;
                *a15 = cf;
LABEL_37:
                free(v26);
                goto LABEL_38;
              }
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                authorizeWithPIN_cold_19();
              goto LABEL_106;
            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              authorizeWithPIN_cold_18();
            v38 = 0;
          }
          else
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              authorizeWithPIN_cold_17();
            v38 = 0;
            v35 = 0;
          }
          CertificatesFromBuffer = 4294967291;
        }
LABEL_106:
        CFRelease(v30);
        CFRelease(v32);
        if (v35)
          CFRelease(v35);
        if (v38)
          CFRelease(v38);
        goto LABEL_85;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        authorizeWithPIN_cold_15();
      CFRelease(v30);
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      authorizeWithPIN_cold_14();
    }
LABEL_78:
    CertificatesFromBuffer = 4294967291;
    goto LABEL_85;
  }
  CertificatesFromBuffer = v27;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    authorizeWithPIN_cold_20();
LABEL_85:
  if (cf)
    CFRelease(cf);
  if (v26)
    goto LABEL_37;
LABEL_38:
  logCmdCall((uint64_t)"authorizeWithPIN", CertificatesFromBuffer, 0, (uint64_t)&v48, (uint64_t)&v50[4] + 4, v40, v41, v42);
  return CertificatesFromBuffer;
}

uint64_t SSEAuthorizeWithPIN(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, char a8, _DWORD *a9, CFDataRef *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13, CFTypeRef *a14)
{
  return authorizeWithPIN(1, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t SSEAuthorizeAndSignECommerceBlob(const __CFData *a1, int a2, const __CFData *a3, char a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, const __CFData **a9)
{
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  size_t v20;
  UInt8 *v21;
  uint64_t v22;
  CFIndex v23;
  const __CFData *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UInt8 *outputStruct;
  size_t outputStructCnt;
  int v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;

  v32 = a2;
  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_38;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_38;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_38;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_38;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_38;
  }
  if (!a8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_38;
  }
  if (!a9)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
LABEL_38:
    v25 = 4294967292;
    goto LABEL_23;
  }
  v17 = malloc_type_calloc(0x4000uLL, 1uLL, 0x27E86296uLL);
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_44;
  }
  v18 = v17;
  outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x1855B243uLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    free(v18);
LABEL_44:
    v25 = 4294967291;
    goto LABEL_23;
  }
  v19 = init();
  if ((_DWORD)v19)
  {
    v25 = v19;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_60;
  }
  *v18 = 1397966179;
  *((_WORD *)v18 + 2) = 15;
  if ((unint64_t)CFDataGetLength(a1) >= 0x41)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_59;
  }
  v33.length = CFDataGetLength(a1);
  v33.location = 0;
  CFDataGetBytes(a1, v33, (UInt8 *)v18 + 12);
  v18[2] = CFDataGetLength(a1);
  v18[19] = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_59;
  }
  v34.length = CFDataGetLength(a3);
  v34.location = 0;
  CFDataGetBytes(a3, v34, (UInt8 *)v18 + 80);
  *((_BYTE *)v18 + 104) = a4;
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_59;
  }
  v35.length = CFDataGetLength(a5);
  v35.location = 0;
  CFDataGetBytes(a5, v35, (UInt8 *)v18 + 105);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_59;
  }
  v36.length = CFDataGetLength(a6);
  v36.location = 0;
  CFDataGetBytes(a6, v36, (UInt8 *)v18 + 113);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_59;
  }
  v37.length = CFDataGetLength(a7);
  v37.location = 0;
  CFDataGetBytes(a7, v37, (UInt8 *)v18 + 121);
  if ((unint64_t)CFDataGetLength(a8) >> 2 >= 0xFDD)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
LABEL_59:
    v25 = 4294967292;
LABEL_60:
    v21 = outputStruct;
    goto LABEL_22;
  }
  *(_DWORD *)((char *)v18 + 137) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.location = 0;
  CFDataGetBytes(a8, v38, (UInt8 *)v18 + 141);
  *(_QWORD *)((char *)v18 + 129) = 0;
  v20 = *(unsigned int *)((char *)v18 + 137) + 141;
  outputStructCnt = 0x4000;
  v21 = outputStruct;
  v22 = IOConnectCallStructMethod(_connect, 0, v18, v20, outputStruct, &outputStructCnt);
  if ((_DWORD)v22)
  {
    v25 = v22;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_22;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
  }
  else
  {
    v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      v24 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], outputStruct + 4, v23);
      if (v24)
      {
        v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEAuthorizeAndSignECommerceBlob();
        v25 = 4294967291;
      }
      goto LABEL_22;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
  }
  v25 = 4294967290;
LABEL_22:
  free(v18);
  free(v21);
LABEL_23:
  logCmdCall((uint64_t)"SSEAuthorizeAndSignECommerceBlob", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t SSEAuthorizeAndSignECommerceBlob(const __CFData *a1, int a2, const __CFData *a3, char a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, unsigned __int8 a9, const __CFData **a10, const __CFData **a11, const __CFData **a12, const __CFArray **a13)
{
  char *v20;
  char *v21;
  UInt8 *v22;
  UInt8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unsigned int *v31;
  const __CFAllocator *v32;
  CFDataRef v33;
  CFDataRef v34;
  unint64_t v35;
  CFIndex v36;
  char *v37;
  const __CFData *v38;
  CFIndex v39;
  const UInt8 *v40;
  const __CFData *v41;
  const __CFData *v42;
  int *v43;
  uint64_t CertificatesFromBuffer;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v50;
  CFTypeRef cf;
  size_t outputStructCnt;
  int v53;
  CFRange v54;
  CFRange v55;
  CFRange v56;
  CFRange v57;
  CFRange v58;
  CFRange v59;

  v53 = a2;
  cf = 0;
  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a11)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_55;
  }
  if (!a12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
LABEL_55:
    v21 = 0;
    v23 = 0;
    CertificatesFromBuffer = 4294967292;
    goto LABEL_106;
  }
  v20 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0xA48A32DEuLL);
  if (!v20)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    v21 = 0;
    goto LABEL_61;
  }
  v21 = v20;
  v22 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xDC724F47uLL);
  if (!v22)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
LABEL_61:
    v23 = 0;
LABEL_88:
    CertificatesFromBuffer = 4294967291;
    goto LABEL_106;
  }
  v23 = v22;
  v24 = init();
  if ((_DWORD)v24)
  {
    CertificatesFromBuffer = v24;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_106;
  }
  if (a9 - 2 <= 2)
  {
    v25 = SSEIsFeatureSupported((a9 - 2) + 15);
    if ((_DWORD)v25)
    {
      CertificatesFromBuffer = v25;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEAuthorizeAndSignECommerceBlob();
      goto LABEL_106;
    }
    v26 = baaPrepare();
    if ((_DWORD)v26)
    {
      CertificatesFromBuffer = v26;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEAuthorizeAndSignECommerceBlob();
      goto LABEL_106;
    }
  }
  *(_DWORD *)v21 = 1397966179;
  *((_WORD *)v21 + 2) = 17;
  if ((unint64_t)CFDataGetLength(a1) >= 0x41)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_76;
  }
  v54.length = CFDataGetLength(a1);
  v54.location = 0;
  CFDataGetBytes(a1, v54, (UInt8 *)v21 + 12);
  *((_DWORD *)v21 + 2) = CFDataGetLength(a1);
  *((_DWORD *)v21 + 19) = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_76;
  }
  v55.length = CFDataGetLength(a3);
  v55.location = 0;
  CFDataGetBytes(a3, v55, (UInt8 *)v21 + 80);
  v21[104] = a4;
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_76;
  }
  v56.length = CFDataGetLength(a5);
  v56.location = 0;
  CFDataGetBytes(a5, v56, (UInt8 *)v21 + 105);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_76;
  }
  v57.length = CFDataGetLength(a6);
  v57.location = 0;
  CFDataGetBytes(a6, v57, (UInt8 *)v21 + 113);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_76;
  }
  v58.length = CFDataGetLength(a7);
  v58.location = 0;
  CFDataGetBytes(a7, v58, (UInt8 *)v21 + 121);
  if ((unint64_t)CFDataGetLength(a8) >= 0x3F7B)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
LABEL_76:
    CertificatesFromBuffer = 4294967292;
    goto LABEL_106;
  }
  *(_DWORD *)(v21 + 129) = CFDataGetLength(a8);
  v59.length = CFDataGetLength(a8);
  v59.location = 0;
  CFDataGetBytes(a8, v59, (UInt8 *)v21 + 134);
  v21[133] = a9;
  v27 = *(unsigned int *)(v21 + 129) + 134;
  outputStructCnt = 0x4000;
  v28 = IOConnectCallStructMethod(_connect, 0, v21, v27, v23, &outputStructCnt);
  if ((_DWORD)v28)
  {
    CertificatesFromBuffer = v28;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_106;
  }
  v29 = outputStructCnt;
  if (outputStructCnt <= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_92;
  }
  if (outputStructCnt > 0x4000)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_92;
  }
  v31 = (unsigned int *)(v23 + 12);
  v30 = *(unsigned int *)v23;
  if (outputStructCnt - 12 < v30)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_92;
  }
  v32 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v33 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v23 + 12, v30);
  if (!v33)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    goto LABEL_88;
  }
  v34 = v33;
  v35 = (unint64_t)&v23[v29];
  v36 = *((unsigned int *)v23 + 1);
  v37 = (char *)v31 + *(unsigned int *)v23;
  if ((uint64_t)(v35 - (_QWORD)v37) < v36)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    CFRelease(v34);
LABEL_92:
    CertificatesFromBuffer = 4294967290;
    goto LABEL_106;
  }
  v38 = CFDataCreate(v32, (const UInt8 *)v31 + *(unsigned int *)v23, v36);
  v39 = *((unsigned int *)v23 + 2);
  v40 = (const UInt8 *)&v37[*((unsigned int *)v23 + 1)];
  if ((uint64_t)(v35 - (_QWORD)v40) < v39)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
    v42 = 0;
    CertificatesFromBuffer = 4294967290;
  }
  else
  {
    v41 = CFDataCreate(v32, v40, v39);
    v42 = v41;
    if (!a13)
    {
      CertificatesFromBuffer = 0;
      *a10 = v34;
      *a11 = v38;
      *a12 = v41;
      goto LABEL_33;
    }
    v43 = (int *)&v40[*((unsigned int *)v23 + 2)];
    v50 = 0;
    CertificatesFromBuffer = getCertificatesFromBuffer(v43, v35, &cf, &v50);
    if (!(_DWORD)CertificatesFromBuffer)
    {
      *a10 = v34;
      *a11 = v38;
      *a12 = v42;
      *a13 = (const __CFArray *)cf;
LABEL_33:
      free(v21);
      goto LABEL_34;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignECommerceBlob();
  }
  CFRelease(v34);
  if (v38)
    CFRelease(v38);
  if (v42)
    CFRelease(v42);
LABEL_106:
  if (cf)
    CFRelease(cf);
  if (v21)
    goto LABEL_33;
LABEL_34:
  if (v23)
    free(v23);
  logCmdCall((uint64_t)"SSEAuthorizeAndSignECommerceBlob", CertificatesFromBuffer, 0, (uint64_t)&v53, 0, v45, v46, v47);
  return CertificatesFromBuffer;
}

uint64_t baaPrepare()
{
  if (baaInit_onceToken != -1)
    dispatch_once(&baaInit_onceToken, &__block_literal_global_197);
  if (_baaSupportClass)
    return objc_msgSend((id)_baaSupportClass, "prepare");
  else
    return 4294967290;
}

uint64_t getCertificatesFromBuffer(int *a1, unint64_t a2, _QWORD *a3, _DWORD *a4)
{
  id v8;
  int v9;
  int v10;
  unsigned int *v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  id v15;
  uint64_t v16;

  v8 = (id)objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getCertificatesFromBuffer_cold_1();
    goto LABEL_32;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getCertificatesFromBuffer_cold_2();
    goto LABEL_32;
  }
  if ((unint64_t)a1 > a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getCertificatesFromBuffer_cold_3();
    goto LABEL_32;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getCertificatesFromBuffer_cold_4();
    goto LABEL_32;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getCertificatesFromBuffer_cold_5();
LABEL_32:
    v16 = 4294967292;
    goto LABEL_16;
  }
  if ((unint64_t)a1 < a2)
  {
    if (a2 - (unint64_t)a1 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        getCertificatesFromBuffer_cold_6();
LABEL_21:
      v16 = 4294967290;
      goto LABEL_16;
    }
    v9 = *a1;
    if (*a1)
    {
      v10 = 0;
      v11 = (unsigned int *)(a1 + 1);
      while (a2 - (unint64_t)v11 > 3)
      {
        v14 = *v11;
        v12 = v11 + 1;
        v13 = v14;
        if ((uint64_t)(a2 - (_QWORD)v12) < v14)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            getCertificatesFromBuffer_cold_8();
          goto LABEL_21;
        }
        v15 = (id)objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v12, v13);
        objc_msgSend(v8, "addObject:", v15);

        v11 = (_DWORD *)((char *)v12 + v13);
        v10 += v13 + 4;
        if (!--v9)
          goto LABEL_15;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        getCertificatesFromBuffer_cold_7();
      goto LABEL_21;
    }
  }
  v10 = 0;
LABEL_15:
  v16 = 0;
  *a3 = v8;
  *a4 = v10;
LABEL_16:

  return v16;
}

uint64_t SSEAuthorizeAndSignAPDU(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, CFDataRef *a9)
{
  UInt8 *v17;
  UInt8 *v18;
  uint64_t v19;
  size_t v20;
  UInt8 *v21;
  uint64_t v22;
  CFIndex v23;
  CFDataRef v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  UInt8 *outputStruct;
  size_t outputStructCnt;
  int v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;

  v32 = a3;
  outputStructCnt = 0;
  if (a1 != 8 && !a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_41;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_41;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_41;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_41;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_41;
  }
  if (!a8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_41;
  }
  if (!a9)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
LABEL_41:
    v25 = 4294967292;
    goto LABEL_26;
  }
  v17 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xE7B35AA9uLL);
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_47;
  }
  v18 = v17;
  outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x939AC92CuLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    free(v18);
LABEL_47:
    v25 = 4294967291;
    goto LABEL_26;
  }
  v19 = init();
  if ((_DWORD)v19)
  {
    v25 = v19;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_73;
  }
  *(_DWORD *)v18 = 1397966179;
  *((_WORD *)v18 + 2) = 31;
  *((_DWORD *)v18 + 2) = a1;
  if (a1 != 8)
  {
    if ((unint64_t)CFDataGetLength(a2) >= 0x41)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEAuthorizeAndSignAPDU();
      goto LABEL_72;
    }
    v33.length = CFDataGetLength(a2);
    v33.location = 0;
    CFDataGetBytes(a2, v33, v18 + 16);
    *((_DWORD *)v18 + 3) = CFDataGetLength(a2);
  }
  *((_DWORD *)v18 + 20) = a3;
  if ((unint64_t)CFDataGetLength(a4) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_72;
  }
  v34.length = CFDataGetLength(a4);
  v34.location = 0;
  CFDataGetBytes(a4, v34, v18 + 84);
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_72;
  }
  v35.length = CFDataGetLength(a5);
  v35.location = 0;
  CFDataGetBytes(a5, v35, v18 + 108);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_72;
  }
  v36.length = CFDataGetLength(a6);
  v36.location = 0;
  CFDataGetBytes(a6, v36, v18 + 116);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_72;
  }
  v37.length = CFDataGetLength(a7);
  v37.location = 0;
  CFDataGetBytes(a7, v37, v18 + 124);
  if ((unint64_t)CFDataGetLength(a8) >= 0x3F79)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
LABEL_72:
    v25 = 4294967292;
LABEL_73:
    v21 = outputStruct;
    goto LABEL_25;
  }
  *((_DWORD *)v18 + 33) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.location = 0;
  CFDataGetBytes(a8, v38, v18 + 136);
  v20 = *((unsigned int *)v18 + 33) + 136;
  outputStructCnt = 0x4000;
  v21 = outputStruct;
  v22 = IOConnectCallStructMethod(_connect, 0, v18, v20, outputStruct, &outputStructCnt);
  if ((_DWORD)v22)
  {
    v25 = v22;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_25;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
  }
  else
  {
    v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      v24 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], outputStruct + 4, v23);
      if (v24)
      {
        v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEAuthorizeAndSignAPDU();
        v25 = 4294967291;
      }
      goto LABEL_25;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
  }
  v25 = 4294967290;
LABEL_25:
  free(v18);
  free(v21);
LABEL_26:
  logCmdCall((uint64_t)"SSEAuthorizeAndSignAPDU", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t SSEGetActivationTimeout(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, unsigned __int16 *a6, const __CFData **a7)
{
  uint64_t v14;
  uint64_t v15;
  const __CFData *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v22;
  int v23;
  uint64_t outputStruct;
  __int16 v25;
  _BYTE inputStruct[68];
  uint64_t v27;
  CFRange v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;

  v27 = *MEMORY[0x24BDAC8D0];
  v23 = a1;
  memset(inputStruct, 0, sizeof(inputStruct));
  v25 = 0;
  outputStruct = 0;
  v22 = 0;
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetActivationTimeout();
    goto LABEL_39;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetActivationTimeout();
    goto LABEL_39;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetActivationTimeout();
    goto LABEL_39;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetActivationTimeout();
    goto LABEL_39;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetActivationTimeout();
    goto LABEL_39;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetActivationTimeout();
    goto LABEL_39;
  }
  v14 = init();
  if (!(_DWORD)v14)
  {
    *(_DWORD *)inputStruct = 1397966179;
    *(_WORD *)&inputStruct[4] = 4;
    *(_DWORD *)&inputStruct[8] = a1;
    if ((unint64_t)CFDataGetLength(a2) >= 0x19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetActivationTimeout();
    }
    else
    {
      v28.length = CFDataGetLength(a2);
      v28.location = 0;
      CFDataGetBytes(a2, v28, (UInt8 *)((unint64_t)inputStruct | 0xC));
      if (CFDataGetLength(a3) == 8)
      {
        v29.length = CFDataGetLength(a3);
        v29.location = 0;
        CFDataGetBytes(a3, v29, &inputStruct[36]);
        if (CFDataGetLength(a4) == 8)
        {
          v30.length = CFDataGetLength(a4);
          v30.location = 0;
          CFDataGetBytes(a4, v30, &inputStruct[44]);
          if (CFDataGetLength(a5) == 8)
          {
            v31.length = CFDataGetLength(a5);
            v31.location = 0;
            CFDataGetBytes(a5, v31, &inputStruct[52]);
            *(_QWORD *)&inputStruct[60] = 0;
            v22 = 10;
            v15 = IOConnectCallStructMethod(_connect, 0, inputStruct, 0x44uLL, &outputStruct, &v22);
            if ((_DWORD)v15)
            {
              v20 = v15;
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                SSEGetActivationTimeout();
            }
            else if (v22 == 10)
            {
              v16 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)&outputStruct + 2, 8);
              *a7 = v16;
              if (v16)
              {
                v20 = 0;
                *a6 = outputStruct;
              }
              else
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  SSEGetActivationTimeout();
                v20 = 4294967291;
              }
            }
            else
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                SSEGetActivationTimeout();
              v20 = 4294967290;
            }
            goto LABEL_16;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetActivationTimeout();
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          SSEGetActivationTimeout();
        }
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        SSEGetActivationTimeout();
      }
    }
LABEL_39:
    v20 = 4294967292;
    goto LABEL_16;
  }
  v20 = v14;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEGetActivationTimeout();
LABEL_16:
  logCmdCall((uint64_t)"SSEGetActivationTimeout", v20, 0, (uint64_t)&v23, (unint64_t)inputStruct | 0xC, v17, v18, v19);
  return v20;
}

uint64_t SSEAuthorizeAndSignAPDU(unsigned int a1, const __CFData *a2, unsigned int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, unsigned __int8 a9, CFDataRef *a10, CFDataRef *a11, CFDataRef *a12, CFTypeRef *a13)
{
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  UInt8 *v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unsigned int *v31;
  const __CFAllocator *v32;
  CFDataRef v33;
  CFDataRef v34;
  unint64_t v35;
  CFIndex v36;
  char *v37;
  CFDataRef v38;
  CFIndex v39;
  const UInt8 *v40;
  CFDataRef v41;
  CFDataRef v42;
  int *v43;
  uint64_t CertificatesFromBuffer;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  UInt8 *v49;
  int v50;
  CFTypeRef cf;
  size_t outputStructCnt;
  unsigned int v53;
  CFRange v54;
  CFRange v55;
  CFRange v56;
  CFRange v57;
  CFRange v58;
  CFRange v59;

  v53 = a3;
  cf = 0;
  outputStructCnt = 0;
  if (a1 != 8 && !a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a11)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_58;
  }
  if (!a12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
LABEL_58:
    v22 = 0;
    v26 = 0;
LABEL_59:
    CertificatesFromBuffer = 4294967292;
    goto LABEL_110;
  }
  v21 = (unsigned int *)malloc_type_calloc(0x4000uLL, 1uLL, 0x6BB45F19uLL);
  if (!v21)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    v22 = 0;
    goto LABEL_65;
  }
  v22 = v21;
  v49 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xDD1224E4uLL);
  if (!v49)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
LABEL_65:
    v26 = 0;
LABEL_88:
    CertificatesFromBuffer = 4294967291;
    goto LABEL_110;
  }
  v23 = init();
  if ((_DWORD)v23)
  {
    CertificatesFromBuffer = v23;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_109;
  }
  if (a9 - 2 <= 2)
  {
    v24 = SSEIsFeatureSupported((a9 - 2) + 38);
    if ((_DWORD)v24)
    {
      CertificatesFromBuffer = v24;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEAuthorizeAndSignAPDU();
      goto LABEL_109;
    }
    v25 = baaPrepare();
    if ((_DWORD)v25)
    {
      CertificatesFromBuffer = v25;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEAuthorizeAndSignAPDU();
      goto LABEL_109;
    }
  }
  strcpy((char *)v22, "cESS ");
  v22[2] = a1;
  if (a1 != 8)
  {
    if ((unint64_t)CFDataGetLength(a2) >= 0x41)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEAuthorizeAndSignAPDU();
      goto LABEL_108;
    }
    v54.length = CFDataGetLength(a2);
    v54.location = 0;
    CFDataGetBytes(a2, v54, (UInt8 *)v22 + 16);
    v22[3] = CFDataGetLength(a2);
  }
  v22[20] = a3;
  if ((unint64_t)CFDataGetLength(a4) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
LABEL_108:
    CertificatesFromBuffer = 4294967292;
LABEL_109:
    v26 = v49;
    goto LABEL_110;
  }
  v55.length = CFDataGetLength(a4);
  v55.location = 0;
  CFDataGetBytes(a4, v55, (UInt8 *)v22 + 84);
  if (CFDataGetLength(a5) != 8)
  {
    v26 = v49;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_59;
  }
  v56.length = CFDataGetLength(a5);
  v56.location = 0;
  CFDataGetBytes(a5, v56, (UInt8 *)v22 + 108);
  v26 = v49;
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_59;
  }
  v57.length = CFDataGetLength(a6);
  v57.location = 0;
  CFDataGetBytes(a6, v57, (UInt8 *)v22 + 116);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_59;
  }
  v58.length = CFDataGetLength(a7);
  v58.location = 0;
  CFDataGetBytes(a7, v58, (UInt8 *)v22 + 124);
  if ((unint64_t)CFDataGetLength(a8) >> 3 >= 0x7EF)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_59;
  }
  v22[33] = CFDataGetLength(a8);
  v59.length = CFDataGetLength(a8);
  v59.location = 0;
  CFDataGetBytes(a8, v59, (UInt8 *)v22 + 137);
  *((_BYTE *)v22 + 136) = a9;
  v27 = v22[33] + 137;
  outputStructCnt = 0x4000;
  v28 = IOConnectCallStructMethod(_connect, 0, v22, v27, v49, &outputStructCnt);
  if ((_DWORD)v28)
  {
    CertificatesFromBuffer = v28;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_110;
  }
  v29 = outputStructCnt;
  if (outputStructCnt <= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_92;
  }
  if (outputStructCnt > 0x4000)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_92;
  }
  v31 = (unsigned int *)(v49 + 12);
  v30 = *(unsigned int *)v49;
  if (outputStructCnt - 12 < v30)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_92;
  }
  v32 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v33 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v49 + 12, v30);
  if (!v33)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    goto LABEL_88;
  }
  v34 = v33;
  v35 = (unint64_t)&v49[v29];
  v36 = *((unsigned int *)v49 + 1);
  v37 = (char *)v31 + *(unsigned int *)v49;
  if ((uint64_t)(v35 - (_QWORD)v37) < v36)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    CFRelease(v34);
LABEL_92:
    CertificatesFromBuffer = 4294967290;
    goto LABEL_110;
  }
  v38 = CFDataCreate(v32, (const UInt8 *)v31 + *(unsigned int *)v49, v36);
  v39 = *((unsigned int *)v49 + 2);
  v40 = (const UInt8 *)&v37[*((unsigned int *)v49 + 1)];
  if ((uint64_t)(v35 - (_QWORD)v40) < v39)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
    v42 = 0;
    CertificatesFromBuffer = 4294967290;
  }
  else
  {
    v41 = CFDataCreate(v32, v40, v39);
    v42 = v41;
    if (!a13)
    {
      CertificatesFromBuffer = 0;
      *a10 = v34;
      *a11 = v38;
      *a12 = v41;
      goto LABEL_36;
    }
    v43 = (int *)&v40[*((unsigned int *)v49 + 2)];
    v50 = 0;
    CertificatesFromBuffer = getCertificatesFromBuffer(v43, v35, &cf, &v50);
    if (!(_DWORD)CertificatesFromBuffer)
    {
      *a10 = v34;
      *a11 = v38;
      *a12 = v42;
      *a13 = cf;
LABEL_36:
      free(v22);
      goto LABEL_37;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEAuthorizeAndSignAPDU();
  }
  CFRelease(v34);
  if (v38)
    CFRelease(v38);
  if (v42)
    CFRelease(v42);
LABEL_110:
  if (cf)
    CFRelease(cf);
  if (v22)
    goto LABEL_36;
LABEL_37:
  if (v26)
    free(v26);
  logCmdCall((uint64_t)"SSEAuthorizeAndSignAPDU", CertificatesFromBuffer, 0, (uint64_t)&v53, 0, v45, v46, v47);
  return CertificatesFromBuffer;
}

uint64_t SSEUseEntangledAuthorizationRandom(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v10 = 0;
  v9 = 0;
  v2 = init();
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEUseEntangledAuthorizationRandom_cold_2();
  }
  else
  {
    strcpy((char *)&v9, "cESS!");
    v10 = a1;
    v3 = IOConnectCallStructMethod(_connect, 0, &v9, 9uLL, 0, 0);
    if ((_DWORD)v3)
    {
      v8 = v3;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEUseEntangledAuthorizationRandom_cold_1();
      v2 = v8;
    }
  }
  logCmdCall((uint64_t)"SSEUseEntangledAuthorizationRandom", v2, 0, 0, 0, v4, v5, v6);
  return v2;
}

uint64_t SSEGetAuthorizationRandom(int a1, const __CFData *a2, const __CFData **a3, const __CFData **a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFDataRef v11;
  const __CFData *v12;
  const __CFData *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t outputStructCnt;
  int v20;
  _QWORD outputStruct[2];
  uint64_t v22;
  _OWORD inputStruct[3];
  uint64_t v24;
  CFRange v25;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = a1;
  memset(inputStruct, 0, 44);
  outputStruct[0] = 0;
  outputStruct[1] = 0;
  v22 = 0;
  outputStructCnt = 0;
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthorizationRandom();
    goto LABEL_22;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthorizationRandom();
    goto LABEL_22;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthorizationRandom();
    goto LABEL_22;
  }
  v8 = init();
  if ((_DWORD)v8)
  {
    v17 = v8;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthorizationRandom();
    goto LABEL_11;
  }
  LODWORD(inputStruct[0]) = 1397966179;
  WORD2(inputStruct[0]) = 5;
  DWORD2(inputStruct[0]) = a1;
  if ((unint64_t)CFDataGetLength(a2) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthorizationRandom();
LABEL_22:
    v17 = 4294967292;
    goto LABEL_11;
  }
  v25.length = CFDataGetLength(a2);
  v25.location = 0;
  CFDataGetBytes(a2, v25, (UInt8 *)((unint64_t)inputStruct | 0xC));
  *(_QWORD *)((char *)&inputStruct[2] + 4) = 0;
  outputStructCnt = 24;
  v9 = IOConnectCallStructMethod(_connect, 0, inputStruct, 0x2CuLL, outputStruct, &outputStructCnt);
  if ((_DWORD)v9)
  {
    v17 = v9;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthorizationRandom();
  }
  else
  {
    if (outputStructCnt == 24)
    {
      v10 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)outputStruct, 16);
      if (v11)
      {
        v12 = v11;
        v13 = CFDataCreate(v10, (const UInt8 *)&v22, 8);
        if (v13)
        {
          v17 = 0;
          *a3 = v12;
          *a4 = v13;
          goto LABEL_11;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEGetAuthorizationRandom();
        CFRelease(v12);
      }
      else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        SSEGetAuthorizationRandom();
      }
      v17 = 4294967291;
      goto LABEL_11;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthorizationRandom();
    v17 = 4294967290;
  }
LABEL_11:
  logCmdCall((uint64_t)"SSEGetAuthorizationRandom", v17, 1, (uint64_t)&v20, (unint64_t)inputStruct | 0xC, v14, v15, v16);
  return v17;
}

uint64_t SSEGetEntangledAuthorizationRandom(int a1, const __CFData *a2, char a3, CFDataRef *a4, CFDataRef *a5)
{
  UInt8 *v10;
  UInt8 *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  const __CFAllocator *v16;
  CFDataRef v17;
  CFDataRef v18;
  CFIndex v19;
  CFDataRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v26;
  int v27;
  _BYTE inputStruct[37];
  uint64_t v29;
  CFRange v30;

  v29 = *MEMORY[0x24BDAC8D0];
  v27 = a1;
  memset(inputStruct, 0, sizeof(inputStruct));
  v26 = 0;
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetEntangledAuthorizationRandom_cold_1();
    goto LABEL_23;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetEntangledAuthorizationRandom_cold_2();
    goto LABEL_23;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetEntangledAuthorizationRandom_cold_3();
LABEL_23:
    v21 = 4294967292;
    goto LABEL_16;
  }
  v10 = (UInt8 *)malloc_type_calloc(0x108uLL, 1uLL, 0x2AD6A872uLL);
  if (v10)
  {
    v11 = v10;
    v12 = init();
    if ((_DWORD)v12)
    {
      v21 = v12;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetEntangledAuthorizationRandom_cold_13();
      goto LABEL_15;
    }
    strcpy(inputStruct, "cESS\"");
    *(_DWORD *)&inputStruct[8] = a1;
    if ((unint64_t)CFDataGetLength(a2) >= 0x19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetEntangledAuthorizationRandom_cold_5();
      v21 = 4294967292;
      goto LABEL_15;
    }
    v30.length = CFDataGetLength(a2);
    v30.location = 0;
    CFDataGetBytes(a2, v30, (UInt8 *)((unint64_t)inputStruct | 0xC));
    inputStruct[36] = a3;
    v26 = 264;
    v13 = IOConnectCallStructMethod(_connect, 0, inputStruct, 0x25uLL, v11, &v26);
    if ((_DWORD)v13)
    {
      v21 = v13;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetEntangledAuthorizationRandom_cold_12();
      goto LABEL_15;
    }
    v14 = v26;
    if (v26 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetEntangledAuthorizationRandom_cold_6();
    }
    else if (v26 >= 0x109)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetEntangledAuthorizationRandom_cold_7();
    }
    else
    {
      v15 = *(unsigned int *)v11;
      if (v26 - 8 >= v15)
      {
        v16 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v11 + 8, v15);
        if (!v17)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetEntangledAuthorizationRandom_cold_9();
          v21 = 4294967291;
          goto LABEL_15;
        }
        v18 = v17;
        v19 = *((unsigned int *)v11 + 1);
        if ((uint64_t)(v14 - (*(unsigned int *)v11 + 8)) < v19)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetEntangledAuthorizationRandom_cold_10();
          v21 = 4294967290;
        }
        else
        {
          v20 = CFDataCreate(v16, &v11[*(unsigned int *)v11 + 8], v19);
          if (v20)
          {
            v21 = 0;
            *a4 = v18;
            *a5 = v20;
LABEL_15:
            free(v11);
            goto LABEL_16;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetEntangledAuthorizationRandom_cold_11();
          v21 = 4294967291;
        }
        CFRelease(v18);
        goto LABEL_15;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetEntangledAuthorizationRandom_cold_8();
    }
    v21 = 4294967290;
    goto LABEL_15;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEGetEntangledAuthorizationRandom_cold_4();
  v21 = 4294967291;
LABEL_16:
  logCmdCall((uint64_t)"SSEGetEntangledAuthorizationRandom", v21, 1, (uint64_t)&v27, (unint64_t)inputStruct | 0xC, v22, v23, v24);
  return v21;
}

uint64_t SSEEffaceAuthorizationRandom()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t inputStruct;

  inputStruct = 0;
  v0 = init();
  if ((_DWORD)v0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEffaceAuthorizationRandom_cold_2();
  }
  else
  {
    LODWORD(inputStruct) = 1397966179;
    WORD2(inputStruct) = 6;
    v1 = IOConnectCallStructMethod(_connect, 0, &inputStruct, 8uLL, 0, 0);
    if ((_DWORD)v1)
    {
      v6 = v1;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEEffaceAuthorizationRandom_cold_1();
      v0 = v6;
    }
  }
  logCmdCall((uint64_t)"SSEEffaceAuthorizationRandom", v0, 1, 0, 0, v2, v3, v4);
  return v0;
}

uint64_t SSEEnableOffWristAuthorization(char a1, const __CFData *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _OWORD v12[5];
  uint64_t v13;
  CFRange v14;

  v13 = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, 77);
  v4 = init();
  if ((_DWORD)v4)
  {
    v9 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEnableOffWristAuthorization_cold_3();
  }
  else
  {
    strcpy((char *)v12, "cESS\n");
    BYTE8(v12[0]) = a1;
    if (!a2)
      goto LABEL_5;
    if ((unint64_t)CFDataGetLength(a2) < 0x41)
    {
      v14.length = CFDataGetLength(a2);
      v14.location = 0;
      CFDataGetBytes(a2, v14, (UInt8 *)((unint64_t)v12 | 0xD));
      *(_DWORD *)((char *)v12 + 9) = CFDataGetLength(a2);
LABEL_5:
      v5 = IOConnectCallStructMethod(_connect, 0, v12, 0x4DuLL, 0, 0);
      v9 = 0;
      if ((_DWORD)v5)
      {
        v11 = v5;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEEnableOffWristAuthorization_cold_1();
        v9 = v11;
      }
      goto LABEL_6;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEnableOffWristAuthorization_cold_2();
    v9 = 4294967292;
  }
LABEL_6:
  logCmdCall((uint64_t)"SSEEnableOffWristAuthorization", v9, 0, 0, 0, v6, v7, v8);
  return v9;
}

uint64_t SSEIsOffWristAuthorizationEnabled(BOOL *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t outputStructCnt;
  char outputStruct;
  uint64_t inputStruct;

  inputStruct = 0;
  outputStruct = 0;
  outputStructCnt = 0;
  if (a1)
  {
    v2 = init();
    if ((_DWORD)v2)
    {
      v7 = v2;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEIsOffWristAuthorizationEnabled_cold_4();
    }
    else
    {
      strcpy((char *)&inputStruct, "cESS\v");
      outputStructCnt = 1;
      v3 = IOConnectCallStructMethod(_connect, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
      if ((_DWORD)v3)
      {
        v7 = v3;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEIsOffWristAuthorizationEnabled_cold_3();
      }
      else if (outputStructCnt == 1)
      {
        v7 = 0;
        *a1 = outputStruct != 0;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEIsOffWristAuthorizationEnabled_cold_2();
        v7 = 4294967290;
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEIsOffWristAuthorizationEnabled_cold_1();
    v7 = 4294967292;
  }
  logCmdCall((uint64_t)"SSEIsOffWristAuthorizationEnabled", v7, 0, 0, 0, v4, v5, v6);
  return v7;
}

uint64_t SSESetBlessedUser(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD inputStruct[5];

  inputStruct[4] = *MEMORY[0x24BDAC8D0];
  memset(inputStruct, 0, 28);
  if (a2)
  {
    v4 = init();
    if ((_DWORD)v4)
    {
      v9 = v4;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSESetBlessedUser();
    }
    else
    {
      LODWORD(inputStruct[0]) = 1397966179;
      WORD2(inputStruct[0]) = 14;
      LODWORD(inputStruct[1]) = a1;
      *(_OWORD *)((char *)&inputStruct[1] + 4) = *(_OWORD *)a2;
      v5 = IOConnectCallStructMethod(_connect, 0, inputStruct, 0x1CuLL, 0, 0);
      if ((_DWORD)v5)
      {
        v9 = v5;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSESetBlessedUser();
      }
      else
      {
        if (baaInit_onceToken != -1)
          dispatch_once(&baaInit_onceToken, &__block_literal_global_197);
        if (_baaSupportClass)
          objc_msgSend((id)_baaSupportClass, "setBlessedUser:keybagUUID:", a1, a2);
        v9 = 0;
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSESetBlessedUser();
    v9 = 4294967292;
  }
  logCmdCall((uint64_t)"SSESetBlessedUser", v9, 0, 0, 0, v6, v7, v8);
  return v9;
}

uint64_t SSESetEffacementNotificationHandler(void *a1, void *a2)
{
  id v4;
  id v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = a2;
  v6 = init();
  v7 = v6;
  if (v6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSESetEffacementNotificationHandler();
  }
  else
  {
    objc_storeStrong((id *)&_effacemenNtfQueue, a1);
    v8 = _Block_copy(v5);
    v9 = (void *)_effacemenNtfHandler;
    _effacemenNtfHandler = (uint64_t)v8;

  }
  logCmdCall((uint64_t)"SSESetEffacementNotificationHandler", v7, 0, 0, 0, v10, v11, v12);

  return v7;
}

uint64_t SSEGetSignedDeviceData(const __CFData *a1, CFDataRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFDataRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t outputStructCnt;
  _OWORD outputStruct[16];
  int v14;
  _DWORD inputStruct[8];
  uint64_t v16;
  uint64_t v17;
  CFRange v18;

  v17 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  memset(inputStruct, 0, sizeof(inputStruct));
  v14 = 0;
  memset(outputStruct, 0, sizeof(outputStruct));
  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetSignedDeviceData_cold_1();
    goto LABEL_19;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetSignedDeviceData_cold_2();
    goto LABEL_19;
  }
  v4 = init();
  if ((_DWORD)v4)
  {
    v10 = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetSignedDeviceData_cold_8();
    goto LABEL_10;
  }
  inputStruct[0] = 1397966179;
  LOWORD(inputStruct[1]) = 16;
  if ((unint64_t)CFDataGetLength(a1) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetSignedDeviceData_cold_3();
LABEL_19:
    v10 = 4294967292;
    goto LABEL_10;
  }
  v18.length = CFDataGetLength(a1);
  v18.location = 0;
  CFDataGetBytes(a1, v18, (UInt8 *)&inputStruct[2]);
  v16 = 0;
  outputStructCnt = 260;
  v5 = IOConnectCallStructMethod(_connect, 0, inputStruct, 0x28uLL, outputStruct, &outputStructCnt);
  if (!(_DWORD)v5)
  {
    if (outputStructCnt <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetSignedDeviceData_cold_4();
    }
    else
    {
      if (outputStructCnt == LODWORD(outputStruct[0]) + 4)
      {
        v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)outputStruct + 4, LODWORD(outputStruct[0]));
        if (v6)
        {
          v10 = 0;
          *a2 = v6;
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetSignedDeviceData_cold_5();
          v10 = 4294967291;
        }
        goto LABEL_10;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetSignedDeviceData_cold_6();
    }
    v10 = 4294967290;
    goto LABEL_10;
  }
  v10 = v5;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEGetSignedDeviceData_cold_7();
LABEL_10:
  logCmdCall((uint64_t)"SSEGetSignedDeviceData", v10, 0, 0, (uint64_t)&inputStruct[2], v7, v8, v9);
  return v10;
}

uint64_t SSEGetCertificateExpirationDate(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetCertificateExpirationDate_cold_1();
    return 4294967292;
  }
  if (a1 != 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetCertificateExpirationDate_cold_4();
    return 4294967292;
  }
  v3 = SSEIsFeatureSupported(26);
  if ((_DWORD)v3)
  {
    v5 = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetCertificateExpirationDate_cold_3();
  }
  else
  {
    if (baaInit_onceToken != -1)
      dispatch_once(&baaInit_onceToken, &__block_literal_global_197);
    if (_baaSupportClass)
    {
      v4 = objc_msgSend((id)_baaSupportClass, "getCertificateExpirationDate:", &v7);
      if (!(_DWORD)v4)
      {
        v5 = 0;
        *a2 = v7;
        return v5;
      }
      v5 = v4;
    }
    else
    {
      v5 = 4294967290;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetCertificateExpirationDate_cold_2();
  }
  return v5;
}

uint64_t SSEGetCertificate(int a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v9;

  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetCertificate_cold_1();
    return 4294967292;
  }
  if (a1 != 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetCertificate_cold_4();
    return 4294967292;
  }
  v3 = SSEIsFeatureSupported(27);
  if ((_DWORD)v3)
  {
    v5 = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetCertificate_cold_3();
  }
  else
  {
    v9 = 0;
    if (baaInit_onceToken != -1)
      dispatch_once(&baaInit_onceToken, &__block_literal_global_197);
    v4 = (void *)_baaSupportClass;
    if (_baaSupportClass)
    {
      v5 = objc_msgSend((id)_baaSupportClass, "getCertificates:", &v9);
      v4 = v9;
    }
    else
    {
      v5 = 4294967290;
    }
    v6 = v4;
    v7 = v6;
    if ((_DWORD)v5)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetCertificate_cold_2();

    }
    else
    {
      *a2 = v6;
    }
  }
  return v5;
}

uint64_t SSEIssueNewCertificate(int a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1 == 1)
  {
    v1 = SSEIsFeatureSupported(28);
    if ((_DWORD)v1)
    {
      v2 = v1;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEIssueNewCertificate_cold_2();
    }
    else
    {
      v2 = baaIssueNewCertificate();
      if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEIssueNewCertificate_cold_1();
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEIssueNewCertificate_cold_3();
    return 4294967292;
  }
  return v2;
}

uint64_t baaIssueNewCertificate()
{
  if (baaInit_onceToken != -1)
    dispatch_once(&baaInit_onceToken, &__block_literal_global_197);
  if (_baaSupportClass)
    return objc_msgSend((id)_baaSupportClass, "issueNewCertificate");
  else
    return 4294967290;
}

uint64_t SSECreateSecureElementACLRequest(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData **a5, const __CFData **a6)
{
  UInt8 *v12;
  UInt8 *v13;
  UInt8 *v14;
  UInt8 *v15;
  uint64_t v16;
  unint64_t Length;
  unint64_t v18;
  unint64_t v19;
  UInt8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  const __CFAllocator *v26;
  CFDataRef v27;
  CFDataRef v28;
  CFIndex v29;
  const __CFData *v30;
  uint64_t v31;
  size_t outputStructCnt;
  CFRange v34;
  CFRange v35;
  CFRange v36;

  outputStructCnt = 0;
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    return 4294967292;
  }
  v12 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xDB9775F9uLL);
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    return 4294967291;
  }
  v13 = v12;
  v14 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x877EE47CuLL);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    free(v13);
    return 4294967291;
  }
  v15 = v14;
  v16 = init();
  if ((_DWORD)v16)
  {
    v31 = v16;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    goto LABEL_20;
  }
  *(_DWORD *)v13 = 1397966179;
  *((_WORD *)v13 + 2) = 26;
  *((_DWORD *)v13 + 2) = a1;
  Length = CFDataGetLength(a2);
  if (Length >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    goto LABEL_47;
  }
  v34.length = Length;
  v34.location = 0;
  CFDataGetBytes(a2, v34, v13 + 12);
  v18 = CFDataGetLength(a3);
  if (v18 >= 0x3FD5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    goto LABEL_47;
  }
  v19 = v18;
  *((_DWORD *)v13 + 9) = v18;
  v35.location = 0;
  v35.length = v18;
  CFDataGetBytes(a3, v35, v13 + 44);
  v20 = &v13[v19 + 44];
  v21 = CFDataGetLength(a4);
  if (v13 - v20 + 0x4000 < v21)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
LABEL_47:
    v31 = 4294967292;
    goto LABEL_20;
  }
  v22 = v21;
  *((_DWORD *)v13 + 10) = v21;
  v36.location = 0;
  v36.length = v21;
  CFDataGetBytes(a4, v36, v20);
  outputStructCnt = 0x4000;
  v23 = IOConnectCallStructMethod(_connect, 0, v13, &v20[v22] - v13, v15, &outputStructCnt);
  if ((_DWORD)v23)
  {
    v31 = v23;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    goto LABEL_20;
  }
  v24 = outputStructCnt;
  if (outputStructCnt <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    goto LABEL_56;
  }
  if (outputStructCnt > 0x4000)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    goto LABEL_56;
  }
  v25 = *(unsigned int *)v15;
  if (outputStructCnt - 8 < v25)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
LABEL_56:
    v31 = 4294967290;
    goto LABEL_20;
  }
  v26 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v27 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v15 + 8, v25);
  if (!v27)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    v31 = 4294967291;
    goto LABEL_20;
  }
  v28 = v27;
  v29 = *((unsigned int *)v15 + 1);
  if ((uint64_t)(v24 - (*(unsigned int *)v15 + 8)) < v29)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    v31 = 4294967290;
    goto LABEL_66;
  }
  v30 = CFDataCreate(v26, &v15[*(unsigned int *)v15 + 8], v29);
  if (!v30)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSECreateSecureElementACLRequest();
    v31 = 4294967291;
LABEL_66:
    CFRelease(v28);
    goto LABEL_20;
  }
  v31 = 0;
  *a5 = v28;
  *a6 = v30;
LABEL_20:
  free(v13);
  free(v15);
  return v31;
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, int a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFString *a6, const __CFData *a7, unsigned int a8, const __CFData **a9, const __CFData **a10)
{
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t Length;
  int v23;
  unint64_t v24;
  char *v25;
  UInt8 *v26;
  unint64_t v27;
  unint64_t v28;
  UInt8 *v29;
  unint64_t v30;
  unint64_t v31;
  UInt8 *v32;
  unint64_t v33;
  unint64_t v34;
  UInt8 *v35;
  unint64_t v36;
  unint64_t v37;
  UInt8 *v38;
  uint64_t v39;
  size_t v40;
  unint64_t v41;
  const __CFAllocator *v42;
  CFDataRef v43;
  const __CFData *v44;
  CFIndex v45;
  const __CFData *v46;
  uint64_t v47;
  UInt8 *outputStruct;
  size_t outputStructCnt;
  CFRange v51;
  CFRange v52;
  CFRange v53;
  CFRange v54;
  CFRange v55;
  CFRange v56;

  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (a8 - 4 <= 0xFFFFFFFC)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (!a9)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (!a10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEEvaluateSecureElementACL();
    return 4294967292;
  }
  if (a8 < 2 || (v18 = SSEIsFeatureSupported(32), !(_DWORD)v18))
  {
    v19 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0x29CD736uLL);
    if (v19)
    {
      v20 = v19;
      outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xAE84491FuLL);
      if (outputStruct)
      {
        v21 = init();
        if ((_DWORD)v21)
        {
          v47 = v21;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEEvaluateSecureElementACL();
          goto LABEL_73;
        }
        *(_DWORD *)v20 = 1397966179;
        v20[4] = 27;
        v20[5] = a8 > 1;
        Length = CFDataGetLength(a1);
        if (Length >= 0x41)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEEvaluateSecureElementACL();
        }
        else
        {
          v23 = Length;
          v51.location = 0;
          v51.length = Length;
          CFDataGetBytes(a1, v51, (UInt8 *)v20 + 12);
          *((_DWORD *)v20 + 2) = v23;
          *((_DWORD *)v20 + 19) = a2;
          v24 = CFDataGetLength(a3);
          if (v24 >= 0x19)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              SSEEvaluateSecureElementACL();
          }
          else
          {
            v52.length = v24;
            v52.location = 0;
            CFDataGetBytes(a3, v52, (UInt8 *)v20 + 80);
            v25 = v20 + 0x4000;
            if (a8 < 2)
            {
              v26 = (UInt8 *)(v20 + 120);
            }
            else
            {
              v20[120] = a8;
              v26 = (UInt8 *)(v20 + 121);
            }
            v27 = CFDataGetLength(a4);
            if (v25 - (char *)v26 < v27)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                SSEEvaluateSecureElementACL();
            }
            else
            {
              v28 = v27;
              *((_DWORD *)v20 + 26) = v27;
              v53.location = 0;
              v53.length = v27;
              CFDataGetBytes(a4, v53, v26);
              v29 = &v26[v28];
              v30 = CFDataGetLength(a5);
              if (v25 - (char *)v29 < v30)
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  SSEEvaluateSecureElementACL();
              }
              else
              {
                v31 = v30;
                *((_DWORD *)v20 + 27) = v30;
                v54.location = 0;
                v54.length = v30;
                CFDataGetBytes(a5, v54, v29);
                v32 = &v29[v31];
                v33 = CFStringGetLength(a6);
                if (v25 - (char *)v32 >= v33)
                {
                  v34 = v33;
                  v55.location = 0;
                  v55.length = v33;
                  if (CFStringGetBytes(a6, v55, 0x8000100u, 0, 0, v32, v25 - (char *)v32, 0) == v33)
                  {
                    *((_DWORD *)v20 + 28) = v34;
                    v35 = &v32[v34];
                    v36 = CFDataGetLength(a7);
                    if (v25 - (char *)v35 < v36)
                    {
                      v38 = outputStruct;
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        SSEEvaluateSecureElementACL();
                      v47 = 4294967292;
                      goto LABEL_33;
                    }
                    v37 = v36;
                    *((_DWORD *)v20 + 29) = v36;
                    v56.location = 0;
                    v56.length = v36;
                    CFDataGetBytes(a7, v56, v35);
                    outputStructCnt = 0x4000;
                    v38 = outputStruct;
                    v39 = IOConnectCallStructMethod(_connect, 0, v20, &v35[v37] - (UInt8 *)v20, outputStruct, &outputStructCnt);
                    if ((_DWORD)v39)
                    {
                      v47 = v39;
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        SSEEvaluateSecureElementACL();
                      goto LABEL_33;
                    }
                    v40 = outputStructCnt;
                    if (outputStructCnt <= 7)
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        SSEEvaluateSecureElementACL();
                    }
                    else if (outputStructCnt > 0x4000)
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        SSEEvaluateSecureElementACL();
                    }
                    else
                    {
                      v41 = *(unsigned int *)outputStruct;
                      if (outputStructCnt - 8 >= v41)
                      {
                        v42 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
                        v43 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], outputStruct + 8, v41);
                        if (!v43)
                        {
                          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                            SSEEvaluateSecureElementACL();
                          v47 = 4294967291;
                          goto LABEL_33;
                        }
                        v44 = v43;
                        v45 = *((unsigned int *)outputStruct + 1);
                        if ((uint64_t)(v40 - (*(unsigned int *)outputStruct + 8)) < v45)
                        {
                          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                            SSEEvaluateSecureElementACL();
                          v47 = 4294967290;
                        }
                        else
                        {
                          v46 = CFDataCreate(v42, &outputStruct[*(unsigned int *)outputStruct + 8], v45);
                          if (v46)
                          {
                            v47 = 0;
                            *a9 = v44;
                            *a10 = v46;
LABEL_33:
                            free(v20);
                            free(v38);
                            return v47;
                          }
                          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                            SSEEvaluateSecureElementACL();
                          v47 = 4294967291;
                        }
                        CFRelease(v44);
                        goto LABEL_33;
                      }
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        SSEEvaluateSecureElementACL();
                    }
                    v47 = 4294967290;
                    goto LABEL_33;
                  }
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    SSEEvaluateSecureElementACL();
                  v47 = 4294967290;
LABEL_73:
                  v38 = outputStruct;
                  goto LABEL_33;
                }
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  SSEEvaluateSecureElementACL();
              }
            }
          }
        }
        v47 = 4294967292;
        goto LABEL_73;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEEvaluateSecureElementACL();
      free(v20);
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      SSEEvaluateSecureElementACL();
    }
    return 4294967291;
  }
  v47 = v18;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEEvaluateSecureElementACL();
  return v47;
}

uint64_t SSEGetRosePairingInfo(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData **a4)
{
  uint64_t RosePairingInfo;

  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  RosePairingInfo = getRosePairingInfo(a1, a2, 0, 0, a3, a4);
  if ((_DWORD)RosePairingInfo && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEGetRosePairingInfo();
  return RosePairingInfo;
}

uint64_t getRosePairingInfo(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, CFDataRef *a6)
{
  _DWORD *v12;
  _DWORD *v13;
  UInt8 *v14;
  UInt8 *v15;
  uint64_t v16;
  unint64_t Length;
  id v18;
  void *v19;
  unint64_t v20;
  unsigned int v21;
  id v22;
  uint64_t v23;
  CFIndex v24;
  CFDataRef v25;
  uint64_t v26;
  CFDataRef *v28;
  size_t outputStructCnt;
  UInt8 buffer[16];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  CFRange v34;

  v33 = *MEMORY[0x24BDAC8D0];
  outputStructCnt = 0;
  v32 = 0;
  *(_OWORD *)buffer = 0u;
  v31 = 0u;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getRosePairingInfo_cold_1();
    goto LABEL_54;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getRosePairingInfo_cold_2();
LABEL_54:
    v19 = 0;
    v26 = 4294967292;
    goto LABEL_42;
  }
  v12 = malloc_type_calloc(0x4000uLL, 1uLL, 0xAA037781uLL);
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getRosePairingInfo_cold_3();
    goto LABEL_60;
  }
  v13 = v12;
  v14 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xE079FC04uLL);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getRosePairingInfo_cold_4();
    free(v13);
LABEL_60:
    v19 = 0;
    v26 = 4294967291;
    goto LABEL_42;
  }
  v15 = v14;
  v16 = init();
  if ((_DWORD)v16)
  {
    v26 = v16;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getRosePairingInfo_cold_17();
    v19 = 0;
    goto LABEL_41;
  }
  Length = CFDataGetLength(a1);
  if (Length >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getRosePairingInfo_cold_5();
    goto LABEL_83;
  }
  v34.length = Length;
  v34.location = 0;
  CFDataGetBytes(a1, v34, buffer);
  if (a2)
  {
    if (CFDataGetLength(a2) >= 0x100000000)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        getRosePairingInfo_cold_16();
      goto LABEL_83;
    }
    DWORD2(v31) = CFDataGetLength(a2);
  }
  if (a3)
  {
    if (CFDataGetLength(a3) >= 0x100000000)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        getRosePairingInfo_cold_15();
      goto LABEL_83;
    }
    HIDWORD(v31) = CFDataGetLength(a3);
  }
  if (a4)
  {
    if (CFDataGetLength(a4) >= 0x100000000)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        getRosePairingInfo_cold_14();
      goto LABEL_83;
    }
    LODWORD(v32) = CFDataGetLength(a4);
  }
  if (!a5)
  {
LABEL_19:
    v18 = (id)objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithBytes:length:", buffer, 40);
    v19 = v18;
    if (a2)
      objc_msgSend(v18, "appendData:", a2);
    if (a3)
      objc_msgSend(v19, "appendData:", a3);
    if (a4)
      objc_msgSend(v19, "appendData:", a4);
    if (a5)
      objc_msgSend(v19, "appendData:", a5);
    if (!((unint64_t)objc_msgSend(v19, "length") >> 32))
    {
      v28 = a6;
      LODWORD(v20) = 0;
      while (1)
      {
        *v13 = 1397966179;
        *((_WORD *)v13 + 2) = 29;
        v21 = (objc_msgSend(v19, "length", v28, outputStructCnt, *(_QWORD *)buffer, *(_QWORD *)&buffer[8], v31, v32, v33)- (unint64_t)v20) >> 2 > 0xFFA? 16364: objc_msgSend(v19, "length") - v20;
        v13[2] = objc_msgSend(v19, "length");
        v13[3] = v20;
        v13[4] = v21;
        v22 = objc_retainAutorelease(v19);
        objc_msgSend(v22, "bytes");
        __memcpy_chk();
        outputStructCnt = 0x4000;
        v23 = IOConnectCallStructMethod(_connect, 0, v13, v21 + 20, v15, &outputStructCnt);
        if ((_DWORD)v23)
          break;
        if (outputStructCnt <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            getRosePairingInfo_cold_7();
          goto LABEL_49;
        }
        if (outputStructCnt > 0x4000)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            getRosePairingInfo_cold_8();
          goto LABEL_49;
        }
        v20 = v20 + v21;
        if (objc_msgSend(v22, "length") <= v20)
        {
          if (outputStructCnt <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              getRosePairingInfo_cold_9();
          }
          else
          {
            v24 = *(unsigned int *)v15;
            if (outputStructCnt - 4 == v24)
            {
              v25 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v15 + 4, v24);
              if (v25)
              {
                v26 = 0;
                *v28 = v25;
              }
              else
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  getRosePairingInfo_cold_10();
                v26 = 4294967291;
              }
              goto LABEL_40;
            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              getRosePairingInfo_cold_11();
          }
LABEL_49:
          v26 = 4294967290;
          goto LABEL_40;
        }
      }
      v26 = v23;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        getRosePairingInfo_cold_12();
LABEL_40:
      v19 = v22;
      goto LABEL_41;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      getRosePairingInfo_cold_6();
    goto LABEL_84;
  }
  if (CFDataGetLength(a5) < 0x100000000)
  {
    HIDWORD(v32) = CFDataGetLength(a5);
    goto LABEL_19;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    getRosePairingInfo_cold_13();
LABEL_83:
  v19 = 0;
LABEL_84:
  v26 = 4294967292;
LABEL_41:
  free(v13);
  free(v15);
LABEL_42:

  return v26;
}

uint64_t SSEGetRosePairingInfo(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData **a6)
{
  uint64_t RosePairingInfo;

  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetRosePairingInfo();
    return 4294967292;
  }
  RosePairingInfo = getRosePairingInfo(a1, a2, a3, a4, a5, a6);
  if ((_DWORD)RosePairingInfo && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEGetRosePairingInfo();
  return RosePairingInfo;
}

uint64_t SSEGetAttV2AuthKey(const __CFData *a1, const __CFData *a2, CFDataRef *a3)
{
  UInt8 *v6;
  UInt8 *v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  CFDataRef v11;
  uint64_t v12;
  size_t outputStructCnt;
  _BYTE inputStruct[20];
  __int128 v16;
  int v17;
  uint64_t v18;
  CFRange v19;
  CFRange v20;

  v18 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v16 = 0u;
  *(_OWORD *)&inputStruct[4] = 0u;
  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAttV2AuthKey_cold_1();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAttV2AuthKey_cold_2();
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAttV2AuthKey_cold_3();
    return 4294967292;
  }
  v6 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x7290607BuLL);
  if (v6)
  {
    v7 = v6;
    v8 = init();
    if ((_DWORD)v8)
    {
      v12 = v8;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetAttV2AuthKey_cold_11();
      goto LABEL_13;
    }
    strcpy(inputStruct, "cESS#");
    if ((unint64_t)CFDataGetLength(a1) >= 0x19)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetAttV2AuthKey_cold_5();
    }
    else
    {
      v19.length = CFDataGetLength(a1);
      v19.location = 0;
      CFDataGetBytes(a1, v19, &inputStruct[8]);
      if ((unint64_t)CFDataGetLength(a2) < 9)
      {
        v20.length = CFDataGetLength(a2);
        v20.location = 0;
        CFDataGetBytes(a2, v20, (UInt8 *)&v16 + 12);
        outputStructCnt = 0x4000;
        v9 = IOConnectCallStructMethod(_connect, 0, inputStruct, 0x28uLL, v7, &outputStructCnt);
        if ((_DWORD)v9)
        {
          v12 = v9;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetAttV2AuthKey_cold_10();
          goto LABEL_13;
        }
        if (outputStructCnt <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetAttV2AuthKey_cold_7();
        }
        else
        {
          v10 = *(unsigned int *)v7;
          if (outputStructCnt - 4 == v10)
          {
            v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v7 + 4, v10);
            if (v11)
            {
              v12 = 0;
              *a3 = v11;
            }
            else
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                SSEGetAttV2AuthKey_cold_8();
              v12 = 4294967291;
            }
            goto LABEL_13;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSEGetAttV2AuthKey_cold_9();
        }
        v12 = 4294967290;
LABEL_13:
        free(v7);
        return v12;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSEGetAttV2AuthKey_cold_6();
    }
    v12 = 4294967292;
    goto LABEL_13;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEGetAttV2AuthKey_cold_4();
  return 4294967291;
}

uint64_t SSESetSEPubKey(const __CFData *a1, const __CFData *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t Length;
  id v8;
  unint64_t v9;
  unsigned int v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  UInt8 buffer[8];
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  CFRange v20;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buffer = 0;
  v16 = 0;
  v18 = 0;
  v17 = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSESetSEPubKey_cold_1();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSESetSEPubKey_cold_2();
    return 4294967292;
  }
  v4 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0xB0967022uLL);
  if (v4)
  {
    v5 = v4;
    v6 = init();
    if ((_DWORD)v6)
    {
      v13 = v6;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SSESetSEPubKey_cold_8();
    }
    else
    {
      Length = CFDataGetLength(a1);
      if (Length >= 0x19)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSESetSEPubKey_cold_4();
      }
      else
      {
        v20.length = Length;
        v20.location = 0;
        CFDataGetBytes(a1, v20, buffer);
        if (CFDataGetLength(a2) >= 0x100000000)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSESetSEPubKey_cold_5();
        }
        else
        {
          v18 = CFDataGetLength(a2);
          v8 = (id)objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithBytes:length:", buffer, 28);
          objc_msgSend(v8, "appendData:", a2);
          if (!((unint64_t)objc_msgSend(v8, "length") >> 32))
          {
            LODWORD(v9) = 0;
            while (1)
            {
              strcpy(v5, "cESS%");
              v10 = (objc_msgSend(v8, "length") - (unint64_t)v9) >> 2 > 0xFFA
                  ? 16364
                  : objc_msgSend(v8, "length") - v9;
              *((_DWORD *)v5 + 2) = objc_msgSend(v8, "length");
              *((_DWORD *)v5 + 3) = v9;
              *((_DWORD *)v5 + 4) = v10;
              v11 = objc_retainAutorelease(v8);
              objc_msgSend(v11, "bytes");
              __memcpy_chk();
              v12 = IOConnectCallStructMethod(_connect, 0, v5, v10 + 20, 0, 0);
              if ((_DWORD)v12)
                break;
              v9 = v9 + v10;
              if (objc_msgSend(v11, "length") <= v9)
              {

                v13 = 0;
                goto LABEL_15;
              }
            }
            v13 = v12;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              SSESetSEPubKey_cold_7();

            goto LABEL_15;
          }
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            SSESetSEPubKey_cold_6();

        }
      }
      v13 = 4294967292;
    }
LABEL_15:
    free(v5);
    return v13;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSESetSEPubKey_cold_3();
  return 4294967291;
}

uint64_t SSEGetAuthKeySharingState(const __CFData *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t outputStructCnt;
  int outputStruct;
  _BYTE inputStruct[12];
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  CFRange v15;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  *(_QWORD *)&inputStruct[4] = 0;
  v13 = 0;
  v12 = 0;
  outputStruct = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthKeySharingState_cold_1();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthKeySharingState_cold_2();
    return 4294967292;
  }
  v4 = init();
  if (!(_DWORD)v4)
  {
    strcpy(inputStruct, "cESS&");
    if ((unint64_t)CFDataGetLength(a1) < 0x19)
    {
      v15.length = CFDataGetLength(a1);
      v15.location = 0;
      CFDataGetBytes(a1, v15, &inputStruct[8]);
      outputStructCnt = 4;
      v5 = IOConnectCallStructMethod(_connect, 0, inputStruct, 0x20uLL, &outputStruct, &outputStructCnt);
      if ((_DWORD)v5)
      {
        v6 = v5;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEGetAuthKeySharingState_cold_5();
      }
      else if (outputStructCnt == 4)
      {
        v6 = 0;
        *a2 = outputStruct;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SSEGetAuthKeySharingState_cold_4();
        return 4294967290;
      }
      return v6;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEGetAuthKeySharingState_cold_3();
    return 4294967292;
  }
  v6 = v4;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    SSEGetAuthKeySharingState_cold_6();
  return v6;
}

uint64_t SSEPerformAuthKeySharing(const __CFData *a1, const __CFData *a2, const __CFData *a3, CFDataRef *a4, CFDataRef *a5)
{
  UInt8 *v10;
  UInt8 *v11;
  UInt8 *v12;
  UInt8 *v13;
  uint64_t v14;
  unint64_t Length;
  unint64_t v16;
  UInt8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  const __CFAllocator *v23;
  CFDataRef v24;
  CFDataRef v25;
  CFIndex v26;
  CFDataRef v27;
  uint64_t v28;
  size_t outputStructCnt;
  CFRange v31;
  CFRange v32;
  CFRange v33;

  outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_1();
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_2();
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_3();
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_4();
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_5();
    return 4294967292;
  }
  v10 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xD2063E45uLL);
  if (!v10)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_6();
    return 4294967291;
  }
  v11 = v10;
  v12 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x43BFE140uLL);
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_7();
    free(v11);
    return 4294967291;
  }
  v13 = v12;
  v14 = init();
  if ((_DWORD)v14)
  {
    v28 = v14;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_18();
    goto LABEL_20;
  }
  strcpy((char *)v11, "cESS$");
  if ((unint64_t)CFDataGetLength(a1) >= 0x19)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_8();
    goto LABEL_47;
  }
  v31.length = CFDataGetLength(a1);
  v31.location = 0;
  CFDataGetBytes(a1, v31, v11 + 8);
  Length = CFDataGetLength(a2);
  if (Length >= 0x3FD9)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_9();
    goto LABEL_47;
  }
  v16 = Length;
  *((_DWORD *)v11 + 8) = Length;
  v32.location = 0;
  v32.length = Length;
  CFDataGetBytes(a2, v32, v11 + 40);
  v17 = &v11[v16 + 40];
  v18 = CFDataGetLength(a3);
  if (v11 - v17 + 0x4000 < v18)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_10();
LABEL_47:
    v28 = 4294967292;
    goto LABEL_20;
  }
  v19 = v18;
  *((_DWORD *)v11 + 9) = v18;
  v33.location = 0;
  v33.length = v18;
  CFDataGetBytes(a3, v33, v17);
  outputStructCnt = 0x4000;
  v20 = IOConnectCallStructMethod(_connect, 0, v11, &v17[v19] - v11, v13, &outputStructCnt);
  if ((_DWORD)v20)
  {
    v28 = v20;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_17();
    goto LABEL_20;
  }
  v21 = outputStructCnt;
  if (outputStructCnt <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_11();
    goto LABEL_56;
  }
  if (outputStructCnt > 0x4000)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_12();
    goto LABEL_56;
  }
  v22 = *(unsigned int *)v13;
  if (outputStructCnt - 8 < v22)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_13();
LABEL_56:
    v28 = 4294967290;
    goto LABEL_20;
  }
  v23 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v24 = CFDataCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v13 + 8, v22);
  if (!v24)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_14();
    v28 = 4294967291;
    goto LABEL_20;
  }
  v25 = v24;
  v26 = *((unsigned int *)v13 + 1);
  if ((uint64_t)(v21 - (*(unsigned int *)v13 + 8)) < v26)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_15();
    v28 = 4294967290;
    goto LABEL_66;
  }
  v27 = CFDataCreate(v23, &v13[*(unsigned int *)v13 + 8], v26);
  if (!v27)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSEPerformAuthKeySharing_cold_16();
    v28 = 4294967291;
LABEL_66:
    CFRelease(v25);
    goto LABEL_20;
  }
  v28 = 0;
  *a4 = v25;
  *a5 = v27;
LABEL_20:
  free(v11);
  free(v13);
  return v28;
}

uint64_t SSESetAuthKeyRevocationNotificationHandler(void *a1, void *a2)
{
  id v4;
  id v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v4 = a1;
  v5 = a2;
  v6 = init();
  v7 = v6;
  if (v6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      SSESetAuthKeyRevocationNotificationHandler();
  }
  else
  {
    objc_storeStrong((id *)&_authKeyRevocationNtfQueue, a1);
    v8 = _Block_copy(v5);
    v9 = (void *)_authKeyRevocationNtfHandler;
    _authKeyRevocationNtfHandler = (uint64_t)v8;

  }
  return v7;
}

uint64_t SSEAuthorize(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, _DWORD *a7, CFDataRef *a8)
{
  return authorize(0, a1, a2, -1, a3, a4, a5, a6, 0, a7, a8, 0, 0, 0);
}

uint64_t SSEAuthorize(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, _DWORD *a8, CFDataRef *a9, CFDataRef *a10, CFDataRef *a11)
{
  return authorize(1, a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, a11, 0);
}

uint64_t SSEAuthorize(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, char a8, _DWORD *a9, CFDataRef *a10, CFDataRef *a11, CFDataRef *a12)
{
  return authorize(1, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0);
}

uint64_t SSEAuthorizeWithPIN(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, _DWORD *a7, CFDataRef *a8, CFDataRef *a9)
{
  return authorizeWithPIN(0, a1, a2, -1, a3, a4, a5, a6, 0, a7, a8, a9, 0, 0, 0);
}

uint64_t SSEAuthorizeWithPIN(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, _DWORD *a8, CFDataRef *a9, CFDataRef *a10, CFDataRef *a11, CFDataRef *a12)
{
  return authorizeWithPIN(1, a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, a10, a11, a12, 0);
}

uint64_t SSEAuthorizeWithPIN(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, char a8, _DWORD *a9, CFDataRef *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13)
{
  return authorizeWithPIN(1, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 0);
}

uint64_t SSEAuthorizeAndSignECommerceBlob(const __CFData *a1, int a2, const __CFData *a3, char a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, char a9, const __CFData **a10, const __CFData **a11, const __CFData **a12)
{
  return SSEAuthorizeAndSignECommerceBlob(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0);
}

uint64_t SSEGetActivationTimeout(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, unsigned __int16 *a5, const __CFData **a6)
{
  return SSEGetActivationTimeout(-1, a1, a2, a3, a4, a5, a6);
}

uint64_t SSEGetAuthorizationRandom(const __CFData *a1, const __CFData **a2, const __CFData **a3)
{
  return SSEGetAuthorizationRandom(-1, a1, a2, a3);
}

uint64_t SSESetBlessedUser(uint64_t a1)
{
  unsigned __int8 v2[8];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v2 = 0;
  v3 = 0;
  return SSESetBlessedUser(a1, v2);
}

uint64_t SSECreateSecureElementACLRequest(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData **a4, const __CFData **a5)
{
  return SSECreateSecureElementACLRequest(-1, a1, a2, a3, a4, a5);
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFString *a5, const __CFData *a6, const __CFData **a7, const __CFData **a8)
{
  return SSEEvaluateSecureElementACL(a1, -1, a2, a3, a4, a5, a6, 1u, a7, a8);
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFString *a5, const __CFData *a6, unsigned int a7, const __CFData **a8, const __CFData **a9)
{
  return SSEEvaluateSecureElementACL(a1, -1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t SSESetEffacementNotificationHandler(void *a1)
{
  return SSESetEffacementNotificationHandler(0, a1);
}

uint64_t SSESetAuthKeyRevocationNotificationHandler(void *a1)
{
  return SSESetAuthKeyRevocationNotificationHandler(0, a1);
}

void serviceNotificationHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v5;
  NSObject *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD v9[5];
  _QWORD v10[5];

  if (a3 == -469794813)
  {
    v5 = (id)_authKeyRevocationNtfQueue;
    v6 = v5;
    if (!v5)
      v6 = dispatch_get_global_queue(21, 0);
    v9[0] = MEMORY[0x24BDAC760];
    v9[1] = 3221225472;
    v9[2] = __serviceNotificationHandler_block_invoke_3;
    v9[3] = &__block_descriptor_40_e5_v8__0l;
    v9[4] = a4;
    v7 = v9;
    goto LABEL_10;
  }
  if (a3 == -469794814)
  {
    if (!_doNotIssueNewBAACertificate)
    {
      v8 = dispatch_get_global_queue(21, 0);
      dispatch_async(v8, &__block_literal_global_171);

    }
    goto LABEL_14;
  }
  if (a3 != -469794815)
  {
LABEL_14:
    v5 = 0;
    goto LABEL_15;
  }
  v5 = (id)_effacemenNtfQueue;
  v6 = v5;
  if (!v5)
    v6 = dispatch_get_global_queue(21, 0);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 3221225472;
  v10[2] = __serviceNotificationHandler_block_invoke;
  v10[3] = &__block_descriptor_40_e5_v8__0l;
  v10[4] = a4;
  v7 = v10;
LABEL_10:
  dispatch_async(v6, v7);
  if (!v5)

LABEL_15:
}

const char *__isRestoreMode_block_invoke()
{
  const char *result;
  char *__lasts;
  size_t v2;
  char __str[1024];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = 1024;
  result = (const char *)sysctlbyname("kern.bootargs", __str, &v2, 0, 0);
  if (!(_DWORD)result)
  {
    __lasts = 0;
    result = strtok_r(__str, " \t", &__lasts);
    if (result)
    {
      while (1)
      {
        result = (const char *)strcmp(result, "rd=md0");
        if (!(_DWORD)result)
          break;
        result = strtok_r(0, " \t", &__lasts);
        if (!result)
          return result;
      }
      isRestoreMode_restoreMode = 1;
    }
  }
  return result;
}

void *__getMGAnswers_block_invoke()
{
  void *result;
  void *v1;
  uint64_t (*v2)(const __CFString *);
  uint64_t (*v3)(const __CFString *);

  result = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
  if (result)
  {
    v1 = result;
    v2 = (uint64_t (*)(const __CFString *))dlsym(result, "MGGetBoolAnswer");
    if (v2)
    {
      v3 = v2;
      getMGAnswers_cachedHasSE = v2(CFSTR("0dnM19zBqLw5ZPhIo4GEkg"));
      getMGAnswers_cachedIsInternal = v3(CFSTR("InternalBuild"));
    }
    return (void *)dlclose(v1);
  }
  return result;
}

uint64_t __serviceNotificationHandler_block_invoke()
{
  uint64_t result;

  result = _effacemenNtfHandler;
  if (_effacemenNtfHandler)
    return (*(uint64_t (**)(void))(_effacemenNtfHandler + 16))();
  return result;
}

uint64_t __serviceNotificationHandler_block_invoke_3()
{
  uint64_t result;

  result = _authKeyRevocationNtfHandler;
  if (_authKeyRevocationNtfHandler)
    return (*(uint64_t (**)(void))(_authKeyRevocationNtfHandler + 16))();
  return result;
}

const char *logLine(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v9;
  tm *v10;
  FILE *v11;
  const char *v12;
  time_t v13;
  char v14[16];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (_logFile)
  {
    v9 = result;
    *(_OWORD *)v14 = 0u;
    v15 = 0u;
    v13 = time(0);
    v10 = localtime(&v13);
    strftime(v14, 0x20uLL, "%F %T (%z)", v10);
    v11 = (FILE *)_logFile;
    v12 = getprogname();
    fprintf(v11, "%s [%s]: ", v14, v12);
    vfprintf((FILE *)_logFile, v9, &a9);
    fputs("\n", (FILE *)_logFile);
    return (const char *)fflush((FILE *)_logFile);
  }
  return result;
}

uint64_t logState(uint64_t result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t i;
  size_t outputStructCnt;
  __int128 outputStruct;
  __int128 v7;
  __int128 v8;
  uint64_t inputStruct;

  if (_logFile)
  {
    v3 = (_DWORD *)result;
    inputStruct = 0x953534563;
    v7 = 0u;
    v8 = 0u;
    outputStruct = 0u;
    outputStructCnt = 48;
    result = IOConnectCallStructMethod(_connect, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!(_DWORD)result)
    {
      if (v3)
        fprintf((FILE *)_logFile, "\tuserID        = %u\n", *v3);
      if (a2)
      {
        fwrite("\tseid          = ", 0x11uLL, 1uLL, (FILE *)_logFile);
        for (i = 0; i != 24; ++i)
          fprintf((FILE *)_logFile, "%02x", *(unsigned __int8 *)(a2 + i));
        fputs("\n", (FILE *)_logFile);
      }
      fprintf((FILE *)_logFile, "\tsseKey hash   = %016llx\n", (_QWORD)outputStruct);
      fprintf((FILE *)_logFile, "\tauthRand hash = %016llx\n", *((_QWORD *)&outputStruct + 1));
      fprintf((FILE *)_logFile, "\tsubcounter    = %llu\n", (_QWORD)v7);
      fprintf((FILE *)_logFile, "\tentropy hash  = %016llx\n", *((_QWORD *)&v7 + 1));
      fprintf((FILE *)_logFile, "\tkeybag hash   = %016llx\n", (_QWORD)v8);
      fprintf((FILE *)_logFile, "\tnoPasscodeCnt = %u\n", DWORD2(v8));
      return fflush((FILE *)_logFile);
    }
  }
  return result;
}

void __baaInit_block_invoke()
{
  Class Class;

  if (isRestoreMode_onceToken != -1)
    dispatch_once(&isRestoreMode_onceToken, &__block_literal_global_160);
  if ((isRestoreMode_restoreMode & 1) == 0)
  {
    init();
    if (_hasSSE)
    {
      if (isEntitledForBAA_onceToken != -1)
        dispatch_once(&isEntitledForBAA_onceToken, &__block_literal_global_203);
      if (isEntitledForBAA_entitled == 1)
      {
        if (dlopen("/usr/lib/libAppleSSEExt.dylib", 1))
        {
          Class = objc_getClass("BAASupport");
          _baaSupportClass = (uint64_t)Class;
          if (!Class)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              __baaInit_block_invoke_cold_2();
            Class = (Class)_baaSupportClass;
          }
          -[objc_class setDelegate:](Class, "setDelegate:", objc_opt_class());
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          __baaInit_block_invoke_cold_1();
        }
      }
    }
  }
}

void __isEntitledForBAA_block_invoke()
{
  id v0;
  id v1;
  int v2;
  void *v3;
  void *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  const void *v7;
  uint64_t (*v8)(const void *, const __CFString *, _QWORD);
  uint64_t (*v9)(const void *, const __CFString *, _QWORD);
  void *v10;
  void *v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = (id)objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v1 = (id)objc_msgSend(v0, "processName");
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("nfcd"));

  if (v2)
  {
    isEntitledForBAA_entitled = 1;
  }
  else
  {
    v3 = dlopen("/System/Library/Frameworks/Security.framework/Security", 1);
    if (v3)
    {
      v4 = v3;
      v5 = (uint64_t (*)(_QWORD))dlsym(v3, "SecTaskCreateFromSelf");
      if (v5)
      {
        v6 = v5(*MEMORY[0x24BDBD240]);
        if (v6)
        {
          v7 = (const void *)v6;
          v8 = (uint64_t (*)(const void *, const __CFString *, _QWORD))dlsym(v4, "SecTaskCopyValueForEntitlement");
          if (v8)
          {
            v9 = v8;
            v10 = (void *)v8(v7, CFSTR("com.apple.private.applesse.allow"), 0);
            v11 = (void *)v9(v7, CFSTR("com.apple.private.applesse.baa"), 0);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              if (objc_msgSend(v10, "BOOLValue"))
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  if (objc_msgSend(v11, "BOOLValue"))
                    isEntitledForBAA_entitled = 1;
                }
              }
            }

          }
          CFRelease(v7);
        }
      }
      dlclose(v4);
    }
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109120;
    v12[1] = isEntitledForBAA_entitled;
    _os_log_impl(&dword_20A048000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "isEntitledForBAA(): entitled = %u", (uint8_t *)v12, 8u);
  }
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

void SSEIsFeatureSupported_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIsFeatureSupported_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIsFeatureSupported_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIsFeatureSupported_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetVersion_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetVersion_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetVersion_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetVersion_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getDeviceFeatures_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getDeviceFeatures_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getDeviceFeatures_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getDeviceFeatures_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getDeviceFeatures_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void init_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void init_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void init_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void init_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void init_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetHostChallenge_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetHostChallenge_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetHostChallenge_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetHostChallenge_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetHostChallenge_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_21()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorize_cold_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_21()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_22()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void authorizeWithPIN_cold_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEAuthorizeAndSignECommerceBlob()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getCertificatesFromBuffer_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEAuthorizeAndSignAPDU()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetActivationTimeout()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEUseEntangledAuthorizationRandom_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEUseEntangledAuthorizationRandom_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAuthorizationRandom()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetEntangledAuthorizationRandom_cold_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEEffaceAuthorizationRandom_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEEffaceAuthorizationRandom_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEEnableOffWristAuthorization_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEEnableOffWristAuthorization_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEEnableOffWristAuthorization_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIsOffWristAuthorizationEnabled_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIsOffWristAuthorizationEnabled_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIsOffWristAuthorizationEnabled_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIsOffWristAuthorizationEnabled_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetBlessedUser()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetEffacementNotificationHandler()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetSignedDeviceData_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificateExpirationDate_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificateExpirationDate_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificateExpirationDate_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificateExpirationDate_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificate_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificate_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificate_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetCertificate_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIssueNewCertificate_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIssueNewCertificate_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEIssueNewCertificate_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSECreateSecureElementACLRequest()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEEvaluateSecureElementACL()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetRosePairingInfo()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void getRosePairingInfo_cold_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAttV2AuthKey_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, 2u);
  OUTLINED_FUNCTION_4();
}

void SSESetSEPubKey_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAuthKeySharingState_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAuthKeySharingState_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAuthKeySharingState_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAuthKeySharingState_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAuthKeySharingState_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEGetAuthKeySharingState_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSEPerformAuthKeySharing_cold_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void SSESetAuthKeyRevocationNotificationHandler()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void __baaInit_block_invoke_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void __baaInit_block_invoke_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1(&dword_20A048000, MEMORY[0x24BDACB70], v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

uint64_t sub_20A0E0584()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_20A0E0590()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_20A0E059C()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_20A0E05A8()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t sub_20A0E05B4()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t sub_20A0E05C0()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t sub_20A0E05CC()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t sub_20A0E05D8()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t sub_20A0E05E4()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t sub_20A0E05F0()
{
  return MEMORY[0x24BDCCA60]();
}

uint64_t sub_20A0E05FC()
{
  return MEMORY[0x24BDCCA88]();
}

uint64_t sub_20A0E0608()
{
  return MEMORY[0x24BDCCA90]();
}

uint64_t sub_20A0E0614()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_20A0E0620()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_20A0E062C()
{
  return MEMORY[0x24BDCDBE0]();
}

uint64_t sub_20A0E0638()
{
  return MEMORY[0x24BDCDC90]();
}

uint64_t sub_20A0E0644()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_20A0E0650()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_20A0E065C()
{
  return MEMORY[0x24BDCDCD8]();
}

uint64_t sub_20A0E0668()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_20A0E0674()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_20A0E0680()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_20A0E068C()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_20A0E0698()
{
  return MEMORY[0x24BDCE9B8]();
}

uint64_t sub_20A0E06A4()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_20A0E06B0()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_20A0E06BC()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t sub_20A0E06C8()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_20A0E06D4()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_20A0E06E0()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t sub_20A0E06EC()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t sub_20A0E06F8()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t sub_20A0E0704()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t sub_20A0E0710()
{
  return MEMORY[0x24BEE73C0]();
}

uint64_t sub_20A0E071C()
{
  return MEMORY[0x24BEE7420]();
}

uint64_t sub_20A0E0728()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_20A0E0734()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_20A0E0740()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_20A0E074C()
{
  return MEMORY[0x24BEE64E8]();
}

uint64_t sub_20A0E0758()
{
  return MEMORY[0x24BEE6520]();
}

uint64_t sub_20A0E0764()
{
  return MEMORY[0x24BEE6530]();
}

uint64_t sub_20A0E0770()
{
  return MEMORY[0x24BEE6578]();
}

uint64_t sub_20A0E077C()
{
  return MEMORY[0x24BEE65A0]();
}

uint64_t sub_20A0E0788()
{
  return MEMORY[0x24BEE65A8]();
}

uint64_t sub_20A0E0794()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t sub_20A0E07A0()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_20A0E07AC()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_20A0E07B8()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_20A0E07C4()
{
  return MEMORY[0x24BEE0350]();
}

uint64_t sub_20A0E07D0()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_20A0E07DC()
{
  return MEMORY[0x24BEE75B8]();
}

uint64_t sub_20A0E07E8()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_20A0E07F4()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_20A0E0800()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_20A0E080C()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_20A0E0818()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_20A0E0824()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_20A0E0830()
{
  return MEMORY[0x24BEE0A20]();
}

uint64_t sub_20A0E083C()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_20A0E0848()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_20A0E0854()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_20A0E0860()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_20A0E086C()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_20A0E0878()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_20A0E0884()
{
  return MEMORY[0x24BEE1018]();
}

uint64_t sub_20A0E0890()
{
  return MEMORY[0x24BEE1098]();
}

uint64_t sub_20A0E089C()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_20A0E08A8()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_20A0E08B4()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_20A0E08C0()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_20A0E08CC()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_20A0E08D8()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_20A0E08E4()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_20A0E08F0()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_20A0E08FC()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_20A0E0908()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_20A0E0914()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_20A0E0920()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_20A0E092C()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_20A0E0938()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_20A0E0944()
{
  return MEMORY[0x24BDCFCC8]();
}

uint64_t sub_20A0E0950()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_20A0E095C()
{
  return MEMORY[0x24BEE15E8]();
}

uint64_t sub_20A0E0968()
{
  return MEMORY[0x24BDCFD18]();
}

uint64_t sub_20A0E0974()
{
  return MEMORY[0x24BDCFD28]();
}

uint64_t sub_20A0E0980()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_20A0E098C()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_20A0E0998()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_20A0E09A4()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_20A0E09B0()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_20A0E09BC()
{
  return MEMORY[0x24BEE57B0]();
}

uint64_t sub_20A0E09C8()
{
  return MEMORY[0x24BDD00F8]();
}

uint64_t sub_20A0E09D4()
{
  return MEMORY[0x24BDD0170]();
}

uint64_t sub_20A0E09E0()
{
  return MEMORY[0x24BDD0180]();
}

uint64_t sub_20A0E09EC()
{
  return MEMORY[0x24BDD0190]();
}

uint64_t sub_20A0E09F8()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_20A0E0A04()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_20A0E0A10()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_20A0E0A1C()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_20A0E0A28()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t sub_20A0E0A34()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_20A0E0A40()
{
  return MEMORY[0x24BEE20C0]();
}

uint64_t sub_20A0E0A4C()
{
  return MEMORY[0x24BEE20D8]();
}

uint64_t sub_20A0E0A58()
{
  return MEMORY[0x24BEE20E8]();
}

uint64_t sub_20A0E0A64()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_20A0E0A70()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_20A0E0A7C()
{
  return MEMORY[0x24BEE22D8]();
}

uint64_t sub_20A0E0A88()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_20A0E0A94()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_20A0E0AA0()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_20A0E0AAC()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_20A0E0AB8()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_20A0E0AC4()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_20A0E0AD0()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_20A0E0ADC()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_20A0E0AE8()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_20A0E0AF4()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_20A0E0B00()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_20A0E0B0C()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_20A0E0B18()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_20A0E0B24()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_20A0E0B30()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_20A0E0B3C()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_20A0E0B48()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_20A0E0B54()
{
  return MEMORY[0x24BEE2EA0]();
}

uint64_t sub_20A0E0B60()
{
  return MEMORY[0x24BEE2EB8]();
}

uint64_t sub_20A0E0B6C()
{
  return MEMORY[0x24BEE2EC0]();
}

uint64_t sub_20A0E0B78()
{
  return MEMORY[0x24BEE2ED0]();
}

uint64_t sub_20A0E0B84()
{
  return MEMORY[0x24BEE2ED8]();
}

uint64_t sub_20A0E0B90()
{
  return MEMORY[0x24BEE2EE0]();
}

uint64_t sub_20A0E0B9C()
{
  return MEMORY[0x24BEE2EE8]();
}

uint64_t sub_20A0E0BA8()
{
  return MEMORY[0x24BEE2F00]();
}

uint64_t sub_20A0E0BB4()
{
  return MEMORY[0x24BEE2F38]();
}

uint64_t sub_20A0E0BC0()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_20A0E0BCC()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_20A0E0BD8()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_20A0E0BE4()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_20A0E0BF0()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_20A0E0BFC()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_20A0E0C08()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_20A0E0C14()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_20A0E0C20()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_20A0E0C2C()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_20A0E0C38()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_20A0E0C44()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_20A0E0C50()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_20A0E0C5C()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_20A0E0C68()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_20A0E0C74()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_20A0E0C80()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_20A0E0C8C()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_20A0E0C98()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_20A0E0CA4()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_20A0E0CB0()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_20A0E0CBC()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_20A0E0CC8()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_20A0E0CD4()
{
  return MEMORY[0x24BEE3948]();
}

uint64_t sub_20A0E0CE0()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_20A0E0CEC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_20A0E0CF8()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_20A0E0D04()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t sub_20A0E0D10()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_20A0E0D1C()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_20A0E0D28()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_20A0E0D34()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_20A0E0D40()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_20A0E0D4C()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_20A0E0D58()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_20A0E0D64()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_20A0E0D70()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_20A0E0D7C()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_20A0E0D88()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_20A0E0D94()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_20A0E0DA0()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_20A0E0DAC()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_20A0E0DB8()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_20A0E0DC4()
{
  return MEMORY[0x24BEE4A10]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC358](data, *(_QWORD *)&len, md);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x24BDBBCE8](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

uint64_t DERDecodeItem()
{
  return MEMORY[0x24BED8CB0]();
}

uint64_t DERDecodeSequenceContentWithBlock()
{
  return MEMORY[0x24BED8CB8]();
}

uint64_t DERDecodeSequenceWithBlock()
{
  return MEMORY[0x24BED8CC0]();
}

uint64_t DERLengthOfEncodedSequence()
{
  return MEMORY[0x24BED8CC8]();
}

uint64_t DERParseInteger()
{
  return MEMORY[0x24BED8CD0]();
}

uint64_t Find()
{
  return MEMORY[0x24BED8CD8]();
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x24BDD7F08](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x24BDD8690](*(_QWORD *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
  MEMORY[0x24BDD8698](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
  MEMORY[0x24BDD86B0](notify, queue);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x24BDD8958](notifyPort, *(_QWORD *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x24BDD8970](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x24BDD89B8](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x24BED8470]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

uint64_t SESCreateAndLogError()
{
  return MEMORY[0x24BED8CF0]();
}

uint64_t SESDefaultLogObject()
{
  return MEMORY[0x24BED8CF8]();
}

uint64_t SESEnsureError()
{
  return MEMORY[0x24BED8D00]();
}

uint64_t SecAccessControlCreate()
{
  return MEMORY[0x24BDE8790]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x24BDE87A0](allocator, protection, flags, error);
}

uint64_t SecAccessControlGetConstraints()
{
  return MEMORY[0x24BDE87B0]();
}

uint64_t SecAccessControlSetConstraints()
{
  return MEMORY[0x24BDE87C0]();
}

OSStatus SecCertificateCopyCommonName(SecCertificateRef certificate, CFStringRef *commonName)
{
  return MEMORY[0x24BDE8828](certificate, commonName);
}

uint64_t SecCertificateCopyExtensionValue()
{
  return MEMORY[0x24BDE8868]();
}

uint64_t SecCertificateCopyIssuerSummary()
{
  return MEMORY[0x24BDE8880]();
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x24BDE8888](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x24BDE8918](allocator, data);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x24BDE8A80](query);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8AA8](key, error);
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x24BDE8AC0]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x24BDE8B30](parameters, error);
}

uint64_t TCCAccessCopyInformationForBundleId()
{
  return MEMORY[0x24BEB3780]();
}

uint64_t Transform()
{
  return MEMORY[0x24BED8D10]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _CFPreferencesFlushCachesForIdentifier()
{
  return MEMORY[0x24BDBD030]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t encodeSequenceSpec()
{
  return MEMORY[0x24BED8D18]();
}

uint64_t DERParseSequenceSpec()
{
  return MEMORY[0x24BED8D20]();
}

{
  return MEMORY[0x24BED8D28]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x24BDAD990](a1, a2);
}

Protocol **__cdecl class_copyProtocolList(Class cls, unsigned int *outCount)
{
  return (Protocol **)MEMORY[0x24BEDCE80](cls, outCount);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x24BDADF18](object);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x24BDADFE0](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

int dlclose(void *__handle)
{
  return MEMORY[0x24BDAE060](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

uint64_t getPublicKeyBytes()
{
  return MEMORY[0x24BED8D30]();
}

uint64_t getSecKeyPublicBytes()
{
  return MEMORY[0x24BED8D38]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x24BDAE6E8]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x24BDAF138](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x24BDAF148](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x24BDAF160](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x24BDAF168](name, out_token);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x24BEDD020](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3E0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x24BDAF2F8]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x24BEDD4F0](p);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x24BDAFFF8](__str, __sep, __lasts);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x24BEE7198]();
}

uint64_t swift_asyncLet_finish()
{
  return MEMORY[0x24BEE71A0]();
}

uint64_t swift_asyncLet_get_throwing()
{
  return MEMORY[0x24BEE71B0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x24BEE4ED8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x24BEE4F20]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x24BEE4FB8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x24BEE4FC0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x24BEE4FE0]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x24BEE4FE8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x24BDB00F8](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

uint64_t tcc_authorization_record_get_authorization_right()
{
  return MEMORY[0x24BEB39B0]();
}

uint64_t tcc_authorization_record_get_subject_identity()
{
  return MEMORY[0x24BEB39D0]();
}

uint64_t tcc_identity_get_identifier()
{
  return MEMORY[0x24BEB39F8]();
}

uint64_t tcc_server_create()
{
  return MEMORY[0x24BEB3A20]();
}

uint64_t tcc_server_message_get_authorization_records_by_service()
{
  return MEMORY[0x24BEB3A30]();
}

uint64_t tcc_service_singleton_for_CF_name()
{
  return MEMORY[0x24BEB3A50]();
}

time_t time(time_t *a1)
{
  return MEMORY[0x24BDB0240](a1);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x24BDB0370](a1, a2, a3);
}

