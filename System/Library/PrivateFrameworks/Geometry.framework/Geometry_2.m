uint64_t geom::catmull_clark_vertex_evaluator<double>::compute_average_face_normal@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t v5;
  float64x2_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v18;
  float64x2_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  int64x2_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  int64x2_t v42;

  v3 = *(unsigned int *)(result + 4);
  v4 = (float64x2_t *)(a2 + 32 * v3);
  v6 = *v4;
  v5 = v4[1];
  v7 = *(unsigned int **)(result + 16);
  v8 = *(_QWORD *)(result + 32);
  v9 = *v7;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 1;
    while (1)
    {
      v12 = *(_DWORD *)(v8 + 4 * v10++);
      if (v12 == (_DWORD)v3)
        break;
      if (v9 == v10)
        goto LABEL_8;
    }
    v11 = v10;
  }
  else
  {
    v11 = 1;
  }
LABEL_8:
  v13 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v8 + 4 * (v11 % v9)));
  v14 = vsubq_f64(v13[1], v5);
  v15 = vsubq_f64(*v13, v6);
  v16 = *(_QWORD *)(result + 24);
  v17 = 0uLL;
  if (v16 < 2)
  {
    v27 = v15;
    v26 = v14;
    v19 = 0uLL;
  }
  else
  {
    v18 = 1;
    v19 = 0uLL;
    do
    {
      v20 = v9;
      v21 = v8 + 4 * v9;
      LODWORD(v9) = v7[v18];
      v22 = (v9 - v20);
      if ((_DWORD)v22)
      {
        v23 = 0;
        while (*(_DWORD *)(v21 + 4 * v23) != (_DWORD)v3)
        {
          if (v22 == ++v23)
            goto LABEL_14;
        }
        v24 = (v23 + 1);
      }
      else
      {
LABEL_14:
        v24 = 1;
      }
      v25 = (float64x2_t *)(a2
                          + 32
                          * *(unsigned int *)(v21
                                            + 4
                                            * (v24 - (v24 / v22) * (unint64_t)v22)));
      v26 = vsubq_f64(v25[1], v5);
      v27 = vsubq_f64(*v25, v6);
      v28.f64[0] = v26.f64[0];
      v28.f64[1] = v27.f64[0];
      v29 = vnegq_f64(v14);
      v14.f64[1] = v15.f64[0];
      *(_QWORD *)&v29.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v29, v27, 1), v26, v15, 1);
      v30 = (int64x2_t)vmlaq_f64(vmulq_f64(v28, vnegq_f64(v15)), v27, v14);
      *(_QWORD *)&v29.f64[1] = v30.i64[0];
      v17 = vaddq_f64(v17, v29);
      v19 = vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64(v30, 1));
      ++v18;
      v15 = v27;
      v14 = v26;
    }
    while (v18 != *(_QWORD *)(result + 24));
  }
  if (*(_BYTE *)result)
  {
    v31 = v16 - 1;
    if ((_DWORD)v16 == 1)
      v32 = 0;
    else
      v32 = v7[(v16 - 2)];
    v33 = v8 + 4 * v32;
    v34 = v7[v31] - v32;
    if ((_DWORD)v34)
    {
      v35 = 0;
      while (*(_DWORD *)(v33 + 4 * v35) != (_DWORD)v3)
      {
        if (v34 == ++v35)
          goto LABEL_27;
      }
      v36 = v35;
    }
    else
    {
LABEL_27:
      v36 = 0;
    }
    v37 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v33 + 4 * ((v34 + v36 - 1) % v34)));
    v38 = vsubq_f64(*v37, v6);
    v39 = vsubq_f64(v37[1], v5);
    v40.f64[0] = v39.f64[0];
    v40.f64[1] = v38.f64[0];
    *(_QWORD *)&v41.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v26), v38, 1), v39, v27, 1);
    v26.f64[1] = v27.f64[0];
    v42 = (int64x2_t)vmlaq_f64(vmulq_f64(v40, vnegq_f64(v27)), v38, v26);
    *(_QWORD *)&v41.f64[1] = v42.i64[0];
    v17 = vaddq_f64(v17, v41);
    v19 = vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64(v42, 1));
  }
  *a3 = v17;
  a3[1] = v19;
  return result;
}

void geom::catmull_clark_vertex_evaluator<double>::compute_xor_boundary_tangents(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t v11;
  unsigned int v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  double v35;
  __double2 v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t *v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  double v47;
  double v48;
  unint64_t v49;
  double v50;
  float64x2_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t *v61;
  float64x2_t *v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  unint64_t v66;
  float64x2_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  __double2 v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;

  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 12);
  v9 = (float64x2_t *)(a2 + 32 * v7);
  v10 = (float64x2_t *)(a2 + 32 * v8);
  v11 = vsubq_f64(v9[1], v10[1]);
  *a3 = vsubq_f64(*v9, *v10);
  a3[1] = v11;
  v12 = *(_DWORD *)(a1 + 24);
  if (v12 == 2)
  {
    v27 = *(_QWORD *)(a1 + 32);
    v28 = **(unsigned int **)(a1 + 16);
    v29 = *(unsigned int *)(a1 + 4);
    if ((_DWORD)v28)
    {
      v30 = 0;
      while (*(_DWORD *)(v27 + 4 * v30) != (_DWORD)v29)
      {
        if (v28 == ++v30)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      v30 = 0;
    }
    v31 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v27 + 4 * ((v28 + v30 - 1) % v28)));
    v32 = *v31;
    v33 = v31[1];
    v34 = (float64x2_t *)(a2 + 32 * v29);
    v25 = vsubq_f64(v33, v34[1]);
    v26 = vsubq_f64(v32, *v34);
    goto LABEL_35;
  }
  if (v12 == 1)
  {
    v13 = (float64x2_t *)(a2 + 32 * v7);
    v15 = *v13;
    v14 = v13[1];
    v16 = (float64x2_t *)(a2 + 32 * v8);
    v17 = vaddq_f64(v15, *v16);
    v18 = vaddq_f64(v14, v16[1]);
    v19 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 4));
    __asm { FMOV            V4.2D, #-2.0 }
    v25 = vmlaq_f64(v18, _Q4, v19[1]);
    v26 = vmlaq_f64(v17, _Q4, *v19);
LABEL_35:
    *a4 = v26;
    a4[1] = v25;
    return;
  }
  if (!*(_BYTE *)(a1 + 2))
  {
    v61 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 8));
    v62 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 12));
    v63 = vsubq_f64(v61[1], v62[1]);
    *a3 = vsubq_f64(*v61, *v62);
    a3[1] = v63;
    LODWORD(v63.f64[0]) = *(_DWORD *)(a1 + 24);
    v64 = 3.14159265 / (double)*(unint64_t *)&v63.f64[0];
    v65 = 0uLL;
    *a4 = 0u;
    a4[1] = 0u;
    if ((*(_DWORD *)(a1 + 24) & 0xFFFFFFFE) != 0)
    {
      v66 = 1;
      v67 = 0uLL;
      do
      {
        v68 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v66);
        v69 = *(v68 - 1);
        v70 = *(_QWORD *)(a1 + 32) + 4 * v69;
        v71 = (*v68 - v69);
        v83 = v67;
        v86 = v65;
        if ((_DWORD)v71)
        {
          v72 = 0;
          while (*(_DWORD *)(v70 + 4 * v72) != *(_DWORD *)(a1 + 4))
          {
            if (v71 == ++v72)
              goto LABEL_29;
          }
          v73 = (v72 + 1);
        }
        else
        {
LABEL_29:
          v73 = 1;
        }
        v74 = (float64x2_t *)(a2
                            + 32
                            * *(unsigned int *)(v70
                                              + 4
                                              * (v73 - (v73 / v71) * (unint64_t)v71)));
        v75.f64[0] = sin(v64 * (double)v66);
        v65 = vmlaq_n_f64(v86, *v74, v75.f64[0]);
        v67 = vmlaq_f64(v83, v74[1], v75);
        *a4 = v65;
        a4[1] = v67;
        ++v66;
      }
      while (v66 < *(unsigned int *)(a1 + 24));
    }
    else
    {
      v67 = 0uLL;
    }
    v84 = v67;
    v87 = v65;
    v77 = __sincos_stret(v64);
    v76.f64[0] = v77.__sinval;
    v78.f64[0] = v77.__cosval * 2.0 + -2.0;
    v79 = vmulq_n_f64(v87, v78.f64[0]);
    v80 = vmulq_f64(v78, v84);
    *a4 = v79;
    a4[1] = v80;
    v25 = vmlaq_f64(v80, vaddq_f64(v61[1], v62[1]), v76);
    v26 = vmlaq_n_f64(v79, vaddq_f64(*v61, *v62), v77.__sinval);
    goto LABEL_35;
  }
  v35 = (double)v12;
  v36 = __sincos_stret(3.14159265 / (double)v12);
  v37 = v36.__cosval + (double)(3 * v12);
  v38.f64[0] = v36.__sinval * -4.0 / v37;
  v39.f64[0] = -((v36.__cosval * 2.0 + 1.0) * sqrt(v36.__cosval + 1.0)) / (v37 * sqrt(1.0 - v36.__cosval));
  v40 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 4));
  v42 = *v40;
  v41 = v40[1];
  v43 = (float64x2_t *)(a2 + 32 * v8);
  v44 = vmlaq_n_f64(vmulq_n_f64(*v43, v39.f64[0]), v42, v38.f64[0]);
  v45 = vmlaq_f64(vmulq_f64(v39, v43[1]), v41, v38);
  *a4 = v44;
  a4[1] = v45;
  if (*(_DWORD *)(a1 + 24))
  {
    v46 = 0;
    v47 = 0.0;
    v48 = 1.0 / v37;
    do
    {
      v81 = v44;
      v82 = v39;
      v85 = v45;
      v49 = v46 + 1;
      v50 = sin((double)(v46 + 1) * 3.14159265 / v35);
      if (v46)
      {
        v52 = *(_QWORD *)(a1 + 16);
        v53 = *(_DWORD *)(v52 + 4 * v46 - 4);
      }
      else
      {
        v53 = 0;
        v52 = *(_QWORD *)(a1 + 16);
      }
      v54 = *(_QWORD *)(a1 + 32) + 4 * v53;
      v55 = *(_DWORD *)(v52 + 4 * v46) - v53;
      if ((_DWORD)v55)
      {
        v56 = 0;
        while (*(_DWORD *)(v54 + 4 * v56) != *(_DWORD *)(a1 + 4))
        {
          if (v55 == ++v56)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        LOBYTE(v56) = 0;
      }
      v51.f64[0] = v48 * (v47 + v50);
      v57 = *(unsigned int *)(v54 + 4 * (((_BYTE)v56 + 1) & 3));
      v58 = *(unsigned int *)(v54 + 4 * (((_BYTE)v56 + 2) & 3));
      v59 = (float64x2_t *)(a2 + 32 * v57);
      v60 = (float64x2_t *)(a2 + 32 * v58);
      v44 = vmlaq_n_f64(vmlaq_n_f64(v81, *v59, v82.f64[0]), *v60, v51.f64[0]);
      v45 = vmlaq_f64(vmlaq_f64(v85, v59[1], v82), v60[1], v51);
      *a4 = v44;
      a4[1] = v45;
      v39.f64[0] = v48 * (v50 * 4.0);
      ++v46;
      v47 = v50;
    }
    while (v49 < *(unsigned int *)(a1 + 24));
  }
}

void geom::catmull_clark_vertex_evaluator<double>::compute_xor_tangents(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  unsigned int v8;
  double v9;
  double v10;
  float64x2_t v11;
  unsigned int v12;
  unsigned int *v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v16;
  unsigned int v17;
  float64x2_t *v18;
  unsigned int v19;
  float v20;
  float v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  unsigned int v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54[2];
  float64x2_t v55[2];

  *a3 = 0u;
  a3[1] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  v8 = *(_DWORD *)(a1 + 24);
  v9 = cos(6.28318531 / (double)v8);
  v10 = cos(3.14159265 / (double)v8);
  geom::catmull_clark_vertex_evaluator<double>::edge_point(a1, 0, a2, v55);
  v12 = **(_DWORD **)(a1 + 16);
  if (v12)
  {
    v13 = *(unsigned int **)(a1 + 32);
    v14 = 0uLL;
    v15 = **(unsigned int **)(a1 + 16);
    v16 = 0uLL;
    do
    {
      v17 = *v13++;
      v18 = (float64x2_t *)(a2 + 32 * v17);
      v11 = *v18;
      v16 = vaddq_f64(v16, v18[1]);
      v14 = vaddq_f64(v14, *v18);
      --v15;
    }
    while (v15);
    if (!v8)
      return;
  }
  else
  {
    v16 = 0uLL;
    v14 = 0uLL;
    if (!v8)
      return;
  }
  v19 = 0;
  v11.f64[0] = (double)v12;
  v20 = v9;
  v21 = (float)(v20 + 1.0) + v10 * sqrtf((float)(v20 + 9.0) + (float)(v20 + 9.0));
  v23 = v55[0];
  v22 = v55[1];
  v24 = vdivq_f64(v16, v11);
  v25 = vdivq_f64(v14, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v12), 0));
  v26 = v21;
  v27 = 1.0;
  do
  {
    v50 = v23;
    v51 = v25;
    v52 = v24;
    v53 = v22;
    v28 = v19 + 1;
    if (v19 + 1 == v8)
      v29 = 0;
    else
      v29 = v19 + 1;
    v30 = cos((double)v29 * 6.28318531 / (double)v8);
    geom::catmull_clark_vertex_evaluator<double>::edge_point(a1, v29, a2, v54);
    if (v28 == v8)
    {
      v33 = 0;
      v34 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v34 = *(_QWORD *)(a1 + 16);
      v33 = *(_DWORD *)(v34 + 4 * v19);
    }
    v36 = v54[0];
    v35 = v54[1];
    v37 = *(unsigned int *)(v34 + 4 * v29);
    v38 = 0uLL;
    v39 = 0uLL;
    v40.f64[1] = v50.f64[1];
    if (v37 > v33)
    {
      v41 = v37 - v33;
      v42 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v33);
      do
      {
        v43 = *v42++;
        v44 = (float64x2_t *)(a2 + 32 * v43);
        v31 = *v44;
        v39 = vaddq_f64(v39, v44[1]);
        v38 = vaddq_f64(v38, *v44);
        --v41;
      }
      while (v41);
    }
    *(float *)v31.f64 = v27 * v26;
    v31.f64[0] = *(float *)v31.f64;
    v40.f64[0] = (double)(v37 - v33);
    *(float *)v32.f64 = v27 + v30;
    v32.f64[0] = *(float *)v32.f64;
    v45 = vdivq_f64(v38, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40.f64[0], 0));
    v46 = vmlaq_f64(vmlaq_f64(a3[1], v53, v31), v52, v32);
    v47 = vdivq_f64(v39, v40);
    *a3 = vmlaq_n_f64(vmlaq_n_f64(*a3, v50, v31.f64[0]), v51, v32.f64[0]);
    a3[1] = v46;
    v48 = vmlaq_f64(vmlaq_f64(a4[1], v35, v31), v47, v32);
    v49 = vmlaq_n_f64(vmlaq_n_f64(*a4, v36, v31.f64[0]), v45, v32.f64[0]);
    v27 = v30;
    v23 = v36;
    v22 = v35;
    *a4 = v49;
    a4[1] = v48;
    ++v19;
    v25 = v45;
    v24 = v47;
  }
  while (v28 != v8);
}

float64x2_t geom::catmull_clark_vertex_evaluator<double>::edge_point@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, float64x2_t *a4@<X8>)
{
  float64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  float64x2_t *v22;
  float64x2_t *v23;
  float64x2_t *v24;
  unsigned int v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t result;
  float64x2_t v43;

  v5 = *(unsigned int *)(a1 + 4);
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_DWORD *)(v6 + 4 * (a2 - 1));
  }
  else
  {
    v7 = 0;
    v6 = *(_QWORD *)(a1 + 16);
  }
  v8 = *(_QWORD *)(a1 + 32);
  v9 = v8 + 4 * v7;
  v10 = *(unsigned int *)(v6 + 4 * a2);
  v11 = v10 - v7;
  if ((_DWORD)v11)
  {
    v13 = 0;
    v12 = 1;
    while (*(_DWORD *)(v9 + 4 * v13) != (_DWORD)v5)
    {
      if (v11 == ++v13)
        goto LABEL_11;
    }
    v12 = (v13 + 1);
  }
  else
  {
    v12 = 1;
  }
LABEL_11:
  v14 = *(unsigned int *)(v9 + 4 * (v12 - (v12 / v11) * (unint64_t)v11));
  v15 = (a2 - 1 + *(_DWORD *)(a1 + 24)) % *(_DWORD *)(a1 + 24);
  if (a2)
    v16 = *(_DWORD *)(v6 + 4 * (a2 - 1));
  else
    v16 = 0;
  v17 = 0uLL;
  v18 = 0uLL;
  if (v10 > v16)
  {
    v19 = v10 - v16;
    v20 = (unsigned int *)(v8 + 4 * v16);
    do
    {
      v21 = *v20++;
      v22 = (float64x2_t *)(a3 + 32 * v21);
      v18 = vaddq_f64(v18, v22[1]);
      v17 = vaddq_f64(v17, *v22);
      --v19;
    }
    while (v19);
  }
  v23 = (float64x2_t *)(a3 + 32 * v5);
  v24 = (float64x2_t *)(a3 + 32 * v14);
  if (v15)
    v25 = *(_DWORD *)(v6 + 4 * (v15 - 1));
  else
    v25 = 0;
  v26 = *v24;
  v27 = v24[1];
  v28 = *(unsigned int *)(v6 + 4 * v15);
  v29 = 0uLL;
  v30 = 0uLL;
  if (v28 > v25)
  {
    v31 = v28 - v25;
    v32 = (unsigned int *)(v8 + 4 * v25);
    do
    {
      v33 = *v32++;
      v34 = (float64x2_t *)(a3 + 32 * v33);
      v4 = *v34;
      v30 = vaddq_f64(v30, v34[1]);
      v29 = vaddq_f64(v29, *v34);
      --v31;
    }
    while (v31);
  }
  v4.f64[0] = (double)(v10 - v16);
  v35 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0));
  v36 = vdivq_f64(v18, v4);
  v4.f64[0] = (double)(v28 - v25);
  __asm { FMOV            V2.2D, #0.25 }
  result = vmulq_f64(vaddq_f64(v35, vaddq_f64(vaddq_f64(*v23, v26), vdivq_f64(v29, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0)))), _Q2);
  v43 = vmulq_f64(vaddq_f64(v36, vaddq_f64(vaddq_f64(v23[1], v27), vdivq_f64(v30, v4))), _Q2);
  *a4 = result;
  a4[1] = v43;
  return result;
}

uint64_t geom_sparse_linear_solver_create_f(int a1, int a2)
{
  uint64_t v4;

  v4 = geom_sparse_linear_solver_f_obj_alloc();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 16, a1, a2);
  return v4;
}

uint64_t geom_sparse_linear_solver_create_d(int a1, int a2)
{
  uint64_t v4;

  v4 = geom_sparse_linear_solver_d_obj_alloc();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 16, a1, a2);
  return v4;
}

uint64_t geom_sparse_linear_solver_row_count_f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t geom_sparse_linear_solver_row_count_d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t geom_sparse_linear_solver_column_count_f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_sparse_linear_solver_column_count_d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

char *geom_sparse_linear_solver_add_entry_f(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  return geom::sparse_linear_solver<float>::add_entry(a1 + 16, a2, a3, a4);
}

uint64_t *geom_sparse_linear_solver_add_entry_d(uint64_t a1, unsigned int a2, unsigned int a3, double a4)
{
  return geom::sparse_linear_solver<double>::add_entry(a1 + 16, a2, a3, a4);
}

BOOL geom_sparse_linear_solver_factor_f(uint64_t a1, unsigned int a2)
{
  return geom::sparse_linear_solver<float>::factor((unsigned int *)(a1 + 16), a2);
}

BOOL geom_sparse_linear_solver_factor_d(uint64_t a1, unsigned int a2)
{
  return geom::sparse_linear_solver<double>::factor((unsigned int *)(a1 + 16), a2);
}

uint64_t geom_sparse_linear_solver_solve_f(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float *a5)
{
  return geom::sparse_linear_solver<float>::solve(a1 + 16, a2, a3, a4, a5);
}

uint64_t geom_sparse_linear_solver_solve_d(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double *a5)
{
  return geom::sparse_linear_solver<double>::solve(a1 + 16, a2, a3, a4, a5);
}

uint64_t geom_sparse_linear_solver_solve_inplace_f(uint64_t a1, uint64_t a2, float *a3)
{
  return geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 16), a2, a3);
}

uint64_t geom_sparse_linear_solver_solve_inplace_d(uint64_t a1, uint64_t a2, double *a3)
{
  return geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 16), a2, a3);
}

uint64_t geom::z_order_code(double a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = WORD2(a1) | ((unint64_t)HIDWORD(a1) << 16) & 0xFFFF0000FFFFLL;
  v2 = (v1 | (v1 << 8)) & 0xF000F000F000FLL | (16 * ((v1 | (v1 << 8)) & 0xFF00FF00FF00FFLL)) & 0xF0F0F0F0F0F0F0FLL;
  v3 = LOWORD(a1) | ((unint64_t)LODWORD(a1) << 16) & 0xFFFF0000FFFFLL;
  v4 = (v3 | (v3 << 8)) & 0xF000F000F000FLL | (16 * ((v3 | (v3 << 8)) & 0xFF00FF00FF00FFLL)) & 0xF0F0F0F0F0F0F0FLL;
  return (v4 | (4 * v4)) & 0x1111111111111111 | (2 * ((v4 | (4 * v4)) & 0x3333333333333333)) & 0x5555555555555555 | (2 * ((v2 | (4 * v2)) & 0x1111111111111111 | (2 * ((v2 | (4 * v2)) & 0x3333333333333333)) & 0x5555555555555555));
}

uint64_t geom::z_order_code(unsigned int a1)
{
  return (4 * ((16 * (a1 | (BYTE1(a1) << 16))) & 0xF000F00 | a1 & 0xF | (BYTE1(a1) << 16) & 0xF000F)) & 0x10101010 | (16 * (a1 | (BYTE1(a1) << 16))) & 0x1000100 | a1 & 1 | (BYTE1(a1) << 16) & 0x10001 | (2 * ((4 * ((16 * (a1 | (BYTE1(a1) << 16))) & 0xF000F00 | a1 & 0xF | (BYTE1(a1) << 16) & 0xF000F)) & 0x30303030 | (16 * (a1 | (BYTE1(a1) << 16))) & 0x3000300 | a1 & 3 | (BYTE1(a1) << 16) & 0x30003)) & 0x44444444 | (2 * ((2 * ((4 * ((16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0xF000F00 | (a1 >> 8) & 0xF0000 | BYTE2(a1) & 0xF)) & 0x30303030 | (16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0x3000300 | (a1 >> 8) & 0x30000 | BYTE2(a1) & 3)) & 0x44444444 | (4 * ((16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0xF000F00 | (a1 >> 8) & 0xF0000 | BYTE2(a1) & 0xF)) & 0x10101010 | (16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0x1000100 | (a1 >> 8) & 0x10000 | BYTE2(a1) & 1));
}

{
  int v1;
  int v2;

  v1 = (a1 >> 4) & 0xF00 | (a1 >> 8) & 0xF;
  v2 = a1 & 0xF | (a1 >> 4 << 8);
  return (v2 | (4 * v2)) & 0xD1D1D1D1 | (2 * ((v2 | (4 * v2)) & 0xF3F3F3F3)) & 0xDDDDDDDD | (2
                                                                                           * ((v1 | (4 * v1)) & 0xD1D1D1D1 | (2 * ((v1 | (4 * v1)) & 0xF3F3F3F3)) & 0xDDDDDDDD));
}

double geom::z_order_code(uint64x2_t a1)
{
  unint64_t v1;
  unint64_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int64x2_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int64x2_t v9;
  int8x16_t v10;
  int64x2_t v11;
  double result;

  v1 = a1.u16[0];
  v2 = (a1.u8[2] | ((unint64_t)a1.u8[3] << 24) | ((a1.u8[2] | ((unint64_t)a1.u8[3] << 24)) << 8)) & 0xF00F00F00FLL | (16 * ((a1.u8[2] | ((unint64_t)a1.u8[3] << 24) | ((a1.u8[2] | ((unint64_t)a1.u8[3] << 24)) << 8)) & 0xF00F00F00FLL));
  a1.i8[0] = a1.i8[4];
  a1.i8[3] = a1.i8[5];
  a1.i64[1] = v1;
  v3 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(a1, (uint64x2_t)xmmword_2289BD9D0), (int8x16_t)xmmword_2289BD9E0), vandq_s8((int8x16_t)a1, (int8x16_t)xmmword_2289BD9F0));
  v4 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v3, (uint64x2_t)xmmword_2289BDA00), (int8x16_t)xmmword_2289BDA10), vandq_s8(v3, (int8x16_t)xmmword_2289BDA20));
  v5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v4, (uint64x2_t)xmmword_2289BDA30), (int8x16_t)xmmword_2289BDA40), vandq_s8(v4, (int8x16_t)xmmword_2289BDA50));
  v6 = (int8x16_t)vshlq_n_s64(v5, 2uLL);
  v7 = vandq_s8((int8x16_t)v5, (int8x16_t)vdupq_n_s64(0x41041041041uLL));
  v5.i64[0] = (4 * v2) & 0x208208208208;
  v8 = (int8x16_t)vdupq_n_s64(2uLL);
  v8.i64[0] = v2 & 0x41041041041;
  v9 = (int64x2_t)vorrq_s8((int8x16_t)v5, v8);
  v9.i64[0] = vaddq_s64(v9, v9).u64[0];
  v10 = vandq_s8(v6, (int8x16_t)vdupq_n_s64(0x208208208208uLL));
  v6.i64[1] = v7.i64[1];
  v9.i64[1] = v10.i64[1];
  v11 = (int64x2_t)vorrq_s8(v6, (int8x16_t)v9);
  *(_QWORD *)&result = vorrq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s64(v11, 1)).u64[0];
  return result;
}

uint64_t geom::z_order_code(int a1)
{
  int v1;
  int8x8_t v2;
  int32x2_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;

  v1 = a1 & 0xF | (a1 >> 4 << 12);
  v2.i32[0] = BYTE2(a1);
  v2.i32[1] = BYTE1(a1);
  v3 = (int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL);
  v4 = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(v3, 8uLL) & 0xFFFFF0FFFFFFF0FFLL), (int8x8_t)(*(_QWORD *)&v3 & 0xFFFFFF0FFFFFFF0FLL));
  v5 = (int32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v4, 4uLL), (int8x8_t)vdup_n_s32(0xC00C0u)), vand_s8((int8x8_t)v4, (int8x8_t)vdup_n_s32(0x3003u)));
  v6 = (int32x2_t)vshl_u32((uint32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v5, 2uLL), (int8x8_t)vdup_n_s32(0x208208u)), vand_s8((int8x8_t)v5, (int8x8_t)vdup_n_s32(0x41041u))), (uint32x2_t)0x100000002);
  return vorr_s8((int8x8_t)v6, (int8x8_t)vdup_lane_s32(v6, 1)).u32[0] | (v1 | (16 * v1)) & 0x41041 | (4 * ((v1 | (16 * v1)) & 0xC30C3)) & 0x249249;
}

{
  int8x8_t v1;
  int32x2_t v2;
  int32x2_t v3;
  int32x2_t v4;
  uint32x2_t v5;

  v1.i32[0] = HIBYTE(a1);
  v1.i32[1] = BYTE1(a1);
  v2 = (int32x2_t)vand_s8(v1, (int8x8_t)0xFF000000FFLL);
  v3 = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(v2, 0xCuLL) & 0xFFFF0FFFFFFF0FFFLL), (int8x8_t)(*(_QWORD *)&v2 & 0xFFFFFF0FFFFFFF0FLL));
  v4 = (int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&vshl_n_s32(v3, 6uLL) & 0xFF3FFF3FFF3FFF3FLL), (int8x8_t)(*(_QWORD *)&v3 & 0xFFF3FFF3FFF3FFF3));
  v5 = vshl_u32((uint32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v4, 3uLL), (int8x8_t)0x1010101010101010), vand_s8((int8x8_t)v4, (int8x8_t)0x101010101010101)), (uint32x2_t)0x100000003);
  return v5.i32[0] | (4
                    * ((8
                      * (((BYTE2(a1) & 0xF | (BYTE2(a1) << 12)) << 6) & 0x3000300 | BYTE2(a1) & 3 | (BYTE2(a1) << 12) & 0x30003)) & 0x10101010 | ((BYTE2(a1) & 0xF | (BYTE2(a1) << 12)) << 6) & 0x1000100 | BYTE2(a1) & 1 | (BYTE2(a1) << 12) & 0x10001)) | ((a1 & 0xF | (a1 >> 4 << 16)) << 6) & 0x1000100 | a1 & 1 | (a1 >> 4 << 16) & 0x10001 | (8 * (((a1 & 0xF | (a1 >> 4 << 16)) << 6) & 0x3000300 | a1 & 3 | (a1 >> 4 << 16) & 0x30003)) & 0x10101010u | v5.i32[1];
}

double geom::z_order_code(double a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64x2_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int64x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int64x2_t v12;
  double result;

  v1 = LOWORD(a1);
  v2 = (BYTE2(a1) | ((unint64_t)WORD1(a1) << 24)) & 0xF0000000FLL | ((BYTE2(a1) | ((unint64_t)WORD1(a1) << 24)) << 12) & 0xF000F000F000FLL;
  v3 = (BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) & 0xF0000000FLL | ((BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) << 12) & 0xF000F000F000FLL | (((BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) & 0xF0000000FLL | ((BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) << 12) & 0xF000F000F000FLL) << 6);
  v4.i64[0] = (BYTE4(a1) | ((unint64_t)WORD2(a1) << 24)) & 0xFF000000FFLL;
  v4.i64[1] = v1;
  v5 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_2289BDA60), (int8x16_t)xmmword_2289BDA70), vandq_s8((int8x16_t)v4, (int8x16_t)xmmword_2289BDA80));
  v6 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v5, (uint64x2_t)xmmword_2289BDA90), (int8x16_t)xmmword_2289BDAA0), vandq_s8(v5, (int8x16_t)xmmword_2289BDAB0));
  v7 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_2289BDAC0), (int8x16_t)xmmword_2289BDAD0), vandq_s8(v6, (int8x16_t)xmmword_2289BDAE0));
  v8 = (int8x16_t)vshlq_u64((uint64x2_t)v7, (uint64x2_t)xmmword_2289BDAF0);
  v9.i64[0] = 0x1010101010101010;
  v9.i64[1] = 0x1010101010101010;
  v10.i64[1] = 0x1010101010101010;
  v10.i64[0] = 8 * ((v3 | (8 * v3)) & 0x1111111111111111);
  v10.i64[0] = vorrq_s8(v8, v10).u64[0];
  v10.i64[1] = vandq_s8(v8, v9).i64[1];
  v8.i64[0] = 0x101010101010101;
  v8.i64[1] = 0x101010101010101;
  v11 = vandq_s8((int8x16_t)v7, v8);
  v7.i64[0] = (v2 | (v2 << 6) | (8 * (v2 | (v2 << 6)))) & 0x1111111111111111;
  v7.i64[0] = vaddq_s64(v7, v7).u64[0];
  v7.i64[1] = v11.i64[1];
  v12 = (int64x2_t)vorrq_s8(v10, (int8x16_t)v7);
  *(_QWORD *)&result = vorrq_s8((int8x16_t)v12, (int8x16_t)vdupq_laneq_s64(v12, 1)).u64[0];
  return result;
}

uint64_t geom_z_order_code_2u8(unsigned __int16 a1)
{
  return geom::z_order_code(a1);
}

BOOL geom::compare_z_order<float,(unsigned char)2>(double a1, double a2)
{
  int8x8_t v2;
  unsigned __int8 v3;
  char v4;
  float v5;
  float v6;
  unsigned int v7;
  signed int v8;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  v2 = (int8x8_t)vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0)
    return 0;
  v3 = vmvn_s8(v2).u8[0];
  v4 = ~v3;
  v5 = *((float *)&a1 + 1);
  v6 = *((float *)&a2 + 1);
  if (*((float *)&a1 + 1) != *((float *)&a2 + 1))
  {
    v11 = a1;
    v12 = a2;
    a1 = v11;
    a2 = v12;
    v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0)
      v4 = 1;
  }
  v13 = a1;
  v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  v14 = a2;
  return v10 < *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom_compare_z_order_2f(double a1, double a2)
{
  int8x8_t v2;
  unsigned __int8 v3;
  char v4;
  float v5;
  float v6;
  unsigned int v7;
  signed int v8;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;

  v2 = (int8x8_t)vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0)
    return 0;
  v3 = vmvn_s8(v2).u8[0];
  v4 = ~v3;
  v5 = *((float *)&a1 + 1);
  v6 = *((float *)&a2 + 1);
  if (*((float *)&a1 + 1) != *((float *)&a2 + 1))
  {
    v11 = a1;
    v12 = a2;
    a1 = v11;
    a2 = v12;
    v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0)
      v4 = 1;
  }
  v13 = a1;
  v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  v14 = a2;
  return v10 < *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom::compare_z_order<float,(unsigned char)3>(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  unsigned int v4;
  signed int v5;
  int v6;
  __int128 v7;
  unsigned __int8 v8;
  char v9;
  float v12;
  int8x16_t v13;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;

  v2 = vceqq_f32(a1, a2);
  v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0)
    return 0;
  v13 = (int8x16_t)v2;
  *(_QWORD *)&v7 = __PAIR64__(v5, v4);
  DWORD2(v7) = v6;
  v8 = vmovn_s32((int32x4_t)vmvnq_s8(v13)).u8[0];
  v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    v19 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v5)) == 0)
      v9 = 1;
  }
  if (a1.f32[2] != a2.f32[2])
  {
    v18 = v7;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      v9 = 2;
    }
  }
  v17 = a1;
  v12 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  v16 = a2;
  return v12 < *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom_compare_z_order_3f(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  unsigned int v4;
  signed int v5;
  int v6;
  __int128 v7;
  unsigned __int8 v8;
  char v9;
  float v12;
  int8x16_t v13;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;

  v2 = vceqq_f32(a1, a2);
  v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0)
    return 0;
  v13 = (int8x16_t)v2;
  *(_QWORD *)&v7 = __PAIR64__(v5, v4);
  DWORD2(v7) = v6;
  v8 = vmovn_s32((int32x4_t)vmvnq_s8(v13)).u8[0];
  v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    v19 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v5)) == 0)
      v9 = 1;
  }
  if (a1.f32[2] != a2.f32[2])
  {
    v18 = v7;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      v9 = 2;
    }
  }
  v17 = a1;
  v12 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  v16 = a2;
  return v12 < *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom::compare_z_order<float,(unsigned char)4>(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2;
  unsigned int v3;
  signed int v4;
  signed int v5;
  signed int v6;
  __int128 v7;
  unsigned __int8 v8;
  char v9;
  float v13;
  int8x16_t v14;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = (uint32x4_t)vceqq_f32(a1, a2);
  if ((vminvq_u32(v2) & 0x80000000) != 0)
    return 0;
  v14 = (int8x16_t)v2;
  *(_QWORD *)&v7 = __PAIR64__(v4, v3);
  *((_QWORD *)&v7 + 1) = __PAIR64__(v6, v5);
  v8 = vmovn_s32((int32x4_t)vmvnq_s8(v14)).u8[0];
  v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    v21 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v4)) == 0)
      v9 = 1;
  }
  if (a1.f32[2] != a2.f32[2])
  {
    v20 = v7;
    if (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v5
      || ~v9 == 0)
    {
      v9 = 2;
    }
  }
  if (a1.f32[3] != a2.f32[3])
  {
    v19 = v7;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      v9 = 3;
    }
  }
  v17 = a1;
  v13 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  v18 = a2;
  return v13 < *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom_compare_z_order_4f(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2;
  unsigned int v3;
  signed int v4;
  signed int v5;
  signed int v6;
  __int128 v7;
  unsigned __int8 v8;
  char v9;
  float v13;
  int8x16_t v14;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = (uint32x4_t)vceqq_f32(a1, a2);
  if ((vminvq_u32(v2) & 0x80000000) != 0)
    return 0;
  v14 = (int8x16_t)v2;
  *(_QWORD *)&v7 = __PAIR64__(v4, v3);
  *((_QWORD *)&v7 + 1) = __PAIR64__(v6, v5);
  v8 = vmovn_s32((int32x4_t)vmvnq_s8(v14)).u8[0];
  v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    v21 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v4)) == 0)
      v9 = 1;
  }
  if (a1.f32[2] != a2.f32[2])
  {
    v20 = v7;
    if (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v5
      || ~v9 == 0)
    {
      v9 = 2;
    }
  }
  if (a1.f32[3] != a2.f32[3])
  {
    v19 = v7;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      v9 = 3;
    }
  }
  v17 = a1;
  v13 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  v18 = a2;
  return v13 < *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom::compare_z_order<double,(unsigned char)2>(float64x2_t a1, float64x2_t a2)
{
  int64x2_t v2;
  unsigned __int8 v3;
  char v4;
  double v5;
  double v6;
  unsigned int v7;
  signed int v8;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;

  v2 = vceqq_f64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v4 = ~v3;
  v5 = a1.f64[1];
  v6 = a2.f64[1];
  if (a1.f64[1] != a2.f64[1])
  {
    v11 = a1;
    v12 = a2;
    a1 = v11;
    a2 = v12;
    v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0)
      v4 = 1;
  }
  v13 = a1;
  v10 = *(double *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  v14 = a2;
  return v10 < *(double *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom_compare_z_order_2d(float64x2_t a1, float64x2_t a2)
{
  int64x2_t v2;
  unsigned __int8 v3;
  char v4;
  double v5;
  double v6;
  unsigned int v7;
  signed int v8;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;

  v2 = vceqq_f64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v4 = ~v3;
  v5 = a1.f64[1];
  v6 = a2.f64[1];
  if (a1.f64[1] != a2.f64[1])
  {
    v11 = a1;
    v12 = a2;
    a1 = v11;
    a2 = v12;
    v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0)
      v4 = 1;
  }
  v13 = a1;
  v10 = *(double *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  v14 = a2;
  return v10 < *(double *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom::compare_z_order<double,(unsigned char)3>(float64x2_t *a1, float64x2_t *a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int64x2_t v4;
  unsigned int v5;
  signed int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  _OWORD v23[2];
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;

  v2 = *(int8x16_t *)a1;
  v3 = *(int8x16_t *)a2;
  v4 = vceqq_f64(*a1, *a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v4, 1), vandq_s8((int8x16_t)vceqq_f64(a1[1], a2[1]), (int8x16_t)v4)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v17 = vextq_s8(v2, v2, 8uLL).u64[0];
  v18 = vextq_s8(v3, v3, 8uLL).u64[0];
  v21 = a2[1];
  v22 = *a2;
  v19 = a1[1];
  v20 = *a1;
  *(float64_t *)&v8 = v20.f64[0];
  *(float64_t *)&v9 = v22.f64[0];
  *(_QWORD *)&v10 = __PAIR64__(v6, v5);
  DWORD2(v10) = v7;
  if (v20.f64[0] == v22.f64[0])
    v11 = -1;
  else
    v11 = 0;
  if (v20.f64[1] != v22.f64[1])
  {
    v26 = v10;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v6
      || v20.f64[0] == v22.f64[0])
    {
      v11 = 1;
    }
  }
  if (v19.f64[0] != v21.f64[0])
  {
    v25 = v10;
    if (*(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v7
      || ~v11 == 0)
    {
      v11 = 2;
    }
  }
  *((_QWORD *)&v8 + 1) = v17;
  v24[0] = v8;
  v24[1] = v19;
  v15 = v11 & 3;
  v16 = *((double *)v24 + v15);
  *((_QWORD *)&v9 + 1) = v18;
  v23[0] = v9;
  v23[1] = v21;
  return v16 < *((double *)v23 + v15);
}

BOOL geom_compare_z_order_3d(float64x2_t *a1, float64x2_t *a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int64x2_t v4;
  unsigned int v5;
  signed int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  _OWORD v23[2];
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;

  v2 = *(int8x16_t *)a1;
  v3 = *(int8x16_t *)a2;
  v4 = vceqq_f64(*a1, *a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v4, 1), vandq_s8((int8x16_t)vceqq_f64(a1[1], a2[1]), (int8x16_t)v4)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v17 = vextq_s8(v2, v2, 8uLL).u64[0];
  v18 = vextq_s8(v3, v3, 8uLL).u64[0];
  v21 = a2[1];
  v22 = *a2;
  v19 = a1[1];
  v20 = *a1;
  *(float64_t *)&v8 = v20.f64[0];
  *(float64_t *)&v9 = v22.f64[0];
  *(_QWORD *)&v10 = __PAIR64__(v6, v5);
  DWORD2(v10) = v7;
  if (v20.f64[0] == v22.f64[0])
    v11 = -1;
  else
    v11 = 0;
  if (v20.f64[1] != v22.f64[1])
  {
    v26 = v10;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v6
      || v20.f64[0] == v22.f64[0])
    {
      v11 = 1;
    }
  }
  if (v19.f64[0] != v21.f64[0])
  {
    v25 = v10;
    if (*(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v7
      || ~v11 == 0)
    {
      v11 = 2;
    }
  }
  *((_QWORD *)&v8 + 1) = v17;
  v24[0] = v8;
  v24[1] = v19;
  v15 = v11 & 3;
  v16 = *((double *)v24 + v15);
  *((_QWORD *)&v9 + 1) = v18;
  v23[0] = v9;
  v23[1] = v21;
  return v16 < *((double *)v23 + v15);
}

BOOL geom::compare_z_order<double,(unsigned char)4>(float64x2_t *a1, float64x2_t *a2)
{
  int64x2_t v2;
  unsigned int v3;
  signed int v4;
  signed int v5;
  signed int v6;
  __int128 v7;
  char v8;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  _OWORD v19[2];
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(*a1, *a2), (int8x16_t)vceqq_f64(a1[1], a2[1]));
  if ((vandq_s8((int8x16_t)v2, (int8x16_t)vdupq_laneq_s64(v2, 1)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v15 = *a1;
  v16 = *a2;
  v17 = a1[1];
  v18 = a2[1];
  *(_QWORD *)&v7 = __PAIR64__(v4, v3);
  *((_QWORD *)&v7 + 1) = __PAIR64__(v6, v5);
  if (v15.f64[0] == v16.f64[0])
    v8 = -1;
  else
    v8 = 0;
  if (v15.f64[1] != v16.f64[1])
  {
    v23 = v7;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v4 || v15.f64[0] == v16.f64[0])
      v8 = 1;
  }
  if (v17.f64[0] != v18.f64[0])
  {
    v22 = v7;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v5
      || ~v8 == 0)
    {
      v8 = 2;
    }
  }
  if (v17.f64[1] != v18.f64[1])
  {
    v21 = v7;
    if (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v6
      || ~v8 == 0)
    {
      v8 = 3;
    }
  }
  v20[0] = v15;
  v20[1] = v17;
  v13 = v8 & 3;
  v14 = *((double *)v20 + v13);
  v19[0] = v16;
  v19[1] = v18;
  return v14 < *((double *)v19 + v13);
}

BOOL geom_compare_z_order_4d(float64x2_t *a1, float64x2_t *a2)
{
  int64x2_t v2;
  unsigned int v3;
  signed int v4;
  signed int v5;
  signed int v6;
  __int128 v7;
  char v8;
  uint64_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  _OWORD v19[2];
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v2 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(*a1, *a2), (int8x16_t)vceqq_f64(a1[1], a2[1]));
  if ((vandq_s8((int8x16_t)v2, (int8x16_t)vdupq_laneq_s64(v2, 1)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v15 = *a1;
  v16 = *a2;
  v17 = a1[1];
  v18 = a2[1];
  *(_QWORD *)&v7 = __PAIR64__(v4, v3);
  *((_QWORD *)&v7 + 1) = __PAIR64__(v6, v5);
  if (v15.f64[0] == v16.f64[0])
    v8 = -1;
  else
    v8 = 0;
  if (v15.f64[1] != v16.f64[1])
  {
    v23 = v7;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v4 || v15.f64[0] == v16.f64[0])
      v8 = 1;
  }
  if (v17.f64[0] != v18.f64[0])
  {
    v22 = v7;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v5
      || ~v8 == 0)
    {
      v8 = 2;
    }
  }
  if (v17.f64[1] != v18.f64[1])
  {
    v21 = v7;
    if (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v6
      || ~v8 == 0)
    {
      v8 = 3;
    }
  }
  v20[0] = v15;
  v20[1] = v17;
  v13 = v8 & 3;
  v14 = *((double *)v20 + v13);
  v19[0] = v16;
  v19[1] = v18;
  return v14 < *((double *)v19 + v13);
}

BOOL geom::compare_z_order<unsigned char,(unsigned char)2>(__int16 a1, __int16 a2)
{
  int8x8_t v2;
  int8x8_t v3;
  int8x8_t v4;
  int8x16_t v5;
  char v6;
  int8x8_t v7;
  uint32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int8x8_t v11;
  unsigned int v13;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;

  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0)
    return 0;
  if (a1 == a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(_QWORD *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      v6 = 1;
    }
  }
  v16 = v2;
  v13 = *(unsigned __int8 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v15 = v3;
  return v13 < *(unsigned __int8 *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2u8(__int16 a1, __int16 a2)
{
  int8x8_t v2;
  int8x8_t v3;
  int8x8_t v4;
  int8x16_t v5;
  char v6;
  int8x8_t v7;
  uint32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int8x8_t v11;
  unsigned int v13;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;

  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0)
    return 0;
  if (a1 == a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(_QWORD *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      v6 = 1;
    }
  }
  v16 = v2;
  v13 = *(unsigned __int8 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v15 = v3;
  return v13 < *(unsigned __int8 *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<unsigned char,(unsigned char)3>(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  int8x8_t v4;
  int8x8_t v5;
  int16x4_t v6;
  uint8x8_t v7;
  uint64_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int8x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char v15;
  unsigned int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;

  a3.i32[0] = a1;
  v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  v5 = vzip1_s8(a4, a3);
  v6 = vceq_s16((int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0)
    return 0;
  v8 = *(_QWORD *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF00FF00FF00FFLL)));
  v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(_QWORD *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = vandq_s8(v12, v13);
  if (a1 == a2)
    v15 = -1;
  else
    v15 = 0;
  if ((v6.i8[2] & 1) == 0)
  {
    v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  v20 = a3;
  v18 = *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  v21 = a3;
  return v18 < *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom_compare_z_order_3u8(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  int8x8_t v4;
  int8x8_t v5;
  int16x4_t v6;
  uint8x8_t v7;
  uint64_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int8x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char v15;
  unsigned int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;

  a3.i32[0] = a1;
  v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  v5 = vzip1_s8(a4, a3);
  v6 = vceq_s16((int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0)
    return 0;
  v8 = *(_QWORD *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF00FF00FF00FFLL)));
  v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(_QWORD *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = vandq_s8(v12, v13);
  if (a1 == a2)
    v15 = -1;
  else
    v15 = 0;
  if ((v6.i8[2] & 1) == 0)
  {
    v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  v20 = a3;
  v18 = *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  v21 = a3;
  return v18 < *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom::compare_z_order<unsigned char,(unsigned char)4>(__int32 a1, __int32 a2, int8x8_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int8x8_t v6;
  uint64_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int8x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;
  unsigned int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;

  a3.i32[0] = a1;
  v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  v4 = vzip1_s8(a3, a3);
  v5 = (int8x8_t)vceq_s16((int16x4_t)(*(_QWORD *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL));
  v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0)
    return 0;
  v6.i32[0] = a2 ^ a1;
  v7 = *(_QWORD *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v13 = vandq_s8(v11, v12);
  if (a1 == a2)
    v14 = -1;
  else
    v14 = 0;
  if ((v5.i8[2] & 1) == 0)
  {
    v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      v14 = 3;
    }
  }
  v21 = v3;
  v18 = *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  v20 = v4;
  return v18 < *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom_compare_z_order_4u8(__int32 a1, __int32 a2, int8x8_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int8x8_t v6;
  uint64_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int8x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;
  unsigned int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;

  a3.i32[0] = a1;
  v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  v4 = vzip1_s8(a3, a3);
  v5 = (int8x8_t)vceq_s16((int16x4_t)(*(_QWORD *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL));
  v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0)
    return 0;
  v6.i32[0] = a2 ^ a1;
  v7 = *(_QWORD *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v13 = vandq_s8(v11, v12);
  if (a1 == a2)
    v14 = -1;
  else
    v14 = 0;
  if ((v5.i8[2] & 1) == 0)
  {
    v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      v14 = 3;
    }
  }
  v21 = v3;
  v18 = *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  v20 = v4;
  return v18 < *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom::compare_z_order<unsigned short,(unsigned char)2>(__int32 a1, __int32 a2, uint16x4_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int16x4_t v5;
  char v6;
  uint32x2_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  unsigned int v14;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;

  a3.i32[0] = a1;
  v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0)
    return 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      v6 = 1;
    }
  }
  v17 = v3;
  v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v16 = v4;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2u16(__int32 a1, __int32 a2, uint16x4_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int16x4_t v5;
  char v6;
  uint32x2_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  unsigned int v14;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;

  a3.i32[0] = a1;
  v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0)
    return 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      v6 = 1;
    }
  }
  v17 = v3;
  v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v16 = v4;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<unsigned short,(unsigned char)3>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  uint16x4_t v4;
  int16x4_t v5;
  int8x8_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int8x8_t v9;
  uint32x4_t v10;
  unsigned __int8 v11;
  char v12;
  unsigned int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0)
    return 0;
  v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  v11 = vmvn_s8(v2).u8[0];
  v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0)
      v12 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      v12 = 2;
    }
  }
  v17 = a1;
  v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom_compare_z_order_3u16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  uint16x4_t v4;
  int16x4_t v5;
  int8x8_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int8x8_t v9;
  uint32x4_t v10;
  unsigned __int8 v11;
  char v12;
  unsigned int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0)
    return 0;
  v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  v11 = vmvn_s8(v2).u8[0];
  v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0)
      v12 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      v12 = 2;
    }
  }
  v17 = a1;
  v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom::compare_z_order<unsigned short,(unsigned char)4>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  int16x4_t v4;
  int8x8_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int8x8_t v8;
  uint32x4_t v9;
  unsigned __int8 v10;
  char v11;
  unsigned int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0)
    return 0;
  v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  v10 = vmvn_s8(v2).u8[0];
  v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0)
      v11 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      v11 = 3;
    }
  }
  v17 = a1;
  v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom_compare_z_order_4u16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  int16x4_t v4;
  int8x8_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int8x8_t v8;
  uint32x4_t v9;
  unsigned __int8 v10;
  char v11;
  unsigned int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0)
    return 0;
  v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  v10 = vmvn_s8(v2).u8[0];
  v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0)
      v11 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      v11 = 3;
    }
  }
  v17 = a1;
  v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom::compare_z_order<unsigned int,(unsigned char)2>(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2;
  unsigned __int8 v3;
  char v4;
  uint32x2_t v5;
  int32x2_t v6;
  int8x8_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  unsigned int v13;
  int32x2_t v15;
  int32x2_t v16;
  int8x8_t v17;

  v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0)
    return 0;
  v3 = vmvn_s8(v2).u8[0];
  v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0)
      v4 = 1;
  }
  v15 = a1;
  v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom_compare_z_order_2u(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2;
  unsigned __int8 v3;
  char v4;
  uint32x2_t v5;
  int32x2_t v6;
  int8x8_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  unsigned int v13;
  int32x2_t v15;
  int32x2_t v16;
  int8x8_t v17;

  v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0)
    return 0;
  v3 = vmvn_s8(v2).u8[0];
  v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0)
      v4 = 1;
  }
  v15 = a1;
  v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom::compare_z_order<unsigned int,(unsigned char)3>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  uint32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  int8x16_t v18;
  char v19;
  int16x4_t v20;
  unsigned int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;

  v2 = vceqq_s32(a1, a2);
  v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0)
    return 0;
  v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  v19 = (v17 & 1) - 1;
  v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0)
      v19 = 1;
  }
  if ((v20.i8[4] & 1) == 0)
  {
    v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      v19 = 2;
    }
  }
  v25 = a1;
  v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom_compare_z_order_3u(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  uint32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  int8x16_t v18;
  char v19;
  int16x4_t v20;
  unsigned int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;

  v2 = vceqq_s32(a1, a2);
  v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0)
    return 0;
  v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  v19 = (v17 & 1) - 1;
  v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0)
      v19 = 1;
  }
  if ((v20.i8[4] & 1) == 0)
  {
    v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      v19 = 2;
    }
  }
  v25 = a1;
  v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom::compare_z_order<unsigned int,(unsigned char)4>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  int8x16_t v17;
  char v18;
  int16x4_t v19;
  unsigned int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;

  v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0)
    return 0;
  v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  v18 = (v16 & 1) - 1;
  v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0)
      v18 = 1;
  }
  if ((v19.i8[4] & 1) == 0)
  {
    v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      v18 = 3;
    }
  }
  v24 = a1;
  v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}

BOOL geom_compare_z_order_4u(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  int8x16_t v17;
  char v18;
  int16x4_t v19;
  unsigned int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;

  v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0)
    return 0;
  v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  v18 = (v16 & 1) - 1;
  v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0)
      v18 = 1;
  }
  if ((v19.i8[4] & 1) == 0)
  {
    v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      v18 = 3;
    }
  }
  v24 = a1;
  v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}

BOOL geom::compare_z_order<unsigned long long,(unsigned char)2>(int64x2_t a1, int64x2_t a2)
{
  int64x2_t v2;
  unsigned __int8 v3;
  char v4;
  uint64x2_t v5;
  uint64x2_t v6;
  int64x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  int64x2_t v21;
  int64x2_t v22;
  int32x2_t v23;

  v2 = vceqq_s64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v4 = ~v3;
  if ((vmovn_s64(v2).i32[1] & 1) == 0)
  {
    v5 = (uint64x2_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
    v6.i64[0] = 0xFFFFFFFFLL;
    v6.i64[1] = 0xFFFFFFFFLL;
    v7 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v5, v6), (int8x16_t)vdupq_n_s64(0x20uLL));
    v8 = (int8x16_t)vshlq_u64(v5, (uint64x2_t)vnegq_s64(v7));
    v9.i64[0] = 4294901760;
    v9.i64[1] = 4294901760;
    v10 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v8, v9)));
    v11 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)vnegq_s64(v10));
    v12.i64[0] = 65280;
    v12.i64[1] = 65280;
    v13 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v11, v12)));
    v14 = (int8x16_t)vshlq_u64((uint64x2_t)v11, (uint64x2_t)vnegq_s64(v13));
    v15 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)vdupq_n_s64(0xF0uLL))));
    v16 = (int64x2_t)vshlq_u64((uint64x2_t)v14, (uint64x2_t)vnegq_s64(v15));
    v17 = (int8x16_t)vdupq_n_s64(2uLL);
    v18 = vbicq_s8(v17, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v16, (int8x16_t)vdupq_n_s64(0xCuLL))));
    v23 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vsubq_s64(v7, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)v18), v16)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), (int8x16_t)v15), v18)));
    if ((v3 & (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v23.i32[1])) == 0)
      v4 = 1;
  }
  v21 = a1;
  v19 = *(_QWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  v22 = a2;
  return v19 < *(_QWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom_compare_z_order_2u64(int64x2_t a1, int64x2_t a2)
{
  int64x2_t v2;
  unsigned __int8 v3;
  char v4;
  uint64x2_t v5;
  uint64x2_t v6;
  int64x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  int64x2_t v21;
  int64x2_t v22;
  int32x2_t v23;

  v2 = vceqq_s64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v4 = ~v3;
  if ((vmovn_s64(v2).i32[1] & 1) == 0)
  {
    v5 = (uint64x2_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
    v6.i64[0] = 0xFFFFFFFFLL;
    v6.i64[1] = 0xFFFFFFFFLL;
    v7 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v5, v6), (int8x16_t)vdupq_n_s64(0x20uLL));
    v8 = (int8x16_t)vshlq_u64(v5, (uint64x2_t)vnegq_s64(v7));
    v9.i64[0] = 4294901760;
    v9.i64[1] = 4294901760;
    v10 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v8, v9)));
    v11 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)vnegq_s64(v10));
    v12.i64[0] = 65280;
    v12.i64[1] = 65280;
    v13 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v11, v12)));
    v14 = (int8x16_t)vshlq_u64((uint64x2_t)v11, (uint64x2_t)vnegq_s64(v13));
    v15 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)vdupq_n_s64(0xF0uLL))));
    v16 = (int64x2_t)vshlq_u64((uint64x2_t)v14, (uint64x2_t)vnegq_s64(v15));
    v17 = (int8x16_t)vdupq_n_s64(2uLL);
    v18 = vbicq_s8(v17, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v16, (int8x16_t)vdupq_n_s64(0xCuLL))));
    v23 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vsubq_s64(v7, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)v18), v16)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), (int8x16_t)v15), v18)));
    if ((v3 & (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v23.i32[1])) == 0)
      v4 = 1;
  }
  v21 = a1;
  v19 = *(_QWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  v22 = a2;
  return v19 < *(_QWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom::compare_z_order<unsigned long long,(unsigned char)3>(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int32x4_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  uint64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  uint64x2_t v22;
  unsigned __int16 v23;
  int8x16_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  uint64x2_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v46;
  unint64_t v47;
  _OWORD v49[2];
  _OWORD v50[2];
  int32x4_t v51;
  int32x4_t v52;

  v7 = *(int8x16_t *)a1;
  v8 = *(int64x2_t *)(a1 + 16);
  v9 = *(int8x16_t *)a2;
  v10 = *(int64x2_t *)(a2 + 16);
  v11 = vceqq_s64(v8, v10);
  v12 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), vandq_s8((int8x16_t)v11, (int8x16_t)v12)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v13 = vextq_s8(v7, v7, 8uLL).u64[0];
  v14 = vextq_s8(v9, v9, 8uLL).u64[0];
  v15 = (uint64x2_t)veorq_s8((int8x16_t)v10, (int8x16_t)v8);
  v16 = (uint64x2_t)veorq_s8(v9, v7);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  v18 = (int8x16_t)vcgtq_u64(v16, v17);
  v2.i64[0] = 32;
  v19 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v15, v17), v2);
  v20 = (int64x2_t)vandq_s8(v18, (int8x16_t)vdupq_n_s64(0x20uLL));
  v21 = (int8x16_t)vshlq_u64(v16, (uint64x2_t)vnegq_s64(v20));
  v22 = vshlq_u64(v15, (uint64x2_t)vnegq_s64(v19));
  LOBYTE(v23) = 0;
  v2.i8[0] = 0;
  v2.i16[1] = v22.i16[1];
  v24.i64[0] = 4294901760;
  v24.i64[1] = 4294901760;
  v3.i64[0] = 16;
  v25 = (int64x2_t)vbicq_s8(v3, (int8x16_t)vceqzq_s64((int64x2_t)v2.u64[0]));
  v26 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v24)));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v26));
  v28 = vshlq_u64(v22, (uint64x2_t)vnegq_s64(v25));
  HIBYTE(v23) = v28.i8[1];
  v29.i64[0] = 65280;
  v29.i64[1] = 65280;
  v4.i64[0] = 8;
  v30 = (int64x2_t)vbicq_s8(v4, (int8x16_t)vceqzq_s64((int64x2_t)v23));
  v31 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v29)));
  v32 = (int8x16_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vshlq_u64(v28, (uint64x2_t)vnegq_s64(v30));
  v4.i64[0] = 240;
  v5.i64[0] = 4;
  v34 = (int64x2_t)vbicq_s8(v5, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v33, v4)));
  v35 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v32, (int8x16_t)vdupq_n_s64(0xF0uLL))));
  v36 = (int64x2_t)vshlq_u64((uint64x2_t)v32, (uint64x2_t)vnegq_s64(v35));
  v37 = (int64x2_t)vshlq_u64((uint64x2_t)v33, (uint64x2_t)vnegq_s64(v34));
  v5.i64[0] = 12;
  v38 = (int8x16_t)vdupq_n_s64(2uLL);
  v6.i64[0] = 2;
  v39 = vbicq_s8(v6, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v37, v5)));
  v40 = vbicq_s8(v38, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v36, (int8x16_t)vdupq_n_s64(0xCuLL))));
  v41 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v20, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)v40), v36)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v26, (int8x16_t)v31), (int8x16_t)v35), v40)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v19, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)v39), v37)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v25, (int8x16_t)v30), (int8x16_t)v34), v39)));
  v42 = (int32x4_t)vmvnq_s8((int8x16_t)v12);
  *(int32x2_t *)v42.i8 = vmovn_s64((int64x2_t)v42);
  v43 = vmovn_s32(v42).u8[0];
  v44 = (v43 & 1) - 1;
  *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)v12);
  if ((vmovn_s32(v12).i8[2] & 1) == 0)
  {
    v52 = v41;
    if ((v43 & (*(_DWORD *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v43 & 1) - 1) & 3))) > v41.i32[1])) == 0)
      v44 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v11, v11)).i32[1] & 1) == 0)
  {
    v51 = v41;
    if (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3))) <= v41.i32[2]
      || ~v44 == 0)
    {
      v44 = 2;
    }
  }
  v7.i64[1] = v13;
  v50[0] = v7;
  v50[1] = v8;
  v46 = v44 & 3;
  v47 = *((_QWORD *)v50 + v46);
  v9.i64[1] = v14;
  v49[0] = v9;
  v49[1] = v10;
  return v47 < *((_QWORD *)v49 + v46);
}

BOOL geom_compare_z_order_3u64(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int32x4_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  uint64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  uint64x2_t v22;
  unsigned __int16 v23;
  int8x16_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  uint64x2_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v46;
  unint64_t v47;
  _OWORD v49[2];
  _OWORD v50[2];
  int32x4_t v51;
  int32x4_t v52;

  v7 = *(int8x16_t *)a1;
  v8 = *(int64x2_t *)(a1 + 16);
  v9 = *(int8x16_t *)a2;
  v10 = *(int64x2_t *)(a2 + 16);
  v11 = vceqq_s64(v8, v10);
  v12 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), vandq_s8((int8x16_t)v11, (int8x16_t)v12)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v13 = vextq_s8(v7, v7, 8uLL).u64[0];
  v14 = vextq_s8(v9, v9, 8uLL).u64[0];
  v15 = (uint64x2_t)veorq_s8((int8x16_t)v10, (int8x16_t)v8);
  v16 = (uint64x2_t)veorq_s8(v9, v7);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  v18 = (int8x16_t)vcgtq_u64(v16, v17);
  v2.i64[0] = 32;
  v19 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v15, v17), v2);
  v20 = (int64x2_t)vandq_s8(v18, (int8x16_t)vdupq_n_s64(0x20uLL));
  v21 = (int8x16_t)vshlq_u64(v16, (uint64x2_t)vnegq_s64(v20));
  v22 = vshlq_u64(v15, (uint64x2_t)vnegq_s64(v19));
  LOBYTE(v23) = 0;
  v2.i8[0] = 0;
  v2.i16[1] = v22.i16[1];
  v24.i64[0] = 4294901760;
  v24.i64[1] = 4294901760;
  v3.i64[0] = 16;
  v25 = (int64x2_t)vbicq_s8(v3, (int8x16_t)vceqzq_s64((int64x2_t)v2.u64[0]));
  v26 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v24)));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v26));
  v28 = vshlq_u64(v22, (uint64x2_t)vnegq_s64(v25));
  HIBYTE(v23) = v28.i8[1];
  v29.i64[0] = 65280;
  v29.i64[1] = 65280;
  v4.i64[0] = 8;
  v30 = (int64x2_t)vbicq_s8(v4, (int8x16_t)vceqzq_s64((int64x2_t)v23));
  v31 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v29)));
  v32 = (int8x16_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vshlq_u64(v28, (uint64x2_t)vnegq_s64(v30));
  v4.i64[0] = 240;
  v5.i64[0] = 4;
  v34 = (int64x2_t)vbicq_s8(v5, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v33, v4)));
  v35 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v32, (int8x16_t)vdupq_n_s64(0xF0uLL))));
  v36 = (int64x2_t)vshlq_u64((uint64x2_t)v32, (uint64x2_t)vnegq_s64(v35));
  v37 = (int64x2_t)vshlq_u64((uint64x2_t)v33, (uint64x2_t)vnegq_s64(v34));
  v5.i64[0] = 12;
  v38 = (int8x16_t)vdupq_n_s64(2uLL);
  v6.i64[0] = 2;
  v39 = vbicq_s8(v6, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v37, v5)));
  v40 = vbicq_s8(v38, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v36, (int8x16_t)vdupq_n_s64(0xCuLL))));
  v41 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v20, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)v40), v36)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v26, (int8x16_t)v31), (int8x16_t)v35), v40)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v19, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)v39), v37)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v25, (int8x16_t)v30), (int8x16_t)v34), v39)));
  v42 = (int32x4_t)vmvnq_s8((int8x16_t)v12);
  *(int32x2_t *)v42.i8 = vmovn_s64((int64x2_t)v42);
  v43 = vmovn_s32(v42).u8[0];
  v44 = (v43 & 1) - 1;
  *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)v12);
  if ((vmovn_s32(v12).i8[2] & 1) == 0)
  {
    v52 = v41;
    if ((v43 & (*(_DWORD *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v43 & 1) - 1) & 3))) > v41.i32[1])) == 0)
      v44 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v11, v11)).i32[1] & 1) == 0)
  {
    v51 = v41;
    if (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3))) <= v41.i32[2]
      || ~v44 == 0)
    {
      v44 = 2;
    }
  }
  v7.i64[1] = v13;
  v50[0] = v7;
  v50[1] = v8;
  v46 = v44 & 3;
  v47 = *((_QWORD *)v50 + v46);
  v9.i64[1] = v14;
  v49[0] = v9;
  v49[1] = v10;
  return v47 < *((_QWORD *)v49 + v46);
}

BOOL geom::compare_z_order<unsigned long long,(unsigned char)4>(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int64x2_t v3;
  int8x16_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int32x4_t v7;
  int64x2_t v8;
  uint64x2_t v9;
  uint64x2_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v44;
  unint64_t v45;
  _OWORD v47[2];
  _OWORD v48[2];
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;

  v2 = *(int8x16_t *)a1;
  v3 = *(int64x2_t *)(a1 + 16);
  v4 = *(int8x16_t *)a2;
  v5 = *(int64x2_t *)(a2 + 16);
  v6 = vceqq_s64(v3, v5);
  v7 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  v8 = (int64x2_t)vandq_s8((int8x16_t)v7, (int8x16_t)v6);
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v9 = (uint64x2_t)veorq_s8((int8x16_t)v5, (int8x16_t)v3);
  v10 = (uint64x2_t)veorq_s8(v4, v2);
  v11.i64[0] = 0xFFFFFFFFLL;
  v11.i64[1] = 0xFFFFFFFFLL;
  v12 = (int8x16_t)vcgtq_u64(v10, v11);
  v13 = (int8x16_t)vdupq_n_s64(0x20uLL);
  v14 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v9, v11), v13);
  v15 = (int64x2_t)vandq_s8(v12, v13);
  v16 = (int8x16_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v15));
  v17 = (int8x16_t)vshlq_u64(v9, (uint64x2_t)vnegq_s64(v14));
  v13.i64[0] = 4294901760;
  v13.i64[1] = 4294901760;
  v18 = (int8x16_t)vdupq_n_s64(0x10uLL);
  v19 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v17, v13)));
  v20 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v16, v13)));
  v21 = (int8x16_t)vshlq_u64((uint64x2_t)v16, (uint64x2_t)vnegq_s64(v20));
  v22 = (int8x16_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)vnegq_s64(v19));
  v18.i64[0] = 65280;
  v18.i64[1] = 65280;
  v23 = (int8x16_t)vdupq_n_s64(8uLL);
  v24 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v22, v18)));
  v25 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v18)));
  v26 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v25));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v22, (uint64x2_t)vnegq_s64(v24));
  v28 = (int8x16_t)vdupq_n_s64(0xF0uLL);
  v29 = (int8x16_t)vdupq_n_s64(4uLL);
  v30 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v28)));
  v31 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v28)));
  v32 = (int64x2_t)vshlq_u64((uint64x2_t)v26, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vdupq_n_s64(0xCuLL);
  v34 = (int64x2_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v30));
  v35 = (int8x16_t)vdupq_n_s64(2uLL);
  v36 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v33)));
  v37 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v33)));
  v38 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v15, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v37), v32)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v20, (int8x16_t)v25), (int8x16_t)v31), v37)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v14, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v36), v34)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v19, (int8x16_t)v24), (int8x16_t)v30), v36)));
  v39 = (int32x4_t)vmvnq_s8((int8x16_t)v7);
  *(int32x2_t *)v39.i8 = vmovn_s64((int64x2_t)v39);
  v40 = vmovn_s32(v39).u8[0];
  v41 = (v40 & 1) - 1;
  *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v7);
  *(int16x4_t *)v7.i8 = vmovn_s32(v7);
  if ((v7.i8[2] & 1) == 0)
  {
    v51 = v38;
    if ((v40 & (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v40 & 1) - 1) & 3))) > v38.i32[1])) == 0)
      v41 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v7, v6)).i32[1] & 1) == 0)
  {
    v50 = v38;
    if (*(_DWORD *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[2]
      || ~v41 == 0)
    {
      v41 = 2;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v6, v6)).i8[6] & 1) == 0)
  {
    v49 = v38;
    if (*(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[3]
      || ~v41 == 0)
    {
      v41 = 3;
    }
  }
  v48[0] = v2;
  v48[1] = v3;
  v44 = v41 & 3;
  v45 = *((_QWORD *)v48 + v44);
  v47[0] = v4;
  v47[1] = v5;
  return v45 < *((_QWORD *)v47 + v44);
}

BOOL geom_compare_z_order_4u64(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int64x2_t v3;
  int8x16_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int32x4_t v7;
  int64x2_t v8;
  uint64x2_t v9;
  uint64x2_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v44;
  unint64_t v45;
  _OWORD v47[2];
  _OWORD v48[2];
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;

  v2 = *(int8x16_t *)a1;
  v3 = *(int64x2_t *)(a1 + 16);
  v4 = *(int8x16_t *)a2;
  v5 = *(int64x2_t *)(a2 + 16);
  v6 = vceqq_s64(v3, v5);
  v7 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  v8 = (int64x2_t)vandq_s8((int8x16_t)v7, (int8x16_t)v6);
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v9 = (uint64x2_t)veorq_s8((int8x16_t)v5, (int8x16_t)v3);
  v10 = (uint64x2_t)veorq_s8(v4, v2);
  v11.i64[0] = 0xFFFFFFFFLL;
  v11.i64[1] = 0xFFFFFFFFLL;
  v12 = (int8x16_t)vcgtq_u64(v10, v11);
  v13 = (int8x16_t)vdupq_n_s64(0x20uLL);
  v14 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v9, v11), v13);
  v15 = (int64x2_t)vandq_s8(v12, v13);
  v16 = (int8x16_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v15));
  v17 = (int8x16_t)vshlq_u64(v9, (uint64x2_t)vnegq_s64(v14));
  v13.i64[0] = 4294901760;
  v13.i64[1] = 4294901760;
  v18 = (int8x16_t)vdupq_n_s64(0x10uLL);
  v19 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v17, v13)));
  v20 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v16, v13)));
  v21 = (int8x16_t)vshlq_u64((uint64x2_t)v16, (uint64x2_t)vnegq_s64(v20));
  v22 = (int8x16_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)vnegq_s64(v19));
  v18.i64[0] = 65280;
  v18.i64[1] = 65280;
  v23 = (int8x16_t)vdupq_n_s64(8uLL);
  v24 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v22, v18)));
  v25 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v18)));
  v26 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v25));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v22, (uint64x2_t)vnegq_s64(v24));
  v28 = (int8x16_t)vdupq_n_s64(0xF0uLL);
  v29 = (int8x16_t)vdupq_n_s64(4uLL);
  v30 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v28)));
  v31 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v28)));
  v32 = (int64x2_t)vshlq_u64((uint64x2_t)v26, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vdupq_n_s64(0xCuLL);
  v34 = (int64x2_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v30));
  v35 = (int8x16_t)vdupq_n_s64(2uLL);
  v36 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v33)));
  v37 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v33)));
  v38 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v15, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v37), v32)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v20, (int8x16_t)v25), (int8x16_t)v31), v37)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v14, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v36), v34)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v19, (int8x16_t)v24), (int8x16_t)v30), v36)));
  v39 = (int32x4_t)vmvnq_s8((int8x16_t)v7);
  *(int32x2_t *)v39.i8 = vmovn_s64((int64x2_t)v39);
  v40 = vmovn_s32(v39).u8[0];
  v41 = (v40 & 1) - 1;
  *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v7);
  *(int16x4_t *)v7.i8 = vmovn_s32(v7);
  if ((v7.i8[2] & 1) == 0)
  {
    v51 = v38;
    if ((v40 & (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v40 & 1) - 1) & 3))) > v38.i32[1])) == 0)
      v41 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v7, v6)).i32[1] & 1) == 0)
  {
    v50 = v38;
    if (*(_DWORD *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[2]
      || ~v41 == 0)
    {
      v41 = 2;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v6, v6)).i8[6] & 1) == 0)
  {
    v49 = v38;
    if (*(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[3]
      || ~v41 == 0)
    {
      v41 = 3;
    }
  }
  v48[0] = v2;
  v48[1] = v3;
  v44 = v41 & 3;
  v45 = *((_QWORD *)v48 + v44);
  v47[0] = v4;
  v47[1] = v5;
  return v45 < *((_QWORD *)v47 + v44);
}

BOOL geom::compare_z_order<signed char,(unsigned char)2>(__int16 a1, __int16 a2)
{
  int8x8_t v2;
  int8x8_t v3;
  int8x8_t v4;
  int8x16_t v5;
  char v6;
  int8x8_t v7;
  uint32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int8x8_t v11;
  int v13;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;

  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0)
    return 0;
  if (a1 == a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(_QWORD *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      v6 = 1;
    }
  }
  v16 = v2;
  v13 = *(char *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v15 = v3;
  return v13 < *(char *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2i8(__int16 a1, __int16 a2)
{
  int8x8_t v2;
  int8x8_t v3;
  int8x8_t v4;
  int8x16_t v5;
  char v6;
  int8x8_t v7;
  uint32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int8x8_t v11;
  int v13;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;

  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0)
    return 0;
  if (a1 == a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(_QWORD *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      v6 = 1;
    }
  }
  v16 = v2;
  v13 = *(char *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v15 = v3;
  return v13 < *(char *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<signed char,(unsigned char)3>(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  int8x8_t v4;
  int8x8_t v5;
  int16x4_t v6;
  uint8x8_t v7;
  uint64_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int8x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char v15;
  int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;

  a3.i32[0] = a1;
  v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  v5 = vzip1_s8(a4, a3);
  v6 = vceq_s16((int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0)
    return 0;
  v8 = *(_QWORD *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF00FF00FF00FFLL)));
  v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(_QWORD *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = vandq_s8(v12, v13);
  if (a1 == a2)
    v15 = -1;
  else
    v15 = 0;
  if ((v6.i8[2] & 1) == 0)
  {
    v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  v20 = a3;
  v18 = *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  v21 = a3;
  return v18 < *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom_compare_z_order_3i8(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  int8x8_t v4;
  int8x8_t v5;
  int16x4_t v6;
  uint8x8_t v7;
  uint64_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int8x8_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  char v15;
  int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;

  a3.i32[0] = a1;
  v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  v5 = vzip1_s8(a4, a3);
  v6 = vceq_s16((int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0)
    return 0;
  v8 = *(_QWORD *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF00FF00FF00FFLL)));
  v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(_QWORD *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = vandq_s8(v12, v13);
  if (a1 == a2)
    v15 = -1;
  else
    v15 = 0;
  if ((v6.i8[2] & 1) == 0)
  {
    v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  v20 = a3;
  v18 = *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  v21 = a3;
  return v18 < *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom::compare_z_order<signed char,(unsigned char)4>(__int32 a1, __int32 a2, int8x8_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int8x8_t v6;
  uint64_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int8x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;
  int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;

  a3.i32[0] = a1;
  v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  v4 = vzip1_s8(a3, a3);
  v5 = (int8x8_t)vceq_s16((int16x4_t)(*(_QWORD *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL));
  v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0)
    return 0;
  v6.i32[0] = a2 ^ a1;
  v7 = *(_QWORD *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v13 = vandq_s8(v11, v12);
  if (a1 == a2)
    v14 = -1;
  else
    v14 = 0;
  if ((v5.i8[2] & 1) == 0)
  {
    v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      v14 = 3;
    }
  }
  v21 = v3;
  v18 = *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  v20 = v4;
  return v18 < *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom_compare_z_order_4i8(__int32 a1, __int32 a2, int8x8_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int8x8_t v6;
  uint64_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int8x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;
  int v18;
  int8x8_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;

  a3.i32[0] = a1;
  v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  v4 = vzip1_s8(a3, a3);
  v5 = (int8x8_t)vceq_s16((int16x4_t)(*(_QWORD *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(_QWORD *)&v4 & 0xFF00FF00FF00FFLL));
  v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0)
    return 0;
  v6.i32[0] = a2 ^ a1;
  v7 = *(_QWORD *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(_QWORD *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v13 = vandq_s8(v11, v12);
  if (a1 == a2)
    v14 = -1;
  else
    v14 = 0;
  if ((v5.i8[2] & 1) == 0)
  {
    v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      v14 = 3;
    }
  }
  v21 = v3;
  v18 = *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  v20 = v4;
  return v18 < *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom::compare_z_order<short,(unsigned char)2>(__int32 a1, __int32 a2, uint16x4_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int16x4_t v5;
  char v6;
  uint32x2_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int v14;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;

  a3.i32[0] = a1;
  v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0)
    return 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      v6 = 1;
    }
  }
  v17 = v3;
  v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v16 = v4;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2i16(__int32 a1, __int32 a2, uint16x4_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int16x4_t v5;
  char v6;
  uint32x2_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int v14;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;

  a3.i32[0] = a1;
  v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0)
    return 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a2)
    v6 = -1;
  else
    v6 = 0;
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      v6 = 1;
    }
  }
  v17 = v3;
  v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  v16 = v4;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<short,(unsigned char)3>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  uint16x4_t v4;
  int16x4_t v5;
  int8x8_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int8x8_t v9;
  uint32x4_t v10;
  unsigned __int8 v11;
  char v12;
  int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0)
    return 0;
  v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  v11 = vmvn_s8(v2).u8[0];
  v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0)
      v12 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      v12 = 2;
    }
  }
  v17 = a1;
  v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom_compare_z_order_3i16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  uint16x4_t v4;
  int16x4_t v5;
  int8x8_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int8x8_t v9;
  uint32x4_t v10;
  unsigned __int8 v11;
  char v12;
  int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0)
    return 0;
  v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  v11 = vmvn_s8(v2).u8[0];
  v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0)
      v12 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      v12 = 2;
    }
  }
  v17 = a1;
  v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom::compare_z_order<short,(unsigned char)4>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  int16x4_t v4;
  int8x8_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int8x8_t v8;
  uint32x4_t v9;
  unsigned __int8 v10;
  char v11;
  int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0)
    return 0;
  v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  v10 = vmvn_s8(v2).u8[0];
  v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0)
      v11 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      v11 = 3;
    }
  }
  v17 = a1;
  v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom_compare_z_order_4i16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2;
  uint16x4_t v3;
  int16x4_t v4;
  int8x8_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int8x8_t v8;
  uint32x4_t v9;
  unsigned __int8 v10;
  char v11;
  int v14;
  int16x4_t v16;
  int16x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;

  v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0)
    return 0;
  v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  v10 = vmvn_s8(v2).u8[0];
  v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0)
      v11 = 1;
  }
  if ((v2.i8[4] & 1) == 0)
  {
    v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      v11 = 3;
    }
  }
  v17 = a1;
  v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom::compare_z_order<int,(unsigned char)2>(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2;
  unsigned __int8 v3;
  char v4;
  uint32x2_t v5;
  int32x2_t v6;
  int8x8_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int v13;
  int32x2_t v15;
  int32x2_t v16;
  int8x8_t v17;

  v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0)
    return 0;
  v3 = vmvn_s8(v2).u8[0];
  v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0)
      v4 = 1;
  }
  v15 = a1;
  v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom_compare_z_order_2i(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2;
  unsigned __int8 v3;
  char v4;
  uint32x2_t v5;
  int32x2_t v6;
  int8x8_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int v13;
  int32x2_t v15;
  int32x2_t v16;
  int8x8_t v17;

  v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0)
    return 0;
  v3 = vmvn_s8(v2).u8[0];
  v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0)
      v4 = 1;
  }
  v15 = a1;
  v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom::compare_z_order<int,(unsigned char)3>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  uint32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  int8x16_t v18;
  char v19;
  int16x4_t v20;
  int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;

  v2 = vceqq_s32(a1, a2);
  v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0)
    return 0;
  v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  v19 = (v17 & 1) - 1;
  v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0)
      v19 = 1;
  }
  if ((v20.i8[4] & 1) == 0)
  {
    v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      v19 = 2;
    }
  }
  v25 = a1;
  v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom_compare_z_order_3i(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  uint32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  int8x16_t v18;
  char v19;
  int16x4_t v20;
  int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;

  v2 = vceqq_s32(a1, a2);
  v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0)
    return 0;
  v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  v19 = (v17 & 1) - 1;
  v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0)
      v19 = 1;
  }
  if ((v20.i8[4] & 1) == 0)
  {
    v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      v19 = 2;
    }
  }
  v25 = a1;
  v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom::compare_z_order<int,(unsigned char)4>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  int8x16_t v17;
  char v18;
  int16x4_t v19;
  int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;

  v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0)
    return 0;
  v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  v18 = (v16 & 1) - 1;
  v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0)
      v18 = 1;
  }
  if ((v19.i8[4] & 1) == 0)
  {
    v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      v18 = 3;
    }
  }
  v24 = a1;
  v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}

BOOL geom_compare_z_order_4i(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2;
  uint32x4_t v3;
  uint32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int8 v16;
  int8x16_t v17;
  char v18;
  int16x4_t v19;
  int v22;
  int32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;

  v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0)
    return 0;
  v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  v18 = (v16 & 1) - 1;
  v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0)
      v18 = 1;
  }
  if ((v19.i8[4] & 1) == 0)
  {
    v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      v18 = 3;
    }
  }
  v24 = a1;
  v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}

BOOL geom::compare_z_order<long long,(unsigned char)2>(int64x2_t a1, int64x2_t a2)
{
  int64x2_t v2;
  unsigned __int8 v3;
  char v4;
  uint64x2_t v5;
  uint64x2_t v6;
  int64x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  int64x2_t v21;
  int64x2_t v22;
  int32x2_t v23;

  v2 = vceqq_s64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v4 = ~v3;
  if ((vmovn_s64(v2).i32[1] & 1) == 0)
  {
    v5 = (uint64x2_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
    v6.i64[0] = 0xFFFFFFFFLL;
    v6.i64[1] = 0xFFFFFFFFLL;
    v7 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v5, v6), (int8x16_t)vdupq_n_s64(0x20uLL));
    v8 = (int8x16_t)vshlq_u64(v5, (uint64x2_t)vnegq_s64(v7));
    v9.i64[0] = 4294901760;
    v9.i64[1] = 4294901760;
    v10 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v8, v9)));
    v11 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)vnegq_s64(v10));
    v12.i64[0] = 65280;
    v12.i64[1] = 65280;
    v13 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v11, v12)));
    v14 = (int8x16_t)vshlq_u64((uint64x2_t)v11, (uint64x2_t)vnegq_s64(v13));
    v15 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)vdupq_n_s64(0xF0uLL))));
    v16 = (int64x2_t)vshlq_u64((uint64x2_t)v14, (uint64x2_t)vnegq_s64(v15));
    v17 = (int8x16_t)vdupq_n_s64(2uLL);
    v18 = vbicq_s8(v17, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v16, (int8x16_t)vdupq_n_s64(0xCuLL))));
    v23 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vsubq_s64(v7, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)v18), v16)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), (int8x16_t)v15), v18)));
    if ((v3 & (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v23.i32[1])) == 0)
      v4 = 1;
  }
  v21 = a1;
  v19 = *(_QWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  v22 = a2;
  return v19 < *(_QWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom_compare_z_order_2i64(int64x2_t a1, int64x2_t a2)
{
  int64x2_t v2;
  unsigned __int8 v3;
  char v4;
  uint64x2_t v5;
  uint64x2_t v6;
  int64x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int64x2_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  int64x2_t v21;
  int64x2_t v22;
  int32x2_t v23;

  v2 = vceqq_s64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  v4 = ~v3;
  if ((vmovn_s64(v2).i32[1] & 1) == 0)
  {
    v5 = (uint64x2_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
    v6.i64[0] = 0xFFFFFFFFLL;
    v6.i64[1] = 0xFFFFFFFFLL;
    v7 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v5, v6), (int8x16_t)vdupq_n_s64(0x20uLL));
    v8 = (int8x16_t)vshlq_u64(v5, (uint64x2_t)vnegq_s64(v7));
    v9.i64[0] = 4294901760;
    v9.i64[1] = 4294901760;
    v10 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v8, v9)));
    v11 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)vnegq_s64(v10));
    v12.i64[0] = 65280;
    v12.i64[1] = 65280;
    v13 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v11, v12)));
    v14 = (int8x16_t)vshlq_u64((uint64x2_t)v11, (uint64x2_t)vnegq_s64(v13));
    v15 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)vdupq_n_s64(0xF0uLL))));
    v16 = (int64x2_t)vshlq_u64((uint64x2_t)v14, (uint64x2_t)vnegq_s64(v15));
    v17 = (int8x16_t)vdupq_n_s64(2uLL);
    v18 = vbicq_s8(v17, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v16, (int8x16_t)vdupq_n_s64(0xCuLL))));
    v23 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vsubq_s64(v7, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)v18), v16)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), (int8x16_t)v15), v18)));
    if ((v3 & (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v23.i32[1])) == 0)
      v4 = 1;
  }
  v21 = a1;
  v19 = *(_QWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  v22 = a2;
  return v19 < *(_QWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom::compare_z_order<long long,(unsigned char)3>(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int32x4_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  uint64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  uint64x2_t v22;
  unsigned __int16 v23;
  int8x16_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  uint64x2_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  _OWORD v49[2];
  _OWORD v50[2];
  int32x4_t v51;
  int32x4_t v52;

  v7 = *(int8x16_t *)a1;
  v8 = *(int64x2_t *)(a1 + 16);
  v9 = *(int8x16_t *)a2;
  v10 = *(int64x2_t *)(a2 + 16);
  v11 = vceqq_s64(v8, v10);
  v12 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), vandq_s8((int8x16_t)v11, (int8x16_t)v12)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v13 = vextq_s8(v7, v7, 8uLL).u64[0];
  v14 = vextq_s8(v9, v9, 8uLL).u64[0];
  v15 = (uint64x2_t)veorq_s8((int8x16_t)v10, (int8x16_t)v8);
  v16 = (uint64x2_t)veorq_s8(v9, v7);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  v18 = (int8x16_t)vcgtq_u64(v16, v17);
  v2.i64[0] = 32;
  v19 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v15, v17), v2);
  v20 = (int64x2_t)vandq_s8(v18, (int8x16_t)vdupq_n_s64(0x20uLL));
  v21 = (int8x16_t)vshlq_u64(v16, (uint64x2_t)vnegq_s64(v20));
  v22 = vshlq_u64(v15, (uint64x2_t)vnegq_s64(v19));
  LOBYTE(v23) = 0;
  v2.i8[0] = 0;
  v2.i16[1] = v22.i16[1];
  v24.i64[0] = 4294901760;
  v24.i64[1] = 4294901760;
  v3.i64[0] = 16;
  v25 = (int64x2_t)vbicq_s8(v3, (int8x16_t)vceqzq_s64((int64x2_t)v2.u64[0]));
  v26 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v24)));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v26));
  v28 = vshlq_u64(v22, (uint64x2_t)vnegq_s64(v25));
  HIBYTE(v23) = v28.i8[1];
  v29.i64[0] = 65280;
  v29.i64[1] = 65280;
  v4.i64[0] = 8;
  v30 = (int64x2_t)vbicq_s8(v4, (int8x16_t)vceqzq_s64((int64x2_t)v23));
  v31 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v29)));
  v32 = (int8x16_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vshlq_u64(v28, (uint64x2_t)vnegq_s64(v30));
  v4.i64[0] = 240;
  v5.i64[0] = 4;
  v34 = (int64x2_t)vbicq_s8(v5, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v33, v4)));
  v35 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v32, (int8x16_t)vdupq_n_s64(0xF0uLL))));
  v36 = (int64x2_t)vshlq_u64((uint64x2_t)v32, (uint64x2_t)vnegq_s64(v35));
  v37 = (int64x2_t)vshlq_u64((uint64x2_t)v33, (uint64x2_t)vnegq_s64(v34));
  v5.i64[0] = 12;
  v38 = (int8x16_t)vdupq_n_s64(2uLL);
  v6.i64[0] = 2;
  v39 = vbicq_s8(v6, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v37, v5)));
  v40 = vbicq_s8(v38, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v36, (int8x16_t)vdupq_n_s64(0xCuLL))));
  v41 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v20, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)v40), v36)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v26, (int8x16_t)v31), (int8x16_t)v35), v40)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v19, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)v39), v37)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v25, (int8x16_t)v30), (int8x16_t)v34), v39)));
  v42 = (int32x4_t)vmvnq_s8((int8x16_t)v12);
  *(int32x2_t *)v42.i8 = vmovn_s64((int64x2_t)v42);
  v43 = vmovn_s32(v42).u8[0];
  v44 = (v43 & 1) - 1;
  *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)v12);
  if ((vmovn_s32(v12).i8[2] & 1) == 0)
  {
    v52 = v41;
    if ((v43 & (*(_DWORD *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v43 & 1) - 1) & 3))) > v41.i32[1])) == 0)
      v44 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v11, v11)).i32[1] & 1) == 0)
  {
    v51 = v41;
    if (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3))) <= v41.i32[2]
      || ~v44 == 0)
    {
      v44 = 2;
    }
  }
  v7.i64[1] = v13;
  v50[0] = v7;
  v50[1] = v8;
  v46 = v44 & 3;
  v47 = *((_QWORD *)v50 + v46);
  v9.i64[1] = v14;
  v49[0] = v9;
  v49[1] = v10;
  return v47 < *((_QWORD *)v49 + v46);
}

BOOL geom_compare_z_order_3i64(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int32x4_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  uint64x2_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  uint64x2_t v22;
  unsigned __int16 v23;
  int8x16_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  uint64x2_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v46;
  uint64_t v47;
  _OWORD v49[2];
  _OWORD v50[2];
  int32x4_t v51;
  int32x4_t v52;

  v7 = *(int8x16_t *)a1;
  v8 = *(int64x2_t *)(a1 + 16);
  v9 = *(int8x16_t *)a2;
  v10 = *(int64x2_t *)(a2 + 16);
  v11 = vceqq_s64(v8, v10);
  v12 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), vandq_s8((int8x16_t)v11, (int8x16_t)v12)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v13 = vextq_s8(v7, v7, 8uLL).u64[0];
  v14 = vextq_s8(v9, v9, 8uLL).u64[0];
  v15 = (uint64x2_t)veorq_s8((int8x16_t)v10, (int8x16_t)v8);
  v16 = (uint64x2_t)veorq_s8(v9, v7);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  v18 = (int8x16_t)vcgtq_u64(v16, v17);
  v2.i64[0] = 32;
  v19 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v15, v17), v2);
  v20 = (int64x2_t)vandq_s8(v18, (int8x16_t)vdupq_n_s64(0x20uLL));
  v21 = (int8x16_t)vshlq_u64(v16, (uint64x2_t)vnegq_s64(v20));
  v22 = vshlq_u64(v15, (uint64x2_t)vnegq_s64(v19));
  LOBYTE(v23) = 0;
  v2.i8[0] = 0;
  v2.i16[1] = v22.i16[1];
  v24.i64[0] = 4294901760;
  v24.i64[1] = 4294901760;
  v3.i64[0] = 16;
  v25 = (int64x2_t)vbicq_s8(v3, (int8x16_t)vceqzq_s64((int64x2_t)v2.u64[0]));
  v26 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v24)));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v26));
  v28 = vshlq_u64(v22, (uint64x2_t)vnegq_s64(v25));
  HIBYTE(v23) = v28.i8[1];
  v29.i64[0] = 65280;
  v29.i64[1] = 65280;
  v4.i64[0] = 8;
  v30 = (int64x2_t)vbicq_s8(v4, (int8x16_t)vceqzq_s64((int64x2_t)v23));
  v31 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v29)));
  v32 = (int8x16_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vshlq_u64(v28, (uint64x2_t)vnegq_s64(v30));
  v4.i64[0] = 240;
  v5.i64[0] = 4;
  v34 = (int64x2_t)vbicq_s8(v5, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v33, v4)));
  v35 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v32, (int8x16_t)vdupq_n_s64(0xF0uLL))));
  v36 = (int64x2_t)vshlq_u64((uint64x2_t)v32, (uint64x2_t)vnegq_s64(v35));
  v37 = (int64x2_t)vshlq_u64((uint64x2_t)v33, (uint64x2_t)vnegq_s64(v34));
  v5.i64[0] = 12;
  v38 = (int8x16_t)vdupq_n_s64(2uLL);
  v6.i64[0] = 2;
  v39 = vbicq_s8(v6, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v37, v5)));
  v40 = vbicq_s8(v38, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v36, (int8x16_t)vdupq_n_s64(0xCuLL))));
  v41 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v20, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)v40), v36)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v26, (int8x16_t)v31), (int8x16_t)v35), v40)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v19, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)v39), v37)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v25, (int8x16_t)v30), (int8x16_t)v34), v39)));
  v42 = (int32x4_t)vmvnq_s8((int8x16_t)v12);
  *(int32x2_t *)v42.i8 = vmovn_s64((int64x2_t)v42);
  v43 = vmovn_s32(v42).u8[0];
  v44 = (v43 & 1) - 1;
  *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)v12);
  if ((vmovn_s32(v12).i8[2] & 1) == 0)
  {
    v52 = v41;
    if ((v43 & (*(_DWORD *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v43 & 1) - 1) & 3))) > v41.i32[1])) == 0)
      v44 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v11, v11)).i32[1] & 1) == 0)
  {
    v51 = v41;
    if (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3))) <= v41.i32[2]
      || ~v44 == 0)
    {
      v44 = 2;
    }
  }
  v7.i64[1] = v13;
  v50[0] = v7;
  v50[1] = v8;
  v46 = v44 & 3;
  v47 = *((_QWORD *)v50 + v46);
  v9.i64[1] = v14;
  v49[0] = v9;
  v49[1] = v10;
  return v47 < *((_QWORD *)v49 + v46);
}

BOOL geom::compare_z_order<long long,(unsigned char)4>(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int64x2_t v3;
  int8x16_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int32x4_t v7;
  int64x2_t v8;
  uint64x2_t v9;
  uint64x2_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v44;
  uint64_t v45;
  _OWORD v47[2];
  _OWORD v48[2];
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;

  v2 = *(int8x16_t *)a1;
  v3 = *(int64x2_t *)(a1 + 16);
  v4 = *(int8x16_t *)a2;
  v5 = *(int64x2_t *)(a2 + 16);
  v6 = vceqq_s64(v3, v5);
  v7 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  v8 = (int64x2_t)vandq_s8((int8x16_t)v7, (int8x16_t)v6);
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v9 = (uint64x2_t)veorq_s8((int8x16_t)v5, (int8x16_t)v3);
  v10 = (uint64x2_t)veorq_s8(v4, v2);
  v11.i64[0] = 0xFFFFFFFFLL;
  v11.i64[1] = 0xFFFFFFFFLL;
  v12 = (int8x16_t)vcgtq_u64(v10, v11);
  v13 = (int8x16_t)vdupq_n_s64(0x20uLL);
  v14 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v9, v11), v13);
  v15 = (int64x2_t)vandq_s8(v12, v13);
  v16 = (int8x16_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v15));
  v17 = (int8x16_t)vshlq_u64(v9, (uint64x2_t)vnegq_s64(v14));
  v13.i64[0] = 4294901760;
  v13.i64[1] = 4294901760;
  v18 = (int8x16_t)vdupq_n_s64(0x10uLL);
  v19 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v17, v13)));
  v20 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v16, v13)));
  v21 = (int8x16_t)vshlq_u64((uint64x2_t)v16, (uint64x2_t)vnegq_s64(v20));
  v22 = (int8x16_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)vnegq_s64(v19));
  v18.i64[0] = 65280;
  v18.i64[1] = 65280;
  v23 = (int8x16_t)vdupq_n_s64(8uLL);
  v24 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v22, v18)));
  v25 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v18)));
  v26 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v25));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v22, (uint64x2_t)vnegq_s64(v24));
  v28 = (int8x16_t)vdupq_n_s64(0xF0uLL);
  v29 = (int8x16_t)vdupq_n_s64(4uLL);
  v30 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v28)));
  v31 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v28)));
  v32 = (int64x2_t)vshlq_u64((uint64x2_t)v26, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vdupq_n_s64(0xCuLL);
  v34 = (int64x2_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v30));
  v35 = (int8x16_t)vdupq_n_s64(2uLL);
  v36 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v33)));
  v37 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v33)));
  v38 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v15, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v37), v32)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v20, (int8x16_t)v25), (int8x16_t)v31), v37)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v14, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v36), v34)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v19, (int8x16_t)v24), (int8x16_t)v30), v36)));
  v39 = (int32x4_t)vmvnq_s8((int8x16_t)v7);
  *(int32x2_t *)v39.i8 = vmovn_s64((int64x2_t)v39);
  v40 = vmovn_s32(v39).u8[0];
  v41 = (v40 & 1) - 1;
  *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v7);
  *(int16x4_t *)v7.i8 = vmovn_s32(v7);
  if ((v7.i8[2] & 1) == 0)
  {
    v51 = v38;
    if ((v40 & (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v40 & 1) - 1) & 3))) > v38.i32[1])) == 0)
      v41 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v7, v6)).i32[1] & 1) == 0)
  {
    v50 = v38;
    if (*(_DWORD *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[2]
      || ~v41 == 0)
    {
      v41 = 2;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v6, v6)).i8[6] & 1) == 0)
  {
    v49 = v38;
    if (*(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[3]
      || ~v41 == 0)
    {
      v41 = 3;
    }
  }
  v48[0] = v2;
  v48[1] = v3;
  v44 = v41 & 3;
  v45 = *((_QWORD *)v48 + v44);
  v47[0] = v4;
  v47[1] = v5;
  return v45 < *((_QWORD *)v47 + v44);
}

BOOL geom_compare_z_order_4i64(uint64_t a1, uint64_t a2)
{
  int8x16_t v2;
  int64x2_t v3;
  int8x16_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int32x4_t v7;
  int64x2_t v8;
  uint64x2_t v9;
  uint64x2_t v10;
  uint64x2_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v44;
  uint64_t v45;
  _OWORD v47[2];
  _OWORD v48[2];
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;

  v2 = *(int8x16_t *)a1;
  v3 = *(int64x2_t *)(a1 + 16);
  v4 = *(int8x16_t *)a2;
  v5 = *(int64x2_t *)(a2 + 16);
  v6 = vceqq_s64(v3, v5);
  v7 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  v8 = (int64x2_t)vandq_s8((int8x16_t)v7, (int8x16_t)v6);
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0)
    return 0;
  v9 = (uint64x2_t)veorq_s8((int8x16_t)v5, (int8x16_t)v3);
  v10 = (uint64x2_t)veorq_s8(v4, v2);
  v11.i64[0] = 0xFFFFFFFFLL;
  v11.i64[1] = 0xFFFFFFFFLL;
  v12 = (int8x16_t)vcgtq_u64(v10, v11);
  v13 = (int8x16_t)vdupq_n_s64(0x20uLL);
  v14 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v9, v11), v13);
  v15 = (int64x2_t)vandq_s8(v12, v13);
  v16 = (int8x16_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v15));
  v17 = (int8x16_t)vshlq_u64(v9, (uint64x2_t)vnegq_s64(v14));
  v13.i64[0] = 4294901760;
  v13.i64[1] = 4294901760;
  v18 = (int8x16_t)vdupq_n_s64(0x10uLL);
  v19 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v17, v13)));
  v20 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v16, v13)));
  v21 = (int8x16_t)vshlq_u64((uint64x2_t)v16, (uint64x2_t)vnegq_s64(v20));
  v22 = (int8x16_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)vnegq_s64(v19));
  v18.i64[0] = 65280;
  v18.i64[1] = 65280;
  v23 = (int8x16_t)vdupq_n_s64(8uLL);
  v24 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v22, v18)));
  v25 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v18)));
  v26 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v25));
  v27 = (int8x16_t)vshlq_u64((uint64x2_t)v22, (uint64x2_t)vnegq_s64(v24));
  v28 = (int8x16_t)vdupq_n_s64(0xF0uLL);
  v29 = (int8x16_t)vdupq_n_s64(4uLL);
  v30 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v28)));
  v31 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v28)));
  v32 = (int64x2_t)vshlq_u64((uint64x2_t)v26, (uint64x2_t)vnegq_s64(v31));
  v33 = (int8x16_t)vdupq_n_s64(0xCuLL);
  v34 = (int64x2_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v30));
  v35 = (int8x16_t)vdupq_n_s64(2uLL);
  v36 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v33)));
  v37 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v33)));
  v38 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v15, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v37), v32)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v20, (int8x16_t)v25), (int8x16_t)v31), v37)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v14, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v36), v34)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v19, (int8x16_t)v24), (int8x16_t)v30), v36)));
  v39 = (int32x4_t)vmvnq_s8((int8x16_t)v7);
  *(int32x2_t *)v39.i8 = vmovn_s64((int64x2_t)v39);
  v40 = vmovn_s32(v39).u8[0];
  v41 = (v40 & 1) - 1;
  *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v7);
  *(int16x4_t *)v7.i8 = vmovn_s32(v7);
  if ((v7.i8[2] & 1) == 0)
  {
    v51 = v38;
    if ((v40 & (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v40 & 1) - 1) & 3))) > v38.i32[1])) == 0)
      v41 = 1;
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v7, v6)).i32[1] & 1) == 0)
  {
    v50 = v38;
    if (*(_DWORD *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[2]
      || ~v41 == 0)
    {
      v41 = 2;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v6, v6)).i8[6] & 1) == 0)
  {
    v49 = v38;
    if (*(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[3]
      || ~v41 == 0)
    {
      v41 = 3;
    }
  }
  v48[0] = v2;
  v48[1] = v3;
  v44 = v41 & 3;
  v45 = *((_QWORD *)v48 + v44);
  v47[0] = v4;
  v47[1] = v5;
  return v45 < *((_QWORD *)v47 + v44);
}

uint64_t geom::`anonymous namespace'::msdb<float,0>(float a1, float a2)
{
  float v3;
  float v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (a1 == a2)
    return 0;
  if (a1 == 0.0)
    v3 = 0.0;
  else
    v3 = a1;
  if (a2 == 0.0)
  {
    a2 = a1;
    v4 = 0.0;
  }
  else
  {
    v4 = v3;
  }
  if ((LODWORD(v4) ^ LODWORD(a2)) < 0)
    return 128;
  if (v4 == 0.0)
    return (LODWORD(a2) >> 23) - 127;
  v5 = (LODWORD(v4) >> 23);
  v6 = (LODWORD(a2) >> 23);
  if (v5 > v6)
    v6 = (LODWORD(v4) >> 23);
  v7 = v6 - 127;
  v8 = v5 - __clz((LODWORD(v4) ^ LODWORD(a2)) & 0x7FFFFF) - 119;
  if (v5 == (LODWORD(a2) >> 23))
    return v8;
  else
    return v7;
}

uint64_t geom::`anonymous namespace'::msdb<double,0>(double a1, double a2)
{
  double v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a1 == a2)
    return 0;
  if (a1 == 0.0)
    v3 = 0.0;
  else
    v3 = a1;
  if (a2 == 0.0)
  {
    a2 = a1;
    v4 = 0.0;
  }
  else
  {
    v4 = v3;
  }
  if (*(_QWORD *)&v4 >> 63 != *(_QWORD *)&a2 >> 63)
    return 1024;
  if (v4 == 0.0)
    return ((*(_QWORD *)&a2 >> 52) & 0x7FF) - 1023;
  v5 = (*(_QWORD *)&v4 >> 52) & 0x7FFLL;
  v6 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  if (v5 <= v6)
    v7 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  else
    v7 = (*(_QWORD *)&v4 >> 52) & 0x7FFLL;
  v8 = v7 - 1023;
  v9 = v5 - __clz((*(_QWORD *)&v4 ^ *(_QWORD *)&a2) & 0xFFFFFFFFFFFFFLL) - 1012;
  if ((_DWORD)v5 == (_DWORD)v6)
    return v9;
  else
    return v8;
}

void geom::partitioned_set::split(uint64_t *a1, _DWORD *a2, unsigned int a3, std::vector<int> *this, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  std::vector<int>::pointer begin;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  std::vector<int>::pointer end;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  int v62;
  int v63;

  std::vector<unsigned int>::resize(this, 0);
  std::vector<unsigned int>::resize(this, a3, &geom::partitioned_set::null_index);
  v10 = *a2;
  v11 = a1[9];
  v12 = (_QWORD *)a1[10];
  if (v10 < ((uint64_t)v12 - v11) >> 3)
  {
    v13 = *(unsigned int *)(v11 + 8 * v10);
    if ((_DWORD)v13 != -1)
    {
      if (!a3)
        goto LABEL_27;
      v14 = 0;
      do
      {
        v15 = a1[13];
        if (a1[12] == v15)
        {
          v17 = a1[9];
          v16 = ((uint64_t)v12 - v17) >> 3;
          v18 = a1[11];
          if ((unint64_t)v12 >= v18)
          {
            if ((unint64_t)(v16 + 1) >> 61)
              goto LABEL_74;
            v19 = v18 - v17;
            v20 = v19 >> 2;
            if (v19 >> 2 <= (unint64_t)(v16 + 1))
              v20 = v16 + 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            if (v21)
              v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 11), v21);
            else
              v22 = 0;
            v23 = &v22[8 * v16];
            *(_QWORD *)v23 = -1;
            v12 = v23 + 8;
            v25 = (char *)a1[9];
            v24 = (char *)a1[10];
            if (v24 != v25)
            {
              do
              {
                v26 = *((_QWORD *)v24 - 1);
                v24 -= 8;
                *((_QWORD *)v23 - 1) = v26;
                v23 -= 8;
              }
              while (v24 != v25);
              v24 = (char *)a1[9];
            }
            a1[9] = (uint64_t)v23;
            a1[10] = (uint64_t)v12;
            a1[11] = (uint64_t)&v22[8 * v21];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *v12++ = -1;
          }
          a1[10] = (uint64_t)v12;
        }
        else
        {
          LODWORD(v16) = *(_DWORD *)(v15 - 4);
          a1[13] = v15 - 4;
        }
        this->__begin_[v14++] = v16;
      }
      while (v14 != a3);
      v27 = a1[9];
      v13 = *(unsigned int *)(v27 + 8 * *a2);
      if ((_DWORD)v13 == -1)
      {
        begin = this->__begin_;
LABEL_33:
        end = this->__end_;
        if (begin != end)
        {
          do
          {
            v36 = *begin;
            v37 = a1[9];
            v38 = *(unsigned int *)(v37 + 8 * v36);
            if ((_DWORD)v38 == -1)
            {
              v41 = (char *)a1[13];
              v40 = a1[14];
              if ((unint64_t)v41 >= v40)
              {
                v43 = (char *)a1[12];
                v44 = (v41 - v43) >> 2;
                v45 = v44 + 1;
                if ((unint64_t)(v44 + 1) >> 62)
                  goto LABEL_74;
                v46 = v40 - (_QWORD)v43;
                if (v46 >> 1 > v45)
                  v45 = v46 >> 1;
                if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                  v47 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (v47)
                {
                  v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 14), v47);
                  v43 = (char *)a1[12];
                  v41 = (char *)a1[13];
                  LODWORD(v36) = *begin;
                }
                else
                {
                  v48 = 0;
                }
                v49 = &v48[4 * v44];
                *(_DWORD *)v49 = v36;
                v42 = v49 + 4;
                while (v41 != v43)
                {
                  v50 = *((_DWORD *)v41 - 1);
                  v41 -= 4;
                  *((_DWORD *)v49 - 1) = v50;
                  v49 -= 4;
                }
                a1[12] = (uint64_t)v49;
                a1[13] = (uint64_t)v42;
                a1[14] = (uint64_t)&v48[4 * v47];
                if (v43)
                  operator delete(v43);
              }
              else
              {
                *(_DWORD *)v41 = v36;
                v42 = v41 + 4;
              }
              a1[13] = (uint64_t)v42;
              *begin = -1;
            }
            else
            {
              v39 = a1[6];
              *(_DWORD *)(v39 + 4 * v38) = v36;
              *(_DWORD *)(v39 + 4 * *(unsigned int *)(v37 + 8 * *begin + 4)) = *begin;
            }
            ++begin;
          }
          while (begin != end);
          v27 = a1[9];
        }
        *(_DWORD *)(v27 + 8 * *a2) = -1;
        *(_DWORD *)(v27 + 8 * *a2 + 4) = -1;
        v51 = a1[14];
        v52 = (char *)a1[13];
        if ((unint64_t)v52 < v51)
        {
          *(_DWORD *)v52 = *a2;
          v53 = v52 + 4;
LABEL_71:
          a1[13] = (uint64_t)v53;
          return;
        }
        v54 = (char *)a1[12];
        v55 = (v52 - v54) >> 2;
        v56 = v55 + 1;
        if (!((unint64_t)(v55 + 1) >> 62))
        {
          v57 = v51 - (_QWORD)v54;
          if (v57 >> 1 > v56)
            v56 = v57 >> 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
            v58 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 14), v58);
            v54 = (char *)a1[12];
            v52 = (char *)a1[13];
          }
          else
          {
            v59 = 0;
          }
          v60 = &v59[4 * v55];
          v61 = &v59[4 * v58];
          *(_DWORD *)v60 = *a2;
          v53 = v60 + 4;
          while (v52 != v54)
          {
            v62 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *((_DWORD *)v60 - 1) = v62;
            v60 -= 4;
          }
          a1[12] = (uint64_t)v60;
          a1[13] = (uint64_t)v53;
          a1[14] = (uint64_t)v61;
          if (v54)
            operator delete(v54);
          goto LABEL_71;
        }
      }
      else
      {
LABEL_27:
        v29 = *a1;
        while (1)
        {
          v30 = *(unsigned int *)(v29 + 4 * v13);
          v63 = v13;
          v31 = *(_QWORD *)(a5 + 24);
          if (!v31)
            break;
          v32 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v31 + 48))(v31, &v63);
          begin = this->__begin_;
          v27 = a1[9];
          v33 = (_DWORD *)(v27 + 8 * this->__begin_[v32]);
          v34 = v33 + 1;
          if (*v33 == -1)
          {
            *v34 = v13;
            *v33 = v13;
            *(_DWORD *)(a1[3] + 4 * v13) = -1;
            v29 = *a1;
          }
          else
          {
            v29 = *a1;
            *(_DWORD *)(*a1 + 4 * *v34) = v13;
            *(_DWORD *)(a1[3] + 4 * v13) = *v34;
            *v34 = v13;
          }
          *(_DWORD *)(v29 + 4 * v13) = -1;
          v13 = v30;
          if (v30 == 0xFFFFFFFFLL)
            goto LABEL_33;
        }
        std::__throw_bad_function_call[abi:nn180100]();
      }
LABEL_74:
      abort();
    }
  }
}

uint64_t geom::partitioned_set::merge(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  unsigned int *v27;

  if (!a3)
    return 0xFFFFFFFFLL;
  v3 = a2;
  v5 = (uint64_t)(a1 + 14);
  v6 = -1;
  v7 = 0xFFFFFFFFLL;
  v8 = 0xFFFFFFFFLL;
  v9 = &a2[a3];
  do
  {
    v10 = *v3;
    v11 = a1[9];
    if (v10 < (a1[10] - v11) >> 3)
    {
      v12 = (unsigned int *)(v11 + 8 * v10);
      if (*v12 != -1)
      {
        v8 = (_DWORD)v8 == -1 ? v10 : v8;
        if (v6 == -1)
        {
          v13 = *v3;
          v6 = *v12;
        }
        else
        {
          *(_DWORD *)(*a1 + 4 * v7) = *v12;
          *(_DWORD *)(a1[3] + 4 * *v12) = v7;
          v13 = *v3;
        }
        v7 = *(unsigned int *)(v11 + 8 * v10 + 4);
        if ((_DWORD)v8 != v13)
        {
          *(_QWORD *)v12 = -1;
          v15 = (char *)a1[13];
          v14 = a1[14];
          if ((unint64_t)v15 >= v14)
          {
            v17 = (char *)a1[12];
            v18 = (v15 - v17) >> 2;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              abort();
            v20 = v14 - (_QWORD)v17;
            if (v20 >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5, v21);
              v17 = (char *)a1[12];
              v15 = (char *)a1[13];
            }
            else
            {
              v22 = 0;
            }
            v23 = (unsigned int *)&v22[4 * v18];
            *v23 = *v3;
            v16 = v23 + 1;
            while (v15 != v17)
            {
              v24 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *--v23 = v24;
            }
            a1[12] = v23;
            a1[13] = v16;
            a1[14] = &v22[4 * v21];
            if (v17)
              operator delete(v17);
          }
          else
          {
            *(_DWORD *)v15 = *v3;
            v16 = v15 + 4;
          }
          a1[13] = v16;
        }
      }
    }
    ++v3;
  }
  while (v3 != v9);
  result = 0xFFFFFFFFLL;
  if (v7 != 0xFFFFFFFFLL)
  {
    *(_DWORD *)(*a1 + 4 * v7) = -1;
    *(_DWORD *)(a1[3] + 4 * v6) = -1;
    v26 = a1[6];
    *(_DWORD *)(v26 + 4 * v6) = v8;
    *(_DWORD *)(v26 + 4 * v7) = v8;
    v27 = (unsigned int *)(a1[9] + 8 * v8);
    *v27 = v6;
    v27[1] = v7;
    return v8;
  }
  return result;
}

uint64_t geom::partitioned_set::extract(geom::partitioned_set *this, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + 4 * a2);
  v4 = a2;
  v5 = *(_DWORD *)(*(_QWORD *)this + 4 * a2);
  if (v3 == -1 && v5 == -1)
    return *(unsigned int *)(*((_QWORD *)this + 6) + 4 * a2);
  v7 = *((_QWORD *)this + 13);
  if (*((_QWORD *)this + 12) == v7)
  {
    v9 = (char *)this + 88;
    v10 = *((_QWORD *)this + 11);
    v11 = *((_QWORD *)this + 9);
    v12 = (unint64_t *)*((_QWORD *)this + 10);
    v8 = ((uint64_t)v12 - v11) >> 3;
    if ((unint64_t)v12 >= v10)
    {
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v14 = v10 - v11;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v8 + 1))
        v15 = v8 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)v9, v16);
      else
        v17 = 0;
      v18 = &v17[8 * v8];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = v4 | (v4 << 32);
      v13 = v18 + 8;
      v21 = (char *)*((_QWORD *)this + 9);
      v20 = (char *)*((_QWORD *)this + 10);
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        v20 = (char *)*((_QWORD *)this + 9);
      }
      *((_QWORD *)this + 9) = v18;
      *((_QWORD *)this + 10) = v13;
      *((_QWORD *)this + 11) = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v12 = a2 | ((unint64_t)a2 << 32);
      v13 = v12 + 1;
    }
    *((_QWORD *)this + 10) = v13;
  }
  else
  {
    v8 = *(unsigned int *)(v7 - 4);
    *((_QWORD *)this + 13) = v7 - 4;
    *(int32x2_t *)(*((_QWORD *)this + 9) + 8 * v8) = vdup_n_s32(a2);
  }
  if (v3 == -1)
  {
    v24 = *((_QWORD *)this + 6);
    v25 = *(unsigned int *)(v24 + 4 * v4);
    v23 = *(_QWORD *)this;
    *(_DWORD *)(v24 + 4 * *(unsigned int *)(*(_QWORD *)this + 4 * v4)) = v25;
    *(_DWORD *)(*((_QWORD *)this + 9) + 8 * v25) = *(_DWORD *)(v23 + 4 * v4);
  }
  else
  {
    v23 = *(_QWORD *)this;
    *(_DWORD *)(*(_QWORD *)this + 4 * *(unsigned int *)(*((_QWORD *)this + 3) + 4 * v4)) = *(_DWORD *)(*(_QWORD *)this + 4 * v4);
  }
  if (v5 == -1)
  {
    v27 = *((_QWORD *)this + 6);
    v28 = *(unsigned int *)(v27 + 4 * v4);
    v26 = *((_QWORD *)this + 3);
    *(_DWORD *)(v27 + 4 * *(unsigned int *)(v26 + 4 * v4)) = v28;
    *(_DWORD *)(*((_QWORD *)this + 9) + 8 * v28 + 4) = *(_DWORD *)(v26 + 4 * v4);
  }
  else
  {
    v26 = *((_QWORD *)this + 3);
    *(_DWORD *)(v26 + 4 * *(unsigned int *)(v23 + 4 * v4)) = *(_DWORD *)(v26 + 4 * v4);
    v27 = *((_QWORD *)this + 6);
  }
  *(_DWORD *)(v23 + 4 * v4) = -1;
  *(_DWORD *)(v26 + 4 * v4) = -1;
  *(_DWORD *)(v27 + 4 * v4) = v8;
  return v8;
}

void geom::partitioned_set::extract(geom::partitioned_set *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;

  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned int *)(v6 + 4 * a2);
  v8 = a2;
  v9 = *(_QWORD *)this;
  v10 = *(unsigned int *)(*(_QWORD *)this + 4 * a2);
  if ((_DWORD)v7 == -1 && (_DWORD)v10 == -1)
  {
    v12 = *(unsigned int *)(*((_QWORD *)this + 6) + 4 * a2);
    if ((_DWORD)v12 == a3)
      return;
    v13 = *((_QWORD *)this + 14);
    v14 = (char *)*((_QWORD *)this + 13);
    if ((unint64_t)v14 >= v13)
    {
      v21 = (char *)*((_QWORD *)this + 12);
      v22 = (v14 - v21) >> 2;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        abort();
      v24 = v13 - (_QWORD)v21;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)this + 112, v25);
        v21 = (char *)*((_QWORD *)this + 12);
        v14 = (char *)*((_QWORD *)this + 13);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = v12;
      v15 = v27 + 4;
      while (v14 != v21)
      {
        v29 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *((_QWORD *)this + 12) = v27;
      *((_QWORD *)this + 13) = v15;
      *((_QWORD *)this + 14) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v14 = v12;
      v15 = v14 + 4;
    }
    *((_QWORD *)this + 13) = v15;
    v18 = *((_QWORD *)this + 9);
    *(_QWORD *)(v18 + 8 * v12) = -1;
    v6 = *((_QWORD *)this + 3);
    v9 = *(_QWORD *)this;
  }
  else
  {
    if ((_DWORD)v7 == -1)
    {
      v16 = *((_QWORD *)this + 6);
      v17 = *(unsigned int *)(v16 + 4 * a2);
      *(_DWORD *)(v16 + 4 * v10) = v17;
      *(_DWORD *)(*((_QWORD *)this + 9) + 8 * v17) = *(_DWORD *)(v9 + 4 * a2);
    }
    else
    {
      *(_DWORD *)(v9 + 4 * v7) = v10;
    }
    if ((_DWORD)v10 == -1)
    {
      v19 = *((_QWORD *)this + 6);
      v20 = *(unsigned int *)(v19 + 4 * a2);
      *(_DWORD *)(v19 + 4 * *(unsigned int *)(v6 + 4 * a2)) = v20;
      v18 = *((_QWORD *)this + 9);
      *(_DWORD *)(v18 + 8 * v20 + 4) = *(_DWORD *)(v6 + 4 * a2);
    }
    else
    {
      *(_DWORD *)(v6 + 4 * *(unsigned int *)(v9 + 4 * a2)) = *(_DWORD *)(v6 + 4 * a2);
      v18 = *((_QWORD *)this + 9);
    }
    *(_DWORD *)(v9 + 4 * a2) = -1;
  }
  v30 = v18 + 8 * a3;
  *(_DWORD *)(v6 + 4 * v8) = *(_DWORD *)(v30 + 4);
  *(_DWORD *)(v9 + 4 * *(unsigned int *)(v30 + 4)) = a2;
  *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v8) = a3;
  *(_DWORD *)(v30 + 4) = a2;
}

void geom::acd<float>::impl::split_clusters_automatically(uint64_t a1, unsigned int *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  void *__p;
  char *v41;
  char *v42;
  uint64_t v43;

  __p = 0;
  v41 = 0;
  v42 = 0;
  v4 = *(char **)(a1 + 128);
  if (v4)
  {
    v5 = 0;
    do
    {
      if (v5 >= v42)
      {
        v6 = (char *)__p;
        v7 = (v5 - (_BYTE *)__p) >> 2;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 62)
LABEL_63:
          abort();
        v9 = v42 - (_BYTE *)__p;
        if ((v42 - (_BYTE *)__p) >> 1 > v8)
          v8 = v9 >> 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
        {
          v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v42, v10);
          v6 = (char *)__p;
          v5 = v41;
        }
        else
        {
          v11 = 0;
        }
        v12 = &v11[4 * v7];
        *(_DWORD *)v12 = *((_DWORD *)v4 + 4);
        v13 = v12 + 4;
        while (v5 != v6)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        __p = v12;
        v41 = v13;
        v42 = &v11[4 * v10];
        if (v6)
          operator delete(v6);
        v5 = v13;
      }
      else
      {
        *(_DWORD *)v5 = *((_DWORD *)v4 + 4);
        v5 += 4;
      }
      v41 = v5;
      v4 = *(char **)v4;
    }
    while (v4);
    v4 = (char *)__p;
  }
  else
  {
    v5 = 0;
  }
  v37 = (_DWORD *)a1;
  v15 = v5 - v4;
  if (v5 - v4 >= 5)
  {
    v16 = v15 >> 2;
    v17 = (unint64_t)((v15 >> 2) - 2) >> 1;
    v18 = v17 + 1;
    v19 = (unsigned int *)&v4[4 * v17];
    do
    {
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<float>::impl::split_clusters_automatically(geom::acd<float>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(v4, &v37, v16, v19--);
      --v18;
    }
    while (v18);
    v4 = (char *)__p;
    v5 = v41;
  }
  if (v4 != v5)
  {
    while (1)
    {
      if (*(_QWORD *)(a1 + 136) >= (unint64_t)*a2)
        goto LABEL_60;
      v20 = *(_DWORD *)v4;
      v37 = (_DWORD *)a1;
      if (v5 - v4 >= 5)
      {
        v21 = *(_DWORD *)v4;
        v22 = (char *)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<float>::impl::split_clusters_automatically(geom::acd<float>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(v4, &v37, (unint64_t)(v5 - v4) >> 2);
        v23 = v5 - 4;
        if (v5 - 4 == v22)
        {
          *(_DWORD *)v22 = v21;
        }
        else
        {
          *(_DWORD *)v22 = *(_DWORD *)v23;
          *(_DWORD *)v23 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<float>::impl::split_clusters_automatically(geom::acd<float>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(v4, (uint64_t)(v22 + 4), &v37, (v22 + 4 - v4) >> 2);
        }
      }
      v41 -= 4;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      geom::acd<float>::impl::cut_to_reduce_concavity(a1, v20, (uint64_t)&v37, (uint64_t)a2);
      v24 = v37;
      v25 = v38;
      if ((unint64_t)((char *)v38 - (char *)v37) >= 5)
      {
        if (v37 == v38)
        {
          v24 = v38;
          if (!v38)
            goto LABEL_55;
LABEL_54:
          v38 = v24;
          operator delete(v24);
          goto LABEL_55;
        }
        do
        {
          v26 = *v24;
          v27 = v41;
          if (v41 >= v42)
          {
            v29 = (char *)__p;
            v30 = (v41 - (_BYTE *)__p) >> 2;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62)
              goto LABEL_63;
            v32 = v42 - (_BYTE *)__p;
            if ((v42 - (_BYTE *)__p) >> 1 > v31)
              v31 = v32 >> 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
              v33 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v42, v33);
              v29 = (char *)__p;
              v27 = v41;
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[4 * v30];
            *(_DWORD *)v35 = v26;
            v28 = (uint64_t)(v35 + 4);
            while (v27 != v29)
            {
              v36 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            __p = v35;
            v41 = (char *)v28;
            v42 = &v34[4 * v33];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *(_DWORD *)v41 = v26;
            v28 = (uint64_t)(v27 + 4);
          }
          v41 = (char *)v28;
          v43 = a1;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<float>::impl::split_clusters_automatically(geom::acd<float>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(__p, v28, &v43, (v28 - (uint64_t)__p) >> 2);
          ++v24;
        }
        while (v24 != v25);
        v24 = v37;
      }
      if (v24)
        goto LABEL_54;
LABEL_55:
      v4 = (char *)__p;
      v5 = v41;
      if (__p == v41)
        goto LABEL_60;
    }
  }
  v4 = v5;
LABEL_60:
  if (v4)
  {
    v41 = v4;
    operator delete(v4);
  }
}

void geom::acd<float>::impl::cut_to_reduce_concavity(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  float v9;
  unsigned int *v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  float32x4_t *v24;
  float32x4_t *v25;
  float v26;
  __int128 *v27;
  __int128 *v28;
  float v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _DWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int *v63;
  _DWORD *v64;
  unsigned int *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  int32x4_t v74;
  void *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unsigned int *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unsigned int *v91;
  _DWORD *v92;
  char *v93;
  char *v94;
  int v95;
  unsigned int *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unsigned int *v102;
  char *v103;
  unsigned int v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  unsigned int *v119;
  _DWORD *v120;
  unsigned int *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  unsigned int *v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unsigned int *v144;
  _DWORD *v145;
  unsigned int *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unsigned int *v152;
  char *v153;
  unsigned int v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  float32x4_t *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD v172[3];
  __int128 v173;
  __int128 v174;
  int32x4_t v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  _QWORD v180[4];
  __int16 v181;
  __int128 v182;
  __int128 v183;
  int32x4_t v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  _QWORD v189[4];
  __int16 v190;
  __int128 v191;
  __int128 v192;
  int32x4_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  _QWORD v198[4];
  __int16 v199;
  __int128 v200;
  __int128 v201;
  int32x4_t v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  __int128 __p;
  _QWORD v207[4];
  __int16 v208;
  float32x4_t *v209;
  float32x4_t *v210;
  uint64_t v211;
  unsigned int v212;
  _QWORD v213[2];
  __int128 v214;
  __int128 v215;
  int32x4_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  __int16 v224;
  __int128 v225;
  __int128 v226;
  int32x4_t v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  __int16 v235;
  char v236;
  char v237;
  char v238;
  _DWORD *v239[2];
  __int128 v240;
  __int128 v241;
  int32x4_t v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  __int16 v250;
  __int128 v251;
  __int128 v252;
  int32x4_t v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  __int128 v259;
  uint64_t v260;
  __int16 v261;
  char v262;
  char v263;
  char v264;
  uint64_t v265[2];
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  __int16 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  __int128 v285;
  uint64_t v286;
  __int16 v287;
  char v288;
  char v289;
  char v290;
  uint64_t v291;

  v291 = *MEMORY[0x24BDAC8D0];
  v212 = a2;
  v7 = a1 + 112;
  v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)(a1 + 112), &v212);
  v9 = *(float *)(v8[3] + 24);
  v10 = *(unsigned int **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  if ((unint64_t)v10 >= v11)
  {
    v13 = v11 - (_QWORD)v10;
    v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1)
      v14 = 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v15);
    v17 = *(unsigned int **)a3;
    v18 = *(unsigned int **)(a3 + 8);
    v20 = &v16[v19];
    *v16 = v212;
    v12 = v16 + 1;
    while (v18 != v17)
    {
      v21 = *--v18;
      *--v16 = v21;
    }
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v20;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v10 = v212;
    v12 = v10 + 1;
  }
  *(_QWORD *)(a3 + 8) = v12;
  if (v9 > 0.00000011921)
  {
    LOBYTE(v266) = 0;
    v288 = 0;
    v289 = 0;
    v290 = 0;
    v210 = 0;
    v209 = 0;
    v211 = 0;
    geom::acd<float>::impl::find_best_cut_plane((_QWORD *)a1, (float32x4_t *)v8[3], 2u, 4, (uint64_t)v265, (uint64_t)&v209);
    if (v288)
    {
      v22 = v8[3];
      if ((float)((float)((float)(*(float *)(v22 + 24) - *((float *)&v267 + 2)) - *((float *)&v278 + 2))
                 / *(float *)(v22 + 24)) >= *(float *)(a4 + 4))
      {
        v171 = v7;
        geom::cluster<float>::deinit(v22, (_QWORD *)(a1 + 224));
        v46 = v8[3];
        std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](v46, &v266);
        *(_OWORD *)(v46 + 16) = v267;
        v48 = v269;
        v47 = v270;
        v49 = v268;
        *(_QWORD *)(v46 + 80) = v271;
        *(_OWORD *)(v46 + 48) = v48;
        *(_OWORD *)(v46 + 64) = v47;
        *(_OWORD *)(v46 + 32) = v49;
        v50 = *(void **)(v46 + 88);
        if (v50)
        {
          *(_QWORD *)(v46 + 96) = v50;
          operator delete(v50);
          *(_QWORD *)(v46 + 88) = 0;
          *(_QWORD *)(v46 + 96) = 0;
          *(_QWORD *)(v46 + 104) = 0;
        }
        *(_OWORD *)(v46 + 88) = v272;
        *(_QWORD *)(v46 + 104) = v273;
        v272 = 0uLL;
        v273 = 0;
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(v46 + 112));
        *(_OWORD *)(v46 + 112) = v274;
        *(_QWORD *)(v46 + 128) = v275;
        v275 = 0;
        v274 = 0uLL;
        *(_WORD *)(v46 + 136) = v276;
        v51 = operator new();
        v52 = v280;
        *(_OWORD *)(v51 + 32) = v279;
        *(_OWORD *)(v51 + 48) = v52;
        *(_OWORD *)(v51 + 64) = v281;
        v53 = v277;
        v54 = v278;
        v277 = 0uLL;
        v55 = v284;
        *(_QWORD *)(v51 + 80) = v282;
        *(_OWORD *)v51 = v53;
        *(_OWORD *)(v51 + 16) = v54;
        *(_OWORD *)(v51 + 88) = v283;
        *(_QWORD *)(v51 + 104) = v55;
        v283 = 0uLL;
        *(_OWORD *)(v51 + 112) = v285;
        *(_QWORD *)(v51 + 128) = v286;
        v286 = 0;
        v284 = 0;
        v285 = 0uLL;
        *(_WORD *)(v51 + 136) = v287;
        v56 = (_DWORD *)(a1 + 152);
        v239[0] = (_DWORD *)(a1 + 152);
        v57 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v171, (unsigned int *)(a1 + 152), (uint64_t)&std::piecewise_construct, v239);
        v60 = v57[3];
        v58 = v57 + 3;
        v59 = v60;
        *v58 = v51;
        if (v60)
          std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v58, v59);
        v61 = (*v56)++;
        v63 = *(unsigned int **)(a3 + 8);
        v62 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v63 >= v62)
        {
          v65 = *(unsigned int **)a3;
          v66 = ((uint64_t)v63 - *(_QWORD *)a3) >> 2;
          v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 62)
            goto LABEL_171;
          v68 = v62 - (_QWORD)v65;
          if (v68 >> 1 > v67)
            v67 = v68 >> 1;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
            v69 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v69 = v67;
          if (v69)
          {
            v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v69);
            v65 = *(unsigned int **)a3;
            v63 = *(unsigned int **)(a3 + 8);
          }
          else
          {
            v70 = 0;
          }
          v93 = &v70[4 * v66];
          v94 = &v70[4 * v69];
          *(_DWORD *)v93 = v61;
          v64 = v93 + 4;
          while (v63 != v65)
          {
            v95 = *--v63;
            *((_DWORD *)v93 - 1) = v95;
            v93 -= 4;
          }
          *(_QWORD *)a3 = v93;
          *(_QWORD *)(a3 + 8) = v64;
          *(_QWORD *)(a3 + 16) = v94;
          if (v65)
            operator delete(v65);
        }
        else
        {
          *v63 = v61;
          v64 = v63 + 1;
        }
        *(_QWORD *)(a3 + 8) = v64;
      }
      else if (*(_BYTE *)(a4 + 12))
      {
        v167 = a4;
        v170 = v7;
        v168 = a3 + 16;
        std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100]((uint64_t *)&v209, v265);
        v200 = 0uLL;
        *(int32x2_t *)&v201 = vdup_n_s32(0x7FC00000u);
        DWORD2(v201) = 2143289344;
        *(_QWORD *)&v23 = 0x7F0000007FLL;
        *((_QWORD *)&v23 + 1) = 0x7F0000007FLL;
        v202 = vdupq_n_s32(0x7F800000u);
        v203 = v23;
        __p = 0u;
        memset(v207, 0, sizeof(v207));
        v208 = 0;
        v191 = 0uLL;
        *(_QWORD *)&v192 = v201;
        DWORD2(v192) = 2143289344;
        v193 = v202;
        v194 = v23;
        v197 = 0u;
        memset(v198, 0, sizeof(v198));
        v199 = 0;
        v182 = 0uLL;
        *(_QWORD *)&v183 = v201;
        DWORD2(v183) = 2143289344;
        v184 = v202;
        v185 = v23;
        v188 = 0u;
        memset(v189, 0, sizeof(v189));
        v190 = 0;
        v173 = 0uLL;
        *(_QWORD *)&v174 = v201;
        DWORD2(v174) = 2143289344;
        v175 = v202;
        v176 = v23;
        v179 = 0u;
        memset(v180, 0, sizeof(v180));
        v181 = 0;
        memset(v172, 0, sizeof(v172));
        v24 = v209;
        v25 = v210;
        if (v209 != v210)
        {
          v26 = 0.0;
          v169 = v210;
          while (1)
          {
            v27 = (__int128 *)&v24[1];
            LOBYTE(v240) = 0;
            v28 = (__int128 *)&v24[10];
            v262 = 0;
            v263 = 0;
            v264 = 0;
            LOBYTE(v214) = 0;
            v236 = 0;
            v237 = 0;
            v238 = 0;
            geom::acd<float>::impl::find_best_cut_plane((_QWORD *)a1, v24 + 1, 0, 0, (uint64_t)v239, (uint64_t)v172);
            geom::acd<float>::impl::find_best_cut_plane((_QWORD *)a1, v24 + 10, 0, 0, (uint64_t)v213, (uint64_t)v172);
            if (v262)
            {
              if (v236)
              {
                v29 = (float)((float)((float)((float)(*(float *)(v8[3] + 24) - *((float *)&v241 + 2))
                                            - *((float *)&v252 + 2))
                                    - *((float *)&v215 + 2))
                            - *((float *)&v226 + 2))
                    / *(float *)(v8[3] + 24);
                if (v29 <= v26)
                {
                  geom::cluster<float>::deinit((uint64_t)&v240, (_QWORD *)(a1 + 224));
                  geom::cluster<float>::deinit((uint64_t)&v251, (_QWORD *)(a1 + 224));
                  geom::cluster<float>::deinit((uint64_t)&v214, (_QWORD *)(a1 + 224));
                  geom::cluster<float>::deinit((uint64_t)&v225, (_QWORD *)(a1 + 224));
                }
                else
                {
                  geom::cluster<float>::deinit((uint64_t)&v200, (_QWORD *)(a1 + 224));
                  geom::cluster<float>::deinit((uint64_t)&v191, (_QWORD *)(a1 + 224));
                  geom::cluster<float>::deinit((uint64_t)&v182, (_QWORD *)(a1 + 224));
                  geom::cluster<float>::deinit((uint64_t)&v173, (_QWORD *)(a1 + 224));
                  v30 = v240;
                  v240 = 0uLL;
                  v31 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
                  v200 = v30;
                  if (v31)
                  {
                    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
                    do
                      v33 = __ldaxr(p_shared_owners);
                    while (__stlxr(v33 - 1, p_shared_owners));
                    if (!v33)
                    {
                      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                      std::__shared_weak_count::__release_weak(v31);
                    }
                  }
                  v203 = v243;
                  v204 = v244;
                  v205 = v245;
                  v201 = v241;
                  v202 = v242;
                  if ((_QWORD)__p)
                  {
                    *((_QWORD *)&__p + 1) = __p;
                    operator delete((void *)__p);
                  }
                  __p = v246;
                  v207[0] = v247;
                  v247 = 0;
                  v246 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v207[1]);
                  *(_OWORD *)&v207[1] = v248;
                  v207[3] = v249;
                  v249 = 0;
                  v248 = 0uLL;
                  v208 = v250;
                  v34 = v251;
                  v251 = 0uLL;
                  v35 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
                  v191 = v34;
                  if (v35)
                  {
                    v36 = (unint64_t *)&v35->__shared_owners_;
                    do
                      v37 = __ldaxr(v36);
                    while (__stlxr(v37 - 1, v36));
                    if (!v37)
                    {
                      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                      std::__shared_weak_count::__release_weak(v35);
                    }
                  }
                  v194 = v254;
                  v195 = v255;
                  v196 = v256;
                  v192 = v252;
                  v193 = v253;
                  if ((_QWORD)v197)
                  {
                    *((_QWORD *)&v197 + 1) = v197;
                    operator delete((void *)v197);
                  }
                  v197 = v257;
                  v198[0] = v258;
                  v258 = 0;
                  v257 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v198[1]);
                  *(_OWORD *)&v198[1] = v259;
                  v198[3] = v260;
                  v260 = 0;
                  v259 = 0uLL;
                  v199 = v261;
                  v38 = v214;
                  v214 = 0uLL;
                  v39 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
                  v182 = v38;
                  v25 = v169;
                  if (v39)
                  {
                    v40 = (unint64_t *)&v39->__shared_owners_;
                    do
                      v41 = __ldaxr(v40);
                    while (__stlxr(v41 - 1, v40));
                    if (!v41)
                    {
                      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                      std::__shared_weak_count::__release_weak(v39);
                    }
                  }
                  v185 = v217;
                  v186 = v218;
                  v187 = v219;
                  v183 = v215;
                  v184 = v216;
                  if ((_QWORD)v188)
                  {
                    *((_QWORD *)&v188 + 1) = v188;
                    operator delete((void *)v188);
                  }
                  v188 = v220;
                  v189[0] = v221;
                  v221 = 0;
                  v220 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v189[1]);
                  *(_OWORD *)&v189[1] = v222;
                  v189[3] = v223;
                  v223 = 0;
                  v222 = 0uLL;
                  v190 = v224;
                  v42 = v225;
                  v225 = 0uLL;
                  v43 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
                  v173 = v42;
                  if (v43)
                  {
                    v44 = (unint64_t *)&v43->__shared_owners_;
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 - 1, v44));
                    if (!v45)
                    {
                      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                      std::__shared_weak_count::__release_weak(v43);
                    }
                  }
                  v176 = v228;
                  v177 = v229;
                  v178 = v230;
                  v174 = v226;
                  v175 = v227;
                  if ((_QWORD)v179)
                  {
                    *((_QWORD *)&v179 + 1) = v179;
                    operator delete((void *)v179);
                  }
                  v179 = v231;
                  v180[0] = v232;
                  v232 = 0;
                  v231 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v180[1]);
                  *(_OWORD *)&v180[1] = v233;
                  v180[3] = v234;
                  v234 = 0;
                  v233 = 0uLL;
                  v181 = v235;
                  v26 = v29;
                }
              }
              else
              {
                v27 = &v240;
                v28 = &v251;
              }
            }
            else
            {
              v27 = &v214;
              v28 = &v225;
              if (!v236)
                goto LABEL_56;
            }
            geom::cluster<float>::deinit((uint64_t)v27, (_QWORD *)(a1 + 224));
            geom::cluster<float>::deinit((uint64_t)v28, (_QWORD *)(a1 + 224));
LABEL_56:
            std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v214);
            std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v240);
            v24 += 21;
            if (v24 == v25)
              goto LABEL_73;
          }
        }
        v26 = 0.0;
LABEL_73:
        if (v26 < *(float *)(v167 + 4))
          goto LABEL_143;
        geom::cluster<float>::deinit(v8[3], (_QWORD *)(a1 + 224));
        v71 = v8[3];
        std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](v71, &v200);
        *(_OWORD *)(v71 + 16) = v201;
        v73 = v203;
        v72 = v204;
        v74 = v202;
        *(_QWORD *)(v71 + 80) = v205;
        *(_OWORD *)(v71 + 48) = v73;
        *(_OWORD *)(v71 + 64) = v72;
        *(int32x4_t *)(v71 + 32) = v74;
        v75 = *(void **)(v71 + 88);
        if (v75)
        {
          *(_QWORD *)(v71 + 96) = v75;
          operator delete(v75);
          *(_QWORD *)(v71 + 88) = 0;
          *(_QWORD *)(v71 + 96) = 0;
          *(_QWORD *)(v71 + 104) = 0;
        }
        *(_OWORD *)(v71 + 88) = __p;
        *(_QWORD *)(v71 + 104) = v207[0];
        __p = 0uLL;
        v207[0] = 0;
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(v71 + 112));
        *(_OWORD *)(v71 + 112) = *(_OWORD *)&v207[1];
        *(_QWORD *)(v71 + 128) = v207[3];
        memset(&v207[1], 0, 24);
        *(_WORD *)(v71 + 136) = v208;
        v76 = operator new();
        v77 = v194;
        v78 = v195;
        v79 = v192;
        *(int32x4_t *)(v76 + 32) = v193;
        *(_OWORD *)(v76 + 48) = v77;
        *(_OWORD *)(v76 + 64) = v78;
        v80 = v191;
        v191 = 0uLL;
        *(_QWORD *)(v76 + 80) = v196;
        *(_OWORD *)v76 = v80;
        *(_OWORD *)(v76 + 16) = v79;
        *(_OWORD *)(v76 + 88) = v197;
        v81 = v198[3];
        *(_QWORD *)(v76 + 104) = v198[0];
        v198[0] = 0;
        v197 = 0uLL;
        *(_OWORD *)(v76 + 112) = *(_OWORD *)&v198[1];
        *(_QWORD *)(v76 + 128) = v81;
        memset(&v198[1], 0, 24);
        *(_WORD *)(v76 + 136) = v199;
        v213[0] = v76;
        v82 = (unsigned int *)(a1 + 152);
        v239[0] = (_DWORD *)(a1 + 152);
        v83 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v170, (unsigned int *)(a1 + 152), (uint64_t)&std::piecewise_construct, v239);
        v86 = v83[3];
        v84 = v83 + 3;
        v85 = v86;
        v87 = v213[0];
        v213[0] = 0;
        *v84 = v87;
        if (v86)
        {
          std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v84, v85);
          v88 = v213[0];
          v213[0] = 0;
          if (v88)
            std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v213, v88);
        }
        v89 = (*v82)++;
        v91 = *(unsigned int **)(a3 + 8);
        v90 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v91 >= v90)
        {
          v96 = *(unsigned int **)a3;
          v97 = ((uint64_t)v91 - *(_QWORD *)a3) >> 2;
          v98 = v97 + 1;
          if ((unint64_t)(v97 + 1) >> 62)
            goto LABEL_171;
          v99 = v90 - (_QWORD)v96;
          if (v99 >> 1 > v98)
            v98 = v99 >> 1;
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
            v100 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v100 = v98;
          if (v100)
          {
            v101 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v168, v100);
            v96 = *(unsigned int **)a3;
            v91 = *(unsigned int **)(a3 + 8);
          }
          else
          {
            v101 = 0;
          }
          v102 = (unsigned int *)&v101[4 * v97];
          v103 = &v101[4 * v100];
          *v102 = v89;
          v92 = v102 + 1;
          while (v91 != v96)
          {
            v104 = *--v91;
            *--v102 = v104;
          }
          *(_QWORD *)a3 = v102;
          *(_QWORD *)(a3 + 8) = v92;
          *(_QWORD *)(a3 + 16) = v103;
          if (v96)
            operator delete(v96);
        }
        else
        {
          *v91 = v89;
          v92 = v91 + 1;
        }
        *(_QWORD *)(a3 + 8) = v92;
        v105 = operator new();
        v106 = v185;
        v107 = v186;
        v108 = v183;
        *(int32x4_t *)(v105 + 32) = v184;
        *(_OWORD *)(v105 + 48) = v106;
        *(_OWORD *)(v105 + 64) = v107;
        v109 = v182;
        v182 = 0uLL;
        *(_QWORD *)(v105 + 80) = v187;
        *(_OWORD *)v105 = v109;
        *(_OWORD *)(v105 + 16) = v108;
        *(_OWORD *)(v105 + 88) = v188;
        v110 = v189[3];
        *(_QWORD *)(v105 + 104) = v189[0];
        v189[0] = 0;
        v188 = 0uLL;
        *(_OWORD *)(v105 + 112) = *(_OWORD *)&v189[1];
        *(_QWORD *)(v105 + 128) = v110;
        memset(&v189[1], 0, 24);
        *(_WORD *)(v105 + 136) = v190;
        v213[0] = v105;
        v239[0] = (_DWORD *)(a1 + 152);
        v111 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v170, v82, (uint64_t)&std::piecewise_construct, v239);
        v114 = v111[3];
        v112 = v111 + 3;
        v113 = v114;
        v115 = v213[0];
        v213[0] = 0;
        *v112 = v115;
        if (v114)
        {
          std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v112, v113);
          v116 = v213[0];
          v213[0] = 0;
          if (v116)
            std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v213, v116);
        }
        v117 = (*v82)++;
        v119 = *(unsigned int **)(a3 + 8);
        v118 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v119 >= v118)
        {
          v121 = *(unsigned int **)a3;
          v122 = ((uint64_t)v119 - *(_QWORD *)a3) >> 2;
          v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 62)
            goto LABEL_171;
          v124 = v118 - (_QWORD)v121;
          if (v124 >> 1 > v123)
            v123 = v124 >> 1;
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL)
            v125 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v125 = v123;
          if (v125)
          {
            v126 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v168, v125);
            v121 = *(unsigned int **)a3;
            v119 = *(unsigned int **)(a3 + 8);
          }
          else
          {
            v126 = 0;
          }
          v127 = (unsigned int *)&v126[4 * v122];
          v128 = &v126[4 * v125];
          *v127 = v117;
          v120 = v127 + 1;
          while (v119 != v121)
          {
            v129 = *--v119;
            *--v127 = v129;
          }
          *(_QWORD *)a3 = v127;
          *(_QWORD *)(a3 + 8) = v120;
          *(_QWORD *)(a3 + 16) = v128;
          if (v121)
            operator delete(v121);
        }
        else
        {
          *v119 = v117;
          v120 = v119 + 1;
        }
        *(_QWORD *)(a3 + 8) = v120;
        v130 = operator new();
        v131 = v176;
        v132 = v177;
        v133 = v174;
        *(int32x4_t *)(v130 + 32) = v175;
        *(_OWORD *)(v130 + 48) = v131;
        *(_OWORD *)(v130 + 64) = v132;
        v134 = v173;
        v173 = 0uLL;
        *(_QWORD *)(v130 + 80) = v178;
        *(_OWORD *)v130 = v134;
        *(_OWORD *)(v130 + 16) = v133;
        *(_OWORD *)(v130 + 88) = v179;
        v135 = v180[3];
        *(_QWORD *)(v130 + 104) = v180[0];
        v180[0] = 0;
        v179 = 0uLL;
        *(_OWORD *)(v130 + 112) = *(_OWORD *)&v180[1];
        *(_QWORD *)(v130 + 128) = v135;
        memset(&v180[1], 0, 24);
        *(_WORD *)(v130 + 136) = v181;
        v213[0] = v130;
        v239[0] = (_DWORD *)(a1 + 152);
        v136 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v170, v82, (uint64_t)&std::piecewise_construct, v239);
        v139 = v136[3];
        v137 = v136 + 3;
        v138 = v139;
        v140 = v213[0];
        v213[0] = 0;
        *v137 = v140;
        if (v139)
        {
          std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v137, v138);
          v141 = v213[0];
          v213[0] = 0;
          if (v141)
            std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v213, v141);
        }
        v142 = (*v82)++;
        v144 = *(unsigned int **)(a3 + 8);
        v143 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v144 < v143)
        {
          *v144 = v142;
          v145 = v144 + 1;
LABEL_142:
          *(_QWORD *)(a3 + 8) = v145;
LABEL_143:
          v239[0] = v172;
          std::vector<geom::cut_plane_search_candidate<float>>::__destroy_vector::operator()[abi:nn180100]((void ***)v239);
          v239[0] = &v180[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v239);
          if ((_QWORD)v179)
          {
            *((_QWORD *)&v179 + 1) = v179;
            operator delete((void *)v179);
          }
          v155 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
          if (*((_QWORD *)&v173 + 1))
          {
            v156 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
          v239[0] = &v189[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v239);
          if ((_QWORD)v188)
          {
            *((_QWORD *)&v188 + 1) = v188;
            operator delete((void *)v188);
          }
          v158 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v159 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          v239[0] = &v198[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v239);
          if ((_QWORD)v197)
          {
            *((_QWORD *)&v197 + 1) = v197;
            operator delete((void *)v197);
          }
          v161 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
          if (*((_QWORD *)&v191 + 1))
          {
            v162 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          v239[0] = &v207[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v239);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v164 = (std::__shared_weak_count *)*((_QWORD *)&v200 + 1);
          if (*((_QWORD *)&v200 + 1))
          {
            v165 = (unint64_t *)(*((_QWORD *)&v200 + 1) + 8);
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          goto LABEL_88;
        }
        v146 = *(unsigned int **)a3;
        v147 = ((uint64_t)v144 - *(_QWORD *)a3) >> 2;
        v148 = v147 + 1;
        if (!((unint64_t)(v147 + 1) >> 62))
        {
          v149 = v143 - (_QWORD)v146;
          if (v149 >> 1 > v148)
            v148 = v149 >> 1;
          if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
            v150 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v150 = v148;
          if (v150)
          {
            v151 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v168, v150);
            v146 = *(unsigned int **)a3;
            v144 = *(unsigned int **)(a3 + 8);
          }
          else
          {
            v151 = 0;
          }
          v152 = (unsigned int *)&v151[4 * v147];
          v153 = &v151[4 * v150];
          *v152 = v142;
          v145 = v152 + 1;
          while (v144 != v146)
          {
            v154 = *--v144;
            *--v152 = v154;
          }
          *(_QWORD *)a3 = v152;
          *(_QWORD *)(a3 + 8) = v145;
          *(_QWORD *)(a3 + 16) = v153;
          if (v146)
            operator delete(v146);
          goto LABEL_142;
        }
LABEL_171:
        abort();
      }
    }
LABEL_88:
    v239[0] = &v209;
    std::vector<geom::cut_plane_search_candidate<float>>::__destroy_vector::operator()[abi:nn180100]((void ***)v239);
    std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v266);
  }
}

float geom::acd<float>::impl::cut_plane_cost(float *a1, float *a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  float *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  float *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;

  v4 = *(float *)(a3 + 24);
  v5 = *(float *)(a4 + 24);
  v6 = *(_QWORD *)a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(float **)a3;
  v11 = *(std::__shared_weak_count **)(a3 + 8);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(float **)a4;
  v15 = *(std::__shared_weak_count **)(a4 + 8);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = a1[84];
  v19 = *v10;
  v20 = v10[1];
  v21 = *v14;
  v22 = v14[1];
  v23 = *(float *)(v6 + 4);
  v24 = a1[85];
  v25 = *(float *)(a3 + 20);
  v26 = *(float *)(a4 + 20);
  v27 = a2[5];
  v28 = a1[86];
  if (!v15)
    goto LABEL_14;
  v29 = (unint64_t *)&v15->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    v46 = v5;
    v49 = v4;
    v40 = v19;
    v43 = v18;
    v37 = v21;
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v21 = v37;
    v19 = v40;
    v18 = v43;
    v5 = v46;
    v4 = v49;
    if (!v11)
      goto LABEL_20;
  }
  else
  {
LABEL_14:
    if (!v11)
      goto LABEL_20;
  }
  v31 = (unint64_t *)&v11->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    v45 = v5;
    v48 = v4;
    v39 = v19;
    v42 = v18;
    v36 = v21;
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v21 = v36;
    v19 = v39;
    v18 = v42;
    v5 = v45;
    v4 = v48;
  }
LABEL_20:
  if (v7)
  {
    v33 = (unint64_t *)&v7->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      v47 = v5;
      v50 = v4;
      v41 = v19;
      v44 = v18;
      v38 = v21;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v21 = v38;
      v19 = v41;
      v18 = v44;
      v5 = v47;
      v4 = v50;
    }
  }
  return (float)(v4 + v5)
       * (float)((float)((float)((float)((float)(v18 * vabds_f32(v19, v21))
                                       + (float)((float)((float)(v20 + v22) - v23) * v24))
                               + (float)((float)((float)(v25 + v26) - v27) * v28))
                       * 0.01)
               + 1.0);
}

void geom::acd<float>::impl::find_best_cut_plane(_QWORD *a1, float32x4_t *a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9;
  uint64_t v12;
  char *v13;
  uint64_t i;
  uint64_t v15;
  __int128 v16;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  void *__p;
  char *v32;
  char *v33;

  v9 = a3;
  v12 = *(unsigned int *)(a1[35] + 4 * a3);
  __p = 0;
  v32 = 0;
  v33 = 0;
  if ((_DWORD)v12)
  {
    v13 = 0;
    for (i = 0; i != v12; ++i)
    {
      v15 = a1[32];
      v16 = *(_OWORD *)(v15 + 16 * i);
      if (COERCE_FLOAT(*(_QWORD *)(v15 + 16 * i + 8)) < 0.00000011921)
      {
        if (*(float *)&v16 <= -0.00000011921)
          continue;
        if (*(float *)&v16 < 0.00000011921 && *((float *)&v16 + 1) <= -0.00000011921)
          continue;
      }
      if (v13 >= v33)
      {
        v19 = (char *)__p;
        v20 = (v13 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          abort();
        v22 = v33 - (_BYTE *)__p;
        if ((v33 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v33, v23);
          v19 = (char *)__p;
          v13 = v32;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = i;
        v18 = v25 + 4;
        while (v13 != v19)
        {
          v26 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v32 = v18;
        v33 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v13 = i;
        v18 = v13 + 4;
      }
      v32 = v18;
      v13 = v18;
    }
    v27 = (unsigned int *)__p;
    v9 = a3;
  }
  else
  {
    v13 = 0;
    v27 = 0;
  }
  geom::acd<float>::impl::search_cut_planes_with_normals((uint64_t)a1, v27, (v13 - (char *)v27) >> 2, a2, a4, a5, a6);
  if (*(_BYTE *)(a5 + 304))
  {
    v28 = v9 + 1;
    if (v28 < ((a1[36] - a1[35]) >> 2))
    {
      v29 = 208 * v28;
      do
      {
        v32 = (char *)__p;
        geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1[38] + v29), *(_DWORD *)a5, (uint64_t)&__p);
        geom::acd<float>::impl::search_cut_planes_with_normals((uint64_t)a1, (unsigned int *)__p, (v32 - (_BYTE *)__p) >> 2, a2, a4, a5, a6);
        ++v28;
        v29 += 208;
      }
      while (v28 < ((a1[36] - a1[35]) >> 2));
    }
  }
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v11 + 1 > 0xC30C30C30C30C3)
      abort();
    v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x61861861861861)
      v14 = 0xC30C30C30C30C3;
    else
      v14 = v13;
    v19[4] = v4;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cut_plane_search_candidate<float>>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[336 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[336 * v14];
    v17 = *a2;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v16 = v17;
    v16[16] = 0;
    v16[304] = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)(v16 + 16), (uint64_t)(a2 + 2));
    v18 = a2[40];
    *((_DWORD *)v16 + 82) = *((_DWORD *)a2 + 82);
    *((_QWORD *)v16 + 40) = v18;
    v19[2] = v16 + 336;
    std::vector<geom::cut_plane_search_candidate<float>>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    std::__split_buffer<geom::cut_plane_search_candidate<float>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 304) = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(v7 + 16, (uint64_t)(a2 + 2));
    v9 = a2[40];
    *(_DWORD *)(v7 + 328) = *((_DWORD *)a2 + 82);
    *(_QWORD *)(v7 + 320) = v9;
    v10 = v7 + 336;
  }
  a1[1] = v10;
}

void geom::acd<float>::impl::search_cut_planes_with_normals(uint64_t a1, unsigned int *a2, uint64_t a3, float32x4_t *a4, int a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v7;
  float32x4_t v8;
  uint32x4_t v9;
  int8x16_t v13;
  uint64_t v15;
  unsigned int v20;
  float32x4_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  unsigned int *v29;
  unsigned int *v30;
  float32x4_t v31;
  float v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float v37;
  uint64_t *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned int *v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  unsigned int *v50;
  uint64_t *v51;
  float32x4_t v52;
  float v53;
  int v54;
  int v55;
  int v56;
  int v57;
  float v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int **v66;
  _QWORD *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int **v70;
  uint64_t v71;
  unsigned int **v72;
  unsigned int *v73;
  unsigned int *i;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float v79;
  _OWORD v80[2];
  int v81;
  unsigned int *v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85[4];
  int v86;
  char v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  _OWORD v91[2];
  uint64_t v92;
  unsigned int **v93;
  float v94;
  _BYTE v95[288];
  char v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v7 = a4[2];
  v8 = a4[3];
  v9 = (uint32x4_t)vcgtq_f32(v7, v8);
  v9.i32[3] = v9.i32[2];
  if ((vmaxvq_u32(v9) & 0x80000000) != 0)
    return;
  v92 = 0;
  v13 = 0uLL;
  memset(v91, 0, sizeof(v91));
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v85[0] = a1;
  v85[1] = (uint64_t)&v88;
  v85[2] = a7;
  v85[3] = (uint64_t)&v87;
  v86 = a5;
  if (a3)
  {
    v7.i32[3] = 0;
    v8.i32[3] = 0;
    v15 = 4 * a3;
    __asm { FMOV            V0.4S, #1.0 }
    v75 = _Q0;
    v76 = v8;
    v78 = v7;
    do
    {
      v20 = *a2++;
      v21 = *(float32x4_t *)(*(_QWORD *)(a1 + 256) + 16 * v20);
      v22.i64[0] = 0x8000000080000000;
      v22.i64[1] = 0x8000000080000000;
      v23 = vcvtq_s32_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v21), (int8x16_t)vcgtzq_f32(v21)), vorrq_s8(vandq_s8((int8x16_t)v21, v22), v75), v13));
      v23.i32[3] = 0;
      v24 = (int8x16_t)vcltzq_s32(v23);
      v25 = vmulq_f32(v21, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v8, v24), vandq_s8(v24, (int8x16_t)v7)));
      v26 = vmulq_f32(v21, (float32x4_t)vbslq_s8(v24, (int8x16_t)v8, (int8x16_t)v7));
      v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)));
      v28 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)));
      v95[0] = 0;
      v96 = 0;
      LOBYTE(v97) = 0;
      LOBYTE(v98) = 0;
      LODWORD(v93) = v20;
      *((float *)&v93 + 1) = (float)((float)-v27.f32[0] - v28.f32[0]) * 0.5;
      v94 = 0.5 * vsubq_f32(v28, v27).f32[0];
      std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100]((uint64_t *)&v88, (uint64_t *)&v93);
      std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v95);
      v13 = 0uLL;
      v8 = v76;
      v7 = v78;
      v15 -= 4;
    }
    while (v15);
    v29 = v88;
    v30 = v89;
    v77 = *(float32x4_t *)(a1 + 176);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    if (v88 != v89)
    {
      do
      {
        v31 = vmulq_f32(v77, vabsq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 256) + 16 * *v29)));
        v32 = (float)(8.0
                    * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0])* 0.5;
        v33 = vcvtms_s32_f32(*((float *)v29 + 2) / v32);
        v34 = -1;
        do
        {
          v35 = v34;
          if (v33 >= 1)
          {
            v36 = 0;
            v37 = v32 * (float)v34;
            do
            {
              ++v36;
              v95[0] = 0;
              v96 = 0;
              LOBYTE(v97) = 0;
              LOBYTE(v98) = 0;
              *((float *)&v93 + 1) = *((float *)v29 + 1) + (float)(v37 * (float)v36);
              v94 = v32;
              LODWORD(v93) = *v29;
              std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100]((uint64_t *)&v82, (uint64_t *)&v93);
              std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v95);
            }
            while (v33 != v36);
          }
          v34 = v35 + 2;
        }
        while (v35 < 0);
        v29 += 84;
      }
      while (v29 != v30);
      v38 = (uint64_t *)v82;
      v39 = v83;
      if (v82 != v83)
      {
        do
        {
          std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100]((uint64_t *)&v88, v38);
          v38 += 42;
        }
        while (v38 != (uint64_t *)v39);
        v39 = v82;
        v40 = v83;
        if (v83 != v82)
        {
          do
          {
            v41 = v40 - 84;
            std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v40 - 80));
            v40 = v41;
          }
          while (v41 != v39);
        }
      }
      goto LABEL_19;
    }
  }
  else
  {
    v77 = *(float32x4_t *)(a1 + 176);
    v82 = 0;
    v83 = 0;
    v84 = 0;
  }
  v39 = 0;
LABEL_19:
  v83 = v39;
  geom::acd<float>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>((uint64_t *)a1, v88, v89, a4, (uint64_t *)v91);
  memset(v80, 0, sizeof(v80));
  v81 = 1065353216;
  v42 = v88;
  if (v89 != v88)
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v80, &v42[84 * v43]);
      if (v45)
      {
        v46 = &v42[84 * v43];
        v42 = v88;
        if (*((float *)v46 + 80) < *(float *)&v88[84 * *((unsigned int *)v45 + 5) + 80])
          *((_DWORD *)v45 + 5) = v44;
      }
      else
      {
        v93 = (unsigned int **)&v42[84 * v43];
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v80, (unsigned int *)v93, (uint64_t)&std::piecewise_construct, (_DWORD **)&v93)+ 5) = v44;
        v42 = v88;
      }
      v43 = ++v44;
    }
    while (0xCF3CF3CF3CF3CF3DLL * (((char *)v89 - (char *)v42) >> 4) > v44);
    if (v89 != v42)
    {
      v47 = 0;
      v48 = 0;
      do
      {
        v49 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v80, &v42[84 * v47]);
        if (v49 && *((_DWORD *)v49 + 5) == v48)
        {
          v42 = v88;
          v50 = v89;
        }
        else
        {
          geom::acd<float>::impl::search_cut_planes_with_normals(geom::slice<unsigned int>,geom::cluster<float> const&,unsigned int,geom::cut_plane_search_candidate<float> &,std::vector<geom::cut_plane_search_candidate<float>> &)::{lambda(unsigned long)#1}::operator()(v85, v47);
          v42 = v88;
          v50 = v89;
          if (0xCF3CF3CF3CF3CF3DLL * (((char *)v89 - (char *)v88) >> 4) <= v47)
          {
            --v48;
          }
          else
          {
            v51 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v80, &v88[84 * v47]);
            v42 = v88;
            v50 = v89;
            if (v51 && 0xCF3CF3CF3CF3CF3DLL * (((char *)v89 - (char *)v88) >> 4) == *((_DWORD *)v51 + 5))
              *((_DWORD *)v51 + 5) = v48;
          }
        }
        v47 = ++v48;
      }
      while (0xCF3CF3CF3CF3CF3DLL * (((char *)v50 - (char *)v42) >> 4) > v48);
      for (; v42 != v50; v42 += 84)
      {
        v52 = vmulq_f32(v77, vabsq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 256) + 16 * *v42)));
        v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0];
        v54 = vcvtms_s32_f32(*((float *)v42 + 2) / v53);
        v55 = -1;
        v79 = v53;
        do
        {
          v56 = v55;
          if (v54 >= 1)
          {
            v57 = 0;
            v58 = v53 * (float)v55;
            do
            {
              ++v57;
              v95[0] = 0;
              v96 = 0;
              LOBYTE(v97) = 0;
              LOBYTE(v98) = 0;
              *((float *)&v93 + 1) = *((float *)v42 + 1) + (float)(v58 * (float)v57);
              v94 = v53;
              LODWORD(v93) = *v42;
              std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100]((uint64_t *)&v82, (uint64_t *)&v93);
              std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v95);
              v53 = v79;
            }
            while (v54 != v57);
          }
          v55 = v56 + 2;
        }
        while (v56 < 0);
      }
    }
  }
  geom::acd<float>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>((uint64_t *)a1, v82, v83, a4, (uint64_t *)v91);
  v59 = (uint64_t *)v82;
  v60 = v83;
  if (v82 != v83)
  {
    do
    {
      std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100]((uint64_t *)&v88, v59);
      v59 += 42;
    }
    while (v59 != (uint64_t *)v60);
    v59 = (uint64_t *)v82;
    v61 = v83;
    if (v83 != v82)
    {
      do
      {
        v62 = v61 - 84;
        std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v61 - 80));
        v61 = v62;
      }
      while (v62 != (unsigned int *)v59);
    }
  }
  v83 = (unsigned int *)v59;
  v63 = v88;
  v64 = v88 + 84;
  if (v88 != v89 && v64 != v89)
  {
    do
    {
      if (*((float *)v64 + 80) < *((float *)v63 + 80))
        v63 = v64;
      v64 += 84;
    }
    while (v64 != v89);
  }
  v66 = *(unsigned int ***)v63;
  *(_DWORD *)(a6 + 8) = v63[2];
  *(_QWORD *)a6 = v66;
  std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(a6 + 16, (uint64_t)(v63 + 4));
  v67 = v63 + 80;
  if (*(unsigned __int8 *)(a6 + 328) == *((unsigned __int8 *)v63 + 328))
  {
    if (*(_BYTE *)(a6 + 328))
    {
      *(_DWORD *)(a6 + 320) = v63[80];
      *(_DWORD *)(a6 + 324) = v63[81];
    }
  }
  else if (*(_BYTE *)(a6 + 328))
  {
    *(_BYTE *)(a6 + 328) = 0;
  }
  else
  {
    *(_QWORD *)(a6 + 320) = *v67;
    *(_BYTE *)(a6 + 328) = 1;
  }
  v68 = v89;
  v69 = v89 - 84;
  v70 = *(unsigned int ***)v63;
  v94 = *((float *)v63 + 2);
  v93 = v70;
  v95[0] = 0;
  v96 = 0;
  std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)v95, (uint64_t)(v63 + 4));
  v71 = *v67;
  v98 = v63[82];
  v97 = v71;
  LODWORD(v71) = v69[2];
  *(_QWORD *)v63 = *(_QWORD *)v69;
  v63[2] = v71;
  std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)(v63 + 4), (uint64_t)(v68 - 80));
  if (*((unsigned __int8 *)v63 + 328) == *((unsigned __int8 *)v68 - 8))
  {
    if (*((_BYTE *)v63 + 328))
    {
      v63[80] = *(v68 - 4);
      v63[81] = *(v68 - 3);
    }
  }
  else if (*((_BYTE *)v63 + 328))
  {
    *((_BYTE *)v63 + 328) = 0;
  }
  else
  {
    *((_QWORD *)v63 + 40) = *((_QWORD *)v68 - 2);
    *((_BYTE *)v63 + 328) = 1;
  }
  v72 = v93;
  *((float *)v69 + 2) = v94;
  *(_QWORD *)v69 = v72;
  std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)(v68 - 80), (uint64_t)v95);
  if (*((unsigned __int8 *)v68 - 8) == v98)
  {
    if (*((_BYTE *)v68 - 8))
      *((_QWORD *)v68 - 2) = v97;
  }
  else if (*((_BYTE *)v68 - 8))
  {
    *((_BYTE *)v68 - 8) = 0;
  }
  else
  {
    *((_QWORD *)v68 - 2) = v97;
    *((_BYTE *)v68 - 8) = 1;
  }
  std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v95);
  v73 = v89 - 84;
  std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v89 - 80));
  v89 = v73;
  for (i = v88; v88 != v89; v73 = v89)
  {
    geom::acd<float>::impl::search_cut_planes_with_normals(geom::slice<unsigned int>,geom::cluster<float> const&,unsigned int,geom::cut_plane_search_candidate<float> &,std::vector<geom::cut_plane_search_candidate<float>> &)::{lambda(unsigned long)#1}::operator()(v85, -1 - 0x30C30C30C30C30C3 * (((char *)v73 - (char *)i) >> 4));
    i = v88;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v80);
  v93 = &v82;
  std::vector<geom::cut_plane_search_candidate<float>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
  v93 = &v88;
  std::vector<geom::cut_plane_search_candidate<float>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
  v93 = (unsigned int **)v91;
  std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
}

uint64_t std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v12 + 1 > 0xC30C30C30C30C3)
      abort();
    v13 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 4);
    v14 = 2 * v13;
    if (2 * v13 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x61861861861861)
      v15 = 0xC30C30C30C30C3;
    else
      v15 = v14;
    v20[4] = v4;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cut_plane_search_candidate<float>>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[336 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[336 * v15];
    v18 = *a2;
    *((_DWORD *)v17 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v17 = v18;
    v17[16] = 0;
    v17[304] = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false> const&>((uint64_t)(v17 + 16), (uint64_t)(a2 + 2));
    v19 = a2[40];
    *((_DWORD *)v17 + 82) = *((_DWORD *)a2 + 82);
    *((_QWORD *)v17 + 40) = v19;
    v20[2] = v17 + 336;
    std::vector<geom::cut_plane_search_candidate<float>>::__swap_out_circular_buffer(a1, v20);
    v11 = a1[1];
    result = std::__split_buffer<geom::cut_plane_search_candidate<float>>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 304) = 0;
    result = std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false> const&>(v7 + 16, (uint64_t)(a2 + 2));
    v10 = a2[40];
    *(_DWORD *)(v7 + 328) = *((_DWORD *)a2 + 82);
    *(_QWORD *)(v7 + 320) = v10;
    v11 = v7 + 336;
  }
  a1[1] = v11;
  return result;
}

void geom::acd<float>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(uint64_t *a1, unsigned int *a2, unsigned int *a3, _QWORD *a4, uint64_t *a5)
{
  unsigned int *v8;
  char *v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  __int128 v25;
  void *__p;
  char *v27;
  char *v28;
  unsigned int *v29;
  uint64_t block;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  unsigned int **v37;

  v8 = a2;
  v28 = 0;
  v29 = a2;
  __p = 0;
  v27 = 0;
  std::vector<geom::internal::triangle_mesh_decimator<float>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<float>::edge_cost>>::reserve(&__p, 0xCF3CF3CF3CF3CF3DLL * (((char *)a3 - (char *)a2) >> 4));
  if (a3 == v8)
  {
    v10 = v27;
  }
  else
  {
    v10 = v27;
    do
    {
      v11 = *(_OWORD *)(a1[32] + 16 * *v8);
      v12 = v8[1];
      if (v10 >= v28)
      {
        v13 = (v10 - (_BYTE *)__p) >> 5;
        if ((unint64_t)(v13 + 1) >> 59)
          abort();
        v14 = (v28 - (_BYTE *)__p) >> 4;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if ((unint64_t)(v28 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v25 = *(_OWORD *)(a1[32] + 16 * *v8);
          v16 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v28, v15);
          v11 = v25;
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[32 * v13];
        *(_OWORD *)v17 = v11;
        *((_DWORD *)v17 + 4) = v12;
        v19 = (char *)__p;
        v18 = v27;
        v20 = v17;
        if (v27 != __p)
        {
          do
          {
            v21 = *((_OWORD *)v18 - 1);
            *((_OWORD *)v20 - 2) = *((_OWORD *)v18 - 2);
            *((_OWORD *)v20 - 1) = v21;
            v20 -= 32;
            v18 -= 32;
          }
          while (v18 != v19);
          v18 = v19;
        }
        v10 = v17 + 32;
        __p = v20;
        v27 = v17 + 32;
        v28 = &v16[32 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_OWORD *)v10 = v11;
        *((_DWORD *)v10 + 4) = v12;
        v10 += 32;
      }
      v27 = v10;
      v8 += 84;
    }
    while (v8 != a3);
  }
  geom::cluster_parallel_clipper<float>::init(a5, a4, (uint64_t)(a1 + 28), (uint64_t)__p, (v10 - (_BYTE *)__p) >> 5);
  v22 = (_QWORD *)a5[5];
  v23 = MEMORY[0x24BDAC760];
  v24 = ((a5[8] + ((uint64_t)(v22[12] - v22[11]) >> 3) - 1) / (unint64_t)a5[8]
       + (a5[7] + ((uint64_t)(v22[15] - v22[14]) >> 4) - 1) / (unint64_t)a5[7])
      * a5[4];
  block = MEMORY[0x24BDAC760];
  v31 = 0x40000000;
  v32 = ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIfE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_0;
  v33 = &__block_descriptor_tmp_2;
  v34 = a5;
  dispatch_apply(v24, 0, &block);
  block = v23;
  v31 = 0x40000000;
  v32 = ___ZN4geom14dispatch_applyIZNS_3acdIfE4impl29evaluate_candidate_cut_planesINSt3__111__wrap_iterIPNS_26cut_plane_search_candidateIfEEEEEEvT_SB_RKNS_7clusterIfEERNS_24cluster_parallel_clipperIfEEEUlmE_Lb1EEEvmP16dispatch_queue_sSB__block_invoke;
  v33 = &__block_descriptor_tmp_2_1;
  v34 = a1;
  v35 = a5;
  v36 = a4;
  v37 = &v29;
  dispatch_apply((v27 - (_BYTE *)__p) >> 5, 0, &block);
  geom::cluster_parallel_clipper<float>::deinit(a5);
  if (__p)
  {
    v27 = (char *)__p;
    operator delete(__p);
  }
}

uint64_t geom::acd<float>::impl::search_cut_planes_with_normals(geom::slice<unsigned int>,geom::cluster<float> const&,unsigned int,geom::cut_plane_search_candidate<float> &,std::vector<geom::cut_plane_search_candidate<float>> &)::{lambda(unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  __int128 v30;
  _OWORD v31[19];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v6 = v5 + 336 * a2;
  v7 = (_DWORD *)(v6 + 320);
  if (*(_BYTE *)(v6 + 328))
  {
    v8 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)a1[2];
      if (0xCF3CF3CF3CF3CF3DLL * ((v9[1] - *v9) >> 4) < v8 || *(float *)(v6 + 324) < *(float *)(*v9 + 324))
      {
        std::vector<geom::cut_plane_search_candidate<float>>::push_back[abi:nn180100](v9, (uint64_t *)(v5 + 336 * a2));
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<float> &,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(*(_QWORD *)a1[2], *(_QWORD *)(a1[2] + 8), (uint64_t)&v30, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1[2] + 8) - *(_QWORD *)a1[2]) >> 4));
        v32 = 0u;
        memset(v31, 0, sizeof(v31));
        v30 = 0u;
        *(_DWORD *)(v6 + 8) = 0;
        v10 = v5 + 336 * a2;
        *(_QWORD *)v6 = 0;
        std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(v10 + 16, (uint64_t)v31);
        if (*(unsigned __int8 *)(v10 + 328) == BYTE8(v32))
        {
          if (*(_BYTE *)(v10 + 328))
          {
            *v7 = v32;
            *(_DWORD *)(v5 + 336 * a2 + 324) = DWORD1(v32);
          }
        }
        else
        {
          v11 = (_BYTE *)(v10 + 328);
          if (*(_BYTE *)(v10 + 328))
          {
            *v11 = 0;
          }
          else
          {
            *(_QWORD *)v7 = v32;
            *v11 = 1;
          }
        }
        std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v31);
        v12 = (uint64_t *)a1[2];
        v13 = v12[1];
        v14 = 0xCF3CF3CF3CF3CF3DLL * ((v13 - *v12) >> 4);
        if (v14 > *((unsigned int *)a1 + 8))
        {
          std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<float>,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(*v12, v13, (uint64_t)&v30, v14);
          v15 = a1[2];
          v16 = *(_QWORD *)(v15 + 8);
          v17 = v16 - 336;
          std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100](v16 - 320);
          *(_QWORD *)(v15 + 8) = v17;
        }
      }
    }
  }
  v18 = v5 + 336 * a2;
  v19 = v18 + 16;
  if (*(_BYTE *)(v18 + 304))
  {
    v20 = (_QWORD *)(v4 + 224);
    geom::cluster<float>::deinit(v19, v20);
    geom::cluster<float>::deinit(v19 + 144, v20);
  }
  v21 = *(_QWORD *)(a1[1] + 8);
  v22 = *(_QWORD *)(v21 - 336);
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(v21 - 328);
  *(_QWORD *)v6 = v22;
  std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(v19, v21 - 320);
  v23 = v5 + 336 * a2;
  v24 = *(unsigned __int8 *)(v23 + 328);
  if (v24 == *(unsigned __int8 *)(v21 - 8))
  {
    if (*(_BYTE *)(v23 + 328))
    {
      *v7 = *(_DWORD *)(v21 - 16);
      *(_DWORD *)(v5 + 336 * a2 + 324) = *(_DWORD *)(v21 - 12);
    }
  }
  else
  {
    v25 = (_BYTE *)(v23 + 328);
    if (v24)
    {
      *v25 = 0;
    }
    else
    {
      *(_QWORD *)v7 = *(_QWORD *)(v21 - 16);
      *v25 = 1;
    }
  }
  v26 = a1[1];
  v27 = *(_QWORD *)(v26 + 8);
  v28 = v27 - 336;
  result = std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100](v27 - 320);
  *(_QWORD *)(v26 + 8) = v28;
  return result;
}

void geom::acd<double>::impl::split_clusters_automatically(uint64_t a1, unsigned int *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  void *__p;
  char *v41;
  char *v42;
  uint64_t v43;

  __p = 0;
  v41 = 0;
  v42 = 0;
  v4 = *(char **)(a1 + 160);
  if (v4)
  {
    v5 = 0;
    do
    {
      if (v5 >= v42)
      {
        v6 = (char *)__p;
        v7 = (v5 - (_BYTE *)__p) >> 2;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 62)
LABEL_63:
          abort();
        v9 = v42 - (_BYTE *)__p;
        if ((v42 - (_BYTE *)__p) >> 1 > v8)
          v8 = v9 >> 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
        {
          v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v42, v10);
          v6 = (char *)__p;
          v5 = v41;
        }
        else
        {
          v11 = 0;
        }
        v12 = &v11[4 * v7];
        *(_DWORD *)v12 = *((_DWORD *)v4 + 4);
        v13 = v12 + 4;
        while (v5 != v6)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        __p = v12;
        v41 = v13;
        v42 = &v11[4 * v10];
        if (v6)
          operator delete(v6);
        v5 = v13;
      }
      else
      {
        *(_DWORD *)v5 = *((_DWORD *)v4 + 4);
        v5 += 4;
      }
      v41 = v5;
      v4 = *(char **)v4;
    }
    while (v4);
    v4 = (char *)__p;
  }
  else
  {
    v5 = 0;
  }
  v37 = (_DWORD *)a1;
  v15 = v5 - v4;
  if (v5 - v4 >= 5)
  {
    v16 = v15 >> 2;
    v17 = (unint64_t)((v15 >> 2) - 2) >> 1;
    v18 = v17 + 1;
    v19 = (unsigned int *)&v4[4 * v17];
    do
    {
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<double>::impl::split_clusters_automatically(geom::acd<double>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(v4, &v37, v16, v19--);
      --v18;
    }
    while (v18);
    v4 = (char *)__p;
    v5 = v41;
  }
  if (v4 != v5)
  {
    while (1)
    {
      if (*(_QWORD *)(a1 + 168) >= (unint64_t)*a2)
        goto LABEL_60;
      v20 = *(_DWORD *)v4;
      v37 = (_DWORD *)a1;
      if (v5 - v4 >= 5)
      {
        v21 = *(_DWORD *)v4;
        v22 = (char *)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<double>::impl::split_clusters_automatically(geom::acd<double>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(v4, &v37, (unint64_t)(v5 - v4) >> 2);
        v23 = v5 - 4;
        if (v5 - 4 == v22)
        {
          *(_DWORD *)v22 = v21;
        }
        else
        {
          *(_DWORD *)v22 = *(_DWORD *)v23;
          *(_DWORD *)v23 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<double>::impl::split_clusters_automatically(geom::acd<double>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(v4, (uint64_t)(v22 + 4), &v37, (v22 + 4 - v4) >> 2);
        }
      }
      v41 -= 4;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      geom::acd<double>::impl::cut_to_reduce_concavity(a1, v20, (uint64_t)&v37, (uint64_t)a2);
      v24 = v37;
      v25 = v38;
      if ((unint64_t)((char *)v38 - (char *)v37) >= 5)
      {
        if (v37 == v38)
        {
          v24 = v38;
          if (!v38)
            goto LABEL_55;
LABEL_54:
          v38 = v24;
          operator delete(v24);
          goto LABEL_55;
        }
        do
        {
          v26 = *v24;
          v27 = v41;
          if (v41 >= v42)
          {
            v29 = (char *)__p;
            v30 = (v41 - (_BYTE *)__p) >> 2;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62)
              goto LABEL_63;
            v32 = v42 - (_BYTE *)__p;
            if ((v42 - (_BYTE *)__p) >> 1 > v31)
              v31 = v32 >> 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
              v33 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v42, v33);
              v29 = (char *)__p;
              v27 = v41;
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[4 * v30];
            *(_DWORD *)v35 = v26;
            v28 = (uint64_t)(v35 + 4);
            while (v27 != v29)
            {
              v36 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            __p = v35;
            v41 = (char *)v28;
            v42 = &v34[4 * v33];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *(_DWORD *)v41 = v26;
            v28 = (uint64_t)(v27 + 4);
          }
          v41 = (char *)v28;
          v43 = a1;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<double>::impl::split_clusters_automatically(geom::acd<double>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(__p, v28, &v43, (v28 - (uint64_t)__p) >> 2);
          ++v24;
        }
        while (v24 != v25);
        v24 = v37;
      }
      if (v24)
        goto LABEL_54;
LABEL_55:
      v4 = (char *)__p;
      v5 = v41;
      if (__p == v41)
        goto LABEL_60;
    }
  }
  v4 = v5;
LABEL_60:
  if (v4)
  {
    v41 = v4;
    operator delete(v4);
  }
}

void geom::acd<double>::impl::cut_to_reduce_concavity(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  double v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  __n128 v22;
  uint64_t v23;
  double v24;
  __n128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  _OWORD *v30;
  _OWORD *v31;
  double v32;
  __n128 v33;
  double v34;
  double v35;
  double v36;
  __n128 v37;
  double v38;
  __n128 v39;
  double v40;
  __n128 v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  int64x2_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int64x2_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int64x2_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  double v58;
  __n128 v59;
  double v60;
  __n128 v61;
  double v62;
  __n128 v63;
  double v64;
  __n128 v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _DWORD *v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  double v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  int64x2_t v103;
  __int128 v104;
  __int128 v105;
  int64x2_t v106;
  void *v107;
  uint64_t v108;
  int64x2_t v109;
  int64x2_t v110;
  __int128 v111;
  __int128 v112;
  int64x2_t v113;
  __int128 v114;
  __n128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  unsigned int *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int *v128;
  _DWORD *v129;
  char *v130;
  char *v131;
  int v132;
  unsigned int *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  unsigned int *v139;
  char *v140;
  unsigned int v141;
  uint64_t v142;
  int64x2_t v143;
  int64x2_t v144;
  __int128 v145;
  __int128 v146;
  int64x2_t v147;
  __int128 v148;
  __n128 v149;
  __int128 v150;
  uint64_t v151;
  __int128 v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unint64_t v160;
  unsigned int *v161;
  _DWORD *v162;
  unsigned int *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  unsigned int *v169;
  char *v170;
  unsigned int v171;
  uint64_t v172;
  int64x2_t v173;
  int64x2_t v174;
  __int128 v175;
  __int128 v176;
  int64x2_t v177;
  __int128 v178;
  __n128 v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unint64_t v190;
  unsigned int *v191;
  _DWORD *v192;
  unsigned int *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  unsigned int *v199;
  char *v200;
  unsigned int v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD v220[3];
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD v225[4];
  int64x2_t v226[2];
  __int128 v227;
  __n128 v228;
  __int128 v229;
  int64x2_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  __int16 v238;
  int64x2_t v239[2];
  __int128 v240;
  __n128 v241;
  __int128 v242;
  int64x2_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  __int16 v251;
  char v252;
  char v253;
  char v254;
  _DWORD *v255[4];
  int64x2_t v256[2];
  __int128 v257;
  __n128 v258;
  __int128 v259;
  int64x2_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  __int16 v268;
  int64x2_t v269[2];
  __int128 v270;
  __n128 v271;
  __int128 v272;
  int64x2_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  __int16 v281;
  char v282;
  char v283;
  char v284;
  int64x2_t v285;
  int64x2_t v286;
  __int128 v287;
  __n128 v288;
  __int128 v289;
  int64x2_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  _QWORD v295[4];
  __int16 v296;
  int64x2_t v297;
  int64x2_t v298;
  __int128 v299;
  __n128 v300;
  __int128 v301;
  int64x2_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  _QWORD v307[4];
  __int16 v308;
  int64x2_t v309;
  int64x2_t v310;
  __int128 v311;
  __n128 v312;
  __int128 v313;
  int64x2_t v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  _QWORD v319[4];
  __int16 v320;
  __int128 v321;
  int64x2_t v322;
  __int128 v323;
  __n128 v324;
  __int128 v325;
  int64x2_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 __p;
  _QWORD v331[4];
  __int16 v332;
  __int128 v333[2];
  __int128 v334[2];
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  __int16 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  __int16 v360;
  char v361;
  char v362;
  char v363;
  uint64_t v364;

  v364 = *MEMORY[0x24BDAC8D0];
  v224 = a2;
  v7 = a1 + 144;
  v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)(a1 + 144), &v224);
  v9 = *(double *)(v8[3] + 32);
  v10 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  if ((unint64_t)v10 >= v11)
  {
    v13 = v11 - (_QWORD)v10;
    v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1)
      v14 = 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v15);
    v17 = *(_DWORD **)a3;
    v18 = *(_DWORD **)(a3 + 8);
    v20 = &v16[v19];
    *v16 = v224;
    v12 = v16 + 1;
    while (v18 != v17)
    {
      v21 = *--v18;
      *--v16 = v21;
    }
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v20;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v10 = v224;
    v12 = v10 + 1;
  }
  *(_QWORD *)(a3 + 8) = v12;
  if (v9 > 2.22044605e-16)
  {
    LOBYTE(v334[0]) = 0;
    v361 = 0;
    v362 = 0;
    v363 = 0;
    v221 = 0;
    v222 = 0;
    v223 = 0;
    geom::acd<double>::impl::find_best_cut_plane((_QWORD *)a1, v8[3], 2u, 4, (uint64_t)v333, (uint64_t)&v221);
    if (v361)
    {
      v23 = v8[3];
      v24 = (*(double *)(v23 + 32) - *(double *)&v335 - *(double *)&v349) / *(double *)(v23 + 32);
      v22.n128_u64[0] = *(_QWORD *)(a4 + 8);
      if (v24 >= v22.n128_f64[0])
      {
        v218 = a3 + 16;
        v66 = v8;
        v67 = a3;
        geom::cluster<double>::deinit(v23, (_QWORD *)(a1 + 304), v24, v22);
        v68 = v66[3];
        std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](v68, v334);
        v69 = v337;
        v71 = v334[1];
        v70 = v335;
        *(_OWORD *)(v68 + 48) = v336;
        *(_OWORD *)(v68 + 64) = v69;
        *(_OWORD *)(v68 + 16) = v71;
        *(_OWORD *)(v68 + 32) = v70;
        v72 = v341;
        v74 = v338;
        v73 = v339;
        *(_OWORD *)(v68 + 112) = v340;
        *(_OWORD *)(v68 + 128) = v72;
        *(_OWORD *)(v68 + 80) = v74;
        *(_OWORD *)(v68 + 96) = v73;
        v75 = *(void **)(v68 + 144);
        if (v75)
        {
          *(_QWORD *)(v68 + 152) = v75;
          operator delete(v75);
          *(_QWORD *)(v68 + 144) = 0;
          *(_QWORD *)(v68 + 152) = 0;
          *(_QWORD *)(v68 + 160) = 0;
        }
        *(_OWORD *)(v68 + 144) = v342;
        *(_QWORD *)(v68 + 160) = v343;
        v342 = 0uLL;
        v343 = 0;
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(v68 + 168));
        *(_OWORD *)(v68 + 168) = v344;
        *(_QWORD *)(v68 + 184) = v345;
        v344 = 0uLL;
        v345 = 0;
        *(_WORD *)(v68 + 192) = v346;
        v76 = operator new();
        v77 = v354;
        *(_OWORD *)(v76 + 96) = v353;
        *(_OWORD *)(v76 + 112) = v77;
        v78 = v347;
        v79 = v348;
        v347 = 0uLL;
        *(_OWORD *)v76 = v78;
        *(_OWORD *)(v76 + 16) = v79;
        v80 = v350;
        *(_OWORD *)(v76 + 32) = v349;
        *(_OWORD *)(v76 + 48) = v80;
        v81 = v352;
        *(_OWORD *)(v76 + 64) = v351;
        *(_OWORD *)(v76 + 80) = v81;
        v82 = v356;
        *(_OWORD *)(v76 + 128) = v355;
        *(_OWORD *)(v76 + 144) = v82;
        v83 = v359;
        *(_QWORD *)(v76 + 160) = v357;
        v356 = 0uLL;
        *(_OWORD *)(v76 + 168) = v358;
        *(_QWORD *)(v76 + 184) = v83;
        v358 = 0uLL;
        v357 = 0;
        v359 = 0;
        *(_WORD *)(v76 + 192) = v360;
        v84 = (_DWORD *)(a1 + 184);
        v255[0] = (_DWORD *)(a1 + 184);
        v85 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v7, (unsigned int *)(a1 + 184), (uint64_t)&std::piecewise_construct, v255);
        v88 = v85[3];
        v86 = v85 + 3;
        v87 = v88;
        *v86 = v76;
        if (v88)
          std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v86, v87);
        v89 = (*v84)++;
        v91 = *(_DWORD **)(v67 + 8);
        v90 = *(_QWORD *)(v67 + 16);
        if ((unint64_t)v91 >= v90)
        {
          v93 = *(_DWORD **)v67;
          v94 = ((uint64_t)v91 - *(_QWORD *)v67) >> 2;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62)
            goto LABEL_171;
          v96 = v90 - (_QWORD)v93;
          if (v96 >> 1 > v95)
            v95 = v96 >> 1;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
            v97 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v218, v97);
            v93 = *(_DWORD **)v67;
            v91 = *(_DWORD **)(v67 + 8);
          }
          else
          {
            v98 = 0;
          }
          v130 = &v98[4 * v94];
          v131 = &v98[4 * v97];
          *(_DWORD *)v130 = v89;
          v92 = v130 + 4;
          while (v91 != v93)
          {
            v132 = *--v91;
            *((_DWORD *)v130 - 1) = v132;
            v130 -= 4;
          }
          *(_QWORD *)v67 = v130;
          *(_QWORD *)(v67 + 8) = v92;
          *(_QWORD *)(v67 + 16) = v131;
          if (v93)
            operator delete(v93);
        }
        else
        {
          *v91 = v89;
          v92 = v91 + 1;
        }
        *(_QWORD *)(v67 + 8) = v92;
      }
      else if (*(_BYTE *)(a4 + 24))
      {
        v215 = a3;
        v214 = v7;
        v217 = a3 + 16;
        std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100](&v221, v333);
        v321 = 0uLL;
        v322 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_QWORD *)&v323 = 0x7FF8000000000000;
        v25 = (__n128)vdupq_n_s64(0x7FF0000000000000uLL);
        *(_QWORD *)&v26 = 0x7FF0000000000000;
        v324 = v25;
        v325 = v26;
        *(_QWORD *)&v27 = 0xFFF0000000000000;
        v326 = vdupq_n_s64(0xFFF0000000000000);
        v327 = v27;
        __p = 0u;
        memset(v331, 0, sizeof(v331));
        v332 = 0;
        v309 = 0uLL;
        v310 = v322;
        *(_QWORD *)&v311 = 0x7FF8000000000000;
        v312 = v25;
        v313 = v26;
        v314 = v326;
        v315 = v27;
        v318 = 0u;
        memset(v319, 0, sizeof(v319));
        v320 = 0;
        v297 = 0uLL;
        v298 = v322;
        *(_QWORD *)&v299 = 0x7FF8000000000000;
        v300 = v25;
        v301 = v26;
        v302 = v326;
        v303 = v27;
        v306 = 0u;
        memset(v307, 0, sizeof(v307));
        v308 = 0;
        v285 = 0uLL;
        v286 = v322;
        *(_QWORD *)&v287 = 0x7FF8000000000000;
        v288 = v25;
        v289 = v26;
        v290 = v326;
        v291 = v27;
        v294 = 0u;
        memset(v295, 0, sizeof(v295));
        v296 = 0;
        memset(v220, 0, sizeof(v220));
        v28 = v221;
        v219 = v222;
        if (v221 != v222)
        {
          v29 = 0.0;
          v216 = v8;
          while (1)
          {
            v30 = (_OWORD *)(v28 + 32);
            v256[0].i8[0] = 0;
            v31 = (_OWORD *)(v28 + 240);
            v282 = 0;
            v283 = 0;
            v284 = 0;
            v226[0].i8[0] = 0;
            v252 = 0;
            v253 = 0;
            v254 = 0;
            geom::acd<double>::impl::find_best_cut_plane((_QWORD *)a1, v28 + 32, 0, 0, (uint64_t)v255, (uint64_t)v220);
            geom::acd<double>::impl::find_best_cut_plane((_QWORD *)a1, v28 + 240, 0, 0, (uint64_t)v225, (uint64_t)v220);
            if (v282)
            {
              if (v252)
              {
                v34 = *(double *)(v8[3] + 32);
                v33.n128_f64[0] = v34 - *(double *)&v257 - *(double *)&v270 - *(double *)&v227 - *(double *)&v240;
                v35 = v33.n128_f64[0] / v34;
                if (v33.n128_f64[0] / v34 <= v29)
                {
                  geom::cluster<double>::deinit((uint64_t)v256, (_QWORD *)(a1 + 304), v34, v33);
                  geom::cluster<double>::deinit((uint64_t)v269, (_QWORD *)(a1 + 304), v58, v59);
                  geom::cluster<double>::deinit((uint64_t)v226, (_QWORD *)(a1 + 304), v60, v61);
                  geom::cluster<double>::deinit((uint64_t)v239, (_QWORD *)(a1 + 304), v62, v63);
                }
                else
                {
                  geom::cluster<double>::deinit((uint64_t)&v321, (_QWORD *)(a1 + 304), v34, v33);
                  geom::cluster<double>::deinit((uint64_t)&v309, (_QWORD *)(a1 + 304), v36, v37);
                  geom::cluster<double>::deinit((uint64_t)&v297, (_QWORD *)(a1 + 304), v38, v39);
                  geom::cluster<double>::deinit((uint64_t)&v285, (_QWORD *)(a1 + 304), v40, v41);
                  v42 = (__int128)v256[0];
                  v256[0] = 0uLL;
                  v43 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
                  v321 = v42;
                  if (v43)
                  {
                    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
                    do
                      v45 = __ldaxr(p_shared_owners);
                    while (__stlxr(v45 - 1, p_shared_owners));
                    if (!v45)
                    {
                      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                      std::__shared_weak_count::__release_weak(v43);
                    }
                  }
                  v326 = v260;
                  v327 = v261;
                  v328 = v262;
                  v329 = v263;
                  v322 = v256[1];
                  v323 = v257;
                  v324 = v258;
                  v325 = v259;
                  if ((_QWORD)__p)
                  {
                    *((_QWORD *)&__p + 1) = __p;
                    operator delete((void *)__p);
                  }
                  __p = v264;
                  v331[0] = v265;
                  v265 = 0;
                  v264 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v331[1]);
                  *(_OWORD *)&v331[1] = v266;
                  v331[3] = v267;
                  v267 = 0;
                  v266 = 0uLL;
                  v332 = v268;
                  v46 = v269[0];
                  v269[0] = 0uLL;
                  v47 = (std::__shared_weak_count *)v309.i64[1];
                  v309 = v46;
                  if (v47)
                  {
                    v48 = (unint64_t *)&v47->__shared_owners_;
                    do
                      v49 = __ldaxr(v48);
                    while (__stlxr(v49 - 1, v48));
                    if (!v49)
                    {
                      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                      std::__shared_weak_count::__release_weak(v47);
                    }
                  }
                  v314 = v273;
                  v315 = v274;
                  v316 = v275;
                  v317 = v276;
                  v310 = v269[1];
                  v311 = v270;
                  v312 = v271;
                  v313 = v272;
                  if ((_QWORD)v318)
                  {
                    *((_QWORD *)&v318 + 1) = v318;
                    operator delete((void *)v318);
                  }
                  v318 = v277;
                  v319[0] = v278;
                  v278 = 0;
                  v277 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v319[1]);
                  *(_OWORD *)&v319[1] = v279;
                  v319[3] = v280;
                  v280 = 0;
                  v279 = 0uLL;
                  v320 = v281;
                  v50 = v226[0];
                  v226[0] = 0uLL;
                  v51 = (std::__shared_weak_count *)v297.i64[1];
                  v297 = v50;
                  if (v51)
                  {
                    v52 = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v302 = v230;
                  v303 = v231;
                  v304 = v232;
                  v305 = v233;
                  v298 = v226[1];
                  v299 = v227;
                  v300 = v228;
                  v301 = v229;
                  if ((_QWORD)v306)
                  {
                    *((_QWORD *)&v306 + 1) = v306;
                    operator delete((void *)v306);
                  }
                  v306 = v234;
                  v307[0] = v235;
                  v235 = 0;
                  v234 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v307[1]);
                  *(_OWORD *)&v307[1] = v236;
                  v307[3] = v237;
                  v237 = 0;
                  v236 = 0uLL;
                  v308 = v238;
                  v54 = v239[0];
                  v239[0] = 0uLL;
                  v55 = (std::__shared_weak_count *)v285.i64[1];
                  v285 = v54;
                  if (v55)
                  {
                    v56 = (unint64_t *)&v55->__shared_owners_;
                    do
                      v57 = __ldaxr(v56);
                    while (__stlxr(v57 - 1, v56));
                    if (!v57)
                    {
                      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                      std::__shared_weak_count::__release_weak(v55);
                    }
                  }
                  v290 = v243;
                  v291 = v244;
                  v292 = v245;
                  v293 = v246;
                  v286 = v239[1];
                  v287 = v240;
                  v288 = v241;
                  v289 = v242;
                  if ((_QWORD)v294)
                  {
                    *((_QWORD *)&v294 + 1) = v294;
                    operator delete((void *)v294);
                  }
                  v294 = v247;
                  v295[0] = v248;
                  v248 = 0;
                  v247 = 0uLL;
                  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)&v295[1]);
                  v32 = *(double *)&v249;
                  *(_OWORD *)&v295[1] = v249;
                  v295[3] = v250;
                  v250 = 0;
                  v249 = 0uLL;
                  v296 = v251;
                  v29 = v35;
                  v8 = v216;
                }
              }
              else
              {
                v30 = (_OWORD *)v256;
                v31 = (_OWORD *)v269;
              }
            }
            else
            {
              v30 = (_OWORD *)v226;
              v31 = (_OWORD *)v239;
              if (!v252)
                goto LABEL_56;
            }
            geom::cluster<double>::deinit((uint64_t)v30, (_QWORD *)(a1 + 304), v32, v33);
            geom::cluster<double>::deinit((uint64_t)v31, (_QWORD *)(a1 + 304), v64, v65);
LABEL_56:
            std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v226);
            std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v256);
            v28 += 496;
            if (v28 == v219)
              goto LABEL_73;
          }
        }
        v29 = 0.0;
LABEL_73:
        v99 = *(double *)(a4 + 8);
        if (v29 < v99)
          goto LABEL_143;
        geom::cluster<double>::deinit(v8[3], (_QWORD *)(a1 + 304), v99, v25);
        v100 = v8[3];
        std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](v100, &v321);
        v101 = v325;
        v103 = v322;
        v102 = v323;
        *(__n128 *)(v100 + 48) = v324;
        *(_OWORD *)(v100 + 64) = v101;
        *(int64x2_t *)(v100 + 16) = v103;
        *(_OWORD *)(v100 + 32) = v102;
        v104 = v329;
        v106 = v326;
        v105 = v327;
        *(_OWORD *)(v100 + 112) = v328;
        *(_OWORD *)(v100 + 128) = v104;
        *(int64x2_t *)(v100 + 80) = v106;
        *(_OWORD *)(v100 + 96) = v105;
        v107 = *(void **)(v100 + 144);
        if (v107)
        {
          *(_QWORD *)(v100 + 152) = v107;
          operator delete(v107);
          *(_QWORD *)(v100 + 144) = 0;
          *(_QWORD *)(v100 + 152) = 0;
          *(_QWORD *)(v100 + 160) = 0;
        }
        *(_OWORD *)(v100 + 144) = __p;
        *(_QWORD *)(v100 + 160) = v331[0];
        __p = 0uLL;
        v331[0] = 0;
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(v100 + 168));
        *(_OWORD *)(v100 + 168) = *(_OWORD *)&v331[1];
        *(_QWORD *)(v100 + 184) = v331[3];
        memset(&v331[1], 0, 24);
        *(_WORD *)(v100 + 192) = v332;
        v108 = operator new();
        v109 = v309;
        v110 = v314;
        v111 = v316;
        v112 = v317;
        *(_OWORD *)(v108 + 96) = v315;
        *(_OWORD *)(v108 + 112) = v111;
        v113 = v310;
        v114 = v311;
        *(int64x2_t *)v108 = v109;
        *(int64x2_t *)(v108 + 16) = v113;
        v115 = v312;
        v116 = v313;
        *(_OWORD *)(v108 + 32) = v114;
        *(__n128 *)(v108 + 48) = v115;
        v117 = v319[3];
        *(_QWORD *)(v108 + 160) = v319[0];
        v309 = 0uLL;
        *(_OWORD *)(v108 + 64) = v116;
        *(int64x2_t *)(v108 + 80) = v110;
        v118 = v318;
        *(_OWORD *)(v108 + 128) = v112;
        *(_OWORD *)(v108 + 144) = v118;
        v319[0] = 0;
        v318 = 0uLL;
        *(_OWORD *)(v108 + 168) = *(_OWORD *)&v319[1];
        *(_QWORD *)(v108 + 184) = v117;
        memset(&v319[1], 0, 24);
        *(_WORD *)(v108 + 192) = v320;
        v225[0] = v108;
        v119 = (unsigned int *)(a1 + 184);
        v255[0] = (_DWORD *)(a1 + 184);
        v120 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v214, (unsigned int *)(a1 + 184), (uint64_t)&std::piecewise_construct, v255);
        v123 = v120[3];
        v121 = v120 + 3;
        v122 = v123;
        v124 = v225[0];
        v225[0] = 0;
        *v121 = v124;
        if (v123)
        {
          std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v121, v122);
          v125 = v225[0];
          v225[0] = 0;
          if (v125)
            std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v225, v125);
        }
        v126 = (*v119)++;
        v128 = *(unsigned int **)(v215 + 8);
        v127 = *(_QWORD *)(v215 + 16);
        if ((unint64_t)v128 >= v127)
        {
          v133 = *(unsigned int **)v215;
          v134 = ((uint64_t)v128 - *(_QWORD *)v215) >> 2;
          v135 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 62)
            goto LABEL_171;
          v136 = v127 - (_QWORD)v133;
          if (v136 >> 1 > v135)
            v135 = v136 >> 1;
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
            v137 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v137 = v135;
          if (v137)
          {
            v138 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v217, v137);
            v133 = *(unsigned int **)v215;
            v128 = *(unsigned int **)(v215 + 8);
          }
          else
          {
            v138 = 0;
          }
          v139 = (unsigned int *)&v138[4 * v134];
          v140 = &v138[4 * v137];
          *v139 = v126;
          v129 = v139 + 1;
          while (v128 != v133)
          {
            v141 = *--v128;
            *--v139 = v141;
          }
          *(_QWORD *)v215 = v139;
          *(_QWORD *)(v215 + 8) = v129;
          *(_QWORD *)(v215 + 16) = v140;
          if (v133)
            operator delete(v133);
        }
        else
        {
          *v128 = v126;
          v129 = v128 + 1;
        }
        *(_QWORD *)(v215 + 8) = v129;
        v142 = operator new();
        v143 = v297;
        v144 = v302;
        v145 = v304;
        v146 = v305;
        *(_OWORD *)(v142 + 96) = v303;
        *(_OWORD *)(v142 + 112) = v145;
        v147 = v298;
        v148 = v299;
        *(int64x2_t *)v142 = v143;
        *(int64x2_t *)(v142 + 16) = v147;
        v149 = v300;
        v150 = v301;
        *(_OWORD *)(v142 + 32) = v148;
        *(__n128 *)(v142 + 48) = v149;
        v151 = v307[3];
        *(_QWORD *)(v142 + 160) = v307[0];
        v297 = 0uLL;
        *(_OWORD *)(v142 + 64) = v150;
        *(int64x2_t *)(v142 + 80) = v144;
        v152 = v306;
        *(_OWORD *)(v142 + 128) = v146;
        *(_OWORD *)(v142 + 144) = v152;
        v307[0] = 0;
        v306 = 0uLL;
        *(_OWORD *)(v142 + 168) = *(_OWORD *)&v307[1];
        *(_QWORD *)(v142 + 184) = v151;
        memset(&v307[1], 0, 24);
        *(_WORD *)(v142 + 192) = v308;
        v225[0] = v142;
        v255[0] = (_DWORD *)(a1 + 184);
        v153 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v214, v119, (uint64_t)&std::piecewise_construct, v255);
        v156 = v153[3];
        v154 = v153 + 3;
        v155 = v156;
        v157 = v225[0];
        v225[0] = 0;
        *v154 = v157;
        if (v156)
        {
          std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v154, v155);
          v158 = v225[0];
          v225[0] = 0;
          if (v158)
            std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v225, v158);
        }
        v159 = (*v119)++;
        v161 = *(unsigned int **)(v215 + 8);
        v160 = *(_QWORD *)(v215 + 16);
        if ((unint64_t)v161 >= v160)
        {
          v163 = *(unsigned int **)v215;
          v164 = ((uint64_t)v161 - *(_QWORD *)v215) >> 2;
          v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62)
            goto LABEL_171;
          v166 = v160 - (_QWORD)v163;
          if (v166 >> 1 > v165)
            v165 = v166 >> 1;
          if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
            v167 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v167 = v165;
          if (v167)
          {
            v168 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v217, v167);
            v163 = *(unsigned int **)v215;
            v161 = *(unsigned int **)(v215 + 8);
          }
          else
          {
            v168 = 0;
          }
          v169 = (unsigned int *)&v168[4 * v164];
          v170 = &v168[4 * v167];
          *v169 = v159;
          v162 = v169 + 1;
          while (v161 != v163)
          {
            v171 = *--v161;
            *--v169 = v171;
          }
          *(_QWORD *)v215 = v169;
          *(_QWORD *)(v215 + 8) = v162;
          *(_QWORD *)(v215 + 16) = v170;
          if (v163)
            operator delete(v163);
        }
        else
        {
          *v161 = v159;
          v162 = v161 + 1;
        }
        *(_QWORD *)(v215 + 8) = v162;
        v172 = operator new();
        v173 = v285;
        v174 = v290;
        v175 = v292;
        v176 = v293;
        *(_OWORD *)(v172 + 96) = v291;
        *(_OWORD *)(v172 + 112) = v175;
        v177 = v286;
        v178 = v287;
        *(int64x2_t *)v172 = v173;
        *(int64x2_t *)(v172 + 16) = v177;
        v179 = v288;
        v180 = v289;
        *(_OWORD *)(v172 + 32) = v178;
        *(__n128 *)(v172 + 48) = v179;
        v181 = v295[3];
        *(_QWORD *)(v172 + 160) = v295[0];
        v285 = 0uLL;
        *(_OWORD *)(v172 + 64) = v180;
        *(int64x2_t *)(v172 + 80) = v174;
        v182 = v294;
        *(_OWORD *)(v172 + 128) = v176;
        *(_OWORD *)(v172 + 144) = v182;
        v295[0] = 0;
        v294 = 0uLL;
        *(_OWORD *)(v172 + 168) = *(_OWORD *)&v295[1];
        *(_QWORD *)(v172 + 184) = v181;
        memset(&v295[1], 0, 24);
        *(_WORD *)(v172 + 192) = v296;
        v225[0] = v172;
        v255[0] = (_DWORD *)(a1 + 184);
        v183 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v214, v119, (uint64_t)&std::piecewise_construct, v255);
        v186 = v183[3];
        v184 = v183 + 3;
        v185 = v186;
        v187 = v225[0];
        v225[0] = 0;
        *v184 = v187;
        if (v186)
        {
          std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v184, v185);
          v188 = v225[0];
          v225[0] = 0;
          if (v188)
            std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v225, v188);
        }
        v189 = (*v119)++;
        v191 = *(unsigned int **)(v215 + 8);
        v190 = *(_QWORD *)(v215 + 16);
        if ((unint64_t)v191 < v190)
        {
          *v191 = v189;
          v192 = v191 + 1;
LABEL_142:
          *(_QWORD *)(v215 + 8) = v192;
LABEL_143:
          v255[0] = v220;
          std::vector<geom::cut_plane_search_candidate<double>>::__destroy_vector::operator()[abi:nn180100]((void ***)v255);
          v255[0] = &v295[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v255);
          if ((_QWORD)v294)
          {
            *((_QWORD *)&v294 + 1) = v294;
            operator delete((void *)v294);
          }
          v202 = (std::__shared_weak_count *)v285.i64[1];
          if (v285.i64[1])
          {
            v203 = (unint64_t *)(v285.i64[1] + 8);
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
              std::__shared_weak_count::__release_weak(v202);
            }
          }
          v255[0] = &v307[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v255);
          if ((_QWORD)v306)
          {
            *((_QWORD *)&v306 + 1) = v306;
            operator delete((void *)v306);
          }
          v205 = (std::__shared_weak_count *)v297.i64[1];
          if (v297.i64[1])
          {
            v206 = (unint64_t *)(v297.i64[1] + 8);
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
          v255[0] = &v319[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v255);
          if ((_QWORD)v318)
          {
            *((_QWORD *)&v318 + 1) = v318;
            operator delete((void *)v318);
          }
          v208 = (std::__shared_weak_count *)v309.i64[1];
          if (v309.i64[1])
          {
            v209 = (unint64_t *)(v309.i64[1] + 8);
            do
              v210 = __ldaxr(v209);
            while (__stlxr(v210 - 1, v209));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
          }
          v255[0] = &v331[1];
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v255);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v211 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
          if (*((_QWORD *)&v321 + 1))
          {
            v212 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          goto LABEL_88;
        }
        v193 = *(unsigned int **)v215;
        v194 = ((uint64_t)v191 - *(_QWORD *)v215) >> 2;
        v195 = v194 + 1;
        if (!((unint64_t)(v194 + 1) >> 62))
        {
          v196 = v190 - (_QWORD)v193;
          if (v196 >> 1 > v195)
            v195 = v196 >> 1;
          if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL)
            v197 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v197 = v195;
          if (v197)
          {
            v198 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v217, v197);
            v193 = *(unsigned int **)v215;
            v191 = *(unsigned int **)(v215 + 8);
          }
          else
          {
            v198 = 0;
          }
          v199 = (unsigned int *)&v198[4 * v194];
          v200 = &v198[4 * v197];
          *v199 = v189;
          v192 = v199 + 1;
          while (v191 != v193)
          {
            v201 = *--v191;
            *--v199 = v201;
          }
          *(_QWORD *)v215 = v199;
          *(_QWORD *)(v215 + 8) = v192;
          *(_QWORD *)(v215 + 16) = v200;
          if (v193)
            operator delete(v193);
          goto LABEL_142;
        }
LABEL_171:
        abort();
      }
    }
LABEL_88:
    v255[0] = &v221;
    std::vector<geom::cut_plane_search_candidate<double>>::__destroy_vector::operator()[abi:nn180100]((void ***)v255);
    std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v334);
  }
}

double geom::acd<double>::impl::cut_plane_cost(double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  double *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;

  v4 = *(double *)(a3 + 32);
  v5 = *(double *)(a4 + 32);
  v6 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(double **)a3;
  v11 = *(std::__shared_weak_count **)(a3 + 8);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(double **)a4;
  v15 = *(std::__shared_weak_count **)(a4 + 8);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *v10;
  v19 = v10[1];
  v20 = *v14;
  v21 = v14[1];
  v22 = *(double *)(*(_QWORD *)&v6 + 8);
  v23 = a1[53];
  v24 = a1[54];
  v25 = *(double *)(a3 + 24);
  v26 = *(double *)(a4 + 24);
  v27 = a2[3];
  v28 = a1[55];
  if (!v15)
    goto LABEL_14;
  v29 = (unint64_t *)&v15->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    v46 = v5;
    v49 = v4;
    v40 = v20;
    v43 = v18;
    v37 = v23;
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v23 = v37;
    v20 = v40;
    v18 = v43;
    v5 = v46;
    v4 = v49;
    if (!v11)
      goto LABEL_20;
  }
  else
  {
LABEL_14:
    if (!v11)
      goto LABEL_20;
  }
  v31 = (unint64_t *)&v11->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    v45 = v5;
    v48 = v4;
    v39 = v20;
    v42 = v18;
    v36 = v23;
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v23 = v36;
    v20 = v39;
    v18 = v42;
    v5 = v45;
    v4 = v48;
  }
LABEL_20:
  if (v7)
  {
    v33 = (unint64_t *)&v7->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      v47 = v5;
      v50 = v4;
      v41 = v20;
      v44 = v18;
      v38 = v23;
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v23 = v38;
      v20 = v41;
      v18 = v44;
      v5 = v47;
      v4 = v50;
    }
  }
  return (v4 + v5) * ((v23 * vabdd_f64(v18, v20) + (v19 + v21 - v22) * v24 + (v25 + v26 - v27) * v28) * 0.01 + 1.0);
}

void geom::acd<double>::impl::find_best_cut_plane(_QWORD *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9;
  uint64_t v12;
  char *v13;
  uint64_t i;
  uint64_t v15;
  int8x16_t v16;
  double v17;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  void *__p;
  char *v33;
  char *v34;

  v9 = a3;
  v12 = *(unsigned int *)(a1[45] + 4 * a3);
  __p = 0;
  v33 = 0;
  v34 = 0;
  if ((_DWORD)v12)
  {
    v13 = 0;
    for (i = 0; i != v12; ++i)
    {
      v15 = a1[42] + 32 * i;
      if (*(double *)(v15 + 16) < 2.22044605e-16)
      {
        v16 = *(int8x16_t *)v15;
        if (*(double *)v15 <= -2.22044605e-16)
          continue;
        *(_QWORD *)&v17 = vextq_s8(v16, v16, 8uLL).u64[0];
        if (*(double *)v16.i64 < 2.22044605e-16 && v17 <= -2.22044605e-16)
          continue;
      }
      if (v13 >= v34)
      {
        v20 = (char *)__p;
        v21 = (v13 - (_BYTE *)__p) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          abort();
        v23 = v34 - (_BYTE *)__p;
        if ((v34 - (_BYTE *)__p) >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v34, v24);
          v20 = (char *)__p;
          v13 = v33;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[4 * v21];
        *(_DWORD *)v26 = i;
        v19 = v26 + 4;
        while (v13 != v20)
        {
          v27 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        __p = v26;
        v33 = v19;
        v34 = &v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v13 = i;
        v19 = v13 + 4;
      }
      v33 = v19;
      v13 = v19;
    }
    v28 = (unsigned int *)__p;
    v9 = a3;
  }
  else
  {
    v13 = 0;
    v28 = 0;
  }
  geom::acd<double>::impl::search_cut_planes_with_normals((uint64_t)a1, v28, (v13 - (char *)v28) >> 2, a2, a4, a5, a6);
  if (*(_BYTE *)(a5 + 448))
  {
    v29 = v9 + 1;
    if (v29 < ((a1[46] - a1[45]) >> 2))
    {
      v30 = 208 * v29;
      do
      {
        v33 = (char *)__p;
        geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1[48] + v30), *(_DWORD *)a5, (uint64_t)&__p);
        geom::acd<double>::impl::search_cut_planes_with_normals((uint64_t)a1, (unsigned int *)__p, (v33 - (_BYTE *)__p) >> 2, a2, a4, a5, a6);
        ++v29;
        v30 += 208;
      }
      while (v29 < ((a1[46] - a1[45]) >> 2));
    }
  }
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

void std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100](uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v11 + 1 > 0x84210842108421)
      abort();
    v12 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v5 - *a1) >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x42108421084210)
      v14 = 0x84210842108421;
    else
      v14 = v13;
    v19[4] = v4;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cut_plane_search_candidate<double>>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[496 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[496 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    v16[32] = 0;
    v16[448] = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)(v16 + 32), (uint64_t)(a2 + 2));
    v18 = a2[29];
    *((_QWORD *)v16 + 60) = *((_QWORD *)a2 + 60);
    *((_OWORD *)v16 + 29) = v18;
    v19[2] = v16 + 496;
    std::vector<geom::cut_plane_search_candidate<double>>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    std::__split_buffer<geom::cut_plane_search_candidate<double>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *(_BYTE *)(v7 + 32) = 0;
    *(_BYTE *)(v7 + 448) = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(v7 + 32, (uint64_t)(a2 + 2));
    v9 = a2[29];
    *(_QWORD *)(v7 + 480) = *((_QWORD *)a2 + 60);
    *(_OWORD *)(v7 + 464) = v9;
    v10 = v7 + 496;
  }
  a1[1] = v10;
}

void geom::acd<double>::impl::search_cut_planes_with_normals(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  int8x16_t v12;
  int8x16_t v16;
  uint64_t v18;
  unsigned int v23;
  uint64_t v24;
  float64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  float64x2_t *v31;
  double v32;
  int v33;
  int v34;
  double v35;
  int v36;
  int v37;
  __int128 *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned int *v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  double v50;
  __n128 v51;
  unsigned int *v52;
  uint64_t *v53;
  float64x2_t *v54;
  double v55;
  int v56;
  int v57;
  double v58;
  int v59;
  int v60;
  __int128 *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int *v66;
  __int128 v68;
  _OWORD *v69;
  unsigned int *v70;
  unsigned int *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unsigned int *v75;
  __int128 v76;
  unsigned int *v77;
  double v78;
  __n128 v79;
  unsigned int *i;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  _OWORD v90[2];
  int v91;
  unsigned int *v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95[4];
  int v96;
  char v97;
  unsigned int *v98;
  unsigned int *v99;
  uint64_t v100;
  _OWORD v101[2];
  uint64_t v102;
  __int128 v103;
  double v104;
  _BYTE v105[416];
  char v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v7 = *(float64x2_t *)(a4 + 48);
  v8 = *(float64x2_t *)(a4 + 64);
  v9 = *(float64x2_t *)(a4 + 80);
  v10 = *(float64x2_t *)(a4 + 96);
  v11 = vcgtq_f64(v7, v9);
  v12 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v11, 1), vorrq_s8((int8x16_t)vcgtq_f64(v8, v10), (int8x16_t)v11));
  if (v12.i64[0] < 0)
    return;
  v102 = 0;
  v16 = 0uLL;
  memset(v101, 0, sizeof(v101));
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v95[0] = a1;
  v95[1] = (uint64_t)&v98;
  v95[2] = a7;
  v95[3] = (uint64_t)&v97;
  v96 = a5;
  if (a3)
  {
    v8.f64[1] = 0.0;
    v10.f64[1] = 0.0;
    v18 = 4 * a3;
    v12.i64[0] = 0x8000000000000000;
    v82 = v12;
    v83 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
    __asm { FMOV            V0.2D, #1.0 }
    v81 = _Q0;
    v86 = (float64x2_t)*(unint64_t *)&v8.f64[0];
    v88 = v7;
    v84 = (float64x2_t)*(unint64_t *)&v10.f64[0];
    v85 = v9;
    do
    {
      v23 = *a2++;
      v24 = *(_QWORD *)(a1 + 336) + 32 * v23;
      v25 = *(float64x2_t *)(v24 + 16);
      v26 = (int8x16_t)vcltzq_s64((int64x2_t)vcvtq_s64_f64((float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v25), (int8x16_t)vcgtzq_f64(v25)), vorrq_s8(vandq_s8((int8x16_t)v25, v82), v81), v16)).u64[0]);
      v27 = (int8x16_t)vcltzq_s64(vcvtq_s64_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8(*(int8x16_t *)v24, v83), v81), vorrq_s8((int8x16_t)vcltzq_f64(*(float64x2_t *)v24), (int8x16_t)vcgtzq_f64(*(float64x2_t *)v24)))));
      v28 = vmulq_f64(v25, (float64x2_t)vbslq_s8(v26, (int8x16_t)v10, (int8x16_t)v8)).f64[0]
          + vaddvq_f64(vmulq_f64(*(float64x2_t *)v24, (float64x2_t)vbslq_s8(v27, (int8x16_t)v9, (int8x16_t)v7)));
      v25.f64[0] = vmulq_f64(v25, (float64x2_t)vorrq_s8(vbicq_s8((int8x16_t)v10, v26), vandq_s8(v26, (int8x16_t)v8))).f64[0]
                 + vaddvq_f64(vmulq_f64(*(float64x2_t *)v24, (float64x2_t)vbslq_s8(v27, (int8x16_t)v7, (int8x16_t)v9)));
      v105[0] = 0;
      v106 = 0;
      LOBYTE(v107) = 0;
      LOBYTE(v108) = 0;
      LODWORD(v103) = v23;
      *((double *)&v103 + 1) = (-v28 - v25.f64[0]) * 0.5;
      v104 = (v25.f64[0] - v28) * 0.5;
      std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100]((uint64_t *)&v98, &v103);
      std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v105);
      v16 = 0uLL;
      v10 = v84;
      v9 = v85;
      v8 = v86;
      v7 = v88;
      v18 -= 4;
    }
    while (v18);
    v29 = v98;
    v30 = v99;
    v87 = *(float64x2_t *)(a1 + 208);
    v89 = *(float64x2_t *)(a1 + 224);
    v92 = 0;
    v93 = 0;
    v94 = 0;
    if (v98 != v99)
    {
      do
      {
        v31 = (float64x2_t *)(*(_QWORD *)(a1 + 336) + 32 * *v29);
        v32 = (vmulq_f64(v89, vabsq_f64(v31[1])).f64[0] + vaddvq_f64(vmulq_f64(v87, vabsq_f64(*v31)))) * 8.0 * 0.5;
        v33 = vcvtmd_s64_f64(*((double *)v29 + 2) / v32);
        v34 = -1;
        v35 = -1.0;
        do
        {
          v36 = v34;
          if (v33 >= 1)
          {
            v37 = 0;
            do
            {
              ++v37;
              v105[0] = 0;
              v106 = 0;
              LOBYTE(v107) = 0;
              LOBYTE(v108) = 0;
              *((double *)&v103 + 1) = *((double *)v29 + 1) + v32 * v35 * (double)v37;
              v104 = v32;
              LODWORD(v103) = *v29;
              std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100]((uint64_t *)&v92, &v103);
              std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v105);
            }
            while (v33 != v37);
          }
          v35 = v35 + 2.0;
          v34 = v36 + 2;
        }
        while (v36 < 0);
        v29 += 124;
      }
      while (v29 != v30);
      v38 = (__int128 *)v92;
      v39 = v93;
      if (v92 != v93)
      {
        do
        {
          std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100]((uint64_t *)&v98, v38);
          v38 += 31;
        }
        while (v38 != (__int128 *)v39);
        v39 = v92;
        v40 = v93;
        if (v93 != v92)
        {
          do
          {
            v41 = v40 - 124;
            std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v40 - 116));
            v40 = v41;
          }
          while (v41 != v39);
        }
      }
      goto LABEL_19;
    }
  }
  else
  {
    v87 = *(float64x2_t *)(a1 + 208);
    v89 = *(float64x2_t *)(a1 + 224);
    v92 = 0;
    v93 = 0;
    v94 = 0;
  }
  v39 = 0;
LABEL_19:
  v93 = v39;
  geom::acd<double>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>((uint64_t *)a1, v98, v99, (_QWORD *)a4, (uint64_t *)v101);
  memset(v90, 0, sizeof(v90));
  v91 = 1065353216;
  v42 = v98;
  if (v99 != v98)
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v90, &v42[124 * v43]);
      if (v45)
      {
        v46 = &v42[124 * v43];
        v42 = v98;
        if (*((double *)v46 + 58) < *(double *)&v98[124 * *((unsigned int *)v45 + 5) + 116])
          *((_DWORD *)v45 + 5) = v44;
      }
      else
      {
        *(_QWORD *)&v103 = &v42[124 * v43];
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v90, (unsigned int *)v103, (uint64_t)&std::piecewise_construct, (_DWORD **)&v103)+ 5) = v44;
        v42 = v98;
      }
      v43 = ++v44;
    }
    while (0xEF7BDEF7BDEF7BDFLL * (((char *)v99 - (char *)v42) >> 4) > v44);
    if (v99 != v42)
    {
      v47 = 0;
      v48 = 0;
      do
      {
        v49 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v90, &v42[124 * v47]);
        if (v49 && *((_DWORD *)v49 + 5) == v48)
        {
          v42 = v98;
          v52 = v99;
        }
        else
        {
          geom::acd<double>::impl::search_cut_planes_with_normals(geom::slice<unsigned int>,geom::cluster<double> const&,unsigned int,geom::cut_plane_search_candidate<double> &,std::vector<geom::cut_plane_search_candidate<double>> &)::{lambda(unsigned long)#1}::operator()(v95, v47, v50, v51);
          v42 = v98;
          v52 = v99;
          if (0xEF7BDEF7BDEF7BDFLL * (((char *)v99 - (char *)v98) >> 4) <= v47)
          {
            --v48;
          }
          else
          {
            v53 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v90, &v98[124 * v47]);
            v42 = v98;
            v52 = v99;
            if (v53 && 0xEF7BDEF7BDEF7BDFLL * (((char *)v99 - (char *)v98) >> 4) == *((_DWORD *)v53 + 5))
              *((_DWORD *)v53 + 5) = v48;
          }
        }
        v47 = ++v48;
      }
      while (0xEF7BDEF7BDEF7BDFLL * (((char *)v52 - (char *)v42) >> 4) > v48);
      for (; v42 != v52; v42 += 124)
      {
        v54 = (float64x2_t *)(*(_QWORD *)(a1 + 336) + 32 * *v42);
        v55 = vmulq_f64(v89, vabsq_f64(v54[1])).f64[0] + vaddvq_f64(vmulq_f64(v87, vabsq_f64(*v54)));
        v56 = vcvtmd_s64_f64(*((double *)v42 + 2) / v55);
        v57 = -1;
        v58 = -1.0;
        do
        {
          v59 = v57;
          if (v56 >= 1)
          {
            v60 = 0;
            do
            {
              ++v60;
              v105[0] = 0;
              v106 = 0;
              LOBYTE(v107) = 0;
              LOBYTE(v108) = 0;
              *((double *)&v103 + 1) = *((double *)v42 + 1) + v55 * v58 * (double)v60;
              v104 = v55;
              LODWORD(v103) = *v42;
              std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100]((uint64_t *)&v92, &v103);
              std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v105);
            }
            while (v56 != v60);
          }
          v58 = v58 + 2.0;
          v57 = v59 + 2;
        }
        while (v59 < 0);
      }
    }
  }
  geom::acd<double>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>((uint64_t *)a1, v92, v93, (_QWORD *)a4, (uint64_t *)v101);
  v61 = (__int128 *)v92;
  v62 = v93;
  if (v92 != v93)
  {
    do
    {
      std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100]((uint64_t *)&v98, v61);
      v61 += 31;
    }
    while (v61 != (__int128 *)v62);
    v61 = (__int128 *)v92;
    v63 = v93;
    if (v93 != v92)
    {
      do
      {
        v64 = v63 - 124;
        std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v63 - 116));
        v63 = v64;
      }
      while (v64 != (unsigned int *)v61);
    }
  }
  v93 = (unsigned int *)v61;
  v65 = v98;
  v66 = v98 + 124;
  if (v98 != v99 && v66 != v99)
  {
    do
    {
      if (*((double *)v66 + 58) < *((double *)v65 + 58))
        v65 = v66;
      v66 += 124;
    }
    while (v66 != v99);
  }
  v68 = *(_OWORD *)v65;
  *(_QWORD *)(a6 + 16) = *((_QWORD *)v65 + 2);
  *(_OWORD *)a6 = v68;
  std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(a6 + 32, (uint64_t)(v65 + 8));
  v69 = v65 + 116;
  if (*(unsigned __int8 *)(a6 + 480) == *((unsigned __int8 *)v65 + 480))
  {
    if (*(_BYTE *)(a6 + 480))
    {
      *(_QWORD *)(a6 + 464) = *((_QWORD *)v65 + 58);
      *(_QWORD *)(a6 + 472) = *((_QWORD *)v65 + 59);
    }
  }
  else if (*(_BYTE *)(a6 + 480))
  {
    *(_BYTE *)(a6 + 480) = 0;
  }
  else
  {
    *(_OWORD *)(a6 + 464) = *v69;
    *(_BYTE *)(a6 + 480) = 1;
  }
  v70 = v99;
  v71 = v99 - 124;
  v72 = *(_OWORD *)v65;
  v104 = *((double *)v65 + 2);
  v103 = v72;
  v105[0] = 0;
  v106 = 0;
  std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)v105, (uint64_t)(v65 + 8));
  v73 = *v69;
  v108 = *((_QWORD *)v65 + 60);
  v107 = v73;
  v74 = *((_QWORD *)v71 + 2);
  *(_OWORD *)v65 = *(_OWORD *)v71;
  *((_QWORD *)v65 + 2) = v74;
  std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)(v65 + 8), (uint64_t)(v70 - 116));
  v75 = v70 - 8;
  if (*((unsigned __int8 *)v65 + 480) == *((unsigned __int8 *)v70 - 16))
  {
    if (*((_BYTE *)v65 + 480))
    {
      *((_QWORD *)v65 + 58) = *((_QWORD *)v70 - 4);
      *((_QWORD *)v65 + 59) = *((_QWORD *)v70 - 3);
    }
  }
  else if (*((_BYTE *)v65 + 480))
  {
    *((_BYTE *)v65 + 480) = 0;
  }
  else
  {
    *v69 = *(_OWORD *)v75;
    *((_BYTE *)v65 + 480) = 1;
  }
  v76 = v103;
  *((double *)v71 + 2) = v104;
  *(_OWORD *)v71 = v76;
  std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)(v70 - 116), (uint64_t)v105);
  if (*((unsigned __int8 *)v70 - 16) == v108)
  {
    if (*((_BYTE *)v70 - 16))
      *((_OWORD *)v70 - 2) = v107;
  }
  else if (*((_BYTE *)v70 - 16))
  {
    *((_BYTE *)v70 - 16) = 0;
  }
  else
  {
    *(_OWORD *)v75 = v107;
    *((_BYTE *)v70 - 16) = 1;
  }
  std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v105);
  v77 = v99 - 124;
  std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v99 - 116));
  v99 = v77;
  for (i = v98; v98 != v99; v77 = v99)
  {
    geom::acd<double>::impl::search_cut_planes_with_normals(geom::slice<unsigned int>,geom::cluster<double> const&,unsigned int,geom::cut_plane_search_candidate<double> &,std::vector<geom::cut_plane_search_candidate<double>> &)::{lambda(unsigned long)#1}::operator()(v95, -1 - 0x1084210842108421 * (((char *)v77 - (char *)i) >> 4), v78, v79);
    i = v98;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v90);
  *(_QWORD *)&v103 = &v92;
  std::vector<geom::cut_plane_search_candidate<double>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v103);
  *(_QWORD *)&v103 = &v98;
  std::vector<geom::cut_plane_search_candidate<double>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v103);
  *(_QWORD *)&v103 = v101;
  std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v103);
}

uint64_t std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100](uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v12 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v7 - *a1) >> 4);
    if (v12 + 1 > 0x84210842108421)
      abort();
    v13 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v5 - *a1) >> 4);
    v14 = 2 * v13;
    if (2 * v13 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x42108421084210)
      v15 = 0x84210842108421;
    else
      v15 = v14;
    v20[4] = v4;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cut_plane_search_candidate<double>>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[496 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[496 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    v17[32] = 0;
    v17[448] = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false> const&>((uint64_t)(v17 + 32), (uint64_t)(a2 + 2));
    v19 = a2[29];
    *((_QWORD *)v17 + 60) = *((_QWORD *)a2 + 60);
    *((_OWORD *)v17 + 29) = v19;
    v20[2] = v17 + 496;
    std::vector<geom::cut_plane_search_candidate<double>>::__swap_out_circular_buffer(a1, v20);
    v11 = a1[1];
    result = std::__split_buffer<geom::cut_plane_search_candidate<double>>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *(_BYTE *)(v7 + 32) = 0;
    *(_BYTE *)(v7 + 448) = 0;
    result = std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false> const&>(v7 + 32, (uint64_t)(a2 + 2));
    v10 = a2[29];
    *(_QWORD *)(v7 + 480) = *((_QWORD *)a2 + 60);
    *(_OWORD *)(v7 + 464) = v10;
    v11 = v7 + 496;
  }
  a1[1] = v11;
  return result;
}

void geom::acd<double>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(uint64_t *a1, unsigned int *a2, unsigned int *a3, _QWORD *a4, uint64_t *a5)
{
  unsigned int *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __n128 v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  size_t v27;
  __int128 v29;
  __int128 v30;
  void *__p;
  char *v32;
  char *v33;
  unsigned int *v34;
  uint64_t block;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  unsigned int **v42;

  v7 = a2;
  v33 = 0;
  v34 = a2;
  __p = 0;
  v32 = 0;
  std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::reserve(&__p, 0xEF7BDEF7BDEF7BDFLL * (((char *)a3 - (char *)a2) >> 4));
  if (a3 == v7)
  {
    v14 = v32;
  }
  else
  {
    v14 = v32;
    do
    {
      v15 = (__int128 *)(a1[42] + 32 * *v7);
      v10 = *v15;
      v9 = v15[1];
      v16 = *((_QWORD *)v7 + 1);
      if (v14 >= v33)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)__p) >> 4);
        v18 = v17 + 1;
        if (v17 + 1 > 0x555555555555555)
          abort();
        if (0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 4) > v18)
          v18 = 0x5555555555555556 * ((v33 - (_BYTE *)__p) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v19 = 0x555555555555555;
        else
          v19 = v18;
        if (v19)
        {
          v29 = *v15;
          v30 = v15[1];
          v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)&v33, v19);
          v10 = v29;
          v9 = v30;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[48 * v17];
        *(_OWORD *)v21 = v10;
        *((_OWORD *)v21 + 1) = v9;
        *((_QWORD *)v21 + 4) = v16;
        v23 = (char *)__p;
        v22 = v32;
        v24 = v21;
        if (v32 != __p)
        {
          do
          {
            v9 = *((_OWORD *)v22 - 3);
            v10 = *((_OWORD *)v22 - 2);
            v11 = *((_OWORD *)v22 - 1);
            *((_OWORD *)v24 - 2) = v10;
            *((_OWORD *)v24 - 1) = v11;
            *((_OWORD *)v24 - 3) = v9;
            v24 -= 48;
            v22 -= 48;
          }
          while (v22 != v23);
          v22 = v23;
        }
        v14 = v21 + 48;
        __p = v24;
        v32 = v21 + 48;
        v33 = &v20[48 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v14 = v10;
        *((_OWORD *)v14 + 1) = v9;
        *((_QWORD *)v14 + 4) = v16;
        v14 += 48;
      }
      v32 = v14;
      v7 += 124;
    }
    while (v7 != a3);
  }
  geom::cluster_parallel_clipper<double>::init(a5, a4, (uint64_t)(a1 + 38), (uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)__p) >> 4), *(double *)&v9, *(double *)&v10, *(double *)&v11, v12, v13);
  v25 = (_QWORD *)a5[5];
  v26 = MEMORY[0x24BDAC760];
  v27 = ((a5[8] + ((uint64_t)(v25[19] - v25[18]) >> 3) - 1) / (unint64_t)a5[8]
       + (a5[7] + ((uint64_t)(v25[22] - v25[21]) >> 4) - 1) / (unint64_t)a5[7])
      * a5[4];
  block = MEMORY[0x24BDAC760];
  v36 = 0x40000000;
  v37 = ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIdE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_0;
  v38 = &__block_descriptor_tmp_3_0;
  v39 = a5;
  dispatch_apply(v27, 0, &block);
  block = v26;
  v36 = 0x40000000;
  v37 = ___ZN4geom14dispatch_applyIZNS_3acdIdE4impl29evaluate_candidate_cut_planesINSt3__111__wrap_iterIPNS_26cut_plane_search_candidateIdEEEEEEvT_SB_RKNS_7clusterIdEERNS_24cluster_parallel_clipperIdEEEUlmE_Lb1EEEvmP16dispatch_queue_sSB__block_invoke;
  v38 = &__block_descriptor_tmp_4_0;
  v39 = a1;
  v40 = a5;
  v41 = a4;
  v42 = &v34;
  dispatch_apply(0xAAAAAAAAAAAAAAABLL * ((v32 - (_BYTE *)__p) >> 4), 0, &block);
  geom::cluster_parallel_clipper<double>::deinit((int64x2_t **)a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

uint64_t geom::acd<double>::impl::search_cut_planes_with_normals(geom::slice<unsigned int>,geom::cluster<double> const&,unsigned int,geom::cut_plane_search_candidate<double> &,std::vector<geom::cut_plane_search_candidate<double>> &)::{lambda(unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, double a3, __n128 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  double v23;
  __n128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _OWORD v34[2];
  _OWORD v35[27];
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *(_QWORD *)a1[1];
  v8 = v7 + 496 * a2;
  v9 = (_QWORD *)(v8 + 464);
  if (*(_BYTE *)(v8 + 480))
  {
    v10 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = (uint64_t *)a1[2];
      if (0xEF7BDEF7BDEF7BDFLL * ((v11[1] - *v11) >> 4) < v10
        || (a3 = *(double *)(v8 + 472), a4.n128_u64[0] = *(_QWORD *)(*v11 + 472), a3 < a4.n128_f64[0]))
      {
        std::vector<geom::cut_plane_search_candidate<double>>::push_back[abi:nn180100](v11, (__int128 *)(v7 + 496 * a2));
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<double> &,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(*(_QWORD *)a1[2], *(_QWORD *)(a1[2] + 8), (uint64_t)v34, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a1[2] + 8) - *(_QWORD *)a1[2]) >> 4));
        v36 = 0u;
        v37 = 0u;
        memset(v35, 0, sizeof(v35));
        memset(v34, 0, sizeof(v34));
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v12 = v7 + 496 * a2;
        *(_QWORD *)(v8 + 16) = 0;
        std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(v12 + 32, (uint64_t)v35);
        if (*(unsigned __int8 *)(v12 + 480) == v37)
        {
          if (*(_BYTE *)(v12 + 480))
          {
            *v9 = v36;
            *(_QWORD *)(v7 + 496 * a2 + 472) = *((_QWORD *)&v36 + 1);
          }
        }
        else
        {
          v13 = (_BYTE *)(v12 + 480);
          if (*(_BYTE *)(v12 + 480))
          {
            *v13 = 0;
          }
          else
          {
            *(_OWORD *)v9 = v36;
            *v13 = 1;
          }
        }
        std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v35);
        v14 = (uint64_t *)a1[2];
        v15 = v14[1];
        v16 = 0xEF7BDEF7BDEF7BDFLL * ((v15 - *v14) >> 4);
        if (v16 > *((unsigned int *)a1 + 8))
        {
          std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<double>,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(*v14, v15, (uint64_t)v34, v16);
          v17 = a1[2];
          v18 = *(_QWORD *)(v17 + 8);
          v19 = v18 - 496;
          std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100](v18 - 464);
          *(_QWORD *)(v17 + 8) = v19;
        }
      }
    }
  }
  v20 = v7 + 496 * a2;
  v21 = v20 + 32;
  if (*(_BYTE *)(v20 + 448))
  {
    v22 = (_QWORD *)(v6 + 304);
    geom::cluster<double>::deinit(v21, v22, a3, a4);
    geom::cluster<double>::deinit(v21 + 208, v22, v23, v24);
  }
  v25 = *(_QWORD *)(a1[1] + 8);
  v26 = *(_OWORD *)(v25 - 496);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v25 - 480);
  *(_OWORD *)v8 = v26;
  std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(v21, v25 - 464);
  v27 = v7 + 496 * a2;
  v28 = *(unsigned __int8 *)(v27 + 480);
  if (v28 == *(unsigned __int8 *)(v25 - 16))
  {
    if (*(_BYTE *)(v27 + 480))
    {
      *v9 = *(_QWORD *)(v25 - 32);
      *(_QWORD *)(v7 + 496 * a2 + 472) = *(_QWORD *)(v25 - 24);
    }
  }
  else
  {
    v29 = (_BYTE *)(v27 + 480);
    if (v28)
    {
      *v29 = 0;
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)(v25 - 32);
      *v29 = 1;
    }
  }
  v30 = a1[1];
  v31 = *(_QWORD *)(v30 + 8);
  v32 = v31 - 496;
  result = std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100](v31 - 464);
  *(_QWORD *)(v30 + 8) = v32;
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  if (*(_BYTE *)(a1 + 288))
  {
    v5 = (void **)(a1 + 256);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v2 = *(void **)(a1 + 232);
    if (v2)
    {
      *(_QWORD *)(a1 + 240) = v2;
      operator delete(v2);
    }
    std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](a1 + 144);
    v5 = (void **)(a1 + 112);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v3 = *(void **)(a1 + 88);
    if (v3)
    {
      *(_QWORD *)(a1 + 96) = v3;
      operator delete(v3);
    }
    std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](a1);
  }
  return a1;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<float> &,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[304];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a4 < 2)
    return result;
  v5 = result;
  v6 = (unint64_t)(a4 - 2) >> 1;
  if (*(_BYTE *)(a2 - 8))
  {
    if (!*(_BYTE *)(result + 336 * v6 + 328) || *(float *)(result + 336 * v6 + 324) >= *(float *)(a2 - 12))
      return result;
  }
  v7 = a2 - 336;
  v15 = *(_DWORD *)(a2 - 328);
  v14 = *(_QWORD *)(a2 - 336);
  v16[0] = 0;
  v16[288] = 0;
  std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)v16, a2 - 320);
  v8 = *(_QWORD *)(a2 - 16);
  v18 = *(_DWORD *)(a2 - 8);
  v17 = v8;
  while (1)
  {
    v9 = v6;
    v10 = v5 + 336 * v6;
    v11 = *(_QWORD *)v10;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(v10 + 8);
    *(_QWORD *)v7 = v11;
    std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(v7 + 16, v10 + 16);
    v12 = (_DWORD *)(v10 + 320);
    if (*(unsigned __int8 *)(v7 + 328) == *(unsigned __int8 *)(v10 + 328))
    {
      if (*(_BYTE *)(v7 + 328))
      {
        *(_DWORD *)(v7 + 320) = *v12;
        *(_DWORD *)(v7 + 324) = *(_DWORD *)(v5 + 336 * v6 + 324);
        if (!v6)
          break;
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (*(_BYTE *)(v7 + 328))
    {
      *(_BYTE *)(v7 + 328) = 0;
LABEL_12:
      if (!v6)
        break;
      goto LABEL_13;
    }
    *(_QWORD *)(v7 + 320) = *(_QWORD *)v12;
    *(_BYTE *)(v7 + 328) = 1;
    if (!v6)
      break;
LABEL_13:
    v6 = (v6 - 1) >> 1;
    v7 = v10;
    if ((_BYTE)v18)
    {
      if (!*(_BYTE *)(v5 + 336 * v6 + 328))
        break;
      v7 = v10;
      if (*(float *)(v5 + 336 * v6 + 324) >= *((float *)&v17 + 1))
        break;
    }
  }
  v13 = (_BYTE *)(v10 + 328);
  *(_DWORD *)(v10 + 8) = v15;
  *(_QWORD *)v10 = v14;
  std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(v10 + 16, (uint64_t)v16);
  if (*(unsigned __int8 *)(v10 + 328) == v18)
  {
    if (*(_BYTE *)(v10 + 328))
    {
      *v12 = v17;
      *(_DWORD *)(v5 + 336 * v9 + 324) = HIDWORD(v17);
    }
  }
  else if (*(_BYTE *)(v10 + 328))
  {
    *v13 = 0;
  }
  else
  {
    *(_QWORD *)v12 = v17;
    *v13 = 1;
  }
  return std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
}

void std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a2 + 288))
  {
    std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](a1, a2);
    std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](v4 + 144, a2 + 144);
    *(_BYTE *)(a1 + 288) = 1;
  }
}

__n128 std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(_OWORD *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  result = *(__n128 *)(a2 + 112);
  *(__n128 *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return result;
}

uint64_t std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<float>,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[304];
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
  {
    v7 = result;
    v15 = *(_DWORD *)(result + 8);
    v14 = *(_QWORD *)result;
    v16[0] = 0;
    v16[288] = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)v16, result + 16);
    v8 = *(_QWORD *)(v7 + 320);
    v18 = *(_DWORD *)(v7 + 328);
    v17 = v8;
    v9 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<float> &,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>((uint64_t *)v7, a3, a4);
    v10 = (uint64_t *)(a2 - 336);
    v11 = (uint64_t)(v9 + 2);
    if ((uint64_t *)(a2 - 336) == v9)
    {
      *((_DWORD *)v9 + 2) = v15;
      *v9 = v14;
      std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(v11, (uint64_t)v16);
      if (*((unsigned __int8 *)v9 + 328) == v18)
      {
        if (*((_BYTE *)v9 + 328))
          v9[40] = v17;
      }
      else if (*((_BYTE *)v9 + 328))
      {
        *((_BYTE *)v9 + 328) = 0;
      }
      else
      {
        v9[40] = v17;
        *((_BYTE *)v9 + 328) = 1;
      }
    }
    else
    {
      v12 = *v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 - 328);
      *v9 = v12;
      std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(v11, a2 - 320);
      if (*((unsigned __int8 *)v9 + 328) == *(unsigned __int8 *)(a2 - 8))
      {
        if (*((_BYTE *)v9 + 328))
        {
          *((_DWORD *)v9 + 80) = *(_DWORD *)(a2 - 16);
          *((_DWORD *)v9 + 81) = *(_DWORD *)(a2 - 12);
        }
      }
      else if (*((_BYTE *)v9 + 328))
      {
        *((_BYTE *)v9 + 328) = 0;
      }
      else
      {
        v9[40] = *(_QWORD *)(a2 - 16);
        *((_BYTE *)v9 + 328) = 1;
      }
      v13 = (uint64_t)(v9 + 42);
      *(_DWORD *)(a2 - 328) = v15;
      *v10 = v14;
      std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(a2 - 320, (uint64_t)v16);
      if (*(unsigned __int8 *)(a2 - 8) == v18)
      {
        if (*(_BYTE *)(a2 - 8))
          *(_QWORD *)(a2 - 16) = v17;
      }
      else if (*(_BYTE *)(a2 - 8))
      {
        *(_BYTE *)(a2 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(a2 - 16) = v17;
        *(_BYTE *)(a2 - 8) = 1;
      }
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<float> &,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(v7, v13, a3, 0xCF3CF3CF3CF3CF3DLL * ((v13 - v7) >> 4));
    }
    return std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
  }
  return result;
}

uint64_t *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<float> &,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 42 * v5 + 42;
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v11 < a3
      && (!*((_BYTE *)a1 + 664) || LOBYTE(v8[42 * v9 + 41]) && *((float *)&v8[42 * v9 + 40] + 1) < *((float *)a1 + 165)))
    {
      a1 += 42;
      v5 = v11;
    }
    v12 = *a1;
    *((_DWORD *)v8 + 2) = *((_DWORD *)a1 + 2);
    *v8 = v12;
    std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)(v8 + 2), (uint64_t)(a1 + 2));
    if (*((unsigned __int8 *)v8 + 328) == *((unsigned __int8 *)a1 + 328))
    {
      if (*((_BYTE *)v8 + 328))
      {
        *((_DWORD *)v8 + 80) = *((_DWORD *)a1 + 80);
        *((_DWORD *)v8 + 81) = *((_DWORD *)a1 + 81);
      }
    }
    else if (*((_BYTE *)v8 + 328))
    {
      *((_BYTE *)v8 + 328) = 0;
    }
    else
    {
      v8[40] = a1[40];
      *((_BYTE *)v8 + 328) = 1;
    }
  }
  while (v5 <= v7);
  return a1;
}

void std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 288) == *(unsigned __int8 *)(a2 + 288))
  {
    if (*(_BYTE *)(a1 + 288))
      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<geom::cluster<float>,geom::cluster<float>>,std::tuple<geom::cluster<float>,geom::cluster<float>>,geom::cluster<float>,geom::cluster<float>,0ul,1ul>(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 288))
  {
    std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::reset[abi:nn180100](a1);
  }
  else
  {
    std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](a1, a2);
    std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](a1 + 144, a2 + 144);
    *(_BYTE *)(a1 + 288) = 1;
  }
}

uint64_t std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::reset[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void **v5;

  if (*(_BYTE *)(result + 288))
  {
    v1 = result;
    v2 = result + 144;
    v5 = (void **)(result + 256);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v3 = *(void **)(v1 + 232);
    if (v3)
    {
      *(_QWORD *)(v1 + 240) = v3;
      operator delete(v3);
    }
    std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v2);
    v5 = (void **)(v1 + 112);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v4 = *(void **)(v1 + 88);
    if (v4)
    {
      *(_QWORD *)(v1 + 96) = v4;
      operator delete(v4);
    }
    result = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v1);
    *(_BYTE *)(v1 + 288) = 0;
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:nn180100]<std::tuple<geom::cluster<float>,geom::cluster<float>>,std::tuple<geom::cluster<float>,geom::cluster<float>>,geom::cluster<float>,geom::cluster<float>,0ul,1ul>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](a1, (__int128 *)a2);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 32) = v6;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 88, (__n128 *)(a2 + 88));
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(a1 + 112));
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](a1 + 144, (__int128 *)(a2 + 144));
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 192);
  v7 = *(_OWORD *)(a2 + 208);
  v9 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 208) = v7;
  *(_OWORD *)(a1 + 176) = v9;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 232, (__n128 *)(a2 + 232));
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(a1 + 256));
  result = *(__n128 *)(a2 + 256);
  *(__n128 *)(a1 + 256) = result;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  if (*(_BYTE *)(a1 + 416))
  {
    v5 = (void **)(a1 + 376);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v2 = *(void **)(a1 + 352);
    if (v2)
    {
      *(_QWORD *)(a1 + 360) = v2;
      operator delete(v2);
    }
    std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](a1 + 208);
    v5 = (void **)(a1 + 168);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v3 = *(void **)(a1 + 144);
    if (v3)
    {
      *(_QWORD *)(a1 + 152) = v3;
      operator delete(v3);
    }
    std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](a1);
  }
  return a1;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<double> &,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _BYTE *v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[432];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a4 < 2)
    return result;
  v5 = result;
  v6 = (unint64_t)(a4 - 2) >> 1;
  if (*(_BYTE *)(a2 - 16))
  {
    if (!*(_BYTE *)(result + 496 * v6 + 480) || *(double *)(result + 496 * v6 + 472) >= *(double *)(a2 - 24))
      return result;
  }
  v7 = a2 - 496;
  v15 = *(_QWORD *)(a2 - 480);
  v14 = *(_OWORD *)(a2 - 496);
  v16[0] = 0;
  v16[416] = 0;
  std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)v16, a2 - 464);
  v8 = *(_OWORD *)(a2 - 32);
  v18 = *(_QWORD *)(a2 - 16);
  v17 = v8;
  while (1)
  {
    v9 = v6;
    v10 = v5 + 496 * v6;
    v11 = *(_OWORD *)v10;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v10 + 16);
    *(_OWORD *)v7 = v11;
    std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(v7 + 32, v10 + 32);
    v12 = (_QWORD *)(v10 + 464);
    if (*(unsigned __int8 *)(v7 + 480) == *(unsigned __int8 *)(v10 + 480))
    {
      if (*(_BYTE *)(v7 + 480))
      {
        *(_QWORD *)(v7 + 464) = *v12;
        *(_QWORD *)(v7 + 472) = *(_QWORD *)(v5 + 496 * v6 + 472);
        if (!v6)
          break;
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    if (*(_BYTE *)(v7 + 480))
    {
      *(_BYTE *)(v7 + 480) = 0;
LABEL_12:
      if (!v6)
        break;
      goto LABEL_13;
    }
    *(_OWORD *)(v7 + 464) = *(_OWORD *)v12;
    *(_BYTE *)(v7 + 480) = 1;
    if (!v6)
      break;
LABEL_13:
    v6 = (v6 - 1) >> 1;
    v7 = v10;
    if ((_BYTE)v18)
    {
      if (!*(_BYTE *)(v5 + 496 * v6 + 480))
        break;
      v7 = v10;
      if (*(double *)(v5 + 496 * v6 + 472) >= *((double *)&v17 + 1))
        break;
    }
  }
  v13 = (_BYTE *)(v10 + 480);
  *(_QWORD *)(v10 + 16) = v15;
  *(_OWORD *)v10 = v14;
  std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(v10 + 32, (uint64_t)v16);
  if (*(unsigned __int8 *)(v10 + 480) == v18)
  {
    if (*(_BYTE *)(v10 + 480))
    {
      *v12 = v17;
      *(_QWORD *)(v5 + 496 * v9 + 472) = *((_QWORD *)&v17 + 1);
    }
  }
  else if (*(_BYTE *)(v10 + 480))
  {
    *v13 = 0;
  }
  else
  {
    *(_OWORD *)v12 = v17;
    *v13 = 1;
  }
  return std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
}

void std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a2 + 416))
  {
    std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](a1, a2);
    std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](v4 + 208, a2 + 208);
    *(_BYTE *)(a1 + 416) = 1;
  }
}

__n128 std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  result = *(__n128 *)(a2 + 168);
  *(__n128 *)(a1 + 168) = result;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  return result;
}

uint64_t std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<double>,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[432];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
  {
    v7 = result;
    v16 = *(_QWORD *)(result + 16);
    v15 = *(_OWORD *)result;
    v17[0] = 0;
    v17[416] = 0;
    std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)v17, result + 32);
    v8 = *(_OWORD *)(v7 + 464);
    v19 = *(_QWORD *)(v7 + 480);
    v18 = v8;
    v9 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<double> &,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>((__int128 *)v7, a3, a4);
    v10 = (__int128 *)(a2 - 496);
    v11 = (uint64_t)(v9 + 2);
    if ((__int128 *)(a2 - 496) == v9)
    {
      *((_QWORD *)v9 + 2) = v16;
      *v9 = v15;
      std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(v11, (uint64_t)v17);
      if (*((unsigned __int8 *)v9 + 480) == v19)
      {
        if (*((_BYTE *)v9 + 480))
          v9[29] = v18;
      }
      else if (*((_BYTE *)v9 + 480))
      {
        *((_BYTE *)v9 + 480) = 0;
      }
      else
      {
        v9[29] = v18;
        *((_BYTE *)v9 + 480) = 1;
      }
    }
    else
    {
      v12 = *v10;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 - 480);
      *v9 = v12;
      std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(v11, a2 - 464);
      v13 = (__int128 *)(a2 - 32);
      if (*((unsigned __int8 *)v9 + 480) == *(unsigned __int8 *)(a2 - 16))
      {
        if (*((_BYTE *)v9 + 480))
        {
          *((_QWORD *)v9 + 58) = *(_QWORD *)(a2 - 32);
          *((_QWORD *)v9 + 59) = *(_QWORD *)(a2 - 24);
        }
      }
      else if (*((_BYTE *)v9 + 480))
      {
        *((_BYTE *)v9 + 480) = 0;
      }
      else
      {
        v9[29] = *v13;
        *((_BYTE *)v9 + 480) = 1;
      }
      v14 = (uint64_t)(v9 + 31);
      *(_QWORD *)(a2 - 480) = v16;
      *v10 = v15;
      std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(a2 - 464, (uint64_t)v17);
      if (*(unsigned __int8 *)(a2 - 16) == v19)
      {
        if (*(_BYTE *)(a2 - 16))
          *(_OWORD *)(a2 - 32) = v18;
      }
      else if (*(_BYTE *)(a2 - 16))
      {
        *(_BYTE *)(a2 - 16) = 0;
      }
      else
      {
        *v13 = v18;
        *(_BYTE *)(a2 - 16) = 1;
      }
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<double> &,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(v7, v14, a3, 0xEF7BDEF7BDEF7BDFLL * ((v14 - v7) >> 4));
    }
    return std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v17);
  }
  return result;
}

__int128 *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::recursive_cut_candidate_heap_comparator<double> &,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    v9 = v5 + 1;
    a1 += 31 * v5 + 31;
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v11 < a3
      && (!*((_BYTE *)a1 + 976) || LOBYTE(v8[31 * v9 + 30])
                                && *((double *)&v8[31 * v9 + 29] + 1) < *((double *)a1 + 121)))
    {
      a1 += 31;
      v5 = v11;
    }
    v12 = *a1;
    *((_QWORD *)v8 + 2) = *((_QWORD *)a1 + 2);
    *v8 = v12;
    std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)(v8 + 2), (uint64_t)(a1 + 2));
    if (*((unsigned __int8 *)v8 + 480) == *((unsigned __int8 *)a1 + 480))
    {
      if (*((_BYTE *)v8 + 480))
      {
        *((_QWORD *)v8 + 58) = *((_QWORD *)a1 + 58);
        *((_QWORD *)v8 + 59) = *((_QWORD *)a1 + 59);
      }
    }
    else if (*((_BYTE *)v8 + 480))
    {
      *((_BYTE *)v8 + 480) = 0;
    }
    else
    {
      v8[29] = a1[29];
      *((_BYTE *)v8 + 480) = 1;
    }
  }
  while (v5 <= v7);
  return a1;
}

void std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 416) == *(unsigned __int8 *)(a2 + 416))
  {
    if (*(_BYTE *)(a1 + 416))
      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<geom::cluster<double>,geom::cluster<double>>,std::tuple<geom::cluster<double>,geom::cluster<double>>,geom::cluster<double>,geom::cluster<double>,0ul,1ul>(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 416))
  {
    std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::reset[abi:nn180100](a1);
  }
  else
  {
    std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](a1, a2);
    std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](a1 + 208, a2 + 208);
    *(_BYTE *)(a1 + 416) = 1;
  }
}

uint64_t std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::reset[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void **v5;

  if (*(_BYTE *)(result + 416))
  {
    v1 = result;
    v2 = result + 208;
    v5 = (void **)(result + 376);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v3 = *(void **)(v1 + 352);
    if (v3)
    {
      *(_QWORD *)(v1 + 360) = v3;
      operator delete(v3);
    }
    std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v2);
    v5 = (void **)(v1 + 168);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v4 = *(void **)(v1 + 144);
    if (v4)
    {
      *(_QWORD *)(v1 + 152) = v4;
      operator delete(v4);
    }
    result = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v1);
    *(_BYTE *)(v1 + 416) = 0;
  }
  return result;
}

void std::__memberwise_forward_assign[abi:nn180100]<std::tuple<geom::cluster<double>,geom::cluster<double>>,std::tuple<geom::cluster<double>,geom::cluster<double>>,geom::cluster<double>,geom::cluster<double>,0ul,1ul>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](a1, (__int128 *)a2);
  v4 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 96) = v8;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 144, (__n128 *)(a2 + 144));
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](a1 + 208, (__int128 *)(a2 + 208));
  v10 = *(_OWORD *)(a2 + 272);
  v12 = *(_OWORD *)(a2 + 224);
  v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v10;
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 240) = v11;
  v13 = *(_OWORD *)(a2 + 336);
  v15 = *(_OWORD *)(a2 + 288);
  v14 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 288) = v15;
  *(_OWORD *)(a1 + 304) = v14;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 352, (__n128 *)(a2 + 352));
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((void **)(a1 + 376));
  v16 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v16;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_WORD *)(a1 + 400) = *(_WORD *)(a2 + 400);
}

_QWORD *std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<float>::impl::split_clusters_automatically(geom::acd<float>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(_QWORD *result, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  float v29;
  float v30;
  unsigned int v31;
  uint64_t v32;
  float v33;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38[15];

  v8 = a3 - 2;
  if (a3 >= 2)
  {
    v38[1] = v7;
    v38[2] = v6;
    v38[13] = v4;
    v38[14] = v5;
    v9 = a4;
    v10 = result;
    v11 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= ((char *)a4 - (char *)result) >> 2)
    {
      v12 = a3;
      v14 = ((char *)a4 - (char *)result) >> 1;
      v15 = v14 | 1;
      v16 = (unsigned int *)result + (v14 | 1);
      v17 = v14 + 2;
      if (v14 + 2 < a3)
      {
        v18 = *v16;
        v36 = v16[1];
        v37 = v18;
        v19 = *a2 + 112;
        v38[0] = &v37;
        v20 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 24);
        v38[0] = &v36;
        v12 = a3;
        if (v20 < *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, &v36, (uint64_t)&std::piecewise_construct, v38)[3]+ 24))
        {
          ++v16;
          v15 = v17;
        }
      }
      v21 = *v16;
      v36 = *v9;
      v37 = v21;
      v22 = *a2 + 112;
      v38[0] = &v37;
      v23 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v22, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 24);
      v38[0] = &v36;
      result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v22, &v36, (uint64_t)&std::piecewise_construct, v38);
      if (v23 >= *(float *)(result[3] + 24))
      {
        v35 = *v9;
        do
        {
          v24 = v9;
          v9 = v16;
          *v24 = *v16;
          if (v11 < v15)
            break;
          v25 = (2 * v15) | 1;
          v16 = (unsigned int *)v10 + v25;
          v26 = 2 * v15 + 2;
          if (v26 < v12)
          {
            v27 = *v16;
            v36 = v16[1];
            v37 = v27;
            v28 = *a2 + 112;
            v38[0] = &v37;
            v29 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v28, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 24);
            v38[0] = &v36;
            v30 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v28, &v36, (uint64_t)&std::piecewise_construct, v38)[3]+ 24);
            if (v29 < v30)
              ++v16;
            v12 = a3;
            if (v29 < v30)
              v25 = v26;
          }
          v31 = *v16;
          v36 = v35;
          v37 = v31;
          v32 = *a2 + 112;
          v38[0] = &v37;
          v33 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v32, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 24);
          v38[0] = &v36;
          result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v32, &v36, (uint64_t)&std::piecewise_construct, v38);
          v15 = v25;
        }
        while (v33 >= *(float *)(result[3] + 24));
        *v9 = v35;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<float>::impl::split_clusters_automatically(geom::acd<float>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(_DWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    a1 += v6 + 1;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v12 = *a1;
      v16 = a1[1];
      v17 = v12;
      v13 = *a2 + 112;
      v18 = &v17;
      v14 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v13, &v17, (uint64_t)&std::piecewise_construct, &v18)[3]+ 24);
      v18 = &v16;
      if (v14 < *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v13, &v16, (uint64_t)&std::piecewise_construct, &v18)[3]+ 24))
      {
        ++a1;
        v6 = v11;
      }
    }
    *v9 = *a1;
  }
  while (v6 <= v8);
  return a1;
}

_QWORD *std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<float>::impl::split_clusters_automatically(geom::acd<float>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  _QWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24[15];

  v8 = a4 - 2;
  if (a4 >= 2)
  {
    v24[1] = v7;
    v24[2] = v6;
    v24[13] = v4;
    v24[14] = v5;
    v10 = result;
    v11 = v8 >> 1;
    v12 = (unsigned int *)result + (v8 >> 1);
    v13 = *v12;
    v14 = (unsigned int *)(a2 - 4);
    v22 = *(_DWORD *)(a2 - 4);
    v23 = v13;
    v15 = *a3 + 112;
    v24[0] = &v23;
    v16 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v15, &v23, (uint64_t)&std::piecewise_construct, v24)[3]+ 24);
    v24[0] = &v22;
    result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v15, &v22, (uint64_t)&std::piecewise_construct, v24);
    if (v16 < *(float *)(result[3] + 24))
    {
      v17 = *v14;
      do
      {
        v18 = v12;
        *v14 = *v12;
        if (!v11)
          break;
        v11 = (v11 - 1) >> 1;
        v12 = (unsigned int *)v10 + v11;
        v19 = *v12;
        v22 = v17;
        v23 = v19;
        v20 = *a3 + 112;
        v24[0] = &v23;
        v21 = *(float *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v20, &v23, (uint64_t)&std::piecewise_construct, v24)[3]+ 24);
        v24[0] = &v22;
        result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v20, &v22, (uint64_t)&std::piecewise_construct, v24);
        v14 = v18;
      }
      while (v21 < *(float *)(result[3] + 24));
      *v18 = v17;
    }
  }
  return result;
}

void std::vector<geom::cut_plane_search_candidate<float>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 336;
        std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v4 - 320));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<geom::cut_plane_search_candidate<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 336);
      v10 = v6 + v7 - 336;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v4 + v7 - 328);
      *(_QWORD *)v10 = v9;
      v11 = (_BYTE *)(v6 + v7 - 320);
      *v11 = 0;
      *(_BYTE *)(v6 + v7 - 32) = 0;
      std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>>((uint64_t)v11, v4 + v7 - 320);
      v12 = *(_QWORD *)(v4 + v7 - 16);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(v4 + v7 - 8);
      *(_QWORD *)(v8 - 16) = v12;
      v7 -= 336;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cut_plane_search_candidate<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC30C30C30C30C4)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(336 * a2);
}

uint64_t std::__split_buffer<geom::cut_plane_search_candidate<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 336;
    std::__optional_destruct_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::~__optional_destruct_base[abi:nn180100](i - 320);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__optional_storage_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::tuple<geom::cluster<float>,geom::cluster<float>>,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 288))
  {
    v3 = result;
    v4 = std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](result, a2);
    result = std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](v4 + 144, a2 + 144);
    *(_BYTE *)(v3 + 288) = 1;
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 32) = v7;
  std::vector<double>::vector((_QWORD *)(a1 + 88), a2 + 88);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__init_with_size[abi:nn180100]<std::shared_ptr<geom::convex_mesh<float>>*,std::shared_ptr<geom::convex_mesh<float>>*>((char *)(a1 + 112), *(_QWORD **)(a2 + 112), *(_QWORD **)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 4);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

char *std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__init_with_size[abi:nn180100]<std::shared_ptr<geom::convex_mesh<float>>*,std::shared_ptr<geom::convex_mesh<float>>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = a2[1];
      *v7 = *a2;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIfE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_0(uint64_t a1, unint64_t a2, double a3, __n128 a4, double a5, double a6, double a7, double a8, float32x4_t a9, float32x4_t a10)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float32x4_t *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v10 = *(_QWORD **)(a1 + 32);
  v11 = (_QWORD *)v10[5];
  v12 = v11[14];
  v13 = v11[15] - v12;
  v14 = v10[7];
  v15 = v10[8];
  v16 = (v14 + (v13 >> 4) - 1) / v14;
  v18 = v11 + 11;
  v17 = v11[11];
  v19 = v18[1] - v17;
  v20 = (v15 + (v19 >> 3) - 1) / v15 + v16;
  v21 = a2 / v20;
  v22 = a2 % v20;
  v23 = (float32x4_t *)(v10[3] + 32 * v21);
  v24 = v22 >= v16;
  v25 = v22 - v16;
  if (v24)
  {
    v29 = v19 >> 3;
    if (v25 * v15 + v15 < v19 >> 3)
      v29 = v25 * v15 + v15;
    geom::cluster_parallel_clipper<float>::interior_component_work_item((uint64_t)v10, *v10 + 240 * a2, v23, (uint64_t *)(v17 + 8 * v25 * v15), v29 - v25 * v15, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else
  {
    v26 = v13 >> 4;
    v27 = v22 * v14;
    v28 = v22 * v14 + v14;
    if (v28 >= v26)
      v28 = v26;
    geom::cluster_parallel_clipper<float>::boundary_component_work_item((uint64_t)v10, *v10 + 240 * a2, v23, (__int128 *)(v12 + 16 * v27), v28 - v27);
  }
}

void ___ZN4geom14dispatch_applyIZNS_3acdIfE4impl29evaluate_candidate_cut_planesINSt3__111__wrap_iterIPNS_26cut_plane_search_candidateIfEEEEEEvT_SB_RKNS_7clusterIfEERNS_24cluster_parallel_clipperIfEEEUlmE_Lb1EEEvmP16dispatch_queue_sSB__block_invoke(uint64_t a1, uint64_t a2)
{
  geom::acd<float>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(std::__wrap_iter<geom::cut_plane_search_candidate<float> *>,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>,geom::cluster<float> const&,geom::cluster_parallel_clipper<float> &)::{lambda(unsigned long)#1}::operator()(a1 + 32, a2);
}

void geom::acd<float>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<float> *>>(std::__wrap_iter<geom::cut_plane_search_candidate<float> *>,std::__wrap_iter<geom::cut_plane_search_candidate<float> *>,geom::cluster<float> const&,geom::cluster_parallel_clipper<float> &)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  void **v20[2];
  __int128 v21;
  int32x4_t v22;
  __int128 v23;
  __int128 v24;
  void *v25[2];
  __int128 v26;
  _OWORD v27[2];
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  int32x4_t v31;
  __int128 v32;
  __int128 v33;
  void *v34[2];
  __int128 v35;
  _OWORD v36[2];
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  int32x4_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[3];
  __int16 v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  int32x4_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *__p;
  void *v57;
  uint64_t v58;
  _QWORD v59[3];
  __int16 v60;
  void **v61;

  v4 = *(float **)a1;
  v5 = **(_QWORD **)(a1 + 24);
  v34[0] = 0;
  v31 = vdupq_n_s32(0x7F800000u);
  *(int32x2_t *)&v30 = vdup_n_s32(0x7FC00000u);
  *((_QWORD *)&v30 + 1) = 2143289344;
  *(_QWORD *)&v6 = 0x7F0000007FLL;
  *((_QWORD *)&v6 + 1) = 0x7F0000007FLL;
  v32 = v6;
  v33 = 0u;
  v25[0] = 0;
  v22 = v31;
  *(_QWORD *)&v21 = v30;
  *((_QWORD *)&v21 + 1) = 2143289344;
  v23 = v6;
  v24 = 0u;
  v37 = 0;
  v38 = 0;
  v28 = 0;
  v29 = 0;
  v41 = v6;
  v42 = 0u;
  v39 = v30;
  v40 = v31;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v34[1] = 0;
  v35 = 0uLL;
  memset(v36, 0, sizeof(v36));
  memset(v47, 0, sizeof(v47));
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v53 = v6;
  v54 = 0u;
  v51 = v21;
  v52 = v31;
  v55 = 0;
  __p = 0;
  v57 = 0;
  v58 = 0;
  v25[1] = 0;
  v26 = 0uLL;
  memset(v27, 0, sizeof(v27));
  memset(v59, 0, sizeof(v59));
  v7 = v5 + 336 * a2 + 16;
  v60 = 0;
  std::optional<std::tuple<geom::cluster<float>,geom::cluster<float>>>::operator=[abi:nn180100]<std::tuple<geom::cluster<float>,geom::cluster<float>>,void>(v7, (uint64_t)&v37);
  v61 = (void **)v59;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v61);
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
  v8 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v61 = (void **)v47;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v61);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v11 = v38;
  if (v38)
  {
    v12 = (unint64_t *)&v38->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v61 = (void **)v27;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v61);
  v20[0] = (void **)v36;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](v20);
  if (v34[1])
  {
    *(void **)&v35 = v34[1];
    operator delete(v34[1]);
  }
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  geom::cluster_parallel_clipper<float>::get_split_clusters(*(_QWORD **)(a1 + 8), v7, v7 + 144, a2);
  v17 = geom::acd<float>::impl::cut_plane_cost(v4, *(float **)(a1 + 16), v7, v7 + 144);
  v19 = v5 + 336 * a2;
  if (!*(_BYTE *)(v19 + 328))
    *(_BYTE *)(v19 + 328) = 1;
  *(float *)(v19 + 320) = v17;
  *(_DWORD *)(v19 + 324) = v18;
}

uint64_t std::optional<std::tuple<geom::cluster<float>,geom::cluster<float>>>::operator=[abi:nn180100]<std::tuple<geom::cluster<float>,geom::cluster<float>>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 288))
  {
    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<geom::cluster<float>,geom::cluster<float>>,std::tuple<geom::cluster<float>,geom::cluster<float>>,geom::cluster<float>,geom::cluster<float>,0ul,1ul>(a1, a2);
  }
  else
  {
    std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](a1, a2);
    std::__tuple_leaf<0ul,geom::cluster<float>,false>::__tuple_leaf[abi:nn180100](a1 + 144, a2 + 144);
    *(_BYTE *)(a1 + 288) = 1;
  }
  return a1;
}

_QWORD *std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<double>::impl::split_clusters_automatically(geom::acd<double>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(_QWORD *result, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  double v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  double v33;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD *v38[15];

  v8 = a3 - 2;
  if (a3 >= 2)
  {
    v38[1] = v7;
    v38[2] = v6;
    v38[13] = v4;
    v38[14] = v5;
    v9 = a4;
    v10 = result;
    v11 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= ((char *)a4 - (char *)result) >> 2)
    {
      v12 = a3;
      v14 = ((char *)a4 - (char *)result) >> 1;
      v15 = v14 | 1;
      v16 = (unsigned int *)result + (v14 | 1);
      v17 = v14 + 2;
      if (v14 + 2 < a3)
      {
        v18 = *v16;
        v36 = v16[1];
        v37 = v18;
        v19 = *a2 + 144;
        v38[0] = &v37;
        v20 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 32);
        v38[0] = &v36;
        v12 = a3;
        if (v20 < *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, &v36, (uint64_t)&std::piecewise_construct, v38)[3]+ 32))
        {
          ++v16;
          v15 = v17;
        }
      }
      v21 = *v16;
      v36 = *v9;
      v37 = v21;
      v22 = *a2 + 144;
      v38[0] = &v37;
      v23 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v22, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 32);
      v38[0] = &v36;
      result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v22, &v36, (uint64_t)&std::piecewise_construct, v38);
      if (v23 >= *(double *)(result[3] + 32))
      {
        v35 = *v9;
        do
        {
          v24 = v9;
          v9 = v16;
          *v24 = *v16;
          if (v11 < v15)
            break;
          v25 = (2 * v15) | 1;
          v16 = (unsigned int *)v10 + v25;
          v26 = 2 * v15 + 2;
          if (v26 < v12)
          {
            v27 = *v16;
            v36 = v16[1];
            v37 = v27;
            v28 = *a2 + 144;
            v38[0] = &v37;
            v29 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v28, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 32);
            v38[0] = &v36;
            v30 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v28, &v36, (uint64_t)&std::piecewise_construct, v38)[3]+ 32);
            if (v29 < v30)
              ++v16;
            v12 = a3;
            if (v29 < v30)
              v25 = v26;
          }
          v31 = *v16;
          v36 = v35;
          v37 = v31;
          v32 = *a2 + 144;
          v38[0] = &v37;
          v33 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v32, &v37, (uint64_t)&std::piecewise_construct, v38)[3]+ 32);
          v38[0] = &v36;
          result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v32, &v36, (uint64_t)&std::piecewise_construct, v38);
          v15 = v25;
        }
        while (v33 >= *(double *)(result[3] + 32));
        *v9 = v35;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<double>::impl::split_clusters_automatically(geom::acd<double>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(_DWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1;
    a1 += v6 + 1;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v12 = *a1;
      v16 = a1[1];
      v17 = v12;
      v13 = *a2 + 144;
      v18 = &v17;
      v14 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v13, &v17, (uint64_t)&std::piecewise_construct, &v18)[3]+ 32);
      v18 = &v16;
      if (v14 < *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v13, &v16, (uint64_t)&std::piecewise_construct, &v18)[3]+ 32))
      {
        ++a1;
        v6 = v11;
      }
    }
    *v9 = *a1;
  }
  while (v6 <= v8);
  return a1;
}

_QWORD *std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::acd<double>::impl::split_clusters_automatically(geom::acd<double>::parameters const&)::{lambda(unsigned int,unsigned int)#1} &,std::__wrap_iter<unsigned int *>>(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  _QWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  double v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24[15];

  v8 = a4 - 2;
  if (a4 >= 2)
  {
    v24[1] = v7;
    v24[2] = v6;
    v24[13] = v4;
    v24[14] = v5;
    v10 = result;
    v11 = v8 >> 1;
    v12 = (unsigned int *)result + (v8 >> 1);
    v13 = *v12;
    v14 = (unsigned int *)(a2 - 4);
    v22 = *(_DWORD *)(a2 - 4);
    v23 = v13;
    v15 = *a3 + 144;
    v24[0] = &v23;
    v16 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v15, &v23, (uint64_t)&std::piecewise_construct, v24)[3]+ 32);
    v24[0] = &v22;
    result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v15, &v22, (uint64_t)&std::piecewise_construct, v24);
    if (v16 < *(double *)(result[3] + 32))
    {
      v17 = *v14;
      do
      {
        v18 = v12;
        *v14 = *v12;
        if (!v11)
          break;
        v11 = (v11 - 1) >> 1;
        v12 = (unsigned int *)v10 + v11;
        v19 = *v12;
        v22 = v17;
        v23 = v19;
        v20 = *a3 + 144;
        v24[0] = &v23;
        v21 = *(double *)(std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v20, &v23, (uint64_t)&std::piecewise_construct, v24)[3]+ 32);
        v24[0] = &v22;
        result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v20, &v22, (uint64_t)&std::piecewise_construct, v24);
        v14 = v18;
      }
      while (v21 < *(double *)(result[3] + 32));
      *v18 = v17;
    }
  }
  return result;
}

void std::vector<geom::cut_plane_search_candidate<double>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 496;
        std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)(v4 - 464));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<geom::cut_plane_search_candidate<double>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _BYTE *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_OWORD *)(v4 + v7 - 496);
      v10 = v6 + v7 - 496;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v4 + v7 - 480);
      *(_OWORD *)v10 = v9;
      v11 = (_BYTE *)(v6 + v7 - 464);
      *v11 = 0;
      *(_BYTE *)(v6 + v7 - 48) = 0;
      std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_move_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>>((uint64_t)v11, v4 + v7 - 464);
      v12 = *(_OWORD *)(v4 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(v4 + v7 - 16);
      *(_OWORD *)(v8 - 32) = v12;
      v7 -= 496;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cut_plane_search_candidate<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x84210842108422)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(496 * a2);
}

uint64_t std::__split_buffer<geom::cut_plane_search_candidate<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 496;
    std::__optional_destruct_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::~__optional_destruct_base[abi:nn180100](i - 464);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__optional_storage_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false>::__construct_from[abi:nn180100]<std::__optional_copy_base<std::tuple<geom::cluster<double>,geom::cluster<double>>,false> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 416))
  {
    v3 = result;
    v4 = std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](result, a2);
    result = std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](v4 + 208, a2 + 208);
    *(_BYTE *)(v3 + 416) = 1;
  }
  return result;
}

uint64_t std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v10 = *(_OWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  std::vector<double>::vector((_QWORD *)(a1 + 144), a2 + 144);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__init_with_size[abi:nn180100]<std::shared_ptr<geom::convex_mesh<float>>*,std::shared_ptr<geom::convex_mesh<float>>*>((char *)(a1 + 168), *(_QWORD **)(a2 + 168), *(_QWORD **)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 4);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  return a1;
}

void ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIdE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_0(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float64x2_t *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (_QWORD *)v2[5];
  v4 = v3[21];
  v5 = v3[22] - v4;
  v6 = v2[7];
  v7 = v2[8];
  v8 = (v6 + (v5 >> 4) - 1) / v6;
  v10 = v3 + 18;
  v9 = v3[18];
  v11 = v10[1] - v9;
  v12 = (v7 + (v11 >> 3) - 1) / v7 + v8;
  v13 = a2 / v12;
  v14 = a2 % v12;
  v15 = (float64x2_t *)(v2[3] + 48 * v13);
  v16 = v14 >= v8;
  v17 = v14 - v8;
  if (v16)
  {
    v21 = v11 >> 3;
    if (v17 * v7 + v7 < v11 >> 3)
      v21 = v17 * v7 + v7;
    geom::cluster_parallel_clipper<double>::interior_component_work_item((uint64_t)v2, *v2 + 304 * a2, v15, (uint64_t *)(v9 + 8 * v17 * v7), v21 - v17 * v7);
  }
  else
  {
    v18 = v5 >> 4;
    v19 = v14 * v6;
    v20 = v14 * v6 + v6;
    if (v20 >= v18)
      v20 = v18;
    geom::cluster_parallel_clipper<double>::boundary_component_work_item((uint64_t)v2, *v2 + 304 * a2, v15, (float64x2_t **)(v4 + 16 * v19), v20 - v19);
  }
}

void ___ZN4geom14dispatch_applyIZNS_3acdIdE4impl29evaluate_candidate_cut_planesINSt3__111__wrap_iterIPNS_26cut_plane_search_candidateIdEEEEEEvT_SB_RKNS_7clusterIdEERNS_24cluster_parallel_clipperIdEEEUlmE_Lb1EEEvmP16dispatch_queue_sSB__block_invoke(uint64_t a1, uint64_t a2, double a3, double a4, double a5, __n128 a6, double a7, __n128 a8)
{
  geom::acd<double>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(std::__wrap_iter<geom::cut_plane_search_candidate<double> *>,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>,geom::cluster<double> const&,geom::cluster_parallel_clipper<double> &)::{lambda(unsigned long)#1}::operator()(a1 + 32, a2, a3, a4, a5, a6, a7, a8);
}

void geom::acd<double>::impl::evaluate_candidate_cut_planes<std::__wrap_iter<geom::cut_plane_search_candidate<double> *>>(std::__wrap_iter<geom::cut_plane_search_candidate<double> *>,std::__wrap_iter<geom::cut_plane_search_candidate<double> *>,geom::cluster<double> const&,geom::cluster_parallel_clipper<double> &)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, double a3, double a4, double a5, __n128 a6, double a7, __n128 a8)
{
  double *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void **v29;
  std::__shared_weak_count *v30;
  int64x2_t v31;
  __int128 v32;
  int64x2_t v33;
  __n128 v34;
  int64x2_t v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[3];
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  int64x2_t v46;
  __int128 v47;
  int64x2_t v48;
  __n128 v49;
  int64x2_t v50;
  __n128 v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[3];
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  int64x2_t v61;
  __int128 v62;
  int64x2_t v63;
  __n128 v64;
  int64x2_t v65;
  __n128 v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[3];
  __int16 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  int64x2_t v76;
  __int128 v77;
  int64x2_t v78;
  __n128 v79;
  int64x2_t v80;
  __n128 v81;
  __int128 v82;
  __int128 v83;
  void *__p;
  void *v85;
  uint64_t v86;
  _QWORD v87[3];
  __int16 v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v10 = *(double **)a1;
  v11 = **(_QWORD **)(a1 + 24);
  v58 = 0u;
  v52 = 0u;
  v53 = 0u;
  v46 = vdupq_n_s64(0x7FF8000000000000uLL);
  v47 = 0u;
  *(_QWORD *)&v47 = 0x7FF8000000000000;
  a6.n128_u64[0] = 0x7FF0000000000000;
  v48 = vdupq_n_s64(0x7FF0000000000000uLL);
  v49 = a6;
  a8.n128_u64[0] = 0xFFF0000000000000;
  v50 = vdupq_n_s64(0xFFF0000000000000);
  v51 = a8;
  LOWORD(v58) = 0;
  v43 = 0u;
  v38 = 0u;
  v36 = a8;
  v37 = 0u;
  v31 = v46;
  v32 = 0x7FF8000000000000uLL;
  v33 = v48;
  v34 = a6;
  v35 = v50;
  LOWORD(v43) = 0;
  v59 = 0;
  v60 = 0;
  v44 = 0;
  v45 = 0;
  v63 = v48;
  v64 = a6;
  v61 = v46;
  v62 = v47;
  v67 = 0u;
  v68 = 0u;
  v65 = v50;
  v66 = a8;
  v70 = 0;
  v69 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  memset(v57, 0, sizeof(v57));
  v71 = 0;
  memset(v72, 0, sizeof(v72));
  v73 = 0;
  v75 = 0;
  v74 = 0;
  v29 = 0;
  v30 = 0;
  v78 = v48;
  v79 = a6;
  v76 = v46;
  v77 = 0x7FF8000000000000uLL;
  v82 = 0u;
  v83 = 0u;
  v80 = v50;
  v81 = a8;
  v85 = 0;
  __p = 0;
  v39 = 0;
  v40 = 0;
  v86 = 0;
  memset(v87, 0, sizeof(v87));
  v41 = 0;
  memset(v42, 0, sizeof(v42));
  v12 = v11 + 496 * a2 + 32;
  v88 = 0;
  std::optional<std::tuple<geom::cluster<double>,geom::cluster<double>>>::operator=[abi:nn180100]<std::tuple<geom::cluster<double>,geom::cluster<double>>,void>(v12, (uint64_t)&v59);
  v28 = (void **)v87;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v28);
  if (__p)
  {
    v85 = __p;
    operator delete(__p);
  }
  v13 = v75;
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v28 = (void **)v72;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v28);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  v16 = v60;
  if (v60)
  {
    v17 = (unint64_t *)&v60->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v28 = (void **)v42;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v28);
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29 = (void **)v57;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v29);
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  v22 = v45;
  if (v45)
  {
    v23 = (unint64_t *)&v45->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  geom::cluster_parallel_clipper<double>::get_split_clusters(*(_QWORD **)(a1 + 8), v12, v12 + 208, a2);
  v25 = geom::acd<double>::impl::cut_plane_cost(v10, *(double **)(a1 + 16), v12, v12 + 208);
  v27 = v11 + 496 * a2;
  if (!*(_BYTE *)(v27 + 480))
    *(_BYTE *)(v27 + 480) = 1;
  *(double *)(v27 + 464) = v25;
  *(_QWORD *)(v27 + 472) = v26;
}

uint64_t std::optional<std::tuple<geom::cluster<double>,geom::cluster<double>>>::operator=[abi:nn180100]<std::tuple<geom::cluster<double>,geom::cluster<double>>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 416))
  {
    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<geom::cluster<double>,geom::cluster<double>>,std::tuple<geom::cluster<double>,geom::cluster<double>>,geom::cluster<double>,geom::cluster<double>,0ul,1ul>(a1, a2);
  }
  else
  {
    std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](a1, a2);
    std::__tuple_leaf<0ul,geom::cluster<double>,false>::__tuple_leaf[abi:nn180100](a1 + 208, a2 + 208);
    *(_BYTE *)(a1 + 416) = 1;
  }
  return a1;
}

_QWORD *geom_create_collection_f_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_f()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_f(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
}

void geom_collection_resize_f(uint64_t a1, unint64_t a2)
{
  std::vector<float>::resize(a1 + 16, a2);
}

_QWORD *geom_create_collection_d_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_d()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_d(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
}

void geom_collection_resize_d(uint64_t a1, unint64_t a2)
{
  std::vector<double>::resize(a1 + 16, a2);
}

_QWORD *geom_create_collection_u16_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_u16_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_u16()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_u16_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_u16(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_u16(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1;
}

void geom_collection_resize_u16(uint64_t a1, unint64_t a2)
{
  std::vector<unsigned short>::resize(a1 + 16, a2);
}

_QWORD *geom_create_collection_u_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_u_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_u()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_u_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_u(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_u(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
}

void geom_collection_resize_u(uint64_t a1, std::vector<int>::size_type a2)
{
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 16), a2);
}

_QWORD *geom_create_collection_i_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_i_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_i()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_i_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_i(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_i(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
}

void geom_collection_resize_i(uint64_t a1, std::vector<int>::size_type a2)
{
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 16), a2);
}

_QWORD *geom_create_collection_i8_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_i8_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_i8()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_i8_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_i8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_i8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

void geom_collection_resize_i8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  size_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24) - v2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 16), v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 24) = v2 + a2;
  }
}

_QWORD *geom_create_collection_2f_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_2f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_2f()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_2f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_2f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_2f(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
}

void geom_collection_resize_2f(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

_QWORD *geom_create_collection_2d_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_2d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_2d()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_2d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_2d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_2d(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
}

void geom_collection_resize_2d(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

_QWORD *geom_create_collection_3f_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_3f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_3f()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_3f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_3f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_3f(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
}

void geom_collection_resize_3f(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

_QWORD *geom_create_collection_3d_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_3d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_3d()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_3d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_3d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_3d(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5;
}

void geom_collection_resize_3d(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

_QWORD *geom_create_collection_4f_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_4f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_4f()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_4f_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_4f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_4f(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
}

void geom_collection_resize_4f(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

_QWORD *geom_create_collection_4d_alloc()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_4d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *geom_create_collection_4d()
{
  _QWORD *result;

  result = (_QWORD *)geom_collection_4d_obj_alloc();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t geom_collection_data_4d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_collection_size_4d(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5;
}

void geom_collection_resize_4d(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

float geom::polyhedron_volume_3<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  return geom::polyhedron_volume_3<float,unsigned int const*>(a1, a2, a3, a4, a5, &a5[a6]);
}

float geom::polyhedron_volume_3<float,unsigned int const*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v6;
  float v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x2_t v18;
  float32x4_t v19;

  if (a5 == a6)
  {
    v7 = 0.0;
  }
  else
  {
    v6 = 0;
    v7 = 0.0;
    do
    {
      v8 = *a5;
      v9 = 0uLL;
      v10 = 0uLL;
      if (v8 > v6)
      {
        v11 = 0;
        do
        {
          v12 = *(unsigned int *)(a3 + 4 * v6 + 4 * v11++);
          v13 = *(float32x4_t *)(a1
                               + 16 * *(unsigned int *)(a3 + 4 * (v11 % (v8 - v6) + v6)));
          v14 = *(float32x4_t *)(a1 + 16 * v12);
          v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), vnegq_f32(v14)), v13, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL));
          v9 = vaddq_f32(v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL));
          v10 = vaddq_f32(v10, v14);
        }
        while (v8 - v6 != v11);
      }
      v16 = vmulq_f32(v9, v9);
      v17 = vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1));
      v18 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), v17).u64[0];
      *(float *)v18.i32 = sqrtf(*(float *)v18.i32);
      if (fabsf(*(float *)v18.i32) > 0.00001)
      {
        v17.f32[0] = (float)(v8 - v6);
        v19 = vmulq_f32(vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0)), vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(v18, 0)));
        v7 = vmlas_n_f32(v7, *(float *)v18.i32 * 0.5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
      }
      ++a5;
      v6 = v8;
    }
    while (a5 != a6);
  }
  return v7 / 3.0;
}

double geom::polyhedron_volume_3<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  return geom::polyhedron_volume_3<double,unsigned int const*>(a1, a2, a3, a4, a5, &a5[a6]);
}

double geom::polyhedron_volume_3<double,unsigned int const*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v6;
  double v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;

  if (a5 == a6)
  {
    v7 = 0.0;
  }
  else
  {
    v6 = 0;
    v7 = 0.0;
    do
    {
      v8 = *a5;
      v9 = 0uLL;
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      if (v8 > v6)
      {
        v13 = 0;
        do
        {
          v14 = *(unsigned int *)(a3 + 4 * v6 + 4 * v13++);
          v15 = (float64x2_t *)(a1 + 32 * v14);
          v16 = *v15;
          v17 = v15[1];
          v18 = (float64x2_t *)(a1
                              + 32 * *(unsigned int *)(a3 + 4 * (v13 % (v8 - v6) + v6)));
          v19 = v18[1];
          v20.f64[0] = v17.f64[0];
          *(_QWORD *)&v21.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v17), *v18, 1), v19, v16, 1);
          v19.f64[1] = v18->f64[0];
          v20.f64[1] = v16.f64[0];
          v12 = vaddq_f64(v12, v17);
          v22 = (int64x2_t)vmlaq_f64(vmulq_f64(v19, vnegq_f64(v16)), *v18, v20);
          *(_QWORD *)&v21.f64[1] = v22.i64[0];
          v10 = vaddq_f64(v10, (float64x2_t)vdupq_laneq_s64(v22, 1));
          v9 = vaddq_f64(v9, v21);
          v11 = vaddq_f64(v11, v16);
        }
        while (v8 - v6 != v13);
      }
      v24 = vmulq_f64(v10, v10);
      v23 = vmulq_f64(v9, v9);
      v24.f64[0] = sqrt(v24.f64[0] + vaddvq_f64(v23));
      if (fabs(v24.f64[0]) > 0.000001)
      {
        v23.f64[0] = (double)(v8 - v6);
        v7 = v7
           + (vmulq_f64(vdivq_f64(v12, v23), vdivq_f64(v10, v24)).f64[0]
            + vaddvq_f64(vmulq_f64(vdivq_f64(v11, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0)), vdivq_f64(v9, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0)))))* (v24.f64[0]* 0.5);
      }
      ++a5;
      v6 = v8;
    }
    while (a5 != a6);
  }
  return v7 / 3.0;
}

float geom::polyhedron_surface_area_3<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  return geom::polyhedron_surface_area_3<float,unsigned int const*>(a1, a2, a3, a4, a5, &a5[a6]);
}

float geom::polyhedron_surface_area_3<float,unsigned int const*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v6;
  float v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;

  if (a5 == a6)
    return 0.0;
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = *a5;
    v9 = 0uLL;
    if (v8 > v6)
    {
      v10 = 0;
      do
      {
        v11 = *(unsigned int *)(a3 + 4 * v6 + 4 * v10++);
        v12 = *(float32x4_t *)(a1
                             + 16 * *(unsigned int *)(a3 + 4 * (v10 % (v8 - v6) + v6)));
        v13 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(*(float32x4_t *)(a1 + 16 * v11))), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16 * v11), *(int32x4_t *)(a1 + 16 * v11)), *(int8x16_t *)(a1 + 16 * v11), 0xCuLL));
        v9 = vaddq_f32(v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL));
      }
      while (v8 - v6 != v10);
    }
    v14 = vmulq_f32(v9, v9);
    v7 = v7
       + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
    ++a5;
    v6 = v8;
  }
  while (a5 != a6);
  return v7 * 0.5;
}

double geom::polyhedron_surface_area_3<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  return geom::polyhedron_surface_area_3<double,unsigned int const*>(a1, a2, a3, a4, a5, &a5[a6]);
}

double geom::polyhedron_surface_area_3<double,unsigned int const*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v6;
  double v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  int64x2_t v19;

  if (a5 == a6)
    return 0.0;
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = *a5;
    v9 = 0uLL;
    v10 = 0uLL;
    if (v8 > v6)
    {
      v11 = 0;
      do
      {
        v12 = *(unsigned int *)(a3 + 4 * v6 + 4 * v11++);
        v13 = (float64x2_t *)(a1 + 32 * v12);
        v14 = *v13;
        v15 = v13[1];
        v16 = (float64x2_t *)(a1
                            + 32 * *(unsigned int *)(a3 + 4 * (v11 % (v8 - v6) + v6)));
        v17 = v16[1];
        *(_QWORD *)&v18.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v15), *v16, 1), v17, v14, 1);
        v17.f64[1] = v16->f64[0];
        v15.f64[1] = v14.f64[0];
        v19 = (int64x2_t)vmlaq_f64(vmulq_f64(v17, vnegq_f64(v14)), *v16, v15);
        *(_QWORD *)&v18.f64[1] = v19.i64[0];
        v10 = vaddq_f64(v10, (float64x2_t)vdupq_laneq_s64(v19, 1));
        v9 = vaddq_f64(v9, v18);
      }
      while (v8 - v6 != v11);
    }
    v7 = v7 + sqrt(vmulq_f64(v10, v10).f64[0] + vaddvq_f64(vmulq_f64(v9, v9)));
    ++a5;
    v6 = v8;
  }
  while (a5 != a6);
  return v7 * 0.5;
}

float geom::triangle_mesh_volume_3<float>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  float v6;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x2_t v22;
  float32x4_t v23;

  if ((a4 / 3))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0.0;
    __asm { FMOV            V2.4S, #3.0 }
    do
    {
      v12 = 0uLL;
      v13 = 0uLL;
      if (v5 <= 0xFFFFFFFC)
      {
        v14 = 0;
        do
        {
          v15 = *(unsigned int *)(a3 + 4 * v5 + 4 * v14);
          v16 = v14 + 1;
          if (v14 == 2)
            v17 = 0;
          else
            v17 = v14 + 1;
          v18 = *(float32x4_t *)(a1 + 16 * v15);
          v19 = *(float32x4_t *)(a1 + 16 * *(unsigned int *)(a3 + 4 * (v17 + v5)));
          v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32(v18)), v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
          v12 = vaddq_f32(v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL));
          v13 = vaddq_f32(v13, v18);
          v14 = v16;
        }
        while ((_DWORD)v16 != 3);
      }
      v21 = vmulq_f32(v12, v12);
      v22 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u64[0];
      *(float *)v22.i32 = sqrtf(*(float *)v22.i32);
      if (fabsf(*(float *)v22.i32) > 0.00001)
      {
        v23 = vmulq_f32(vdivq_f32(v13, _Q2), vdivq_f32(v12, (float32x4_t)vdupq_lane_s32(v22, 0)));
        v6 = vmlas_n_f32(v6, *(float *)v22.i32 * 0.5, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
      }
      v5 += 3;
      ++v4;
    }
    while (v4 != (a4 / 3));
  }
  else
  {
    v6 = 0.0;
  }
  return v6 / 3.0;
}

double geom::triangle_mesh_volume_3<double>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  double v6;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int64x2_t v26;
  float64x2_t v27;

  if ((a4 / 3))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0.0;
    __asm { FMOV            V2.2D, #3.0 }
    do
    {
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      if (v5 <= 0xFFFFFFFC)
      {
        v16 = 0;
        do
        {
          v17 = *(unsigned int *)(a3 + 4 * v5 + 4 * v16);
          v18 = v16 + 1;
          if (v16 == 2)
            v19 = 0;
          else
            v19 = v16 + 1;
          v20 = (float64x2_t *)(a1 + 32 * v17);
          v21 = v20[1];
          v22 = (float64x2_t *)(a1 + 32 * *(unsigned int *)(a3 + 4 * (v19 + v5)));
          v23 = v22[1];
          v24.f64[0] = v20[1].f64[0];
          v24.f64[1] = v20->f64[0];
          *(_QWORD *)&v25.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v21), *v22, 1), v23, *v20, 1);
          v23.f64[1] = v22->f64[0];
          v26 = (int64x2_t)vmlaq_f64(vmulq_f64(v23, vnegq_f64(*v20)), *v22, v24);
          *(_QWORD *)&v25.f64[1] = v26.i64[0];
          v15 = vaddq_f64(v15, v21);
          v12 = vaddq_f64(v12, v25);
          v13 = vaddq_f64(v13, (float64x2_t)vdupq_laneq_s64(v26, 1));
          v14 = vaddq_f64(v14, *v20);
          v16 = v18;
        }
        while ((_DWORD)v18 != 3);
      }
      v27 = vmulq_f64(v13, v13);
      v27.f64[0] = sqrt(v27.f64[0] + vaddvq_f64(vmulq_f64(v12, v12)));
      if (fabs(v27.f64[0]) > 0.000001)
        v6 = v6
           + (vmulq_f64(vdivq_f64(v15, _Q2), vdivq_f64(v13, v27)).f64[0]
            + vaddvq_f64(vmulq_f64(vdivq_f64(v14, _Q2), vdivq_f64(v12, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27.f64[0], 0)))))* (v27.f64[0]* 0.5);
      v5 += 3;
      ++v4;
    }
    while (v4 != (a4 / 3));
  }
  else
  {
    v6 = 0.0;
  }
  return v6 / 3.0;
}

float geom::triangle_mesh_surface_area_3<float>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  float v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;

  if (!(a4 / 3))
    return 0.0;
  v4 = 0;
  v5 = 0;
  v6 = 0.0;
  do
  {
    v7 = 0uLL;
    if (v5 <= 0xFFFFFFFC)
    {
      v8 = 0;
      do
      {
        v9 = *(unsigned int *)(a3 + 4 * v5 + 4 * v8);
        v10 = v8 + 1;
        if (v8 == 2)
          v11 = 0;
        else
          v11 = v8 + 1;
        v12 = *(float32x4_t *)(a1 + 16 * *(unsigned int *)(a3 + 4 * (v11 + v5)));
        v13 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(*(float32x4_t *)(a1 + 16 * v9))), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16 * v9), *(int32x4_t *)(a1 + 16 * v9)), *(int8x16_t *)(a1 + 16 * v9), 0xCuLL));
        v7 = vaddq_f32(v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL));
        v8 = v10;
      }
      while ((_DWORD)v10 != 3);
    }
    v5 += 3;
    v14 = vmulq_f32(v7, v7);
    v6 = v6
       + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
    ++v4;
  }
  while (v4 != (a4 / 3));
  return v6 * 0.5;
}

double geom::triangle_mesh_surface_area_3<double>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  int64x2_t v18;

  if (!(a4 / 3))
    return 0.0;
  v4 = 0;
  v5 = 0;
  v6 = 0.0;
  do
  {
    v7 = 0uLL;
    v8 = 0uLL;
    if (v5 <= 0xFFFFFFFC)
    {
      v9 = 0;
      do
      {
        v10 = *(unsigned int *)(a3 + 4 * v5 + 4 * v9);
        v11 = v9 + 1;
        if (v9 == 2)
          v12 = 0;
        else
          v12 = v9 + 1;
        v13 = (float64x2_t *)(a1 + 32 * v10);
        v14 = v13[1];
        v15 = (float64x2_t *)(a1 + 32 * *(unsigned int *)(a3 + 4 * (v12 + v5)));
        v16.f64[0] = v15[1].f64[0];
        v16.f64[1] = v15->f64[0];
        v17 = vnegq_f64(v14);
        v14.f64[1] = v13->f64[0];
        *(_QWORD *)&v17.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v17, *v15, 1), v15[1], *v13, 1);
        v18 = (int64x2_t)vmlaq_f64(vmulq_f64(v16, vnegq_f64(*v13)), *v15, v14);
        *(_QWORD *)&v17.f64[1] = v18.i64[0];
        v7 = vaddq_f64(v7, v17);
        v8 = vaddq_f64(v8, (float64x2_t)vdupq_laneq_s64(v18, 1));
        v9 = v11;
      }
      while ((_DWORD)v11 != 3);
    }
    v5 += 3;
    v6 = v6 + sqrt(vmulq_f64(v8, v8).f64[0] + vaddvq_f64(vmulq_f64(v7, v7)));
    ++v4;
  }
  while (v4 != (a4 / 3));
  return v6 * 0.5;
}

float geom_polyhedron_volume_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;

  if (a3)
    v6 = a5[a3 - 1];
  else
    v6 = 0;
  return geom::polyhedron_volume_3<float,unsigned int const*>(a2, a1, a4, v6, a5, &a5[a3]);
}

double geom_polyhedron_volume_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;

  if (a3)
    v6 = a5[a3 - 1];
  else
    v6 = 0;
  return geom::polyhedron_volume_3<double,unsigned int const*>(a2, a1, a4, v6, a5, &a5[a3]);
}

float geom_triangle_mesh_volume_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::triangle_mesh_volume_3<float>(a2, a1, a4, 3 * a3);
}

double geom_triangle_mesh_volume_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::triangle_mesh_volume_3<double>(a2, a1, a4, 3 * a3);
}

float geom_polyhedron_surface_area_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;

  if (a3)
    v6 = a5[a3 - 1];
  else
    v6 = 0;
  return geom::polyhedron_surface_area_3<float,unsigned int const*>(a2, a1, a4, v6, a5, &a5[a3]);
}

double geom_polyhedron_surface_area_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;

  if (a3)
    v6 = a5[a3 - 1];
  else
    v6 = 0;
  return geom::polyhedron_surface_area_3<double,unsigned int const*>(a2, a1, a4, v6, a5, &a5[a3]);
}

float geom_triangle_mesh_surface_area_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::triangle_mesh_surface_area_3<float>(a2, a1, a4, 3 * a3);
}

double geom_triangle_mesh_surface_area_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::triangle_mesh_surface_area_3<double>(a2, a1, a4, 3 * a3);
}

uint64_t geom_exact_winding_number_3f_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_exact_winding_number_3f_class()
{
  return objc_opt_class();
}

uint64_t geom_exact_winding_number_3d_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_exact_winding_number_3d_class()
{
  return objc_opt_class();
}

uint64_t geom_approximate_winding_number_3f_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_approximate_winding_number_3f_class()
{
  return objc_opt_class();
}

uint64_t geom_approximate_winding_number_3d_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_approximate_winding_number_3d_class()
{
  return objc_opt_class();
}

uint64_t geom_collection_f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_i_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_i_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_i8_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_i8_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_u16_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_u16_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_u_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_u_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_4f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_4f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_collection_4d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_collection_4d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_create_opt_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_create_opt_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_create_opt_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_create_opt_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_create_opt_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_create_opt_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_bvh_create_opt_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bvh_create_opt_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_triangle_mesh_bvh_3f_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_triangle_mesh_bvh_3f_class()
{
  return objc_opt_class();
}

uint64_t geom_triangle_mesh_bvh_3d_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_triangle_mesh_bvh_3d_class()
{
  return objc_opt_class();
}

uint64_t geom_bezier_curve_bvh_2f_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bezier_curve_bvh_2f_class()
{
  return objc_opt_class();
}

uint64_t geom_bezier_curve_bvh_2d_obj_alloc()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_bezier_curve_bvh_2d_class()
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_create_opt_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_create_opt_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_create_opt_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_create_opt_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_create_opt_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_create_opt_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_kd_tree_create_opt_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_kd_tree_create_opt_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_ddg_evaluator_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_ddg_evaluator_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_ddg_evaluator_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_ddg_evaluator_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_sparse_linear_solver_f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_sparse_linear_solver_f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_sparse_linear_solver_d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_sparse_linear_solver_d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_approximate_convex_decomposition_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_approximate_convex_decomposition_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_approximate_convex_decomposition_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_approximate_convex_decomposition_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_approximate_convex_decomposition_opt_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_approximate_convex_decomposition_opt_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_approximate_convex_decomposition_opt_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_approximate_convex_decomposition_opt_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_marching_squares_opt_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_marching_squares_opt_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_marching_squares_opt_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_marching_squares_opt_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_simplify_triangle_mesh_opt_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_simplify_triangle_mesh_opt_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_simplify_triangle_mesh_opt_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_simplify_triangle_mesh_opt_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_refine_triangle_mesh_opt_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_refine_triangle_mesh_opt_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_refine_triangle_mesh_opt_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_refine_triangle_mesh_opt_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_1f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_1f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_4f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_4f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_1d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_1d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_3d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_interpolating_curve_4d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_interpolating_curve_4d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_inset_evaluator_2f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_inset_evaluator_2f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_inset_evaluator_2d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_inset_evaluator_2d_class(void)
{
  return objc_opt_class();
}

uint64_t geom_arap_deformer_3f_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_arap_deformer_3f_class(void)
{
  return objc_opt_class();
}

uint64_t geom_arap_deformer_3d_obj_alloc(void)
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t geom_arap_deformer_3d_class(void)
{
  return objc_opt_class();
}

void std::__destroy_at[abi:nn180100]<geom::bvh<float,(unsigned char)2>,0>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = a1 + 80;
  if (*(_BYTE *)(a1 + 96) && *(_QWORD *)v2)
    MEMORY[0x22E2B7674](*(_QWORD *)v2, 0x1000C80451B5BE8);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = (_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 72) && *v3)
    MEMORY[0x22E2B7674](*v3, 0x1000C8000313F17);
  *v3 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<geom::bvh<double,(unsigned char)2>,0>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = a1 + 80;
  if (*(_BYTE *)(a1 + 96) && *(_QWORD *)v2)
    MEMORY[0x22E2B7674](*(_QWORD *)v2, 0x1000C80E0EAB150);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = (_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 72) && *v3)
    MEMORY[0x22E2B7674](*v3, 0x1000C80451B5BE8);
  *v3 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<geom::bvh<double,(unsigned char)3>,0>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = a1 + 80;
  if (*(_BYTE *)(a1 + 96) && *(_QWORD *)v2)
    MEMORY[0x22E2B7674](*(_QWORD *)v2, 0x1000C80FA0F61DDLL);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = (_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 72) && *v3)
    MEMORY[0x22E2B7674](*v3, 0x1000C80E0EAB150);
  *v3 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<geom::kd_tree<float,(unsigned char)2>,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24) && *v4)
    MEMORY[0x22E2B7674](*v4, 0x1000C8000313F17);
  *v4 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

void std::__destroy_at[abi:nn180100]<geom::kd_tree<double,(unsigned char)2>,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24) && *v4)
    MEMORY[0x22E2B7674](*v4, 0x1000C80451B5BE8);
  *v4 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

void std::__destroy_at[abi:nn180100]<geom::kd_tree<double,(unsigned char)3>,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24) && *v4)
    MEMORY[0x22E2B7674](*v4, 0x1000C80E0EAB150);
  *v4 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

void std::__destroy_at[abi:nn180100]<geom::ddg_evaluator<float>,0>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v4 = *(_QWORD *)(a1 + 48);
  v2 = (_QWORD *)(a1 + 48);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<geom::mesh_connectivity>::operator()[abi:nn180100]((uint64_t)v2, v3);
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
}

void std::default_delete<geom::mesh_connectivity>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(_QWORD *)(a2 + 104) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 72);
    if (v4)
    {
      *(_QWORD *)(a2 + 80) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(_QWORD *)(a2 + 56) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a2 + 24);
    if (v6)
    {
      *(_QWORD *)(a2 + 32) = v6;
      operator delete(v6);
    }
    v7 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v7;
      operator delete(v7);
    }
    JUMPOUT(0x22E2B768CLL);
  }
}

void std::__destroy_at[abi:nn180100]<geom::sparse_linear_solver<float>,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1 + 8, *(_QWORD **)(a1 + 16));
}

void std::__destroy_at[abi:nn180100]<geom::simplify_triangle_mesh_options<float>,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
}

uint64_t geom::straight_skeleton_evaluator<float>::~straight_skeleton_evaluator(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  v10 = (void **)(a1 + 120);
  std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::__destroy_vector::operator()[abi:nn180100](&v10);
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      v4 = v3 - 104;
      v5 = *(unsigned int *)(v3 - 8);
      if ((_DWORD)v5 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_24F14B940[v5])(&v6, v3 - 104);
      *(_DWORD *)(v3 - 8) = -1;
      v3 -= 104;
    }
    while (v4 != v2);
  }
  v1[1] = v2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4geom27straight_skeleton_evaluatorIfE13active_vertexENSA_15inactive_vertexEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 64);
  if (v2)
  {
    *(_QWORD *)(a2 + 72) = v2;
    operator delete(v2);
  }
}

uint64_t geom::straight_skeleton_evaluator<double>::~straight_skeleton_evaluator(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v3);
  }
  v10 = (void **)(a1 + 120);
  std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::__destroy_vector::operator()[abi:nn180100](&v10);
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::__clear[abi:nn180100](v2);
    operator delete(**a1);
  }
}

_QWORD *std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::__clear[abi:nn180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (v3 != *result)
  {
    do
    {
      v4 = v3 - 144;
      v5 = *(unsigned int *)(v3 - 16);
      if ((_DWORD)v5 != -1)
        result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_24F14B950[v5])(&v6, v3 - 144);
      *(_DWORD *)(v3 - 16) = -1;
      v3 -= 144;
    }
    while (v4 != v2);
  }
  v1[1] = v2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4geom27straight_skeleton_evaluatorIdE13active_vertexENSA_15inactive_vertexEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)(a2 + 96);
  if (v2)
  {
    *(_QWORD *)(a2 + 104) = v2;
    operator delete(v2);
  }
}

uint64_t geom::arap_deformer<float>::~arap_deformer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void **v11;

  v11 = (void **)(a1 + 400);
  std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__destroy_vector::operator()[abi:nn180100](&v11);
  v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(_QWORD *)(a1 + 384) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(_QWORD *)(a1 + 360) = v3;
    operator delete(v3);
  }
  _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1 + 328, *(_QWORD **)(a1 + 336));
  v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(_QWORD *)(a1 + 152) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1 + 72, *(_QWORD **)(a1 + 80));
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v7)
    std::default_delete<geom::mesh_connectivity>::operator()[abi:nn180100](a1 + 48, v7);
  v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<geom::ddg_evaluator<float>::stencil>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t geom::logging::points_of_interest_log(geom::logging *this)
{
  unsigned __int8 v1;
  _QWORD *v2;
  int v4;

  v2 = &unk_2559D4000;
  if ((v1 & 1) == 0)
  {
    v2 = (_QWORD *)&unk_2559D4000;
    if (v4)
    {
      geom::logging::points_of_interest_log(void)::ret = (uint64_t)os_log_create("com.apple.Geometry", "PointsOfInterest");
      v2 = (_QWORD *)&unk_2559D4000;
    }
  }
  return v2[466];
}

uint64_t geom::mesh_connectivity::mesh_connectivity(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 120) = 257;
  *(_BYTE *)(a1 + 122) = 0;
  geom::mesh_connectivity::compute_mesh_connectivity<unsigned int const*>((std::vector<int> *)a1, a2, a4, &a4[a5]);
  return a1;
}

uint64_t geom::mesh_connectivity::compute_mesh_connectivity<unsigned int const*>(std::vector<int> *this, _DWORD *a2, unsigned int *a3, unsigned int *a4)
{
  _DWORD *v5;
  std::vector<int> *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *end;
  int v26;
  unsigned int v27;
  int v28;
  int *value;
  std::vector<int> *v30;
  _DWORD *v31;
  uint64_t v32;
  std::vector<int> *v33;
  char *begin;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int *v41;
  __int128 v42;
  char *v43;
  unsigned int *v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  int v54;
  std::vector<int>::pointer v55;
  int *v56;
  int *v57;
  std::vector<int>::pointer v58;
  char *v59;
  uint64_t v60;
  int *v61;
  int *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  int *v67;
  int v68;
  _DWORD *v69;
  std::vector<int>::pointer v70;
  std::vector<int>::pointer v71;
  std::vector<int>::size_type v72;
  std::vector<int>::pointer v73;
  int *v74;
  int v75;
  int *v76;
  std::vector<int>::pointer v77;
  uint64_t v78;
  char **v79;
  std::__compressed_pair<int *> *v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  int *v84;
  char *v85;
  int *v86;
  std::vector<int>::pointer v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  int *v93;
  int v94;
  char *v95;
  int v96;
  std::vector<int>::pointer v97;
  int *v98;
  int v99;
  int *v100;
  int v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  char *v111;
  uint64_t v112;
  unsigned int v113;
  std::vector<int>::pointer v114;
  std::vector<int>::pointer v115;
  int v116;
  unint64_t v117;
  int v118;
  char *v119;
  char *v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  int *v130;
  std::vector<int>::pointer v131;
  int *v132;
  __int128 v133;
  uint64_t v134;
  char *v135;
  std::vector<int>::size_type v137;
  std::vector<int> *v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int *v141;
  uint64_t p_end_cap;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  char **v147;
  void *__p;
  char *v149;
  char *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  _OWORD v154[2];
  uint64_t v155;
  int v156;

  v5 = a2;
  v6 = this;
  v7 = *(a4 - 1);
  v8 = a2;
  if (v7 >= 2)
  {
    v10 = a2 + 1;
    v9 = *a2;
    v11 = 4 * v7 - 4;
    v8 = a2;
    v12 = a2 + 1;
    do
    {
      v14 = *v12++;
      v13 = v14;
      v15 = v9 >= v14;
      if (v9 <= v14)
        v9 = v13;
      if (!v15)
        v8 = v10;
      v10 = v12;
      v11 -= 4;
    }
    while (v11);
  }
  v16 = (char *)a4 - (char *)a3;
  v137 = *v8 + 1;
  std::vector<unsigned int>::resize(this, v137, geom::half_edge::k_invalid_index);
  v138 = v6 + 1;
  std::vector<unsigned int>::resize(v6 + 1, (v16 >> 2), geom::half_edge::k_invalid_index);
  v140 = a3;
  if (a4 != a3)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    p_end_cap = (uint64_t)&v6[4].__end_cap_;
    v20 = a3;
    do
    {
      v138->__begin_[v18] = v19;
      v139 = v20;
      v21 = *v20;
      if (v21 > v17)
      {
        v22 = v21 - v17;
        v23 = (v21 - 1);
        v24 = v17;
        end = (char *)v6[4].__end_;
        v146 = v17;
        v144 = v23;
        v145 = *v20;
        do
        {
          v6->__begin_[v5[v24]] = v19;
          v26 = v5[(v24 - v17 + 1) % v22 + v17];
          if (v24 == v23)
            v27 = v22;
          else
            v27 = 0;
          v28 = v19 - v27 + 1;
          value = v6[4].__end_cap_.__value_;
          if (end >= (char *)value)
          {
            v30 = v6;
            v31 = v5;
            v32 = v18;
            v33 = v30;
            begin = (char *)v30[4].__begin_;
            v35 = 0xCCCCCCCCCCCCCCCDLL * ((end - begin) >> 2);
            v36 = v35 + 1;
            if (v35 + 1 > 0xCCCCCCCCCCCCCCCLL)
LABEL_163:
              abort();
            v37 = 0xCCCCCCCCCCCCCCCDLL * (((char *)value - begin) >> 2);
            if (2 * v37 > v36)
              v36 = 2 * v37;
            if (v37 >= 0x666666666666666)
              v38 = 0xCCCCCCCCCCCCCCCLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>(p_end_cap, v38);
              begin = (char *)v33[4].__begin_;
              end = (char *)v33[4].__end_;
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[20 * v35];
            *(_DWORD *)v40 = v26;
            *((_DWORD *)v40 + 1) = v32;
            v18 = v32;
            *((_DWORD *)v40 + 2) = -1;
            *((_DWORD *)v40 + 3) = v28;
            *((_DWORD *)v40 + 4) = -1;
            v41 = (int *)v40;
            v5 = v31;
            if (end == begin)
            {
              v6 = v33;
            }
            else
            {
              do
              {
                v42 = *(_OWORD *)(end - 20);
                *(v41 - 1) = *((_DWORD *)end - 1);
                *(_OWORD *)(v41 - 5) = v42;
                v41 -= 5;
                end -= 20;
              }
              while (end != begin);
              v6 = v33;
              begin = (char *)v33[4].__begin_;
            }
            end = v40 + 20;
            v6[4].__begin_ = v41;
            v6[4].__end_ = (std::vector<int>::pointer)(v40 + 20);
            v6[4].__end_cap_.__value_ = (int *)&v39[20 * v38];
            if (begin)
              operator delete(begin);
            v17 = v146;
            v23 = v144;
            v21 = v145;
          }
          else
          {
            *(_DWORD *)end = v26;
            *((_DWORD *)end + 1) = v18;
            *((_DWORD *)end + 2) = -1;
            *((_DWORD *)end + 3) = v28;
            *((_DWORD *)end + 4) = -1;
            end += 20;
          }
          v6[4].__end_ = (std::vector<int>::pointer)end;
          ++v19;
          ++v24;
        }
        while (v24 != v21);
      }
      v18 = (v18 + 1);
      v20 = v139 + 1;
      v17 = v21;
    }
    while (v139 + 1 != a4);
  }
  memset(v154, 0, sizeof(v154));
  v155 = -1;
  v156 = 1065353216;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  if ((_DWORD)v137)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v151, v137);
    v43 = (char *)v152;
    bzero(v152, 4 * v137);
    v152 = &v43[4 * v137];
  }
  v44 = v140;
  if (v140 != a4)
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v141 = v44;
      v47 = *v44;
      if (v47 > v45)
      {
        v48 = v45;
        do
        {
          v49 = v5[v48];
          v50 = v5[(v48 - v45 + 1) % (v47 - v45) + v45];
          if (v50 >= v49)
            v51 = v5[v48];
          else
            v51 = v5[(v48 - v45 + 1) % (v47 - v45) + v45];
          if (v49 <= v50)
            v52 = v5[(v48 - v45 + 1) % (v47 - v45) + v45];
          else
            v52 = v5[v48];
          __p = (void *)__PAIR64__(v52, v51);
          {
            v54 = *(_DWORD *)v53;
            v55 = v6[4].__begin_;
            v56 = &v55[5 * v46];
            v56[4] = *(_DWORD *)v53;
            v57 = &v55[5 * v54];
            v57[4] = v46;
            v56[2] = v57[2];
          }
          else
          {
            v58 = v6[2].__begin_;
            v59 = (char *)v6[2].__end_;
            v60 = (v59 - (char *)v58) >> 2;
            v6[4].__begin_[5 * v46 + 2] = v60;
            v61 = v6[2].__end_cap_.__value_;
            if (v59 >= (char *)v61)
            {
              v63 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_163;
              v64 = (char *)v61 - (char *)v58;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v6[2].__end_cap_, v65);
                v58 = v6[2].__begin_;
                v59 = (char *)v6[2].__end_;
              }
              else
              {
                v66 = 0;
              }
              v67 = (int *)&v66[4 * v60];
              *v67 = v46;
              v62 = v67 + 1;
              while (v59 != (char *)v58)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *--v67 = v68;
              }
              v6[2].__begin_ = v67;
              v6[2].__end_ = v62;
              v6[2].__end_cap_.__value_ = (int *)&v66[4 * v65];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_DWORD *)v59 = v46;
              v62 = (int *)(v59 + 4);
            }
            v6[2].__end_ = v62;
            v69 = v151;
            ++*((_DWORD *)v151 + v49);
            ++v69[v50];
          }
          ++v46;
          ++v48;
        }
        while (v48 != v47);
      }
      v44 = v141 + 1;
      v45 = v47;
    }
    while (v141 + 1 != a4);
  }
  v70 = v6[2].__begin_;
  v71 = v6[2].__end_;
  v72 = v137;
  if (v70 != v71)
  {
    v73 = v6[4].__begin_;
    do
    {
      v74 = &v73[5 * *v70];
      v75 = v74[4];
      if (v75 != -1)
      {
        v76 = &v73[5 * v75];
        if (v76[4] != *v70)
        {
          LOWORD(v6[5].__begin_) = 0;
          break;
        }
        if (BYTE1(v6[5].__begin_) && *v74 == *v76)
          BYTE1(v6[5].__begin_) = 0;
      }
      ++v70;
    }
    while (v70 != v71);
  }
  if (LOBYTE(v6[5].__begin_) && BYTE1(v6[5].__begin_))
  {
    v77 = v6[4].__begin_;
    v78 = (char *)v6[4].__end_ - (char *)v77;
    if (v78)
    {
      v79 = &v150;
      v80 = &v6[4].__end_cap_;
      do
      {
        v81 = 0;
        v82 = 0;
        v83 = 0xCCCCCCCCCCCCCCCDLL * (v78 >> 2);
        while (v77[5 * v81 + 4] != -1)
        {
          v81 = ++v82;
          if (v83 <= v82)
            goto LABEL_151;
        }
        if (v82 == -1)
          break;
        v85 = (char *)v6[3].__end_;
        v84 = v6[3].__end_cap_.__value_;
        if (v85 >= (char *)v84)
        {
          v87 = v6[3].__begin_;
          v88 = (v85 - (char *)v87) >> 2;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 62)
            goto LABEL_163;
          v90 = (char *)v84 - (char *)v87;
          if (v90 >> 1 > v89)
            v89 = v90 >> 1;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
            v91 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            v92 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v6[3].__end_cap_, v91);
            v87 = v6[3].__begin_;
            v85 = (char *)v6[3].__end_;
          }
          else
          {
            v92 = 0;
          }
          v93 = (int *)&v92[4 * v88];
          *v93 = v82;
          v86 = v93 + 1;
          while (v85 != (char *)v87)
          {
            v94 = *((_DWORD *)v85 - 1);
            v85 -= 4;
            *--v93 = v94;
          }
          v6[3].__begin_ = v93;
          v6[3].__end_ = v86;
          v6[3].__end_cap_.__value_ = (int *)&v92[4 * v91];
          if (v87)
            operator delete(v87);
        }
        else
        {
          *(_DWORD *)v85 = v82;
          v86 = (int *)(v85 + 4);
        }
        v95 = 0;
        v6[3].__end_ = v86;
        __p = 0;
        v149 = 0;
        v96 = v82;
        v150 = 0;
        do
        {
          v97 = v6[4].__begin_;
          v98 = &v97[5 * v96];
          v101 = v98[3];
          v100 = v98 + 3;
          v99 = v101;
          v96 = v97[5 * v101 + 4];
          if (v96 == -1)
          {
            if (v95 >= v150)
            {
              v103 = (char *)__p;
              v104 = (v95 - (_BYTE *)__p) >> 2;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62)
                goto LABEL_163;
              v106 = v150 - (_BYTE *)__p;
              if ((v150 - (_BYTE *)__p) >> 1 > v105)
                v105 = v106 >> 1;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                v107 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v79, v107);
                v103 = (char *)__p;
                v95 = v149;
                v99 = *v100;
              }
              else
              {
                v108 = 0;
              }
              v109 = &v108[4 * v104];
              *(_DWORD *)v109 = v99;
              v102 = v109 + 4;
              while (v95 != v103)
              {
                v110 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              __p = v109;
              v149 = v102;
              v150 = &v108[4 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_DWORD *)v95 = v99;
              v102 = v95 + 4;
            }
            v149 = v102;
            v96 = *v100;
            v95 = v102;
          }
        }
        while (v96 != v82);
        v147 = v79;
        v111 = (char *)__p;
        if (v95 == __p)
        {
          v111 = v95;
          if (!v95)
            goto LABEL_147;
        }
        else
        {
          v112 = 0;
          v113 = 0;
          v115 = v6[4].__begin_;
          v114 = v6[4].__end_;
          v116 = -858993459 * ((unint64_t)((char *)v114 - (char *)v115) >> 2);
          v117 = (v95 - (_BYTE *)__p) >> 2;
          do
          {
            v118 = *(_DWORD *)&v111[4 * v112];
            v119 = v95 - 4;
            v120 = &v111[4 * v113 - 4];
            if (v113)
            {
              v121 = v113;
            }
            else
            {
              v120 = v119;
              v121 = v117;
            }
            v122 = v121 + v116 - 1;
            v123 = v115[5 * *(unsigned int *)v120];
            v124 = v115[5 * v118 + 2];
            if (v114 >= v80->__value_)
            {
              v126 = 0xCCCCCCCCCCCCCCCDLL * (v114 - v115);
              v127 = v126 + 1;
              if (v126 + 1 > 0xCCCCCCCCCCCCCCCLL)
                goto LABEL_163;
              if (0x999999999999999ALL * (v80->__value_ - v115) > v127)
                v127 = 0x999999999999999ALL * (v80->__value_ - v115);
              if (0xCCCCCCCCCCCCCCCDLL * (v80->__value_ - v115) >= 0x666666666666666)
                v128 = 0xCCCCCCCCCCCCCCCLL;
              else
                v128 = v127;
              if (v128)
              {
                v129 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>((uint64_t)&v6[4].__end_cap_, v128);
                v114 = v6[4].__end_;
              }
              else
              {
                v129 = 0;
              }
              v130 = (int *)&v129[20 * v126];
              *v130 = v123;
              v130[1] = -1;
              v130[2] = v124;
              v130[3] = v122;
              v130[4] = v118;
              v131 = v6[4].__begin_;
              v132 = v130;
              if (v114 != v131)
              {
                do
                {
                  v133 = *(_OWORD *)(v114 - 5);
                  *(v132 - 1) = *(v114 - 1);
                  *(_OWORD *)(v132 - 5) = v133;
                  v132 -= 5;
                  v114 -= 5;
                }
                while (v114 != v131);
                v114 = v6[4].__begin_;
              }
              v125 = v130 + 5;
              v6[4].__begin_ = v132;
              v6[4].__end_ = v130 + 5;
              v6[4].__end_cap_.__value_ = (int *)&v129[20 * v128];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *v114 = v123;
              v114[1] = -1;
              v114[2] = v124;
              v114[3] = v122;
              v125 = v114 + 5;
              v114[4] = v118;
            }
            v6[4].__end_ = v125;
            v115 = v6[4].__begin_;
            v115[5 * v118 + 4] = v113 + v116;
            v111 = (char *)__p;
            v95 = v149;
            v117 = (v149 - (_BYTE *)__p) >> 2;
            v114 = v125;
            v112 = ++v113;
          }
          while (v117 > v113);
          if (!__p)
            goto LABEL_147;
        }
        v149 = v111;
        operator delete(v111);
LABEL_147:
        v77 = v6[4].__begin_;
        v78 = (char *)v6[4].__end_ - (char *)v77;
        v72 = v137;
        v79 = v147;
      }
      while (v78);
    }
LABEL_151:
    if ((_DWORD)v72)
    {
      v134 = 0;
      while (1)
      {
        __p = 0;
        v149 = 0;
        v150 = 0;
        geom::mesh_connectivity::get_incident_edges_to_vertex((uint64_t)v6, v134, (uint64_t)&__p);
        v135 = (char *)__p;
        if (*((_DWORD *)v151 + v134) != (v149 - (_BYTE *)__p) >> 2)
          break;
        if (__p)
        {
          v149 = (char *)__p;
          operator delete(__p);
        }
        if (v72 == ++v134)
          goto LABEL_160;
      }
      LOBYTE(v6[5].__begin_) = 0;
      if (v135)
      {
        v149 = v135;
        operator delete(v135);
      }
    }
  }
LABEL_160:
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v154);
}

std::vector<int> *geom::mesh_connectivity::mesh_connectivity(std::vector<int> *this, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  _DWORD *v4;
  std::vector<int> *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *end;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int *value;
  std::vector<int> *v28;
  _DWORD *v29;
  uint64_t v30;
  std::vector<int> *v31;
  char *begin;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  int v54;
  std::vector<int>::pointer v55;
  int *v56;
  int *v57;
  std::vector<int>::pointer v58;
  char *v59;
  uint64_t v60;
  int *v61;
  int *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  int *v67;
  int v68;
  _DWORD *v69;
  std::vector<int>::pointer v70;
  std::vector<int>::pointer v71;
  std::vector<int>::size_type v72;
  std::vector<int>::pointer v73;
  int *v74;
  int v75;
  int *v76;
  std::vector<int>::pointer v77;
  uint64_t v78;
  char **v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  int *v83;
  char *v84;
  int *v85;
  std::vector<int>::pointer v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  int *v92;
  int v93;
  char *v94;
  int v95;
  std::vector<int>::pointer v96;
  int *v97;
  int v98;
  int *v99;
  int v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  int v109;
  std::vector<int>::pointer v110;
  char *v111;
  uint64_t v112;
  unsigned int v113;
  std::vector<int>::pointer v114;
  int v115;
  unint64_t v116;
  int v117;
  char *v118;
  char *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  int *v129;
  std::vector<int>::pointer v130;
  int *v131;
  __int128 v132;
  uint64_t v133;
  char *v134;
  std::vector<int>::size_type v136;
  std::vector<int> *v137;
  unsigned int v138;
  std::vector<int>::size_type __sz;
  uint64_t p_end_cap;
  uint64_t v141;
  unsigned int v142;
  char **v143;
  int v144;
  uint64_t v145;
  std::__compressed_pair<int *> *v146;
  void *__p;
  char *v148;
  char *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  _OWORD v153[2];
  uint64_t v154;
  int v155;

  v4 = a2;
  v5 = this;
  this[4].__end_cap_.__value_ = 0;
  *(_OWORD *)&this[3].__end_ = 0u;
  *(_OWORD *)&this[4].__begin_ = 0u;
  v137 = this + 1;
  *(_OWORD *)&this[2].__begin_ = 0u;
  *(_OWORD *)&this[2].__end_cap_.__value_ = 0u;
  *(_OWORD *)&this->__end_cap_.__value_ = 0u;
  *(_OWORD *)&this[1].__end_ = 0u;
  LOWORD(this[5].__begin_) = 257;
  BYTE2(this[5].__begin_) = 1;
  __sz = a4;
  v6 = 3 * a4;
  v7 = a2;
  *(_OWORD *)&this->__begin_ = 0u;
  if (v6 >= 2)
  {
    v9 = a2 + 1;
    v8 = *a2;
    v10 = 4 * v6 - 4;
    v7 = a2;
    v11 = a2 + 1;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v8 >= v13;
      if (v8 <= v13)
        v8 = v12;
      if (!v14)
        v7 = v9;
      v9 = v11;
      v10 -= 4;
    }
    while (v10);
  }
  v136 = *v7 + 1;
  std::vector<unsigned int>::resize(this, v136, geom::half_edge::k_invalid_index);
  std::vector<unsigned int>::resize(v137, __sz, geom::half_edge::k_invalid_index);
  if (__sz)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    p_end_cap = (uint64_t)&v5[4].__end_cap_;
    v18 = 3;
    do
    {
      v137->__begin_[v15] = v17;
      v138 = v16;
      if (v16 <= 0xFFFFFFFC)
      {
        v19 = v16;
        v20 = (3 * v15 + 2);
        end = (char *)v5[4].__end_;
        v22 = v16;
        v144 = v18;
        v141 = v20;
        do
        {
          v23 = v22 - v19 + 1;
          if (v22 - v19 == 2)
            v23 = 0;
          v5->__begin_[v4[v22]] = v17;
          v24 = v4[(v23 + v19)];
          if (v22 == v20)
            v25 = -3;
          else
            v25 = 0;
          v26 = ++v17 + v25;
          value = v5[4].__end_cap_.__value_;
          if (end >= (char *)value)
          {
            v28 = v5;
            v29 = v4;
            v30 = v15;
            v31 = v28;
            begin = (char *)v28[4].__begin_;
            v33 = 0xCCCCCCCCCCCCCCCDLL * ((end - begin) >> 2);
            v34 = v33 + 1;
            if (v33 + 1 > 0xCCCCCCCCCCCCCCCLL)
LABEL_165:
              abort();
            v35 = 0xCCCCCCCCCCCCCCCDLL * (((char *)value - begin) >> 2);
            if (2 * v35 > v34)
              v34 = 2 * v35;
            if (v35 >= 0x666666666666666)
              v36 = 0xCCCCCCCCCCCCCCCLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>(p_end_cap, v36);
              begin = (char *)v31[4].__begin_;
              end = (char *)v31[4].__end_;
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[20 * v33];
            v15 = v30;
            *(_DWORD *)v38 = v24;
            *((_DWORD *)v38 + 1) = v30;
            *((_DWORD *)v38 + 2) = -1;
            *((_DWORD *)v38 + 3) = v26;
            *((_DWORD *)v38 + 4) = -1;
            v39 = (int *)v38;
            v4 = v29;
            if (end == begin)
            {
              v5 = v31;
            }
            else
            {
              do
              {
                v40 = *(_OWORD *)(end - 20);
                *(v39 - 1) = *((_DWORD *)end - 1);
                *(_OWORD *)(v39 - 5) = v40;
                v39 -= 5;
                end -= 20;
              }
              while (end != begin);
              v5 = v31;
              begin = (char *)v31[4].__begin_;
            }
            end = v38 + 20;
            v5[4].__begin_ = v39;
            v5[4].__end_ = (std::vector<int>::pointer)(v38 + 20);
            v5[4].__end_cap_.__value_ = (int *)&v37[20 * v36];
            if (begin)
              operator delete(begin);
            v18 = v144;
            v20 = v141;
          }
          else
          {
            *(_DWORD *)end = v24;
            *((_DWORD *)end + 1) = v15;
            *((_DWORD *)end + 2) = -1;
            *((_DWORD *)end + 3) = v26;
            *((_DWORD *)end + 4) = -1;
            end += 20;
          }
          v5[4].__end_ = (std::vector<int>::pointer)end;
          ++v22;
        }
        while (v18 != (_DWORD)v22);
      }
      v16 = v138 + 3;
      ++v15;
      v18 += 3;
    }
    while (v15 != __sz);
  }
  memset(v153, 0, sizeof(v153));
  v154 = -1;
  v155 = 1065353216;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if ((_DWORD)v136)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v150, v136);
    v41 = (char *)v151;
    bzero(v151, 4 * v136);
    v151 = &v41[4 * v136];
  }
  if (__sz)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 3;
    do
    {
      v145 = v42;
      v46 = v43;
      v47 = v43;
      v142 = v43;
      if (v43 <= 0xFFFFFFFC)
      {
        do
        {
          v48 = v47 - v46 + 1;
          if (v47 - v46 == 2)
            v48 = 0;
          v49 = v4[v47];
          v50 = v4[(v48 + v46)];
          if (v50 >= v49)
            v51 = v4[v47];
          else
            v51 = v4[(v48 + v46)];
          if (v49 <= v50)
            v52 = v50;
          else
            v52 = v4[v47];
          __p = (void *)__PAIR64__(v52, v51);
          {
            v54 = *(_DWORD *)v53;
            v55 = v5[4].__begin_;
            v56 = &v55[5 * v44];
            v56[4] = *(_DWORD *)v53;
            v57 = &v55[5 * v54];
            v57[4] = v44;
            v56[2] = v57[2];
          }
          else
          {
            v58 = v5[2].__begin_;
            v59 = (char *)v5[2].__end_;
            v60 = (v59 - (char *)v58) >> 2;
            v5[4].__begin_[5 * v44 + 2] = v60;
            v61 = v5[2].__end_cap_.__value_;
            if (v59 >= (char *)v61)
            {
              v63 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_165;
              v64 = (char *)v61 - (char *)v58;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v5[2].__end_cap_, v65);
                v58 = v5[2].__begin_;
                v59 = (char *)v5[2].__end_;
              }
              else
              {
                v66 = 0;
              }
              v67 = (int *)&v66[4 * v60];
              *v67 = v44;
              v62 = v67 + 1;
              while (v59 != (char *)v58)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *--v67 = v68;
              }
              v5[2].__begin_ = v67;
              v5[2].__end_ = v62;
              v5[2].__end_cap_.__value_ = (int *)&v66[4 * v65];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_DWORD *)v59 = v44;
              v62 = (int *)(v59 + 4);
            }
            v5[2].__end_ = v62;
            v69 = v150;
            ++*((_DWORD *)v150 + v49);
            ++v69[v50];
          }
          ++v44;
          ++v47;
        }
        while (v45 != (_DWORD)v47);
      }
      v43 = v142 + 3;
      v42 = v145 + 1;
      v45 += 3;
    }
    while (v145 + 1 != __sz);
  }
  v70 = v5[2].__begin_;
  v71 = v5[2].__end_;
  v72 = v136;
  if (v70 != v71)
  {
    v73 = v5[4].__begin_;
    do
    {
      v74 = &v73[5 * *v70];
      v75 = v74[4];
      if (v75 != -1)
      {
        v76 = &v73[5 * v75];
        if (v76[4] != *v70)
        {
          LOWORD(v5[5].__begin_) = 0;
          goto LABEL_160;
        }
        if (BYTE1(v5[5].__begin_) && *v74 == *v76)
          BYTE1(v5[5].__begin_) = 0;
      }
      ++v70;
    }
    while (v70 != v71);
  }
  if (LOBYTE(v5[5].__begin_) && BYTE1(v5[5].__begin_))
  {
    v77 = v5[4].__begin_;
    v78 = (char *)v5[4].__end_ - (char *)v77;
    if (v78)
    {
      v79 = &v149;
      v146 = &v5[4].__end_cap_;
      do
      {
        v80 = 0;
        v81 = 0;
        v82 = 0xCCCCCCCCCCCCCCCDLL * (v78 >> 2);
        while (v77[5 * v80 + 4] != -1)
        {
          v80 = ++v81;
          if (v82 <= v81)
            goto LABEL_152;
        }
        if (v81 == -1)
          break;
        v84 = (char *)v5[3].__end_;
        v83 = v5[3].__end_cap_.__value_;
        if (v84 >= (char *)v83)
        {
          v86 = v5[3].__begin_;
          v87 = (v84 - (char *)v86) >> 2;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 62)
            goto LABEL_165;
          v89 = (char *)v83 - (char *)v86;
          if (v89 >> 1 > v88)
            v88 = v89 >> 1;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
            v90 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v90 = v88;
          if (v90)
          {
            v91 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v5[3].__end_cap_, v90);
            v86 = v5[3].__begin_;
            v84 = (char *)v5[3].__end_;
          }
          else
          {
            v91 = 0;
          }
          v92 = (int *)&v91[4 * v87];
          *v92 = v81;
          v85 = v92 + 1;
          while (v84 != (char *)v86)
          {
            v93 = *((_DWORD *)v84 - 1);
            v84 -= 4;
            *--v92 = v93;
          }
          v5[3].__begin_ = v92;
          v5[3].__end_ = v85;
          v5[3].__end_cap_.__value_ = (int *)&v91[4 * v90];
          if (v86)
            operator delete(v86);
        }
        else
        {
          *(_DWORD *)v84 = v81;
          v85 = (int *)(v84 + 4);
        }
        v94 = 0;
        v5[3].__end_ = v85;
        __p = 0;
        v148 = 0;
        v95 = v81;
        v149 = 0;
        do
        {
          v96 = v5[4].__begin_;
          v97 = &v96[5 * v95];
          v100 = v97[3];
          v99 = v97 + 3;
          v98 = v100;
          v95 = v96[5 * v100 + 4];
          if (v95 == -1)
          {
            if (v94 >= v149)
            {
              v102 = (char *)__p;
              v103 = (v94 - (_BYTE *)__p) >> 2;
              v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 62)
                goto LABEL_165;
              v105 = v149 - (_BYTE *)__p;
              if ((v149 - (_BYTE *)__p) >> 1 > v104)
                v104 = v105 >> 1;
              if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                v106 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v106 = v104;
              if (v106)
              {
                v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v79, v106);
                v102 = (char *)__p;
                v94 = v148;
                v98 = *v99;
              }
              else
              {
                v107 = 0;
              }
              v108 = &v107[4 * v103];
              *(_DWORD *)v108 = v98;
              v101 = v108 + 4;
              while (v94 != v102)
              {
                v109 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v108 - 1) = v109;
                v108 -= 4;
              }
              __p = v108;
              v148 = v101;
              v149 = &v107[4 * v106];
              if (v102)
                operator delete(v102);
            }
            else
            {
              *(_DWORD *)v94 = v98;
              v101 = v94 + 4;
            }
            v148 = v101;
            v95 = *v99;
            v94 = v101;
          }
        }
        while (v95 != v81);
        v143 = v79;
        v110 = v5[4].__end_;
        v111 = (char *)__p;
        if (v94 == __p)
        {
          v124 = v5[4].__end_;
          v111 = v94;
          if (!v94)
            goto LABEL_148;
        }
        else
        {
          v112 = 0;
          v113 = 0;
          v114 = v5[4].__begin_;
          v115 = -858993459 * ((unint64_t)((char *)v110 - (char *)v114) >> 2);
          v116 = (v94 - (_BYTE *)__p) >> 2;
          do
          {
            v117 = *(_DWORD *)&v111[4 * v112];
            v118 = v94 - 4;
            v119 = &v111[4 * v113 - 4];
            if (v113)
            {
              v120 = v113;
            }
            else
            {
              v119 = v118;
              v120 = v116;
            }
            v121 = v115 - 1 + v120;
            v122 = v114[5 * *(unsigned int *)v119];
            v123 = v114[5 * v117 + 2];
            if (v110 >= v146->__value_)
            {
              v125 = 0xCCCCCCCCCCCCCCCDLL * (v110 - v114);
              v126 = v125 + 1;
              if (v125 + 1 > 0xCCCCCCCCCCCCCCCLL)
                goto LABEL_165;
              if (0x999999999999999ALL * (v146->__value_ - v114) > v126)
                v126 = 0x999999999999999ALL * (v146->__value_ - v114);
              if (0xCCCCCCCCCCCCCCCDLL * (v146->__value_ - v114) >= 0x666666666666666)
                v127 = 0xCCCCCCCCCCCCCCCLL;
              else
                v127 = v126;
              if (v127)
              {
                v128 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>((uint64_t)v146, v127);
                v110 = v5[4].__end_;
              }
              else
              {
                v128 = 0;
              }
              v129 = (int *)&v128[20 * v125];
              *v129 = v122;
              v129[1] = -1;
              v129[2] = v123;
              v129[3] = v121;
              v129[4] = v117;
              v130 = v5[4].__begin_;
              v131 = v129;
              if (v110 != v130)
              {
                do
                {
                  v132 = *(_OWORD *)(v110 - 5);
                  *(v131 - 1) = *(v110 - 1);
                  *(_OWORD *)(v131 - 5) = v132;
                  v131 -= 5;
                  v110 -= 5;
                }
                while (v110 != v130);
                v110 = v5[4].__begin_;
              }
              v124 = v129 + 5;
              v5[4].__begin_ = v131;
              v5[4].__end_ = v129 + 5;
              v5[4].__end_cap_.__value_ = (int *)&v128[20 * v127];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *v110 = v122;
              v110[1] = -1;
              v110[2] = v123;
              v110[3] = v121;
              v124 = v110 + 5;
              v110[4] = v117;
            }
            v5[4].__end_ = v124;
            v114 = v5[4].__begin_;
            v114[5 * v117 + 4] = v113 + v115;
            v111 = (char *)__p;
            v94 = v148;
            v116 = (v148 - (_BYTE *)__p) >> 2;
            v110 = v124;
            v112 = ++v113;
          }
          while (v116 > v113);
          if (!__p)
            goto LABEL_148;
        }
        v148 = v111;
        operator delete(v111);
        v124 = v5[4].__end_;
LABEL_148:
        v77 = v5[4].__begin_;
        v78 = (char *)v124 - (char *)v77;
        v72 = v136;
        v79 = v143;
      }
      while (v124 != v77);
    }
LABEL_152:
    if ((_DWORD)v72)
    {
      v133 = 0;
      while (1)
      {
        __p = 0;
        v148 = 0;
        v149 = 0;
        geom::mesh_connectivity::get_incident_edges_to_vertex((uint64_t)v5, v133, (uint64_t)&__p);
        v134 = (char *)__p;
        if (*((_DWORD *)v150 + v133) != (v148 - (_BYTE *)__p) >> 2)
          break;
        if (__p)
        {
          v148 = (char *)__p;
          operator delete(__p);
        }
        if (v72 == ++v133)
          goto LABEL_160;
      }
      LOBYTE(v5[5].__begin_) = 0;
      if (v134)
      {
        v148 = v134;
        operator delete(v134);
      }
    }
  }
LABEL_160:
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v153);
  return v5;
}

uint64_t geom::mesh_connectivity::vertex_count(geom::mesh_connectivity *this)
{
  return (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
}

uint64_t geom::mesh_connectivity::face_count(geom::mesh_connectivity *this)
{
  return (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2;
}

uint64_t geom::mesh_connectivity::edge_count(geom::mesh_connectivity *this)
{
  return (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2;
}

uint64_t geom::mesh_connectivity::boundary_count(geom::mesh_connectivity *this)
{
  return (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 2;
}

uint64_t geom::mesh_connectivity::is_manifold(geom::mesh_connectivity *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t geom::mesh_connectivity::is_oriented(geom::mesh_connectivity *this)
{
  return *((unsigned __int8 *)this + 121);
}

uint64_t geom::mesh_connectivity::is_triangle(geom::mesh_connectivity *this)
{
  return *((unsigned __int8 *)this + 122);
}

BOOL geom::mesh_connectivity::is_boundary_vertex(geom::mesh_connectivity *this, unsigned int a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (!*((_BYTE *)this + 120))
    return 0;
  if (!*((_BYTE *)this + 121))
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)this + 4 * a2);
  if ((_DWORD)v2 == -1)
    return 0;
  v4 = *((_QWORD *)this + 12);
  v5 = *(unsigned int *)(*(_QWORD *)this + 4 * a2);
  do
  {
    v6 = *(_DWORD *)(v4 + 20 * v5 + 4);
    result = v6 == -1;
    if (v6 == -1)
      break;
    v5 = *(unsigned int *)(v4 + 20 * *(unsigned int *)(v4 + 20 * v5 + 16) + 12);
  }
  while (v5 != v2);
  return result;
}

void geom::mesh_connectivity::get_adjacent_vertices_to_vertex(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int *v3;
  unint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  unsigned int v31;

  v3 = *(unsigned int **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (*(_BYTE *)(a1 + 120) && *(_BYTE *)(a1 + 121))
  {
    v8 = (_QWORD *)(a3 + 16);
    v7 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v3 >= v7)
    {
      v10 = v7 - (_QWORD)v3;
      v11 = v10 >> 1;
      if ((unint64_t)(v10 >> 1) <= 1)
        v11 = 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      v13 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v12);
      v14 = *(unsigned int **)a3;
      v15 = *(unsigned int **)(a3 + 8);
      v17 = &v13[v16];
      *v13 = a2;
      v9 = v13 + 1;
      while (v15 != v14)
      {
        v18 = *--v15;
        *--v13 = v18;
      }
      *(_QWORD *)a3 = v13;
      *(_QWORD *)(a3 + 8) = v9;
      *(_QWORD *)(a3 + 16) = v17;
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v3 = a2;
      v9 = v3 + 1;
    }
    *(_QWORD *)(a3 + 8) = v9;
    v19 = *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
    if ((_DWORD)v19 != -1)
    {
      v20 = *(_QWORD *)(a1 + 96);
      do
      {
        v21 = (unsigned int *)(v20 + 20 * v19);
        if ((unint64_t)v9 >= *v8)
        {
          v23 = *(unsigned int **)a3;
          v24 = ((uint64_t)v9 - *(_QWORD *)a3) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            abort();
          v26 = *v8 - (_QWORD)v23;
          if (v26 >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v8, v27);
            v23 = *(unsigned int **)a3;
            v9 = *(unsigned int **)(a3 + 8);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[4 * v24];
          *(_DWORD *)v29 = *v21;
          v22 = (unsigned int *)(v29 + 4);
          while (v9 != v23)
          {
            v30 = *--v9;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          *(_QWORD *)a3 = v29;
          *(_QWORD *)(a3 + 8) = v22;
          *(_QWORD *)(a3 + 16) = &v28[4 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v9 = *v21;
          v22 = v9 + 1;
        }
        *(_QWORD *)(a3 + 8) = v22;
        v31 = *(_DWORD *)(v20 + 20 * v19 + 16);
        v20 = *(_QWORD *)(a1 + 96);
        v19 = *(unsigned int *)(v20 + 20 * v31 + 12);
        v9 = v22;
      }
      while (v19 != *(_DWORD *)(*(_QWORD *)a1 + 4 * a2));
    }
  }
}

void geom::mesh_connectivity::get_incident_faces_to_vertex(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;

  v3 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (*((_BYTE *)a1 + 120))
  {
    if (*((_BYTE *)a1 + 121))
    {
      v5 = *a1;
      v6 = *(unsigned int *)(*a1 + 4 * a2);
      if ((_DWORD)v6 != -1)
      {
        v8 = (_QWORD *)(a3 + 16);
        v9 = a1[12];
        v10 = a2;
        do
        {
          v11 = v9 + 20 * v6;
          v14 = *(_DWORD *)(v11 + 4);
          v13 = (int *)(v11 + 4);
          v12 = v14;
          if (v14 == -1)
          {
            v16 = v9;
          }
          else
          {
            if ((unint64_t)v3 >= *v8)
            {
              v17 = *(_DWORD **)a3;
              v18 = ((uint64_t)v3 - *(_QWORD *)a3) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                abort();
              v20 = *v8 - (_QWORD)v17;
              if (v20 >> 1 > v19)
                v19 = v20 >> 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v8, v21);
                v17 = *(_DWORD **)a3;
                v3 = *(_DWORD **)(a3 + 8);
                v12 = *v13;
              }
              else
              {
                v22 = 0;
              }
              v23 = &v22[4 * v18];
              *(_DWORD *)v23 = v12;
              v15 = v23 + 4;
              while (v3 != v17)
              {
                v24 = *--v3;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *(_QWORD *)a3 = v23;
              *(_QWORD *)(a3 + 8) = v15;
              *(_QWORD *)(a3 + 16) = &v22[4 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *v3 = v12;
              v15 = v3 + 1;
            }
            *(_QWORD *)(a3 + 8) = v15;
            v16 = a1[12];
            v3 = v15;
            v5 = *a1;
          }
          v6 = *(unsigned int *)(v16 + 20 * *(unsigned int *)(v9 + 20 * v6 + 16) + 12);
          v9 = v16;
        }
        while (v6 != *(_DWORD *)(v5 + 4 * v10));
      }
    }
  }
}

void geom::mesh_connectivity::get_incident_edges_to_vertex(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  unsigned int v20;

  v3 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(a1 + 121))
    {
      v5 = *(unsigned int *)(*(_QWORD *)a1 + 4 * a2);
      if ((_DWORD)v5 != -1)
      {
        v7 = (_QWORD *)(a3 + 16);
        v8 = *(_QWORD *)(a1 + 96);
        v9 = a2;
        do
        {
          v10 = (_DWORD *)(v8 + 20 * v5 + 8);
          if ((unint64_t)v3 >= *v7)
          {
            v12 = *(_DWORD **)a3;
            v13 = ((uint64_t)v3 - *(_QWORD *)a3) >> 2;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62)
              abort();
            v15 = *v7 - (_QWORD)v12;
            if (v15 >> 1 > v14)
              v14 = v15 >> 1;
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
              v16 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v16 = v14;
            if (v16)
            {
              v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v7, v16);
              v12 = *(_DWORD **)a3;
              v3 = *(_DWORD **)(a3 + 8);
            }
            else
            {
              v17 = 0;
            }
            v18 = &v17[4 * v13];
            *(_DWORD *)v18 = *v10;
            v11 = v18 + 4;
            while (v3 != v12)
            {
              v19 = *--v3;
              *((_DWORD *)v18 - 1) = v19;
              v18 -= 4;
            }
            *(_QWORD *)a3 = v18;
            *(_QWORD *)(a3 + 8) = v11;
            *(_QWORD *)(a3 + 16) = &v17[4 * v16];
            if (v12)
              operator delete(v12);
          }
          else
          {
            *v3 = *v10;
            v11 = v3 + 1;
          }
          *(_QWORD *)(a3 + 8) = v11;
          v20 = *(_DWORD *)(v8 + 20 * v5 + 16);
          v8 = *(_QWORD *)(a1 + 96);
          v5 = *(unsigned int *)(v8 + 20 * v20 + 12);
          v3 = v11;
        }
        while (v5 != *(_DWORD *)(*(_QWORD *)a1 + 4 * v9));
      }
    }
  }
}

void geom::mesh_connectivity::get_boundary_edges(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;

  v3 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (*(_BYTE *)(a1 + 120) && *(_BYTE *)(a1 + 121))
  {
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + 20 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * a2) + 16);
    v7 = (_QWORD *)(a3 + 16);
    v8 = v6;
    do
    {
      v9 = *(_QWORD *)(a1 + 96);
      v10 = (_DWORD *)(v9 + 20 * v8 + 8);
      if ((unint64_t)v3 >= *v7)
      {
        v12 = *(_DWORD **)a3;
        v13 = ((uint64_t)v3 - *(_QWORD *)a3) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          abort();
        v15 = *v7 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v7, v16);
          v12 = *(_DWORD **)a3;
          v3 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = *v10;
        v11 = v18 + 4;
        while (v3 != v12)
        {
          v19 = *--v3;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v11;
        *(_QWORD *)(a3 + 16) = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v3 = *v10;
        v11 = v3 + 1;
      }
      *(_QWORD *)(a3 + 8) = v11;
      v8 = *(unsigned int *)(v9 + 20 * v8 + 12);
      v3 = v11;
    }
    while (v6 != v8);
  }
}

uint64_t geom::mesh_connectivity::get_edge_vertices(uint64_t this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(this + 96);
  v5 = (unsigned int *)(v4 + 20 * *(unsigned int *)(*(_QWORD *)(this + 48) + 4 * a2));
  v6 = v5[4];
  v7 = *(_DWORD *)(v4 + 20 * v6);
  if (v7 >= *v5)
    v7 = *v5;
  *a3 = v7;
  v8 = *v5;
  v9 = *(_DWORD *)(v4 + 20 * v6);
  if (v8 > v9)
    v9 = v8;
  *a4 = v9;
  if (!*(_BYTE *)(this + 121) && *a3 == v9)
  {
    v10 = *(unsigned int *)(v4 + 20 * v6 + 12);
    do
    {
      v11 = v10;
      v10 = *(unsigned int *)(v4 + 20 * v10 + 12);
    }
    while (v10 != v6);
    v12 = *(_DWORD *)(v4 + 20 * v11);
    if (v12 >= v9)
      v12 = v9;
    *a3 = v12;
    v13 = *(_DWORD *)(v4 + 20 * v11);
    if (v9 > v13)
      v13 = v9;
    *a4 = v13;
  }
  return this;
}

uint64_t geom::mesh_connectivity::get_edge_opposite_vertices(uint64_t this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  *a3 = -1;
  *a4 = -1;
  if (*(_BYTE *)(this + 122))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(this + 48) + 4 * a2);
    v5 = *(_QWORD *)(this + 96);
    v6 = v5 + 20 * v4;
    v7 = *(_DWORD *)(v6 + 16);
    if (*(_DWORD *)(v6 + 4) != -1)
      *a3 = *(_DWORD *)(v5 + 20 * *(unsigned int *)(v5 + 20 * v4 + 12));
    if (*(_DWORD *)(v5 + 20 * v7 + 4) != -1)
      *a4 = *(_DWORD *)(v5 + 20 * *(unsigned int *)(v5 + 20 * v7 + 12));
  }
  return this;
}

void geom::mesh_connectivity::get_face_vertices(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  v6 = (_QWORD *)(a3 + 16);
  v7 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v8 = v5;
  do
  {
    v9 = *(_QWORD *)(a1 + 96);
    v10 = (_DWORD *)(v9 + 20 * v8);
    if ((unint64_t)v7 >= *v6)
    {
      v12 = *(_DWORD **)a3;
      v13 = ((uint64_t)v7 - *(_QWORD *)a3) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        abort();
      v15 = *v6 - (_QWORD)v12;
      if (v15 >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v16);
        v12 = *(_DWORD **)a3;
        v7 = *(_DWORD **)(a3 + 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      *(_DWORD *)v18 = *v10;
      v11 = v18 + 4;
      while (v7 != v12)
      {
        v19 = *--v7;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      *(_QWORD *)a3 = v18;
      *(_QWORD *)(a3 + 8) = v11;
      *(_QWORD *)(a3 + 16) = &v17[4 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v7 = *v10;
      v11 = v7 + 1;
    }
    *(_QWORD *)(a3 + 8) = v11;
    v8 = *(unsigned int *)(v9 + 20 * v8 + 12);
    v7 = v11;
  }
  while (v5 != v8);
}

void geom::mesh_connectivity::get_face_edges(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  v6 = (_QWORD *)(a3 + 16);
  v7 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v8 = v5;
  do
  {
    v9 = *(_QWORD *)(a1 + 96);
    v10 = (_DWORD *)(v9 + 20 * v8 + 8);
    if ((unint64_t)v7 >= *v6)
    {
      v12 = *(_DWORD **)a3;
      v13 = ((uint64_t)v7 - *(_QWORD *)a3) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        abort();
      v15 = *v6 - (_QWORD)v12;
      if (v15 >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v16);
        v12 = *(_DWORD **)a3;
        v7 = *(_DWORD **)(a3 + 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      *(_DWORD *)v18 = *v10;
      v11 = v18 + 4;
      while (v7 != v12)
      {
        v19 = *--v7;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      *(_QWORD *)a3 = v18;
      *(_QWORD *)(a3 + 8) = v11;
      *(_QWORD *)(a3 + 16) = &v17[4 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *v7 = *v10;
      v11 = v7 + 1;
    }
    *(_QWORD *)(a3 + 8) = v11;
    v8 = *(unsigned int *)(v9 + 20 * v8 + 12);
    v7 = v11;
  }
  while (v5 != v8);
}

uint64_t *std::unordered_map<`anonymous namespace'::edge_key,unsigned int,`anonymous namespace'::edge_key,std::equal_to<`anonymous namespace'::edge_key>,std::allocator<std::pair<`anonymous namespace'::edge_key const,unsigned int>>>::find[abi:nn180100](_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (result = *v8; result; result = (uint64_t *)*result)
  {
    v10 = result[1];
    if (v10 == v5)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3 && *((_DWORD *)result + 5) == (_DWORD)v4)
        return result;
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v2)
          v10 %= *(_QWORD *)&v2;
      }
      else
      {
        v10 &= *(_QWORD *)&v2 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return result;
}

char *std::unordered_map<`anonymous namespace'::edge_key,unsigned int,`anonymous namespace'::edge_key,std::equal_to<`anonymous namespace'::edge_key>,std::allocator<std::pair<`anonymous namespace'::edge_key const,unsigned int>>>::operator[](float *a1, unsigned int *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v36;

  v5 = *a2;
  v6 = a2[1];
  v7 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v5 && *((_DWORD *)v11 + 5) == (_DWORD)v6)
              return (char *)(v11 + 3);
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = *(_QWORD *)a2;
  *((_DWORD *)v11 + 6) = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[10];
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3)
      v16 = 0;
    v17 = (2 * v8) | !v16;
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v8)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[10]);
      if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_59;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_59:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_63;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v32)
  {
    *v11 = *v32;
LABEL_76:
    *v32 = v11;
    goto LABEL_77;
  }
  v33 = *((_QWORD *)a1 + 2);
  *v11 = v33;
  *((_QWORD *)a1 + 2) = v11;
  v31[v2] = a1 + 4;
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8)
        v34 %= v8;
    }
    else
    {
      v34 &= v8 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
  return (char *)(v11 + 3);
}

uint64_t geom_dual_contouring_uniform_3f(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float32x4_t a6, float32x4_t a7)
{
  void **v11;
  char **v12;
  double v13;
  double v14;
  float32x4_t v18[2];
  _QWORD v19[2];

  v11 = (void **)geom::collection_to_vector<float>(a4);
  v12 = (char **)geom::collection_to_vector<float>(a5);
  v19[0] = a1;
  v19[1] = a2;
  v18[0] = a6;
  v18[1] = a7;
  return geom::dual_contouring<float>::run((uint64_t)v19, v18, a3, v11, v12, *(double *)a7.i64, v13, *(double *)a6.i64, v14);
}

uint64_t geom::dual_contouring<float>::run(uint64_t a1, float32x4_t *a2, unsigned int a3, void **a4, char **a5, double a6, double a7, double a8, double a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t *v11;
  float32x4_t v13;
  int v14;
  float32x4_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  float32x4_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint32x4_t v42;
  unint64_t v43;
  float32x4_t *v44;
  _OWORD *f32;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  float32x4_t v54;
  uint64_t *v55;
  char **v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  unsigned __int16 v64;
  uint64_t **v65;
  char *v66;
  char *v67;
  _DWORD *v68;
  char *v69;
  _DWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  _DWORD *v106;
  int v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  int v116;
  char *v117;
  int v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  int v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  unsigned int v143;
  float32x4_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned __int16 v149;
  unsigned __int16 v150;
  int v151;
  int v152;
  char **v153;
  float32x4_t v154;
  unsigned int v155;
  float32x4_t v156;
  uint64_t v157;
  float32x4_t v158;
  float32x4_t v159;
  __int16 v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  _BYTE v164[38];
  int v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float v170;
  float32x4_t v171;
  __int16 v172;
  uint64_t v173;

  v173 = *MEMORY[0x24BDAC8D0];
  v9 = vsubq_f32(a2[1], *a2);
  *(float *)&a9 = fminf(fminf(v9.f32[0], v9.f32[2]), v9.f32[1]) / (float)a3;
  v10 = vcvtps_s32_f32(v9.f32[0] / *(float *)&a9);
  memset(v164, 0, sizeof(v164));
  v165 = 1065353216;
  if (v10)
  {
    v11 = a2;
    v143 = v10;
    v149 = 0;
    v145 = vcvtps_s32_f32(v9.f32[1] / *(float *)&a9);
    v155 = vcvtps_s32_f32(v9.f32[2] / *(float *)&a9);
    v146 = (uint64_t)(a4 + 2);
    v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
    v156 = v13;
    v152 = LODWORD(a9);
    do
    {
      if (v145)
      {
        v150 = 0;
        v13.f32[0] = *(float *)&a9 * (float)v149;
        v144 = v13;
        do
        {
          if (v155)
          {
            v14 = 0;
            v15 = v144;
            v15.f32[1] = *(float *)&a9 * (float)v150;
            v15.i32[2] = v144.i32[2];
            v154 = v15;
            do
            {
              v16 = 0;
              v17 = 0;
              v18 = v154;
              v18.f32[2] = *(float *)&a9 * (float)(unsigned __int16)v14;
              v158 = vaddq_f32(v18, *v11);
              do
              {
                v13.f32[0] = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vmlaq_f32(v158, v156, geom::dual_contouring<float>::vert_map[v16]));
                v19 = 1 << v16;
                if (v13.f32[0] <= 0.0)
                  LOBYTE(v19) = 0;
                v17 |= v19;
                ++v16;
              }
              while (v16 != 8);
              if ((v17 + 1) >= 2u)
              {
                v151 = v14;
                v20 = 0;
                v21 = 0;
                v22 = 0;
                v171 = 0uLL;
                v172 = 0;
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v23 = &byte_2289BE741;
                v170 = 0.0;
                do
                {
                  v24 = *(v23 - 1);
                  v25 = *v23;
                  v26 = (v17 >> v24) & 1;
                  v27 = (v17 >> v25) & 1;
                  if (v26 != v27)
                  {
                    v21 |= 1 << v20;
                    v163 = vmlaq_f32(v158, v156, geom::dual_contouring<float>::vert_map[v24]);
                    v162 = vmlaq_f32(v158, v156, geom::dual_contouring<float>::vert_map[v25]);
                    v161.i32[2] = 0;
                    v161.i64[0] = 0;
                    if (v26)
                      v28 = &v163;
                    else
                      v28 = &v162;
                    if (v27)
                      v29 = &v163;
                    else
                      v29 = &v162;
                    *(double *)v30.i64 = geom::dual_contouring<float>::compute_vertex_position(a1, v28, v29);
                    v161 = v30;
                    *(double *)v31.i64 = geom::dual_contouring<float>::compute_normal(a1, &v161);
                    v32 = vmulq_f32(v31, v161);
                    v32.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).u32[0];
                    v33 = vaddq_f32(v166, vmulq_n_f32(v31, v31.f32[0]));
                    v34 = vaddq_f32(v167, vmulq_lane_f32(v31, *(float32x2_t *)v31.f32, 1));
                    v35 = vaddq_f32(vmulq_laneq_f32(v31, v31, 2), v168);
                    v166.i32[2] = v33.i32[2];
                    v167.i32[2] = v34.i32[2];
                    v166.i64[0] = v33.i64[0];
                    v167.i64[0] = v34.i64[0];
                    v168.i32[2] = v35.i32[2];
                    v168.i64[0] = v35.i64[0];
                    v169 = vmlaq_n_f32(v169, v31, v32.f32[0]);
                    v170 = vmlas_n_f32(v170, v32.f32[0], v32.f32[0]);
                    v171 = vaddq_f32(v161, v171);
                    ++v172;
                    ++v22;
                  }
                  if (v20 > 0xA)
                    break;
                  v23 += 2;
                  ++v20;
                }
                while (v22 < 6);
                v162.i16[0] = v149;
                v14 = v151;
                v162.i16[1] = v150;
                v162.i16[2] = v151;
                v163.i32[0] = (unint64_t)((_BYTE *)a4[1] - (_BYTE *)*a4) >> 4;
                v163.i16[2] = v21;
                v163.i8[6] = v17;
                std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::__emplace_unique_key_args<geom::cell_coord,geom::cell_coord,geom::dual_contouring<float>::cell>((uint64_t)v164, (unsigned __int16 *)&v162, (uint64_t)&v162, &v163);
                *(double *)v13.i64 = geom::qef<float>::solve((uint64_t)&v166, v36, v37, v38, v39, v40, v41);
                v42 = (uint32x4_t)vorrq_s8((int8x16_t)vcgtq_f32(v158, v13), (int8x16_t)vcgtq_f32(v13, vaddq_f32(v156, v158)));
                v42.i32[3] = v42.i32[2];
                v42.i32[0] = vmaxvq_u32(v42);
                if (v42.i32[0] < 0)
                {
                  v42.i16[0] = v172;
                  *(float *)v42.i32 = (float)v42.u32[0];
                  v13 = vdivq_f32(v171, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 0));
                }
                v44 = (float32x4_t *)a4[1];
                v43 = (unint64_t)a4[2];
                v11 = a2;
                if ((unint64_t)v44 >= v43)
                {
                  v46 = ((char *)v44 - (_BYTE *)*a4) >> 4;
                  if ((unint64_t)(v46 + 1) >> 60)
LABEL_193:
                    abort();
                  v47 = v43 - (_QWORD)*a4;
                  v48 = v47 >> 3;
                  if (v47 >> 3 <= (unint64_t)(v46 + 1))
                    v48 = v46 + 1;
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
                    v49 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v49 = v48;
                  if (v49)
                  {
                    v159 = v13;
                    v50 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v146, v49);
                    v13 = v159;
                  }
                  else
                  {
                    v50 = 0;
                  }
                  v51 = (float32x4_t *)&v50[16 * v46];
                  *v51 = v13;
                  f32 = (_OWORD *)v51[1].f32;
                  v53 = (float32x4_t *)*a4;
                  v52 = (float32x4_t *)a4[1];
                  if (v52 != *a4)
                  {
                    do
                    {
                      v54 = v52[-1];
                      --v52;
                      v13 = v54;
                      v51[-1] = v54;
                      --v51;
                    }
                    while (v52 != v53);
                    v52 = (float32x4_t *)*a4;
                  }
                  *a4 = v51;
                  a4[1] = f32;
                  a4[2] = &v50[16 * v49];
                  if (v52)
                    operator delete(v52);
                }
                else
                {
                  *v44 = v13;
                  f32 = (_OWORD *)v44[1].f32;
                }
                a4[1] = f32;
              }
              ++v14;
              LODWORD(a9) = v152;
            }
            while (v155 > (unsigned __int16)v14);
          }
          ++v150;
        }
        while (v145 > v150);
      }
      ++v149;
    }
    while (v143 > v149);
    v55 = *(uint64_t **)&v164[16];
    v56 = a5;
    v57 = v143;
    v58 = v145;
    if (*(_QWORD *)&v164[16])
    {
      v153 = a5 + 2;
      do
      {
        v59 = 0;
        v60 = (char *)&geom::dual_contouring<float>::edge_to_cell_map;
        do
        {
          if (((1 << v59) & *((unsigned __int16 *)v55 + 14)) != 0)
          {
            v160 = (1 << v59) & *((_WORD *)v55 + 14);
            v61 = 0;
            v167 = 0uLL;
            v62 = 1;
            v166 = (float32x4_t)(unint64_t)(v55 + 3);
            do
            {
              v163.i16[0] = *((_WORD *)v55 + 8) + v60[v61];
              v63 = *((_WORD *)v55 + 9) + v60[v61 + 1];
              v163.i16[1] = v63;
              v64 = *((_WORD *)v55 + 10) + v60[v61 + 2];
              v163.i16[2] = v64;
              if (v57 > v163.u16[0] && v58 > v63 && v155 > v64)
              {
                v65 = std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::find<geom::cell_coord>(v164, (unsigned __int16 *)&v163);
                if (!v65)
                  goto LABEL_193;
                v166.i64[v62++] = (uint64_t)(v65 + 3);
              }
              v61 += 3;
            }
            while (v61 != 9);
            if (v62 > 3u)
            {
              v67 = v56[1];
              v66 = v56[2];
              if (((*((unsigned __int8 *)v55 + 30) >> *((_BYTE *)&geom::dual_contouring<float>::edge_vertex_map
                                                       + 2 * v59
                                                       + 1)) & 1) != 0)
              {
                v68 = (_DWORD *)v167.i64[1];
                if (v67 >= v66)
                {
                  v72 = *v56;
                  v73 = (v67 - *v56) >> 2;
                  v74 = v73 + 1;
                  if ((unint64_t)(v73 + 1) >> 62)
                    goto LABEL_193;
                  v75 = v66 - v72;
                  if (v75 >> 1 > v74)
                    v74 = v75 >> 1;
                  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                    v76 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v76 = v74;
                  if (v76)
                  {
                    v77 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v76);
                    v72 = *v56;
                    v67 = v56[1];
                  }
                  else
                  {
                    v77 = 0;
                  }
                  v84 = &v77[4 * v73];
                  *(_DWORD *)v84 = *v68;
                  v69 = v84 + 4;
                  while (v67 != v72)
                  {
                    v85 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v84 - 1) = v85;
                    v84 -= 4;
                  }
                  v66 = &v77[4 * v76];
                  *v56 = v84;
                  v56[1] = v69;
                  v56[2] = v66;
                  if (v72)
                  {
                    operator delete(v72);
                    v66 = *v153;
                  }
                }
                else
                {
                  *(_DWORD *)v67 = *(_DWORD *)v167.i64[1];
                  v69 = v67 + 4;
                }
                v157 = (uint64_t)v68;
                v56[1] = v69;
                v86 = v167.i64[0];
                if (v69 >= v66)
                {
                  v88 = *v56;
                  v89 = (v69 - *v56) >> 2;
                  v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 62)
                    goto LABEL_193;
                  v91 = v66 - v88;
                  if (v91 >> 1 > v90)
                    v90 = v91 >> 1;
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                    v92 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v92 = v90;
                  if (v92)
                  {
                    v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v92);
                    v88 = *v56;
                    v69 = v56[1];
                  }
                  else
                  {
                    v93 = 0;
                  }
                  v94 = &v93[4 * v89];
                  *(_DWORD *)v94 = *(_DWORD *)v86;
                  v87 = v94 + 4;
                  while (v69 != v88)
                  {
                    v95 = *((_DWORD *)v69 - 1);
                    v69 -= 4;
                    *((_DWORD *)v94 - 1) = v95;
                    v94 -= 4;
                  }
                  v66 = &v93[4 * v92];
                  *v56 = v94;
                  v56[1] = v87;
                  v56[2] = v66;
                  if (v88)
                  {
                    operator delete(v88);
                    v66 = *v153;
                  }
                }
                else
                {
                  *(_DWORD *)v69 = *(_DWORD *)v167.i64[0];
                  v87 = v69 + 4;
                }
                v56[1] = v87;
                v96 = v166.i64[1];
                if (v87 >= v66)
                {
                  v98 = *v56;
                  v99 = (v87 - *v56) >> 2;
                  v100 = v99 + 1;
                  if ((unint64_t)(v99 + 1) >> 62)
                    goto LABEL_193;
                  v101 = v66 - v98;
                  if (v101 >> 1 > v100)
                    v100 = v101 >> 1;
                  if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                    v102 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v102 = v100;
                  if (v102)
                  {
                    v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v102);
                    v98 = *v56;
                    v87 = v56[1];
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = &v103[4 * v99];
                  *(_DWORD *)v104 = *(_DWORD *)v96;
                  v97 = v104 + 4;
                  while (v87 != v98)
                  {
                    v105 = *((_DWORD *)v87 - 1);
                    v87 -= 4;
                    *((_DWORD *)v104 - 1) = v105;
                    v104 -= 4;
                  }
                  v66 = &v103[4 * v102];
                  *v56 = v104;
                  v56[1] = v97;
                  v56[2] = v66;
                  if (v98)
                  {
                    operator delete(v98);
                    v66 = *v153;
                  }
                }
                else
                {
                  *(_DWORD *)v87 = *(_DWORD *)v166.i64[1];
                  v97 = v87 + 4;
                }
                v56[1] = v97;
                v106 = (_DWORD *)v166.i64[0];
                if (v97 < v66)
                {
                  v107 = *(_DWORD *)v166.i64[0];
                  goto LABEL_175;
                }
                v108 = *v56;
                v109 = (v97 - *v56) >> 2;
                v110 = v109 + 1;
                if ((unint64_t)(v109 + 1) >> 62)
                  goto LABEL_193;
                v111 = v66 - v108;
                if (v111 >> 1 > v110)
                  v110 = v111 >> 1;
                if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
                  v112 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v112 = v110;
                if (v112)
                {
                  v113 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v112);
                  v108 = *a5;
                  v97 = a5[1];
                }
                else
                {
                  v113 = 0;
                }
                v114 = &v113[4 * v109];
                *(_DWORD *)v114 = *v106;
                v115 = v114 + 4;
                if (v97 == v108)
                {
                  v56 = a5;
                }
                else
                {
                  v56 = a5;
                  do
                  {
                    v116 = *((_DWORD *)v97 - 1);
                    v97 -= 4;
                    *((_DWORD *)v114 - 1) = v116;
                    v114 -= 4;
                  }
                  while (v97 != v108);
                }
LABEL_133:
                *v56 = v114;
                v56[1] = v115;
                v56[2] = &v113[4 * v112];
                if (v108)
                  operator delete(v108);
              }
              else
              {
                v70 = (_DWORD *)v166.i64[0];
                if (v67 >= v66)
                {
                  v78 = *v56;
                  v79 = (v67 - *v56) >> 2;
                  v80 = v79 + 1;
                  if ((unint64_t)(v79 + 1) >> 62)
                    goto LABEL_193;
                  v81 = v66 - v78;
                  if (v81 >> 1 > v80)
                    v80 = v81 >> 1;
                  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                    v82 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v82 = v80;
                  if (v82)
                  {
                    v83 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v82);
                    v78 = *v56;
                    v67 = v56[1];
                  }
                  else
                  {
                    v83 = 0;
                  }
                  v117 = &v83[4 * v79];
                  *(_DWORD *)v117 = *v70;
                  v71 = v117 + 4;
                  while (v67 != v78)
                  {
                    v118 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v117 - 1) = v118;
                    v117 -= 4;
                  }
                  v66 = &v83[4 * v82];
                  *v56 = v117;
                  v56[1] = v71;
                  v56[2] = v66;
                  if (v78)
                  {
                    operator delete(v78);
                    v66 = *v153;
                  }
                }
                else
                {
                  *(_DWORD *)v67 = *(_DWORD *)v166.i64[0];
                  v71 = v67 + 4;
                }
                v56[1] = v71;
                v96 = v166.i64[1];
                if (v71 >= v66)
                {
                  v120 = *v56;
                  v121 = (v71 - *v56) >> 2;
                  v122 = v121 + 1;
                  if ((unint64_t)(v121 + 1) >> 62)
                    goto LABEL_193;
                  v123 = v66 - v120;
                  if (v123 >> 1 > v122)
                    v122 = v123 >> 1;
                  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                    v124 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v122;
                  if (v124)
                  {
                    v125 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v124);
                    v120 = *v56;
                    v71 = v56[1];
                  }
                  else
                  {
                    v125 = 0;
                  }
                  v126 = &v125[4 * v121];
                  *(_DWORD *)v126 = *(_DWORD *)v96;
                  v119 = v126 + 4;
                  while (v71 != v120)
                  {
                    v127 = *((_DWORD *)v71 - 1);
                    v71 -= 4;
                    *((_DWORD *)v126 - 1) = v127;
                    v126 -= 4;
                  }
                  v66 = &v125[4 * v124];
                  *v56 = v126;
                  v56[1] = v119;
                  v56[2] = v66;
                  if (v120)
                  {
                    operator delete(v120);
                    v66 = *v153;
                  }
                }
                else
                {
                  *(_DWORD *)v71 = *(_DWORD *)v166.i64[1];
                  v119 = v71 + 4;
                }
                v56[1] = v119;
                v86 = v167.i64[0];
                if (v119 >= v66)
                {
                  v128 = *v56;
                  v129 = (v119 - *v56) >> 2;
                  v130 = v129 + 1;
                  if ((unint64_t)(v129 + 1) >> 62)
                    goto LABEL_193;
                  v131 = v66 - v128;
                  if (v131 >> 1 > v130)
                    v130 = v131 >> 1;
                  if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
                    v132 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v132 = v130;
                  if (v132)
                  {
                    v133 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v132);
                    v128 = *v56;
                    v119 = v56[1];
                  }
                  else
                  {
                    v133 = 0;
                  }
                  v134 = &v133[4 * v129];
                  *(_DWORD *)v134 = *(_DWORD *)v86;
                  v97 = v134 + 4;
                  while (v119 != v128)
                  {
                    v135 = *((_DWORD *)v119 - 1);
                    v119 -= 4;
                    *((_DWORD *)v134 - 1) = v135;
                    v134 -= 4;
                  }
                  v66 = &v133[4 * v132];
                  *v56 = v134;
                  v56[1] = v97;
                  v56[2] = v66;
                  if (v128)
                  {
                    operator delete(v128);
                    v66 = *v153;
                  }
                }
                else
                {
                  *(_DWORD *)v119 = *(_DWORD *)v167.i64[0];
                  v97 = v119 + 4;
                }
                v56[1] = v97;
                v157 = v167.i64[1];
                if (v97 >= v66)
                {
                  v108 = *v56;
                  v137 = (v97 - *v56) >> 2;
                  v138 = v137 + 1;
                  if ((unint64_t)(v137 + 1) >> 62)
                    goto LABEL_193;
                  v139 = v66 - v108;
                  if (v139 >> 1 > v138)
                    v138 = v139 >> 1;
                  if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
                    v112 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v112 = v138;
                  if (v112)
                  {
                    v113 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v153, v112);
                    v108 = *v56;
                    v97 = v56[1];
                  }
                  else
                  {
                    v113 = 0;
                  }
                  v114 = &v113[4 * v137];
                  *(_DWORD *)v114 = *(_DWORD *)v157;
                  v115 = v114 + 4;
                  while (v97 != v108)
                  {
                    v140 = *((_DWORD *)v97 - 1);
                    v97 -= 4;
                    *((_DWORD *)v114 - 1) = v140;
                    v114 -= 4;
                  }
                  goto LABEL_133;
                }
                v107 = *(_DWORD *)v167.i64[1];
LABEL_175:
                *(_DWORD *)v97 = v107;
                v115 = v97 + 4;
              }
              v56[1] = v115;
              *((_WORD *)v55 + 14) &= ~v160;
              v136 = (char *)&geom::dual_contouring<float>::edge_to_edge_map + 3 * v59;
              *(_WORD *)(v96 + 4) &= ~(unsigned __int16)(1 << *v136);
              *(_WORD *)(v86 + 4) &= ~(unsigned __int16)(1 << v136[1]);
              *(_WORD *)(v157 + 4) &= ~(1 << v136[2]);
              v57 = v143;
              v58 = v145;
            }
          }
          ++v59;
          v60 += 9;
        }
        while (v59 != 12);
        v55 = (uint64_t *)*v55;
      }
      while (v55);
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v164);
}

uint64_t geom_dual_contouring_uniform_3d(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void **v11;
  char **v12;
  float64x2_t v13;
  __int128 v14;
  double v15;
  double v16;
  float64x2_t v17;
  float64x2_t v19[2];
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];

  v11 = (void **)geom::collection_to_vector<float>(a5);
  v12 = (char **)geom::collection_to_vector<float>(a6);
  v22[0] = a1;
  v22[1] = a2;
  v13 = *(float64x2_t *)(a4 + 16);
  v19[0] = *(float64x2_t *)a4;
  v19[1] = v13;
  v14 = *(_OWORD *)(a4 + 48);
  v20 = *(_OWORD *)(a4 + 32);
  v21 = v14;
  return geom::dual_contouring<double>::run(v22, v19, a3, v11, v12, *(double *)&v20, *(double *)&v14, v15, v16, v17);
}

uint64_t geom::dual_contouring<double>::run(_QWORD *a1, float64x2_t *a2, unsigned int a3, void **a4, char **a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  float64x2_t *v14;
  unsigned int v16;
  float64x2_t v17;
  float64x2_t v18;
  unsigned __int16 v19;
  int8x16_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  float64x2_t v23;
  int8x16_t v24;
  unint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  double (*v32)(_OWORD *, uint64_t);
  double v33;
  int v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  float64x2_t *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  int64x2_t v58;
  int8x8_t v59;
  int64x2_t v60;
  unint64_t v61;
  float64x2_t *v62;
  _OWORD *f64;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  float64x2_t *v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t *v72;
  float64x2_t v73;
  float64x2_t v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unsigned __int16 v79;
  unsigned __int16 v80;
  unsigned __int16 v81;
  uint64_t **v82;
  char *v83;
  char *v84;
  float64_t v85;
  char *v86;
  float64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  int v102;
  float64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int v112;
  float64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  int v122;
  float64_t v123;
  int v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  int v133;
  char *v134;
  int v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  int v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  int v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  double v160;
  uint64_t v161;
  float64x2_t v162;
  unsigned int v165;
  unsigned __int16 v166;
  unsigned __int16 v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64_t v174;
  float64_t v175;
  float64x2_t v176;
  float64x2_t v177;
  char **v178;
  float64_t v179;
  float64x2_t v180;
  __int16 v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186[2];
  float64x2_t v187;
  float64x2_t v188;
  _OWORD v189[2];
  _OWORD v190[2];
  _OWORD v191[2];
  _BYTE v192[38];
  int v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  double v202;
  float64x2_t v203;
  float64x2_t v204;
  __int16 v205;
  uint64_t v206;

  v206 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v10 = *(_OWORD *)&vsubq_f64(a2[3], a2[1]);
  v13 = vsubq_f64(a2[2], *a2);
  v11 = v13.f64[1];
  v12 = fmin(fmin(v13.f64[0], v10), v13.f64[1]);
  a10.f64[0] = v12 / (double)a3;
  v13.f64[1] = 0.0;
  memset(v192, 0, sizeof(v192));
  v193 = 1065353216;
  v169 = vcvtpd_s64_f64(v13.f64[0] / a10.f64[0]);
  if (v169)
  {
    v14 = a2;
    v166 = 0;
    v168 = vcvtpd_s64_f64(v11 / a10.f64[0]);
    v16 = vcvtpd_s64_f64(v10 / a10.f64[0]);
    v161 = (uint64_t)(a4 + 2);
    v17.f64[0] = v12 / (double)a3;
    v17.f64[1] = v17.f64[0];
    v18.f64[0] = v17.f64[0];
    v18.f64[1] = v17.f64[0];
    v162 = v18;
    v18.f64[0] = v17.f64[0];
    v18.f64[1] = v17.f64[0];
    v171 = v18;
    v172 = v17;
    v165 = v16;
    v173 = a10;
    do
    {
      if (v168)
      {
        v167 = 0;
        v160 = a10.f64[0] * (double)v166;
        do
        {
          if (v16)
          {
            v19 = 0;
            *(double *)v20.i64 = v160;
            *(double *)&v20.i64[1] = a10.f64[0] * (double)v167;
            v170 = vextq_s8(v20, v20, 8uLL).u64[0];
            do
            {
              v21 = 0;
              v22 = 0;
              v13.f64[0] = a10.f64[0] * (double)v19;
              v23.f64[0] = v160;
              *(_QWORD *)&v23.f64[1] = v170;
              v24 = (int8x16_t)vaddq_f64(v23, *v14);
              v25 = vextq_s8(v24, v24, 8uLL).u64[0];
              v26 = vaddq_f64(v13, v14[1]);
              v176 = v26;
              v179 = *(double *)v24.i64;
              v174 = *(double *)&v25;
              do
              {
                v27 = (float64x2_t *)((char *)&geom::dual_contouring<double>::vert_map + 32 * v21);
                *(_QWORD *)&v28.f64[0] = v24.i64[0];
                *(_QWORD *)&v28.f64[1] = v25;
                v29 = vmlaq_f64(v28, v17, *v27);
                v30 = vmlaq_f64(v26, a10, v27[1]);
                v32 = (double (*)(_OWORD *, uint64_t))*a1;
                v31 = a1[1];
                v191[0] = v29;
                v191[1] = v30;
                v33 = v32(v191, v31);
                v25 = *(_QWORD *)&v174;
                v26 = v176;
                *(float64_t *)v24.i64 = v179;
                v17 = v172;
                a10 = v173;
                v34 = 1 << v21;
                if (v33 <= 0.0)
                  LOBYTE(v34) = 0;
                v22 |= v34;
                ++v21;
              }
              while (v21 != 8);
              if ((v22 + 1) >= 2u)
              {
                v35 = 0;
                v36 = 0;
                v37 = 0;
                v205 = 0;
                v203 = 0u;
                v204 = 0u;
                v194 = 0u;
                v195 = 0u;
                v196 = 0u;
                v197 = 0u;
                v198 = 0u;
                v199 = 0u;
                v200 = 0u;
                v201 = 0u;
                v38 = &byte_2289BE901;
                v202 = 0.0;
                do
                {
                  v39 = *(v38 - 1);
                  v40 = *v38;
                  v41 = (v22 >> v39) & 1;
                  v42 = (v22 >> v40) & 1;
                  if (v41 != v42)
                  {
                    v36 |= 1 << v35;
                    v43 = (float64x2_t *)((char *)&geom::dual_contouring<double>::vert_map + 32 * v39);
                    v44.f64[0] = v179;
                    v44.f64[1] = v174;
                    v45 = vmlaq_f64(v176, v173, v43[1]);
                    v190[0] = vmlaq_f64(v44, v171, *v43);
                    v190[1] = v45;
                    v46 = (float64x2_t *)((char *)&geom::dual_contouring<double>::vert_map + 32 * v40);
                    v47 = vmlaq_f64(v176, v173, v46[1]);
                    v189[0] = vmlaq_f64(v44, v171, *v46);
                    v189[1] = v47;
                    v188.f64[0] = 0.0;
                    v187 = 0uLL;
                    if (v41)
                      v48 = (float64x2_t *)v190;
                    else
                      v48 = (float64x2_t *)v189;
                    if (v42)
                      v49 = (float64x2_t *)v190;
                    else
                      v49 = (float64x2_t *)v189;
                    geom::dual_contouring<double>::compute_vertex_position((uint64_t)a1, v48, v49, v186);
                    v187 = v186[0];
                    v188 = v186[1];
                    geom::dual_contouring<double>::compute_normal((uint64_t)a1, &v187, &v184);
                    v50 = v184;
                    v51 = vmulq_f64(v185, v188);
                    v51.f64[0] = v51.f64[0] + vaddvq_f64(vmulq_f64(v184, v187));
                    v194 = vaddq_f64(v194, vmulq_n_f64(v50, v50.f64[0]));
                    v195 = vaddq_f64(v195, vmulq_f64(v185, v184));
                    v196 = vaddq_f64(v196, vmulq_laneq_f64(v50, v50, 1));
                    v197 = vaddq_f64(v197, vmulq_laneq_f64(v185, v184, 1));
                    v198 = vaddq_f64(vmulq_n_f64(v184, v185.f64[0]), v198);
                    v199 = vaddq_f64(vmulq_f64(v185, v185), v199);
                    v200 = vmlaq_n_f64(v200, v184, v51.f64[0]);
                    v201 = vmlaq_f64(v201, v51, v185);
                    v202 = v202 + v51.f64[0] * v51.f64[0];
                    v203 = vaddq_f64(v187, v203);
                    v204 = vaddq_f64(v188, v204);
                    ++v205;
                    ++v37;
                  }
                  if (v35 > 0xA)
                    break;
                  v38 += 2;
                  ++v35;
                }
                while (v37 < 6);
                LOWORD(v189[0]) = v166;
                WORD1(v189[0]) = v167;
                WORD2(v189[0]) = v19;
                LODWORD(v190[0]) = (unint64_t)((_BYTE *)a4[1] - (_BYTE *)*a4) >> 5;
                WORD2(v190[0]) = v36;
                BYTE6(v190[0]) = v22;
                std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::__emplace_unique_key_args<geom::cell_coord,geom::cell_coord,geom::dual_contouring<float>::cell>((uint64_t)v192, (unsigned __int16 *)v189, (uint64_t)v189, v190);
                geom::qef<double>::solve((uint64_t)&v194, v52, v53, v54, &v182);
                v56 = v182;
                v55 = v183;
                v57.f64[0] = v179;
                a10 = v173;
                v57.f64[1] = v174;
                v58 = (int64x2_t)vorrq_s8((int8x16_t)vcgtq_f64(v57, v182), (int8x16_t)vcgtq_f64(v182, vaddq_f64(v162, v57)));
                v59 = vorr_s8((int8x8_t)vmovn_s64(vcgtq_f64(v176, v183)), (int8x8_t)vmovn_s64(vcgtq_f64(v183, vaddq_f64(v173, v176))));
                v60.i64[0] = v59.u32[0];
                v60.i64[1] = v59.u32[1];
                v13 = (float64x2_t)vdupq_laneq_s64(v58, 1);
                if ((vorrq_s8((int8x16_t)v13, vorrq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v60, 0x3FuLL)), (int8x16_t)v58)).u64[0] & 0x8000000000000000) != 0)
                {
                  LOWORD(v13.f64[0]) = v205;
                  v13.f64[0] = (double)*(unint64_t *)&v13.f64[0];
                  v55 = vdivq_f64(v204, v13);
                  v56 = vdivq_f64(v203, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0));
                }
                v62 = (float64x2_t *)a4[1];
                v61 = (unint64_t)a4[2];
                v16 = v165;
                v14 = a2;
                if ((unint64_t)v62 >= v61)
                {
                  v64 = ((char *)v62 - (_BYTE *)*a4) >> 5;
                  v65 = v64 + 1;
                  if ((unint64_t)(v64 + 1) >> 59)
LABEL_193:
                    abort();
                  v66 = v61 - (_QWORD)*a4;
                  if (v66 >> 4 > v65)
                    v65 = v66 >> 4;
                  if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0)
                    v67 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v67 = v65;
                  if (v67)
                  {
                    v177 = v56;
                    v180 = v55;
                    v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v161, v67);
                    v56 = v177;
                    v55 = v180;
                  }
                  else
                  {
                    v68 = 0;
                  }
                  v69 = (float64x2_t *)&v68[32 * v64];
                  *v69 = v56;
                  v69[1] = v55;
                  v71 = (float64x2_t *)*a4;
                  v70 = (float64x2_t *)a4[1];
                  v72 = v69;
                  if (v70 != *a4)
                  {
                    do
                    {
                      v73 = v70[-2];
                      v74 = v70[-1];
                      v70 -= 2;
                      v72[-2] = v73;
                      v72[-1] = v74;
                      v72 -= 2;
                    }
                    while (v70 != v71);
                    v70 = (float64x2_t *)*a4;
                  }
                  f64 = (_OWORD *)v69[2].f64;
                  *a4 = v72;
                  a4[1] = &v69[2];
                  a4[2] = &v68[32 * v67];
                  if (v70)
                    operator delete(v70);
                  a10 = v173;
                }
                else
                {
                  *v62 = v56;
                  v62[1] = v55;
                  f64 = (_OWORD *)v62[2].f64;
                }
                v17 = v172;
                a4[1] = f64;
              }
              ++v19;
            }
            while (v16 > v19);
          }
          ++v167;
        }
        while (v168 > v167);
      }
      ++v166;
    }
    while (v169 > v166);
    v75 = *(uint64_t **)&v192[16];
    if (*(_QWORD *)&v192[16])
    {
      v178 = a5 + 2;
      do
      {
        v76 = 0;
        v77 = (char *)&geom::dual_contouring<double>::edge_to_cell_map;
        do
        {
          if (((1 << v76) & *((unsigned __int16 *)v75 + 14)) != 0)
          {
            v181 = (1 << v76) & *((_WORD *)v75 + 14);
            v78 = 0;
            v195 = 0uLL;
            v79 = 1;
            v194 = (float64x2_t)(unint64_t)(v75 + 3);
            do
            {
              LOWORD(v190[0]) = *((_WORD *)v75 + 8) + v77[v78];
              v80 = *((_WORD *)v75 + 9) + v77[v78 + 1];
              WORD1(v190[0]) = v80;
              v81 = *((_WORD *)v75 + 10) + v77[v78 + 2];
              WORD2(v190[0]) = v81;
              if (v169 > LOWORD(v190[0]) && v168 > v80 && v16 > v81)
              {
                v82 = std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::find<geom::cell_coord>(v192, (unsigned __int16 *)v190);
                if (!v82)
                  goto LABEL_193;
                *(_QWORD *)&v194.f64[v79++] = v82 + 3;
              }
              v78 += 3;
            }
            while (v78 != 9);
            if (v79 > 3u)
            {
              v84 = a5[1];
              v83 = a5[2];
              if (((*((unsigned __int8 *)v75 + 30) >> *((_BYTE *)&geom::dual_contouring<double>::edge_vertex_map
                                                       + 2 * v76
                                                       + 1)) & 1) != 0)
              {
                v85 = v195.f64[1];
                if (v84 >= v83)
                {
                  v89 = *a5;
                  v90 = (v84 - *a5) >> 2;
                  v91 = v90 + 1;
                  if ((unint64_t)(v90 + 1) >> 62)
                    goto LABEL_193;
                  v92 = v83 - v89;
                  if (v92 >> 1 > v91)
                    v91 = v92 >> 1;
                  if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
                    v93 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v93 = v91;
                  if (v93)
                  {
                    v94 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v93);
                    v89 = *a5;
                    v84 = a5[1];
                  }
                  else
                  {
                    v94 = 0;
                  }
                  v101 = &v94[4 * v90];
                  *(_DWORD *)v101 = **(_DWORD **)&v85;
                  v86 = v101 + 4;
                  while (v84 != v89)
                  {
                    v102 = *((_DWORD *)v84 - 1);
                    v84 -= 4;
                    *((_DWORD *)v101 - 1) = v102;
                    v101 -= 4;
                  }
                  v83 = &v94[4 * v93];
                  *a5 = v101;
                  a5[1] = v86;
                  a5[2] = v83;
                  if (v89)
                  {
                    operator delete(v89);
                    v83 = *v178;
                  }
                }
                else
                {
                  *(_DWORD *)v84 = **(_DWORD **)&v195.f64[1];
                  v86 = v84 + 4;
                }
                v175 = v85;
                a5[1] = v86;
                v103 = v195.f64[0];
                if (v86 >= v83)
                {
                  v105 = *a5;
                  v106 = (v86 - *a5) >> 2;
                  v107 = v106 + 1;
                  if ((unint64_t)(v106 + 1) >> 62)
                    goto LABEL_193;
                  v108 = v83 - v105;
                  if (v108 >> 1 > v107)
                    v107 = v108 >> 1;
                  if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
                    v109 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v109 = v107;
                  if (v109)
                  {
                    v110 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v109);
                    v105 = *a5;
                    v86 = a5[1];
                  }
                  else
                  {
                    v110 = 0;
                  }
                  v111 = &v110[4 * v106];
                  *(_DWORD *)v111 = **(_DWORD **)&v103;
                  v104 = v111 + 4;
                  while (v86 != v105)
                  {
                    v112 = *((_DWORD *)v86 - 1);
                    v86 -= 4;
                    *((_DWORD *)v111 - 1) = v112;
                    v111 -= 4;
                  }
                  v83 = &v110[4 * v109];
                  *a5 = v111;
                  a5[1] = v104;
                  a5[2] = v83;
                  if (v105)
                  {
                    operator delete(v105);
                    v83 = *v178;
                  }
                }
                else
                {
                  *(_DWORD *)v86 = **(_DWORD **)&v195.f64[0];
                  v104 = v86 + 4;
                }
                a5[1] = v104;
                v113 = v194.f64[1];
                if (v104 >= v83)
                {
                  v115 = *a5;
                  v116 = (v104 - *a5) >> 2;
                  v117 = v116 + 1;
                  if ((unint64_t)(v116 + 1) >> 62)
                    goto LABEL_193;
                  v118 = v83 - v115;
                  if (v118 >> 1 > v117)
                    v117 = v118 >> 1;
                  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
                    v119 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v119 = v117;
                  if (v119)
                  {
                    v120 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v119);
                    v115 = *a5;
                    v104 = a5[1];
                  }
                  else
                  {
                    v120 = 0;
                  }
                  v121 = &v120[4 * v116];
                  *(_DWORD *)v121 = **(_DWORD **)&v113;
                  v114 = v121 + 4;
                  while (v104 != v115)
                  {
                    v122 = *((_DWORD *)v104 - 1);
                    v104 -= 4;
                    *((_DWORD *)v121 - 1) = v122;
                    v121 -= 4;
                  }
                  v83 = &v120[4 * v119];
                  *a5 = v121;
                  a5[1] = v114;
                  a5[2] = v83;
                  if (v115)
                  {
                    operator delete(v115);
                    v83 = *v178;
                  }
                }
                else
                {
                  *(_DWORD *)v104 = **(_DWORD **)&v194.f64[1];
                  v114 = v104 + 4;
                }
                a5[1] = v114;
                v123 = v194.f64[0];
                if (v114 < v83)
                {
                  v124 = **(_DWORD **)&v194.f64[0];
                  goto LABEL_175;
                }
                v125 = *a5;
                v126 = (v114 - *a5) >> 2;
                v127 = v126 + 1;
                if ((unint64_t)(v126 + 1) >> 62)
                  goto LABEL_193;
                v128 = v83 - v125;
                if (v128 >> 1 > v127)
                  v127 = v128 >> 1;
                if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
                  v129 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v129 = v127;
                if (v129)
                {
                  v130 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v129);
                  v125 = *a5;
                  v114 = a5[1];
                }
                else
                {
                  v130 = 0;
                }
                v131 = &v130[4 * v126];
                *(_DWORD *)v131 = **(_DWORD **)&v123;
                v132 = v131 + 4;
                if (v114 == v125)
                {
                  v16 = v165;
                }
                else
                {
                  v16 = v165;
                  do
                  {
                    v133 = *((_DWORD *)v114 - 1);
                    v114 -= 4;
                    *((_DWORD *)v131 - 1) = v133;
                    v131 -= 4;
                  }
                  while (v114 != v125);
                }
LABEL_133:
                *a5 = v131;
                a5[1] = v132;
                a5[2] = &v130[4 * v129];
                if (v125)
                  operator delete(v125);
              }
              else
              {
                v87 = v194.f64[0];
                if (v84 >= v83)
                {
                  v95 = *a5;
                  v96 = (v84 - *a5) >> 2;
                  v97 = v96 + 1;
                  if ((unint64_t)(v96 + 1) >> 62)
                    goto LABEL_193;
                  v98 = v83 - v95;
                  if (v98 >> 1 > v97)
                    v97 = v98 >> 1;
                  if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
                    v99 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v99 = v97;
                  if (v99)
                  {
                    v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v99);
                    v95 = *a5;
                    v84 = a5[1];
                  }
                  else
                  {
                    v100 = 0;
                  }
                  v134 = &v100[4 * v96];
                  *(_DWORD *)v134 = **(_DWORD **)&v87;
                  v88 = v134 + 4;
                  while (v84 != v95)
                  {
                    v135 = *((_DWORD *)v84 - 1);
                    v84 -= 4;
                    *((_DWORD *)v134 - 1) = v135;
                    v134 -= 4;
                  }
                  v83 = &v100[4 * v99];
                  *a5 = v134;
                  a5[1] = v88;
                  a5[2] = v83;
                  if (v95)
                  {
                    operator delete(v95);
                    v83 = *v178;
                  }
                }
                else
                {
                  *(_DWORD *)v84 = **(_DWORD **)&v194.f64[0];
                  v88 = v84 + 4;
                }
                a5[1] = v88;
                v113 = v194.f64[1];
                if (v88 >= v83)
                {
                  v137 = *a5;
                  v138 = (v88 - *a5) >> 2;
                  v139 = v138 + 1;
                  if ((unint64_t)(v138 + 1) >> 62)
                    goto LABEL_193;
                  v140 = v83 - v137;
                  if (v140 >> 1 > v139)
                    v139 = v140 >> 1;
                  if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
                    v141 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v141 = v139;
                  if (v141)
                  {
                    v142 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v141);
                    v137 = *a5;
                    v88 = a5[1];
                  }
                  else
                  {
                    v142 = 0;
                  }
                  v143 = &v142[4 * v138];
                  *(_DWORD *)v143 = **(_DWORD **)&v113;
                  v136 = v143 + 4;
                  while (v88 != v137)
                  {
                    v144 = *((_DWORD *)v88 - 1);
                    v88 -= 4;
                    *((_DWORD *)v143 - 1) = v144;
                    v143 -= 4;
                  }
                  v83 = &v142[4 * v141];
                  *a5 = v143;
                  a5[1] = v136;
                  a5[2] = v83;
                  if (v137)
                  {
                    operator delete(v137);
                    v83 = *v178;
                  }
                }
                else
                {
                  *(_DWORD *)v88 = **(_DWORD **)&v194.f64[1];
                  v136 = v88 + 4;
                }
                a5[1] = v136;
                v103 = v195.f64[0];
                if (v136 >= v83)
                {
                  v145 = *a5;
                  v146 = (v136 - *a5) >> 2;
                  v147 = v146 + 1;
                  if ((unint64_t)(v146 + 1) >> 62)
                    goto LABEL_193;
                  v148 = v83 - v145;
                  if (v148 >> 1 > v147)
                    v147 = v148 >> 1;
                  if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
                    v149 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v149 = v147;
                  if (v149)
                  {
                    v150 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v149);
                    v145 = *a5;
                    v136 = a5[1];
                  }
                  else
                  {
                    v150 = 0;
                  }
                  v151 = &v150[4 * v146];
                  *(_DWORD *)v151 = **(_DWORD **)&v103;
                  v114 = v151 + 4;
                  while (v136 != v145)
                  {
                    v152 = *((_DWORD *)v136 - 1);
                    v136 -= 4;
                    *((_DWORD *)v151 - 1) = v152;
                    v151 -= 4;
                  }
                  v83 = &v150[4 * v149];
                  *a5 = v151;
                  a5[1] = v114;
                  a5[2] = v83;
                  if (v145)
                  {
                    operator delete(v145);
                    v83 = *v178;
                  }
                }
                else
                {
                  *(_DWORD *)v136 = **(_DWORD **)&v195.f64[0];
                  v114 = v136 + 4;
                }
                a5[1] = v114;
                v175 = v195.f64[1];
                if (v114 >= v83)
                {
                  v125 = *a5;
                  v154 = (v114 - *a5) >> 2;
                  v155 = v154 + 1;
                  if ((unint64_t)(v154 + 1) >> 62)
                    goto LABEL_193;
                  v156 = v83 - v125;
                  if (v156 >> 1 > v155)
                    v155 = v156 >> 1;
                  if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
                    v129 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v129 = v155;
                  if (v129)
                  {
                    v130 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v178, v129);
                    v125 = *a5;
                    v114 = a5[1];
                  }
                  else
                  {
                    v130 = 0;
                  }
                  v131 = &v130[4 * v154];
                  *(_DWORD *)v131 = **(_DWORD **)&v175;
                  v132 = v131 + 4;
                  while (v114 != v125)
                  {
                    v157 = *((_DWORD *)v114 - 1);
                    v114 -= 4;
                    *((_DWORD *)v131 - 1) = v157;
                    v131 -= 4;
                  }
                  goto LABEL_133;
                }
                v124 = **(_DWORD **)&v195.f64[1];
LABEL_175:
                *(_DWORD *)v114 = v124;
                v132 = v114 + 4;
              }
              a5[1] = v132;
              *((_WORD *)v75 + 14) &= ~v181;
              v153 = (char *)&geom::dual_contouring<double>::edge_to_edge_map + 3 * v76;
              *(_WORD *)(*(_QWORD *)&v113 + 4) &= ~(unsigned __int16)(1 << *v153);
              *(_WORD *)(*(_QWORD *)&v103 + 4) &= ~(unsigned __int16)(1 << v153[1]);
              *(_WORD *)(*(_QWORD *)&v175 + 4) &= ~(1 << v153[2]);
            }
          }
          ++v76;
          v77 += 9;
        }
        while (v76 != 12);
        v75 = (uint64_t *)*v75;
      }
      while (v75);
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v192);
}

__n128 geom_marching_cubes_3f(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8)
{
  void **v13;
  uint64_t v14;
  __n128 result;
  float32x4_t v18[2];
  _QWORD v19[2];
  int v20;

  v13 = (void **)geom::collection_to_vector<float>(a5);
  v14 = geom::collection_to_vector<float>(a6);
  v19[0] = a1;
  v19[1] = a3;
  v20 = a2;
  v18[0] = a7;
  v18[1] = a8;
  geom::marching_cubes<float>::run((uint64_t)v19, v18, a4, v13, v14);
  return result;
}

void geom::marching_cubes<float>::run(uint64_t a1, float32x4_t *a2, unsigned int a3, void **a4, uint64_t a5)
{
  float32x4_t v6;
  float32x4_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  float32x4_t v12;
  int16x4_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  _WORD *v22;
  uint16x4_t v23;
  uint64_t v24;
  uint16x4_t v25;
  int16x4_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint16x4_t v30;
  uint64_t v31;
  int v32;
  int16x4_t v33;
  uint64_t v34;
  uint64_t v35;
  int16x4_t v36;
  unint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t i;
  __int16 v41;
  __int128 *v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  _WORD *v46;
  float32x4_t v47;
  unint64_t v48;
  float32x4_t *v49;
  _OWORD *f32;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  float32x4_t *v58;
  float32x4_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int16 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int16x4_t *v70;
  __int8 v71;
  int v72;
  char *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  _DWORD *v80;
  uint64_t v81;
  __int128 v82;
  unint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  int16x4_t *v86;
  uint64_t internal;
  uint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  char *v107;
  char *v108;
  __int128 v109;
  unint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _DWORD *v117;
  _DWORD *v118;
  unint64_t v119;
  int v120;
  BOOL v121;
  _WORD *v122;
  unsigned int v123;
  int v124;
  _WORD *v126;
  unsigned __int16 v127;
  unsigned __int16 *v128;
  _WORD *v129;
  uint64_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v135;
  uint64_t v136;
  int32x2_t v137;
  unsigned __int16 *v138;
  __int128 v139;
  uint16x4_t v140;
  uint16x4_t v141;
  uint16x4_t v142;
  int16x4_t v143;
  int16x4_t v144;
  int16x4_t v145;
  int16x4_t v146;
  int16x4_t v147;
  uint16x4_t v148;
  uint16x4_t v149;
  int16x4_t v150;
  float32x4_t v151;
  uint64_t v152;
  uint16x4_t v153;
  unint64_t v154;
  _QWORD v155[2];
  uint64_t v156;
  unsigned __int8 v157;
  int v158;
  uint64_t v159;
  char v160;
  int16x4_t v161;
  uint64_t v162[6];
  __int128 v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;

  v6 = *a2;
  v7 = vsubq_f32(a2[1], *a2);
  v6.f32[0] = fminf(fminf(v7.f32[0], v7.f32[2]), v7.f32[1]) / (float)a3;
  v135 = v7;
  v137 = *(int32x2_t *)v6.f32;
  v151 = v7;
  if (v7.f32[2] <= *(float *)((unint64_t)&v151 | (4 * (v7.f32[1] > v7.f32[0]))))
    v8 = v7.f32[1] > v7.f32[0];
  else
    v8 = 2;
  if ((_BYTE)v8)
    v9 = v8 - 1;
  else
    v9 = 2;
  if (v8 > 1u)
    v10 = -2;
  else
    v10 = 1;
  v11 = v10 + v8;
  v169 = 0;
  v167 = 0u;
  v168 = 0u;
  _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE4initEm(&v167, 1uLL);
  v133 = (float32x4_t)vdupq_lane_s32(v137, 0);
  v12 = vdivq_f32(v135, v133);
  v12.i32[3] = 0;
  *(int16x4_t *)v12.f32 = vmovn_s32((int32x4_t)vcvtq_u32_f32(vrndpq_f32(v12)));
  v13 = vadd_s16(*(int16x4_t *)v12.f32, (int16x4_t)0x1000100010001);
  v152 = v12.i64[0];
  v14 = 2
      * *(unsigned __int16 *)((unint64_t)&v152 & 0xFFFFFFFFFFFFFFF9 | (2 * (v9 & 3)))
      * *(unsigned __int16 *)((unint64_t)&v152 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  if (*((_QWORD *)&v168 + 1) < v14)
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE9do_resizeEm(&v167, v14);
  v165 = 0uLL;
  v166 = 0;
  v163 = 0uLL;
  v164 = 0;
  v150 = v13;
  v15 = *(unsigned __int16 *)((unint64_t)&v150 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  v131 = *(unsigned __int16 *)((unint64_t)&v150 & 0xFFFFFFFFFFFFFFF9 | (2 * (v9 & 3)));
  std::vector<float>::resize((uint64_t)&v165, v15 * v131);
  std::vector<float>::resize((uint64_t)&v163, v15 * v131);
  memset(v162, 0, 40);
  geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::init(v162, 1uLL);
  v123 = *(unsigned __int16 *)((unint64_t)&v150 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)));
  if (*(_WORD *)((unint64_t)&v150 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3))))
  {
    v16 = 0;
    v17 = v8;
    v122 = (_WORD *)((unint64_t)&v149 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)));
    v126 = (_WORD *)((unint64_t)&v148 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
    v129 = (_WORD *)((unint64_t)&v146 & 0xFFFFFFFFFFFFFFF9 | (2 * (v9 & 3)));
    v128 = (unsigned __int16 *)((unint64_t)&v147 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
    v18 = v9;
    v19 = (unsigned __int16 *)((unint64_t)&v142 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
    v20 = (unsigned __int16 *)((unint64_t)&v142 & 0xFFFFFFFFFFFFFFF9 | (2 * (v9 & 3)));
    v138 = (unsigned __int16 *)((unint64_t)&v145 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
    v21 = (unsigned __int16 *)((unint64_t)&v145 & 0xFFFFFFFFFFFFFFF9 | (2 * (v18 & 3)));
    v22 = (_WORD *)((unint64_t)&v144 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)));
    do
    {
      v124 = v16;
      if ((_DWORD)v15)
      {
        v127 = 0;
        v149 = 0;
        *v122 = v16;
        v23 = v149;
        do
        {
          if ((_DWORD)v131)
          {
            v24 = 0;
            v148 = v23;
            *v126 = v127;
            v25 = v148;
            do
            {
              v136 = v24;
              v146 = (int16x4_t)v25;
              *v129 = v24;
              v26 = v146;
              v27 = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vmlaq_f32(*a2, v133, vcvtq_f32_u32(vmovl_u16((uint16x4_t)v146))));
              v28 = v136;
              v29 = v27;
              v147 = v26;
              *(float *)(v165 + 4 * (*v128 + v136 * v15)) = v27;
              v30 = (uint16x4_t)vtst_s16(v26, v26);
              v30.i16[3] = v30.i16[2];
              if ((vminv_u16(v30) & 0x8000) != 0)
              {
                v31 = 0;
                v32 = 0;
                v33 = vadd_s16(v26, (int16x4_t)-1);
                v161 = v33;
                v157 = 0;
                v158 = -1;
                v159 = 0;
                v160 = 0;
                v34 = v163;
                v35 = v165;
                do
                {
                  v36 = geom::marching_cubes<float>::vert_map[v31];
                  v145 = vadd_s16(v36, v33);
                  v37 = *v138 + *v21 * (unint64_t)v15;
                  v144 = v36;
                  if (*v22)
                    v38 = v35;
                  else
                    v38 = v34;
                  v39 = *(float *)(v38 + 4 * v37);
                  *((float *)v155 + v31) = v39;
                  if (v39 > 0.0)
                  {
                    v32 |= 1 << v31;
                    v157 = v32;
                  }
                  ++v31;
                }
                while (v31 != 8);
                if (v157 - 1 <= 0xFD)
                {
                  _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE6insertERKS1_OS4_((uint64_t *)&v167, &v161, (uint64_t)v155, (uint64_t)&v153);
                  v28 = v136;
                }
              }
              for (i = 0; i != 3; ++i)
              {
                v143 = v26;
                v41 = *(_WORD *)((unint64_t)&v143 & 0xFFFFFFFFFFFFFFF9 | (2 * (i & 3)));
                if (v41)
                {
                  v141 = (uint16x4_t)v26;
                  *(_WORD *)((unint64_t)&v141 & 0xFFFFFFFFFFFFFFF9 | (2 * (i & 3))) = v41 - 1;
                  v142 = v141;
                  v42 = &v163;
                  if (i != v17)
                    v42 = &v165;
                  v43 = *(float *)(*(_QWORD *)v42 + 4 * (*v19 + *v20 * v15));
                  v8 = v8 & 0xFFFFFFFFFFFFFF00 | i;
                  v153 = v141;
                  v154 = v8;
                  if (v29 > 0.0 != v43 > 0.0)
                  {
                    v161.i32[0] = (unint64_t)((_BYTE *)a4[1] - (_BYTE *)*a4) >> 4;
                    geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::insert(v162, (int16x4_t *)&v153, (int *)&v161, (uint64_t)v155);
                    v44 = *a2;
                    v45 = vmlaq_f32(*a2, v133, vcvtq_f32_u32(vmovl_u16(v153)));
                    v46 = (_WORD *)((unint64_t)&v140 & 0xFFFFFFFFFFFFFFF9 | (2 * (v154 & 3)));
                    v140 = v153;
                    ++*v46;
                    v47 = vmlaq_n_f32(v45, vsubq_f32(vmlaq_f32(v44, v133, vcvtq_f32_u32(vmovl_u16(v140))), v45), v43 / (float)(v43 - v29));
                    v49 = (float32x4_t *)a4[1];
                    v48 = (unint64_t)a4[2];
                    if ((unint64_t)v49 >= v48)
                    {
                      v51 = ((char *)v49 - (_BYTE *)*a4) >> 4;
                      if ((unint64_t)(v51 + 1) >> 60)
LABEL_132:
                        abort();
                      v52 = v48 - (_QWORD)*a4;
                      v53 = v52 >> 3;
                      if (v52 >> 3 <= (unint64_t)(v51 + 1))
                        v53 = v51 + 1;
                      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
                        v54 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v54 = v53;
                      if (v54)
                      {
                        v132 = v47;
                        v55 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v54);
                        v47 = v132;
                      }
                      else
                      {
                        v55 = 0;
                      }
                      v56 = (float32x4_t *)&v55[16 * v51];
                      *v56 = v47;
                      f32 = (_OWORD *)v56[1].f32;
                      v58 = (float32x4_t *)*a4;
                      v57 = (float32x4_t *)a4[1];
                      if (v57 != *a4)
                      {
                        do
                        {
                          v59 = v57[-1];
                          --v57;
                          v56[-1] = v59;
                          --v56;
                        }
                        while (v57 != v58);
                        v57 = (float32x4_t *)*a4;
                      }
                      *a4 = v56;
                      a4[1] = f32;
                      a4[2] = &v55[16 * v54];
                      if (v57)
                        operator delete(v57);
                    }
                    else
                    {
                      *v49 = v47;
                      f32 = (_OWORD *)v49[1].f32;
                    }
                    v28 = v136;
                    a4[1] = f32;
                  }
                }
              }
              v24 = v28 + 1;
            }
            while (v24 != v131);
          }
          ++v127;
        }
        while (v15 > v127);
      }
      v60 = v165;
      v165 = v163;
      v163 = v60;
      v61 = v166;
      v166 = v164;
      v164 = v61;
      v16 = v124 + 1;
    }
    while (v123 > (unsigned __int16)(v124 + 1));
  }
  v155[0] = &v167;
  v62 = a5;
  v63 = a1;
  if ((unint64_t)v168 >= 0x10)
  {
    v64 = 0;
    v65 = (unint64_t)v168 >> 4;
    while (1)
    {
      v66 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v167 + v64)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v155[1] = (unsigned __int16)~v66;
      if (v66 != 0xFFFF)
        break;
      v64 += 16;
      if (!--v65)
        goto LABEL_122;
    }
    v67 = __clz(__rbit64((unsigned __int16)~v66)) + v64;
    v156 = v67;
    if (v67 != -1)
    {
      v68 = a5 + 16;
      while (1)
      {
        v69 = *(_QWORD *)(v155[0] + 8);
        v70 = (int16x4_t *)(v69 + (v67 << 6));
        if (*(_DWORD *)(v63 + 16) == 1)
        {
          geom::marching_cubes<float>::process_cell_33(v63, (uint64_t)&v70[1]);
          v71 = v70[7].i8[0];
        }
        else
        {
          v72 = 0;
          v73 = (char *)&mc_classic + 16 * v70[5].u8[0];
          do
          {
            v71 = v72;
            v74 = v73[3 * v72++];
          }
          while (v74 != 255);
          v75 = v69 + (v67 << 6);
          *(_QWORD *)(v75 + 48) = v73;
          *(_BYTE *)(v75 + 56) = v71;
        }
        if (v71 >= 1)
          break;
LABEL_121:
        _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v155);
        v67 = v156;
        v63 = a1;
        if (v156 == -1)
          goto LABEL_122;
      }
      v76 = 0;
      v77 = v69 + (v67 << 6);
      v78 = (char *)(v77 + 56);
      v79 = (_QWORD *)(v77 + 48);
      v80 = (_DWORD *)(v77 + 44);
      while (1)
      {
        v81 = *(unsigned __int8 *)(*v79 + v76);
        if (v81 == 12)
        {
          if (*v80 == -1)
          {
            *v80 = (unint64_t)((_BYTE *)a4[1] - (_BYTE *)*a4) >> 4;
            *(double *)&v82 = geom::marching_cubes<float>::get_interior_vertex_position(a1, (uint64_t)&v70[1], v70, a4, v162);
            v84 = a4[1];
            v83 = (unint64_t)a4[2];
            if ((unint64_t)v84 >= v83)
            {
              v99 = ((char *)v84 - (_BYTE *)*a4) >> 4;
              if ((unint64_t)(v99 + 1) >> 60)
                goto LABEL_132;
              v100 = v83 - (_QWORD)*a4;
              v101 = v100 >> 3;
              if (v100 >> 3 <= (unint64_t)(v99 + 1))
                v101 = v99 + 1;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
                v102 = 0xFFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
              {
                v139 = v82;
                v103 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v102);
                v82 = v139;
              }
              else
              {
                v103 = 0;
              }
              v106 = &v103[16 * v99];
              *(_OWORD *)v106 = v82;
              v85 = v106 + 16;
              v108 = (char *)*a4;
              v107 = (char *)a4[1];
              if (v107 != *a4)
              {
                do
                {
                  v109 = *((_OWORD *)v107 - 1);
                  v107 -= 16;
                  *((_OWORD *)v106 - 1) = v109;
                  v106 -= 16;
                }
                while (v107 != v108);
                v107 = (char *)*a4;
              }
              *a4 = v106;
              a4[1] = v85;
              a4[2] = &v103[16 * v102];
              if (v107)
                operator delete(v107);
            }
            else
            {
              *v84 = v82;
              v85 = v84 + 1;
            }
            a4[1] = v85;
            v62 = a5;
          }
          v111 = *(_DWORD **)(v62 + 8);
          v110 = *(_QWORD *)(v62 + 16);
          if ((unint64_t)v111 >= v110)
          {
            v93 = *(_DWORD **)v62;
            v112 = ((uint64_t)v111 - *(_QWORD *)v62) >> 2;
            v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 62)
              goto LABEL_132;
            v114 = v110 - (_QWORD)v93;
            if (v114 >> 1 > v113)
              v113 = v114 >> 1;
            if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
              v97 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v97 = v113;
            if (v97)
            {
              v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v68, v97);
              v93 = *(_DWORD **)v62;
              v111 = *(_DWORD **)(v62 + 8);
            }
            else
            {
              v98 = 0;
            }
            v104 = &v98[4 * v112];
            *(_DWORD *)v104 = *v80;
            v92 = v104 + 4;
            while (v111 != v93)
            {
              v115 = *--v111;
              *((_DWORD *)v104 - 1) = v115;
              v104 -= 4;
            }
            goto LABEL_96;
          }
          *v111 = *v80;
          v92 = v111 + 1;
        }
        else
        {
          v86 = (int16x4_t *)&geom::marching_cubes<float>::cell_to_edge_vertex_offsets[2 * v81];
          v153 = (uint16x4_t)vadd_s16(*v86, *v70);
          LOBYTE(v154) = v86[1].i8[0];
          internal = geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::find_internal(v162, (int16x4_t *)&v153);
          v88 = v62;
          v89 = (_DWORD *)(v162[1] + 24 * internal + 16);
          v91 = *(_DWORD **)(v88 + 8);
          v90 = *(_QWORD *)(v88 + 16);
          if ((unint64_t)v91 >= v90)
          {
            v93 = *(_DWORD **)v88;
            v94 = ((uint64_t)v91 - *(_QWORD *)v88) >> 2;
            v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 62)
              goto LABEL_132;
            v96 = v90 - (_QWORD)v93;
            if (v96 >> 1 > v95)
              v95 = v96 >> 1;
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
              v97 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v97 = v95;
            if (v97)
            {
              v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v68, v97);
              v93 = *(_DWORD **)a5;
              v91 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v98 = 0;
            }
            v104 = &v98[4 * v94];
            *(_DWORD *)v104 = *v89;
            v92 = v104 + 4;
            if (v91 == v93)
            {
              v62 = a5;
            }
            else
            {
              v62 = a5;
              do
              {
                v105 = *--v91;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              while (v91 != v93);
            }
LABEL_96:
            *(_QWORD *)v62 = v104;
            *(_QWORD *)(v62 + 8) = v92;
            *(_QWORD *)(v62 + 16) = &v98[4 * v97];
            if (v93)
              operator delete(v93);
            goto LABEL_107;
          }
          *v91 = *v89;
          v92 = v91 + 1;
          v62 = v88;
        }
LABEL_107:
        *(_QWORD *)(v62 + 8) = v92;
        if (3 * *v78 <= (unsigned __int16)++v76)
          goto LABEL_121;
      }
    }
  }
LABEL_122:
  v117 = *(_DWORD **)v62;
  v116 = *(_QWORD *)(v62 + 8);
  if (*(_QWORD *)v62 != v116)
  {
    v118 = (_DWORD *)(v116 - 4);
    if (v118 > v117)
    {
      v119 = (unint64_t)(v117 + 1);
      do
      {
        v120 = *(_DWORD *)(v119 - 4);
        *(_DWORD *)(v119 - 4) = *v118;
        *v118-- = v120;
        v121 = v119 >= (unint64_t)v118;
        v119 += 4;
      }
      while (!v121);
    }
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v162);
  if ((_QWORD)v163)
  {
    *((_QWORD *)&v163 + 1) = v163;
    operator delete((void *)v163);
  }
  if ((_QWORD)v165)
  {
    *((_QWORD *)&v165 + 1) = v165;
    operator delete((void *)v165);
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v167);
}

void geom_marching_cubes_3d(uint64_t a1, int a2, uint64_t a3, unsigned int a4, float64x2_t *a5, uint64_t a6, uint64_t a7)
{
  void **v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17[4];
  _QWORD v18[2];
  int v19;

  v13 = (void **)geom::collection_to_vector<float>(a6);
  v14 = geom::collection_to_vector<float>(a7);
  v18[0] = a1;
  v18[1] = a3;
  v19 = a2;
  v15 = a5[1];
  v17[0] = *a5;
  v17[1] = v15;
  v16 = a5[3];
  v17[2] = a5[2];
  v17[3] = v16;
  geom::marching_cubes<double>::run((uint64_t)v18, v17, a4, v13, v14);
}

void geom::marching_cubes<double>::run(uint64_t a1, float64x2_t *a2, unsigned int a3, void **a4, uint64_t a5)
{
  float64x2_t v6;
  int v7;
  char v8;
  int v9;
  unint64_t v10;
  int16x4_t v11;
  int16x4_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  _WORD *v20;
  int v21;
  uint16x4_t v22;
  uint64_t v23;
  uint16x4_t v24;
  int16x4_t v25;
  uint32x4_t v26;
  uint64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  double (*v31)(_OWORD *, uint64_t);
  double v32;
  uint64_t v33;
  double v34;
  uint16x4_t v35;
  uint64_t v36;
  int v37;
  int16x4_t v38;
  uint64_t v39;
  uint64_t v40;
  int16x4_t v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t i;
  __int16 v46;
  __int128 *v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  uint32x4_t v51;
  uint64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  _WORD *v56;
  uint32x4_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  int8x16_t v61;
  unint64_t v62;
  float64x2_t v63;
  int8x16_t *v64;
  unint64_t v65;
  int8x16_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  int8x16_t *v72;
  int8x16_t *v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t v76;
  int8x16_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int16x4_t *v88;
  char v89;
  int v90;
  char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  _DWORD *v98;
  uint64_t v99;
  float64x2_t v100;
  float64x2_t v101;
  char *v102;
  char *v103;
  _OWORD *f64;
  int16x4_t *v105;
  uint64_t internal;
  uint64_t v107;
  _DWORD *v108;
  unint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  int v124;
  float64x2_t *v125;
  float64x2_t *v126;
  float64x2_t *v127;
  float64x2_t *v128;
  float64x2_t v129;
  float64x2_t v130;
  unint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  unint64_t v140;
  int v141;
  BOOL v142;
  _WORD *v143;
  unsigned int v144;
  int v146;
  _WORD *v147;
  unsigned __int16 v148;
  unsigned __int16 *v149;
  float64x2_t v150;
  _WORD *v151;
  uint64_t v153;
  unint64_t v154;
  float64x2_t v155;
  uint64_t v156;
  float64x2_t v157;
  float64x2_t v159;
  float64x2_t v160;
  uint64_t v161;
  float64x2_t v162;
  float64x2_t v163;
  unsigned __int16 *v164;
  float64x2_t v165;
  uint16x4_t v166;
  uint16x4_t v167;
  uint16x4_t v168;
  int16x4_t v169;
  int16x4_t v170;
  int16x4_t v171;
  int16x4_t v172;
  int16x4_t v173;
  uint16x4_t v174;
  uint16x4_t v175;
  int16x4_t v176;
  int16x4_t v177;
  _OWORD v178[2];
  float64x2_t v179;
  float64x2_t v180;
  uint16x4_t v181;
  unint64_t v182;
  _QWORD v183[2];
  uint64_t v184;
  unsigned __int8 v185;
  int v186;
  uint64_t v187;
  char v188;
  int16x4_t v189;
  _OWORD v190[2];
  _OWORD v191[2];
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;

  v6 = a2[2];
  v160 = vsubq_f64(a2[3], a2[1]);
  v163 = vsubq_f64(v6, *a2);
  v6.f64[0] = fmin(fmin(v163.f64[0], v160.f64[0]), v163.f64[1]) / (double)a3;
  v159 = v6;
  v178[0] = v163;
  v178[1] = v160;
  if (v160.f64[0] <= *(double *)((unint64_t)v178 | (8 * (v163.f64[1] > v163.f64[0]))))
    v7 = v163.f64[1] > v163.f64[0];
  else
    v7 = 2;
  if ((_BYTE)v7)
    v8 = v7 - 1;
  else
    v8 = 2;
  if (v7 > 1u)
    v9 = -2;
  else
    v9 = 1;
  v10 = (v9 + v7);
  v199 = 0;
  v197 = 0u;
  v198 = 0u;
  _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE4initEm(&v197, 1uLL);
  v11 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v163, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v159.f64[0], 0))))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndpq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(v160, v159)))));
  v12 = vadd_s16(v11, (int16x4_t)0x1000100010001);
  v177 = v11;
  v13 = 2
      * *(unsigned __int16 *)((unint64_t)&v177 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)))
      * *(unsigned __int16 *)((unint64_t)&v177 & 0xFFFFFFFFFFFFFFF9 | (2 * (v10 & 3)));
  if (*((_QWORD *)&v198 + 1) < v13)
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE9do_resizeEm(&v197, v13);
  v195 = 0uLL;
  v196 = 0;
  v193 = 0uLL;
  v194 = 0;
  v176 = v12;
  v14 = *(unsigned __int16 *)((unint64_t)&v176 & 0xFFFFFFFFFFFFFFF9 | (2 * (v10 & 3)));
  v153 = *(unsigned __int16 *)((unint64_t)&v176 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)));
  std::vector<double>::resize((uint64_t)&v195, v14 * v153);
  std::vector<double>::resize((uint64_t)&v193, v14 * v153);
  v192 = 0;
  memset(v191, 0, sizeof(v191));
  geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::init(v191, 1uLL);
  v144 = *(unsigned __int16 *)((unint64_t)&v176 & 0xFFFFFFFFFFFFFFF9 | (2 * (v7 & 3)));
  if (*(_WORD *)((unint64_t)&v176 & 0xFFFFFFFFFFFFFFF9 | (2 * (v7 & 3))))
  {
    v15 = v7;
    v143 = (_WORD *)((unint64_t)&v175 & 0xFFFFFFFFFFFFFFF9 | (2 * (v7 & 3)));
    v147 = (_WORD *)((unint64_t)&v174 & 0xFFFFFFFFFFFFFFF9 | (2 * (v10 & 3)));
    v151 = (_WORD *)((unint64_t)&v172 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)));
    v16.f64[0] = v159.f64[0];
    v16.f64[1] = v159.f64[0];
    v150 = v16;
    v149 = (unsigned __int16 *)((unint64_t)&v173 & 0xFFFFFFFFFFFFFFF9 | (2 * (v10 & 3)));
    v17 = (unsigned __int16 *)((unint64_t)&v168 & 0xFFFFFFFFFFFFFFF9 | (2 * (v10 & 3)));
    v18 = (unsigned __int16 *)((unint64_t)&v168 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)));
    v16.f64[1] = v159.f64[0];
    v157 = v16;
    v164 = (unsigned __int16 *)((unint64_t)&v171 & 0xFFFFFFFFFFFFFFF9 | (2 * (v10 & 3)));
    v19 = (unsigned __int16 *)((unint64_t)&v171 & 0xFFFFFFFFFFFFFFF9 | (2 * (v8 & 3)));
    v20 = (_WORD *)((unint64_t)&v170 & 0xFFFFFFFFFFFFFFF9 | (2 * (v7 & 3)));
    v21 = 0;
    do
    {
      v146 = v21;
      if ((_DWORD)v14)
      {
        v148 = 0;
        v175 = 0;
        *v143 = v21;
        v22 = v175;
        do
        {
          if ((_DWORD)v153)
          {
            v23 = 0;
            v174 = v22;
            *v147 = v148;
            v24 = v174;
            do
            {
              v161 = v23;
              v172 = (int16x4_t)v24;
              *v151 = v23;
              v25 = v172;
              v26 = vmovl_u16((uint16x4_t)v172);
              v27.i64[0] = v26.u32[2];
              v27.i64[1] = v26.u32[3];
              v28 = vcvtq_f64_u64(v27);
              v27.i64[0] = v26.u32[0];
              v27.i64[1] = v26.u32[1];
              v29 = vmlaq_f64(a2[1], v159, v28);
              v31 = *(double (**)(_OWORD *, uint64_t))a1;
              v30 = *(_QWORD *)(a1 + 8);
              v190[0] = vmlaq_f64(*a2, v150, vcvtq_f64_u64(v27));
              v190[1] = v29;
              v32 = v31(v190, v30);
              v33 = v161;
              v34 = v32;
              v173 = v25;
              *(double *)(v195 + 8 * (*v149 + v161 * v14)) = v32;
              v35 = (uint16x4_t)vtst_s16(v25, v25);
              v35.i16[3] = v35.i16[2];
              if ((vminv_u16(v35) & 0x8000) != 0)
              {
                v36 = 0;
                v37 = 0;
                v38 = vadd_s16(v25, (int16x4_t)-1);
                v189 = v38;
                v185 = 0;
                v186 = -1;
                v187 = 0;
                v188 = 0;
                v39 = v193;
                v40 = v195;
                do
                {
                  v41 = geom::marching_cubes<double>::vert_map[v36];
                  v171 = vadd_s16(v41, v38);
                  v42 = *v164 + *v19 * (unint64_t)v14;
                  v170 = v41;
                  if (*v20)
                    v43 = v40;
                  else
                    v43 = v39;
                  v44 = *(double *)(v43 + 8 * v42);
                  *(double *)&v183[v36] = v44;
                  if (v44 > 0.0)
                  {
                    v37 |= 1 << v36;
                    v185 = v37;
                  }
                  ++v36;
                }
                while (v36 != 8);
                if (v185 - 1 <= 0xFD)
                {
                  _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE6insertERKS1_OS4_((uint64_t *)&v197, &v189, (uint64_t)v183, (uint64_t)&v181);
                  v33 = v161;
                }
              }
              for (i = 0; i != 3; ++i)
              {
                v169 = v25;
                v46 = *(_WORD *)((unint64_t)&v169 & 0xFFFFFFFFFFFFFFF9 | (2 * (i & 3)));
                if (v46)
                {
                  v167 = (uint16x4_t)v25;
                  *(_WORD *)((unint64_t)&v167 & 0xFFFFFFFFFFFFFFF9 | (2 * (i & 3))) = v46 - 1;
                  v168 = v167;
                  v47 = &v193;
                  if (i != v15)
                    v47 = &v195;
                  v48 = *(double *)(*(_QWORD *)v47 + 8 * (*v17 + *v18 * v14));
                  v10 = v10 & 0xFFFFFFFFFFFFFF00 | i;
                  v181 = v167;
                  v182 = v10;
                  if (v34 > 0.0 != v48 > 0.0)
                  {
                    v189.i32[0] = (unint64_t)((_BYTE *)a4[1] - (_BYTE *)*a4) >> 5;
                    geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::insert((uint64_t *)v191, (int16x4_t *)&v181, (int *)&v189, (uint64_t)v183);
                    v50 = *a2;
                    v49 = a2[1];
                    v51 = vmovl_u16(v181);
                    v52.i64[0] = v51.u32[2];
                    v52.i64[1] = v51.u32[3];
                    v53 = vcvtq_f64_u64(v52);
                    v52.i64[0] = v51.u32[0];
                    v52.i64[1] = v51.u32[1];
                    v54 = vmlaq_f64(*a2, v157, vcvtq_f64_u64(v52));
                    v55 = vmlaq_f64(v49, v159, v53);
                    v56 = (_WORD *)((unint64_t)&v166 & 0xFFFFFFFFFFFFFFF9 | (2 * (v182 & 3)));
                    v166 = v181;
                    ++*v56;
                    v57 = vmovl_u16(v166);
                    v52.i64[0] = v57.u32[2];
                    v52.i64[1] = v57.u32[3];
                    v58 = vcvtq_f64_u64(v52);
                    v52.i64[0] = v57.u32[0];
                    v52.i64[1] = v57.u32[1];
                    v59 = vcvtq_f64_u64(v52);
                    v60 = vmlaq_f64(v50, v157, v59);
                    v59.f64[0] = v48 / (v48 - v34);
                    v61 = (int8x16_t)vmlaq_n_f64(v54, vsubq_f64(v60, v54), v59.f64[0]);
                    v62 = vextq_s8(v61, v61, 8uLL).u64[0];
                    v63 = vmlaq_f64(v55, vsubq_f64(vmlaq_f64(v49, v159, v58), v55), v59);
                    v64 = (int8x16_t *)a4[1];
                    v65 = (unint64_t)a4[2];
                    if ((unint64_t)v64 >= v65)
                    {
                      v67 = ((char *)v64 - (_BYTE *)*a4) >> 5;
                      v68 = v67 + 1;
                      if ((unint64_t)(v67 + 1) >> 59)
LABEL_132:
                        abort();
                      v69 = v65 - (_QWORD)*a4;
                      if (v69 >> 4 > v68)
                        v68 = v69 >> 4;
                      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFE0)
                        v70 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v70 = v68;
                      if (v70)
                      {
                        v155 = v63;
                        v156 = v61.i64[0];
                        v154 = v62;
                        v71 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v70);
                        v62 = v154;
                        v63 = v155;
                        v61.i64[0] = v156;
                      }
                      else
                      {
                        v71 = 0;
                      }
                      v61.i64[1] = v62;
                      v72 = (int8x16_t *)&v71[32 * v67];
                      *v72 = v61;
                      v72[1] = (int8x16_t)v63;
                      v74 = (int8x16_t *)*a4;
                      v73 = (int8x16_t *)a4[1];
                      v75 = v72;
                      if (v73 != *a4)
                      {
                        do
                        {
                          v76 = v73[-2];
                          v77 = v73[-1];
                          v73 -= 2;
                          v75[-2] = v76;
                          v75[-1] = v77;
                          v75 -= 2;
                        }
                        while (v73 != v74);
                        v73 = (int8x16_t *)*a4;
                      }
                      v66 = v72 + 2;
                      *a4 = v75;
                      a4[1] = &v72[2];
                      a4[2] = &v71[32 * v70];
                      if (v73)
                        operator delete(v73);
                    }
                    else
                    {
                      v61.i64[1] = v62;
                      *v64 = v61;
                      v64[1] = (int8x16_t)v63;
                      v66 = v64 + 2;
                    }
                    v33 = v161;
                    a4[1] = v66;
                  }
                }
              }
              v23 = v33 + 1;
            }
            while (v23 != v153);
          }
          ++v148;
        }
        while (v14 > v148);
      }
      v78 = v195;
      v195 = v193;
      v193 = v78;
      v79 = v196;
      v196 = v194;
      v194 = v79;
      v21 = v146 + 1;
    }
    while (v144 > (unsigned __int16)(v146 + 1));
  }
  v183[0] = &v197;
  v80 = a5;
  v81 = a1;
  if ((unint64_t)v198 >= 0x10)
  {
    v82 = 0;
    v83 = (unint64_t)v198 >> 4;
    while (1)
    {
      v84 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v197 + v82)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v183[1] = (unsigned __int16)~v84;
      if (v84 != 0xFFFF)
        break;
      v82 += 16;
      if (!--v83)
        goto LABEL_122;
    }
    v85 = __clz(__rbit64((unsigned __int16)~v84)) + v82;
    v184 = v85;
    if (v85 != -1)
    {
      v86 = a5 + 16;
      while (1)
      {
        v87 = *(_QWORD *)(v183[0] + 8);
        v88 = (int16x4_t *)(v87 + 96 * v85);
        if (*(_DWORD *)(v81 + 16) == 1)
        {
          geom::marching_cubes<double>::process_cell_33(v81, (uint64_t)&v88[1]);
          v89 = *(_BYTE *)(v87 + 96 * v85 + 88);
        }
        else
        {
          v90 = 0;
          v91 = (char *)&mc_classic + 16 * *(unsigned __int8 *)(v87 + 96 * v85 + 72);
          do
          {
            v89 = v90;
            v92 = v91[3 * v90++];
          }
          while (v92 != 255);
          v93 = v87 + 96 * v85;
          *(_QWORD *)(v93 + 80) = v91;
          *(_BYTE *)(v93 + 88) = v89;
        }
        if (v89 >= 1)
          break;
LABEL_121:
        _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v183);
        v85 = v184;
        v81 = a1;
        if (v184 == -1)
          goto LABEL_122;
      }
      v94 = 0;
      v95 = v87 + 96 * v85;
      v96 = (char *)(v95 + 88);
      v97 = (_QWORD *)(v95 + 80);
      v98 = (_DWORD *)(v95 + 76);
      while (1)
      {
        v99 = *(unsigned __int8 *)(*v97 + v94);
        if (v99 == 12)
        {
          if (*v98 == -1)
          {
            *v98 = (unint64_t)((_BYTE *)a4[1] - (_BYTE *)*a4) >> 5;
            geom::marching_cubes<double>::get_interior_vertex_position(v88, a4, v191, &v179);
            v101 = v179;
            v100 = v180;
            v103 = (char *)a4[1];
            v102 = (char *)a4[2];
            if (v103 >= v102)
            {
              v118 = (v103 - (_BYTE *)*a4) >> 5;
              v119 = v118 + 1;
              if ((unint64_t)(v118 + 1) >> 59)
                goto LABEL_132;
              v120 = v102 - (_BYTE *)*a4;
              if (v120 >> 4 > v119)
                v119 = v120 >> 4;
              if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFE0)
                v121 = 0x7FFFFFFFFFFFFFFLL;
              else
                v121 = v119;
              if (v121)
              {
                v162 = v179;
                v165 = v180;
                v122 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v121);
                v101 = v162;
                v100 = v165;
              }
              else
              {
                v122 = 0;
              }
              v125 = (float64x2_t *)&v122[32 * v118];
              *v125 = v101;
              v125[1] = v100;
              v127 = (float64x2_t *)*a4;
              v126 = (float64x2_t *)a4[1];
              v128 = v125;
              if (v126 != *a4)
              {
                do
                {
                  v129 = v126[-2];
                  v130 = v126[-1];
                  v126 -= 2;
                  v128[-2] = v129;
                  v128[-1] = v130;
                  v128 -= 2;
                }
                while (v126 != v127);
                v126 = (float64x2_t *)*a4;
              }
              f64 = (_OWORD *)v125[2].f64;
              *a4 = v128;
              a4[1] = &v125[2];
              a4[2] = &v122[32 * v121];
              if (v126)
                operator delete(v126);
            }
            else
            {
              *(float64x2_t *)v103 = v179;
              *((float64x2_t *)v103 + 1) = v100;
              f64 = v103 + 32;
            }
            a4[1] = f64;
          }
          v132 = *(_DWORD **)(v80 + 8);
          v131 = *(_QWORD *)(v80 + 16);
          if ((unint64_t)v132 >= v131)
          {
            v112 = *(_DWORD **)v80;
            v133 = ((uint64_t)v132 - *(_QWORD *)v80) >> 2;
            v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 62)
              goto LABEL_132;
            v135 = v131 - (_QWORD)v112;
            if (v135 >> 1 > v134)
              v134 = v135 >> 1;
            if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
              v116 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v116 = v134;
            if (v116)
            {
              v117 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v86, v116);
              v112 = *(_DWORD **)v80;
              v132 = *(_DWORD **)(v80 + 8);
            }
            else
            {
              v117 = 0;
            }
            v123 = &v117[4 * v133];
            *(_DWORD *)v123 = *v98;
            v111 = v123 + 4;
            while (v132 != v112)
            {
              v136 = *--v132;
              *((_DWORD *)v123 - 1) = v136;
              v123 -= 4;
            }
            goto LABEL_96;
          }
          *v132 = *v98;
          v111 = v132 + 1;
        }
        else
        {
          v105 = (int16x4_t *)&geom::marching_cubes<double>::cell_to_edge_vertex_offsets[2 * v99];
          v181 = (uint16x4_t)vadd_s16(*v105, *v88);
          LOBYTE(v182) = v105[1].i8[0];
          internal = geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::find_internal(v191, (int16x4_t *)&v181);
          v107 = v80;
          v108 = (_DWORD *)(*((_QWORD *)&v191[0] + 1) + 24 * internal + 16);
          v110 = *(_DWORD **)(v107 + 8);
          v109 = *(_QWORD *)(v107 + 16);
          if ((unint64_t)v110 >= v109)
          {
            v112 = *(_DWORD **)v107;
            v113 = ((uint64_t)v110 - *(_QWORD *)v107) >> 2;
            v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 62)
              goto LABEL_132;
            v115 = v109 - (_QWORD)v112;
            if (v115 >> 1 > v114)
              v114 = v115 >> 1;
            if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
              v116 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v116 = v114;
            if (v116)
            {
              v117 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v86, v116);
              v112 = *(_DWORD **)a5;
              v110 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v117 = 0;
            }
            v123 = &v117[4 * v113];
            *(_DWORD *)v123 = *v108;
            v111 = v123 + 4;
            if (v110 == v112)
            {
              v80 = a5;
            }
            else
            {
              v80 = a5;
              do
              {
                v124 = *--v110;
                *((_DWORD *)v123 - 1) = v124;
                v123 -= 4;
              }
              while (v110 != v112);
            }
LABEL_96:
            *(_QWORD *)v80 = v123;
            *(_QWORD *)(v80 + 8) = v111;
            *(_QWORD *)(v80 + 16) = &v117[4 * v116];
            if (v112)
              operator delete(v112);
            goto LABEL_107;
          }
          *v110 = *v108;
          v111 = v110 + 1;
          v80 = v107;
        }
LABEL_107:
        *(_QWORD *)(v80 + 8) = v111;
        if (3 * *v96 <= (unsigned __int16)++v94)
          goto LABEL_121;
      }
    }
  }
LABEL_122:
  v138 = *(_DWORD **)v80;
  v137 = *(_QWORD *)(v80 + 8);
  if (*(_QWORD *)v80 != v137)
  {
    v139 = (_DWORD *)(v137 - 4);
    if (v139 > v138)
    {
      v140 = (unint64_t)(v138 + 1);
      do
      {
        v141 = *(_DWORD *)(v140 - 4);
        *(_DWORD *)(v140 - 4) = *v139;
        *v139-- = v141;
        v142 = v140 >= (unint64_t)v139;
        v140 += 4;
      }
      while (!v142);
    }
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v191);
  if ((_QWORD)v193)
  {
    *((_QWORD *)&v193 + 1) = v193;
    operator delete((void *)v193);
  }
  if ((_QWORD)v195)
  {
    *((_QWORD *)&v195 + 1) = v195;
    operator delete((void *)v195);
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v197);
}

double geom::dual_contouring<float>::compute_vertex_position(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double result;
  float32x4_t v14;
  float v15;

  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v14 = vsubq_f32(*a3, *a2);
  v6 = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vmlaq_f32(*a2, v5, v14));
  v7 = 0.5;
  if (fabsf(v6) > 0.01)
  {
    v8 = 0.0;
    v9 = 1.0;
    v7 = 0.5;
    do
    {
      if (v6 <= 0.0)
        v10 = v8;
      else
        v10 = v7;
      if (v6 <= 0.0)
        v11 = v7;
      else
        v11 = v9;
      if (v6 <= 0.0)
        v12 = v8;
      else
        v12 = v9;
      v15 = (float)(v7 + v12) * 0.5;
      v6 = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vmlaq_n_f32(*a2, v14, v15));
      v7 = v15;
      v9 = v11;
      v8 = v10;
    }
    while (fabsf(v6) > 0.01);
  }
  *(_QWORD *)&result = vmlaq_n_f32(*a2, v14, v7).u64[0];
  return result;
}

double geom::dual_contouring<float>::compute_normal(uint64_t a1, float32x4_t *a2)
{
  float v4;
  float32x4_t v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  double result;
  float32_t v14;
  float32x4_t v15;

  v4 = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vaddq_f32(*a2, (float32x4_t)xmmword_2289BE530));
  *(double *)v5.i64 = (*(double (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vaddq_f32(*a2, (float32x4_t)xmmword_2289BE540));
  v5.f32[0] = v4 - v5.f32[0];
  v15 = v5;
  v6 = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vaddq_f32(*a2, (float32x4_t)xmmword_2289BE550));
  v7 = (*(double (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vaddq_f32(*a2, (float32x4_t)xmmword_2289BE560));
  v14 = v6 - *(float *)&v7;
  v8 = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vaddq_f32(*a2, (float32x4_t)xmmword_2289BE570));
  v9 = (*(float (**)(_QWORD, __n128))a1)(*(_QWORD *)(a1 + 8), (__n128)vaddq_f32(*a2, (float32x4_t)xmmword_2289BE580));
  v10 = v15;
  v10.f32[1] = v14;
  v10.f32[2] = v8 - v9;
  v11 = (int32x4_t)vmulq_f32(v10, v10);
  v12 = v10;
  v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
  *(float32x2_t *)v10.f32 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  *(float32x2_t *)v10.f32 = vmul_f32(*(float32x2_t *)v10.f32, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32)));
  *(_QWORD *)&result = vmulq_n_f32(vnegq_f32(v12), vmul_f32(*(float32x2_t *)v10.f32, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32))).f32[0]).u64[0];
  return result;
}

double geom::qef<float>::solve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7)
{
  uint64_t v8;
  float v9;
  int32x4_t v10;
  int32x4_t v11;
  float v12;
  int32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double result;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  __int128 v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;

  DWORD2(v33) = 0;
  *(_QWORD *)&v33 = 0;
  geom::compute_svd_3x3<float>((int8x16_t *)a1, &v30, &v33, &v27, a5, a6, a7);
  v8 = 0;
  v9 = 1.0 / *(float *)&v33;
  if (*(float *)&v33 < 0.1)
    v9 = 0.0;
  v10.i64[0] = 0;
  v10.i32[3] = 0;
  v11 = (int32x4_t)LODWORD(v9);
  if (*((float *)&v33 + 1) >= 0.1)
    v12 = 1.0 / *((float *)&v33 + 1);
  else
    v12 = 0.0;
  v13.i32[0] = 0;
  v13.i64[1] = 0;
  *(float *)&v13.i32[1] = v12;
  v14 = 1.0 / *((float *)&v33 + 2);
  if (*((float *)&v33 + 2) < 0.1)
    v14 = 0.0;
  *(float *)&v10.i32[2] = v14;
  v15 = (float32x4_t)vzip1q_s32(v27, v28);
  v15.i32[2] = v29.i32[0];
  v16 = (float32x4_t)vzip2q_s32(v27, v28);
  v16.i32[2] = v29.i32[2];
  v17 = (float32x4_t)vzip2q_s32(vzip1q_s32(v27, v29), vdupq_lane_s32(*(int32x2_t *)v28.i8, 1));
  v34 = v11;
  v35 = v13;
  v36 = v10;
  do
  {
    *(float32x4_t *)((char *)&v37 + v8) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)((char *)&v34 + v8))), v17, *(float32x2_t *)&v34.i8[v8], 1), v16, *(float32x4_t *)((char *)&v34 + v8), 2);
    v8 += 16;
  }
  while (v8 != 48);
  v18 = 0;
  v19 = v37;
  v20 = v38;
  v21 = v39;
  v22 = vzip1q_s32(v30, v32);
  v34 = vzip1q_s32(v22, v31);
  v35 = vzip2q_s32(v22, vdupq_lane_s32(*(int32x2_t *)v31.i8, 1));
  v36 = vzip1q_s32(vzip2q_s32(v30, v32), vdupq_laneq_s32(v31, 2));
  do
  {
    v23 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)&v34 + v18))), v20, *(float32x2_t *)&v34.i8[v18], 1), v21, *(float32x4_t *)((char *)&v34 + v18), 2);
    *(float32x4_t *)((char *)&v37 + v18) = v23;
    v18 += 16;
  }
  while (v18 != 48);
  v23.i16[0] = *(_WORD *)(a1 + 96);
  v23.f32[0] = (float)v23.u32[0];
  v24 = vdivq_f32(*(float32x4_t *)(a1 + 80), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0));
  v25 = vsubq_f32(*(float32x4_t *)(a1 + 48), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a1, v24.f32[0]), *(float32x4_t *)(a1 + 16), *(float32x2_t *)v24.f32, 1), *(float32x4_t *)(a1 + 32), v24, 2));
  *(_QWORD *)&result = vaddq_f32(v24, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, v25.f32[0]), v38, *(float32x2_t *)v25.f32, 1), v39, v25, 2)).u64[0];
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::__emplace_unique_key_args<geom::cell_coord,geom::cell_coord,geom::dual_contouring<float>::cell>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  _QWORD *v16;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = *a2;
  v9 = a2[1];
  v10 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
  v11 = a2[2];
  v12 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583E9) ^ v10;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = (v11 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583E9) ^ v10;
      if (v12 >= v13)
        v4 = v12 % v13;
    }
    else
    {
      v4 = v12 & (v13 - 1);
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        do
        {
          v17 = v16[1];
          if (v17 == v12)
          {
            if (*((unsigned __int16 *)v16 + 8) == (_DWORD)v8
              && __PAIR64__(*((unsigned __int16 *)v16 + 10), *((unsigned __int16 *)v16 + 9)) == __PAIR64__(v11, v9))
            {
              return v16;
            }
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v17 >= v13)
                v17 %= v13;
            }
            else
            {
              v17 &= v13 - 1;
            }
            if (v17 != v4)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
  v16 = operator new(0x20uLL);
  *v16 = 0;
  v16[1] = v12;
  *((_DWORD *)v16 + 4) = *(_DWORD *)a3;
  *((_WORD *)v16 + 10) = *(_WORD *)(a3 + 4);
  v16[3] = *a4;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 40);
  if (!v13 || (float)(v19 * (float)v13) < v18)
  {
    v20 = 1;
    if (v13 >= 3)
      v20 = (v13 & (v13 - 1)) != 0;
    v21 = v20 | (2 * v13);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::__rehash<true>(a1, v23);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v4 = v12 % v13;
      else
        v4 = v12;
    }
    else
    {
      v4 = (v13 - 1) & v12;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *v16 = *v25;
LABEL_39:
    *v25 = v16;
    goto LABEL_40;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*v16)
  {
    v26 = *(_QWORD *)(*v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v26 >= v13)
        v26 %= v13;
    }
    else
    {
      v26 &= v13 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 40));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>(a1, prime);
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::__unordered_map_hasher<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,geom::cell_coord,std::equal_to<geom::cell_coord>,false>,std::__unordered_map_equal<geom::cell_coord,std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>,std::equal_to<geom::cell_coord>,geom::cell_coord,true>,std::allocator<std::__hash_value_type<geom::cell_coord,geom::dual_contouring<float>::cell>>>::find<geom::cell_coord>(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **result;
  unint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  v6 = a2[2];
  v7 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
    if (v7 >= *(_QWORD *)&v2)
      v9 = v7 % *(_QWORD *)&v2;
  }
  else
  {
    v9 = v7 & (*(_QWORD *)&v2 - 1);
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (result = *v10; result; result = (uint64_t **)*result)
  {
    v12 = (unint64_t)result[1];
    if (v12 == v7)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3
        && __PAIR64__(*((unsigned __int16 *)result + 10), *((unsigned __int16 *)result + 9)) == __PAIR64__(v6, v4))
      {
        return result;
      }
    }
    else
    {
      if (v8.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
      }
      else
      {
        v12 &= *(_QWORD *)&v2 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return result;
}

float64x2_t geom::dual_contouring<double>::compute_vertex_position@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X8>)
{
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v14;
  uint64_t v15;
  double (*v16)(_OWORD *, uint64_t);
  double v17;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64_t v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  uint64_t v27;
  double (*v28)(_OWORD *, uint64_t);
  float64x2_t v29;
  float64x2_t result;
  int8x16_t v31;
  float64_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  _OWORD v36[2];
  _OWORD v37[2];

  v7 = a2[1];
  v8 = vsubq_f64(*a3, *a2);
  v31 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
  v32 = v8.f64[0];
  __asm { FMOV            V0.2D, #0.5 }
  v14 = vmlaq_f64(*a2, _Q0, v8);
  v34 = vsubq_f64(a3[1], v7);
  v16 = *(double (**)(_OWORD *, uint64_t))a1;
  v15 = *(_QWORD *)(a1 + 8);
  v37[0] = v14;
  v37[1] = vmlaq_f64(v7, _Q0, v34);
  v17 = v16(v37, v15);
  v18.f64[0] = 0.5;
  if (fabs(v17) > 0.01)
  {
    v19 = 0.0;
    v20 = 1.0;
    *(_QWORD *)&v21.f64[1] = v31.i64[1];
    v22 = v32;
    *(_QWORD *)&v18.f64[1] = v31.i64[0];
    v33 = v18;
    v18.f64[0] = 0.5;
    do
    {
      if (v17 <= 0.0)
        v23 = v19;
      else
        v23 = v18.f64[0];
      if (v17 <= 0.0)
        v24 = v18.f64[0];
      else
        v24 = v20;
      if (v17 <= 0.0)
        v25 = v19;
      else
        v25 = v20;
      v21.f64[0] = (v18.f64[0] + v25) * 0.5;
      v26 = vmlaq_n_f64(*a2, v33, v21.f64[0]);
      v28 = *(double (**)(_OWORD *, uint64_t))a1;
      v27 = *(_QWORD *)(a1 + 8);
      v36[1] = vmlaq_f64(a2[1], v21, v34);
      v35 = v21;
      v36[0] = v26;
      v17 = v28(v36, v27);
      v18 = v35;
      v20 = v24;
      v19 = v23;
    }
    while (fabs(v17) > 0.01);
  }
  v29.f64[0] = v32;
  *(_QWORD *)&v29.f64[1] = v31.i64[0];
  result = vmlaq_f64(a2[1], v18, v34);
  *a4 = vmlaq_n_f64(*a2, v29, v18.f64[0]);
  a4[1] = result;
  return result;
}

float64x2_t geom::dual_contouring<double>::compute_normal@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  double (*v9)(_OWORD *, uint64_t);
  double v10;
  float64x2_t v11;
  uint64_t v12;
  double (*v13)(_OWORD *, uint64_t);
  float64x2_t v14;
  uint64_t v15;
  double (*v16)(_OWORD *, uint64_t);
  double v17;
  float64x2_t v18;
  uint64_t v19;
  double (*v20)(_OWORD *, uint64_t);
  float64x2_t v21;
  uint64_t v22;
  double (*v23)(_OWORD *, uint64_t);
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  double (*v28)(_OWORD *, uint64_t);
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t result;
  double v33;
  double v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  _OWORD v38[2];
  _OWORD v39[2];
  _OWORD v40[2];

  v6 = vaddq_f64(*a2, (float64x2_t)xmmword_2289BE590);
  v7 = vaddq_f64(a2[1], (float64x2_t)0);
  v9 = *(double (**)(_OWORD *, uint64_t))a1;
  v8 = *(_QWORD *)(a1 + 8);
  v40[0] = v6;
  v40[1] = v7;
  v10 = v9(v40, v8);
  v11 = a2[1];
  v13 = *(double (**)(_OWORD *, uint64_t))a1;
  v12 = *(_QWORD *)(a1 + 8);
  v39[0] = vaddq_f64(*a2, (float64x2_t)xmmword_2289BE5A0);
  v39[1] = v11;
  v34 = v10 - v13(v39, v12);
  v14 = vaddq_f64(a2[1], (float64x2_t)0);
  v16 = *(double (**)(_OWORD *, uint64_t))a1;
  v15 = *(_QWORD *)(a1 + 8);
  v38[0] = vaddq_f64(*a2, (float64x2_t)xmmword_2289BE5B0);
  v38[1] = v14;
  v17 = v16(v38, v15);
  v18 = a2[1];
  v20 = *(double (**)(_OWORD *, uint64_t))a1;
  v19 = *(_QWORD *)(a1 + 8);
  v37[0] = vaddq_f64(*a2, (float64x2_t)xmmword_2289BE5C0);
  v37[1] = v18;
  v33 = v17 - v20(v37, v19);
  v21 = vaddq_f64(a2[1], (float64x2_t)0x3F50624DD2F1A9FCuLL);
  v23 = *(double (**)(_OWORD *, uint64_t))a1;
  v22 = *(_QWORD *)(a1 + 8);
  v36[0] = vaddq_f64(*a2, (float64x2_t)0);
  v36[1] = v21;
  v24 = v23(v36, v22);
  v25.f64[0] = -0.001;
  v26 = vaddq_f64(a2[1], v25);
  v28 = *(double (**)(_OWORD *, uint64_t))a1;
  v27 = *(_QWORD *)(a1 + 8);
  v35[0] = *a2;
  v35[1] = v26;
  v29.f64[0] = v24 - v28(v35, v27);
  v30.f64[0] = v34;
  v30.f64[1] = v33;
  v31 = vmulq_f64(v30, v30);
  v31.f64[0] = 1.0 / sqrt(vmulq_f64(v29, v29).f64[0] + vaddvq_f64(v31));
  result = vmulq_f64(v31, vnegq_f64(v29));
  *a3 = vmulq_n_f64(vnegq_f64(v30), v31.f64[0]);
  a3[1] = result;
  return result;
}

float64x2_t geom::qef<double>::solve@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, double *a4@<X6>, float64x2_t *a5@<X8>)
{
  uint64_t v7;
  double v8;
  __int128 v9;
  int64x2_t v10;
  double v11;
  int64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t result;
  float64x2_t v38;
  int64x2_t v39[2];
  int64x2_t v40;
  int64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int64x2_t v44[2];
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  __int128 v48;
  __int128 v49;
  double v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  __int128 v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;

  v50 = 0.0;
  v49 = 0uLL;
  geom::compute_svd_3x3<double>(a1, v44, &v49, (uint64_t)v39, a2, a3, a4);
  v7 = 0;
  v8 = 1.0 / *(double *)&v49;
  *(_QWORD *)&v9 = 0;
  if (*(double *)&v49 < 0.1)
    v8 = 0.0;
  v10 = (int64x2_t)*(unint64_t *)&v8;
  if (*((double *)&v49 + 1) >= 0.1)
    v11 = 1.0 / *((double *)&v49 + 1);
  else
    v11 = 0.0;
  v12.i64[0] = 0;
  *(double *)&v12.i64[1] = v11;
  if (v50 >= 0.1)
    *(double *)&v9 = 1.0 / v50;
  v14 = v42;
  v13 = v43;
  v16 = (float64x2_t)vzip1q_s64(v39[0], v40);
  v17 = (float64x2_t)vzip2q_s64(v39[0], v40);
  v18 = (float64x2_t)vzip1q_s64(v39[1], v41);
  v51 = v10;
  v52 = 0uLL;
  v53 = v12;
  v54 = 0uLL;
  v55 = 0uLL;
  v56 = v9;
  v15 = (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL);
  *(_QWORD *)&v16.f64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  *(_QWORD *)&v17.f64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  *(_QWORD *)&v18.f64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  do
  {
    v20 = *(float64x2_t *)((char *)&v51 + v7);
    v19 = *(float64x2_t *)((char *)&v51 + v7 + 16);
    v21 = (float64x2_t *)((char *)&v57 + v7);
    *v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v20.f64[0]), v17, v20, 1), v18, v19.f64[0]);
    v21[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v14, v20), v15, v20, 1), v19, v13);
    v7 += 32;
  }
  while (v7 != 96);
  v22 = 0;
  v26 = v57;
  v23 = v58;
  v27 = v59;
  v24 = v60;
  v28 = v61;
  v25 = v62;
  v51 = vzip1q_s64(v44[0], v45);
  v52 = v47;
  v53 = vzip2q_s64(v44[0], v45);
  v54 = vdupq_laneq_s64(v47, 1);
  v55 = vzip1q_s64(v44[1], v46);
  v56 = v48;
  *(_QWORD *)&v26.f64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  *(_QWORD *)&v27.f64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  *(_QWORD *)&v28.f64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  do
  {
    v30 = *(float64x2_t *)((char *)&v51 + v22);
    v29 = *(float64x2_t *)((char *)&v51 + v22 + 16);
    v31 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v23, v30), v24, v30, 1), v29, v25);
    v32 = (float64x2_t *)((char *)&v57 + v22);
    *v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v30.f64[0]), v27, v30, 1), v28, v29.f64[0]);
    v32[1] = v31;
    v22 += 32;
  }
  while (v22 != 96);
  LOWORD(v31.f64[0]) = *(_WORD *)(a1 + 176);
  v31.f64[0] = (double)*(unint64_t *)&v31.f64[0];
  v33 = vdivq_f64(*(float64x2_t *)(a1 + 160), v31);
  v34 = vdivq_f64(*(float64x2_t *)(a1 + 144), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v31.f64[0], 0));
  v35 = vsubq_f64(*(float64x2_t *)(a1 + 112), vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(*(float64x2_t *)(a1 + 16), v34), *(float64x2_t *)(a1 + 48), v34, 1), v33, *(float64x2_t *)(a1 + 80)));
  v36 = vsubq_f64(*(float64x2_t *)(a1 + 96), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a1, v34.f64[0]), *(float64x2_t *)(a1 + 32), v34, 1), *(float64x2_t *)(a1 + 64), v33.f64[0]));
  result = vaddq_f64(v34, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, v36.f64[0]), v59, v36, 1), v61, v35.f64[0]));
  v38 = vaddq_f64(v33, vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v58, v36), v60, v36, 1), v35, v62));
  *a5 = result;
  a5[1] = v38;
  return result;
}

void _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE6insertERKS1_OS4_(uint64_t *a1@<X0>, int16x4_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  __int128 v11;
  _OWORD v12[3];
  uint64_t v13;

  if (_ZNK4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13find_internalERKS1_(a1, a2) == -1)
  {
    v11 = *(_OWORD *)(a3 + 16);
    v12[0] = *(_OWORD *)a3;
    v12[1] = v11;
    v12[2] = *(_OWORD *)(a3 + 32);
    v13 = *(_QWORD *)(a3 + 48);
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE12internal_addIS4_EEmRKS1_T_(a1, a2, (uint64_t)v12);
    if (v10 >> 4 >= (unint64_t)a1[2] >> 4)
      v8 = 0;
    else
      v8 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (v10 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = v9;
}

uint64_t geom::marching_cubes<float>::process_cell_33(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  char v24;
  int v25;
  void *v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v2 = (char *)&mc_lewiner_cases + 2 * *(unsigned __int8 *)(a2 + 32);
  v4 = result;
  v5 = v2[1];
  switch(*v2)
  {
    case 1:
      *(_QWORD *)(a2 + 40) = (char *)&mc_lewiner_tiling_1 + 3 * v5;
      v6 = 1;
      goto LABEL_69;
    case 2:
      v7 = (char *)&mc_lewiner_tiling_2;
      goto LABEL_52;
    case 3:
      result = geom::marching_cubes<float>::test_face(result, mc_lewiner_test_3[v5], (float *)a2);
      if ((_DWORD)result)
      {
        v8 = (char *)&mc_lewiner_tiling_3_2;
        goto LABEL_43;
      }
      v7 = (char *)&mc_lewiner_tiling_3_1;
      goto LABEL_52;
    case 4:
      result = geom::marching_cubes<float>::test_interior(result, mc_lewiner_test_4[v5], (float *)a2, 0);
      if ((_DWORD)result)
      {
        v9 = (char *)&mc_lewiner_tiling_4_2 + 18 * (int)v5;
LABEL_68:
        *(_QWORD *)(a2 + 40) = v9;
        v6 = 6;
      }
      else
      {
        v7 = (char *)&mc_lewiner_tiling_4_1;
LABEL_52:
        *(_QWORD *)(a2 + 40) = &v7[6 * (int)v5];
        v6 = 2;
      }
      goto LABEL_69;
    case 5:
      v10 = 9 * v5;
      v11 = (char *)&mc_lewiner_tiling_5;
      goto LABEL_9;
    case 6:
      result = geom::marching_cubes<float>::test_face(result, mc_lewiner_test_6[2 * v5], (float *)a2);
      if ((_DWORD)result)
      {
        *(_QWORD *)(a2 + 40) = (char *)&mc_lewiner_tiling_6_2 + 16 * v5 - v5;
        v6 = 5;
      }
      else
      {
        result = geom::marching_cubes<float>::test_interior(v4, mc_lewiner_test_6[2 * v5 + 1], (float *)a2, 0);
        if ((_DWORD)result)
        {
          *(_QWORD *)(a2 + 40) = (char *)&mc_lewiner_tiling_6_1_2 + 27 * (int)v5;
          v6 = 9;
        }
        else
        {
          v10 = 9 * v5;
          v11 = (char *)&mc_lewiner_tiling_6_1_1;
LABEL_9:
          *(_QWORD *)(a2 + 40) = &v11[v10];
          v6 = 3;
        }
      }
      goto LABEL_69;
    case 7:
      v12 = (char *)&mc_lewiner_test_7 + 5 * v5;
      v13 = geom::marching_cubes<float>::test_face(result, *v12, (float *)a2);
      if (geom::marching_cubes<float>::test_face(v4, v12[1], (float *)a2))
        v13 |= 2u;
      v14 = geom::marching_cubes<float>::test_face(v4, v12[2], (float *)a2);
      LODWORD(v15) = v13 | 4;
      if (v14)
        v15 = v15;
      else
        v15 = v13;
      __asm { BR              X10 }
      return result;
    case 8:
      v7 = (char *)&mc_lewiner_tiling_8;
      goto LABEL_52;
    case 9:
      v8 = (char *)&mc_lewiner_tiling_9;
      goto LABEL_43;
    case 10:
      v16 = &mc_lewiner_test_10[6 * v2[1]];
      v17 = geom::marching_cubes<float>::test_face(result, *v16, (float *)a2);
      result = geom::marching_cubes<float>::test_face(v4, v16[1], (float *)a2);
      if (v17)
      {
        if (!(_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_10_2;
          goto LABEL_63;
        }
        result = geom::marching_cubes<float>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 4], (float *)a2, 0);
        if ((_DWORD)result
          || (result = geom::marching_cubes<float>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 5], (float *)a2, 0), (_DWORD)result))
        {
          v18 = (char *)&mc_lewiner_tiling_10_1_2_;
          goto LABEL_63;
        }
        v8 = (char *)&mc_lewiner_tiling_10_1_1_;
      }
      else
      {
        if ((_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_10_2_;
          goto LABEL_63;
        }
        result = geom::marching_cubes<float>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 2], (float *)a2, 0);
        if ((_DWORD)result
          || (result = geom::marching_cubes<float>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 3], (float *)a2, 0), (_DWORD)result))
        {
          v18 = (char *)&mc_lewiner_tiling_10_1_2;
          goto LABEL_63;
        }
        v8 = (char *)&mc_lewiner_tiling_10_1_1;
      }
      goto LABEL_43;
    case 11:
      v8 = (char *)&mc_lewiner_tiling_11;
      goto LABEL_43;
    case 12:
      v19 = &mc_lewiner_test_12[4 * v5];
      v20 = geom::marching_cubes<float>::test_face(result, *v19, (float *)a2);
      result = geom::marching_cubes<float>::test_face(v4, v19[1], (float *)a2);
      if (!v20)
      {
        if ((_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_12_2_;
          goto LABEL_63;
        }
        result = geom::marching_cubes<float>::test_interior(v4, mc_lewiner_test_12[4 * v5 + 2], (float *)a2, 0);
        if ((_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_12_1_2;
          goto LABEL_63;
        }
        v8 = (char *)&mc_lewiner_tiling_12_1_1;
LABEL_43:
        *(_QWORD *)(a2 + 40) = &v8[12 * (int)v5];
        v6 = 4;
        goto LABEL_69;
      }
      if (!(_DWORD)result)
      {
        v18 = (char *)&mc_lewiner_tiling_12_2;
        goto LABEL_63;
      }
      result = geom::marching_cubes<float>::test_interior(v4, mc_lewiner_test_12[4 * v5 + 3], (float *)a2, 0);
      if (!(_DWORD)result)
      {
        v8 = (char *)&mc_lewiner_tiling_12_1_1_;
        goto LABEL_43;
      }
      v18 = (char *)&mc_lewiner_tiling_12_1_2_;
LABEL_63:
      *(_QWORD *)(a2 + 40) = &v18[24 * (int)v5];
      v6 = 8;
LABEL_69:
      *(_BYTE *)(a2 + 48) = v6;
      return result;
    case 13:
      v21 = (char *)&mc_lewiner_test_13 + 6 * v2[1];
      v22 = geom::marching_cubes<float>::test_face(result, *v21, (float *)a2);
      if (geom::marching_cubes<float>::test_face(v4, v21[1], (float *)a2))
        v22 |= 2u;
      if (geom::marching_cubes<float>::test_face(v4, v21[2], (float *)a2))
        v22 |= 4u;
      if (geom::marching_cubes<float>::test_face(v4, v21[3], (float *)a2))
        v22 |= 8u;
      if (geom::marching_cubes<float>::test_face(v4, 5, (float *)a2))
        v22 += 16;
      result = geom::marching_cubes<float>::test_face(v4, 6, (float *)a2);
      v23 = v22 + 32;
      if (!(_DWORD)result)
        v23 = v22;
      break;
    case 14:
      v8 = (char *)&mc_lewiner_tiling_14;
      goto LABEL_43;
    default:
      return result;
  }
  v24 = mc_lewiner_subconfig_13[v23];
  switch(v24)
  {
    case 0:
      v8 = (char *)&mc_lewiner_tiling_13_1;
      goto LABEL_43;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      v28 = (char)(v24 - 1);
      v29 = (char *)&mc_lewiner_tiling_13_2;
      goto LABEL_67;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      v25 = (char)(v24 - 7);
      v26 = &mc_lewiner_tiling_13_3;
      goto LABEL_54;
    case 19:
    case 20:
    case 21:
    case 22:
      *(_QWORD *)(a2 + 40) = (char *)&mc_lewiner_tiling_13_4 + 144 * (int)v5 + 36 * (char)(v24 - 19);
      v6 = 12;
      goto LABEL_69;
    case 23:
    case 24:
    case 25:
    case 26:
      v30 = (char)(v24 - 23);
      v31 = mc_lewiner_test_sub_13[4 * v5 + v30];
      result = geom::marching_cubes<float>::test_interior(v4, v31, (float *)a2, 1);
      if ((_DWORD)result == 2)
      {
        if (*(float *)(a2 + 4 * byte_2289C32D8[v31]) > 0.0)
          goto LABEL_84;
      }
      else
      {
        if (result != 1)
        {
          if (!(_BYTE)result)
          {
            v9 = (char *)&mc_lewiner_tiling_13_5_1 + 72 * (int)v5 + 18 * (int)v30;
            goto LABEL_68;
          }
          goto LABEL_82;
        }
        if (*(float *)(a2 + 4 * byte_2289C32D8[v31]) < 0.0)
        {
LABEL_84:
          v32 = &mc_lewiner_tiling_13_5_2_;
LABEL_85:
          v27 = (uint64_t)v32 + 120 * (int)v5 + 30 * (int)v30;
LABEL_55:
          *(_QWORD *)(a2 + 40) = v27;
          v6 = 10;
          goto LABEL_69;
        }
      }
LABEL_82:
      v32 = &mc_lewiner_tiling_13_5_2;
      goto LABEL_85;
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      v25 = (char)(v24 - 27);
      v26 = &mc_lewiner_tiling_13_3_;
LABEL_54:
      v27 = (uint64_t)v26 + 360 * (int)v5 + 30 * v25;
      goto LABEL_55;
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      v28 = (char)(v24 - 39);
      v29 = (char *)&mc_lewiner_tiling_13_2_;
LABEL_67:
      v9 = &v29[108 * (int)v5 + 18 * v28];
      goto LABEL_68;
    case 45:
      v8 = (char *)&mc_lewiner_tiling_13_1_;
      goto LABEL_43;
    default:
      return result;
  }
}

double geom::marching_cubes<float>::get_interior_vertex_position(uint64_t a1, uint64_t a2, int16x4_t *a3, _QWORD *a4, _QWORD *a5)
{
  unsigned __int16 v8;
  int16x4_t *v9;
  uint64_t internal;
  float32x4_t v11;
  float32x4_t v13;
  int16x4_t v14;
  __int8 v15;

  v8 = 0;
  v9 = (int16x4_t *)&geom::marching_cubes<float>::cell_to_edge_vertex_offsets;
  v13 = 0u;
  do
  {
    v14 = vadd_s16(*a3, *v9);
    v15 = v9[1].i8[0];
    internal = geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::find_internal(a5, &v14);
    if (internal != -1)
    {
      v11 = *(float32x4_t *)(*a4 + 16 * *(unsigned int *)(a5[1] + 24 * internal + 16));
      v13 = vaddq_f32(v13, v11);
      ++v8;
    }
    v9 += 2;
  }
  while (v9 != (int16x4_t *)&geom::marching_cubes<double>::vert_map);
  v11.f32[0] = (float)v8;
  v11.i64[0] = vdivq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0)).u64[0];
  return *(double *)v11.i64;
}

_QWORD *_ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE4initEm(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = result;
  result[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0)
    goto LABEL_18;
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
    v6 = 64;
  else
    v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  *result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    v7 = 0;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  v9 = v2[2] << 6 <= 0x40uLL ? 64 : v2[2] << 6;
  result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v2[1] + v10;
      *(_OWORD *)(v12 + 32) = 0uLL;
      *(_OWORD *)(v12 + 48) = 0uLL;
      *(_OWORD *)v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(_DWORD *)(v12 + 44) = -1;
      ++v11;
      v13 = v2[2];
      v10 += 64;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

void _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;
  _BYTE v19[64];
  _QWORD v20[2];
  uint64_t i;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if (a2 <= 1)
    a2 = 1;
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE4initEm(&v22, a2);
  v20[0] = a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; v8 = i)
    {
      v9 = (__int128 *)(*(_QWORD *)(v20[0] + 8) + (v8 << 6));
      v10 = *v9;
      v11 = v9[1];
      v12 = v9[3];
      *(_OWORD *)&v19[32] = v9[2];
      *(_OWORD *)&v19[48] = v12;
      *(_OWORD *)v19 = v10;
      *(_OWORD *)&v19[16] = v11;
      v17[0] = *(_OWORD *)&v19[8];
      v17[1] = *(_OWORD *)&v19[24];
      v17[2] = *(_OWORD *)&v19[40];
      v18 = *((_QWORD *)&v12 + 1);
      _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE12internal_addIS4_EEmRKS1_T_(&v22, v19, v17);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v20);
    }
  }
LABEL_10:
  if (&v22 != a1)
  {
    v13 = v23;
    v14 = *a1;
    v15 = a1[1];
    *a1 = v22;
    a1[1] = v13;
    v22 = v14;
    v23 = v15;
    v16 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v24;
    v24 = v16;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v22);
}

__n128 _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE12internal_addIS4_EEmRKS1_T_(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (!a1[4])
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13grow_to_countEv((uint64_t)a1);
  v6 = WORD1(*a2) - 0x61C8864680B583E9;
  v7 = (v6 + ((unint64_t)(unsigned __int16)*a2 << 6) + ((unint64_t)(unsigned __int16)*a2 >> 2)) ^ (unsigned __int16)*a2;
  v8 = (v6 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v9 = (unint64_t)a1[2] >> 4;
  v10 = v8 % v9;
  v11 = *a1;
  v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (v8 % v9))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v12 >= 0x40)
  {
    do
    {
      if (v10 + 1 == v9)
        v10 = 0;
      else
        ++v10;
      v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v10)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v12 > 0x3F);
  }
  v13 = v11 + 16 * v10;
  v14 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(_BYTE *)(v13 + v12) = v8 & 0x7F;
  v15 = a1[1] + ((v12 + 16 * v10) << 6);
  *(_QWORD *)v15 = *a2;
  result = *(__n128 *)a3;
  v17 = *(_OWORD *)(a3 + 16);
  v18 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v15 + 56) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(v15 + 40) = v18;
  *(_OWORD *)(v15 + 24) = v17;
  *(__n128 *)(v15 + 8) = result;
  v19 = a1[4] - v14;
  ++a1[3];
  a1[4] = v19;
  return result;
}

void _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE9do_resizeEm((__int128 *)a1, v1);
}

_QWORD *geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::init(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = result;
  result[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0)
    goto LABEL_18;
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
    v6 = 64;
  else
    v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  *result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    v7 = 0;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  v9 = ((24 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (24 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v2[1] + v10;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = 0;
      ++v11;
      v13 = v2[2];
      v10 += 24;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

uint64_t _ZNK4geom10hash_brownIDv3_tNS_14marching_cubesIfE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13find_internalERKS1_(_QWORD *a1, int16x4_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint16x4_t v16;

  v2 = a1[2];
  if (v2 < 0x10)
    return -1;
  v3 = v2 >> 4;
  v4 = HIWORD(a2->u32[0]) - 0x61C8864680B583E9;
  v5 = (v4 + ((unint64_t)a2->u16[0] << 6) + ((unint64_t)a2->u16[0] >> 2)) ^ a2->u16[0];
  v6 = (v4 + (v5 << 6) + (v5 >> 2)) ^ v5;
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_8:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    v16 = (uint16x4_t)vceq_s16(*a2, *(int16x4_t *)(a1[1] + ((v13 + v14) << 6)));
    v16.i16[3] = v16.i16[2];
    if ((vminv_u16(v16) & 0x8000) != 0)
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_8;
  }
}

void geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::insert(uint64_t *a1@<X0>, int16x4_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t v10;

  if (geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::find_internal(a1, a2) == -1)
  {
    geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::internal_add<unsigned int>(a1, (uint64_t)a2, *a3);
    if (v10 >> 4 >= (unint64_t)a1[2] >> 4)
      v8 = 0;
    else
      v8 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (v10 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = v9;
}

uint64_t geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::find_internal(_QWORD *a1, int16x4_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int16x4_t *v19;
  uint16x4_t v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t v23;

  v2 = a1[2];
  if (v2 < 0x10)
    return -1;
  v5 = a2->u16[0];
  v6 = HIWORD(a2->u32[0]) - 0x61C8864680B583E9;
  v7 = (v6 + (((v6 + (v5 << 6) + (v5 >> 2)) ^ v5) << 6) + (((v6 + (v5 << 6) + (v5 >> 2)) ^ v5) >> 2)) ^ (v6 + (v5 << 6) + (v5 >> 2)) ^ v5;
  v8 = ((a2[1].u8[0] + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) % (v2 >> 4);
  v9 = (int8x16_t)xmmword_2289B6F60;
  v10.i64[0] = -1;
  for (v10.i64[1] = -1; ; v10.i64[1] = -1)
  {
    v11 = (HIWORD(a2->u32[0])
         - 0x61C8864680B583E9
         + ((unint64_t)a2->u16[0] << 6)
         + ((unint64_t)a2->u16[0] >> 2)) ^ a2->u16[0];
    v12 = (HIWORD(a2->u32[0]) + 2135587863 + ((_DWORD)v11 << 6) + (v11 >> 2)) ^ v11;
    v13 = a2[1].u8[0];
    v14 = *(int8x16_t *)(*a1 + 16 * v8);
    v15 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(((v13 + ((_BYTE)v12 << 6) + (v12 >> 2) + 23) ^ v12) & 0x7F), v14), v9)))), (int8x8_t)0x3830282018100800);
    v16 = __clz(__rbit64(v15));
    if (v16 <= 0x3F)
      break;
LABEL_9:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v14, v10), v9)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    v23 = v9;
    if (++v8 == v2 >> 4)
      v8 = 0;
    v21 = geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::h1((uint64_t)a1, (uint64_t)a2);
    v2 = a1[2];
    v22 = v21 % (v2 >> 4);
    result = -1;
    v9 = v23;
    v10.i64[0] = -1;
    if (v8 == v22)
      return result;
  }
  v17 = 16 * v8;
  while (1)
  {
    result = v16 + v17;
    v19 = (int16x4_t *)(a1[1] + 24 * (v16 + v17));
    v20 = (uint16x4_t)vceq_s16(*a2, *v19);
    v20.i16[3] = v20.i16[2];
    if ((vminv_u16(v20) & 0x8000) != 0 && v13 == v19[1].u8[0])
      return result;
    if (v16 <= 0x3E)
    {
      v16 = __clz(__rbit64((-2 << v16) & v15));
      if (v16 < 0x40)
        continue;
    }
    goto LABEL_9;
  }
}

__n128 geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::internal_add<unsigned int>(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _BOOL8 v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;

  if (!a1[4])
    geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::grow_to_count((uint64_t)a1);
  v6 = WORD1(*(_QWORD *)a2) - 0x61C8864680B583E9;
  v7 = (v6
      + ((unint64_t)(unsigned __int16)*(_QWORD *)a2 << 6)
      + ((unint64_t)(unsigned __int16)*(_QWORD *)a2 >> 2)) ^ (unsigned __int16)*(_QWORD *)a2;
  v8 = (v6 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v9 = *(unsigned __int8 *)(a2 + 8);
  v10 = (unint64_t)a1[2] >> 4;
  v11 = ((v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8) % v10;
  v12 = *a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v11)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = ((v9 + ((_BYTE)v8 << 6) + (v8 >> 2) + 23) ^ v8) & 0x7F;
  v16 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v15;
  v17 = a1[1] + 24 * (v13 + 16 * v11);
  result = *(__n128 *)a2;
  *(_OWORD *)v17 = *(_OWORD *)a2;
  *(_DWORD *)(v17 + 16) = a3;
  v19 = a1[4] - v16;
  ++a1[3];
  a1[4] = v19;
  return result;
}

uint64_t geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::h1(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (unsigned __int16)*(_QWORD *)a2;
  v3 = WORD1(*(_QWORD *)a2) - 0x61C8864680B583E9;
  v4 = (v3 + (((v3 + (v2 << 6) + (v2 >> 2)) ^ v2) << 6) + (((v3 + (v2 << 6) + (v2 >> 2)) ^ v2) >> 2)) ^ (v3 + (v2 << 6) + (v2 >> 2)) ^ v2;
  return (*(unsigned __int8 *)(a2 + 8) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
}

void geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::grow_to_count(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::do_resize((__int128 *)a1, v1);
}

void geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::do_resize(__int128 *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t i;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (a2 <= 1)
    a2 = 1;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::init(&v19, a2);
  v17[0] = a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v17[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; v8 = i)
    {
      v9 = *(_QWORD *)(v17[0] + 8) + 24 * v8;
      v10 = *(_QWORD *)(v9 + 16);
      v15 = *(_OWORD *)v9;
      v16 = v10;
      geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::internal_add<unsigned int>(&v19, &v15);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v17);
    }
  }
LABEL_10:
  if (&v19 != a1)
  {
    v11 = v20;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v19;
    a1[1] = v11;
    v19 = v12;
    v20 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v21;
    v21 = v14;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v19);
}

uint64_t geom::marching_cubes<float>::test_face(uint64_t a1, int a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float *v7;
  float *v8;
  float *v9;

  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  switch(a2)
  {
    case -6:
    case 6:
      v7 = a3 + 7;
      v8 = a3 + 6;
      v9 = a3 + 5;
      a3 += 4;
      goto LABEL_9;
    case -5:
    case 5:
      v7 = a3 + 3;
      v8 = a3 + 2;
      goto LABEL_8;
    case -4:
    case 4:
      v7 = a3 + 7;
      v8 = a3 + 4;
      v9 = a3;
      a3 += 3;
      goto LABEL_9;
    case -3:
    case 3:
      v7 = a3 + 6;
      v8 = a3 + 7;
      v9 = a3 + 3;
      a3 += 2;
      goto LABEL_9;
    case -2:
    case 2:
      v7 = a3 + 5;
      v8 = a3 + 6;
      v9 = a3 + 2;
      ++a3;
      goto LABEL_9;
    case -1:
    case 1:
      v7 = a3 + 4;
      v8 = a3 + 5;
LABEL_8:
      v9 = a3 + 1;
LABEL_9:
      v5 = *v8;
      v4 = *v7;
      v3 = *a3;
      v6 = *v9;
      break;
    case 0:
      return (a2 < 1) ^ ((float)(v3 * (float)((float)(v3 * v5) - (float)(v4 * v6))) >= 0.0);
    default:
      v4 = 0.0;
      v5 = 0.0;
      v6 = 0.0;
      break;
  }
  return (a2 < 1) ^ ((float)(v3 * (float)((float)(v3 * v5) - (float)(v4 * v6))) >= 0.0);
}

uint64_t geom::marching_cubes<float>::test_interior(uint64_t a1, int a2, float *a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  int v15;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;

  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = a3[4] - *a3;
  v9 = a3[6] - v6;
  v10 = a3[5] - v5;
  v11 = a3[7] - v7;
  v12 = (float)(v8 * v9) - (float)(v10 * v11);
  if (fabsf(v12) >= 0.00001
    && ((v13 = (float)-(float)((float)((float)((float)(v4 * v9) + (float)(v6 * v8)) - (float)(v7 * v10))
                             + (float)((float)-v5 * v11))
             / (v12 + v12),
         v13 >= 0.0)
      ? (v14 = v13 <= 1.0)
      : (v14 = 0),
        v14))
  {
    v17 = v4 + (float)(v8 * v13);
    v18 = v5 + (float)(v10 * v13);
    v19 = v6 + (float)(v9 * v13);
    v20 = v7 + (float)(v11 * v13);
    switch(a2)
    {
      case 1:
        if (v12 >= 0.0)
          goto LABEL_6;
        if ((float)(v17 * v19) <= (float)(v18 * v20))
          goto LABEL_6;
        v21 = v17;
        if ((LODWORD(v17) ^ LODWORD(v19)) < 0)
          goto LABEL_6;
        v22 = *a3;
        break;
      case 2:
        if (v12 <= 0.0)
          goto LABEL_6;
        if ((float)(v17 * v19) >= (float)(v18 * v20))
          goto LABEL_6;
        v21 = v18;
        if ((LODWORD(v18) ^ LODWORD(v20)) < 0)
          goto LABEL_6;
        v22 = a3[1];
        break;
      case 3:
        if (v12 >= 0.0)
          goto LABEL_6;
        if ((float)(v17 * v19) <= (float)(v18 * v20))
          goto LABEL_6;
        v21 = v19;
        if ((LODWORD(v17) ^ LODWORD(v19)) < 0)
          goto LABEL_6;
        v22 = a3[2];
        break;
      case 4:
        if (v12 <= 0.0)
          goto LABEL_6;
        if ((float)(v17 * v19) >= (float)(v18 * v20))
          goto LABEL_6;
        v21 = v7 + (float)(v11 * v13);
        if ((LODWORD(v18) ^ LODWORD(v20)) < 0)
          goto LABEL_6;
        v22 = a3[3];
        break;
      default:
        goto LABEL_6;
    }
    v15 = a4 + ((LODWORD(v21) ^ ~LODWORD(v22)) >> 31);
  }
  else
  {
LABEL_6:
    LOBYTE(v15) = 0;
  }
  return (char)v15;
}

void _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE6insertERKS1_OS4_(uint64_t *a1@<X0>, int16x4_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13[5];
  uint64_t v14;

  if (_ZNK4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13find_internalERKS1_(a1, a2) == -1)
  {
    v11 = *(_OWORD *)(a3 + 48);
    v13[2] = *(_OWORD *)(a3 + 32);
    v13[3] = v11;
    v13[4] = *(_OWORD *)(a3 + 64);
    v14 = *(_QWORD *)(a3 + 80);
    v12 = *(_OWORD *)(a3 + 16);
    v13[0] = *(_OWORD *)a3;
    v13[1] = v12;
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE12internal_addIS4_EEmRKS1_T_(a1, a2, v13);
    if (v10 >> 4 >= (unint64_t)a1[2] >> 4)
      v8 = 0;
    else
      v8 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (v10 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = v9;
}

uint64_t geom::marching_cubes<double>::process_cell_33(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  char v24;
  int v25;
  void *v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v2 = (char *)&mc_lewiner_cases + 2 * *(unsigned __int8 *)(a2 + 64);
  v4 = result;
  v5 = v2[1];
  switch(*v2)
  {
    case 1:
      *(_QWORD *)(a2 + 72) = (char *)&mc_lewiner_tiling_1 + 3 * v5;
      v6 = 1;
      goto LABEL_69;
    case 2:
      v7 = (char *)&mc_lewiner_tiling_2;
      goto LABEL_52;
    case 3:
      result = geom::marching_cubes<double>::test_face(result, mc_lewiner_test_3[v5], (double *)a2);
      if ((_DWORD)result)
      {
        v8 = (char *)&mc_lewiner_tiling_3_2;
        goto LABEL_43;
      }
      v7 = (char *)&mc_lewiner_tiling_3_1;
      goto LABEL_52;
    case 4:
      result = geom::marching_cubes<double>::test_interior(result, mc_lewiner_test_4[v5], (double *)a2, 0);
      if ((_DWORD)result)
      {
        v9 = (char *)&mc_lewiner_tiling_4_2 + 18 * (int)v5;
LABEL_68:
        *(_QWORD *)(a2 + 72) = v9;
        v6 = 6;
      }
      else
      {
        v7 = (char *)&mc_lewiner_tiling_4_1;
LABEL_52:
        *(_QWORD *)(a2 + 72) = &v7[6 * (int)v5];
        v6 = 2;
      }
      goto LABEL_69;
    case 5:
      v10 = 9 * v5;
      v11 = (char *)&mc_lewiner_tiling_5;
      goto LABEL_9;
    case 6:
      result = geom::marching_cubes<double>::test_face(result, mc_lewiner_test_6[2 * v5], (double *)a2);
      if ((_DWORD)result)
      {
        *(_QWORD *)(a2 + 72) = (char *)&mc_lewiner_tiling_6_2 + 16 * v5 - v5;
        v6 = 5;
      }
      else
      {
        result = geom::marching_cubes<double>::test_interior(v4, mc_lewiner_test_6[2 * v5 + 1], (double *)a2, 0);
        if ((_DWORD)result)
        {
          *(_QWORD *)(a2 + 72) = (char *)&mc_lewiner_tiling_6_1_2 + 27 * (int)v5;
          v6 = 9;
        }
        else
        {
          v10 = 9 * v5;
          v11 = (char *)&mc_lewiner_tiling_6_1_1;
LABEL_9:
          *(_QWORD *)(a2 + 72) = &v11[v10];
          v6 = 3;
        }
      }
      goto LABEL_69;
    case 7:
      v12 = (char *)&mc_lewiner_test_7 + 5 * v5;
      v13 = geom::marching_cubes<double>::test_face(result, *v12, (double *)a2);
      if (geom::marching_cubes<double>::test_face(v4, v12[1], (double *)a2))
        v13 |= 2u;
      v14 = geom::marching_cubes<double>::test_face(v4, v12[2], (double *)a2);
      LODWORD(v15) = v13 | 4;
      if (v14)
        v15 = v15;
      else
        v15 = v13;
      __asm { BR              X10 }
      return result;
    case 8:
      v7 = (char *)&mc_lewiner_tiling_8;
      goto LABEL_52;
    case 9:
      v8 = (char *)&mc_lewiner_tiling_9;
      goto LABEL_43;
    case 10:
      v16 = &mc_lewiner_test_10[6 * v2[1]];
      v17 = geom::marching_cubes<double>::test_face(result, *v16, (double *)a2);
      result = geom::marching_cubes<double>::test_face(v4, v16[1], (double *)a2);
      if (v17)
      {
        if (!(_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_10_2;
          goto LABEL_63;
        }
        result = geom::marching_cubes<double>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 4], (double *)a2, 0);
        if ((_DWORD)result
          || (result = geom::marching_cubes<double>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 5], (double *)a2, 0), (_DWORD)result))
        {
          v18 = (char *)&mc_lewiner_tiling_10_1_2_;
          goto LABEL_63;
        }
        v8 = (char *)&mc_lewiner_tiling_10_1_1_;
      }
      else
      {
        if ((_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_10_2_;
          goto LABEL_63;
        }
        result = geom::marching_cubes<double>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 2], (double *)a2, 0);
        if ((_DWORD)result
          || (result = geom::marching_cubes<double>::test_interior(v4, mc_lewiner_test_10[6 * (int)v5 + 3], (double *)a2, 0), (_DWORD)result))
        {
          v18 = (char *)&mc_lewiner_tiling_10_1_2;
          goto LABEL_63;
        }
        v8 = (char *)&mc_lewiner_tiling_10_1_1;
      }
      goto LABEL_43;
    case 11:
      v8 = (char *)&mc_lewiner_tiling_11;
      goto LABEL_43;
    case 12:
      v19 = &mc_lewiner_test_12[4 * v5];
      v20 = geom::marching_cubes<double>::test_face(result, *v19, (double *)a2);
      result = geom::marching_cubes<double>::test_face(v4, v19[1], (double *)a2);
      if (!v20)
      {
        if ((_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_12_2_;
          goto LABEL_63;
        }
        result = geom::marching_cubes<double>::test_interior(v4, mc_lewiner_test_12[4 * v5 + 2], (double *)a2, 0);
        if ((_DWORD)result)
        {
          v18 = (char *)&mc_lewiner_tiling_12_1_2;
          goto LABEL_63;
        }
        v8 = (char *)&mc_lewiner_tiling_12_1_1;
LABEL_43:
        *(_QWORD *)(a2 + 72) = &v8[12 * (int)v5];
        v6 = 4;
        goto LABEL_69;
      }
      if (!(_DWORD)result)
      {
        v18 = (char *)&mc_lewiner_tiling_12_2;
        goto LABEL_63;
      }
      result = geom::marching_cubes<double>::test_interior(v4, mc_lewiner_test_12[4 * v5 + 3], (double *)a2, 0);
      if (!(_DWORD)result)
      {
        v8 = (char *)&mc_lewiner_tiling_12_1_1_;
        goto LABEL_43;
      }
      v18 = (char *)&mc_lewiner_tiling_12_1_2_;
LABEL_63:
      *(_QWORD *)(a2 + 72) = &v18[24 * (int)v5];
      v6 = 8;
LABEL_69:
      *(_BYTE *)(a2 + 80) = v6;
      return result;
    case 13:
      v21 = (char *)&mc_lewiner_test_13 + 6 * v2[1];
      v22 = geom::marching_cubes<double>::test_face(result, *v21, (double *)a2);
      if (geom::marching_cubes<double>::test_face(v4, v21[1], (double *)a2))
        v22 |= 2u;
      if (geom::marching_cubes<double>::test_face(v4, v21[2], (double *)a2))
        v22 |= 4u;
      if (geom::marching_cubes<double>::test_face(v4, v21[3], (double *)a2))
        v22 |= 8u;
      if (geom::marching_cubes<double>::test_face(v4, 5, (double *)a2))
        v22 += 16;
      result = geom::marching_cubes<double>::test_face(v4, 6, (double *)a2);
      v23 = v22 + 32;
      if (!(_DWORD)result)
        v23 = v22;
      break;
    case 14:
      v8 = (char *)&mc_lewiner_tiling_14;
      goto LABEL_43;
    default:
      return result;
  }
  v24 = mc_lewiner_subconfig_13[v23];
  switch(v24)
  {
    case 0:
      v8 = (char *)&mc_lewiner_tiling_13_1;
      goto LABEL_43;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      v28 = (char)(v24 - 1);
      v29 = (char *)&mc_lewiner_tiling_13_2;
      goto LABEL_67;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      v25 = (char)(v24 - 7);
      v26 = &mc_lewiner_tiling_13_3;
      goto LABEL_54;
    case 19:
    case 20:
    case 21:
    case 22:
      *(_QWORD *)(a2 + 72) = (char *)&mc_lewiner_tiling_13_4 + 144 * (int)v5 + 36 * (char)(v24 - 19);
      v6 = 12;
      goto LABEL_69;
    case 23:
    case 24:
    case 25:
    case 26:
      v30 = (char)(v24 - 23);
      v31 = mc_lewiner_test_sub_13[4 * v5 + v30];
      result = geom::marching_cubes<double>::test_interior(v4, v31, (double *)a2, 1);
      if ((_DWORD)result == 2)
      {
        if (*(double *)(a2 + 8 * byte_2289C32D8[v31]) > 0.0)
          goto LABEL_84;
      }
      else
      {
        if (result != 1)
        {
          if (!(_BYTE)result)
          {
            v9 = (char *)&mc_lewiner_tiling_13_5_1 + 72 * (int)v5 + 18 * (int)v30;
            goto LABEL_68;
          }
          goto LABEL_82;
        }
        if (*(double *)(a2 + 8 * byte_2289C32D8[v31]) < 0.0)
        {
LABEL_84:
          v32 = &mc_lewiner_tiling_13_5_2_;
LABEL_85:
          v27 = (uint64_t)v32 + 120 * (int)v5 + 30 * (int)v30;
LABEL_55:
          *(_QWORD *)(a2 + 72) = v27;
          v6 = 10;
          goto LABEL_69;
        }
      }
LABEL_82:
      v32 = &mc_lewiner_tiling_13_5_2;
      goto LABEL_85;
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      v25 = (char)(v24 - 27);
      v26 = &mc_lewiner_tiling_13_3_;
LABEL_54:
      v27 = (uint64_t)v26 + 360 * (int)v5 + 30 * v25;
      goto LABEL_55;
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      v28 = (char)(v24 - 39);
      v29 = (char *)&mc_lewiner_tiling_13_2_;
LABEL_67:
      v9 = &v29[108 * (int)v5 + 18 * v28];
      goto LABEL_68;
    case 45:
      v8 = (char *)&mc_lewiner_tiling_13_1_;
      goto LABEL_43;
    default:
      return result;
  }
}

float64x2_t geom::marching_cubes<double>::get_interior_vertex_position@<Q0>(int16x4_t *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X4>, float64x2_t *a4@<X8>)
{
  unsigned __int16 v8;
  int16x4_t *v9;
  uint64_t internal;
  float64x2_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t result;
  float64x2_t v15;
  float64x2_t v16;
  int16x4_t v17;
  __int8 v18;

  v8 = 0;
  v15 = 0u;
  v16 = 0u;
  v9 = (int16x4_t *)&geom::marching_cubes<double>::cell_to_edge_vertex_offsets;
  do
  {
    v17 = vadd_s16(*a1, *v9);
    v18 = v9[1].i8[0];
    internal = geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::find_internal(a3, &v17);
    if (internal != -1)
    {
      v12 = (float64x2_t *)(*a2 + 32 * *(unsigned int *)(a3[1] + 24 * internal + 16));
      v11 = *v12;
      v15 = vaddq_f64(v15, v12[1]);
      v16 = vaddq_f64(v16, *v12);
      ++v8;
    }
    v9 += 2;
  }
  while (v9 != (int16x4_t *)&geom::cluster_parallel_clipper<float>::k_boundary_component_min_stride);
  v11.f64[0] = (double)v8;
  v13 = vdivq_f64(v16, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
  result = vdivq_f64(v15, v11);
  *a4 = v13;
  a4[1] = result;
  return result;
}

_QWORD *_ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE4initEm(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = result;
  result[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0)
    goto LABEL_18;
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
    v6 = 64;
  else
    v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  *result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    v7 = 0;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  v9 = ((96 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (96 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v2[1] + v10;
      *(_OWORD *)(v12 + 64) = 0uLL;
      *(_OWORD *)(v12 + 80) = 0uLL;
      *(_OWORD *)(v12 + 32) = 0uLL;
      *(_OWORD *)(v12 + 48) = 0uLL;
      *(_OWORD *)v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(_DWORD *)(v12 + 76) = -1;
      ++v11;
      v13 = v2[2];
      v10 += 96;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

void _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[5];
  uint64_t v19;
  _BYTE v20[96];
  _QWORD v21[2];
  uint64_t i;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  if (a2 <= 1)
    a2 = 1;
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE4initEm(&v23, a2);
  v21[0] = a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v21[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; v8 = i)
    {
      v9 = (_OWORD *)(*(_QWORD *)(v21[0] + 8) + 96 * v8);
      v10 = v9[1];
      *(_OWORD *)v20 = *v9;
      *(_OWORD *)&v20[16] = v10;
      v11 = v9[2];
      v12 = v9[3];
      v13 = v9[5];
      *(_OWORD *)&v20[64] = v9[4];
      *(_OWORD *)&v20[80] = v13;
      *(_OWORD *)&v20[32] = v11;
      *(_OWORD *)&v20[48] = v12;
      v18[3] = *(_OWORD *)&v20[56];
      v18[4] = *(_OWORD *)&v20[72];
      v18[1] = *(_OWORD *)&v20[24];
      v18[2] = *(_OWORD *)&v20[40];
      v18[0] = *(_OWORD *)&v20[8];
      v19 = *((_QWORD *)&v13 + 1);
      _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE12internal_addIS4_EEmRKS1_T_(&v23, v20, v18);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v21);
    }
  }
LABEL_10:
  if (&v23 != a1)
  {
    v14 = v24;
    v15 = *a1;
    v16 = a1[1];
    *a1 = v23;
    a1[1] = v14;
    v23 = v15;
    v24 = v16;
    v17 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v25;
    v25 = v17;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v23);
}

__n128 _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE12internal_addIS4_EEmRKS1_T_(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!a1[4])
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13grow_to_countEv((uint64_t)a1);
  v6 = WORD1(*a2) - 0x61C8864680B583E9;
  v7 = (v6 + ((unint64_t)(unsigned __int16)*a2 << 6) + ((unint64_t)(unsigned __int16)*a2 >> 2)) ^ (unsigned __int16)*a2;
  v8 = (v6 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v9 = (unint64_t)a1[2] >> 4;
  v10 = v8 % v9;
  v11 = *a1;
  v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (v8 % v9))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v12 >= 0x40)
  {
    do
    {
      if (v10 + 1 == v9)
        v10 = 0;
      else
        ++v10;
      v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v10)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v12 > 0x3F);
  }
  v13 = v11 + 16 * v10;
  v14 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(_BYTE *)(v13 + v12) = v8 & 0x7F;
  v15 = a1[1] + 96 * (v12 + 16 * v10);
  *(_QWORD *)v15 = *a2;
  v16 = *a3;
  *(_OWORD *)(v15 + 24) = a3[1];
  *(_OWORD *)(v15 + 8) = v16;
  result = (__n128)a3[2];
  v18 = a3[3];
  v19 = a3[4];
  *(_QWORD *)(v15 + 88) = *((_QWORD *)a3 + 10);
  *(_OWORD *)(v15 + 72) = v19;
  *(_OWORD *)(v15 + 56) = v18;
  *(__n128 *)(v15 + 40) = result;
  v20 = a1[4] - v14;
  ++a1[3];
  a1[4] = v20;
  return result;
}

void _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    _ZN4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE9do_resizeEm((__int128 *)a1, v1);
}

uint64_t _ZNK4geom10hash_brownIDv3_tNS_14marching_cubesIdE4cellENSt3__14hashIS1_EENS_23vector_equality_functorEE13find_internalERKS1_(_QWORD *a1, int16x4_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint16x4_t v16;

  v2 = a1[2];
  if (v2 < 0x10)
    return -1;
  v3 = v2 >> 4;
  v4 = HIWORD(a2->u32[0]) - 0x61C8864680B583E9;
  v5 = (v4 + ((unint64_t)a2->u16[0] << 6) + ((unint64_t)a2->u16[0] >> 2)) ^ a2->u16[0];
  v6 = (v4 + (v5 << 6) + (v5 >> 2)) ^ v5;
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_8:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    v16 = (uint16x4_t)vceq_s16(*a2, *(int16x4_t *)(a1[1] + 96 * (v13 + v14)));
    v16.i16[3] = v16.i16[2];
    if ((vminv_u16(v16) & 0x8000) != 0)
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_8;
  }
}

void geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::insert(uint64_t *a1@<X0>, int16x4_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t v10;

  if (geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::find_internal(a1, a2) == -1)
  {
    geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::internal_add<unsigned int>(a1, (uint64_t)a2, *a3);
    if (v10 >> 4 >= (unint64_t)a1[2] >> 4)
      v8 = 0;
    else
      v8 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (v10 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v10;
  *(_BYTE *)(a4 + 24) = v9;
}

__n128 geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::internal_add<unsigned int>(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _BOOL8 v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;

  if (!a1[4])
    geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::grow_to_count((uint64_t)a1);
  v6 = WORD1(*(_QWORD *)a2) - 0x61C8864680B583E9;
  v7 = (v6
      + ((unint64_t)(unsigned __int16)*(_QWORD *)a2 << 6)
      + ((unint64_t)(unsigned __int16)*(_QWORD *)a2 >> 2)) ^ (unsigned __int16)*(_QWORD *)a2;
  v8 = (v6 + (v7 << 6) + (v7 >> 2)) ^ v7;
  v9 = *(unsigned __int8 *)(a2 + 8);
  v10 = (unint64_t)a1[2] >> 4;
  v11 = ((v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8) % v10;
  v12 = *a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v11)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = ((v9 + ((_BYTE)v8 << 6) + (v8 >> 2) + 23) ^ v8) & 0x7F;
  v16 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v15;
  v17 = a1[1] + 24 * (v13 + 16 * v11);
  result = *(__n128 *)a2;
  *(_OWORD *)v17 = *(_OWORD *)a2;
  *(_DWORD *)(v17 + 16) = a3;
  v19 = a1[4] - v16;
  ++a1[3];
  a1[4] = v19;
  return result;
}

void geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::grow_to_count(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::do_resize((__int128 *)a1, v1);
}

void geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::do_resize(__int128 *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t i;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (a2 <= 1)
    a2 = 1;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  geom::hash_brown<geom::marching_cubes<float>::cell_edge,unsigned int,geom::marching_cubes<float>::cell_edge_hash,std::equal_to<geom::marching_cubes<float>::cell_edge>>::init(&v19, a2);
  v17[0] = a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v17[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; v8 = i)
    {
      v9 = *(_QWORD *)(v17[0] + 8) + 24 * v8;
      v10 = *(_QWORD *)(v9 + 16);
      v15 = *(_OWORD *)v9;
      v16 = v10;
      geom::hash_brown<geom::marching_cubes<double>::cell_edge,unsigned int,geom::marching_cubes<double>::cell_edge_hash,std::equal_to<geom::marching_cubes<double>::cell_edge>>::internal_add<unsigned int>(&v19, &v15);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v17);
    }
  }
LABEL_10:
  if (&v19 != a1)
  {
    v11 = v20;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v19;
    a1[1] = v11;
    v19 = v12;
    v20 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v21;
    v21 = v14;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v19);
}

uint64_t geom::marching_cubes<double>::test_face(uint64_t a1, int a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double *v7;
  double *v8;
  double *v9;

  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  switch(a2)
  {
    case -6:
    case 6:
      v7 = a3 + 7;
      v8 = a3 + 6;
      v9 = a3 + 5;
      a3 += 4;
      goto LABEL_9;
    case -5:
    case 5:
      v7 = a3 + 3;
      v8 = a3 + 2;
      goto LABEL_8;
    case -4:
    case 4:
      v7 = a3 + 7;
      v8 = a3 + 4;
      v9 = a3;
      a3 += 3;
      goto LABEL_9;
    case -3:
    case 3:
      v7 = a3 + 6;
      v8 = a3 + 7;
      v9 = a3 + 3;
      a3 += 2;
      goto LABEL_9;
    case -2:
    case 2:
      v7 = a3 + 5;
      v8 = a3 + 6;
      v9 = a3 + 2;
      ++a3;
      goto LABEL_9;
    case -1:
    case 1:
      v7 = a3 + 4;
      v8 = a3 + 5;
LABEL_8:
      v9 = a3 + 1;
LABEL_9:
      v5 = *v8;
      v4 = *v7;
      v3 = *a3;
      v6 = *v9;
      break;
    case 0:
      return (a2 < 1) ^ (v3 * (v3 * v5 - v4 * v6) >= 0.0);
    default:
      v4 = 0.0;
      v5 = 0.0;
      v6 = 0.0;
      break;
  }
  return (a2 < 1) ^ (v3 * (v3 * v5 - v4 * v6) >= 0.0);
}

uint64_t geom::marching_cubes<double>::test_interior(uint64_t a1, int a2, double *a3, char a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = a3[4] - *a3;
  v9 = a3[6] - v6;
  v10 = a3[5] - v5;
  v11 = a3[7] - v7;
  v12 = v8 * v9 - v10 * v11;
  if (fabs(v12) >= 0.000001
    && ((v13 = -(v4 * v9 + v6 * v8 - v7 * v10 + -v5 * v11) / (v12 + v12), v13 >= 0.0) ? (v14 = v13 <= 1.0) : (v14 = 0),
        v14))
  {
    v17 = v4 + v8 * v13;
    v18 = v5 + v10 * v13;
    v19 = v6 + v9 * v13;
    v20 = v7 + v11 * v13;
    switch(a2)
    {
      case 1:
        if (v12 >= 0.0)
          return 0;
        if (v17 * v19 <= v18 * v20)
          return 0;
        v21 = v17;
        if (((*(_QWORD *)&v17 ^ *(_QWORD *)&v19) & 0x8000000000000000) != 0)
          return 0;
        v22 = *a3;
        break;
      case 2:
        if (v12 <= 0.0)
          return 0;
        if (v17 * v19 >= v18 * v20)
          return 0;
        v21 = v18;
        if (((*(_QWORD *)&v18 ^ *(_QWORD *)&v20) & 0x8000000000000000) != 0)
          return 0;
        v22 = a3[1];
        break;
      case 3:
        if (v12 >= 0.0)
          return 0;
        if (v17 * v19 <= v18 * v20)
          return 0;
        v21 = v19;
        if (((*(_QWORD *)&v17 ^ *(_QWORD *)&v19) & 0x8000000000000000) != 0)
          return 0;
        v22 = a3[2];
        break;
      case 4:
        if (v12 <= 0.0)
          return 0;
        if (v17 * v19 >= v18 * v20)
          return 0;
        v21 = v7 + v11 * v13;
        if (((*(_QWORD *)&v18 ^ *(_QWORD *)&v20) & 0x8000000000000000) != 0)
          return 0;
        v22 = a3[3];
        break;
      default:
        return 0;
    }
    return (char)(((*(_QWORD *)&v21 ^ *(_QWORD *)&v22) >= 0) + a4);
  }
  else
  {
    return 0;
  }
}

uint64_t geom_intersect_ray_bbox_2f(float *a1, float *a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  float *v6;
  float *v7;
  float32x2_t v9[2];
  int v10;
  int v11;
  float32x2_t v12[2];

  v12[0] = a5;
  v12[1] = a6;
  v11 = 0;
  v10 = 0;
  v9[0] = a3;
  v9[1] = a4;
  if (a1)
    v6 = a1;
  else
    v6 = (float *)&v11;
  if (a2)
    v7 = a2;
  else
    v7 = (float *)&v10;
  return geom::intersect_ray_bbox<float,(unsigned char)2>(v9, v12, v6, v7);
}

uint64_t geom::intersect_ray_bbox<float,(unsigned char)2>(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4)
{
  float32x2_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float v15;
  float32x2_t v17;
  float v18;
  float v19;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t result;
  float v34;
  float v35;
  float v37;
  float v38;
  float v40;
  float v41;

  *a3 = -INFINITY;
  *a4 = INFINITY;
  v4 = a1[1];
  if (fabsf(v4.f32[0]) <= 0.00001)
  {
    v12 = *a1;
    v13 = *a2;
    if ((vceq_f32(*a1, *a2).u8[0] & 1) == 0)
    {
      v14 = fabsf(v12.f32[0]);
      v15 = fabsf(v13.f32[0]);
      if (v14 == INFINITY || v15 == INFINITY)
      {
        if ((vcgt_f32(v13, v12).u8[0] & 1) != 0)
          goto LABEL_53;
      }
      else if ((float)(v13.f32[0] + (float)((float)((float)(v14 + v15) + 1.0) * -0.00001)) >= v12.f32[0])
      {
        goto LABEL_53;
      }
    }
    v17 = a2[1];
    if ((vceq_f32(v12, v17).u8[0] & 1) == 0)
    {
      v18 = fabsf(v12.f32[0]);
      v19 = fabsf(v17.f32[0]);
      if (v18 == INFINITY || v19 == INFINITY)
      {
        if ((vcgt_f32(v12, v17).u8[0] & 1) != 0)
          goto LABEL_53;
      }
      else if ((float)(v17.f32[0] + (float)((float)((float)(v18 + v19) + 1.0) * 0.00001)) <= v12.f32[0])
      {
        goto LABEL_53;
      }
    }
    v7 = INFINITY;
  }
  else
  {
    v5 = 1.0 / v4.f32[0];
    v6 = v5 * (float)(COERCE_FLOAT(*a2) - COERCE_FLOAT(*a1));
    v7 = v5 * (float)(COERCE_FLOAT(*(_QWORD *)&a2[1]) - COERCE_FLOAT(*a1));
    if (v7 >= v6)
      v8 = v6;
    else
      v8 = v7;
    if (v7 < v6)
      v7 = v6;
    if (v8 < *a3)
      v8 = *a3;
    *a3 = v8;
    if (*a4 < v7)
      v7 = *a4;
    *a4 = v7;
    v9 = *a3;
    if (*a3 != v7)
    {
      v10 = fabsf(v9);
      if (v10 == INFINITY || (v11 = fabsf(v7), v11 == INFINITY))
      {
        if (v9 > v7)
          goto LABEL_81;
      }
      else if ((float)(v7 + (float)((float)((float)(v10 + v11) + 1.0) * 0.00001)) <= v9)
      {
        goto LABEL_81;
      }
    }
  }
  v21 = a1[1].f32[1];
  if (fabsf(v21) > 0.00001)
  {
    v22 = 1.0 / v21;
    v23 = a1->f32[1];
    v24 = (float)(1.0 / v21) * (float)(a2->f32[1] - v23);
    v7 = v22 * (float)(a2[1].f32[1] - v23);
    if (v7 >= v24)
      v25 = v24;
    else
      v25 = v7;
    if (v7 < v24)
      v7 = v24;
    v26 = *a3;
    if (v25 >= *a3)
      v26 = v25;
    *a3 = v26;
    if (*a4 < v7)
      v7 = *a4;
    *a4 = v7;
    v27 = *a3;
    if (*a3 == v7)
    {
LABEL_51:
      if (v27 >= 0.0 || v7 >= 0.0)
      {
        if (v27 >= 0.0)
        {
          if (v27 != v7)
          {
            v40 = fabsf(v27);
            if (v40 == INFINITY)
              return 2;
            v41 = fabsf(v7);
            if (v41 == INFINITY || vabds_f32(v27, v7) >= (float)((float)((float)(v40 + v41) + 1.0) * 0.00001))
              return 2;
          }
        }
        else
        {
          *a3 = 0.0;
        }
        return 1;
      }
      goto LABEL_53;
    }
    v28 = fabsf(v27);
    if (v28 == INFINITY || (v29 = fabsf(v7), v29 == INFINITY))
    {
      if (v27 > v7)
        goto LABEL_81;
    }
    else if ((float)(v7 + (float)((float)((float)(v28 + v29) + 1.0) * 0.00001)) <= v27)
    {
LABEL_81:
      result = 0;
      goto LABEL_82;
    }
LABEL_50:
    v27 = *a3;
    goto LABEL_51;
  }
  v30 = a1->f32[1];
  v31 = a2->f32[1];
  if (v30 != v31)
  {
    v34 = fabsf(v30);
    v35 = fabsf(v31);
    if (v34 == INFINITY || v35 == INFINITY)
    {
      if (v30 < v31)
        goto LABEL_53;
    }
    else if ((float)(v31 + (float)((float)((float)(v34 + v35) + 1.0) * -0.00001)) >= v30)
    {
      goto LABEL_53;
    }
  }
  v32 = a2[1].f32[1];
  if (v30 == v32)
    goto LABEL_50;
  v37 = fabsf(v30);
  v38 = fabsf(v32);
  if (v37 == INFINITY || v38 == INFINITY)
  {
    if (v30 <= v32)
      goto LABEL_50;
  }
  else if ((float)(v32 + (float)((float)((float)(v37 + v38) + 1.0) * 0.00001)) > v30)
  {
    goto LABEL_50;
  }
LABEL_53:
  result = 0;
LABEL_82:
  *a4 = INFINITY;
  *a3 = INFINITY;
  return result;
}

uint64_t geom_intersect_ray_bbox_2d(double *a1, double *a2, float64x2_t a3, __n128 a4, float64x2_t a5, float64x2_t a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v14;
  double v15;
  unsigned __int8 v17;

  if (a1)
  {
    *a1 = -INFINITY;
    v6 = 0.0;
  }
  else
  {
    v6 = -INFINITY;
  }
  if (a2)
  {
    *a2 = INFINITY;
    v7 = 0.0;
  }
  else
  {
    v7 = INFINITY;
  }
  if (fabs(a4.n128_f64[0]) > 0.000001)
  {
    v8 = 1.0 / a4.n128_f64[0] * vsubq_f64(a5, a3).f64[0];
    v9 = vsubq_f64(a6, a3).f64[0];
    v10 = 1.0 / a4.n128_f64[0] * v9;
    if (v10 >= v8)
      v11 = v8;
    else
      v11 = 1.0 / a4.n128_f64[0] * v9;
    if (v10 < v8)
      v10 = v8;
    if (a1)
    {
      if (v11 < *a1)
        v11 = *a1;
      *a1 = v11;
      if (a2)
      {
LABEL_17:
        if (*a2 < v10)
          v10 = *a2;
        *a2 = v10;
        goto LABEL_31;
      }
    }
    else
    {
      if (v11 >= v6)
        v6 = v11;
      if (a2)
        goto LABEL_17;
    }
    if (v7 < v10)
      v10 = v7;
    v7 = v10;
LABEL_31:
    v12 = v6;
    if (a1)
      v12 = *a1;
    if (v12 != v10 && v10 + 0.000001 <= v12)
      goto LABEL_66;
    goto LABEL_38;
  }
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_f64(a3, a5))).u8[0] & 1) != 0
    && a5.f64[0] + -0.000001 >= a3.f64[0])
  {
    goto LABEL_66;
  }
  v10 = INFINITY;
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_f64(a3, a6))).u32[0] & 1) != 0
    && a6.f64[0] + 0.000001 <= a3.f64[0])
  {
    goto LABEL_66;
  }
LABEL_38:
  if (fabs(a4.n128_f64[1]) <= 0.000001)
  {
    if (a3.f64[1] != a5.f64[1] && a5.f64[1] + -0.000001 >= a3.f64[1]
      || a3.f64[1] != a6.f64[1] && a6.f64[1] + 0.000001 <= a3.f64[1])
    {
      goto LABEL_66;
    }
    if (a1)
      v6 = *a1;
    goto LABEL_64;
  }
  v14 = vmulq_n_f64(vsubq_f64((float64x2_t)vzip2q_s64((int64x2_t)a6, (int64x2_t)a5), (float64x2_t)vdupq_laneq_s64((int64x2_t)a3, 1)), 1.0 / a4.n128_f64[1]);
  if (v14.f64[0] >= v14.f64[1])
    v15 = v14.f64[1];
  else
    v15 = v14.f64[0];
  if (v14.f64[0] < v14.f64[1])
    v14.f64[0] = v14.f64[1];
  if (a1)
  {
    if (v15 < *a1)
      v15 = *a1;
    *a1 = v15;
    if (a2)
      goto LABEL_48;
LABEL_74:
    if (v7 >= v14.f64[0])
      v10 = v14.f64[0];
    else
      v10 = v7;
    if (a1)
      goto LABEL_52;
    goto LABEL_53;
  }
  if (v15 >= v6)
    v6 = v15;
  if (!a2)
    goto LABEL_74;
LABEL_48:
  if (*a2 >= v14.f64[0])
    v10 = v14.f64[0];
  else
    v10 = *a2;
  *a2 = v10;
  if (a1)
LABEL_52:
    v6 = *a1;
LABEL_53:
  if (v6 != v10 && v10 + 0.000001 <= v6)
    goto LABEL_66;
LABEL_64:
  if (v10 < 0.0 && v6 < 0.0)
  {
LABEL_66:
    if (a2)
      *a2 = INFINITY;
    v17 = 0;
    if (a1)
      *a1 = INFINITY;
    return v17;
  }
  if (v6 >= 0.0)
  {
    if (vabdd_f64(v6, v10) <= 0.000001 || v6 == v10)
      return 1;
    else
      return 2;
  }
  else
  {
    if (a1)
      *a1 = 0.0;
    return 1;
  }
}

uint64_t geom_intersect_ray_bbox_3f(float *a1, __int32 *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  float *v6;
  __int32 *v7;
  float32x4_t v9[2];
  int v10;
  int v11;
  float32x4_t v12[2];

  v12[0] = a5;
  v12[1] = a6;
  v11 = 0;
  v10 = 0;
  v9[0] = a3;
  v9[1] = a4;
  if (a1)
    v6 = a1;
  else
    v6 = (float *)&v11;
  if (a2)
    v7 = a2;
  else
    v7 = &v10;
  return geom::intersect_ray_bbox<float,(unsigned char)3>(v9, v12, v6, v7);
}

uint64_t geom::intersect_ray_bbox<float,(unsigned char)3>(float32x4_t *a1, float32x4_t *a2, float *a3, __int32 *a4)
{
  float v4;
  float v5;
  float v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  float32x4_t v18;
  float v19;
  float v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v43;
  float v44;
  float v46;
  float v47;
  uint64_t result;
  float v49;
  float v50;
  float v51;
  float v52;

  *a3 = -INFINITY;
  *a4 = 2139095040;
  v4 = a1[1].f32[0];
  if (fabsf(v4) <= 0.00001)
  {
    v13 = *a1;
    v14 = *a2;
    if ((vmovn_s32(vceqq_f32(*a1, *a2)).u8[0] & 1) == 0)
    {
      v15 = fabsf(v13.f32[0]);
      v16 = fabsf(v14.f32[0]);
      if (v15 == INFINITY || v16 == INFINITY)
      {
        if ((vmovn_s32(vcgtq_f32(v14, v13)).u8[0] & 1) != 0)
          goto LABEL_115;
      }
      else if ((float)(v14.f32[0] + (float)((float)((float)(v15 + v16) + 1.0) * -0.00001)) >= v13.f32[0])
      {
        goto LABEL_115;
      }
    }
    v18 = a2[1];
    if ((vmovn_s32(vceqq_f32(v13, v18)).u8[0] & 1) == 0)
    {
      v19 = fabsf(v13.f32[0]);
      v20 = fabsf(v18.f32[0]);
      if (v19 == INFINITY || v20 == INFINITY)
      {
        if ((vmovn_s32(vcgtq_f32(v13, v18)).u8[0] & 1) != 0)
          goto LABEL_115;
      }
      else if ((float)(v18.f32[0] + (float)((float)((float)(v19 + v20) + 1.0) * 0.00001)) <= v13.f32[0])
      {
        goto LABEL_115;
      }
    }
    v7.i32[0] = 2139095040;
  }
  else
  {
    v5 = 1.0 / v4;
    v6 = v5 * (float)(a2->f32[0] - a1->f32[0]);
    v7.f32[0] = v5 * (float)(a2[1].f32[0] - a1->f32[0]);
    if (v7.f32[0] >= v6)
      v8 = v6;
    else
      v8 = v7.f32[0];
    if (v7.f32[0] < v6)
      v7.f32[0] = v6;
    v9 = *a3;
    if (v8 >= *a3)
      v9 = v8;
    *a3 = v9;
    if (*(float *)a4 < v7.f32[0])
      v7.i32[0] = *a4;
    *a4 = v7.i32[0];
    v10 = *a3;
    if (*a3 != v7.f32[0])
    {
      v11 = fabsf(v10);
      if (v11 == INFINITY || (v12 = fabsf(v7.f32[0]), v12 == INFINITY))
      {
        if (v10 > v7.f32[0])
          goto LABEL_111;
      }
      else if ((float)(v7.f32[0] + (float)((float)((float)(v11 + v12) + 1.0) * 0.00001)) <= v10)
      {
        goto LABEL_111;
      }
    }
  }
  v22 = a1[1].f32[1];
  if (fabsf(v22) <= 0.00001)
  {
    v28 = a1->f32[1];
    v29 = a2->f32[1];
    if (v28 != v29)
    {
      v40 = fabsf(v28);
      v41 = fabsf(v29);
      if (v40 == INFINITY || v41 == INFINITY)
      {
        if (v28 < v29)
          goto LABEL_115;
      }
      else if ((float)(v29 + (float)((float)((float)(v40 + v41) + 1.0) * -0.00001)) >= v28)
      {
        goto LABEL_115;
      }
    }
    v30 = a2[1].f32[1];
    if (v28 != v30)
    {
      v43 = fabsf(v28);
      v44 = fabsf(v30);
      if (v43 == INFINITY || v44 == INFINITY)
      {
        if (v28 > v30)
          goto LABEL_115;
      }
      else if ((float)(v30 + (float)((float)((float)(v43 + v44) + 1.0) * 0.00001)) <= v28)
      {
        goto LABEL_115;
      }
    }
  }
  else
  {
    v7 = vmul_n_f32(vsub_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a2[1].f32, *(int32x2_t *)a2->f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1->f32, 1)), 1.0 / v22);
    if (v7.f32[0] >= v7.f32[1])
      v23 = v7.f32[1];
    else
      v23 = v7.f32[0];
    if (v7.f32[0] < v7.f32[1])
      v7.f32[0] = v7.f32[1];
    v24 = *a3;
    if (v23 >= *a3)
      v24 = v23;
    *a3 = v24;
    if (*(float *)a4 < v7.f32[0])
      v7.i32[0] = *a4;
    *a4 = v7.i32[0];
    v25 = *a3;
    if (*a3 != v7.f32[0])
    {
      v26 = fabsf(v25);
      if (v26 == INFINITY || (v27 = fabsf(v7.f32[0]), v27 == INFINITY))
      {
        if (v25 > v7.f32[0])
          goto LABEL_111;
      }
      else if ((float)(v7.f32[0] + (float)((float)((float)(v26 + v27) + 1.0) * 0.00001)) <= v25)
      {
        goto LABEL_111;
      }
    }
  }
  v31 = a1[1].f32[2];
  if (fabsf(v31) <= 0.00001)
  {
    v37 = a1->f32[2];
    v38 = a2->f32[2];
    if (v37 != v38)
    {
      v46 = fabsf(v37);
      if (v46 == INFINITY || (v47 = fabsf(v38), v47 == INFINITY))
      {
        if (v37 < v38)
          goto LABEL_115;
      }
      else if ((float)(v38 + (float)((float)((float)(v46 + v47) + 1.0) * -0.00001)) >= v37)
      {
        goto LABEL_115;
      }
    }
    v39 = a2[1].f32[2];
    if (v37 == v39)
      goto LABEL_67;
    v49 = fabsf(v37);
    if (v49 == INFINITY || (v50 = fabsf(v39), v50 == INFINITY))
    {
      if (v37 <= v39)
        goto LABEL_67;
    }
    else if ((float)(v39 + (float)((float)((float)(v49 + v50) + 1.0) * 0.00001)) > v37)
    {
      goto LABEL_67;
    }
LABEL_115:
    result = 0;
    goto LABEL_116;
  }
  v7 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a2[1], (int8x16_t)a2[1], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)), (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a1, 2)), 1.0 / v31);
  if (v7.f32[0] >= v7.f32[1])
    v32 = v7.f32[1];
  else
    v32 = v7.f32[0];
  if (v7.f32[0] < v7.f32[1])
    v7.f32[0] = v7.f32[1];
  v33 = *a3;
  if (v32 >= *a3)
    v33 = v32;
  *a3 = v33;
  if (*(float *)a4 < v7.f32[0])
    v7.i32[0] = *a4;
  *a4 = v7.i32[0];
  v34 = *a3;
  if (*a3 == v7.f32[0])
  {
LABEL_68:
    if (v34 >= 0.0 || v7.f32[0] >= 0.0)
    {
      if (v34 >= 0.0)
      {
        if (v34 != v7.f32[0])
        {
          v51 = fabsf(v34);
          if (v51 == INFINITY)
            return 2;
          v52 = fabsf(v7.f32[0]);
          if (v52 == INFINITY || vabds_f32(v34, v7.f32[0]) >= (float)((float)((float)(v51 + v52) + 1.0) * 0.00001))
            return 2;
        }
      }
      else
      {
        *a3 = 0.0;
      }
      return 1;
    }
    goto LABEL_115;
  }
  v35 = fabsf(v34);
  if (v35 == INFINITY || (v36 = fabsf(v7.f32[0]), v36 == INFINITY))
  {
    if (v34 > v7.f32[0])
      goto LABEL_111;
    goto LABEL_67;
  }
  if ((float)(v7.f32[0] + (float)((float)((float)(v35 + v36) + 1.0) * 0.00001)) > v34)
  {
LABEL_67:
    v34 = *a3;
    goto LABEL_68;
  }
LABEL_111:
  result = 0;
LABEL_116:
  *a4 = 2139095040;
  *a3 = INFINITY;
  return result;
}

uint64_t geom_intersect_ray_bbox_3d(_OWORD *a1, uint64_t a2, double *a3, uint64_t *a4)
{
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  v5 = a1[3];
  v7[2] = a1[2];
  v7[3] = v5;
  if (!a3)
    a3 = (double *)&v9;
  if (!a4)
    a4 = &v8;
  return geom::intersect_ray_bbox<double,(unsigned char)3>((uint64_t)v7, a2, a3, a4);
}

uint64_t geom::intersect_ray_bbox<double,(unsigned char)3>(uint64_t a1, uint64_t a2, double *a3, uint64_t *a4)
{
  int8x16_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  unint64_t v11;
  double v12;
  double v14;
  double v16;
  double v17;
  double v19;
  double v20;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v30;
  double v31;
  double v32;
  unsigned __int8 v33;

  *a3 = -INFINITY;
  *a4 = 0x7FF0000000000000;
  v4 = *(int8x16_t *)(a1 + 32);
  if (fabs(*(double *)v4.i64) <= 0.000001)
  {
    v12 = *(double *)a1;
    if (*(double *)a1 != *(double *)a2 && *(double *)a2 + -0.000001 >= v12)
      goto LABEL_73;
    v14 = *(double *)(a2 + 32);
    if (v12 != v14 && v14 + 0.000001 <= v12)
      goto LABEL_73;
    v10 = *(double *)(a1 + 48);
    v11 = vextq_s8(v4, v4, 8uLL).u64[0];
    v4.i64[0] = 0x7FF0000000000000;
  }
  else
  {
    v5 = 1.0 / *(double *)v4.i64;
    v6 = v5 * (*(double *)a2 - *(double *)a1);
    *(double *)v4.i64 = v5 * (*(double *)(a2 + 32) - *(double *)a1);
    if (*(double *)v4.i64 >= v6)
      v7 = v6;
    else
      v7 = *(double *)v4.i64;
    if (*(double *)v4.i64 < v6)
      *(double *)v4.i64 = v6;
    v8 = *a3;
    if (v7 >= *a3)
      v8 = v7;
    *a3 = v8;
    if (*(double *)a4 < *(double *)v4.i64)
      v4.i64[0] = *a4;
    *a4 = v4.i64[0];
    if (*a3 != *(double *)v4.i64 && *(double *)v4.i64 + 0.000001 <= *a3)
      goto LABEL_73;
    v10 = *(double *)(a1 + 48);
    v11 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL).u64[0];
  }
  if (fabs(*(double *)&v11) <= 0.000001)
  {
    v19 = *(double *)(a1 + 8);
    v20 = *(double *)(a2 + 8);
    if (v19 != v20 && v20 + -0.000001 >= v19)
      goto LABEL_73;
    v22 = *(double *)(a2 + 40);
    if (v19 != v22 && v22 + 0.000001 <= v19)
      goto LABEL_73;
  }
  else
  {
    v4 = (int8x16_t)vmulq_n_f64(vsubq_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(a2 + 32), *(int64x2_t *)a2), (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)a1, 1)), 1.0 / *(double *)&v11);
    if (*(double *)v4.i64 >= *(double *)&v4.i64[1])
      v16 = *(double *)&v4.i64[1];
    else
      v16 = *(double *)v4.i64;
    if (*(double *)v4.i64 < *(double *)&v4.i64[1])
      v4.i64[0] = v4.i64[1];
    v17 = *a3;
    if (v16 >= *a3)
      v17 = v16;
    *a3 = v17;
    if (*(double *)a4 < *(double *)v4.i64)
      v4.i64[0] = *a4;
    *a4 = v4.i64[0];
    if (*a3 != *(double *)v4.i64 && *(double *)v4.i64 + 0.000001 <= *a3)
      goto LABEL_73;
    v10 = *(double *)(a1 + 48);
  }
  if (fabs(v10) <= 0.000001)
  {
    v30 = *(double *)(a1 + 16);
    v31 = *(double *)(a2 + 16);
    if (v30 != v31 && v31 + -0.000001 >= v30)
      goto LABEL_73;
    v32 = *(double *)(a2 + 48);
    if (v30 != v32 && v32 + 0.000001 <= v30)
      goto LABEL_73;
    v28 = *a3;
  }
  else
  {
    v23 = 1.0 / v10;
    v24 = *(double *)(a1 + 16);
    v25 = 1.0 / v10 * (*(double *)(a2 + 16) - v24);
    *(double *)v4.i64 = v23 * (*(double *)(a2 + 48) - v24);
    if (*(double *)v4.i64 >= v25)
      v26 = v25;
    else
      v26 = *(double *)v4.i64;
    if (*(double *)v4.i64 < v25)
      *(double *)v4.i64 = v25;
    v27 = *a3;
    if (v26 >= *a3)
      v27 = v26;
    *a3 = v27;
    if (*(double *)a4 < *(double *)v4.i64)
      v4.i64[0] = *a4;
    *a4 = v4.i64[0];
    v28 = *a3;
    if (*a3 != *(double *)v4.i64 && *(double *)v4.i64 + 0.000001 <= v28)
      goto LABEL_73;
  }
  if (v28 < 0.0 && *(double *)v4.i64 < 0.0)
  {
LABEL_73:
    v33 = 0;
    *a4 = 0x7FF0000000000000;
    *a3 = INFINITY;
    return v33;
  }
  if (v28 >= 0.0)
  {
    if (vabdd_f64(v28, *(double *)v4.i64) <= 0.000001 || v28 == *(double *)v4.i64)
      return 1;
    else
      return 2;
  }
  else
  {
    *a3 = 0.0;
    return 1;
  }
}

uint64_t geom_intersect_ray_line_2f(uint64_t a1, int a2, float *a3, float32x2_t a4, double a5, double a6, double a7, double a8, double a9)
{
  _BOOL8 v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float v16;
  float v17;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;
  float v29;
  unsigned int v30;
  float v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  uint64_t result;
  uint64_t v36;
  float32x2_t v37;

  if ((float)(*(float *)&a2 * *(float *)&a2) <= (float)(vaddv_f32(vmul_f32((float32x2_t)a1, (float32x2_t)a1)) * 1.0e-10))
  {
    v11 = 0;
  }
  else
  {
    v9 = fabsf(*((float *)&a1 + 1)) > COERCE_FLOAT(a1 & 0x7FFFFFFF);
    v36 = a1;
    v10 = (float)-*(float *)&a2 / *(float *)((unint64_t)&v36 | (4 * v9));
    v37 = 0;
    *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * v9)) = v10;
    v11 = v37;
  }
  *(float *)&a9 = -*((float *)&a1 + 1);
  v12 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a9, (int32x2_t)a1);
  v13 = vmul_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a5);
  v14 = vaddv_f32(v13);
  v15 = vmul_f32(v12, v12);
  v16 = vaddv_f32(v15);
  *(float *)&a9 = fabsf(v14);
  v17 = fabsf(v16);
  if (*(float *)&a9 <= 0.00000011921 && v17 <= 0.00000011921)
  {
    v28 = vsub_f32(a4, v11);
    v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
    v27 = 0.0;
    if (v29 > 0.00001)
    {
      v30 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v19 = vsub_f32(v11, a4);
  v20 = vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1));
  if (*(float *)&a9 <= 0.00000011921 || v17 <= 0.00000011921)
  {
    v22 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a9), 0), (int8x8_t)v12, *(int8x8_t *)&a5);
    v23 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a9), 0), (int8x8_t)vneg_f32(v19), (int8x8_t)v19);
    if (*(float *)&a9 > 0.00000011921)
      v24 = v14;
    else
      v24 = v16;
    v25 = vmlas_n_f32((float)-v22.f32[1] * v23.f32[0], v23.f32[1], v22.f32[0]);
    if ((float)(v25 * v25) <= (float)(v24 * 1.0e-10))
    {
      v26 = vmul_f32(v22, v23);
      LODWORD(v27) = vdiv_f32(vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1)), v20).u32[0];
      if (*(float *)&a9 <= 0.00000011921)
        v27 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v30 = 0;
    v27 = 0.0;
    goto LABEL_28;
  }
  v31 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), *(float32x2_t *)&a5, 1), *(float *)&a1, *(float *)&a5);
  if (fabsf(v31 * v31) > (float)(1.0e-10
                                * vmul_f32(v20, vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1))).f32[0]))
  {
    v27 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v19, 1), *(float *)&a1, v19.f32[0]) / v31;
LABEL_24:
    v30 = 1;
    goto LABEL_28;
  }
  v32 = vmul_f32(v19, v19);
  v33 = vmlas_n_f32(-(float)(v19.f32[1] * *(float *)&a5), *((float *)&a5 + 1), v19.f32[0]);
  if (fabsf(v33 * v33) > (float)(1.0e-10
                                * vmul_f32(v20, vadd_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1))).f32[0]))
    goto LABEL_26;
  v34 = vmul_f32(*(float32x2_t *)&a5, v19);
  LODWORD(v27) = vdiv_f32(vadd_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)), v20).u32[0];
  v30 = 2;
LABEL_28:
  if (v27 >= 0.0)
    result = v30;
  else
    result = 0;
  if (a3)
  {
    if (!(_DWORD)result)
      v27 = INFINITY;
    *a3 = v27;
  }
  return result;
}

uint64_t geom_intersect_ray_line_2d(float64x2_t *a1, double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6, float64x2_t a7, double a8, int64x2_t a9)
{
  float64x2_t v9;
  double v10;
  double v11;
  _BOOL8 v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  double v32;
  unsigned int v33;
  double v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  uint64_t result;
  float64x2_t v39;
  float64x2_t v40;

  v9 = *a1;
  v10 = a1[1].f64[0];
  v11 = a1->f64[1];
  if (v10 * v10 <= vaddvq_f64(vmulq_f64(v9, v9)) * 1.0e-12)
  {
    v14 = 0uLL;
  }
  else
  {
    v12 = fabs(v9.f64[1]) > fabs(v9.f64[0]);
    v39 = *a1;
    v13 = -v10 / *(double *)((unint64_t)&v39 | (8 * v12));
    a9.i8[8] = 0;
    a9.i8[9] = 0;
    a9.i8[10] = 0;
    a9.i8[11] = 0;
    a9.i8[12] = 0;
    a9.i8[13] = 0;
    a9.i8[14] = 0;
    a9.i8[15] = 0;
    v40 = 0u;
    *(double *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF7 | (8 * v12)) = v13;
    v14 = v40;
  }
  *(double *)a9.i64 = -v11;
  v15 = (float64x2_t)vzip1q_s64(a9, (int64x2_t)v9);
  v16 = vmulq_f64(a4, a4);
  v17 = vaddvq_f64(v16);
  v18 = vmulq_f64(v15, v15);
  v19 = vaddvq_f64(v18);
  *(double *)a9.i64 = fabs(v17);
  v20 = fabs(v19);
  if (*(double *)a9.i64 <= 2.22044605e-16 && v20 <= 2.22044605e-16)
  {
    v31 = vsubq_f64(a3, v14);
    v32 = sqrt(vaddvq_f64(vmulq_f64(v31, v31)));
    v30 = 0.0;
    if (v32 > 0.000001)
    {
      v33 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v22 = vsubq_f64(v14, a3);
  v23 = vaddq_f64(v16, (float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1));
  v16.f64[0] = 2.22044605e-16;
  if (*(double *)a9.i64 <= 2.22044605e-16 || v20 <= 2.22044605e-16)
  {
    v25 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v16, (float64x2_t)a9).i64[0], 0), (int8x16_t)v15, (int8x16_t)a4);
    a7.f64[0] = 2.22044605e-16;
    v26 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(a7, (float64x2_t)a9).i64[0], 0), (int8x16_t)vnegq_f64(v22), (int8x16_t)v22);
    if (*(double *)a9.i64 > 2.22044605e-16)
      v27 = v17;
    else
      v27 = v19;
    v28 = vmlad_n_f64(-v25.f64[1] * v26.f64[0], v26.f64[1], v25.f64[0]);
    if (v28 * v28 <= v27 * 1.0e-12)
    {
      v29 = vmulq_f64(v25, v26);
      *(_QWORD *)&v30 = *(_OWORD *)&vdivq_f64(vaddq_f64(v29, (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1)), v23);
      if (*(double *)a9.i64 <= 2.22044605e-16)
        v30 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v33 = 0;
    v30 = 0.0;
    goto LABEL_28;
  }
  v34 = vmlad_n_f64(vmuld_lane_f64(v11, a4, 1), v9.f64[0], a4.f64[0]);
  if (fabs(v34 * v34) > 1.0e-12
                       * vmulq_f64(v23, vaddq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1))).f64[0])
  {
    v30 = vmlad_n_f64(vmuld_lane_f64(v11, v22, 1), v9.f64[0], v22.f64[0]) / v34;
LABEL_24:
    v33 = 1;
    goto LABEL_28;
  }
  v35 = vmulq_f64(v22, v22);
  v36 = vmlad_n_f64(-(v22.f64[1] * a4.f64[0]), a4.f64[1], v22.f64[0]);
  if (fabs(v36 * v36) > 1.0e-12
                       * vmulq_f64(v23, vaddq_f64(v35, (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1))).f64[0])
    goto LABEL_26;
  v37 = vmulq_f64(a4, v22);
  *(_QWORD *)&v30 = *(_OWORD *)&vdivq_f64(vaddq_f64(v37, (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)), v23);
  v33 = 2;
LABEL_28:
  if (v30 >= 0.0)
    result = v33;
  else
    result = 0;
  if (a2)
  {
    if (!(_DWORD)result)
      v30 = INFINITY;
    *a2 = v30;
  }
  return result;
}

uint64_t geom_intersect_ray_line_segment_2f(float *a1, int *a2, float32x2_t a3, double a4, float32x2_t a5, float32x2_t a6, double a7, double a8)
{
  float32x2_t v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;
  float v12;
  float v13;
  float32x2_t v15;
  float v16;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x2_t v24;
  uint64_t v25;
  float v26;
  int v27;
  float32x2_t v28;
  float v29;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  unsigned __int8 v37;

  v8 = vsub_f32(a6, a5);
  v9 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  v10 = vaddv_f32(v9);
  v11 = vmul_f32(v8, v8);
  v12 = vaddv_f32(v11);
  *(float *)&a8 = fabsf(v10);
  v13 = fabsf(v12);
  if (*(float *)&a8 > 0.00000011921 || v13 > 0.00000011921)
  {
    v15 = vsub_f32(a5, a3);
    if (*(float *)&a8 > 0.00000011921)
      v16 = v10;
    else
      v16 = v12;
    if (*(float *)&a8 > 0.00000011921 && v13 > 0.00000011921)
    {
      v28 = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1));
      v29 = vmlas_n_f32((float)-*((float *)&a4 + 1) * v8.f32[0], v8.f32[1], *(float *)&a4);
      if (fabsf(v29 * v29) <= (float)(1.0e-10
                                     * vmul_f32(v28, vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1))).f32[0]))
      {
        v31 = vmul_f32(v15, v15);
        v32 = vmlas_n_f32(-(float)(v15.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v15.f32[0]);
        if (fabsf(v32 * v32) > (float)(1.0e-10
                                      * vmul_f32(v28, vadd_f32(v31, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1))).f32[0]))
          goto LABEL_21;
        v33 = vmul_f32(*(float32x2_t *)&a4, v15);
        v34 = vdiv_f32(vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)), v28);
        v35 = vmul_f32(*(float32x2_t *)&a4, vadd_f32(v15, v8));
        v36 = vdiv_f32(vadd_f32(v35, (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1)), v28);
        if (v34.f32[0] < 0.0 && v36.f32[0] < 0.0)
          goto LABEL_21;
        v37 = vcgt_f32(v34, v36).u8[0];
        if ((v37 & 1) != 0)
          v23 = v36.f32[0];
        else
          v23 = v34.f32[0];
        if ((v37 & 1) != 0)
          v22 = 0.0;
        else
          v22 = 1.0;
        v25 = 2;
        goto LABEL_28;
      }
      v23 = vmlas_n_f32(-(float)(v15.f32[1] * v8.f32[0]), v8.f32[1], v15.f32[0]) / v29;
      v22 = vmlas_n_f32(-(float)(v15.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v15.f32[0]) / v29;
    }
    else
    {
      v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)v8, *(int8x8_t *)&a4);
      v19 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)vneg_f32(v15), (int8x8_t)v15);
      v20 = vmlas_n_f32((float)-v18.f32[1] * v19.f32[0], v19.f32[1], v18.f32[0]);
      if ((float)(v20 * v20) > (float)(v16 * 1.0e-10))
      {
LABEL_21:
        v25 = 0;
        v26 = INFINITY;
        v27 = 2143289344;
        goto LABEL_29;
      }
      v21 = vaddv_f32(vmul_f32(v18, v19)) / v16;
      v22 = 0.0;
      if (*(float *)&a8 > 0.00000011921)
        v23 = v21;
      else
        v23 = 0.0;
      if (v13 > 0.00000011921)
        v22 = v21;
    }
  }
  else
  {
    v24 = vsub_f32(a3, a5);
    v23 = 0.0;
    v22 = 0.0;
    if (sqrtf(vaddv_f32(vmul_f32(v24, v24))) > 0.00001)
      goto LABEL_21;
  }
  v25 = 0;
  v26 = INFINITY;
  v27 = 2143289344;
  if (v23 >= 0.0 && v22 >= 0.0 && v22 <= 1.0)
  {
    v25 = 1;
LABEL_28:
    v26 = fmaxf(v23, 0.0);
    v27 = LODWORD(v22);
  }
LABEL_29:
  if (a1)
    *a1 = v26;
  if (a2)
    *a2 = v27;
  return v25;
}

uint64_t geom_intersect_ray_line_segment_2d(double *a1, uint64_t *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  double v14;
  float64x2_t v16;
  double v17;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  unsigned __int8 v38;

  v9 = vsubq_f64(a6, a5);
  v10 = vmulq_f64(a4, a4);
  v11 = vaddvq_f64(v10);
  v12 = vmulq_f64(v9, v9);
  v13 = vaddvq_f64(v12);
  a8.f64[0] = fabs(v11);
  v14 = fabs(v13);
  if (a8.f64[0] > 2.22044605e-16 || v14 > 2.22044605e-16)
  {
    v16 = vsubq_f64(a5, a3);
    v8.f64[0] = 2.22044605e-16;
    if (a8.f64[0] > 2.22044605e-16)
      v17 = v11;
    else
      v17 = v13;
    if (a8.f64[0] > 2.22044605e-16 && v14 > 2.22044605e-16)
    {
      v29 = vaddq_f64(v10, (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1));
      v30 = vmlad_n_f64(-a4.f64[1] * v9.f64[0], v9.f64[1], a4.f64[0]);
      if (fabs(v30 * v30) <= 1.0e-12
                            * vmulq_f64(v29, vaddq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1))).f64[0])
      {
        v32 = vmulq_f64(v16, v16);
        v33 = vmlad_n_f64(-(v16.f64[1] * a4.f64[0]), a4.f64[1], v16.f64[0]);
        if (fabs(v33 * v33) > 1.0e-12
                             * vmulq_f64(v29, vaddq_f64(v32, (float64x2_t)vdupq_laneq_s64((int64x2_t)v32, 1))).f64[0])
          goto LABEL_21;
        v34 = vmulq_f64(a4, v16);
        v35 = vdivq_f64(vaddq_f64(v34, (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)), v29);
        v36 = vmulq_f64(a4, vaddq_f64(v16, v9));
        v37 = vdivq_f64(vaddq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)), v29);
        if (v35.f64[0] < 0.0 && v37.f64[0] < 0.0)
          goto LABEL_21;
        v38 = vmovn_s64(vcgtq_f64(v35, v37)).u8[0];
        if ((v38 & 1) != 0)
          v24 = v37.f64[0];
        else
          v24 = v35.f64[0];
        if ((v38 & 1) != 0)
          v23 = 0.0;
        else
          v23 = 1.0;
        v26 = 2;
        goto LABEL_28;
      }
      v24 = vmlad_n_f64(-(v16.f64[1] * v9.f64[0]), v9.f64[1], v16.f64[0]) / v30;
      v23 = vmlad_n_f64(-(v16.f64[1] * a4.f64[0]), a4.f64[1], v16.f64[0]) / v30;
    }
    else
    {
      v19 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v8, a8).i64[0], 0), (int8x16_t)v9, (int8x16_t)a4);
      v9.f64[0] = 2.22044605e-16;
      v20 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v9, a8).i64[0], 0), (int8x16_t)vnegq_f64(v16), (int8x16_t)v16);
      v21 = vmlad_n_f64(-v19.f64[1] * v20.f64[0], v20.f64[1], v19.f64[0]);
      if (v21 * v21 > v17 * 1.0e-12)
      {
LABEL_21:
        v26 = 0;
        v27 = INFINITY;
        v28 = 0x7FF8000000000000;
        goto LABEL_29;
      }
      v22 = vaddvq_f64(vmulq_f64(v19, v20)) / v17;
      v23 = 0.0;
      if (a8.f64[0] > 2.22044605e-16)
        v24 = v22;
      else
        v24 = 0.0;
      if (v14 > 2.22044605e-16)
        v23 = v22;
    }
  }
  else
  {
    v25 = vsubq_f64(a3, a5);
    v24 = 0.0;
    v23 = 0.0;
    if (sqrt(vaddvq_f64(vmulq_f64(v25, v25))) > 0.000001)
      goto LABEL_21;
  }
  v26 = 0;
  v27 = INFINITY;
  v28 = 0x7FF8000000000000;
  if (v24 >= 0.0 && v23 >= 0.0 && v23 <= 1.0)
  {
    v26 = 1;
LABEL_28:
    v27 = fmax(v24, 0.0);
    v28 = *(_QWORD *)&v23;
  }
LABEL_29:
  if (a1)
    *a1 = v27;
  if (a2)
    *a2 = v28;
  return v26;
}

uint64_t geom_intersect_ray_ray_2f(float *a1, float *a2, float32x2_t a3, double a4, float32x2_t a5, double a6)
{
  int32x2_t v6;
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float v14;
  unsigned int v15;
  float32x2_t v16;
  unsigned int v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  int32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float v28;
  BOOL v29;
  int32x2_t v30;

  v6 = (int32x2_t)vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  v7 = (int32x2_t)vmul_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a6);
  v8 = vadd_f32((float32x2_t)vzip1_s32(v7, v6), (float32x2_t)vzip2_s32(v7, v6));
  v9 = vcge_f32((float32x2_t)0x3400000034000000, vabs_f32(v8));
  if ((v9.i32[1] & v9.i32[0] & 1) != 0)
  {
    v10 = vsub_f32(a3, a5);
    v11 = 0.0;
    v29 = sqrtf(vaddv_f32(vmul_f32(v10, v10))) > 0.00001;
    v12 = 0.0;
    if (!v29)
      goto LABEL_24;
LABEL_28:
    v22 = 0;
    v12 = INFINITY;
    v11 = INFINITY;
    goto LABEL_29;
  }
  v13 = vsub_f32(a5, a3);
  if ((v9.i8[4] & 1) != 0)
    v14 = v8.f32[0];
  else
    v14 = v8.f32[1];
  if ((v9.i8[4] & 1) != 0)
    v15 = -1;
  else
    v15 = 0;
  if (((v9.i8[4] | v9.i8[0]) & 1) != 0)
  {
    v16 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v15), *(int8x8_t *)&a6, *(int8x8_t *)&a4);
    if ((v9.i8[4] & 1) != 0)
      v17 = -1;
    else
      v17 = 0;
    v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v17), (int8x8_t)vneg_f32(v13), (int8x8_t)v13);
    v19 = vmlas_n_f32((float)-v16.f32[1] * v18.f32[0], v18.f32[1], v16.f32[0]);
    if ((float)(v19 * v19) > (float)(v14 * 1.0e-10))
      goto LABEL_28;
    v12 = vaddv_f32(vmul_f32(v16, v18)) / v14;
    if ((v9.i8[4] & 1) != 0)
      v11 = 0.0;
    else
      v11 = v12;
    if ((v9.i8[0] & 1) != 0)
      v12 = 0.0;
LABEL_24:
    if (v11 >= 0.0 && v12 >= 0.0)
    {
      v22 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  v20 = vmlas_n_f32((float)-*((float *)&a4 + 1) * *(float *)&a6, *((float *)&a6 + 1), *(float *)&a4);
  v21 = (float)(v8.f32[1] * v8.f32[0]) * 1.0e-10;
  if (fabsf(v20 * v20) > v21)
  {
    v11 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a6), *((float *)&a6 + 1), v13.f32[0]) / v20;
    v12 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v13.f32[0]) / v20;
    goto LABEL_24;
  }
  v23 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v13.f32[0]);
  if (fabsf(v23 * v23) > (float)((float)(v8.f32[1] * vaddv_f32(vmul_f32(v13, v13))) * 1.0e-10))
    goto LABEL_28;
  v25 = (int32x2_t)vmul_f32(*(float32x2_t *)&a4, v13);
  v26 = (int32x2_t)vmul_f32(*(float32x2_t *)&a6, vneg_f32(v13));
  v27 = vdiv_f32(vadd_f32((float32x2_t)vzip1_s32(v26, v25), (float32x2_t)vzip2_s32(v26, v25)), v8);
  v28 = fabsf(vmul_f32(v27, v27).f32[0]);
  v12 = 0.0;
  v29 = fabsf(vmuls_lane_f32(v27.f32[1], v27, 1)) > v21 || v28 > v21;
  if (!v29)
  {
    v22 = 1;
LABEL_43:
    v11 = 0.0;
    goto LABEL_29;
  }
  if (v27.f32[1] < 0.0 && v27.f32[0] < 0.0)
    goto LABEL_28;
  v30 = vcgez_f32(v27);
  if ((v30.i32[1] & v30.i32[0] & 1) != 0)
  {
    v22 = 2;
    goto LABEL_43;
  }
  if (v27.f32[1] >= 0.0)
    v11 = v27.f32[1];
  else
    v11 = 0.0;
  if (v27.f32[0] >= 0.0)
    v12 = v27.f32[0];
  v22 = 2;
LABEL_29:
  if (a1)
    *a1 = v11;
  if (a2)
    *a2 = v12;
  return v22;
}

uint64_t geom_intersect_ray_ray_2d(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  int64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  int32x2_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  unint64_t v15;
  float64x2_t v16;
  unint64_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  int64x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  double v28;
  BOOL v29;
  int32x2_t v30;

  v6 = (int64x2_t)vmulq_f64(a4, a4);
  v7 = (int64x2_t)vmulq_f64(a6, a6);
  v8 = vaddq_f64((float64x2_t)vzip1q_s64(v7, v6), (float64x2_t)vzip2q_s64(v7, v6));
  v9 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), vabsq_f64(v8)));
  if ((v9.i32[1] & v9.i32[0] & 1) != 0)
  {
    v10 = vsubq_f64(a3, a5);
    v11 = 0.0;
    v29 = sqrt(vaddvq_f64(vmulq_f64(v10, v10))) > 0.000001;
    v12 = 0.0;
    if (!v29)
      goto LABEL_24;
LABEL_28:
    v22 = 0;
    v12 = INFINITY;
    v11 = INFINITY;
    goto LABEL_29;
  }
  v13 = vsubq_f64(a5, a3);
  if ((v9.i8[4] & 1) != 0)
    v14 = v8.f64[0];
  else
    v14 = v8.f64[1];
  if ((v9.i8[4] & 1) != 0)
    v15 = -1;
  else
    v15 = 0;
  if (((v9.i8[4] | v9.i8[0]) & 1) != 0)
  {
    v16 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v15), (int8x16_t)a6, (int8x16_t)a4);
    if ((v9.i8[4] & 1) != 0)
      v17 = -1;
    else
      v17 = 0;
    v18 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v17), (int8x16_t)vnegq_f64(v13), (int8x16_t)v13);
    v19 = vmlad_n_f64(-v16.f64[1] * v18.f64[0], v18.f64[1], v16.f64[0]);
    if (v19 * v19 > v14 * 1.0e-12)
      goto LABEL_28;
    v12 = vaddvq_f64(vmulq_f64(v16, v18)) / v14;
    if ((v9.i8[4] & 1) != 0)
      v11 = 0.0;
    else
      v11 = v12;
    if ((v9.i8[0] & 1) != 0)
      v12 = 0.0;
LABEL_24:
    if (v11 >= 0.0 && v12 >= 0.0)
    {
      v22 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  v20 = vmlad_n_f64(-a4.f64[1] * a6.f64[0], a6.f64[1], a4.f64[0]);
  v21 = v8.f64[1] * v8.f64[0] * 1.0e-12;
  if (fabs(v20 * v20) > v21)
  {
    v11 = vmlad_n_f64(-(v13.f64[1] * a6.f64[0]), a6.f64[1], v13.f64[0]) / v20;
    v12 = vmlad_n_f64(-(v13.f64[1] * a4.f64[0]), a4.f64[1], v13.f64[0]) / v20;
    goto LABEL_24;
  }
  v23 = vmlad_n_f64(-(v13.f64[1] * a4.f64[0]), a4.f64[1], v13.f64[0]);
  if (fabs(v23 * v23) > v8.f64[1] * vaddvq_f64(vmulq_f64(v13, v13)) * 1.0e-12)
    goto LABEL_28;
  v25 = (int64x2_t)vmulq_f64(a4, v13);
  v26 = (int64x2_t)vmulq_f64(a6, vnegq_f64(v13));
  v27 = vdivq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v26, v25), (float64x2_t)vzip2q_s64(v26, v25)), v8);
  v28 = fabs(vmulq_f64(v27, v27).f64[0]);
  v12 = 0.0;
  v29 = fabs(vmuld_lane_f64(v27.f64[1], v27, 1)) > v21 || v28 > v21;
  if (!v29)
  {
    v22 = 1;
LABEL_43:
    v11 = 0.0;
    goto LABEL_29;
  }
  if (v27.f64[1] < 0.0 && v27.f64[0] < 0.0)
    goto LABEL_28;
  v30 = vmovn_s64(vcgezq_f64(v27));
  if ((v30.i32[1] & v30.i32[0] & 1) != 0)
  {
    v22 = 2;
    goto LABEL_43;
  }
  if (v27.f64[1] >= 0.0)
    v11 = v27.f64[1];
  else
    v11 = 0.0;
  if (v27.f64[0] >= 0.0)
    v12 = v27.f64[0];
  v22 = 2;
LABEL_29:
  if (a1)
    *a1 = v11;
  if (a2)
    *a2 = v12;
  return v22;
}

uint64_t geom_intersect_line_line_2f(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float v21;
  float v22;
  float v23;
  int8x8_t v24;
  int8x8_t v25;
  _BYTE v26[4];
  int v27;
  uint64_t v28;

  v5 = vmul_f32((float32x2_t)a1, (float32x2_t)a1);
  v6 = vmul_f32((float32x2_t)a3, (float32x2_t)a3);
  v7 = vaddv_f32(v6);
  if (vaddv_f32(v5) <= 0.00000011921 || v7 <= 0.00000011921)
    return 0;
  v10 = *(float *)&a2;
  v11 = *(float *)&a1;
  v12 = vadd_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1));
  v13 = (float)(*(float *)&a1 * *((float *)&a3 + 1)) - (float)(*((float *)&a1 + 1) * *(float *)&a3);
  v14 = 1.0e-10 * vmul_f32(vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1)), v12).f32[0];
  if ((float)(v13 * v13) <= v14)
  {
    v27 = HIDWORD(a1);
    v28 = a3;
    v16 = 4;
    v17 = v26;
    do
    {
      if (v11 < *(float *)&v26[v16])
      {
        v11 = *(float *)&v26[v16];
        v17 = &v26[v16];
      }
      v16 += 4;
    }
    while (v16 != 16);
    v18 = (int8x8_t)vceqd_s64((v17 - v26) & 0x3F8, 0);
    v19 = vbsl_s8(v18, (int8x8_t)a1, (int8x8_t)a3);
    v20 = vbsl_s8(v18, (int8x8_t)a3, (int8x8_t)a1);
    if (((v17 - v26) & 0x3F8) != 0)
      v21 = *(float *)&a4;
    else
      v21 = *(float *)&a2;
    if (((v17 - v26) & 0x3F8) == 0)
      v10 = *(float *)&a4;
    v24 = v20;
    v22 = *(float *)((unint64_t)&v24 | (4 * (((v17 - v26) >> 2) & 1))) * v21;
    v25 = v19;
    v23 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((v17 - v26) >> 2) & 1)));
    return 2 * ((float)((float)(v10 - (float)(v22 / v23)) * (float)(v10 - (float)(v22 / v23))) <= v14);
  }
  else
  {
    if (a5)
    {
      *(float *)&v15 = (float)((float)(*((float *)&a1 + 1) * *(float *)&a4)
                             - (float)(*((float *)&a3 + 1) * *(float *)&a2))
                     / v13;
      *((float *)&v15 + 1) = (float)((float)(*(float *)&a1 * *(float *)&a4) - (float)(*(float *)&a3 * *(float *)&a2))
                           / (float)-v13;
      *a5 = v15;
    }
    return 1;
  }
}

uint64_t geom_intersect_line_line_2d(float64x2_t *a1, float64x2_t *a2, _OWORD *a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  double v12;
  float64x2_t v13;
  double v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  float64x2_t *v23;
  float64x2_t *v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  _BYTE v31[8];
  float64_t v32;
  float64x2_t v33;

  v3 = a1[1];
  v29 = *a1;
  v30 = v3;
  v4 = a2[1];
  v27 = *a2;
  v28 = v4;
  _Q0 = v29;
  _Q4 = v27;
  v7 = vmulq_f64(_Q0, _Q0);
  v8 = vmulq_f64(_Q4, _Q4);
  v9 = vaddvq_f64(v8);
  if (vaddvq_f64(v7) <= 2.22044605e-16 || v9 <= 2.22044605e-16)
    return 0;
  v12 = v30.f64[0];
  v13 = vaddq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1));
  __asm { FMLA            D6, D0, V4.D[1] }
  v19 = 1.0e-12 * vmulq_f64(vaddq_f64(v7, (float64x2_t)vdupq_laneq_s64((int64x2_t)v7, 1)), v13).f64[0];
  if (_D6 * _D6 <= v19)
  {
    v32 = v29.f64[1];
    v33 = v27;
    v21 = 8;
    v22 = v31;
    do
    {
      if (_Q0.f64[0] < *(double *)&v31[v21])
      {
        _Q0.f64[0] = *(float64_t *)&v31[v21];
        v22 = &v31[v21];
      }
      v21 += 8;
    }
    while (v21 != 32);
    v23 = &v27;
    if (((v22 - v31) & 0x7F0) != 0)
      v24 = &v27;
    else
      v24 = &v29;
    if (((v22 - v31) & 0x7F0) != 0)
      v25 = v28.f64[0];
    else
      v25 = v30.f64[0];
    if (((v22 - v31) & 0x7F0) != 0)
      v23 = &v29;
    else
      v12 = v28.f64[0];
    v26 = v12
        - *(double *)((unint64_t)v23 | (v22 - v31) & 8)
        * v25
        / *(double *)((unint64_t)v24 | (v22 - v31) & 8);
    return 2 * (v26 * v26 <= v19);
  }
  else
  {
    if (a3)
    {
      *(double *)&v20 = (v29.f64[1] * v28.f64[0] - v27.f64[1] * v30.f64[0]) / _D6;
      *((double *)&v20 + 1) = (v30.f64[0] * -v27.f64[0] + v29.f64[0] * v28.f64[0]) / -_D6;
      *a3 = v20;
    }
    return 1;
  }
}

uint64_t geom_intersect_line_line_segment_2f(uint64_t a1, int a2, float *a3, float32x2_t a4, float32x2_t a5, double a6, double a7, double a8, double _D5)
{
  float32x2_t v9;
  _BOOL8 v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  float32x2_t v21;
  float v22;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  float v29;
  unsigned int v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v37;
  float v38;
  float32x2_t v39;
  uint64_t result;
  uint64_t v42;
  float32x2_t v43;

  if ((float)(*(float *)&a2 * *(float *)&a2) <= (float)(vaddv_f32(vmul_f32((float32x2_t)a1, (float32x2_t)a1)) * 1.0e-10))
  {
    v12 = 0;
  }
  else
  {
    v10 = fabsf(*((float *)&a1 + 1)) > COERCE_FLOAT(a1 & 0x7FFFFFFF);
    v42 = a1;
    v11 = (float)-*(float *)&a2 / *(float *)((unint64_t)&v42 | (4 * v10));
    v43 = 0;
    *(float *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFFBLL | (4 * v10)) = v11;
    v12 = v43;
  }
  *(float *)&_D5 = -*((float *)&a1 + 1);
  v13 = (float32x2_t)vzip1_s32(*(int32x2_t *)&_D5, (int32x2_t)a1);
  _D1 = vsub_f32(a5, a4);
  v15 = vmul_f32(v13, v13);
  v16 = vaddv_f32(v15);
  v17 = vmul_f32(_D1, _D1);
  v18 = vaddv_f32(v17);
  v9.f32[0] = fabsf(v16);
  v19 = fabsf(v18);
  if (v19 <= 0.00000011921 && v9.f32[0] <= 0.00000011921)
  {
    v28 = vsub_f32(v12, a4);
    v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
    v27 = 0.0;
    if (v29 > 0.00001)
    {
      v30 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v21 = vsub_f32(a4, v12);
  if (v9.f32[0] > 0.00000011921)
    v22 = v16;
  else
    v22 = v18;
  if (v19 <= 0.00000011921 || v9.f32[0] <= 0.00000011921)
  {
    v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v9), 0), (int8x8_t)_D1, (int8x8_t)v13);
    v25 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v9), 0), (int8x8_t)vneg_f32(v21), (int8x8_t)v21);
    v26 = vmlas_n_f32((float)-v24.f32[1] * v25.f32[0], v25.f32[1], v24.f32[0]);
    if ((float)(v26 * v26) <= (float)(v22 * 1.0e-10))
    {
      v27 = vaddv_f32(vmul_f32(v24, v25)) / v22;
      if (v19 <= 0.00000011921)
        v27 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v30 = 0;
    v27 = 0.0;
    goto LABEL_28;
  }
  v31 = vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1));
  v32 = vadd_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1));
  __asm { FMLA            S16, S5, V1.S[1] }
  if (fabsf(_S16 * _S16) > (float)(1.0e-10 * vmul_f32(v32, v31).f32[0]))
  {
    v27 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v21, 1), *(float *)&a1, v21.f32[0]) / _S16;
LABEL_24:
    v30 = 1;
    goto LABEL_28;
  }
  v37 = vmul_f32(v21, v21);
  v38 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v21, 1), *(float *)&a1, v21.f32[0]);
  if (fabsf(v38 * v38) > (float)(1.0e-10
                                * vmul_f32(v31, vadd_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)v37, 1))).f32[0]))
    goto LABEL_26;
  v39 = vmul_f32(_D1, vneg_f32(v21));
  LODWORD(v27) = vdiv_f32(vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1)), v32).u32[0];
  v30 = 2;
LABEL_28:
  if (v27 > 1.0 || v27 < 0.0)
    result = 0;
  else
    result = v30;
  if (a3)
  {
    if (!(_DWORD)result)
      v27 = NAN;
    *a3 = v27;
  }
  return result;
}

uint64_t geom_intersect_line_line_segment_2d(float64x2_t *a1, double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6, double a7, double a8, int64x2_t _Q6)
{
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  _BOOL8 v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v25;
  double v26;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  unsigned int v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  uint64_t result;
  float64x2_t v47;
  float64x2_t v48;

  v11 = *a1;
  v12 = a1[1].f64[0];
  v13 = a1->f64[1];
  if (v12 * v12 <= vaddvq_f64(vmulq_f64(v11, v11)) * 1.0e-12)
  {
    v16 = 0uLL;
  }
  else
  {
    v14 = fabs(v11.f64[1]) > fabs(v11.f64[0]);
    v47 = *a1;
    v15 = -v12 / *(double *)((unint64_t)&v47 | (8 * v14));
    _Q6.i8[8] = 0;
    _Q6.i8[9] = 0;
    _Q6.i8[10] = 0;
    _Q6.i8[11] = 0;
    _Q6.i8[12] = 0;
    _Q6.i8[13] = 0;
    _Q6.i8[14] = 0;
    _Q6.i8[15] = 0;
    v48 = 0u;
    *(double *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF7 | (8 * v14)) = v15;
    v16 = v48;
  }
  *(double *)_Q6.i64 = -v13;
  v17 = (float64x2_t)vzip1q_s64(_Q6, (int64x2_t)v11);
  _Q1 = vsubq_f64(a4, a3);
  v19 = vmulq_f64(v17, v17);
  v20 = vaddvq_f64(v19);
  v21 = vmulq_f64(_Q1, _Q1);
  v22 = vaddvq_f64(v21);
  v9.f64[0] = fabs(v20);
  v23 = fabs(v22);
  if (v23 <= 2.22044605e-16 && v9.f64[0] <= 2.22044605e-16)
  {
    v33 = vsubq_f64(v16, a3);
    v34 = sqrt(vaddvq_f64(vmulq_f64(v33, v33)));
    v32 = 0.0;
    if (v34 > 0.000001)
    {
      v35 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v25 = vsubq_f64(a3, v16);
  v10.f64[0] = 2.22044605e-16;
  if (v9.f64[0] > 2.22044605e-16)
    v26 = v20;
  else
    v26 = v22;
  if (v23 <= 2.22044605e-16 || v9.f64[0] <= 2.22044605e-16)
  {
    v28 = (float64x2_t)vdupq_lane_s64(vcgeq_f64(v10, v9).i64[0], 0);
    v29 = (float64x2_t)vbslq_s8((int8x16_t)v28, (int8x16_t)_Q1, (int8x16_t)v17);
    v28.f64[0] = 2.22044605e-16;
    v30 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v28, v9).i64[0], 0), (int8x16_t)vnegq_f64(v25), (int8x16_t)v25);
    v31 = vmlad_n_f64(-v29.f64[1] * v30.f64[0], v30.f64[1], v29.f64[0]);
    if (v31 * v31 <= v26 * 1.0e-12)
    {
      v32 = vaddvq_f64(vmulq_f64(v29, v30)) / v26;
      if (v23 <= 2.22044605e-16)
        v32 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v35 = 0;
    v32 = 0.0;
    goto LABEL_28;
  }
  v36 = vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1));
  v37 = vaddq_f64(v21, (float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1));
  __asm { FMLA            D16, D6, V1.D[1] }
  if (fabs(_D16 * _D16) > 1.0e-12 * vmulq_f64(v37, v36).f64[0])
  {
    v32 = vmlad_n_f64(vmuld_lane_f64(v13, v25, 1), v11.f64[0], v25.f64[0]) / _D16;
LABEL_24:
    v35 = 1;
    goto LABEL_28;
  }
  v42 = vmulq_f64(v25, v25);
  v43 = vmlad_n_f64(vmuld_lane_f64(v13, v25, 1), v11.f64[0], v25.f64[0]);
  if (fabs(v43 * v43) > 1.0e-12
                       * vmulq_f64(v36, vaddq_f64(v42, (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1))).f64[0])
    goto LABEL_26;
  v44 = vmulq_f64(_Q1, vnegq_f64(v25));
  *(_QWORD *)&v32 = *(_OWORD *)&vdivq_f64(vaddq_f64(v44, (float64x2_t)vdupq_laneq_s64((int64x2_t)v44, 1)), v37);
  v35 = 2;
LABEL_28:
  if (v32 > 1.0 || v32 < 0.0)
    result = 0;
  else
    result = v35;
  if (a2)
  {
    if (!(_DWORD)result)
      v32 = NAN;
    *a2 = v32;
  }
  return result;
}

uint64_t geom_intersect_ray_triangle_2f(float *a1, float *a2, float32x2_t a3, float32x2_t a4, double a5, double a6, double a7)
{
  float *v7;
  float *v8;
  _QWORD v10[3];
  float32x2_t v11[2];
  uint64_t v12;

  v12 = 0;
  v11[0] = a3;
  v11[1] = a4;
  *(double *)v10 = a5;
  *(double *)&v10[1] = a6;
  *(double *)&v10[2] = a7;
  if (a1)
    v7 = a1;
  else
    v7 = (float *)&v12 + 1;
  if (a2)
    v8 = a2;
  else
    v8 = (float *)&v12;
  return geom::intersect_ray_triangle<float>(v11, (uint64_t)v10, v7, v8);
}

uint64_t geom::intersect_ray_triangle<float>(float32x2_t *a1, uint64_t a2, float *a3, float *a4)
{
  float32x2_t v4;
  int8x8_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  unsigned int v25;
  int v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  float v35;
  float v36;
  BOOL v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  float v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float v46;
  float v47;
  int v48;
  float v49;
  uint64_t v57;
  float v58;
  float32x2_t v59;
  float v60;
  float v61;
  float v62;
  uint64_t result;
  float32x2_t v64;
  float v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float v71;
  float32x2_t v72;
  uint64_t v73;
  float32x2_t v74;
  uint64_t v75;
  float32x2_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v5 = *(int8x8_t *)a2;
  v4 = *(float32x2_t *)(a2 + 8);
  v6 = vsub_f32((float32x2_t)vext_s8(*(int8x8_t *)a2, (int8x8_t)v4, 4uLL), (float32x2_t)vext_s8((int8x8_t)v4, *(int8x8_t *)a2, 4uLL));
  v7 = vmul_f32(v6, v6);
  v7.i32[0] = vadd_f32(v7, (float32x2_t)vdup_lane_s32((int32x2_t)v7, 1)).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  v10 = vmul_n_f32(v6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  v11 = vaddv_f32(vmul_f32(*(float32x2_t *)a2, v10));
  v72 = v10;
  v12 = *(float32x2_t *)(a2 + 16);
  v13 = vsub_f32((float32x2_t)vext_s8((int8x8_t)v4, (int8x8_t)v12, 4uLL), (float32x2_t)vext_s8((int8x8_t)v12, (int8x8_t)v4, 4uLL));
  v14 = vmul_f32(v13, v13);
  v73 = LODWORD(v11) ^ 0x80000000;
  v14.i32[0] = vadd_f32(v14, (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1)).u32[0];
  v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
  v17 = vmul_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  v18 = vaddv_f32(vmul_f32(v4, v17));
  v74 = v17;
  v75 = LODWORD(v18) ^ 0x80000000;
  v19 = vsub_f32((float32x2_t)vext_s8((int8x8_t)v12, v5, 4uLL), (float32x2_t)vext_s8(v5, (int8x8_t)v12, 4uLL));
  v20 = vmul_f32(v19, v19);
  v20.i32[0] = vadd_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1)).u32[0];
  v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
  v23 = vmul_n_f32(v19, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).f32[0]);
  v24 = vmul_f32(v12, v23);
  v24.f32[0] = vaddv_f32(v24);
  v76 = v23;
  v77 = v24.i32[0] ^ 0x80000000;
  if (fabsf(v11) == INFINITY)
  {
    v25 = 0;
    v26 = 2;
  }
  else
  {
    if (fabsf(v18) == INFINITY)
    {
      v25 = 1;
    }
    else
    {
      if (fabsf(v24.f32[0]) != INFINITY)
      {
        _D7 = vsub_f32(*(float32x2_t *)(a2 + 8), *(float32x2_t *)a2);
        _S2 = vsub_f32(v12, *(float32x2_t *)a2).u32[0];
        __asm { FMLA            S16, S2, V7.S[1] }
        if (_S16 > 0.0)
        {
          v72 = vneg_f32(v10);
          *(float *)&v73 = v11;
          v74 = vneg_f32(v17);
          *(float *)&v75 = v18;
          v76 = vneg_f32(v23);
          LODWORD(v77) = v24.i32[0];
        }
        v57 = 0;
        *a3 = 0.0;
        *a4 = INFINITY;
        v58 = INFINITY;
        while (1)
        {
          v59 = *(float32x2_t *)((char *)&v72 + v57);
          v60 = vaddv_f32(vmul_f32(v59, a1[1]));
          v61 = vaddv_f32(vmul_f32(v59, *a1)) + *(float *)((char *)&v72 + v57 + 8);
          if (fabsf(v60) <= 0.00000011921)
          {
            if (v61 < -0.00000011921)
              goto LABEL_55;
          }
          else
          {
            v37 = v60 <= 0.0;
            v62 = (float)-v61 / v60;
            if (v37)
            {
              if (v62 < v58)
                v58 = v62;
              *a4 = v58;
              v62 = *a3;
            }
            else
            {
              if (*a3 >= v62)
                v62 = *a3;
              *a3 = v62;
              v58 = *a4;
            }
            if (v58 < v62)
            {
LABEL_55:
              result = 0;
              *a4 = INFINITY;
              *a3 = INFINITY;
              return result;
            }
          }
          v57 += 16;
          if (v57 == 48)
            return 1;
        }
      }
      v25 = 2;
    }
    v26 = -1;
  }
  v27 = *(float32x2_t *)(a2 + 8 * v25);
  v28 = *(float32x2_t *)(a2 + 8 * (int)(v25 + v26));
  v30 = *a1;
  v29 = a1[1];
  v31 = vsub_f32(v28, v27);
  v32 = vmul_f32(v29, v29);
  v33 = vaddv_f32(v32);
  v34 = vmul_f32(v31, v31);
  v35 = vaddv_f32(v34);
  v24.f32[0] = fabsf(v33);
  v36 = fabsf(v35);
  v37 = v36 > 0.00000011921 || v24.f32[0] > 0.00000011921;
  if (!v37)
  {
    v43 = vsub_f32(v30, v27);
    v41 = 0.0;
    v42 = 0.0;
    if (sqrtf(vaddv_f32(vmul_f32(v43, v43))) > 0.00001)
      goto LABEL_51;
LABEL_28:
    v48 = 0;
    v49 = INFINITY;
    if (v41 >= 0.0 && v42 >= 0.0 && v42 <= 1.0)
    {
      v49 = fmaxf(v41, 0.0);
      v48 = 1;
    }
    goto LABEL_52;
  }
  v38 = vsub_f32(v27, v30);
  if (v24.f32[0] <= 0.00000011921)
    v33 = v35;
  if (v36 > 0.00000011921 && v24.f32[0] > 0.00000011921)
  {
    v39 = vadd_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1));
    v40 = vmlas_n_f32((float)-v29.f32[1] * v31.f32[0], v31.f32[1], v29.f32[0]);
    if (fabsf(v40 * v40) <= (float)(1.0e-10
                                   * vmul_f32(vadd_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)), v39).f32[0]))
    {
      v64 = vmul_f32(v38, v38);
      v65 = vmlas_n_f32(-(float)(v38.f32[1] * v29.f32[0]), v29.f32[1], v38.f32[0]);
      if (fabsf(v65 * v65) <= (float)(1.0e-10
                                     * vmul_f32(v39, vadd_f32(v64, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1))).f32[0]))
      {
        v66 = vmul_f32(v29, v38);
        v67 = vdiv_f32(vadd_f32(v66, (float32x2_t)vdup_lane_s32((int32x2_t)v66, 1)), v39);
        if (v67.f32[0] >= 0.0
          || (v68 = vmul_f32(v29, vadd_f32(v31, v38)),
              vdiv_f32(vadd_f32(v68, (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1)), v39).f32[0] >= 0.0))
        {
          v69 = vmul_f32(vsub_f32(v28, v30), v29);
          v70 = vdiv_f32(vadd_f32(v69, (float32x2_t)vdup_lane_s32((int32x2_t)v69, 1)), v39);
          if ((vcgt_f32(v67, v70).u8[0] & 1) != 0)
            v71 = v70.f32[0];
          else
            v71 = v67.f32[0];
          *a3 = v71;
          if ((vcgt_f32(v70, v67).u8[0] & 1) == 0)
            v70.f32[0] = v67.f32[0];
          *a4 = v70.f32[0];
          v48 = 2;
          return v48 != 0;
        }
      }
      goto LABEL_51;
    }
    v41 = vmlas_n_f32(-(float)(v38.f32[1] * v31.f32[0]), v31.f32[1], v38.f32[0]) / v40;
    v42 = vmlas_n_f32(-(float)(v38.f32[1] * v29.f32[0]), v29.f32[1], v38.f32[0]) / v40;
    goto LABEL_28;
  }
  v44 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v24), 0), (int8x8_t)v31, (int8x8_t)v29);
  v45 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v24), 0), (int8x8_t)vneg_f32(v38), (int8x8_t)v38);
  v46 = vmlas_n_f32((float)-v44.f32[1] * v45.f32[0], v45.f32[1], v44.f32[0]);
  if ((float)(v46 * v46) <= (float)(v33 * 1.0e-10))
  {
    v47 = vaddv_f32(vmul_f32(v44, v45)) / v33;
    if (v24.f32[0] > 0.00000011921)
      v41 = v47;
    else
      v41 = 0.0;
    if (v36 > 0.00000011921)
      v42 = v47;
    else
      v42 = 0.0;
    goto LABEL_28;
  }
LABEL_51:
  v48 = 0;
  v49 = INFINITY;
LABEL_52:
  *a4 = v49;
  *a3 = v49;
  return v48 != 0;
}

uint64_t geom_intersect_ray_triangle_2d(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  double *v7;
  double *v8;
  float64x2_t v10[3];
  float64x2_t v11[2];
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  v10[2] = a7;
  if (a1)
    v7 = a1;
  else
    v7 = (double *)&v13;
  if (a2)
    v8 = a2;
  else
    v8 = (double *)&v12;
  return geom::intersect_ray_triangle<double>(v11, v10, v7, v8);
}

uint64_t geom::intersect_ray_triangle<double>(float64x2_t *a1, float64x2_t *a2, double *a3, double *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  unsigned int v17;
  int v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  double v39;
  int v40;
  double v41;
  uint64_t v49;
  double v50;
  float64x2_t v51;
  double v52;
  double v53;
  BOOL v54;
  double v55;
  uint64_t result;
  float64x2_t v57;
  double v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  double v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = a2[1];
  v7 = vsubq_f64((float64x2_t)vextq_s8(*(int8x16_t *)a2, (int8x16_t)v6, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v6, *(int8x16_t *)a2, 8uLL));
  v8 = vmulq_n_f64(v7, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v7, v7))));
  v9 = vaddvq_f64(vmulq_f64(*a2, v8));
  v65 = v8;
  v66 = -v9;
  v10 = a2[2];
  v11 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v10, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v6, 8uLL));
  v12 = vmulq_n_f64(v11, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v11, v11))));
  v13 = vaddvq_f64(vmulq_f64(v6, v12));
  v67 = v12;
  v68 = -v13;
  v14 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v5, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v10, 8uLL));
  v15 = vmulq_n_f64(v14, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v14, v14))));
  v16 = vaddvq_f64(vmulq_f64(v10, v15));
  v69 = v15;
  v70 = -v16;
  if (fabs(v9) == INFINITY)
  {
    v17 = 0;
    v18 = 2;
  }
  else
  {
    if (fabs(v13) == INFINITY)
    {
      v17 = 1;
    }
    else
    {
      if (fabs(v16) != INFINITY)
      {
        _Q3 = vsubq_f64(v6, v5);
        _D0 = *(_OWORD *)&vsubq_f64(v10, v5);
        __asm { FMLA            D6, D0, V3.D[1] }
        if (_D6 > 0.0)
        {
          v65 = vnegq_f64(v8);
          v66 = v9;
          v67 = vnegq_f64(v12);
          v68 = v13;
          v69 = vnegq_f64(v15);
          v70 = v16;
        }
        v49 = 0;
        *a3 = 0.0;
        *a4 = INFINITY;
        v50 = INFINITY;
        while (1)
        {
          v51 = *(float64x2_t *)((char *)&v65 + v49);
          v52 = vaddvq_f64(vmulq_f64(v51, a1[1]));
          v53 = *(double *)((char *)&v65 + v49 + 16) + vaddvq_f64(vmulq_f64(v51, *a1));
          if (fabs(v52) <= 2.22044605e-16)
          {
            if (v53 < -2.22044605e-16)
              goto LABEL_52;
          }
          else
          {
            v54 = v52 <= 0.0;
            v55 = -v53 / v52;
            if (v54)
            {
              if (v55 < v50)
                v50 = v55;
              *a4 = v50;
              v55 = *a3;
            }
            else
            {
              if (*a3 >= v55)
                v55 = *a3;
              *a3 = v55;
              v50 = *a4;
            }
            if (v50 < v55)
            {
LABEL_52:
              result = 0;
              *a4 = INFINITY;
              *a3 = INFINITY;
              return result;
            }
          }
          v49 += 32;
          if (v49 == 96)
            return 1;
        }
      }
      v17 = 2;
    }
    v18 = -1;
  }
  v19 = a2[v17];
  v20 = a2[v17 + v18];
  v22 = *a1;
  v21 = a1[1];
  v23 = vsubq_f64(v20, v19);
  v24 = vmulq_f64(v21, v21);
  v25 = vaddvq_f64(v24);
  v26 = vmulq_f64(v23, v23);
  v27 = vaddvq_f64(v26);
  v10.f64[0] = fabs(v25);
  v28 = fabs(v27);
  if (v28 <= 2.22044605e-16 && v10.f64[0] <= 2.22044605e-16)
  {
    v29 = vsubq_f64(v22, v19);
    v30 = 0.0;
    v31 = 0.0;
    if (sqrt(vaddvq_f64(vmulq_f64(v29, v29))) > 0.000001)
      goto LABEL_48;
LABEL_25:
    v40 = 0;
    v41 = INFINITY;
    if (v30 >= 0.0 && v31 >= 0.0 && v31 <= 1.0)
    {
      v41 = fmax(v30, 0.0);
      v40 = 1;
    }
    goto LABEL_49;
  }
  v32 = vsubq_f64(v19, v22);
  v4.f64[0] = 2.22044605e-16;
  if (v10.f64[0] <= 2.22044605e-16)
    v25 = v27;
  if (v28 > 2.22044605e-16 && v10.f64[0] > 2.22044605e-16)
  {
    v33 = vaddq_f64(v24, (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1));
    v34 = vmlad_n_f64(-v21.f64[1] * v23.f64[0], v23.f64[1], v21.f64[0]);
    if (fabs(v34 * v34) <= 1.0e-12
                          * vmulq_f64(vaddq_f64(v26, (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1)), v33).f64[0])
    {
      v57 = vmulq_f64(v32, v32);
      v58 = vmlad_n_f64(-(v32.f64[1] * v21.f64[0]), v21.f64[1], v32.f64[0]);
      if (fabs(v58 * v58) <= 1.0e-12
                            * vmulq_f64(v33, vaddq_f64(v57, (float64x2_t)vdupq_laneq_s64((int64x2_t)v57, 1))).f64[0])
      {
        v59 = vmulq_f64(v21, v32);
        v60 = vdivq_f64(vaddq_f64(v59, (float64x2_t)vdupq_laneq_s64((int64x2_t)v59, 1)), v33);
        if (v60.f64[0] >= 0.0
          || (v61 = vmulq_f64(v21, vaddq_f64(v23, v32)),
              vdivq_f64(vaddq_f64(v61, (float64x2_t)vdupq_laneq_s64((int64x2_t)v61, 1)), v33).f64[0] >= 0.0))
        {
          v62 = vmulq_f64(vsubq_f64(v20, v22), v21);
          v63 = vdivq_f64(vaddq_f64(v62, (float64x2_t)vdupq_laneq_s64((int64x2_t)v62, 1)), v33);
          if ((vmovn_s64(vcgtq_f64(v60, v63)).u8[0] & 1) != 0)
            v64 = v63.f64[0];
          else
            v64 = v60.f64[0];
          *a3 = v64;
          if ((vmovn_s64(vcgtq_f64(v63, v60)).u8[0] & 1) == 0)
            v63.f64[0] = v60.f64[0];
          *a4 = v63.f64[0];
          v40 = 2;
          return v40 != 0;
        }
      }
      goto LABEL_48;
    }
    v30 = vmlad_n_f64(-(v32.f64[1] * v23.f64[0]), v23.f64[1], v32.f64[0]) / v34;
    v31 = vmlad_n_f64(-(v32.f64[1] * v21.f64[0]), v21.f64[1], v32.f64[0]) / v34;
    goto LABEL_25;
  }
  v35 = (float64x2_t)vdupq_lane_s64(vcgeq_f64(v4, v10).i64[0], 0);
  v36 = (float64x2_t)vbslq_s8((int8x16_t)v35, (int8x16_t)v23, (int8x16_t)v21);
  v35.f64[0] = 2.22044605e-16;
  v37 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v35, v10).i64[0], 0), (int8x16_t)vnegq_f64(v32), (int8x16_t)v32);
  v38 = vmlad_n_f64(-v36.f64[1] * v37.f64[0], v37.f64[1], v36.f64[0]);
  if (v38 * v38 <= v25 * 1.0e-12)
  {
    v39 = vaddvq_f64(vmulq_f64(v36, v37)) / v25;
    if (v10.f64[0] > 2.22044605e-16)
      v30 = v39;
    else
      v30 = 0.0;
    if (v28 > 2.22044605e-16)
      v31 = v39;
    else
      v31 = 0.0;
    goto LABEL_25;
  }
LABEL_48:
  v40 = 0;
  v41 = INFINITY;
LABEL_49:
  *a4 = v41;
  *a3 = v41;
  return v40 != 0;
}

uint64_t geom_intersect_ray_triangle_3f(float *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, int32x4_t a5, int32x4_t a6, int32x4_t a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  uint64_t result;
  float v23;
  int32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  BOOL v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  BOOL v34;
  float v35;
  float v36;
  uint64_t v37;

  v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a5, a5), (int8x16_t)a5, 0xCuLL);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a6, a6), (int8x16_t)a6, 0xCuLL);
  v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a7, a7), (int8x16_t)a7, 0xCuLL);
  v10 = vaddq_f32(vmlaq_f32(vmulq_f32(v7, vnegq_f32((float32x4_t)a7)), (float32x4_t)a5, v9), vaddq_f32(vmlaq_f32(vmulq_f32(v8, vnegq_f32((float32x4_t)a5)), (float32x4_t)a6, v7), vmlaq_f32(vmulq_f32(v9, vnegq_f32((float32x4_t)a6)), (float32x4_t)a7, v8)));
  v11 = vmulq_f32(v10, v10);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), v11)).f32[0]) <= 1.0e-10)goto LABEL_9;
  v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
  v13 = vmulq_f32(a4, v12);
  v14 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
  v15 = vaddq_f32(v14, vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
  if (fabsf(v15.f32[0]) <= 0.00001)
    goto LABEL_9;
  v14.i32[0] = 0;
  v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v15, v14), 0), (int8x16_t)vnegq_f32(v12), (int8x16_t)v12);
  if (v15.f32[0] <= 0.0)
    v17 = -v15.f32[0];
  else
    v17 = v15.f32[0];
  v18 = vsubq_f32(a3, (float32x4_t)a5);
  v19 = vmulq_f32(v18, v16);
  v20 = 1.0 / v17;
  v21 = (float)(1.0 / v17)
      * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
  if (a1)
    *a1 = v21;
  if (v21 == 0.0)
  {
LABEL_9:
    if (!a1)
      goto LABEL_11;
    goto LABEL_10;
  }
  v23 = fabsf(v21);
  if (v23 == INFINITY)
  {
    if (v21 <= 0.0)
      goto LABEL_9;
  }
  else if ((float)((float)((float)(v23 + 1.0) * 0.00000011921) + 0.0) >= v21)
  {
    goto LABEL_9;
  }
  v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL), vnegq_f32(v18)), a4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
  v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL);
  v30 = v15.f32[0] <= 0.0;
  v26 = 1.0;
  if (!v30)
    v26 = -1.0;
  v27 = vmulq_n_f32(v25, v26);
  v28 = vmulq_f32(vsubq_f32((float32x4_t)a7, (float32x4_t)a5), v27);
  v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1)));
  if (a2)
    *(_DWORD *)(a2 + 4) = v29.i32[0];
  v30 = v29.f32[0] >= 0.0 && v29.f32[0] <= v17;
  if (!v30
    || ((v31 = vmulq_f32(vsubq_f32((float32x4_t)a5, (float32x4_t)a6), v27),
         v32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))), LODWORD(v33) = vaddq_f32(v29, v32).u32[0], v32.f32[0] >= 0.0)? (v34 = v33 <= v17): (v34 = 0), !v34))
  {
    if (!a1)
    {
LABEL_11:
      result = 0;
      if (a2)
        *(_OWORD *)a2 = 0u;
      return result;
    }
LABEL_10:
    *a1 = INFINITY;
    goto LABEL_11;
  }
  if (a2)
  {
    v35 = v20 * v29.f32[0];
    v36 = v20 * v32.f32[0];
    *(float *)&v37 = (float)(1.0 - v35) - v36;
    *((float *)&v37 + 1) = v35;
    *(float *)(a2 + 8) = v36;
    *(_QWORD *)a2 = v37;
  }
  return 1;
}

uint64_t geom_intersect_ray_triangle_3d(float64x2_t *a1, float64x2_t *a2, double *a3, uint64_t a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  double v30;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  BOOL v40;
  double v41;
  BOOL v42;
  uint64_t result;
  double v44;
  __int128 v45;

  v6 = *a2;
  v5 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11.f64[0] = a2[1].f64[0];
  v11.f64[1] = a2->f64[0];
  v12.f64[0] = a2[3].f64[0];
  v12.f64[1] = a2[2].f64[0];
  v13.f64[0] = a2[5].f64[0];
  v13.f64[1] = a2[4].f64[0];
  v14 = vaddq_f64(vmlaq_f64(vmulq_f64(v11, vnegq_f64(v10)), *a2, v13), vaddq_f64(vmlaq_f64(vmulq_f64(v12, vnegq_f64(*a2)), v8, v11), vmlaq_f64(vmulq_f64(v13, vnegq_f64(v8)), v10, v12)));
  v15 = vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v9), *a2, 1), v5, v10, 1), vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v5), v8, 1), v7, *a2, 1), vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v7), v10, 1), v9, v8, 1)));
  v16 = vmulq_f64(v14, v14);
  if (fabs(v16.f64[1] + vmulq_f64(v15, v15).f64[0] + v16.f64[0]) <= 1.0e-12)
    goto LABEL_30;
  v18 = a1[2];
  v17 = a1[3];
  v15.f64[1] = v14.f64[0];
  v19 = vmulq_laneq_f64(v17, v14, 1);
  v19.f64[0] = v19.f64[0] + vaddvq_f64(vmulq_f64(v18, v15));
  if (fabs(v19.f64[0]) <= 0.000001)
    goto LABEL_30;
  v20 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1);
  v4.f64[0] = 0.0;
  v21 = (int8x16_t)vcgtq_f64(v19, v4);
  v22 = vandq_s8((int8x16_t)vnegq_f64(v20), v21);
  v23 = (int8x16_t)vdupq_lane_s64(v21.i64[0], 0);
  v24 = (float64x2_t)vorrq_s8(v22, vbicq_s8((int8x16_t)v20, v23));
  v25 = (float64x2_t)vbslq_s8(v23, (int8x16_t)vnegq_f64(v15), (int8x16_t)v15);
  v26 = v19.f64[0] <= 0.0 ? -v19.f64[0] : v19.f64[0];
  v27 = vsubq_f64(*a1, v6);
  v28 = vsubq_f64(a1[1], v5);
  v29 = 1.0 / v26;
  v30 = 1.0 / v26 * (vmulq_f64(v28, v24).f64[0] + vaddvq_f64(vmulq_f64(v27, v25)));
  if (a3)
  {
    *a3 = v30;
    if (v30 == 0.0 || v30 <= 2.22044605e-16)
    {
LABEL_31:
      *a3 = INFINITY;
LABEL_32:
      result = 0;
      if (a4)
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_OWORD *)(a4 + 16) = 0u;
      }
      return result;
    }
  }
  else if (v30 == 0.0 || v30 <= 2.22044605e-16)
  {
    goto LABEL_32;
  }
  v33.f64[0] = v17.f64[0];
  v33.f64[1] = v18.f64[0];
  v34 = vnegq_f64(v28);
  v28.f64[1] = v27.f64[0];
  v35 = vmlaq_f64(vmulq_f64(v33, vnegq_f64(v27)), v18, v28);
  *(_QWORD *)&v36.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v34, v18, 1), v17, v27, 1);
  v36.f64[1] = v35.f64[0];
  v18.f64[0] = -1.0;
  if (v19.f64[0] <= 0.0)
    v18.f64[0] = 1.0;
  v37 = vmulq_n_f64(v36, v18.f64[0]);
  v38 = vmulq_laneq_f64(v18, v35, 1);
  v39 = vmulq_f64(vsubq_f64(v9, v5), v38).f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v10, v6), v37));
  if (a4)
    *(double *)(a4 + 8) = v39;
  v40 = v39 >= 0.0 && v39 <= v26;
  if (!v40
    || ((v41 = vmulq_f64(vsubq_f64(v5, v7), v38).f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v6, v8), v37)), v41 >= 0.0)
      ? (v42 = v39 + v41 <= v26)
      : (v42 = 0),
        !v42))
  {
LABEL_30:
    if (!a3)
      goto LABEL_32;
    goto LABEL_31;
  }
  if (a4)
  {
    v44 = v29 * v41;
    *(double *)&v45 = 1.0 - v29 * v39 - v44;
    *((double *)&v45 + 1) = v29 * v39;
    *(double *)(a4 + 16) = v44;
    *(_OWORD *)a4 = v45;
  }
  return 1;
}

uint64_t geom_intersect_ray_circle_2f(uint64_t a1, int a2, float *a3, float *a4, float32x2_t a5, float32x2_t a6)
{
  float v6;
  float32x2_t v7;
  float v8;
  float v9;
  uint64_t result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v6 = vaddv_f32(vmul_f32(a6, a6));
  if (fabsf(v6) <= 0.00001)
    goto LABEL_4;
  v7 = vsub_f32(a5, (float32x2_t)a1);
  v8 = vaddv_f32(vmul_f32(v7, v7)) - (float)(*(float *)&a2 * *(float *)&a2);
  v7.f32[0] = vaddv_f32(vmul_f32(a6, v7));
  v9 = v7.f32[0] + v7.f32[0];
  if (v8 > 0.0 && v9 > 0.0)
    goto LABEL_4;
  v12 = (float)((float)(v6 * -4.0) * v8) + (float)(v9 * v9);
  if (v12 != 0.0)
  {
    v17 = fabsf(v12);
    if (v17 == INFINITY)
    {
      if (v12 < 0.0)
      {
        result = 0;
LABEL_5:
        v11 = INFINITY;
        if (!a4)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else if ((float)((float)((float)(v17 + 1.0) * -0.00001) + 0.0) >= v12)
    {
LABEL_4:
      result = 0;
      goto LABEL_5;
    }
  }
  v13 = sqrtf(v12);
  v14 = 1.0 / (float)(v6 + v6);
  v15 = -v9;
  if (fabsf(v13) <= 0.00001)
  {
    v11 = v14 * v15;
    result = 1;
    if (!a4)
    {
LABEL_7:
      if (!a3)
        return result;
      goto LABEL_8;
    }
LABEL_6:
    *a4 = v11;
    goto LABEL_7;
  }
  v16 = v14 * (float)(v15 - v13);
  if (a3)
  {
    *a3 = v16;
    v16 = 0.0;
  }
  if (a4)
    *a4 = v14 * (float)(v13 - v9);
  if (a3)
    v16 = *a3;
  if (v16 >= 0.0)
    return 2;
  result = 1;
  v11 = 0.0;
  if (a3)
LABEL_8:
    *a3 = v11;
  return result;
}

uint64_t geom_intersect_ray_circle_2d(float64x2_t *a1, double *a2, double *a3, float64x2_t a4, float64x2_t a5)
{
  double v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t result;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v5 = vaddvq_f64(vmulq_f64(a5, a5));
  if (fabs(v5) <= 0.000001
    || (v6 = vsubq_f64(a4, *a1),
        v7 = vaddvq_f64(vmulq_f64(v6, v6)) - a1[1].f64[0] * a1[1].f64[0],
        v6.f64[0] = vaddvq_f64(vmulq_f64(a5, v6)),
        v8 = v6.f64[0] + v6.f64[0],
        v7 > 0.0)
    && v8 > 0.0
    || (v9 = v5 * -4.0 * v7 + v8 * v8, v9 != 0.0) && v9 <= -0.000001)
  {
    result = 0;
    v11 = INFINITY;
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v12 = sqrt(v9);
  v13 = 1.0 / (v5 + v5);
  v14 = -v8;
  if (fabs(v12) <= 0.000001)
  {
    v11 = v13 * v14;
    result = 1;
    if (a3)
LABEL_7:
      *a3 = v11;
  }
  else
  {
    v15 = v13 * (v14 - v12);
    if (a2)
    {
      *a2 = v15;
      v15 = 0.0;
    }
    if (a3)
      *a3 = v13 * (v12 - v8);
    if (a2)
      v15 = *a2;
    if (v15 >= 0.0)
      return 2;
    result = 1;
    v11 = 0.0;
  }
LABEL_8:
  if (a2)
    *a2 = v11;
  return result;
}

uint64_t geom_intersect_ray_sphere_3f(float32x4_t *a1, float *a2, float *a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float v11;
  uint64_t result;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v5 = vmulq_f32(a5, a5);
  LODWORD(v6) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).u32[0];
  if (fabsf(v6) <= 0.00001)
    goto LABEL_4;
  v7 = vsubq_f32(a4, *a1);
  v8 = vmulq_f32(v7, v7);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]- (float)(a1[1].f32[0] * a1[1].f32[0]);
  v10 = vmulq_f32(a5, v7);
  v10.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  v11 = v10.f32[0] + v10.f32[0];
  if (v9 > 0.0 && v11 > 0.0)
    goto LABEL_4;
  v14 = (float)((float)(v6 * -4.0) * v9) + (float)(v11 * v11);
  if (v14 != 0.0)
  {
    v19 = fabsf(v14);
    if (v19 == INFINITY)
    {
      if (v14 < 0.0)
      {
        result = 0;
LABEL_5:
        v13 = INFINITY;
        if (!a3)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else if ((float)((float)((float)(v19 + 1.0) * -0.00001) + 0.0) >= v14)
    {
LABEL_4:
      result = 0;
      goto LABEL_5;
    }
  }
  v15 = sqrtf(v14);
  v16 = 1.0 / (float)(v6 + v6);
  v17 = -v11;
  if (fabsf(v15) <= 0.00001)
  {
    v13 = v16 * v17;
    result = 1;
    if (!a3)
    {
LABEL_7:
      if (!a2)
        return result;
      goto LABEL_8;
    }
LABEL_6:
    *a3 = v13;
    goto LABEL_7;
  }
  v18 = v16 * (float)(v17 - v15);
  if (a2)
  {
    *a2 = v18;
    v18 = 0.0;
  }
  if (a3)
    *a3 = v16 * (float)(v15 - v11);
  if (a2)
    v18 = *a2;
  if (v18 >= 0.0)
    return 2;
  result = 1;
  v13 = 0.0;
  if (a2)
LABEL_8:
    *a2 = v13;
  return result;
}

uint64_t geom_intersect_ray_sphere_3d(float64x2_t *a1, float64x2_t *a2, double *a3, double *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v4 = a1[2];
  v5 = a1[3];
  v6 = vmulq_f64(v5, v5).f64[0] + vaddvq_f64(vmulq_f64(v4, v4));
  if (fabs(v6) <= 0.000001
    || (v7 = vsubq_f64(*a1, *a2),
        v8 = vsubq_f64(a1[1], a2[1]),
        v9 = vmulq_f64(v8, v8).f64[0] + vaddvq_f64(vmulq_f64(v7, v7)) - a2[2].f64[0] * a2[2].f64[0],
        v10 = vmulq_f64(v5, v8).f64[0],
        v11 = vaddvq_f64(vmulq_f64(v4, v7)),
        v12 = v10 + v11 + v10 + v11,
        v9 > 0.0)
    && v12 > 0.0
    || (v13 = v6 * -4.0 * v9 + v12 * v12, v13 != 0.0) && v13 <= -0.000001)
  {
    result = 0;
    v15 = INFINITY;
    if (!a4)
      goto LABEL_8;
    goto LABEL_7;
  }
  v16 = sqrt(v13);
  v17 = 1.0 / (v6 + v6);
  v18 = -v12;
  if (fabs(v16) <= 0.000001)
  {
    v15 = v17 * v18;
    result = 1;
    if (a4)
LABEL_7:
      *a4 = v15;
  }
  else
  {
    v19 = v17 * (v18 - v16);
    if (a3)
    {
      *a3 = v19;
      v19 = 0.0;
    }
    if (a4)
      *a4 = v17 * (v16 - v12);
    if (a3)
      v19 = *a3;
    if (v19 >= 0.0)
      return 2;
    result = 1;
    v15 = 0.0;
  }
LABEL_8:
  if (a3)
    *a3 = v15;
  return result;
}

uint64_t geom_intersect_line_segment_plane_3f(float32x4_t *a1, float *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float v10;
  float32x4_t v11;
  float v12;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v17;
  float32x4_t v18;

  v5 = *a1;
  v6 = a1[1].f32[0];
  v7 = vsubq_f32(a5, a4);
  v8 = vmulq_f32(v7, *a1);
  LODWORD(v9) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).u32[0];
  if (fabsf(v9) > 0.00000011921)
  {
    v10 = -v6;
    v11 = vmulq_f32(a4, v5);
    v12 = (float)(v10
                - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0])/ v9;
    if (a2)
      *a2 = v12;
    if (v12 >= 0.0 && v12 <= 1.0)
    {
      v14 = vmlaq_n_f32(a4, v7, v12);
      if (!a3)
        return 1;
      goto LABEL_15;
    }
    return 0;
  }
  v15 = vmulq_f32(a4, v5);
  if ((float)(v6
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]) > 0.00000011921)return 0;
  if (a2)
    *a2 = 0.5;
  v17 = vaddq_f32(a4, a5);
  v18.i64[0] = 0x3F0000003F000000;
  v18.i64[1] = 0x3F0000003F000000;
  v14 = vmulq_f32(v17, v18);
  if (!a3)
    return 1;
LABEL_15:
  *a3 = v14;
  return 1;
}

uint64_t geom_intersect_line_segment_plane_3d(float64x2_t *a1, float64x2_t *a2, _QWORD *a3, int8x16_t *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  float64x2_t v15;
  int8x16_t v16;
  unint64_t v23;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2].f64[0];
  v11 = vsubq_f64(v6, *a1);
  v12 = vsubq_f64(v7, v5);
  v13 = vmulq_f64(v9, v12).f64[0] + vaddvq_f64(vmulq_f64(*a2, v11));
  if (fabs(v13) <= 2.22044605e-16)
  {
    if (v10 + vmulq_f64(v5, v9).f64[0] + vaddvq_f64(vmulq_f64(v4, v8)) <= 2.22044605e-16)
    {
      if (a3)
        *a3 = 0x3FE0000000000000;
      __asm { FMOV            V2.2D, #0.5 }
      v16 = (int8x16_t)vmulq_f64(vaddq_f64(v4, v6), _Q2);
      v15 = vmulq_f64(vaddq_f64(v5, v7), _Q2);
      goto LABEL_14;
    }
    return 0;
  }
  v6.f64[0] = (-v10 - (vmulq_f64(v5, v9).f64[0] + vaddvq_f64(vmulq_f64(v4, v8)))) / v13;
  if (a3)
    *a3 = *(_QWORD *)&v6.f64[0];
  if (v6.f64[0] < 0.0 || v6.f64[0] > 1.0)
    return 0;
  v15 = vmlaq_f64(v5, v12, v6);
  *(_QWORD *)&v11.f64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v16 = (int8x16_t)vmlaq_n_f64(v4, v11, v6.f64[0]);
LABEL_14:
  v23 = vextq_s8(v16, v16, 8uLL).u64[0];
  if (a4)
  {
    v16.i64[1] = v23;
    *a4 = v16;
    a4[1] = (int8x16_t)v15;
  }
  return 1;
}

uint64_t *geom::cluster_parallel_clipper<float>::init(uint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result[3] = a4;
  result[4] = a5;
  result[5] = (uint64_t)a2;
  result[6] = a3;
  v5 = a2[15] - a2[14];
  v6 = (unint64_t)((v5 >> 4) * a5) >> 11;
  if (v6 <= 0x20)
    v6 = 32;
  v7 = a2[12] - a2[11];
  v8 = (unint64_t)((v7 >> 3) * a5) >> 10;
  if (v8 <= 0x40)
    v8 = 64;
  result[7] = v6;
  result[8] = v8;
  v9 = ((v8 + (v7 >> 3) - 1) / v8 + (v6 + (v5 >> 4) - 1) / v6) * a5;
  if (0xEEEEEEEEEEEEEEEFLL * ((result[1] - *result) >> 4) < v9)
    return (uint64_t *)std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::resize(result, v9);
  return result;
}

unint64_t geom::cluster_parallel_clipper<float>::work_item_count_per_plane(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)a1[5];
  return (unint64_t)(a1[8] + ((uint64_t)(v1[12] - v1[11]) >> 3) - 1) / a1[8]
       + (unint64_t)(a1[7] + ((uint64_t)(v1[15] - v1[14]) >> 4) - 1) / a1[7];
}

uint64_t std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((result - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 240 * a2;
    while (result != v7)
      result = geom::cluster_parallel_clipper<float>::clipping_context::~clipping_context(result - 240);
    a1[1] = v7;
  }
  return result;
}

void geom::cluster_parallel_clipper<float>::compute_clipped_clusters(_QWORD *a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD block[5];

  v1 = (_QWORD *)a1[5];
  v2 = ((unint64_t)(a1[8] + ((uint64_t)(v1[12] - v1[11]) >> 3) - 1) / a1[8]
      + (unint64_t)(a1[7] + ((uint64_t)(v1[15] - v1[14]) >> 4) - 1) / a1[7])
     * a1[4];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIfE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_1;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = a1;
  dispatch_apply(v2, 0, block);
}

void geom::cluster_parallel_clipper<float>::get_split_clusters(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  unint64_t v44;
  _QWORD *v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 __p;
  uint64_t v51;
  std::vector<unsigned int> __c;
  void **v53[3];
  char *v54[4];

  v4 = a1;
  v5 = (_QWORD *)a1[5];
  v6 = (unint64_t)(a1[8] + ((uint64_t)(v5[12] - v5[11]) >> 3) - 1) / a1[8]
     + (unint64_t)(a1[7] + ((uint64_t)(v5[15] - v5[14]) >> 4) - 1) / a1[7];
  v7 = v6 * a4;
  v8 = v6 * a4 + v6;
  if (v6 * a4 >= v8)
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = v6 * a4;
    do
    {
      v14 = (_QWORD *)(*a1 + 240 * v13);
      v9 += (uint64_t)(v14[10] - v14[9]) >> 4;
      v10 += (uint64_t)(v14[13] - v14[12]) >> 4;
      v11 += (uint64_t)(v14[16] - v14[15]) >> 3;
      v12 += (uint64_t)(v14[19] - v14[18]) >> 3;
      ++v13;
    }
    while (v13 != v8);
  }
  memset(v54, 0, 24);
  memset(v53, 0, sizeof(v53));
  memset(&__c, 0, sizeof(__c));
  __p = 0uLL;
  v51 = 0;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve(v54, v9);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve((char **)v53, v10);
  std::vector<unsigned long long>::reserve((void **)&__c.__begin_, v11);
  std::vector<unsigned long long>::reserve((void **)&__p, v12);
  v15 = (__n128)vdupq_n_s32(0x7F800000u);
  if (v7 >= v8)
  {
    v17.n128_u64[0] = 0x7F0000007FLL;
    v17.n128_u64[1] = 0x7F0000007FLL;
    v41.n128_u64[0] = 0x7F0000007FLL;
    v41.n128_u64[1] = 0x7F0000007FLL;
    v48 = v15;
    v49 = v41;
  }
  else
  {
    v16.n128_u64[0] = 0x7F0000007FLL;
    v16.n128_u64[1] = 0x7F0000007FLL;
    v48 = v15;
    v49 = v16;
    v17.n128_u64[0] = 0x7F0000007FLL;
    v17.n128_u64[1] = 0x7F0000007FLL;
    v44 = v8;
    v45 = v4;
    do
    {
      v46 = v17;
      v47 = v15;
      v18 = *v4;
      v19 = *v4 + 240 * v7;
      v20 = (_QWORD *)(v19 + 80);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>,0>(*(_QWORD *)(v19 + 72), *(_QWORD *)(v19 + 80), v54);
      v21 = (uint64_t *)(v19 + 96);
      v22 = (uint64_t *)(v19 + 104);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>,0>(*(_QWORD *)(v19 + 96), *(_QWORD *)(v19 + 104), (char **)v53);
      v23 = (_QWORD *)(v19 + 120);
      v24 = (_QWORD *)(v19 + 128);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>(*(_QWORD **)(v19 + 120), *(_QWORD **)(v19 + 128), (uint64_t)&__c);
      v25 = (_QWORD *)(v19 + 152);
      v26 = (_QWORD *)(v19 + 144);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>(*(_QWORD **)(v19 + 144), *(_QWORD **)(v19 + 152), (uint64_t)&__p);
      v27 = *(_QWORD *)(v19 + 80);
      v28 = *(_QWORD *)(v19 + 72);
      while (v27 != v28)
        v27 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v27 - 16);
      *v20 = v28;
      v29 = *v22;
      v30 = *v21;
      while (v29 != v30)
        v29 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v29 - 16);
      v31 = (float32x4_t)v46;
      v32 = (float32x4_t)v47;
      v32.i32[3] = 0;
      v33 = (float32x4_t *)(v18 + 240 * v7);
      v34 = v33[11];
      v35 = v33[12];
      v34.i32[3] = 0;
      v15 = (__n128)vminnmq_f32(v32, v34);
      v31.i32[3] = 0;
      v35.i32[3] = 0;
      v36 = (float32x4_t)v48;
      v36.i32[3] = 0;
      v17 = (__n128)vmaxnmq_f32(v31, v35);
      v37 = v33[13];
      v38 = v33[14];
      v37.i32[3] = 0;
      v39 = vminnmq_f32(v36, v37);
      *v22 = v30;
      *v24 = *v23;
      v40 = (float32x4_t)v49;
      v40.i32[3] = 0;
      *v25 = *v26;
      v38.i32[3] = 0;
      v48 = (__n128)v39;
      v49 = (__n128)vmaxnmq_f32(v40, v38);
      ++v7;
      v4 = v45;
    }
    while (v7 != v44);
  }
  geom::cluster<float>::init(a2, *(_QWORD *)(v4[5] + 72), *(_QWORD *)(v4[5] + 80), v4[6], (__n128 *)&__c, (uint64_t)v54, *(_DWORD *)(v4[5] + 64), v15, v17, *(float *)(v4[5] + 68));
  geom::cluster<float>::init(a3, *(_QWORD *)(v4[5] + 72), *(_QWORD *)(v4[5] + 80), v4[6], &__p, (uint64_t)v53, *(_DWORD *)(v4[5] + 64), v48, v49, *(float *)(v4[5] + 68));
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (__c.__begin_)
  {
    __c.__end_ = __c.__begin_;
    operator delete(__c.__begin_);
  }
  __c.__begin_ = (std::vector<unsigned int>::pointer)v53;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__c);
  v53[0] = (void **)v54;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](v53);
}

uint64_t geom::cluster_parallel_clipper<float>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int32x4_t v24;

  v2 = a1[6];
  v4 = *(_QWORD *)(v2 + 8);
  result = *(_QWORD *)(v2 + 16);
  if (result != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(v4 + 16 * v5);
      v8 = v7 + 1;
      v9 = v7[1];
      if (v9 && !*(_QWORD *)(v9 + 8))
      {
        ++v6;
      }
      else
      {
        v10 = *v7;
        *v7 = *(_QWORD *)(result - 16);
        *(_QWORD *)(result - 16) = v10;
        v11 = *v8;
        *v8 = *(_QWORD *)(result - 8);
        *(_QWORD *)(result - 8) = v11;
        result = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](*(_QWORD *)(v2 + 16) - 16);
        *(_QWORD *)(v2 + 16) = result;
        v4 = *(_QWORD *)(v2 + 8);
      }
      v5 = v6;
    }
    while (v6 < (unint64_t)((result - v4) >> 4));
  }
  atomic_store(0, (unsigned int *)v2);
  v12 = *a1;
  v13 = a1[1];
  if (*a1 != v13)
  {
    v24 = vdupq_n_s32(0x7F800000u);
    do
    {
      *(_QWORD *)(v12 + 8) = *(_QWORD *)v12;
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v12 + 48);
      v14 = *(_QWORD *)(v12 + 72);
      v15 = *(_QWORD *)(v12 + 80);
      while (v14 != v15)
      {
        v16 = *(_QWORD *)(v14 + 8);
        if (v16)
        {
          if (!*(_QWORD *)(v16 + 8))
            geom::convex_mesh_cache<float>::move_unused_data((_QWORD *)a1[6], v14);
        }
        v14 += 16;
      }
      v17 = *(_QWORD *)(v12 + 96);
      v18 = *(_QWORD *)(v12 + 104);
      while (v17 != v18)
      {
        v19 = *(_QWORD *)(v17 + 8);
        if (v19 && !*(_QWORD *)(v19 + 8))
          geom::convex_mesh_cache<float>::move_unused_data((_QWORD *)a1[6], v17);
        v17 += 16;
      }
      v21 = *(_QWORD *)(v12 + 72);
      for (i = *(_QWORD *)(v12 + 80);
            i != v21;
      *(_QWORD *)(v12 + 80) = v21;
      v22 = *(_QWORD *)(v12 + 96);
      for (result = *(_QWORD *)(v12 + 104);
            result != v22;
      *(_QWORD *)(v12 + 104) = v22;
      *(_QWORD *)(v12 + 128) = *(_QWORD *)(v12 + 120);
      *(_QWORD *)(v12 + 152) = *(_QWORD *)(v12 + 144);
      *(_QWORD *)&v23 = 0x7F0000007FLL;
      *((_QWORD *)&v23 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v12 + 176) = v24;
      *(_OWORD *)(v12 + 192) = v23;
      *(int32x4_t *)(v12 + 208) = v24;
      *(_OWORD *)(v12 + 224) = v23;
      v12 += 240;
    }
    while (v12 != v13);
  }
  a1[5] = 0;
  a1[6] = 0;
  return result;
}

unint64_t geom::cluster_parallel_clipper<float>::boundary_component_work_item_count_per_plane(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 56)
                          + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 120)
                                     - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112)) >> 4)
                          - 1)
       / *(_QWORD *)(a1 + 56);
}

unint64_t geom::cluster_parallel_clipper<float>::interior_component_work_item_count_per_plane(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 64)
                          + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 96)
                                     - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 88)) >> 3)
                          - 1)
       / *(_QWORD *)(a1 + 64);
}

void geom::cluster_parallel_clipper<float>::boundary_component_work_item(uint64_t a1, uint64_t a2, float32x4_t *a3, __int128 *a4, uint64_t a5)
{
  float v5;
  float v6;
  __int128 *v7;
  float32x4_t *v8;
  uint64_t v10;
  char **v11;
  int32x2_t v12;
  __int128 *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  uint64_t *p_shared_owners;
  unint64_t *v30;
  unint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  std::__shared_count v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  std::__shared_weak_count *v48;
  uint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_count v52;
  float32x4_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  float32x4_t *v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t *v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  _QWORD *v103;
  _QWORD *v104;
  char *v105;
  __int128 v106;
  int64x2_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v121;
  __int128 v122;
  int64x2_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  std::vector<unsigned int> *v129;
  unint64_t *v130;
  char **v131;
  char **v132;
  int32x4_t v134;
  uint64_t v135[2];
  uint64_t v136;
  int64x2_t v137;
  uint64_t v138;
  uint64_t v139;

  v5 = fmaxf(fmaxf(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 16), *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 24)), *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 20));
  if (v5 <= 1.0)
    v6 = 0.00000011921;
  else
    v6 = v5 * 0.00000011921;
  if (a5)
  {
    v7 = a4;
    v8 = a3;
    v10 = a1;
    v11 = (char **)(a2 + 72);
    v131 = (char **)(a2 + 72);
    v132 = (char **)(a2 + 96);
    v129 = (std::vector<unsigned int> *)(a2 + 24);
    v130 = (unint64_t *)(a2 + 48);
    v125 = a2 + 112;
    v126 = a2 + 88;
    v134 = vdupq_n_s32(0x7F800000u);
    v12 = vdup_n_s32(0x7FC00000u);
    v13 = &a4[a5];
    v127 = v13;
    do
    {
      v14 = *(float32x4_t *)(*(_QWORD *)v7 + 16);
      v15 = *(float32x4_t *)(*(_QWORD *)v7 + 32);
      v16.i64[0] = 0x3F0000003F000000;
      v16.i64[1] = 0x3F0000003F000000;
      v17 = vmulq_f32(vaddq_f32(v14, v15), v16);
      v18 = vsubq_f32(v15, v14);
      v19 = vmulq_f32(v18, v18);
      v20 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0])* 0.5)- v6;
      v21 = vmulq_f32(*v8, v17);
      v22 = v8[1].f32[0]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0];
      if (v22 <= (float)-v20)
      {
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v11, v7);
        v32 = *(float32x4_t **)v7;
        v33 = *(float32x4_t *)(a2 + 176);
        v34 = *(float32x4_t *)(a2 + 192);
        v33.i32[3] = 0;
        v35 = *(float32x4_t *)(*(_QWORD *)v7 + 16);
        v35.i32[3] = 0;
        *(float32x4_t *)(a2 + 176) = vminnmq_f32(v33, v35);
        v36 = v32[2];
        v34.i32[3] = 0;
        v36.i32[3] = 0;
        *(float32x4_t *)(a2 + 192) = vmaxnmq_f32(v34, v36);
      }
      else if (v22 >= v20)
      {
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v132, v7);
        v37 = *(float32x4_t **)v7;
        v38 = *(float32x4_t *)(a2 + 208);
        v39 = *(float32x4_t *)(a2 + 224);
        v38.i32[3] = 0;
        v40 = *(float32x4_t *)(*(_QWORD *)v7 + 16);
        v40.i32[3] = 0;
        *(float32x4_t *)(a2 + 208) = vminnmq_f32(v38, v40);
        v41 = v37[2];
        v39.i32[3] = 0;
        v41.i32[3] = 0;
        *(float32x4_t *)(a2 + 224) = vmaxnmq_f32(v39, v41);
      }
      else
      {
        v23 = *(_QWORD *)(v10 + 48);
        do
          v24 = __ldaxr((unsigned int *)v23);
        while (__stlxr(v24 + 1, (unsigned int *)v23));
        v26 = v23 + 8;
        v25 = *(_QWORD *)(v23 + 8);
        if (v24 >= (unint64_t)((*(_QWORD *)(v26 + 8) - v25) >> 4))
        {
          v28 = (std::__shared_weak_count *)operator new(0x80uLL);
          v28->__shared_owners_ = 0;
          v28->__shared_weak_owners_ = 0;
          v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24F149F90;
          v28[1].__shared_owners_ = (uint64_t)v12;
          p_shared_owners = &v28[1].__shared_owners_;
          v28[1].__shared_weak_owners_ = 0;
          v42.__vftable = (std::__shared_count_vtbl *)0x7F0000007FLL;
          v42.__shared_owners_ = 0x7F0000007FLL;
          v28[2].std::__shared_count = (std::__shared_count)v134;
          *((std::__shared_count *)v28 + 4) = v42;
          LOBYTE(v42.__vftable) = 0;
          BYTE4(v42.__vftable) = 0;
          LOBYTE(v42.__shared_owners_) = 0;
          BYTE4(v42.__shared_owners_) = 0;
          *((std::__shared_count *)v28 + 5) = v42;
          v28[4].std::__shared_count = v42;
          *((std::__shared_count *)v28 + 7) = v42;
        }
        else
        {
          v27 = (uint64_t **)(v25 + 16 * v24);
          p_shared_owners = *v27;
          v28 = (std::__shared_weak_count *)v27[1];
          if (v28)
          {
            v30 = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
        }
        v43 = *(_QWORD *)(v10 + 48);
        do
          v44 = __ldaxr((unsigned int *)v43);
        while (__stlxr(v44 + 1, (unsigned int *)v43));
        v46 = v43 + 8;
        v45 = *(_QWORD *)(v43 + 8);
        if (v44 >= (unint64_t)((*(_QWORD *)(v46 + 8) - v45) >> 4))
        {
          v48 = (std::__shared_weak_count *)operator new(0x80uLL);
          v48->__shared_owners_ = 0;
          v48->__shared_weak_owners_ = 0;
          v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24F149F90;
          v48[1].__shared_owners_ = (uint64_t)v12;
          v49 = &v48[1].__shared_owners_;
          v48[1].__shared_weak_owners_ = 0;
          v52.__vftable = (std::__shared_count_vtbl *)0x7F0000007FLL;
          v52.__shared_owners_ = 0x7F0000007FLL;
          v48[2].std::__shared_count = (std::__shared_count)v134;
          *((std::__shared_count *)v48 + 4) = v52;
          LOBYTE(v52.__vftable) = 0;
          BYTE4(v52.__vftable) = 0;
          LOBYTE(v52.__shared_owners_) = 0;
          BYTE4(v52.__shared_owners_) = 0;
          *((std::__shared_count *)v48 + 5) = v52;
          v48[4].std::__shared_count = v52;
          *((std::__shared_count *)v48 + 7) = v52;
        }
        else
        {
          v47 = (uint64_t **)(v45 + 16 * v44);
          v49 = *v47;
          v48 = (std::__shared_weak_count *)v47[1];
          if (v48)
          {
            v50 = (unint64_t *)&v48->__shared_owners_;
            do
              v51 = __ldxr(v50);
            while (__stxr(v51 + 1, v50));
          }
        }
        v53 = *(float32x4_t **)v7;
        v54 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v7 + 56) - *(_QWORD *)(*(_QWORD *)v7 + 48)) >> 4;
        v136 = *(_QWORD *)(*(_QWORD *)v7 + 48);
        v137.i64[0] = v54;
        v55 = v53[4].i64[1];
        v56 = (v53[5].i64[0] - v55) >> 2;
        v135[0] = v55;
        v135[1] = v56;
        geom::split_triangle_mesh_with_plane<float>(&v136, v135, a3, (char **)p_shared_owners + 6, p_shared_owners + 9, (char **)v49 + 6, v49 + 9, v130, (std::vector<unsigned int> *)a2, v129);
        if (p_shared_owners[7] == p_shared_owners[6])
        {
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v132, v7);
          v82 = *(float32x4_t **)v7;
          v83 = *(float32x4_t *)(a2 + 208);
          v84 = *(float32x4_t *)(a2 + 224);
          v83.i32[3] = 0;
          v85 = *(float32x4_t *)(*(_QWORD *)v7 + 16);
          v85.i32[3] = 0;
          *(float32x4_t *)(a2 + 208) = vminnmq_f32(v83, v85);
          v86 = v82[2];
          v84.i32[3] = 0;
          v86.i32[3] = 0;
          *(float32x4_t *)(a2 + 224) = vmaxnmq_f32(v84, v86);
        }
        else if (v49[7] != v49[6])
        {
          geom::close_triangle_mesh<float>((float32x4_t **)p_shared_owners + 6, p_shared_owners + 9);
          geom::close_triangle_mesh<float>((float32x4_t **)v49 + 6, v49 + 9);
          v57 = (float32x4_t *)p_shared_owners[6];
          v58.i64[0] = 0x7F0000007FLL;
          v58.i64[1] = 0x7F0000007FLL;
          v59 = (float32x4_t)v134;
          v60.i64[0] = 0x7F0000007FLL;
          v60.i64[1] = 0x7F0000007FLL;
          v61 = p_shared_owners[7] - (_QWORD)v57;
          if (v61)
          {
            v62 = 16 * (v61 >> 4);
            v59 = (float32x4_t)v134;
            do
            {
              v63 = *v57++;
              v64 = v63;
              v64.i32[3] = 0;
              v59.i32[3] = 0;
              v59 = vminnmq_f32(v64, v59);
              v60.i32[3] = 0;
              v60 = vmaxnmq_f32(v64, v60);
              v62 -= 16;
            }
            while (v62);
          }
          *((float32x4_t *)p_shared_owners + 1) = v59;
          *((float32x4_t *)p_shared_owners + 2) = v60;
          v65 = (float32x4_t *)v49[6];
          v66 = (float32x4_t)v134;
          v67 = v49[7] - (_QWORD)v65;
          v11 = v131;
          if (v67)
          {
            v68 = 16 * (v67 >> 4);
            v58.i64[0] = 0x7F0000007FLL;
            v58.i32[2] = 127;
            v66 = (float32x4_t)v134;
            do
            {
              v69 = *v65++;
              v70 = v69;
              v70.i32[3] = 0;
              v66.i32[3] = 0;
              v66 = vminnmq_f32(v70, v66);
              v58.i32[3] = 0;
              v58 = vmaxnmq_f32(v70, v58);
              v68 -= 16;
            }
            while (v68);
          }
          *((float32x4_t *)v49 + 1) = v66;
          *((float32x4_t *)v49 + 2) = v58;
          *(float *)p_shared_owners = geom::triangle_mesh_volume_3<float>(p_shared_owners[6], (p_shared_owners[7] - p_shared_owners[6]) >> 4, p_shared_owners[9], (p_shared_owners[10] - p_shared_owners[9]) >> 2);
          *(float *)v49 = geom::triangle_mesh_volume_3<float>(v49[6], (v49[7] - v49[6]) >> 4, v49[9], (v49[10] - v49[9]) >> 2);
          *((float *)p_shared_owners + 1) = geom::triangle_mesh_surface_area_3<float>(p_shared_owners[6], (p_shared_owners[7] - p_shared_owners[6]) >> 4, p_shared_owners[9], (p_shared_owners[10] - p_shared_owners[9]) >> 2);
          *((float *)v49 + 1) = geom::triangle_mesh_surface_area_3<float>(v49[6], (v49[7] - v49[6]) >> 4, v49[9], (v49[10] - v49[9]) >> 2);
          v71 = *((float32x4_t *)p_shared_owners + 1);
          v72 = *(float32x4_t *)(a2 + 176);
          v73 = *(float32x4_t *)(a2 + 192);
          v72.i32[3] = 0;
          v71.i32[3] = 0;
          *(float32x4_t *)(a2 + 176) = vminnmq_f32(v72, v71);
          v74 = *((float32x4_t *)p_shared_owners + 2);
          v73.i32[3] = 0;
          v74.i32[3] = 0;
          *(float32x4_t *)(a2 + 192) = vmaxnmq_f32(v73, v74);
          v75 = *((float32x4_t *)v49 + 1);
          v76 = *(float32x4_t *)(a2 + 208);
          v77 = *(float32x4_t *)(a2 + 224);
          v76.i32[3] = 0;
          v75.i32[3] = 0;
          *(float32x4_t *)(a2 + 208) = vminnmq_f32(v76, v75);
          v78 = *((float32x4_t *)v49 + 2);
          v77.i32[3] = 0;
          v78.i32[3] = 0;
          *(float32x4_t *)(a2 + 224) = vmaxnmq_f32(v77, v78);
          v80 = *(char **)(a2 + 80);
          v79 = *(_QWORD *)(a2 + 88);
          if ((unint64_t)v80 >= v79)
          {
            v96 = (v80 - *v131) >> 4;
            v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 60)
              goto LABEL_78;
            v98 = v79 - (_QWORD)*v131;
            if (v98 >> 3 > v97)
              v97 = v98 >> 3;
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF0)
              v99 = 0xFFFFFFFFFFFFFFFLL;
            else
              v99 = v97;
            v139 = v126;
            v100 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v126, v99);
            v102 = &v100[16 * v96];
            *(_QWORD *)v102 = p_shared_owners;
            *((_QWORD *)v102 + 1) = v28;
            v104 = *(_QWORD **)(a2 + 72);
            v103 = *(_QWORD **)(a2 + 80);
            if (v103 == v104)
            {
              v107 = vdupq_n_s64((unint64_t)v103);
              v105 = &v100[16 * v96];
            }
            else
            {
              v105 = &v100[16 * v96];
              do
              {
                v106 = *((_OWORD *)v103 - 1);
                v103 -= 2;
                *((_OWORD *)v105 - 1) = v106;
                v105 -= 16;
                *v103 = 0;
                v103[1] = 0;
              }
              while (v103 != v104);
              v107 = *(int64x2_t *)v131;
            }
            v81 = v102 + 16;
            *(_QWORD *)(a2 + 72) = v105;
            *(_QWORD *)(a2 + 80) = v102 + 16;
            v137 = v107;
            v108 = *(_QWORD *)(a2 + 88);
            *(_QWORD *)(a2 + 88) = &v100[16 * v101];
            v138 = v108;
            v136 = v107.i64[0];
            std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v136);
          }
          else
          {
            *(_QWORD *)v80 = p_shared_owners;
            *((_QWORD *)v80 + 1) = v28;
            v81 = v80 + 16;
          }
          *(_QWORD *)(a2 + 80) = v81;
          v110 = *(char **)(a2 + 104);
          v109 = *(_QWORD *)(a2 + 112);
          if ((unint64_t)v110 >= v109)
          {
            v112 = (v110 - *v132) >> 4;
            v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 60)
LABEL_78:
              abort();
            v114 = v109 - (_QWORD)*v132;
            if (v114 >> 3 > v113)
              v113 = v114 >> 3;
            if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
              v115 = 0xFFFFFFFFFFFFFFFLL;
            else
              v115 = v113;
            v139 = v125;
            v116 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v125, v115);
            v118 = &v116[16 * v112];
            *(_QWORD *)v118 = v49;
            *((_QWORD *)v118 + 1) = v48;
            v120 = *(_QWORD **)(a2 + 96);
            v119 = *(_QWORD **)(a2 + 104);
            if (v119 == v120)
            {
              v123 = vdupq_n_s64((unint64_t)v119);
              v121 = &v116[16 * v112];
              v8 = a3;
              v13 = v127;
              v10 = a1;
            }
            else
            {
              v121 = &v116[16 * v112];
              v8 = a3;
              v13 = v127;
              v10 = a1;
              do
              {
                v122 = *((_OWORD *)v119 - 1);
                v119 -= 2;
                *((_OWORD *)v121 - 1) = v122;
                v121 -= 16;
                *v119 = 0;
                v119[1] = 0;
              }
              while (v119 != v120);
              v123 = *(int64x2_t *)v132;
            }
            v111 = v118 + 16;
            *(_QWORD *)(a2 + 96) = v121;
            *(_QWORD *)(a2 + 104) = v118 + 16;
            v137 = v123;
            v124 = *(_QWORD *)(a2 + 112);
            *(_QWORD *)(a2 + 112) = &v116[16 * v117];
            v138 = v124;
            v136 = v123.i64[0];
            std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v136);
          }
          else
          {
            *(_QWORD *)v110 = v49;
            *((_QWORD *)v110 + 1) = v48;
            v111 = v110 + 16;
            v8 = a3;
            v13 = v127;
            v10 = a1;
          }
          *(_QWORD *)(a2 + 104) = v111;
          goto LABEL_76;
        }
        v11 = v131;
        if (v49[6] == v49[7])
        {
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v131, v7);
          v87 = *(float32x4_t **)v7;
          v88 = *(float32x4_t *)(a2 + 176);
          v89 = *(float32x4_t *)(a2 + 192);
          v88.i32[3] = 0;
          v90 = *(float32x4_t *)(*(_QWORD *)v7 + 16);
          v90.i32[3] = 0;
          *(float32x4_t *)(a2 + 176) = vminnmq_f32(v88, v90);
          v91 = v87[2];
          v89.i32[3] = 0;
          v91.i32[3] = 0;
          *(float32x4_t *)(a2 + 192) = vmaxnmq_f32(v89, v91);
        }
        v13 = v127;
        if (v48)
        {
          v92 = (unint64_t *)&v48->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v8 = a3;
        v10 = a1;
        if (v28)
        {
          v94 = (unint64_t *)&v28->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
LABEL_76:
      ++v7;
    }
    while (v7 != v13);
  }
}

uint64_t geom::close_triangle_mesh<float>(float32x4_t **a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  float32x4_t v8;
  uint64_t **v9;
  float32x4_t *v10;
  float32x4_t i;
  float32x4_t v12;
  unint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float32x4_t *v21;
  char *v22;
  char *v23;
  char *v24;
  float32x4_t v25;
  uint64_t *v26;
  char **v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  float32x4_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  int v63;

  v61 = 0u;
  v62 = 0u;
  v63 = 1065353216;
  if ((((uint64_t)(a2[1] - *a2) >> 2) / 3uLL))
  {
    v4 = 0;
    v5 = 3 * (((uint64_t)(a2[1] - *a2) >> 2) / 3uLL);
    do
    {
      v6 = *(_DWORD *)(*a2 + 4 * (v4 + 1));
      v7 = *(_DWORD *)(*a2 + 4 * (v4 + 2));
      LODWORD(v60) = *(_DWORD *)(*a2 + 4 * v4);
      HIDWORD(v60) = v6;
      v59 = __PAIR64__(v6, v7);
      v58 = __PAIR64__(v7, v60);
      if (!std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__erase_unique<geom::edge>(&v61, (unsigned int *)&v60))std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__emplace_unique_key_args<geom::edge,geom::edge const&>((uint64_t)&v61, (unsigned int *)&v60, &v60);
      if (!std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__erase_unique<geom::edge>(&v61, (unsigned int *)&v59))std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__emplace_unique_key_args<geom::edge,geom::edge const&>((uint64_t)&v61, (unsigned int *)&v59, &v59);
      if (!std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__erase_unique<geom::edge>(&v61, (unsigned int *)&v58))std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__emplace_unique_key_args<geom::edge,geom::edge const&>((uint64_t)&v61, (unsigned int *)&v58, &v58);
      v4 += 3;
    }
    while (v5 != v4);
    if (*((_QWORD *)&v62 + 1))
    {
      v9 = (uint64_t **)v62;
      v10 = *a1;
      for (i = 0uLL; v9; v9 = (uint64_t **)*v9)
      {
        v8 = v10[*((unsigned int *)v9 + 5)];
        i = vaddq_f32(vaddq_f32(i, v10[*((unsigned int *)v9 + 4)]), v8);
      }
      v8.f32[0] = (float)(unint64_t)(2 * *((_QWORD *)&v62 + 1));
      v12 = vdivq_f32(i, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0));
      v13 = (unint64_t)a1[2];
      v14 = a1[1];
      v15 = v14 - v10;
      if ((unint64_t)v14 >= v13)
      {
        if ((unint64_t)(v15 + 1) >> 60)
LABEL_81:
          abort();
        v17 = v13 - (_QWORD)v10;
        v18 = v17 >> 3;
        if (v17 >> 3 <= (unint64_t)(v15 + 1))
          v18 = v15 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
        {
          v57 = v12;
          v20 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), v19);
          v12 = v57;
        }
        else
        {
          v20 = 0;
        }
        v21 = (float32x4_t *)&v20[16 * v15];
        v22 = &v20[16 * v19];
        *v21 = v12;
        v16 = v21 + 1;
        v24 = (char *)*a1;
        v23 = (char *)a1[1];
        if (v23 != (char *)*a1)
        {
          do
          {
            v25 = *((float32x4_t *)v23 - 1);
            v23 -= 16;
            v21[-1] = v25;
            --v21;
          }
          while (v23 != v24);
          v23 = (char *)*a1;
        }
        *a1 = v21;
        a1[1] = v16;
        a1[2] = (float32x4_t *)v22;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v14 = v12;
        v16 = v14 + 1;
      }
      a1[1] = v16;
      v26 = (uint64_t *)v62;
      if ((_QWORD)v62)
      {
        v27 = (char **)(a2 + 2);
        v28 = (char *)a2[1];
        do
        {
          v29 = *v27;
          if (v28 >= *v27)
          {
            v31 = (char *)*a2;
            v32 = (uint64_t)&v28[-*a2] >> 2;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62)
              goto LABEL_81;
            v34 = v29 - v31;
            if (v34 >> 1 > v33)
              v33 = v34 >> 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
              v35 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v35);
              v31 = (char *)*a2;
              v28 = (char *)a2[1];
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[4 * v32];
            *(_DWORD *)v37 = v15;
            v30 = v37 + 4;
            while (v28 != v31)
            {
              v38 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *((_DWORD *)v37 - 1) = v38;
              v37 -= 4;
            }
            v29 = &v36[4 * v35];
            *a2 = v37;
            a2[1] = v30;
            a2[2] = v29;
            if (v31)
            {
              operator delete(v31);
              v29 = *v27;
            }
          }
          else
          {
            *(_DWORD *)v28 = v15;
            v30 = v28 + 4;
          }
          a2[1] = v30;
          if (v30 >= v29)
          {
            v40 = (char *)*a2;
            v41 = (uint64_t)&v30[-*a2] >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
              goto LABEL_81;
            v43 = v29 - v40;
            if (v43 >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v44);
              v40 = (char *)*a2;
              v30 = (char *)a2[1];
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[4 * v41];
            *(_DWORD *)v46 = *((_DWORD *)v26 + 4);
            v39 = v46 + 4;
            while (v30 != v40)
            {
              v47 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            v29 = &v45[4 * v44];
            *a2 = v46;
            a2[1] = v39;
            a2[2] = v29;
            if (v40)
            {
              operator delete(v40);
              v29 = *v27;
            }
          }
          else
          {
            *(_DWORD *)v30 = *((_DWORD *)v26 + 4);
            v39 = v30 + 4;
          }
          a2[1] = v39;
          if (v39 >= v29)
          {
            v48 = (char *)*a2;
            v49 = (uint64_t)&v39[-*a2] >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
              goto LABEL_81;
            v51 = v29 - v48;
            if (v51 >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v52);
              v48 = (char *)*a2;
              v39 = (char *)a2[1];
            }
            else
            {
              v53 = 0;
            }
            v54 = &v53[4 * v49];
            *(_DWORD *)v54 = *((_DWORD *)v26 + 5);
            v28 = v54 + 4;
            while (v39 != v48)
            {
              v55 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *((_DWORD *)v54 - 1) = v55;
              v54 -= 4;
            }
            *a2 = v54;
            a2[1] = v28;
            a2[2] = &v53[4 * v52];
            if (v48)
              operator delete(v48);
          }
          else
          {
            *(_DWORD *)v39 = *((_DWORD *)v26 + 5);
            v28 = v39 + 4;
          }
          a2[1] = v28;
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v61);
}

void geom::cluster_parallel_clipper<float>::interior_component_work_item(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, uint64_t a5, double a6, __n128 a7, double a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13)
{
  float v13;
  float v14;
  uint64_t *v15;
  float32x4_t *v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int32 v20;
  unsigned __int32 v21;
  float32x4_t *v22;
  uint64_t v23;
  __int32 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char *v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  char **v65;
  char *v66;
  char *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t *v87;
  float32x4_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  _QWORD *v130;
  _QWORD *v131;
  char *v132;
  __int128 v133;
  int64x2_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  _QWORD *v144;
  char *v145;
  __int128 v146;
  int64x2_t v147;
  char *v148;
  uint64_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  _QWORD *v163;
  _QWORD *v164;
  char *v165;
  __int128 v166;
  int64x2_t v167;
  uint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  _QWORD *v180;
  _QWORD *v181;
  char *v182;
  __int128 v183;
  int64x2_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  std::vector<unsigned int> *v198;
  unint64_t *v199;
  int32x4_t v201;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  uint64_t v209[2];
  _OWORD *v210;
  int64x2_t v211;
  uint64_t v212;
  uint64_t v213;
  _OWORD v214[9];
  float32x4_t v215[8];
  uint64_t v216;

  v216 = *MEMORY[0x24BDAC8D0];
  v13 = fmaxf(fmaxf(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 16), *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 24)), *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 20));
  if (v13 <= 1.0)
    v14 = 0.00000011921;
  else
    v14 = v13 * 0.00000011921;
  if (a5)
  {
    v15 = a4;
    v16 = a3;
    v18 = a1;
    v19 = &a4[a5];
    v198 = (std::vector<unsigned int> *)(a2 + 24);
    v199 = (unint64_t *)(a2 + 48);
    v193 = a2 + 88;
    v194 = a2 + 160;
    v195 = a2 + 112;
    v196 = a2 + 136;
    v201 = vdupq_n_s32(0x7F800000u);
    v197 = v19;
    while (1)
    {
      v20 = a12.u32[3];
      v21 = a13.u32[3];
      v22 = *(float32x4_t **)(*(_QWORD *)(v18 + 40) + 72);
      v23 = *v15;
      v24 = v22->i32[2];
      a7.n128_u32[0] = v24 & *v15;
      a7.n128_u32[1] = ((unint64_t)*v15 >> v22->i32[0]) & v24;
      a7.n128_u32[2] = ((unint64_t)*v15 >> (2 * v22->i8[0])) & v24;
      v25 = v22[1];
      v26 = vmlaq_f32(v22[2], vcvtq_f32_u32((uint32x4_t)a7), v25);
      v27 = vaddq_f32(v25, v26);
      a12 = v26;
      a12.i32[3] = v20;
      a13 = v27;
      a13.i32[3] = v21;
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      v29 = vsubq_f32(a13, a12);
      v30 = vmulq_f32(v29, v29);
      v31 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0])* 0.5)- v14;
      v32 = vmulq_f32(*v16, vmulq_f32(vaddq_f32(v26, v27), v28));
      v33 = v16[1].f32[0]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
      if (v33 <= (float)-v31)
      {
        v49 = *(char **)(a2 + 128);
        v48 = *(_QWORD *)(a2 + 136);
        if ((unint64_t)v49 >= v48)
        {
          v54 = *(char **)(a2 + 120);
          v55 = (v49 - v54) >> 3;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
            goto LABEL_139;
          v204 = a13;
          v207 = a12;
          v57 = v48 - (_QWORD)v54;
          if (v57 >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v196, v58);
            v54 = *(char **)(a2 + 120);
            v49 = *(char **)(a2 + 128);
            v23 = *v15;
          }
          else
          {
            v59 = 0;
          }
          v109 = &v59[8 * v55];
          *(_QWORD *)v109 = v23;
          v50 = v109 + 8;
          while (v49 != v54)
          {
            v110 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v109 - 1) = v110;
            v109 -= 8;
          }
          *(_QWORD *)(a2 + 120) = v109;
          *(_QWORD *)(a2 + 128) = v50;
          *(_QWORD *)(a2 + 136) = &v59[8 * v58];
          if (v54)
            operator delete(v54);
          a13 = v204;
          a12 = v207;
        }
        else
        {
          *(_QWORD *)v49 = v23;
          v50 = v49 + 8;
        }
        *(_QWORD *)(a2 + 128) = v50;
        v111 = *(float32x4_t *)(a2 + 176);
        v112 = *(float32x4_t *)(a2 + 192);
        v111.i32[3] = 0;
        v113 = a12;
        v113.i32[3] = 0;
        v114 = vminnmq_f32(v111, v113);
        v112.i32[3] = 0;
        v115 = a13;
        v115.i32[3] = 0;
        a7 = (__n128)vmaxnmq_f32(v112, v115);
        *(float32x4_t *)(a2 + 176) = v114;
        *(__n128 *)(a2 + 192) = a7;
        goto LABEL_137;
      }
      if (v33 >= v31)
      {
        v52 = *(char **)(a2 + 152);
        v51 = *(_QWORD *)(a2 + 160);
        if ((unint64_t)v52 >= v51)
        {
          v70 = *(char **)(a2 + 144);
          v71 = (v52 - v70) >> 3;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 61)
            goto LABEL_139;
          v205 = a13;
          v208 = a12;
          v73 = v51 - (_QWORD)v70;
          if (v73 >> 2 > v72)
            v72 = v73 >> 2;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v72;
          if (v74)
          {
            v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v194, v74);
            v70 = *(char **)(a2 + 144);
            v52 = *(char **)(a2 + 152);
            v23 = *v15;
          }
          else
          {
            v75 = 0;
          }
          v148 = &v75[8 * v71];
          *(_QWORD *)v148 = v23;
          v53 = v148 + 8;
          while (v52 != v70)
          {
            v149 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *((_QWORD *)v148 - 1) = v149;
            v148 -= 8;
          }
          *(_QWORD *)(a2 + 144) = v148;
          *(_QWORD *)(a2 + 152) = v53;
          *(_QWORD *)(a2 + 160) = &v75[8 * v74];
          if (v70)
            operator delete(v70);
          a13 = v205;
          a12 = v208;
        }
        else
        {
          *(_QWORD *)v52 = v23;
          v53 = v52 + 8;
        }
        *(_QWORD *)(a2 + 152) = v53;
        v150 = *(float32x4_t *)(a2 + 208);
        v151 = *(float32x4_t *)(a2 + 224);
        v150.i32[3] = 0;
        v152 = a12;
        v152.i32[3] = 0;
        v153 = vminnmq_f32(v150, v152);
        v151.i32[3] = 0;
        v154 = a13;
        v154.i32[3] = 0;
        a7 = (__n128)vmaxnmq_f32(v151, v154);
        *(float32x4_t *)(a2 + 208) = v153;
        *(__n128 *)(a2 + 224) = a7;
        goto LABEL_137;
      }
      v34 = v26;
      v34.i32[0] = v27.i32[0];
      v215[0] = v26;
      v215[1] = v34;
      v35 = v27;
      v35.i32[2] = v26.i32[2];
      v36 = v26;
      v36.i32[1] = v27.i32[1];
      v215[2] = v35;
      v215[3] = v36;
      v37 = v26;
      v37.i32[2] = v27.i32[2];
      v38 = v27;
      v38.i32[1] = v26.i32[1];
      v215[4] = v37;
      v215[5] = v38;
      v215[6] = v27;
      v27.i32[0] = v26.i32[0];
      v215[7] = v27;
      v214[5] = unk_2289C3420;
      v214[6] = xmmword_2289C3430;
      v214[7] = unk_2289C3440;
      v214[8] = xmmword_2289C3450;
      v214[2] = xmmword_2289C33F0;
      v214[3] = unk_2289C3400;
      v214[4] = xmmword_2289C3410;
      v214[0] = xmmword_2289C33D0;
      v214[1] = unk_2289C33E0;
      v39 = *(_QWORD *)(v18 + 48);
      do
        v40 = __ldaxr((unsigned int *)v39);
      while (__stlxr(v40 + 1, (unsigned int *)v39));
      v42 = v39 + 8;
      v41 = *(_QWORD *)(v39 + 8);
      v203 = a13;
      v206 = a12;
      if (v40 >= (unint64_t)((*(_QWORD *)(v42 + 8) - v41) >> 4))
      {
        v44 = (char *)operator new(0x80uLL);
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)v44 + 2) = 0;
        *(_QWORD *)v44 = &off_24F149F90;
        *((int32x2_t *)v44 + 4) = vdup_n_s32(0x7FC00000u);
        v45 = v44 + 32;
        *((_QWORD *)v44 + 5) = 0;
        *(_QWORD *)&v60 = 0x7F0000007FLL;
        *((_QWORD *)&v60 + 1) = 0x7F0000007FLL;
        *((int32x4_t *)v44 + 3) = vdupq_n_s32(0x7F800000u);
        *((_OWORD *)v44 + 4) = v60;
        LOBYTE(v60) = 0;
        BYTE4(v60) = 0;
        BYTE8(v60) = 0;
        BYTE12(v60) = 0;
        *((_OWORD *)v44 + 5) = v60;
        *((_OWORD *)v44 + 6) = v60;
        *((_OWORD *)v44 + 7) = v60;
      }
      else
      {
        v43 = (char **)(v41 + 16 * v40);
        v45 = *v43;
        v44 = v43[1];
        if (v44)
        {
          v46 = (unint64_t *)(v44 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
      }
      v61 = *(_QWORD *)(v18 + 48);
      do
        v62 = __ldaxr((unsigned int *)v61);
      while (__stlxr(v62 + 1, (unsigned int *)v61));
      v64 = v61 + 8;
      v63 = *(_QWORD *)(v61 + 8);
      if (v62 >= (unint64_t)((*(_QWORD *)(v64 + 8) - v63) >> 4))
      {
        v66 = (char *)operator new(0x80uLL);
        *((_QWORD *)v66 + 1) = 0;
        *((_QWORD *)v66 + 2) = 0;
        *(_QWORD *)v66 = &off_24F149F90;
        *((int32x2_t *)v66 + 4) = vdup_n_s32(0x7FC00000u);
        v67 = v66 + 32;
        *((_QWORD *)v66 + 5) = 0;
        *(_QWORD *)&v76 = 0x7F0000007FLL;
        *((_QWORD *)&v76 + 1) = 0x7F0000007FLL;
        *((int32x4_t *)v66 + 3) = vdupq_n_s32(0x7F800000u);
        *((_OWORD *)v66 + 4) = v76;
        LOBYTE(v76) = 0;
        BYTE4(v76) = 0;
        BYTE8(v76) = 0;
        BYTE12(v76) = 0;
        *((_OWORD *)v66 + 5) = v76;
        *((_OWORD *)v66 + 6) = v76;
        *((_OWORD *)v66 + 7) = v76;
      }
      else
      {
        v65 = (char **)(v63 + 16 * v62);
        v67 = *v65;
        v66 = v65[1];
        if (v66)
        {
          v68 = (unint64_t *)(v66 + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
      }
      v210 = (_OWORD *)v215;
      v211.i64[0] = 8;
      v209[0] = (uint64_t)v214;
      v209[1] = 36;
      geom::split_triangle_mesh_with_plane<float>(&v210, v209, a3, (char **)v45 + 6, (uint64_t *)v45 + 9, (char **)v67 + 6, (uint64_t *)v67 + 9, v199, (std::vector<unsigned int> *)a2, v198);
      v77 = *((_QWORD *)v45 + 6);
      v78 = *((_QWORD *)v45 + 7) - v77;
      if (!v78)
        break;
      if (*((_QWORD *)v67 + 7) != *((_QWORD *)v67 + 6))
      {
        geom::close_triangle_mesh<float>((float32x4_t **)v45 + 6, (_QWORD *)v45 + 9);
        geom::close_triangle_mesh<float>((float32x4_t **)v67 + 6, (_QWORD *)v67 + 9);
        v79 = (float32x4_t *)*((_QWORD *)v45 + 6);
        v80.i64[0] = 0x7F0000007FLL;
        v80.i64[1] = 0x7F0000007FLL;
        v81 = (float32x4_t)v201;
        v82.i64[0] = 0x7F0000007FLL;
        v82.i64[1] = 0x7F0000007FLL;
        v83 = *((_QWORD *)v45 + 7) - (_QWORD)v79;
        if (v83)
        {
          v84 = 16 * (v83 >> 4);
          v81 = (float32x4_t)v201;
          do
          {
            v85 = *v79++;
            v86 = v85;
            v86.i32[3] = 0;
            v81.i32[3] = 0;
            v81 = vminnmq_f32(v86, v81);
            v82.i32[3] = 0;
            v82 = vmaxnmq_f32(v86, v82);
            v84 -= 16;
          }
          while (v84);
        }
        *((float32x4_t *)v45 + 1) = v81;
        *((float32x4_t *)v45 + 2) = v82;
        v87 = (float32x4_t *)*((_QWORD *)v67 + 6);
        v88 = (float32x4_t)v201;
        v89 = *((_QWORD *)v67 + 7) - (_QWORD)v87;
        if (v89)
        {
          v90 = 16 * (v89 >> 4);
          v80.i64[0] = 0x7F0000007FLL;
          v80.i32[2] = 127;
          v88 = (float32x4_t)v201;
          do
          {
            v91 = *v87++;
            v92 = v91;
            v92.i32[3] = 0;
            v88.i32[3] = 0;
            v88 = vminnmq_f32(v92, v88);
            v80.i32[3] = 0;
            v80 = vmaxnmq_f32(v92, v80);
            v90 -= 16;
          }
          while (v90);
        }
        *((float32x4_t *)v67 + 1) = v88;
        *((float32x4_t *)v67 + 2) = v80;
        *(float *)v45 = geom::triangle_mesh_volume_3<float>(*((_QWORD *)v45 + 6), (uint64_t)(*((_QWORD *)v45 + 7) - *((_QWORD *)v45 + 6)) >> 4, *((_QWORD *)v45 + 9), (uint64_t)(*((_QWORD *)v45 + 10) - *((_QWORD *)v45 + 9)) >> 2);
        *(float *)v67 = geom::triangle_mesh_volume_3<float>(*((_QWORD *)v67 + 6), (uint64_t)(*((_QWORD *)v67 + 7) - *((_QWORD *)v67 + 6)) >> 4, *((_QWORD *)v67 + 9), (uint64_t)(*((_QWORD *)v67 + 10) - *((_QWORD *)v67 + 9)) >> 2);
        *((float *)v45 + 1) = geom::triangle_mesh_surface_area_3<float>(*((_QWORD *)v45 + 6), (uint64_t)(*((_QWORD *)v45 + 7) - *((_QWORD *)v45 + 6)) >> 4, *((_QWORD *)v45 + 9), (uint64_t)(*((_QWORD *)v45 + 10) - *((_QWORD *)v45 + 9)) >> 2);
        *((float *)v67 + 1) = geom::triangle_mesh_surface_area_3<float>(*((_QWORD *)v67 + 6), (uint64_t)(*((_QWORD *)v67 + 7) - *((_QWORD *)v67 + 6)) >> 4, *((_QWORD *)v67 + 9), (uint64_t)(*((_QWORD *)v67 + 10) - *((_QWORD *)v67 + 9)) >> 2);
        v93 = *((float32x4_t *)v45 + 1);
        v94 = *(float32x4_t *)(a2 + 176);
        v95 = *(float32x4_t *)(a2 + 192);
        v94.i32[3] = 0;
        v93.i32[3] = 0;
        *(float32x4_t *)(a2 + 176) = vminnmq_f32(v94, v93);
        v96 = *((float32x4_t *)v45 + 2);
        v95.i32[3] = 0;
        v96.i32[3] = 0;
        *(float32x4_t *)(a2 + 192) = vmaxnmq_f32(v95, v96);
        v97 = *((float32x4_t *)v67 + 1);
        a7 = *(__n128 *)(a2 + 208);
        v98 = *(float32x4_t *)(a2 + 224);
        a7.n128_u32[3] = 0;
        v97.i32[3] = 0;
        *(float32x4_t *)(a2 + 208) = vminnmq_f32((float32x4_t)a7, v97);
        v99 = *((float32x4_t *)v67 + 2);
        v98.i32[3] = 0;
        v99.i32[3] = 0;
        *(float32x4_t *)(a2 + 224) = vmaxnmq_f32(v98, v99);
        v101 = *(_QWORD **)(a2 + 80);
        v100 = *(_QWORD *)(a2 + 88);
        v18 = a1;
        if ((unint64_t)v101 >= v100)
        {
          v122 = *(_QWORD *)(a2 + 72);
          v123 = ((uint64_t)v101 - v122) >> 4;
          v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 60)
            goto LABEL_139;
          v125 = v100 - v122;
          if (v125 >> 3 > v124)
            v124 = v125 >> 3;
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0)
            v126 = 0xFFFFFFFFFFFFFFFLL;
          else
            v126 = v124;
          v213 = v193;
          v127 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v193, v126);
          v129 = &v127[16 * v123];
          *(_QWORD *)v129 = v45;
          *((_QWORD *)v129 + 1) = v44;
          v131 = *(_QWORD **)(a2 + 72);
          v130 = *(_QWORD **)(a2 + 80);
          if (v130 == v131)
          {
            v134 = vdupq_n_s64((unint64_t)v130);
            v132 = &v127[16 * v123];
          }
          else
          {
            v132 = &v127[16 * v123];
            do
            {
              v133 = *((_OWORD *)v130 - 1);
              v130 -= 2;
              *((_OWORD *)v132 - 1) = v133;
              v132 -= 16;
              *v130 = 0;
              v130[1] = 0;
            }
            while (v130 != v131);
            v134 = *(int64x2_t *)(a2 + 72);
          }
          v102 = v129 + 16;
          *(_QWORD *)(a2 + 72) = v132;
          *(_QWORD *)(a2 + 80) = v129 + 16;
          v211 = v134;
          v168 = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a2 + 88) = &v127[16 * v128];
          v212 = v168;
          v210 = (_OWORD *)v134.i64[0];
          std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v210);
        }
        else
        {
          *v101 = v45;
          v101[1] = v44;
          v102 = v101 + 2;
        }
        a13.i32[3] = v203.i32[3];
        a12.i32[3] = v206.i32[3];
        *(_QWORD *)(a2 + 80) = v102;
        v170 = *(_QWORD **)(a2 + 104);
        v169 = *(_QWORD *)(a2 + 112);
        if ((unint64_t)v170 >= v169)
        {
          v172 = *(_QWORD *)(a2 + 96);
          v173 = ((uint64_t)v170 - v172) >> 4;
          v174 = v173 + 1;
          if ((unint64_t)(v173 + 1) >> 60)
LABEL_139:
            abort();
          v175 = v169 - v172;
          if (v175 >> 3 > v174)
            v174 = v175 >> 3;
          if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFF0)
            v176 = 0xFFFFFFFFFFFFFFFLL;
          else
            v176 = v174;
          v213 = v195;
          v177 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v195, v176);
          v179 = &v177[16 * v173];
          *(_QWORD *)v179 = v67;
          *((_QWORD *)v179 + 1) = v66;
          v181 = *(_QWORD **)(a2 + 96);
          v180 = *(_QWORD **)(a2 + 104);
          if (v180 == v181)
          {
            v184 = vdupq_n_s64((unint64_t)v180);
            v182 = &v177[16 * v173];
            v19 = v197;
          }
          else
          {
            v182 = &v177[16 * v173];
            v19 = v197;
            do
            {
              v183 = *((_OWORD *)v180 - 1);
              v180 -= 2;
              *((_OWORD *)v182 - 1) = v183;
              v182 -= 16;
              *v180 = 0;
              v180[1] = 0;
            }
            while (v180 != v181);
            v184 = *(int64x2_t *)(a2 + 96);
          }
          v171 = v179 + 16;
          *(_QWORD *)(a2 + 96) = v182;
          *(_QWORD *)(a2 + 104) = v179 + 16;
          v211 = v184;
          v185 = *(_QWORD *)(a2 + 112);
          *(_QWORD *)(a2 + 112) = &v177[16 * v178];
          v212 = v185;
          v210 = (_OWORD *)v184.i64[0];
          std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v210);
          a13.i32[3] = v203.i32[3];
          a12.i32[3] = v206.i32[3];
        }
        else
        {
          *v170 = v67;
          v170[1] = v66;
          v171 = v170 + 2;
          v19 = v197;
        }
        *(_QWORD *)(a2 + 104) = v171;
        goto LABEL_136;
      }
      v18 = a1;
      *(float *)v45 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 24)
                    * (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 16)
                            * *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 20));
      *((float *)v45 + 1) = geom::triangle_mesh_surface_area_3<float>(v77, v78 >> 4, *((_QWORD *)v45 + 9), (uint64_t)(*((_QWORD *)v45 + 10) - *((_QWORD *)v45 + 9)) >> 2);
      a13.i32[3] = v203.i32[3];
      a12.i32[3] = v206.i32[3];
      *((float32x4_t *)v45 + 1) = v206;
      *((float32x4_t *)v45 + 2) = v203;
      v116 = *(float32x4_t *)(a2 + 176);
      a7 = *(__n128 *)(a2 + 192);
      v116.i32[3] = 0;
      v117 = v206;
      v117.i32[3] = 0;
      *(float32x4_t *)(a2 + 176) = vminnmq_f32(v116, v117);
      v118 = *((float32x4_t *)v45 + 2);
      a7.n128_u32[3] = 0;
      v118.i32[3] = 0;
      *(float32x4_t *)(a2 + 192) = vmaxnmq_f32((float32x4_t)a7, v118);
      v120 = *(_QWORD **)(a2 + 80);
      v119 = *(_QWORD *)(a2 + 88);
      if ((unint64_t)v120 >= v119)
      {
        v155 = *(_QWORD *)(a2 + 72);
        v156 = ((uint64_t)v120 - v155) >> 4;
        v157 = v156 + 1;
        v19 = v197;
        if ((unint64_t)(v156 + 1) >> 60)
          goto LABEL_139;
        v158 = v119 - v155;
        if (v158 >> 3 > v157)
          v157 = v158 >> 3;
        if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF0)
          v159 = 0xFFFFFFFFFFFFFFFLL;
        else
          v159 = v157;
        v213 = v193;
        v160 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v193, v159);
        v162 = &v160[16 * v156];
        *(_QWORD *)v162 = v45;
        *((_QWORD *)v162 + 1) = v44;
        v164 = *(_QWORD **)(a2 + 72);
        v163 = *(_QWORD **)(a2 + 80);
        if (v163 == v164)
        {
          v167 = vdupq_n_s64((unint64_t)v163);
          v165 = &v160[16 * v156];
        }
        else
        {
          v165 = &v160[16 * v156];
          do
          {
            v166 = *((_OWORD *)v163 - 1);
            v163 -= 2;
            *((_OWORD *)v165 - 1) = v166;
            v165 -= 16;
            *v163 = 0;
            v163[1] = 0;
          }
          while (v163 != v164);
          v167 = *(int64x2_t *)(a2 + 72);
        }
        v121 = v162 + 16;
        *(_QWORD *)(a2 + 72) = v165;
        *(_QWORD *)(a2 + 80) = v162 + 16;
        v211 = v167;
        v190 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a2 + 88) = &v160[16 * v161];
        v212 = v190;
        v210 = (_OWORD *)v167.i64[0];
        std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v210);
        a13.i32[3] = v203.i32[3];
        a12.i32[3] = v206.i32[3];
      }
      else
      {
        *v120 = v45;
        v120[1] = v44;
        v121 = v120 + 2;
        v19 = v197;
      }
      *(_QWORD *)(a2 + 80) = v121;
      if (v66)
      {
        v191 = (unint64_t *)(v66 + 8);
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          (*(void (**)(char *))(*(_QWORD *)v66 + 16))(v66);
          v189 = (std::__shared_weak_count *)v66;
LABEL_135:
          std::__shared_weak_count::__release_weak(v189);
          a13.i32[3] = v203.i32[3];
          a12.i32[3] = v206.i32[3];
        }
      }
LABEL_136:
      v16 = a3;
LABEL_137:
      if (++v15 == v19)
        return;
    }
    v18 = a1;
    *(float *)v67 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 24)
                  * (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 16)
                          * *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) + 20));
    *((float *)v67 + 1) = geom::triangle_mesh_surface_area_3<float>(*((_QWORD *)v67 + 6), (uint64_t)(*((_QWORD *)v67 + 7) - *((_QWORD *)v67 + 6)) >> 4, *((_QWORD *)v67 + 9), (uint64_t)(*((_QWORD *)v67 + 10) - *((_QWORD *)v67 + 9)) >> 2);
    a13.i32[3] = v203.i32[3];
    a12.i32[3] = v206.i32[3];
    *((float32x4_t *)v67 + 1) = v206;
    *((float32x4_t *)v67 + 2) = v203;
    v103 = *(float32x4_t *)(a2 + 208);
    a7 = *(__n128 *)(a2 + 224);
    v103.i32[3] = 0;
    v104 = v206;
    v104.i32[3] = 0;
    *(float32x4_t *)(a2 + 208) = vminnmq_f32(v103, v104);
    v105 = *((float32x4_t *)v67 + 2);
    a7.n128_u32[3] = 0;
    v105.i32[3] = 0;
    *(float32x4_t *)(a2 + 224) = vmaxnmq_f32((float32x4_t)a7, v105);
    v107 = *(_QWORD **)(a2 + 104);
    v106 = *(_QWORD *)(a2 + 112);
    if ((unint64_t)v107 >= v106)
    {
      v135 = *(_QWORD *)(a2 + 96);
      v136 = ((uint64_t)v107 - v135) >> 4;
      v137 = v136 + 1;
      if ((unint64_t)(v136 + 1) >> 60)
        goto LABEL_139;
      v138 = v106 - v135;
      if (v138 >> 3 > v137)
        v137 = v138 >> 3;
      if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
        v139 = 0xFFFFFFFFFFFFFFFLL;
      else
        v139 = v137;
      v213 = v195;
      v140 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v195, v139);
      v142 = &v140[16 * v136];
      *(_QWORD *)v142 = v67;
      *((_QWORD *)v142 + 1) = v66;
      v144 = *(_QWORD **)(a2 + 96);
      v143 = *(_QWORD **)(a2 + 104);
      if (v143 == v144)
      {
        v147 = vdupq_n_s64((unint64_t)v143);
        v145 = &v140[16 * v136];
        v19 = v197;
      }
      else
      {
        v145 = &v140[16 * v136];
        v19 = v197;
        do
        {
          v146 = *((_OWORD *)v143 - 1);
          v143 -= 2;
          *((_OWORD *)v145 - 1) = v146;
          v145 -= 16;
          *v143 = 0;
          v143[1] = 0;
        }
        while (v143 != v144);
        v147 = *(int64x2_t *)(a2 + 96);
      }
      v108 = v142 + 16;
      *(_QWORD *)(a2 + 96) = v145;
      *(_QWORD *)(a2 + 104) = v142 + 16;
      v211 = v147;
      v186 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = &v140[16 * v141];
      v212 = v186;
      v210 = (_OWORD *)v147.i64[0];
      std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v210);
      a13.i32[3] = v203.i32[3];
      a12.i32[3] = v206.i32[3];
    }
    else
    {
      *v107 = v67;
      v107[1] = v66;
      v108 = v107 + 2;
      v19 = v197;
    }
    *(_QWORD *)(a2 + 104) = v108;
    if (!v44)
      goto LABEL_136;
    v187 = (unint64_t *)(v44 + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (v188)
      goto LABEL_136;
    (*(void (**)(char *))(*(_QWORD *)v44 + 16))(v44);
    v189 = (std::__shared_weak_count *)v44;
    goto LABEL_135;
  }
}

uint64_t *geom::cluster_parallel_clipper<double>::init(uint64_t *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result[3] = a4;
  result[4] = a5;
  result[5] = (uint64_t)a2;
  result[6] = a3;
  v10 = a2[22] - a2[21];
  v11 = (unint64_t)((v10 >> 4) * a5) >> 11;
  if (v11 <= 0x20)
    v11 = 32;
  v12 = a2[19] - a2[18];
  v13 = (unint64_t)((v12 >> 3) * a5) >> 10;
  if (v13 <= 0x40)
    v13 = 64;
  result[7] = v11;
  result[8] = v13;
  v14 = ((v13 + (v12 >> 3) - 1) / v13 + (v11 + (v10 >> 4) - 1) / v11) * a5;
  if (0x86BCA1AF286BCA1BLL * ((result[1] - *result) >> 4) < v14)
    return (uint64_t *)std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::resize(result, v14, a6, a7, a8, a9, a10);
  return result;
}

unint64_t geom::cluster_parallel_clipper<double>::work_item_count_per_plane(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)a1[5];
  return (unint64_t)(a1[8] + ((uint64_t)(v1[19] - v1[18]) >> 3) - 1) / a1[8]
       + (unint64_t)(a1[7] + ((uint64_t)(v1[22] - v1[21]) >> 4) - 1) / a1[7];
}

uint64_t std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::resize(uint64_t *a1, unint64_t a2, double a3, double a4, double a5, __n128 a6, __n128 a7)
{
  uint64_t result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;

  result = a1[1];
  v9 = 0x86BCA1AF286BCA1BLL * ((result - *a1) >> 4);
  v10 = a2 >= v9;
  v11 = a2 - v9;
  if (v11 != 0 && v10)
    return std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::__append(a1, v11, a3, a4, a5, a6, a7);
  if (!v10)
  {
    v12 = *a1 + 304 * a2;
    while (result != v12)
      result = geom::cluster_parallel_clipper<float>::clipping_context::~clipping_context(result - 304);
    a1[1] = v12;
  }
  return result;
}

void geom::cluster_parallel_clipper<double>::compute_clipped_clusters(_QWORD *a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD block[5];

  v1 = (_QWORD *)a1[5];
  v2 = ((unint64_t)(a1[8] + ((uint64_t)(v1[19] - v1[18]) >> 3) - 1) / a1[8]
      + (unint64_t)(a1[7] + ((uint64_t)(v1[22] - v1[21]) >> 4) - 1) / a1[7])
     * a1[4];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIdE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_1;
  block[3] = &__block_descriptor_tmp_2_2;
  block[4] = a1;
  dispatch_apply(v2, 0, block);
}

void geom::cluster_parallel_clipper<double>::get_split_clusters(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  float64x2_t v15;
  float64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v43;
  _QWORD *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64_t v47;
  float64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  __int128 v53[4];
  __int128 v54[4];
  std::vector<unsigned int> v55;
  std::vector<unsigned int> __c;
  void **v57[3];
  char *v58[4];

  v4 = a1;
  v5 = (_QWORD *)a1[5];
  v6 = (unint64_t)(a1[8] + ((uint64_t)(v5[19] - v5[18]) >> 3) - 1) / a1[8]
     + (unint64_t)(a1[7] + ((uint64_t)(v5[22] - v5[21]) >> 4) - 1) / a1[7];
  v7 = v6 * a4;
  v8 = v6 * a4 + v6;
  if (v6 * a4 >= v8)
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = v6 * a4;
    do
    {
      v14 = (_QWORD *)(*a1 + 304 * v13);
      v9 += (uint64_t)(v14[10] - v14[9]) >> 4;
      v10 += (uint64_t)(v14[13] - v14[12]) >> 4;
      v11 += (uint64_t)(v14[16] - v14[15]) >> 3;
      v12 += (uint64_t)(v14[19] - v14[18]) >> 3;
      ++v13;
    }
    while (v13 != v8);
  }
  memset(v58, 0, 24);
  memset(v57, 0, sizeof(v57));
  memset(&__c, 0, sizeof(__c));
  memset(&v55, 0, sizeof(v55));
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve(v58, v9);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve((char **)v57, v10);
  std::vector<unsigned long long>::reserve((void **)&__c.__begin_, v11);
  std::vector<unsigned long long>::reserve((void **)&v55.__begin_, v12);
  if (v7 >= v8)
  {
    v15.f64[0] = INFINITY;
    v16.f64[0] = -INFINITY;
    v17 = vdupq_n_s64(0x7FF0000000000000uLL);
    v18 = vdupq_n_s64(0xFFF0000000000000);
    v51 = (float64x2_t)v18;
    v52 = v16;
    v49 = (float64x2_t)v17;
    v50 = v15;
  }
  else
  {
    v49 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v50.f64[0] = INFINITY;
    v17 = (int64x2_t)v49;
    v15.f64[0] = INFINITY;
    v51 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v52.f64[0] = -INFINITY;
    v18 = (int64x2_t)v51;
    v16.f64[0] = -INFINITY;
    v43 = v8;
    v44 = v4;
    do
    {
      v45 = (float64x2_t)v18;
      v46 = (float64x2_t)v17;
      v47 = v16.f64[0];
      v48 = v15.f64[0];
      v19 = *v4;
      v20 = *v4 + 304 * v7;
      v21 = (_QWORD *)(v20 + 80);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>,0>(*(_QWORD *)(v20 + 72), *(_QWORD *)(v20 + 80), v58);
      v22 = (uint64_t *)(v20 + 96);
      v23 = (uint64_t *)(v20 + 104);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>,0>(*(_QWORD *)(v20 + 96), *(_QWORD *)(v20 + 104), (char **)v57);
      v24 = (_QWORD *)(v20 + 120);
      v25 = (_QWORD *)(v20 + 128);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>(*(_QWORD **)(v20 + 120), *(_QWORD **)(v20 + 128), (uint64_t)&__c);
      v26 = (_QWORD *)(v20 + 152);
      v27 = (_QWORD *)(v20 + 144);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>(*(_QWORD **)(v20 + 144), *(_QWORD **)(v20 + 152), (uint64_t)&v55);
      v28 = *(_QWORD *)(v20 + 80);
      v29 = *(_QWORD *)(v20 + 72);
      while (v28 != v29)
        v28 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v28 - 16);
      *v21 = v29;
      v30 = *v23;
      v31 = *v22;
      while (v30 != v31)
        v30 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v30 - 16);
      *v23 = v31;
      *v25 = *v24;
      *v26 = *v27;
      v32 = v19 + 304 * v7;
      v17 = (int64x2_t)vminnmq_f64(v46, *(float64x2_t *)(v32 + 176));
      v15 = vminnmq_f64((float64x2_t)*(unint64_t *)&v48, (float64x2_t)*(unint64_t *)(v32 + 192));
      v18 = (int64x2_t)vmaxnmq_f64(v45, *(float64x2_t *)(v32 + 208));
      v16 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v47, (float64x2_t)*(unint64_t *)(v32 + 224));
      v49 = vminnmq_f64(v49, *(float64x2_t *)(v32 + 240));
      v50 = vminnmq_f64((float64x2_t)*(unint64_t *)&v50.f64[0], (float64x2_t)*(unint64_t *)(v32 + 256));
      v51 = vmaxnmq_f64(v51, *(float64x2_t *)(v32 + 272));
      v52 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v52.f64[0], (float64x2_t)*(unint64_t *)(v32 + 288));
      ++v7;
      v4 = v44;
    }
    while (v7 != v43);
  }
  v34 = v4[5];
  v33 = v4[6];
  v35 = *(_QWORD *)(v34 + 128);
  v36 = *(_QWORD *)(v34 + 136);
  v54[0] = (__int128)v17;
  v54[1] = (__int128)v15;
  v54[2] = (__int128)v18;
  v54[3] = (__int128)v16;
  geom::cluster<double>::init(a2, v35, v36, v33, (__n128 *)&__c, (uint64_t)v58, v54, *(_DWORD *)(v34 + 112), *(double *)(v34 + 120));
  v38 = v4[5];
  v37 = v4[6];
  v39 = *(_QWORD *)(v38 + 128);
  v40 = *(_QWORD *)(v38 + 136);
  v53[0] = (__int128)v49;
  v53[1] = (__int128)v50;
  v53[2] = (__int128)v51;
  v53[3] = (__int128)v52;
  geom::cluster<double>::init(a3, v39, v40, v37, (__n128 *)&v55, (uint64_t)v57, v53, *(_DWORD *)(v38 + 112), *(double *)(v38 + 120));
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  if (__c.__begin_)
  {
    __c.__end_ = __c.__begin_;
    operator delete(__c.__begin_);
  }
  __c.__begin_ = (std::vector<unsigned int>::pointer)v57;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__c);
  v57[0] = (void **)v58;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](v57);
}

uint64_t geom::cluster_parallel_clipper<double>::deinit(int64x2_t **a1)
{
  int64x2_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t v26;

  v2 = a1[6];
  v4 = v2->i64[1];
  result = v2[1].i64[0];
  if (result != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(v4 + 16 * v5);
      v8 = v7 + 1;
      v9 = v7[1];
      if (v9 && !*(_QWORD *)(v9 + 8))
      {
        ++v6;
      }
      else
      {
        v10 = *v7;
        *v7 = *(_QWORD *)(result - 16);
        *(_QWORD *)(result - 16) = v10;
        v11 = *v8;
        *v8 = *(_QWORD *)(result - 8);
        *(_QWORD *)(result - 8) = v11;
        result = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v2[1].i64[0] - 16);
        v2[1].i64[0] = result;
        v4 = v2->i64[1];
      }
      v5 = v6;
    }
    while (v6 < (unint64_t)((result - v4) >> 4));
  }
  atomic_store(0, (unsigned int *)v2);
  v12 = *a1;
  v13 = a1[1];
  if (*a1 != v13)
  {
    v14 = vdupq_n_s64(0x7FF0000000000000uLL);
    v15 = vdupq_n_s64(0xFFF0000000000000);
    v25 = v15;
    v26 = v14;
    do
    {
      v12->i64[1] = v12->i64[0];
      v12[2].i64[0] = v12[1].i64[1];
      v12[3].i64[1] = v12[3].i64[0];
      v16 = v12[4].i64[1];
      v17 = v12[5].i64[0];
      while (v16 != v17)
      {
        v18 = *(_QWORD *)(v16 + 8);
        if (v18)
        {
          if (!*(_QWORD *)(v18 + 8))
            geom::convex_mesh_cache<double>::move_unused_data(a1[6], v16);
        }
        v16 += 16;
      }
      v19 = v12[6].i64[0];
      v20 = v12[6].i64[1];
      while (v19 != v20)
      {
        v21 = *(_QWORD *)(v19 + 8);
        if (v21 && !*(_QWORD *)(v21 + 8))
          geom::convex_mesh_cache<double>::move_unused_data(a1[6], v19);
        v19 += 16;
      }
      v23 = v12[4].i64[1];
      for (i = v12[5].i64[0]; i != v23; i = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](i - 16))
        ;
      v12[5].i64[0] = v23;
      v24 = v12[6].i64[0];
      for (result = v12[6].i64[1];
            result != v24;
      v12[6].i64[1] = v24;
      v12[8].i64[0] = v12[7].i64[1];
      v12[9].i64[1] = v12[9].i64[0];
      v15.i64[0] = 0x7FF0000000000000;
      v12[11] = v26;
      v12[12] = v15;
      v14.i64[0] = 0xFFF0000000000000;
      v12[13] = v25;
      v12[14] = v14;
      v12[15] = v26;
      v12[16] = v15;
      v12[17] = v25;
      v12[18] = v14;
      v12 += 19;
    }
    while (v12 != v13);
  }
  a1[5] = 0;
  a1[6] = 0;
  return result;
}

unint64_t geom::cluster_parallel_clipper<double>::boundary_component_work_item_count_per_plane(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 56)
                          + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 176)
                                     - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168)) >> 4)
                          - 1)
       / *(_QWORD *)(a1 + 56);
}

unint64_t geom::cluster_parallel_clipper<double>::interior_component_work_item_count_per_plane(uint64_t a1)
{
  return (unint64_t)(*(_QWORD *)(a1 + 64)
                          + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)
                                     - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144)) >> 3)
                          - 1)
       / *(_QWORD *)(a1 + 64);
}

void geom::cluster_parallel_clipper<double>::boundary_component_work_item(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t **a4, uint64_t a5)
{
  double v5;
  double v6;
  float64x2_t **v7;
  float64x2_t *v8;
  uint64_t v10;
  float64x2_t **v11;
  char **v12;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  double v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  uint64_t *p_shared_owners;
  unint64_t *v35;
  unint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  __int128 v43;
  int64x2_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  std::__shared_weak_count *v50;
  uint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  int64x2_t v55;
  float64x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t *v62;
  uint64_t v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t *v72;
  float64x2_t v73;
  float64x2_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  float64x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  unint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  _QWORD *v101;
  char *v102;
  __int128 v103;
  int64x2_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  _QWORD *v117;
  char *v118;
  __int128 v119;
  int64x2_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64x2_t v124;
  int64x2_t v125;
  float64x2_t **v126;
  std::vector<unsigned int> *v128;
  unint64_t *v129;
  char **v130;
  char **v131;
  uint64_t v132;
  int64x2_t v133;
  float64x2_t v135;
  uint64_t v136[2];
  uint64_t v137;
  int64x2_t v138;
  uint64_t v139;
  uint64_t v140;

  v5 = fmax(fmax(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 16), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 32)), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 24));
  if (v5 <= 1.0)
    v6 = 2.22044605e-16;
  else
    v6 = v5 * 2.22044605e-16;
  if (a5)
  {
    v7 = a4;
    v8 = a3;
    v10 = a1;
    v11 = &a4[2 * a5];
    v12 = (char **)(a2 + 72);
    v131 = (char **)(a2 + 96);
    v132 = a2 + 272;
    v128 = (std::vector<unsigned int> *)(a2 + 24);
    v129 = (unint64_t *)(a2 + 48);
    v122 = a2 + 112;
    v123 = a2 + 88;
    __asm { FMOV            V0.2D, #0.5 }
    v135 = _Q0;
    v124 = vdupq_n_s64(0x7FF0000000000000uLL);
    v125 = vdupq_n_s64(0xFFF0000000000000);
    v130 = (char **)(a2 + 72);
    v126 = v11;
    do
    {
      v18 = (*v7)[1];
      v19 = (*v7)[2];
      v20 = (*v7)[3];
      v21 = (*v7)[4];
      v22 = vmulq_f64(vaddq_f64(v18, v20), v135);
      v23 = vmulq_f64(vaddq_f64(v19, v21), v135);
      v24 = vsubq_f64(v20, v18);
      v25 = vsubq_f64(v21, v19);
      v26 = sqrt(vmulq_f64(v25, v25).f64[0] + vaddvq_f64(vmulq_f64(v24, v24))) * 0.5 - v6;
      v27 = v8[2].f64[0] + vmulq_f64(v8[1], v23).f64[0] + vaddvq_f64(vmulq_f64(*v8, v22));
      if (v27 <= -v26)
      {
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v12, (__int128 *)v7);
        v37 = *v7;
        v38 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 192), (float64x2_t)*(unint64_t *)&(*v7)[2].f64[0]);
        *(float64x2_t *)(a2 + 176) = vminnmq_f64(*(float64x2_t *)(a2 + 176), (*v7)[1]);
        *(float64x2_t *)(a2 + 192) = v38;
        v39 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(a2 + 224), (float64x2_t)*(unint64_t *)&v37[4].f64[0]);
        *(float64x2_t *)(a2 + 208) = vmaxnmq_f64(*(float64x2_t *)(a2 + 208), v37[3]);
        *(float64x2_t *)(a2 + 224) = v39;
      }
      else if (v27 >= v26)
      {
        std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v131, (__int128 *)v7);
        v40 = *v7;
        v41 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 256), (float64x2_t)*(unint64_t *)&(*v7)[2].f64[0]);
        *(float64x2_t *)(a2 + 240) = vminnmq_f64(*(float64x2_t *)(a2 + 240), (*v7)[1]);
        *(float64x2_t *)(a2 + 256) = v41;
        v42 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v132 + 16), (float64x2_t)*(unint64_t *)&v40[4].f64[0]);
        *(float64x2_t *)v132 = vmaxnmq_f64(*(float64x2_t *)v132, v40[3]);
        *(float64x2_t *)(v132 + 16) = v42;
      }
      else
      {
        v28 = *(_QWORD *)(v10 + 48);
        do
          v29 = __ldaxr((unsigned int *)v28);
        while (__stlxr(v29 + 1, (unsigned int *)v28));
        v31 = v28 + 8;
        v30 = *(_QWORD *)(v28 + 8);
        v133 = vdupq_n_s64(0x7FF8000000000000uLL);
        if (v29 >= (unint64_t)((*(_QWORD *)(v31 + 8) - v30) >> 4))
        {
          v33 = (std::__shared_weak_count *)operator new(0xA0uLL);
          v33->__shared_owners_ = 0;
          v33->__shared_weak_owners_ = 0;
          v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24F14A150;
          *(int64x2_t *)&v33[1].__shared_owners_ = v133;
          p_shared_owners = &v33[1].__shared_owners_;
          *(_QWORD *)&v43 = 0x7FF0000000000000;
          v44 = vdupq_n_s64(0x7FF0000000000000uLL);
          v33[2].std::__shared_count = (std::__shared_count)v44;
          *(_OWORD *)&v33[2].__shared_weak_owners_ = v43;
          v44.i64[0] = 0xFFF0000000000000;
          *(int64x2_t *)&v33[3].__shared_owners_ = vdupq_n_s64(0xFFF0000000000000);
          v33[4].std::__shared_count = (std::__shared_count)v44;
          *(_OWORD *)&v33[4].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v33[5].__shared_owners_ = 0u;
          v33[6].std::__shared_count = 0u;
        }
        else
        {
          v32 = (uint64_t **)(v30 + 16 * v29);
          p_shared_owners = *v32;
          v33 = (std::__shared_weak_count *)v32[1];
          if (v33)
          {
            v35 = (unint64_t *)&v33->__shared_owners_;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }
        }
        v45 = *(_QWORD *)(v10 + 48);
        do
          v46 = __ldaxr((unsigned int *)v45);
        while (__stlxr(v46 + 1, (unsigned int *)v45));
        v48 = v45 + 8;
        v47 = *(_QWORD *)(v45 + 8);
        if (v46 >= (unint64_t)((*(_QWORD *)(v48 + 8) - v47) >> 4))
        {
          v50 = (std::__shared_weak_count *)operator new(0xA0uLL);
          v50->__shared_owners_ = 0;
          v50->__shared_weak_owners_ = 0;
          v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24F14A150;
          *((_QWORD *)&v54 + 1) = v133.i64[1];
          *(int64x2_t *)&v50[1].__shared_owners_ = v133;
          v51 = &v50[1].__shared_owners_;
          *(_QWORD *)&v54 = 0x7FF0000000000000;
          v55 = vdupq_n_s64(0x7FF0000000000000uLL);
          v50[2].std::__shared_count = (std::__shared_count)v55;
          *(_OWORD *)&v50[2].__shared_weak_owners_ = v54;
          v55.i64[0] = 0xFFF0000000000000;
          *(int64x2_t *)&v50[3].__shared_owners_ = vdupq_n_s64(0xFFF0000000000000);
          v50[4].std::__shared_count = (std::__shared_count)v55;
          *(_OWORD *)&v50[4].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v50[5].__shared_owners_ = 0u;
          v50[6].std::__shared_count = 0u;
        }
        else
        {
          v49 = (uint64_t **)(v47 + 16 * v46);
          v51 = *v49;
          v50 = (std::__shared_weak_count *)v49[1];
          if (v50)
          {
            v52 = (unint64_t *)&v50->__shared_owners_;
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
        }
        v56 = *v7;
        v57 = (uint64_t)(*(_QWORD *)&(*v7)[5].f64[1] - *(_QWORD *)&(*v7)[5].f64[0]) >> 5;
        v137 = *(_QWORD *)&(*v7)[5].f64[0];
        v138.i64[0] = v57;
        v58 = *(_QWORD *)&v56[6].f64[1];
        v59 = (*(_QWORD *)&v56[7].f64[0] - v58) >> 2;
        v136[0] = v58;
        v136[1] = v59;
        geom::split_triangle_mesh_with_plane<double>(&v137, v136, a3, (char **)p_shared_owners + 10, p_shared_owners + 13, (char **)v51 + 10, v51 + 13, v129, (std::vector<unsigned int> *)a2, v128);
        if (p_shared_owners[11] == p_shared_owners[10])
        {
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v131, (__int128 *)v7);
          v69 = *v7;
          v70 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 256), (float64x2_t)*(unint64_t *)&(*v7)[2].f64[0]);
          *(float64x2_t *)(a2 + 240) = vminnmq_f64(*(float64x2_t *)(a2 + 240), (*v7)[1]);
          *(float64x2_t *)(a2 + 256) = v70;
          v71 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v132 + 16), (float64x2_t)*(unint64_t *)&v69[4].f64[0]);
          *(float64x2_t *)v132 = vmaxnmq_f64(*(float64x2_t *)v132, v69[3]);
          *(float64x2_t *)(v132 + 16) = v71;
        }
        else if (v51[11] != v51[10])
        {
          geom::close_triangle_mesh<double>((int8x16_t **)p_shared_owners + 10, p_shared_owners + 13);
          geom::close_triangle_mesh<double>((int8x16_t **)v51 + 10, v51 + 13);
          v62 = (float64x2_t *)p_shared_owners[10];
          v63 = p_shared_owners[11] - (_QWORD)v62;
          if (v63)
          {
            v61.f64[0] = INFINITY;
            v60.f64[0] = -INFINITY;
            v64 = 32 * (v63 >> 5);
            v66 = (float64x2_t)v124;
            v65 = (float64x2_t)v125;
            do
            {
              v67 = *v62;
              v68 = v62[1];
              v62 += 2;
              v66 = vminnmq_f64(v67, v66);
              v61 = vminnmq_f64((float64x2_t)*(unint64_t *)&v68.f64[0], (float64x2_t)*(unint64_t *)&v61.f64[0]);
              v65 = vmaxnmq_f64(v67, v65);
              v60 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v68.f64[0], (float64x2_t)*(unint64_t *)&v60.f64[0]);
              v64 -= 32;
            }
            while (v64);
          }
          else
          {
            v60.f64[0] = -INFINITY;
            v61.f64[0] = INFINITY;
            v66 = (float64x2_t)v124;
            v65 = (float64x2_t)v125;
          }
          *((float64x2_t *)p_shared_owners + 1) = v66;
          *((float64x2_t *)p_shared_owners + 2) = v61;
          *((float64x2_t *)p_shared_owners + 3) = v65;
          *((float64x2_t *)p_shared_owners + 4) = v60;
          v79 = (float64x2_t *)v51[10];
          v80 = v51[11] - (_QWORD)v79;
          v12 = v130;
          if (v80)
          {
            v61.f64[0] = INFINITY;
            v60.f64[0] = -INFINITY;
            v81 = 32 * (v80 >> 5);
            v83 = (float64x2_t)v124;
            v82 = (float64x2_t)v125;
            do
            {
              v84 = *v79;
              v85 = v79[1];
              v79 += 2;
              v83 = vminnmq_f64(v84, v83);
              v61 = vminnmq_f64((float64x2_t)*(unint64_t *)&v85.f64[0], (float64x2_t)*(unint64_t *)&v61.f64[0]);
              v82 = vmaxnmq_f64(v84, v82);
              v60 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v85.f64[0], (float64x2_t)*(unint64_t *)&v60.f64[0]);
              v81 -= 32;
            }
            while (v81);
          }
          else
          {
            v60.f64[0] = -INFINITY;
            v61.f64[0] = INFINITY;
            v83 = (float64x2_t)v124;
            v82 = (float64x2_t)v125;
          }
          *((float64x2_t *)v51 + 1) = v83;
          *((float64x2_t *)v51 + 2) = v61;
          *((float64x2_t *)v51 + 3) = v82;
          *((float64x2_t *)v51 + 4) = v60;
          *(double *)p_shared_owners = geom::triangle_mesh_volume_3<double>(p_shared_owners[10], (p_shared_owners[11] - p_shared_owners[10]) >> 5, p_shared_owners[13], (p_shared_owners[14] - p_shared_owners[13]) >> 2);
          *(double *)v51 = geom::triangle_mesh_volume_3<double>(v51[10], (v51[11] - v51[10]) >> 5, v51[13], (v51[14] - v51[13]) >> 2);
          *((double *)p_shared_owners + 1) = geom::triangle_mesh_surface_area_3<double>(p_shared_owners[10], (p_shared_owners[11] - p_shared_owners[10]) >> 5, p_shared_owners[13], (p_shared_owners[14] - p_shared_owners[13]) >> 2);
          *((double *)v51 + 1) = geom::triangle_mesh_surface_area_3<double>(v51[10], (v51[11] - v51[10]) >> 5, v51[13], (v51[14] - v51[13]) >> 2);
          v86 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 192), (float64x2_t)(unint64_t)p_shared_owners[4]);
          *(float64x2_t *)(a2 + 176) = vminnmq_f64(*(float64x2_t *)(a2 + 176), *((float64x2_t *)p_shared_owners + 1));
          *(float64x2_t *)(a2 + 192) = v86;
          v87 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(a2 + 224), (float64x2_t)(unint64_t)p_shared_owners[8]);
          *(float64x2_t *)(a2 + 208) = vmaxnmq_f64(*(float64x2_t *)(a2 + 208), *((float64x2_t *)p_shared_owners + 3));
          *(float64x2_t *)(a2 + 224) = v87;
          v88 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 256), (float64x2_t)(unint64_t)v51[4]);
          *(float64x2_t *)(a2 + 240) = vminnmq_f64(*(float64x2_t *)(a2 + 240), *((float64x2_t *)v51 + 1));
          *(float64x2_t *)(a2 + 256) = v88;
          v89 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v132 + 16), (float64x2_t)(unint64_t)v51[8]);
          *(float64x2_t *)v132 = vmaxnmq_f64(*(float64x2_t *)v132, *((float64x2_t *)v51 + 3));
          *(float64x2_t *)(v132 + 16) = v89;
          v91 = *(char **)(a2 + 80);
          v90 = *(_QWORD *)(a2 + 88);
          if ((unint64_t)v91 >= v90)
          {
            v93 = (v91 - *v130) >> 4;
            v94 = v93 + 1;
            if ((unint64_t)(v93 + 1) >> 60)
              goto LABEL_82;
            v95 = v90 - (_QWORD)*v130;
            if (v95 >> 3 > v94)
              v94 = v95 >> 3;
            if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0)
              v96 = 0xFFFFFFFFFFFFFFFLL;
            else
              v96 = v94;
            v140 = v123;
            v97 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v123, v96);
            v99 = &v97[16 * v93];
            *(_QWORD *)v99 = p_shared_owners;
            *((_QWORD *)v99 + 1) = v33;
            v101 = *(_QWORD **)(a2 + 72);
            v100 = *(_QWORD **)(a2 + 80);
            if (v100 == v101)
            {
              v104 = vdupq_n_s64((unint64_t)v100);
              v102 = &v97[16 * v93];
            }
            else
            {
              v102 = &v97[16 * v93];
              do
              {
                v103 = *((_OWORD *)v100 - 1);
                v100 -= 2;
                *((_OWORD *)v102 - 1) = v103;
                v102 -= 16;
                *v100 = 0;
                v100[1] = 0;
              }
              while (v100 != v101);
              v104 = *(int64x2_t *)v130;
            }
            v92 = v99 + 16;
            *(_QWORD *)(a2 + 72) = v102;
            *(_QWORD *)(a2 + 80) = v99 + 16;
            v138 = v104;
            v105 = *(_QWORD *)(a2 + 88);
            *(_QWORD *)(a2 + 88) = &v97[16 * v98];
            v139 = v105;
            v137 = v104.i64[0];
            std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v137);
          }
          else
          {
            *(_QWORD *)v91 = p_shared_owners;
            *((_QWORD *)v91 + 1) = v33;
            v92 = v91 + 16;
          }
          *(_QWORD *)(a2 + 80) = v92;
          v107 = *(char **)(a2 + 104);
          v106 = *(_QWORD *)(a2 + 112);
          if ((unint64_t)v107 >= v106)
          {
            v109 = (v107 - *v131) >> 4;
            v110 = v109 + 1;
            if ((unint64_t)(v109 + 1) >> 60)
LABEL_82:
              abort();
            v111 = v106 - (_QWORD)*v131;
            if (v111 >> 3 > v110)
              v110 = v111 >> 3;
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0)
              v112 = 0xFFFFFFFFFFFFFFFLL;
            else
              v112 = v110;
            v140 = v122;
            v113 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v122, v112);
            v115 = &v113[16 * v109];
            *(_QWORD *)v115 = v51;
            *((_QWORD *)v115 + 1) = v50;
            v117 = *(_QWORD **)(a2 + 96);
            v116 = *(_QWORD **)(a2 + 104);
            if (v116 == v117)
            {
              v120 = vdupq_n_s64((unint64_t)v116);
              v118 = &v113[16 * v109];
              v8 = a3;
              v11 = v126;
              v10 = a1;
            }
            else
            {
              v118 = &v113[16 * v109];
              v8 = a3;
              v11 = v126;
              v10 = a1;
              do
              {
                v119 = *((_OWORD *)v116 - 1);
                v116 -= 2;
                *((_OWORD *)v118 - 1) = v119;
                v118 -= 16;
                *v116 = 0;
                v116[1] = 0;
              }
              while (v116 != v117);
              v120 = *(int64x2_t *)v131;
            }
            v108 = v115 + 16;
            *(_QWORD *)(a2 + 96) = v118;
            *(_QWORD *)(a2 + 104) = v115 + 16;
            v138 = v120;
            v121 = *(_QWORD *)(a2 + 112);
            *(_QWORD *)(a2 + 112) = &v113[16 * v114];
            v139 = v121;
            v137 = v120.i64[0];
            std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v137);
          }
          else
          {
            *(_QWORD *)v107 = v51;
            *((_QWORD *)v107 + 1) = v50;
            v108 = v107 + 16;
            v8 = a3;
            v11 = v126;
            v10 = a1;
          }
          *(_QWORD *)(a2 + 104) = v108;
          goto LABEL_80;
        }
        v12 = v130;
        if (v51[10] == v51[11])
        {
          std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](v130, (__int128 *)v7);
          v72 = *v7;
          v73 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 192), (float64x2_t)*(unint64_t *)&(*v7)[2].f64[0]);
          *(float64x2_t *)(a2 + 176) = vminnmq_f64(*(float64x2_t *)(a2 + 176), (*v7)[1]);
          *(float64x2_t *)(a2 + 192) = v73;
          v74 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(a2 + 224), (float64x2_t)*(unint64_t *)&v72[4].f64[0]);
          *(float64x2_t *)(a2 + 208) = vmaxnmq_f64(*(float64x2_t *)(a2 + 208), v72[3]);
          *(float64x2_t *)(a2 + 224) = v74;
        }
        v11 = v126;
        if (v50)
        {
          v75 = (unint64_t *)&v50->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v8 = a3;
        v10 = a1;
        if (v33)
        {
          v77 = (unint64_t *)&v33->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
LABEL_80:
      v7 += 2;
    }
    while (v7 != v11);
  }
}

uint64_t geom::close_triangle_mesh<double>(int8x16_t **a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  float64x2_t v8;
  uint64_t **v9;
  int8x16_t *v10;
  float64x2_t v11;
  float64x2_t i;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  int8x16_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  int8x16_t *v28;
  char *v29;
  char *v30;
  char *v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64_t *v34;
  char **v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  unint64_t v65;
  float64x2_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  int v73;

  v71 = 0u;
  v72 = 0u;
  v73 = 1065353216;
  if ((((uint64_t)(a2[1] - *a2) >> 2) / 3uLL))
  {
    v4 = 0;
    v5 = 3 * (((uint64_t)(a2[1] - *a2) >> 2) / 3uLL);
    do
    {
      v6 = *(_DWORD *)(*a2 + 4 * (v4 + 1));
      v7 = *(_DWORD *)(*a2 + 4 * (v4 + 2));
      LODWORD(v70) = *(_DWORD *)(*a2 + 4 * v4);
      HIDWORD(v70) = v6;
      v69 = __PAIR64__(v6, v7);
      v68 = __PAIR64__(v7, v70);
      if (!std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__erase_unique<geom::edge>(&v71, (unsigned int *)&v70))std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__emplace_unique_key_args<geom::edge,geom::edge const&>((uint64_t)&v71, (unsigned int *)&v70, &v70);
      if (!std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__erase_unique<geom::edge>(&v71, (unsigned int *)&v69))std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__emplace_unique_key_args<geom::edge,geom::edge const&>((uint64_t)&v71, (unsigned int *)&v69, &v69);
      if (!std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__erase_unique<geom::edge>(&v71, (unsigned int *)&v68))std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__emplace_unique_key_args<geom::edge,geom::edge const&>((uint64_t)&v71, (unsigned int *)&v68, &v68);
      v4 += 3;
    }
    while (v5 != v4);
    if (*((_QWORD *)&v72 + 1))
    {
      v9 = (uint64_t **)v72;
      v10 = *a1;
      v11 = 0uLL;
      for (i = 0uLL; v9; v9 = (uint64_t **)*v9)
      {
        v13 = (float64x2_t *)&v10[2 * *((unsigned int *)v9 + 4)];
        v14 = vaddq_f64(v11, *v13);
        v15 = vaddq_f64(i, v13[1]);
        v16 = (float64x2_t *)&v10[2 * *((unsigned int *)v9 + 5)];
        v8 = *v16;
        i = vaddq_f64(v15, v16[1]);
        v11 = vaddq_f64(v14, *v16);
      }
      v8.f64[0] = (double)(unint64_t)(2 * *((_QWORD *)&v72 + 1));
      v17 = vdivq_f64(i, v8);
      v18 = (int8x16_t)vdivq_f64(v11, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0));
      v19 = vextq_s8(v18, v18, 8uLL).u64[0];
      v20 = (unint64_t)a1[2];
      v21 = a1[1];
      v22 = ((char *)v21 - (char *)v10) >> 5;
      if ((unint64_t)v21 >= v20)
      {
        v24 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59)
LABEL_81:
          abort();
        v25 = v20 - (_QWORD)v10;
        if (v25 >> 4 > v24)
          v24 = v25 >> 4;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
          v26 = 0x7FFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v66 = v17;
          v67 = v18.i64[0];
          v65 = v19;
          v27 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), v26);
          v19 = v65;
          v17 = v66;
          v18.i64[0] = v67;
        }
        else
        {
          v27 = 0;
        }
        v28 = (int8x16_t *)&v27[32 * v22];
        v29 = &v27[32 * v26];
        v18.i64[1] = v19;
        *v28 = v18;
        v28[1] = (int8x16_t)v17;
        v23 = v28 + 2;
        v31 = (char *)*a1;
        v30 = (char *)a1[1];
        if (v30 != (char *)*a1)
        {
          do
          {
            v32 = *((int8x16_t *)v30 - 2);
            v33 = *((int8x16_t *)v30 - 1);
            v30 -= 32;
            v28[-2] = v32;
            v28[-1] = v33;
            v28 -= 2;
          }
          while (v30 != v31);
          v30 = (char *)*a1;
        }
        *a1 = v28;
        a1[1] = v23;
        a1[2] = (int8x16_t *)v29;
        if (v30)
          operator delete(v30);
      }
      else
      {
        v18.i64[1] = v19;
        *v21 = v18;
        v21[1] = (int8x16_t)v17;
        v23 = v21 + 2;
      }
      a1[1] = v23;
      v34 = (uint64_t *)v72;
      if ((_QWORD)v72)
      {
        v35 = (char **)(a2 + 2);
        v36 = (char *)a2[1];
        do
        {
          v37 = *v35;
          if (v36 >= *v35)
          {
            v39 = (char *)*a2;
            v40 = (uint64_t)&v36[-*a2] >> 2;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62)
              goto LABEL_81;
            v42 = v37 - v39;
            if (v42 >> 1 > v41)
              v41 = v42 >> 1;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
              v43 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v43);
              v39 = (char *)*a2;
              v36 = (char *)a2[1];
            }
            else
            {
              v44 = 0;
            }
            v45 = &v44[4 * v40];
            *(_DWORD *)v45 = v22;
            v38 = v45 + 4;
            while (v36 != v39)
            {
              v46 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            v37 = &v44[4 * v43];
            *a2 = v45;
            a2[1] = v38;
            a2[2] = v37;
            if (v39)
            {
              operator delete(v39);
              v37 = *v35;
            }
          }
          else
          {
            *(_DWORD *)v36 = v22;
            v38 = v36 + 4;
          }
          a2[1] = v38;
          if (v38 >= v37)
          {
            v48 = (char *)*a2;
            v49 = (uint64_t)&v38[-*a2] >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
              goto LABEL_81;
            v51 = v37 - v48;
            if (v51 >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v52);
              v48 = (char *)*a2;
              v38 = (char *)a2[1];
            }
            else
            {
              v53 = 0;
            }
            v54 = &v53[4 * v49];
            *(_DWORD *)v54 = *((_DWORD *)v34 + 4);
            v47 = v54 + 4;
            while (v38 != v48)
            {
              v55 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *((_DWORD *)v54 - 1) = v55;
              v54 -= 4;
            }
            v37 = &v53[4 * v52];
            *a2 = v54;
            a2[1] = v47;
            a2[2] = v37;
            if (v48)
            {
              operator delete(v48);
              v37 = *v35;
            }
          }
          else
          {
            *(_DWORD *)v38 = *((_DWORD *)v34 + 4);
            v47 = v38 + 4;
          }
          a2[1] = v47;
          if (v47 >= v37)
          {
            v56 = (char *)*a2;
            v57 = (uint64_t)&v47[-*a2] >> 2;
            v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 62)
              goto LABEL_81;
            v59 = v37 - v56;
            if (v59 >> 1 > v58)
              v58 = v59 >> 1;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
              v60 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v60 = v58;
            if (v60)
            {
              v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v60);
              v56 = (char *)*a2;
              v47 = (char *)a2[1];
            }
            else
            {
              v61 = 0;
            }
            v62 = &v61[4 * v57];
            *(_DWORD *)v62 = *((_DWORD *)v34 + 5);
            v36 = v62 + 4;
            while (v47 != v56)
            {
              v63 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *((_DWORD *)v62 - 1) = v63;
              v62 -= 4;
            }
            *a2 = v62;
            a2[1] = v36;
            a2[2] = &v61[4 * v60];
            if (v56)
              operator delete(v56);
          }
          else
          {
            *(_DWORD *)v47 = *((_DWORD *)v34 + 5);
            v36 = v47 + 4;
          }
          a2[1] = v36;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v71);
}

void geom::cluster_parallel_clipper<double>::interior_component_work_item(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t *a4, uint64_t a5)
{
  double v5;
  float64x2_t v6;
  double v7;
  uint64_t *v8;
  float64x2_t *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t **v41;
  int64x2_t *v42;
  int64x2_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  int64x2_t v58;
  int64x2_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int64x2_t **v64;
  int64x2_t *v65;
  int64x2_t *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  int64x2_t v75;
  int64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  uint64_t v83;
  float64x2_t v84;
  float64x2_t v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  unint64_t v92;
  int64x2_t **v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  unint64_t v102;
  int64x2_t **v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  _QWORD *v114;
  char *v115;
  __int128 v116;
  int64x2_t v117;
  char *v118;
  uint64_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t *v122;
  uint64_t v123;
  float64x2_t v124;
  uint64_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  unint64_t v132;
  int64x2_t **v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  _QWORD *v143;
  _QWORD *v144;
  char *v145;
  __int128 v146;
  int64x2_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  _QWORD *v156;
  _QWORD *v157;
  char *v158;
  __int128 v159;
  int64x2_t v160;
  uint64_t v161;
  unint64_t v162;
  int64x2_t **v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  _QWORD *v174;
  char *v175;
  __int128 v176;
  int64x2_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  int64x2_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  std::vector<unsigned int> *v192;
  unint64_t *v193;
  uint64_t v195;
  float64x2_t v197;
  float64x2_t v198;
  float64_t v199;
  float64_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64_t v204;
  unint64_t v205;
  unint64_t v206;
  float64x2_t v207;
  float64_t v208;
  float64_t v209;
  float64x2_t v210;
  float64_t v211;
  float64_t v212;
  uint64_t v213[2];
  _OWORD *v214;
  int64x2_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD v218[9];
  float64x2_t v219[16];
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v5 = fmax(fmax(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 16), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 32)), *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 24));
  v6.f64[0] = 1.0;
  if (v5 <= 1.0)
    v7 = 2.22044605e-16;
  else
    v7 = v5 * 2.22044605e-16;
  if (a5)
  {
    v8 = a4;
    v9 = a3;
    v11 = a1;
    v12 = &a4[a5];
    v195 = a2 + 272;
    v192 = (std::vector<unsigned int> *)(a2 + 24);
    v193 = (unint64_t *)(a2 + 48);
    v187 = a2 + 88;
    v188 = a2 + 160;
    v189 = a2 + 112;
    v190 = a2 + 136;
    __asm { FMOV            V0.2D, #0.5 }
    v197 = _Q0;
    v186 = vdupq_n_s64(0xFFF0000000000000);
    v191 = v12;
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 128);
      v19 = *v8;
      v20 = *(_DWORD *)(v18 + 8);
      v22 = *(float64x2_t *)(v18 + 16);
      v21 = *(float64x2_t *)(v18 + 32);
      v23.i64[0] = v20 & *v8;
      v23.i64[1] = ((unint64_t)*v8 >> *(_DWORD *)v18) & v20;
      v24 = vcvtq_f64_u64(v23);
      v23.i64[0] = ((unint64_t)*v8 >> (2 * *(_BYTE *)v18)) & v20;
      v23.i64[1] = HIDWORD(v6.f64[0]);
      v25 = vmlaq_f64(*(float64x2_t *)(v18 + 48), v24, v22);
      v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      v27 = vmlaq_f64(*(float64x2_t *)(v18 + 64), vcvtq_f64_u64(v23), v21);
      v28 = vaddq_f64(v22, v25);
      v29 = vaddq_f64(v21, v27);
      v30 = vsubq_f64(v28, v25);
      v31 = vsubq_f64(v29, v27);
      v32 = sqrt(vmulq_f64(v31, v31).f64[0] + vaddvq_f64(vmulq_f64(v30, v30))) * 0.5 - v7;
      v6 = v9[1];
      v33 = v9[2].f64[0]
          + vmulq_f64(v6, vmulq_f64(vaddq_f64(v27, v29), v197)).f64[0]
          + vaddvq_f64(vmulq_f64(*v9, vmulq_f64(vaddq_f64(v25, v28), v197)));
      if (v33 <= -v32)
      {
        v47 = *(char **)(a2 + 128);
        v46 = *(_QWORD *)(a2 + 136);
        if ((unint64_t)v47 >= v46)
        {
          v52 = *(char **)(a2 + 120);
          v53 = (v47 - v52) >> 3;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61)
            goto LABEL_143;
          v199 = v29.f64[0];
          v202 = v28;
          v205 = v26;
          v208 = v25.f64[0];
          v211 = v27.f64[0];
          v55 = v46 - (_QWORD)v52;
          if (v55 >> 2 > v54)
            v54 = v55 >> 2;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
            v56 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
          {
            v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v190, v56);
            v52 = *(char **)(a2 + 120);
            v47 = *(char **)(a2 + 128);
            v19 = *v8;
          }
          else
          {
            v57 = 0;
          }
          v95 = &v57[8 * v53];
          *(_QWORD *)v95 = v19;
          v48 = v95 + 8;
          while (v47 != v52)
          {
            v96 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *((_QWORD *)v95 - 1) = v96;
            v95 -= 8;
          }
          *(_QWORD *)(a2 + 120) = v95;
          *(_QWORD *)(a2 + 128) = v48;
          *(_QWORD *)(a2 + 136) = &v57[8 * v56];
          if (v52)
            operator delete(v52);
          v25.f64[0] = v208;
          v27.f64[0] = v211;
          v28 = v202;
          v26 = v205;
          v29.f64[0] = v199;
        }
        else
        {
          *(_QWORD *)v47 = v19;
          v48 = v47 + 8;
        }
        *(_QWORD *)(a2 + 128) = v48;
        *(_QWORD *)&v25.f64[1] = v26;
        v97 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 192), (float64x2_t)*(unint64_t *)&v27.f64[0]);
        *(float64x2_t *)(a2 + 176) = vminnmq_f64(*(float64x2_t *)(a2 + 176), v25);
        *(float64x2_t *)(a2 + 192) = v97;
        v98 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(a2 + 224), (float64x2_t)*(unint64_t *)&v29.f64[0]);
        *(float64x2_t *)(a2 + 208) = vmaxnmq_f64(*(float64x2_t *)(a2 + 208), v28);
        *(float64x2_t *)(a2 + 224) = v98;
        goto LABEL_141;
      }
      if (v33 >= v32)
      {
        v50 = *(char **)(a2 + 152);
        v49 = *(_QWORD *)(a2 + 160);
        if ((unint64_t)v50 >= v49)
        {
          v69 = *(char **)(a2 + 144);
          v70 = (v50 - v69) >> 3;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61)
            goto LABEL_143;
          v200 = v29.f64[0];
          v203 = v28;
          v206 = v26;
          v209 = v25.f64[0];
          v212 = v27.f64[0];
          v72 = v49 - (_QWORD)v69;
          if (v72 >> 2 > v71)
            v71 = v72 >> 2;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
            v73 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v188, v73);
            v69 = *(char **)(a2 + 144);
            v50 = *(char **)(a2 + 152);
            v19 = *v8;
          }
          else
          {
            v74 = 0;
          }
          v118 = &v74[8 * v70];
          *(_QWORD *)v118 = v19;
          v51 = v118 + 8;
          while (v50 != v69)
          {
            v119 = *((_QWORD *)v50 - 1);
            v50 -= 8;
            *((_QWORD *)v118 - 1) = v119;
            v118 -= 8;
          }
          *(_QWORD *)(a2 + 144) = v118;
          *(_QWORD *)(a2 + 152) = v51;
          *(_QWORD *)(a2 + 160) = &v74[8 * v73];
          if (v69)
            operator delete(v69);
          v25.f64[0] = v209;
          v27.f64[0] = v212;
          v28 = v203;
          v26 = v206;
          v29.f64[0] = v200;
        }
        else
        {
          *(_QWORD *)v50 = v19;
          v51 = v50 + 8;
        }
        *(_QWORD *)(a2 + 152) = v51;
        *(_QWORD *)&v25.f64[1] = v26;
        v120 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 256), (float64x2_t)*(unint64_t *)&v27.f64[0]);
        *(float64x2_t *)(a2 + 240) = vminnmq_f64(*(float64x2_t *)(a2 + 240), v25);
        *(float64x2_t *)(a2 + 256) = v120;
        v121 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v195 + 16), (float64x2_t)*(unint64_t *)&v29.f64[0]);
        *(float64x2_t *)v195 = vmaxnmq_f64(*(float64x2_t *)v195, v28);
        *(float64x2_t *)(v195 + 16) = v121;
        goto LABEL_141;
      }
      v219[0] = v25;
      v219[1] = v27;
      v34.f64[0] = v25.f64[0];
      *(_QWORD *)&v34.f64[1] = v26;
      v35.f64[0] = v28.f64[0];
      *(_QWORD *)&v35.f64[1] = v26;
      v219[2] = v35;
      v219[3] = v27;
      v36.f64[0] = v25.f64[0];
      *(_QWORD *)&v36.f64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      v219[4] = v28;
      v219[5] = v27;
      v219[6] = v36;
      v219[7] = v27;
      v219[8] = v34;
      v219[9] = v29;
      v219[10] = v35;
      v219[11] = v29;
      v219[12] = v28;
      v219[13] = v29;
      v219[14] = v36;
      v219[15] = v29;
      v218[5] = unk_2289C3420;
      v218[6] = xmmword_2289C3430;
      v218[7] = unk_2289C3440;
      v218[8] = xmmword_2289C3450;
      v218[2] = xmmword_2289C33F0;
      v218[3] = unk_2289C3400;
      v218[4] = xmmword_2289C3410;
      v218[0] = xmmword_2289C33D0;
      v218[1] = unk_2289C33E0;
      v37 = *(_QWORD *)(v11 + 48);
      do
        v38 = __ldaxr((unsigned int *)v37);
      while (__stlxr(v38 + 1, (unsigned int *)v37));
      v40 = v37 + 8;
      v39 = *(_QWORD *)(v37 + 8);
      v207 = v25;
      v210 = v27;
      v201 = v28;
      v204 = *(double *)&v26;
      v198 = v29;
      if (v38 >= (unint64_t)((*(_QWORD *)(v40 + 8) - v39) >> 4))
      {
        v42 = (int64x2_t *)operator new(0xA0uLL);
        v42->i64[1] = 0;
        v42[1].i64[0] = 0;
        v42->i64[0] = (uint64_t)&off_24F14A150;
        v58 = vdupq_n_s64(0x7FF8000000000000uLL);
        v42[2] = v58;
        v43 = v42 + 2;
        v58.i64[0] = 0x7FF0000000000000;
        v59 = vdupq_n_s64(0x7FF0000000000000uLL);
        v42[3] = v59;
        v42[4] = v58;
        v59.i64[0] = 0xFFF0000000000000;
        v42[5] = vdupq_n_s64(0xFFF0000000000000);
        v42[6] = v59;
        v42[7] = 0u;
        v42[8] = 0u;
        v42[9] = 0u;
      }
      else
      {
        v41 = (int64x2_t **)(v39 + 16 * v38);
        v43 = *v41;
        v42 = v41[1];
        if (v42)
        {
          v44 = &v42->u64[1];
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
      }
      v60 = *(_QWORD *)(v11 + 48);
      do
        v61 = __ldaxr((unsigned int *)v60);
      while (__stlxr(v61 + 1, (unsigned int *)v60));
      v63 = v60 + 8;
      v62 = *(_QWORD *)(v60 + 8);
      if (v61 >= (unint64_t)((*(_QWORD *)(v63 + 8) - v62) >> 4))
      {
        v65 = (int64x2_t *)operator new(0xA0uLL);
        v65->i64[1] = 0;
        v65[1].i64[0] = 0;
        v65->i64[0] = (uint64_t)&off_24F14A150;
        v75 = vdupq_n_s64(0x7FF8000000000000uLL);
        v65[2] = v75;
        v66 = v65 + 2;
        v75.i64[0] = 0x7FF0000000000000;
        v76 = vdupq_n_s64(0x7FF0000000000000uLL);
        v65[3] = v76;
        v65[4] = v75;
        v76.i64[0] = 0xFFF0000000000000;
        v65[5] = vdupq_n_s64(0xFFF0000000000000);
        v65[6] = v76;
        v65[7] = 0u;
        v65[8] = 0u;
        v65[9] = 0u;
      }
      else
      {
        v64 = (int64x2_t **)(v62 + 16 * v61);
        v66 = *v64;
        v65 = v64[1];
        if (v65)
        {
          v67 = &v65->u64[1];
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
      }
      v214 = (_OWORD *)v219;
      v215.i64[0] = 8;
      v213[0] = (uint64_t)v218;
      v213[1] = 36;
      geom::split_triangle_mesh_with_plane<double>(&v214, v213, a3, (char **)&v43[5], &v43[6].i64[1], (char **)&v66[5], &v66[6].i64[1], v193, (std::vector<unsigned int> *)a2, v192);
      v77 = v43[5].i64[0];
      v78 = v43[5].i64[1] - v77;
      if (!v78)
        break;
      if (v66[5].i64[1] != v66[5].i64[0])
      {
        geom::close_triangle_mesh<double>((int8x16_t **)&v43[5], &v43[6].i64[1]);
        geom::close_triangle_mesh<double>((int8x16_t **)&v66[5], &v66[6].i64[1]);
        v81 = (float64x2_t *)v43[5].i64[0];
        v82 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        v83 = v43[5].i64[1] - (_QWORD)v81;
        if (v83)
        {
          v80.f64[0] = INFINITY;
          v79.f64[0] = -INFINITY;
          v84 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
          v85 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
          v86 = 32 * (v83 >> 5);
          do
          {
            v87 = *v81;
            v88 = v81[1];
            v81 += 2;
            v84 = vminnmq_f64(v87, v84);
            v80 = vminnmq_f64((float64x2_t)*(unint64_t *)&v88.f64[0], (float64x2_t)*(unint64_t *)&v80.f64[0]);
            v85 = vmaxnmq_f64(v87, v85);
            v79 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v88.f64[0], (float64x2_t)*(unint64_t *)&v79.f64[0]);
            v86 -= 32;
          }
          while (v86);
        }
        else
        {
          v79.f64[0] = -INFINITY;
          v80.f64[0] = INFINITY;
          v84 = v82;
          v85 = (float64x2_t)v186;
        }
        v43[1] = (int64x2_t)v84;
        v43[2] = (int64x2_t)v80;
        v43[3] = (int64x2_t)v85;
        v43[4] = (int64x2_t)v79;
        v122 = (float64x2_t *)v66[5].i64[0];
        v123 = v66[5].i64[1] - (_QWORD)v122;
        v11 = a1;
        if (v123)
        {
          v80.f64[0] = INFINITY;
          v79.f64[0] = -INFINITY;
          v82 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
          v124 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
          v125 = 32 * (v123 >> 5);
          do
          {
            v126 = *v122;
            v127 = v122[1];
            v122 += 2;
            v82 = vminnmq_f64(v126, v82);
            v80 = vminnmq_f64((float64x2_t)*(unint64_t *)&v127.f64[0], (float64x2_t)*(unint64_t *)&v80.f64[0]);
            v124 = vmaxnmq_f64(v126, v124);
            v79 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v127.f64[0], (float64x2_t)*(unint64_t *)&v79.f64[0]);
            v125 -= 32;
          }
          while (v125);
        }
        else
        {
          v79.f64[0] = -INFINITY;
          v80.f64[0] = INFINITY;
          v124 = (float64x2_t)v186;
        }
        v66[1] = (int64x2_t)v82;
        v66[2] = (int64x2_t)v80;
        v66[3] = (int64x2_t)v124;
        v66[4] = (int64x2_t)v79;
        *(double *)v43->i64 = geom::triangle_mesh_volume_3<double>(v43[5].i64[0], (v43[5].i64[1] - v43[5].i64[0]) >> 5, v43[6].i64[1], (v43[7].i64[0] - v43[6].i64[1]) >> 2);
        *(double *)v66->i64 = geom::triangle_mesh_volume_3<double>(v66[5].i64[0], (v66[5].i64[1] - v66[5].i64[0]) >> 5, v66[6].i64[1], (v66[7].i64[0] - v66[6].i64[1]) >> 2);
        *(double *)&v43->i64[1] = geom::triangle_mesh_surface_area_3<double>(v43[5].i64[0], (v43[5].i64[1] - v43[5].i64[0]) >> 5, v43[6].i64[1], (v43[7].i64[0] - v43[6].i64[1]) >> 2);
        *(double *)&v66->i64[1] = geom::triangle_mesh_surface_area_3<double>(v66[5].i64[0], (v66[5].i64[1] - v66[5].i64[0]) >> 5, v66[6].i64[1], (v66[7].i64[0] - v66[6].i64[1]) >> 2);
        v128 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 192), (float64x2_t)v43[2].u64[0]);
        *(float64x2_t *)(a2 + 176) = vminnmq_f64(*(float64x2_t *)(a2 + 176), (float64x2_t)v43[1]);
        *(float64x2_t *)(a2 + 192) = v128;
        v129 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(a2 + 224), (float64x2_t)v43[4].u64[0]);
        *(float64x2_t *)(a2 + 208) = vmaxnmq_f64(*(float64x2_t *)(a2 + 208), (float64x2_t)v43[3]);
        *(float64x2_t *)(a2 + 224) = v129;
        v130 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 256), (float64x2_t)v66[2].u64[0]);
        *(float64x2_t *)(a2 + 240) = vminnmq_f64(*(float64x2_t *)(a2 + 240), (float64x2_t)v66[1]);
        *(float64x2_t *)(a2 + 256) = v130;
        v6 = (float64x2_t)v66[4];
        v131 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v195 + 16), (float64x2_t)*(unint64_t *)&v6.f64[0]);
        *(float64x2_t *)v195 = vmaxnmq_f64(*(float64x2_t *)v195, (float64x2_t)v66[3]);
        *(float64x2_t *)(v195 + 16) = v131;
        v133 = *(int64x2_t ***)(a2 + 80);
        v132 = *(_QWORD *)(a2 + 88);
        if ((unint64_t)v133 >= v132)
        {
          v135 = *(_QWORD *)(a2 + 72);
          v136 = ((uint64_t)v133 - v135) >> 4;
          v137 = v136 + 1;
          if ((unint64_t)(v136 + 1) >> 60)
            goto LABEL_143;
          v138 = v132 - v135;
          if (v138 >> 3 > v137)
            v137 = v138 >> 3;
          if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
            v139 = 0xFFFFFFFFFFFFFFFLL;
          else
            v139 = v137;
          v217 = v187;
          v140 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v187, v139);
          v142 = &v140[16 * v136];
          *(_QWORD *)v142 = v43;
          *((_QWORD *)v142 + 1) = v42;
          v144 = *(_QWORD **)(a2 + 72);
          v143 = *(_QWORD **)(a2 + 80);
          if (v143 == v144)
          {
            v147 = vdupq_n_s64((unint64_t)v143);
            v145 = &v140[16 * v136];
          }
          else
          {
            v145 = &v140[16 * v136];
            do
            {
              v146 = *((_OWORD *)v143 - 1);
              v143 -= 2;
              *((_OWORD *)v145 - 1) = v146;
              v145 -= 16;
              *v143 = 0;
              v143[1] = 0;
            }
            while (v143 != v144);
            v147 = *(int64x2_t *)(a2 + 72);
          }
          v134 = v142 + 16;
          *(_QWORD *)(a2 + 72) = v145;
          *(_QWORD *)(a2 + 80) = v142 + 16;
          v215 = v147;
          v161 = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a2 + 88) = &v140[16 * v141];
          v216 = v161;
          v214 = (_OWORD *)v147.i64[0];
          std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v214);
        }
        else
        {
          *v133 = v43;
          v133[1] = v42;
          v134 = v133 + 2;
        }
        *(_QWORD *)(a2 + 80) = v134;
        v163 = *(int64x2_t ***)(a2 + 104);
        v162 = *(_QWORD *)(a2 + 112);
        if ((unint64_t)v163 >= v162)
        {
          v165 = *(_QWORD *)(a2 + 96);
          v166 = ((uint64_t)v163 - v165) >> 4;
          v167 = v166 + 1;
          if ((unint64_t)(v166 + 1) >> 60)
LABEL_143:
            abort();
          v168 = v162 - v165;
          if (v168 >> 3 > v167)
            v167 = v168 >> 3;
          if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0)
            v169 = 0xFFFFFFFFFFFFFFFLL;
          else
            v169 = v167;
          v217 = v189;
          v170 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v189, v169);
          v172 = &v170[16 * v166];
          *(_QWORD *)v172 = v66;
          *((_QWORD *)v172 + 1) = v65;
          v174 = *(_QWORD **)(a2 + 96);
          v173 = *(_QWORD **)(a2 + 104);
          if (v173 == v174)
          {
            v177 = vdupq_n_s64((unint64_t)v173);
            v175 = &v170[16 * v166];
            v12 = v191;
          }
          else
          {
            v175 = &v170[16 * v166];
            v12 = v191;
            do
            {
              v176 = *((_OWORD *)v173 - 1);
              v173 -= 2;
              *((_OWORD *)v175 - 1) = v176;
              v175 -= 16;
              *v173 = 0;
              v173[1] = 0;
            }
            while (v173 != v174);
            v177 = *(int64x2_t *)(a2 + 96);
          }
          v164 = v172 + 16;
          *(_QWORD *)(a2 + 96) = v175;
          *(_QWORD *)(a2 + 104) = v172 + 16;
          v215 = v177;
          v178 = *(_QWORD *)(a2 + 112);
          *(_QWORD *)(a2 + 112) = &v170[16 * v171];
          v216 = v178;
          v214 = (_OWORD *)v177.i64[0];
          std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v214);
        }
        else
        {
          *v163 = v66;
          v163[1] = v65;
          v164 = v163 + 2;
          v12 = v191;
        }
        *(_QWORD *)(a2 + 104) = v164;
        goto LABEL_140;
      }
      v11 = a1;
      *(double *)v43->i64 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 32)
                          * vmuld_lane_f64(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 16), *(float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 16), 1);
      *(double *)&v43->i64[1] = geom::triangle_mesh_surface_area_3<double>(v77, v78 >> 5, v43[6].i64[1], (v43[7].i64[0] - v43[6].i64[1]) >> 2);
      v99.f64[0] = v207.f64[0];
      v43[1] = (int64x2_t)v207;
      v43[2] = (int64x2_t)v210;
      v43[3] = (int64x2_t)v201;
      v43[4] = (int64x2_t)v198;
      v99.f64[1] = v204;
      v100 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 192), (float64x2_t)*(unint64_t *)&v210.f64[0]);
      *(float64x2_t *)(a2 + 176) = vminnmq_f64(*(float64x2_t *)(a2 + 176), v99);
      *(float64x2_t *)(a2 + 192) = v100;
      v6 = (float64x2_t)v43[4];
      v101 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(a2 + 224), (float64x2_t)*(unint64_t *)&v6.f64[0]);
      *(float64x2_t *)(a2 + 208) = vmaxnmq_f64(*(float64x2_t *)(a2 + 208), (float64x2_t)v43[3]);
      *(float64x2_t *)(a2 + 224) = v101;
      v103 = *(int64x2_t ***)(a2 + 80);
      v102 = *(_QWORD *)(a2 + 88);
      if ((unint64_t)v103 >= v102)
      {
        v148 = *(_QWORD *)(a2 + 72);
        v149 = ((uint64_t)v103 - v148) >> 4;
        v150 = v149 + 1;
        v12 = v191;
        if ((unint64_t)(v149 + 1) >> 60)
          goto LABEL_143;
        v151 = v102 - v148;
        if (v151 >> 3 > v150)
          v150 = v151 >> 3;
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0)
          v152 = 0xFFFFFFFFFFFFFFFLL;
        else
          v152 = v150;
        v217 = v187;
        v153 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v187, v152);
        v155 = &v153[16 * v149];
        *(_QWORD *)v155 = v43;
        *((_QWORD *)v155 + 1) = v42;
        v157 = *(_QWORD **)(a2 + 72);
        v156 = *(_QWORD **)(a2 + 80);
        if (v156 == v157)
        {
          v160 = vdupq_n_s64((unint64_t)v156);
          v158 = &v153[16 * v149];
        }
        else
        {
          v158 = &v153[16 * v149];
          do
          {
            v159 = *((_OWORD *)v156 - 1);
            v156 -= 2;
            *((_OWORD *)v158 - 1) = v159;
            v158 -= 16;
            *v156 = 0;
            v156[1] = 0;
          }
          while (v156 != v157);
          v160 = *(int64x2_t *)(a2 + 72);
        }
        v104 = v155 + 16;
        *(_QWORD *)(a2 + 72) = v158;
        *(_QWORD *)(a2 + 80) = v155 + 16;
        v215 = v160;
        v183 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a2 + 88) = &v153[16 * v154];
        v216 = v183;
        v214 = (_OWORD *)v160.i64[0];
        std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v214);
      }
      else
      {
        *v103 = v43;
        v103[1] = v42;
        v104 = v103 + 2;
        v12 = v191;
      }
      *(_QWORD *)(a2 + 80) = v104;
      if (v65)
      {
        v184 = &v65->u64[1];
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          (*(void (**)(int64x2_t *))(v65->i64[0] + 16))(v65);
          v182 = (std::__shared_weak_count *)v65;
LABEL_139:
          std::__shared_weak_count::__release_weak(v182);
        }
      }
LABEL_140:
      v9 = a3;
LABEL_141:
      if (++v8 == v12)
        return;
    }
    v11 = a1;
    *(double *)v66->i64 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 32)
                        * vmuld_lane_f64(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 16), *(float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 128) + 16), 1);
    *(double *)&v66->i64[1] = geom::triangle_mesh_surface_area_3<double>(v66[5].i64[0], (v66[5].i64[1] - v66[5].i64[0]) >> 5, v66[6].i64[1], (v66[7].i64[0] - v66[6].i64[1]) >> 2);
    v89.f64[0] = v207.f64[0];
    v66[1] = (int64x2_t)v207;
    v66[2] = (int64x2_t)v210;
    v66[3] = (int64x2_t)v201;
    v66[4] = (int64x2_t)v198;
    v89.f64[1] = v204;
    v90 = vminnmq_f64((float64x2_t)*(unint64_t *)(a2 + 256), (float64x2_t)*(unint64_t *)&v210.f64[0]);
    *(float64x2_t *)(a2 + 240) = vminnmq_f64(*(float64x2_t *)(a2 + 240), v89);
    *(float64x2_t *)(a2 + 256) = v90;
    v6 = (float64x2_t)v66[4];
    v91 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v195 + 16), (float64x2_t)*(unint64_t *)&v6.f64[0]);
    *(float64x2_t *)v195 = vmaxnmq_f64(*(float64x2_t *)v195, (float64x2_t)v66[3]);
    *(float64x2_t *)(v195 + 16) = v91;
    v93 = *(int64x2_t ***)(a2 + 104);
    v92 = *(_QWORD *)(a2 + 112);
    if ((unint64_t)v93 >= v92)
    {
      v105 = *(_QWORD *)(a2 + 96);
      v106 = ((uint64_t)v93 - v105) >> 4;
      v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 60)
        goto LABEL_143;
      v108 = v92 - v105;
      if (v108 >> 3 > v107)
        v107 = v108 >> 3;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
        v109 = 0xFFFFFFFFFFFFFFFLL;
      else
        v109 = v107;
      v217 = v189;
      v110 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v189, v109);
      v112 = &v110[16 * v106];
      *(_QWORD *)v112 = v66;
      *((_QWORD *)v112 + 1) = v65;
      v114 = *(_QWORD **)(a2 + 96);
      v113 = *(_QWORD **)(a2 + 104);
      if (v113 == v114)
      {
        v117 = vdupq_n_s64((unint64_t)v113);
        v115 = &v110[16 * v106];
        v12 = v191;
      }
      else
      {
        v115 = &v110[16 * v106];
        v12 = v191;
        do
        {
          v116 = *((_OWORD *)v113 - 1);
          v113 -= 2;
          *((_OWORD *)v115 - 1) = v116;
          v115 -= 16;
          *v113 = 0;
          v113[1] = 0;
        }
        while (v113 != v114);
        v117 = *(int64x2_t *)(a2 + 96);
      }
      v94 = v112 + 16;
      *(_QWORD *)(a2 + 96) = v115;
      *(_QWORD *)(a2 + 104) = v112 + 16;
      v215 = v117;
      v179 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = &v110[16 * v111];
      v216 = v179;
      v214 = (_OWORD *)v117.i64[0];
      std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v214);
    }
    else
    {
      *v93 = v66;
      v93[1] = v65;
      v94 = v93 + 2;
      v12 = v191;
    }
    *(_QWORD *)(a2 + 104) = v94;
    if (!v42)
      goto LABEL_140;
    v180 = &v42->u64[1];
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (v181)
      goto LABEL_140;
    (*(void (**)(int64x2_t *))(v42->i64[0] + 16))(v42);
    v182 = (std::__shared_weak_count *)v42;
    goto LABEL_139;
  }
}

void geom::cluster_parallel_merger<float>::init(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  __int128 *v34;
  _QWORD *v35;
  _QWORD v36[3];
  void *__p;
  char *v38;
  char *v39;
  _QWORD *block[7];

  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    __p = 0;
    v38 = 0;
    v39 = 0;
    _ZNSt3__16vectorIZNK4geom3bvhIfLh2EE13closest_pointINS_8functionIFDv2_fjS6_EEEEES6_T_S6_RfRjE5stateNS_9allocatorISC_EEE7reserveEm(&__p, (unint64_t)((v5 - 1) * v5) >> 1);
    for (i = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 16); i; i = (uint64_t *)*i)
    {
      v9 = (uint64_t *)*i;
      if (!*i)
        break;
      v10 = v38;
      do
      {
        v11 = *((unsigned int *)i + 4);
        v12 = *((unsigned int *)v9 + 4);
        if (v10 >= v39)
        {
          v13 = (v10 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v13 + 1) >> 61)
            abort();
          v14 = (v39 - (_BYTE *)__p) >> 2;
          if (v14 <= v13 + 1)
            v14 = v13 + 1;
          if ((unint64_t)(v39 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v39, v15);
          else
            v16 = 0;
          v17 = &v16[8 * v13];
          *(_QWORD *)v17 = v11 | (v12 << 32);
          v10 = v17 + 8;
          v19 = (char *)__p;
          v18 = v38;
          if (v38 != __p)
          {
            do
            {
              v20 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *((_QWORD *)v17 - 1) = v20;
              v17 -= 8;
            }
            while (v18 != v19);
            v18 = (char *)__p;
          }
          __p = v17;
          v38 = v10;
          v39 = &v16[8 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v10 = v11 | (v12 << 32);
          v10 += 8;
        }
        v38 = v10;
        v9 = (uint64_t *)*v9;
      }
      while (v9);
    }
    memset(v36, 0, sizeof(v36));
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::resize((uint64_t)v36, (v38 - (_BYTE *)__p) >> 3);
    block[0] = (_QWORD *)MEMORY[0x24BDAC760];
    block[1] = (_QWORD *)0x40000000;
    block[2] = ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIfE4initEPNSt3__113unordered_mapIjNS3_10unique_ptrINS_7clusterIfEENS3_14default_deleteIS7_EEEENS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjSA_EEEEEEPNS_17convex_mesh_cacheIfEEjfEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke;
    block[3] = &__block_descriptor_tmp_3_1;
    block[4] = &__p;
    block[5] = v36;
    block[6] = (_QWORD *)a1;
    dispatch_apply((v38 - (_BYTE *)__p) >> 3, 0, block);
    v22 = *(_QWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a3 + 16);
    if (v21 != v22)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = (uint64_t *)(v22 + 16 * v23);
        v26 = v25 + 1;
        v27 = v25[1];
        if (v27 && !*(_QWORD *)(v27 + 8))
        {
          ++v24;
        }
        else
        {
          v28 = *v25;
          *v25 = *(_QWORD *)(v21 - 16);
          *(_QWORD *)(v21 - 16) = v28;
          v29 = *v26;
          *v26 = *(_QWORD *)(v21 - 8);
          *(_QWORD *)(v21 - 8) = v29;
          v21 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](*(_QWORD *)(a3 + 16) - 16);
          *(_QWORD *)(a3 + 16) = v21;
          v22 = *(_QWORD *)(a3 + 8);
        }
        v23 = v24;
      }
      while (v24 < (unint64_t)((v21 - v22) >> 4));
    }
    atomic_store(0, (unsigned int *)a3);
    v30 = (char *)__p;
    if (v38 != __p)
    {
      v31 = 0;
      v32 = a1 + 24;
      v33 = 1;
      do
      {
        v34 = (__int128 *)(v36[0] + 16 * v31);
        block[0] = &v30[8 * v31];
        v35 = std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>(v32, (unsigned int *)block[0], (uint64_t)&std::piecewise_construct, block);
        std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100]((uint64_t)(v35 + 3), v34);
        v31 = v33;
        v30 = (char *)__p;
        ++v33;
      }
      while (v31 < (v38 - (_BYTE *)__p) >> 3);
    }
    block[0] = v36;
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)block);
    if (__p)
    {
      v38 = (char *)__p;
      operator delete(__p);
    }
  }
}

void std::vector<std::shared_ptr<geom::convex_mesh<float>>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 16 * a2;
      while (v3 != v5)
        v3 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v3 - 16);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__append((char **)a1, a2 - v4);
  }
}

void geom::cluster_parallel_merger<float>::deinit(_QWORD **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;

  v2 = (uint64_t)*a1;
  v4 = (*a1)[1];
  v3 = (*a1)[2];
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(v4 + 16 * v5);
      v8 = v7 + 1;
      v9 = v7[1];
      if (v9 && !*(_QWORD *)(v9 + 8))
      {
        ++v6;
      }
      else
      {
        v10 = *v7;
        *v7 = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = v10;
        v11 = *v8;
        *v8 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = v11;
        v3 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](*(_QWORD *)(v2 + 16) - 16);
        *(_QWORD *)(v2 + 16) = v3;
        v4 = *(_QWORD *)(v2 + 8);
      }
      v5 = v6;
    }
    while (v6 < (unint64_t)((v3 - v4) >> 4));
  }
  atomic_store(0, (unsigned int *)v2);
  for (i = a1[5]; i; i = (_QWORD *)*i)
  {
    v13 = i[4];
    if (v13 && !*(_QWORD *)(v13 + 8))
      geom::convex_mesh_cache<float>::move_unused_data(*a1, (uint64_t)(i + 3));
  }
  std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::clear((uint64_t)(a1 + 3));
  a1[2] = 0;
  *a1 = 0;
}

uint64_t geom::cluster_parallel_merger<float>::potential_merges(uint64_t a1)
{
  return a1 + 24;
}

void geom::cluster_parallel_merger<float>::perform_merge(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t **v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  _BYTE *v41;
  void *__p;
  unint64_t *v43;
  unint64_t *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  _QWORD block[6];

  v47 = a2;
  v3 = HIDWORD(a2);
  if (HIDWORD(a2) >= a2)
    v4 = a2;
  else
    v4 = HIDWORD(a2);
  if (a2 > HIDWORD(a2))
    LODWORD(v3) = a2;
  v45 = v3;
  v46 = v4;
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[2], &v45);
  if (!v5)
    goto LABEL_58;
  v6 = v5;
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[2], &v46);
  if (!v7)
    goto LABEL_58;
  v8 = v7;
  v9 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v10 = *(_QWORD *)(*a1 + 16);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (uint64_t *)(v11 + 16 * v12);
      v15 = v14 + 1;
      v16 = v14[1];
      if (v16 && !*(_QWORD *)(v16 + 8))
      {
        ++v13;
      }
      else
      {
        v17 = *v14;
        *v14 = *(_QWORD *)(v10 - 16);
        *(_QWORD *)(v10 - 16) = v17;
        v18 = *v15;
        *v15 = *(_QWORD *)(v10 - 8);
        *(_QWORD *)(v10 - 8) = v18;
        v10 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](*(_QWORD *)(v9 + 16) - 16);
        *(_QWORD *)(v9 + 16) = v10;
        v11 = *(_QWORD *)(v9 + 8);
      }
      v12 = v13;
    }
    while (v13 < (unint64_t)((v10 - v11) >> 4));
  }
  atomic_store(0, (unsigned int *)v9);
  v19 = v8[3];
  v20 = v6[3];
  v21 = std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::find<geom::edge>(a1 + 3, (unsigned int *)&v47);
  if (!v21)
LABEL_58:
    abort();
  geom::cluster<float>::merge_into(v19, v20, (__int128 *)(v21 + 3), *a1);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__erase_unique<unsigned int>((_QWORD *)a1[2], &v45);
  v22 = (_QWORD *)a1[5];
  if (v22)
  {
    do
    {
      v23 = *((_DWORD *)v22 + 4);
      if (v23 == v45
        || ((v24 = *((_DWORD *)v22 + 5), v23 != v46) ? (v25 = v24 == v45) : (v25 = 1),
            !v25 ? (v26 = v24 == v46) : (v26 = 1),
            v26))
      {
        if (v22[3])
        {
          v27 = v22[4];
          if (v27)
          {
            if (!*(_QWORD *)(v27 + 8))
              geom::convex_mesh_cache<float>::move_unused_data((_QWORD *)*a1, (uint64_t)(v22 + 3));
          }
        }
        v28 = (_QWORD *)*v22;
        std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::remove(a1 + 3, v22, (uint64_t)block);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>>>>::reset[abi:nn180100]((uint64_t)block, 0);
      }
      else
      {
        v28 = (_QWORD *)*v22;
      }
      v22 = v28;
    }
    while (v28);
  }
  v43 = 0;
  v44 = 0;
  __p = 0;
  v29 = *(uint64_t ***)(a1[2] + 16);
  if (v29)
  {
    v30 = 0;
    do
    {
      v31 = *((unsigned int *)v29 + 4);
      v32 = v46;
      if ((_DWORD)v31 != v46)
      {
        if (v30 >= v44)
        {
          v33 = ((char *)v30 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_58;
          v34 = ((char *)v44 - (_BYTE *)__p) >> 2;
          if (v34 <= v33 + 1)
            v34 = v33 + 1;
          if ((unint64_t)((char *)v44 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v44, v35);
          else
            v36 = 0;
          v37 = (unint64_t *)&v36[8 * v33];
          *v37 = v31 | (v32 << 32);
          v30 = v37 + 1;
          v39 = (char *)__p;
          v38 = (char *)v43;
          if (v43 != __p)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *--v37 = v40;
            }
            while (v38 != v39);
            v38 = (char *)__p;
          }
          __p = v37;
          v43 = v30;
          v44 = (unint64_t *)&v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v30++ = v31 | ((unint64_t)v46 << 32);
        }
        v43 = v30;
      }
      v29 = (uint64_t **)*v29;
    }
    while (v29);
    v41 = __p;
  }
  else
  {
    v41 = 0;
    v30 = 0;
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIfE13perform_mergeENS_4edgeEEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke;
  block[3] = &__block_descriptor_tmp_5_0;
  block[4] = a1;
  block[5] = &__p;
  dispatch_apply(((char *)v30 - v41) >> 3, 0, block);
  if (__p)
  {
    v43 = (unint64_t *)__p;
    operator delete(__p);
  }
}

void geom::cluster_parallel_merger<float>::compute_merged_mesh(uint64_t *a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int32x4_t *v11;
  unint64_t *v12;
  unint64_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  std::vector<int> __p;
  void *v32;
  int32x4_t v33;

  v6 = *a1;
  do
    v7 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v7 + 1, (unsigned int *)v6));
  v9 = v6 + 8;
  v8 = *(_QWORD *)(v6 + 8);
  if (v7 >= (unint64_t)((*(_QWORD *)(v9 + 8) - v8) >> 4))
  {
    v14 = (int32x4_t *)operator new(0x80uLL);
    v14->i64[1] = 0;
    v14[1].i64[0] = 0;
    v14->i64[0] = (uint64_t)&off_24F149F90;
    v15.i64[0] = 0x7F0000007FLL;
    v15.i64[1] = 0x7F0000007FLL;
    v14[3] = vdupq_n_s32(0x7F800000u);
    v14[4] = v15;
    v14[5] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[2].i64[1] = 0;
    *(int32x2_t *)v14[2].i8 = vdup_n_s32(0x7FC00000u);
    v11 = v14 + 2;
    *a3 = v14 + 2;
    a3[1] = v14;
  }
  else
  {
    v10 = *(_OWORD *)(v8 + 16 * v7);
    *(_OWORD *)a3 = v10;
    v11 = (int32x4_t *)v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  v16 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[2], a2);
  if (!v16
    || (v17 = v16,
        (v18 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[2], a2 + 1)) == 0))
  {
    abort();
  }
  v19 = v18;
  v20 = v17[3];
  v21 = *(uint64_t **)(v20 + 112);
  v22 = *(uint64_t **)(v20 + 120);
  while (v21 != v22)
  {
    v23 = *v21;
    v21 += 2;
    _ZNSt3__121__unwrap_and_dispatchB8nn180100INS_10__overloadINS_11__copy_loopINS_17_ClassicAlgPolicyEEENS_14__copy_trivialEEENS_11__wrap_iterIPDv3_fEESA_NS_20back_insert_iteratorINS_6vectorIS8_NS_9allocatorIS8_EEEEEELi0EEENS_4pairIT0_T2_EESI_T1_SJ_(*(_OWORD **)(v23 + 48), *(_OWORD **)(v23 + 56), (void **)&v11[3]);
  }
  v24 = v19[3];
  v25 = *(uint64_t **)(v24 + 112);
  v26 = *(uint64_t **)(v24 + 120);
  while (v25 != v26)
  {
    v27 = *v25;
    v25 += 2;
    _ZNSt3__121__unwrap_and_dispatchB8nn180100INS_10__overloadINS_11__copy_loopINS_17_ClassicAlgPolicyEEENS_14__copy_trivialEEENS_11__wrap_iterIPDv3_fEESA_NS_20back_insert_iteratorINS_6vectorIS8_NS_9allocatorIS8_EEEEEELi0EEENS_4pairIT0_T2_EESI_T1_SJ_(*(_OWORD **)(v27 + 48), *(_OWORD **)(v27 + 56), (void **)&v11[3]);
  }
  geom::convex_hull_triangulated_3<float>((v11[3].i64[1] - v11[3].i64[0]) >> 4, (float32x4_t *)v11[3].i64[0], &v11[4].i64[1], 0xFFFFFFFF, 0.0);
  v32 = 0;
  v33 = 0uLL;
  memset(&__p, 0, sizeof(__p));
  geom::crunch_triangle_mesh<float>(v11[3].i64, (char **)&v32, (int **)&v11[4].i64[1], &__p);
  v28 = (void *)v11[3].i64[0];
  if (v28)
  {
    v11[3].i64[1] = (uint64_t)v28;
    operator delete(v28);
  }
  v29 = v32;
  v11[3].i64[0] = (uint64_t)v32;
  v30 = v33.i64[0];
  *(int32x4_t *)((char *)v11 + 56) = v33;
  v33 = 0uLL;
  v32 = 0;
  *(float *)v11->i32 = geom::triangle_mesh_volume_3<float>((uint64_t)v29, (v30 - (uint64_t)v29) >> 4, v11[4].i64[1], (v11[5].i64[0] - v11[4].i64[1]) >> 2);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v32)
  {
    v33.i64[0] = (uint64_t)v32;
    operator delete(v32);
  }
}

void geom::cluster_parallel_merger<double>::init(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v5;
  uint64_t *i;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  __int128 *v34;
  _QWORD *v35;
  _QWORD v36[3];
  void *__p;
  char *v38;
  char *v39;
  _QWORD *block[7];

  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a5;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    __p = 0;
    v38 = 0;
    v39 = 0;
    _ZNSt3__16vectorIZNK4geom3bvhIfLh2EE13closest_pointINS_8functionIFDv2_fjS6_EEEEES6_T_S6_RfRjE5stateNS_9allocatorISC_EEE7reserveEm(&__p, (unint64_t)((v5 - 1) * v5) >> 1);
    for (i = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16); i; i = (uint64_t *)*i)
    {
      v9 = (uint64_t *)*i;
      if (!*i)
        break;
      v10 = v38;
      do
      {
        v11 = *((unsigned int *)i + 4);
        v12 = *((unsigned int *)v9 + 4);
        if (v10 >= v39)
        {
          v13 = (v10 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v13 + 1) >> 61)
            abort();
          v14 = (v39 - (_BYTE *)__p) >> 2;
          if (v14 <= v13 + 1)
            v14 = v13 + 1;
          if ((unint64_t)(v39 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v39, v15);
          else
            v16 = 0;
          v17 = &v16[8 * v13];
          *(_QWORD *)v17 = v11 | (v12 << 32);
          v10 = v17 + 8;
          v19 = (char *)__p;
          v18 = v38;
          if (v38 != __p)
          {
            do
            {
              v20 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *((_QWORD *)v17 - 1) = v20;
              v17 -= 8;
            }
            while (v18 != v19);
            v18 = (char *)__p;
          }
          __p = v17;
          v38 = v10;
          v39 = &v16[8 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v10 = v11 | (v12 << 32);
          v10 += 8;
        }
        v38 = v10;
        v9 = (uint64_t *)*v9;
      }
      while (v9);
    }
    memset(v36, 0, sizeof(v36));
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::resize((uint64_t)v36, (v38 - (_BYTE *)__p) >> 3);
    block[0] = (_QWORD *)MEMORY[0x24BDAC760];
    block[1] = (_QWORD *)0x40000000;
    block[2] = ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIdE4initEPNSt3__113unordered_mapIjNS3_10unique_ptrINS_7clusterIdEENS3_14default_deleteIS7_EEEENS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjSA_EEEEEEPNS_17convex_mesh_cacheIdEEjdEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke;
    block[3] = &__block_descriptor_tmp_6_1;
    block[4] = &__p;
    block[5] = v36;
    block[6] = (_QWORD *)a1;
    dispatch_apply((v38 - (_BYTE *)__p) >> 3, 0, block);
    v22 = *(_QWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a3 + 16);
    if (v21 != v22)
    {
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = (uint64_t *)(v22 + 16 * v23);
        v26 = v25 + 1;
        v27 = v25[1];
        if (v27 && !*(_QWORD *)(v27 + 8))
        {
          ++v24;
        }
        else
        {
          v28 = *v25;
          *v25 = *(_QWORD *)(v21 - 16);
          *(_QWORD *)(v21 - 16) = v28;
          v29 = *v26;
          *v26 = *(_QWORD *)(v21 - 8);
          *(_QWORD *)(v21 - 8) = v29;
          v21 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](*(_QWORD *)(a3 + 16) - 16);
          *(_QWORD *)(a3 + 16) = v21;
          v22 = *(_QWORD *)(a3 + 8);
        }
        v23 = v24;
      }
      while (v24 < (unint64_t)((v21 - v22) >> 4));
    }
    atomic_store(0, (unsigned int *)a3);
    v30 = (char *)__p;
    if (v38 != __p)
    {
      v31 = 0;
      v32 = a1 + 32;
      v33 = 1;
      do
      {
        v34 = (__int128 *)(v36[0] + 16 * v31);
        block[0] = &v30[8 * v31];
        v35 = std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>(v32, (unsigned int *)block[0], (uint64_t)&std::piecewise_construct, block);
        std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100]((uint64_t)(v35 + 3), v34);
        v31 = v33;
        v30 = (char *)__p;
        ++v33;
      }
      while (v31 < (v38 - (_BYTE *)__p) >> 3);
    }
    block[0] = v36;
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100]((void ***)block);
    if (__p)
    {
      v38 = (char *)__p;
      operator delete(__p);
    }
  }
}

void geom::cluster_parallel_merger<double>::deinit(_QWORD **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  uint64_t v13;

  v2 = (uint64_t)*a1;
  v4 = (*a1)[1];
  v3 = (*a1)[2];
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (uint64_t *)(v4 + 16 * v5);
      v8 = v7 + 1;
      v9 = v7[1];
      if (v9 && !*(_QWORD *)(v9 + 8))
      {
        ++v6;
      }
      else
      {
        v10 = *v7;
        *v7 = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = v10;
        v11 = *v8;
        *v8 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = v11;
        v3 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](*(_QWORD *)(v2 + 16) - 16);
        *(_QWORD *)(v2 + 16) = v3;
        v4 = *(_QWORD *)(v2 + 8);
      }
      v5 = v6;
    }
    while (v6 < (unint64_t)((v3 - v4) >> 4));
  }
  atomic_store(0, (unsigned int *)v2);
  for (i = a1[6]; i; i = (_QWORD *)*i)
  {
    v13 = i[4];
    if (v13 && !*(_QWORD *)(v13 + 8))
      geom::convex_mesh_cache<double>::move_unused_data(*a1, (uint64_t)(i + 3));
  }
  std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::clear((uint64_t)(a1 + 4));
  a1[3] = 0;
  *a1 = 0;
}

void geom::cluster_parallel_merger<double>::perform_merge(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v23;
  int v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t **v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  _BYTE *v41;
  void *__p;
  unint64_t *v43;
  unint64_t *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  _QWORD block[6];

  v47 = a2;
  v3 = HIDWORD(a2);
  if (HIDWORD(a2) >= a2)
    v4 = a2;
  else
    v4 = HIDWORD(a2);
  if (a2 > HIDWORD(a2))
    LODWORD(v3) = a2;
  v45 = v3;
  v46 = v4;
  v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[3], &v45);
  if (!v5)
    goto LABEL_58;
  v6 = v5;
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[3], &v46);
  if (!v7)
    goto LABEL_58;
  v8 = v7;
  v9 = *a1;
  v11 = *(_QWORD *)(*a1 + 8);
  v10 = *(_QWORD *)(*a1 + 16);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (uint64_t *)(v11 + 16 * v12);
      v15 = v14 + 1;
      v16 = v14[1];
      if (v16 && !*(_QWORD *)(v16 + 8))
      {
        ++v13;
      }
      else
      {
        v17 = *v14;
        *v14 = *(_QWORD *)(v10 - 16);
        *(_QWORD *)(v10 - 16) = v17;
        v18 = *v15;
        *v15 = *(_QWORD *)(v10 - 8);
        *(_QWORD *)(v10 - 8) = v18;
        v10 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](*(_QWORD *)(v9 + 16) - 16);
        *(_QWORD *)(v9 + 16) = v10;
        v11 = *(_QWORD *)(v9 + 8);
      }
      v12 = v13;
    }
    while (v13 < (unint64_t)((v10 - v11) >> 4));
  }
  atomic_store(0, (unsigned int *)v9);
  v19 = v8[3];
  v20 = v6[3];
  v21 = std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::find<geom::edge>(a1 + 4, (unsigned int *)&v47);
  if (!v21)
LABEL_58:
    abort();
  geom::cluster<double>::merge_into(v19, v20, (__int128 *)(v21 + 3), *a1);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__erase_unique<unsigned int>((_QWORD *)a1[3], &v45);
  v22 = (_QWORD *)a1[6];
  if (v22)
  {
    do
    {
      v23 = *((_DWORD *)v22 + 4);
      if (v23 == v45
        || ((v24 = *((_DWORD *)v22 + 5), v23 != v46) ? (v25 = v24 == v45) : (v25 = 1),
            !v25 ? (v26 = v24 == v46) : (v26 = 1),
            v26))
      {
        if (v22[3])
        {
          v27 = v22[4];
          if (v27)
          {
            if (!*(_QWORD *)(v27 + 8))
              geom::convex_mesh_cache<double>::move_unused_data((_QWORD *)*a1, (uint64_t)(v22 + 3));
          }
        }
        v28 = (_QWORD *)*v22;
        std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::remove(a1 + 4, v22, (uint64_t)block);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>>>>::reset[abi:nn180100]((uint64_t)block, 0);
      }
      else
      {
        v28 = (_QWORD *)*v22;
      }
      v22 = v28;
    }
    while (v28);
  }
  v43 = 0;
  v44 = 0;
  __p = 0;
  v29 = *(uint64_t ***)(a1[3] + 16);
  if (v29)
  {
    v30 = 0;
    do
    {
      v31 = *((unsigned int *)v29 + 4);
      v32 = v46;
      if ((_DWORD)v31 != v46)
      {
        if (v30 >= v44)
        {
          v33 = ((char *)v30 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_58;
          v34 = ((char *)v44 - (_BYTE *)__p) >> 2;
          if (v34 <= v33 + 1)
            v34 = v33 + 1;
          if ((unint64_t)((char *)v44 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v44, v35);
          else
            v36 = 0;
          v37 = (unint64_t *)&v36[8 * v33];
          *v37 = v31 | (v32 << 32);
          v30 = v37 + 1;
          v39 = (char *)__p;
          v38 = (char *)v43;
          if (v43 != __p)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *--v37 = v40;
            }
            while (v38 != v39);
            v38 = (char *)__p;
          }
          __p = v37;
          v43 = v30;
          v44 = (unint64_t *)&v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v30++ = v31 | ((unint64_t)v46 << 32);
        }
        v43 = v30;
      }
      v29 = (uint64_t **)*v29;
    }
    while (v29);
    v41 = __p;
  }
  else
  {
    v41 = 0;
    v30 = 0;
  }
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIdE13perform_mergeENS_4edgeEEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke;
  block[3] = &__block_descriptor_tmp_7;
  block[4] = a1;
  block[5] = &__p;
  dispatch_apply(((char *)v30 - v41) >> 3, 0, block);
  if (__p)
  {
    v43 = (unint64_t *)__p;
    operator delete(__p);
  }
}

void geom::cluster_parallel_merger<double>::compute_merged_mesh(uint64_t *a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int64x2_t *v11;
  unint64_t *v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  std::vector<int> __p;
  void *v33;
  int64x2_t v34;

  v6 = *a1;
  do
    v7 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v7 + 1, (unsigned int *)v6));
  v9 = v6 + 8;
  v8 = *(_QWORD *)(v6 + 8);
  if (v7 >= (unint64_t)((*(_QWORD *)(v9 + 8) - v8) >> 4))
  {
    v14 = (int64x2_t *)operator new(0xA0uLL);
    v15 = vdupq_n_s64(0x7FF0000000000000uLL);
    v14->i64[1] = 0;
    v14[1].i64[0] = 0;
    v16.i64[0] = 0x7FF0000000000000;
    v14[3] = v15;
    v14[4] = v16;
    v15.i64[0] = 0xFFF0000000000000;
    v14[5] = vdupq_n_s64(0xFFF0000000000000);
    v14[6] = v15;
    v15.i16[3] = 0;
    v14[7] = (int64x2_t)v15.u64[0];
    v14[8] = (int64x2_t)v15.u64[0];
    v14[9] = (int64x2_t)v15.u64[0];
    v14->i64[0] = (uint64_t)&off_24F14A150;
    v14[2] = vdupq_n_s64(0x7FF8000000000000uLL);
    v11 = v14 + 2;
    *a3 = v14 + 2;
    a3[1] = v14;
  }
  else
  {
    v10 = *(_OWORD *)(v8 + 16 * v7);
    *(_OWORD *)a3 = v10;
    v11 = (int64x2_t *)v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  v17 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[3], a2);
  if (!v17
    || (v18 = v17,
        (v19 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((_QWORD *)a1[3], a2 + 1)) == 0))
  {
    abort();
  }
  v20 = v19;
  v21 = v18[3];
  v22 = *(uint64_t **)(v21 + 168);
  v23 = *(uint64_t **)(v21 + 176);
  while (v22 != v23)
  {
    v24 = *v22;
    v22 += 2;
    _ZNSt3__121__unwrap_and_dispatchB8nn180100INS_10__overloadINS_11__copy_loopINS_17_ClassicAlgPolicyEEENS_14__copy_trivialEEENS_11__wrap_iterIPDv3_dEESA_NS_20back_insert_iteratorINS_6vectorIS8_NS_9allocatorIS8_EEEEEELi0EEENS_4pairIT0_T2_EESI_T1_SJ_(*(_OWORD **)(v24 + 80), *(_OWORD **)(v24 + 88), (void **)&v11[5]);
  }
  v25 = v20[3];
  v26 = *(uint64_t **)(v25 + 168);
  v27 = *(uint64_t **)(v25 + 176);
  while (v26 != v27)
  {
    v28 = *v26;
    v26 += 2;
    _ZNSt3__121__unwrap_and_dispatchB8nn180100INS_10__overloadINS_11__copy_loopINS_17_ClassicAlgPolicyEEENS_14__copy_trivialEEENS_11__wrap_iterIPDv3_dEESA_NS_20back_insert_iteratorINS_6vectorIS8_NS_9allocatorIS8_EEEEEELi0EEENS_4pairIT0_T2_EESI_T1_SJ_(*(_OWORD **)(v28 + 80), *(_OWORD **)(v28 + 88), (void **)&v11[5]);
  }
  geom::convex_hull_triangulated_3<double>((v11[5].i64[1] - v11[5].i64[0]) >> 5, (float64x2_t *)v11[5].i64[0], &v11[6].i64[1], 0xFFFFFFFF, 0.0);
  v33 = 0;
  v34 = 0uLL;
  memset(&__p, 0, sizeof(__p));
  geom::crunch_triangle_mesh<double>(v11[5].i64, (char **)&v33, (int **)&v11[6].i64[1], &__p);
  v29 = (void *)v11[5].i64[0];
  if (v29)
  {
    v11[5].i64[1] = (uint64_t)v29;
    operator delete(v29);
  }
  v30 = v33;
  v11[5].i64[0] = (uint64_t)v33;
  v31 = v34.i64[0];
  *(int64x2_t *)((char *)v11 + 88) = v34;
  v34 = 0uLL;
  v33 = 0;
  *(double *)v11->i64 = geom::triangle_mesh_volume_3<double>((uint64_t)v30, (v31 - (uint64_t)v30) >> 5, v11[6].i64[1], (v11[7].i64[0] - v11[6].i64[1]) >> 2);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v33)
  {
    v34.i64[0] = (uint64_t)v33;
    operator delete(v33);
  }
}

uint64_t std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _OWORD *v13;
  int32x4_t v14;
  __int128 v15;
  char *v16;
  char *v17;
  int32x4_t v18;
  __int128 v19;
  _QWORD v20[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(result - 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = &v7[15 * a2];
      v14 = vdupq_n_s32(0x7F800000u);
      *(_QWORD *)&v15 = 0x7F0000007FLL;
      *((_QWORD *)&v15 + 1) = 0x7F0000007FLL;
      do
      {
        v7[8] = 0uLL;
        v7[9] = 0uLL;
        v7[6] = 0uLL;
        v7[7] = 0uLL;
        v7[4] = 0uLL;
        v7[5] = 0uLL;
        v7[2] = 0uLL;
        v7[3] = 0uLL;
        *v7 = 0uLL;
        v7[1] = 0uLL;
        v7[10] = 0uLL;
        v7[11] = v14;
        v7[12] = v15;
        v7[13] = v14;
        v7[14] = v15;
        v7 += 15;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x111111111111111)
      abort();
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x88888888888888)
      v11 = 0x111111111111111;
    else
      v11 = v9;
    v20[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>(result, v11);
    else
      v12 = 0;
    v16 = &v12[240 * v8];
    v20[0] = v12;
    v20[1] = v16;
    v20[3] = &v12[240 * v11];
    v17 = &v16[240 * a2];
    v18 = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v19 = 0x7F0000007FLL;
    *((_QWORD *)&v19 + 1) = 0x7F0000007FLL;
    do
    {
      *((_OWORD *)v16 + 8) = 0uLL;
      *((_OWORD *)v16 + 9) = 0uLL;
      *((_OWORD *)v16 + 6) = 0uLL;
      *((_OWORD *)v16 + 7) = 0uLL;
      *((_OWORD *)v16 + 4) = 0uLL;
      *((_OWORD *)v16 + 5) = 0uLL;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      *(_OWORD *)v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_OWORD *)v16 + 10) = 0uLL;
      *((int32x4_t *)v16 + 11) = v18;
      *((_OWORD *)v16 + 12) = v19;
      *((int32x4_t *)v16 + 13) = v18;
      *((_OWORD *)v16 + 14) = v19;
      v16 += 240;
    }
    while (v16 != v17);
    v20[2] = v17;
    std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::__swap_out_circular_buffer(a1, v20);
    return std::__split_buffer<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context> &>::~__split_buffer((uint64_t)v20);
  }
  return result;
}

void std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 240;
      v4 -= 240;
      std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>::construct[abi:nn180100]<geom::cluster_parallel_clipper<float>::clipping_context,geom::cluster_parallel_clipper<float>::clipping_context>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(240 * a2);
}

__n128 std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>::construct[abi:nn180100]<geom::cluster_parallel_clipper<float>::clipping_context,geom::cluster_parallel_clipper<float>::clipping_context>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  result = *(__n128 *)(a3 + 176);
  v4 = *(_OWORD *)(a3 + 192);
  v5 = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a2 + 224) = v5;
  *(__n128 *)(a2 + 176) = result;
  *(_OWORD *)(a2 + 192) = v4;
  return result;
}

uint64_t std::__split_buffer<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 240;
    geom::cluster_parallel_clipper<float>::clipping_context::~clipping_context(i - 240);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIfE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_1(uint64_t a1, unint64_t a2, double a3, __n128 a4, double a5, double a6, double a7, double a8, float32x4_t a9, float32x4_t a10)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float32x4_t *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v10 = *(_QWORD **)(a1 + 32);
  v11 = (_QWORD *)v10[5];
  v12 = v11[14];
  v13 = v11[15] - v12;
  v14 = v10[7];
  v15 = v10[8];
  v16 = (v14 + (v13 >> 4) - 1) / v14;
  v18 = v11 + 11;
  v17 = v11[11];
  v19 = v18[1] - v17;
  v20 = (v15 + (v19 >> 3) - 1) / v15 + v16;
  v21 = a2 / v20;
  v22 = a2 % v20;
  v23 = (float32x4_t *)(v10[3] + 32 * v21);
  v24 = v22 >= v16;
  v25 = v22 - v16;
  if (v24)
  {
    v29 = v19 >> 3;
    if (v25 * v15 + v15 < v19 >> 3)
      v29 = v25 * v15 + v15;
    geom::cluster_parallel_clipper<float>::interior_component_work_item((uint64_t)v10, *v10 + 240 * a2, v23, (uint64_t *)(v17 + 8 * v25 * v15), v29 - v25 * v15, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else
  {
    v26 = v13 >> 4;
    v27 = v22 * v14;
    v28 = v22 * v14 + v14;
    if (v28 >= v26)
      v28 = v26;
    geom::cluster_parallel_clipper<float>::boundary_component_work_item((uint64_t)v10, *v10 + 240 * a2, v23, (__int128 *)(v12 + 16 * v27), v28 - v27);
  }
}

uint64_t *std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__erase_unique<geom::edge>(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::find<geom::edge>(a1, a2);
  if (result)
  {
    std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<geom::edge,geom::edge_hash,std::equal_to<geom::edge>,std::allocator<geom::edge>>::__emplace_unique_key_args<geom::edge,geom::edge const&>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  if (v7 >= v6)
    v8 = *a2;
  else
    v8 = a2[1];
  if (v6 <= v7)
    v9 = a2[1];
  else
    v9 = *a2;
  v10 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v7 >= v6)
          v15 = *a2;
        else
          v15 = a2[1];
        if (v6 <= v7)
          LODWORD(v6) = a2[1];
        do
        {
          v16 = v14[1];
          if (v16 == v10)
          {
            v18 = *((_DWORD *)v14 + 4);
            v17 = *((_DWORD *)v14 + 5);
            if (v17 >= v18)
              v19 = *((_DWORD *)v14 + 4);
            else
              v19 = *((_DWORD *)v14 + 5);
            if (v18 > v17)
              v17 = *((_DWORD *)v14 + 4);
            if (v19 == v15 && v17 == (_DWORD)v6)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = *a3;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v26);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v28)
  {
    *v14 = *v28;
LABEL_58:
    *v28 = v14;
    goto LABEL_59;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v27 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v29 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

uint64_t std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::__append(uint64_t *a1, unint64_t a2, double a3, double a4, double a5, __n128 a6, __n128 a7)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  char *v21;
  char *v22;
  int64x2_t v23;
  int64x2_t v24;
  _QWORD v25[5];

  v11 = a1[2];
  result = (uint64_t)(a1 + 2);
  v10 = v11;
  v12 = *(_QWORD *)(result - 8);
  if (0x86BCA1AF286BCA1BLL * ((v11 - v12) >> 4) >= a2)
  {
    if (a2)
    {
      v18 = v12 + 304 * a2;
      v19 = vdupq_n_s64(0x7FF0000000000000uLL);
      v20 = vdupq_n_s64(0xFFF0000000000000);
      do
      {
        *(_OWORD *)(v12 + 128) = 0uLL;
        *(_OWORD *)(v12 + 144) = 0uLL;
        *(_OWORD *)(v12 + 96) = 0uLL;
        *(_OWORD *)(v12 + 112) = 0uLL;
        *(_OWORD *)(v12 + 64) = 0uLL;
        *(_OWORD *)(v12 + 80) = 0uLL;
        *(_OWORD *)(v12 + 32) = 0uLL;
        *(_OWORD *)(v12 + 48) = 0uLL;
        *(_OWORD *)v12 = 0uLL;
        *(_OWORD *)(v12 + 16) = 0uLL;
        *(_OWORD *)(v12 + 160) = 0uLL;
        *(int64x2_t *)(v12 + 176) = v19;
        a6.n128_u64[0] = 0x7FF0000000000000;
        *(__n128 *)(v12 + 192) = a6;
        *(int64x2_t *)(v12 + 208) = v20;
        a7.n128_u64[0] = 0xFFF0000000000000;
        *(__n128 *)(v12 + 224) = a7;
        *(int64x2_t *)(v12 + 240) = v19;
        *(__n128 *)(v12 + 256) = a6;
        *(int64x2_t *)(v12 + 272) = v20;
        *(__n128 *)(v12 + 288) = a7;
        v12 += 304;
      }
      while (v12 != v18);
      v12 = v18;
    }
    a1[1] = v12;
  }
  else
  {
    v13 = 0x86BCA1AF286BCA1BLL * ((v12 - *a1) >> 4);
    v14 = v13 + a2;
    if (v13 + a2 > 0xD79435E50D7943)
      abort();
    v15 = 0x86BCA1AF286BCA1BLL * ((v10 - *a1) >> 4);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x6BCA1AF286BCA1)
      v16 = 0xD79435E50D7943;
    else
      v16 = v14;
    v25[4] = result;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>(result, v16);
    else
      v17 = 0;
    v21 = &v17[304 * v13];
    v25[0] = v17;
    v25[1] = v21;
    v25[3] = &v17[304 * v16];
    v22 = &v21[304 * a2];
    v23 = vdupq_n_s64(0x7FF0000000000000uLL);
    v24 = vdupq_n_s64(0xFFF0000000000000);
    do
    {
      *((_OWORD *)v21 + 8) = 0uLL;
      *((_OWORD *)v21 + 9) = 0uLL;
      *((_OWORD *)v21 + 6) = 0uLL;
      *((_OWORD *)v21 + 7) = 0uLL;
      *((_OWORD *)v21 + 4) = 0uLL;
      *((_OWORD *)v21 + 5) = 0uLL;
      *((_OWORD *)v21 + 2) = 0uLL;
      *((_OWORD *)v21 + 3) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v21 + 1) = 0uLL;
      *((_OWORD *)v21 + 10) = 0uLL;
      *((int64x2_t *)v21 + 11) = v23;
      a6.n128_u64[0] = 0x7FF0000000000000;
      *((__n128 *)v21 + 12) = a6;
      *((int64x2_t *)v21 + 13) = v24;
      a7.n128_u64[0] = 0xFFF0000000000000;
      *((__n128 *)v21 + 14) = a7;
      *((int64x2_t *)v21 + 15) = v23;
      *((__n128 *)v21 + 16) = a6;
      *((int64x2_t *)v21 + 17) = v24;
      *((__n128 *)v21 + 18) = a7;
      v21 += 304;
    }
    while (v21 != v22);
    v25[2] = v22;
    std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::__swap_out_circular_buffer(a1, v25);
    return std::__split_buffer<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context> &>::~__split_buffer((uint64_t)v25);
  }
  return result;
}

void std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 304;
      v4 -= 304;
      std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>::construct[abi:nn180100]<geom::cluster_parallel_clipper<double>::clipping_context,geom::cluster_parallel_clipper<double>::clipping_context>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD79435E50D7944)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(304 * a2);
}

__n128 std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>::construct[abi:nn180100]<geom::cluster_parallel_clipper<double>::clipping_context,geom::cluster_parallel_clipper<double>::clipping_context>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  v3 = *(_OWORD *)(a3 + 288);
  v5 = *(_OWORD *)(a3 + 240);
  v4 = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(a3 + 272);
  *(_OWORD *)(a2 + 288) = v3;
  *(_OWORD *)(a2 + 240) = v5;
  *(_OWORD *)(a2 + 256) = v4;
  result = *(__n128 *)(a3 + 176);
  v7 = *(_OWORD *)(a3 + 192);
  v8 = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a2 + 224) = v8;
  *(__n128 *)(a2 + 176) = result;
  *(_OWORD *)(a2 + 192) = v7;
  return result;
}

uint64_t std::__split_buffer<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 304;
    geom::cluster_parallel_clipper<float>::clipping_context::~clipping_context(i - 304);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIdE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke_1(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float64x2_t *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (_QWORD *)v2[5];
  v4 = v3[21];
  v5 = v3[22] - v4;
  v6 = v2[7];
  v7 = v2[8];
  v8 = (v6 + (v5 >> 4) - 1) / v6;
  v10 = v3 + 18;
  v9 = v3[18];
  v11 = v10[1] - v9;
  v12 = (v7 + (v11 >> 3) - 1) / v7 + v8;
  v13 = a2 / v12;
  v14 = a2 % v12;
  v15 = (float64x2_t *)(v2[3] + 48 * v13);
  v16 = v14 >= v8;
  v17 = v14 - v8;
  if (v16)
  {
    v21 = v11 >> 3;
    if (v17 * v7 + v7 < v11 >> 3)
      v21 = v17 * v7 + v7;
    geom::cluster_parallel_clipper<double>::interior_component_work_item((uint64_t)v2, *v2 + 304 * a2, v15, (uint64_t *)(v9 + 8 * v17 * v7), v21 - v17 * v7);
  }
  else
  {
    v18 = v5 >> 4;
    v19 = v14 * v6;
    v20 = v14 * v6 + v6;
    if (v20 >= v18)
      v20 = v18;
    geom::cluster_parallel_clipper<double>::boundary_component_work_item((uint64_t)v2, *v2 + 304 * a2, v15, (float64x2_t **)(v4 + 16 * v19), v20 - v19);
  }
}

void std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v24 = v15;
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((uint64_t)&v22);
  }
}

void ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIfE4initEPNSt3__113unordered_mapIjNS3_10unique_ptrINS_7clusterIfEENS3_14default_deleteIS7_EEEENS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjSA_EEEEEEPNS_17convex_mesh_cacheIfEEjfEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke(_QWORD **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  geom::cluster_parallel_merger<float>::compute_merged_mesh(a1[6], (unsigned int *)(*a1[4] + 8 * a2), &v7);
  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](*a1[5] + 16 * a2, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  _QWORD *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD v33[2];
  char v34;

  v7 = *a2;
  v8 = a2[1];
  if (v8 >= v7)
    v9 = *a2;
  else
    v9 = a2[1];
  if (v7 <= v8)
    v10 = a2[1];
  else
    v10 = *a2;
  v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v8 >= v7)
          v16 = *a2;
        else
          v16 = a2[1];
        if (v7 <= v8)
          LODWORD(v7) = a2[1];
        do
        {
          v17 = v15[1];
          if (v17 == v11)
          {
            v19 = *((_DWORD *)v15 + 4);
            v18 = *((_DWORD *)v15 + 5);
            if (v18 >= v19)
              v20 = *((_DWORD *)v15 + 4);
            else
              v20 = *((_DWORD *)v15 + 5);
            if (v19 > v18)
              v18 = *((_DWORD *)v15 + 4);
            if (v20 == v16 && v18 == (_DWORD)v7)
              return v15;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v17 >= v12)
                v17 %= v12;
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v22 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x28uLL);
  v33[0] = v15;
  v33[1] = a1 + 16;
  *v15 = 0;
  v15[1] = v11;
  v15[2] = **a4;
  v15[3] = 0;
  v15[4] = 0;
  v34 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v12 || (float)(v24 * (float)v12) < v23)
  {
    v25 = 1;
    if (v12 >= 3)
      v25 = (v12 & (v12 - 1)) != 0;
    v26 = v25 | (2 * v12);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v28);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *v15 = *v30;
LABEL_58:
    *v30 = v15;
    goto LABEL_59;
  }
  *v15 = *v22;
  *v22 = v15;
  *(_QWORD *)(v29 + 8 * v4) = v22;
  if (*v15)
  {
    v31 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v31 >= v12)
        v31 %= v12;
    }
    else
    {
      v31 &= v12 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_58;
  }
LABEL_59:
  v33[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>>>>::reset[abi:nn180100]((uint64_t)v33, 0);
  return v15;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100]((uint64_t)v2 + 24);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIfE13perform_mergeENS_4edgeEEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  unsigned int *v9;

  v2 = *(uint64_t **)(a1 + 32);
  v3 = (unsigned int *)(**(_QWORD **)(a1 + 40) + 8 * a2);
  geom::cluster_parallel_merger<float>::compute_merged_mesh(v2, v3, &v8);
  v9 = v3;
  v4 = std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>((uint64_t)(v2 + 3), v3, (uint64_t)&std::piecewise_construct, (_QWORD **)&v9);
  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100]((uint64_t)(v4 + 3), &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

_OWORD *_ZNSt3__121__unwrap_and_dispatchB8nn180100INS_10__overloadINS_11__copy_loopINS_17_ClassicAlgPolicyEEENS_14__copy_trivialEEENS_11__wrap_iterIPDv3_fEESA_NS_20back_insert_iteratorINS_6vectorIS8_NS_9allocatorIS8_EEEEEELi0EEENS_4pairIT0_T2_EESI_T1_SJ_(_OWORD *a1, _OWORD *a2, void **a3)
{
  _OWORD *v3;
  _OWORD *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8nn180100ERKS2_(&v6, v3++);
  while (v3 != v4);
  return v4;
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8nn180100ERKS2_(void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_OWORD *)v16 = *a2;
    v10 = v16 + 16;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIdE4initEPNSt3__113unordered_mapIjNS3_10unique_ptrINS_7clusterIdEENS3_14default_deleteIS7_EEEENS3_4hashIjEENS3_8equal_toIjEENS3_9allocatorINS3_4pairIKjSA_EEEEEEPNS_17convex_mesh_cacheIdEEjdEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke(_QWORD **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  geom::cluster_parallel_merger<double>::compute_merged_mesh(a1[6], (unsigned int *)(*a1[4] + 8 * a2), &v7);
  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100](*a1[5] + 16 * a2, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN4geom14dispatch_applyIZNS_23cluster_parallel_mergerIdE13perform_mergeENS_4edgeEEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  unsigned int *v9;

  v2 = *(uint64_t **)(a1 + 32);
  v3 = (unsigned int *)(**(_QWORD **)(a1 + 40) + 8 * a2);
  geom::cluster_parallel_merger<double>::compute_merged_mesh(v2, v3, &v8);
  v9 = v3;
  v4 = std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>((uint64_t)(v2 + 4), v3, (uint64_t)&std::piecewise_construct, (_QWORD **)&v9);
  std::shared_ptr<geom::convex_mesh<float>>::operator=[abi:nn180100]((uint64_t)(v4 + 3), &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

_OWORD *_ZNSt3__121__unwrap_and_dispatchB8nn180100INS_10__overloadINS_11__copy_loopINS_17_ClassicAlgPolicyEEENS_14__copy_trivialEEENS_11__wrap_iterIPDv3_dEESA_NS_20back_insert_iteratorINS_6vectorIS8_NS_9allocatorIS8_EEEEEELi0EEENS_4pairIT0_T2_EESI_T1_SJ_(_OWORD *a1, _OWORD *a2, void **a3)
{
  _OWORD *v3;
  _OWORD *v4;
  void **v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_dNS_9allocatorIS2_EEEEEaSB8nn180100ERKS2_(&v6, v3);
    v3 += 2;
  }
  while (v3 != v4);
  return v4;
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv3_dNS_9allocatorIS2_EEEEEaSB8nn180100ERKS2_(void ***a1, _OWORD *a2)
{
  void **v4;
  _OWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v12 = ((char *)v5 - (_BYTE *)*v4) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      abort();
    v14 = v8 - (_QWORD)*v4;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v18 = &v16[32 * v15];
    v19 = a2[1];
    *(_OWORD *)v17 = *a2;
    *((_OWORD *)v17 + 1) = v19;
    v11 = v17 + 32;
    v21 = (char *)*v4;
    v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        v22 = *((_OWORD *)v20 - 2);
        v23 = *((_OWORD *)v20 - 1);
        v20 -= 32;
        *((_OWORD *)v17 - 2) = v22;
        *((_OWORD *)v17 - 1) = v23;
        v17 -= 32;
      }
      while (v20 != v21);
      v20 = (char *)*v4;
    }
    *v4 = v17;
    v4[1] = v11;
    v4[2] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v10 = a2[1];
    *v5 = *a2;
    v5[1] = v10;
    v11 = v5 + 2;
  }
  v4[1] = v11;
  return a1;
}

float32x2_t geom::spoke<float>::evaluate_at(float32x2_t *a1, float a2)
{
  float v2;

  v2 = a1[2].f32[0];
  if (fabsf(v2) <= 0.000005)
    return *a1;
  else
    return vmla_n_f32(*a1, a1[1], v2 * (float)(a2 - a1[3].f32[0]));
}

float32x2_t *geom::spoke<float>::halt(float32x2_t *result, float32_t a2)
{
  float v2;
  float32x2_t v3;

  v2 = result[2].f32[0];
  if (fabsf(v2) <= 0.000005)
    v3 = *result;
  else
    v3 = vmla_n_f32(*result, result[1], v2 * (float)(a2 - result[3].f32[0]));
  *result = v3;
  result[3].f32[0] = a2;
  result[2].i32[0] = 0;
  result[2].i16[2] = 256;
  return result;
}

uint64_t geom::spoke<float>::spoke(uint64_t a1, double a2, float32x2_t a3, float32x2_t a4, float a5)
{
  float32x2_t v6;
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  __int32 v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  __int32 v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float32x2_t v27;
  BOOL v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int32x2_t v39;
  float32x2_t v40;

  *(_QWORD *)(a1 + 8) = 0;
  *(double *)a1 = a2;
  *(float *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 21) = 0;
  v6 = vsub_f32(*(float32x2_t *)&a2, a3);
  v7 = (int32x2_t)vmul_f32(v6, v6);
  v8 = vsub_f32(*(float32x2_t *)&a2, a4);
  v9 = (int32x2_t)vmul_f32(v8, v8);
  v10 = vadd_f32((float32x2_t)vzip1_s32(v9, v7), (float32x2_t)vzip2_s32(v9, v7));
  v11 = (float32x2_t)vdup_n_s32(0x36A7C5ACu);
  v12 = vcge_f32(v11, vsqrt_f32(v10));
  v13 = v12.i32[1];
  v14 = 0;
  v15 = 0;
  if ((v12.i8[4] & 1) == 0)
  {
    v11 = vsub_f32(a3, *(float32x2_t *)&a2);
    v16 = vmul_f32(v11, v11);
    v16.i32[0] = vadd_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)).u32[0];
    v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
    v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
    v15 = vmul_n_f32(v11, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
  }
  v19 = v12.i32[0];
  if ((v12.i8[0] & 1) == 0)
  {
    v20 = vsub_f32(a4, *(float32x2_t *)&a2);
    v21 = vmul_f32(v20, v20);
    v21.i32[0] = vadd_f32(v21, (float32x2_t)vdup_lane_s32((int32x2_t)v21, 1)).u32[0];
    v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
    v11 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23)));
    v14 = vmul_n_f32(v20, v11.f32[0]);
  }
  v24 = vadd_f32(v15, v14);
  v25 = vsub_f32(v15, v14);
  if (sqrtf(vaddv_f32(vmul_f32(v25, v25))) <= 0.000005)
  {
    *(_BYTE *)(a1 + 20) = 0;
    v27 = vmul_f32(v24, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)(a1 + 8) = v27;
    v28 = sqrtf(vaddv_f32(vmul_f32(v27, v27))) > 0.000005;
    v26 = 0.0;
    if (v28)
      v26 = 1.0;
  }
  else if (((v13 | v19) & 1) != 0)
  {
    *(_BYTE *)(a1 + 20) = 0;
    v26 = 0.0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v11.f32[0] = sqrtf(vaddv_f32(vmul_f32(v24, v24)));
    if (fabsf(v11.f32[0]) <= 0.000005)
    {
      *(_BYTE *)(a1 + 20) = 0;
      *(float *)&a2 = -v14.f32[1];
      *(int32x2_t *)(a1 + 8) = vzip1_s32(*(int32x2_t *)&a2, (int32x2_t)v14);
      v26 = 1.0;
    }
    else
    {
      v39 = (int32x2_t)v11;
      v40 = v14;
      v29.f32[0] = _simd_orient_vf2((simd_float2)vsub_f32(a3, *(float32x2_t *)&a2), (simd_float2)vsub_f32(a4, *(float32x2_t *)&a2));
      v30.i32[0] = 0;
      v31 = vdiv_f32(v24, (float32x2_t)vdup_lane_s32(v39, 0));
      *(_BYTE *)(a1 + 20) = v29.f32[0] > 0.0;
      *(int8x8_t *)(a1 + 8) = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v29, v30), 0), (int8x8_t)vneg_f32(v31), (int8x8_t)v31);
      v32 = vaddv_f32(vmul_f32(v15, v40));
      if (v32 <= 1.0)
        v33 = v32;
      else
        v33 = 1.0;
      if (v32 >= -1.0)
        v34 = v33;
      else
        v34 = -1.0;
      v35 = acosf(v34);
      v36 = sinf(v35 * 0.5);
      v37 = fabsf(v36);
      v26 = 1.0 / v36;
      if (v37 <= 0.000005)
        v26 = 1.0;
    }
  }
  *(float *)(a1 + 16) = v26;
  return a1;
}

uint64_t geom::spoke<float>::spoke(uint64_t result, double a2, float a3)
{
  *(float *)(result + 24) = a3;
  *(_WORD *)(result + 20) = 256;
  *(double *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

__n128 geom::spoke<double>::evaluate_at(float64x2_t *a1, double a2)
{
  double v2;
  __n128 result;

  v2 = a1[2].f64[0];
  if (fabs(v2) <= 1.0e-10)
    return *(__n128 *)a1;
  else
    result.n128_u64[0] = *(_OWORD *)&vmlaq_n_f64(*a1, a1[1], v2 * (a2 - a1[3].f64[0]));
  return result;
}

uint64_t geom::spoke<double>::halt(uint64_t result, double a2)
{
  double v2;
  float64x2_t v3;

  v2 = *(double *)(result + 32);
  if (fabs(v2) <= 1.0e-10)
    v3 = *(float64x2_t *)result;
  else
    v3 = vmlaq_n_f64(*(float64x2_t *)result, *(float64x2_t *)(result + 16), v2 * (a2 - *(double *)(result + 48)));
  *(float64x2_t *)result = v3;
  *(double *)(result + 48) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_WORD *)(result + 40) = 256;
  return result;
}

__n128 *geom::spoke<double>::spoke(__n128 *a1, __n128 a2, float64x2_t a3, float64x2_t a4, double a5)
{
  float64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  int64x2_t v9;
  int32x2_t v10;
  __int32 v11;
  int64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  __int32 v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v24;
  BOOL v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  double v33;
  long double v34;
  double v35;
  uint64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;

  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  *a1 = a2;
  a1[3].n128_f64[0] = a5;
  a1[2].n128_u8[9] = 0;
  v6 = vsubq_f64((float64x2_t)a2, a3);
  v7 = (int64x2_t)vmulq_f64(v6, v6);
  v8 = vsubq_f64((float64x2_t)a2, a4);
  v9 = (int64x2_t)vmulq_f64(v8, v8);
  v10 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL), vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v9, v7), (float64x2_t)vzip2q_s64(v9, v7)))));
  v11 = v10.i32[1];
  v12 = 0uLL;
  v13 = 0uLL;
  if ((v10.i8[4] & 1) == 0)
  {
    v14 = vsubq_f64(a3, (float64x2_t)a2);
    v13 = vmulq_n_f64(v14, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v14, v14))));
  }
  v15 = v10.i32[0];
  if ((v10.i8[0] & 1) == 0)
  {
    v16 = vsubq_f64(a4, (float64x2_t)a2);
    v12 = (int64x2_t)vmulq_n_f64(v16, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v16, v16))));
  }
  v17 = vaddq_f64(v13, (float64x2_t)v12);
  v18 = vsubq_f64(v13, (float64x2_t)v12);
  if (sqrt(vaddvq_f64(vmulq_f64(v18, v18))) <= 1.0e-10)
  {
    a1[2].n128_u8[8] = 0;
    __asm { FMOV            V0.2D, #0.5 }
    v24 = vmulq_f64(v17, _Q0);
    a1[1] = (__n128)v24;
    v25 = sqrt(vaddvq_f64(vmulq_f64(v24, v24))) > 1.0e-10;
    v26 = 0.0;
    if (v25)
      v26 = 1.0;
    goto LABEL_10;
  }
  if (((v11 | v15) & 1) == 0)
  {
    v27 = sqrt(vaddvq_f64(vmulq_f64(v17, v17)));
    if (fabs(v27) <= 1.0e-10)
    {
      a1[2].n128_u8[8] = 0;
      a2.n128_f64[0] = -*(double *)&v12.i64[1];
      a1[1] = (__n128)vzip1q_s64((int64x2_t)a2, v12);
    }
    else
    {
      v39 = v13;
      v40 = (float64x2_t)v12;
      v37 = *(_QWORD *)&v27;
      v38 = v17;
      v28.f64[0] = _simd_orient_vd2((simd_double2)vsubq_f64(a3, (float64x2_t)a2), (simd_double2)vsubq_f64(a4, (float64x2_t)a2));
      v29.f64[0] = 0.0;
      v30 = vdivq_f64(v38, (float64x2_t)vdupq_lane_s64(v37, 0));
      a1[2].n128_u8[8] = v28.f64[0] > 0.0;
      a1[1] = (__n128)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v28, v29).i64[0], 0), (int8x16_t)vnegq_f64(v30), (int8x16_t)v30);
      v31 = vaddvq_f64(vmulq_f64(v39, v40));
      if (v31 <= 1.0)
        v32 = v31;
      else
        v32 = 1.0;
      if (v31 >= -1.0)
        v33 = v32;
      else
        v33 = -1.0;
      v34 = acos(v33);
      v35 = sin(v34 * 0.5);
      if (fabs(v35) > 1.0e-10)
      {
        v26 = 1.0 / v35;
LABEL_10:
        a1[2].n128_f64[0] = v26;
        return a1;
      }
    }
    a1[2].n128_u64[0] = 0x3FF0000000000000;
    return a1;
  }
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u8[8] = 0;
  a1[2].n128_u64[0] = 0;
  return a1;
}

__n128 *geom::spoke<double>::spoke(__n128 *result, __n128 a2, double a3)
{
  result[3].n128_f64[0] = a3;
  result[2].n128_u16[4] = 256;
  *result = a2;
  result[1].n128_u64[1] = 0;
  result[2].n128_u64[0] = 0;
  result[1].n128_u64[0] = 0;
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::straight_skeleton_evaluator(uint64_t a1, float32x2_t *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  float32x2_t v10;
  uint64_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  float32x2_t *v18;
  unint64_t v19;
  float32x2_t v20;
  unint64_t v21;
  const float *v22;
  float32x2_t v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  const void *v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  __int128 v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  double v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _OWORD *v101;
  void *v102;
  float32x2_t *v104;
  unsigned int *v105;
  unsigned int *v106;
  uint64_t v107;
  __int128 v108;
  float32x2_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[2];
  uint64_t v115;
  void *__dst;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  _BYTE v120[32];
  _BYTE v121[25];
  _BYTE *v122;
  _BYTE *v123;
  _DWORD *v124;
  uint64_t v125;

  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  std::vector<std::optional<unsigned int>>::resize((_QWORD *)(a1 + 144), a3);
  v104 = a2;
  v10 = (float32x2_t)vdup_n_s32(0x7F800000u);
  if (a3)
  {
    v11 = 8 * a3;
    v12 = (float32x2_t)0x7F0000007FLL;
    do
    {
      v13 = *a2++;
      v10 = vminnm_f32(v13, v10);
      v12 = vmaxnm_f32(v13, v12);
      v11 -= 8;
    }
    while (v11);
  }
  else
  {
    v12 = (float32x2_t)0x7F0000007FLL;
  }
  *(float32x2_t *)(a1 + 200) = vmul_f32(vadd_f32(v10, v12), (float32x2_t)0x3F0000003F000000);
  v109 = vsub_f32(v12, v10);
  v14 = *(float *)((unint64_t)&v109 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                   * (*(_QWORD *)&vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v109, 1), v109) & 1)));
  if (fabsf(v14) <= 0.000005)
    v14 = 1.0;
  *(float *)(a1 + 208) = v14;
  if (a5)
  {
    v15 = 0;
    v105 = &a4[a5];
    do
    {
      v106 = a4;
      v107 = *a4;
      if ((_DWORD)v107 != v15)
      {
        v16 = 0;
        v17 = 0;
        v18 = &v104[v15];
        v19 = v107 - v15;
        do
        {
          v20 = v18[v16];
          v21 = (v19 - 1 + v16) % v19;
          v16 = (v17 + 1);
          v22 = (const float *)(a1 + 208);
          v23 = vld1_dup_f32(v22);
          geom::spoke<float>::spoke((uint64_t)v120, COERCE_DOUBLE(vdiv_f32(vsub_f32(v20, *(float32x2_t *)(a1 + 200)), v23)), vdiv_f32(vsub_f32(v18[v21], *(float32x2_t *)(a1 + 200)), v23), vdiv_f32(vsub_f32(v18[v16 % v19], *(float32x2_t *)(a1 + 200)), v23), 0.0);
          *(_DWORD *)v121 = v15 + v21;
          *(_DWORD *)&v121[4] = v15 + v16 % v19;
          v24 = v17 + v15;
          *(_DWORD *)&v121[8] = v24;
          v121[12] = 0;
          v121[16] = 0;
          v121[20] = 0;
          v121[24] = 0;
          v25 = operator new(4uLL);
          v122 = v25;
          *v25 = v24;
          v123 = v25 + 1;
          v124 = v25 + 1;
          LOBYTE(v125) = 0;
          BYTE4(v125) = 0;
          v26 = *(_QWORD *)(a1 + 144) + 8 * v24;
          *(_DWORD *)v26 = v24;
          *(_BYTE *)(v26 + 4) = 1;
          v28 = *(_QWORD **)(a1 + 8);
          v27 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v28 >= v27)
          {
            v30 = ((uint64_t)v28 - *(_QWORD *)a1) >> 3;
            if ((unint64_t)(v30 + 1) >> 61)
              goto LABEL_117;
            v31 = v27 - *(_QWORD *)a1;
            v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1))
              v32 = v30 + 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            if (v33)
              v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(a1 + 16, v33);
            else
              v34 = 0;
            v35 = &v34[8 * v30];
            *(_QWORD *)v35 = *(_QWORD *)v120;
            v29 = v35 + 8;
            v37 = *(char **)a1;
            v36 = *(char **)(a1 + 8);
            if (v36 != *(char **)a1)
            {
              do
              {
                v38 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v35 - 1) = v38;
                v35 -= 8;
              }
              while (v36 != v37);
              v36 = *(char **)a1;
            }
            *(_QWORD *)a1 = v35;
            *(_QWORD *)(a1 + 8) = v29;
            *(_QWORD *)(a1 + 16) = &v34[8 * v33];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v28 = *(_QWORD *)v120;
            v29 = v28 + 1;
          }
          *(_QWORD *)(a1 + 8) = v29;
          v112 = *(_OWORD *)v120;
          v113 = *(_OWORD *)&v120[16];
          v114[0] = *(_OWORD *)v121;
          *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)&v121[9];
          __dst = 0;
          v117 = 0;
          v115 = 0;
          v39 = v122;
          v40 = v123 - v122;
          if (v123 != v122)
          {
            std::vector<float>::__vallocate[abi:nn180100](&v115, v40 >> 2);
            v41 = (char *)__dst;
            memmove(__dst, v39, v40);
            __dst = &v41[v40];
          }
          v118 = v125;
          v119 = 0;
          std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::push_back[abi:nn180100]((uint64_t *)(a1 + 120), (uint64_t)&v112);
          if (v119 != -1)
            ((void (*)(__int128 *, __int128 *))*(&off_24F14BA20 + v119))(&v110, &v112);
          if (v122)
          {
            v123 = v122;
            operator delete(v122);
          }
          v17 = v16;
        }
        while (v19 > v16);
      }
      a4 = v106 + 1;
      v15 = v107;
    }
    while (v106 + 1 != v105);
  }
  v42 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v43 = *(char **)(a1 + 80);
  v44 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v43 >= v44)
  {
    v46 = *(char **)(a1 + 72);
    v47 = (v43 - v46) >> 2;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62)
      goto LABEL_117;
    v49 = v44 - (_QWORD)v46;
    if (v49 >> 1 > v48)
      v48 = v49 >> 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v50 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 88, v50);
      v46 = *(char **)(a1 + 72);
      v43 = *(char **)(a1 + 80);
    }
    else
    {
      v51 = 0;
    }
    v52 = &v51[4 * v47];
    v53 = &v51[4 * v50];
    *(_DWORD *)v52 = v42;
    v45 = v52 + 4;
    while (v43 != v46)
    {
      v54 = *((_DWORD *)v43 - 1);
      v43 -= 4;
      *((_DWORD *)v52 - 1) = v54;
      v52 -= 4;
    }
    *(_QWORD *)(a1 + 72) = v52;
    *(_QWORD *)(a1 + 80) = v45;
    *(_QWORD *)(a1 + 88) = v53;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *(_DWORD *)v43 = v42;
    v45 = v43 + 4;
  }
  v55 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 80) = v45;
  v56 = *(char **)(a1 + 104);
  if ((unint64_t)v56 < v55)
  {
    *(_DWORD *)v56 = 0;
    v57 = v56 + 4;
    goto LABEL_68;
  }
  v58 = *(char **)(a1 + 96);
  v59 = (v56 - v58) >> 2;
  v60 = v59 + 1;
  if ((unint64_t)(v59 + 1) >> 62)
LABEL_117:
    abort();
  v61 = v55 - (_QWORD)v58;
  if (v61 >> 1 > v60)
    v60 = v61 >> 1;
  if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
    v62 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v62 = v60;
  if (v62)
  {
    v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 112, v62);
    v58 = *(char **)(a1 + 96);
    v56 = *(char **)(a1 + 104);
  }
  else
  {
    v63 = 0;
  }
  v64 = &v63[4 * v59];
  v65 = &v63[4 * v62];
  *(_DWORD *)v64 = 0;
  v57 = v64 + 4;
  while (v56 != v58)
  {
    v66 = *((_DWORD *)v56 - 1);
    v56 -= 4;
    *((_DWORD *)v64 - 1) = v66;
    v64 -= 4;
  }
  *(_QWORD *)(a1 + 96) = v64;
  *(_QWORD *)(a1 + 104) = v57;
  *(_QWORD *)(a1 + 112) = v65;
  if (v58)
    operator delete(v58);
LABEL_68:
  *(_QWORD *)(a1 + 104) = v57;
  v67 = 0uLL;
  memset(v120, 0, 24);
  if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 120))
  {
    v96 = 0;
  }
  else
  {
    LODWORD(v68) = 0;
    do
    {
      geom::straight_skeleton_evaluator<float>::edge_event_for_edge(a1, v68, (float32x2_t *)&v112);
      if (BYTE8(v113))
      {
        v110 = v112;
        v111 = v113;
        v72 = *(_QWORD *)&v120[8];
        if (*(_QWORD *)&v120[8] >= *(_QWORD *)&v120[16])
        {
          v74 = (uint64_t)(*(_QWORD *)&v120[8] - *(_QWORD *)v120) >> 5;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 59)
            goto LABEL_117;
          v76 = *(_QWORD *)&v120[16] - *(_QWORD *)v120;
          if ((uint64_t)(*(_QWORD *)&v120[16] - *(_QWORD *)v120) >> 4 > v75)
            v75 = v76 >> 4;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0)
            v77 = 0x7FFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
            v78 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v120[16], v77);
          else
            v78 = 0;
          v79 = &v78[32 * v74];
          *(_QWORD *)&v69 = v110;
          *(_OWORD *)v79 = v110;
          *((_QWORD *)v79 + 2) = v111;
          *((_DWORD *)v79 + 6) = 0;
          v81 = *(char **)v120;
          v80 = *(char **)&v120[8];
          v82 = v79;
          if (*(_QWORD *)&v120[8] != *(_QWORD *)v120)
          {
            do
            {
              v69 = *((_OWORD *)v80 - 2);
              v70 = *((_OWORD *)v80 - 1);
              *((_OWORD *)v82 - 2) = v69;
              *((_OWORD *)v82 - 1) = v70;
              v82 -= 32;
              v80 -= 32;
            }
            while (v80 != v81);
            v80 = v81;
          }
          v73 = v79 + 32;
          *(_QWORD *)v120 = v82;
          *(_QWORD *)&v120[8] = v79 + 32;
          *(_QWORD *)&v120[16] = &v78[32 * v77];
          if (v80)
            operator delete(v80);
        }
        else
        {
          v69 = v112;
          *(_QWORD *)(*(_QWORD *)&v120[8] + 16) = v113;
          *(_OWORD *)v72 = v69;
          *(_DWORD *)(v72 + 24) = 0;
          v73 = (char *)(v72 + 32);
        }
        *(_QWORD *)&v120[8] = v73;
      }
      geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex(a1, v68, &v112, *(double *)&v69, *(double *)&v70, v71);
      if (BYTE8(v113))
      {
        v110 = v112;
        v111 = v113;
        v83 = *(_QWORD *)&v120[8];
        if (*(_QWORD *)&v120[8] >= *(_QWORD *)&v120[16])
        {
          v86 = (uint64_t)(*(_QWORD *)&v120[8] - *(_QWORD *)v120) >> 5;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 59)
            goto LABEL_117;
          v88 = *(_QWORD *)&v120[16] - *(_QWORD *)v120;
          if ((uint64_t)(*(_QWORD *)&v120[16] - *(_QWORD *)v120) >> 4 > v87)
            v87 = v88 >> 4;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFE0)
            v89 = 0x7FFFFFFFFFFFFFFLL;
          else
            v89 = v87;
          if (v89)
            v90 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v120[16], v89);
          else
            v90 = 0;
          v91 = &v90[32 * v86];
          *(_OWORD *)v91 = v110;
          *((_QWORD *)v91 + 2) = v111;
          *((_DWORD *)v91 + 6) = 1;
          v93 = *(char **)v120;
          v92 = *(char **)&v120[8];
          v94 = v91;
          if (*(_QWORD *)&v120[8] != *(_QWORD *)v120)
          {
            do
            {
              v95 = *((_OWORD *)v92 - 1);
              *((_OWORD *)v94 - 2) = *((_OWORD *)v92 - 2);
              *((_OWORD *)v94 - 1) = v95;
              v94 -= 32;
              v92 -= 32;
            }
            while (v92 != v93);
            v92 = v93;
          }
          v85 = v91 + 32;
          *(_QWORD *)v120 = v94;
          *(_QWORD *)&v120[8] = v91 + 32;
          *(_QWORD *)&v120[16] = &v90[32 * v89];
          if (v92)
            operator delete(v92);
        }
        else
        {
          v84 = v112;
          *(_QWORD *)(*(_QWORD *)&v120[8] + 16) = v113;
          *(_OWORD *)v83 = v84;
          *(_DWORD *)(v83 + 24) = 1;
          v85 = (char *)(v83 + 32);
        }
        *(_QWORD *)&v120[8] = v85;
      }
      v68 = (v68 + 1);
    }
    while (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3) > v68);
    v96 = *(_QWORD *)v120;
    v67 = *(_OWORD *)&v120[8];
  }
  memset(v120, 0, 24);
  v108 = v67;
  v97 = v67 - v96;
  if ((uint64_t)v67 - v96 >= 33)
  {
    v98 = v97 >> 5;
    v99 = (unint64_t)((v97 >> 5) - 2) >> 1;
    v100 = v99 + 1;
    v101 = (_OWORD *)(v96 + 32 * v99);
    do
    {
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(v96, (uint64_t)&v112, v98, v101);
      v101 -= 2;
      --v100;
    }
    while (v100);
  }
  v102 = *(void **)(a1 + 168);
  if (v102)
  {
    *(_QWORD *)(a1 + 176) = v102;
    operator delete(v102);
  }
  *(_QWORD *)(a1 + 168) = v96;
  *(_OWORD *)(a1 + 176) = v108;
  if (*(_QWORD *)v120)
  {
    *(_QWORD *)&v120[8] = *(_QWORD *)v120;
    operator delete(*(void **)v120);
  }
  return a1;
}

void std::vector<std::optional<unsigned int>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 8 * a2;
  }
  else
  {
    std::vector<std::optional<unsigned int>>::__append(a1, a2 - v2);
  }
}

uint64_t std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    v10 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0x276276276276276)
      abort();
    v11 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x13B13B13B13B13BLL)
      v13 = 0x276276276276276;
    else
      v13 = v12;
    v16[4] = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>((uint64_t)v4, v13);
    else
      v14 = 0;
    v15 = &v14[104 * v10];
    v16[0] = v14;
    v16[1] = v15;
    v16[3] = &v14[104 * v13];
    *v15 = 0;
    *((_DWORD *)v15 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a2);
    v16[2] = v15 + 104;
    std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::__swap_out_circular_buffer(a1, v16);
    v9 = a1[1];
    result = (uint64_t)std::__split_buffer<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state> &>::~__split_buffer(v16);
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 96) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>,(std::__variant_detail::_Trait)1>>(v7, a2);
    v9 = v7 + 104;
  }
  a1[1] = v9;
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::vertex_state::vertex_state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 4));
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

uint64_t geom::straight_skeleton_evaluator<float>::edge_event_for_edge@<X0>(uint64_t result@<X0>, unsigned __int32 a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v4;
  float32x2_t *v5;
  unsigned __int32 v7;
  float32x2_t *v8;
  float v9;
  float32x2_t v10;
  char v11;
  float v12;
  float32x2_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(result + 120);
  v5 = (float32x2_t *)(v4 + 104 * a2);
  if (!v5[12].i32[0])
  {
    v7 = v5[4].u32[1];
    if (v7 == a2)
      goto LABEL_7;
    v8 = (float32x2_t *)(v4 + 104 * v7);
    if (!v8[12].i32[0])
    {
      result = geom::intersect_adjacent_spokes<float>(v5, v8);
      if ((result & 0xFF00000000) != 0)
      {
        v9 = v5[2].f32[0];
        if (fabsf(v9) <= 0.000005)
          v10 = *v5;
        else
          v10 = vmla_n_f32(*v5, v5[1], v9 * (float)(*(float *)&result - v5[3].f32[0]));
        v12 = v8[2].f32[0];
        if (fabsf(v12) <= 0.000005)
          v13 = *v8;
        else
          v13 = vmla_n_f32(*v8, v8[1], v12 * (float)(*(float *)&result - v8[3].f32[0]));
        a3->i32[0] = result;
        a3->i32[1] = a2;
        a3[1].i32[0] = v7;
        a3[2] = vmul_f32(vadd_f32(v10, v13), (float32x2_t)0x3F0000003F000000);
        v11 = 1;
        goto LABEL_13;
      }
LABEL_7:
      v11 = 0;
      a3->i8[0] = 0;
LABEL_13:
      a3[3].i8[0] = v11;
      return result;
    }
  }
  v14 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex(v14);
}

uint64_t geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v9[3];
  unsigned int v10;

  v10 = a2;
  v6 = *(_QWORD *)(result + 120) + 104 * a2;
  if (*(_DWORD *)(v6 + 96))
  {
    v8 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::straight_skeleton_evaluator(v8);
  }
  else
  {
    v7 = *(unsigned __int8 *)(v6 + 20);
    *a3 = 0;
    a3[24] = 0;
    if (v7)
    {
      v9[0] = result;
      v9[1] = &v10;
      v9[2] = a3;
      return geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex::{lambda(unsigned int,unsigned int)#1}>(result, (uint64_t)v9, a4, a5, a6);
    }
  }
  return result;
}

float geom::straight_skeleton_evaluator<float>::current_inset_distance(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) - 4) * *(float *)(a1 + 208);
}

float geom::straight_skeleton_evaluator<float>::current_time(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 104) - 4);
}

void geom::straight_skeleton_evaluator<float>::advance_to_inset_distance(uint64_t a1, float a2)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(float *)(a1 + 208);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = a2 / v3;
  if (v4 == v5)
  {
    v8 = *(_QWORD *)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if (v7 == v8)
      goto LABEL_18;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v8 + 104 * v9;
      if (!*(_DWORD *)(v11 + 96) && *(_BYTE *)(v11 + 21))
      {
        geom::straight_skeleton_evaluator<float>::remove_vertex_from_face_neighbors(a1, v10, v11);
        geom::straight_skeleton_evaluator<float>::vertex_state::make_inactive(*(_QWORD *)(a1 + 120) + 104 * v9);
        v8 = *(_QWORD *)(a1 + 120);
        v7 = *(_QWORD *)(a1 + 128);
      }
      v9 = (v10 + 1);
      v10 = v9;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((v7 - v8) >> 3) > v9);
    v4 = *(_QWORD *)(a1 + 168);
    v5 = *(_QWORD *)(a1 + 176);
  }
  if (v4 != v5)
  {
    do
    {
      geom::straight_skeleton_evaluator<float>::event_time(v4);
      if (v12 > v6)
        break;
      v14 = *(_QWORD *)(a1 + 120);
      v13 = *(_QWORD *)(a1 + 128);
      if (v13 != v14)
      {
        v15 = 0;
        v16 = 0;
        do
        {
          v17 = v14 + 104 * v15;
          if (!*(_DWORD *)(v17 + 96) && *(_BYTE *)(v17 + 21))
          {
            geom::straight_skeleton_evaluator<float>::remove_vertex_from_face_neighbors(a1, v16, v17);
            geom::straight_skeleton_evaluator<float>::vertex_state::make_inactive(*(_QWORD *)(a1 + 120) + 104 * v15);
            v14 = *(_QWORD *)(a1 + 120);
            v13 = *(_QWORD *)(a1 + 128);
          }
          v15 = (v16 + 1);
          v16 = v15;
        }
        while (0x4EC4EC4EC4EC4EC5 * ((v13 - v14) >> 3) > v15);
      }
      geom::straight_skeleton_evaluator<float>::process_next_event((_QWORD *)a1);
      v4 = *(_QWORD *)(a1 + 168);
    }
    while (v4 != *(_QWORD *)(a1 + 176));
  }
LABEL_18:
  geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(a1, v6);
}

BOOL geom::straight_skeleton_evaluator<float>::has_event(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168) != *(_QWORD *)(a1 + 176);
}

uint64_t geom::straight_skeleton_evaluator<float>::event_time(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::process_next_event(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, uint64_t))*(&off_24F14BA30 + v1))(&v5, a1);
  }
}

uint64_t geom::straight_skeleton_evaluator<float>::process_next_event(_QWORD *a1)
{
  float v2;
  float v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t *__p;
  uint64_t *v39;
  char *v40;
  _OWORD v41[2];
  unsigned __int128 v42;
  _OWORD v43[2];
  unsigned __int128 v44;

  geom::straight_skeleton_evaluator<float>::event_time(a1[21]);
  v3 = v2;
  v44 = 0u;
  v42 = 0u;
  memset(v43, 0, sizeof(v43));
  memset(v41, 0, sizeof(v41));
  geom::straight_skeleton_evaluator<float>::pop_coincident_events((uint64_t)a1, v43, v41, v2);
  v4 = 0;
  if ((*((_QWORD *)&v42 + 1) + *((_QWORD *)&v44 + 1)) << 6 <= 0x100uLL)
    v5 = 256;
  else
    v5 = (*((_QWORD *)&v42 + 1) + *((_QWORD *)&v44 + 1)) << 6;
  __p = 0;
  v39 = 0;
  v36 = v5 | 1;
  v40 = 0;
  while (*((_QWORD *)&v44 + 1) | *((_QWORD *)&v42 + 1))
  {
    if (*((_QWORD *)&v44 + 1))
    {
      if (v4 + 1 > v36)
        v6 = v4 + 1;
      else
        v6 = v5 | 1;
      v37 = v6;
      while (++v4 <= v5)
      {
        v7 = geom::straight_skeleton_evaluator<float>::apply_edge_event(a1, *(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))+ 24 * ((unint64_t)v44 % 0xAA));
        if ((v7 & 0xFF00000000) != 0)
        {
          v8 = v7;
          if (v39 >= (uint64_t *)v40)
          {
            v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)__p) >> 2) + 1;
            if (v10 > 0x1555555555555555)
              goto LABEL_67;
            if (0x5555555555555556 * ((v40 - (char *)__p) >> 2) > v10)
              v10 = 0x5555555555555556 * ((v40 - (char *)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v40 - (char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v11 = 0x1555555555555555;
            else
              v11 = v10;
            if (v11)
              v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<geom::straight_skeleton_evaluator<float>::edge_event_result,geom::straight_skeleton_evaluator<float>::split_event_result>>>((uint64_t)&v40, v11);
            else
              v12 = 0;
            v13 = &v12[4 * (((char *)v39 - (char *)__p) >> 2)];
            *(_DWORD *)v13 = v8;
            *((_DWORD *)v13 + 2) = 0;
            v14 = v39;
            v15 = (uint64_t *)v13;
            if (v39 != __p)
            {
              do
              {
                v16 = *(uint64_t *)((char *)v14 - 12);
                v14 = (uint64_t *)((char *)v14 - 12);
                v17 = *((_DWORD *)v14 + 2);
                *(uint64_t *)((char *)v15 - 12) = v16;
                v15 = (uint64_t *)((char *)v15 - 12);
                *((_DWORD *)v15 + 2) = v17;
              }
              while (v14 != __p);
              v14 = __p;
            }
            v9 = (uint64_t *)(v13 + 12);
            __p = v15;
            v40 = &v12[12 * v11];
            if (v14)
              operator delete(v14);
          }
          else
          {
            *(_DWORD *)v39 = v7;
            *((_DWORD *)v39 + 2) = 0;
            v9 = (uint64_t *)((char *)v39 + 12);
          }
          v39 = v9;
        }
        v18 = *((_QWORD *)&v44 + 1) - 1;
        v19 = v44 + 1;
        v44 = __PAIR128__(*((unint64_t *)&v44 + 1), (uint64_t)v44 + 1) + __PAIR128__(-1, 0);
        if (v19 >= 0x154)
        {
          operator delete(**((void ***)&v43[0] + 1));
          *((_QWORD *)&v43[0] + 1) += 8;
          *(_QWORD *)&v44 = v44 - 170;
          v18 = *((_QWORD *)&v44 + 1);
        }
        if (!v18)
          goto LABEL_63;
      }
LABEL_62:
      v4 = v37;
      goto LABEL_63;
    }
    if (*((_QWORD *)&v42 + 1))
    {
      if (v4 + 1 > v36)
        v20 = v4 + 1;
      else
        v20 = v5 | 1;
      v37 = v20;
      while (++v4 <= v5)
      {
        v21 = geom::straight_skeleton_evaluator<float>::apply_split_event(a1, *(_QWORD *)(*((_QWORD *)&v41[0] + 1) + 8 * ((unint64_t)v42 / 0xAA))+ 24 * ((unint64_t)v42 % 0xAA));
        if (v22)
        {
          v23 = v21;
          if (v39 >= (uint64_t *)v40)
          {
            v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)__p) >> 2) + 1;
            if (v25 > 0x1555555555555555)
LABEL_67:
              abort();
            if (0x5555555555555556 * ((v40 - (char *)__p) >> 2) > v25)
              v25 = 0x5555555555555556 * ((v40 - (char *)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v40 - (char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v26 = 0x1555555555555555;
            else
              v26 = v25;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<geom::straight_skeleton_evaluator<float>::edge_event_result,geom::straight_skeleton_evaluator<float>::split_event_result>>>((uint64_t)&v40, v26);
            else
              v27 = 0;
            v28 = &v27[4 * (((char *)v39 - (char *)__p) >> 2)];
            *(_QWORD *)v28 = v23;
            *((_DWORD *)v28 + 2) = 1;
            v29 = v39;
            v30 = v28;
            if (v39 != __p)
            {
              do
              {
                v31 = *(uint64_t *)((char *)v29 - 12);
                v29 = (uint64_t *)((char *)v29 - 12);
                v32 = *((_DWORD *)v29 + 2);
                *(_QWORD *)(v30 - 12) = v31;
                v30 -= 12;
                *((_DWORD *)v30 + 2) = v32;
              }
              while (v29 != __p);
              v29 = __p;
            }
            v24 = (uint64_t *)(v28 + 12);
            __p = (uint64_t *)v30;
            v40 = &v27[12 * v26];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v39 = v21;
            *((_DWORD *)v39 + 2) = 1;
            v24 = (uint64_t *)((char *)v39 + 12);
          }
          v39 = v24;
        }
        v33 = *((_QWORD *)&v42 + 1) - 1;
        v34 = v42 + 1;
        v42 = __PAIR128__(*((unint64_t *)&v42 + 1), (uint64_t)v42 + 1) + __PAIR128__(-1, 0);
        if (v34 >= 0x154)
        {
          operator delete(**((void ***)&v41[0] + 1));
          *((_QWORD *)&v41[0] + 1) += 8;
          *(_QWORD *)&v42 = v42 - 170;
          v33 = *((_QWORD *)&v42 + 1);
        }
        if (!v33)
          goto LABEL_63;
      }
      goto LABEL_62;
    }
LABEL_63:
    geom::straight_skeleton_evaluator<float>::pop_coincident_events((uint64_t)a1, v43, v41, v3);
    if (v4 > v5)
      break;
  }
  geom::straight_skeleton_evaluator<float>::add_joiner_mesh_faces_for_events((uint64_t)a1, __p, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)__p) >> 2), v3);
  if (__p)
    operator delete(__p);
  std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::~deque[abi:nn180100](v41);
  return std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::~deque[abi:nn180100](v43);
}

void geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float *v6;
  float v7;
  unint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 v35;
  __int128 *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int __src;
  void **v41;
  float *v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  float v47;

  v47 = a2;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::init((void **)&v44, 1uLL);
  v41 = (void **)a1;
  v42 = &v47;
  v43 = &v44;
  geom::straight_skeleton_evaluator<float>::for_each_wavefront_vertex<geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda#1},geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(void)#1}>(a1, &v41);
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 80);
  if (*(unsigned int *)(v4 - 4) < (unint64_t)(v3 >> 3))
  {
    v5 = v47;
    v6 = *(float **)(a1 + 104);
    v7 = *(v6 - 1);
    if (v47 == v7 || (float)(v7 + 0.000005) > v47)
    {
      *(_DWORD *)(v4 - 4) = (unint64_t)v3 >> 3;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v6 >= v9)
      {
        v11 = *(float **)(a1 + 96);
        v12 = v6 - v11;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          goto LABEL_51;
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 112, v15);
          v11 = *(float **)(a1 + 96);
          v6 = *(float **)(a1 + 104);
          v5 = v47;
        }
        else
        {
          v16 = 0;
        }
        v17 = (float *)&v16[4 * v12];
        v18 = &v16[4 * v15];
        *v17 = v5;
        v10 = v17 + 1;
        while (v6 != v11)
        {
          v19 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v17-- - 1) = v19;
        }
        *(_QWORD *)(a1 + 96) = v17;
        *(_QWORD *)(a1 + 104) = v10;
        *(_QWORD *)(a1 + 112) = v18;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v6 = v47;
        v10 = v6 + 1;
      }
      *(_QWORD *)(a1 + 104) = v10;
      v20 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
      v21 = *(char **)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v21 >= v22)
      {
        v24 = *(char **)(a1 + 72);
        v25 = (v21 - v24) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          goto LABEL_51;
        v27 = v22 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 88, v28);
          v24 = *(char **)(a1 + 72);
          v21 = *(char **)(a1 + 80);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[4 * v25];
        v31 = &v29[4 * v28];
        *(_DWORD *)v30 = v20;
        v23 = v30 + 4;
        while (v21 != v24)
        {
          v32 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v30 - 1) = v32;
          v30 -= 4;
        }
        *(_QWORD *)(a1 + 72) = v30;
        *(_QWORD *)(a1 + 80) = v23;
        *(_QWORD *)(a1 + 88) = v31;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_DWORD *)v21 = v20;
        v23 = v21 + 4;
      }
      *(_QWORD *)(a1 + 80) = v23;
    }
  }
  v41 = (void **)a1;
  v42 = (float *)&v44;
  geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(unsigned int,unsigned int)#1}>(a1, &v41);
  v41 = (void **)&v44;
  if ((unint64_t)v45 >= 0x10)
  {
    v33 = 0;
    v34 = (unint64_t)v45 >> 4;
    while (1)
    {
      v35 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v44 + v33)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v42 = (float *)(unsigned __int16)~v35;
      if (v35 != 0xFFFF)
        break;
      v33 += 16;
      if (!--v34)
        goto LABEL_49;
    }
    v36 = (__int128 *)(__clz(__rbit64((unsigned __int16)~v35)) + v33);
    v43 = v36;
    if (v36 != (__int128 *)-1)
    {
      while (1)
      {
        v37 = (unsigned int *)((char *)v41[1] + 8 * (_QWORD)v36);
        v38 = *v37;
        __src = v37[1];
        v39 = *(_QWORD *)(a1 + 120) + 104 * v38;
        if (*(_DWORD *)(v39 + 96))
          break;
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(v39 + 64), (char *)&__src, (uint64_t)&v41, 1uLL);
        _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v41);
        v36 = v43;
        if (v43 == (__int128 *)-1)
          goto LABEL_49;
      }
      std::__throw_bad_variant_access[abi:nn180100]();
LABEL_51:
      abort();
    }
  }
LABEL_49:
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v44);
}

void geom::straight_skeleton_evaluator<float>::pop_coincident_events(uint64_t a1, _QWORD *a2, _QWORD *a3, float a4)
{
  char *v4;
  float v9;
  float v10;
  __n128 *v12;
  unsigned __int32 v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;

  v4 = *(char **)(a1 + 168);
  if (v4 != *(char **)(a1 + 176))
  {
    v9 = a4 + 0.000005;
    do
    {
      geom::straight_skeleton_evaluator<float>::event_time((uint64_t)v4);
      if (v10 != a4 && v9 < v10)
        break;
      v12 = *(__n128 **)(a1 + 168);
      v13 = v12[1].n128_u32[2];
      if (v13 == 1)
      {
        std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(a3, v12);
      }
      else
      {
        if (v13)
        {
          v21 = std::__throw_bad_variant_access[abi:nn180100]();
          geom::straight_skeleton_evaluator<float>::apply_edge_event(v21);
          return;
        }
        std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(a2, v12);
      }
      v4 = *(char **)(a1 + 168);
      v14 = *(_QWORD *)(a1 + 176);
      if (v14 - (uint64_t)v4 >= 33)
      {
        v15 = *((_OWORD *)v4 + 1);
        v23 = *(_OWORD *)v4;
        v24 = v15;
        v16 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(v4, (uint64_t)&v22, (unint64_t)(v14 - (_QWORD)v4) >> 5);
        v17 = (_OWORD *)(v14 - 32);
        if ((_OWORD *)(v14 - 32) == v16)
        {
          v20 = v24;
          *v16 = v23;
          v16[1] = v20;
        }
        else
        {
          v18 = *(_OWORD *)(v14 - 16);
          *v16 = *v17;
          v16[1] = v18;
          v19 = v24;
          *v17 = v23;
          *(_OWORD *)(v14 - 16) = v19;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>((uint64_t)v4, (uint64_t)(v16 + 2), (uint64_t)&v22, ((char *)(v16 + 2) - v4) >> 5);
        }
        v4 = *(char **)(a1 + 168);
        v14 = *(_QWORD *)(a1 + 176);
      }
      *(_QWORD *)(a1 + 176) = v14 - 32;
    }
    while (v4 != (char *)(v14 - 32));
  }
}

uint64_t geom::straight_skeleton_evaluator<float>::apply_edge_event(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  std::vector<unsigned int>::pointer begin;
  int64_t v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  float32x2_t *v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t *v38;
  float v39;
  float v40;
  float32x2_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  double v57;
  double v58;
  double v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  float v97;
  int v98;
  int v99;
  int v100;
  char v101;
  char v102;
  char v103;
  char v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  void *__dst[2];
  uint64_t v110;
  _OWORD v111[2];
  _OWORD v112[2];
  std::vector<unsigned int> __p;
  uint64_t v114;
  _OWORD v115[2];
  _OWORD v116[2];
  std::vector<unsigned int> v117;
  uint64_t v118;
  _BYTE v119[17];

  v3 = a1 + 15;
  v2 = a1[15];
  v4 = (__int128 *)(v2 + 104 * *(unsigned int *)(a2 + 4));
  if (*((_DWORD *)v4 + 24) || *(_DWORD *)(v2 + 104 * *(unsigned int *)(a2 + 8) + 96))
  {
    v6 = 0;
    LOBYTE(v7) = 0;
    v8 = 0;
    return v6 & 0x100000000 | v7 | v8 & 0xFFFFFF00;
  }
  v11 = *v4;
  v12 = v4[1];
  v13 = v4[2];
  *(_OWORD *)((char *)v116 + 9) = *(__int128 *)((char *)v4 + 41);
  v115[1] = v12;
  v116[0] = v13;
  v115[0] = v11;
  std::vector<float>::vector(&v117, (const std::vector<unsigned int> *)(v4 + 4));
  v118 = *((_QWORD *)v4 + 11);
  v14 = *v3 + 104 * *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(v14 + 96))
    goto LABEL_93;
  v15 = *(_OWORD *)v14;
  v16 = *(_OWORD *)(v14 + 16);
  v17 = *(_OWORD *)(v14 + 32);
  *(_OWORD *)((char *)v112 + 9) = *(_OWORD *)(v14 + 41);
  v111[1] = v16;
  v112[0] = v17;
  v111[0] = v15;
  std::vector<float>::vector(&__p, (const std::vector<unsigned int> *)(v14 + 64));
  v114 = *(_QWORD *)(v14 + 88);
  v18 = DWORD1(v116[0]);
  v20 = *(_DWORD *)(a2 + 4);
  v19 = *(_DWORD *)(a2 + 8);
  if (DWORD1(v116[0]) == v19 || DWORD1(v112[0]) == v20)
  {
    v21 = (unsigned int *)v116;
    if (DWORD1(v116[0]) != v19)
      v21 = (unsigned int *)v112;
    v22 = *v21;
    if (DWORD1(v116[0]) == v19)
      v23 = DWORD1(v112[0]);
    else
      v23 = DWORD1(v116[0]);
    v91 = v23;
    v92 = DWORD1(v112[0]);
    geom::straight_skeleton_evaluator<float>::vertex_state::make_inactive(a1[15] + 104 * v20);
    geom::straight_skeleton_evaluator<float>::vertex_state::make_inactive(a1[15] + 104 * *(unsigned int *)(a2 + 8));
    v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[16] - a1[15]) >> 3);
    geom::straight_skeleton_evaluator<float>::remove_vertex_from_face_neighbors((uint64_t)a1, *(unsigned int *)(a2 + 4), (uint64_t)v115);
    geom::straight_skeleton_evaluator<float>::remove_vertex_from_face_neighbors((uint64_t)a1, *(unsigned int *)(a2 + 8), (uint64_t)v111);
    __dst[0] = 0;
    __dst[1] = 0;
    v110 = 0;
    begin = v117.__begin_;
    v25 = (char *)v117.__end_ - (char *)v117.__begin_;
    if (v117.__end_ != v117.__begin_)
    {
      std::vector<float>::__vallocate[abi:nn180100](__dst, v25 >> 2);
      v90 = v22;
      v26 = (char *)__dst[1];
      memmove(__dst[1], begin, v25);
      v27 = &v26[v25];
      v22 = v90;
      __dst[1] = v27;
    }
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(__p.__begin_, __p.__end_, (uint64_t)__dst);
    v28 = &v118;
    if (!BYTE4(v118))
      v28 = &v114;
    v29 = *(unsigned int *)v28 | ((unint64_t)*((unsigned __int8 *)v28 + 4) << 32);
    if (v18 == v19 && v92 == v20)
    {
      v30 = *(_QWORD *)(a2 + 16);
      v31 = *(float *)a2;
      v32 = v110;
      v33 = *(_OWORD *)__dst;
      __dst[1] = 0;
      v110 = 0;
      __dst[0] = 0;
      v95 = v30;
      LODWORD(v96) = 0;
      WORD2(v96) = 256;
      v97 = v31;
      v98 = v7;
      v99 = v7;
      v100 = -1;
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v105 = v33;
      v106 = v32;
      v107 = v29 & 0xFFFFFFFFFFLL;
      v108 = 0;
      std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::push_back[abi:nn180100](v3, (uint64_t)&v95);
      if (v108 != -1)
        ((void (*)(__int128 *, __int128 *))*(&off_24F14BA20 + v108))(&v93, &v95);
      goto LABEL_86;
    }
    geom::straight_skeleton_evaluator<float>::create_vertex_and_update_neighbors(a1, v22, v91, *(uint64_t *)((char *)&v112[1] + 4), *(uint64_t *)((char *)v112 + 12), (__int128 *)__dst, v29 & 0xFFFFFFFFFFLL, DWORD2(v112[0]), *(float *)a2, *(double *)(a2 + 16));
    if (v22 != v91)
      goto LABEL_32;
    v34 = (float32x2_t *)(*v3 + 104 * v22);
    if (!v34[12].i32[0])
    {
      v35 = *(float *)a2;
      v36 = v34[2].f32[0];
      if (fabsf(v36) <= 0.000005)
        v37 = *v34;
      else
        v37 = vmla_n_f32(*v34, v34[1], v36 * (float)(v35 - v34[3].f32[0]));
      *v34 = v37;
      v34[3].f32[0] = v35;
      v34[2].i32[0] = 0;
      v34[2].i16[2] = 256;
      v38 = (float32x2_t *)(*v3 + 104 * v7);
      if (!v38[12].i32[0])
      {
        v39 = *(float *)a2;
        v40 = v38[2].f32[0];
        if (fabsf(v40) <= 0.000005)
          v41 = *v38;
        else
          v41 = vmla_n_f32(*v38, v38[1], v40 * (float)(v39 - v38[3].f32[0]));
        *v38 = v41;
        v38[3].f32[0] = v39;
        v38[2].i32[0] = 0;
        v38[2].i16[2] = 256;
LABEL_32:
        geom::straight_skeleton_evaluator<float>::edge_event_for_edge((uint64_t)a1, v7, (float32x2_t *)&v95);
        if (LOBYTE(v97))
        {
          v93 = v95;
          v94 = v96;
          v42 = a1[23];
          v43 = a1[22];
          if (v43 >= v42)
          {
            v46 = a1[21];
            v47 = (uint64_t)(v43 - v46) >> 5;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 59)
              goto LABEL_94;
            v49 = v42 - v46;
            if (v49 >> 4 > v48)
              v48 = v49 >> 4;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
              v50 = 0x7FFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
              v51 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 23), v50);
            else
              v51 = 0;
            v52 = &v51[32 * v47];
            v53 = &v51[32 * v50];
            *(_OWORD *)v52 = v93;
            *((_QWORD *)v52 + 2) = v94;
            *((_DWORD *)v52 + 6) = 0;
            v45 = (uint64_t)(v52 + 32);
            v55 = (char *)a1[21];
            v54 = (char *)a1[22];
            if (v54 != v55)
            {
              do
              {
                v56 = *((_OWORD *)v54 - 1);
                *((_OWORD *)v52 - 2) = *((_OWORD *)v54 - 2);
                *((_OWORD *)v52 - 1) = v56;
                v52 -= 32;
                v54 -= 32;
              }
              while (v54 != v55);
              v54 = (char *)a1[21];
            }
            a1[21] = v52;
            a1[22] = v45;
            a1[23] = v53;
            if (v54)
              operator delete(v54);
          }
          else
          {
            v44 = v95;
            *(_QWORD *)(v43 + 16) = v96;
            *(_OWORD *)v43 = v44;
            *(_DWORD *)(v43 + 24) = 0;
            v45 = v43 + 32;
          }
          a1[22] = v45;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(a1[21], v45, (uint64_t)v119, (v45 - a1[21]) >> 5);
        }
        geom::straight_skeleton_evaluator<float>::edge_event_for_edge((uint64_t)a1, v22, (float32x2_t *)&v95);
        if (LOBYTE(v97))
        {
          v93 = v95;
          v94 = v96;
          v60 = a1[23];
          v61 = a1[22];
          if (v61 >= v60)
          {
            v64 = a1[21];
            v65 = (uint64_t)(v61 - v64) >> 5;
            v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 59)
              goto LABEL_94;
            v67 = v60 - v64;
            if (v67 >> 4 > v66)
              v66 = v67 >> 4;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0)
              v68 = 0x7FFFFFFFFFFFFFFLL;
            else
              v68 = v66;
            if (v68)
              v69 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 23), v68);
            else
              v69 = 0;
            v70 = &v69[32 * v65];
            v71 = &v69[32 * v68];
            *(_OWORD *)v70 = v93;
            *((_QWORD *)v70 + 2) = v94;
            *((_DWORD *)v70 + 6) = 0;
            v63 = (uint64_t)(v70 + 32);
            v73 = (char *)a1[21];
            v72 = (char *)a1[22];
            if (v72 != v73)
            {
              do
              {
                v74 = *((_OWORD *)v72 - 1);
                *((_OWORD *)v70 - 2) = *((_OWORD *)v72 - 2);
                *((_OWORD *)v70 - 1) = v74;
                v70 -= 32;
                v72 -= 32;
              }
              while (v72 != v73);
              v72 = (char *)a1[21];
            }
            a1[21] = v70;
            a1[22] = v63;
            a1[23] = v71;
            if (v72)
              operator delete(v72);
          }
          else
          {
            v62 = v95;
            *(_QWORD *)(v61 + 16) = v96;
            *(_OWORD *)v61 = v62;
            *(_DWORD *)(v61 + 24) = 0;
            v63 = v61 + 32;
          }
          a1[22] = v63;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(a1[21], v63, (uint64_t)v119, (v63 - a1[21]) >> 5);
        }
        geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex((uint64_t)a1, v7, &v95, v57, v58, v59);
        if (!LOBYTE(v97))
        {
LABEL_86:
          v8 = v7 & 0xFFFFFF00;
          if (__dst[0])
          {
            __dst[1] = __dst[0];
            operator delete(__dst[0]);
          }
          v6 = 0x100000000;
          goto LABEL_89;
        }
        v93 = v95;
        v94 = v96;
        v75 = a1[23];
        v76 = a1[22];
        if (v76 < v75)
        {
          v77 = v95;
          *(_QWORD *)(v76 + 16) = v96;
          *(_OWORD *)v76 = v77;
          *(_DWORD *)(v76 + 24) = 1;
          v78 = v76 + 32;
LABEL_85:
          a1[22] = v78;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(a1[21], v78, (uint64_t)v119, (v78 - a1[21]) >> 5);
          goto LABEL_86;
        }
        v79 = a1[21];
        v80 = (uint64_t)(v76 - v79) >> 5;
        v81 = v80 + 1;
        if (!((unint64_t)(v80 + 1) >> 59))
        {
          v82 = v75 - v79;
          if (v82 >> 4 > v81)
            v81 = v82 >> 4;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFE0)
            v83 = 0x7FFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
            v84 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 23), v83);
          else
            v84 = 0;
          v85 = &v84[32 * v80];
          v86 = &v84[32 * v83];
          *(_OWORD *)v85 = v93;
          *((_QWORD *)v85 + 2) = v94;
          *((_DWORD *)v85 + 6) = 1;
          v78 = (uint64_t)(v85 + 32);
          v88 = (char *)a1[21];
          v87 = (char *)a1[22];
          if (v87 != v88)
          {
            do
            {
              v89 = *((_OWORD *)v87 - 1);
              *((_OWORD *)v85 - 2) = *((_OWORD *)v87 - 2);
              *((_OWORD *)v85 - 1) = v89;
              v85 -= 32;
              v87 -= 32;
            }
            while (v87 != v88);
            v87 = (char *)a1[21];
          }
          a1[21] = v85;
          a1[22] = v78;
          a1[23] = v86;
          if (v87)
            operator delete(v87);
          goto LABEL_85;
        }
LABEL_94:
        abort();
      }
    }
LABEL_93:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_94;
  }
  v6 = 0;
  LOBYTE(v7) = 0;
  v8 = 0;
LABEL_89:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v117.__begin_)
  {
    v117.__end_ = v117.__begin_;
    operator delete(v117.__begin_);
  }
  return v6 & 0x100000000 | v7 | v8 & 0xFFFFFF00;
}

unint64_t geom::straight_skeleton_evaluator<float>::apply_split_event(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int active;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int32 vertex_and_update_neighbors;
  _DWORD *v29;
  uint64_t v30;
  float32x2_t *v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t *v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t *v39;
  float v40;
  float v41;
  float32x2_t v42;
  float32x2_t *v43;
  float v44;
  float v45;
  float32x2_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  unsigned int v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int *v116;
  void *v117[2];
  unsigned int *v118;
  char v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  _OWORD v123[2];
  _BYTE v124[28];
  std::vector<unsigned int> __p;
  uint64_t v126;
  _BYTE v127[9];

  v2 = a1[15] + 104 * *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(v2 + 96))
  {
    LOBYTE(v3) = 0;
    v4 = 0;
    return v4 & 0xFFFFFFFFFFFFFF00 | v3;
  }
  v7 = *(_OWORD *)v2;
  v8 = *(_OWORD *)(v2 + 16);
  v9 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)&v124[9] = *(_OWORD *)(v2 + 41);
  v123[1] = v8;
  *(_OWORD *)v124 = v9;
  v123[0] = v7;
  std::vector<float>::vector(&__p, (const std::vector<unsigned int> *)(v2 + 64));
  v126 = *(_QWORD *)(v2 + 88);
  LOBYTE(v120) = 0;
  v122 = 0;
  v117[0] = a1;
  v117[1] = v123;
  v118 = &v120;
  geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge_on_face<geom::straight_skeleton_evaluator<float>::apply_split_event(geom::straight_skeleton_evaluator<float>::split_event const&)::{lambda(unsigned int,unsigned int)#1}>((uint64_t)a1, (uint64_t)v117, *(_DWORD *)(a2 + 4), v10, v11, v12);
  if (!v122)
    goto LABEL_8;
  v13 = v120;
  v14 = a1[15];
  v15 = v14 + 104 * v120;
  if (*(_DWORD *)(v15 + 96))
    goto LABEL_110;
  v16 = v121;
  v17 = v14 + 104 * v121;
  if (*(_DWORD *)(v17 + 96))
    goto LABEL_110;
  v18 = *(_DWORD *)v124;
  v19 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)v124 == v19 || (v20 = *(_DWORD *)&v124[4], *(_DWORD *)&v124[4] == v19))
  {
LABEL_8:
    LOBYTE(v3) = 0;
    v4 = 0;
    goto LABEL_9;
  }
  active = geom::straight_skeleton_evaluator<float>::add_triangle_fan_for_active_vertex((void **)a1, v19, *(float *)a2);
  geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, *(_DWORD *)(*(_QWORD *)(v15 + 72) - 4), **(_DWORD **)(v17 + 64), active);
  v23 = a1[15];
  v24 = v23 + 104 * v13;
  if (*(_DWORD *)(v24 + 96))
    goto LABEL_110;
  v25 = *(_DWORD *)(v24 + 40);
  v108 = *(_DWORD *)&v124[8];
  v26 = *(_QWORD *)(v24 + 44);
  v107 = *(_OWORD *)&v124[12];
  geom::straight_skeleton_evaluator<float>::vertex_state::make_inactive(v23 + 104 * *(unsigned int *)(a2 + 8));
  v27 = operator new(4uLL);
  v117[0] = v27;
  *v27 = active;
  v117[1] = v27 + 1;
  v118 = v27 + 1;
  vertex_and_update_neighbors = geom::straight_skeleton_evaluator<float>::create_vertex_and_update_neighbors(a1, v18, v16, v13 | 0x100000000, v26, (__int128 *)v117, 0, v25, *(float *)a2, *(double *)(a2 + 16));
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  v29 = operator new(4uLL);
  v117[0] = v29;
  *v29 = active;
  v117[1] = v29 + 1;
  v118 = v29 + 1;
  v30 = geom::straight_skeleton_evaluator<float>::create_vertex_and_update_neighbors(a1, v13, v20, *((uint64_t *)&v107 + 1), v107, (__int128 *)v117, 0, v108, *(float *)a2, *(double *)(a2 + 16));
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  if (v18 == v16)
  {
    v31 = (float32x2_t *)(a1[15] + 104 * v16);
    if (v31[12].i32[0])
      goto LABEL_110;
    v32 = *(float *)a2;
    v33 = v31[2].f32[0];
    if (fabsf(v33) <= 0.000005)
      v34 = *v31;
    else
      v34 = vmla_n_f32(*v31, v31[1], v33 * (float)(v32 - v31[3].f32[0]));
    *v31 = v34;
    v31[3].f32[0] = v32;
    v31[2].i32[0] = 0;
    v31[2].i16[2] = 256;
    v35 = (float32x2_t *)(a1[15] + 104 * vertex_and_update_neighbors);
    if (v35[12].i32[0])
      goto LABEL_110;
    v36 = *(float *)a2;
    v37 = v35[2].f32[0];
    if (fabsf(v37) <= 0.000005)
      v38 = *v35;
    else
      v38 = vmla_n_f32(*v35, v35[1], v37 * (float)(v36 - v35[3].f32[0]));
    *v35 = v38;
    v35[3].f32[0] = v36;
    v35[2].i32[0] = 0;
    v35[2].i16[2] = 256;
  }
  if ((_DWORD)v13 != v20)
    goto LABEL_37;
  v39 = (float32x2_t *)(a1[15] + 104 * v13);
  if (v39[12].i32[0])
    goto LABEL_110;
  v40 = *(float *)a2;
  v41 = v39[2].f32[0];
  if (fabsf(v41) <= 0.000005)
    v42 = *v39;
  else
    v42 = vmla_n_f32(*v39, v39[1], v41 * (float)(v40 - v39[3].f32[0]));
  *v39 = v42;
  v39[3].f32[0] = v40;
  v39[2].i32[0] = 0;
  v39[2].i16[2] = 256;
  v43 = (float32x2_t *)(a1[15] + 104 * v30);
  if (v43[12].i32[0])
  {
LABEL_110:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_111;
  }
  v44 = *(float *)a2;
  v45 = v43[2].f32[0];
  if (fabsf(v45) <= 0.000005)
    v46 = *v43;
  else
    v46 = vmla_n_f32(*v43, v43[1], v45 * (float)(v44 - v43[3].f32[0]));
  *v43 = v46;
  v43[3].f32[0] = v44;
  v43[2].i32[0] = 0;
  v43[2].i16[2] = 256;
LABEL_37:
  geom::straight_skeleton_evaluator<float>::edge_event_for_edge((uint64_t)a1, vertex_and_update_neighbors, (float32x2_t *)v117);
  if (v119)
  {
    v109 = *(_OWORD *)v117;
    v113 = v118;
    v47 = a1[23];
    v48 = a1[22];
    if (v48 >= v47)
    {
      v51 = a1[21];
      v52 = (uint64_t)(v48 - v51) >> 5;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 59)
        goto LABEL_111;
      v54 = v47 - v51;
      if (v54 >> 4 > v53)
        v53 = v54 >> 4;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0)
        v55 = 0x7FFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
        v56 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 23), v55);
      else
        v56 = 0;
      v57 = &v56[32 * v52];
      v58 = &v56[32 * v55];
      *(_OWORD *)v57 = v109;
      *((_QWORD *)v57 + 2) = v113;
      *((_DWORD *)v57 + 6) = 0;
      v50 = (uint64_t)(v57 + 32);
      v60 = (char *)a1[21];
      v59 = (char *)a1[22];
      if (v59 != v60)
      {
        do
        {
          v61 = *((_OWORD *)v59 - 1);
          *((_OWORD *)v57 - 2) = *((_OWORD *)v59 - 2);
          *((_OWORD *)v57 - 1) = v61;
          v57 -= 32;
          v59 -= 32;
        }
        while (v59 != v60);
        v59 = (char *)a1[21];
      }
      a1[21] = v57;
      a1[22] = v50;
      a1[23] = v58;
      if (v59)
        operator delete(v59);
    }
    else
    {
      v49 = *(_OWORD *)v117;
      *(_QWORD *)(v48 + 16) = v118;
      *(_OWORD *)v48 = v49;
      *(_DWORD *)(v48 + 24) = 0;
      v50 = v48 + 32;
    }
    a1[22] = v50;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(a1[21], v50, (uint64_t)v127, (v50 - a1[21]) >> 5);
  }
  geom::straight_skeleton_evaluator<float>::edge_event_for_edge((uint64_t)a1, v18, (float32x2_t *)v117);
  if (v119)
  {
    v110 = *(_OWORD *)v117;
    v114 = v118;
    v62 = a1[23];
    v63 = a1[22];
    if (v63 >= v62)
    {
      v66 = a1[21];
      v67 = (uint64_t)(v63 - v66) >> 5;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 59)
        goto LABEL_111;
      v69 = v62 - v66;
      if (v69 >> 4 > v68)
        v68 = v69 >> 4;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFE0)
        v70 = 0x7FFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
        v71 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 23), v70);
      else
        v71 = 0;
      v72 = &v71[32 * v67];
      v73 = &v71[32 * v70];
      *(_OWORD *)v72 = v110;
      *((_QWORD *)v72 + 2) = v114;
      *((_DWORD *)v72 + 6) = 0;
      v65 = (uint64_t)(v72 + 32);
      v75 = (char *)a1[21];
      v74 = (char *)a1[22];
      if (v74 != v75)
      {
        do
        {
          v76 = *((_OWORD *)v74 - 1);
          *((_OWORD *)v72 - 2) = *((_OWORD *)v74 - 2);
          *((_OWORD *)v72 - 1) = v76;
          v72 -= 32;
          v74 -= 32;
        }
        while (v74 != v75);
        v74 = (char *)a1[21];
      }
      a1[21] = v72;
      a1[22] = v65;
      a1[23] = v73;
      if (v74)
        operator delete(v74);
    }
    else
    {
      v64 = *(_OWORD *)v117;
      *(_QWORD *)(v63 + 16) = v118;
      *(_OWORD *)v63 = v64;
      *(_DWORD *)(v63 + 24) = 0;
      v65 = v63 + 32;
    }
    a1[22] = v65;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(a1[21], v65, (uint64_t)v127, (v65 - a1[21]) >> 5);
  }
  geom::straight_skeleton_evaluator<float>::edge_event_for_edge((uint64_t)a1, v30, (float32x2_t *)v117);
  if (v119)
  {
    v111 = *(_OWORD *)v117;
    v115 = v118;
    v77 = a1[23];
    v78 = a1[22];
    if (v78 >= v77)
    {
      v81 = a1[21];
      v82 = (uint64_t)(v78 - v81) >> 5;
      v83 = v82 + 1;
      if ((unint64_t)(v82 + 1) >> 59)
        goto LABEL_111;
      v84 = v77 - v81;
      if (v84 >> 4 > v83)
        v83 = v84 >> 4;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFE0)
        v85 = 0x7FFFFFFFFFFFFFFLL;
      else
        v85 = v83;
      if (v85)
        v86 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 23), v85);
      else
        v86 = 0;
      v87 = &v86[32 * v82];
      v88 = &v86[32 * v85];
      *(_OWORD *)v87 = v111;
      *((_QWORD *)v87 + 2) = v115;
      *((_DWORD *)v87 + 6) = 0;
      v80 = (uint64_t)(v87 + 32);
      v90 = (char *)a1[21];
      v89 = (char *)a1[22];
      if (v89 != v90)
      {
        do
        {
          v91 = *((_OWORD *)v89 - 1);
          *((_OWORD *)v87 - 2) = *((_OWORD *)v89 - 2);
          *((_OWORD *)v87 - 1) = v91;
          v87 -= 32;
          v89 -= 32;
        }
        while (v89 != v90);
        v89 = (char *)a1[21];
      }
      a1[21] = v87;
      a1[22] = v80;
      a1[23] = v88;
      if (v89)
        operator delete(v89);
    }
    else
    {
      v79 = *(_OWORD *)v117;
      *(_QWORD *)(v78 + 16) = v118;
      *(_OWORD *)v78 = v79;
      *(_DWORD *)(v78 + 24) = 0;
      v80 = v78 + 32;
    }
    a1[22] = v80;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(a1[21], v80, (uint64_t)v127, (v80 - a1[21]) >> 5);
  }
  geom::straight_skeleton_evaluator<float>::edge_event_for_edge((uint64_t)a1, v13, (float32x2_t *)v117);
  if (v119)
  {
    v112 = *(_OWORD *)v117;
    v116 = v118;
    v92 = a1[23];
    v93 = a1[22];
    if (v93 < v92)
    {
      v94 = *(_OWORD *)v117;
      *(_QWORD *)(v93 + 16) = v118;
      *(_OWORD *)v93 = v94;
      *(_DWORD *)(v93 + 24) = 0;
      v95 = v93 + 32;
LABEL_108:
      a1[22] = v95;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(a1[21], v95, (uint64_t)v127, (v95 - a1[21]) >> 5);
      goto LABEL_109;
    }
    v96 = a1[21];
    v97 = (uint64_t)(v93 - v96) >> 5;
    v98 = v97 + 1;
    if (!((unint64_t)(v97 + 1) >> 59))
    {
      v99 = v92 - v96;
      if (v99 >> 4 > v98)
        v98 = v99 >> 4;
      if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0)
        v100 = 0x7FFFFFFFFFFFFFFLL;
      else
        v100 = v98;
      if (v100)
        v101 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 23), v100);
      else
        v101 = 0;
      v102 = &v101[32 * v97];
      v103 = &v101[32 * v100];
      *(_OWORD *)v102 = v112;
      *((_QWORD *)v102 + 2) = v116;
      *((_DWORD *)v102 + 6) = 0;
      v95 = (uint64_t)(v102 + 32);
      v105 = (char *)a1[21];
      v104 = (char *)a1[22];
      if (v104 != v105)
      {
        do
        {
          v106 = *((_OWORD *)v104 - 1);
          *((_OWORD *)v102 - 2) = *((_OWORD *)v104 - 2);
          *((_OWORD *)v102 - 1) = v106;
          v102 -= 32;
          v104 -= 32;
        }
        while (v104 != v105);
        v104 = (char *)a1[21];
      }
      a1[21] = v102;
      a1[22] = v95;
      a1[23] = v103;
      if (v104)
        operator delete(v104);
      goto LABEL_108;
    }
LABEL_111:
    abort();
  }
LABEL_109:
  v3 = vertex_and_update_neighbors | (unint64_t)(v30 << 32);
  v4 = v3 & 0xFFFFFFFFFFFFFF00;
LABEL_9:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return v4 & 0xFFFFFFFFFFFFFF00 | v3;
}

uint64_t geom::straight_skeleton_evaluator<float>::add_joiner_mesh_faces_for_events(uint64_t a1, uint64_t *a2, uint64_t a3, float a4)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *p_src;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t __src;
  __int128 v20;
  __int128 v21;
  int v22;

  v20 = 0u;
  v21 = 0u;
  v22 = 1065353216;
  if (a3)
  {
    v6 = a2;
    v7 = (uint64_t *)((char *)a2 + 12 * a3);
    while (1)
    {
      v8 = *v6;
      v9 = *((_DWORD *)v6 + 2);
      if (v9)
        break;
      LODWORD(__src) = *v6;
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 120) + 104 * v8 + 96))
      {
        p_src = (unsigned int *)&__src;
        v13 = (uint64_t *)&__src;
LABEL_12:
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v20, p_src, v13);
      }
LABEL_13:
      v6 = (uint64_t *)((char *)v6 + 12);
      if (v6 == v7)
      {
        v14 = (uint64_t *)v21;
        if ((_QWORD)v21)
        {
          do
          {
            geom::straight_skeleton_evaluator<float>::add_triangle_fan_for_active_vertex((void **)a1, *((_DWORD *)v14 + 4), a4);
            v14 = (uint64_t *)*v14;
          }
          while (v14);
          goto LABEL_16;
        }
        return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v20);
      }
    }
    if (v9 != 1)
      goto LABEL_22;
    __src = *v6;
    v10 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v10 + 104 * v8 + 96))
    {
      v11 = HIDWORD(v8);
    }
    else
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v20, (unsigned int *)&__src, &__src);
      LODWORD(v11) = HIDWORD(__src);
      v10 = *(_QWORD *)(a1 + 120);
    }
    if (*(_DWORD *)(v10 + 104 * v11 + 96))
      goto LABEL_13;
    p_src = (unsigned int *)&__src + 1;
    v13 = (uint64_t *)((char *)&__src + 4);
    goto LABEL_12;
  }
LABEL_16:
  v15 = (uint64_t **)v21;
  if (!(_QWORD)v21)
    return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v20);
  while (1)
  {
    v16 = *(_QWORD *)(a1 + 120) + 104 * *((unsigned int *)v15 + 4);
    if (*(_DWORD *)(v16 + 96))
      break;
    LODWORD(__src) = *(_DWORD *)(v16 + 88);
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(v16 + 64), (char *)&__src, (uint64_t)&__src + 4, 1uLL);
    if (*(_BYTE *)(v16 + 92))
      *(_BYTE *)(v16 + 92) = 0;
    v15 = (uint64_t **)*v15;
    if (!v15)
      return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v20);
  }
LABEL_22:
  v18 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom::straight_skeleton_evaluator<float>::extract_offset_curve(v18);
}

void geom::straight_skeleton_evaluator<float>::extract_offset_curve(float32x2_t *a1, float32x2_t *a2, _QWORD *a3)
{
  _QWORD v3[2];
  float32x2_t *v4[2];

  a2[1] = *a2;
  a3[1] = *a3;
  v4[0] = a1;
  v4[1] = a2;
  v3[0] = a3;
  v3[1] = a2;
  _ZNK4geom27straight_skeleton_evaluatorIfE25for_each_wavefront_vertexIZNKS1_20extract_offset_curveERNSt3__16vectorIDv2_fNS3_9allocatorIS5_EEEERNS4_IjNS6_IjEEEEEUljE_ZNKS1_20extract_offset_curveES9_SC_EUlvE_EEvOT_OT0_((uint64_t)a1, v4, v3);
}

void _ZNK4geom27straight_skeleton_evaluatorIfE25for_each_wavefront_vertexIZNKS1_20extract_offset_curveERNSt3__16vectorIDv2_fNS3_9allocatorIS5_EEEERNS4_IjNS6_IjEEEEEUljE_ZNKS1_20extract_offset_curveES9_SC_EUlvE_EEvOT_OT0_(uint64_t a1, float32x2_t **a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  float32x2_t *v14;
  float32x2_t *v15;
  float v16;
  float32x2_t v17;
  void **v18;
  float32x2_t v19;
  float32x2_t *v20;
  unint64_t v21;
  float32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float32x2_t *v28;
  char *v29;
  char *v30;
  float32x2_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3), 0);
  v6 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  if (v5 != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *((_QWORD *)__p[0] + (v7 >> 6));
      if ((v9 & (1 << v7)) != 0 || *(_DWORD *)(v6 + 104 * v7 + 96))
      {
        *((_QWORD *)__p[0] + (v7 >> 6)) = v9 | (1 << v7);
      }
      else
      {
        v10 = v8;
        v11 = (unint64_t)v8 >> 6;
        v12 = 1 << v8;
        for (i = *((_QWORD *)__p[0] + v11); (v12 & i) == 0; i = v32[v10 >> 6])
        {
          v14 = *a2;
          v15 = (float32x2_t *)(*(_QWORD *)&(*a2)[15] + 104 * v10);
          if (v15[12].i32[0])
            goto LABEL_52;
          v16 = v15[2].f32[0];
          if (fabsf(v16) <= 0.000005)
            v17 = *v15;
          else
            v17 = vmla_n_f32(*v15, v15[1], v16 * (float)(*(float *)(*(_QWORD *)&v14[13] - 4) - v15[3].f32[0]));
          v18 = (void **)a2[1];
          v19 = vmla_n_f32(v14[25], v17, v14[26].f32[0]);
          v20 = (float32x2_t *)v18[1];
          v21 = (unint64_t)v18[2];
          if ((unint64_t)v20 >= v21)
          {
            v23 = ((char *)v20 - (_BYTE *)*v18) >> 3;
            if ((unint64_t)(v23 + 1) >> 61)
              goto LABEL_53;
            v24 = v21 - (_QWORD)*v18;
            v25 = v24 >> 2;
            if (v24 >> 2 <= (unint64_t)(v23 + 1))
              v25 = v23 + 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v18 + 2), v26);
            else
              v27 = 0;
            v28 = (float32x2_t *)&v27[8 * v23];
            *v28 = v19;
            v22 = v28 + 1;
            v30 = (char *)*v18;
            v29 = (char *)v18[1];
            if (v29 != *v18)
            {
              do
              {
                v31 = *(float32x2_t *)(v29 - 8);
                v29 -= 8;
                v28[-1] = v31;
                --v28;
              }
              while (v29 != v30);
              v29 = (char *)*v18;
            }
            *v18 = v28;
            v18[1] = v22;
            v18[2] = &v27[8 * v26];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v20 = v19;
            v22 = v20 + 1;
          }
          v18[1] = v22;
          v32 = __p[0];
          *((_QWORD *)__p[0] + v11) |= v12;
          v33 = *(_QWORD *)(a1 + 120) + 104 * v10;
          if (*(_DWORD *)(v33 + 96))
          {
LABEL_52:
            std::__throw_bad_variant_access[abi:nn180100]();
LABEL_53:
            abort();
          }
          v10 = *(unsigned int *)(v33 + 36);
          v11 = v10 >> 6;
          v12 = 1 << v10;
        }
        v34 = *a3;
        v35 = (*(_QWORD *)(a3[1] + 8) - *(_QWORD *)a3[1]) >> 3;
        v36 = *(_DWORD **)(*a3 + 8);
        v37 = *(_QWORD *)(*a3 + 16);
        if ((unint64_t)v36 >= v37)
        {
          v39 = *(_DWORD **)v34;
          v40 = ((uint64_t)v36 - *(_QWORD *)v34) >> 2;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62)
            goto LABEL_53;
          v42 = v37 - (_QWORD)v39;
          if (v42 >> 1 > v41)
            v41 = v42 >> 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(*a3 + 16, v43);
            v39 = *(_DWORD **)v34;
            v36 = *(_DWORD **)(v34 + 8);
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[4 * v40];
          *(_DWORD *)v45 = v35;
          v38 = v45 + 4;
          while (v36 != v39)
          {
            v46 = *--v36;
            *((_DWORD *)v45 - 1) = v46;
            v45 -= 4;
          }
          *(_QWORD *)v34 = v45;
          *(_QWORD *)(v34 + 8) = v38;
          *(_QWORD *)(v34 + 16) = &v44[4 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v36 = v35;
          v38 = v36 + 1;
        }
        *(_QWORD *)(v34 + 8) = v38;
        v6 = *(_QWORD *)(a1 + 120);
        v5 = *(_QWORD *)(a1 + 128);
      }
      v7 = ++v8;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((v5 - v6) >> 3) > (unint64_t)v8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

_DWORD *geom::straight_skeleton_evaluator<float>::extract_joiner_mesh(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  float32x2_t *v11;
  float32x2_t *v12;
  float32x2_t v13;
  float *v14;
  float *v15;
  float v16;
  float32x2_t v18;
  void **v19;

  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  v11 = *(float32x2_t **)a1;
  v12 = *(float32x2_t **)(a1 + 8);
  v19 = (void **)a2;
  while (v11 != v12)
  {
    v13 = *v11++;
    v18 = vmla_n_f32(*(float32x2_t *)(a1 + 200), v13, *(float *)(a1 + 208));
    _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8nn180100EOS2_(&v19, &v18);
  }
  v14 = *(float **)(a1 + 96);
  v15 = *(float **)(a1 + 104);
  v19 = (void **)a6;
  while (v14 != v15)
  {
    v16 = *v14++;
    v18.f32[0] = v16 * *(float *)(a1 + 208);
    std::back_insert_iterator<std::vector<float>>::operator=[abi:nn180100]((uint64_t *)&v19, &v18);
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(a1 + 24), *(_DWORD **)(a1 + 32), (uint64_t)a3);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(a1 + 48), *(_DWORD **)(a1 + 56), (uint64_t)a4);
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(a1 + 72), *(_DWORD **)(a1 + 80), (uint64_t)a5);
}

BOOL geom::straight_skeleton_evaluator<float>::event_time_comparator::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;
  float v5;
  float v6;

  geom::straight_skeleton_evaluator<float>::event_time(a2);
  v5 = v4;
  geom::straight_skeleton_evaluator<float>::event_time(a3);
  return v5 > v6;
}

__n128 geom::straight_skeleton_evaluator<float>::vertex_state::vertex_state(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = (__n128)a2[4];
  *(__n128 *)(a1 + 64) = result;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

__n128 geom::straight_skeleton_evaluator<float>::vertex_state::vertex_state(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 96) = 1;
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::vertex_state::get_active(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 96))
  {
    v1 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::vertex_state::get_active_or_null(v1);
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::vertex_state::get_active_or_null(uint64_t result)
{
  if (*(_DWORD *)(result + 96))
    return 0;
  return result;
}

BOOL geom::straight_skeleton_evaluator<float>::vertex_state::is_active(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 0;
}

uint64_t geom::straight_skeleton_evaluator<float>::vertex_state::get_inactive(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 96) != 1)
  {
    v1 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::vertex_state::spoke(v1);
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::vertex_state::spoke(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 96) >= 2u)
  {
    v1 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::vertex_state::make_inactive(v1);
  }
  return result;
}

void geom::straight_skeleton_evaluator<float>::vertex_state::make_inactive(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[32];
  _BYTE v4[32];
  std::vector<unsigned int> __p;
  uint64_t v6;
  char v7;

  if (!*(_DWORD *)(a1 + 96))
  {
    *(_OWORD *)v4 = *(_OWORD *)a1;
    *(_OWORD *)&v4[16] = *(_OWORD *)(a1 + 16);
    std::vector<float>::vector(&__p, (const std::vector<unsigned int> *)(a1 + 64));
    v6 = *(_QWORD *)(a1 + 88);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)&v3[12] = *(_OWORD *)&v4[12];
    v2 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v2 != -1)
    {
      if ((_DWORD)v2 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)v3;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)&v3[16];
        goto LABEL_7;
      }
      ((void (*)(char *, uint64_t))*(&off_24F14BA20 + v2))(&v7, a1);
    }
    *(_OWORD *)a1 = *(_OWORD *)v3;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&v3[16];
    *(_DWORD *)(a1 + 96) = 1;
LABEL_7:
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
}

uint64_t geom::straight_skeleton_evaluator<float>::remove_vertex_from_face_neighbors(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = (unsigned int *)(a3 + 52);
  if (*(_BYTE *)(a3 + 56))
  {
    v4 = *(_QWORD *)(result + 120) + 104 * *v3;
    if (*(_DWORD *)(v4 + 96))
      goto LABEL_10;
    v5 = *(_DWORD *)(a3 + 44);
    *(_BYTE *)(v4 + 48) = *(_BYTE *)(a3 + 48);
    *(_DWORD *)(v4 + 44) = v5;
  }
  else
  {
    v6 = *(unsigned int *)(a3 + 40);
    if ((_DWORD)v6 != -1)
    {
      v7 = *(_QWORD *)(result + 144) + 8 * v6;
      v8 = *(_DWORD *)(a3 + 44);
      *(_BYTE *)(v7 + 4) = *(_BYTE *)(a3 + 48);
      *(_DWORD *)v7 = v8;
    }
  }
  if (!*(_BYTE *)(a3 + 48))
    return result;
  v9 = *(_QWORD *)(result + 120) + 104 * *(unsigned int *)(a3 + 44);
  if (*(_DWORD *)(v9 + 96))
  {
LABEL_10:
    v11 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::create_vertex_and_update_neighbors(v11);
  }
  v10 = *v3;
  *(_BYTE *)(v9 + 56) = *(_BYTE *)(a3 + 56);
  *(_DWORD *)(v9 + 52) = v10;
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::create_vertex_and_update_neighbors(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, unsigned int a8, float a9, double a10)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  float32x2_t *v25;
  float v26;
  float32x2_t v27;
  float32x2_t *v28;
  float v29;
  float32x2_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v43[2];
  _BYTE v44[25];
  void *__p;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  _OWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE v54[9];

  v20 = a1 + 15;
  v19 = a1[15];
  v41 = a1[16];
  geom::straight_skeleton_evaluator<float>::find_distinct_neighbor((uint64_t)a1, a2, a3, 0, *(float32x2_t *)&a10, a9);
  if ((v21 & 0xFF00000000) != 0)
    v22 = v21;
  else
    v22 = a2;
  geom::straight_skeleton_evaluator<float>::find_distinct_neighbor((uint64_t)a1, a3, a2, 1, *(float32x2_t *)&a10, a9);
  if ((v23 & 0xFF00000000) != 0)
    v24 = v23;
  else
    v24 = a3;
  v25 = (float32x2_t *)(*v20 + 104 * v22);
  if (v25[12].i32[0])
    goto LABEL_31;
  v26 = v25[2].f32[0];
  if (fabsf(v26) <= 0.000005)
    v27 = *v25;
  else
    v27 = vmla_n_f32(*v25, v25[1], v26 * (float)(a9 - v25[3].f32[0]));
  v28 = (float32x2_t *)(*v20 + 104 * v24);
  if (v28[12].i32[0])
    goto LABEL_31;
  v29 = v28[2].f32[0];
  if (fabsf(v29) <= 0.000005)
    v30 = *v28;
  else
    v30 = vmla_n_f32(*v28, v28[1], v29 * (float)(a9 - v28[3].f32[0]));
  geom::spoke<float>::spoke((uint64_t)v43, a10, v27, v30, a9);
  *(_DWORD *)v44 = a2;
  *(_DWORD *)&v44[4] = a3;
  *(_DWORD *)&v44[8] = a8;
  *(_DWORD *)&v44[12] = a5;
  v44[16] = BYTE4(a5);
  *(_DWORD *)&v44[20] = a4;
  v44[24] = BYTE4(a4);
  v31 = *((_QWORD *)a6 + 2);
  v32 = *a6;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  BYTE4(v48) = BYTE4(a7);
  LODWORD(v48) = a7;
  v49[0] = v43[0];
  v49[1] = v43[1];
  v50[0] = *(_OWORD *)v44;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v44[9];
  v50[2] = v32;
  __p = 0;
  v46 = 0;
  v47 = 0;
  v51 = v31;
  v52 = v48;
  v53 = 0;
  std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::push_back[abi:nn180100](v20, (uint64_t)v49);
  if (v53 != -1)
    ((void (*)(_BYTE *, _OWORD *))*(&off_24F14BA20 + v53))(v54, v49);
  v53 = -1;
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v33 = *v20;
  v34 = *v20 + 104 * a2;
  if (*(_DWORD *)(v34 + 96))
    goto LABEL_31;
  result = -991146299 * ((unint64_t)(v41 - v19) >> 3);
  *(_DWORD *)(v34 + 36) = result;
  v36 = v33 + 104 * a3;
  if (*(_DWORD *)(v36 + 96))
    goto LABEL_31;
  *(_DWORD *)(v36 + 32) = result;
  if (BYTE4(a4))
  {
    v37 = v33 + 104 * a4;
    if (*(_DWORD *)(v37 + 96))
      goto LABEL_31;
    *(_DWORD *)(v37 + 44) = result;
    *(_BYTE *)(v37 + 48) = 1;
  }
  if (!BYTE4(a5))
    goto LABEL_27;
  v38 = *v20 + 104 * a5;
  if (*(_DWORD *)(v38 + 96))
  {
LABEL_31:
    v40 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge_on_face<geom::straight_skeleton_evaluator<float>::apply_split_event(geom::straight_skeleton_evaluator<float>::split_event const&)::{lambda(unsigned int,unsigned int)#1}>(v40);
  }
  *(_DWORD *)(v38 + 52) = result;
  *(_BYTE *)(v38 + 56) = 1;
LABEL_27:
  if (!BYTE4(a4) && a8 != -1)
  {
    v39 = a1[18] + 8 * a8;
    *(_DWORD *)v39 = result;
    *(_BYTE *)(v39 + 4) = 1;
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge_on_face<geom::straight_skeleton_evaluator<float>::apply_split_event(geom::straight_skeleton_evaluator<float>::split_event const&)::{lambda(unsigned int,unsigned int)#1}>(uint64_t result, uint64_t a2, unsigned int a3, double a4, double a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v12;
  float32x2_t *v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_QWORD *)(*(_QWORD *)(result + 144) + 8 * a3) & 0xFF00000000) != 0)
  {
    v7 = result;
    v8 = *(_QWORD *)(*(_QWORD *)(result + 144) + 8 * a3);
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 120) + 104 * v8;
      if (*(_DWORD *)(v9 + 96))
        break;
      v10 = *(_QWORD *)(*(_QWORD *)a2 + 120);
      v11 = (float32x2_t *)(v10 + 104 * v8);
      if (v11[12].i32[0])
        break;
      v12 = *(unsigned int *)(v9 + 36);
      v13 = (float32x2_t *)(v10 + 104 * v12);
      if (v13[12].i32[0])
        break;
      result = geom::intersect_wavefront_edge_spoke<float>(v11, v13, *(float32x2_t **)(a2 + 8), a4, a5, a6);
      if ((result & 0xFF00000000) != 0)
      {
        v14 = *(_QWORD *)(a2 + 16);
        if (*(_BYTE *)(v14 + 8))
        {
          *(_DWORD *)v14 = v8;
          *(_DWORD *)(v14 + 4) = v12;
        }
        else
        {
          *(_QWORD *)v14 = v8 | (v12 << 32);
          *(_BYTE *)(v14 + 8) = 1;
        }
      }
      v8 = *(unsigned int *)(v9 + 44);
      if (!*(_BYTE *)(v9 + 48))
        return result;
    }
    v15 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::add_triangle_fan_for_active_vertex(v15);
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::add_triangle_fan_for_active_vertex(void **a1, unsigned int a2, float a3)
{
  float32x2_t *v3;
  uint64_t v7;
  char *v8;
  float32x2_t *v9;
  float v10;
  float32x2_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float32x2_t *v19;
  char *v20;
  char *v21;
  char *v22;
  float32x2_t v23;
  float32x2_t v24;
  float *v25;
  float v26;
  unint64_t v28;
  float *v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  float *v36;
  char *v37;
  int v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  float32x2_t v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  __int32 v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unsigned __int32 v61;
  uint64_t v62;
  int *v63;
  float32x2_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;

  v3 = (float32x2_t *)((char *)a1[15] + 104 * a2);
  if (v3[12].i32[0])
    goto LABEL_86;
  if (v3[11].i8[4])
  {
    v7 = v3[11].u32[0];
  }
  else
  {
    v8 = (char *)*a1;
    v9 = (float32x2_t *)a1[1];
    v10 = v3[2].f32[0];
    if (fabsf(v10) <= 0.000005)
      v11 = *v3;
    else
      v11 = vmla_n_f32(*v3, v3[1], v10 * (float)(a3 - v3[3].f32[0]));
    v7 = ((char *)v9 - (_BYTE *)*a1) >> 3;
    v12 = (uint64_t)(a1 + 2);
    v13 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v13)
    {
      if ((unint64_t)(v7 + 1) >> 61)
        goto LABEL_87;
      v15 = v13 - (_QWORD)v8;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v7 + 1))
        v16 = v7 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v12, v17);
      else
        v18 = 0;
      v19 = (float32x2_t *)&v18[8 * v7];
      v20 = &v18[8 * v17];
      *v19 = v11;
      v14 = v19 + 1;
      v22 = (char *)*a1;
      v21 = (char *)a1[1];
      if (v21 != *a1)
      {
        do
        {
          v23 = *(float32x2_t *)(v21 - 8);
          v21 -= 8;
          v19[-1] = v23;
          --v19;
        }
        while (v21 != v22);
        v21 = (char *)*a1;
      }
      *a1 = v19;
      a1[1] = v14;
      a1[2] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v9 = v11;
      v14 = v9 + 1;
    }
    a1[1] = v14;
  }
  v24 = *(float32x2_t *)((char *)*a1 + 8 * v7);
  v25 = (float *)a1[13];
  v26 = *(v25 - 1);
  if (v26 == a3 || (float)(v26 + 0.000005) > a3)
  {
    *((_DWORD *)a1[10] - 1) = (unint64_t)((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3;
  }
  else
  {
    v28 = (unint64_t)a1[14];
    if ((unint64_t)v25 >= v28)
    {
      v30 = (float *)a1[12];
      v31 = v25 - v30;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62)
        goto LABEL_87;
      v33 = v28 - (_QWORD)v30;
      if (v33 >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 14), v34);
        v30 = (float *)a1[12];
        v25 = (float *)a1[13];
      }
      else
      {
        v35 = 0;
      }
      v36 = (float *)&v35[4 * v31];
      v37 = &v35[4 * v34];
      *v36 = a3;
      v29 = v36 + 1;
      while (v25 != v30)
      {
        v38 = *((_DWORD *)v25-- - 1);
        *((_DWORD *)v36-- - 1) = v38;
      }
      a1[12] = v36;
      a1[13] = v29;
      a1[14] = v37;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v25 = a3;
      v29 = v25 + 1;
    }
    a1[13] = v29;
    v39 = (unint64_t)((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3;
    v40 = (char *)a1[10];
    v41 = (unint64_t)a1[11];
    if ((unint64_t)v40 >= v41)
    {
      v43 = (char *)a1[9];
      v44 = (v40 - v43) >> 2;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62)
        goto LABEL_87;
      v46 = v41 - (_QWORD)v43;
      if (v46 >> 1 > v45)
        v45 = v46 >> 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 11), v47);
        v43 = (char *)a1[9];
        v40 = (char *)a1[10];
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[4 * v44];
      v50 = &v48[4 * v47];
      *(_DWORD *)v49 = v39;
      v42 = v49 + 4;
      while (v40 != v43)
      {
        v51 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *((_DWORD *)v49 - 1) = v51;
        v49 -= 4;
      }
      a1[9] = v49;
      a1[10] = v42;
      a1[11] = v50;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *(_DWORD *)v40 = v39;
      v42 = v40 + 4;
    }
    a1[10] = v42;
  }
  v52 = v3[8];
  if (*(_QWORD *)&v3[9] - *(_QWORD *)&v52 >= 5uLL)
  {
    v53 = 2;
    v54 = 1;
    do
    {
      geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, *(_DWORD *)(*(_QWORD *)&v52 + 4 * (v53 - 2)), *(_DWORD *)(*(_QWORD *)&v52 + 4 * v54), v7);
      v54 = v53;
      v52 = v3[8];
      ++v53;
    }
    while (v54 < (uint64_t)(*(_QWORD *)&v3[9] - *(_QWORD *)&v52) >> 2);
  }
  v55 = v3[4].u32[0];
  v56 = v3[4].i32[1];
  geom::straight_skeleton_evaluator<float>::find_distinct_neighbor((uint64_t)a1, v55, a2, 0, v24, a3);
  if ((v57 & 0xFF00000000) != 0)
    v55 = v57;
  geom::straight_skeleton_evaluator<float>::find_distinct_neighbor((uint64_t)a1, v3[4].u32[1], a2, 1, v24, a3);
  v59 = a1[15];
  v60 = (uint64_t)v59 + 104 * v55;
  if (*(_DWORD *)(v60 + 96)
    || ((v58 & 0xFF00000000) != 0 ? (v61 = v58) : (v61 = v56), v62 = (uint64_t)v59 + 104 * v61, *(_DWORD *)(v62 + 96)))
  {
LABEL_86:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_87:
    abort();
  }
  if (v3[4].i32[1] != a2)
  {
    v66 = (uint64_t)v59 + 104 * *(unsigned int *)(v60 + 36);
    if (!*(_DWORD *)(v66 + 96))
    {
      v67 = (uint64_t)v59 + 104 * *(unsigned int *)(v62 + 32);
      if (!*(_DWORD *)(v67 + 96))
      {
        if (*(_BYTE *)(v60 + 92))
          v68 = (int *)(v60 + 88);
        else
          v68 = (int *)(*(_QWORD *)(v60 + 72) - 4);
        geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, *v68, **(_DWORD **)(v66 + 64), v7);
        v65 = *(_DWORD *)(*(_QWORD *)(v67 + 72) - 4);
        if (*(_BYTE *)(v62 + 92))
          v63 = (int *)(v62 + 88);
        else
          v63 = *(int **)(v62 + 64);
        goto LABEL_84;
      }
    }
    goto LABEL_86;
  }
  v63 = (int *)v3[8];
  v64 = v3[9];
  if (*(_QWORD *)&v64 - (_QWORD)v63 >= 9uLL)
  {
    v65 = *(_DWORD *)(*(_QWORD *)&v64 - 4);
LABEL_84:
    geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, v65, *v63, v7);
  }
  v3[11].i32[0] = v7;
  v3[11].i8[4] = 1;
  return v7;
}

void geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(_QWORD *a1, int a2, int a3, int a4)
{
  char *v8;
  char **v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;

  v9 = (char **)(a1 + 5);
  v8 = (char *)a1[5];
  v10 = (char *)a1[4];
  if (v10 >= v8)
  {
    v12 = (_BYTE *)a1[3];
    v13 = (v10 - v12) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      goto LABEL_66;
    v15 = v8 - v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v16);
      v12 = (_BYTE *)a1[3];
      v10 = (char *)a1[4];
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v8 = &v17[4 * v16];
    *(_DWORD *)v18 = a2;
    v11 = v18 + 4;
    while (v10 != v12)
    {
      v19 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v18 - 1) = v19;
      v18 -= 4;
    }
    a1[3] = v18;
    a1[4] = v11;
    a1[5] = v8;
    if (v12)
    {
      operator delete(v12);
      v8 = *v9;
    }
  }
  else
  {
    *(_DWORD *)v10 = a2;
    v11 = v10 + 4;
  }
  a1[4] = v11;
  if (v11 >= v8)
  {
    v21 = (_BYTE *)a1[3];
    v22 = (v11 - v21) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
      goto LABEL_66;
    v24 = v8 - v21;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v25);
      v21 = (_BYTE *)a1[3];
      v11 = (char *)a1[4];
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[4 * v22];
    v8 = &v26[4 * v25];
    *(_DWORD *)v27 = a3;
    v20 = v27 + 4;
    while (v11 != v21)
    {
      v28 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v27 - 1) = v28;
      v27 -= 4;
    }
    a1[3] = v27;
    a1[4] = v20;
    a1[5] = v8;
    if (v21)
    {
      operator delete(v21);
      v8 = *v9;
    }
  }
  else
  {
    *(_DWORD *)v11 = a3;
    v20 = v11 + 4;
  }
  a1[4] = v20;
  if (v20 >= v8)
  {
    v30 = (char *)a1[3];
    v31 = (v20 - v30) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      goto LABEL_66;
    v33 = v8 - v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v34);
      v30 = (char *)a1[3];
      v20 = (char *)a1[4];
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[4 * v31];
    v37 = &v35[4 * v34];
    *(_DWORD *)v36 = a4;
    v29 = v36 + 4;
    while (v20 != v30)
    {
      v38 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v36 - 1) = v38;
      v36 -= 4;
    }
    a1[3] = v36;
    a1[4] = v29;
    a1[5] = v37;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_DWORD *)v20 = a4;
    v29 = v20 + 4;
  }
  v39 = a1[8];
  a1[4] = v29;
  v40 = ((unint64_t)v29 - a1[3]) >> 2;
  v41 = (char *)a1[7];
  if ((unint64_t)v41 < v39)
  {
    *(_DWORD *)v41 = v40;
    v42 = v41 + 4;
    goto LABEL_65;
  }
  v43 = (char *)a1[6];
  v44 = (v41 - v43) >> 2;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 62)
LABEL_66:
    abort();
  v46 = v39 - (_QWORD)v43;
  if (v46 >> 1 > v45)
    v45 = v46 >> 1;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
    v47 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v47);
    v43 = (char *)a1[6];
    v41 = (char *)a1[7];
  }
  else
  {
    v48 = 0;
  }
  v49 = &v48[4 * v44];
  v50 = &v48[4 * v47];
  *(_DWORD *)v49 = v40;
  v42 = v49 + 4;
  while (v41 != v43)
  {
    v51 = *((_DWORD *)v41 - 1);
    v41 -= 4;
    *((_DWORD *)v49 - 1) = v51;
    v49 -= 4;
  }
  a1[6] = v49;
  a1[7] = v42;
  a1[8] = v50;
  if (v43)
    operator delete(v43);
LABEL_65:
  a1[7] = v42;
}

float32x2_t geom::straight_skeleton_evaluator<float>::find_distinct_neighbor(uint64_t a1, unsigned int a2, unsigned int a3, int a4, float32x2_t result, float a6)
{
  uint64_t v6;
  float32x2_t *v7;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  float32x2_t *v12;
  float32x2_t v13;

  v6 = a2;
  if (a2 != (unint64_t)a3)
  {
    while (1)
    {
      v7 = (float32x2_t *)(*(_QWORD *)(a1 + 120) + 104 * v6);
      if (v7[12].i32[0])
        break;
      v8 = v7[2].f32[0];
      if (fabsf(v8) <= 0.000005)
        v9 = *v7;
      else
        v9 = vmla_n_f32(*v7, v7[1], v8 * (float)(a6 - v7[3].f32[0]));
      v10 = vsub_f32(v9, result);
      if (sqrtf(vaddv_f32(vmul_f32(v10, v10))) <= 0.000005)
      {
        v11 = a4 ? 36 : 32;
        v6 = *(unsigned int *)((char *)v7->u32 + v11);
        if (v6 != a3)
          continue;
      }
      return result;
    }
    v12 = (float32x2_t *)std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<float>::internal_to_user_position(v12, v13);
  }
  return result;
}

float32x2_t geom::straight_skeleton_evaluator<float>::internal_to_user_position(float32x2_t *a1, float32x2_t a2)
{
  return vmla_n_f32(a1[25], a2, a1[26].f32[0]);
}

void geom::straight_skeleton_evaluator<float>::check_topological_invariants(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  std::string *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  char *v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  int64x2_t v63;
  char *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  int64x2_t v88;
  char *v89;
  std::string *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  int64x2_t v113;
  char *v114;
  std::string *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  _QWORD *v125;
  _OWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  __int128 v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  __int128 v144;
  int64x2_t v145;
  char *v146;
  std::string *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  int64x2_t v155;
  char *v156;
  std::string *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  _OWORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  __int128 v170;
  int64x2_t v171;
  char *v172;
  std::string *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  _QWORD *v185;
  _QWORD *v186;
  _OWORD *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  __int128 v196;
  int64x2_t v197;
  char *v198;
  std::string *v199;
  _QWORD *v200;
  _QWORD *v201;
  _OWORD *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  __int128 v211;
  int64x2_t v212;
  char *v213;
  std::string *v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _OWORD *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  __int128 v230;
  int64x2_t v231;
  char *v232;
  std::string *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  void **v237;
  void **v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  _OWORD *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  __int128 v252;
  int64x2_t v253;
  char *v254;
  std::string *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  void **v260;
  uint64_t v261;
  void **v262;
  uint64_t v263;
  unsigned int v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _OWORD *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  __int128 v277;
  int64x2_t v278;
  char *v279;
  std::string *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  _QWORD *v284;
  _OWORD *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  __int128 v294;
  int64x2_t v295;
  char *v296;
  std::string *v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  void **v301;
  uint64_t v302;
  void **v303;
  uint64_t v304;
  unsigned int v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _OWORD *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  __int128 v318;
  int64x2_t v319;
  char *v320;
  std::string *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  std::locale::id *v325;
  _QWORD *v326;
  _QWORD *v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  const std::locale::facet *v332;
  uint64_t v333;
  uint64_t v335;
  void **v336;
  void **v337;
  void *__p[2];
  uint64_t v339;
  void **v340[2];
  uint64_t v341;
  uint64_t v342;
  void *v343;
  char v344;
  _BYTE v345[152];
  int64x2_t v346;
  std::string *v347;
  std::__split_buffer<std::string> v348;

  v346 = 0uLL;
  v347 = 0;
  v3 = a1[15];
  if (a1[16] != v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = (void **)*MEMORY[0x24BEDB7F0];
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v337 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v335 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v8 = v3 + 104 * v4;
      if (*(_DWORD *)(v8 + 96))
        goto LABEL_4;
      v9 = v3 + 104 * *(unsigned int *)(v8 + 36);
      if (*(_DWORD *)(v9 + 96))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)": next = ", 9);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)", but ", 6);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v13 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v18)
            v18 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v18;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v19);
          else
            v20 = 0;
          v21 = &v20[24 * v17];
          *((_QWORD *)v21 + 2) = v339;
          *(_OWORD *)v21 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v22 = v346.i64[1];
          v23 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v26 = vdupq_n_s64(v346.u64[1]);
            v24 = &v20[24 * v17];
          }
          else
          {
            v24 = &v20[24 * v17];
            do
            {
              v25 = *(_OWORD *)(v22 - 24);
              *((_QWORD *)v24 - 1) = *(_QWORD *)(v22 - 8);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              *(_QWORD *)(v22 - 16) = 0;
              *(_QWORD *)(v22 - 8) = 0;
              *(_QWORD *)(v22 - 24) = 0;
              v22 -= 24;
            }
            while (v22 != v23);
            v26 = v346;
          }
          v27 = v21 + 24;
          v346.i64[0] = (uint64_t)v24;
          v346.i64[1] = (uint64_t)(v21 + 24);
          *(int64x2_t *)&v348.__begin_ = v26;
          v28 = v347;
          v347 = (std::string *)&v20[24 * v19];
          v348.__end_cap_.__value_ = v28;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v26.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v27;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v13 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v13 + 24;
        }
        v340[0] = v6;
        *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
        v29 = MEMORY[0x24BEDB848] + 16;
        v341 = v7;
      }
      else
      {
        if (*(_DWORD *)(v9 + 32) == v5)
          goto LABEL_47;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)": prev and next pointers do not match.  next = ", 47);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", and next->prev = ", 19);
        std::ostream::operator<<();
        std::stringbuf::str();
        v16 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v30 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v31)
            v31 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v32 = 0xAAAAAAAAAAAAAAALL;
          else
            v32 = v31;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v32)
            v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v32);
          else
            v33 = 0;
          v34 = &v33[24 * v30];
          *((_QWORD *)v34 + 2) = v339;
          *(_OWORD *)v34 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v35 = v346.i64[1];
          v36 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v39 = vdupq_n_s64(v346.u64[1]);
            v37 = &v33[24 * v30];
          }
          else
          {
            v37 = &v33[24 * v30];
            do
            {
              v38 = *(_OWORD *)(v35 - 24);
              *((_QWORD *)v37 - 1) = *(_QWORD *)(v35 - 8);
              *(_OWORD *)(v37 - 24) = v38;
              v37 -= 24;
              *(_QWORD *)(v35 - 16) = 0;
              *(_QWORD *)(v35 - 8) = 0;
              *(_QWORD *)(v35 - 24) = 0;
              v35 -= 24;
            }
            while (v35 != v36);
            v39 = v346;
          }
          v40 = v34 + 24;
          v346.i64[0] = (uint64_t)v37;
          v346.i64[1] = (uint64_t)(v34 + 24);
          *(int64x2_t *)&v348.__begin_ = v39;
          v41 = v347;
          v347 = (std::string *)&v33[24 * v32];
          v348.__end_cap_.__value_ = v41;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v39.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v40;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v16 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v16 + 24;
        }
        v340[0] = v6;
        *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
        v341 = v7;
        v29 = v335;
      }
      v342 = v29;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_47:
      v42 = a1[15];
      if (!v42 || (v43 = v42 + 104 * *(unsigned int *)(v8 + 32), *(_DWORD *)(v43 + 96)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)": prev = ", 9);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)", but ", 6);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v46 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v54 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v55 = v54 + 1;
          if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v55)
            v55 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v49 = 0xAAAAAAAAAAAAAAALL;
          else
            v49 = v55;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v49)
            v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v49);
          else
            v50 = 0;
          v56 = &v50[24 * v54];
          *((_QWORD *)v56 + 2) = v339;
          *(_OWORD *)v56 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v57 = v346.u64[1];
          v58 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
            goto LABEL_79;
          v59 = &v50[24 * v54];
          do
          {
            v60 = *(_OWORD *)(v57 - 24);
            *((_QWORD *)v59 - 1) = *(_QWORD *)(v57 - 8);
            *(_OWORD *)(v59 - 24) = v60;
            v59 -= 24;
            *(_QWORD *)(v57 - 16) = 0;
            *(_QWORD *)(v57 - 8) = 0;
            *(_QWORD *)(v57 - 24) = 0;
            v57 -= 24;
          }
          while (v57 != v58);
LABEL_78:
          v63 = v346;
LABEL_80:
          v64 = v56 + 24;
          v346.i64[0] = (uint64_t)v59;
          v346.i64[1] = (uint64_t)(v56 + 24);
          *(int64x2_t *)&v348.__begin_ = v63;
          v65 = v347;
          v347 = (std::string *)&v50[24 * v49];
          v348.__end_cap_.__value_ = v65;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v63.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v64;
          goto LABEL_81;
        }
      }
      else
      {
        if (*(_DWORD *)(v43 + 36) == v5)
          goto LABEL_84;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v44 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)": prev and next pointers do not match.  prev = ", 47);
        v45 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)", and prev->next = ", 19);
        std::ostream::operator<<();
        std::stringbuf::str();
        v46 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v48)
            v48 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v49 = 0xAAAAAAAAAAAAAAALL;
          else
            v49 = v48;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v49)
            v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v49);
          else
            v50 = 0;
          v56 = &v50[24 * v47];
          *((_QWORD *)v56 + 2) = v339;
          *(_OWORD *)v56 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v57 = v346.u64[1];
          v61 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v59 = &v50[24 * v47];
            do
            {
              v62 = *(_OWORD *)(v57 - 24);
              *((_QWORD *)v59 - 1) = *(_QWORD *)(v57 - 8);
              *(_OWORD *)(v59 - 24) = v62;
              v59 -= 24;
              *(_QWORD *)(v57 - 16) = 0;
              *(_QWORD *)(v57 - 8) = 0;
              *(_QWORD *)(v57 - 24) = 0;
              v57 -= 24;
            }
            while (v57 != v61);
            goto LABEL_78;
          }
LABEL_79:
          v63 = vdupq_n_s64(v57);
          v59 = v56;
          goto LABEL_80;
        }
      }
      *(_QWORD *)(v46 + 16) = v339;
      *(_OWORD *)v46 = *(_OWORD *)__p;
      v346.i64[1] = v46 + 24;
LABEL_81:
      v340[0] = v6;
      *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
      v341 = v7;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_84:
      if (!*(_BYTE *)(v8 + 48))
        goto LABEL_128;
      v66 = a1[15];
      if (!v66 || (v67 = v66 + 104 * *(unsigned int *)(v8 + 44), *(_DWORD *)(v67 + 96)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v71 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)": next_in_face = ", 17);
        v72 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)", but ", 6);
        v73 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v74 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v75 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v76 = v75 + 1;
          if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v76)
            v76 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v77 = 0xAAAAAAAAAAAAAAALL;
          else
            v77 = v76;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v77)
            v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v77);
          else
            v78 = 0;
          v81 = &v78[24 * v75];
          *((_QWORD *)v81 + 2) = v339;
          *(_OWORD *)v81 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v82 = v346.u64[1];
          v83 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
            goto LABEL_123;
          v84 = &v78[24 * v75];
          do
          {
            v85 = *(_OWORD *)(v82 - 24);
            *((_QWORD *)v84 - 1) = *(_QWORD *)(v82 - 8);
            *(_OWORD *)(v84 - 24) = v85;
            v84 -= 24;
            *(_QWORD *)(v82 - 16) = 0;
            *(_QWORD *)(v82 - 8) = 0;
            *(_QWORD *)(v82 - 24) = 0;
            v82 -= 24;
          }
          while (v82 != v83);
LABEL_122:
          v88 = v346;
LABEL_124:
          v89 = v81 + 24;
          v346.i64[0] = (uint64_t)v84;
          v346.i64[1] = (uint64_t)(v81 + 24);
          *(int64x2_t *)&v348.__begin_ = v88;
          v90 = v347;
          v347 = (std::string *)&v78[24 * v77];
          v348.__end_cap_.__value_ = v90;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v88.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v89;
          goto LABEL_125;
        }
      }
      else
      {
        if (*(_BYTE *)(v67 + 56))
          v68 = *(_DWORD *)(v67 + 52) == v5;
        else
          v68 = 0;
        if (v68)
          goto LABEL_128;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v69 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)": prev_in_face and next_next_in_face pointers do not match.  next = ", 68);
        v70 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)", and next->prev = ", 19);
        if (*(_BYTE *)(v67 + 56))
          std::ostream::operator<<();
        else
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"nullopt", 7);
        std::stringbuf::str();
        v74 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v79 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v80)
            v80 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v77 = 0xAAAAAAAAAAAAAAALL;
          else
            v77 = v80;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v77)
            v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v77);
          else
            v78 = 0;
          v81 = &v78[24 * v79];
          *((_QWORD *)v81 + 2) = v339;
          *(_OWORD *)v81 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v82 = v346.u64[1];
          v86 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v84 = &v78[24 * v79];
            do
            {
              v87 = *(_OWORD *)(v82 - 24);
              *((_QWORD *)v84 - 1) = *(_QWORD *)(v82 - 8);
              *(_OWORD *)(v84 - 24) = v87;
              v84 -= 24;
              *(_QWORD *)(v82 - 16) = 0;
              *(_QWORD *)(v82 - 8) = 0;
              *(_QWORD *)(v82 - 24) = 0;
              v82 -= 24;
            }
            while (v82 != v86);
            goto LABEL_122;
          }
LABEL_123:
          v88 = vdupq_n_s64(v82);
          v84 = v81;
          goto LABEL_124;
        }
      }
      *(_QWORD *)(v74 + 16) = v339;
      *(_OWORD *)v74 = *(_OWORD *)__p;
      v346.i64[1] = v74 + 24;
LABEL_125:
      v340[0] = v6;
      *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
      v341 = v7;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_128:
      if (!*(_BYTE *)(v8 + 56))
        goto LABEL_172;
      v91 = a1[15];
      if (!v91 || (v92 = v91 + 104 * *(unsigned int *)(v8 + 52), *(_DWORD *)(v92 + 96)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v96 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)": prev_in_face = ", 17);
        v97 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)", but ", 6);
        v98 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v99 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v100 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v101 = v100 + 1;
          if (v100 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v101)
            v101 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v102 = 0xAAAAAAAAAAAAAAALL;
          else
            v102 = v101;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v102)
            v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v102);
          else
            v103 = 0;
          v106 = &v103[24 * v100];
          *((_QWORD *)v106 + 2) = v339;
          *(_OWORD *)v106 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v107 = v346.u64[1];
          v108 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
            goto LABEL_167;
          v109 = &v103[24 * v100];
          do
          {
            v110 = *(_OWORD *)(v107 - 24);
            *((_QWORD *)v109 - 1) = *(_QWORD *)(v107 - 8);
            *(_OWORD *)(v109 - 24) = v110;
            v109 -= 24;
            *(_QWORD *)(v107 - 16) = 0;
            *(_QWORD *)(v107 - 8) = 0;
            *(_QWORD *)(v107 - 24) = 0;
            v107 -= 24;
          }
          while (v107 != v108);
LABEL_166:
          v113 = v346;
LABEL_168:
          v114 = v106 + 24;
          v346.i64[0] = (uint64_t)v109;
          v346.i64[1] = (uint64_t)(v106 + 24);
          *(int64x2_t *)&v348.__begin_ = v113;
          v115 = v347;
          v347 = (std::string *)&v103[24 * v102];
          v348.__end_cap_.__value_ = v115;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v113.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v114;
          goto LABEL_169;
        }
      }
      else
      {
        if (*(_BYTE *)(v92 + 48))
          v93 = *(_DWORD *)(v92 + 44) == v5;
        else
          v93 = 0;
        if (v93)
          goto LABEL_172;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v94 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)": prev_in_face and next_next_in_face pointers do not match.  prev = ", 68);
        v95 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)", and prev->next = ", 19);
        if (*(_BYTE *)(v92 + 48))
          std::ostream::operator<<();
        else
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"nullopt", 7);
        std::stringbuf::str();
        v99 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v104 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v105 = v104 + 1;
          if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v105)
            v105 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v102 = 0xAAAAAAAAAAAAAAALL;
          else
            v102 = v105;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v102)
            v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v102);
          else
            v103 = 0;
          v106 = &v103[24 * v104];
          *((_QWORD *)v106 + 2) = v339;
          *(_OWORD *)v106 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v107 = v346.u64[1];
          v111 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v109 = &v103[24 * v104];
            do
            {
              v112 = *(_OWORD *)(v107 - 24);
              *((_QWORD *)v109 - 1) = *(_QWORD *)(v107 - 8);
              *(_OWORD *)(v109 - 24) = v112;
              v109 -= 24;
              *(_QWORD *)(v107 - 16) = 0;
              *(_QWORD *)(v107 - 8) = 0;
              *(_QWORD *)(v107 - 24) = 0;
              v107 -= 24;
            }
            while (v107 != v111);
            goto LABEL_166;
          }
LABEL_167:
          v113 = vdupq_n_s64(v107);
          v109 = v106;
          goto LABEL_168;
        }
      }
      *(_QWORD *)(v99 + 16) = v339;
      *(_OWORD *)v99 = *(_OWORD *)__p;
      v346.i64[1] = v99 + 24;
LABEL_169:
      v340[0] = v6;
      *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
      v341 = v7;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_172:
      v116 = *(unsigned int *)(v8 + 40);
      if ((_DWORD)v116 != -1)
      {
        v117 = a1[18];
        if (v116 >= (a1[19] - v117) >> 3)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
          v127 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v127, (uint64_t)": face_for_next_edge = ", 23);
          v128 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v128, (uint64_t)" which is out of range", 22);
          std::stringbuf::str();
          v120 = v346.i64[1];
          if (v346.i64[1] < (unint64_t)v347)
            goto LABEL_222;
          v129 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v130 = v129 + 1;
          if (v129 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v130)
            v130 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v123 = 0xAAAAAAAAAAAAAAALL;
          else
            v123 = v130;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v123)
            v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v123);
          else
            v124 = 0;
          v135 = &v124[24 * v129];
          *((_QWORD *)v135 + 2) = v339;
          *(_OWORD *)v135 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v136 = v346.u64[1];
          v137 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v138 = &v124[24 * v129];
            do
            {
              v139 = *(_OWORD *)(v136 - 24);
              *((_QWORD *)v138 - 1) = *(_QWORD *)(v136 - 8);
              *(_OWORD *)(v138 - 24) = v139;
              v138 -= 24;
              *(_QWORD *)(v136 - 16) = 0;
              *(_QWORD *)(v136 - 8) = 0;
              *(_QWORD *)(v136 - 24) = 0;
              v136 -= 24;
            }
            while (v136 != v137);
            goto LABEL_240;
          }
        }
        else
        {
          if (*(_BYTE *)(v117 + 8 * v116 + 4))
            goto LABEL_246;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
          v118 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)": face_for_next_edge = ", 23);
          v119 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v119, (uint64_t)" but m_face_to_first_vertex_map has stored this face as empty", 61);
          std::stringbuf::str();
          v120 = v346.i64[1];
          if (v346.i64[1] < (unint64_t)v347)
          {
LABEL_222:
            *(_QWORD *)(v120 + 16) = v339;
            *(_OWORD *)v120 = *(_OWORD *)__p;
            v346.i64[1] = v120 + 24;
            goto LABEL_243;
          }
          v121 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v122 = v121 + 1;
          if (v121 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v122)
            v122 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v123 = 0xAAAAAAAAAAAAAAALL;
          else
            v123 = v122;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v123)
            v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v123);
          else
            v124 = 0;
          v135 = &v124[24 * v121];
          *((_QWORD *)v135 + 2) = v339;
          *(_OWORD *)v135 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v136 = v346.u64[1];
          v153 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v138 = &v124[24 * v121];
            do
            {
              v154 = *(_OWORD *)(v136 - 24);
              *((_QWORD *)v138 - 1) = *(_QWORD *)(v136 - 8);
              *(_OWORD *)(v138 - 24) = v154;
              v138 -= 24;
              *(_QWORD *)(v136 - 16) = 0;
              *(_QWORD *)(v136 - 8) = 0;
              *(_QWORD *)(v136 - 24) = 0;
              v136 -= 24;
            }
            while (v136 != v153);
            goto LABEL_240;
          }
        }
        goto LABEL_241;
      }
      if (v5 != *(_DWORD *)(v8 + 36))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v125 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v125, (uint64_t)": is not a self loop but points to the null face in face_for_next_edge", 70);
        std::stringbuf::str();
        v126 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v131 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v132 = v131 + 1;
          if (v131 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v132)
            v132 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v133 = 0xAAAAAAAAAAAAAAALL;
          else
            v133 = v132;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v133)
            v134 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v133);
          else
            v134 = 0;
          v140 = &v134[24 * v131];
          *((_QWORD *)v140 + 2) = v339;
          *(_OWORD *)v140 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v141 = v346.i64[1];
          v142 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v145 = vdupq_n_s64(v346.u64[1]);
            v143 = &v134[24 * v131];
          }
          else
          {
            v143 = &v134[24 * v131];
            do
            {
              v144 = *(_OWORD *)(v141 - 24);
              *((_QWORD *)v143 - 1) = *(_QWORD *)(v141 - 8);
              *(_OWORD *)(v143 - 24) = v144;
              v143 -= 24;
              *(_QWORD *)(v141 - 16) = 0;
              *(_QWORD *)(v141 - 8) = 0;
              *(_QWORD *)(v141 - 24) = 0;
              v141 -= 24;
            }
            while (v141 != v142);
            v145 = v346;
          }
          v146 = v140 + 24;
          v346.i64[0] = (uint64_t)v143;
          v346.i64[1] = (uint64_t)(v140 + 24);
          *(int64x2_t *)&v348.__begin_ = v145;
          v147 = v347;
          v347 = (std::string *)&v134[24 * v133];
          v348.__end_cap_.__value_ = v147;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v145.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v146;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v126 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v126 + 24;
        }
        v340[0] = v6;
        *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
        v341 = v7;
        v342 = MEMORY[0x24BEDB848] + 16;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
      }
      if (*(_BYTE *)(v8 + 56) || *(_BYTE *)(v8 + 48))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v148 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v148, (uint64_t)": face_for_next_edge == null but {prev,next}_in_face != null", 60);
        std::stringbuf::str();
        v120 = v346.i64[1];
        if (v346.i64[1] < (unint64_t)v347)
          goto LABEL_222;
        v149 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
        v150 = v149 + 1;
        if (v149 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_462;
        if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v150)
          v150 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
          v123 = 0xAAAAAAAAAAAAAAALL;
        else
          v123 = v150;
        v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
        if (v123)
          v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v123);
        else
          v124 = 0;
        v135 = &v124[24 * v149];
        *((_QWORD *)v135 + 2) = v339;
        *(_OWORD *)v135 = *(_OWORD *)__p;
        v339 = 0;
        *(_OWORD *)__p = 0uLL;
        v136 = v346.u64[1];
        v151 = v346.i64[0];
        if (v346.i64[1] != v346.i64[0])
        {
          v138 = &v124[24 * v149];
          do
          {
            v152 = *(_OWORD *)(v136 - 24);
            *((_QWORD *)v138 - 1) = *(_QWORD *)(v136 - 8);
            *(_OWORD *)(v138 - 24) = v152;
            v138 -= 24;
            *(_QWORD *)(v136 - 16) = 0;
            *(_QWORD *)(v136 - 8) = 0;
            *(_QWORD *)(v136 - 24) = 0;
            v136 -= 24;
          }
          while (v136 != v151);
LABEL_240:
          v155 = v346;
LABEL_242:
          v156 = v135 + 24;
          v346.i64[0] = (uint64_t)v138;
          v346.i64[1] = (uint64_t)(v135 + 24);
          *(int64x2_t *)&v348.__begin_ = v155;
          v157 = v347;
          v347 = (std::string *)&v124[24 * v123];
          v348.__end_cap_.__value_ = v157;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v155.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v156;
LABEL_243:
          v340[0] = v6;
          *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
          v341 = v7;
          v342 = MEMORY[0x24BEDB848] + 16;
          if (v344 < 0)
            operator delete(v343);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22E2B7668](v345);
          goto LABEL_246;
        }
LABEL_241:
        v155 = vdupq_n_s64(v136);
        v138 = v135;
        goto LABEL_242;
      }
LABEL_246:
      if ((_DWORD)v116 != -1 && !*(_BYTE *)(v8 + 56))
      {
        v158 = a1[18] + 8 * *(unsigned int *)(v8 + 40);
        if (!*(_BYTE *)(v158 + 4) || *(_DWORD *)v158 != v5)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
          v159 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v159, (uint64_t)": face_for_next_edge = ", 23);
          v160 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)" and prev_in_face == null, but m_face_to_first_vertex_map does not point to this vertex", 87);
          std::stringbuf::str();
          v161 = (_OWORD *)v346.i64[1];
          if (v346.i64[1] >= (unint64_t)v347)
          {
            v162 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
            v163 = v162 + 1;
            if (v162 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_462;
            if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v163)
              v163 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
              v164 = 0xAAAAAAAAAAAAAAALL;
            else
              v164 = v163;
            v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
            if (v164)
              v165 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v164);
            else
              v165 = 0;
            v166 = &v165[24 * v162];
            *((_QWORD *)v166 + 2) = v339;
            *(_OWORD *)v166 = *(_OWORD *)__p;
            v339 = 0;
            *(_OWORD *)__p = 0uLL;
            v167 = v346.i64[1];
            v168 = v346.i64[0];
            if (v346.i64[1] == v346.i64[0])
            {
              v171 = vdupq_n_s64(v346.u64[1]);
              v169 = &v165[24 * v162];
            }
            else
            {
              v169 = &v165[24 * v162];
              do
              {
                v170 = *(_OWORD *)(v167 - 24);
                *((_QWORD *)v169 - 1) = *(_QWORD *)(v167 - 8);
                *(_OWORD *)(v169 - 24) = v170;
                v169 -= 24;
                *(_QWORD *)(v167 - 16) = 0;
                *(_QWORD *)(v167 - 8) = 0;
                *(_QWORD *)(v167 - 24) = 0;
                v167 -= 24;
              }
              while (v167 != v168);
              v171 = v346;
            }
            v172 = v166 + 24;
            v346.i64[0] = (uint64_t)v169;
            v346.i64[1] = (uint64_t)(v166 + 24);
            *(int64x2_t *)&v348.__begin_ = v171;
            v173 = v347;
            v347 = (std::string *)&v165[24 * v164];
            v348.__end_cap_.__value_ = v173;
            v348.__first_ = (std::__split_buffer<std::string>::pointer)v171.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v348);
            v346.i64[1] = (uint64_t)v172;
          }
          else
          {
            *(_QWORD *)(v346.i64[1] + 16) = v339;
            *v161 = *(_OWORD *)__p;
            v346.i64[1] = (uint64_t)v161 + 24;
          }
          v340[0] = v6;
          *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
          v341 = v7;
          v342 = MEMORY[0x24BEDB848] + 16;
          if (v344 < 0)
            operator delete(v343);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22E2B7668](v345);
        }
      }
LABEL_4:
      v3 = a1[15];
      v4 = ++v5;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((a1[16] - v3) >> 3) > (unint64_t)v5);
  }
  v175 = a1[18];
  v174 = a1[19];
  if (v174 != v175)
  {
    v176 = 0;
    v177 = 0;
    v178 = (void **)*MEMORY[0x24BEDB7F0];
    v179 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v336 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v180 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v181 = *(_QWORD *)(v175 + 8 * v176);
      if ((v181 & 0xFF00000000) != 0)
      {
        v182 = a1[15];
        v183 = v182 + 104 * v181;
        v184 = v182 && *(_DWORD *)(v183 + 96) == 0;
        if (v184 && *(_DWORD *)(v183 + 40) != v177)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"face ", 5);
          v185 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v185, (uint64_t)": vertex ", 9);
          v186 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v186, (uint64_t)" is referenced in m_face_to_first_vertex_map, but edge->face map refers to face ", 80);
          std::ostream::operator<<();
          std::stringbuf::str();
          v187 = (_OWORD *)v346.i64[1];
          if (v346.i64[1] >= (unint64_t)v347)
          {
            v188 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
            v189 = v188 + 1;
            if (v188 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_462;
            if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v189)
              v189 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
              v190 = 0xAAAAAAAAAAAAAAALL;
            else
              v190 = v189;
            v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
            if (v190)
              v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v190);
            else
              v191 = 0;
            v192 = &v191[24 * v188];
            *((_QWORD *)v192 + 2) = v339;
            *(_OWORD *)v192 = *(_OWORD *)__p;
            v339 = 0;
            *(_OWORD *)__p = 0uLL;
            v193 = v346.i64[1];
            v194 = v346.i64[0];
            if (v346.i64[1] == v346.i64[0])
            {
              v197 = vdupq_n_s64(v346.u64[1]);
              v195 = &v191[24 * v188];
            }
            else
            {
              v195 = &v191[24 * v188];
              do
              {
                v196 = *(_OWORD *)(v193 - 24);
                *((_QWORD *)v195 - 1) = *(_QWORD *)(v193 - 8);
                *(_OWORD *)(v195 - 24) = v196;
                v195 -= 24;
                *(_QWORD *)(v193 - 16) = 0;
                *(_QWORD *)(v193 - 8) = 0;
                *(_QWORD *)(v193 - 24) = 0;
                v193 -= 24;
              }
              while (v193 != v194);
              v197 = v346;
            }
            v198 = v192 + 24;
            v346.i64[0] = (uint64_t)v195;
            v346.i64[1] = (uint64_t)(v192 + 24);
            *(int64x2_t *)&v348.__begin_ = v197;
            v199 = v347;
            v347 = (std::string *)&v191[24 * v190];
            v348.__end_cap_.__value_ = v199;
            v348.__first_ = (std::__split_buffer<std::string>::pointer)v197.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v348);
            v346.i64[1] = (uint64_t)v198;
          }
          else
          {
            *(_QWORD *)(v346.i64[1] + 16) = v339;
            *v187 = *(_OWORD *)__p;
            v346.i64[1] = (uint64_t)v187 + 24;
          }
          v340[0] = v178;
          *(void ***)((char *)v340 + (_QWORD)*(v178 - 3)) = v336;
          v341 = v179;
          v342 = v180;
          if (v344 < 0)
            operator delete(v343);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22E2B7668](v345);
          v175 = a1[18];
          v174 = a1[19];
        }
      }
      v176 = ++v177;
    }
    while (v177 < (unint64_t)((v174 - v175) >> 3));
  }
  if (a1[10] - a1[9] != a1[13] - a1[12])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"size of m_joiner_accumulated_boundary_size (", 44);
    v200 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)") does not match size of m_joiner_parameter_for_boundary (", 58);
    v201 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)")", 1);
    std::stringbuf::str();
    v202 = (_OWORD *)v346.i64[1];
    if (v346.i64[1] >= (unint64_t)v347)
    {
      v203 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
      v204 = v203 + 1;
      if (v203 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_462;
      if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v204)
        v204 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
        v205 = 0xAAAAAAAAAAAAAAALL;
      else
        v205 = v204;
      v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
      if (v205)
        v206 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v205);
      else
        v206 = 0;
      v207 = &v206[24 * v203];
      *((_QWORD *)v207 + 2) = v339;
      *(_OWORD *)v207 = *(_OWORD *)__p;
      v339 = 0;
      *(_OWORD *)__p = 0uLL;
      v208 = v346.i64[1];
      v209 = v346.i64[0];
      if (v346.i64[1] == v346.i64[0])
      {
        v212 = vdupq_n_s64(v346.u64[1]);
        v210 = &v206[24 * v203];
      }
      else
      {
        v210 = &v206[24 * v203];
        do
        {
          v211 = *(_OWORD *)(v208 - 24);
          *((_QWORD *)v210 - 1) = *(_QWORD *)(v208 - 8);
          *(_OWORD *)(v210 - 24) = v211;
          v210 -= 24;
          *(_QWORD *)(v208 - 16) = 0;
          *(_QWORD *)(v208 - 8) = 0;
          *(_QWORD *)(v208 - 24) = 0;
          v208 -= 24;
        }
        while (v208 != v209);
        v212 = v346;
      }
      v213 = v207 + 24;
      v346.i64[0] = (uint64_t)v210;
      v346.i64[1] = (uint64_t)(v207 + 24);
      *(int64x2_t *)&v348.__begin_ = v212;
      v214 = v347;
      v347 = (std::string *)&v206[24 * v205];
      v348.__end_cap_.__value_ = v214;
      v348.__first_ = (std::__split_buffer<std::string>::pointer)v212.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v348);
      v346.i64[1] = (uint64_t)v213;
    }
    else
    {
      *(_QWORD *)(v346.i64[1] + 16) = v339;
      *v202 = *(_OWORD *)__p;
      v346.i64[1] = (uint64_t)v202 + 24;
    }
    v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v215 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v341 = v215;
    v342 = MEMORY[0x24BEDB848] + 16;
    if (v344 < 0)
      operator delete(v343);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v345);
  }
  v216 = a1[7];
  if (a1[6] == v216)
    v217 = 0;
  else
    v217 = *(_DWORD *)(v216 - 4);
  v219 = a1[3];
  v218 = a1[4];
  if (v217 != (v218 - v219) >> 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"the last entry of m_joiner_accumulated_face_valence is ", 55);
    v220 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v220, (uint64_t)" but the m_joiner_face_indices.size() is ", 41);
    std::ostream::operator<<();
    std::stringbuf::str();
    v221 = (_OWORD *)v346.i64[1];
    if (v346.i64[1] >= (unint64_t)v347)
    {
      v222 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
      v223 = v222 + 1;
      if (v222 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_462;
      if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v223)
        v223 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
        v224 = 0xAAAAAAAAAAAAAAALL;
      else
        v224 = v223;
      v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
      if (v224)
        v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v224);
      else
        v225 = 0;
      v226 = &v225[24 * v222];
      *((_QWORD *)v226 + 2) = v339;
      *(_OWORD *)v226 = *(_OWORD *)__p;
      v339 = 0;
      *(_OWORD *)__p = 0uLL;
      v227 = v346.i64[1];
      v228 = v346.i64[0];
      if (v346.i64[1] == v346.i64[0])
      {
        v231 = vdupq_n_s64(v346.u64[1]);
        v229 = &v225[24 * v222];
      }
      else
      {
        v229 = &v225[24 * v222];
        do
        {
          v230 = *(_OWORD *)(v227 - 24);
          *((_QWORD *)v229 - 1) = *(_QWORD *)(v227 - 8);
          *(_OWORD *)(v229 - 24) = v230;
          v229 -= 24;
          *(_QWORD *)(v227 - 16) = 0;
          *(_QWORD *)(v227 - 8) = 0;
          *(_QWORD *)(v227 - 24) = 0;
          v227 -= 24;
        }
        while (v227 != v228);
        v231 = v346;
      }
      v232 = v226 + 24;
      v346.i64[0] = (uint64_t)v229;
      v346.i64[1] = (uint64_t)(v226 + 24);
      *(int64x2_t *)&v348.__begin_ = v231;
      v233 = v347;
      v347 = (std::string *)&v225[24 * v224];
      v348.__end_cap_.__value_ = v233;
      v348.__first_ = (std::__split_buffer<std::string>::pointer)v231.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v348);
      v346.i64[1] = (uint64_t)v232;
    }
    else
    {
      *(_QWORD *)(v346.i64[1] + 16) = v339;
      *v221 = *(_OWORD *)__p;
      v346.i64[1] = (uint64_t)v221 + 24;
    }
    v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v234 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v341 = v234;
    v342 = MEMORY[0x24BEDB848] + 16;
    if (v344 < 0)
      operator delete(v343);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v345);
    v219 = a1[3];
    v218 = a1[4];
  }
  if (v218 != v219)
  {
    v235 = 0;
    v236 = 0;
    v237 = (void **)*MEMORY[0x24BEDB7F0];
    v238 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v239 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v240 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (*(unsigned int *)(v219 + 4 * v235) >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"m_joiner_face_indices[", 22);
        v241 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"]: Index out of range (m_joiner_positions.size() = ", 51);
        v242 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)")", 1);
        std::stringbuf::str();
        v243 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v244 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v245 = v244 + 1;
          if (v244 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v245)
            v245 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v246 = 0xAAAAAAAAAAAAAAALL;
          else
            v246 = v245;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v246)
            v247 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v246);
          else
            v247 = 0;
          v248 = &v247[24 * v244];
          *((_QWORD *)v248 + 2) = v339;
          *(_OWORD *)v248 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v249 = v346.i64[1];
          v250 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v253 = vdupq_n_s64(v346.u64[1]);
            v251 = &v247[24 * v244];
          }
          else
          {
            v251 = &v247[24 * v244];
            do
            {
              v252 = *(_OWORD *)(v249 - 24);
              *((_QWORD *)v251 - 1) = *(_QWORD *)(v249 - 8);
              *(_OWORD *)(v251 - 24) = v252;
              v251 -= 24;
              *(_QWORD *)(v249 - 16) = 0;
              *(_QWORD *)(v249 - 8) = 0;
              *(_QWORD *)(v249 - 24) = 0;
              v249 -= 24;
            }
            while (v249 != v250);
            v253 = v346;
          }
          v254 = v248 + 24;
          v346.i64[0] = (uint64_t)v251;
          v346.i64[1] = (uint64_t)(v248 + 24);
          *(int64x2_t *)&v348.__begin_ = v253;
          v255 = v347;
          v347 = (std::string *)&v247[24 * v246];
          v348.__end_cap_.__value_ = v255;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v253.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v254;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v243 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v243 + 24;
        }
        v340[0] = v237;
        *(void ***)((char *)v340 + (_QWORD)*(v237 - 3)) = v238;
        v341 = v239;
        v342 = v240;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
        v219 = a1[3];
        v218 = a1[4];
      }
      v235 = ++v236;
    }
    while (v236 < (unint64_t)((v218 - v219) >> 2));
  }
  v257 = a1[6];
  v256 = a1[7];
  if (v256 != v257)
  {
    v258 = 0;
    v259 = 0;
    v260 = (void **)*MEMORY[0x24BEDB7F0];
    v262 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v261 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v263 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (v259)
        v264 = *(_DWORD *)(v257 + 4 * (v259 - 1));
      else
        v264 = 0;
      if (*(_DWORD *)(v257 + 4 * v258) <= v264)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"m_joiner_accumulated_face_valence has value ", 44);
        v265 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)" at index ", 10);
        v266 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v266, (uint64_t)" and the previous value is ", 27);
        v267 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)".  this is not strictly increasing.", 35);
        std::stringbuf::str();
        v268 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v269 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v270 = v269 + 1;
          if (v269 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v270)
            v270 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v271 = 0xAAAAAAAAAAAAAAALL;
          else
            v271 = v270;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v271)
            v272 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v271);
          else
            v272 = 0;
          v273 = &v272[24 * v269];
          *((_QWORD *)v273 + 2) = v339;
          *(_OWORD *)v273 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v274 = v346.i64[1];
          v275 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v278 = vdupq_n_s64(v346.u64[1]);
            v276 = &v272[24 * v269];
          }
          else
          {
            v276 = &v272[24 * v269];
            do
            {
              v277 = *(_OWORD *)(v274 - 24);
              *((_QWORD *)v276 - 1) = *(_QWORD *)(v274 - 8);
              *(_OWORD *)(v276 - 24) = v277;
              v276 -= 24;
              *(_QWORD *)(v274 - 16) = 0;
              *(_QWORD *)(v274 - 8) = 0;
              *(_QWORD *)(v274 - 24) = 0;
              v274 -= 24;
            }
            while (v274 != v275);
            v278 = v346;
          }
          v279 = v273 + 24;
          v346.i64[0] = (uint64_t)v276;
          v346.i64[1] = (uint64_t)(v273 + 24);
          *(int64x2_t *)&v348.__begin_ = v278;
          v280 = v347;
          v347 = (std::string *)&v272[24 * v271];
          v348.__end_cap_.__value_ = v280;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v278.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v279;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v268 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v268 + 24;
        }
        v340[0] = v260;
        *(void ***)((char *)v340 + (_QWORD)*(v260 - 3)) = v262;
        v341 = v261;
        v342 = v263;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
        v257 = a1[6];
        v256 = a1[7];
      }
      v258 = ++v259;
    }
    while (v259 < (unint64_t)((v256 - v257) >> 2));
  }
  v282 = a1[9];
  v281 = a1[10];
  if (v282 == v281)
    v283 = 0;
  else
    v283 = *(_DWORD *)(v281 - 4);
  if (v283 != (uint64_t)(a1[1] - *a1) >> 3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"the last entry of m_joiner_accumulated_boundary_size is ", 56);
    v284 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v284, (uint64_t)" but the m_joiner_positions.size() is ", 38);
    std::ostream::operator<<();
    std::stringbuf::str();
    v285 = (_OWORD *)v346.i64[1];
    if (v346.i64[1] < (unint64_t)v347)
    {
      *(_QWORD *)(v346.i64[1] + 16) = v339;
      *v285 = *(_OWORD *)__p;
      v346.i64[1] = (uint64_t)v285 + 24;
LABEL_417:
      v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
      v298 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
      v341 = v298;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
      v282 = a1[9];
      v281 = a1[10];
      goto LABEL_420;
    }
    v286 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
    v287 = v286 + 1;
    if (v286 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v287)
        v287 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
        v288 = 0xAAAAAAAAAAAAAAALL;
      else
        v288 = v287;
      v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
      if (v288)
        v289 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v288);
      else
        v289 = 0;
      v290 = &v289[24 * v286];
      *((_QWORD *)v290 + 2) = v339;
      *(_OWORD *)v290 = *(_OWORD *)__p;
      v339 = 0;
      *(_OWORD *)__p = 0uLL;
      v291 = v346.i64[1];
      v292 = v346.i64[0];
      if (v346.i64[1] == v346.i64[0])
      {
        v295 = vdupq_n_s64(v346.u64[1]);
        v293 = &v289[24 * v286];
      }
      else
      {
        v293 = &v289[24 * v286];
        do
        {
          v294 = *(_OWORD *)(v291 - 24);
          *((_QWORD *)v293 - 1) = *(_QWORD *)(v291 - 8);
          *(_OWORD *)(v293 - 24) = v294;
          v293 -= 24;
          *(_QWORD *)(v291 - 16) = 0;
          *(_QWORD *)(v291 - 8) = 0;
          *(_QWORD *)(v291 - 24) = 0;
          v291 -= 24;
        }
        while (v291 != v292);
        v295 = v346;
      }
      v296 = v290 + 24;
      v346.i64[0] = (uint64_t)v293;
      v346.i64[1] = (uint64_t)(v290 + 24);
      *(int64x2_t *)&v348.__begin_ = v295;
      v297 = v347;
      v347 = (std::string *)&v289[24 * v288];
      v348.__end_cap_.__value_ = v297;
      v348.__first_ = (std::__split_buffer<std::string>::pointer)v295.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v348);
      v346.i64[1] = (uint64_t)v296;
      goto LABEL_417;
    }
LABEL_462:
    abort();
  }
LABEL_420:
  if (v281 != v282)
  {
    v299 = 0;
    v300 = 0;
    v301 = (void **)*MEMORY[0x24BEDB7F0];
    v303 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v302 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v304 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (v300)
        v305 = *(_DWORD *)(v282 + 4 * (v300 - 1));
      else
        v305 = 0;
      if (*(_DWORD *)(v282 + 4 * v299) <= v305)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"m_joiner_accumulated_boundary_size has value ", 45);
        v306 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v306, (uint64_t)" at index ", 10);
        v307 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v307, (uint64_t)" and the previous value is ", 27);
        v308 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v308, (uint64_t)".  this is not strictly increasing.", 35);
        std::stringbuf::str();
        v309 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v310 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v311 = v310 + 1;
          if (v310 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v311)
            v311 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v312 = 0xAAAAAAAAAAAAAAALL;
          else
            v312 = v311;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v312)
            v313 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v312);
          else
            v313 = 0;
          v314 = &v313[24 * v310];
          *((_QWORD *)v314 + 2) = v339;
          *(_OWORD *)v314 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v315 = v346.i64[1];
          v316 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v319 = vdupq_n_s64(v346.u64[1]);
            v317 = &v313[24 * v310];
          }
          else
          {
            v317 = &v313[24 * v310];
            do
            {
              v318 = *(_OWORD *)(v315 - 24);
              *((_QWORD *)v317 - 1) = *(_QWORD *)(v315 - 8);
              *(_OWORD *)(v317 - 24) = v318;
              v317 -= 24;
              *(_QWORD *)(v315 - 16) = 0;
              *(_QWORD *)(v315 - 8) = 0;
              *(_QWORD *)(v315 - 24) = 0;
              v315 -= 24;
            }
            while (v315 != v316);
            v319 = v346;
          }
          v320 = v314 + 24;
          v346.i64[0] = (uint64_t)v317;
          v346.i64[1] = (uint64_t)(v314 + 24);
          *(int64x2_t *)&v348.__begin_ = v319;
          v321 = v347;
          v347 = (std::string *)&v313[24 * v312];
          v348.__end_cap_.__value_ = v321;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v319.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v320;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v309 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v309 + 24;
        }
        v340[0] = v301;
        *(void ***)((char *)v340 + (_QWORD)*(v301 - 3)) = v303;
        v341 = v302;
        v342 = v304;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
        v282 = a1[9];
        v281 = a1[10];
      }
      v299 = ++v300;
    }
    while (v300 < (unint64_t)((v281 - v282) >> 2));
  }
  if (v346.i64[0] == v346.i64[1])
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    v323 = v346.i64[1];
    v322 = v346.i64[0];
    if (v346.i64[0] != v346.i64[1])
    {
      v324 = 1;
      v325 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v326 = (_QWORD *)std::ostream::operator<<();
        v327 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v326, (uint64_t)". ", 2);
        v328 = *(char *)(v322 + 23);
        if (v328 >= 0)
          v329 = v322;
        else
          v329 = *(_QWORD *)v322;
        if (v328 >= 0)
          v330 = *(unsigned __int8 *)(v322 + 23);
        else
          v330 = *(_QWORD *)(v322 + 8);
        v331 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v327, v329, v330);
        std::ios_base::getloc((const std::ios_base *)((char *)v331 + *(_QWORD *)(*v331 - 24)));
        v332 = std::locale::use_facet((const std::locale *)&v348, v325);
        ((void (*)(const std::locale::facet *, uint64_t))v332->__vftable[2].~facet_0)(v332, 10);
        std::locale::~locale((std::locale *)&v348);
        std::ostream::put();
        std::ostream::flush();
        ++v324;
        v322 += 24;
      }
      while (v322 != v323);
    }
    std::stringbuf::str();
    v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v333 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    *(_OWORD *)a2 = *(_OWORD *)&v348.__first_;
    *(_QWORD *)(a2 + 16) = v348.__end_;
    *(_BYTE *)(a2 + 24) = 1;
    v341 = v333;
    v342 = MEMORY[0x24BEDB848] + 16;
    if (v344 < 0)
      operator delete(v343);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v345);
  }
  v340[0] = (void **)&v346;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v340);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void geom::straight_skeleton_evaluator<float>::check_geometric_invariants(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  float32x2_t *v6;
  __int32 v7;
  float v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  char *v28;
  std::string *v29;
  float v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _OWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  char *v46;
  std::string *v47;
  _QWORD *v48;
  _OWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  int64x2_t v59;
  char *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  std::locale::id *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  const std::locale::facet *v72;
  uint64_t v73;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  void **v78;
  void *__p[2];
  uint64_t v80;
  void **v81[2];
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char v85;
  _BYTE v86[152];
  int64x2_t v87;
  std::string *v88;
  std::__split_buffer<std::string> v89;

  v87 = 0uLL;
  v88 = 0;
  v81[0] = (void **)a1;
  v81[1] = (void **)&v87;
  geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<float>::check_geometric_invariants(void)::{lambda(unsigned int,unsigned int)#1}>(a1, (uint64_t)v81);
  v3 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) != v3)
  {
    v4 = 0;
    v5 = 0;
    v76 = (void **)*MEMORY[0x24BEDB7F0];
    v78 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v77 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v75 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (v3)
      {
        v6 = (float32x2_t *)(v3 + 104 * v4);
        if (!v6[12].i32[0])
        {
          v7 = v6[4].i32[1];
          v8 = fabsf(v6[2].f32[0]);
          if ((v7 == v5) != v8 <= 0.000005)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v82, (uint64_t)"vertex ", 7);
            v9 = (_QWORD *)std::ostream::operator<<();
            v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)": is self loop = ", 17);
            if (v7 == v5)
              v11 = "YES";
            else
              v11 = "NO";
            if (v7 == v5)
              v12 = 3;
            else
              v12 = 2;
            v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
            v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"; but is zero speed = ",
                    22);
            if (v8 > 0.000005)
              v15 = "NO";
            else
              v15 = "YES";
            if (v8 > 0.000005)
              v16 = 2;
            else
              v16 = 3;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
            std::stringbuf::str();
            v17 = (_OWORD *)v87.i64[1];
            if (v87.i64[1] >= (unint64_t)v88)
            {
              v18 = 0xAAAAAAAAAAAAAAABLL * ((v87.i64[1] - v87.i64[0]) >> 3);
              v19 = v18 + 1;
              if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_99;
              if (0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3) > v19)
                v19 = 0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v88 - v87.i64[0]) >> 3) >= 0x555555555555555)
                v20 = 0xAAAAAAAAAAAAAAALL;
              else
                v20 = v19;
              v89.__end_cap_.__value_ = (std::allocator<std::string> *)&v88;
              if (v20)
                v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v88, v20);
              else
                v21 = 0;
              v22 = &v21[24 * v18];
              *((_QWORD *)v22 + 2) = v80;
              *(_OWORD *)v22 = *(_OWORD *)__p;
              v80 = 0;
              *(_OWORD *)__p = 0uLL;
              v23 = v87.i64[1];
              v24 = v87.i64[0];
              if (v87.i64[1] == v87.i64[0])
              {
                v27 = vdupq_n_s64(v87.u64[1]);
                v25 = &v21[24 * v18];
              }
              else
              {
                v25 = &v21[24 * v18];
                do
                {
                  v26 = *(_OWORD *)(v23 - 24);
                  *((_QWORD *)v25 - 1) = *(_QWORD *)(v23 - 8);
                  *(_OWORD *)(v25 - 24) = v26;
                  v25 -= 24;
                  *(_QWORD *)(v23 - 16) = 0;
                  *(_QWORD *)(v23 - 8) = 0;
                  *(_QWORD *)(v23 - 24) = 0;
                  v23 -= 24;
                }
                while (v23 != v24);
                v27 = v87;
              }
              v28 = v22 + 24;
              v87.i64[0] = (uint64_t)v25;
              v87.i64[1] = (uint64_t)(v22 + 24);
              *(int64x2_t *)&v89.__begin_ = v27;
              v29 = v88;
              v88 = (std::string *)&v21[24 * v20];
              v89.__end_cap_.__value_ = v29;
              v89.__first_ = (std::__split_buffer<std::string>::pointer)v27.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v89);
              v87.i64[1] = (uint64_t)v28;
            }
            else
            {
              *(_QWORD *)(v87.i64[1] + 16) = v80;
              *v17 = *(_OWORD *)__p;
              v87.i64[1] = (uint64_t)v17 + 24;
            }
            v81[0] = v76;
            *(void ***)((char *)v81 + (_QWORD)*(v76 - 3)) = v78;
            v82 = v77;
            v83 = v75;
            if (v85 < 0)
              operator delete(v84);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x22E2B7668](v86);
          }
          if (v8 > 0.000005)
          {
            v30 = sqrtf(vaddv_f32(vmul_f32(v6[1], v6[1])));
            if (v30 != 1.0 && fabsf(v30 + -1.0) > 0.000005)
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v82, (uint64_t)"vertex ", 7);
              v31 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)": has non-zero speed but direction is non-unit  ([", 50);
              v32 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
              v33 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)"] has length ", 13);
              v34 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)")", 1);
              std::stringbuf::str();
              v35 = (_OWORD *)v87.i64[1];
              if (v87.i64[1] >= (unint64_t)v88)
              {
                v36 = 0xAAAAAAAAAAAAAAABLL * ((v87.i64[1] - v87.i64[0]) >> 3);
                v37 = v36 + 1;
                if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_99;
                if (0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3) > v37)
                  v37 = 0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v88 - v87.i64[0]) >> 3) >= 0x555555555555555)
                  v38 = 0xAAAAAAAAAAAAAAALL;
                else
                  v38 = v37;
                v89.__end_cap_.__value_ = (std::allocator<std::string> *)&v88;
                if (v38)
                  v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v88, v38);
                else
                  v39 = 0;
                v40 = &v39[24 * v36];
                *((_QWORD *)v40 + 2) = v80;
                *(_OWORD *)v40 = *(_OWORD *)__p;
                v80 = 0;
                *(_OWORD *)__p = 0uLL;
                v41 = v87.i64[1];
                v42 = v87.i64[0];
                if (v87.i64[1] == v87.i64[0])
                {
                  v45 = vdupq_n_s64(v87.u64[1]);
                  v43 = &v39[24 * v36];
                }
                else
                {
                  v43 = &v39[24 * v36];
                  do
                  {
                    v44 = *(_OWORD *)(v41 - 24);
                    *((_QWORD *)v43 - 1) = *(_QWORD *)(v41 - 8);
                    *(_OWORD *)(v43 - 24) = v44;
                    v43 -= 24;
                    *(_QWORD *)(v41 - 16) = 0;
                    *(_QWORD *)(v41 - 8) = 0;
                    *(_QWORD *)(v41 - 24) = 0;
                    v41 -= 24;
                  }
                  while (v41 != v42);
                  v45 = v87;
                }
                v46 = v40 + 24;
                v87.i64[0] = (uint64_t)v43;
                v87.i64[1] = (uint64_t)(v40 + 24);
                *(int64x2_t *)&v89.__begin_ = v45;
                v47 = v88;
                v88 = (std::string *)&v39[24 * v38];
                v89.__end_cap_.__value_ = v47;
                v89.__first_ = (std::__split_buffer<std::string>::pointer)v45.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v89);
                v87.i64[1] = (uint64_t)v46;
              }
              else
              {
                *(_QWORD *)(v87.i64[1] + 16) = v80;
                *v35 = *(_OWORD *)__p;
                v87.i64[1] = (uint64_t)v35 + 24;
              }
              v81[0] = v76;
              *(void ***)((char *)v81 + (_QWORD)*(v76 - 3)) = v78;
              v82 = v77;
              v83 = MEMORY[0x24BEDB848] + 16;
              if (v85 < 0)
                operator delete(v84);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x22E2B7668](v86);
            }
          }
          if (v7 != v5 && *(_QWORD *)&v6[8] == *(_QWORD *)&v6[9])
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v82, (uint64_t)"vertex ", 7);
            v48 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)": active vertex was not meshed (ancestors_in_joiner is empty)", 61);
            std::stringbuf::str();
            v49 = (_OWORD *)v87.i64[1];
            if (v87.i64[1] >= (unint64_t)v88)
            {
              v50 = 0xAAAAAAAAAAAAAAABLL * ((v87.i64[1] - v87.i64[0]) >> 3);
              v51 = v50 + 1;
              if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_99:
                abort();
              if (0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3) > v51)
                v51 = 0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v88 - v87.i64[0]) >> 3) >= 0x555555555555555)
                v52 = 0xAAAAAAAAAAAAAAALL;
              else
                v52 = v51;
              v89.__end_cap_.__value_ = (std::allocator<std::string> *)&v88;
              if (v52)
                v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v88, v52);
              else
                v53 = 0;
              v54 = &v53[24 * v50];
              *((_QWORD *)v54 + 2) = v80;
              *(_OWORD *)v54 = *(_OWORD *)__p;
              v80 = 0;
              *(_OWORD *)__p = 0uLL;
              v55 = v87.i64[1];
              v56 = v87.i64[0];
              if (v87.i64[1] == v87.i64[0])
              {
                v59 = vdupq_n_s64(v87.u64[1]);
                v57 = &v53[24 * v50];
              }
              else
              {
                v57 = &v53[24 * v50];
                do
                {
                  v58 = *(_OWORD *)(v55 - 24);
                  *((_QWORD *)v57 - 1) = *(_QWORD *)(v55 - 8);
                  *(_OWORD *)(v57 - 24) = v58;
                  v57 -= 24;
                  *(_QWORD *)(v55 - 16) = 0;
                  *(_QWORD *)(v55 - 8) = 0;
                  *(_QWORD *)(v55 - 24) = 0;
                  v55 -= 24;
                }
                while (v55 != v56);
                v59 = v87;
              }
              v60 = v54 + 24;
              v87.i64[0] = (uint64_t)v57;
              v87.i64[1] = (uint64_t)(v54 + 24);
              *(int64x2_t *)&v89.__begin_ = v59;
              v61 = v88;
              v88 = (std::string *)&v53[24 * v52];
              v89.__end_cap_.__value_ = v61;
              v89.__first_ = (std::__split_buffer<std::string>::pointer)v59.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v89);
              v87.i64[1] = (uint64_t)v60;
            }
            else
            {
              *(_QWORD *)(v87.i64[1] + 16) = v80;
              *v49 = *(_OWORD *)__p;
              v87.i64[1] = (uint64_t)v49 + 24;
            }
            v81[0] = v76;
            *(void ***)((char *)v81 + (_QWORD)*(v76 - 3)) = v78;
            v82 = v77;
            v83 = MEMORY[0x24BEDB848] + 16;
            if (v85 < 0)
              operator delete(v84);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x22E2B7668](v86);
          }
        }
      }
      v3 = *(_QWORD *)(a1 + 120);
      v4 = ++v5;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a1 + 128) - v3) >> 3) > (unint64_t)v5);
  }
  if (v87.i64[0] == v87.i64[1])
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
    v63 = v87.i64[1];
    v62 = v87.i64[0];
    if (v87.i64[0] != v87.i64[1])
    {
      v64 = 1;
      v65 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v66 = (_QWORD *)std::ostream::operator<<();
        v67 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)". ", 2);
        v68 = *(char *)(v62 + 23);
        if (v68 >= 0)
          v69 = v62;
        else
          v69 = *(_QWORD *)v62;
        if (v68 >= 0)
          v70 = *(unsigned __int8 *)(v62 + 23);
        else
          v70 = *(_QWORD *)(v62 + 8);
        v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, v69, v70);
        std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(_QWORD *)(*v71 - 24)));
        v72 = std::locale::use_facet((const std::locale *)&v89, v65);
        ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
        std::locale::~locale((std::locale *)&v89);
        std::ostream::put();
        std::ostream::flush();
        ++v64;
        v62 += 24;
      }
      while (v62 != v63);
    }
    std::stringbuf::str();
    v81[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v73 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v81 + (unint64_t)*(v81[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    *(_OWORD *)a2 = *(_OWORD *)&v89.__first_;
    *(_QWORD *)(a2 + 16) = v89.__end_;
    *(_BYTE *)(a2 + 24) = 1;
    v82 = v73;
    v83 = MEMORY[0x24BEDB848] + 16;
    if (v85 < 0)
      operator delete(v84);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v86);
  }
  v81[0] = (void **)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v81);
}

uint64_t geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<float>::check_geometric_invariants(void)::{lambda(unsigned int,unsigned int)#1}>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *(_QWORD *)(result + 120);
  v2 = *(_QWORD *)(result + 128);
  if (v2 != v3)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v3)
      {
        v8 = v3 + 104 * v6;
        if (!*(_DWORD *)(v8 + 96))
        {
          v9 = *(_DWORD *)(v8 + 36);
          if (v7 != v9)
          {
            result = geom::straight_skeleton_evaluator<float>::check_geometric_invariants(void)const::{lambda(unsigned int,unsigned int)#1}::operator()(a2, v7, v9);
            v3 = *(_QWORD *)(v5 + 120);
            v2 = *(_QWORD *)(v5 + 128);
          }
        }
      }
      v6 = ++v7;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((v2 - v3) >> 3) > (unint64_t)v7);
  }
  return result;
}

uint64_t geom::intersect_adjacent_spokes<float>(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  __int8 v16;
  __int8 v17;
  float32x2_t v18;
  float v19;
  int8x8_t v20;
  float v21;
  float32x2_t v22;
  char v23;
  float v24;
  unsigned int v25;
  float32x2_t v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  int v31;
  float v32;
  uint64_t v33;
  int32x2_t v34;
  int32x2_t v35;
  BOOL v36;
  BOOL v37;
  float v38;
  float v39;
  int8x8_t v40;
  float v41;
  float32x2_t v42;
  float32x2_t v43;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2].f32[0];
  v6 = vmul_n_f32(v4, v5);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2].f32[0];
  v10 = vmul_n_f32(v8, v9);
  v11 = (int32x2_t)vmul_f32(v6, v6);
  v12 = (int32x2_t)vmul_f32(v10, v10);
  v13 = vadd_f32((float32x2_t)vzip1_s32(v12, v11), (float32x2_t)vzip2_s32(v12, v11));
  v14 = vabs_f32(v13);
  v15 = vcge_f32((float32x2_t)0x3400000034000000, v14);
  v16 = v15.i8[4];
  v17 = v15.i8[0];
  if ((v15.i32[1] & v15.i32[0] & 1) != 0)
  {
    v18 = vsub_f32(v3, v7);
    v19 = sqrtf(vaddv_f32(vmul_f32(v18, v18)));
    v20 = 0;
    if (v19 <= 0.00001)
      goto LABEL_3;
    goto LABEL_25;
  }
  v22 = vsub_f32(v7, v3);
  v23 = v16 | v17;
  if ((v16 & 1) != 0)
    v24 = v13.f32[0];
  else
    v24 = v13.f32[1];
  if ((v16 & 1) != 0)
    v25 = -1;
  else
    v25 = 0;
  if ((v23 & 1) != 0)
  {
    v26 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v25), (int8x8_t)v10, (int8x8_t)v6);
    if ((v16 & 1) != 0)
      v27 = -1;
    else
      v27 = 0;
    v13 = vneg_f32(v22);
    v28 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v27), (int8x8_t)v13, (int8x8_t)v22);
    v13.f32[0] = vmlas_n_f32((float)-v26.f32[1] * v28.f32[0], v28.f32[1], v26.f32[0]);
    if ((float)(v13.f32[0] * v13.f32[0]) <= (float)(v24 * 1.0e-10))
    {
      v22 = (float32x2_t)vcge_f32((float32x2_t)0x3400000034000000, v14);
      v29 = vmul_f32(v26, v28);
      v29.f32[0] = vaddv_f32(v29) / v24;
      v30 = (float32x2_t)vbic_s8((int8x8_t)vdup_lane_s32((int32x2_t)v29, 0), (int8x8_t)v22);
LABEL_22:
      v31 = 1;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  *(float *)v2.i32 = vmlas_n_f32((float)-v6.f32[1] * v10.f32[0], v10.f32[1], v6.f32[0]);
  if (fabsf(*(float *)v2.i32 * *(float *)v2.i32) > (float)((float)(v13.f32[1] * v13.f32[0]) * 1.0e-10))
  {
    v13 = vmla_n_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v6, (int32x2_t)v10), -v22.f32[1]), (float32x2_t)vzip2_s32((int32x2_t)v6, (int32x2_t)v10), v22.f32[0]);
    v30 = vdiv_f32(v13, (float32x2_t)vdup_lane_s32(v2, 0));
    goto LABEL_22;
  }
  v32 = vmlas_n_f32(-(float)(v22.f32[1] * v6.f32[0]), v6.f32[1], v22.f32[0]);
  if (fabsf(v32 * v32) > (float)((float)(vaddv_f32(vmul_f32(v22, v22)) * v13.f32[1]) * 1.0e-10))
  {
LABEL_25:
    v33 = 0;
    v21 = 0.0;
    return v33 | LODWORD(v21);
  }
  v34 = (int32x2_t)vmul_f32(v22, v6);
  v35 = (int32x2_t)vmul_f32(v10, vneg_f32(v22));
  v22 = (float32x2_t)vzip1_s32(v35, v34);
  v30 = vdiv_f32(vadd_f32(v22, (float32x2_t)vzip2_s32(v35, v34)), v13);
  v31 = 2;
LABEL_28:
  v33 = 0;
  v36 = v30.f32[0] != 0.0;
  if (v30.f32[0] > -0.000005)
    v36 = 0;
  v21 = 0.0;
  v37 = v30.f32[1] > -0.000005 || v30.f32[1] == 0.0;
  if (v37 && !v36)
  {
    if (v31 != 1)
    {
      v38 = a1[3].f32[0];
      v39 = a2[3].f32[0];
      v22.f32[0] = fabsf(v5);
      v13.i32[0] = 916964780;
      v40 = (int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32(v13, v22)), 0);
      if (v38 >= v39)
        v41 = a1[3].f32[0];
      else
        v41 = a2[3].f32[0];
      v42 = (float32x2_t)vbsl_s8(v40, (int8x8_t)vmla_n_f32(v3, v4, v5 * (float)(v41 - v38)), (int8x8_t)v3);
      v4.f32[0] = fabsf(v9);
      v43 = vsub_f32(v42, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32(v13, v4)), 0), (int8x8_t)vmla_n_f32(v7, v8, v9 * (float)(v41 - v39)), (int8x8_t)v7));
      v21 = v41 + (float)(sqrtf(vaddv_f32(vmul_f32(v43, v43))) / (float)(v5 + v9));
      goto LABEL_41;
    }
    v20 = vbic_s8((int8x8_t)v30, (int8x8_t)vcltz_f32(v30));
LABEL_3:
    if (fabsf(*(float *)&v20.i32[1]) <= 0.000005)
    {
      v21 = a1[3].f32[0];
    }
    else if (fabsf(*(float *)v20.i32) <= 0.000005)
    {
      v21 = a2[3].f32[0];
    }
    else
    {
      *(float *)v20.i32 = *(float *)v20.i32 + a2[3].f32[0];
      if ((float)(*(float *)&v20.i32[1] + a1[3].f32[0]) >= *(float *)v20.i32)
        v21 = *(float *)&v20.i32[1] + a1[3].f32[0];
      else
        v21 = *(float *)v20.i32;
    }
LABEL_41:
    v33 = 0x100000000;
  }
  return v33 | LODWORD(v21);
}

uint64_t geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex(unsigned int)::{lambda(unsigned int,unsigned int)#1}>(uint64_t result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;

  v6 = *(_QWORD *)(result + 120);
  v5 = *(_QWORD *)(result + 128);
  if (v5 != v6)
  {
    v8 = result;
    v9 = 0;
    v10 = 0;
    do
    {
      if (v6)
      {
        v11 = v6 + 104 * v9;
        if (!*(_DWORD *)(v11 + 96))
        {
          v12 = *(_DWORD *)(v11 + 36);
          if (v10 != v12)
          {
            result = geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex::{lambda(unsigned int,unsigned int)#1}::operator()(a2, v10, v12, a3, a4, a5);
            v6 = *(_QWORD *)(v8 + 120);
            v5 = *(_QWORD *)(v8 + 128);
          }
        }
      }
      v9 = ++v10;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((v5 - v6) >> 3) > (unint64_t)v10);
  }
  return result;
}

float geom::straight_skeleton_evaluator<float>::time_of_joiner_vertex(_QWORD *a1, unsigned int a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  char *v7;
  unsigned int v8;

  v2 = (char *)a1[9];
  v3 = (char *)a1[10];
  if (v3 != v2)
  {
    v4 = (v3 - v2) >> 2;
    v3 = (char *)a1[9];
    do
    {
      v5 = v4 >> 1;
      v6 = (unsigned int *)&v3[4 * (v4 >> 1)];
      v8 = *v6;
      v7 = (char *)(v6 + 1);
      v4 += ~(v4 >> 1);
      if (v8 > a2)
        v4 = v5;
      else
        v3 = v7;
    }
    while (v4);
  }
  return *(float *)(a1[12] + ((v3 - v2) & 0x3FFFFFFFCLL));
}

void geom::straight_skeleton_evaluator<float>::for_each_wavefront_vertex<geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(unsigned int)#1},geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(void)#1}>(uint64_t a1, void ***a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 3), 0);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = __p[0];
  if (v5 == v4)
  {
LABEL_13:
    if (v6)
      operator delete(v6);
    return;
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = *((_QWORD *)v6 + (v7 >> 6));
    if ((v9 & (1 << v7)) == 0 && !*(_DWORD *)(v4 + 104 * v7 + 96))
      break;
    *((_QWORD *)v6 + (v7 >> 6)) = v9 | (1 << v7);
LABEL_6:
    v7 = ++v8;
    if (0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 3) <= (unint64_t)v8)
      goto LABEL_13;
  }
  v10 = v8;
  v11 = (unint64_t)v8 >> 6;
  v12 = 1 << v8;
  if (((1 << v8) & *((_QWORD *)v6 + v11)) != 0)
    goto LABEL_6;
  v13 = v8;
  while (1)
  {
    geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda#1}::operator()(a2, v13);
    v6 = __p[0];
    *((_QWORD *)__p[0] + v11) |= v12;
    v4 = *(_QWORD *)(a1 + 120);
    v14 = v4 + 104 * v10;
    if (*(_DWORD *)(v14 + 96))
      break;
    v10 = *(unsigned int *)(v14 + 36);
    v11 = v10 >> 6;
    v12 = 1 << v10;
    v13 = *(_DWORD *)(v14 + 36);
    if (((1 << v10) & *((_QWORD *)v6 + (v10 >> 6))) != 0)
    {
      v5 = *(_QWORD *)(a1 + 128);
      goto LABEL_6;
    }
  }
  v15 = std::__throw_bad_variant_access[abi:nn180100]();
  geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(unsigned int,unsigned int)#1}>(v15);
}

void geom::straight_skeleton_evaluator<float>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(unsigned int,unsigned int)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 != v3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v3)
      {
        v8 = v3 + 104 * v6;
        if (!*(_DWORD *)(v8 + 96))
        {
          v9 = *(_DWORD *)(v8 + 36);
          if (v7 != v9)
          {
            geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(unsigned int,unsigned int)#1}::operator()(a2, v7, v9);
            v3 = *(_QWORD *)(a1 + 120);
            v2 = *(_QWORD *)(a1 + 128);
          }
        }
      }
      v6 = ++v7;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((v2 - v3) >> 3) > (unint64_t)v7);
  }
}

uint64_t geom::straight_skeleton_evaluator<double>::straight_skeleton_evaluator(uint64_t a1, float64x2_t *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  float64x2_t v13;
  double v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  float64x2_t *v23;
  unint64_t v24;
  float64x2_t v25;
  unint64_t v26;
  const double *v27;
  float64x2_t v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  __n128 *v33;
  __n128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  __n128 *v40;
  __n128 *v41;
  __n128 *v42;
  __n128 v43;
  const void *v44;
  int64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  int v59;
  unint64_t v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  float64x2_t v76;
  _OWORD *v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  _OWORD *v87;
  __int128 v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  void *v106;
  float64x2_t *v108;
  unsigned int *v109;
  unsigned int *v110;
  uint64_t v111;
  __int128 v112;
  float64x2_t v113;
  void *__p[3];
  __n128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _OWORD v119[2];
  uint64_t v120;
  void *__dst;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  __n128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[25];
  _BYTE *v130;
  _BYTE *v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  std::vector<std::optional<unsigned int>>::resize((_QWORD *)(a1 + 144), a3);
  v108 = a2;
  if (a3)
  {
    v10 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v11 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v12 = 16 * a3;
    do
    {
      v13 = *a2++;
      v10 = vminnmq_f64(v13, v10);
      v11 = vmaxnmq_f64(v13, v11);
      v12 -= 16;
    }
    while (v12);
  }
  else
  {
    v11 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v10 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  __asm { FMOV            V3.2D, #0.5 }
  *(float64x2_t *)(a1 + 208) = vmulq_f64(vaddq_f64(v10, v11), _Q3);
  v113 = vsubq_f64(v11, v10);
  v19 = *(double *)((unint64_t)&v113 & 0xFFFFFFFFFFFFFFF7 | (8
                                                                    * (*(_QWORD *)&vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v113, 1), v113)) & 1)));
  if (fabs(v19) <= 1.0e-10)
    v19 = 1.0;
  *(double *)(a1 + 224) = v19;
  if (a5)
  {
    v20 = 0;
    v109 = &a4[a5];
    do
    {
      v110 = a4;
      v111 = *a4;
      if ((_DWORD)v111 != v20)
      {
        v21 = 0;
        v22 = 0;
        v23 = &v108[v20];
        v24 = v111 - v20;
        do
        {
          v25 = v23[v21];
          v26 = (v24 - 1 + v21) % v24;
          v21 = (v22 + 1);
          v27 = (const double *)(a1 + 224);
          v28 = vld1q_dup_f64(v27);
          geom::spoke<double>::spoke(&v125, (__n128)vdivq_f64(vsubq_f64(v25, *(float64x2_t *)(a1 + 208)), v28), vdivq_f64(vsubq_f64(v23[v26], *(float64x2_t *)(a1 + 208)), v28), vdivq_f64(vsubq_f64(v23[v21 % v24], *(float64x2_t *)(a1 + 208)), v28), 0.0);
          *(_DWORD *)v129 = v20 + v26;
          *(_DWORD *)&v129[4] = v20 + v21 % v24;
          v29 = v22 + v20;
          *(_DWORD *)&v129[8] = v29;
          v129[12] = 0;
          v129[16] = 0;
          v129[20] = 0;
          v129[24] = 0;
          v30 = operator new(4uLL);
          v130 = v30;
          *v30 = v29;
          v131 = v30 + 1;
          v132 = v30 + 1;
          LOBYTE(v133) = 0;
          BYTE4(v133) = 0;
          v31 = *(_QWORD *)(a1 + 144) + 8 * v29;
          *(_DWORD *)v31 = v29;
          *(_BYTE *)(v31 + 4) = 1;
          v33 = *(__n128 **)(a1 + 8);
          v32 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v33 >= v32)
          {
            v35 = ((uint64_t)v33 - *(_QWORD *)a1) >> 4;
            if ((unint64_t)(v35 + 1) >> 60)
              goto LABEL_117;
            v36 = v32 - *(_QWORD *)a1;
            v37 = v36 >> 3;
            if (v36 >> 3 <= (unint64_t)(v35 + 1))
              v37 = v35 + 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
              v38 = 0xFFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            if (v38)
              v39 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 16, v38);
            else
              v39 = 0;
            v40 = (__n128 *)&v39[16 * v35];
            *v40 = v125;
            v34 = v40 + 1;
            v42 = *(__n128 **)a1;
            v41 = *(__n128 **)(a1 + 8);
            if (v41 != *(__n128 **)a1)
            {
              do
              {
                v43 = v41[-1];
                --v41;
                v40[-1] = v43;
                --v40;
              }
              while (v41 != v42);
              v41 = *(__n128 **)a1;
            }
            *(_QWORD *)a1 = v40;
            *(_QWORD *)(a1 + 8) = v34;
            *(_QWORD *)(a1 + 16) = &v39[16 * v38];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *v33 = v125;
            v34 = v33 + 1;
          }
          *(_QWORD *)(a1 + 8) = v34;
          v117 = v127;
          v118 = v128;
          v119[0] = *(_OWORD *)v129;
          *(_OWORD *)((char *)v119 + 9) = *(_OWORD *)&v129[9];
          v115 = v125;
          v116 = v126;
          __dst = 0;
          v122 = 0;
          v120 = 0;
          v44 = v130;
          v45 = v131 - v130;
          if (v131 != v130)
          {
            std::vector<float>::__vallocate[abi:nn180100](&v120, v45 >> 2);
            v46 = (char *)__dst;
            memmove(__dst, v44, v45);
            __dst = &v46[v45];
          }
          v123 = v133;
          v124 = 0;
          std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::push_back[abi:nn180100]((uint64_t *)(a1 + 120), (uint64_t)&v115);
          if (v124 != -1)
            ((void (*)(void **, __n128 *))*(&off_24F14BA40 + v124))(__p, &v115);
          if (v130)
          {
            v131 = v130;
            operator delete(v130);
          }
          v22 = v21;
        }
        while (v24 > v21);
      }
      a4 = v110 + 1;
      v20 = v111;
    }
    while (v110 + 1 != v109);
  }
  v47 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v48 = *(char **)(a1 + 80);
  v49 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)v48 >= v49)
  {
    v51 = *(char **)(a1 + 72);
    v52 = (v48 - v51) >> 2;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 62)
      goto LABEL_117;
    v54 = v49 - (_QWORD)v51;
    if (v54 >> 1 > v53)
      v53 = v54 >> 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
      v55 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    if (v55)
    {
      v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 88, v55);
      v51 = *(char **)(a1 + 72);
      v48 = *(char **)(a1 + 80);
    }
    else
    {
      v56 = 0;
    }
    v57 = &v56[4 * v52];
    v58 = &v56[4 * v55];
    *(_DWORD *)v57 = v47;
    v50 = v57 + 4;
    while (v48 != v51)
    {
      v59 = *((_DWORD *)v48 - 1);
      v48 -= 4;
      *((_DWORD *)v57 - 1) = v59;
      v57 -= 4;
    }
    *(_QWORD *)(a1 + 72) = v57;
    *(_QWORD *)(a1 + 80) = v50;
    *(_QWORD *)(a1 + 88) = v58;
    if (v51)
      operator delete(v51);
  }
  else
  {
    *(_DWORD *)v48 = v47;
    v50 = v48 + 4;
  }
  v60 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 80) = v50;
  v61 = *(char **)(a1 + 104);
  if ((unint64_t)v61 < v60)
  {
    *(_QWORD *)v61 = 0;
    v62 = v61 + 8;
    goto LABEL_68;
  }
  v63 = *(char **)(a1 + 96);
  v64 = (v61 - v63) >> 3;
  v65 = v64 + 1;
  if ((unint64_t)(v64 + 1) >> 61)
LABEL_117:
    abort();
  v66 = v60 - (_QWORD)v63;
  if (v66 >> 2 > v65)
    v65 = v66 >> 2;
  if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
    v67 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
  {
    v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(a1 + 112, v67);
    v63 = *(char **)(a1 + 96);
    v61 = *(char **)(a1 + 104);
  }
  else
  {
    v68 = 0;
  }
  v69 = &v68[8 * v64];
  v70 = &v68[8 * v67];
  *(_QWORD *)v69 = 0;
  v62 = v69 + 8;
  while (v61 != v63)
  {
    v71 = *((_QWORD *)v61 - 1);
    v61 -= 8;
    *((_QWORD *)v69 - 1) = v71;
    v69 -= 8;
  }
  *(_QWORD *)(a1 + 96) = v69;
  *(_QWORD *)(a1 + 104) = v62;
  *(_QWORD *)(a1 + 112) = v70;
  if (v63)
    operator delete(v63);
LABEL_68:
  *(_QWORD *)(a1 + 104) = v62;
  v72 = 0uLL;
  memset(__p, 0, sizeof(__p));
  if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 120))
  {
    v100 = 0;
  }
  else
  {
    LODWORD(v73) = 0;
    do
    {
      geom::straight_skeleton_evaluator<double>::edge_event_for_edge(a1, v73, (uint64_t)&v115);
      if ((_BYTE)v117)
      {
        *(_QWORD *)&v75 = v116;
        v125 = v115;
        v126 = v116;
        v77 = __p[1];
        if (__p[1] >= __p[2])
        {
          v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 4);
          v80 = v79 + 1;
          if (v79 + 1 > 0x555555555555555)
            goto LABEL_117;
          if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 4) > v80)
            v80 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v81 = 0x555555555555555;
          else
            v81 = v80;
          if (v81)
            v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)&__p[2], v81);
          else
            v82 = 0;
          v83 = &v82[48 * v79];
          *(__n128 *)v83 = v125;
          *(_QWORD *)&v74 = v126;
          *((_OWORD *)v83 + 1) = v126;
          *((_DWORD *)v83 + 8) = 0;
          v85 = (char *)__p[0];
          v84 = (char *)__p[1];
          v86 = v83;
          if (__p[1] != __p[0])
          {
            do
            {
              v74 = *((_OWORD *)v84 - 3);
              v75 = *((_OWORD *)v84 - 2);
              v76 = *((float64x2_t *)v84 - 1);
              *((_OWORD *)v86 - 2) = v75;
              *((float64x2_t *)v86 - 1) = v76;
              *((_OWORD *)v86 - 3) = v74;
              v86 -= 48;
              v84 -= 48;
            }
            while (v84 != v85);
            v84 = v85;
          }
          v78 = v83 + 48;
          __p[0] = v86;
          __p[1] = v83 + 48;
          __p[2] = &v82[48 * v81];
          if (v84)
            operator delete(v84);
        }
        else
        {
          *(_QWORD *)&v74 = v115.n128_u64[0];
          v75 = v116;
          *(__n128 *)__p[1] = v115;
          v77[1] = v75;
          *((_DWORD *)v77 + 8) = 0;
          v78 = v77 + 3;
        }
        __p[1] = v78;
      }
      geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex((_DWORD **)a1, v73, (uint64_t)&v115, *(double *)&v74, *(double *)&v75, v76);
      if ((_BYTE)v117)
      {
        v125 = v115;
        v126 = v116;
        v87 = __p[1];
        if (__p[1] >= __p[2])
        {
          v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 4);
          v91 = v90 + 1;
          if (v90 + 1 > 0x555555555555555)
            goto LABEL_117;
          if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 4) > v91)
            v91 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v92 = 0x555555555555555;
          else
            v92 = v91;
          if (v92)
            v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)&__p[2], v92);
          else
            v93 = 0;
          v94 = &v93[48 * v90];
          *(__n128 *)v94 = v125;
          *((_OWORD *)v94 + 1) = v126;
          *((_DWORD *)v94 + 8) = 1;
          v96 = (char *)__p[0];
          v95 = (char *)__p[1];
          v97 = v94;
          if (__p[1] != __p[0])
          {
            do
            {
              v98 = *((_OWORD *)v95 - 3);
              v99 = *((_OWORD *)v95 - 1);
              *((_OWORD *)v97 - 2) = *((_OWORD *)v95 - 2);
              *((_OWORD *)v97 - 1) = v99;
              *((_OWORD *)v97 - 3) = v98;
              v97 -= 48;
              v95 -= 48;
            }
            while (v95 != v96);
            v95 = v96;
          }
          v89 = v94 + 48;
          __p[0] = v97;
          __p[1] = v94 + 48;
          __p[2] = &v93[48 * v92];
          if (v95)
            operator delete(v95);
        }
        else
        {
          v88 = v116;
          *(__n128 *)__p[1] = v115;
          v87[1] = v88;
          *((_DWORD *)v87 + 8) = 1;
          v89 = v87 + 3;
        }
        __p[1] = v89;
      }
      v73 = (v73 + 1);
    }
    while (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4) > v73);
    v100 = (char *)__p[0];
    v72 = *(_OWORD *)&__p[1];
  }
  memset(__p, 0, sizeof(__p));
  v112 = v72;
  v101 = v72 - (_QWORD)v100;
  if ((uint64_t)(v72 - (_QWORD)v100) >= 49)
  {
    v102 = v101 / 48;
    v103 = (unint64_t)(v101 / 48 - 2) >> 1;
    v104 = v103 + 1;
    v105 = &v100[48 * v103];
    do
    {
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>((uint64_t)v100, (uint64_t)&v115, v102, v105);
      v105 -= 48;
      --v104;
    }
    while (v104);
  }
  v106 = *(void **)(a1 + 168);
  if (v106)
  {
    *(_QWORD *)(a1 + 176) = v106;
    operator delete(v106);
  }
  *(_QWORD *)(a1 + 168) = v100;
  *(_OWORD *)(a1 + 176) = v112;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

uint64_t std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 4);
    if (v10 + 1 > 0x1C71C71C71C71C7)
      abort();
    v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0xE38E38E38E38E3)
      v13 = 0x1C71C71C71C71C7;
    else
      v13 = v12;
    v16[4] = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>>((uint64_t)v4, v13);
    else
      v14 = 0;
    v15 = &v14[144 * v10];
    v16[0] = v14;
    v16[1] = v15;
    v16[3] = &v14[144 * v13];
    *v15 = 0;
    *((_DWORD *)v15 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>,(std::__variant_detail::_Trait)1>>((uint64_t)v15, a2);
    v16[2] = v15 + 144;
    std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::__swap_out_circular_buffer(a1, v16);
    v9 = a1[1];
    result = (uint64_t)std::__split_buffer<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state> &>::~__split_buffer(v16);
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 128) = -1;
    result = std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>,(std::__variant_detail::_Trait)1>>(v7, a2);
    v9 = v7 + 144;
  }
  a1[1] = v9;
  return result;
}

uint64_t geom::straight_skeleton_evaluator<double>::vertex_state::vertex_state(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 96), (const std::vector<unsigned int> *)(a2 + 96));
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = 0;
  return a1;
}

uint64_t geom::straight_skeleton_evaluator<double>::edge_event_for_edge@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  char v9;
  double v10;
  float64x2_t v11;
  char v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v21;

  v4 = *(_QWORD *)(result + 120);
  v5 = v4 + 144 * a2;
  if (!*(_DWORD *)(v5 + 128))
  {
    v7 = *(_DWORD *)(v5 + 68);
    if (v7 == a2)
      goto LABEL_7;
    v8 = v4 + 144 * v7;
    if (!*(_DWORD *)(v8 + 128))
    {
      *(double *)&result = COERCE_DOUBLE(geom::intersect_adjacent_spokes<double>((float64x2_t *)v5, (float64x2_t *)v8));
      if (v9)
      {
        v10 = *(double *)(v5 + 32);
        if (fabs(v10) <= 1.0e-10)
          v11 = *(float64x2_t *)v5;
        else
          v11 = vmlaq_n_f64(*(float64x2_t *)v5, *(float64x2_t *)(v5 + 16), v10 * (*(double *)&result - *(double *)(v5 + 48)));
        v13 = *(double *)(v8 + 32);
        if (fabs(v13) <= 1.0e-10)
          v14 = *(float64x2_t *)v8;
        else
          v14 = vmlaq_n_f64(*(float64x2_t *)v8, *(float64x2_t *)(v8 + 16), v13 * (*(double *)&result - *(double *)(v8 + 48)));
        v15 = vaddq_f64(v11, v14);
        __asm { FMOV            V1.2D, #0.5 }
        *(double *)a3 = *(double *)&result;
        *(_DWORD *)(a3 + 8) = a2;
        *(_DWORD *)(a3 + 12) = v7;
        *(float64x2_t *)(a3 + 16) = vmulq_f64(v15, _Q1);
        v12 = 1;
        goto LABEL_13;
      }
LABEL_7:
      v12 = 0;
      *(_BYTE *)a3 = 0;
LABEL_13:
      *(_BYTE *)(a3 + 32) = v12;
      return result;
    }
  }
  v21 = std::__throw_bad_variant_access[abi:nn180100]();
  *(double *)&result = COERCE_DOUBLE(geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex(v21));
  return result;
}

_DWORD **geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex@<X0>(_DWORD **result@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float64x2_t a6@<Q2>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *v9[3];
  int v10;

  v10 = a2;
  v6 = (uint64_t)&result[15][36 * a2];
  if (*(_DWORD *)(v6 + 128))
  {
    v8 = std::__throw_bad_variant_access[abi:nn180100]();
    return (_DWORD **)geom::straight_skeleton_evaluator<double>::straight_skeleton_evaluator(v8);
  }
  else
  {
    v7 = *(unsigned __int8 *)(v6 + 40);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (v7)
    {
      v9[0] = result;
      v9[1] = &v10;
      v9[2] = (_DWORD *)a3;
      return geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex::{lambda(unsigned int,unsigned int)#1}>(result, v9, a4, a5, a6);
    }
  }
  return result;
}

double geom::straight_skeleton_evaluator<double>::current_inset_distance(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 104) - 8) * *(double *)(a1 + 224);
}

double geom::straight_skeleton_evaluator<double>::current_time(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 104) - 8);
}

void geom::straight_skeleton_evaluator<double>::advance_to_inset_distance(uint64_t a1, double a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(double *)(a1 + 224);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = a2 / v3;
  if (v4 == v5)
  {
    v8 = *(_QWORD *)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if (v7 == v8)
      goto LABEL_18;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = v8 + 144 * v9;
      if (!*(_DWORD *)(v11 + 128) && *(_BYTE *)(v11 + 41))
      {
        geom::straight_skeleton_evaluator<double>::remove_vertex_from_face_neighbors(a1, v10, v11);
        geom::straight_skeleton_evaluator<double>::vertex_state::make_inactive((__int128 *)(*(_QWORD *)(a1 + 120)
                                                                                          + 144 * v9));
        v8 = *(_QWORD *)(a1 + 120);
        v7 = *(_QWORD *)(a1 + 128);
      }
      v9 = (v10 + 1);
      v10 = v9;
    }
    while (0x8E38E38E38E38E39 * ((v7 - v8) >> 4) > v9);
    v4 = *(_QWORD *)(a1 + 168);
    v5 = *(_QWORD *)(a1 + 176);
  }
  if (v4 != v5)
  {
    do
    {
      geom::straight_skeleton_evaluator<double>::event_time(v4);
      if (v12 > v6)
        break;
      v14 = *(_QWORD *)(a1 + 120);
      v13 = *(_QWORD *)(a1 + 128);
      if (v13 != v14)
      {
        v15 = 0;
        v16 = 0;
        do
        {
          v17 = v14 + 144 * v15;
          if (!*(_DWORD *)(v17 + 128) && *(_BYTE *)(v17 + 41))
          {
            geom::straight_skeleton_evaluator<double>::remove_vertex_from_face_neighbors(a1, v16, v17);
            geom::straight_skeleton_evaluator<double>::vertex_state::make_inactive((__int128 *)(*(_QWORD *)(a1 + 120)
                                                                                              + 144 * v15));
            v14 = *(_QWORD *)(a1 + 120);
            v13 = *(_QWORD *)(a1 + 128);
          }
          v15 = (v16 + 1);
          v16 = v15;
        }
        while (0x8E38E38E38E38E39 * ((v13 - v14) >> 4) > v15);
      }
      geom::straight_skeleton_evaluator<double>::process_next_event((_QWORD *)a1);
      v4 = *(_QWORD *)(a1 + 168);
    }
    while (v4 != *(_QWORD *)(a1 + 176));
  }
LABEL_18:
  geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(a1, v6);
}

uint64_t geom::straight_skeleton_evaluator<double>::event_time(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<double>::process_next_event(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, uint64_t))*(&off_24F14BA50 + v1))(&v5, a1);
  }
}

uint64_t geom::straight_skeleton_evaluator<double>::process_next_event(_QWORD *a1)
{
  double v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t *__p;
  uint64_t *v37;
  char *v38;
  _OWORD v39[2];
  unsigned __int128 v40;
  _OWORD v41[2];
  unsigned __int128 v42;

  geom::straight_skeleton_evaluator<double>::event_time(a1[21]);
  v3 = v2;
  v42 = 0u;
  v40 = 0u;
  memset(v41, 0, sizeof(v41));
  memset(v39, 0, sizeof(v39));
  geom::straight_skeleton_evaluator<double>::pop_coincident_events((uint64_t)a1, v41, v39, v2);
  v4 = 0;
  if ((*((_QWORD *)&v40 + 1) + *((_QWORD *)&v42 + 1)) << 6 <= 0x100uLL)
    v5 = 256;
  else
    v5 = (*((_QWORD *)&v40 + 1) + *((_QWORD *)&v42 + 1)) << 6;
  __p = 0;
  v37 = 0;
  v38 = 0;
  v35 = v5 | 1;
  while (*((_QWORD *)&v42 + 1) | *((_QWORD *)&v40 + 1))
  {
    if (*((_QWORD *)&v42 + 1))
    {
      if (v4 + 1 > v35)
        v6 = v4 + 1;
      else
        v6 = v5 | 1;
      while (++v4 <= v5)
      {
        v7 = geom::straight_skeleton_evaluator<double>::apply_edge_event(a1, *(_QWORD *)(*((_QWORD *)&v41[0] + 1) + (((unint64_t)v42 >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (v42 & 0x7F));
        if ((v7 & 0xFF00000000) != 0)
        {
          v8 = v7;
          if (v37 >= (uint64_t *)v38)
          {
            v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)__p) >> 2) + 1;
            if (v10 > 0x1555555555555555)
              goto LABEL_65;
            if (0x5555555555555556 * ((v38 - (char *)__p) >> 2) > v10)
              v10 = 0x5555555555555556 * ((v38 - (char *)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v38 - (char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v11 = 0x1555555555555555;
            else
              v11 = v10;
            if (v11)
              v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<geom::straight_skeleton_evaluator<float>::edge_event_result,geom::straight_skeleton_evaluator<float>::split_event_result>>>((uint64_t)&v38, v11);
            else
              v12 = 0;
            v13 = &v12[4 * (((char *)v37 - (char *)__p) >> 2)];
            *(_DWORD *)v13 = v8;
            *((_DWORD *)v13 + 2) = 0;
            v14 = v37;
            v15 = (uint64_t *)v13;
            if (v37 != __p)
            {
              do
              {
                v16 = *(uint64_t *)((char *)v14 - 12);
                v14 = (uint64_t *)((char *)v14 - 12);
                v17 = *((_DWORD *)v14 + 2);
                *(uint64_t *)((char *)v15 - 12) = v16;
                v15 = (uint64_t *)((char *)v15 - 12);
                *((_DWORD *)v15 + 2) = v17;
              }
              while (v14 != __p);
              v14 = __p;
            }
            v9 = (uint64_t *)(v13 + 12);
            __p = v15;
            v38 = &v12[12 * v11];
            if (v14)
              operator delete(v14);
          }
          else
          {
            *(_DWORD *)v37 = v7;
            *((_DWORD *)v37 + 2) = 0;
            v9 = (uint64_t *)((char *)v37 + 12);
          }
          v37 = v9;
        }
        v18 = *((_QWORD *)&v42 + 1) - 1;
        v19 = v42 + 1;
        v42 = __PAIR128__(*((unint64_t *)&v42 + 1), (uint64_t)v42 + 1) + __PAIR128__(-1, 0);
        if (v19 >= 0x100)
        {
          operator delete(**((void ***)&v41[0] + 1));
          *((_QWORD *)&v41[0] + 1) += 8;
          *(_QWORD *)&v42 = v42 - 128;
          v18 = *((_QWORD *)&v42 + 1);
        }
        if (!v18)
          goto LABEL_61;
      }
LABEL_60:
      v4 = v6;
      goto LABEL_61;
    }
    if (*((_QWORD *)&v40 + 1))
    {
      if (v4 + 1 > v35)
        v6 = v4 + 1;
      else
        v6 = v5 | 1;
      while (++v4 <= v5)
      {
        v20 = geom::straight_skeleton_evaluator<double>::apply_split_event(a1, *(_QWORD *)(*((_QWORD *)&v39[0] + 1) + (((unint64_t)v40 >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (v40 & 0x7F));
        if (v21)
        {
          v22 = v20;
          if (v37 >= (uint64_t *)v38)
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)__p) >> 2) + 1;
            if (v24 > 0x1555555555555555)
LABEL_65:
              abort();
            if (0x5555555555555556 * ((v38 - (char *)__p) >> 2) > v24)
              v24 = 0x5555555555555556 * ((v38 - (char *)__p) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v38 - (char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v25 = 0x1555555555555555;
            else
              v25 = v24;
            if (v25)
              v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<geom::straight_skeleton_evaluator<float>::edge_event_result,geom::straight_skeleton_evaluator<float>::split_event_result>>>((uint64_t)&v38, v25);
            else
              v26 = 0;
            v27 = &v26[4 * (((char *)v37 - (char *)__p) >> 2)];
            *(_QWORD *)v27 = v22;
            *((_DWORD *)v27 + 2) = 1;
            v28 = v37;
            v29 = v27;
            if (v37 != __p)
            {
              do
              {
                v30 = *(uint64_t *)((char *)v28 - 12);
                v28 = (uint64_t *)((char *)v28 - 12);
                v31 = *((_DWORD *)v28 + 2);
                *(_QWORD *)(v29 - 12) = v30;
                v29 -= 12;
                *((_DWORD *)v29 + 2) = v31;
              }
              while (v28 != __p);
              v28 = __p;
            }
            v23 = (uint64_t *)(v27 + 12);
            __p = (uint64_t *)v29;
            v38 = &v26[12 * v25];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v37 = v20;
            *((_DWORD *)v37 + 2) = 1;
            v23 = (uint64_t *)((char *)v37 + 12);
          }
          v37 = v23;
        }
        v32 = *((_QWORD *)&v40 + 1) - 1;
        v33 = v40 + 1;
        v40 = __PAIR128__(*((unint64_t *)&v40 + 1), (uint64_t)v40 + 1) + __PAIR128__(-1, 0);
        if (v33 >= 0x100)
        {
          operator delete(**((void ***)&v39[0] + 1));
          *((_QWORD *)&v39[0] + 1) += 8;
          *(_QWORD *)&v40 = v40 - 128;
          v32 = *((_QWORD *)&v40 + 1);
        }
        if (!v32)
          goto LABEL_61;
      }
      goto LABEL_60;
    }
LABEL_61:
    geom::straight_skeleton_evaluator<double>::pop_coincident_events((uint64_t)a1, v41, v39, v3);
    if (v4 > v5)
      break;
  }
  geom::straight_skeleton_evaluator<double>::add_joiner_mesh_faces_for_events((uint64_t)a1, __p, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)__p) >> 2), v3);
  if (__p)
    operator delete(__p);
  std::deque<geom::straight_skeleton_evaluator<double>::split_event,std::allocator<geom::straight_skeleton_evaluator<double>::split_event>>::~deque[abi:nn180100](v39);
  return std::deque<geom::straight_skeleton_evaluator<double>::split_event,std::allocator<geom::straight_skeleton_evaluator<double>::split_event>>::~deque[abi:nn180100](v41);
}

void geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  unint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  double *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int16 v35;
  __int128 *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int __src;
  void **v41;
  double *v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  double v47;

  v47 = a2;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::init((void **)&v44, 1uLL);
  v41 = (void **)a1;
  v42 = &v47;
  v43 = &v44;
  geom::straight_skeleton_evaluator<double>::for_each_wavefront_vertex<geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda#1},geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(void)#1}>(a1, &v41);
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 80);
  if (*(unsigned int *)(v4 - 4) < (unint64_t)(v3 >> 4))
  {
    v5 = v47;
    v6 = *(double **)(a1 + 104);
    v7 = *(v6 - 1);
    if (v47 == v7 || v7 + 1.0e-10 > v47)
    {
      *(_DWORD *)(v4 - 4) = (unint64_t)v3 >> 4;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v6 >= v9)
      {
        v11 = *(double **)(a1 + 96);
        v12 = v6 - v11;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          goto LABEL_51;
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(a1 + 112, v15);
          v11 = *(double **)(a1 + 96);
          v6 = *(double **)(a1 + 104);
          v5 = v47;
        }
        else
        {
          v16 = 0;
        }
        v17 = (double *)&v16[8 * v12];
        v18 = &v16[8 * v15];
        *v17 = v5;
        v10 = v17 + 1;
        while (v6 != v11)
        {
          v19 = *((_QWORD *)v6-- - 1);
          *((_QWORD *)v17-- - 1) = v19;
        }
        *(_QWORD *)(a1 + 96) = v17;
        *(_QWORD *)(a1 + 104) = v10;
        *(_QWORD *)(a1 + 112) = v18;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v6 = v47;
        v10 = v6 + 1;
      }
      *(_QWORD *)(a1 + 104) = v10;
      v20 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
      v21 = *(char **)(a1 + 80);
      v22 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v21 >= v22)
      {
        v24 = *(char **)(a1 + 72);
        v25 = (v21 - v24) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          goto LABEL_51;
        v27 = v22 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 88, v28);
          v24 = *(char **)(a1 + 72);
          v21 = *(char **)(a1 + 80);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[4 * v25];
        v31 = &v29[4 * v28];
        *(_DWORD *)v30 = v20;
        v23 = v30 + 4;
        while (v21 != v24)
        {
          v32 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v30 - 1) = v32;
          v30 -= 4;
        }
        *(_QWORD *)(a1 + 72) = v30;
        *(_QWORD *)(a1 + 80) = v23;
        *(_QWORD *)(a1 + 88) = v31;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_DWORD *)v21 = v20;
        v23 = v21 + 4;
      }
      *(_QWORD *)(a1 + 80) = v23;
    }
  }
  v41 = (void **)a1;
  v42 = (double *)&v44;
  geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(unsigned int,unsigned int)#1}>(a1, &v41);
  v41 = (void **)&v44;
  if ((unint64_t)v45 >= 0x10)
  {
    v33 = 0;
    v34 = (unint64_t)v45 >> 4;
    while (1)
    {
      v35 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v44 + v33)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v42 = (double *)(unsigned __int16)~v35;
      if (v35 != 0xFFFF)
        break;
      v33 += 16;
      if (!--v34)
        goto LABEL_49;
    }
    v36 = (__int128 *)(__clz(__rbit64((unsigned __int16)~v35)) + v33);
    v43 = v36;
    if (v36 != (__int128 *)-1)
    {
      while (1)
      {
        v37 = (unsigned int *)((char *)v41[1] + 8 * (_QWORD)v36);
        v38 = *v37;
        __src = v37[1];
        v39 = *(_QWORD *)(a1 + 120) + 144 * v38;
        if (*(_DWORD *)(v39 + 128))
          break;
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(v39 + 96), (char *)&__src, (uint64_t)&v41, 1uLL);
        _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v41);
        v36 = v43;
        if (v43 == (__int128 *)-1)
          goto LABEL_49;
      }
      std::__throw_bad_variant_access[abi:nn180100]();
LABEL_51:
      abort();
    }
  }
LABEL_49:
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v44);
}

void geom::straight_skeleton_evaluator<double>::pop_coincident_events(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4)
{
  __int128 *v4;
  double v9;
  double v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *(__int128 **)(a1 + 168);
  if (v4 != *(__int128 **)(a1 + 176))
  {
    v9 = a4 + 1.0e-10;
    do
    {
      geom::straight_skeleton_evaluator<double>::event_time((uint64_t)v4);
      if (v10 != a4 && v9 < v10)
        break;
      v12 = *(_QWORD *)(a1 + 168);
      v13 = *(_DWORD *)(v12 + 32);
      if (v13 == 1)
      {
        std::deque<geom::straight_skeleton_evaluator<double>::edge_event,std::allocator<geom::straight_skeleton_evaluator<double>::edge_event>>::push_back(a3, v12);
      }
      else
      {
        if (v13)
          std::__throw_bad_variant_access[abi:nn180100]();
        std::deque<geom::straight_skeleton_evaluator<double>::edge_event,std::allocator<geom::straight_skeleton_evaluator<double>::edge_event>>::push_back(a2, v12);
      }
      v4 = *(__int128 **)(a1 + 168);
      v14 = *(_QWORD *)(a1 + 176);
      if (v14 - (uint64_t)v4 >= 49)
      {
        v15 = v4[1];
        v23 = *v4;
        v24 = v15;
        v25 = v4[2];
        v16 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(v4, (uint64_t)&v22, (v14 - (uint64_t)v4) / 0x30uLL);
        v17 = (__int128 *)(v14 - 48);
        if ((_OWORD *)(v14 - 48) == v16)
        {
          v21 = v24;
          *v16 = v23;
          v16[1] = v21;
          v16[2] = v25;
        }
        else
        {
          v18 = *v17;
          v19 = *(_OWORD *)(v14 - 16);
          v16[1] = *(_OWORD *)(v14 - 32);
          v16[2] = v19;
          *v16 = v18;
          v20 = v24;
          *v17 = v23;
          *(_OWORD *)(v14 - 32) = v20;
          *(_OWORD *)(v14 - 16) = v25;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>((uint64_t)v4, (uint64_t)(v16 + 3), (uint64_t)&v22, 0xAAAAAAAAAAAAAAABLL * (v16 + 3 - v4));
        }
        v4 = *(__int128 **)(a1 + 168);
        v14 = *(_QWORD *)(a1 + 176);
      }
      *(_QWORD *)(a1 + 176) = v14 - 48;
    }
    while (v4 != (__int128 *)(v14 - 48));
  }
}

uint64_t geom::straight_skeleton_evaluator<double>::apply_edge_event(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  std::vector<unsigned int>::pointer begin;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  unint64_t v31;
  __int128 v32;
  double v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  double v37;
  double v38;
  __int128 v39;
  uint64_t v40;
  double v41;
  double v42;
  float64x2_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  double v60;
  double v61;
  float64x2_t v62;
  unint64_t v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  __int128 v98;
  __int128 v99;
  void *__dst[2];
  uint64_t v101;
  char v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int16 v106;
  double v107;
  int v108;
  int v109;
  int v110;
  char v111;
  char v112;
  char v113;
  char v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  _OWORD v119[4];
  _OWORD v120[2];
  std::vector<unsigned int> __p;
  uint64_t v122;
  _OWORD v123[4];
  _OWORD v124[2];
  std::vector<unsigned int> v125;
  _QWORD v126[5];

  v126[2] = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 15;
  v2 = a1[15];
  v4 = v2 + 144 * *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(v4 + 128) || *(_DWORD *)(v2 + 144 * *(unsigned int *)(a2 + 12) + 128))
  {
    v6 = 0;
    LOBYTE(v7) = 0;
    v8 = 0;
    return v6 & 0x100000000 | v7 | v8 & 0xFFFFFF00;
  }
  v11 = *(_OWORD *)(v4 + 16);
  v123[0] = *(_OWORD *)v4;
  v123[1] = v11;
  v12 = *(_OWORD *)(v4 + 32);
  v13 = *(_OWORD *)(v4 + 48);
  v14 = *(_OWORD *)(v4 + 64);
  *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)(v4 + 73);
  v123[3] = v13;
  v124[0] = v14;
  v123[2] = v12;
  std::vector<float>::vector(&v125, (const std::vector<unsigned int> *)(v4 + 96));
  v126[0] = *(_QWORD *)(v4 + 120);
  v15 = *v3 + 144 * *(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(v15 + 128))
    goto LABEL_93;
  v16 = *(_OWORD *)(v15 + 16);
  v119[0] = *(_OWORD *)v15;
  v119[1] = v16;
  v17 = *(_OWORD *)(v15 + 32);
  v18 = *(_OWORD *)(v15 + 48);
  v19 = *(_OWORD *)(v15 + 64);
  *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)(v15 + 73);
  v119[3] = v18;
  v120[0] = v19;
  v119[2] = v17;
  std::vector<float>::vector(&__p, (const std::vector<unsigned int> *)(v15 + 96));
  v122 = *(_QWORD *)(v15 + 120);
  v20 = DWORD1(v124[0]);
  v22 = *(_DWORD *)(a2 + 8);
  v21 = *(_DWORD *)(a2 + 12);
  if (DWORD1(v124[0]) == v21 || DWORD1(v120[0]) == v22)
  {
    v23 = (unsigned int *)v124;
    if (DWORD1(v124[0]) != v21)
      v23 = (unsigned int *)v120;
    v24 = *v23;
    if (DWORD1(v124[0]) == v21)
      v25 = DWORD1(v120[0]);
    else
      v25 = DWORD1(v124[0]);
    v96 = v25;
    v97 = DWORD1(v120[0]);
    geom::straight_skeleton_evaluator<double>::vertex_state::make_inactive((__int128 *)(a1[15] + 144 * v22));
    geom::straight_skeleton_evaluator<double>::vertex_state::make_inactive((__int128 *)(a1[15]
                                                                                      + 144
                                                                                      * *(unsigned int *)(a2 + 12)));
    v7 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[16] - a1[15]) >> 4);
    geom::straight_skeleton_evaluator<double>::remove_vertex_from_face_neighbors((uint64_t)a1, *(unsigned int *)(a2 + 8), (uint64_t)v123);
    geom::straight_skeleton_evaluator<double>::remove_vertex_from_face_neighbors((uint64_t)a1, *(unsigned int *)(a2 + 12), (uint64_t)v119);
    __dst[0] = 0;
    __dst[1] = 0;
    v101 = 0;
    begin = v125.__begin_;
    v27 = (char *)v125.__end_ - (char *)v125.__begin_;
    if (v125.__end_ != v125.__begin_)
    {
      std::vector<float>::__vallocate[abi:nn180100](__dst, v27 >> 2);
      v95 = v24;
      v28 = (char *)__dst[1];
      memmove(__dst[1], begin, v27);
      v29 = &v28[v27];
      v24 = v95;
      __dst[1] = v29;
    }
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(__p.__begin_, __p.__end_, (uint64_t)__dst);
    v30 = v126;
    if (!BYTE4(v126[0]))
      v30 = &v122;
    v31 = *(unsigned int *)v30 | ((unint64_t)*((unsigned __int8 *)v30 + 4) << 32);
    if (v20 == v21 && v97 == v22)
    {
      v32 = *(_OWORD *)(a2 + 16);
      v33 = *(double *)a2;
      v104 = 0uLL;
      v105 = 0;
      v34 = v101;
      v35 = *(_OWORD *)__dst;
      __dst[1] = 0;
      v101 = 0;
      __dst[0] = 0;
      v103 = v32;
      v106 = 256;
      v107 = v33;
      v108 = v7;
      v109 = v7;
      v110 = -1;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v115 = v35;
      v116 = v34;
      v117 = v31 & 0xFFFFFFFFFFLL;
      v118 = 0;
      std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::push_back[abi:nn180100](v3, (uint64_t)&v103);
      if (v118 != -1)
        ((void (*)(__int128 *, __int128 *))*(&off_24F14BA40 + v118))(&v98, &v103);
      goto LABEL_86;
    }
    geom::straight_skeleton_evaluator<double>::create_vertex_and_update_neighbors(a1, v24, v96, *(uint64_t *)((char *)&v120[1] + 4), *(uint64_t *)((char *)v120 + 12), (__int128 *)__dst, v31 & 0xFFFFFFFFFFLL, DWORD2(v120[0]), *(double *)a2, *(float64x2_t *)(a2 + 16));
    if (v24 != v96)
      goto LABEL_32;
    v36 = *v3 + 144 * v24;
    if (!*(_DWORD *)(v36 + 128))
    {
      v37 = *(double *)a2;
      v38 = *(double *)(v36 + 32);
      v39 = fabs(v38) <= 1.0e-10
          ? *(_OWORD *)v36
          : (__int128)vmlaq_n_f64(*(float64x2_t *)v36, *(float64x2_t *)(v36 + 16), v38 * (v37 - *(double *)(v36 + 48)));
      *(_OWORD *)v36 = v39;
      *(double *)(v36 + 48) = v37;
      *(_QWORD *)(v36 + 32) = 0;
      *(_WORD *)(v36 + 40) = 256;
      v40 = *v3 + 144 * v7;
      if (!*(_DWORD *)(v40 + 128))
      {
        v41 = *(double *)a2;
        v42 = *(double *)(v40 + 32);
        if (fabs(v42) <= 1.0e-10)
          v43 = *(float64x2_t *)v40;
        else
          v43 = vmlaq_n_f64(*(float64x2_t *)v40, *(float64x2_t *)(v40 + 16), v42 * (v41 - *(double *)(v40 + 48)));
        *(float64x2_t *)v40 = v43;
        *(double *)(v40 + 48) = v41;
        *(_QWORD *)(v40 + 32) = 0;
        *(_WORD *)(v40 + 40) = 256;
LABEL_32:
        geom::straight_skeleton_evaluator<double>::edge_event_for_edge((uint64_t)a1, v7, (uint64_t)&v103);
        if ((_BYTE)v105)
        {
          v98 = v103;
          v99 = v104;
          v44 = a1[23];
          v45 = a1[22];
          if (v45 >= v44)
          {
            v48 = a1[21];
            v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v48) >> 4);
            v50 = v49 + 1;
            if (v49 + 1 > 0x555555555555555)
              goto LABEL_94;
            v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v48) >> 4);
            if (2 * v51 > v50)
              v50 = 2 * v51;
            if (v51 >= 0x2AAAAAAAAAAAAAALL)
              v52 = 0x555555555555555;
            else
              v52 = v50;
            if (v52)
              v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 23), v52);
            else
              v53 = 0;
            v54 = &v53[48 * v49];
            v55 = &v53[48 * v52];
            *(_OWORD *)v54 = v98;
            *((_OWORD *)v54 + 1) = v99;
            *((_DWORD *)v54 + 8) = 0;
            v47 = (uint64_t)(v54 + 48);
            v57 = (char *)a1[21];
            v56 = (char *)a1[22];
            if (v56 != v57)
            {
              do
              {
                v58 = *((_OWORD *)v56 - 3);
                v59 = *((_OWORD *)v56 - 1);
                *((_OWORD *)v54 - 2) = *((_OWORD *)v56 - 2);
                *((_OWORD *)v54 - 1) = v59;
                *((_OWORD *)v54 - 3) = v58;
                v54 -= 48;
                v56 -= 48;
              }
              while (v56 != v57);
              v56 = (char *)a1[21];
            }
            a1[21] = v54;
            a1[22] = v47;
            a1[23] = v55;
            if (v56)
              operator delete(v56);
          }
          else
          {
            v46 = v104;
            *(_OWORD *)v45 = v103;
            *(_OWORD *)(v45 + 16) = v46;
            *(_DWORD *)(v45 + 32) = 0;
            v47 = v45 + 48;
          }
          a1[22] = v47;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(a1[21], v47, (uint64_t)&v102, 0xAAAAAAAAAAAAAAABLL * ((v47 - a1[21]) >> 4));
        }
        geom::straight_skeleton_evaluator<double>::edge_event_for_edge((uint64_t)a1, v24, (uint64_t)&v103);
        if ((_BYTE)v105)
        {
          v98 = v103;
          v99 = v104;
          v63 = a1[23];
          v64 = a1[22];
          if (v64 >= v63)
          {
            v67 = a1[21];
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v67) >> 4);
            v69 = v68 + 1;
            if (v68 + 1 > 0x555555555555555)
              goto LABEL_94;
            v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v67) >> 4);
            if (2 * v70 > v69)
              v69 = 2 * v70;
            if (v70 >= 0x2AAAAAAAAAAAAAALL)
              v71 = 0x555555555555555;
            else
              v71 = v69;
            if (v71)
              v72 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 23), v71);
            else
              v72 = 0;
            v73 = &v72[48 * v68];
            v74 = &v72[48 * v71];
            *(_OWORD *)v73 = v98;
            *((_OWORD *)v73 + 1) = v99;
            *((_DWORD *)v73 + 8) = 0;
            v66 = (uint64_t)(v73 + 48);
            v76 = (char *)a1[21];
            v75 = (char *)a1[22];
            if (v75 != v76)
            {
              do
              {
                v77 = *((_OWORD *)v75 - 3);
                v78 = *((_OWORD *)v75 - 1);
                *((_OWORD *)v73 - 2) = *((_OWORD *)v75 - 2);
                *((_OWORD *)v73 - 1) = v78;
                *((_OWORD *)v73 - 3) = v77;
                v73 -= 48;
                v75 -= 48;
              }
              while (v75 != v76);
              v75 = (char *)a1[21];
            }
            a1[21] = v73;
            a1[22] = v66;
            a1[23] = v74;
            if (v75)
              operator delete(v75);
          }
          else
          {
            v65 = v104;
            *(_OWORD *)v64 = v103;
            *(_OWORD *)(v64 + 16) = v65;
            *(_DWORD *)(v64 + 32) = 0;
            v66 = v64 + 48;
          }
          a1[22] = v66;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(a1[21], v66, (uint64_t)&v102, 0xAAAAAAAAAAAAAAABLL * ((v66 - a1[21]) >> 4));
        }
        geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex((_DWORD **)a1, v7, (uint64_t)&v103, v60, v61, v62);
        if (!(_BYTE)v105)
        {
LABEL_86:
          v8 = v7 & 0xFFFFFF00;
          if (__dst[0])
          {
            __dst[1] = __dst[0];
            operator delete(__dst[0]);
          }
          v6 = 0x100000000;
          goto LABEL_89;
        }
        v98 = v103;
        v99 = v104;
        v79 = a1[23];
        v80 = a1[22];
        if (v80 < v79)
        {
          v81 = v104;
          *(_OWORD *)v80 = v103;
          *(_OWORD *)(v80 + 16) = v81;
          *(_DWORD *)(v80 + 32) = 1;
          v82 = v80 + 48;
LABEL_85:
          a1[22] = v82;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(a1[21], v82, (uint64_t)&v102, 0xAAAAAAAAAAAAAAABLL * ((v82 - a1[21]) >> 4));
          goto LABEL_86;
        }
        v83 = a1[21];
        v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - v83) >> 4);
        v85 = v84 + 1;
        if (v84 + 1 <= 0x555555555555555)
        {
          v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - v83) >> 4);
          if (2 * v86 > v85)
            v85 = 2 * v86;
          if (v86 >= 0x2AAAAAAAAAAAAAALL)
            v87 = 0x555555555555555;
          else
            v87 = v85;
          if (v87)
            v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 23), v87);
          else
            v88 = 0;
          v89 = &v88[48 * v84];
          v90 = &v88[48 * v87];
          *(_OWORD *)v89 = v98;
          *((_OWORD *)v89 + 1) = v99;
          *((_DWORD *)v89 + 8) = 1;
          v82 = (uint64_t)(v89 + 48);
          v92 = (char *)a1[21];
          v91 = (char *)a1[22];
          if (v91 != v92)
          {
            do
            {
              v93 = *((_OWORD *)v91 - 3);
              v94 = *((_OWORD *)v91 - 1);
              *((_OWORD *)v89 - 2) = *((_OWORD *)v91 - 2);
              *((_OWORD *)v89 - 1) = v94;
              *((_OWORD *)v89 - 3) = v93;
              v89 -= 48;
              v91 -= 48;
            }
            while (v91 != v92);
            v91 = (char *)a1[21];
          }
          a1[21] = v89;
          a1[22] = v82;
          a1[23] = v90;
          if (v91)
            operator delete(v91);
          goto LABEL_85;
        }
LABEL_94:
        abort();
      }
    }
LABEL_93:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_94;
  }
  v6 = 0;
  LOBYTE(v7) = 0;
  v8 = 0;
LABEL_89:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v125.__begin_)
  {
    v125.__end_ = v125.__begin_;
    operator delete(v125.__begin_);
  }
  return v6 & 0x100000000 | v7 | v8 & 0xFFFFFF00;
}

unint64_t geom::straight_skeleton_evaluator<double>::apply_split_event(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;
  double v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int active;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int vertex_and_update_neighbors;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  __int128 v35;
  uint64_t v36;
  double v37;
  double v38;
  float64x2_t v39;
  uint64_t v40;
  double v41;
  double v42;
  __int128 v43;
  uint64_t v44;
  double v45;
  double v46;
  float64x2_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  unsigned int v123;
  unsigned int v124;
  char v125;
  char v126;
  void *v127[2];
  __int128 v128;
  char v129;
  _OWORD v130[4];
  _OWORD v131[2];
  std::vector<unsigned int> __p;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v2 = a1[15] + 144 * *(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(v2 + 128))
  {
    v3 = 0;
    v4 = 0;
    return v4 & 0xFFFFFFFFFFFFFF00 | v3;
  }
  v7 = *(_OWORD *)(v2 + 16);
  v130[0] = *(_OWORD *)v2;
  v130[1] = v7;
  v8 = *(_OWORD *)(v2 + 32);
  v9 = *(_OWORD *)(v2 + 48);
  v10 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)((char *)v131 + 9) = *(_OWORD *)(v2 + 73);
  v130[3] = v9;
  v131[0] = v10;
  v130[2] = v8;
  std::vector<float>::vector(&__p, (const std::vector<unsigned int> *)(v2 + 96));
  v133 = *(_QWORD *)(v2 + 120);
  LOBYTE(v123) = 0;
  v125 = 0;
  v127[0] = a1;
  v127[1] = v130;
  *(_QWORD *)&v128 = &v123;
  geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge_on_face<geom::straight_skeleton_evaluator<double>::apply_split_event(geom::straight_skeleton_evaluator<double>::split_event const&)::{lambda(unsigned int,unsigned int)#1}>((unint64_t)a1, (uint64_t)v127, *(_DWORD *)(a2 + 8), v11, v12, v13);
  if (!v125)
    goto LABEL_8;
  v14 = v123;
  v15 = a1[15];
  v16 = v15 + 144 * v123;
  if (*(_DWORD *)(v16 + 128))
    goto LABEL_110;
  v17 = v124;
  v18 = v15 + 144 * v124;
  if (*(_DWORD *)(v18 + 128))
    goto LABEL_110;
  v19 = v131[0];
  v20 = *(_DWORD *)(a2 + 12);
  if (LODWORD(v131[0]) == v20 || (v21 = DWORD1(v131[0]), DWORD1(v131[0]) == v20))
  {
LABEL_8:
    v3 = 0;
    v4 = 0;
    goto LABEL_9;
  }
  active = geom::straight_skeleton_evaluator<double>::add_triangle_fan_for_active_vertex((void **)a1, v20, *(double *)a2);
  geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, *(_DWORD *)(*(_QWORD *)(v16 + 104) - 4), **(_DWORD **)(v18 + 96), active);
  v24 = a1[15];
  v25 = v24 + 144 * v14;
  if (*(_DWORD *)(v25 + 128))
    goto LABEL_110;
  v26 = *(_DWORD *)(v25 + 72);
  v114 = DWORD2(v131[0]);
  v27 = *(_QWORD *)(v25 + 76);
  v112 = *(_QWORD *)((char *)v131 + 12);
  v113 = *(_QWORD *)((char *)&v131[1] + 4);
  geom::straight_skeleton_evaluator<double>::vertex_state::make_inactive((__int128 *)(v24
                                                                                    + 144 * *(unsigned int *)(a2 + 12)));
  v28 = operator new(4uLL);
  v127[0] = v28;
  *v28 = active;
  v127[1] = v28 + 1;
  *(_QWORD *)&v128 = v28 + 1;
  vertex_and_update_neighbors = geom::straight_skeleton_evaluator<double>::create_vertex_and_update_neighbors(a1, v19, v17, v14 | 0x100000000, v27, (__int128 *)v127, 0, v26, *(double *)a2, *(float64x2_t *)(a2 + 16));
  if (v127[0])
  {
    v127[1] = v127[0];
    operator delete(v127[0]);
  }
  v30 = operator new(4uLL);
  v127[0] = v30;
  *v30 = active;
  v127[1] = v30 + 1;
  *(_QWORD *)&v128 = v30 + 1;
  v31 = geom::straight_skeleton_evaluator<double>::create_vertex_and_update_neighbors(a1, v14, v21, v113, v112, (__int128 *)v127, 0, v114, *(double *)a2, *(float64x2_t *)(a2 + 16));
  if (v127[0])
  {
    v127[1] = v127[0];
    operator delete(v127[0]);
  }
  if (v19 == v17)
  {
    v32 = a1[15] + 144 * v17;
    if (*(_DWORD *)(v32 + 128))
      goto LABEL_110;
    v33 = *(double *)a2;
    v34 = *(double *)(v32 + 32);
    v35 = fabs(v34) <= 1.0e-10
        ? *(_OWORD *)v32
        : (__int128)vmlaq_n_f64(*(float64x2_t *)v32, *(float64x2_t *)(v32 + 16), v34 * (v33 - *(double *)(v32 + 48)));
    *(_OWORD *)v32 = v35;
    *(double *)(v32 + 48) = v33;
    *(_QWORD *)(v32 + 32) = 0;
    *(_WORD *)(v32 + 40) = 256;
    v36 = a1[15] + 144 * vertex_and_update_neighbors;
    if (*(_DWORD *)(v36 + 128))
      goto LABEL_110;
    v37 = *(double *)a2;
    v38 = *(double *)(v36 + 32);
    if (fabs(v38) <= 1.0e-10)
      v39 = *(float64x2_t *)v36;
    else
      v39 = vmlaq_n_f64(*(float64x2_t *)v36, *(float64x2_t *)(v36 + 16), v38 * (v37 - *(double *)(v36 + 48)));
    *(float64x2_t *)v36 = v39;
    *(double *)(v36 + 48) = v37;
    *(_QWORD *)(v36 + 32) = 0;
    *(_WORD *)(v36 + 40) = 256;
  }
  if ((_DWORD)v14 != v21)
    goto LABEL_37;
  v40 = a1[15] + 144 * v14;
  if (*(_DWORD *)(v40 + 128))
    goto LABEL_110;
  v41 = *(double *)a2;
  v42 = *(double *)(v40 + 32);
  v43 = fabs(v42) <= 1.0e-10
      ? *(_OWORD *)v40
      : (__int128)vmlaq_n_f64(*(float64x2_t *)v40, *(float64x2_t *)(v40 + 16), v42 * (v41 - *(double *)(v40 + 48)));
  *(_OWORD *)v40 = v43;
  *(double *)(v40 + 48) = v41;
  *(_QWORD *)(v40 + 32) = 0;
  *(_WORD *)(v40 + 40) = 256;
  v44 = a1[15] + 144 * v31;
  if (*(_DWORD *)(v44 + 128))
  {
LABEL_110:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_111;
  }
  v45 = *(double *)a2;
  v46 = *(double *)(v44 + 32);
  if (fabs(v46) <= 1.0e-10)
    v47 = *(float64x2_t *)v44;
  else
    v47 = vmlaq_n_f64(*(float64x2_t *)v44, *(float64x2_t *)(v44 + 16), v46 * (v45 - *(double *)(v44 + 48)));
  *(float64x2_t *)v44 = v47;
  *(double *)(v44 + 48) = v45;
  *(_QWORD *)(v44 + 32) = 0;
  *(_WORD *)(v44 + 40) = 256;
LABEL_37:
  geom::straight_skeleton_evaluator<double>::edge_event_for_edge((uint64_t)a1, vertex_and_update_neighbors, (uint64_t)v127);
  if (v129)
  {
    v115 = *(_OWORD *)v127;
    v119 = v128;
    v48 = a1[23];
    v49 = a1[22];
    if (v49 >= v48)
    {
      v52 = a1[21];
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v52) >> 4);
      v54 = v53 + 1;
      if (v53 + 1 > 0x555555555555555)
        goto LABEL_111;
      v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - v52) >> 4);
      if (2 * v55 > v54)
        v54 = 2 * v55;
      if (v55 >= 0x2AAAAAAAAAAAAAALL)
        v56 = 0x555555555555555;
      else
        v56 = v54;
      if (v56)
        v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 23), v56);
      else
        v57 = 0;
      v58 = &v57[48 * v53];
      v59 = &v57[48 * v56];
      *(_OWORD *)v58 = v115;
      *((_OWORD *)v58 + 1) = v119;
      *((_DWORD *)v58 + 8) = 0;
      v51 = (uint64_t)(v58 + 48);
      v61 = (char *)a1[21];
      v60 = (char *)a1[22];
      if (v60 != v61)
      {
        do
        {
          v62 = *((_OWORD *)v60 - 3);
          v63 = *((_OWORD *)v60 - 1);
          *((_OWORD *)v58 - 2) = *((_OWORD *)v60 - 2);
          *((_OWORD *)v58 - 1) = v63;
          *((_OWORD *)v58 - 3) = v62;
          v58 -= 48;
          v60 -= 48;
        }
        while (v60 != v61);
        v60 = (char *)a1[21];
      }
      a1[21] = v58;
      a1[22] = v51;
      a1[23] = v59;
      if (v60)
        operator delete(v60);
    }
    else
    {
      v50 = v128;
      *(_OWORD *)v49 = *(_OWORD *)v127;
      *(_OWORD *)(v49 + 16) = v50;
      *(_DWORD *)(v49 + 32) = 0;
      v51 = v49 + 48;
    }
    a1[22] = v51;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(a1[21], v51, (uint64_t)&v126, 0xAAAAAAAAAAAAAAABLL * ((v51 - a1[21]) >> 4));
  }
  geom::straight_skeleton_evaluator<double>::edge_event_for_edge((uint64_t)a1, v19, (uint64_t)v127);
  if (v129)
  {
    v116 = *(_OWORD *)v127;
    v120 = v128;
    v64 = a1[23];
    v65 = a1[22];
    if (v65 >= v64)
    {
      v68 = a1[21];
      v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - v68) >> 4);
      v70 = v69 + 1;
      if (v69 + 1 > 0x555555555555555)
        goto LABEL_111;
      v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - v68) >> 4);
      if (2 * v71 > v70)
        v70 = 2 * v71;
      if (v71 >= 0x2AAAAAAAAAAAAAALL)
        v72 = 0x555555555555555;
      else
        v72 = v70;
      if (v72)
        v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 23), v72);
      else
        v73 = 0;
      v74 = &v73[48 * v69];
      v75 = &v73[48 * v72];
      *(_OWORD *)v74 = v116;
      *((_OWORD *)v74 + 1) = v120;
      *((_DWORD *)v74 + 8) = 0;
      v67 = (uint64_t)(v74 + 48);
      v77 = (char *)a1[21];
      v76 = (char *)a1[22];
      if (v76 != v77)
      {
        do
        {
          v78 = *((_OWORD *)v76 - 3);
          v79 = *((_OWORD *)v76 - 1);
          *((_OWORD *)v74 - 2) = *((_OWORD *)v76 - 2);
          *((_OWORD *)v74 - 1) = v79;
          *((_OWORD *)v74 - 3) = v78;
          v74 -= 48;
          v76 -= 48;
        }
        while (v76 != v77);
        v76 = (char *)a1[21];
      }
      a1[21] = v74;
      a1[22] = v67;
      a1[23] = v75;
      if (v76)
        operator delete(v76);
    }
    else
    {
      v66 = v128;
      *(_OWORD *)v65 = *(_OWORD *)v127;
      *(_OWORD *)(v65 + 16) = v66;
      *(_DWORD *)(v65 + 32) = 0;
      v67 = v65 + 48;
    }
    a1[22] = v67;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(a1[21], v67, (uint64_t)&v126, 0xAAAAAAAAAAAAAAABLL * ((v67 - a1[21]) >> 4));
  }
  geom::straight_skeleton_evaluator<double>::edge_event_for_edge((uint64_t)a1, v31, (uint64_t)v127);
  if (v129)
  {
    v117 = *(_OWORD *)v127;
    v121 = v128;
    v80 = a1[23];
    v81 = a1[22];
    if (v81 >= v80)
    {
      v84 = a1[21];
      v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - v84) >> 4);
      v86 = v85 + 1;
      if (v85 + 1 > 0x555555555555555)
        goto LABEL_111;
      v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - v84) >> 4);
      if (2 * v87 > v86)
        v86 = 2 * v87;
      if (v87 >= 0x2AAAAAAAAAAAAAALL)
        v88 = 0x555555555555555;
      else
        v88 = v86;
      if (v88)
        v89 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 23), v88);
      else
        v89 = 0;
      v90 = &v89[48 * v85];
      v91 = &v89[48 * v88];
      *(_OWORD *)v90 = v117;
      *((_OWORD *)v90 + 1) = v121;
      *((_DWORD *)v90 + 8) = 0;
      v83 = (uint64_t)(v90 + 48);
      v93 = (char *)a1[21];
      v92 = (char *)a1[22];
      if (v92 != v93)
      {
        do
        {
          v94 = *((_OWORD *)v92 - 3);
          v95 = *((_OWORD *)v92 - 1);
          *((_OWORD *)v90 - 2) = *((_OWORD *)v92 - 2);
          *((_OWORD *)v90 - 1) = v95;
          *((_OWORD *)v90 - 3) = v94;
          v90 -= 48;
          v92 -= 48;
        }
        while (v92 != v93);
        v92 = (char *)a1[21];
      }
      a1[21] = v90;
      a1[22] = v83;
      a1[23] = v91;
      if (v92)
        operator delete(v92);
    }
    else
    {
      v82 = v128;
      *(_OWORD *)v81 = *(_OWORD *)v127;
      *(_OWORD *)(v81 + 16) = v82;
      *(_DWORD *)(v81 + 32) = 0;
      v83 = v81 + 48;
    }
    a1[22] = v83;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(a1[21], v83, (uint64_t)&v126, 0xAAAAAAAAAAAAAAABLL * ((v83 - a1[21]) >> 4));
  }
  geom::straight_skeleton_evaluator<double>::edge_event_for_edge((uint64_t)a1, v14, (uint64_t)v127);
  if (v129)
  {
    v118 = *(_OWORD *)v127;
    v122 = v128;
    v96 = a1[23];
    v97 = a1[22];
    if (v97 < v96)
    {
      v98 = v128;
      *(_OWORD *)v97 = *(_OWORD *)v127;
      *(_OWORD *)(v97 + 16) = v98;
      *(_DWORD *)(v97 + 32) = 0;
      v99 = v97 + 48;
LABEL_108:
      a1[22] = v99;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(a1[21], v99, (uint64_t)&v126, 0xAAAAAAAAAAAAAAABLL * ((v99 - a1[21]) >> 4));
      goto LABEL_109;
    }
    v100 = a1[21];
    v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - v100) >> 4);
    v102 = v101 + 1;
    if (v101 + 1 <= 0x555555555555555)
    {
      v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - v100) >> 4);
      if (2 * v103 > v102)
        v102 = 2 * v103;
      if (v103 >= 0x2AAAAAAAAAAAAAALL)
        v104 = 0x555555555555555;
      else
        v104 = v102;
      if (v104)
        v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 23), v104);
      else
        v105 = 0;
      v106 = &v105[48 * v101];
      v107 = &v105[48 * v104];
      *(_OWORD *)v106 = v118;
      *((_OWORD *)v106 + 1) = v122;
      *((_DWORD *)v106 + 8) = 0;
      v99 = (uint64_t)(v106 + 48);
      v109 = (char *)a1[21];
      v108 = (char *)a1[22];
      if (v108 != v109)
      {
        do
        {
          v110 = *((_OWORD *)v108 - 3);
          v111 = *((_OWORD *)v108 - 1);
          *((_OWORD *)v106 - 2) = *((_OWORD *)v108 - 2);
          *((_OWORD *)v106 - 1) = v111;
          *((_OWORD *)v106 - 3) = v110;
          v106 -= 48;
          v108 -= 48;
        }
        while (v108 != v109);
        v108 = (char *)a1[21];
      }
      a1[21] = v106;
      a1[22] = v99;
      a1[23] = v107;
      if (v108)
        operator delete(v108);
      goto LABEL_108;
    }
LABEL_111:
    abort();
  }
LABEL_109:
  v3 = vertex_and_update_neighbors;
  v4 = vertex_and_update_neighbors & 0xFFFFFF00 | (unint64_t)(v31 << 32);
LABEL_9:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return v4 & 0xFFFFFFFFFFFFFF00 | v3;
}

uint64_t geom::straight_skeleton_evaluator<double>::add_joiner_mesh_faces_for_events(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *p_src;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t __src;
  __int128 v20;
  __int128 v21;
  int v22;

  v20 = 0u;
  v21 = 0u;
  v22 = 1065353216;
  if (a3)
  {
    v6 = a2;
    v7 = (uint64_t *)((char *)a2 + 12 * a3);
    while (1)
    {
      v8 = *v6;
      v9 = *((_DWORD *)v6 + 2);
      if (v9)
        break;
      LODWORD(__src) = *v6;
      if (!*(_DWORD *)(*(_QWORD *)(a1 + 120) + 144 * v8 + 128))
      {
        p_src = (unsigned int *)&__src;
        v13 = (uint64_t *)&__src;
LABEL_12:
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v20, p_src, v13);
      }
LABEL_13:
      v6 = (uint64_t *)((char *)v6 + 12);
      if (v6 == v7)
      {
        v14 = (uint64_t *)v21;
        if ((_QWORD)v21)
        {
          do
          {
            geom::straight_skeleton_evaluator<double>::add_triangle_fan_for_active_vertex((void **)a1, *((_DWORD *)v14 + 4), a4);
            v14 = (uint64_t *)*v14;
          }
          while (v14);
          goto LABEL_16;
        }
        return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v20);
      }
    }
    if (v9 != 1)
      goto LABEL_22;
    __src = *v6;
    v10 = *(_QWORD *)(a1 + 120);
    if (*(_DWORD *)(v10 + 144 * v8 + 128))
    {
      v11 = HIDWORD(v8);
    }
    else
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v20, (unsigned int *)&__src, &__src);
      LODWORD(v11) = HIDWORD(__src);
      v10 = *(_QWORD *)(a1 + 120);
    }
    if (*(_DWORD *)(v10 + 144 * v11 + 128))
      goto LABEL_13;
    p_src = (unsigned int *)&__src + 1;
    v13 = (uint64_t *)((char *)&__src + 4);
    goto LABEL_12;
  }
LABEL_16:
  v15 = (uint64_t **)v21;
  if (!(_QWORD)v21)
    return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v20);
  while (1)
  {
    v16 = *(_QWORD *)(a1 + 120) + 144 * *((unsigned int *)v15 + 4);
    if (*(_DWORD *)(v16 + 128))
      break;
    LODWORD(__src) = *(_DWORD *)(v16 + 120);
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(v16 + 96), (char *)&__src, (uint64_t)&__src + 4, 1uLL);
    if (*(_BYTE *)(v16 + 124))
      *(_BYTE *)(v16 + 124) = 0;
    v15 = (uint64_t **)*v15;
    if (!v15)
      return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v20);
  }
LABEL_22:
  v18 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom::straight_skeleton_evaluator<double>::extract_offset_curve(v18);
}

void geom::straight_skeleton_evaluator<double>::extract_offset_curve(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD v3[2];
  _QWORD v4[2];

  a2[1] = *a2;
  a3[1] = *a3;
  v4[0] = a1;
  v4[1] = a2;
  v3[0] = a3;
  v3[1] = a2;
  _ZNK4geom27straight_skeleton_evaluatorIdE25for_each_wavefront_vertexIZNKS1_20extract_offset_curveERNSt3__16vectorIDv2_dNS3_9allocatorIS5_EEEERNS4_IjNS6_IjEEEEEUljE_ZNKS1_20extract_offset_curveES9_SC_EUlvE_EEvOT_OT0_(a1, v4, v3);
}

void _ZNK4geom27straight_skeleton_evaluatorIdE25for_each_wavefront_vertexIZNKS1_20extract_offset_curveERNSt3__16vectorIDv2_dNS3_9allocatorIS5_EEEERNS4_IjNS6_IjEEEEEUljE_ZNKS1_20extract_offset_curveES9_SC_EUlvE_EEvOT_OT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  void **v18;
  float64x2_t v19;
  float64x2_t *v20;
  unint64_t v21;
  _OWORD *f64;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  float64x2_t v48;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4), 0);
  v6 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  if (v5 != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *((_QWORD *)__p[0] + (v7 >> 6));
      if ((v9 & (1 << v7)) != 0 || *(_DWORD *)(v6 + 144 * v7 + 128))
      {
        *((_QWORD *)__p[0] + (v7 >> 6)) = v9 | (1 << v7);
      }
      else
      {
        v10 = v8;
        v11 = (unint64_t)v8 >> 6;
        v12 = 1 << v8;
        for (i = *((_QWORD *)__p[0] + v11); (v12 & i) == 0; i = v32[v10 >> 6])
        {
          v14 = *a2;
          v15 = *(_QWORD *)(*a2 + 120) + 144 * v10;
          if (*(_DWORD *)(v15 + 128))
            goto LABEL_52;
          v16 = *(double *)(v15 + 32);
          if (fabs(v16) <= 1.0e-10)
            v17 = *(float64x2_t *)v15;
          else
            v17 = vmlaq_n_f64(*(float64x2_t *)v15, *(float64x2_t *)(v15 + 16), v16 * (*(double *)(*(_QWORD *)(v14 + 104) - 8) - *(double *)(v15 + 48)));
          v18 = (void **)a2[1];
          v19 = vmlaq_n_f64(*(float64x2_t *)(v14 + 208), v17, *(double *)(v14 + 224));
          v20 = (float64x2_t *)v18[1];
          v21 = (unint64_t)v18[2];
          if ((unint64_t)v20 >= v21)
          {
            v23 = ((char *)v20 - (_BYTE *)*v18) >> 4;
            if ((unint64_t)(v23 + 1) >> 60)
              goto LABEL_53;
            v24 = v21 - (_QWORD)*v18;
            v25 = v24 >> 3;
            if (v24 >> 3 <= (unint64_t)(v23 + 1))
              v25 = v23 + 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
              v26 = 0xFFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
            {
              v48 = v19;
              v27 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v18 + 2), v26);
              v19 = v48;
            }
            else
            {
              v27 = 0;
            }
            v28 = (float64x2_t *)&v27[16 * v23];
            *v28 = v19;
            f64 = (_OWORD *)v28[1].f64;
            v30 = (float64x2_t *)*v18;
            v29 = (float64x2_t *)v18[1];
            if (v29 != *v18)
            {
              do
              {
                v31 = v29[-1];
                --v29;
                v28[-1] = v31;
                --v28;
              }
              while (v29 != v30);
              v29 = (float64x2_t *)*v18;
            }
            *v18 = v28;
            v18[1] = f64;
            v18[2] = &v27[16 * v26];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v20 = v19;
            f64 = (_OWORD *)v20[1].f64;
          }
          v18[1] = f64;
          v32 = __p[0];
          *((_QWORD *)__p[0] + v11) |= v12;
          v33 = *(_QWORD *)(a1 + 120) + 144 * v10;
          if (*(_DWORD *)(v33 + 128))
          {
LABEL_52:
            std::__throw_bad_variant_access[abi:nn180100]();
LABEL_53:
            abort();
          }
          v10 = *(unsigned int *)(v33 + 68);
          v11 = v10 >> 6;
          v12 = 1 << v10;
        }
        v34 = *a3;
        v35 = (*(_QWORD *)(a3[1] + 8) - *(_QWORD *)a3[1]) >> 4;
        v36 = *(_DWORD **)(*a3 + 8);
        v37 = *(_QWORD *)(*a3 + 16);
        if ((unint64_t)v36 >= v37)
        {
          v39 = *(_DWORD **)v34;
          v40 = ((uint64_t)v36 - *(_QWORD *)v34) >> 2;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62)
            goto LABEL_53;
          v42 = v37 - (_QWORD)v39;
          if (v42 >> 1 > v41)
            v41 = v42 >> 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(*a3 + 16, v43);
            v39 = *(_DWORD **)v34;
            v36 = *(_DWORD **)(v34 + 8);
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[4 * v40];
          *(_DWORD *)v45 = v35;
          v38 = v45 + 4;
          while (v36 != v39)
          {
            v46 = *--v36;
            *((_DWORD *)v45 - 1) = v46;
            v45 -= 4;
          }
          *(_QWORD *)v34 = v45;
          *(_QWORD *)(v34 + 8) = v38;
          *(_QWORD *)(v34 + 16) = &v44[4 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v36 = v35;
          v38 = v36 + 1;
        }
        *(_QWORD *)(v34 + 8) = v38;
        v6 = *(_QWORD *)(a1 + 120);
        v5 = *(_QWORD *)(a1 + 128);
      }
      v7 = ++v8;
    }
    while (0x8E38E38E38E38E39 * ((v5 - v6) >> 4) > v8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

_DWORD *geom::straight_skeleton_evaluator<double>::extract_joiner_mesh(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t v13;
  double *v14;
  double *v15;
  double v16;
  float64x2_t v18;
  double v19;

  a2[1] = *a2;
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  a6[1] = *a6;
  v11 = *(float64x2_t **)a1;
  v12 = *(float64x2_t **)(a1 + 8);
  v19 = *(double *)&a2;
  while (v11 != v12)
  {
    v13 = *v11++;
    v18 = vmlaq_n_f64(*(float64x2_t *)(a1 + 208), v13, *(double *)(a1 + 224));
    _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8nn180100ERKS2_((void ***)&v19, &v18);
  }
  v14 = *(double **)(a1 + 96);
  v15 = *(double **)(a1 + 104);
  *(_QWORD *)&v18.f64[0] = a6;
  while (v14 != v15)
  {
    v16 = *v14++;
    v19 = v16 * *(double *)(a1 + 224);
    std::back_insert_iterator<std::vector<double>>::operator=[abi:nn180100]((uint64_t *)&v18, &v19);
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(a1 + 24), *(_DWORD **)(a1 + 32), (uint64_t)a3);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(a1 + 48), *(_DWORD **)(a1 + 56), (uint64_t)a4);
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(*(_DWORD **)(a1 + 72), *(_DWORD **)(a1 + 80), (uint64_t)a5);
}

BOOL geom::straight_skeleton_evaluator<double>::event_time_comparator::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4;
  double v5;
  double v6;

  geom::straight_skeleton_evaluator<double>::event_time(a2);
  v5 = v4;
  geom::straight_skeleton_evaluator<double>::event_time(a3);
  return v5 > v6;
}

__n128 geom::straight_skeleton_evaluator<double>::vertex_state::vertex_state(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 96) = result;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = 0;
  return result;
}

{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 128) = 1;
  return result;
}

uint64_t geom::straight_skeleton_evaluator<double>::vertex_state::get_active(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 128))
  {
    v1 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<double>::vertex_state::get_active_or_null(v1);
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<double>::vertex_state::get_active_or_null(uint64_t result)
{
  if (*(_DWORD *)(result + 128))
    return 0;
  return result;
}

BOOL geom::straight_skeleton_evaluator<double>::vertex_state::is_active(uint64_t a1)
{
  return *(_DWORD *)(a1 + 128) == 0;
}

uint64_t geom::straight_skeleton_evaluator<double>::vertex_state::get_inactive(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 128) != 1)
  {
    v1 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<double>::vertex_state::spoke(v1);
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<double>::vertex_state::spoke(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 128) >= 2u)
  {
    v1 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<double>::vertex_state::make_inactive(v1);
  }
  return result;
}

void geom::straight_skeleton_evaluator<double>::vertex_state::make_inactive(__int128 *a1)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];
  std::vector<unsigned int> v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)a1 + 32))
  {
    v2 = a1[3];
    v16 = a1[2];
    v17 = v2;
    v18[0] = a1[4];
    *(_OWORD *)((char *)v18 + 9) = *(__int128 *)((char *)a1 + 73);
    v3 = a1[1];
    v14 = *a1;
    v15 = v3;
    std::vector<float>::vector(&v19, (const std::vector<unsigned int> *)a1 + 4);
    v20 = *((_QWORD *)a1 + 15);
    v10 = v14;
    v11 = v15;
    v12 = v16;
    *(_QWORD *)&v13 = v17;
    v4 = *((unsigned int *)a1 + 32);
    if ((_DWORD)v4 != -1)
    {
      if ((_DWORD)v4 == 1)
      {
        v5 = v11;
        *a1 = v10;
        a1[1] = v5;
        v6 = v13;
        a1[2] = v12;
        a1[3] = v6;
        goto LABEL_7;
      }
      ((void (*)(char *, __int128 *))*(&off_24F14BA40 + v4))(&v9, a1);
    }
    v7 = v11;
    *a1 = v10;
    a1[1] = v7;
    v8 = v13;
    a1[2] = v12;
    a1[3] = v8;
    *((_DWORD *)a1 + 32) = 1;
LABEL_7:
    if (v19.__begin_)
    {
      v19.__end_ = v19.__begin_;
      operator delete(v19.__begin_);
    }
  }
}

uint64_t geom::straight_skeleton_evaluator<double>::remove_vertex_from_face_neighbors(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = (unsigned int *)(a3 + 84);
  if (*(_BYTE *)(a3 + 88))
  {
    v4 = *(_QWORD *)(result + 120) + 144 * *v3;
    if (*(_DWORD *)(v4 + 128))
      goto LABEL_10;
    v5 = *(_DWORD *)(a3 + 76);
    *(_BYTE *)(v4 + 80) = *(_BYTE *)(a3 + 80);
    *(_DWORD *)(v4 + 76) = v5;
  }
  else
  {
    v6 = *(unsigned int *)(a3 + 72);
    if ((_DWORD)v6 != -1)
    {
      v7 = *(_QWORD *)(result + 144) + 8 * v6;
      v8 = *(_DWORD *)(a3 + 76);
      *(_BYTE *)(v7 + 4) = *(_BYTE *)(a3 + 80);
      *(_DWORD *)v7 = v8;
    }
  }
  if (!*(_BYTE *)(a3 + 80))
    return result;
  v9 = *(_QWORD *)(result + 120) + 144 * *(unsigned int *)(a3 + 76);
  if (*(_DWORD *)(v9 + 128))
  {
LABEL_10:
    v11 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<double>::create_vertex_and_update_neighbors(v11);
  }
  v10 = *v3;
  *(_BYTE *)(v9 + 88) = *(_BYTE *)(a3 + 88);
  *(_DWORD *)(v9 + 84) = v10;
  return result;
}

uint64_t geom::straight_skeleton_evaluator<double>::create_vertex_and_update_neighbors(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, unsigned int a8, double a9, float64x2_t a10)
{
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  double v25;
  float64x2_t v26;
  uint64_t v27;
  double v28;
  float64x2_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v42;
  __n128 v43[4];
  _BYTE v44[25];
  void *__p;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49[4];
  _OWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v18 = a1 + 15;
  v17 = a1[15];
  v19 = a1[16];
  geom::straight_skeleton_evaluator<double>::find_distinct_neighbor((uint64_t)a1, a2, a3, 0, a10, a9);
  if ((v20 & 0xFF00000000) != 0)
    v21 = v20;
  else
    v21 = a2;
  geom::straight_skeleton_evaluator<double>::find_distinct_neighbor((uint64_t)a1, a3, a2, 1, a10, a9);
  if ((v22 & 0xFF00000000) != 0)
    v23 = v22;
  else
    v23 = a3;
  v24 = *v18 + 144 * v21;
  if (*(_DWORD *)(v24 + 128))
    goto LABEL_31;
  v25 = *(double *)(v24 + 32);
  if (fabs(v25) <= 1.0e-10)
    v26 = *(float64x2_t *)v24;
  else
    v26 = vmlaq_n_f64(*(float64x2_t *)v24, *(float64x2_t *)(v24 + 16), v25 * (a9 - *(double *)(v24 + 48)));
  v27 = *v18 + 144 * v23;
  if (*(_DWORD *)(v27 + 128))
    goto LABEL_31;
  v28 = *(double *)(v27 + 32);
  if (fabs(v28) <= 1.0e-10)
    v29 = *(float64x2_t *)v27;
  else
    v29 = vmlaq_n_f64(*(float64x2_t *)v27, *(float64x2_t *)(v27 + 16), v28 * (a9 - *(double *)(v27 + 48)));
  geom::spoke<double>::spoke(v43, (__n128)a10, v26, v29, a9);
  *(_DWORD *)v44 = a2;
  *(_DWORD *)&v44[4] = a3;
  *(_DWORD *)&v44[8] = a8;
  *(_DWORD *)&v44[12] = a5;
  v44[16] = BYTE4(a5);
  *(_DWORD *)&v44[20] = a4;
  v44[24] = BYTE4(a4);
  v30 = *((_QWORD *)a6 + 2);
  v31 = *a6;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  BYTE4(v48) = BYTE4(a7);
  LODWORD(v48) = a7;
  v49[2] = v43[2];
  v49[3] = v43[3];
  v49[0] = v43[0];
  v49[1] = v43[1];
  v50[0] = *(_OWORD *)v44;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v44[9];
  v50[2] = v31;
  __p = 0;
  v46 = 0;
  v47 = 0;
  v51 = v30;
  v52 = v48;
  v53 = 0;
  std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::push_back[abi:nn180100](v18, (uint64_t)v49);
  if (v53 != -1)
    ((void (*)(char *, __n128 *))*(&off_24F14BA40 + v53))(&v42, v49);
  v53 = -1;
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v32 = *v18;
  v33 = *v18 + 144 * a2;
  if (*(_DWORD *)(v33 + 128))
    goto LABEL_31;
  result = 954437177 * ((unint64_t)(v19 - v17) >> 4);
  *(_DWORD *)(v33 + 68) = result;
  v35 = v32 + 144 * a3;
  if (*(_DWORD *)(v35 + 128))
    goto LABEL_31;
  *(_DWORD *)(v35 + 64) = result;
  if (BYTE4(a4))
  {
    v36 = v32 + 144 * a4;
    if (*(_DWORD *)(v36 + 128))
      goto LABEL_31;
    *(_DWORD *)(v36 + 76) = result;
    *(_BYTE *)(v36 + 80) = 1;
  }
  if (!BYTE4(a5))
    goto LABEL_27;
  v37 = *v18 + 144 * a5;
  if (*(_DWORD *)(v37 + 128))
LABEL_31:
    std::__throw_bad_variant_access[abi:nn180100]();
  *(_DWORD *)(v37 + 84) = result;
  *(_BYTE *)(v37 + 88) = 1;
LABEL_27:
  if (!BYTE4(a4) && a8 != -1)
  {
    v38 = a1[18] + 8 * a8;
    *(_DWORD *)v38 = result;
    *(_BYTE *)(v38 + 4) = 1;
  }
  return result;
}

unint64_t geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge_on_face<geom::straight_skeleton_evaluator<double>::apply_split_event(geom::straight_skeleton_evaluator<double>::split_event const&)::{lambda(unsigned int,unsigned int)#1}>(unint64_t result, uint64_t a2, unsigned int a3, double a4, double a5, float64x2_t a6)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  if ((*(_QWORD *)(*(_QWORD *)(result + 144) + 8 * a3) & 0xFF00000000) != 0)
  {
    v7 = result;
    v8 = *(_QWORD *)(*(_QWORD *)(result + 144) + 8 * a3);
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 120) + 144 * v8;
      if (*(_DWORD *)(v9 + 128))
        break;
      v10 = *(_QWORD *)(*(_QWORD *)a2 + 120);
      v11 = v10 + 144 * v8;
      if (*(_DWORD *)(v11 + 128))
        break;
      v12 = *(unsigned int *)(v9 + 68);
      v13 = v10 + 144 * v12;
      if (*(_DWORD *)(v13 + 128))
        break;
      result = geom::intersect_wavefront_edge_spoke<double>((float64x2_t *)v11, (float64x2_t *)v13, *(float64x2_t **)(a2 + 8), a4, a5, a6);
      if (v14)
      {
        v15 = *(_QWORD *)(a2 + 16);
        if (*(_BYTE *)(v15 + 8))
        {
          *(_DWORD *)v15 = v8;
          *(_DWORD *)(v15 + 4) = v12;
        }
        else
        {
          *(_QWORD *)v15 = v8 | (v12 << 32);
          *(_BYTE *)(v15 + 8) = 1;
        }
      }
      v8 = *(unsigned int *)(v9 + 76);
      if (!*(_BYTE *)(v9 + 80))
        return result;
    }
    v16 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom::straight_skeleton_evaluator<double>::add_triangle_fan_for_active_vertex(v16);
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<double>::add_triangle_fan_for_active_vertex(void **a1, unsigned int a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  _OWORD *v9;
  double v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  double *v24;
  double v25;
  unint64_t v27;
  double *v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  double *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  __int128 v69;
  float64x2_t v70;

  v3 = (uint64_t)a1[15] + 144 * a2;
  if (*(_DWORD *)(v3 + 128))
    goto LABEL_86;
  if (*(_BYTE *)(v3 + 124))
  {
    v7 = *(unsigned int *)(v3 + 120);
  }
  else
  {
    v8 = (char *)*a1;
    v9 = a1[1];
    v10 = *(double *)(v3 + 32);
    v11 = fabs(v10) <= 1.0e-10
        ? *(_OWORD *)v3
        : (__int128)vmlaq_n_f64(*(float64x2_t *)v3, *(float64x2_t *)(v3 + 16), v10 * (a3 - *(double *)(v3 + 48)));
    v7 = ((char *)v9 - (_BYTE *)*a1) >> 4;
    v12 = (uint64_t)(a1 + 2);
    v13 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v13)
    {
      if ((unint64_t)(v7 + 1) >> 60)
        goto LABEL_87;
      v15 = v13 - (_QWORD)v8;
      v16 = v15 >> 3;
      if (v15 >> 3 <= (unint64_t)(v7 + 1))
        v16 = v7 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        v69 = v11;
        v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v12, v17);
        v11 = v69;
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[16 * v7];
      v20 = &v18[16 * v17];
      *(_OWORD *)v19 = v11;
      v14 = v19 + 16;
      v22 = (char *)*a1;
      v21 = (char *)a1[1];
      if (v21 != *a1)
      {
        do
        {
          v23 = *((_OWORD *)v21 - 1);
          v21 -= 16;
          *((_OWORD *)v19 - 1) = v23;
          v19 -= 16;
        }
        while (v21 != v22);
        v21 = (char *)*a1;
      }
      *a1 = v19;
      a1[1] = v14;
      a1[2] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v9 = v11;
      v14 = v9 + 1;
    }
    a1[1] = v14;
  }
  v70 = *((float64x2_t *)*a1 + v7);
  v24 = (double *)a1[13];
  v25 = *(v24 - 1);
  if (v25 == a3 || v25 + 1.0e-10 > a3)
  {
    *((_DWORD *)a1[10] - 1) = (unint64_t)((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  }
  else
  {
    v27 = (unint64_t)a1[14];
    if ((unint64_t)v24 >= v27)
    {
      v29 = (double *)a1[12];
      v30 = v24 - v29;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61)
        goto LABEL_87;
      v32 = v27 - (_QWORD)v29;
      if (v32 >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 14), v33);
        v29 = (double *)a1[12];
        v24 = (double *)a1[13];
      }
      else
      {
        v34 = 0;
      }
      v35 = (double *)&v34[8 * v30];
      v36 = &v34[8 * v33];
      *v35 = a3;
      v28 = v35 + 1;
      while (v24 != v29)
      {
        v37 = *((_QWORD *)v24-- - 1);
        *((_QWORD *)v35-- - 1) = v37;
      }
      a1[12] = v35;
      a1[13] = v28;
      a1[14] = v36;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v24 = a3;
      v28 = v24 + 1;
    }
    a1[13] = v28;
    v38 = (unint64_t)((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
    v39 = (char *)a1[10];
    v40 = (unint64_t)a1[11];
    if ((unint64_t)v39 >= v40)
    {
      v42 = (char *)a1[9];
      v43 = (v39 - v42) >> 2;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62)
        goto LABEL_87;
      v45 = v40 - (_QWORD)v42;
      if (v45 >> 1 > v44)
        v44 = v45 >> 1;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
        v46 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 11), v46);
        v42 = (char *)a1[9];
        v39 = (char *)a1[10];
      }
      else
      {
        v47 = 0;
      }
      v48 = &v47[4 * v43];
      v49 = &v47[4 * v46];
      *(_DWORD *)v48 = v38;
      v41 = v48 + 4;
      while (v39 != v42)
      {
        v50 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v48 - 1) = v50;
        v48 -= 4;
      }
      a1[9] = v48;
      a1[10] = v41;
      a1[11] = v49;
      if (v42)
        operator delete(v42);
    }
    else
    {
      *(_DWORD *)v39 = v38;
      v41 = v39 + 4;
    }
    a1[10] = v41;
  }
  v51 = *(_QWORD *)(v3 + 96);
  if ((unint64_t)(*(_QWORD *)(v3 + 104) - v51) >= 5)
  {
    v52 = 2;
    v53 = 1;
    do
    {
      geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, *(_DWORD *)(v51 + 4 * (v52 - 2)), *(_DWORD *)(v51 + 4 * v53), v7);
      v53 = v52;
      v51 = *(_QWORD *)(v3 + 96);
      ++v52;
    }
    while (v53 < (*(_QWORD *)(v3 + 104) - v51) >> 2);
  }
  v54 = *(_DWORD *)(v3 + 64);
  v55 = *(_DWORD *)(v3 + 68);
  geom::straight_skeleton_evaluator<double>::find_distinct_neighbor((uint64_t)a1, v54, a2, 0, v70, a3);
  if ((v56 & 0xFF00000000) != 0)
    v54 = v56;
  geom::straight_skeleton_evaluator<double>::find_distinct_neighbor((uint64_t)a1, *(_DWORD *)(v3 + 68), a2, 1, v70, a3);
  v58 = a1[15];
  v59 = (uint64_t)v58 + 144 * v54;
  if (*(_DWORD *)(v59 + 128)
    || ((v57 & 0xFF00000000) != 0 ? (v60 = v57) : (v60 = v55), v61 = (uint64_t)v58 + 144 * v60, *(_DWORD *)(v61 + 128)))
  {
LABEL_86:
    std::__throw_bad_variant_access[abi:nn180100]();
LABEL_87:
    abort();
  }
  if (*(_DWORD *)(v3 + 68) != a2)
  {
    v65 = (uint64_t)v58 + 144 * *(unsigned int *)(v59 + 68);
    if (!*(_DWORD *)(v65 + 128))
    {
      v66 = (uint64_t)v58 + 144 * *(unsigned int *)(v61 + 64);
      if (!*(_DWORD *)(v66 + 128))
      {
        if (*(_BYTE *)(v59 + 124))
          v67 = (int *)(v59 + 120);
        else
          v67 = (int *)(*(_QWORD *)(v59 + 104) - 4);
        geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, *v67, **(_DWORD **)(v65 + 96), v7);
        v64 = *(_DWORD *)(*(_QWORD *)(v66 + 104) - 4);
        if (*(_BYTE *)(v61 + 124))
          v62 = (int *)(v61 + 120);
        else
          v62 = *(int **)(v61 + 96);
        goto LABEL_84;
      }
    }
    goto LABEL_86;
  }
  v62 = *(int **)(v3 + 96);
  v63 = *(_QWORD *)(v3 + 104);
  if ((unint64_t)(v63 - (_QWORD)v62) >= 9)
  {
    v64 = *(_DWORD *)(v63 - 4);
LABEL_84:
    geom::straight_skeleton_evaluator<float>::add_joiner_mesh_triangle(a1, v64, *v62, v7);
  }
  *(_DWORD *)(v3 + 120) = v7;
  *(_BYTE *)(v3 + 124) = 1;
  return v7;
}

float64_t geom::straight_skeleton_evaluator<double>::find_distinct_neighbor(uint64_t a1, unsigned int a2, unsigned int a3, int a4, float64x2_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;

  v6 = a2;
  if (a2 != (unint64_t)a3)
  {
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 120) + 144 * v6;
      if (*(_DWORD *)(v7 + 128))
        break;
      v8 = *(double *)(v7 + 32);
      if (fabs(v8) <= 1.0e-10)
        v9 = *(float64x2_t *)v7;
      else
        v9 = vmlaq_n_f64(*(float64x2_t *)v7, *(float64x2_t *)(v7 + 16), v8 * (a6 - *(double *)(v7 + 48)));
      v10 = vsubq_f64(v9, a5);
      if (sqrt(vaddvq_f64(vmulq_f64(v10, v10))) <= 1.0e-10)
      {
        v11 = a4 ? 68 : 64;
        v6 = *(unsigned int *)(v7 + v11);
        if (v6 != a3)
          continue;
      }
      return a5.f64[0];
    }
    v12 = (float64x2_t *)std::__throw_bad_variant_access[abi:nn180100]();
    a5.f64[0] = geom::straight_skeleton_evaluator<double>::internal_to_user_position(v12, v13);
  }
  return a5.f64[0];
}

double geom::straight_skeleton_evaluator<double>::internal_to_user_position(float64x2_t *a1, float64x2_t a2)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vmlaq_n_f64(a1[13], a2, a1[14].f64[0]);
  return result;
}

void geom::straight_skeleton_evaluator<double>::check_topological_invariants(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  std::string *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  char *v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  int64x2_t v63;
  char *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  int64x2_t v88;
  char *v89;
  std::string *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  int64x2_t v113;
  char *v114;
  std::string *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  _QWORD *v125;
  _OWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  __int128 v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  __int128 v144;
  int64x2_t v145;
  char *v146;
  std::string *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  int64x2_t v155;
  char *v156;
  std::string *v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  _OWORD *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  __int128 v170;
  int64x2_t v171;
  char *v172;
  std::string *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  _QWORD *v185;
  _QWORD *v186;
  _OWORD *v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  __int128 v196;
  int64x2_t v197;
  char *v198;
  std::string *v199;
  _QWORD *v200;
  _QWORD *v201;
  _OWORD *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  __int128 v211;
  int64x2_t v212;
  char *v213;
  std::string *v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  _OWORD *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  __int128 v230;
  int64x2_t v231;
  char *v232;
  std::string *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  void **v237;
  void **v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  _OWORD *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  __int128 v252;
  int64x2_t v253;
  char *v254;
  std::string *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  void **v260;
  uint64_t v261;
  void **v262;
  uint64_t v263;
  unsigned int v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _OWORD *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  __int128 v277;
  int64x2_t v278;
  char *v279;
  std::string *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  _QWORD *v284;
  _OWORD *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  __int128 v294;
  int64x2_t v295;
  char *v296;
  std::string *v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  void **v301;
  uint64_t v302;
  void **v303;
  uint64_t v304;
  unsigned int v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _OWORD *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  __int128 v318;
  int64x2_t v319;
  char *v320;
  std::string *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  std::locale::id *v325;
  _QWORD *v326;
  _QWORD *v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  const std::locale::facet *v332;
  uint64_t v333;
  uint64_t v335;
  void **v336;
  void **v337;
  void *__p[2];
  uint64_t v339;
  void **v340[2];
  uint64_t v341;
  uint64_t v342;
  void *v343;
  char v344;
  _BYTE v345[152];
  int64x2_t v346;
  std::string *v347;
  std::__split_buffer<std::string> v348;

  v346 = 0uLL;
  v347 = 0;
  v3 = a1[15];
  if (a1[16] != v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = (void **)*MEMORY[0x24BEDB7F0];
    v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v337 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v335 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v8 = v3 + 144 * v4;
      if (*(_DWORD *)(v8 + 128))
        goto LABEL_4;
      v9 = v3 + 144 * *(unsigned int *)(v8 + 68);
      if (*(_DWORD *)(v9 + 128))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)": next = ", 9);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)", but ", 6);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v13 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v18)
            v18 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v19 = 0xAAAAAAAAAAAAAAALL;
          else
            v19 = v18;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v19);
          else
            v20 = 0;
          v21 = &v20[24 * v17];
          *((_QWORD *)v21 + 2) = v339;
          *(_OWORD *)v21 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v22 = v346.i64[1];
          v23 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v26 = vdupq_n_s64(v346.u64[1]);
            v24 = &v20[24 * v17];
          }
          else
          {
            v24 = &v20[24 * v17];
            do
            {
              v25 = *(_OWORD *)(v22 - 24);
              *((_QWORD *)v24 - 1) = *(_QWORD *)(v22 - 8);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              *(_QWORD *)(v22 - 16) = 0;
              *(_QWORD *)(v22 - 8) = 0;
              *(_QWORD *)(v22 - 24) = 0;
              v22 -= 24;
            }
            while (v22 != v23);
            v26 = v346;
          }
          v27 = v21 + 24;
          v346.i64[0] = (uint64_t)v24;
          v346.i64[1] = (uint64_t)(v21 + 24);
          *(int64x2_t *)&v348.__begin_ = v26;
          v28 = v347;
          v347 = (std::string *)&v20[24 * v19];
          v348.__end_cap_.__value_ = v28;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v26.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v27;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v13 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v13 + 24;
        }
        v340[0] = v6;
        *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
        v29 = MEMORY[0x24BEDB848] + 16;
        v341 = v7;
      }
      else
      {
        if (*(_DWORD *)(v9 + 64) == v5)
          goto LABEL_47;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v14 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)": prev and next pointers do not match.  next = ", 47);
        v15 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", and next->prev = ", 19);
        std::ostream::operator<<();
        std::stringbuf::str();
        v16 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v30 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v31)
            v31 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v32 = 0xAAAAAAAAAAAAAAALL;
          else
            v32 = v31;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v32)
            v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v32);
          else
            v33 = 0;
          v34 = &v33[24 * v30];
          *((_QWORD *)v34 + 2) = v339;
          *(_OWORD *)v34 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v35 = v346.i64[1];
          v36 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v39 = vdupq_n_s64(v346.u64[1]);
            v37 = &v33[24 * v30];
          }
          else
          {
            v37 = &v33[24 * v30];
            do
            {
              v38 = *(_OWORD *)(v35 - 24);
              *((_QWORD *)v37 - 1) = *(_QWORD *)(v35 - 8);
              *(_OWORD *)(v37 - 24) = v38;
              v37 -= 24;
              *(_QWORD *)(v35 - 16) = 0;
              *(_QWORD *)(v35 - 8) = 0;
              *(_QWORD *)(v35 - 24) = 0;
              v35 -= 24;
            }
            while (v35 != v36);
            v39 = v346;
          }
          v40 = v34 + 24;
          v346.i64[0] = (uint64_t)v37;
          v346.i64[1] = (uint64_t)(v34 + 24);
          *(int64x2_t *)&v348.__begin_ = v39;
          v41 = v347;
          v347 = (std::string *)&v33[24 * v32];
          v348.__end_cap_.__value_ = v41;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v39.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v40;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v16 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v16 + 24;
        }
        v340[0] = v6;
        *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
        v341 = v7;
        v29 = v335;
      }
      v342 = v29;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_47:
      v42 = a1[15];
      if (!v42 || (v43 = v42 + 144 * *(unsigned int *)(v8 + 64), *(_DWORD *)(v43 + 128)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)": prev = ", 9);
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)", but ", 6);
        v53 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v46 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v54 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v55 = v54 + 1;
          if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v55)
            v55 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v49 = 0xAAAAAAAAAAAAAAALL;
          else
            v49 = v55;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v49)
            v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v49);
          else
            v50 = 0;
          v56 = &v50[24 * v54];
          *((_QWORD *)v56 + 2) = v339;
          *(_OWORD *)v56 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v57 = v346.u64[1];
          v58 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
            goto LABEL_79;
          v59 = &v50[24 * v54];
          do
          {
            v60 = *(_OWORD *)(v57 - 24);
            *((_QWORD *)v59 - 1) = *(_QWORD *)(v57 - 8);
            *(_OWORD *)(v59 - 24) = v60;
            v59 -= 24;
            *(_QWORD *)(v57 - 16) = 0;
            *(_QWORD *)(v57 - 8) = 0;
            *(_QWORD *)(v57 - 24) = 0;
            v57 -= 24;
          }
          while (v57 != v58);
LABEL_78:
          v63 = v346;
LABEL_80:
          v64 = v56 + 24;
          v346.i64[0] = (uint64_t)v59;
          v346.i64[1] = (uint64_t)(v56 + 24);
          *(int64x2_t *)&v348.__begin_ = v63;
          v65 = v347;
          v347 = (std::string *)&v50[24 * v49];
          v348.__end_cap_.__value_ = v65;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v63.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v64;
          goto LABEL_81;
        }
      }
      else
      {
        if (*(_DWORD *)(v43 + 68) == v5)
          goto LABEL_84;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v44 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v44, (uint64_t)": prev and next pointers do not match.  prev = ", 47);
        v45 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)", and prev->next = ", 19);
        std::ostream::operator<<();
        std::stringbuf::str();
        v46 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v48)
            v48 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v49 = 0xAAAAAAAAAAAAAAALL;
          else
            v49 = v48;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v49)
            v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v49);
          else
            v50 = 0;
          v56 = &v50[24 * v47];
          *((_QWORD *)v56 + 2) = v339;
          *(_OWORD *)v56 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v57 = v346.u64[1];
          v61 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v59 = &v50[24 * v47];
            do
            {
              v62 = *(_OWORD *)(v57 - 24);
              *((_QWORD *)v59 - 1) = *(_QWORD *)(v57 - 8);
              *(_OWORD *)(v59 - 24) = v62;
              v59 -= 24;
              *(_QWORD *)(v57 - 16) = 0;
              *(_QWORD *)(v57 - 8) = 0;
              *(_QWORD *)(v57 - 24) = 0;
              v57 -= 24;
            }
            while (v57 != v61);
            goto LABEL_78;
          }
LABEL_79:
          v63 = vdupq_n_s64(v57);
          v59 = v56;
          goto LABEL_80;
        }
      }
      *(_QWORD *)(v46 + 16) = v339;
      *(_OWORD *)v46 = *(_OWORD *)__p;
      v346.i64[1] = v46 + 24;
LABEL_81:
      v340[0] = v6;
      *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
      v341 = v7;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_84:
      if (!*(_BYTE *)(v8 + 80))
        goto LABEL_128;
      v66 = a1[15];
      if (!v66 || (v67 = v66 + 144 * *(unsigned int *)(v8 + 76), *(_DWORD *)(v67 + 128)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v71 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)": next_in_face = ", 17);
        v72 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)", but ", 6);
        v73 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v74 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v75 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v76 = v75 + 1;
          if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v76)
            v76 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v77 = 0xAAAAAAAAAAAAAAALL;
          else
            v77 = v76;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v77)
            v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v77);
          else
            v78 = 0;
          v81 = &v78[24 * v75];
          *((_QWORD *)v81 + 2) = v339;
          *(_OWORD *)v81 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v82 = v346.u64[1];
          v83 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
            goto LABEL_123;
          v84 = &v78[24 * v75];
          do
          {
            v85 = *(_OWORD *)(v82 - 24);
            *((_QWORD *)v84 - 1) = *(_QWORD *)(v82 - 8);
            *(_OWORD *)(v84 - 24) = v85;
            v84 -= 24;
            *(_QWORD *)(v82 - 16) = 0;
            *(_QWORD *)(v82 - 8) = 0;
            *(_QWORD *)(v82 - 24) = 0;
            v82 -= 24;
          }
          while (v82 != v83);
LABEL_122:
          v88 = v346;
LABEL_124:
          v89 = v81 + 24;
          v346.i64[0] = (uint64_t)v84;
          v346.i64[1] = (uint64_t)(v81 + 24);
          *(int64x2_t *)&v348.__begin_ = v88;
          v90 = v347;
          v347 = (std::string *)&v78[24 * v77];
          v348.__end_cap_.__value_ = v90;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v88.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v89;
          goto LABEL_125;
        }
      }
      else
      {
        if (*(_BYTE *)(v67 + 88))
          v68 = *(_DWORD *)(v67 + 84) == v5;
        else
          v68 = 0;
        if (v68)
          goto LABEL_128;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v69 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)": prev_in_face and next_next_in_face pointers do not match.  next = ", 68);
        v70 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)", and next->prev = ", 19);
        if (*(_BYTE *)(v67 + 88))
          std::ostream::operator<<();
        else
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"nullopt", 7);
        std::stringbuf::str();
        v74 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v79 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v80)
            v80 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v77 = 0xAAAAAAAAAAAAAAALL;
          else
            v77 = v80;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v77)
            v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v77);
          else
            v78 = 0;
          v81 = &v78[24 * v79];
          *((_QWORD *)v81 + 2) = v339;
          *(_OWORD *)v81 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v82 = v346.u64[1];
          v86 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v84 = &v78[24 * v79];
            do
            {
              v87 = *(_OWORD *)(v82 - 24);
              *((_QWORD *)v84 - 1) = *(_QWORD *)(v82 - 8);
              *(_OWORD *)(v84 - 24) = v87;
              v84 -= 24;
              *(_QWORD *)(v82 - 16) = 0;
              *(_QWORD *)(v82 - 8) = 0;
              *(_QWORD *)(v82 - 24) = 0;
              v82 -= 24;
            }
            while (v82 != v86);
            goto LABEL_122;
          }
LABEL_123:
          v88 = vdupq_n_s64(v82);
          v84 = v81;
          goto LABEL_124;
        }
      }
      *(_QWORD *)(v74 + 16) = v339;
      *(_OWORD *)v74 = *(_OWORD *)__p;
      v346.i64[1] = v74 + 24;
LABEL_125:
      v340[0] = v6;
      *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
      v341 = v7;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_128:
      if (!*(_BYTE *)(v8 + 88))
        goto LABEL_172;
      v91 = a1[15];
      if (!v91 || (v92 = v91 + 144 * *(unsigned int *)(v8 + 84), *(_DWORD *)(v92 + 128)))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v96 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v96, (uint64_t)": prev_in_face = ", 17);
        v97 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)", but ", 6);
        v98 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)" is inactive", 12);
        std::stringbuf::str();
        v99 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v100 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v101 = v100 + 1;
          if (v100 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v101)
            v101 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v102 = 0xAAAAAAAAAAAAAAALL;
          else
            v102 = v101;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v102)
            v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v102);
          else
            v103 = 0;
          v106 = &v103[24 * v100];
          *((_QWORD *)v106 + 2) = v339;
          *(_OWORD *)v106 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v107 = v346.u64[1];
          v108 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
            goto LABEL_167;
          v109 = &v103[24 * v100];
          do
          {
            v110 = *(_OWORD *)(v107 - 24);
            *((_QWORD *)v109 - 1) = *(_QWORD *)(v107 - 8);
            *(_OWORD *)(v109 - 24) = v110;
            v109 -= 24;
            *(_QWORD *)(v107 - 16) = 0;
            *(_QWORD *)(v107 - 8) = 0;
            *(_QWORD *)(v107 - 24) = 0;
            v107 -= 24;
          }
          while (v107 != v108);
LABEL_166:
          v113 = v346;
LABEL_168:
          v114 = v106 + 24;
          v346.i64[0] = (uint64_t)v109;
          v346.i64[1] = (uint64_t)(v106 + 24);
          *(int64x2_t *)&v348.__begin_ = v113;
          v115 = v347;
          v347 = (std::string *)&v103[24 * v102];
          v348.__end_cap_.__value_ = v115;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v113.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v114;
          goto LABEL_169;
        }
      }
      else
      {
        if (*(_BYTE *)(v92 + 80))
          v93 = *(_DWORD *)(v92 + 76) == v5;
        else
          v93 = 0;
        if (v93)
          goto LABEL_172;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v94 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v94, (uint64_t)": prev_in_face and next_next_in_face pointers do not match.  prev = ", 68);
        v95 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v95, (uint64_t)", and prev->next = ", 19);
        if (*(_BYTE *)(v92 + 80))
          std::ostream::operator<<();
        else
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"nullopt", 7);
        std::stringbuf::str();
        v99 = v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v104 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v105 = v104 + 1;
          if (v104 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v105)
            v105 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v102 = 0xAAAAAAAAAAAAAAALL;
          else
            v102 = v105;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v102)
            v103 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v102);
          else
            v103 = 0;
          v106 = &v103[24 * v104];
          *((_QWORD *)v106 + 2) = v339;
          *(_OWORD *)v106 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v107 = v346.u64[1];
          v111 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v109 = &v103[24 * v104];
            do
            {
              v112 = *(_OWORD *)(v107 - 24);
              *((_QWORD *)v109 - 1) = *(_QWORD *)(v107 - 8);
              *(_OWORD *)(v109 - 24) = v112;
              v109 -= 24;
              *(_QWORD *)(v107 - 16) = 0;
              *(_QWORD *)(v107 - 8) = 0;
              *(_QWORD *)(v107 - 24) = 0;
              v107 -= 24;
            }
            while (v107 != v111);
            goto LABEL_166;
          }
LABEL_167:
          v113 = vdupq_n_s64(v107);
          v109 = v106;
          goto LABEL_168;
        }
      }
      *(_QWORD *)(v99 + 16) = v339;
      *(_OWORD *)v99 = *(_OWORD *)__p;
      v346.i64[1] = v99 + 24;
LABEL_169:
      v340[0] = v6;
      *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
      v341 = v7;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
LABEL_172:
      v116 = *(unsigned int *)(v8 + 72);
      if ((_DWORD)v116 != -1)
      {
        v117 = a1[18];
        if (v116 >= (a1[19] - v117) >> 3)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
          v127 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v127, (uint64_t)": face_for_next_edge = ", 23);
          v128 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v128, (uint64_t)" which is out of range", 22);
          std::stringbuf::str();
          v120 = v346.i64[1];
          if (v346.i64[1] < (unint64_t)v347)
            goto LABEL_222;
          v129 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v130 = v129 + 1;
          if (v129 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v130)
            v130 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v123 = 0xAAAAAAAAAAAAAAALL;
          else
            v123 = v130;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v123)
            v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v123);
          else
            v124 = 0;
          v135 = &v124[24 * v129];
          *((_QWORD *)v135 + 2) = v339;
          *(_OWORD *)v135 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v136 = v346.u64[1];
          v137 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v138 = &v124[24 * v129];
            do
            {
              v139 = *(_OWORD *)(v136 - 24);
              *((_QWORD *)v138 - 1) = *(_QWORD *)(v136 - 8);
              *(_OWORD *)(v138 - 24) = v139;
              v138 -= 24;
              *(_QWORD *)(v136 - 16) = 0;
              *(_QWORD *)(v136 - 8) = 0;
              *(_QWORD *)(v136 - 24) = 0;
              v136 -= 24;
            }
            while (v136 != v137);
            goto LABEL_240;
          }
        }
        else
        {
          if (*(_BYTE *)(v117 + 8 * v116 + 4))
            goto LABEL_246;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
          v118 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)": face_for_next_edge = ", 23);
          v119 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v119, (uint64_t)" but m_face_to_first_vertex_map has stored this face as empty", 61);
          std::stringbuf::str();
          v120 = v346.i64[1];
          if (v346.i64[1] < (unint64_t)v347)
          {
LABEL_222:
            *(_QWORD *)(v120 + 16) = v339;
            *(_OWORD *)v120 = *(_OWORD *)__p;
            v346.i64[1] = v120 + 24;
            goto LABEL_243;
          }
          v121 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v122 = v121 + 1;
          if (v121 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v122)
            v122 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v123 = 0xAAAAAAAAAAAAAAALL;
          else
            v123 = v122;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v123)
            v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v123);
          else
            v124 = 0;
          v135 = &v124[24 * v121];
          *((_QWORD *)v135 + 2) = v339;
          *(_OWORD *)v135 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v136 = v346.u64[1];
          v153 = v346.i64[0];
          if (v346.i64[1] != v346.i64[0])
          {
            v138 = &v124[24 * v121];
            do
            {
              v154 = *(_OWORD *)(v136 - 24);
              *((_QWORD *)v138 - 1) = *(_QWORD *)(v136 - 8);
              *(_OWORD *)(v138 - 24) = v154;
              v138 -= 24;
              *(_QWORD *)(v136 - 16) = 0;
              *(_QWORD *)(v136 - 8) = 0;
              *(_QWORD *)(v136 - 24) = 0;
              v136 -= 24;
            }
            while (v136 != v153);
            goto LABEL_240;
          }
        }
        goto LABEL_241;
      }
      if (v5 != *(_DWORD *)(v8 + 68))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v125 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v125, (uint64_t)": is not a self loop but points to the null face in face_for_next_edge", 70);
        std::stringbuf::str();
        v126 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v131 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v132 = v131 + 1;
          if (v131 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v132)
            v132 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v133 = 0xAAAAAAAAAAAAAAALL;
          else
            v133 = v132;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v133)
            v134 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v133);
          else
            v134 = 0;
          v140 = &v134[24 * v131];
          *((_QWORD *)v140 + 2) = v339;
          *(_OWORD *)v140 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v141 = v346.i64[1];
          v142 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v145 = vdupq_n_s64(v346.u64[1]);
            v143 = &v134[24 * v131];
          }
          else
          {
            v143 = &v134[24 * v131];
            do
            {
              v144 = *(_OWORD *)(v141 - 24);
              *((_QWORD *)v143 - 1) = *(_QWORD *)(v141 - 8);
              *(_OWORD *)(v143 - 24) = v144;
              v143 -= 24;
              *(_QWORD *)(v141 - 16) = 0;
              *(_QWORD *)(v141 - 8) = 0;
              *(_QWORD *)(v141 - 24) = 0;
              v141 -= 24;
            }
            while (v141 != v142);
            v145 = v346;
          }
          v146 = v140 + 24;
          v346.i64[0] = (uint64_t)v143;
          v346.i64[1] = (uint64_t)(v140 + 24);
          *(int64x2_t *)&v348.__begin_ = v145;
          v147 = v347;
          v347 = (std::string *)&v134[24 * v133];
          v348.__end_cap_.__value_ = v147;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v145.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v146;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v126 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v126 + 24;
        }
        v340[0] = v6;
        *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
        v341 = v7;
        v342 = MEMORY[0x24BEDB848] + 16;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
      }
      if (*(_BYTE *)(v8 + 88) || *(_BYTE *)(v8 + 80))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
        v148 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v148, (uint64_t)": face_for_next_edge == null but {prev,next}_in_face != null", 60);
        std::stringbuf::str();
        v120 = v346.i64[1];
        if (v346.i64[1] < (unint64_t)v347)
          goto LABEL_222;
        v149 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
        v150 = v149 + 1;
        if (v149 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_462;
        if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v150)
          v150 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
          v123 = 0xAAAAAAAAAAAAAAALL;
        else
          v123 = v150;
        v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
        if (v123)
          v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v123);
        else
          v124 = 0;
        v135 = &v124[24 * v149];
        *((_QWORD *)v135 + 2) = v339;
        *(_OWORD *)v135 = *(_OWORD *)__p;
        v339 = 0;
        *(_OWORD *)__p = 0uLL;
        v136 = v346.u64[1];
        v151 = v346.i64[0];
        if (v346.i64[1] != v346.i64[0])
        {
          v138 = &v124[24 * v149];
          do
          {
            v152 = *(_OWORD *)(v136 - 24);
            *((_QWORD *)v138 - 1) = *(_QWORD *)(v136 - 8);
            *(_OWORD *)(v138 - 24) = v152;
            v138 -= 24;
            *(_QWORD *)(v136 - 16) = 0;
            *(_QWORD *)(v136 - 8) = 0;
            *(_QWORD *)(v136 - 24) = 0;
            v136 -= 24;
          }
          while (v136 != v151);
LABEL_240:
          v155 = v346;
LABEL_242:
          v156 = v135 + 24;
          v346.i64[0] = (uint64_t)v138;
          v346.i64[1] = (uint64_t)(v135 + 24);
          *(int64x2_t *)&v348.__begin_ = v155;
          v157 = v347;
          v347 = (std::string *)&v124[24 * v123];
          v348.__end_cap_.__value_ = v157;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v155.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v156;
LABEL_243:
          v340[0] = v6;
          *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
          v341 = v7;
          v342 = MEMORY[0x24BEDB848] + 16;
          if (v344 < 0)
            operator delete(v343);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22E2B7668](v345);
          goto LABEL_246;
        }
LABEL_241:
        v155 = vdupq_n_s64(v136);
        v138 = v135;
        goto LABEL_242;
      }
LABEL_246:
      if ((_DWORD)v116 != -1 && !*(_BYTE *)(v8 + 88))
      {
        v158 = a1[18] + 8 * *(unsigned int *)(v8 + 72);
        if (!*(_BYTE *)(v158 + 4) || *(_DWORD *)v158 != v5)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"vertex ", 7);
          v159 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v159, (uint64_t)": face_for_next_edge = ", 23);
          v160 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)" and prev_in_face == null, but m_face_to_first_vertex_map does not point to this vertex", 87);
          std::stringbuf::str();
          v161 = (_OWORD *)v346.i64[1];
          if (v346.i64[1] >= (unint64_t)v347)
          {
            v162 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
            v163 = v162 + 1;
            if (v162 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_462;
            if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v163)
              v163 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
              v164 = 0xAAAAAAAAAAAAAAALL;
            else
              v164 = v163;
            v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
            if (v164)
              v165 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v164);
            else
              v165 = 0;
            v166 = &v165[24 * v162];
            *((_QWORD *)v166 + 2) = v339;
            *(_OWORD *)v166 = *(_OWORD *)__p;
            v339 = 0;
            *(_OWORD *)__p = 0uLL;
            v167 = v346.i64[1];
            v168 = v346.i64[0];
            if (v346.i64[1] == v346.i64[0])
            {
              v171 = vdupq_n_s64(v346.u64[1]);
              v169 = &v165[24 * v162];
            }
            else
            {
              v169 = &v165[24 * v162];
              do
              {
                v170 = *(_OWORD *)(v167 - 24);
                *((_QWORD *)v169 - 1) = *(_QWORD *)(v167 - 8);
                *(_OWORD *)(v169 - 24) = v170;
                v169 -= 24;
                *(_QWORD *)(v167 - 16) = 0;
                *(_QWORD *)(v167 - 8) = 0;
                *(_QWORD *)(v167 - 24) = 0;
                v167 -= 24;
              }
              while (v167 != v168);
              v171 = v346;
            }
            v172 = v166 + 24;
            v346.i64[0] = (uint64_t)v169;
            v346.i64[1] = (uint64_t)(v166 + 24);
            *(int64x2_t *)&v348.__begin_ = v171;
            v173 = v347;
            v347 = (std::string *)&v165[24 * v164];
            v348.__end_cap_.__value_ = v173;
            v348.__first_ = (std::__split_buffer<std::string>::pointer)v171.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v348);
            v346.i64[1] = (uint64_t)v172;
          }
          else
          {
            *(_QWORD *)(v346.i64[1] + 16) = v339;
            *v161 = *(_OWORD *)__p;
            v346.i64[1] = (uint64_t)v161 + 24;
          }
          v340[0] = v6;
          *(void ***)((char *)v340 + (_QWORD)*(v6 - 3)) = v337;
          v341 = v7;
          v342 = MEMORY[0x24BEDB848] + 16;
          if (v344 < 0)
            operator delete(v343);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22E2B7668](v345);
        }
      }
LABEL_4:
      v3 = a1[15];
      v4 = ++v5;
    }
    while (0x8E38E38E38E38E39 * ((a1[16] - v3) >> 4) > v5);
  }
  v175 = a1[18];
  v174 = a1[19];
  if (v174 != v175)
  {
    v176 = 0;
    v177 = 0;
    v178 = (void **)*MEMORY[0x24BEDB7F0];
    v179 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v336 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v180 = MEMORY[0x24BEDB848] + 16;
    do
    {
      v181 = *(_QWORD *)(v175 + 8 * v176);
      if ((v181 & 0xFF00000000) != 0)
      {
        v182 = a1[15];
        v183 = v182 + 144 * v181;
        v184 = v182 && *(_DWORD *)(v183 + 128) == 0;
        if (v184 && *(_DWORD *)(v183 + 72) != v177)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"face ", 5);
          v185 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v185, (uint64_t)": vertex ", 9);
          v186 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v186, (uint64_t)" is referenced in m_face_to_first_vertex_map, but edge->face map refers to face ", 80);
          std::ostream::operator<<();
          std::stringbuf::str();
          v187 = (_OWORD *)v346.i64[1];
          if (v346.i64[1] >= (unint64_t)v347)
          {
            v188 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
            v189 = v188 + 1;
            if (v188 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_462;
            if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v189)
              v189 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
              v190 = 0xAAAAAAAAAAAAAAALL;
            else
              v190 = v189;
            v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
            if (v190)
              v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v190);
            else
              v191 = 0;
            v192 = &v191[24 * v188];
            *((_QWORD *)v192 + 2) = v339;
            *(_OWORD *)v192 = *(_OWORD *)__p;
            v339 = 0;
            *(_OWORD *)__p = 0uLL;
            v193 = v346.i64[1];
            v194 = v346.i64[0];
            if (v346.i64[1] == v346.i64[0])
            {
              v197 = vdupq_n_s64(v346.u64[1]);
              v195 = &v191[24 * v188];
            }
            else
            {
              v195 = &v191[24 * v188];
              do
              {
                v196 = *(_OWORD *)(v193 - 24);
                *((_QWORD *)v195 - 1) = *(_QWORD *)(v193 - 8);
                *(_OWORD *)(v195 - 24) = v196;
                v195 -= 24;
                *(_QWORD *)(v193 - 16) = 0;
                *(_QWORD *)(v193 - 8) = 0;
                *(_QWORD *)(v193 - 24) = 0;
                v193 -= 24;
              }
              while (v193 != v194);
              v197 = v346;
            }
            v198 = v192 + 24;
            v346.i64[0] = (uint64_t)v195;
            v346.i64[1] = (uint64_t)(v192 + 24);
            *(int64x2_t *)&v348.__begin_ = v197;
            v199 = v347;
            v347 = (std::string *)&v191[24 * v190];
            v348.__end_cap_.__value_ = v199;
            v348.__first_ = (std::__split_buffer<std::string>::pointer)v197.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v348);
            v346.i64[1] = (uint64_t)v198;
          }
          else
          {
            *(_QWORD *)(v346.i64[1] + 16) = v339;
            *v187 = *(_OWORD *)__p;
            v346.i64[1] = (uint64_t)v187 + 24;
          }
          v340[0] = v178;
          *(void ***)((char *)v340 + (_QWORD)*(v178 - 3)) = v336;
          v341 = v179;
          v342 = v180;
          if (v344 < 0)
            operator delete(v343);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22E2B7668](v345);
          v175 = a1[18];
          v174 = a1[19];
        }
      }
      v176 = ++v177;
    }
    while (v177 < (unint64_t)((v174 - v175) >> 3));
  }
  if ((uint64_t)(a1[10] - a1[9]) >> 2 != (uint64_t)(a1[13] - a1[12]) >> 3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"size of m_joiner_accumulated_boundary_size (", 44);
    v200 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)") does not match size of m_joiner_parameter_for_boundary (", 58);
    v201 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)")", 1);
    std::stringbuf::str();
    v202 = (_OWORD *)v346.i64[1];
    if (v346.i64[1] >= (unint64_t)v347)
    {
      v203 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
      v204 = v203 + 1;
      if (v203 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_462;
      if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v204)
        v204 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
        v205 = 0xAAAAAAAAAAAAAAALL;
      else
        v205 = v204;
      v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
      if (v205)
        v206 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v205);
      else
        v206 = 0;
      v207 = &v206[24 * v203];
      *((_QWORD *)v207 + 2) = v339;
      *(_OWORD *)v207 = *(_OWORD *)__p;
      v339 = 0;
      *(_OWORD *)__p = 0uLL;
      v208 = v346.i64[1];
      v209 = v346.i64[0];
      if (v346.i64[1] == v346.i64[0])
      {
        v212 = vdupq_n_s64(v346.u64[1]);
        v210 = &v206[24 * v203];
      }
      else
      {
        v210 = &v206[24 * v203];
        do
        {
          v211 = *(_OWORD *)(v208 - 24);
          *((_QWORD *)v210 - 1) = *(_QWORD *)(v208 - 8);
          *(_OWORD *)(v210 - 24) = v211;
          v210 -= 24;
          *(_QWORD *)(v208 - 16) = 0;
          *(_QWORD *)(v208 - 8) = 0;
          *(_QWORD *)(v208 - 24) = 0;
          v208 -= 24;
        }
        while (v208 != v209);
        v212 = v346;
      }
      v213 = v207 + 24;
      v346.i64[0] = (uint64_t)v210;
      v346.i64[1] = (uint64_t)(v207 + 24);
      *(int64x2_t *)&v348.__begin_ = v212;
      v214 = v347;
      v347 = (std::string *)&v206[24 * v205];
      v348.__end_cap_.__value_ = v214;
      v348.__first_ = (std::__split_buffer<std::string>::pointer)v212.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v348);
      v346.i64[1] = (uint64_t)v213;
    }
    else
    {
      *(_QWORD *)(v346.i64[1] + 16) = v339;
      *v202 = *(_OWORD *)__p;
      v346.i64[1] = (uint64_t)v202 + 24;
    }
    v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v215 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v341 = v215;
    v342 = MEMORY[0x24BEDB848] + 16;
    if (v344 < 0)
      operator delete(v343);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v345);
  }
  v216 = a1[7];
  if (a1[6] == v216)
    v217 = 0;
  else
    v217 = *(_DWORD *)(v216 - 4);
  v219 = a1[3];
  v218 = a1[4];
  if (v217 != (v218 - v219) >> 2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"the last entry of m_joiner_accumulated_face_valence is ", 55);
    v220 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v220, (uint64_t)" but the m_joiner_face_indices.size() is ", 41);
    std::ostream::operator<<();
    std::stringbuf::str();
    v221 = (_OWORD *)v346.i64[1];
    if (v346.i64[1] >= (unint64_t)v347)
    {
      v222 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
      v223 = v222 + 1;
      if (v222 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_462;
      if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v223)
        v223 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
        v224 = 0xAAAAAAAAAAAAAAALL;
      else
        v224 = v223;
      v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
      if (v224)
        v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v224);
      else
        v225 = 0;
      v226 = &v225[24 * v222];
      *((_QWORD *)v226 + 2) = v339;
      *(_OWORD *)v226 = *(_OWORD *)__p;
      v339 = 0;
      *(_OWORD *)__p = 0uLL;
      v227 = v346.i64[1];
      v228 = v346.i64[0];
      if (v346.i64[1] == v346.i64[0])
      {
        v231 = vdupq_n_s64(v346.u64[1]);
        v229 = &v225[24 * v222];
      }
      else
      {
        v229 = &v225[24 * v222];
        do
        {
          v230 = *(_OWORD *)(v227 - 24);
          *((_QWORD *)v229 - 1) = *(_QWORD *)(v227 - 8);
          *(_OWORD *)(v229 - 24) = v230;
          v229 -= 24;
          *(_QWORD *)(v227 - 16) = 0;
          *(_QWORD *)(v227 - 8) = 0;
          *(_QWORD *)(v227 - 24) = 0;
          v227 -= 24;
        }
        while (v227 != v228);
        v231 = v346;
      }
      v232 = v226 + 24;
      v346.i64[0] = (uint64_t)v229;
      v346.i64[1] = (uint64_t)(v226 + 24);
      *(int64x2_t *)&v348.__begin_ = v231;
      v233 = v347;
      v347 = (std::string *)&v225[24 * v224];
      v348.__end_cap_.__value_ = v233;
      v348.__first_ = (std::__split_buffer<std::string>::pointer)v231.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v348);
      v346.i64[1] = (uint64_t)v232;
    }
    else
    {
      *(_QWORD *)(v346.i64[1] + 16) = v339;
      *v221 = *(_OWORD *)__p;
      v346.i64[1] = (uint64_t)v221 + 24;
    }
    v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v234 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v341 = v234;
    v342 = MEMORY[0x24BEDB848] + 16;
    if (v344 < 0)
      operator delete(v343);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v345);
    v219 = a1[3];
    v218 = a1[4];
  }
  if (v218 != v219)
  {
    v235 = 0;
    v236 = 0;
    v237 = (void **)*MEMORY[0x24BEDB7F0];
    v238 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v239 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v240 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (*(unsigned int *)(v219 + 4 * v235) >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 4))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"m_joiner_face_indices[", 22);
        v241 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"]: Index out of range (m_joiner_positions.size() = ", 51);
        v242 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)")", 1);
        std::stringbuf::str();
        v243 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v244 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v245 = v244 + 1;
          if (v244 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v245)
            v245 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v246 = 0xAAAAAAAAAAAAAAALL;
          else
            v246 = v245;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v246)
            v247 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v246);
          else
            v247 = 0;
          v248 = &v247[24 * v244];
          *((_QWORD *)v248 + 2) = v339;
          *(_OWORD *)v248 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v249 = v346.i64[1];
          v250 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v253 = vdupq_n_s64(v346.u64[1]);
            v251 = &v247[24 * v244];
          }
          else
          {
            v251 = &v247[24 * v244];
            do
            {
              v252 = *(_OWORD *)(v249 - 24);
              *((_QWORD *)v251 - 1) = *(_QWORD *)(v249 - 8);
              *(_OWORD *)(v251 - 24) = v252;
              v251 -= 24;
              *(_QWORD *)(v249 - 16) = 0;
              *(_QWORD *)(v249 - 8) = 0;
              *(_QWORD *)(v249 - 24) = 0;
              v249 -= 24;
            }
            while (v249 != v250);
            v253 = v346;
          }
          v254 = v248 + 24;
          v346.i64[0] = (uint64_t)v251;
          v346.i64[1] = (uint64_t)(v248 + 24);
          *(int64x2_t *)&v348.__begin_ = v253;
          v255 = v347;
          v347 = (std::string *)&v247[24 * v246];
          v348.__end_cap_.__value_ = v255;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v253.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v254;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v243 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v243 + 24;
        }
        v340[0] = v237;
        *(void ***)((char *)v340 + (_QWORD)*(v237 - 3)) = v238;
        v341 = v239;
        v342 = v240;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
        v219 = a1[3];
        v218 = a1[4];
      }
      v235 = ++v236;
    }
    while (v236 < (unint64_t)((v218 - v219) >> 2));
  }
  v257 = a1[6];
  v256 = a1[7];
  if (v256 != v257)
  {
    v258 = 0;
    v259 = 0;
    v260 = (void **)*MEMORY[0x24BEDB7F0];
    v262 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v261 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v263 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (v259)
        v264 = *(_DWORD *)(v257 + 4 * (v259 - 1));
      else
        v264 = 0;
      if (*(_DWORD *)(v257 + 4 * v258) <= v264)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"m_joiner_accumulated_face_valence has value ", 44);
        v265 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)" at index ", 10);
        v266 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v266, (uint64_t)" and the previous value is ", 27);
        v267 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)".  this is not strictly increasing.", 35);
        std::stringbuf::str();
        v268 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v269 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v270 = v269 + 1;
          if (v269 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v270)
            v270 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v271 = 0xAAAAAAAAAAAAAAALL;
          else
            v271 = v270;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v271)
            v272 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v271);
          else
            v272 = 0;
          v273 = &v272[24 * v269];
          *((_QWORD *)v273 + 2) = v339;
          *(_OWORD *)v273 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v274 = v346.i64[1];
          v275 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v278 = vdupq_n_s64(v346.u64[1]);
            v276 = &v272[24 * v269];
          }
          else
          {
            v276 = &v272[24 * v269];
            do
            {
              v277 = *(_OWORD *)(v274 - 24);
              *((_QWORD *)v276 - 1) = *(_QWORD *)(v274 - 8);
              *(_OWORD *)(v276 - 24) = v277;
              v276 -= 24;
              *(_QWORD *)(v274 - 16) = 0;
              *(_QWORD *)(v274 - 8) = 0;
              *(_QWORD *)(v274 - 24) = 0;
              v274 -= 24;
            }
            while (v274 != v275);
            v278 = v346;
          }
          v279 = v273 + 24;
          v346.i64[0] = (uint64_t)v276;
          v346.i64[1] = (uint64_t)(v273 + 24);
          *(int64x2_t *)&v348.__begin_ = v278;
          v280 = v347;
          v347 = (std::string *)&v272[24 * v271];
          v348.__end_cap_.__value_ = v280;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v278.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v279;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v268 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v268 + 24;
        }
        v340[0] = v260;
        *(void ***)((char *)v340 + (_QWORD)*(v260 - 3)) = v262;
        v341 = v261;
        v342 = v263;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
        v257 = a1[6];
        v256 = a1[7];
      }
      v258 = ++v259;
    }
    while (v259 < (unint64_t)((v256 - v257) >> 2));
  }
  v282 = a1[9];
  v281 = a1[10];
  if (v282 == v281)
    v283 = 0;
  else
    v283 = *(_DWORD *)(v281 - 4);
  if (v283 != (uint64_t)(a1[1] - *a1) >> 4)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"the last entry of m_joiner_accumulated_boundary_size is ", 56);
    v284 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v284, (uint64_t)" but the m_joiner_positions.size() is ", 38);
    std::ostream::operator<<();
    std::stringbuf::str();
    v285 = (_OWORD *)v346.i64[1];
    if (v346.i64[1] < (unint64_t)v347)
    {
      *(_QWORD *)(v346.i64[1] + 16) = v339;
      *v285 = *(_OWORD *)__p;
      v346.i64[1] = (uint64_t)v285 + 24;
LABEL_417:
      v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
      v298 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
      v341 = v298;
      v342 = MEMORY[0x24BEDB848] + 16;
      if (v344 < 0)
        operator delete(v343);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22E2B7668](v345);
      v282 = a1[9];
      v281 = a1[10];
      goto LABEL_420;
    }
    v286 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
    v287 = v286 + 1;
    if (v286 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v287)
        v287 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
        v288 = 0xAAAAAAAAAAAAAAALL;
      else
        v288 = v287;
      v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
      if (v288)
        v289 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v288);
      else
        v289 = 0;
      v290 = &v289[24 * v286];
      *((_QWORD *)v290 + 2) = v339;
      *(_OWORD *)v290 = *(_OWORD *)__p;
      v339 = 0;
      *(_OWORD *)__p = 0uLL;
      v291 = v346.i64[1];
      v292 = v346.i64[0];
      if (v346.i64[1] == v346.i64[0])
      {
        v295 = vdupq_n_s64(v346.u64[1]);
        v293 = &v289[24 * v286];
      }
      else
      {
        v293 = &v289[24 * v286];
        do
        {
          v294 = *(_OWORD *)(v291 - 24);
          *((_QWORD *)v293 - 1) = *(_QWORD *)(v291 - 8);
          *(_OWORD *)(v293 - 24) = v294;
          v293 -= 24;
          *(_QWORD *)(v291 - 16) = 0;
          *(_QWORD *)(v291 - 8) = 0;
          *(_QWORD *)(v291 - 24) = 0;
          v291 -= 24;
        }
        while (v291 != v292);
        v295 = v346;
      }
      v296 = v290 + 24;
      v346.i64[0] = (uint64_t)v293;
      v346.i64[1] = (uint64_t)(v290 + 24);
      *(int64x2_t *)&v348.__begin_ = v295;
      v297 = v347;
      v347 = (std::string *)&v289[24 * v288];
      v348.__end_cap_.__value_ = v297;
      v348.__first_ = (std::__split_buffer<std::string>::pointer)v295.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v348);
      v346.i64[1] = (uint64_t)v296;
      goto LABEL_417;
    }
LABEL_462:
    abort();
  }
LABEL_420:
  if (v281 != v282)
  {
    v299 = 0;
    v300 = 0;
    v301 = (void **)*MEMORY[0x24BEDB7F0];
    v303 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v302 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v304 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (v300)
        v305 = *(_DWORD *)(v282 + 4 * (v300 - 1));
      else
        v305 = 0;
      if (*(_DWORD *)(v282 + 4 * v299) <= v305)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v341, (uint64_t)"m_joiner_accumulated_boundary_size has value ", 45);
        v306 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v306, (uint64_t)" at index ", 10);
        v307 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v307, (uint64_t)" and the previous value is ", 27);
        v308 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v308, (uint64_t)".  this is not strictly increasing.", 35);
        std::stringbuf::str();
        v309 = (_OWORD *)v346.i64[1];
        if (v346.i64[1] >= (unint64_t)v347)
        {
          v310 = 0xAAAAAAAAAAAAAAABLL * ((v346.i64[1] - v346.i64[0]) >> 3);
          v311 = v310 + 1;
          if (v310 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_462;
          if (0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3) > v311)
            v311 = 0x5555555555555556 * (((uint64_t)v347 - v346.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v347 - v346.i64[0]) >> 3) >= 0x555555555555555)
            v312 = 0xAAAAAAAAAAAAAAALL;
          else
            v312 = v311;
          v348.__end_cap_.__value_ = (std::allocator<std::string> *)&v347;
          if (v312)
            v313 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v347, v312);
          else
            v313 = 0;
          v314 = &v313[24 * v310];
          *((_QWORD *)v314 + 2) = v339;
          *(_OWORD *)v314 = *(_OWORD *)__p;
          v339 = 0;
          *(_OWORD *)__p = 0uLL;
          v315 = v346.i64[1];
          v316 = v346.i64[0];
          if (v346.i64[1] == v346.i64[0])
          {
            v319 = vdupq_n_s64(v346.u64[1]);
            v317 = &v313[24 * v310];
          }
          else
          {
            v317 = &v313[24 * v310];
            do
            {
              v318 = *(_OWORD *)(v315 - 24);
              *((_QWORD *)v317 - 1) = *(_QWORD *)(v315 - 8);
              *(_OWORD *)(v317 - 24) = v318;
              v317 -= 24;
              *(_QWORD *)(v315 - 16) = 0;
              *(_QWORD *)(v315 - 8) = 0;
              *(_QWORD *)(v315 - 24) = 0;
              v315 -= 24;
            }
            while (v315 != v316);
            v319 = v346;
          }
          v320 = v314 + 24;
          v346.i64[0] = (uint64_t)v317;
          v346.i64[1] = (uint64_t)(v314 + 24);
          *(int64x2_t *)&v348.__begin_ = v319;
          v321 = v347;
          v347 = (std::string *)&v313[24 * v312];
          v348.__end_cap_.__value_ = v321;
          v348.__first_ = (std::__split_buffer<std::string>::pointer)v319.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v348);
          v346.i64[1] = (uint64_t)v320;
        }
        else
        {
          *(_QWORD *)(v346.i64[1] + 16) = v339;
          *v309 = *(_OWORD *)__p;
          v346.i64[1] = (uint64_t)v309 + 24;
        }
        v340[0] = v301;
        *(void ***)((char *)v340 + (_QWORD)*(v301 - 3)) = v303;
        v341 = v302;
        v342 = v304;
        if (v344 < 0)
          operator delete(v343);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22E2B7668](v345);
        v282 = a1[9];
        v281 = a1[10];
      }
      v299 = ++v300;
    }
    while (v300 < (unint64_t)((v281 - v282) >> 2));
  }
  if (v346.i64[0] == v346.i64[1])
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v340);
    v323 = v346.i64[1];
    v322 = v346.i64[0];
    if (v346.i64[0] != v346.i64[1])
    {
      v324 = 1;
      v325 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v326 = (_QWORD *)std::ostream::operator<<();
        v327 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v326, (uint64_t)". ", 2);
        v328 = *(char *)(v322 + 23);
        if (v328 >= 0)
          v329 = v322;
        else
          v329 = *(_QWORD *)v322;
        if (v328 >= 0)
          v330 = *(unsigned __int8 *)(v322 + 23);
        else
          v330 = *(_QWORD *)(v322 + 8);
        v331 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v327, v329, v330);
        std::ios_base::getloc((const std::ios_base *)((char *)v331 + *(_QWORD *)(*v331 - 24)));
        v332 = std::locale::use_facet((const std::locale *)&v348, v325);
        ((void (*)(const std::locale::facet *, uint64_t))v332->__vftable[2].~facet_0)(v332, 10);
        std::locale::~locale((std::locale *)&v348);
        std::ostream::put();
        std::ostream::flush();
        ++v324;
        v322 += 24;
      }
      while (v322 != v323);
    }
    std::stringbuf::str();
    v340[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v333 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v340 + (unint64_t)*(v340[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    *(_OWORD *)a2 = *(_OWORD *)&v348.__first_;
    *(_QWORD *)(a2 + 16) = v348.__end_;
    *(_BYTE *)(a2 + 24) = 1;
    v341 = v333;
    v342 = MEMORY[0x24BEDB848] + 16;
    if (v344 < 0)
      operator delete(v343);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v345);
  }
  v340[0] = (void **)&v346;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v340);
}

void geom::straight_skeleton_evaluator<double>::check_geometric_invariants(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  char *v28;
  std::string *v29;
  double v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _OWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  char *v46;
  std::string *v47;
  _QWORD *v48;
  _OWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  int64x2_t v59;
  char *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  std::locale::id *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  const std::locale::facet *v72;
  uint64_t v73;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  void **v78;
  void *__p[2];
  uint64_t v80;
  void **v81[2];
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char v85;
  _BYTE v86[152];
  int64x2_t v87;
  std::string *v88;
  std::__split_buffer<std::string> v89;

  v87 = 0uLL;
  v88 = 0;
  v81[0] = (void **)a1;
  v81[1] = (void **)&v87;
  geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<double>::check_geometric_invariants(void)::{lambda(unsigned int,unsigned int)#1}>(a1, (uint64_t)v81);
  v3 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) != v3)
  {
    v4 = 0;
    v5 = 0;
    v76 = (void **)*MEMORY[0x24BEDB7F0];
    v78 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    v77 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v75 = MEMORY[0x24BEDB848] + 16;
    do
    {
      if (v3)
      {
        v6 = v3 + 144 * v4;
        if (!*(_DWORD *)(v6 + 128))
        {
          v7 = *(_DWORD *)(v6 + 68);
          v8 = fabs(*(double *)(v6 + 32));
          if ((v7 == v5) != v8 <= 1.0e-10)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v82, (uint64_t)"vertex ", 7);
            v9 = (_QWORD *)std::ostream::operator<<();
            v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)": is self loop = ", 17);
            if (v7 == v5)
              v11 = "YES";
            else
              v11 = "NO";
            if (v7 == v5)
              v12 = 3;
            else
              v12 = 2;
            v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
            v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)"; but is zero speed = ",
                    22);
            if (v8 > 1.0e-10)
              v15 = "NO";
            else
              v15 = "YES";
            if (v8 > 1.0e-10)
              v16 = 2;
            else
              v16 = 3;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
            std::stringbuf::str();
            v17 = (_OWORD *)v87.i64[1];
            if (v87.i64[1] >= (unint64_t)v88)
            {
              v18 = 0xAAAAAAAAAAAAAAABLL * ((v87.i64[1] - v87.i64[0]) >> 3);
              v19 = v18 + 1;
              if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_99;
              if (0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3) > v19)
                v19 = 0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v88 - v87.i64[0]) >> 3) >= 0x555555555555555)
                v20 = 0xAAAAAAAAAAAAAAALL;
              else
                v20 = v19;
              v89.__end_cap_.__value_ = (std::allocator<std::string> *)&v88;
              if (v20)
                v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v88, v20);
              else
                v21 = 0;
              v22 = &v21[24 * v18];
              *((_QWORD *)v22 + 2) = v80;
              *(_OWORD *)v22 = *(_OWORD *)__p;
              v80 = 0;
              *(_OWORD *)__p = 0uLL;
              v23 = v87.i64[1];
              v24 = v87.i64[0];
              if (v87.i64[1] == v87.i64[0])
              {
                v27 = vdupq_n_s64(v87.u64[1]);
                v25 = &v21[24 * v18];
              }
              else
              {
                v25 = &v21[24 * v18];
                do
                {
                  v26 = *(_OWORD *)(v23 - 24);
                  *((_QWORD *)v25 - 1) = *(_QWORD *)(v23 - 8);
                  *(_OWORD *)(v25 - 24) = v26;
                  v25 -= 24;
                  *(_QWORD *)(v23 - 16) = 0;
                  *(_QWORD *)(v23 - 8) = 0;
                  *(_QWORD *)(v23 - 24) = 0;
                  v23 -= 24;
                }
                while (v23 != v24);
                v27 = v87;
              }
              v28 = v22 + 24;
              v87.i64[0] = (uint64_t)v25;
              v87.i64[1] = (uint64_t)(v22 + 24);
              *(int64x2_t *)&v89.__begin_ = v27;
              v29 = v88;
              v88 = (std::string *)&v21[24 * v20];
              v89.__end_cap_.__value_ = v29;
              v89.__first_ = (std::__split_buffer<std::string>::pointer)v27.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v89);
              v87.i64[1] = (uint64_t)v28;
            }
            else
            {
              *(_QWORD *)(v87.i64[1] + 16) = v80;
              *v17 = *(_OWORD *)__p;
              v87.i64[1] = (uint64_t)v17 + 24;
            }
            v81[0] = v76;
            *(void ***)((char *)v81 + (_QWORD)*(v76 - 3)) = v78;
            v82 = v77;
            v83 = v75;
            if (v85 < 0)
              operator delete(v84);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x22E2B7668](v86);
          }
          if (v8 > 1.0e-10)
          {
            v30 = sqrt(vaddvq_f64(vmulq_f64(*(float64x2_t *)(v6 + 16), *(float64x2_t *)(v6 + 16))));
            if (v30 != 1.0 && fabs(v30 + -1.0) > 1.0e-10)
            {
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v82, (uint64_t)"vertex ", 7);
              v31 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)": has non-zero speed but direction is non-unit  ([", 50);
              v32 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
              v33 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)"] has length ", 13);
              v34 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)")", 1);
              std::stringbuf::str();
              v35 = (_OWORD *)v87.i64[1];
              if (v87.i64[1] >= (unint64_t)v88)
              {
                v36 = 0xAAAAAAAAAAAAAAABLL * ((v87.i64[1] - v87.i64[0]) >> 3);
                v37 = v36 + 1;
                if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_99;
                if (0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3) > v37)
                  v37 = 0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v88 - v87.i64[0]) >> 3) >= 0x555555555555555)
                  v38 = 0xAAAAAAAAAAAAAAALL;
                else
                  v38 = v37;
                v89.__end_cap_.__value_ = (std::allocator<std::string> *)&v88;
                if (v38)
                  v39 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v88, v38);
                else
                  v39 = 0;
                v40 = &v39[24 * v36];
                *((_QWORD *)v40 + 2) = v80;
                *(_OWORD *)v40 = *(_OWORD *)__p;
                v80 = 0;
                *(_OWORD *)__p = 0uLL;
                v41 = v87.i64[1];
                v42 = v87.i64[0];
                if (v87.i64[1] == v87.i64[0])
                {
                  v45 = vdupq_n_s64(v87.u64[1]);
                  v43 = &v39[24 * v36];
                }
                else
                {
                  v43 = &v39[24 * v36];
                  do
                  {
                    v44 = *(_OWORD *)(v41 - 24);
                    *((_QWORD *)v43 - 1) = *(_QWORD *)(v41 - 8);
                    *(_OWORD *)(v43 - 24) = v44;
                    v43 -= 24;
                    *(_QWORD *)(v41 - 16) = 0;
                    *(_QWORD *)(v41 - 8) = 0;
                    *(_QWORD *)(v41 - 24) = 0;
                    v41 -= 24;
                  }
                  while (v41 != v42);
                  v45 = v87;
                }
                v46 = v40 + 24;
                v87.i64[0] = (uint64_t)v43;
                v87.i64[1] = (uint64_t)(v40 + 24);
                *(int64x2_t *)&v89.__begin_ = v45;
                v47 = v88;
                v88 = (std::string *)&v39[24 * v38];
                v89.__end_cap_.__value_ = v47;
                v89.__first_ = (std::__split_buffer<std::string>::pointer)v45.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v89);
                v87.i64[1] = (uint64_t)v46;
              }
              else
              {
                *(_QWORD *)(v87.i64[1] + 16) = v80;
                *v35 = *(_OWORD *)__p;
                v87.i64[1] = (uint64_t)v35 + 24;
              }
              v81[0] = v76;
              *(void ***)((char *)v81 + (_QWORD)*(v76 - 3)) = v78;
              v82 = v77;
              v83 = MEMORY[0x24BEDB848] + 16;
              if (v85 < 0)
                operator delete(v84);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x22E2B7668](v86);
            }
          }
          if (v7 != v5 && *(_QWORD *)(v6 + 96) == *(_QWORD *)(v6 + 104))
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v82, (uint64_t)"vertex ", 7);
            v48 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)": active vertex was not meshed (ancestors_in_joiner is empty)", 61);
            std::stringbuf::str();
            v49 = (_OWORD *)v87.i64[1];
            if (v87.i64[1] >= (unint64_t)v88)
            {
              v50 = 0xAAAAAAAAAAAAAAABLL * ((v87.i64[1] - v87.i64[0]) >> 3);
              v51 = v50 + 1;
              if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_99:
                abort();
              if (0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3) > v51)
                v51 = 0x5555555555555556 * (((uint64_t)v88 - v87.i64[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v88 - v87.i64[0]) >> 3) >= 0x555555555555555)
                v52 = 0xAAAAAAAAAAAAAAALL;
              else
                v52 = v51;
              v89.__end_cap_.__value_ = (std::allocator<std::string> *)&v88;
              if (v52)
                v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v88, v52);
              else
                v53 = 0;
              v54 = &v53[24 * v50];
              *((_QWORD *)v54 + 2) = v80;
              *(_OWORD *)v54 = *(_OWORD *)__p;
              v80 = 0;
              *(_OWORD *)__p = 0uLL;
              v55 = v87.i64[1];
              v56 = v87.i64[0];
              if (v87.i64[1] == v87.i64[0])
              {
                v59 = vdupq_n_s64(v87.u64[1]);
                v57 = &v53[24 * v50];
              }
              else
              {
                v57 = &v53[24 * v50];
                do
                {
                  v58 = *(_OWORD *)(v55 - 24);
                  *((_QWORD *)v57 - 1) = *(_QWORD *)(v55 - 8);
                  *(_OWORD *)(v57 - 24) = v58;
                  v57 -= 24;
                  *(_QWORD *)(v55 - 16) = 0;
                  *(_QWORD *)(v55 - 8) = 0;
                  *(_QWORD *)(v55 - 24) = 0;
                  v55 -= 24;
                }
                while (v55 != v56);
                v59 = v87;
              }
              v60 = v54 + 24;
              v87.i64[0] = (uint64_t)v57;
              v87.i64[1] = (uint64_t)(v54 + 24);
              *(int64x2_t *)&v89.__begin_ = v59;
              v61 = v88;
              v88 = (std::string *)&v53[24 * v52];
              v89.__end_cap_.__value_ = v61;
              v89.__first_ = (std::__split_buffer<std::string>::pointer)v59.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v89);
              v87.i64[1] = (uint64_t)v60;
            }
            else
            {
              *(_QWORD *)(v87.i64[1] + 16) = v80;
              *v49 = *(_OWORD *)__p;
              v87.i64[1] = (uint64_t)v49 + 24;
            }
            v81[0] = v76;
            *(void ***)((char *)v81 + (_QWORD)*(v76 - 3)) = v78;
            v82 = v77;
            v83 = MEMORY[0x24BEDB848] + 16;
            if (v85 < 0)
              operator delete(v84);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x22E2B7668](v86);
          }
        }
      }
      v3 = *(_QWORD *)(a1 + 120);
      v4 = ++v5;
    }
    while (0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 128) - v3) >> 4) > v5);
  }
  if (v87.i64[0] == v87.i64[1])
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v81);
    v63 = v87.i64[1];
    v62 = v87.i64[0];
    if (v87.i64[0] != v87.i64[1])
    {
      v64 = 1;
      v65 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v66 = (_QWORD *)std::ostream::operator<<();
        v67 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)". ", 2);
        v68 = *(char *)(v62 + 23);
        if (v68 >= 0)
          v69 = v62;
        else
          v69 = *(_QWORD *)v62;
        if (v68 >= 0)
          v70 = *(unsigned __int8 *)(v62 + 23);
        else
          v70 = *(_QWORD *)(v62 + 8);
        v71 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, v69, v70);
        std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(_QWORD *)(*v71 - 24)));
        v72 = std::locale::use_facet((const std::locale *)&v89, v65);
        ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
        std::locale::~locale((std::locale *)&v89);
        std::ostream::put();
        std::ostream::flush();
        ++v64;
        v62 += 24;
      }
      while (v62 != v63);
    }
    std::stringbuf::str();
    v81[0] = *(void ***)MEMORY[0x24BEDB7F0];
    v73 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void ***)((char *)v81 + (unint64_t)*(v81[0] - 3)) = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
    *(_OWORD *)a2 = *(_OWORD *)&v89.__first_;
    *(_QWORD *)(a2 + 16) = v89.__end_;
    *(_BYTE *)(a2 + 24) = 1;
    v82 = v73;
    v83 = MEMORY[0x24BEDB848] + 16;
    if (v85 < 0)
      operator delete(v84);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22E2B7668](v86);
  }
  v81[0] = (void **)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v81);
}

uint64_t geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<double>::check_geometric_invariants(void)::{lambda(unsigned int,unsigned int)#1}>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *(_QWORD *)(result + 120);
  v2 = *(_QWORD *)(result + 128);
  if (v2 != v3)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v3)
      {
        v8 = v3 + 144 * v6;
        if (!*(_DWORD *)(v8 + 128))
        {
          v9 = *(_DWORD *)(v8 + 68);
          if (v7 != v9)
          {
            result = geom::straight_skeleton_evaluator<double>::check_geometric_invariants(void)const::{lambda(unsigned int,unsigned int)#1}::operator()(a2, v7, v9);
            v3 = *(_QWORD *)(v5 + 120);
            v2 = *(_QWORD *)(v5 + 128);
          }
        }
      }
      v6 = ++v7;
    }
    while (0x8E38E38E38E38E39 * ((v2 - v3) >> 4) > v7);
  }
  return result;
}

uint64_t geom::intersect_adjacent_spokes<double>(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v3;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  __int8 v14;
  __int8 v15;
  float64x2_t v16;
  double v17;
  int8x16_t v18;
  double v19;
  float64x2_t v20;
  char v21;
  double v22;
  unint64_t v23;
  float64x2_t v24;
  unint64_t v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  int v30;
  double v31;
  int64x2_t v32;
  int64x2_t v33;
  BOOL v34;
  BOOL v35;
  double v36;
  double v37;
  int8x16_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2].f64[0];
  v5 = vmulq_n_f64(v3, v4);
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2].f64[0];
  v9 = vmulq_n_f64(v7, v8);
  v10 = (int64x2_t)vmulq_f64(v5, v5);
  v11 = (int64x2_t)vmulq_f64(v9, v9);
  v12 = vaddq_f64((float64x2_t)vzip1q_s64(v11, v10), (float64x2_t)vzip2q_s64(v11, v10));
  v13 = vabsq_f64(v12);
  *(int32x2_t *)v11.i8 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), v13));
  v14 = v11.i8[4];
  v15 = v11.i8[0];
  if ((v11.i32[1] & v11.i32[0] & 1) != 0)
  {
    v16 = vsubq_f64(v2, v6);
    v17 = sqrt(vaddvq_f64(vmulq_f64(v16, v16)));
    v18 = 0uLL;
    if (v17 <= 0.000001)
      goto LABEL_3;
LABEL_25:
    v19 = 0.0;
    return *(_QWORD *)&v19;
  }
  v20 = vsubq_f64(v6, v2);
  v21 = v14 | v15;
  if ((v14 & 1) != 0)
    v22 = v12.f64[0];
  else
    v22 = v12.f64[1];
  if ((v14 & 1) != 0)
    v23 = -1;
  else
    v23 = 0;
  if ((v21 & 1) != 0)
  {
    v24 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v23), (int8x16_t)v9, (int8x16_t)v5);
    if ((v14 & 1) != 0)
      v25 = -1;
    else
      v25 = 0;
    v26 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v25), (int8x16_t)vnegq_f64(v20), (int8x16_t)v20);
    v27 = vmlad_n_f64(-v24.f64[1] * v26.f64[0], v26.f64[1], v24.f64[0]);
    if (v27 * v27 > v22 * 1.0e-12)
      goto LABEL_25;
    v12 = (float64x2_t)vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), v13);
    v28 = (float64x2_t)vbicq_s8((int8x16_t)vdupq_lane_s64(COERCE__INT64(vaddvq_f64(vmulq_f64(v24, v26)) / v22), 0), (int8x16_t)v12);
    goto LABEL_22;
  }
  v29 = vmlad_n_f64(-v5.f64[1] * v9.f64[0], v9.f64[1], v5.f64[0]);
  if (fabs(v29 * v29) > v12.f64[1] * v12.f64[0] * 1.0e-12)
  {
    v12 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v5, (int64x2_t)v9), -v20.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v5, (int64x2_t)v9), v20.f64[0]);
    v28 = vdivq_f64(v12, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v29, 0));
LABEL_22:
    v30 = 1;
    goto LABEL_28;
  }
  v31 = vmlad_n_f64(-(v20.f64[1] * v5.f64[0]), v5.f64[1], v20.f64[0]);
  if (fabs(v31 * v31) > vaddvq_f64(vmulq_f64(v20, v20)) * v12.f64[1] * 1.0e-12)
    goto LABEL_25;
  v32 = (int64x2_t)vmulq_f64(v20, v5);
  v33 = (int64x2_t)vmulq_f64(v9, vnegq_f64(v20));
  v20 = (float64x2_t)vzip1q_s64(v33, v32);
  v28 = vdivq_f64(vaddq_f64(v20, (float64x2_t)vzip2q_s64(v33, v32)), v12);
  v30 = 2;
LABEL_28:
  v34 = v28.f64[0] != 0.0;
  if (v28.f64[0] > -1.0e-10)
    v34 = 0;
  v19 = 0.0;
  v35 = v28.f64[1] > -1.0e-10 || v28.f64[1] == 0.0;
  if (v35 && !v34)
  {
    if (v30 == 1)
    {
      v18 = vbicq_s8((int8x16_t)v28, (int8x16_t)vcltzq_f64(v28));
LABEL_3:
      if (fabs(*(double *)&v18.i64[1]) <= 1.0e-10)
      {
        v19 = a1[3].f64[0];
      }
      else if (fabs(*(double *)v18.i64) <= 1.0e-10)
      {
        v19 = a2[3].f64[0];
      }
      else
      {
        *(double *)v18.i64 = *(double *)v18.i64 + a2[3].f64[0];
        if (*(double *)&v18.i64[1] + a1[3].f64[0] >= *(double *)v18.i64)
          v19 = *(double *)&v18.i64[1] + a1[3].f64[0];
        else
          v19 = *(double *)v18.i64;
      }
      return *(_QWORD *)&v19;
    }
    v36 = a1[3].f64[0];
    v37 = a2[3].f64[0];
    v12.f64[0] = fabs(v4);
    v20.f64[0] = 1.0e-10;
    v38 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(v20, v12)).i64[0], 0);
    if (v36 >= v37)
      v39 = a1[3].f64[0];
    else
      v39 = a2[3].f64[0];
    v40 = (float64x2_t)vbslq_s8(v38, (int8x16_t)vmlaq_n_f64(v2, v3, v4 * (v39 - v36)), (int8x16_t)v2);
    v3.f64[0] = fabs(v8);
    v41 = vsubq_f64(v40, (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(v20, v3)).i64[0], 0), (int8x16_t)vmlaq_n_f64(v6, v7, v8 * (v39 - v37)), (int8x16_t)v6));
    v19 = v39 + sqrt(vaddvq_f64(vmulq_f64(v41, v41))) / (v4 + v8);
  }
  return *(_QWORD *)&v19;
}

_DWORD **geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex(unsigned int)::{lambda(unsigned int,unsigned int)#1}>(_DWORD **result, _DWORD **a2, double a3, double a4, float64x2_t a5)
{
  char *v5;
  char *v6;
  _DWORD **v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;

  v6 = (char *)result[15];
  v5 = (char *)result[16];
  if (v5 != v6)
  {
    v8 = result;
    v9 = 0;
    v10 = 0;
    do
    {
      if (v6)
      {
        v11 = &v6[144 * v9];
        if (!*((_DWORD *)v11 + 32))
        {
          v12 = *((_DWORD *)v11 + 17);
          if (v10 != v12)
          {
            result = geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex::{lambda(unsigned int,unsigned int)#1}::operator()(a2, v10, v12, a3, a4, a5);
            v6 = (char *)v8[15];
            v5 = (char *)v8[16];
          }
        }
      }
      v9 = ++v10;
    }
    while (0x8E38E38E38E38E39 * ((v5 - v6) >> 4) > v10);
  }
  return result;
}

double geom::straight_skeleton_evaluator<double>::time_of_joiner_vertex(_QWORD *a1, unsigned int a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  char *v7;
  unsigned int v8;

  v2 = (char *)a1[9];
  v3 = (char *)a1[10];
  if (v3 != v2)
  {
    v4 = (v3 - v2) >> 2;
    v3 = (char *)a1[9];
    do
    {
      v5 = v4 >> 1;
      v6 = (unsigned int *)&v3[4 * (v4 >> 1)];
      v8 = *v6;
      v7 = (char *)(v6 + 1);
      v4 += ~(v4 >> 1);
      if (v8 > a2)
        v4 = v5;
      else
        v3 = v7;
    }
    while (v4);
  }
  return *(double *)(a1[12] + 8 * ((unint64_t)(v3 - v2) >> 2));
}

void geom::straight_skeleton_evaluator<double>::for_each_wavefront_vertex<geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(unsigned int)#1},geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(void)#1}>(uint64_t a1, void ***a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120)) >> 4), 0);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = __p[0];
  if (v5 == v4)
  {
LABEL_13:
    if (v6)
      operator delete(v6);
    return;
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = *((_QWORD *)v6 + (v7 >> 6));
    if ((v9 & (1 << v7)) == 0 && !*(_DWORD *)(v4 + 144 * v7 + 128))
      break;
    *((_QWORD *)v6 + (v7 >> 6)) = v9 | (1 << v7);
LABEL_6:
    v7 = ++v8;
    if (0x8E38E38E38E38E39 * ((v5 - v4) >> 4) <= v8)
      goto LABEL_13;
  }
  v10 = v8;
  v11 = (unint64_t)v8 >> 6;
  v12 = 1 << v8;
  if (((1 << v8) & *((_QWORD *)v6 + v11)) != 0)
    goto LABEL_6;
  v13 = v8;
  while (1)
  {
    geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda#1}::operator()(a2, v13);
    v6 = __p[0];
    *((_QWORD *)__p[0] + v11) |= v12;
    v4 = *(_QWORD *)(a1 + 120);
    v14 = v4 + 144 * v10;
    if (*(_DWORD *)(v14 + 128))
      break;
    v10 = *(unsigned int *)(v14 + 68);
    v11 = v10 >> 6;
    v12 = 1 << v10;
    v13 = *(_DWORD *)(v14 + 68);
    if (((1 << v10) & *((_QWORD *)v6 + (v10 >> 6))) != 0)
    {
      v5 = *(_QWORD *)(a1 + 128);
      goto LABEL_6;
    }
  }
  v15 = std::__throw_bad_variant_access[abi:nn180100]();
  geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(unsigned int,unsigned int)#1}>(v15);
}

void geom::straight_skeleton_evaluator<double>::for_each_wavefront_edge<geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(unsigned int,unsigned int)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  v3 = *(_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 != v3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v3)
      {
        v8 = v3 + 144 * v6;
        if (!*(_DWORD *)(v8 + 128))
        {
          v9 = *(_DWORD *)(v8 + 68);
          if (v7 != v9)
          {
            geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(unsigned int,unsigned int)#1}::operator()(a2, v7, v9);
            v3 = *(_QWORD *)(a1 + 120);
            v2 = *(_QWORD *)(a1 + 128);
          }
        }
      }
      v6 = ++v7;
    }
    while (0x8E38E38E38E38E39 * ((v2 - v3) >> 4) > v7);
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZN4geom27straight_skeleton_evaluatorIfE10event_timeERKNS_7variantIJNSA_10edge_eventENSA_11split_eventEEEEEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZN4geom27straight_skeleton_evaluatorIfE10event_timeERKNS_7variantIJNSA_10edge_eventENSA_11split_eventEEEEEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

uint64_t std::deque<geom::straight_skeleton_evaluator<double>::split_event,std::allocator<geom::straight_skeleton_evaluator<double>::split_event>>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZN4geom27straight_skeleton_evaluatorIdE10event_timeERKNS_7variantIJNSA_10edge_eventENSA_11split_eventEEEEEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IONS1_9__variant15__value_visitorIZN4geom27straight_skeleton_evaluatorIdE10event_timeERKNS_7variantIJNSA_10edge_eventENSA_11split_eventEEEEEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE0EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

void std::vector<std::optional<unsigned int>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int v21;
  char v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_BYTE **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 3)
  {
    if (a2)
    {
      v14 = &v7[8 * a2];
      do
      {
        *v7 = 0;
        v7[4] = 0;
        v7 += 8;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (uint64_t)&v7[-*a1];
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[8 * v10];
    v16 = &v15[8 * a2];
    v17 = v15;
    do
    {
      *v17 = 0;
      v17[4] = 0;
      v17 += 8;
    }
    while (v17 != v16);
    v18 = &v13[8 * v12];
    v20 = (_BYTE *)*a1;
    v19 = (_BYTE *)a1[1];
    if (v19 != (_BYTE *)*a1)
    {
      do
      {
        v21 = *((_DWORD *)v19 - 2);
        v19 -= 8;
        v22 = v19[4];
        *((_DWORD *)v15 - 2) = v21;
        v15 -= 8;
        v15[4] = v22;
      }
      while (v19 != v20);
      v19 = (_BYTE *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
      operator delete(v19);
  }
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 96);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24F14BA20 + v4))(&v7, result);
  *(_DWORD *)(v3 + 96) = -1;
  v5 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_24F14BA60 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 96) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4geom27straight_skeleton_evaluatorIfE13active_vertexENSA_15inactive_vertexEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  *(_OWORD *)(a2 + 41) = *(__int128 *)((char *)a3 + 41);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v3;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  result = (__n128)a3[4];
  *(__n128 *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 80) = *((_QWORD *)a3 + 10);
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4geom27straight_skeleton_evaluatorIfE13active_vertexENSA_15inactive_vertexEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

uint64_t *std::vector<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = v6 - 104;
    do
    {
      v4 -= 104;
      *(_BYTE *)v7 = 0;
      *(_DWORD *)(v7 + 96) = -1;
      result = (uint64_t *)std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<float>::active_vertex,geom::straight_skeleton_evaluator<float>::inactive_vertex>,(std::__variant_detail::_Trait)1>>(v7, v4);
      v7 -= 104;
    }
    while (v4 != v5);
    v6 = v7 + 104;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(104 * a2);
}

void **std::__split_buffer<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state> &>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<geom::straight_skeleton_evaluator<float>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<float>::vertex_state> &>::clear[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  if (v2 != v1)
  {
    v3 = result;
    do
    {
      v4 = v2 - 104;
      *(_QWORD *)(v3 + 16) = v2 - 104;
      v5 = *(unsigned int *)(v2 - 8);
      if ((_DWORD)v5 != -1)
      {
        result = ((uint64_t (*)(char *))*(&off_24F14BA20 + v5))(&v6);
        v4 = *(_QWORD *)(v3 + 16);
      }
      *(_DWORD *)(v2 - 8) = -1;
      v2 = v4;
    }
    while (v4 != v1);
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = a3 - 2;
  if (a3 >= 2)
  {
    v37 = v7;
    v38 = v6;
    v39 = v4;
    v40 = v5;
    v9 = a4;
    v10 = result;
    v11 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= ((uint64_t)a4 - result) >> 5)
    {
      v13 = ((uint64_t)a4 - result) >> 4;
      v14 = v13 | 1;
      v15 = (_OWORD *)(result + 32 * (v13 | 1));
      v16 = v13 + 2;
      if (v13 + 2 < a3)
      {
        geom::straight_skeleton_evaluator<float>::event_time(result + 32 * (v13 | 1));
        v18 = v17;
        geom::straight_skeleton_evaluator<float>::event_time((uint64_t)(v15 + 2));
        if (v18 > v19)
        {
          v15 += 2;
          v14 = v16;
        }
      }
      geom::straight_skeleton_evaluator<float>::event_time((uint64_t)v15);
      v21 = v20;
      result = geom::straight_skeleton_evaluator<float>::event_time((uint64_t)v9);
      if (v21 <= v22)
      {
        v23 = v9[1];
        v35 = *v9;
        v36 = v23;
        do
        {
          v24 = v9;
          v9 = v15;
          v25 = v15[1];
          *v24 = *v15;
          v24[1] = v25;
          if (v11 < v14)
            break;
          v26 = (2 * v14) | 1;
          v15 = (_OWORD *)(v10 + 32 * v26);
          v27 = 2 * v14 + 2;
          if (v27 < a3)
          {
            geom::straight_skeleton_evaluator<float>::event_time(v10 + 32 * v26);
            v29 = v28;
            geom::straight_skeleton_evaluator<float>::event_time((uint64_t)(v15 + 2));
            if (v29 > v30)
            {
              v15 += 2;
              v26 = v27;
            }
          }
          geom::straight_skeleton_evaluator<float>::event_time((uint64_t)v15);
          v32 = v31;
          result = geom::straight_skeleton_evaluator<float>::event_time((uint64_t)&v35);
          v14 = v26;
        }
        while (v32 <= v33);
        v34 = v36;
        *v9 = v35;
        v9[1] = v34;
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::variant<geom::straight_skeleton_evaluator<float>::edge_event_result,geom::straight_skeleton_evaluator<float>::split_event_result>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(12 * a2);
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8nn180100EOS2_(void ***a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v7, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v10 = v16 + 8;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:nn180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      abort();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  float v13;
  float v14;
  float v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = a4 - 2;
  if (a4 >= 2)
  {
    v25 = v7;
    v26 = v6;
    v27 = v4;
    v28 = v5;
    v9 = result;
    v10 = v8 >> 1;
    v11 = (__int128 *)(result + 32 * (v8 >> 1));
    v12 = (__int128 *)(a2 - 32);
    geom::straight_skeleton_evaluator<float>::event_time((uint64_t)v11);
    v14 = v13;
    result = geom::straight_skeleton_evaluator<float>::event_time((uint64_t)v12);
    if (v14 > v15)
    {
      v16 = v12[1];
      v23 = *v12;
      v24 = v16;
      do
      {
        v17 = v11;
        v18 = v11[1];
        *v12 = *v11;
        v12[1] = v18;
        if (!v10)
          break;
        v10 = (v10 - 1) >> 1;
        v11 = (__int128 *)(v9 + 32 * v10);
        geom::straight_skeleton_evaluator<float>::event_time((uint64_t)v11);
        v20 = v19;
        result = geom::straight_skeleton_evaluator<float>::event_time((uint64_t)&v23);
        v12 = v17;
      }
      while (v20 > v21);
      v22 = v24;
      *v17 = v23;
      v17[1] = v22;
    }
  }
  return result;
}

uint64_t geom::intersect_wavefront_edge_spoke<float>(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, double a4, double a5, double a6)
{
  float32x2_t v6;
  float v7;
  float v8;
  float v9;
  float32x2_t v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float v15;
  int8x8_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  float32x2_t v44;
  float v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  int32x2_t v51;
  int32x2_t v52;
  float32x2_t v53;
  float v54;
  float v55;

  v7 = a1[3].f32[0];
  v8 = a2[3].f32[0];
  if (v7 >= v8)
    v9 = a1[3].f32[0];
  else
    v9 = a2[3].f32[0];
  v10 = a1[1];
  v11 = a1[2].f32[0];
  *(float *)&a4 = fabsf(v11);
  LODWORD(a6) = 916964780;
  v12 = (float32x2_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a4)), 0);
  v13 = a2[1];
  v14 = (float32x2_t)vbsl_s8((int8x8_t)v12, (int8x8_t)vmla_n_f32(*a1, v10, (float)(v9 - v7) * v11), (int8x8_t)*a1);
  v15 = a2[2].f32[0];
  v12.f32[0] = fabsf(v15);
  v16 = vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&a6, v12)), 0), (int8x8_t)vmla_n_f32(*a2, v13, (float)(v9 - v8) * v15), (int8x8_t)*a2);
  v17 = vsub_f32((float32x2_t)vext_s8((int8x8_t)v14, v16, 4uLL), (float32x2_t)vext_s8(v16, (int8x8_t)v14, 4uLL));
  v18 = vmul_f32(v17, v17);
  v18.i32[0] = vadd_f32(v18, (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1)).u32[0];
  v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
  v21 = vmul_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  v22 = vaddv_f32(vmul_f32(v14, v21));
  v23 = vmul_f32(vadd_f32(v10, v13), v21);
  v6.i32[0] = 0;
  v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v6, vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1))), 0), (int8x8_t)vneg_f32(v21), (int8x8_t)v21);
  if (vaddv_f32(v23) >= 0.0)
    v22 = -v22;
  v25 = a3[2].f32[0];
  v26 = fabsf(v25);
  v27 = *a3;
  v28 = a3[1];
  if (v26 <= 0.000005)
    v29 = *a3;
  else
    v29 = vmla_n_f32(*a3, v28, v25 * (float)(v9 - a3[3].f32[0]));
  v30 = 0;
  v31 = v25 * vaddv_f32(vmul_f32(v24, v28));
  if (v31 == 1.0)
  {
    v33 = 0;
    v34 = 0;
  }
  else
  {
    v32 = v31 + -1.0;
    v33 = 0;
    v34 = 0;
    if (fabsf(v32) > 0.000005)
    {
      v35 = (float)-(float)(v22 + vaddv_f32(vmul_f32(v24, v29))) / v32;
      if (v35 != 0.0 && v35 <= -0.000005)
        goto LABEL_21;
      v36 = v9 + fmaxf(v35, 0.0);
      if (v26 > 0.000005)
        v27 = vmla_n_f32(v27, v28, v25 * (float)(v36 - a3[3].f32[0]));
      v23.f32[0] = -v10.f32[1];
      v37 = (float32x2_t)vzip1_s32((int32x2_t)v23, (int32x2_t)v10);
      v38 = vmul_f32(v37, v37);
      v38.i32[0] = vadd_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v38, 1)).u32[0];
      v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
      v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
      v41 = vmul_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
      v42 = (int32x2_t)vmul_f32(*a1, v41);
      v43 = (int32x2_t)vmul_f32(v27, v41);
      v44 = vadd_f32((float32x2_t)vzip1_s32(v43, v42), (float32x2_t)vzip2_s32(v43, v42));
      v45 = vsub_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)).f32[0];
      if (v45 != 0.0 && v45 > 0.000005)
        goto LABEL_21;
      *(float *)&a6 = -v13.f32[1];
      v46 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a6, (int32x2_t)v13);
      v47 = vmul_f32(v46, v46);
      v47.i32[0] = vadd_f32(v47, (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1)).u32[0];
      v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
      v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
      v50 = vmul_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]);
      v51 = (int32x2_t)vmul_f32(*a2, v50);
      v52 = (int32x2_t)vmul_f32(v27, v50);
      v53 = vadd_f32((float32x2_t)vzip1_s32(v52, v51), (float32x2_t)vzip2_s32(v52, v51));
      v54 = vsub_f32(v53, (float32x2_t)vdup_lane_s32((int32x2_t)v53, 1)).f32[0];
      if (v54 != 0.0 && v54 < -0.000005)
        goto LABEL_21;
      v55 = v22 + vaddv_f32(vmul_f32(v24, v27));
      if (v55 == 0.0 || v55 >= -0.000005)
      {
        v34 = LODWORD(v36) & 0xFFFFFF00;
        v30 = LOBYTE(v36);
        v33 = 0x100000000;
      }
      else
      {
LABEL_21:
        v30 = 0;
        v33 = 0;
        v34 = 0;
      }
    }
  }
  return v33 | v30 | v34;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E2B7584](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2B7590](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t geom::straight_skeleton_evaluator<float>::check_geometric_invariants(void)const::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  float32x2_t *v4;
  uint64_t v5;
  float v6;
  float v7;
  float32x2_t v8;
  float32x2_t *v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  std::string *v28;
  std::string *v29;
  char *v30;
  __int128 v31;
  std::string *v32;
  char *v33;
  std::string *v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[11];
  char v40;
  uint64_t v41;
  std::__split_buffer<std::string> v42;

  v3 = *(_QWORD *)(*(_QWORD *)result + 120);
  v4 = (float32x2_t *)(v3 + 104 * a2);
  if (v4[12].i32[0]
    || ((v5 = result,
         v6 = *(float *)(*(_QWORD *)(*(_QWORD *)result + 104) - 4),
         v7 = v4[2].f32[0],
         fabsf(v7) <= 0.000005)
      ? (v8 = *v4)
      : (v8 = vmla_n_f32(*v4, v4[1], v7 * (float)(v6 - v4[3].f32[0]))),
        v9 = (float32x2_t *)(v3 + 104 * a3),
        v9[12].i32[0]))
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_32;
  }
  v10 = v9[2].f32[0];
  if (fabsf(v10) <= 0.000005)
    v11 = *v9;
  else
    v11 = vmla_n_f32(*v9, v9[1], v10 * (float)(v6 - v9[3].f32[0]));
  v12 = vsub_f32(v8, v11);
  if (sqrtf(vaddv_f32(vmul_f32(v12, v12))) <= 0.000005)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"edge ", 5);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" -> ", 4);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" is zero length.  p0 = (", 24);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)") p1 = (", 8);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
    v19 = *(_QWORD *)(v5 + 8);
    std::stringbuf::str();
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    if (v20 < v21)
    {
      *(_QWORD *)(v20 + 16) = v37;
      *(_OWORD *)v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 8) = v20 + 24;
LABEL_27:
      v38[0] = *MEMORY[0x24BEDB7F0];
      v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v39[0] = v35;
      v39[1] = MEMORY[0x24BEDB848] + 16;
      if (v40 < 0)
        operator delete((void *)v39[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return MEMORY[0x22E2B7668](&v41);
    }
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)v19) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)v19) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      v42.__end_cap_.__value_ = (std::allocator<std::string> *)(v19 + 16);
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v19 + 16, v25);
      else
        v26 = 0;
      v27 = &v26[24 * v22];
      *((_QWORD *)v27 + 2) = v37;
      *(_OWORD *)v27 = *(_OWORD *)__p;
      v29 = *(std::string **)v19;
      v28 = *(std::string **)(v19 + 8);
      if (v28 == *(std::string **)v19)
      {
        v32 = *(std::string **)(v19 + 8);
        v30 = &v26[24 * v22];
      }
      else
      {
        v30 = &v26[24 * v22];
        do
        {
          v31 = *(_OWORD *)&v28[-1].__r_.__value_.__l.__data_;
          *((_QWORD *)v30 - 1) = *((_QWORD *)&v28[-1].__r_.__value_.__l + 2);
          *(_OWORD *)(v30 - 24) = v31;
          v30 -= 24;
          v28[-1].__r_.__value_.__l.__size_ = 0;
          v28[-1].__r_.__value_.__r.__words[2] = 0;
          v28[-1].__r_.__value_.__r.__words[0] = 0;
          --v28;
        }
        while (v28 != v29);
        v32 = *(std::string **)v19;
        v28 = *(std::string **)(v19 + 8);
      }
      v33 = v27 + 24;
      *(_QWORD *)v19 = v30;
      v42.__first_ = v32;
      v42.__begin_ = v32;
      *(_QWORD *)(v19 + 8) = v27 + 24;
      v42.__end_ = v28;
      v34 = *(std::string **)(v19 + 16);
      *(_QWORD *)(v19 + 16) = &v26[24 * v25];
      v42.__end_cap_.__value_ = v34;
      std::__split_buffer<std::string>::~__split_buffer(&v42);
      *(_QWORD *)(v19 + 8) = v33;
      goto LABEL_27;
    }
LABEL_32:
    abort();
  }
  return result;
}

uint64_t geom::straight_skeleton_evaluator<float>::best_split_event_for_vertex(unsigned int)::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t result, unsigned int a2, unsigned int a3, double a4, double a5, double a6)
{
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float32x2_t *v14;
  float32x2_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int32 v19;
  float32x2_t *v20;
  __int32 v21;
  float v22;
  float32x2_t v23;
  uint64_t v24;

  v6 = **(_DWORD **)(result + 8);
  if (v6 != a2 && v6 != a3)
  {
    v9 = result;
    v10 = *(_QWORD *)result;
    v11 = *(_QWORD *)(*(_QWORD *)result + 120);
    v12 = (float32x2_t *)(v11 + 104 * a2);
    if (v12[12].i32[0])
      goto LABEL_19;
    v13 = (float32x2_t *)(v11 + 104 * a3);
    if (v13[12].i32[0])
      goto LABEL_19;
    v14 = (float32x2_t *)(v11 + 104 * v6);
    if (v14[12].i32[0])
      goto LABEL_19;
    result = geom::intersect_wavefront_edge_spoke<float>(v12, v13, v14, a4, a5, a6);
    if ((result & 0xFF00000000) == 0)
      return result;
    v15 = *(float32x2_t **)(v9 + 16);
    v16 = v15[3].u8[0];
    if (v15[3].i8[0])
    {
      if (v15->f32[0] <= *(float *)&result)
        return result;
    }
    v17 = *(_QWORD *)(v10 + 120);
    v18 = v17 + 104 * a2;
    if (*(_DWORD *)(v18 + 96)
      || (v19 = **(_DWORD **)(v9 + 8), v20 = (float32x2_t *)(v17 + 104 * v19), v20[12].i32[0]))
    {
LABEL_19:
      v24 = std::__throw_bad_variant_access[abi:nn180100]();
      return std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(v24);
    }
    v21 = *(_DWORD *)(v18 + 40);
    v22 = v20[2].f32[0];
    if (fabsf(v22) <= 0.000005)
      v23 = *v20;
    else
      v23 = vmla_n_f32(*v20, v20[1], v22 * (float)(*(float *)&result - v20[3].f32[0]));
    v15->i32[0] = result;
    v15->i32[1] = v21;
    v15[1].i32[0] = v19;
    v15[2] = v23;
    if (!v16)
      v15[3].i8[0] = 1;
  }
  return result;
}

_OWORD *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<float>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<float>::edge_event,geom::straight_skeleton_evaluator<float>::split_event> *>>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  __int128 v14;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[2 * v5 + 2];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      geom::straight_skeleton_evaluator<float>::event_time((uint64_t)&a1[2 * v5 + 2]);
      v12 = v11;
      geom::straight_skeleton_evaluator<float>::event_time((uint64_t)(v8 + 2));
      if (v12 > v13)
      {
        v8 += 2;
        v9 = v10;
      }
    }
    v14 = v8[1];
    *a1 = *v8;
    a1[1] = v14;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::init(void **a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  void *v10;
  void *v11;

  a1[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (void *)(v5 & 0x3FFFFFFFFFFFFF0);
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
      v6 = 64;
    else
      v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
    *a1 = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *((_OWORD *)*a1 + v7++) = v8;
      while (v5 >> 4 != v7);
    }
    if (((8 * (_QWORD)a1[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40)
      v9 = 64;
    else
      v9 = (8 * (_QWORD)a1[2] + 63) & 0xFFFFFFFFFFFFFFC0;
    v10 = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
    a1[1] = v10;
    v11 = a1[2];
    if (v11)
      bzero(v10, 8 * (_QWORD)v11);
  }
  else
  {
    v11 = 0;
  }
  a1[3] = 0;
  a1[4] = v11;
}

void ***geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(unsigned int)#1}::operator()(void ***result, unsigned int a2)
{
  void **v2;
  float32x2_t *v3;
  void ***v4;
  float v5;
  float v6;
  char *v7;
  float32x2_t *v8;
  uint64_t v9;
  float v10;
  float32x2_t v11;
  unint64_t v12;
  float32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float32x2_t *v18;
  char *v19;
  char *v20;
  char *v21;
  float32x2_t v22;
  char v23[32];
  int v24;
  unsigned int v25;

  v25 = a2;
  v2 = *result;
  v3 = (float32x2_t *)((char *)(*result)[15] + 104 * a2);
  if (v3[12].i32[0])
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_29;
  }
  if (v3[4].i32[1] == a2)
    return result;
  v4 = result;
  v5 = geom::straight_skeleton_evaluator<float>::time_of_joiner_vertex(*result, **(_DWORD **)&v3[8]);
  v6 = *(float *)v4[1];
  if (v5 != v6 && vabds_f32(v5, v6) > 0.000005)
  {
    v7 = (char *)*v2;
    v8 = (float32x2_t *)v2[1];
    v9 = ((char *)v8 - (_BYTE *)*v2) >> 3;
    v24 = v9;
    v10 = v3[2].f32[0];
    if (fabsf(v10) <= 0.000005)
      v11 = *v3;
    else
      v11 = vmla_n_f32(*v3, v3[1], v10 * (float)(v6 - v3[3].f32[0]));
    v12 = (unint64_t)v2[2];
    if ((unint64_t)v8 < v12)
    {
      *v8 = v11;
      v13 = v8 + 1;
LABEL_25:
      v2[1] = v13;
      return (void ***)geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::insert((uint64_t *)v4[2], &v25, &v24, (uint64_t)v23);
    }
    if (!((unint64_t)(v9 + 1) >> 61))
    {
      v14 = v12 - (_QWORD)v7;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v9 + 1))
        v15 = v9 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v2 + 2), v16);
      else
        v17 = 0;
      v18 = (float32x2_t *)&v17[8 * v9];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v13 = v18 + 1;
      v21 = (char *)*v2;
      v20 = (char *)v2[1];
      if (v20 != *v2)
      {
        do
        {
          v22 = *(float32x2_t *)(v20 - 8);
          v20 -= 8;
          v18[-1] = v22;
          --v18;
        }
        while (v20 != v21);
        v20 = (char *)*v2;
      }
      *v2 = v18;
      v2[1] = v13;
      v2[2] = v19;
      if (v20)
        operator delete(v20);
      goto LABEL_25;
    }
LABEL_29:
    abort();
  }
  v24 = **(_DWORD **)&v3[8];
  return (void ***)geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::insert((uint64_t *)v4[2], &v25, &v24, (uint64_t)v23);
}

unint64_t geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::insert@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t result;

  if (geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::find_internal(a1, a2) == -1)
  {
    result = geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::internal_add<unsigned int>(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v8 = 0;
    else
      v8 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v9;
  return result;
}

uint64_t geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::find_internal(_QWORD *a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  unint64_t v8;
  int8x16_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[2];
  if (v2 < 0x10)
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = v4 % (v2 >> 4);
  v6 = vdupq_n_s8(*a2 & 0x7F);
  v7.i64[0] = -1;
  v7.i64[1] = -1;
  v8 = v5;
  while (1)
  {
    v9 = *(int8x16_t *)(*a1 + 16 * v8);
    v10 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v6, v9), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v11 = __clz(__rbit64(v10));
    if (v11 <= 0x3F)
      break;
LABEL_8:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v9, v7), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v8 + 1 == v3)
      v8 = 0;
    else
      ++v8;
    v13 = -1;
    if (v8 == v5)
      return v13;
  }
  v12 = 16 * v8;
  while (1)
  {
    v13 = v11 + v12;
    if ((_DWORD)v4 == *(_DWORD *)(a1[1] + 8 * (v11 + v12)))
      return v13;
    if (v11 <= 0x3E)
    {
      v11 = __clz(__rbit64((-2 << v11) & v10));
      if (v11 < 0x40)
        continue;
    }
    goto LABEL_8;
  }
}

unint64_t geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::internal_add<unsigned int>(uint64_t *a1, _DWORD *a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t result;
  _DWORD *v14;
  uint64_t v15;

  if (!a1[4])
    geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::grow_to_count((uint64_t)a1);
  v6 = *a2;
  v7 = (unint64_t)a1[2] >> 4;
  v8 = v6 % v7;
  v9 = *a1;
  v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (v6 % v7))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v10 >= 0x40)
  {
    do
    {
      if (v8 + 1 == v7)
        v8 = 0;
      else
        ++v8;
      v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v9 + 16 * v8)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v10 > 0x3F);
  }
  v11 = v9 + 16 * v8;
  v12 = *(unsigned __int8 *)(v11 + v10) == 255;
  *(_BYTE *)(v11 + v10) = v6 & 0x7F;
  result = v10 + 16 * v8;
  v14 = (_DWORD *)(a1[1] + 8 * result);
  *v14 = *a2;
  v14[1] = a3;
  v15 = a1[4] - v12;
  ++a1[3];
  a1[4] = v15;
  return result;
}

void geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::grow_to_count(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::do_resize((__int128 *)a1, v1);
}

void geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::do_resize(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  unsigned __int16 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  uint64_t i;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (a2 <= 1)
    a2 = 1;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::init((void **)&v18, a2);
  v16[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = *(_QWORD *)a1;
    v7 = v4 >> 4;
    v8 = (__n128)xmmword_2289B6F60;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v16[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        goto LABEL_10;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v5;
    for (i = v10; i != -1; v10 = i)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v16[0] + 8) + 8 * v10);
      geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::internal_add<unsigned int>(&v18, &v15, HIDWORD(v15), v8, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v16);
    }
  }
LABEL_10:
  if (&v18 != a1)
  {
    v11 = v19;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v18;
    a1[1] = v11;
    v18 = v12;
    v19 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v20;
    v20 = v14;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v18);
}

void geom::straight_skeleton_evaluator<float>::add_joiner_patch_to_time(float)::{lambda(unsigned int,unsigned int)#1}::operator()(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  char *v15;
  char **v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;

  v69 = a3;
  v70 = a2;
  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 120);
  v5 = v4 + 104 * a2;
  if (*(_DWORD *)(v5 + 96) || (v6 = v4 + 104 * a3, *(_DWORD *)(v6 + 96)))
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_94;
  }
  v8 = (_QWORD *)a1[1];
  v9 = *(_DWORD *)(v8[1]
                 + 8
                 * geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::find_internal(v8, &v70)+ 4);
  v10 = *(_DWORD *)(*(_QWORD *)(v5 + 72) - 4);
  v11 = (_QWORD *)a1[1];
  v12 = *(_DWORD *)(v11[1]
                  + 8
                  * geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::find_internal(v11, &v69)+ 4);
  v13 = **(_DWORD **)(v6 + 64);
  if (v9 != v10 || v12 != v13)
  {
    v16 = (char **)(v3 + 5);
    v15 = (char *)v3[5];
    v17 = (char *)v3[4];
    if (v17 >= v15)
    {
      v19 = (_BYTE *)v3[3];
      v20 = (v17 - v19) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        goto LABEL_94;
      v22 = v15 - v19;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v23);
        v19 = (_BYTE *)v3[3];
        v17 = (char *)v3[4];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      v15 = &v24[4 * v23];
      *(_DWORD *)v25 = v9;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      v3[3] = v25;
      v3[4] = v18;
      v3[5] = v15;
      if (v19)
      {
        operator delete(v19);
        v15 = *v16;
      }
    }
    else
    {
      *(_DWORD *)v17 = v9;
      v18 = v17 + 4;
    }
    v3[4] = v18;
    if (v9 != v10)
    {
      if (v18 >= v15)
      {
        v28 = (_BYTE *)v3[3];
        v29 = (v18 - v28) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          goto LABEL_94;
        v31 = v15 - v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v32);
          v28 = (_BYTE *)v3[3];
          v18 = (char *)v3[4];
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        v15 = &v33[4 * v32];
        *(_DWORD *)v34 = v10;
        v27 = v34 + 4;
        while (v18 != v28)
        {
          v35 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        v3[3] = v34;
        v3[4] = v27;
        v3[5] = v15;
        if (v28)
        {
          operator delete(v28);
          v15 = *v16;
        }
      }
      else
      {
        *(_DWORD *)v18 = v10;
        v27 = v18 + 4;
      }
      v3[4] = v27;
      v18 = v27;
    }
    if (v18 >= v15)
    {
      v37 = (_BYTE *)v3[3];
      v38 = (v18 - v37) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        goto LABEL_94;
      v40 = v15 - v37;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v41);
        v37 = (_BYTE *)v3[3];
        v18 = (char *)v3[4];
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[4 * v38];
      v44 = &v42[4 * v41];
      *(_DWORD *)v43 = v13;
      v36 = v43 + 4;
      while (v18 != v37)
      {
        v45 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v43 - 1) = v45;
        v43 -= 4;
      }
      v3[3] = v43;
      v3[4] = v36;
      v3[5] = v44;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_DWORD *)v18 = v13;
      v36 = v18 + 4;
    }
    v3[4] = v36;
    if (v12 != v13)
    {
      if (v36 >= *v16)
      {
        v47 = (char *)v3[3];
        v48 = (v36 - v47) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
          goto LABEL_94;
        v50 = *v16 - v47;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v51);
          v47 = (char *)v3[3];
          v36 = (char *)v3[4];
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[4 * v48];
        v54 = &v52[4 * v51];
        *(_DWORD *)v53 = v12;
        v46 = v53 + 4;
        while (v36 != v47)
        {
          v55 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v53 - 1) = v55;
          v53 -= 4;
        }
        v3[3] = v53;
        v3[4] = v46;
        v3[5] = v54;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_DWORD *)v36 = v12;
        v46 = v36 + 4;
      }
      v3[4] = v46;
      v36 = v46;
    }
    v56 = v3[8];
    v57 = (unint64_t)&v36[-v3[3]] >> 2;
    v58 = (char *)v3[7];
    if ((unint64_t)v58 < v56)
    {
      *(_DWORD *)v58 = v57;
      v59 = v58 + 4;
LABEL_91:
      v3[7] = v59;
      return;
    }
    v60 = (char *)v3[6];
    v61 = (v58 - v60) >> 2;
    v62 = v61 + 1;
    if (!((unint64_t)(v61 + 1) >> 62))
    {
      v63 = v56 - (_QWORD)v60;
      if (v63 >> 1 > v62)
        v62 = v63 >> 1;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
        v64 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 8), v64);
        v60 = (char *)v3[6];
        v58 = (char *)v3[7];
      }
      else
      {
        v65 = 0;
      }
      v66 = &v65[4 * v61];
      v67 = &v65[4 * v64];
      *(_DWORD *)v66 = v57;
      v59 = v66 + 4;
      while (v58 != v60)
      {
        v68 = *((_DWORD *)v58 - 1);
        v58 -= 4;
        *((_DWORD *)v66 - 1) = v68;
        v66 -= 4;
      }
      v3[6] = v66;
      v3[7] = v59;
      v3[8] = v67;
      if (v60)
        operator delete(v60);
      goto LABEL_91;
    }
LABEL_94:
    abort();
  }
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 128);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24F14BA40 + v4))(&v7, result);
  *(_DWORD *)(v3 + 128) = -1;
  v5 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_24F14BA70 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 128) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4geom27straight_skeleton_evaluatorIdE13active_vertexENSA_15inactive_vertexEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 73) = *(_OWORD *)(a3 + 73);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  result = *(__n128 *)(a3 + 96);
  *(__n128 *)(a2 + 96) = result;
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4geom27straight_skeleton_evaluatorIdE13active_vertexENSA_15inactive_vertexEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t *std::vector<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = v6 - 144;
    do
    {
      v4 -= 144;
      *(_BYTE *)v7 = 0;
      *(_DWORD *)(v7 + 128) = -1;
      result = (uint64_t *)std::__variant_detail::__ctor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<geom::straight_skeleton_evaluator<double>::active_vertex,geom::straight_skeleton_evaluator<double>::inactive_vertex>,(std::__variant_detail::_Trait)1>>(v7, v4);
      v7 -= 144;
    }
    while (v4 != v5);
    v6 = v7 + 144;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void **std::__split_buffer<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state> &>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<geom::straight_skeleton_evaluator<double>::vertex_state,std::allocator<geom::straight_skeleton_evaluator<double>::vertex_state> &>::clear[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  if (v2 != v1)
  {
    v3 = result;
    do
    {
      v4 = v2 - 144;
      *(_QWORD *)(v3 + 16) = v2 - 144;
      v5 = *(unsigned int *)(v2 - 16);
      if ((_DWORD)v5 != -1)
      {
        result = ((uint64_t (*)(char *))*(&off_24F14BA40 + v5))(&v6);
        v4 = *(_QWORD *)(v3 + 16);
      }
      *(_DWORD *)(v2 - 16) = -1;
      v2 = v4;
    }
    while (v4 != v1);
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 4)))
    {
      v9 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 4)) | 1;
      v10 = (_OWORD *)(result + 48 * v9);
      v11 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 4) + 2;
      if (v11 < a3)
      {
        geom::straight_skeleton_evaluator<double>::event_time(result + 48 * v9);
        v13 = v12;
        geom::straight_skeleton_evaluator<double>::event_time((uint64_t)(v10 + 3));
        if (v13 > v14)
        {
          v10 += 3;
          v9 = v11;
        }
      }
      geom::straight_skeleton_evaluator<double>::event_time((uint64_t)v10);
      v16 = v15;
      result = geom::straight_skeleton_evaluator<double>::event_time((uint64_t)v5);
      if (v16 <= v17)
      {
        v18 = *v5;
        v19 = v5[2];
        v34 = v5[1];
        v35 = v19;
        v33 = v18;
        do
        {
          v20 = v5;
          v5 = v10;
          v21 = *v10;
          v22 = v10[2];
          v20[1] = v10[1];
          v20[2] = v22;
          *v20 = v21;
          if (v7 < v9)
            break;
          v23 = (2 * v9) | 1;
          v10 = (_OWORD *)(v6 + 48 * v23);
          v24 = 2 * v9 + 2;
          if (v24 < a3)
          {
            geom::straight_skeleton_evaluator<double>::event_time(v6 + 48 * v23);
            v26 = v25;
            geom::straight_skeleton_evaluator<double>::event_time((uint64_t)(v10 + 3));
            if (v26 > v27)
            {
              v10 += 3;
              v23 = v24;
            }
          }
          geom::straight_skeleton_evaluator<double>::event_time((uint64_t)v10);
          v29 = v28;
          result = geom::straight_skeleton_evaluator<double>::event_time((uint64_t)&v33);
          v9 = v23;
        }
        while (v29 <= v30);
        v31 = v33;
        v32 = v35;
        v5[1] = v34;
        v5[2] = v32;
        *v5 = v31;
      }
    }
  }
  return result;
}

uint64_t *std::back_insert_iterator<std::vector<double>>::operator=[abi:nn180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
  {
    v4 = result;
    v5 = (unint64_t)(a4 - 2) >> 1;
    v6 = (__int128 *)(result + 48 * v5);
    v7 = (__int128 *)(a2 - 48);
    geom::straight_skeleton_evaluator<double>::event_time((uint64_t)v6);
    v9 = v8;
    result = geom::straight_skeleton_evaluator<double>::event_time((uint64_t)v7);
    if (v9 > v10)
    {
      v11 = *v7;
      v12 = v7[2];
      v22 = v7[1];
      v23 = v12;
      v21 = v11;
      do
      {
        v13 = v6;
        v14 = *v6;
        v15 = v6[2];
        v7[1] = v6[1];
        v7[2] = v15;
        *v7 = v14;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (__int128 *)(v4 + 48 * v5);
        geom::straight_skeleton_evaluator<double>::event_time((uint64_t)v6);
        v17 = v16;
        result = geom::straight_skeleton_evaluator<double>::event_time((uint64_t)&v21);
        v7 = v13;
      }
      while (v17 > v18);
      v19 = v21;
      v20 = v23;
      v13[1] = v22;
      v13[2] = v20;
      *v13 = v19;
    }
  }
  return result;
}

unint64_t geom::intersect_wavefront_edge_spoke<double>(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, double a4, double a5, float64x2_t a6)
{
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  int64x2_t v16;
  int8x16_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  double v25;
  double v26;
  double v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  float64x2_t v47;
  double v48;
  double v49;

  v7 = a1[3].f64[0];
  v8 = a2[3].f64[0];
  if (v7 >= v8)
    v9 = a1[3].f64[0];
  else
    v9 = a2[3].f64[0];
  v10 = a1[1];
  v11 = a2[1];
  v12 = a1[2].f64[0];
  v6.f64[0] = fabs(v12);
  a6.f64[0] = 1.0e-10;
  v13 = (float64x2_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(a6, v6)).i64[0], 0);
  v14 = (float64x2_t)vbslq_s8((int8x16_t)v13, (int8x16_t)vmlaq_n_f64(*a1, v10, (v9 - v7) * v12), *(int8x16_t *)a1);
  v15 = a2[2].f64[0];
  v13.f64[0] = fabs(v15);
  v16 = vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(a6, v13)).i64[0], 0);
  v17 = vbslq_s8((int8x16_t)v16, (int8x16_t)vmlaq_n_f64(*a2, v11, (v9 - v8) * v15), *(int8x16_t *)a2);
  v18 = vsubq_f64((float64x2_t)vextq_s8((int8x16_t)v14, v17, 8uLL), (float64x2_t)vextq_s8(v17, (int8x16_t)v14, 8uLL));
  v19 = vmulq_n_f64(v18, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v18, v18))));
  v20 = vaddvq_f64(vmulq_f64(v14, v19));
  v21 = vmulq_f64(vaddq_f64(v10, v11), v19);
  v22 = vaddq_f64(v21, (float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1));
  v23 = vaddvq_f64(v21);
  v21.f64[0] = 0.0;
  v24 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v21, v22).i64[0], 0), (int8x16_t)vnegq_f64(v19), (int8x16_t)v19);
  if (v23 >= 0.0)
    v25 = -v20;
  else
    v25 = v20;
  v26 = a3[2].f64[0];
  v27 = fabs(v26);
  v28 = *a3;
  v29 = a3[1];
  if (v27 <= 1.0e-10)
    v30 = *a3;
  else
    v30 = vmlaq_n_f64(*a3, v29, v26 * (v9 - a3[3].f64[0]));
  v31 = 0;
  v32 = v26 * vaddvq_f64(vmulq_f64(v24, v29));
  if (v32 == 1.0)
  {
    v34 = 0;
  }
  else
  {
    v33 = v32 + -1.0;
    v34 = 0;
    if (fabs(v33) > 1.0e-10)
    {
      v35 = -(v25 + vaddvq_f64(vmulq_f64(v24, v30))) / v33;
      if (v35 != 0.0 && v35 <= -1.0e-10)
        goto LABEL_22;
      v36 = v9 + fmax(v35, 0.0);
      if (v27 > 1.0e-10)
        v28 = vmlaq_n_f64(v28, v29, v26 * (v36 - a3[3].f64[0]));
      *(double *)v16.i64 = -v10.f64[1];
      v37 = (float64x2_t)vzip1q_s64(v16, (int64x2_t)v10);
      v38 = vmulq_n_f64(v37, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v37, v37))));
      v39 = (int64x2_t)vmulq_f64(*a1, v38);
      v40 = (int64x2_t)vmulq_f64(v38, v28);
      v41 = vaddq_f64((float64x2_t)vzip1q_s64(v40, v39), (float64x2_t)vzip2q_s64(v40, v39));
      v42 = vsubq_f64(v41, (float64x2_t)vdupq_laneq_s64((int64x2_t)v41, 1)).f64[0];
      if (v42 != 0.0 && v42 > 1.0e-10)
        goto LABEL_22;
      a6.f64[0] = -v11.f64[1];
      v43 = (float64x2_t)vzip1q_s64((int64x2_t)a6, (int64x2_t)v11);
      v44 = vmulq_n_f64(v43, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v43, v43))));
      v45 = (int64x2_t)vmulq_f64(*a2, v44);
      v46 = (int64x2_t)vmulq_f64(v44, v28);
      v47 = vaddq_f64((float64x2_t)vzip1q_s64(v46, v45), (float64x2_t)vzip2q_s64(v46, v45));
      v48 = vsubq_f64(v47, (float64x2_t)vdupq_laneq_s64((int64x2_t)v47, 1)).f64[0];
      if (v48 != 0.0 && v48 < -1.0e-10)
        goto LABEL_22;
      v49 = v25 + vaddvq_f64(vmulq_f64(v24, v28));
      if (v49 == 0.0 || v49 >= -1.0e-10)
      {
        v34 = *(_QWORD *)&v36 & 0xFFFFFFFFFFFFFF00;
        v31 = LOBYTE(v36);
      }
      else
      {
LABEL_22:
        v31 = 0;
        v34 = 0;
      }
    }
  }
  return v34 | v31;
}

uint64_t geom::straight_skeleton_evaluator<double>::check_geometric_invariants(void)const::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  float64x2_t v8;
  uint64_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  std::string *v28;
  std::string *v29;
  char *v30;
  __int128 v31;
  std::string *v32;
  char *v33;
  std::string *v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[11];
  char v40;
  uint64_t v41;
  std::__split_buffer<std::string> v42;

  v3 = *(_QWORD *)(*(_QWORD *)result + 120);
  v4 = v3 + 144 * a2;
  if (*(_DWORD *)(v4 + 128)
    || ((v5 = result,
         v6 = *(double *)(*(_QWORD *)(*(_QWORD *)result + 104) - 8),
         v7 = *(double *)(v4 + 32),
         fabs(v7) <= 1.0e-10)
      ? (v8 = *(float64x2_t *)v4)
      : (v8 = vmlaq_n_f64(*(float64x2_t *)v4, *(float64x2_t *)(v4 + 16), v7 * (v6 - *(double *)(v4 + 48)))),
        v9 = v3 + 144 * a3,
        *(_DWORD *)(v9 + 128)))
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_32;
  }
  v10 = *(double *)(v9 + 32);
  if (fabs(v10) <= 1.0e-10)
    v11 = *(float64x2_t *)v9;
  else
    v11 = vmlaq_n_f64(*(float64x2_t *)v9, *(float64x2_t *)(v9 + 16), v10 * (v6 - *(double *)(v9 + 48)));
  v12 = vsubq_f64(v8, v11);
  if (sqrt(vaddvq_f64(vmulq_f64(v12, v12))) <= 1.0e-10)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v38);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"edge ", 5);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" -> ", 4);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" is zero length.  p0 = (", 24);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)") p1 = (", 8);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
    v19 = *(_QWORD *)(v5 + 8);
    std::stringbuf::str();
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    if (v20 < v21)
    {
      *(_QWORD *)(v20 + 16) = v37;
      *(_OWORD *)v20 = *(_OWORD *)__p;
      *(_QWORD *)(v19 + 8) = v20 + 24;
LABEL_27:
      v38[0] = *MEMORY[0x24BEDB7F0];
      v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v39[0] = v35;
      v39[1] = MEMORY[0x24BEDB848] + 16;
      if (v40 < 0)
        operator delete((void *)v39[9]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return MEMORY[0x22E2B7668](&v41);
    }
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)v19) >> 3);
    v23 = v22 + 1;
    if (v22 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)v19) >> 3);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x555555555555555)
        v25 = 0xAAAAAAAAAAAAAAALL;
      else
        v25 = v23;
      v42.__end_cap_.__value_ = (std::allocator<std::string> *)(v19 + 16);
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v19 + 16, v25);
      else
        v26 = 0;
      v27 = &v26[24 * v22];
      *((_QWORD *)v27 + 2) = v37;
      *(_OWORD *)v27 = *(_OWORD *)__p;
      v29 = *(std::string **)v19;
      v28 = *(std::string **)(v19 + 8);
      if (v28 == *(std::string **)v19)
      {
        v32 = *(std::string **)(v19 + 8);
        v30 = &v26[24 * v22];
      }
      else
      {
        v30 = &v26[24 * v22];
        do
        {
          v31 = *(_OWORD *)&v28[-1].__r_.__value_.__l.__data_;
          *((_QWORD *)v30 - 1) = *((_QWORD *)&v28[-1].__r_.__value_.__l + 2);
          *(_OWORD *)(v30 - 24) = v31;
          v30 -= 24;
          v28[-1].__r_.__value_.__l.__size_ = 0;
          v28[-1].__r_.__value_.__r.__words[2] = 0;
          v28[-1].__r_.__value_.__r.__words[0] = 0;
          --v28;
        }
        while (v28 != v29);
        v32 = *(std::string **)v19;
        v28 = *(std::string **)(v19 + 8);
      }
      v33 = v27 + 24;
      *(_QWORD *)v19 = v30;
      v42.__first_ = v32;
      v42.__begin_ = v32;
      *(_QWORD *)(v19 + 8) = v27 + 24;
      v42.__end_ = v28;
      v34 = *(std::string **)(v19 + 16);
      *(_QWORD *)(v19 + 16) = &v26[24 * v25];
      v42.__end_cap_.__value_ = v34;
      std::__split_buffer<std::string>::~__split_buffer(&v42);
      *(_QWORD *)(v19 + 8) = v33;
      goto LABEL_27;
    }
LABEL_32:
    abort();
  }
  return result;
}

_DWORD **geom::straight_skeleton_evaluator<double>::best_split_event_for_vertex(unsigned int)::{lambda(unsigned int,unsigned int)#1}::operator()(_DWORD **result, unsigned int a2, unsigned int a3, double a4, double a5, float64x2_t a6)
{
  unsigned int v6;
  _DWORD **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  double v23;
  float64x2_t v24;
  uint64_t v25;

  v6 = *result[1];
  if (v6 != a2 && v6 != a3)
  {
    v9 = result;
    v10 = *result;
    v11 = *((_QWORD *)*result + 15);
    v12 = v11 + 144 * a2;
    if (*(_DWORD *)(v12 + 128))
      goto LABEL_19;
    v13 = v11 + 144 * a3;
    if (*(_DWORD *)(v13 + 128))
      goto LABEL_19;
    v14 = v11 + 144 * v6;
    if (*(_DWORD *)(v14 + 128))
      goto LABEL_19;
    *(double *)&result = COERCE_DOUBLE(geom::intersect_wavefront_edge_spoke<double>((float64x2_t *)v12, (float64x2_t *)v13, (float64x2_t *)v14, a4, a5, a6));
    if (!v15)
      return result;
    v16 = v9[2];
    v17 = *((unsigned __int8 *)v16 + 32);
    if (*((_BYTE *)v16 + 32))
    {
      if (*(double *)v16 <= *(double *)&result)
        return result;
    }
    v18 = v10[15];
    v19 = v18 + 144 * a2;
    if (*(_DWORD *)(v19 + 128) || (v20 = *v9[1], v21 = v18 + 144 * v20, *(_DWORD *)(v21 + 128)))
    {
LABEL_19:
      v25 = std::__throw_bad_variant_access[abi:nn180100]();
      *(double *)&result = COERCE_DOUBLE(std::deque<geom::straight_skeleton_evaluator<double>::edge_event,std::allocator<geom::straight_skeleton_evaluator<double>::edge_event>>::push_back(v25));
      return result;
    }
    v22 = *(_DWORD *)(v19 + 72);
    v23 = *(double *)(v21 + 32);
    if (fabs(v23) <= 1.0e-10)
      v24 = *(float64x2_t *)v21;
    else
      v24 = vmlaq_n_f64(*(float64x2_t *)v21, *(float64x2_t *)(v21 + 16), v23 * (*(double *)&result - *(double *)(v21 + 48)));
    *(double *)v16 = *(double *)&result;
    v16[2] = v22;
    v16[3] = v20;
    *((float64x2_t *)v16 + 1) = v24;
    if (!v17)
      *((_BYTE *)v16 + 32) = 1;
  }
  return result;
}

__n128 std::deque<geom::straight_skeleton_evaluator<double>::edge_event,std::allocator<geom::straight_skeleton_evaluator<double>::edge_event>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<geom::straight_skeleton_evaluator<double>::edge_event,std::allocator<geom::straight_skeleton_evaluator<double>::edge_event>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void std::deque<geom::straight_skeleton_evaluator<double>::edge_event,std::allocator<geom::straight_skeleton_evaluator<double>::edge_event>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

_OWORD *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geom::straight_skeleton_evaluator<double>::event_time_comparator &,std::__wrap_iter<std::variant<geom::straight_skeleton_evaluator<double>::edge_event,geom::straight_skeleton_evaluator<double>::split_event> *>>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = &a1[3 * v5 + 3];
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      geom::straight_skeleton_evaluator<double>::event_time((uint64_t)&a1[3 * v5 + 3]);
      v12 = v11;
      geom::straight_skeleton_evaluator<double>::event_time((uint64_t)(v8 + 3));
      if (v12 > v13)
      {
        v8 += 3;
        v9 = v10;
      }
    }
    v14 = *v8;
    v15 = v8[2];
    a1[1] = v8[1];
    a1[2] = v15;
    *a1 = v14;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

void ***geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(unsigned int)#1}::operator()(void ***result, unsigned int a2)
{
  void **v2;
  uint64_t v3;
  void ***v4;
  double v5;
  double v6;
  char *v7;
  float64x2_t *v8;
  uint64_t v9;
  double v10;
  float64x2_t v11;
  unint64_t v12;
  _OWORD *f64;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float64x2_t *v18;
  char *v19;
  char *v20;
  char *v21;
  float64x2_t v22;
  float64x2_t v23;
  char v24[32];
  int v25;
  unsigned int v26;

  v26 = a2;
  v2 = *result;
  v3 = (uint64_t)(*result)[15] + 144 * a2;
  if (*(_DWORD *)(v3 + 128))
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_29;
  }
  if (*(_DWORD *)(v3 + 68) == a2)
    return result;
  v4 = result;
  v5 = geom::straight_skeleton_evaluator<double>::time_of_joiner_vertex(*result, **(_DWORD **)(v3 + 96));
  v6 = *(double *)v4[1];
  if (v5 != v6 && vabdd_f64(v5, v6) > 1.0e-10)
  {
    v7 = (char *)*v2;
    v8 = (float64x2_t *)v2[1];
    v9 = ((char *)v8 - (_BYTE *)*v2) >> 4;
    v25 = v9;
    v10 = *(double *)(v3 + 32);
    if (fabs(v10) <= 1.0e-10)
      v11 = *(float64x2_t *)v3;
    else
      v11 = vmlaq_n_f64(*(float64x2_t *)v3, *(float64x2_t *)(v3 + 16), v10 * (v6 - *(double *)(v3 + 48)));
    v12 = (unint64_t)v2[2];
    if ((unint64_t)v8 < v12)
    {
      *v8 = v11;
      f64 = (_OWORD *)v8[1].f64;
LABEL_25:
      v2[1] = f64;
      return (void ***)geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::insert((uint64_t *)v4[2], &v26, &v25, (uint64_t)v24);
    }
    if (!((unint64_t)(v9 + 1) >> 60))
    {
      v14 = v12 - (_QWORD)v7;
      v15 = v14 >> 3;
      if (v14 >> 3 <= (unint64_t)(v9 + 1))
        v15 = v9 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
      {
        v23 = v11;
        v17 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v2 + 2), v16);
        v11 = v23;
      }
      else
      {
        v17 = 0;
      }
      v18 = (float64x2_t *)&v17[16 * v9];
      v19 = &v17[16 * v16];
      *v18 = v11;
      f64 = (_OWORD *)v18[1].f64;
      v21 = (char *)*v2;
      v20 = (char *)v2[1];
      if (v20 != *v2)
      {
        do
        {
          v22 = *((float64x2_t *)v20 - 1);
          v20 -= 16;
          v18[-1] = v22;
          --v18;
        }
        while (v20 != v21);
        v20 = (char *)*v2;
      }
      *v2 = v18;
      v2[1] = f64;
      v2[2] = v19;
      if (v20)
        operator delete(v20);
      goto LABEL_25;
    }
LABEL_29:
    abort();
  }
  v25 = **(_DWORD **)(v3 + 96);
  return (void ***)geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::insert((uint64_t *)v4[2], &v26, &v25, (uint64_t)v24);
}

void geom::straight_skeleton_evaluator<double>::add_joiner_patch_to_time(double)::{lambda(unsigned int,unsigned int)#1}::operator()(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  char *v15;
  char **v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;

  v69 = a3;
  v70 = a2;
  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD *)(*a1 + 120);
  v5 = v4 + 144 * a2;
  if (*(_DWORD *)(v5 + 128) || (v6 = v4 + 144 * a3, *(_DWORD *)(v6 + 128)))
  {
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_94;
  }
  v8 = (_QWORD *)a1[1];
  v9 = *(_DWORD *)(v8[1]
                 + 8
                 * geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::find_internal(v8, &v70)+ 4);
  v10 = *(_DWORD *)(*(_QWORD *)(v5 + 104) - 4);
  v11 = (_QWORD *)a1[1];
  v12 = *(_DWORD *)(v11[1]
                  + 8
                  * geom::hash_brown<unsigned int,unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>>::find_internal(v11, &v69)+ 4);
  v13 = **(_DWORD **)(v6 + 96);
  if (v9 != v10 || v12 != v13)
  {
    v16 = (char **)(v3 + 5);
    v15 = (char *)v3[5];
    v17 = (char *)v3[4];
    if (v17 >= v15)
    {
      v19 = (_BYTE *)v3[3];
      v20 = (v17 - v19) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        goto LABEL_94;
      v22 = v15 - v19;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v23);
        v19 = (_BYTE *)v3[3];
        v17 = (char *)v3[4];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      v15 = &v24[4 * v23];
      *(_DWORD *)v25 = v9;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      v3[3] = v25;
      v3[4] = v18;
      v3[5] = v15;
      if (v19)
      {
        operator delete(v19);
        v15 = *v16;
      }
    }
    else
    {
      *(_DWORD *)v17 = v9;
      v18 = v17 + 4;
    }
    v3[4] = v18;
    if (v9 != v10)
    {
      if (v18 >= v15)
      {
        v28 = (_BYTE *)v3[3];
        v29 = (v18 - v28) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          goto LABEL_94;
        v31 = v15 - v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v32);
          v28 = (_BYTE *)v3[3];
          v18 = (char *)v3[4];
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        v15 = &v33[4 * v32];
        *(_DWORD *)v34 = v10;
        v27 = v34 + 4;
        while (v18 != v28)
        {
          v35 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        v3[3] = v34;
        v3[4] = v27;
        v3[5] = v15;
        if (v28)
        {
          operator delete(v28);
          v15 = *v16;
        }
      }
      else
      {
        *(_DWORD *)v18 = v10;
        v27 = v18 + 4;
      }
      v3[4] = v27;
      v18 = v27;
    }
    if (v18 >= v15)
    {
      v37 = (_BYTE *)v3[3];
      v38 = (v18 - v37) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        goto LABEL_94;
      v40 = v15 - v37;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v41);
        v37 = (_BYTE *)v3[3];
        v18 = (char *)v3[4];
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[4 * v38];
      v44 = &v42[4 * v41];
      *(_DWORD *)v43 = v13;
      v36 = v43 + 4;
      while (v18 != v37)
      {
        v45 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v43 - 1) = v45;
        v43 -= 4;
      }
      v3[3] = v43;
      v3[4] = v36;
      v3[5] = v44;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_DWORD *)v18 = v13;
      v36 = v18 + 4;
    }
    v3[4] = v36;
    if (v12 != v13)
    {
      if (v36 >= *v16)
      {
        v47 = (char *)v3[3];
        v48 = (v36 - v47) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
          goto LABEL_94;
        v50 = *v16 - v47;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 5), v51);
          v47 = (char *)v3[3];
          v36 = (char *)v3[4];
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[4 * v48];
        v54 = &v52[4 * v51];
        *(_DWORD *)v53 = v12;
        v46 = v53 + 4;
        while (v36 != v47)
        {
          v55 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v53 - 1) = v55;
          v53 -= 4;
        }
        v3[3] = v53;
        v3[4] = v46;
        v3[5] = v54;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_DWORD *)v36 = v12;
        v46 = v36 + 4;
      }
      v3[4] = v46;
      v36 = v46;
    }
    v56 = v3[8];
    v57 = (unint64_t)&v36[-v3[3]] >> 2;
    v58 = (char *)v3[7];
    if ((unint64_t)v58 < v56)
    {
      *(_DWORD *)v58 = v57;
      v59 = v58 + 4;
LABEL_91:
      v3[7] = v59;
      return;
    }
    v60 = (char *)v3[6];
    v61 = (v58 - v60) >> 2;
    v62 = v61 + 1;
    if (!((unint64_t)(v61 + 1) >> 62))
    {
      v63 = v56 - (_QWORD)v60;
      if (v63 >> 1 > v62)
        v62 = v63 >> 1;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
        v64 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 8), v64);
        v60 = (char *)v3[6];
        v58 = (char *)v3[7];
      }
      else
      {
        v65 = 0;
      }
      v66 = &v65[4 * v61];
      v67 = &v65[4 * v64];
      *(_DWORD *)v66 = v57;
      v59 = v66 + 4;
      while (v58 != v60)
      {
        v68 = *((_DWORD *)v58 - 1);
        v58 -= 4;
        *((_DWORD *)v66 - 1) = v68;
        v66 -= 4;
      }
      v3[6] = v66;
      v3[7] = v59;
      v3[8] = v67;
      if (v60)
        operator delete(v60);
      goto LABEL_91;
    }
LABEL_94:
    abort();
  }
}

uint64_t geom::collection_to_vector<float>(uint64_t a1)
{
  return a1 + 16;
}

uint64_t geom::collection_data<float>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom::collection_size<float>(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
}

uint64_t geom::collection_size<double>(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3;
}

uint64_t geom::collection_size<unsigned short>(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 1;
}

uint64_t geom::collection_size<signed char>(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t _ZN4geom15collection_sizeIDv3_fEEmNS_8internal15collection_typeIT_E5valueE(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 4;
}

uint64_t _ZN4geom15collection_sizeIDv3_dEEmNS_8internal15collection_typeIT_E5valueE(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 5;
}

void geom::collection_resize<float>(uint64_t a1, unint64_t a2)
{
  std::vector<float>::resize(a1 + 16, a2);
}

void geom::collection_resize<double>(uint64_t a1, unint64_t a2)
{
  std::vector<double>::resize(a1 + 16, a2);
}

void geom::collection_resize<unsigned short>(uint64_t a1, unint64_t a2)
{
  std::vector<unsigned short>::resize(a1 + 16, a2);
}

void geom::collection_resize<unsigned int>(uint64_t a1, std::vector<int>::size_type a2)
{
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 16), a2);
}

void geom::collection_resize<signed char>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  size_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24) - v2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 16), v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 24) = v2 + a2;
  }
}

void _ZN4geom17collection_resizeIDv2_fEEvNS_8internal15collection_typeIT_E5valueEm(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

void _ZN4geom17collection_resizeIDv3_fEEvNS_8internal15collection_typeIT_E5valueEm(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

void _ZN4geom17collection_resizeIDv3_dEEvNS_8internal15collection_typeIT_E5valueEm(uint64_t a1, unint64_t a2)
{
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a1 + 16, a2);
}

_QWORD *geom::custom_allocator<float>::custom_allocator(_QWORD *result)
{
  uint64_t v1;

  v1 = MEMORY[0x24BDAE450];
  *result = MEMORY[0x24BDAED08];
  result[1] = v1;
  return result;
}

_QWORD *geom::custom_allocator<float>::custom_allocator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t geom::custom_allocator<float>::allocate(uint64_t (**a1)(uint64_t), unint64_t a2)
{
  if (a2 >> 62)
    return 0;
  else
    return (*a1)(4 * a2);
}

uint64_t geom::custom_allocator<float>::deallocate(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t geom::custom_allocator<double>::allocate(uint64_t (**a1)(uint64_t), unint64_t a2)
{
  if (a2 >> 61)
    return 0;
  else
    return (*a1)(8 * a2);
}

uint64_t geom::custom_allocator<unsigned short>::allocate(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  if (a2 < 0)
    return 0;
  else
    return (*a1)(2 * a2);
}

uint64_t geom::custom_allocator<signed char>::allocate(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t _ZN4geom16custom_allocatorIDv3_fE8allocateEm(uint64_t (**a1)(uint64_t), unint64_t a2)
{
  if (a2 >> 60)
    return 0;
  else
    return (*a1)(16 * a2);
}

uint64_t _ZN4geom16custom_allocatorIDv3_dE8allocateEm(uint64_t (**a1)(uint64_t), unint64_t a2)
{
  if (a2 >> 59)
    return 0;
  else
    return (*a1)(32 * a2);
}

void geom::refine_triangle_mesh<float>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, char **a5, _QWORD *a6, uint64_t *a7)
{
  unsigned int *v8;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float32x4_t *v42;
  char *v43;
  char *v44;
  float32x4_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  void **v56;
  void *v57;
  unint64_t i;
  uint64_t v59;
  char **v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int *v78;
  uint64_t v79;
  char **v80;
  unsigned int *v81;
  unsigned int *v82;
  int v83;
  uint64_t v84;
  unsigned int *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v96;
  float32x4_t v97;
  uint64_t v98;
  unsigned int *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD v105[2];
  void *__p;
  void *v107;
  void *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD v115[3];

  v8 = a4;
  a5[1] = *a5;
  a6[1] = *a6;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v115[0] = 0;
  v115[1] = 0;
  v113 = 0;
  v114 = v115;
  v11 = (int *)a7[9];
  v12 = a7[10] - (_QWORD)v11;
  if (v12)
  {
    v13 = v12 >> 2;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    do
    {
      v15 = *v11++;
      v16 = &v8[3 * v15];
      --v14;
    }
    while (v14);
  }
  else if (a3)
  {
    v17 = a4 + 2;
    v18 = a3;
    do
    {
      v17 += 3;
      --v18;
    }
    while (v18);
  }
  a5[1] = *a5;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)a5, a1 + ((unint64_t)(v112 - v111) >> 3));
  if (a1)
  {
    v19 = 0;
    v20 = a5 + 2;
    v21 = a5[1];
    do
    {
      if ((unint64_t)v21 >= *v20)
      {
        v22 = (v21 - *a5) >> 4;
        if ((unint64_t)(v22 + 1) >> 60)
LABEL_99:
          abort();
        v23 = *v20 - (_QWORD)*a5;
        v24 = v23 >> 3;
        if (v23 >> 3 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a5 + 2), v25);
        else
          v26 = 0;
        v27 = &v26[16 * v22];
        *(_OWORD *)v27 = *(_OWORD *)(a2 + 16 * v19);
        v21 = v27 + 16;
        v29 = *a5;
        v28 = a5[1];
        if (v28 != *a5)
        {
          do
          {
            v30 = *((_OWORD *)v28 - 1);
            v28 -= 16;
            *((_OWORD *)v27 - 1) = v30;
            v27 -= 16;
          }
          while (v28 != v29);
          v28 = *a5;
        }
        *a5 = v27;
        a5[1] = v21;
        a5[2] = &v26[16 * v25];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_OWORD *)v21 = *(_OWORD *)(a2 + 16 * v19);
        v21 += 16;
      }
      a5[1] = v21;
      ++v19;
    }
    while (v19 != a1);
  }
  v31 = v111;
  if (((v112 - v111) & 0x7FFFFFFF8) != 0)
  {
    v32 = 0;
    v33 = a5 + 2;
    v34 = (float32x4_t *)a5[1];
    v35.i64[0] = 0x3F0000003F000000;
    v35.i64[1] = 0x3F0000003F000000;
    do
    {
      v36 = vmulq_f32(vaddq_f32(*(float32x4_t *)(a2 + 16 * *(unsigned int *)(v31 + 4 * (2 * v32))), *(float32x4_t *)(a2 + 16 * *(unsigned int *)(v31 + 4 * ((2 * (_DWORD)v32) | 1u)))), v35);
      if ((unint64_t)v34 >= *v33)
      {
        v37 = ((char *)v34 - *a5) >> 4;
        if ((unint64_t)(v37 + 1) >> 60)
          goto LABEL_99;
        v38 = *v33 - (_QWORD)*a5;
        v39 = v38 >> 3;
        if (v38 >> 3 <= (unint64_t)(v37 + 1))
          v39 = v37 + 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        if (v40)
        {
          v97 = v36;
          v41 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a5 + 2), v40);
          v36 = v97;
        }
        else
        {
          v41 = 0;
        }
        v42 = (float32x4_t *)&v41[16 * v37];
        *v42 = v36;
        v34 = v42 + 1;
        v44 = *a5;
        v43 = a5[1];
        if (v43 != *a5)
        {
          do
          {
            v45 = *((float32x4_t *)v43 - 1);
            v43 -= 16;
            v42[-1] = v45;
            --v42;
          }
          while (v43 != v44);
          v43 = *a5;
        }
        *a5 = (char *)v42;
        a5[1] = (char *)v34;
        a5[2] = &v41[16 * v40];
        if (v43)
          operator delete(v43);
        v35.i64[0] = 0x3F0000003F000000;
        v35.i64[1] = 0x3F0000003F000000;
      }
      else
      {
        *v34++ = v36;
      }
      a5[1] = (char *)v34;
      ++v32;
      v31 = v111;
    }
    while (v32 < ((unint64_t)(v112 - v111) >> 3));
  }
  v46 = a7[1];
  v47 = v46 - *a7;
  v48 = v47 >> 3;
  if ((v47 >> 3))
  {
    v50 = a7[3];
    v49 = a7[4];
    if (v46 == *a7)
      v51 = 0;
    else
      v51 = *a7;
    v52 = (v47 >> 3);
    if (v49 == v50)
      v53 = 0;
    else
      v53 = (unsigned int *)a7[3];
    if (a7[7] == a7[6])
      v54 = 0;
    else
      v54 = (unsigned int *)a7[6];
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v55 = a7[13];
    v92 = v51;
    v98 = v49;
    v88 = v49 - v50;
    v89 = v50;
    if (v55)
    {
      v56 = (void **)geom::collection_to_vector<float>(v55);
      v57 = *v56;
    }
    else
    {
      v57 = 0;
      v56 = &v107;
    }
    v90 = (uint64_t)v56;
    v56[1] = v57;
    v59 = geom::collection_to_vector<float>(a7[12]);
    v60 = (char **)v59;
    v61 = *(char **)v59;
    *(_QWORD *)(v59 + 8) = *(_QWORD *)v59;
    v91 = v52;
    if (v52)
    {
      v62 = (_QWORD *)(v59 + 16);
      v63 = (_QWORD *)v92;
      do
      {
        if ((unint64_t)v61 >= *v62)
        {
          v64 = (v61 - *v60) >> 3;
          if ((unint64_t)(v64 + 1) >> 61)
            goto LABEL_99;
          v65 = *v62 - (_QWORD)*v60;
          v66 = v65 >> 2;
          if (v65 >> 2 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v67 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          if (v67)
            v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v60 + 2), v67);
          else
            v68 = 0;
          v69 = &v68[8 * v64];
          *(_QWORD *)v69 = *v63;
          v61 = v69 + 8;
          v71 = *v60;
          v70 = v60[1];
          if (v70 != *v60)
          {
            do
            {
              v72 = *((_QWORD *)v70 - 1);
              v70 -= 8;
              *((_QWORD *)v69 - 1) = v72;
              v69 -= 8;
            }
            while (v70 != v71);
            v70 = *v60;
          }
          *v60 = v69;
          v60[1] = v61;
          v60[2] = &v68[8 * v67];
          if (v70)
            operator delete(v70);
        }
        else
        {
          *(_QWORD *)v61 = *v63;
          v61 += 8;
        }
        v60[1] = v61;
        ++v63;
      }
      while (v63 != (_QWORD *)(v92 + 8 * v91));
    }
    v96 = (_QWORD *)geom::collection_to_vector<float>(a7[14]);
    v96[1] = *v96;
    LOBYTE(v100) = 0;
    std::vector<BOOL>::vector(&__p, a3, (unsigned __int8 *)&v100);
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v105[0] = 0;
    v105[1] = 0;
    v103 = 0;
    v104 = v105;
    v73 = (uint64_t)a6;
    v74 = v8;
    v75 = a1;
    if (v98 != v89)
    {
      if ((unint64_t)(v88 >> 2) <= 1)
        v76 = 1;
      else
        v76 = v88 >> 2;
      do
      {
        v99 = v54;
        v77 = *v53;
        *(_QWORD *)((char *)__p + (((unint64_t)*v53 >> 3) & 0x1FFFFFF8)) |= 1 << *v53;
        v87 = (uint64_t)v60;
        v78 = v54;
        v79 = v73;
        v80 = v60;
        v81 = v53 + 1;
        v82 = v74;
        geom::refine_triangle_with_uvs(&v74[3 * v77], v75, (geom::_anonymous_namespace_::edge_vertex_map *)&v110, v92, v91, v78, v48, (uint64_t)&v100, v73, v90, v87, (uint64_t)v96);
        v74 = v82;
        v53 = v81;
        v60 = v80;
        v73 = v79;
        v54 = v99 + 3;
        --v76;
      }
      while (v76);
    }
    if (a3)
    {
      v83 = v75;
      v84 = v73;
      v85 = v74;
      v86 = 0;
      do
      {
        if (((*(_QWORD *)((char *)__p + ((v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v86) & 1) == 0)
        ++v86;
        v85 += 3;
      }
      while (a3 != v86);
    }
    if (__p)
      operator delete(__p);
    if (v107)
    {
      v108 = v107;
      operator delete(v107);
    }
  }
  else
  {
    for (i = a3; i; --i)
    {
      v8 += 3;
    }
  }
}

uint64_t geom::refine_triangle_mesh_options<float>::refinement_face_subset_data(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 72))
    return 0;
  else
    return *(_QWORD *)(a1 + 72);
}

uint64_t geom::refine_triangle_mesh_options<float>::uv_values_count(_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 3;
}

uint64_t geom::refine_triangle_mesh_options<float>::uv_values_data(_QWORD *a1)
{
  if (a1[1] == *a1)
    return 0;
  else
    return *a1;
}

uint64_t geom::refine_triangle_mesh_options<float>::triangles_with_uvs_data(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return 0;
  else
    return *(_QWORD *)(a1 + 24);
}

uint64_t geom::refine_triangle_mesh_options<float>::triangle_uv_indices_data(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48))
    return 0;
  else
    return *(_QWORD *)(a1 + 48);
}

uint64_t geom::refine_triangle_mesh_options<float>::get_output_triangles_with_uvs_collection(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t geom::refine_triangle_mesh_options<float>::get_output_uv_value_collection(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t geom::refine_triangle_mesh_options<float>::get_output_triangle_uv_indices_collection(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void geom::refine_triangle_with_uvs(unsigned int *a1, int a2, geom::_anonymous_namespace_::edge_vertex_map *this, uint64_t a4, uint64_t a5, unsigned int *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int *v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char **v26;
  unsigned int *v27;
  char *v28;
  char **v29;
  unsigned int *v30;
  char *v31;
  char **v32;
  unsigned int *v33;
  char *v34;
  char **v35;
  unsigned int *v36;
  char *v37;
  char **v38;
  unsigned int *v39;
  char *v40;
  char **v41;
  unsigned int *v42;
  char *v43;
  unsigned int *v44;
  char *v45;
  char **v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  unsigned int *v89;
  unsigned int v90;
  int v91;
  unsigned int *v92;
  unsigned int *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  unsigned int *v126;
  unsigned int v127;
  int v128;
  unsigned int *v129;
  unsigned int *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  int v155;
  _DWORD *v156;
  unsigned int *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  unsigned int *v163;
  unsigned int v164;
  _DWORD *v165;
  unsigned int *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  unsigned int *v172;
  unsigned int v173;
  _DWORD *v174;
  unsigned int *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  unsigned int *v181;
  unsigned int v182;
  _DWORD *v183;
  unsigned int *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  unsigned int *v190;
  unsigned int v191;
  _DWORD *v192;
  unsigned int *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  int v200;
  _DWORD *v201;
  unsigned int *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  unsigned int *v208;
  unsigned int v209;
  _DWORD *v210;
  unsigned int *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  int v218;
  _DWORD *v219;
  unsigned int *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  int v228;
  unint64_t v229;
  _DWORD *v230;
  _DWORD *v231;
  _DWORD *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  unsigned int *v238;
  char *v239;
  unsigned int v240;
  int v241;
  unint64_t v242;
  _DWORD *v243;
  _DWORD *v244;
  _DWORD *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  int v253;
  unint64_t v254;
  _DWORD *v255;
  _DWORD *v256;
  _DWORD *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  int v265;
  unint64_t v266;
  _DWORD *v267;
  _DWORD *v268;
  _DWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  char *v276;
  int v277;
  unint64_t v278;
  _DWORD *v279;
  _DWORD *v280;
  _DWORD *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  unsigned int *v287;
  char *v288;
  unsigned int v289;
  unint64_t v290;
  _DWORD *v291;
  _DWORD *v292;
  _DWORD *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  unsigned int *v299;
  char *v300;
  unsigned int v301;
  unint64_t v302;
  _DWORD *v303;
  _DWORD *v304;
  _DWORD *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char *v310;
  unsigned int *v311;
  char *v312;
  unsigned int v313;
  unint64_t v314;
  _DWORD *v315;
  _DWORD *v316;
  _DWORD *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  int v325;
  char *v326;
  char **v327;
  unsigned int *v328;
  unsigned int *v329;
  int *v330;
  int *v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  char *v336;
  char *v337;
  char *v338;
  int v339;
  char *v340;
  char **v341;
  unsigned int *v342;
  int *v343;
  int *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  int v352;
  char *v353;
  char **v354;
  unsigned int *v355;
  int *v356;
  int *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  int v365;
  char *v366;
  char **v367;
  unsigned int *v368;
  int *v369;
  int *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  char *v375;
  char *v376;
  char *v377;
  int v378;
  char *v379;
  char **v380;
  unsigned int *v381;
  int *v382;
  int *v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  char *v388;
  char *v389;
  char *v390;
  int v391;
  char *v392;
  char **v393;
  unsigned int *v394;
  int *v395;
  int *v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  char *v401;
  char *v402;
  char *v403;
  int v404;
  char *v405;
  unsigned int *v406;
  int *v407;
  int *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char *v413;
  char *v414;
  char *v415;
  int v416;
  char *v417;
  char **v418;
  unsigned int *v419;
  int *v420;
  int *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  unsigned int *v427;
  unsigned int v428;
  int *v429;
  int *v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  char *v435;
  unsigned int *v436;
  unsigned int v437;
  int *v438;
  int *v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  char *v444;
  unsigned int *v445;
  unsigned int v446;
  int *v447;
  int *v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  char *v453;
  unsigned int *v454;
  unsigned int v455;
  int v456;
  int *v457;
  int *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  char *v463;
  unsigned int *v464;
  unsigned int v465;
  int *v466;
  int *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  unint64_t v471;
  char *v472;
  unsigned int *v473;
  unsigned int v474;
  int *v475;
  int *v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t v480;
  char *v481;
  unsigned int *v482;
  unsigned int v483;
  int *v484;
  int *v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  char *v490;
  unsigned int *v491;
  unsigned int v492;
  int *v493;
  int *v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  char *v499;
  char *v500;
  int v501;
  _DWORD *v502;
  int *v503;
  uint64_t v504;
  unint64_t v505;
  uint64_t v506;
  unint64_t v507;
  char *v508;
  int *v509;
  int v510;
  _DWORD *v511;
  int *v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  unint64_t v516;
  char *v517;
  int *v518;
  int v519;
  _DWORD *v520;
  int *v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  char *v526;
  int *v527;
  int v528;
  _DWORD *v529;
  int *v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  unint64_t v534;
  char *v535;
  int *v536;
  int v537;
  _DWORD *v538;
  int *v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  unint64_t v543;
  char *v544;
  char *v545;
  int v546;
  _DWORD *v547;
  int *v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  char *v553;
  int *v554;
  int v555;
  _DWORD *v556;
  int *v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  unint64_t v561;
  char *v562;
  char *v563;
  int v564;
  _DWORD *v565;
  int *v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  char *v571;
  int *v572;
  char *v573;
  int v574;
  char *v575;
  char *v576;
  int v577;
  char *v578;
  unsigned int *v579;
  unsigned int *v580;
  unsigned int *v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  char *v586;
  char *v587;
  char *v588;
  int v589;
  char *v590;
  unsigned int *v591;
  unsigned int *v592;
  unsigned int *v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  char *v600;
  int v601;
  char *v602;
  unsigned int *v603;
  unsigned int *v604;
  unsigned int *v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  char *v610;
  char *v611;
  char *v612;
  int v613;
  char *v614;
  unsigned int *v615;
  char **v616;
  int v617;
  unsigned int *v618;
  unsigned int *v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  unint64_t v623;
  char *v624;
  int *v625;
  char *v626;
  int v627;
  char *v628;
  unsigned int *v629;
  unsigned int *v630;
  unsigned int *v631;
  uint64_t v632;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  char *v636;
  int *v637;
  char *v638;
  int v639;
  char *v640;
  unsigned int *v641;
  int v642;
  int v643;
  unsigned int *v644;
  unsigned int *v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  unint64_t v649;
  char *v650;
  int *v651;
  char *v652;
  int v653;
  char *v654;
  unsigned int *v655;
  unsigned int *v656;
  unsigned int *v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t v661;
  char *v662;
  char *v663;
  int v664;
  char **v665;
  int v666;
  unsigned int *v667;
  unsigned int *v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  unint64_t v672;
  char *v673;
  char *v674;
  int v675;
  unsigned int *v676;
  unsigned int *v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  unint64_t v681;
  char *v682;
  unsigned int *v683;
  unsigned int v684;
  unsigned int *v685;
  unsigned int *v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  char *v691;
  char *v692;
  int v693;
  unsigned int *v694;
  unsigned int *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unint64_t v699;
  char *v700;
  char *v701;
  int v702;
  unsigned int *v703;
  unsigned int *v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  char *v709;
  char *v710;
  int v711;
  unsigned int *v712;
  unsigned int *v713;
  uint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unint64_t v717;
  char *v718;
  unsigned int *v719;
  unsigned int v720;
  unsigned int *v721;
  unsigned int *v722;
  uint64_t v723;
  unint64_t v724;
  uint64_t v725;
  unint64_t v726;
  char *v727;
  unsigned int *v728;
  unsigned int v729;
  _DWORD *v730;
  unsigned int *v731;
  uint64_t v732;
  unint64_t v733;
  uint64_t v734;
  unint64_t v735;
  char *v736;
  char *v737;
  int v738;
  _DWORD *v739;
  unsigned int *v740;
  uint64_t v741;
  unint64_t v742;
  uint64_t v743;
  unint64_t v744;
  char *v745;
  char *v746;
  int v747;
  _DWORD *v748;
  unsigned int *v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  unint64_t v753;
  char *v754;
  unsigned int *v755;
  unsigned int v756;
  int v757;
  char **v758;
  _DWORD *v759;
  int v760;
  unsigned int *v761;
  uint64_t v762;
  unint64_t v763;
  uint64_t v764;
  unint64_t v765;
  char *v766;
  char *v767;
  int v768;
  _DWORD *v769;
  int v770;
  unsigned int *v771;
  uint64_t v772;
  unint64_t v773;
  uint64_t v774;
  unint64_t v775;
  char *v776;
  unsigned int *v777;
  unsigned int v778;
  _DWORD *v779;
  unsigned int *v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  char *v785;
  unsigned int *v786;
  unsigned int v787;
  _DWORD *v788;
  unsigned int *v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  unint64_t v793;
  char *v794;
  unsigned int *v795;
  char *v796;
  unsigned int v797;
  int v798;
  int v799;
  unint64_t v800;
  _DWORD *v801;
  char **v802;
  _DWORD *v803;
  int v804;
  _DWORD *v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  unint64_t v809;
  char *v810;
  unsigned int *v811;
  char *v812;
  unsigned int v813;
  int v814;
  unint64_t v815;
  _DWORD *v816;
  _DWORD *v817;
  _DWORD *v818;
  uint64_t v819;
  unint64_t v820;
  uint64_t v821;
  unint64_t v822;
  char *v823;
  unsigned int *v824;
  char *v825;
  unsigned int v826;
  int v827;
  unint64_t v828;
  _DWORD *v829;
  _DWORD *v830;
  _DWORD *v831;
  uint64_t v832;
  unint64_t v833;
  uint64_t v834;
  unint64_t v835;
  char *v836;
  unsigned int *v837;
  char *v838;
  unsigned int v839;
  int v840;
  unint64_t v841;
  _DWORD *v842;
  _DWORD *v843;
  _DWORD *v844;
  uint64_t v845;
  unint64_t v846;
  uint64_t v847;
  unint64_t v848;
  char *v849;
  unsigned int *v850;
  char *v851;
  unsigned int v852;
  int v853;
  unint64_t v854;
  _DWORD *v855;
  _DWORD *v856;
  _DWORD *v857;
  uint64_t v858;
  unint64_t v859;
  uint64_t v860;
  unint64_t v861;
  char *v862;
  unsigned int *v863;
  char *v864;
  unsigned int v865;
  int v866;
  unint64_t v867;
  _DWORD *v868;
  _DWORD *v869;
  _DWORD *v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  unint64_t v874;
  char *v875;
  unsigned int *v876;
  char *v877;
  unsigned int v878;
  int v879;
  unint64_t v880;
  _DWORD *v881;
  _DWORD *v882;
  _DWORD *v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  unint64_t v887;
  char *v888;
  char *v889;
  char *v890;
  int v891;
  char *v892;
  int *v893;
  int *v894;
  int *v895;
  uint64_t v896;
  unint64_t v897;
  uint64_t v898;
  unint64_t v899;
  char *v900;
  char *v901;
  char *v902;
  int v903;
  char *v904;
  int *v905;
  unsigned int *v906;
  int *v907;
  int *v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t v911;
  unint64_t v912;
  char *v913;
  char *v914;
  char *v915;
  int v916;
  char *v917;
  unsigned int *v918;
  unsigned int *v919;
  int *v920;
  int *v921;
  uint64_t v922;
  unint64_t v923;
  uint64_t v924;
  unint64_t v925;
  char *v926;
  char *v927;
  char *v928;
  int v929;
  char *v930;
  int *v931;
  int *v932;
  int *v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  unint64_t v937;
  char *v938;
  char *v939;
  char *v940;
  int v941;
  char *v942;
  int *v943;
  unsigned int *v944;
  int *v945;
  int *v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unint64_t v950;
  char *v951;
  char *v952;
  char *v953;
  int v954;
  char *v955;
  int *v956;
  int *v957;
  int *v958;
  uint64_t v959;
  unint64_t v960;
  uint64_t v961;
  unint64_t v962;
  char *v963;
  char *v964;
  char *v965;
  int v966;
  char *v967;
  unsigned int *v968;
  int *v969;
  int *v970;
  uint64_t v971;
  unint64_t v972;
  uint64_t v973;
  unint64_t v974;
  char *v975;
  char *v976;
  int v977;
  int *v978;
  int *v979;
  uint64_t v980;
  unint64_t v981;
  uint64_t v982;
  unint64_t v983;
  char *v984;
  char *v985;
  int v986;
  int *v987;
  int *v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  unint64_t v992;
  char *v993;
  unsigned int *v994;
  unsigned int v995;
  int *v996;
  int *v997;
  uint64_t v998;
  unint64_t v999;
  uint64_t v1000;
  unint64_t v1001;
  char *v1002;
  char *v1003;
  int v1004;
  int *v1005;
  int *v1006;
  uint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  char *v1011;
  char *v1012;
  int v1013;
  int *v1014;
  int v1015;
  int *v1016;
  uint64_t v1017;
  unint64_t v1018;
  uint64_t v1019;
  unint64_t v1020;
  char *v1021;
  char *v1022;
  int v1023;
  int *v1024;
  int *v1025;
  uint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  char *v1030;
  unsigned int *v1031;
  unsigned int v1032;
  int *v1033;
  int *v1034;
  uint64_t v1035;
  unint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  char *v1039;
  int *v1040;
  int v1041;
  _DWORD *v1042;
  int *v1043;
  uint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  unint64_t v1047;
  char *v1048;
  char *v1049;
  int v1050;
  _DWORD *v1051;
  int *v1052;
  uint64_t v1053;
  unint64_t v1054;
  uint64_t v1055;
  unint64_t v1056;
  char *v1057;
  char *v1058;
  int v1059;
  uint64_t v1060;
  unint64_t v1061;
  uint64_t v1062;
  unint64_t v1063;
  char *v1064;
  int *v1065;
  int v1066;
  _DWORD *v1067;
  int *v1068;
  uint64_t v1069;
  unint64_t v1070;
  uint64_t v1071;
  unint64_t v1072;
  char *v1073;
  char *v1074;
  int v1075;
  int *v1076;
  int v1077;
  _DWORD *v1078;
  int *v1079;
  uint64_t v1080;
  unint64_t v1081;
  uint64_t v1082;
  unint64_t v1083;
  char *v1084;
  int *v1085;
  int v1086;
  _DWORD *v1087;
  int *v1088;
  uint64_t v1089;
  unint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  char *v1093;
  char *v1094;
  char *v1095;
  int v1096;
  char *v1097;
  unsigned int *v1098;
  unsigned int *v1099;
  unsigned int *v1100;
  uint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  char *v1105;
  int *v1106;
  char *v1107;
  _DWORD *v1108;
  int v1109;
  int v1110;
  char *v1111;
  char *v1112;
  int v1113;
  char *v1114;
  unsigned int *v1115;
  unsigned int *v1116;
  unsigned int *v1117;
  uint64_t v1118;
  unint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  char *v1122;
  uint64_t v1123;
  unint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  char *v1127;
  int *v1128;
  char *v1129;
  int v1130;
  char *v1131;
  unsigned int *v1132;
  unsigned int *v1133;
  unsigned int *v1134;
  uint64_t v1135;
  unint64_t v1136;
  uint64_t v1137;
  unint64_t v1138;
  char *v1139;
  int *v1140;
  char *v1141;
  int v1142;
  char *v1143;
  unsigned int *v1144;
  unsigned int *v1145;
  unsigned int *v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  unint64_t v1150;
  char *v1151;
  char *v1152;
  int v1153;
  unsigned int *v1154;
  unsigned int *v1155;
  uint64_t v1156;
  unint64_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  char *v1160;
  char *v1161;
  int v1162;
  unsigned int *v1163;
  unsigned int *v1164;
  uint64_t v1165;
  unint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  char *v1169;
  int v1170;
  char *v1171;
  int v1172;
  unsigned int *v1173;
  unsigned int *v1174;
  uint64_t v1175;
  unint64_t v1176;
  uint64_t v1177;
  unint64_t v1178;
  char *v1179;
  char *v1180;
  int v1181;
  unsigned int *v1182;
  unsigned int *v1183;
  uint64_t v1184;
  unint64_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  char *v1188;
  unsigned int *v1189;
  unsigned int v1190;
  _DWORD *v1191;
  unsigned int *v1192;
  uint64_t v1193;
  unint64_t v1194;
  uint64_t v1195;
  unint64_t v1196;
  char *v1197;
  unsigned int *v1198;
  unsigned int v1199;
  _DWORD *v1200;
  unsigned int *v1201;
  uint64_t v1202;
  unint64_t v1203;
  uint64_t v1204;
  unint64_t v1205;
  char *v1206;
  char *v1207;
  int v1208;
  _DWORD *v1209;
  unsigned int *v1210;
  uint64_t v1211;
  unint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  char *v1215;
  unsigned int *v1216;
  unsigned int v1217;
  _DWORD *v1218;
  unsigned int *v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  unint64_t v1223;
  char *v1224;
  unsigned int *v1225;
  char *v1226;
  unsigned int v1227;
  int v1228;
  unint64_t v1229;
  _DWORD *v1230;
  _DWORD *v1231;
  _DWORD *v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  char *v1237;
  unsigned int *v1238;
  char *v1239;
  unsigned int v1240;
  int v1241;
  unint64_t v1242;
  _DWORD *v1243;
  _DWORD *v1244;
  _DWORD *v1245;
  uint64_t v1246;
  unint64_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  char *v1250;
  unsigned int *v1251;
  char *v1252;
  unsigned int v1253;
  int v1254;
  unint64_t v1255;
  _DWORD *v1256;
  _DWORD *v1257;
  _DWORD *v1258;
  uint64_t v1259;
  unint64_t v1260;
  uint64_t v1261;
  unint64_t v1262;
  char *v1263;
  unsigned int *v1264;
  char *v1265;
  unsigned int v1266;
  int v1267;
  unint64_t v1268;
  _DWORD *v1269;
  _DWORD *v1270;
  _DWORD *v1271;
  uint64_t v1272;
  unint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  char *v1276;
  char *v1277;
  char *v1278;
  int v1279;
  char *v1280;
  int *v1281;
  int *v1282;
  int *v1283;
  uint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  unint64_t v1287;
  char *v1288;
  char *v1289;
  char *v1290;
  int v1291;
  char *v1292;
  int *v1293;
  int *v1294;
  int *v1295;
  uint64_t v1296;
  unint64_t v1297;
  uint64_t v1298;
  unint64_t v1299;
  char *v1300;
  char *v1301;
  char *v1302;
  int v1303;
  char *v1304;
  int *v1305;
  unsigned int *v1306;
  int *v1307;
  int *v1308;
  uint64_t v1309;
  unint64_t v1310;
  uint64_t v1311;
  unint64_t v1312;
  char *v1313;
  char *v1314;
  char *v1315;
  int v1316;
  char *v1317;
  int *v1318;
  int *v1319;
  int *v1320;
  uint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  char *v1325;
  char *v1326;
  int v1327;
  int *v1328;
  int *v1329;
  uint64_t v1330;
  unint64_t v1331;
  uint64_t v1332;
  unint64_t v1333;
  char *v1334;
  char *v1335;
  int v1336;
  int *v1337;
  int *v1338;
  uint64_t v1339;
  unint64_t v1340;
  uint64_t v1341;
  unint64_t v1342;
  char *v1343;
  char *v1344;
  int v1345;
  int *v1346;
  int *v1347;
  uint64_t v1348;
  unint64_t v1349;
  uint64_t v1350;
  unint64_t v1351;
  char *v1352;
  char *v1353;
  int v1354;
  int *v1355;
  uint64_t v1356;
  unint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  char *v1360;
  char *v1361;
  int v1362;
  _DWORD *v1363;
  int *v1364;
  uint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  unint64_t v1368;
  char *v1369;
  char *v1370;
  int v1371;
  uint64_t v1372;
  unint64_t v1373;
  uint64_t v1374;
  unint64_t v1375;
  char *v1376;
  char *v1377;
  int v1378;
  uint64_t v1379;
  unint64_t v1380;
  uint64_t v1381;
  unint64_t v1382;
  char *v1383;
  int *v1384;
  int v1385;
  _DWORD *v1386;
  uint64_t v1387;
  unint64_t v1388;
  uint64_t v1389;
  unint64_t v1390;
  char *v1391;
  int *v1392;
  char *v1393;
  int v1394;
  char *v1395;
  unsigned int *v1396;
  unsigned int *v1397;
  unsigned int *v1398;
  uint64_t v1399;
  unint64_t v1400;
  uint64_t v1401;
  unint64_t v1402;
  char *v1403;
  int v1404;
  int v1405;
  int v1406;
  unsigned int *v1407;
  unsigned int v1408;
  unsigned int *v1409;
  unsigned int *v1410;
  uint64_t v1411;
  unint64_t v1412;
  uint64_t v1413;
  unint64_t v1414;
  char *v1415;
  unsigned int *v1416;
  unsigned int v1417;
  _DWORD *v1418;
  int v1419;
  unsigned int *v1420;
  uint64_t v1421;
  unint64_t v1422;
  uint64_t v1423;
  unint64_t v1424;
  char *v1425;
  unsigned int *v1426;
  char *v1427;
  unsigned int v1428;
  int v1429;
  unint64_t v1430;
  _DWORD *v1431;
  _DWORD *v1432;
  _DWORD *v1433;
  uint64_t v1434;
  unint64_t v1435;
  uint64_t v1436;
  unint64_t v1437;
  char *v1438;
  char *v1439;
  char *v1440;
  int v1441;
  char *v1442;
  int *v1443;
  int *v1444;
  int *v1445;
  uint64_t v1446;
  unint64_t v1447;
  uint64_t v1448;
  unint64_t v1449;
  char *v1450;
  char *v1451;
  int v1452;
  int *v1453;
  int *v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t v1457;
  unint64_t v1458;
  char *v1459;
  int *v1460;
  int v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  unint64_t v1465;
  char *v1466;
  int v1467;
  uint64_t v1468;
  int v1469;
  int v1470;
  int v1471;
  int v1472;
  uint64_t v1473;
  uint64_t v1474;
  char **v1475;
  unint64_t v1476;
  unint64_t v1477;
  unint64_t v1478;
  int v1479;
  int v1480;
  char **v1481;
  unsigned int v1482;
  unsigned int v1483;
  unsigned int v1484;
  _QWORD v1485[4];
  int v1486;
  _QWORD v1487[2];

  v1487[0] = a4;
  v1487[1] = a5;
  v1486 = a7;
  v1485[0] = a8;
  v1485[1] = a11;
  v1485[2] = v1487;
  v1485[3] = &v1486;
  v16 = -1;
  v1483 = -1;
  v1484 = -1;
  v1482 = -1;
  v17 = a1[1];
  {
    v1484 += a2;
    v16 = _ZZN4geom24refine_triangle_with_uvsEPKjjRKNS_12_GLOBAL__N_115edge_vertex_mapENS_5sliceIDv2_fEES1_jRS3_RNSt3__16vectorIjNSA_9allocatorIjEEEESF_RNSB_IS7_NSC_IS7_EEEESF_ENK3__0clEjj((uint64_t)v1485, *a6, a6[1]);
    v17 = a1[1];
    v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = a1[2];
  {
    v1483 += a2;
    v18 |= 2u;
    v1480 = _ZZN4geom24refine_triangle_with_uvsEPKjjRKNS_12_GLOBAL__N_115edge_vertex_mapENS_5sliceIDv2_fEES1_jRS3_RNSt3__16vectorIjNSA_9allocatorIjEEEESF_RNSB_IS7_NSC_IS7_EEEESF_ENK3__0clEjj((uint64_t)v1485, a6[1], a6[2]);
    v19 = a1[2];
  }
  else
  {
    v1480 = -1;
  }
  {
    v1482 += a2;
    v18 |= 4u;
    v20 = _ZZN4geom24refine_triangle_with_uvsEPKjjRKNS_12_GLOBAL__N_115edge_vertex_mapENS_5sliceIDv2_fEES1_jRS3_RNSt3__16vectorIjNSA_9allocatorIjEEEESF_RNSB_IS7_NSC_IS7_EEEESF_ENK3__0clEjj((uint64_t)v1485, a6[2], *a6);
  }
  else
  {
    v20 = -1;
  }
  v21 = *(unsigned int **)a9;
  v22 = *(unsigned int **)(a9 + 8);
  v23 = ((uint64_t)v22 - *(_QWORD *)a9) >> 2;
  v24 = v23 / 3;
  switch(v18)
  {
    case 0:
      v26 = (char **)(a9 + 16);
      v25 = *(char **)(a9 + 16);
      if (v22 >= (unsigned int *)v25)
      {
        v48 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v49 = v25 - (char *)v21;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v50);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v51 = 0;
        }
        v80 = (unsigned int *)&v51[4 * v23];
        v25 = &v51[4 * v50];
        *v80 = *a1;
        v27 = v80 + 1;
        while (v22 != v21)
        {
          v81 = *--v22;
          *--v80 = v81;
        }
        *(_QWORD *)a9 = v80;
        *(_QWORD *)(a9 + 8) = v27;
        *(_QWORD *)(a9 + 16) = v25;
        if (v21)
        {
          operator delete(v21);
          v25 = *v26;
        }
      }
      else
      {
        *v22 = *a1;
        v27 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v27;
      if (v27 >= (unsigned int *)v25)
      {
        v83 = *(unsigned int **)a9;
        v84 = ((uint64_t)v27 - *(_QWORD *)a9) >> 2;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62)
          goto LABEL_2244;
        v86 = v25 - (char *)v83;
        if (v86 >> 1 > v85)
          v85 = v86 >> 1;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
          v87 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v87);
          v83 = *(unsigned int **)a9;
          v27 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v88 = 0;
        }
        v154 = &v88[4 * v84];
        v25 = &v88[4 * v87];
        *(_DWORD *)v154 = a1[1];
        v82 = (unsigned int *)(v154 + 4);
        while (v27 != v83)
        {
          v155 = *--v27;
          *((_DWORD *)v154 - 1) = v155;
          v154 -= 4;
        }
        *(_QWORD *)a9 = v154;
        *(_QWORD *)(a9 + 8) = v82;
        *(_QWORD *)(a9 + 16) = v25;
        if (v83)
        {
          operator delete(v83);
          v25 = *v26;
        }
      }
      else
      {
        *v27 = a1[1];
        v82 = v27 + 1;
      }
      *(_QWORD *)(a9 + 8) = v82;
      if (v82 >= (unsigned int *)v25)
      {
        v157 = *(unsigned int **)a9;
        v158 = ((uint64_t)v82 - *(_QWORD *)a9) >> 2;
        v159 = v158 + 1;
        if ((unint64_t)(v158 + 1) >> 62)
          goto LABEL_2244;
        v160 = v25 - (char *)v157;
        if (v160 >> 1 > v159)
          v159 = v160 >> 1;
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
          v161 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
        {
          v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v161);
          v157 = *(unsigned int **)a9;
          v82 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v162 = 0;
        }
        v226 = &v162[4 * v158];
        v227 = &v162[4 * v161];
        *(_DWORD *)v226 = a1[2];
        v156 = v226 + 4;
        while (v82 != v157)
        {
          v228 = *--v82;
          *((_DWORD *)v226 - 1) = v228;
          v226 -= 4;
        }
        *(_QWORD *)a9 = v226;
        *(_QWORD *)(a9 + 8) = v156;
        *(_QWORD *)(a9 + 16) = v227;
        if (v157)
          operator delete(v157);
      }
      else
      {
        *v82 = a1[2];
        v156 = v82 + 1;
      }
      *(_QWORD *)(a9 + 8) = v156;
      v229 = *(_QWORD *)(a10 + 16);
      v230 = *(_DWORD **)(a10 + 8);
      if ((unint64_t)v230 >= v229)
      {
        v232 = *(_DWORD **)a10;
        v233 = ((uint64_t)v230 - *(_QWORD *)a10) >> 2;
        v234 = v233 + 1;
        if ((unint64_t)(v233 + 1) >> 62)
          goto LABEL_2244;
        v235 = v229 - (_QWORD)v232;
        if (v235 >> 1 > v234)
          v234 = v235 >> 1;
        if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL)
          v236 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v236 = v234;
        if (v236)
        {
          v237 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v236);
          v232 = *(_DWORD **)a10;
          v230 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v237 = 0;
        }
        v323 = &v237[4 * v233];
        v324 = &v237[4 * v236];
        *(_DWORD *)v323 = v24;
        v231 = v323 + 4;
        while (v230 != v232)
        {
          v325 = *--v230;
          *((_DWORD *)v323 - 1) = v325;
          v323 -= 4;
        }
        *(_QWORD *)a10 = v323;
        *(_QWORD *)(a10 + 8) = v231;
        *(_QWORD *)(a10 + 16) = v324;
        if (v232)
          operator delete(v232);
      }
      else
      {
        *v230 = v24;
        v231 = v230 + 1;
      }
      *(_QWORD *)(a10 + 8) = v231;
      v327 = (char **)(a12 + 16);
      v326 = *(char **)(a12 + 16);
      v328 = *(unsigned int **)(a12 + 8);
      if (v328 >= (unsigned int *)v326)
      {
        v331 = *(int **)a12;
        v332 = ((uint64_t)v328 - *(_QWORD *)a12) >> 2;
        v333 = v332 + 1;
        v329 = a6;
        if ((unint64_t)(v332 + 1) >> 62)
          goto LABEL_2244;
        v334 = v326 - (char *)v331;
        if (v334 >> 1 > v333)
          v333 = v334 >> 1;
        if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFFCLL)
          v335 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v335 = v333;
        if (v335)
        {
          v336 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v335);
          v331 = *(int **)a12;
          v328 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v336 = 0;
        }
        v427 = (unsigned int *)&v336[4 * v332];
        v326 = &v336[4 * v335];
        *v427 = *a6;
        v330 = (int *)(v427 + 1);
        while (v328 != (unsigned int *)v331)
        {
          v428 = *--v328;
          *--v427 = v428;
        }
        *(_QWORD *)a12 = v427;
        *(_QWORD *)(a12 + 8) = v330;
        *(_QWORD *)(a12 + 16) = v326;
        if (v331)
        {
          operator delete(v331);
          v326 = *v327;
        }
      }
      else
      {
        v329 = a6;
        *v328 = *a6;
        v330 = (int *)(v328 + 1);
      }
      *(_QWORD *)(a12 + 8) = v330;
      if (v330 >= (int *)v326)
      {
        v430 = *(int **)a12;
        v431 = ((uint64_t)v330 - *(_QWORD *)a12) >> 2;
        v432 = v431 + 1;
        if ((unint64_t)(v431 + 1) >> 62)
          goto LABEL_2244;
        v433 = v326 - (char *)v430;
        if (v433 >> 1 > v432)
          v432 = v433 >> 1;
        if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFFCLL)
          v434 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v434 = v432;
        if (v434)
        {
          v435 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v434);
          v430 = *(int **)a12;
          v330 = *(int **)(a12 + 8);
        }
        else
        {
          v435 = 0;
        }
        v500 = &v435[4 * v431];
        v326 = &v435[4 * v434];
        *(_DWORD *)v500 = v329[1];
        v429 = (int *)(v500 + 4);
        while (v330 != v430)
        {
          v501 = *--v330;
          *((_DWORD *)v500 - 1) = v501;
          v500 -= 4;
        }
        *(_QWORD *)a12 = v500;
        *(_QWORD *)(a12 + 8) = v429;
        *(_QWORD *)(a12 + 16) = v326;
        if (v430)
        {
          operator delete(v430);
          v326 = *v327;
        }
      }
      else
      {
        *v330 = v329[1];
        v429 = v330 + 1;
      }
      *(_QWORD *)(a12 + 8) = v429;
      if (v429 >= (int *)v326)
      {
        v503 = *(int **)a12;
        v504 = ((uint64_t)v429 - *(_QWORD *)a12) >> 2;
        v505 = v504 + 1;
        if (!((unint64_t)(v504 + 1) >> 62))
        {
          v506 = v326 - (char *)v503;
          if (v506 >> 1 > v505)
            v505 = v506 >> 1;
          if ((unint64_t)v506 >= 0x7FFFFFFFFFFFFFFCLL)
            v507 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v507 = v505;
          if (v507)
          {
            v508 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v507);
            v503 = *(int **)a12;
            v429 = *(int **)(a12 + 8);
          }
          else
          {
            v508 = 0;
          }
          v572 = (int *)&v508[4 * v504];
          v573 = &v508[4 * v507];
          *v572 = v329[2];
          v502 = v572 + 1;
          while (v429 != v503)
          {
            v574 = *--v429;
            *--v572 = v574;
          }
LABEL_2241:
          *(_QWORD *)a12 = v572;
          *(_QWORD *)(a12 + 8) = v502;
          *(_QWORD *)(a12 + 16) = v573;
          if (v503)
            operator delete(v503);
          goto LABEL_2243;
        }
LABEL_2244:
        abort();
      }
      *v429 = v329[2];
      v502 = v429 + 1;
LABEL_2243:
      *(_QWORD *)(a12 + 8) = v502;
      return;
    case 1:
      v32 = (char **)(a9 + 16);
      v31 = *(char **)(a9 + 16);
      if (v22 >= (unsigned int *)v31)
      {
        v56 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v57 = v31 - (char *)v21;
        if (v57 >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v58);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v59 = 0;
        }
        v99 = (unsigned int *)&v59[4 * v23];
        v31 = &v59[4 * v58];
        *v99 = *a1;
        v33 = v99 + 1;
        while (v22 != v21)
        {
          v100 = *--v22;
          *--v99 = v100;
        }
        *(_QWORD *)a9 = v99;
        *(_QWORD *)(a9 + 8) = v33;
        *(_QWORD *)(a9 + 16) = v31;
        if (v21)
        {
          operator delete(v21);
          v31 = *v32;
        }
      }
      else
      {
        *v22 = *a1;
        v33 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v33;
      if (v33 >= (unsigned int *)v31)
      {
        v102 = *(unsigned int **)a9;
        v103 = ((uint64_t)v33 - *(_QWORD *)a9) >> 2;
        v104 = v103 + 1;
        if ((unint64_t)(v103 + 1) >> 62)
          goto LABEL_2244;
        v105 = v31 - (char *)v102;
        if (v105 >> 1 > v104)
          v104 = v105 >> 1;
        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
          v106 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v106 = v104;
        if (v106)
        {
          v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v106);
          v102 = *(unsigned int **)a9;
          v33 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v107 = 0;
        }
        v172 = (unsigned int *)&v107[4 * v103];
        v31 = &v107[4 * v106];
        *v172 = v1484;
        v101 = v172 + 1;
        while (v33 != v102)
        {
          v173 = *--v33;
          *--v172 = v173;
        }
        *(_QWORD *)a9 = v172;
        *(_QWORD *)(a9 + 8) = v101;
        *(_QWORD *)(a9 + 16) = v31;
        if (v102)
        {
          operator delete(v102);
          v31 = *v32;
        }
      }
      else
      {
        *v33 = v1484;
        v101 = v33 + 1;
      }
      *(_QWORD *)(a9 + 8) = v101;
      if (v101 >= (unsigned int *)v31)
      {
        v175 = *(unsigned int **)a9;
        v176 = ((uint64_t)v101 - *(_QWORD *)a9) >> 2;
        v177 = v176 + 1;
        if ((unint64_t)(v176 + 1) >> 62)
          goto LABEL_2244;
        v178 = v31 - (char *)v175;
        if (v178 >> 1 > v177)
          v177 = v178 >> 1;
        if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
          v179 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v179 = v177;
        if (v179)
        {
          v180 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v179);
          v175 = *(unsigned int **)a9;
          v101 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v180 = 0;
        }
        v251 = &v180[4 * v176];
        v252 = &v180[4 * v179];
        *(_DWORD *)v251 = a1[2];
        v174 = v251 + 4;
        while (v101 != v175)
        {
          v253 = *--v101;
          *((_DWORD *)v251 - 1) = v253;
          v251 -= 4;
        }
        *(_QWORD *)a9 = v251;
        *(_QWORD *)(a9 + 8) = v174;
        *(_QWORD *)(a9 + 16) = v252;
        if (v175)
          operator delete(v175);
      }
      else
      {
        *v101 = a1[2];
        v174 = v101 + 1;
      }
      *(_QWORD *)(a9 + 8) = v174;
      v254 = *(_QWORD *)(a10 + 16);
      v255 = *(_DWORD **)(a10 + 8);
      if ((unint64_t)v255 >= v254)
      {
        v257 = *(_DWORD **)a10;
        v258 = ((uint64_t)v255 - *(_QWORD *)a10) >> 2;
        v259 = v258 + 1;
        if ((unint64_t)(v258 + 1) >> 62)
          goto LABEL_2244;
        v260 = v254 - (_QWORD)v257;
        if (v260 >> 1 > v259)
          v259 = v260 >> 1;
        if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFFCLL)
          v261 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v261 = v259;
        if (v261)
        {
          v262 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v261);
          v257 = *(_DWORD **)a10;
          v255 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v262 = 0;
        }
        v350 = &v262[4 * v258];
        v351 = &v262[4 * v261];
        *(_DWORD *)v350 = v24;
        v256 = v350 + 4;
        while (v255 != v257)
        {
          v352 = *--v255;
          *((_DWORD *)v350 - 1) = v352;
          v350 -= 4;
        }
        *(_QWORD *)a10 = v350;
        *(_QWORD *)(a10 + 8) = v256;
        *(_QWORD *)(a10 + 16) = v351;
        if (v257)
          operator delete(v257);
      }
      else
      {
        *v255 = v24;
        v256 = v255 + 1;
      }
      *(_QWORD *)(a10 + 8) = v256;
      v354 = (char **)(a12 + 16);
      v353 = *(char **)(a12 + 16);
      v355 = *(unsigned int **)(a12 + 8);
      v1479 = v24;
      if (v355 >= (unsigned int *)v353)
      {
        v357 = *(int **)a12;
        v358 = ((uint64_t)v355 - *(_QWORD *)a12) >> 2;
        v359 = v358 + 1;
        if ((unint64_t)(v358 + 1) >> 62)
          goto LABEL_2244;
        v360 = v353 - (char *)v357;
        if (v360 >> 1 > v359)
          v359 = v360 >> 1;
        if ((unint64_t)v360 >= 0x7FFFFFFFFFFFFFFCLL)
          v361 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v361 = v359;
        if (v361)
        {
          v362 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v361);
          v357 = *(int **)a12;
          v355 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v362 = 0;
        }
        v445 = (unsigned int *)&v362[4 * v358];
        v353 = &v362[4 * v361];
        *v445 = *a6;
        v356 = (int *)(v445 + 1);
        while (v355 != (unsigned int *)v357)
        {
          v446 = *--v355;
          *--v445 = v446;
        }
        *(_QWORD *)a12 = v445;
        *(_QWORD *)(a12 + 8) = v356;
        *(_QWORD *)(a12 + 16) = v353;
        if (v357)
        {
          operator delete(v357);
          v353 = *v354;
        }
      }
      else
      {
        *v355 = *a6;
        v356 = (int *)(v355 + 1);
      }
      *(_QWORD *)(a12 + 8) = v356;
      if (v356 >= (int *)v353)
      {
        v448 = *(int **)a12;
        v449 = ((uint64_t)v356 - *(_QWORD *)a12) >> 2;
        v450 = v449 + 1;
        if ((unint64_t)(v449 + 1) >> 62)
          goto LABEL_2244;
        v451 = v353 - (char *)v448;
        if (v451 >> 1 > v450)
          v450 = v451 >> 1;
        if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFFCLL)
          v452 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v452 = v450;
        if (v452)
        {
          v453 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v452);
          v448 = *(int **)a12;
          v356 = *(int **)(a12 + 8);
        }
        else
        {
          v453 = 0;
        }
        v518 = (int *)&v453[4 * v449];
        v353 = &v453[4 * v452];
        *v518 = v16;
        v447 = v518 + 1;
        while (v356 != v448)
        {
          v519 = *--v356;
          *--v518 = v519;
        }
        *(_QWORD *)a12 = v518;
        *(_QWORD *)(a12 + 8) = v447;
        *(_QWORD *)(a12 + 16) = v353;
        if (v448)
        {
          operator delete(v448);
          v353 = *v354;
        }
      }
      else
      {
        *v356 = v16;
        v447 = v356 + 1;
      }
      *(_QWORD *)(a12 + 8) = v447;
      if (v447 >= (int *)v353)
      {
        v521 = *(int **)a12;
        v522 = ((uint64_t)v447 - *(_QWORD *)a12) >> 2;
        v523 = v522 + 1;
        if ((unint64_t)(v522 + 1) >> 62)
          goto LABEL_2244;
        v524 = v353 - (char *)v521;
        if (v524 >> 1 > v523)
          v523 = v524 >> 1;
        if ((unint64_t)v524 >= 0x7FFFFFFFFFFFFFFCLL)
          v525 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v525 = v523;
        if (v525)
        {
          v526 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v525);
          v521 = *(int **)a12;
          v447 = *(int **)(a12 + 8);
        }
        else
        {
          v526 = 0;
        }
        v587 = &v526[4 * v522];
        v588 = &v526[4 * v525];
        *(_DWORD *)v587 = a6[2];
        v520 = v587 + 4;
        while (v447 != v521)
        {
          v589 = *--v447;
          *((_DWORD *)v587 - 1) = v589;
          v587 -= 4;
        }
        *(_QWORD *)a12 = v587;
        *(_QWORD *)(a12 + 8) = v520;
        *(_QWORD *)(a12 + 16) = v588;
        if (v521)
          operator delete(v521);
      }
      else
      {
        *v447 = a6[2];
        v520 = v447 + 1;
      }
      *(_QWORD *)(a12 + 8) = v520;
      v591 = *(unsigned int **)(a9 + 8);
      v590 = *(char **)(a9 + 16);
      if (v591 >= (unsigned int *)v590)
      {
        v593 = *(unsigned int **)a9;
        v594 = ((uint64_t)v591 - *(_QWORD *)a9) >> 2;
        v595 = v594 + 1;
        if ((unint64_t)(v594 + 1) >> 62)
          goto LABEL_2244;
        v596 = v590 - (char *)v593;
        if (v596 >> 1 > v595)
          v595 = v596 >> 1;
        if ((unint64_t)v596 >= 0x7FFFFFFFFFFFFFFCLL)
          v597 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v597 = v595;
        if (v597)
        {
          v598 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v597);
          v593 = *(unsigned int **)a9;
          v591 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v598 = 0;
        }
        v674 = &v598[4 * v594];
        v590 = &v598[4 * v597];
        *(_DWORD *)v674 = a1[1];
        v592 = (unsigned int *)(v674 + 4);
        while (v591 != v593)
        {
          v675 = *--v591;
          *((_DWORD *)v674 - 1) = v675;
          v674 -= 4;
        }
        *(_QWORD *)a9 = v674;
        *(_QWORD *)(a9 + 8) = v592;
        *(_QWORD *)(a9 + 16) = v590;
        if (v593)
        {
          operator delete(v593);
          v590 = *v32;
        }
      }
      else
      {
        *v591 = a1[1];
        v592 = v591 + 1;
      }
      *(_QWORD *)(a9 + 8) = v592;
      if (v592 >= (unsigned int *)v590)
      {
        v677 = *(unsigned int **)a9;
        v678 = ((uint64_t)v592 - *(_QWORD *)a9) >> 2;
        v679 = v678 + 1;
        if ((unint64_t)(v678 + 1) >> 62)
          goto LABEL_2244;
        v680 = v590 - (char *)v677;
        if (v680 >> 1 > v679)
          v679 = v680 >> 1;
        if ((unint64_t)v680 >= 0x7FFFFFFFFFFFFFFCLL)
          v681 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v681 = v679;
        if (v681)
        {
          v682 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v681);
          v677 = *(unsigned int **)a9;
          v592 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v682 = 0;
        }
        v737 = &v682[4 * v678];
        v590 = &v682[4 * v681];
        *(_DWORD *)v737 = a1[2];
        v676 = (unsigned int *)(v737 + 4);
        while (v592 != v677)
        {
          v738 = *--v592;
          *((_DWORD *)v737 - 1) = v738;
          v737 -= 4;
        }
        *(_QWORD *)a9 = v737;
        *(_QWORD *)(a9 + 8) = v676;
        *(_QWORD *)(a9 + 16) = v590;
        if (v677)
        {
          operator delete(v677);
          v590 = *v32;
        }
      }
      else
      {
        *v592 = a1[2];
        v676 = v592 + 1;
      }
      *(_QWORD *)(a9 + 8) = v676;
      if (v676 >= (unsigned int *)v590)
      {
        v740 = *(unsigned int **)a9;
        v741 = ((uint64_t)v676 - *(_QWORD *)a9) >> 2;
        v742 = v741 + 1;
        if ((unint64_t)(v741 + 1) >> 62)
          goto LABEL_2244;
        v743 = v590 - (char *)v740;
        if (v743 >> 1 > v742)
          v742 = v743 >> 1;
        if ((unint64_t)v743 >= 0x7FFFFFFFFFFFFFFCLL)
          v744 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v744 = v742;
        if (v744)
        {
          v745 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v744);
          v740 = *(unsigned int **)a9;
          v676 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v745 = 0;
        }
        v811 = (unsigned int *)&v745[4 * v741];
        v812 = &v745[4 * v744];
        *v811 = v1484;
        v739 = v811 + 1;
        while (v676 != v740)
        {
          v813 = *--v676;
          *--v811 = v813;
        }
        *(_QWORD *)a9 = v811;
        *(_QWORD *)(a9 + 8) = v739;
        *(_QWORD *)(a9 + 16) = v812;
        if (v740)
          operator delete(v740);
      }
      else
      {
        *v676 = v1484;
        v739 = v676 + 1;
      }
      *(_QWORD *)(a9 + 8) = v739;
      v814 = v1479 + 1;
      v816 = *(_DWORD **)(a10 + 8);
      v815 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v816 >= v815)
      {
        v818 = *(_DWORD **)a10;
        v819 = ((uint64_t)v816 - *(_QWORD *)a10) >> 2;
        v820 = v819 + 1;
        if ((unint64_t)(v819 + 1) >> 62)
          goto LABEL_2244;
        v821 = v815 - (_QWORD)v818;
        if (v821 >> 1 > v820)
          v820 = v821 >> 1;
        if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFFCLL)
          v822 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v822 = v820;
        if (v822)
        {
          v823 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v822);
          v818 = *(_DWORD **)a10;
          v816 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v823 = 0;
        }
        v901 = &v823[4 * v819];
        v902 = &v823[4 * v822];
        *(_DWORD *)v901 = v814;
        v817 = v901 + 4;
        while (v816 != v818)
        {
          v903 = *--v816;
          *((_DWORD *)v901 - 1) = v903;
          v901 -= 4;
        }
        *(_QWORD *)a10 = v901;
        *(_QWORD *)(a10 + 8) = v817;
        *(_QWORD *)(a10 + 16) = v902;
        if (v818)
          operator delete(v818);
      }
      else
      {
        *v816 = v814;
        v817 = v816 + 1;
      }
      *(_QWORD *)(a10 + 8) = v817;
      v905 = *(int **)(a12 + 8);
      v904 = *(char **)(a12 + 16);
      if (v905 >= (int *)v904)
      {
        v908 = *(int **)a12;
        v909 = ((uint64_t)v905 - *(_QWORD *)a12) >> 2;
        v910 = v909 + 1;
        v906 = a6;
        if ((unint64_t)(v909 + 1) >> 62)
          goto LABEL_2244;
        v911 = v904 - (char *)v908;
        if (v911 >> 1 > v910)
          v910 = v911 >> 1;
        if ((unint64_t)v911 >= 0x7FFFFFFFFFFFFFFCLL)
          v912 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v912 = v910;
        if (v912)
        {
          v913 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v912);
          v908 = *(int **)a12;
          v905 = *(int **)(a12 + 8);
        }
        else
        {
          v913 = 0;
        }
        v985 = &v913[4 * v909];
        v904 = &v913[4 * v912];
        *(_DWORD *)v985 = a6[1];
        v907 = (int *)(v985 + 4);
        while (v905 != v908)
        {
          v986 = *--v905;
          *((_DWORD *)v985 - 1) = v986;
          v985 -= 4;
        }
        *(_QWORD *)a12 = v985;
        *(_QWORD *)(a12 + 8) = v907;
        *(_QWORD *)(a12 + 16) = v904;
        if (v908)
        {
          operator delete(v908);
          v904 = *v354;
        }
      }
      else
      {
        v906 = a6;
        *v905 = a6[1];
        v907 = v905 + 1;
      }
      *(_QWORD *)(a12 + 8) = v907;
      if (v907 >= (int *)v904)
      {
        v988 = *(int **)a12;
        v989 = ((uint64_t)v907 - *(_QWORD *)a12) >> 2;
        v990 = v989 + 1;
        if ((unint64_t)(v989 + 1) >> 62)
          goto LABEL_2244;
        v991 = v904 - (char *)v988;
        if (v991 >> 1 > v990)
          v990 = v991 >> 1;
        if ((unint64_t)v991 >= 0x7FFFFFFFFFFFFFFCLL)
          v992 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v992 = v990;
        if (v992)
        {
          v993 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v992);
          v988 = *(int **)a12;
          v907 = *(int **)(a12 + 8);
        }
        else
        {
          v993 = 0;
        }
        v1049 = &v993[4 * v989];
        v904 = &v993[4 * v992];
        *(_DWORD *)v1049 = v906[2];
        v987 = (int *)(v1049 + 4);
        while (v907 != v988)
        {
          v1050 = *--v907;
          *((_DWORD *)v1049 - 1) = v1050;
          v1049 -= 4;
        }
        *(_QWORD *)a12 = v1049;
        *(_QWORD *)(a12 + 8) = v987;
        *(_QWORD *)(a12 + 16) = v904;
        if (v988)
        {
          operator delete(v988);
          v904 = *v354;
        }
      }
      else
      {
        *v907 = v906[2];
        v987 = v907 + 1;
      }
      *(_QWORD *)(a12 + 8) = v987;
      if (v987 < (int *)v904)
      {
        *v987 = v16;
        v1051 = v987 + 1;
LABEL_2084:
        v1108 = v1051;
LABEL_2135:
        *(_QWORD *)(a12 + 8) = v1108;
        return;
      }
      v1052 = *(int **)a12;
      v1053 = ((uint64_t)v987 - *(_QWORD *)a12) >> 2;
      v1054 = v1053 + 1;
      if ((unint64_t)(v1053 + 1) >> 62)
        goto LABEL_2244;
      v1055 = v904 - (char *)v1052;
      if (v1055 >> 1 > v1054)
        v1054 = v1055 >> 1;
      if ((unint64_t)v1055 >= 0x7FFFFFFFFFFFFFFCLL)
        v1056 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1056 = v1054;
      if (v1056)
      {
        v1057 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1056);
        v1052 = *(int **)a12;
        v987 = *(int **)(a12 + 8);
      }
      else
      {
        v1057 = 0;
      }
      v1106 = (int *)&v1057[4 * v1053];
      v1107 = &v1057[4 * v1056];
      *v1106 = v16;
      v1108 = v1106 + 1;
      while (v987 != v1052)
      {
        v1109 = *--v987;
        *--v1106 = v1109;
      }
      break;
    case 2:
      v35 = (char **)(a9 + 16);
      v34 = *(char **)(a9 + 16);
      if (v22 >= (unsigned int *)v34)
      {
        v60 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v61 = v34 - (char *)v21;
        if (v61 >> 1 > v60)
          v60 = v61 >> 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
          v62 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v62);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v63 = 0;
        }
        v108 = (unsigned int *)&v63[4 * v23];
        v34 = &v63[4 * v62];
        *v108 = *a1;
        v36 = v108 + 1;
        while (v22 != v21)
        {
          v109 = *--v22;
          *--v108 = v109;
        }
        *(_QWORD *)a9 = v108;
        *(_QWORD *)(a9 + 8) = v36;
        *(_QWORD *)(a9 + 16) = v34;
        if (v21)
        {
          operator delete(v21);
          v34 = *v35;
        }
      }
      else
      {
        *v22 = *a1;
        v36 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v36;
      if (v36 >= (unsigned int *)v34)
      {
        v111 = *(unsigned int **)a9;
        v112 = ((uint64_t)v36 - *(_QWORD *)a9) >> 2;
        v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 62)
          goto LABEL_2244;
        v114 = v34 - (char *)v111;
        if (v114 >> 1 > v113)
          v113 = v114 >> 1;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
          v115 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v115 = v113;
        if (v115)
        {
          v116 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v115);
          v111 = *(unsigned int **)a9;
          v36 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v116 = 0;
        }
        v181 = (unsigned int *)&v116[4 * v112];
        v34 = &v116[4 * v115];
        *v181 = v1483;
        v110 = v181 + 1;
        while (v36 != v111)
        {
          v182 = *--v36;
          *--v181 = v182;
        }
        *(_QWORD *)a9 = v181;
        *(_QWORD *)(a9 + 8) = v110;
        *(_QWORD *)(a9 + 16) = v34;
        if (v111)
        {
          operator delete(v111);
          v34 = *v35;
        }
      }
      else
      {
        *v36 = v1483;
        v110 = v36 + 1;
      }
      *(_QWORD *)(a9 + 8) = v110;
      if (v110 >= (unsigned int *)v34)
      {
        v184 = *(unsigned int **)a9;
        v185 = ((uint64_t)v110 - *(_QWORD *)a9) >> 2;
        v186 = v185 + 1;
        if ((unint64_t)(v185 + 1) >> 62)
          goto LABEL_2244;
        v187 = v34 - (char *)v184;
        if (v187 >> 1 > v186)
          v186 = v187 >> 1;
        if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
          v188 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v188 = v186;
        if (v188)
        {
          v189 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v188);
          v184 = *(unsigned int **)a9;
          v110 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v189 = 0;
        }
        v263 = &v189[4 * v185];
        v264 = &v189[4 * v188];
        *(_DWORD *)v263 = a1[2];
        v183 = v263 + 4;
        while (v110 != v184)
        {
          v265 = *--v110;
          *((_DWORD *)v263 - 1) = v265;
          v263 -= 4;
        }
        *(_QWORD *)a9 = v263;
        *(_QWORD *)(a9 + 8) = v183;
        *(_QWORD *)(a9 + 16) = v264;
        if (v184)
          operator delete(v184);
      }
      else
      {
        *v110 = a1[2];
        v183 = v110 + 1;
      }
      *(_QWORD *)(a9 + 8) = v183;
      v266 = *(_QWORD *)(a10 + 16);
      v267 = *(_DWORD **)(a10 + 8);
      if ((unint64_t)v267 >= v266)
      {
        v269 = *(_DWORD **)a10;
        v270 = ((uint64_t)v267 - *(_QWORD *)a10) >> 2;
        v271 = v270 + 1;
        if ((unint64_t)(v270 + 1) >> 62)
          goto LABEL_2244;
        v272 = v266 - (_QWORD)v269;
        if (v272 >> 1 > v271)
          v271 = v272 >> 1;
        if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFFCLL)
          v273 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v273 = v271;
        if (v273)
        {
          v274 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v273);
          v269 = *(_DWORD **)a10;
          v267 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v274 = 0;
        }
        v363 = &v274[4 * v270];
        v364 = &v274[4 * v273];
        *(_DWORD *)v363 = v24;
        v268 = v363 + 4;
        while (v267 != v269)
        {
          v365 = *--v267;
          *((_DWORD *)v363 - 1) = v365;
          v363 -= 4;
        }
        *(_QWORD *)a10 = v363;
        *(_QWORD *)(a10 + 8) = v268;
        *(_QWORD *)(a10 + 16) = v364;
        if (v269)
          operator delete(v269);
      }
      else
      {
        *v267 = v24;
        v268 = v267 + 1;
      }
      *(_QWORD *)(a10 + 8) = v268;
      v367 = (char **)(a12 + 16);
      v366 = *(char **)(a12 + 16);
      v368 = *(unsigned int **)(a12 + 8);
      if (v368 >= (unsigned int *)v366)
      {
        v370 = *(int **)a12;
        v371 = ((uint64_t)v368 - *(_QWORD *)a12) >> 2;
        v372 = v371 + 1;
        if ((unint64_t)(v371 + 1) >> 62)
          goto LABEL_2244;
        v373 = v366 - (char *)v370;
        if (v373 >> 1 > v372)
          v372 = v373 >> 1;
        if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFFCLL)
          v374 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v374 = v372;
        if (v374)
        {
          v375 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v374);
          v370 = *(int **)a12;
          v368 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v375 = 0;
        }
        v454 = (unsigned int *)&v375[4 * v371];
        v366 = &v375[4 * v374];
        *v454 = *a6;
        v369 = (int *)(v454 + 1);
        while (v368 != (unsigned int *)v370)
        {
          v455 = *--v368;
          *--v454 = v455;
        }
        *(_QWORD *)a12 = v454;
        *(_QWORD *)(a12 + 8) = v369;
        *(_QWORD *)(a12 + 16) = v366;
        if (v370)
        {
          operator delete(v370);
          v366 = *v367;
        }
      }
      else
      {
        *v368 = *a6;
        v369 = (int *)(v368 + 1);
      }
      v456 = v24;
      *(_QWORD *)(a12 + 8) = v369;
      if (v369 >= (int *)v366)
      {
        v458 = *(int **)a12;
        v459 = ((uint64_t)v369 - *(_QWORD *)a12) >> 2;
        v460 = v459 + 1;
        if ((unint64_t)(v459 + 1) >> 62)
          goto LABEL_2244;
        v461 = v366 - (char *)v458;
        if (v461 >> 1 > v460)
          v460 = v461 >> 1;
        if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFFCLL)
          v462 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v462 = v460;
        if (v462)
        {
          v463 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v462);
          v458 = *(int **)a12;
          v369 = *(int **)(a12 + 8);
        }
        else
        {
          v463 = 0;
        }
        v527 = (int *)&v463[4 * v459];
        v366 = &v463[4 * v462];
        *v527 = v1480;
        v457 = v527 + 1;
        while (v369 != v458)
        {
          v528 = *--v369;
          *--v527 = v528;
        }
        *(_QWORD *)a12 = v527;
        *(_QWORD *)(a12 + 8) = v457;
        *(_QWORD *)(a12 + 16) = v366;
        if (v458)
        {
          operator delete(v458);
          v366 = *v367;
        }
      }
      else
      {
        *v369 = v1480;
        v457 = v369 + 1;
      }
      *(_QWORD *)(a12 + 8) = v457;
      if (v457 >= (int *)v366)
      {
        v530 = *(int **)a12;
        v531 = ((uint64_t)v457 - *(_QWORD *)a12) >> 2;
        v532 = v531 + 1;
        if ((unint64_t)(v531 + 1) >> 62)
          goto LABEL_2244;
        v533 = v366 - (char *)v530;
        if (v533 >> 1 > v532)
          v532 = v533 >> 1;
        if ((unint64_t)v533 >= 0x7FFFFFFFFFFFFFFCLL)
          v534 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v534 = v532;
        if (v534)
        {
          v535 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v534);
          v530 = *(int **)a12;
          v457 = *(int **)(a12 + 8);
        }
        else
        {
          v535 = 0;
        }
        v599 = &v535[4 * v531];
        v600 = &v535[4 * v534];
        *(_DWORD *)v599 = a6[2];
        v529 = v599 + 4;
        while (v457 != v530)
        {
          v601 = *--v457;
          *((_DWORD *)v599 - 1) = v601;
          v599 -= 4;
        }
        *(_QWORD *)a12 = v599;
        *(_QWORD *)(a12 + 8) = v529;
        *(_QWORD *)(a12 + 16) = v600;
        if (v530)
          operator delete(v530);
      }
      else
      {
        *v457 = a6[2];
        v529 = v457 + 1;
      }
      *(_QWORD *)(a12 + 8) = v529;
      v603 = *(unsigned int **)(a9 + 8);
      v602 = *(char **)(a9 + 16);
      if (v603 >= (unsigned int *)v602)
      {
        v605 = *(unsigned int **)a9;
        v606 = ((uint64_t)v603 - *(_QWORD *)a9) >> 2;
        v607 = v606 + 1;
        if ((unint64_t)(v606 + 1) >> 62)
          goto LABEL_2244;
        v608 = v602 - (char *)v605;
        if (v608 >> 1 > v607)
          v607 = v608 >> 1;
        if ((unint64_t)v608 >= 0x7FFFFFFFFFFFFFFCLL)
          v609 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v609 = v607;
        if (v609)
        {
          v610 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v609);
          v605 = *(unsigned int **)a9;
          v603 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v610 = 0;
        }
        v683 = (unsigned int *)&v610[4 * v606];
        v602 = &v610[4 * v609];
        *v683 = *a1;
        v604 = v683 + 1;
        while (v603 != v605)
        {
          v684 = *--v603;
          *--v683 = v684;
        }
        *(_QWORD *)a9 = v683;
        *(_QWORD *)(a9 + 8) = v604;
        *(_QWORD *)(a9 + 16) = v602;
        if (v605)
        {
          operator delete(v605);
          v602 = *v35;
        }
      }
      else
      {
        *v603 = *a1;
        v604 = v603 + 1;
      }
      *(_QWORD *)(a9 + 8) = v604;
      if (v604 >= (unsigned int *)v602)
      {
        v686 = *(unsigned int **)a9;
        v687 = ((uint64_t)v604 - *(_QWORD *)a9) >> 2;
        v688 = v687 + 1;
        if ((unint64_t)(v687 + 1) >> 62)
          goto LABEL_2244;
        v689 = v602 - (char *)v686;
        if (v689 >> 1 > v688)
          v688 = v689 >> 1;
        if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFFCLL)
          v690 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v690 = v688;
        if (v690)
        {
          v691 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v690);
          v686 = *(unsigned int **)a9;
          v604 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v691 = 0;
        }
        v746 = &v691[4 * v687];
        v602 = &v691[4 * v690];
        *(_DWORD *)v746 = a1[1];
        v685 = (unsigned int *)(v746 + 4);
        while (v604 != v686)
        {
          v747 = *--v604;
          *((_DWORD *)v746 - 1) = v747;
          v746 -= 4;
        }
        *(_QWORD *)a9 = v746;
        *(_QWORD *)(a9 + 8) = v685;
        *(_QWORD *)(a9 + 16) = v602;
        if (v686)
        {
          operator delete(v686);
          v602 = *v35;
        }
      }
      else
      {
        *v604 = a1[1];
        v685 = v604 + 1;
      }
      *(_QWORD *)(a9 + 8) = v685;
      if (v685 >= (unsigned int *)v602)
      {
        v749 = *(unsigned int **)a9;
        v750 = ((uint64_t)v685 - *(_QWORD *)a9) >> 2;
        v751 = v750 + 1;
        if ((unint64_t)(v750 + 1) >> 62)
          goto LABEL_2244;
        v752 = v602 - (char *)v749;
        if (v752 >> 1 > v751)
          v751 = v752 >> 1;
        if ((unint64_t)v752 >= 0x7FFFFFFFFFFFFFFCLL)
          v753 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v753 = v751;
        if (v753)
        {
          v754 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v753);
          v749 = *(unsigned int **)a9;
          v685 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v754 = 0;
        }
        v824 = (unsigned int *)&v754[4 * v750];
        v825 = &v754[4 * v753];
        *v824 = v1483;
        v748 = v824 + 1;
        while (v685 != v749)
        {
          v826 = *--v685;
          *--v824 = v826;
        }
        *(_QWORD *)a9 = v824;
        *(_QWORD *)(a9 + 8) = v748;
        *(_QWORD *)(a9 + 16) = v825;
        if (v749)
          operator delete(v749);
      }
      else
      {
        *v685 = v1483;
        v748 = v685 + 1;
      }
      *(_QWORD *)(a9 + 8) = v748;
      v827 = v456 + 1;
      v829 = *(_DWORD **)(a10 + 8);
      v828 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v829 >= v828)
      {
        v831 = *(_DWORD **)a10;
        v832 = ((uint64_t)v829 - *(_QWORD *)a10) >> 2;
        v833 = v832 + 1;
        if ((unint64_t)(v832 + 1) >> 62)
          goto LABEL_2244;
        v834 = v828 - (_QWORD)v831;
        if (v834 >> 1 > v833)
          v833 = v834 >> 1;
        if ((unint64_t)v834 >= 0x7FFFFFFFFFFFFFFCLL)
          v835 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v835 = v833;
        if (v835)
        {
          v836 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v835);
          v831 = *(_DWORD **)a10;
          v829 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v836 = 0;
        }
        v914 = &v836[4 * v832];
        v915 = &v836[4 * v835];
        *(_DWORD *)v914 = v827;
        v830 = v914 + 4;
        while (v829 != v831)
        {
          v916 = *--v829;
          *((_DWORD *)v914 - 1) = v916;
          v914 -= 4;
        }
        *(_QWORD *)a10 = v914;
        *(_QWORD *)(a10 + 8) = v830;
        *(_QWORD *)(a10 + 16) = v915;
        if (v831)
          operator delete(v831);
      }
      else
      {
        *v829 = v827;
        v830 = v829 + 1;
      }
      *(_QWORD *)(a10 + 8) = v830;
      v918 = *(unsigned int **)(a12 + 8);
      v917 = *(char **)(a12 + 16);
      if (v918 >= (unsigned int *)v917)
      {
        v921 = *(int **)a12;
        v922 = ((uint64_t)v918 - *(_QWORD *)a12) >> 2;
        v923 = v922 + 1;
        v919 = a6;
        if ((unint64_t)(v922 + 1) >> 62)
          goto LABEL_2244;
        v924 = v917 - (char *)v921;
        if (v924 >> 1 > v923)
          v923 = v924 >> 1;
        if ((unint64_t)v924 >= 0x7FFFFFFFFFFFFFFCLL)
          v925 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v925 = v923;
        if (v925)
        {
          v926 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v925);
          v921 = *(int **)a12;
          v918 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v926 = 0;
        }
        v994 = (unsigned int *)&v926[4 * v922];
        v917 = &v926[4 * v925];
        *v994 = *a6;
        v920 = (int *)(v994 + 1);
        while (v918 != (unsigned int *)v921)
        {
          v995 = *--v918;
          *--v994 = v995;
        }
        *(_QWORD *)a12 = v994;
        *(_QWORD *)(a12 + 8) = v920;
        *(_QWORD *)(a12 + 16) = v917;
        if (v921)
        {
          operator delete(v921);
          v917 = *v367;
        }
      }
      else
      {
        v919 = a6;
        *v918 = *a6;
        v920 = (int *)(v918 + 1);
      }
      *(_QWORD *)(a12 + 8) = v920;
      if (v920 >= (int *)v917)
      {
        v997 = *(int **)a12;
        v998 = ((uint64_t)v920 - *(_QWORD *)a12) >> 2;
        v999 = v998 + 1;
        if ((unint64_t)(v998 + 1) >> 62)
          goto LABEL_2244;
        v1000 = v917 - (char *)v997;
        if (v1000 >> 1 > v999)
          v999 = v1000 >> 1;
        if ((unint64_t)v1000 >= 0x7FFFFFFFFFFFFFFCLL)
          v1001 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1001 = v999;
        if (v1001)
        {
          v1002 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1001);
          v997 = *(int **)a12;
          v920 = *(int **)(a12 + 8);
        }
        else
        {
          v1002 = 0;
        }
        v1058 = &v1002[4 * v998];
        v917 = &v1002[4 * v1001];
        *(_DWORD *)v1058 = v919[1];
        v996 = (int *)(v1058 + 4);
        while (v920 != v997)
        {
          v1059 = *--v920;
          *((_DWORD *)v1058 - 1) = v1059;
          v1058 -= 4;
        }
        *(_QWORD *)a12 = v1058;
        *(_QWORD *)(a12 + 8) = v996;
        *(_QWORD *)(a12 + 16) = v917;
        if (v997)
        {
          operator delete(v997);
          v917 = *v367;
        }
      }
      else
      {
        *v920 = v919[1];
        v996 = v920 + 1;
      }
      *(_QWORD *)(a12 + 8) = v996;
      if (v996 < (int *)v917)
      {
        *v996 = v1480;
        v1051 = v996 + 1;
        goto LABEL_2084;
      }
      v1052 = *(int **)a12;
      v1060 = ((uint64_t)v996 - *(_QWORD *)a12) >> 2;
      v1061 = v1060 + 1;
      if ((unint64_t)(v1060 + 1) >> 62)
        goto LABEL_2244;
      v1062 = v917 - (char *)v1052;
      if (v1062 >> 1 > v1061)
        v1061 = v1062 >> 1;
      if ((unint64_t)v1062 >= 0x7FFFFFFFFFFFFFFCLL)
        v1063 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1063 = v1061;
      if (v1063)
      {
        v1064 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1063);
        v1052 = *(int **)a12;
        v996 = *(int **)(a12 + 8);
      }
      else
      {
        v1064 = 0;
      }
      v1106 = (int *)&v1064[4 * v1060];
      v1107 = &v1064[4 * v1063];
      *v1106 = v1480;
      v1108 = v1106 + 1;
      while (v996 != v1052)
      {
        v1110 = *--v996;
        *--v1106 = v1110;
      }
      break;
    case 3:
      v38 = (char **)(a9 + 16);
      v37 = *(char **)(a9 + 16);
      if (v22 >= (unsigned int *)v37)
      {
        v64 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v65 = v37 - (char *)v21;
        if (v65 >> 1 > v64)
          v64 = v65 >> 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v66);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v67 = 0;
        }
        v117 = (unsigned int *)&v67[4 * v23];
        v37 = &v67[4 * v66];
        *v117 = *a1;
        v39 = v117 + 1;
        while (v22 != v21)
        {
          v118 = *--v22;
          *--v117 = v118;
        }
        *(_QWORD *)a9 = v117;
        *(_QWORD *)(a9 + 8) = v39;
        *(_QWORD *)(a9 + 16) = v37;
        if (v21)
        {
          operator delete(v21);
          v37 = *v38;
        }
      }
      else
      {
        *v22 = *a1;
        v39 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v39;
      if (v39 >= (unsigned int *)v37)
      {
        v120 = *(unsigned int **)a9;
        v121 = ((uint64_t)v39 - *(_QWORD *)a9) >> 2;
        v122 = v121 + 1;
        if ((unint64_t)(v121 + 1) >> 62)
          goto LABEL_2244;
        v123 = v37 - (char *)v120;
        if (v123 >> 1 > v122)
          v122 = v123 >> 1;
        if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
          v124 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v124 = v122;
        if (v124)
        {
          v125 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v124);
          v120 = *(unsigned int **)a9;
          v39 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v125 = 0;
        }
        v190 = (unsigned int *)&v125[4 * v121];
        v37 = &v125[4 * v124];
        *v190 = v1484;
        v119 = v190 + 1;
        while (v39 != v120)
        {
          v191 = *--v39;
          *--v190 = v191;
        }
        *(_QWORD *)a9 = v190;
        *(_QWORD *)(a9 + 8) = v119;
        *(_QWORD *)(a9 + 16) = v37;
        if (v120)
        {
          operator delete(v120);
          v37 = *v38;
        }
      }
      else
      {
        *v39 = v1484;
        v119 = v39 + 1;
      }
      *(_QWORD *)(a9 + 8) = v119;
      if (v119 >= (unsigned int *)v37)
      {
        v193 = *(unsigned int **)a9;
        v194 = ((uint64_t)v119 - *(_QWORD *)a9) >> 2;
        v195 = v194 + 1;
        if ((unint64_t)(v194 + 1) >> 62)
          goto LABEL_2244;
        v196 = v37 - (char *)v193;
        if (v196 >> 1 > v195)
          v195 = v196 >> 1;
        if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL)
          v197 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v197 = v195;
        if (v197)
        {
          v198 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v197);
          v193 = *(unsigned int **)a9;
          v119 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v198 = 0;
        }
        v275 = &v198[4 * v194];
        v276 = &v198[4 * v197];
        *(_DWORD *)v275 = a1[2];
        v192 = v275 + 4;
        while (v119 != v193)
        {
          v277 = *--v119;
          *((_DWORD *)v275 - 1) = v277;
          v275 -= 4;
        }
        *(_QWORD *)a9 = v275;
        *(_QWORD *)(a9 + 8) = v192;
        *(_QWORD *)(a9 + 16) = v276;
        if (v193)
          operator delete(v193);
      }
      else
      {
        *v119 = a1[2];
        v192 = v119 + 1;
      }
      *(_QWORD *)(a9 + 8) = v192;
      v278 = *(_QWORD *)(a10 + 16);
      v279 = *(_DWORD **)(a10 + 8);
      v1474 = a10 + 16;
      if ((unint64_t)v279 >= v278)
      {
        v281 = *(_DWORD **)a10;
        v282 = ((uint64_t)v279 - *(_QWORD *)a10) >> 2;
        v283 = v282 + 1;
        if ((unint64_t)(v282 + 1) >> 62)
          goto LABEL_2244;
        v284 = v278 - (_QWORD)v281;
        if (v284 >> 1 > v283)
          v283 = v284 >> 1;
        if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFFCLL)
          v285 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v285 = v283;
        if (v285)
        {
          v286 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v285);
          v281 = *(_DWORD **)a10;
          v279 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v286 = 0;
        }
        v376 = &v286[4 * v282];
        v377 = &v286[4 * v285];
        *(_DWORD *)v376 = v24;
        v280 = v376 + 4;
        while (v279 != v281)
        {
          v378 = *--v279;
          *((_DWORD *)v376 - 1) = v378;
          v376 -= 4;
        }
        *(_QWORD *)a10 = v376;
        *(_QWORD *)(a10 + 8) = v280;
        *(_QWORD *)(a10 + 16) = v377;
        if (v281)
          operator delete(v281);
      }
      else
      {
        *v279 = v24;
        v280 = v279 + 1;
      }
      *(_QWORD *)(a10 + 8) = v280;
      v380 = (char **)(a12 + 16);
      v379 = *(char **)(a12 + 16);
      v381 = *(unsigned int **)(a12 + 8);
      if (v381 >= (unsigned int *)v379)
      {
        v383 = *(int **)a12;
        v384 = ((uint64_t)v381 - *(_QWORD *)a12) >> 2;
        v385 = v384 + 1;
        if ((unint64_t)(v384 + 1) >> 62)
          goto LABEL_2244;
        v386 = v379 - (char *)v383;
        if (v386 >> 1 > v385)
          v385 = v386 >> 1;
        if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFFCLL)
          v387 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v387 = v385;
        if (v387)
        {
          v388 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v387);
          v383 = *(int **)a12;
          v381 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v388 = 0;
        }
        v464 = (unsigned int *)&v388[4 * v384];
        v379 = &v388[4 * v387];
        *v464 = *a6;
        v382 = (int *)(v464 + 1);
        while (v381 != (unsigned int *)v383)
        {
          v465 = *--v381;
          *--v464 = v465;
        }
        *(_QWORD *)a12 = v464;
        *(_QWORD *)(a12 + 8) = v382;
        *(_QWORD *)(a12 + 16) = v379;
        if (v383)
        {
          operator delete(v383);
          v379 = *v380;
        }
      }
      else
      {
        *v381 = *a6;
        v382 = (int *)(v381 + 1);
      }
      *(_QWORD *)(a12 + 8) = v382;
      if (v382 >= (int *)v379)
      {
        v467 = *(int **)a12;
        v468 = ((uint64_t)v382 - *(_QWORD *)a12) >> 2;
        v469 = v468 + 1;
        if ((unint64_t)(v468 + 1) >> 62)
          goto LABEL_2244;
        v470 = v379 - (char *)v467;
        if (v470 >> 1 > v469)
          v469 = v470 >> 1;
        if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFFCLL)
          v471 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v471 = v469;
        if (v471)
        {
          v472 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v471);
          v467 = *(int **)a12;
          v382 = *(int **)(a12 + 8);
        }
        else
        {
          v472 = 0;
        }
        v536 = (int *)&v472[4 * v468];
        v379 = &v472[4 * v471];
        *v536 = v16;
        v466 = v536 + 1;
        while (v382 != v467)
        {
          v537 = *--v382;
          *--v536 = v537;
        }
        *(_QWORD *)a12 = v536;
        *(_QWORD *)(a12 + 8) = v466;
        *(_QWORD *)(a12 + 16) = v379;
        if (v467)
        {
          operator delete(v467);
          v379 = *v380;
        }
      }
      else
      {
        *v382 = v16;
        v466 = v382 + 1;
      }
      *(_QWORD *)(a12 + 8) = v466;
      if (v466 >= (int *)v379)
      {
        v539 = *(int **)a12;
        v540 = ((uint64_t)v466 - *(_QWORD *)a12) >> 2;
        v541 = v540 + 1;
        if ((unint64_t)(v540 + 1) >> 62)
          goto LABEL_2244;
        v542 = v379 - (char *)v539;
        if (v542 >> 1 > v541)
          v541 = v542 >> 1;
        if ((unint64_t)v542 >= 0x7FFFFFFFFFFFFFFCLL)
          v543 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v543 = v541;
        if (v543)
        {
          v544 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v543);
          v539 = *(int **)a12;
          v466 = *(int **)(a12 + 8);
        }
        else
        {
          v544 = 0;
        }
        v611 = &v544[4 * v540];
        v612 = &v544[4 * v543];
        *(_DWORD *)v611 = a6[2];
        v538 = v611 + 4;
        while (v466 != v539)
        {
          v613 = *--v466;
          *((_DWORD *)v611 - 1) = v613;
          v611 -= 4;
        }
        *(_QWORD *)a12 = v611;
        *(_QWORD *)(a12 + 8) = v538;
        *(_QWORD *)(a12 + 16) = v612;
        if (v539)
          operator delete(v539);
      }
      else
      {
        *v466 = a6[2];
        v538 = v466 + 1;
      }
      *(_QWORD *)(a12 + 8) = v538;
      v615 = *(unsigned int **)(a9 + 8);
      v614 = *(char **)(a9 + 16);
      v1469 = v16;
      if (v615 >= (unsigned int *)v614)
      {
        v619 = *(unsigned int **)a9;
        v620 = ((uint64_t)v615 - *(_QWORD *)a9) >> 2;
        v621 = v620 + 1;
        if ((unint64_t)(v620 + 1) >> 62)
          goto LABEL_2244;
        v616 = (char **)(a12 + 16);
        v622 = v614 - (char *)v619;
        if (v622 >> 1 > v621)
          v621 = v622 >> 1;
        if ((unint64_t)v622 >= 0x7FFFFFFFFFFFFFFCLL)
          v623 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v623 = v621;
        v617 = v24;
        if (v623)
        {
          v624 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v623);
          v619 = *(unsigned int **)a9;
          v615 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v624 = 0;
        }
        v692 = &v624[4 * v620];
        v614 = &v624[4 * v623];
        *(_DWORD *)v692 = a1[1];
        v618 = (unsigned int *)(v692 + 4);
        while (v615 != v619)
        {
          v693 = *--v615;
          *((_DWORD *)v692 - 1) = v693;
          v692 -= 4;
        }
        *(_QWORD *)a9 = v692;
        *(_QWORD *)(a9 + 8) = v618;
        *(_QWORD *)(a9 + 16) = v614;
        if (v619)
        {
          operator delete(v619);
          v614 = *v38;
        }
      }
      else
      {
        v616 = (char **)(a12 + 16);
        v617 = v24;
        *v615 = a1[1];
        v618 = v615 + 1;
      }
      *(_QWORD *)(a9 + 8) = v618;
      if (v618 >= (unsigned int *)v614)
      {
        v695 = *(unsigned int **)a9;
        v696 = ((uint64_t)v618 - *(_QWORD *)a9) >> 2;
        v697 = v696 + 1;
        if ((unint64_t)(v696 + 1) >> 62)
          goto LABEL_2244;
        v698 = v614 - (char *)v695;
        if (v698 >> 1 > v697)
          v697 = v698 >> 1;
        if ((unint64_t)v698 >= 0x7FFFFFFFFFFFFFFCLL)
          v699 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v699 = v697;
        if (v699)
        {
          v700 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v699);
          v695 = *(unsigned int **)a9;
          v618 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v700 = 0;
        }
        v755 = (unsigned int *)&v700[4 * v696];
        v614 = &v700[4 * v699];
        *v755 = v1483;
        v694 = v755 + 1;
        while (v618 != v695)
        {
          v756 = *--v618;
          *--v755 = v756;
        }
        *(_QWORD *)a9 = v755;
        *(_QWORD *)(a9 + 8) = v694;
        *(_QWORD *)(a9 + 16) = v614;
        if (v695)
        {
          operator delete(v695);
          v614 = *v38;
        }
      }
      else
      {
        *v618 = v1483;
        v694 = v618 + 1;
      }
      v757 = v617;
      *(_QWORD *)(a9 + 8) = v694;
      v758 = v616;
      if (v694 >= (unsigned int *)v614)
      {
        v761 = *(unsigned int **)a9;
        v762 = ((uint64_t)v694 - *(_QWORD *)a9) >> 2;
        v763 = v762 + 1;
        v760 = v1469;
        if ((unint64_t)(v762 + 1) >> 62)
          goto LABEL_2244;
        v764 = v614 - (char *)v761;
        if (v764 >> 1 > v763)
          v763 = v764 >> 1;
        if ((unint64_t)v764 >= 0x7FFFFFFFFFFFFFFCLL)
          v765 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v765 = v763;
        if (v765)
        {
          v766 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v765);
          v761 = *(unsigned int **)a9;
          v694 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v766 = 0;
        }
        v837 = (unsigned int *)&v766[4 * v762];
        v838 = &v766[4 * v765];
        *v837 = v1484;
        v759 = v837 + 1;
        while (v694 != v761)
        {
          v839 = *--v694;
          *--v837 = v839;
        }
        *(_QWORD *)a9 = v837;
        *(_QWORD *)(a9 + 8) = v759;
        *(_QWORD *)(a9 + 16) = v838;
        if (v761)
          operator delete(v761);
      }
      else
      {
        *v694 = v1484;
        v759 = v694 + 1;
        v760 = v1469;
      }
      *(_QWORD *)(a9 + 8) = v759;
      v840 = v757 + 1;
      v842 = *(_DWORD **)(a10 + 8);
      v841 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v842 >= v841)
      {
        v844 = *(_DWORD **)a10;
        v845 = ((uint64_t)v842 - *(_QWORD *)a10) >> 2;
        v846 = v845 + 1;
        if ((unint64_t)(v845 + 1) >> 62)
          goto LABEL_2244;
        v847 = v841 - (_QWORD)v844;
        if (v847 >> 1 > v846)
          v846 = v847 >> 1;
        if ((unint64_t)v847 >= 0x7FFFFFFFFFFFFFFCLL)
          v848 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v848 = v846;
        if (v848)
        {
          v849 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1474, v848);
          v844 = *(_DWORD **)a10;
          v842 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v849 = 0;
        }
        v927 = &v849[4 * v845];
        v928 = &v849[4 * v848];
        *(_DWORD *)v927 = v840;
        v843 = v927 + 4;
        while (v842 != v844)
        {
          v929 = *--v842;
          *((_DWORD *)v927 - 1) = v929;
          v927 -= 4;
        }
        *(_QWORD *)a10 = v927;
        *(_QWORD *)(a10 + 8) = v843;
        *(_QWORD *)(a10 + 16) = v928;
        if (v844)
          operator delete(v844);
      }
      else
      {
        *v842 = v840;
        v843 = v842 + 1;
      }
      *(_QWORD *)(a10 + 8) = v843;
      v931 = *(int **)(a12 + 8);
      v930 = *(char **)(a12 + 16);
      if (v931 >= (int *)v930)
      {
        v933 = *(int **)a12;
        v934 = ((uint64_t)v931 - *(_QWORD *)a12) >> 2;
        v935 = v934 + 1;
        if ((unint64_t)(v934 + 1) >> 62)
          goto LABEL_2244;
        v936 = v930 - (char *)v933;
        if (v936 >> 1 > v935)
          v935 = v936 >> 1;
        if ((unint64_t)v936 >= 0x7FFFFFFFFFFFFFFCLL)
          v937 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v937 = v935;
        if (v937)
        {
          v938 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v758, v937);
          v933 = *(int **)a12;
          v931 = *(int **)(a12 + 8);
        }
        else
        {
          v938 = 0;
        }
        v1003 = &v938[4 * v934];
        v930 = &v938[4 * v937];
        *(_DWORD *)v1003 = a6[1];
        v932 = (int *)(v1003 + 4);
        while (v931 != v933)
        {
          v1004 = *--v931;
          *((_DWORD *)v1003 - 1) = v1004;
          v1003 -= 4;
        }
        *(_QWORD *)a12 = v1003;
        *(_QWORD *)(a12 + 8) = v932;
        *(_QWORD *)(a12 + 16) = v930;
        if (v933)
        {
          operator delete(v933);
          v930 = *v758;
        }
      }
      else
      {
        *v931 = a6[1];
        v932 = v931 + 1;
      }
      *(_QWORD *)(a12 + 8) = v932;
      if (v932 >= (int *)v930)
      {
        v1006 = *(int **)a12;
        v1007 = ((uint64_t)v932 - *(_QWORD *)a12) >> 2;
        v1008 = v1007 + 1;
        if ((unint64_t)(v1007 + 1) >> 62)
          goto LABEL_2244;
        v1009 = v930 - (char *)v1006;
        if (v1009 >> 1 > v1008)
          v1008 = v1009 >> 1;
        if ((unint64_t)v1009 >= 0x7FFFFFFFFFFFFFFCLL)
          v1010 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1010 = v1008;
        if (v1010)
        {
          v1011 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v758, v1010);
          v1006 = *(int **)a12;
          v932 = *(int **)(a12 + 8);
        }
        else
        {
          v1011 = 0;
        }
        v1065 = (int *)&v1011[4 * v1007];
        v930 = &v1011[4 * v1010];
        *v1065 = v1480;
        v1005 = v1065 + 1;
        while (v932 != v1006)
        {
          v1066 = *--v932;
          *--v1065 = v1066;
        }
        *(_QWORD *)a12 = v1065;
        *(_QWORD *)(a12 + 8) = v1005;
        *(_QWORD *)(a12 + 16) = v930;
        if (v1006)
        {
          operator delete(v1006);
          v930 = *v758;
        }
      }
      else
      {
        *v932 = v1480;
        v1005 = v932 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1005;
      if (v1005 >= (int *)v930)
      {
        v1068 = *(int **)a12;
        v1069 = ((uint64_t)v1005 - *(_QWORD *)a12) >> 2;
        v1070 = v1069 + 1;
        if ((unint64_t)(v1069 + 1) >> 62)
          goto LABEL_2244;
        v1071 = v930 - (char *)v1068;
        if (v1071 >> 1 > v1070)
          v1070 = v1071 >> 1;
        if ((unint64_t)v1071 >= 0x7FFFFFFFFFFFFFFCLL)
          v1072 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1072 = v1070;
        if (v1072)
        {
          v1073 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v758, v1072);
          v1068 = *(int **)a12;
          v1005 = *(int **)(a12 + 8);
        }
        else
        {
          v1073 = 0;
        }
        v1111 = &v1073[4 * v1069];
        v1112 = &v1073[4 * v1072];
        *(_DWORD *)v1111 = v760;
        v1067 = v1111 + 4;
        while (v1005 != v1068)
        {
          v1113 = *--v1005;
          *((_DWORD *)v1111 - 1) = v1113;
          v1111 -= 4;
        }
        *(_QWORD *)a12 = v1111;
        *(_QWORD *)(a12 + 8) = v1067;
        *(_QWORD *)(a12 + 16) = v1112;
        if (v1068)
          operator delete(v1068);
      }
      else
      {
        *v1005 = v760;
        v1067 = v1005 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1067;
      v1115 = *(unsigned int **)(a9 + 8);
      v1114 = *(char **)(a9 + 16);
      if (v1115 >= (unsigned int *)v1114)
      {
        v1117 = *(unsigned int **)a9;
        v1118 = ((uint64_t)v1115 - *(_QWORD *)a9) >> 2;
        v1119 = v1118 + 1;
        if ((unint64_t)(v1118 + 1) >> 62)
          goto LABEL_2244;
        v1120 = v1114 - (char *)v1117;
        if (v1120 >> 1 > v1119)
          v1119 = v1120 >> 1;
        if ((unint64_t)v1120 >= 0x7FFFFFFFFFFFFFFCLL)
          v1121 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1121 = v1119;
        if (v1121)
        {
          v1122 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1121);
          v1117 = *(unsigned int **)a9;
          v1115 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1122 = 0;
        }
        v1161 = &v1122[4 * v1118];
        v1114 = &v1122[4 * v1121];
        *(_DWORD *)v1161 = a1[2];
        v1116 = (unsigned int *)(v1161 + 4);
        while (v1115 != v1117)
        {
          v1162 = *--v1115;
          *((_DWORD *)v1161 - 1) = v1162;
          v1161 -= 4;
        }
        *(_QWORD *)a9 = v1161;
        *(_QWORD *)(a9 + 8) = v1116;
        *(_QWORD *)(a9 + 16) = v1114;
        if (v1117)
        {
          operator delete(v1117);
          v1114 = *v38;
        }
      }
      else
      {
        *v1115 = a1[2];
        v1116 = v1115 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1116;
      if (v1116 >= (unsigned int *)v1114)
      {
        v1164 = *(unsigned int **)a9;
        v1165 = ((uint64_t)v1116 - *(_QWORD *)a9) >> 2;
        v1166 = v1165 + 1;
        if ((unint64_t)(v1165 + 1) >> 62)
          goto LABEL_2244;
        v1167 = v1114 - (char *)v1164;
        if (v1167 >> 1 > v1166)
          v1166 = v1167 >> 1;
        if ((unint64_t)v1167 >= 0x7FFFFFFFFFFFFFFCLL)
          v1168 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1168 = v1166;
        if (v1168)
        {
          v1169 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1168);
          v1164 = *(unsigned int **)a9;
          v1116 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1169 = 0;
        }
        v1198 = (unsigned int *)&v1169[4 * v1165];
        v1114 = &v1169[4 * v1168];
        *v1198 = v1484;
        v1163 = v1198 + 1;
        while (v1116 != v1164)
        {
          v1199 = *--v1116;
          *--v1198 = v1199;
        }
        *(_QWORD *)a9 = v1198;
        *(_QWORD *)(a9 + 8) = v1163;
        *(_QWORD *)(a9 + 16) = v1114;
        if (v1164)
        {
          operator delete(v1164);
          v1114 = *v38;
        }
      }
      else
      {
        *v1116 = v1484;
        v1163 = v1116 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1163;
      if (v1163 >= (unsigned int *)v1114)
      {
        v1201 = *(unsigned int **)a9;
        v1202 = ((uint64_t)v1163 - *(_QWORD *)a9) >> 2;
        v1203 = v1202 + 1;
        if ((unint64_t)(v1202 + 1) >> 62)
          goto LABEL_2244;
        v1204 = v1114 - (char *)v1201;
        if (v1204 >> 1 > v1203)
          v1203 = v1204 >> 1;
        if ((unint64_t)v1204 >= 0x7FFFFFFFFFFFFFFCLL)
          v1205 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1205 = v1203;
        if (v1205)
        {
          v1206 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1205);
          v1201 = *(unsigned int **)a9;
          v1163 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1206 = 0;
        }
        v1238 = (unsigned int *)&v1206[4 * v1202];
        v1239 = &v1206[4 * v1205];
        *v1238 = v1483;
        v1200 = v1238 + 1;
        while (v1163 != v1201)
        {
          v1240 = *--v1163;
          *--v1238 = v1240;
        }
        *(_QWORD *)a9 = v1238;
        *(_QWORD *)(a9 + 8) = v1200;
        *(_QWORD *)(a9 + 16) = v1239;
        if (v1201)
          operator delete(v1201);
      }
      else
      {
        *v1163 = v1483;
        v1200 = v1163 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1200;
      v1241 = v757 + 2;
      v1243 = *(_DWORD **)(a10 + 8);
      v1242 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v1243 >= v1242)
      {
        v1245 = *(_DWORD **)a10;
        v1246 = ((uint64_t)v1243 - *(_QWORD *)a10) >> 2;
        v1247 = v1246 + 1;
        if ((unint64_t)(v1246 + 1) >> 62)
          goto LABEL_2244;
        v1248 = v1242 - (_QWORD)v1245;
        if (v1248 >> 1 > v1247)
          v1247 = v1248 >> 1;
        if ((unint64_t)v1248 >= 0x7FFFFFFFFFFFFFFCLL)
          v1249 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1249 = v1247;
        if (v1249)
        {
          v1250 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1474, v1249);
          v1245 = *(_DWORD **)a10;
          v1243 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v1250 = 0;
        }
        v1289 = &v1250[4 * v1246];
        v1290 = &v1250[4 * v1249];
        *(_DWORD *)v1289 = v1241;
        v1244 = v1289 + 4;
        while (v1243 != v1245)
        {
          v1291 = *--v1243;
          *((_DWORD *)v1289 - 1) = v1291;
          v1289 -= 4;
        }
        *(_QWORD *)a10 = v1289;
        *(_QWORD *)(a10 + 8) = v1244;
        *(_QWORD *)(a10 + 16) = v1290;
        if (v1245)
          operator delete(v1245);
      }
      else
      {
        *v1243 = v1241;
        v1244 = v1243 + 1;
      }
      *(_QWORD *)(a10 + 8) = v1244;
      v1293 = *(int **)(a12 + 8);
      v1292 = *(char **)(a12 + 16);
      if (v1293 >= (int *)v1292)
      {
        v1295 = *(int **)a12;
        v1296 = ((uint64_t)v1293 - *(_QWORD *)a12) >> 2;
        v1297 = v1296 + 1;
        if ((unint64_t)(v1296 + 1) >> 62)
          goto LABEL_2244;
        v1298 = v1292 - (char *)v1295;
        if (v1298 >> 1 > v1297)
          v1297 = v1298 >> 1;
        if ((unint64_t)v1298 >= 0x7FFFFFFFFFFFFFFCLL)
          v1299 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1299 = v1297;
        if (v1299)
        {
          v1300 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v758, v1299);
          v1295 = *(int **)a12;
          v1293 = *(int **)(a12 + 8);
        }
        else
        {
          v1300 = 0;
        }
        v1335 = &v1300[4 * v1296];
        v1292 = &v1300[4 * v1299];
        *(_DWORD *)v1335 = a6[2];
        v1294 = (int *)(v1335 + 4);
        while (v1293 != v1295)
        {
          v1336 = *--v1293;
          *((_DWORD *)v1335 - 1) = v1336;
          v1335 -= 4;
        }
        *(_QWORD *)a12 = v1335;
        *(_QWORD *)(a12 + 8) = v1294;
        *(_QWORD *)(a12 + 16) = v1292;
        if (v1295)
        {
          operator delete(v1295);
          v1292 = *v758;
        }
      }
      else
      {
        *v1293 = a6[2];
        v1294 = v1293 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1294;
      if (v1294 >= (int *)v1292)
      {
        v1338 = *(int **)a12;
        v1339 = ((uint64_t)v1294 - *(_QWORD *)a12) >> 2;
        v1340 = v1339 + 1;
        if ((unint64_t)(v1339 + 1) >> 62)
          goto LABEL_2244;
        v1341 = v1292 - (char *)v1338;
        if (v1341 >> 1 > v1340)
          v1340 = v1341 >> 1;
        if ((unint64_t)v1341 >= 0x7FFFFFFFFFFFFFFCLL)
          v1342 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1342 = v1340;
        if (v1342)
        {
          v1343 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v758, v1342);
          v1338 = *(int **)a12;
          v1294 = *(int **)(a12 + 8);
        }
        else
        {
          v1343 = 0;
        }
        v1370 = &v1343[4 * v1339];
        v1292 = &v1343[4 * v1342];
        *(_DWORD *)v1370 = v760;
        v1337 = (int *)(v1370 + 4);
        while (v1294 != v1338)
        {
          v1371 = *--v1294;
          *((_DWORD *)v1370 - 1) = v1371;
          v1370 -= 4;
        }
        *(_QWORD *)a12 = v1370;
        *(_QWORD *)(a12 + 8) = v1337;
        *(_QWORD *)(a12 + 16) = v1292;
        if (v1338)
        {
          operator delete(v1338);
          v1292 = *v758;
        }
      }
      else
      {
        *v1294 = v760;
        v1337 = v1294 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1337;
      if (v1337 < (int *)v1292)
        goto LABEL_2100;
      v503 = *(int **)a12;
      v1372 = ((uint64_t)v1337 - *(_QWORD *)a12) >> 2;
      v1373 = v1372 + 1;
      if (!((unint64_t)(v1372 + 1) >> 62))
      {
        v1374 = v1292 - (char *)v503;
        if (v1374 >> 1 > v1373)
          v1373 = v1374 >> 1;
        if ((unint64_t)v1374 >= 0x7FFFFFFFFFFFFFFCLL)
          v1375 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1375 = v1373;
        if (v1375)
        {
          v1376 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v758, v1375);
          v503 = *(int **)a12;
          v1337 = *(int **)(a12 + 8);
        }
        else
        {
          v1376 = 0;
        }
        v572 = (int *)&v1376[4 * v1372];
        v573 = &v1376[4 * v1375];
        *v572 = v1480;
        v502 = v572 + 1;
        while (v1337 != v503)
        {
          v1404 = *--v1337;
          *--v572 = v1404;
        }
        goto LABEL_2241;
      }
      goto LABEL_2244;
    case 4:
      v1477 = v23 / 3;
      v41 = (char **)(a9 + 16);
      v40 = *(char **)(a9 + 16);
      if (v22 >= (unsigned int *)v40)
      {
        v68 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v69 = v40 - (char *)v21;
        if (v69 >> 1 > v68)
          v68 = v69 >> 1;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          v71 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v70);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v71 = 0;
        }
        v126 = (unsigned int *)&v71[4 * v23];
        v40 = &v71[4 * v70];
        *v126 = *a1;
        v42 = v126 + 1;
        while (v22 != v21)
        {
          v127 = *--v22;
          *--v126 = v127;
        }
        *(_QWORD *)a9 = v126;
        *(_QWORD *)(a9 + 8) = v42;
        *(_QWORD *)(a9 + 16) = v40;
        if (v21)
        {
          operator delete(v21);
          v40 = *v41;
        }
      }
      else
      {
        *v22 = *a1;
        v42 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v42;
      if (v42 >= (unsigned int *)v40)
      {
        v130 = *(unsigned int **)a9;
        v131 = ((uint64_t)v42 - *(_QWORD *)a9) >> 2;
        v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 62)
          goto LABEL_2244;
        v133 = v40 - (char *)v130;
        if (v133 >> 1 > v132)
          v132 = v133 >> 1;
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
          v134 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v134 = v132;
        v128 = v20;
        if (v134)
        {
          v135 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v134);
          v130 = *(unsigned int **)a9;
          v42 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v135 = 0;
        }
        v199 = &v135[4 * v131];
        v40 = &v135[4 * v134];
        *(_DWORD *)v199 = a1[1];
        v129 = (unsigned int *)(v199 + 4);
        while (v42 != v130)
        {
          v200 = *--v42;
          *((_DWORD *)v199 - 1) = v200;
          v199 -= 4;
        }
        *(_QWORD *)a9 = v199;
        *(_QWORD *)(a9 + 8) = v129;
        *(_QWORD *)(a9 + 16) = v40;
        if (v130)
        {
          operator delete(v130);
          v40 = *v41;
        }
      }
      else
      {
        v128 = v20;
        *v42 = a1[1];
        v129 = v42 + 1;
      }
      *(_QWORD *)(a9 + 8) = v129;
      if (v129 >= (unsigned int *)v40)
      {
        v202 = *(unsigned int **)a9;
        v203 = ((uint64_t)v129 - *(_QWORD *)a9) >> 2;
        v204 = v203 + 1;
        if ((unint64_t)(v203 + 1) >> 62)
          goto LABEL_2244;
        v205 = v40 - (char *)v202;
        if (v205 >> 1 > v204)
          v204 = v205 >> 1;
        if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL)
          v206 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v206 = v204;
        if (v206)
        {
          v207 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v206);
          v202 = *(unsigned int **)a9;
          v129 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v207 = 0;
        }
        v287 = (unsigned int *)&v207[4 * v203];
        v288 = &v207[4 * v206];
        *v287 = v1482;
        v201 = v287 + 1;
        while (v129 != v202)
        {
          v289 = *--v129;
          *--v287 = v289;
        }
        *(_QWORD *)a9 = v287;
        *(_QWORD *)(a9 + 8) = v201;
        *(_QWORD *)(a9 + 16) = v288;
        if (v202)
          operator delete(v202);
      }
      else
      {
        *v129 = v1482;
        v201 = v129 + 1;
      }
      *(_QWORD *)(a9 + 8) = v201;
      v290 = *(_QWORD *)(a10 + 16);
      v291 = *(_DWORD **)(a10 + 8);
      if ((unint64_t)v291 >= v290)
      {
        v293 = *(_DWORD **)a10;
        v294 = ((uint64_t)v291 - *(_QWORD *)a10) >> 2;
        v295 = v294 + 1;
        if ((unint64_t)(v294 + 1) >> 62)
          goto LABEL_2244;
        v296 = v290 - (_QWORD)v293;
        if (v296 >> 1 > v295)
          v295 = v296 >> 1;
        if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFFCLL)
          v297 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v297 = v295;
        if (v297)
        {
          v298 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v297);
          v293 = *(_DWORD **)a10;
          v291 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v298 = 0;
        }
        v389 = &v298[4 * v294];
        v390 = &v298[4 * v297];
        *(_DWORD *)v389 = v1477;
        v292 = v389 + 4;
        while (v291 != v293)
        {
          v391 = *--v291;
          *((_DWORD *)v389 - 1) = v391;
          v389 -= 4;
        }
        *(_QWORD *)a10 = v389;
        *(_QWORD *)(a10 + 8) = v292;
        *(_QWORD *)(a10 + 16) = v390;
        if (v293)
          operator delete(v293);
      }
      else
      {
        *v291 = v1477;
        v292 = v291 + 1;
      }
      *(_QWORD *)(a10 + 8) = v292;
      v393 = (char **)(a12 + 16);
      v392 = *(char **)(a12 + 16);
      v394 = *(unsigned int **)(a12 + 8);
      if (v394 >= (unsigned int *)v392)
      {
        v396 = *(int **)a12;
        v397 = ((uint64_t)v394 - *(_QWORD *)a12) >> 2;
        v398 = v397 + 1;
        if ((unint64_t)(v397 + 1) >> 62)
          goto LABEL_2244;
        v399 = v392 - (char *)v396;
        if (v399 >> 1 > v398)
          v398 = v399 >> 1;
        if ((unint64_t)v399 >= 0x7FFFFFFFFFFFFFFCLL)
          v400 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v400 = v398;
        if (v400)
        {
          v401 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v400);
          v396 = *(int **)a12;
          v394 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v401 = 0;
        }
        v473 = (unsigned int *)&v401[4 * v397];
        v392 = &v401[4 * v400];
        *v473 = *a6;
        v395 = (int *)(v473 + 1);
        while (v394 != (unsigned int *)v396)
        {
          v474 = *--v394;
          *--v473 = v474;
        }
        *(_QWORD *)a12 = v473;
        *(_QWORD *)(a12 + 8) = v395;
        *(_QWORD *)(a12 + 16) = v392;
        if (v396)
        {
          operator delete(v396);
          v392 = *v393;
        }
      }
      else
      {
        *v394 = *a6;
        v395 = (int *)(v394 + 1);
      }
      *(_QWORD *)(a12 + 8) = v395;
      if (v395 >= (int *)v392)
      {
        v476 = *(int **)a12;
        v477 = ((uint64_t)v395 - *(_QWORD *)a12) >> 2;
        v478 = v477 + 1;
        if ((unint64_t)(v477 + 1) >> 62)
          goto LABEL_2244;
        v479 = v392 - (char *)v476;
        if (v479 >> 1 > v478)
          v478 = v479 >> 1;
        if ((unint64_t)v479 >= 0x7FFFFFFFFFFFFFFCLL)
          v480 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v480 = v478;
        if (v480)
        {
          v481 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v480);
          v476 = *(int **)a12;
          v395 = *(int **)(a12 + 8);
        }
        else
        {
          v481 = 0;
        }
        v545 = &v481[4 * v477];
        v392 = &v481[4 * v480];
        *(_DWORD *)v545 = a6[1];
        v475 = (int *)(v545 + 4);
        while (v395 != v476)
        {
          v546 = *--v395;
          *((_DWORD *)v545 - 1) = v546;
          v545 -= 4;
        }
        *(_QWORD *)a12 = v545;
        *(_QWORD *)(a12 + 8) = v475;
        *(_QWORD *)(a12 + 16) = v392;
        if (v476)
        {
          operator delete(v476);
          v392 = *v393;
        }
      }
      else
      {
        *v395 = a6[1];
        v475 = v395 + 1;
      }
      *(_QWORD *)(a12 + 8) = v475;
      v1472 = v128;
      if (v475 >= (int *)v392)
      {
        v548 = *(int **)a12;
        v549 = ((uint64_t)v475 - *(_QWORD *)a12) >> 2;
        v550 = v549 + 1;
        if ((unint64_t)(v549 + 1) >> 62)
          goto LABEL_2244;
        v551 = v392 - (char *)v548;
        if (v551 >> 1 > v550)
          v550 = v551 >> 1;
        if ((unint64_t)v551 >= 0x7FFFFFFFFFFFFFFCLL)
          v552 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v552 = v550;
        if (v552)
        {
          v553 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v552);
          v548 = *(int **)a12;
          v475 = *(int **)(a12 + 8);
        }
        else
        {
          v553 = 0;
        }
        v625 = (int *)&v553[4 * v549];
        v626 = &v553[4 * v552];
        *v625 = v128;
        v547 = v625 + 1;
        while (v475 != v548)
        {
          v627 = *--v475;
          *--v625 = v627;
        }
        *(_QWORD *)a12 = v625;
        *(_QWORD *)(a12 + 8) = v547;
        *(_QWORD *)(a12 + 16) = v626;
        if (v548)
          operator delete(v548);
      }
      else
      {
        *v475 = v128;
        v547 = v475 + 1;
      }
      *(_QWORD *)(a12 + 8) = v547;
      v629 = *(unsigned int **)(a9 + 8);
      v628 = *(char **)(a9 + 16);
      if (v629 >= (unsigned int *)v628)
      {
        v631 = *(unsigned int **)a9;
        v632 = ((uint64_t)v629 - *(_QWORD *)a9) >> 2;
        v633 = v632 + 1;
        if ((unint64_t)(v632 + 1) >> 62)
          goto LABEL_2244;
        v634 = v628 - (char *)v631;
        if (v634 >> 1 > v633)
          v633 = v634 >> 1;
        if ((unint64_t)v634 >= 0x7FFFFFFFFFFFFFFCLL)
          v635 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v635 = v633;
        if (v635)
        {
          v636 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v635);
          v631 = *(unsigned int **)a9;
          v629 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v636 = 0;
        }
        v701 = &v636[4 * v632];
        v628 = &v636[4 * v635];
        *(_DWORD *)v701 = a1[1];
        v630 = (unsigned int *)(v701 + 4);
        while (v629 != v631)
        {
          v702 = *--v629;
          *((_DWORD *)v701 - 1) = v702;
          v701 -= 4;
        }
        *(_QWORD *)a9 = v701;
        *(_QWORD *)(a9 + 8) = v630;
        *(_QWORD *)(a9 + 16) = v628;
        if (v631)
        {
          operator delete(v631);
          v628 = *v41;
        }
      }
      else
      {
        *v629 = a1[1];
        v630 = v629 + 1;
      }
      *(_QWORD *)(a9 + 8) = v630;
      if (v630 >= (unsigned int *)v628)
      {
        v704 = *(unsigned int **)a9;
        v705 = ((uint64_t)v630 - *(_QWORD *)a9) >> 2;
        v706 = v705 + 1;
        if ((unint64_t)(v705 + 1) >> 62)
          goto LABEL_2244;
        v707 = v628 - (char *)v704;
        if (v707 >> 1 > v706)
          v706 = v707 >> 1;
        if ((unint64_t)v707 >= 0x7FFFFFFFFFFFFFFCLL)
          v708 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v708 = v706;
        if (v708)
        {
          v709 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v708);
          v704 = *(unsigned int **)a9;
          v630 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v709 = 0;
        }
        v767 = &v709[4 * v705];
        v628 = &v709[4 * v708];
        *(_DWORD *)v767 = a1[2];
        v703 = (unsigned int *)(v767 + 4);
        while (v630 != v704)
        {
          v768 = *--v630;
          *((_DWORD *)v767 - 1) = v768;
          v767 -= 4;
        }
        *(_QWORD *)a9 = v767;
        *(_QWORD *)(a9 + 8) = v703;
        *(_QWORD *)(a9 + 16) = v628;
        if (v704)
        {
          operator delete(v704);
          v628 = *v41;
        }
      }
      else
      {
        *v630 = a1[2];
        v703 = v630 + 1;
      }
      *(_QWORD *)(a9 + 8) = v703;
      if (v703 >= (unsigned int *)v628)
      {
        v771 = *(unsigned int **)a9;
        v772 = ((uint64_t)v703 - *(_QWORD *)a9) >> 2;
        v773 = v772 + 1;
        if ((unint64_t)(v772 + 1) >> 62)
          goto LABEL_2244;
        v774 = v628 - (char *)v771;
        if (v774 >> 1 > v773)
          v773 = v774 >> 1;
        if ((unint64_t)v774 >= 0x7FFFFFFFFFFFFFFCLL)
          v775 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v775 = v773;
        if (v775)
        {
          v776 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v775);
          v771 = *(unsigned int **)a9;
          v703 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v776 = 0;
        }
        v770 = v23 / 3;
        v850 = (unsigned int *)&v776[4 * v772];
        v851 = &v776[4 * v775];
        *v850 = v1482;
        v769 = v850 + 1;
        while (v703 != v771)
        {
          v852 = *--v703;
          *--v850 = v852;
        }
        *(_QWORD *)a9 = v850;
        *(_QWORD *)(a9 + 8) = v769;
        *(_QWORD *)(a9 + 16) = v851;
        if (v771)
          operator delete(v771);
      }
      else
      {
        *v703 = v1482;
        v769 = v703 + 1;
        v770 = v23 / 3;
      }
      *(_QWORD *)(a9 + 8) = v769;
      v853 = v770 + 1;
      v855 = *(_DWORD **)(a10 + 8);
      v854 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v855 >= v854)
      {
        v857 = *(_DWORD **)a10;
        v858 = ((uint64_t)v855 - *(_QWORD *)a10) >> 2;
        v859 = v858 + 1;
        if ((unint64_t)(v858 + 1) >> 62)
          goto LABEL_2244;
        v860 = v854 - (_QWORD)v857;
        if (v860 >> 1 > v859)
          v859 = v860 >> 1;
        if ((unint64_t)v860 >= 0x7FFFFFFFFFFFFFFCLL)
          v861 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v861 = v859;
        if (v861)
        {
          v862 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v861);
          v857 = *(_DWORD **)a10;
          v855 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v862 = 0;
        }
        v939 = &v862[4 * v858];
        v940 = &v862[4 * v861];
        *(_DWORD *)v939 = v853;
        v856 = v939 + 4;
        while (v855 != v857)
        {
          v941 = *--v855;
          *((_DWORD *)v939 - 1) = v941;
          v939 -= 4;
        }
        *(_QWORD *)a10 = v939;
        *(_QWORD *)(a10 + 8) = v856;
        *(_QWORD *)(a10 + 16) = v940;
        if (v857)
          operator delete(v857);
      }
      else
      {
        *v855 = v853;
        v856 = v855 + 1;
      }
      *(_QWORD *)(a10 + 8) = v856;
      v943 = *(int **)(a12 + 8);
      v942 = *(char **)(a12 + 16);
      if (v943 >= (int *)v942)
      {
        v946 = *(int **)a12;
        v947 = ((uint64_t)v943 - *(_QWORD *)a12) >> 2;
        v948 = v947 + 1;
        v944 = a6;
        if ((unint64_t)(v947 + 1) >> 62)
          goto LABEL_2244;
        v949 = v942 - (char *)v946;
        if (v949 >> 1 > v948)
          v948 = v949 >> 1;
        if ((unint64_t)v949 >= 0x7FFFFFFFFFFFFFFCLL)
          v950 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v950 = v948;
        if (v950)
        {
          v951 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v950);
          v946 = *(int **)a12;
          v943 = *(int **)(a12 + 8);
        }
        else
        {
          v951 = 0;
        }
        v1012 = &v951[4 * v947];
        v942 = &v951[4 * v950];
        *(_DWORD *)v1012 = a6[1];
        v945 = (int *)(v1012 + 4);
        while (v943 != v946)
        {
          v1013 = *--v943;
          *((_DWORD *)v1012 - 1) = v1013;
          v1012 -= 4;
        }
        *(_QWORD *)a12 = v1012;
        *(_QWORD *)(a12 + 8) = v945;
        *(_QWORD *)(a12 + 16) = v942;
        if (v946)
        {
          operator delete(v946);
          v942 = *v393;
        }
      }
      else
      {
        v944 = a6;
        *v943 = a6[1];
        v945 = v943 + 1;
      }
      *(_QWORD *)(a12 + 8) = v945;
      if (v945 >= (int *)v942)
      {
        v1016 = *(int **)a12;
        v1017 = ((uint64_t)v945 - *(_QWORD *)a12) >> 2;
        v1018 = v1017 + 1;
        if ((unint64_t)(v1017 + 1) >> 62)
          goto LABEL_2244;
        v1019 = v942 - (char *)v1016;
        if (v1019 >> 1 > v1018)
          v1018 = v1019 >> 1;
        if ((unint64_t)v1019 >= 0x7FFFFFFFFFFFFFFCLL)
          v1020 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1020 = v1018;
        if (v1020)
        {
          v1021 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1020);
          v1016 = *(int **)a12;
          v945 = *(int **)(a12 + 8);
        }
        else
        {
          v1021 = 0;
        }
        v1074 = &v1021[4 * v1017];
        v942 = &v1021[4 * v1020];
        *(_DWORD *)v1074 = v944[2];
        v1014 = (int *)(v1074 + 4);
        if (v945 == v1016)
        {
          v1015 = v1472;
        }
        else
        {
          v1015 = v1472;
          do
          {
            v1075 = *--v945;
            *((_DWORD *)v1074 - 1) = v1075;
            v1074 -= 4;
          }
          while (v945 != v1016);
        }
        *(_QWORD *)a12 = v1074;
        *(_QWORD *)(a12 + 8) = v1014;
        *(_QWORD *)(a12 + 16) = v942;
        if (v1016)
        {
          operator delete(v1016);
          v942 = *v393;
        }
      }
      else
      {
        *v945 = v944[2];
        v1014 = v945 + 1;
        v1015 = v1472;
      }
      *(_QWORD *)(a12 + 8) = v1014;
      if (v1014 < (int *)v942)
      {
        *v1014 = v1015;
        v1051 = v1014 + 1;
        goto LABEL_2084;
      }
      v1052 = *(int **)a12;
      v1123 = ((uint64_t)v1014 - *(_QWORD *)a12) >> 2;
      v1124 = v1123 + 1;
      if ((unint64_t)(v1123 + 1) >> 62)
        goto LABEL_2244;
      v1125 = v942 - (char *)v1052;
      if (v1125 >> 1 > v1124)
        v1124 = v1125 >> 1;
      if ((unint64_t)v1125 >= 0x7FFFFFFFFFFFFFFCLL)
        v1126 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1126 = v1124;
      if (v1126)
      {
        v1127 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1126);
        v1052 = *(int **)a12;
        v1014 = *(int **)(a12 + 8);
      }
      else
      {
        v1127 = 0;
      }
      v1106 = (int *)&v1127[4 * v1123];
      v1107 = &v1127[4 * v1126];
      *v1106 = v1015;
      v1108 = v1106 + 1;
      while (v1014 != v1052)
      {
        v1170 = *--v1014;
        *--v1106 = v1170;
      }
      break;
    case 5:
      v43 = *(char **)(a9 + 16);
      v1481 = (char **)(a9 + 16);
      if (v22 >= (unsigned int *)v43)
      {
        v72 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v73 = v43 - (char *)v21;
        if (v73 >> 1 > v72)
          v72 = v73 >> 1;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
          v74 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
        {
          v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v74);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v75 = 0;
        }
        v136 = (unsigned int *)&v75[4 * v23];
        v43 = &v75[4 * v74];
        *v136 = *a1;
        v44 = v136 + 1;
        while (v22 != v21)
        {
          v137 = *--v22;
          *--v136 = v137;
        }
        *(_QWORD *)a9 = v136;
        *(_QWORD *)(a9 + 8) = v44;
        *(_QWORD *)(a9 + 16) = v43;
        if (v21)
        {
          operator delete(v21);
          v43 = *v1481;
        }
      }
      else
      {
        *v22 = *a1;
        v44 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v44;
      if (v44 >= (unsigned int *)v43)
      {
        v139 = *(unsigned int **)a9;
        v140 = ((uint64_t)v44 - *(_QWORD *)a9) >> 2;
        v141 = v140 + 1;
        if ((unint64_t)(v140 + 1) >> 62)
          goto LABEL_2244;
        v142 = v43 - (char *)v139;
        if (v142 >> 1 > v141)
          v141 = v142 >> 1;
        if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
          v143 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v143 = v141;
        if (v143)
        {
          v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v143);
          v139 = *(unsigned int **)a9;
          v44 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v144 = 0;
        }
        v208 = (unsigned int *)&v144[4 * v140];
        v43 = &v144[4 * v143];
        *v208 = v1484;
        v138 = v208 + 1;
        while (v44 != v139)
        {
          v209 = *--v44;
          *--v208 = v209;
        }
        *(_QWORD *)a9 = v208;
        *(_QWORD *)(a9 + 8) = v138;
        *(_QWORD *)(a9 + 16) = v43;
        if (v139)
        {
          operator delete(v139);
          v43 = *v1481;
        }
      }
      else
      {
        *v44 = v1484;
        v138 = v44 + 1;
      }
      *(_QWORD *)(a9 + 8) = v138;
      if (v138 >= (unsigned int *)v43)
      {
        v211 = *(unsigned int **)a9;
        v212 = ((uint64_t)v138 - *(_QWORD *)a9) >> 2;
        v213 = v212 + 1;
        if ((unint64_t)(v212 + 1) >> 62)
          goto LABEL_2244;
        v214 = v43 - (char *)v211;
        if (v214 >> 1 > v213)
          v213 = v214 >> 1;
        if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL)
          v215 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v215 = v213;
        if (v215)
        {
          v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v215);
          v211 = *(unsigned int **)a9;
          v138 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v216 = 0;
        }
        v299 = (unsigned int *)&v216[4 * v212];
        v300 = &v216[4 * v215];
        *v299 = v1482;
        v210 = v299 + 1;
        while (v138 != v211)
        {
          v301 = *--v138;
          *--v299 = v301;
        }
        *(_QWORD *)a9 = v299;
        *(_QWORD *)(a9 + 8) = v210;
        *(_QWORD *)(a9 + 16) = v300;
        if (v211)
          operator delete(v211);
      }
      else
      {
        *v138 = v1482;
        v210 = v138 + 1;
      }
      *(_QWORD *)(a9 + 8) = v210;
      v302 = *(_QWORD *)(a10 + 16);
      v1468 = a10 + 16;
      v303 = *(_DWORD **)(a10 + 8);
      if ((unint64_t)v303 >= v302)
      {
        v305 = *(_DWORD **)a10;
        v306 = ((uint64_t)v303 - *(_QWORD *)a10) >> 2;
        v307 = v306 + 1;
        if ((unint64_t)(v306 + 1) >> 62)
          goto LABEL_2244;
        v308 = v302 - (_QWORD)v305;
        if (v308 >> 1 > v307)
          v307 = v308 >> 1;
        if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFFCLL)
          v309 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v309 = v307;
        if (v309)
        {
          v310 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1468, v309);
          v305 = *(_DWORD **)a10;
          v303 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v310 = 0;
        }
        v402 = &v310[4 * v306];
        v403 = &v310[4 * v309];
        *(_DWORD *)v402 = v24;
        v304 = v402 + 4;
        while (v303 != v305)
        {
          v404 = *--v303;
          *((_DWORD *)v402 - 1) = v404;
          v402 -= 4;
        }
        *(_QWORD *)a10 = v402;
        *(_QWORD *)(a10 + 8) = v304;
        *(_QWORD *)(a10 + 16) = v403;
        if (v305)
          operator delete(v305);
      }
      else
      {
        *v303 = v24;
        v304 = v303 + 1;
      }
      *(_QWORD *)(a10 + 8) = v304;
      v405 = *(char **)(a12 + 16);
      v1475 = (char **)(a12 + 16);
      v406 = *(unsigned int **)(a12 + 8);
      if (v406 >= (unsigned int *)v405)
      {
        v408 = *(int **)a12;
        v409 = ((uint64_t)v406 - *(_QWORD *)a12) >> 2;
        v410 = v409 + 1;
        if ((unint64_t)(v409 + 1) >> 62)
          goto LABEL_2244;
        v411 = v405 - (char *)v408;
        if (v411 >> 1 > v410)
          v410 = v411 >> 1;
        if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFFCLL)
          v412 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v412 = v410;
        if (v412)
        {
          v413 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v412);
          v408 = *(int **)a12;
          v406 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v413 = 0;
        }
        v482 = (unsigned int *)&v413[4 * v409];
        v405 = &v413[4 * v412];
        *v482 = *a6;
        v407 = (int *)(v482 + 1);
        while (v406 != (unsigned int *)v408)
        {
          v483 = *--v406;
          *--v482 = v483;
        }
        *(_QWORD *)a12 = v482;
        *(_QWORD *)(a12 + 8) = v407;
        *(_QWORD *)(a12 + 16) = v405;
        if (v408)
        {
          operator delete(v408);
          v405 = *v1475;
        }
      }
      else
      {
        *v406 = *a6;
        v407 = (int *)(v406 + 1);
      }
      *(_QWORD *)(a12 + 8) = v407;
      if (v407 >= (int *)v405)
      {
        v485 = *(int **)a12;
        v486 = ((uint64_t)v407 - *(_QWORD *)a12) >> 2;
        v487 = v486 + 1;
        if ((unint64_t)(v486 + 1) >> 62)
          goto LABEL_2244;
        v488 = v405 - (char *)v485;
        if (v488 >> 1 > v487)
          v487 = v488 >> 1;
        if ((unint64_t)v488 >= 0x7FFFFFFFFFFFFFFCLL)
          v489 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v489 = v487;
        if (v489)
        {
          v490 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v489);
          v485 = *(int **)a12;
          v407 = *(int **)(a12 + 8);
        }
        else
        {
          v490 = 0;
        }
        v554 = (int *)&v490[4 * v486];
        v405 = &v490[4 * v489];
        *v554 = v16;
        v484 = v554 + 1;
        while (v407 != v485)
        {
          v555 = *--v407;
          *--v554 = v555;
        }
        *(_QWORD *)a12 = v554;
        *(_QWORD *)(a12 + 8) = v484;
        *(_QWORD *)(a12 + 16) = v405;
        if (v485)
        {
          operator delete(v485);
          v405 = *v1475;
        }
      }
      else
      {
        *v407 = v16;
        v484 = v407 + 1;
      }
      *(_QWORD *)(a12 + 8) = v484;
      if (v484 >= (int *)v405)
      {
        v557 = *(int **)a12;
        v558 = ((uint64_t)v484 - *(_QWORD *)a12) >> 2;
        v559 = v558 + 1;
        if ((unint64_t)(v558 + 1) >> 62)
          goto LABEL_2244;
        v560 = v405 - (char *)v557;
        if (v560 >> 1 > v559)
          v559 = v560 >> 1;
        if ((unint64_t)v560 >= 0x7FFFFFFFFFFFFFFCLL)
          v561 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v561 = v559;
        if (v561)
        {
          v562 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v561);
          v557 = *(int **)a12;
          v484 = *(int **)(a12 + 8);
        }
        else
        {
          v562 = 0;
        }
        v637 = (int *)&v562[4 * v558];
        v638 = &v562[4 * v561];
        *v637 = v20;
        v556 = v637 + 1;
        while (v484 != v557)
        {
          v639 = *--v484;
          *--v637 = v639;
        }
        *(_QWORD *)a12 = v637;
        *(_QWORD *)(a12 + 8) = v556;
        *(_QWORD *)(a12 + 16) = v638;
        if (v557)
          operator delete(v557);
      }
      else
      {
        *v484 = v20;
        v556 = v484 + 1;
      }
      *(_QWORD *)(a12 + 8) = v556;
      v641 = *(unsigned int **)(a9 + 8);
      v640 = *(char **)(a9 + 16);
      if (v641 >= (unsigned int *)v640)
      {
        v645 = *(unsigned int **)a9;
        v646 = ((uint64_t)v641 - *(_QWORD *)a9) >> 2;
        v647 = v646 + 1;
        if ((unint64_t)(v646 + 1) >> 62)
          goto LABEL_2244;
        v642 = v20;
        v648 = v640 - (char *)v645;
        if (v648 >> 1 > v647)
          v647 = v648 >> 1;
        if ((unint64_t)v648 >= 0x7FFFFFFFFFFFFFFCLL)
          v649 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v649 = v647;
        v643 = v24;
        if (v649)
        {
          v650 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v649);
          v645 = *(unsigned int **)a9;
          v641 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v650 = 0;
        }
        v710 = &v650[4 * v646];
        v640 = &v650[4 * v649];
        *(_DWORD *)v710 = a1[1];
        v644 = (unsigned int *)(v710 + 4);
        while (v641 != v645)
        {
          v711 = *--v641;
          *((_DWORD *)v710 - 1) = v711;
          v710 -= 4;
        }
        *(_QWORD *)a9 = v710;
        *(_QWORD *)(a9 + 8) = v644;
        *(_QWORD *)(a9 + 16) = v640;
        if (v645)
        {
          operator delete(v645);
          v640 = *v1481;
        }
      }
      else
      {
        v642 = v20;
        v643 = v24;
        *v641 = a1[1];
        v644 = v641 + 1;
      }
      *(_QWORD *)(a9 + 8) = v644;
      if (v644 >= (unsigned int *)v640)
      {
        v713 = *(unsigned int **)a9;
        v714 = ((uint64_t)v644 - *(_QWORD *)a9) >> 2;
        v715 = v714 + 1;
        if ((unint64_t)(v714 + 1) >> 62)
          goto LABEL_2244;
        v716 = v640 - (char *)v713;
        if (v716 >> 1 > v715)
          v715 = v716 >> 1;
        if ((unint64_t)v716 >= 0x7FFFFFFFFFFFFFFCLL)
          v717 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v717 = v715;
        if (v717)
        {
          v718 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v717);
          v713 = *(unsigned int **)a9;
          v644 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v718 = 0;
        }
        v777 = (unsigned int *)&v718[4 * v714];
        v640 = &v718[4 * v717];
        *v777 = v1482;
        v712 = v777 + 1;
        while (v644 != v713)
        {
          v778 = *--v644;
          *--v777 = v778;
        }
        *(_QWORD *)a9 = v777;
        *(_QWORD *)(a9 + 8) = v712;
        *(_QWORD *)(a9 + 16) = v640;
        if (v713)
        {
          operator delete(v713);
          v640 = *v1481;
        }
      }
      else
      {
        *v644 = v1482;
        v712 = v644 + 1;
      }
      *(_QWORD *)(a9 + 8) = v712;
      if (v712 >= (unsigned int *)v640)
      {
        v780 = *(unsigned int **)a9;
        v781 = ((uint64_t)v712 - *(_QWORD *)a9) >> 2;
        v782 = v781 + 1;
        if ((unint64_t)(v781 + 1) >> 62)
          goto LABEL_2244;
        v783 = v640 - (char *)v780;
        if (v783 >> 1 > v782)
          v782 = v783 >> 1;
        if ((unint64_t)v783 >= 0x7FFFFFFFFFFFFFFCLL)
          v784 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v784 = v782;
        if (v784)
        {
          v785 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v784);
          v780 = *(unsigned int **)a9;
          v712 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v785 = 0;
        }
        v863 = (unsigned int *)&v785[4 * v781];
        v864 = &v785[4 * v784];
        *v863 = v1484;
        v779 = v863 + 1;
        while (v712 != v780)
        {
          v865 = *--v712;
          *--v863 = v865;
        }
        *(_QWORD *)a9 = v863;
        *(_QWORD *)(a9 + 8) = v779;
        *(_QWORD *)(a9 + 16) = v864;
        if (v780)
          operator delete(v780);
      }
      else
      {
        *v712 = v1484;
        v779 = v712 + 1;
      }
      *(_QWORD *)(a9 + 8) = v779;
      v866 = v643 + 1;
      v868 = *(_DWORD **)(a10 + 8);
      v867 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v868 >= v867)
      {
        v870 = *(_DWORD **)a10;
        v871 = ((uint64_t)v868 - *(_QWORD *)a10) >> 2;
        v872 = v871 + 1;
        if ((unint64_t)(v871 + 1) >> 62)
          goto LABEL_2244;
        v873 = v867 - (_QWORD)v870;
        if (v873 >> 1 > v872)
          v872 = v873 >> 1;
        if ((unint64_t)v873 >= 0x7FFFFFFFFFFFFFFCLL)
          v874 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v874 = v872;
        if (v874)
        {
          v875 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1468, v874);
          v870 = *(_DWORD **)a10;
          v868 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v875 = 0;
        }
        v952 = &v875[4 * v871];
        v953 = &v875[4 * v874];
        *(_DWORD *)v952 = v866;
        v869 = v952 + 4;
        while (v868 != v870)
        {
          v954 = *--v868;
          *((_DWORD *)v952 - 1) = v954;
          v952 -= 4;
        }
        *(_QWORD *)a10 = v952;
        *(_QWORD *)(a10 + 8) = v869;
        *(_QWORD *)(a10 + 16) = v953;
        if (v870)
          operator delete(v870);
      }
      else
      {
        *v868 = v866;
        v869 = v868 + 1;
      }
      *(_QWORD *)(a10 + 8) = v869;
      v956 = *(int **)(a12 + 8);
      v955 = *(char **)(a12 + 16);
      if (v956 >= (int *)v955)
      {
        v958 = *(int **)a12;
        v959 = ((uint64_t)v956 - *(_QWORD *)a12) >> 2;
        v960 = v959 + 1;
        if ((unint64_t)(v959 + 1) >> 62)
          goto LABEL_2244;
        v961 = v955 - (char *)v958;
        if (v961 >> 1 > v960)
          v960 = v961 >> 1;
        if ((unint64_t)v961 >= 0x7FFFFFFFFFFFFFFCLL)
          v962 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v962 = v960;
        if (v962)
        {
          v963 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v962);
          v958 = *(int **)a12;
          v956 = *(int **)(a12 + 8);
        }
        else
        {
          v963 = 0;
        }
        v1022 = &v963[4 * v959];
        v955 = &v963[4 * v962];
        *(_DWORD *)v1022 = a6[1];
        v957 = (int *)(v1022 + 4);
        while (v956 != v958)
        {
          v1023 = *--v956;
          *((_DWORD *)v1022 - 1) = v1023;
          v1022 -= 4;
        }
        *(_QWORD *)a12 = v1022;
        *(_QWORD *)(a12 + 8) = v957;
        *(_QWORD *)(a12 + 16) = v955;
        if (v958)
        {
          operator delete(v958);
          v955 = *v1475;
        }
      }
      else
      {
        *v956 = a6[1];
        v957 = v956 + 1;
      }
      *(_QWORD *)(a12 + 8) = v957;
      if (v957 >= (int *)v955)
      {
        v1025 = *(int **)a12;
        v1026 = ((uint64_t)v957 - *(_QWORD *)a12) >> 2;
        v1027 = v1026 + 1;
        if ((unint64_t)(v1026 + 1) >> 62)
          goto LABEL_2244;
        v1028 = v955 - (char *)v1025;
        if (v1028 >> 1 > v1027)
          v1027 = v1028 >> 1;
        if ((unint64_t)v1028 >= 0x7FFFFFFFFFFFFFFCLL)
          v1029 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1029 = v1027;
        if (v1029)
        {
          v1030 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v1029);
          v1025 = *(int **)a12;
          v957 = *(int **)(a12 + 8);
        }
        else
        {
          v1030 = 0;
        }
        v1076 = (int *)&v1030[4 * v1026];
        v955 = &v1030[4 * v1029];
        *v1076 = v642;
        v1024 = v1076 + 1;
        while (v957 != v1025)
        {
          v1077 = *--v957;
          *--v1076 = v1077;
        }
        *(_QWORD *)a12 = v1076;
        *(_QWORD *)(a12 + 8) = v1024;
        *(_QWORD *)(a12 + 16) = v955;
        if (v1025)
        {
          operator delete(v1025);
          v955 = *v1475;
        }
      }
      else
      {
        *v957 = v642;
        v1024 = v957 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1024;
      if (v1024 >= (int *)v955)
      {
        v1079 = *(int **)a12;
        v1080 = ((uint64_t)v1024 - *(_QWORD *)a12) >> 2;
        v1081 = v1080 + 1;
        if ((unint64_t)(v1080 + 1) >> 62)
          goto LABEL_2244;
        v1082 = v955 - (char *)v1079;
        if (v1082 >> 1 > v1081)
          v1081 = v1082 >> 1;
        if ((unint64_t)v1082 >= 0x7FFFFFFFFFFFFFFCLL)
          v1083 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1083 = v1081;
        if (v1083)
        {
          v1084 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v1083);
          v1079 = *(int **)a12;
          v1024 = *(int **)(a12 + 8);
        }
        else
        {
          v1084 = 0;
        }
        v1128 = (int *)&v1084[4 * v1080];
        v1129 = &v1084[4 * v1083];
        *v1128 = v16;
        v1078 = v1128 + 1;
        while (v1024 != v1079)
        {
          v1130 = *--v1024;
          *--v1128 = v1130;
        }
        *(_QWORD *)a12 = v1128;
        *(_QWORD *)(a12 + 8) = v1078;
        *(_QWORD *)(a12 + 16) = v1129;
        if (v1079)
          operator delete(v1079);
      }
      else
      {
        *v1024 = v16;
        v1078 = v1024 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1078;
      v1132 = *(unsigned int **)(a9 + 8);
      v1131 = *(char **)(a9 + 16);
      if (v1132 >= (unsigned int *)v1131)
      {
        v1134 = *(unsigned int **)a9;
        v1135 = ((uint64_t)v1132 - *(_QWORD *)a9) >> 2;
        v1136 = v1135 + 1;
        if ((unint64_t)(v1135 + 1) >> 62)
          goto LABEL_2244;
        v1137 = v1131 - (char *)v1134;
        if (v1137 >> 1 > v1136)
          v1136 = v1137 >> 1;
        if ((unint64_t)v1137 >= 0x7FFFFFFFFFFFFFFCLL)
          v1138 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1138 = v1136;
        if (v1138)
        {
          v1139 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v1138);
          v1134 = *(unsigned int **)a9;
          v1132 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1139 = 0;
        }
        v1171 = &v1139[4 * v1135];
        v1131 = &v1139[4 * v1138];
        *(_DWORD *)v1171 = a1[1];
        v1133 = (unsigned int *)(v1171 + 4);
        while (v1132 != v1134)
        {
          v1172 = *--v1132;
          *((_DWORD *)v1171 - 1) = v1172;
          v1171 -= 4;
        }
        *(_QWORD *)a9 = v1171;
        *(_QWORD *)(a9 + 8) = v1133;
        *(_QWORD *)(a9 + 16) = v1131;
        if (v1134)
        {
          operator delete(v1134);
          v1131 = *v1481;
        }
      }
      else
      {
        *v1132 = a1[1];
        v1133 = v1132 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1133;
      if (v1133 >= (unsigned int *)v1131)
      {
        v1174 = *(unsigned int **)a9;
        v1175 = ((uint64_t)v1133 - *(_QWORD *)a9) >> 2;
        v1176 = v1175 + 1;
        if ((unint64_t)(v1175 + 1) >> 62)
          goto LABEL_2244;
        v1177 = v1131 - (char *)v1174;
        if (v1177 >> 1 > v1176)
          v1176 = v1177 >> 1;
        if ((unint64_t)v1177 >= 0x7FFFFFFFFFFFFFFCLL)
          v1178 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1178 = v1176;
        if (v1178)
        {
          v1179 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v1178);
          v1174 = *(unsigned int **)a9;
          v1133 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1179 = 0;
        }
        v1207 = &v1179[4 * v1175];
        v1131 = &v1179[4 * v1178];
        *(_DWORD *)v1207 = a1[2];
        v1173 = (unsigned int *)(v1207 + 4);
        while (v1133 != v1174)
        {
          v1208 = *--v1133;
          *((_DWORD *)v1207 - 1) = v1208;
          v1207 -= 4;
        }
        *(_QWORD *)a9 = v1207;
        *(_QWORD *)(a9 + 8) = v1173;
        *(_QWORD *)(a9 + 16) = v1131;
        if (v1174)
        {
          operator delete(v1174);
          v1131 = *v1481;
        }
      }
      else
      {
        *v1133 = a1[2];
        v1173 = v1133 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1173;
      if (v1173 >= (unsigned int *)v1131)
      {
        v1210 = *(unsigned int **)a9;
        v1211 = ((uint64_t)v1173 - *(_QWORD *)a9) >> 2;
        v1212 = v1211 + 1;
        if ((unint64_t)(v1211 + 1) >> 62)
          goto LABEL_2244;
        v1213 = v1131 - (char *)v1210;
        if (v1213 >> 1 > v1212)
          v1212 = v1213 >> 1;
        if ((unint64_t)v1213 >= 0x7FFFFFFFFFFFFFFCLL)
          v1214 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1214 = v1212;
        if (v1214)
        {
          v1215 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1481, v1214);
          v1210 = *(unsigned int **)a9;
          v1173 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1215 = 0;
        }
        v1251 = (unsigned int *)&v1215[4 * v1211];
        v1252 = &v1215[4 * v1214];
        *v1251 = v1482;
        v1209 = v1251 + 1;
        while (v1173 != v1210)
        {
          v1253 = *--v1173;
          *--v1251 = v1253;
        }
        *(_QWORD *)a9 = v1251;
        *(_QWORD *)(a9 + 8) = v1209;
        *(_QWORD *)(a9 + 16) = v1252;
        if (v1210)
          operator delete(v1210);
      }
      else
      {
        *v1173 = v1482;
        v1209 = v1173 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1209;
      v1254 = v643 + 2;
      v1256 = *(_DWORD **)(a10 + 8);
      v1255 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v1256 >= v1255)
      {
        v1258 = *(_DWORD **)a10;
        v1259 = ((uint64_t)v1256 - *(_QWORD *)a10) >> 2;
        v1260 = v1259 + 1;
        if ((unint64_t)(v1259 + 1) >> 62)
          goto LABEL_2244;
        v1261 = v1255 - (_QWORD)v1258;
        if (v1261 >> 1 > v1260)
          v1260 = v1261 >> 1;
        if ((unint64_t)v1261 >= 0x7FFFFFFFFFFFFFFCLL)
          v1262 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1262 = v1260;
        if (v1262)
        {
          v1263 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1468, v1262);
          v1258 = *(_DWORD **)a10;
          v1256 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v1263 = 0;
        }
        v1301 = &v1263[4 * v1259];
        v1302 = &v1263[4 * v1262];
        *(_DWORD *)v1301 = v1254;
        v1257 = v1301 + 4;
        while (v1256 != v1258)
        {
          v1303 = *--v1256;
          *((_DWORD *)v1301 - 1) = v1303;
          v1301 -= 4;
        }
        *(_QWORD *)a10 = v1301;
        *(_QWORD *)(a10 + 8) = v1257;
        *(_QWORD *)(a10 + 16) = v1302;
        if (v1258)
          operator delete(v1258);
      }
      else
      {
        *v1256 = v1254;
        v1257 = v1256 + 1;
      }
      *(_QWORD *)(a10 + 8) = v1257;
      v1305 = *(int **)(a12 + 8);
      v1304 = *(char **)(a12 + 16);
      if (v1305 >= (int *)v1304)
      {
        v1308 = *(int **)a12;
        v1309 = ((uint64_t)v1305 - *(_QWORD *)a12) >> 2;
        v1310 = v1309 + 1;
        v1306 = a6;
        if ((unint64_t)(v1309 + 1) >> 62)
          goto LABEL_2244;
        v1311 = v1304 - (char *)v1308;
        if (v1311 >> 1 > v1310)
          v1310 = v1311 >> 1;
        if ((unint64_t)v1311 >= 0x7FFFFFFFFFFFFFFCLL)
          v1312 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1312 = v1310;
        if (v1312)
        {
          v1313 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v1312);
          v1308 = *(int **)a12;
          v1305 = *(int **)(a12 + 8);
        }
        else
        {
          v1313 = 0;
        }
        v1344 = &v1313[4 * v1309];
        v1304 = &v1313[4 * v1312];
        *(_DWORD *)v1344 = a6[1];
        v1307 = (int *)(v1344 + 4);
        while (v1305 != v1308)
        {
          v1345 = *--v1305;
          *((_DWORD *)v1344 - 1) = v1345;
          v1344 -= 4;
        }
        *(_QWORD *)a12 = v1344;
        *(_QWORD *)(a12 + 8) = v1307;
        *(_QWORD *)(a12 + 16) = v1304;
        if (v1308)
        {
          operator delete(v1308);
          v1304 = *v1475;
        }
      }
      else
      {
        v1306 = a6;
        *v1305 = a6[1];
        v1307 = v1305 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1307;
      if (v1307 >= (int *)v1304)
      {
        v1347 = *(int **)a12;
        v1348 = ((uint64_t)v1307 - *(_QWORD *)a12) >> 2;
        v1349 = v1348 + 1;
        if ((unint64_t)(v1348 + 1) >> 62)
          goto LABEL_2244;
        v1350 = v1304 - (char *)v1347;
        if (v1350 >> 1 > v1349)
          v1349 = v1350 >> 1;
        if ((unint64_t)v1350 >= 0x7FFFFFFFFFFFFFFCLL)
          v1351 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1351 = v1349;
        if (v1351)
        {
          v1352 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v1351);
          v1347 = *(int **)a12;
          v1307 = *(int **)(a12 + 8);
        }
        else
        {
          v1352 = 0;
        }
        v1377 = &v1352[4 * v1348];
        v1304 = &v1352[4 * v1351];
        *(_DWORD *)v1377 = v1306[2];
        v1346 = (int *)(v1377 + 4);
        while (v1307 != v1347)
        {
          v1378 = *--v1307;
          *((_DWORD *)v1377 - 1) = v1378;
          v1377 -= 4;
        }
        *(_QWORD *)a12 = v1377;
        *(_QWORD *)(a12 + 8) = v1346;
        *(_QWORD *)(a12 + 16) = v1304;
        if (v1347)
        {
          operator delete(v1347);
          v1304 = *v1475;
        }
      }
      else
      {
        *v1307 = v1306[2];
        v1346 = v1307 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1346;
      if (v1346 < (int *)v1304)
      {
        *v1346 = v642;
        v1051 = v1346 + 1;
        goto LABEL_2084;
      }
      v1052 = *(int **)a12;
      v1379 = ((uint64_t)v1346 - *(_QWORD *)a12) >> 2;
      v1380 = v1379 + 1;
      if ((unint64_t)(v1379 + 1) >> 62)
        goto LABEL_2244;
      v1381 = v1304 - (char *)v1052;
      if (v1381 >> 1 > v1380)
        v1380 = v1381 >> 1;
      if ((unint64_t)v1381 >= 0x7FFFFFFFFFFFFFFCLL)
        v1382 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v1382 = v1380;
      if (v1382)
      {
        v1383 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v1475, v1382);
        v1052 = *(int **)a12;
        v1346 = *(int **)(a12 + 8);
      }
      else
      {
        v1383 = 0;
      }
      v1106 = (int *)&v1383[4 * v1379];
      v1107 = &v1383[4 * v1382];
      *v1106 = v642;
      v1108 = v1106 + 1;
      while (v1346 != v1052)
      {
        v1405 = *--v1346;
        *--v1106 = v1405;
      }
      break;
    case 6:
      v46 = (char **)(a9 + 16);
      v45 = *(char **)(a9 + 16);
      if (v22 >= (unsigned int *)v45)
      {
        v76 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v77 = v45 - (char *)v21;
        if (v77 >> 1 > v76)
          v76 = v77 >> 1;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
          v78 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
        {
          v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v78);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v79 = 0;
        }
        v145 = (unsigned int *)&v79[4 * v23];
        v45 = &v79[4 * v78];
        *v145 = *a1;
        v47 = v145 + 1;
        while (v22 != v21)
        {
          v146 = *--v22;
          *--v145 = v146;
        }
        *(_QWORD *)a9 = v145;
        *(_QWORD *)(a9 + 8) = v47;
        *(_QWORD *)(a9 + 16) = v45;
        if (v21)
        {
          operator delete(v21);
          v45 = *v46;
        }
      }
      else
      {
        *v22 = *a1;
        v47 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v47;
      v1471 = v20;
      if (v47 >= (unsigned int *)v45)
      {
        v148 = *(unsigned int **)a9;
        v149 = ((uint64_t)v47 - *(_QWORD *)a9) >> 2;
        v150 = v149 + 1;
        if ((unint64_t)(v149 + 1) >> 62)
          goto LABEL_2244;
        v151 = v45 - (char *)v148;
        if (v151 >> 1 > v150)
          v150 = v151 >> 1;
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
          v152 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v152 = v150;
        if (v152)
        {
          v153 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v152);
          v148 = *(unsigned int **)a9;
          v47 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v153 = 0;
        }
        v217 = &v153[4 * v149];
        v45 = &v153[4 * v152];
        *(_DWORD *)v217 = a1[1];
        v147 = (unsigned int *)(v217 + 4);
        while (v47 != v148)
        {
          v218 = *--v47;
          *((_DWORD *)v217 - 1) = v218;
          v217 -= 4;
        }
        *(_QWORD *)a9 = v217;
        *(_QWORD *)(a9 + 8) = v147;
        *(_QWORD *)(a9 + 16) = v45;
        if (v148)
        {
          operator delete(v148);
          v45 = *v46;
        }
      }
      else
      {
        *v47 = a1[1];
        v147 = v47 + 1;
      }
      *(_QWORD *)(a9 + 8) = v147;
      v1478 = v23 / 3;
      if (v147 >= (unsigned int *)v45)
      {
        v220 = *(unsigned int **)a9;
        v221 = ((uint64_t)v147 - *(_QWORD *)a9) >> 2;
        v222 = v221 + 1;
        if ((unint64_t)(v221 + 1) >> 62)
          goto LABEL_2244;
        v223 = v45 - (char *)v220;
        if (v223 >> 1 > v222)
          v222 = v223 >> 1;
        if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL)
          v224 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v224 = v222;
        if (v224)
        {
          v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v224);
          v220 = *(unsigned int **)a9;
          v147 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v225 = 0;
        }
        v311 = (unsigned int *)&v225[4 * v221];
        v312 = &v225[4 * v224];
        *v311 = v1483;
        v219 = v311 + 1;
        while (v147 != v220)
        {
          v313 = *--v147;
          *--v311 = v313;
        }
        *(_QWORD *)a9 = v311;
        *(_QWORD *)(a9 + 8) = v219;
        *(_QWORD *)(a9 + 16) = v312;
        if (v220)
          operator delete(v220);
      }
      else
      {
        *v147 = v1483;
        v219 = v147 + 1;
      }
      *(_QWORD *)(a9 + 8) = v219;
      v314 = *(_QWORD *)(a10 + 16);
      v315 = *(_DWORD **)(a10 + 8);
      if ((unint64_t)v315 >= v314)
      {
        v317 = *(_DWORD **)a10;
        v318 = ((uint64_t)v315 - *(_QWORD *)a10) >> 2;
        v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 62)
          goto LABEL_2244;
        v320 = v314 - (_QWORD)v317;
        if (v320 >> 1 > v319)
          v319 = v320 >> 1;
        if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFFCLL)
          v321 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v321 = v319;
        if (v321)
        {
          v322 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v321);
          v317 = *(_DWORD **)a10;
          v315 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v322 = 0;
        }
        v414 = &v322[4 * v318];
        v415 = &v322[4 * v321];
        *(_DWORD *)v414 = v1478;
        v316 = v414 + 4;
        while (v315 != v317)
        {
          v416 = *--v315;
          *((_DWORD *)v414 - 1) = v416;
          v414 -= 4;
        }
        *(_QWORD *)a10 = v414;
        *(_QWORD *)(a10 + 8) = v316;
        *(_QWORD *)(a10 + 16) = v415;
        if (v317)
          operator delete(v317);
      }
      else
      {
        *v315 = v1478;
        v316 = v315 + 1;
      }
      *(_QWORD *)(a10 + 8) = v316;
      v418 = (char **)(a12 + 16);
      v417 = *(char **)(a12 + 16);
      v419 = *(unsigned int **)(a12 + 8);
      if (v419 >= (unsigned int *)v417)
      {
        v421 = *(int **)a12;
        v422 = ((uint64_t)v419 - *(_QWORD *)a12) >> 2;
        v423 = v422 + 1;
        if ((unint64_t)(v422 + 1) >> 62)
          goto LABEL_2244;
        v424 = v417 - (char *)v421;
        if (v424 >> 1 > v423)
          v423 = v424 >> 1;
        if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFFCLL)
          v425 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v425 = v423;
        if (v425)
        {
          v426 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v425);
          v421 = *(int **)a12;
          v419 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v426 = 0;
        }
        v491 = (unsigned int *)&v426[4 * v422];
        v417 = &v426[4 * v425];
        *v491 = *a6;
        v420 = (int *)(v491 + 1);
        while (v419 != (unsigned int *)v421)
        {
          v492 = *--v419;
          *--v491 = v492;
        }
        *(_QWORD *)a12 = v491;
        *(_QWORD *)(a12 + 8) = v420;
        *(_QWORD *)(a12 + 16) = v417;
        if (v421)
        {
          operator delete(v421);
          v417 = *v418;
        }
      }
      else
      {
        *v419 = *a6;
        v420 = (int *)(v419 + 1);
      }
      *(_QWORD *)(a12 + 8) = v420;
      if (v420 >= (int *)v417)
      {
        v494 = *(int **)a12;
        v495 = ((uint64_t)v420 - *(_QWORD *)a12) >> 2;
        v496 = v495 + 1;
        if ((unint64_t)(v495 + 1) >> 62)
          goto LABEL_2244;
        v497 = v417 - (char *)v494;
        if (v497 >> 1 > v496)
          v496 = v497 >> 1;
        if ((unint64_t)v497 >= 0x7FFFFFFFFFFFFFFCLL)
          v498 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v498 = v496;
        if (v498)
        {
          v499 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v498);
          v494 = *(int **)a12;
          v420 = *(int **)(a12 + 8);
        }
        else
        {
          v499 = 0;
        }
        v563 = &v499[4 * v495];
        v417 = &v499[4 * v498];
        *(_DWORD *)v563 = a6[1];
        v493 = (int *)(v563 + 4);
        while (v420 != v494)
        {
          v564 = *--v420;
          *((_DWORD *)v563 - 1) = v564;
          v563 -= 4;
        }
        *(_QWORD *)a12 = v563;
        *(_QWORD *)(a12 + 8) = v493;
        *(_QWORD *)(a12 + 16) = v417;
        if (v494)
        {
          operator delete(v494);
          v417 = *v418;
        }
      }
      else
      {
        *v420 = a6[1];
        v493 = v420 + 1;
      }
      *(_QWORD *)(a12 + 8) = v493;
      if (v493 >= (int *)v417)
      {
        v566 = *(int **)a12;
        v567 = ((uint64_t)v493 - *(_QWORD *)a12) >> 2;
        v568 = v567 + 1;
        if ((unint64_t)(v567 + 1) >> 62)
          goto LABEL_2244;
        v569 = v417 - (char *)v566;
        if (v569 >> 1 > v568)
          v568 = v569 >> 1;
        if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFFCLL)
          v570 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v570 = v568;
        if (v570)
        {
          v571 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v570);
          v566 = *(int **)a12;
          v493 = *(int **)(a12 + 8);
        }
        else
        {
          v571 = 0;
        }
        v651 = (int *)&v571[4 * v567];
        v652 = &v571[4 * v570];
        *v651 = v1480;
        v565 = v651 + 1;
        while (v493 != v566)
        {
          v653 = *--v493;
          *--v651 = v653;
        }
        *(_QWORD *)a12 = v651;
        *(_QWORD *)(a12 + 8) = v565;
        *(_QWORD *)(a12 + 16) = v652;
        if (v566)
          operator delete(v566);
      }
      else
      {
        *v493 = v1480;
        v565 = v493 + 1;
      }
      *(_QWORD *)(a12 + 8) = v565;
      v655 = *(unsigned int **)(a9 + 8);
      v654 = *(char **)(a9 + 16);
      if (v655 >= (unsigned int *)v654)
      {
        v657 = *(unsigned int **)a9;
        v658 = ((uint64_t)v655 - *(_QWORD *)a9) >> 2;
        v659 = v658 + 1;
        if ((unint64_t)(v658 + 1) >> 62)
          goto LABEL_2244;
        v660 = v654 - (char *)v657;
        if (v660 >> 1 > v659)
          v659 = v660 >> 1;
        if ((unint64_t)v660 >= 0x7FFFFFFFFFFFFFFCLL)
          v661 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v661 = v659;
        if (v661)
        {
          v662 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v661);
          v657 = *(unsigned int **)a9;
          v655 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v662 = 0;
        }
        v719 = (unsigned int *)&v662[4 * v658];
        v654 = &v662[4 * v661];
        *v719 = *a1;
        v656 = v719 + 1;
        while (v655 != v657)
        {
          v720 = *--v655;
          *--v719 = v720;
        }
        *(_QWORD *)a9 = v719;
        *(_QWORD *)(a9 + 8) = v656;
        *(_QWORD *)(a9 + 16) = v654;
        if (v657)
        {
          operator delete(v657);
          v654 = *v46;
        }
      }
      else
      {
        *v655 = *a1;
        v656 = v655 + 1;
      }
      *(_QWORD *)(a9 + 8) = v656;
      if (v656 >= (unsigned int *)v654)
      {
        v722 = *(unsigned int **)a9;
        v723 = ((uint64_t)v656 - *(_QWORD *)a9) >> 2;
        v724 = v723 + 1;
        if ((unint64_t)(v723 + 1) >> 62)
          goto LABEL_2244;
        v725 = v654 - (char *)v722;
        if (v725 >> 1 > v724)
          v724 = v725 >> 1;
        if ((unint64_t)v725 >= 0x7FFFFFFFFFFFFFFCLL)
          v726 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v726 = v724;
        if (v726)
        {
          v727 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v726);
          v722 = *(unsigned int **)a9;
          v656 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v727 = 0;
        }
        v786 = (unsigned int *)&v727[4 * v723];
        v654 = &v727[4 * v726];
        *v786 = v1483;
        v721 = v786 + 1;
        while (v656 != v722)
        {
          v787 = *--v656;
          *--v786 = v787;
        }
        *(_QWORD *)a9 = v786;
        *(_QWORD *)(a9 + 8) = v721;
        *(_QWORD *)(a9 + 16) = v654;
        if (v722)
        {
          operator delete(v722);
          v654 = *v46;
        }
      }
      else
      {
        *v656 = v1483;
        v721 = v656 + 1;
      }
      *(_QWORD *)(a9 + 8) = v721;
      if (v721 >= (unsigned int *)v654)
      {
        v789 = *(unsigned int **)a9;
        v790 = ((uint64_t)v721 - *(_QWORD *)a9) >> 2;
        v791 = v790 + 1;
        if ((unint64_t)(v790 + 1) >> 62)
          goto LABEL_2244;
        v792 = v654 - (char *)v789;
        if (v792 >> 1 > v791)
          v791 = v792 >> 1;
        if ((unint64_t)v792 >= 0x7FFFFFFFFFFFFFFCLL)
          v793 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v793 = v791;
        if (v793)
        {
          v794 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v793);
          v789 = *(unsigned int **)a9;
          v721 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v794 = 0;
        }
        v876 = (unsigned int *)&v794[4 * v790];
        v877 = &v794[4 * v793];
        *v876 = v1482;
        v788 = v876 + 1;
        while (v721 != v789)
        {
          v878 = *--v721;
          *--v876 = v878;
        }
        *(_QWORD *)a9 = v876;
        *(_QWORD *)(a9 + 8) = v788;
        *(_QWORD *)(a9 + 16) = v877;
        if (v789)
          operator delete(v789);
      }
      else
      {
        *v721 = v1482;
        v788 = v721 + 1;
      }
      *(_QWORD *)(a9 + 8) = v788;
      v879 = v1478 + 1;
      v881 = *(_DWORD **)(a10 + 8);
      v880 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v881 >= v880)
      {
        v883 = *(_DWORD **)a10;
        v884 = ((uint64_t)v881 - *(_QWORD *)a10) >> 2;
        v885 = v884 + 1;
        if ((unint64_t)(v884 + 1) >> 62)
          goto LABEL_2244;
        v886 = v880 - (_QWORD)v883;
        if (v886 >> 1 > v885)
          v885 = v886 >> 1;
        if ((unint64_t)v886 >= 0x7FFFFFFFFFFFFFFCLL)
          v887 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v887 = v885;
        if (v887)
        {
          v888 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v887);
          v883 = *(_DWORD **)a10;
          v881 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v888 = 0;
        }
        v964 = &v888[4 * v884];
        v965 = &v888[4 * v887];
        *(_DWORD *)v964 = v879;
        v882 = v964 + 4;
        while (v881 != v883)
        {
          v966 = *--v881;
          *((_DWORD *)v964 - 1) = v966;
          v964 -= 4;
        }
        *(_QWORD *)a10 = v964;
        *(_QWORD *)(a10 + 8) = v882;
        *(_QWORD *)(a10 + 16) = v965;
        if (v883)
          operator delete(v883);
      }
      else
      {
        *v881 = v879;
        v882 = v881 + 1;
      }
      *(_QWORD *)(a10 + 8) = v882;
      v968 = *(unsigned int **)(a12 + 8);
      v967 = *(char **)(a12 + 16);
      if (v968 >= (unsigned int *)v967)
      {
        v970 = *(int **)a12;
        v971 = ((uint64_t)v968 - *(_QWORD *)a12) >> 2;
        v972 = v971 + 1;
        if ((unint64_t)(v971 + 1) >> 62)
          goto LABEL_2244;
        v973 = v967 - (char *)v970;
        if (v973 >> 1 > v972)
          v972 = v973 >> 1;
        if ((unint64_t)v973 >= 0x7FFFFFFFFFFFFFFCLL)
          v974 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v974 = v972;
        if (v974)
        {
          v975 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v974);
          v970 = *(int **)a12;
          v968 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v975 = 0;
        }
        v1031 = (unsigned int *)&v975[4 * v971];
        v967 = &v975[4 * v974];
        *v1031 = *a6;
        v969 = (int *)(v1031 + 1);
        while (v968 != (unsigned int *)v970)
        {
          v1032 = *--v968;
          *--v1031 = v1032;
        }
        *(_QWORD *)a12 = v1031;
        *(_QWORD *)(a12 + 8) = v969;
        *(_QWORD *)(a12 + 16) = v967;
        if (v970)
        {
          operator delete(v970);
          v967 = *v418;
        }
      }
      else
      {
        *v968 = *a6;
        v969 = (int *)(v968 + 1);
      }
      *(_QWORD *)(a12 + 8) = v969;
      if (v969 >= (int *)v967)
      {
        v1034 = *(int **)a12;
        v1035 = ((uint64_t)v969 - *(_QWORD *)a12) >> 2;
        v1036 = v1035 + 1;
        if ((unint64_t)(v1035 + 1) >> 62)
          goto LABEL_2244;
        v1037 = v967 - (char *)v1034;
        if (v1037 >> 1 > v1036)
          v1036 = v1037 >> 1;
        if ((unint64_t)v1037 >= 0x7FFFFFFFFFFFFFFCLL)
          v1038 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1038 = v1036;
        if (v1038)
        {
          v1039 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1038);
          v1034 = *(int **)a12;
          v969 = *(int **)(a12 + 8);
        }
        else
        {
          v1039 = 0;
        }
        v1085 = (int *)&v1039[4 * v1035];
        v967 = &v1039[4 * v1038];
        *v1085 = v1480;
        v1033 = v1085 + 1;
        while (v969 != v1034)
        {
          v1086 = *--v969;
          *--v1085 = v1086;
        }
        *(_QWORD *)a12 = v1085;
        *(_QWORD *)(a12 + 8) = v1033;
        *(_QWORD *)(a12 + 16) = v967;
        if (v1034)
        {
          operator delete(v1034);
          v967 = *v418;
        }
      }
      else
      {
        *v969 = v1480;
        v1033 = v969 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1033;
      if (v1033 >= (int *)v967)
      {
        v1088 = *(int **)a12;
        v1089 = ((uint64_t)v1033 - *(_QWORD *)a12) >> 2;
        v1090 = v1089 + 1;
        if ((unint64_t)(v1089 + 1) >> 62)
          goto LABEL_2244;
        v1091 = v967 - (char *)v1088;
        if (v1091 >> 1 > v1090)
          v1090 = v1091 >> 1;
        if ((unint64_t)v1091 >= 0x7FFFFFFFFFFFFFFCLL)
          v1092 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1092 = v1090;
        if (v1092)
        {
          v1093 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1092);
          v1088 = *(int **)a12;
          v1033 = *(int **)(a12 + 8);
        }
        else
        {
          v1093 = 0;
        }
        v1140 = (int *)&v1093[4 * v1089];
        v1141 = &v1093[4 * v1092];
        *v1140 = v1471;
        v1087 = v1140 + 1;
        while (v1033 != v1088)
        {
          v1142 = *--v1033;
          *--v1140 = v1142;
        }
        *(_QWORD *)a12 = v1140;
        *(_QWORD *)(a12 + 8) = v1087;
        *(_QWORD *)(a12 + 16) = v1141;
        if (v1088)
          operator delete(v1088);
      }
      else
      {
        *v1033 = v1471;
        v1087 = v1033 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1087;
      v1144 = *(unsigned int **)(a9 + 8);
      v1143 = *(char **)(a9 + 16);
      if (v1144 >= (unsigned int *)v1143)
      {
        v1146 = *(unsigned int **)a9;
        v1147 = ((uint64_t)v1144 - *(_QWORD *)a9) >> 2;
        v1148 = v1147 + 1;
        if ((unint64_t)(v1147 + 1) >> 62)
          goto LABEL_2244;
        v1149 = v1143 - (char *)v1146;
        if (v1149 >> 1 > v1148)
          v1148 = v1149 >> 1;
        if ((unint64_t)v1149 >= 0x7FFFFFFFFFFFFFFCLL)
          v1150 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1150 = v1148;
        if (v1150)
        {
          v1151 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1150);
          v1146 = *(unsigned int **)a9;
          v1144 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1151 = 0;
        }
        v1180 = &v1151[4 * v1147];
        v1143 = &v1151[4 * v1150];
        *(_DWORD *)v1180 = a1[2];
        v1145 = (unsigned int *)(v1180 + 4);
        while (v1144 != v1146)
        {
          v1181 = *--v1144;
          *((_DWORD *)v1180 - 1) = v1181;
          v1180 -= 4;
        }
        *(_QWORD *)a9 = v1180;
        *(_QWORD *)(a9 + 8) = v1145;
        *(_QWORD *)(a9 + 16) = v1143;
        if (v1146)
        {
          operator delete(v1146);
          v1143 = *v46;
        }
      }
      else
      {
        *v1144 = a1[2];
        v1145 = v1144 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1145;
      if (v1145 >= (unsigned int *)v1143)
      {
        v1183 = *(unsigned int **)a9;
        v1184 = ((uint64_t)v1145 - *(_QWORD *)a9) >> 2;
        v1185 = v1184 + 1;
        if ((unint64_t)(v1184 + 1) >> 62)
          goto LABEL_2244;
        v1186 = v1143 - (char *)v1183;
        if (v1186 >> 1 > v1185)
          v1185 = v1186 >> 1;
        if ((unint64_t)v1186 >= 0x7FFFFFFFFFFFFFFCLL)
          v1187 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1187 = v1185;
        if (v1187)
        {
          v1188 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1187);
          v1183 = *(unsigned int **)a9;
          v1145 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1188 = 0;
        }
        v1216 = (unsigned int *)&v1188[4 * v1184];
        v1143 = &v1188[4 * v1187];
        *v1216 = v1482;
        v1182 = v1216 + 1;
        while (v1145 != v1183)
        {
          v1217 = *--v1145;
          *--v1216 = v1217;
        }
        *(_QWORD *)a9 = v1216;
        *(_QWORD *)(a9 + 8) = v1182;
        *(_QWORD *)(a9 + 16) = v1143;
        if (v1183)
        {
          operator delete(v1183);
          v1143 = *v46;
        }
      }
      else
      {
        *v1145 = v1482;
        v1182 = v1145 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1182;
      if (v1182 >= (unsigned int *)v1143)
      {
        v1219 = *(unsigned int **)a9;
        v1220 = ((uint64_t)v1182 - *(_QWORD *)a9) >> 2;
        v1221 = v1220 + 1;
        if ((unint64_t)(v1220 + 1) >> 62)
          goto LABEL_2244;
        v1222 = v1143 - (char *)v1219;
        if (v1222 >> 1 > v1221)
          v1221 = v1222 >> 1;
        if ((unint64_t)v1222 >= 0x7FFFFFFFFFFFFFFCLL)
          v1223 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1223 = v1221;
        if (v1223)
        {
          v1224 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1223);
          v1219 = *(unsigned int **)a9;
          v1182 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1224 = 0;
        }
        v1264 = (unsigned int *)&v1224[4 * v1220];
        v1265 = &v1224[4 * v1223];
        *v1264 = v1483;
        v1218 = v1264 + 1;
        while (v1182 != v1219)
        {
          v1266 = *--v1182;
          *--v1264 = v1266;
        }
        *(_QWORD *)a9 = v1264;
        *(_QWORD *)(a9 + 8) = v1218;
        *(_QWORD *)(a9 + 16) = v1265;
        if (v1219)
          operator delete(v1219);
      }
      else
      {
        *v1182 = v1483;
        v1218 = v1182 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1218;
      v1267 = v1478 + 2;
      v1269 = *(_DWORD **)(a10 + 8);
      v1268 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v1269 >= v1268)
      {
        v1271 = *(_DWORD **)a10;
        v1272 = ((uint64_t)v1269 - *(_QWORD *)a10) >> 2;
        v1273 = v1272 + 1;
        if ((unint64_t)(v1272 + 1) >> 62)
          goto LABEL_2244;
        v1274 = v1268 - (_QWORD)v1271;
        if (v1274 >> 1 > v1273)
          v1273 = v1274 >> 1;
        if ((unint64_t)v1274 >= 0x7FFFFFFFFFFFFFFCLL)
          v1275 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1275 = v1273;
        if (v1275)
        {
          v1276 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a10 + 16, v1275);
          v1271 = *(_DWORD **)a10;
          v1269 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v1276 = 0;
        }
        v1314 = &v1276[4 * v1272];
        v1315 = &v1276[4 * v1275];
        *(_DWORD *)v1314 = v1267;
        v1270 = v1314 + 4;
        while (v1269 != v1271)
        {
          v1316 = *--v1269;
          *((_DWORD *)v1314 - 1) = v1316;
          v1314 -= 4;
        }
        *(_QWORD *)a10 = v1314;
        *(_QWORD *)(a10 + 8) = v1270;
        *(_QWORD *)(a10 + 16) = v1315;
        if (v1271)
          operator delete(v1271);
      }
      else
      {
        *v1269 = v1267;
        v1270 = v1269 + 1;
      }
      *(_QWORD *)(a10 + 8) = v1270;
      v1318 = *(int **)(a12 + 8);
      v1317 = *(char **)(a12 + 16);
      if (v1318 >= (int *)v1317)
      {
        v1320 = *(int **)a12;
        v1321 = ((uint64_t)v1318 - *(_QWORD *)a12) >> 2;
        v1322 = v1321 + 1;
        if ((unint64_t)(v1321 + 1) >> 62)
          goto LABEL_2244;
        v1323 = v1317 - (char *)v1320;
        if (v1323 >> 1 > v1322)
          v1322 = v1323 >> 1;
        if ((unint64_t)v1323 >= 0x7FFFFFFFFFFFFFFCLL)
          v1324 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1324 = v1322;
        if (v1324)
        {
          v1325 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1324);
          v1320 = *(int **)a12;
          v1318 = *(int **)(a12 + 8);
        }
        else
        {
          v1325 = 0;
        }
        v1353 = &v1325[4 * v1321];
        v1317 = &v1325[4 * v1324];
        *(_DWORD *)v1353 = a6[2];
        v1319 = (int *)(v1353 + 4);
        while (v1318 != v1320)
        {
          v1354 = *--v1318;
          *((_DWORD *)v1353 - 1) = v1354;
          v1353 -= 4;
        }
        *(_QWORD *)a12 = v1353;
        *(_QWORD *)(a12 + 8) = v1319;
        *(_QWORD *)(a12 + 16) = v1317;
        if (v1320)
        {
          operator delete(v1320);
          v1317 = *v418;
        }
      }
      else
      {
        *v1318 = a6[2];
        v1319 = v1318 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1319;
      if (v1319 >= (int *)v1317)
      {
        v1355 = *(int **)a12;
        v1356 = ((uint64_t)v1319 - *(_QWORD *)a12) >> 2;
        v1357 = v1356 + 1;
        if ((unint64_t)(v1356 + 1) >> 62)
          goto LABEL_2244;
        v1358 = v1317 - (char *)v1355;
        if (v1358 >> 1 > v1357)
          v1357 = v1358 >> 1;
        if ((unint64_t)v1358 >= 0x7FFFFFFFFFFFFFFCLL)
          v1359 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1359 = v1357;
        if (v1359)
        {
          v1360 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1359);
          v1355 = *(int **)a12;
          v1319 = *(int **)(a12 + 8);
        }
        else
        {
          v1360 = 0;
        }
        v1384 = (int *)&v1360[4 * v1356];
        v1317 = &v1360[4 * v1359];
        *v1384 = v1471;
        v1337 = v1384 + 1;
        while (v1319 != v1355)
        {
          v1385 = *--v1319;
          *--v1384 = v1385;
        }
        *(_QWORD *)a12 = v1384;
        *(_QWORD *)(a12 + 8) = v1337;
        *(_QWORD *)(a12 + 16) = v1317;
        if (v1355)
        {
          operator delete(v1355);
          v1317 = *v418;
        }
      }
      else
      {
        *v1319 = v1471;
        v1337 = v1319 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1337;
      if (v1337 < (int *)v1317)
      {
LABEL_2100:
        *v1337 = v1480;
        v1386 = v1337 + 1;
LABEL_2228:
        v502 = v1386;
        goto LABEL_2243;
      }
      v503 = *(int **)a12;
      v1387 = ((uint64_t)v1337 - *(_QWORD *)a12) >> 2;
      v1388 = v1387 + 1;
      if (!((unint64_t)(v1387 + 1) >> 62))
      {
        v1389 = v1317 - (char *)v503;
        if (v1389 >> 1 > v1388)
          v1388 = v1389 >> 1;
        if ((unint64_t)v1389 >= 0x7FFFFFFFFFFFFFFCLL)
          v1390 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1390 = v1388;
        if (v1390)
        {
          v1391 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v1390);
          v503 = *(int **)a12;
          v1337 = *(int **)(a12 + 8);
        }
        else
        {
          v1391 = 0;
        }
        v572 = (int *)&v1391[4 * v1387];
        v573 = &v1391[4 * v1390];
        *v572 = v1480;
        v502 = v572 + 1;
        while (v1337 != v503)
        {
          v1406 = *--v1337;
          *--v572 = v1406;
        }
        goto LABEL_2241;
      }
      goto LABEL_2244;
    default:
      v1476 = v23 / 3;
      v29 = (char **)(a9 + 16);
      v28 = *(char **)(a9 + 16);
      if (v22 >= (unsigned int *)v28)
      {
        v52 = v23 + 1;
        if ((v23 + 1) >> 62)
          goto LABEL_2244;
        v53 = v28 - (char *)v21;
        if (v53 >> 1 > v52)
          v52 = v53 >> 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
        {
          v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v54);
          v21 = *(unsigned int **)a9;
          v22 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v55 = 0;
        }
        v89 = (unsigned int *)&v55[4 * v23];
        v28 = &v55[4 * v54];
        *v89 = *a1;
        v30 = v89 + 1;
        while (v22 != v21)
        {
          v90 = *--v22;
          *--v89 = v90;
        }
        *(_QWORD *)a9 = v89;
        *(_QWORD *)(a9 + 8) = v30;
        *(_QWORD *)(a9 + 16) = v28;
        if (v21)
        {
          operator delete(v21);
          v28 = *v29;
        }
      }
      else
      {
        *v22 = *a1;
        v30 = v22 + 1;
      }
      *(_QWORD *)(a9 + 8) = v30;
      if (v30 >= (unsigned int *)v28)
      {
        v93 = *(unsigned int **)a9;
        v94 = ((uint64_t)v30 - *(_QWORD *)a9) >> 2;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62)
          goto LABEL_2244;
        v96 = v28 - (char *)v93;
        if (v96 >> 1 > v95)
          v95 = v96 >> 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
          v97 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        v91 = v20;
        if (v97)
        {
          v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v97);
          v93 = *(unsigned int **)a9;
          v30 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v98 = 0;
        }
        v163 = (unsigned int *)&v98[4 * v94];
        v28 = &v98[4 * v97];
        *v163 = v1484;
        v92 = v163 + 1;
        while (v30 != v93)
        {
          v164 = *--v30;
          *--v163 = v164;
        }
        *(_QWORD *)a9 = v163;
        *(_QWORD *)(a9 + 8) = v92;
        *(_QWORD *)(a9 + 16) = v28;
        if (v93)
        {
          operator delete(v93);
          v28 = *v29;
        }
      }
      else
      {
        v91 = v20;
        *v30 = v1484;
        v92 = v30 + 1;
      }
      *(_QWORD *)(a9 + 8) = v92;
      if (v92 >= (unsigned int *)v28)
      {
        v166 = *(unsigned int **)a9;
        v167 = ((uint64_t)v92 - *(_QWORD *)a9) >> 2;
        v168 = v167 + 1;
        if ((unint64_t)(v167 + 1) >> 62)
          goto LABEL_2244;
        v169 = v28 - (char *)v166;
        if (v169 >> 1 > v168)
          v168 = v169 >> 1;
        if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
          v170 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v170 = v168;
        if (v170)
        {
          v171 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v170);
          v166 = *(unsigned int **)a9;
          v92 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v171 = 0;
        }
        v238 = (unsigned int *)&v171[4 * v167];
        v239 = &v171[4 * v170];
        *v238 = v1482;
        v165 = v238 + 1;
        while (v92 != v166)
        {
          v240 = *--v92;
          *--v238 = v240;
        }
        *(_QWORD *)a9 = v238;
        *(_QWORD *)(a9 + 8) = v165;
        *(_QWORD *)(a9 + 16) = v239;
        if (v166)
          operator delete(v166);
      }
      else
      {
        *v92 = v1482;
        v165 = v92 + 1;
      }
      v241 = v91;
      *(_QWORD *)(a9 + 8) = v165;
      v242 = *(_QWORD *)(a10 + 16);
      v1473 = a10 + 16;
      v243 = *(_DWORD **)(a10 + 8);
      if ((unint64_t)v243 >= v242)
      {
        v245 = *(_DWORD **)a10;
        v246 = ((uint64_t)v243 - *(_QWORD *)a10) >> 2;
        v247 = v246 + 1;
        if ((unint64_t)(v246 + 1) >> 62)
          goto LABEL_2244;
        v248 = v242 - (_QWORD)v245;
        if (v248 >> 1 > v247)
          v247 = v248 >> 1;
        if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFFCLL)
          v249 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v249 = v247;
        if (v249)
        {
          v250 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1473, v249);
          v245 = *(_DWORD **)a10;
          v243 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v250 = 0;
        }
        v337 = &v250[4 * v246];
        v338 = &v250[4 * v249];
        *(_DWORD *)v337 = v1476;
        v244 = v337 + 4;
        while (v243 != v245)
        {
          v339 = *--v243;
          *((_DWORD *)v337 - 1) = v339;
          v337 -= 4;
        }
        *(_QWORD *)a10 = v337;
        *(_QWORD *)(a10 + 8) = v244;
        *(_QWORD *)(a10 + 16) = v338;
        if (v245)
          operator delete(v245);
      }
      else
      {
        *v243 = v1476;
        v244 = v243 + 1;
      }
      *(_QWORD *)(a10 + 8) = v244;
      v341 = (char **)(a12 + 16);
      v340 = *(char **)(a12 + 16);
      v342 = *(unsigned int **)(a12 + 8);
      if (v342 >= (unsigned int *)v340)
      {
        v344 = *(int **)a12;
        v345 = ((uint64_t)v342 - *(_QWORD *)a12) >> 2;
        v346 = v345 + 1;
        if ((unint64_t)(v345 + 1) >> 62)
          goto LABEL_2244;
        v347 = v340 - (char *)v344;
        if (v347 >> 1 > v346)
          v346 = v347 >> 1;
        if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL)
          v348 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v348 = v346;
        if (v348)
        {
          v349 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v348);
          v344 = *(int **)a12;
          v342 = *(unsigned int **)(a12 + 8);
        }
        else
        {
          v349 = 0;
        }
        v436 = (unsigned int *)&v349[4 * v345];
        v340 = &v349[4 * v348];
        *v436 = *a6;
        v343 = (int *)(v436 + 1);
        while (v342 != (unsigned int *)v344)
        {
          v437 = *--v342;
          *--v436 = v437;
        }
        *(_QWORD *)a12 = v436;
        *(_QWORD *)(a12 + 8) = v343;
        *(_QWORD *)(a12 + 16) = v340;
        if (v344)
        {
          operator delete(v344);
          v340 = *v341;
        }
      }
      else
      {
        *v342 = *a6;
        v343 = (int *)(v342 + 1);
      }
      *(_QWORD *)(a12 + 8) = v343;
      if (v343 >= (int *)v340)
      {
        v439 = *(int **)a12;
        v440 = ((uint64_t)v343 - *(_QWORD *)a12) >> 2;
        v441 = v440 + 1;
        if ((unint64_t)(v440 + 1) >> 62)
          goto LABEL_2244;
        v442 = v340 - (char *)v439;
        if (v442 >> 1 > v441)
          v441 = v442 >> 1;
        if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFFCLL)
          v443 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v443 = v441;
        if (v443)
        {
          v444 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v443);
          v439 = *(int **)a12;
          v343 = *(int **)(a12 + 8);
        }
        else
        {
          v444 = 0;
        }
        v509 = (int *)&v444[4 * v440];
        v340 = &v444[4 * v443];
        *v509 = v16;
        v438 = v509 + 1;
        while (v343 != v439)
        {
          v510 = *--v343;
          *--v509 = v510;
        }
        *(_QWORD *)a12 = v509;
        *(_QWORD *)(a12 + 8) = v438;
        *(_QWORD *)(a12 + 16) = v340;
        if (v439)
        {
          operator delete(v439);
          v340 = *v341;
        }
      }
      else
      {
        *v343 = v16;
        v438 = v343 + 1;
      }
      *(_QWORD *)(a12 + 8) = v438;
      if (v438 >= (int *)v340)
      {
        v512 = *(int **)a12;
        v513 = ((uint64_t)v438 - *(_QWORD *)a12) >> 2;
        v514 = v513 + 1;
        if ((unint64_t)(v513 + 1) >> 62)
          goto LABEL_2244;
        v515 = v340 - (char *)v512;
        if (v515 >> 1 > v514)
          v514 = v515 >> 1;
        if ((unint64_t)v515 >= 0x7FFFFFFFFFFFFFFCLL)
          v516 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v516 = v514;
        if (v516)
        {
          v517 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a12 + 16, v516);
          v512 = *(int **)a12;
          v438 = *(int **)(a12 + 8);
        }
        else
        {
          v517 = 0;
        }
        v575 = &v517[4 * v513];
        v576 = &v517[4 * v516];
        *(_DWORD *)v575 = v241;
        v511 = v575 + 4;
        while (v438 != v512)
        {
          v577 = *--v438;
          *((_DWORD *)v575 - 1) = v577;
          v575 -= 4;
        }
        *(_QWORD *)a12 = v575;
        *(_QWORD *)(a12 + 8) = v511;
        *(_QWORD *)(a12 + 16) = v576;
        if (v512)
          operator delete(v512);
      }
      else
      {
        *v438 = v241;
        v511 = v438 + 1;
      }
      *(_QWORD *)(a12 + 8) = v511;
      v579 = *(unsigned int **)(a9 + 8);
      v578 = *(char **)(a9 + 16);
      if (v579 >= (unsigned int *)v578)
      {
        v581 = *(unsigned int **)a9;
        v582 = ((uint64_t)v579 - *(_QWORD *)a9) >> 2;
        v583 = v582 + 1;
        if ((unint64_t)(v582 + 1) >> 62)
          goto LABEL_2244;
        v584 = v578 - (char *)v581;
        if (v584 >> 1 > v583)
          v583 = v584 >> 1;
        if ((unint64_t)v584 >= 0x7FFFFFFFFFFFFFFCLL)
          v585 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v585 = v583;
        if (v585)
        {
          v586 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v585);
          v581 = *(unsigned int **)a9;
          v579 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v586 = 0;
        }
        v663 = &v586[4 * v582];
        v578 = &v586[4 * v585];
        *(_DWORD *)v663 = a1[1];
        v580 = (unsigned int *)(v663 + 4);
        while (v579 != v581)
        {
          v664 = *--v579;
          *((_DWORD *)v663 - 1) = v664;
          v663 -= 4;
        }
        *(_QWORD *)a9 = v663;
        *(_QWORD *)(a9 + 8) = v580;
        *(_QWORD *)(a9 + 16) = v578;
        if (v581)
        {
          operator delete(v581);
          v578 = *v29;
        }
      }
      else
      {
        *v579 = a1[1];
        v580 = v579 + 1;
      }
      *(_QWORD *)(a9 + 8) = v580;
      v1470 = v16;
      if (v580 >= (unsigned int *)v578)
      {
        v668 = *(unsigned int **)a9;
        v669 = ((uint64_t)v580 - *(_QWORD *)a9) >> 2;
        v670 = v669 + 1;
        if ((unint64_t)(v669 + 1) >> 62)
          goto LABEL_2244;
        v665 = (char **)(a12 + 16);
        v671 = v578 - (char *)v668;
        if (v671 >> 1 > v670)
          v670 = v671 >> 1;
        if ((unint64_t)v671 >= 0x7FFFFFFFFFFFFFFCLL)
          v672 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v672 = v670;
        v666 = v241;
        if (v672)
        {
          v673 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v672);
          v668 = *(unsigned int **)a9;
          v580 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v673 = 0;
        }
        v728 = (unsigned int *)&v673[4 * v669];
        v578 = &v673[4 * v672];
        *v728 = v1483;
        v667 = v728 + 1;
        while (v580 != v668)
        {
          v729 = *--v580;
          *--v728 = v729;
        }
        *(_QWORD *)a9 = v728;
        *(_QWORD *)(a9 + 8) = v667;
        *(_QWORD *)(a9 + 16) = v578;
        if (v668)
        {
          operator delete(v668);
          v578 = *v29;
        }
      }
      else
      {
        v665 = (char **)(a12 + 16);
        v666 = v241;
        *v580 = v1483;
        v667 = v580 + 1;
      }
      *(_QWORD *)(a9 + 8) = v667;
      if (v667 >= (unsigned int *)v578)
      {
        v731 = *(unsigned int **)a9;
        v732 = ((uint64_t)v667 - *(_QWORD *)a9) >> 2;
        v733 = v732 + 1;
        if ((unint64_t)(v732 + 1) >> 62)
          goto LABEL_2244;
        v734 = v578 - (char *)v731;
        if (v734 >> 1 > v733)
          v733 = v734 >> 1;
        if ((unint64_t)v734 >= 0x7FFFFFFFFFFFFFFCLL)
          v735 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v735 = v733;
        if (v735)
        {
          v736 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v735);
          v731 = *(unsigned int **)a9;
          v667 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v736 = 0;
        }
        v795 = (unsigned int *)&v736[4 * v732];
        v796 = &v736[4 * v735];
        *v795 = v1484;
        v730 = v795 + 1;
        while (v667 != v731)
        {
          v797 = *--v667;
          *--v795 = v797;
        }
        *(_QWORD *)a9 = v795;
        *(_QWORD *)(a9 + 8) = v730;
        *(_QWORD *)(a9 + 16) = v796;
        if (v731)
          operator delete(v731);
      }
      else
      {
        *v667 = v1484;
        v730 = v667 + 1;
      }
      v798 = v666;
      *(_QWORD *)(a9 + 8) = v730;
      v799 = v1476 + 1;
      v801 = *(_DWORD **)(a10 + 8);
      v800 = *(_QWORD *)(a10 + 16);
      v802 = v665;
      if ((unint64_t)v801 >= v800)
      {
        v805 = *(_DWORD **)a10;
        v806 = ((uint64_t)v801 - *(_QWORD *)a10) >> 2;
        v807 = v806 + 1;
        v804 = v1470;
        if ((unint64_t)(v806 + 1) >> 62)
          goto LABEL_2244;
        v808 = v800 - (_QWORD)v805;
        if (v808 >> 1 > v807)
          v807 = v808 >> 1;
        if ((unint64_t)v808 >= 0x7FFFFFFFFFFFFFFCLL)
          v809 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v809 = v807;
        if (v809)
        {
          v810 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1473, v809);
          v805 = *(_DWORD **)a10;
          v801 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v810 = 0;
        }
        v889 = &v810[4 * v806];
        v890 = &v810[4 * v809];
        *(_DWORD *)v889 = v799;
        v803 = v889 + 4;
        while (v801 != v805)
        {
          v891 = *--v801;
          *((_DWORD *)v889 - 1) = v891;
          v889 -= 4;
        }
        *(_QWORD *)a10 = v889;
        *(_QWORD *)(a10 + 8) = v803;
        *(_QWORD *)(a10 + 16) = v890;
        if (v805)
          operator delete(v805);
      }
      else
      {
        *v801 = v799;
        v803 = v801 + 1;
        v804 = v1470;
      }
      *(_QWORD *)(a10 + 8) = v803;
      v893 = *(int **)(a12 + 8);
      v892 = *(char **)(a12 + 16);
      if (v893 >= (int *)v892)
      {
        v895 = *(int **)a12;
        v896 = ((uint64_t)v893 - *(_QWORD *)a12) >> 2;
        v897 = v896 + 1;
        if ((unint64_t)(v896 + 1) >> 62)
          goto LABEL_2244;
        v898 = v892 - (char *)v895;
        if (v898 >> 1 > v897)
          v897 = v898 >> 1;
        if ((unint64_t)v898 >= 0x7FFFFFFFFFFFFFFCLL)
          v899 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v899 = v897;
        if (v899)
        {
          v900 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v899);
          v895 = *(int **)a12;
          v893 = *(int **)(a12 + 8);
        }
        else
        {
          v900 = 0;
        }
        v976 = &v900[4 * v896];
        v892 = &v900[4 * v899];
        *(_DWORD *)v976 = a6[1];
        v894 = (int *)(v976 + 4);
        while (v893 != v895)
        {
          v977 = *--v893;
          *((_DWORD *)v976 - 1) = v977;
          v976 -= 4;
        }
        *(_QWORD *)a12 = v976;
        *(_QWORD *)(a12 + 8) = v894;
        *(_QWORD *)(a12 + 16) = v892;
        if (v895)
        {
          operator delete(v895);
          v892 = *v802;
        }
      }
      else
      {
        *v893 = a6[1];
        v894 = v893 + 1;
      }
      *(_QWORD *)(a12 + 8) = v894;
      if (v894 >= (int *)v892)
      {
        v979 = *(int **)a12;
        v980 = ((uint64_t)v894 - *(_QWORD *)a12) >> 2;
        v981 = v980 + 1;
        if ((unint64_t)(v980 + 1) >> 62)
          goto LABEL_2244;
        v982 = v892 - (char *)v979;
        if (v982 >> 1 > v981)
          v981 = v982 >> 1;
        if ((unint64_t)v982 >= 0x7FFFFFFFFFFFFFFCLL)
          v983 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v983 = v981;
        if (v983)
        {
          v984 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v983);
          v979 = *(int **)a12;
          v894 = *(int **)(a12 + 8);
        }
        else
        {
          v984 = 0;
        }
        v1040 = (int *)&v984[4 * v980];
        v892 = &v984[4 * v983];
        *v1040 = v1480;
        v978 = v1040 + 1;
        while (v894 != v979)
        {
          v1041 = *--v894;
          *--v1040 = v1041;
        }
        *(_QWORD *)a12 = v1040;
        *(_QWORD *)(a12 + 8) = v978;
        *(_QWORD *)(a12 + 16) = v892;
        if (v979)
        {
          operator delete(v979);
          v892 = *v802;
        }
      }
      else
      {
        *v894 = v1480;
        v978 = v894 + 1;
      }
      *(_QWORD *)(a12 + 8) = v978;
      if (v978 >= (int *)v892)
      {
        v1043 = *(int **)a12;
        v1044 = ((uint64_t)v978 - *(_QWORD *)a12) >> 2;
        v1045 = v1044 + 1;
        if ((unint64_t)(v1044 + 1) >> 62)
          goto LABEL_2244;
        v1046 = v892 - (char *)v1043;
        if (v1046 >> 1 > v1045)
          v1045 = v1046 >> 1;
        if ((unint64_t)v1046 >= 0x7FFFFFFFFFFFFFFCLL)
          v1047 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1047 = v1045;
        if (v1047)
        {
          v1048 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v1047);
          v1043 = *(int **)a12;
          v978 = *(int **)(a12 + 8);
        }
        else
        {
          v1048 = 0;
        }
        v1094 = &v1048[4 * v1044];
        v1095 = &v1048[4 * v1047];
        *(_DWORD *)v1094 = v804;
        v1042 = v1094 + 4;
        while (v978 != v1043)
        {
          v1096 = *--v978;
          *((_DWORD *)v1094 - 1) = v1096;
          v1094 -= 4;
        }
        *(_QWORD *)a12 = v1094;
        *(_QWORD *)(a12 + 8) = v1042;
        *(_QWORD *)(a12 + 16) = v1095;
        if (v1043)
          operator delete(v1043);
      }
      else
      {
        *v978 = v804;
        v1042 = v978 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1042;
      v1098 = *(unsigned int **)(a9 + 8);
      v1097 = *(char **)(a9 + 16);
      if (v1098 >= (unsigned int *)v1097)
      {
        v1100 = *(unsigned int **)a9;
        v1101 = ((uint64_t)v1098 - *(_QWORD *)a9) >> 2;
        v1102 = v1101 + 1;
        if ((unint64_t)(v1101 + 1) >> 62)
          goto LABEL_2244;
        v1103 = v1097 - (char *)v1100;
        if (v1103 >> 1 > v1102)
          v1102 = v1103 >> 1;
        if ((unint64_t)v1103 >= 0x7FFFFFFFFFFFFFFCLL)
          v1104 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1104 = v1102;
        if (v1104)
        {
          v1105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1104);
          v1100 = *(unsigned int **)a9;
          v1098 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1105 = 0;
        }
        v1152 = &v1105[4 * v1101];
        v1097 = &v1105[4 * v1104];
        *(_DWORD *)v1152 = a1[2];
        v1099 = (unsigned int *)(v1152 + 4);
        while (v1098 != v1100)
        {
          v1153 = *--v1098;
          *((_DWORD *)v1152 - 1) = v1153;
          v1152 -= 4;
        }
        *(_QWORD *)a9 = v1152;
        *(_QWORD *)(a9 + 8) = v1099;
        *(_QWORD *)(a9 + 16) = v1097;
        if (v1100)
        {
          operator delete(v1100);
          v1097 = *v29;
        }
      }
      else
      {
        *v1098 = a1[2];
        v1099 = v1098 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1099;
      if (v1099 >= (unsigned int *)v1097)
      {
        v1155 = *(unsigned int **)a9;
        v1156 = ((uint64_t)v1099 - *(_QWORD *)a9) >> 2;
        v1157 = v1156 + 1;
        if ((unint64_t)(v1156 + 1) >> 62)
          goto LABEL_2244;
        v1158 = v1097 - (char *)v1155;
        if (v1158 >> 1 > v1157)
          v1157 = v1158 >> 1;
        if ((unint64_t)v1158 >= 0x7FFFFFFFFFFFFFFCLL)
          v1159 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1159 = v1157;
        if (v1159)
        {
          v1160 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1159);
          v1155 = *(unsigned int **)a9;
          v1099 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1160 = 0;
        }
        v1189 = (unsigned int *)&v1160[4 * v1156];
        v1097 = &v1160[4 * v1159];
        *v1189 = v1482;
        v1154 = v1189 + 1;
        while (v1099 != v1155)
        {
          v1190 = *--v1099;
          *--v1189 = v1190;
        }
        *(_QWORD *)a9 = v1189;
        *(_QWORD *)(a9 + 8) = v1154;
        *(_QWORD *)(a9 + 16) = v1097;
        if (v1155)
        {
          operator delete(v1155);
          v1097 = *v29;
        }
      }
      else
      {
        *v1099 = v1482;
        v1154 = v1099 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1154;
      if (v1154 >= (unsigned int *)v1097)
      {
        v1192 = *(unsigned int **)a9;
        v1193 = ((uint64_t)v1154 - *(_QWORD *)a9) >> 2;
        v1194 = v1193 + 1;
        if ((unint64_t)(v1193 + 1) >> 62)
          goto LABEL_2244;
        v1195 = v1097 - (char *)v1192;
        if (v1195 >> 1 > v1194)
          v1194 = v1195 >> 1;
        if ((unint64_t)v1195 >= 0x7FFFFFFFFFFFFFFCLL)
          v1196 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1196 = v1194;
        if (v1196)
        {
          v1197 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1196);
          v1192 = *(unsigned int **)a9;
          v1154 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1197 = 0;
        }
        v1225 = (unsigned int *)&v1197[4 * v1193];
        v1226 = &v1197[4 * v1196];
        *v1225 = v1483;
        v1191 = v1225 + 1;
        while (v1154 != v1192)
        {
          v1227 = *--v1154;
          *--v1225 = v1227;
        }
        *(_QWORD *)a9 = v1225;
        *(_QWORD *)(a9 + 8) = v1191;
        *(_QWORD *)(a9 + 16) = v1226;
        if (v1192)
          operator delete(v1192);
      }
      else
      {
        *v1154 = v1483;
        v1191 = v1154 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1191;
      v1228 = v1476 + 2;
      v1230 = *(_DWORD **)(a10 + 8);
      v1229 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v1230 >= v1229)
      {
        v1232 = *(_DWORD **)a10;
        v1233 = ((uint64_t)v1230 - *(_QWORD *)a10) >> 2;
        v1234 = v1233 + 1;
        if ((unint64_t)(v1233 + 1) >> 62)
          goto LABEL_2244;
        v1235 = v1229 - (_QWORD)v1232;
        if (v1235 >> 1 > v1234)
          v1234 = v1235 >> 1;
        if ((unint64_t)v1235 >= 0x7FFFFFFFFFFFFFFCLL)
          v1236 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1236 = v1234;
        if (v1236)
        {
          v1237 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1473, v1236);
          v1232 = *(_DWORD **)a10;
          v1230 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v1237 = 0;
        }
        v1277 = &v1237[4 * v1233];
        v1278 = &v1237[4 * v1236];
        *(_DWORD *)v1277 = v1228;
        v1231 = v1277 + 4;
        while (v1230 != v1232)
        {
          v1279 = *--v1230;
          *((_DWORD *)v1277 - 1) = v1279;
          v1277 -= 4;
        }
        *(_QWORD *)a10 = v1277;
        *(_QWORD *)(a10 + 8) = v1231;
        *(_QWORD *)(a10 + 16) = v1278;
        if (v1232)
          operator delete(v1232);
      }
      else
      {
        *v1230 = v1228;
        v1231 = v1230 + 1;
      }
      *(_QWORD *)(a10 + 8) = v1231;
      v1281 = *(int **)(a12 + 8);
      v1280 = *(char **)(a12 + 16);
      if (v1281 >= (int *)v1280)
      {
        v1283 = *(int **)a12;
        v1284 = ((uint64_t)v1281 - *(_QWORD *)a12) >> 2;
        v1285 = v1284 + 1;
        if ((unint64_t)(v1284 + 1) >> 62)
          goto LABEL_2244;
        v1286 = v1280 - (char *)v1283;
        if (v1286 >> 1 > v1285)
          v1285 = v1286 >> 1;
        if ((unint64_t)v1286 >= 0x7FFFFFFFFFFFFFFCLL)
          v1287 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1287 = v1285;
        if (v1287)
        {
          v1288 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v1287);
          v1283 = *(int **)a12;
          v1281 = *(int **)(a12 + 8);
        }
        else
        {
          v1288 = 0;
        }
        v1326 = &v1288[4 * v1284];
        v1280 = &v1288[4 * v1287];
        *(_DWORD *)v1326 = a6[2];
        v1282 = (int *)(v1326 + 4);
        while (v1281 != v1283)
        {
          v1327 = *--v1281;
          *((_DWORD *)v1326 - 1) = v1327;
          v1326 -= 4;
        }
        *(_QWORD *)a12 = v1326;
        *(_QWORD *)(a12 + 8) = v1282;
        *(_QWORD *)(a12 + 16) = v1280;
        if (v1283)
        {
          operator delete(v1283);
          v1280 = *v802;
        }
      }
      else
      {
        *v1281 = a6[2];
        v1282 = v1281 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1282;
      if (v1282 >= (int *)v1280)
      {
        v1329 = *(int **)a12;
        v1330 = ((uint64_t)v1282 - *(_QWORD *)a12) >> 2;
        v1331 = v1330 + 1;
        if ((unint64_t)(v1330 + 1) >> 62)
          goto LABEL_2244;
        v1332 = v1280 - (char *)v1329;
        if (v1332 >> 1 > v1331)
          v1331 = v1332 >> 1;
        if ((unint64_t)v1332 >= 0x7FFFFFFFFFFFFFFCLL)
          v1333 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1333 = v1331;
        if (v1333)
        {
          v1334 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v1333);
          v1329 = *(int **)a12;
          v1282 = *(int **)(a12 + 8);
        }
        else
        {
          v1334 = 0;
        }
        v1361 = &v1334[4 * v1330];
        v1280 = &v1334[4 * v1333];
        *(_DWORD *)v1361 = v798;
        v1328 = (int *)(v1361 + 4);
        while (v1282 != v1329)
        {
          v1362 = *--v1282;
          *((_DWORD *)v1361 - 1) = v1362;
          v1361 -= 4;
        }
        *(_QWORD *)a12 = v1361;
        *(_QWORD *)(a12 + 8) = v1328;
        *(_QWORD *)(a12 + 16) = v1280;
        if (v1329)
        {
          operator delete(v1329);
          v1280 = *v802;
        }
      }
      else
      {
        *v1282 = v798;
        v1328 = v1282 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1328;
      if (v1328 >= (int *)v1280)
      {
        v1364 = *(int **)a12;
        v1365 = ((uint64_t)v1328 - *(_QWORD *)a12) >> 2;
        v1366 = v1365 + 1;
        if ((unint64_t)(v1365 + 1) >> 62)
          goto LABEL_2244;
        v1367 = v1280 - (char *)v1364;
        if (v1367 >> 1 > v1366)
          v1366 = v1367 >> 1;
        if ((unint64_t)v1367 >= 0x7FFFFFFFFFFFFFFCLL)
          v1368 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1368 = v1366;
        if (v1368)
        {
          v1369 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v1368);
          v1364 = *(int **)a12;
          v1328 = *(int **)(a12 + 8);
        }
        else
        {
          v1369 = 0;
        }
        v1392 = (int *)&v1369[4 * v1365];
        v1393 = &v1369[4 * v1368];
        *v1392 = v1480;
        v1363 = v1392 + 1;
        while (v1328 != v1364)
        {
          v1394 = *--v1328;
          *--v1392 = v1394;
        }
        *(_QWORD *)a12 = v1392;
        *(_QWORD *)(a12 + 8) = v1363;
        *(_QWORD *)(a12 + 16) = v1393;
        if (v1364)
          operator delete(v1364);
      }
      else
      {
        *v1328 = v1480;
        v1363 = v1328 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1363;
      v1396 = *(unsigned int **)(a9 + 8);
      v1395 = *(char **)(a9 + 16);
      if (v1396 >= (unsigned int *)v1395)
      {
        v1398 = *(unsigned int **)a9;
        v1399 = ((uint64_t)v1396 - *(_QWORD *)a9) >> 2;
        v1400 = v1399 + 1;
        if ((unint64_t)(v1399 + 1) >> 62)
          goto LABEL_2244;
        v1401 = v1395 - (char *)v1398;
        if (v1401 >> 1 > v1400)
          v1400 = v1401 >> 1;
        if ((unint64_t)v1401 >= 0x7FFFFFFFFFFFFFFCLL)
          v1402 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1402 = v1400;
        if (v1402)
        {
          v1403 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1402);
          v1398 = *(unsigned int **)a9;
          v1396 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1403 = 0;
        }
        v1407 = (unsigned int *)&v1403[4 * v1399];
        v1395 = &v1403[4 * v1402];
        *v1407 = v1484;
        v1397 = v1407 + 1;
        while (v1396 != v1398)
        {
          v1408 = *--v1396;
          *--v1407 = v1408;
        }
        *(_QWORD *)a9 = v1407;
        *(_QWORD *)(a9 + 8) = v1397;
        *(_QWORD *)(a9 + 16) = v1395;
        if (v1398)
        {
          operator delete(v1398);
          v1395 = *v29;
        }
      }
      else
      {
        *v1396 = v1484;
        v1397 = v1396 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1397;
      if (v1397 >= (unsigned int *)v1395)
      {
        v1410 = *(unsigned int **)a9;
        v1411 = ((uint64_t)v1397 - *(_QWORD *)a9) >> 2;
        v1412 = v1411 + 1;
        if ((unint64_t)(v1411 + 1) >> 62)
          goto LABEL_2244;
        v1413 = v1395 - (char *)v1410;
        if (v1413 >> 1 > v1412)
          v1412 = v1413 >> 1;
        if ((unint64_t)v1413 >= 0x7FFFFFFFFFFFFFFCLL)
          v1414 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1414 = v1412;
        if (v1414)
        {
          v1415 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1414);
          v1410 = *(unsigned int **)a9;
          v1397 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1415 = 0;
        }
        v1416 = (unsigned int *)&v1415[4 * v1411];
        v1395 = &v1415[4 * v1414];
        *v1416 = v1483;
        v1409 = v1416 + 1;
        while (v1397 != v1410)
        {
          v1417 = *--v1397;
          *--v1416 = v1417;
        }
        *(_QWORD *)a9 = v1416;
        *(_QWORD *)(a9 + 8) = v1409;
        *(_QWORD *)(a9 + 16) = v1395;
        if (v1410)
        {
          operator delete(v1410);
          v1395 = *v29;
        }
      }
      else
      {
        *v1397 = v1483;
        v1409 = v1397 + 1;
      }
      *(_QWORD *)(a9 + 8) = v1409;
      if (v1409 >= (unsigned int *)v1395)
      {
        v1420 = *(unsigned int **)a9;
        v1421 = ((uint64_t)v1409 - *(_QWORD *)a9) >> 2;
        v1422 = v1421 + 1;
        if ((unint64_t)(v1421 + 1) >> 62)
          goto LABEL_2244;
        v1423 = v1395 - (char *)v1420;
        if (v1423 >> 1 > v1422)
          v1422 = v1423 >> 1;
        if ((unint64_t)v1423 >= 0x7FFFFFFFFFFFFFFCLL)
          v1424 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1424 = v1422;
        if (v1424)
        {
          v1425 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a9 + 16, v1424);
          v1420 = *(unsigned int **)a9;
          v1409 = *(unsigned int **)(a9 + 8);
        }
        else
        {
          v1425 = 0;
        }
        v1419 = v1476;
        v1426 = (unsigned int *)&v1425[4 * v1421];
        v1427 = &v1425[4 * v1424];
        *v1426 = v1482;
        v1418 = v1426 + 1;
        while (v1409 != v1420)
        {
          v1428 = *--v1409;
          *--v1426 = v1428;
        }
        *(_QWORD *)a9 = v1426;
        *(_QWORD *)(a9 + 8) = v1418;
        *(_QWORD *)(a9 + 16) = v1427;
        if (v1420)
          operator delete(v1420);
      }
      else
      {
        *v1409 = v1482;
        v1418 = v1409 + 1;
        v1419 = v1476;
      }
      *(_QWORD *)(a9 + 8) = v1418;
      v1429 = v1419 + 3;
      v1431 = *(_DWORD **)(a10 + 8);
      v1430 = *(_QWORD *)(a10 + 16);
      if ((unint64_t)v1431 >= v1430)
      {
        v1433 = *(_DWORD **)a10;
        v1434 = ((uint64_t)v1431 - *(_QWORD *)a10) >> 2;
        v1435 = v1434 + 1;
        if ((unint64_t)(v1434 + 1) >> 62)
          goto LABEL_2244;
        v1436 = v1430 - (_QWORD)v1433;
        if (v1436 >> 1 > v1435)
          v1435 = v1436 >> 1;
        if ((unint64_t)v1436 >= 0x7FFFFFFFFFFFFFFCLL)
          v1437 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1437 = v1435;
        if (v1437)
        {
          v1438 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v1473, v1437);
          v1433 = *(_DWORD **)a10;
          v1431 = *(_DWORD **)(a10 + 8);
        }
        else
        {
          v1438 = 0;
        }
        v1439 = &v1438[4 * v1434];
        v1440 = &v1438[4 * v1437];
        *(_DWORD *)v1439 = v1429;
        v1432 = v1439 + 4;
        while (v1431 != v1433)
        {
          v1441 = *--v1431;
          *((_DWORD *)v1439 - 1) = v1441;
          v1439 -= 4;
        }
        *(_QWORD *)a10 = v1439;
        *(_QWORD *)(a10 + 8) = v1432;
        *(_QWORD *)(a10 + 16) = v1440;
        if (v1433)
          operator delete(v1433);
      }
      else
      {
        *v1431 = v1429;
        v1432 = v1431 + 1;
      }
      *(_QWORD *)(a10 + 8) = v1432;
      v1443 = *(int **)(a12 + 8);
      v1442 = *(char **)(a12 + 16);
      if (v1443 >= (int *)v1442)
      {
        v1445 = *(int **)a12;
        v1446 = ((uint64_t)v1443 - *(_QWORD *)a12) >> 2;
        v1447 = v1446 + 1;
        if ((unint64_t)(v1446 + 1) >> 62)
          goto LABEL_2244;
        v1448 = v1442 - (char *)v1445;
        if (v1448 >> 1 > v1447)
          v1447 = v1448 >> 1;
        if ((unint64_t)v1448 >= 0x7FFFFFFFFFFFFFFCLL)
          v1449 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1449 = v1447;
        if (v1449)
        {
          v1450 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v1449);
          v1445 = *(int **)a12;
          v1443 = *(int **)(a12 + 8);
        }
        else
        {
          v1450 = 0;
        }
        v1451 = &v1450[4 * v1446];
        v1442 = &v1450[4 * v1449];
        *(_DWORD *)v1451 = v804;
        v1444 = (int *)(v1451 + 4);
        while (v1443 != v1445)
        {
          v1452 = *--v1443;
          *((_DWORD *)v1451 - 1) = v1452;
          v1451 -= 4;
        }
        *(_QWORD *)a12 = v1451;
        *(_QWORD *)(a12 + 8) = v1444;
        *(_QWORD *)(a12 + 16) = v1442;
        if (v1445)
        {
          operator delete(v1445);
          v1442 = *v802;
        }
      }
      else
      {
        *v1443 = v804;
        v1444 = v1443 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1444;
      if (v1444 >= (int *)v1442)
      {
        v1454 = *(int **)a12;
        v1455 = ((uint64_t)v1444 - *(_QWORD *)a12) >> 2;
        v1456 = v1455 + 1;
        if ((unint64_t)(v1455 + 1) >> 62)
          goto LABEL_2244;
        v1457 = v1442 - (char *)v1454;
        if (v1457 >> 1 > v1456)
          v1456 = v1457 >> 1;
        if ((unint64_t)v1457 >= 0x7FFFFFFFFFFFFFFCLL)
          v1458 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1458 = v1456;
        if (v1458)
        {
          v1459 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v1458);
          v1454 = *(int **)a12;
          v1444 = *(int **)(a12 + 8);
        }
        else
        {
          v1459 = 0;
        }
        v1460 = (int *)&v1459[4 * v1455];
        v1442 = &v1459[4 * v1458];
        *v1460 = v1480;
        v1453 = v1460 + 1;
        while (v1444 != v1454)
        {
          v1461 = *--v1444;
          *--v1460 = v1461;
        }
        *(_QWORD *)a12 = v1460;
        *(_QWORD *)(a12 + 8) = v1453;
        *(_QWORD *)(a12 + 16) = v1442;
        if (v1454)
        {
          operator delete(v1454);
          v1442 = *v802;
        }
      }
      else
      {
        *v1444 = v1480;
        v1453 = v1444 + 1;
      }
      *(_QWORD *)(a12 + 8) = v1453;
      if (v1453 >= (int *)v1442)
      {
        v503 = *(int **)a12;
        v1462 = ((uint64_t)v1453 - *(_QWORD *)a12) >> 2;
        v1463 = v1462 + 1;
        if (!((unint64_t)(v1462 + 1) >> 62))
        {
          v1464 = v1442 - (char *)v503;
          if (v1464 >> 1 > v1463)
            v1463 = v1464 >> 1;
          if ((unint64_t)v1464 >= 0x7FFFFFFFFFFFFFFCLL)
            v1465 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v1465 = v1463;
          if (v1465)
          {
            v1466 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v802, v1465);
            v503 = *(int **)a12;
            v1453 = *(int **)(a12 + 8);
          }
          else
          {
            v1466 = 0;
          }
          v572 = (int *)&v1466[4 * v1462];
          v573 = &v1466[4 * v1465];
          *v572 = v798;
          v502 = v572 + 1;
          while (v1453 != v503)
          {
            v1467 = *--v1453;
            *--v572 = v1467;
          }
          goto LABEL_2241;
        }
        goto LABEL_2244;
      }
      *v1453 = v798;
      v1386 = v1453 + 1;
      goto LABEL_2228;
  }
  *(_QWORD *)a12 = v1106;
  *(_QWORD *)(a12 + 8) = v1108;
  *(_QWORD *)(a12 + 16) = v1107;
  if (v1052)
    operator delete(v1052);
  goto LABEL_2135;
}

void geom::`anonymous namespace'::refine_triangle(unsigned int *a1, int a2, geom::_anonymous_namespace_::edge_vertex_map *this, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char *v12;
  char **v13;
  unsigned int *v14;
  unsigned int *v15;
  char *v16;
  char **v17;
  unsigned int *v18;
  unsigned int *v19;
  char *v20;
  char **v21;
  unsigned int *v22;
  unsigned int *v23;
  char *v24;
  char **v25;
  unsigned int *v26;
  unsigned int *v27;
  char *v28;
  char **v29;
  unsigned int *v30;
  unsigned int *v31;
  char *v32;
  char **v33;
  unsigned int *v34;
  unsigned int *v35;
  char *v36;
  char **v37;
  unsigned int *v38;
  unsigned int *v39;
  char *v40;
  char **v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned int *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unsigned int *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  unsigned int *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unsigned int *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unsigned int *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unsigned int *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unsigned int *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  int v165;
  unsigned int v166;
  unsigned int *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int *v202;
  unsigned int *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  int v210;
  unsigned int *v211;
  unsigned int *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int *v220;
  unsigned int *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  int v228;
  unsigned int *v229;
  unsigned int *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  unsigned int *v236;
  char *v237;
  _DWORD *v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int *v242;
  unsigned int *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  int v250;
  unsigned int *v251;
  unsigned int *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  int v259;
  unsigned int *v260;
  unsigned int *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  char *v266;
  char *v267;
  int v268;
  unsigned int *v269;
  unsigned int *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int *v278;
  unsigned int *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  unsigned int *v285;
  unsigned int v286;
  unsigned int *v287;
  unsigned int *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  unsigned int *v294;
  unsigned int v295;
  unsigned int *v296;
  unsigned int *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  int v304;
  unsigned int *v305;
  unsigned int *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  char *v312;
  int v313;
  unsigned int *v314;
  unsigned int *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  char *v320;
  unsigned int *v321;
  unsigned int v322;
  unsigned int *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  char *v328;
  char *v329;
  int v330;
  unsigned int *v331;
  unsigned int *v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char *v337;
  char *v338;
  int v339;
  unsigned int *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  char *v345;
  char *v346;
  int v347;
  unsigned int *v348;
  unsigned int *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  char *v354;
  unsigned int *v355;
  unsigned int v356;
  unsigned int *v357;
  unsigned int *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int *v366;
  unsigned int *v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  char *v372;
  char *v373;
  int v374;
  unsigned int v375;
  unsigned int *v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  char *v381;
  char *v382;
  int v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  char *v388;
  unsigned int *v389;
  unsigned int v390;
  unsigned int *v391;
  unsigned int *v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  char *v397;
  char *v398;
  int v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  char *v404;
  unsigned int *v405;
  unsigned int v406;
  unsigned int *v407;
  unsigned int *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char *v413;
  unsigned int *v414;
  unsigned int v415;
  unsigned int *v416;
  unsigned int *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char *v422;
  unsigned int *v423;
  unsigned int v424;
  unsigned int *v425;
  unsigned int *v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  unint64_t v430;
  char *v431;
  unsigned int *v432;
  char *v433;
  _DWORD *v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int *v437;
  unsigned int v438;
  unsigned int *v439;
  unsigned int *v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  unint64_t v444;
  char *v445;
  unsigned int v446;
  unsigned int *v447;
  unsigned int v448;
  unsigned int *v449;
  unsigned int *v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unint64_t v454;
  char *v455;
  unsigned int *v456;
  unsigned int v457;
  unsigned int *v458;
  unsigned int *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  char *v464;
  char *v465;
  int v466;
  unsigned int *v467;
  unsigned int *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  int v475;
  unsigned int *v476;
  uint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t v480;
  char *v481;
  char *v482;
  int v483;
  unsigned int *v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  unint64_t v488;
  char *v489;
  char *v490;
  int v491;
  unsigned int *v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  char *v497;
  unsigned int *v498;
  unsigned int v499;
  unsigned int *v500;
  unsigned int *v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  unint64_t v505;
  char *v506;
  unsigned int *v507;
  unsigned int v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  char *v513;
  char *v514;
  int v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  char *v520;
  unsigned int *v521;
  unsigned int v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t v526;
  char *v527;
  unsigned int *v528;
  unsigned int v529;
  unsigned int *v530;
  unsigned int *v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  unint64_t v535;
  char *v536;
  unsigned int v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int *v540;
  unsigned int v541;
  unsigned int *v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  char *v547;
  unsigned int *v548;
  unsigned int v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  char *v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;

  v557 = -1;
  v558 = -1;
  v556 = -1;
  v8 = *a1;
  v9 = a1[1];
  {
    v558 += a2;
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  v11 = a1[2];
  {
    v557 += a2;
    v10 |= 2u;
  }
  {
    v556 += a2;
    v10 |= 4u;
  }
  switch(v10)
  {
    case 0:
      v13 = (char **)(a4 + 16);
      v12 = *(char **)(a4 + 16);
      v14 = *(unsigned int **)(a4 + 8);
      if (v14 >= (unsigned int *)v12)
      {
        v44 = *(unsigned int **)a4;
        v45 = ((uint64_t)v14 - *(_QWORD *)a4) >> 2;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62)
          goto LABEL_959;
        v47 = v12 - (char *)v44;
        if (v47 >> 1 > v46)
          v46 = v47 >> 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v48);
          v44 = *(unsigned int **)a4;
          v14 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v49 = 0;
        }
        v92 = (unsigned int *)&v49[4 * v45];
        v12 = &v49[4 * v48];
        *v92 = v8;
        v15 = v92 + 1;
        while (v14 != v44)
        {
          v93 = *--v14;
          *--v92 = v93;
        }
        *(_QWORD *)a4 = v92;
        *(_QWORD *)(a4 + 8) = v15;
        *(_QWORD *)(a4 + 16) = v12;
        if (v44)
        {
          operator delete(v44);
          v12 = *v13;
        }
      }
      else
      {
        *v14 = v8;
        v15 = v14 + 1;
      }
      *(_QWORD *)(a4 + 8) = v15;
      if (v15 >= (unsigned int *)v12)
      {
        v95 = *(unsigned int **)a4;
        v96 = ((uint64_t)v15 - *(_QWORD *)a4) >> 2;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 62)
          goto LABEL_959;
        v98 = v12 - (char *)v95;
        if (v98 >> 1 > v97)
          v97 = v98 >> 1;
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
          v99 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v99 = v97;
        if (v99)
        {
          v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v99);
          v95 = *(unsigned int **)a4;
          v15 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v100 = 0;
        }
        v164 = &v100[4 * v96];
        v12 = &v100[4 * v99];
        *(_DWORD *)v164 = a1[1];
        v94 = (unsigned int *)(v164 + 4);
        while (v15 != v95)
        {
          v165 = *--v15;
          *((_DWORD *)v164 - 1) = v165;
          v164 -= 4;
        }
        *(_QWORD *)a4 = v164;
        *(_QWORD *)(a4 + 8) = v94;
        *(_QWORD *)(a4 + 16) = v12;
        if (v95)
        {
          operator delete(v95);
          v12 = *v13;
        }
      }
      else
      {
        *v15 = a1[1];
        v94 = v15 + 1;
      }
      *(_QWORD *)(a4 + 8) = v94;
      if (v94 < (unsigned int *)v12)
      {
        v166 = a1[2];
LABEL_878:
        *v94 = v166;
        v238 = v94 + 1;
LABEL_917:
        *(_QWORD *)(a4 + 8) = v238;
        return;
      }
      v167 = *(unsigned int **)a4;
      v168 = ((uint64_t)v94 - *(_QWORD *)a4) >> 2;
      v169 = v168 + 1;
      if (!((unint64_t)(v168 + 1) >> 62))
      {
        v170 = v12 - (char *)v167;
        if (v170 >> 1 > v169)
          v169 = v170 >> 1;
        if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL)
          v171 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v171 = v169;
        if (v171)
        {
          v172 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v171);
          v167 = *(unsigned int **)a4;
          v94 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v172 = 0;
        }
        v236 = (unsigned int *)&v172[4 * v168];
        v237 = &v172[4 * v171];
        *v236 = a1[2];
        v238 = v236 + 1;
        while (v94 != v167)
        {
          v239 = *--v94;
          *--v236 = v239;
        }
LABEL_915:
        *(_QWORD *)a4 = v236;
        *(_QWORD *)(a4 + 8) = v238;
        *(_QWORD *)(a4 + 16) = v237;
        if (v167)
          operator delete(v167);
        goto LABEL_917;
      }
      goto LABEL_959;
    case 1:
      v21 = (char **)(a4 + 16);
      v20 = *(char **)(a4 + 16);
      v22 = *(unsigned int **)(a4 + 8);
      if (v22 >= (unsigned int *)v20)
      {
        v56 = *(unsigned int **)a4;
        v57 = ((uint64_t)v22 - *(_QWORD *)a4) >> 2;
        v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 62)
          goto LABEL_959;
        v59 = v20 - (char *)v56;
        if (v59 >> 1 > v58)
          v58 = v59 >> 1;
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
          v60 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v60 = v58;
        if (v60)
        {
          v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v60);
          v56 = *(unsigned int **)a4;
          v22 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v61 = 0;
        }
        v110 = (unsigned int *)&v61[4 * v57];
        v20 = &v61[4 * v60];
        *v110 = v8;
        v23 = v110 + 1;
        while (v22 != v56)
        {
          v111 = *--v22;
          *--v110 = v111;
        }
        *(_QWORD *)a4 = v110;
        *(_QWORD *)(a4 + 8) = v23;
        *(_QWORD *)(a4 + 16) = v20;
        if (v56)
        {
          operator delete(v56);
          v20 = *v21;
        }
      }
      else
      {
        *v22 = v8;
        v23 = v22 + 1;
      }
      *(_QWORD *)(a4 + 8) = v23;
      if (v23 >= (unsigned int *)v20)
      {
        v113 = *(unsigned int **)a4;
        v114 = ((uint64_t)v23 - *(_QWORD *)a4) >> 2;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 62)
          goto LABEL_959;
        v116 = v20 - (char *)v113;
        if (v116 >> 1 > v115)
          v115 = v116 >> 1;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL)
          v117 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
        {
          v118 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v117);
          v113 = *(unsigned int **)a4;
          v23 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v118 = 0;
        }
        v182 = (unsigned int *)&v118[4 * v114];
        v20 = &v118[4 * v117];
        *v182 = v558;
        v112 = v182 + 1;
        while (v23 != v113)
        {
          v183 = *--v23;
          *--v182 = v183;
        }
        *(_QWORD *)a4 = v182;
        *(_QWORD *)(a4 + 8) = v112;
        *(_QWORD *)(a4 + 16) = v20;
        if (v113)
        {
          operator delete(v113);
          v20 = *v21;
        }
      }
      else
      {
        *v23 = v558;
        v112 = v23 + 1;
      }
      *(_QWORD *)(a4 + 8) = v112;
      if (v112 >= (unsigned int *)v20)
      {
        v185 = *(unsigned int **)a4;
        v186 = ((uint64_t)v112 - *(_QWORD *)a4) >> 2;
        v187 = v186 + 1;
        if ((unint64_t)(v186 + 1) >> 62)
          goto LABEL_959;
        v188 = v20 - (char *)v185;
        if (v188 >> 1 > v187)
          v187 = v188 >> 1;
        if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL)
          v189 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v189 = v187;
        if (v189)
        {
          v190 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v189);
          v185 = *(unsigned int **)a4;
          v112 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v190 = 0;
        }
        v249 = &v190[4 * v186];
        v20 = &v190[4 * v189];
        *(_DWORD *)v249 = a1[2];
        v184 = (unsigned int *)(v249 + 4);
        while (v112 != v185)
        {
          v250 = *--v112;
          *((_DWORD *)v249 - 1) = v250;
          v249 -= 4;
        }
        *(_QWORD *)a4 = v249;
        *(_QWORD *)(a4 + 8) = v184;
        *(_QWORD *)(a4 + 16) = v20;
        if (v185)
        {
          operator delete(v185);
          v20 = *v21;
        }
      }
      else
      {
        *v112 = a1[2];
        v184 = v112 + 1;
      }
      *(_QWORD *)(a4 + 8) = v184;
      if (v184 >= (unsigned int *)v20)
      {
        v252 = *(unsigned int **)a4;
        v253 = ((uint64_t)v184 - *(_QWORD *)a4) >> 2;
        v254 = v253 + 1;
        if ((unint64_t)(v253 + 1) >> 62)
          goto LABEL_959;
        v255 = v20 - (char *)v252;
        if (v255 >> 1 > v254)
          v254 = v255 >> 1;
        if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFFCLL)
          v256 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v256 = v254;
        if (v256)
        {
          v257 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v256);
          v252 = *(unsigned int **)a4;
          v184 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v257 = 0;
        }
        v312 = &v257[4 * v253];
        v20 = &v257[4 * v256];
        *(_DWORD *)v312 = a1[1];
        v251 = (unsigned int *)(v312 + 4);
        while (v184 != v252)
        {
          v313 = *--v184;
          *((_DWORD *)v312 - 1) = v313;
          v312 -= 4;
        }
        *(_QWORD *)a4 = v312;
        *(_QWORD *)(a4 + 8) = v251;
        *(_QWORD *)(a4 + 16) = v20;
        if (v252)
        {
          operator delete(v252);
          v20 = *v21;
        }
      }
      else
      {
        *v184 = a1[1];
        v251 = v184 + 1;
      }
      *(_QWORD *)(a4 + 8) = v251;
      if (v251 >= (unsigned int *)v20)
      {
        v315 = *(unsigned int **)a4;
        v316 = ((uint64_t)v251 - *(_QWORD *)a4) >> 2;
        v317 = v316 + 1;
        if ((unint64_t)(v316 + 1) >> 62)
          goto LABEL_959;
        v318 = v20 - (char *)v315;
        if (v318 >> 1 > v317)
          v317 = v318 >> 1;
        if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFFCLL)
          v319 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v319 = v317;
        if (v319)
        {
          v320 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v319);
          v315 = *(unsigned int **)a4;
          v251 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v320 = 0;
        }
        v373 = &v320[4 * v316];
        v20 = &v320[4 * v319];
        *(_DWORD *)v373 = a1[2];
        v314 = (unsigned int *)(v373 + 4);
        while (v251 != v315)
        {
          v374 = *--v251;
          *((_DWORD *)v373 - 1) = v374;
          v373 -= 4;
        }
        *(_QWORD *)a4 = v373;
        *(_QWORD *)(a4 + 8) = v314;
        *(_QWORD *)(a4 + 16) = v20;
        if (v315)
        {
          operator delete(v315);
          v20 = *v21;
        }
      }
      else
      {
        *v251 = a1[2];
        v314 = v251 + 1;
      }
      *(_QWORD *)(a4 + 8) = v314;
      if (v314 >= (unsigned int *)v20)
      {
        v376 = *(unsigned int **)a4;
        v377 = ((uint64_t)v314 - *(_QWORD *)a4) >> 2;
        v378 = v377 + 1;
        if (!((unint64_t)(v377 + 1) >> 62))
        {
          v379 = v20 - (char *)v376;
          if (v379 >> 1 > v378)
            v378 = v379 >> 1;
          if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFFCLL)
            v380 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v380 = v378;
          if (v380)
          {
            v381 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v380);
            v376 = *(unsigned int **)a4;
            v314 = *(unsigned int **)(a4 + 8);
          }
          else
          {
            v381 = 0;
          }
          v432 = (unsigned int *)&v381[4 * v377];
          v433 = &v381[4 * v380];
          *v432 = v558;
          v434 = v432 + 1;
          while (v314 != v376)
          {
            v435 = *--v314;
            *--v432 = v435;
          }
LABEL_955:
          *(_QWORD *)a4 = v432;
          *(_QWORD *)(a4 + 8) = v434;
          *(_QWORD *)(a4 + 16) = v433;
          if (v376)
            operator delete(v376);
          goto LABEL_957;
        }
LABEL_959:
        abort();
      }
      v375 = v558;
LABEL_942:
      *v314 = v375;
      v434 = v314 + 1;
LABEL_957:
      *(_QWORD *)(a4 + 8) = v434;
      return;
    case 2:
      v25 = (char **)(a4 + 16);
      v24 = *(char **)(a4 + 16);
      v26 = *(unsigned int **)(a4 + 8);
      if (v26 >= (unsigned int *)v24)
      {
        v62 = *(unsigned int **)a4;
        v63 = ((uint64_t)v26 - *(_QWORD *)a4) >> 2;
        v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62)
          goto LABEL_959;
        v65 = v24 - (char *)v62;
        if (v65 >> 1 > v64)
          v64 = v65 >> 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v66);
          v62 = *(unsigned int **)a4;
          v26 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v67 = 0;
        }
        v119 = (unsigned int *)&v67[4 * v63];
        v24 = &v67[4 * v66];
        *v119 = v8;
        v27 = v119 + 1;
        while (v26 != v62)
        {
          v120 = *--v26;
          *--v119 = v120;
        }
        *(_QWORD *)a4 = v119;
        *(_QWORD *)(a4 + 8) = v27;
        *(_QWORD *)(a4 + 16) = v24;
        if (v62)
        {
          operator delete(v62);
          v24 = *v25;
        }
      }
      else
      {
        *v26 = v8;
        v27 = v26 + 1;
      }
      *(_QWORD *)(a4 + 8) = v27;
      if (v27 >= (unsigned int *)v24)
      {
        v122 = *(unsigned int **)a4;
        v123 = ((uint64_t)v27 - *(_QWORD *)a4) >> 2;
        v124 = v123 + 1;
        if ((unint64_t)(v123 + 1) >> 62)
          goto LABEL_959;
        v125 = v24 - (char *)v122;
        if (v125 >> 1 > v124)
          v124 = v125 >> 1;
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
          v126 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v126 = v124;
        if (v126)
        {
          v127 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v126);
          v122 = *(unsigned int **)a4;
          v27 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v127 = 0;
        }
        v191 = (unsigned int *)&v127[4 * v123];
        v24 = &v127[4 * v126];
        *v191 = v557;
        v121 = v191 + 1;
        while (v27 != v122)
        {
          v192 = *--v27;
          *--v191 = v192;
        }
        *(_QWORD *)a4 = v191;
        *(_QWORD *)(a4 + 8) = v121;
        *(_QWORD *)(a4 + 16) = v24;
        if (v122)
        {
          operator delete(v122);
          v24 = *v25;
        }
      }
      else
      {
        *v27 = v557;
        v121 = v27 + 1;
      }
      *(_QWORD *)(a4 + 8) = v121;
      if (v121 >= (unsigned int *)v24)
      {
        v194 = *(unsigned int **)a4;
        v195 = ((uint64_t)v121 - *(_QWORD *)a4) >> 2;
        v196 = v195 + 1;
        if ((unint64_t)(v195 + 1) >> 62)
          goto LABEL_959;
        v197 = v24 - (char *)v194;
        if (v197 >> 1 > v196)
          v196 = v197 >> 1;
        if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
          v198 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v198 = v196;
        if (v198)
        {
          v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v198);
          v194 = *(unsigned int **)a4;
          v121 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v199 = 0;
        }
        v258 = &v199[4 * v195];
        v24 = &v199[4 * v198];
        *(_DWORD *)v258 = a1[2];
        v193 = (unsigned int *)(v258 + 4);
        while (v121 != v194)
        {
          v259 = *--v121;
          *((_DWORD *)v258 - 1) = v259;
          v258 -= 4;
        }
        *(_QWORD *)a4 = v258;
        *(_QWORD *)(a4 + 8) = v193;
        *(_QWORD *)(a4 + 16) = v24;
        if (v194)
        {
          operator delete(v194);
          v24 = *v25;
        }
      }
      else
      {
        *v121 = a1[2];
        v193 = v121 + 1;
      }
      *(_QWORD *)(a4 + 8) = v193;
      if (v193 >= (unsigned int *)v24)
      {
        v261 = *(unsigned int **)a4;
        v262 = ((uint64_t)v193 - *(_QWORD *)a4) >> 2;
        v263 = v262 + 1;
        if ((unint64_t)(v262 + 1) >> 62)
          goto LABEL_959;
        v264 = v24 - (char *)v261;
        if (v264 >> 1 > v263)
          v263 = v264 >> 1;
        if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFFCLL)
          v265 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v265 = v263;
        if (v265)
        {
          v266 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v265);
          v261 = *(unsigned int **)a4;
          v193 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v266 = 0;
        }
        v321 = (unsigned int *)&v266[4 * v262];
        v24 = &v266[4 * v265];
        *v321 = *a1;
        v260 = v321 + 1;
        while (v193 != v261)
        {
          v322 = *--v193;
          *--v321 = v322;
        }
        *(_QWORD *)a4 = v321;
        *(_QWORD *)(a4 + 8) = v260;
        *(_QWORD *)(a4 + 16) = v24;
        if (v261)
        {
          operator delete(v261);
          v24 = *v25;
        }
      }
      else
      {
        *v193 = *a1;
        v260 = v193 + 1;
      }
      *(_QWORD *)(a4 + 8) = v260;
      if (v260 >= (unsigned int *)v24)
      {
        v323 = *(unsigned int **)a4;
        v324 = ((uint64_t)v260 - *(_QWORD *)a4) >> 2;
        v325 = v324 + 1;
        if ((unint64_t)(v324 + 1) >> 62)
          goto LABEL_959;
        v326 = v24 - (char *)v323;
        if (v326 >> 1 > v325)
          v325 = v326 >> 1;
        if ((unint64_t)v326 >= 0x7FFFFFFFFFFFFFFCLL)
          v327 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v327 = v325;
        if (v327)
        {
          v328 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v327);
          v323 = *(unsigned int **)a4;
          v260 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v328 = 0;
        }
        v382 = &v328[4 * v324];
        v24 = &v328[4 * v327];
        *(_DWORD *)v382 = a1[1];
        v314 = (unsigned int *)(v382 + 4);
        while (v260 != v323)
        {
          v383 = *--v260;
          *((_DWORD *)v382 - 1) = v383;
          v382 -= 4;
        }
        *(_QWORD *)a4 = v382;
        *(_QWORD *)(a4 + 8) = v314;
        *(_QWORD *)(a4 + 16) = v24;
        if (v323)
        {
          operator delete(v323);
          v24 = *v25;
        }
      }
      else
      {
        *v260 = a1[1];
        v314 = v260 + 1;
      }
      *(_QWORD *)(a4 + 8) = v314;
      if (v314 < (unsigned int *)v24)
      {
        v375 = v557;
        goto LABEL_942;
      }
      v376 = *(unsigned int **)a4;
      v384 = ((uint64_t)v314 - *(_QWORD *)a4) >> 2;
      v385 = v384 + 1;
      if (!((unint64_t)(v384 + 1) >> 62))
      {
        v386 = v24 - (char *)v376;
        if (v386 >> 1 > v385)
          v385 = v386 >> 1;
        if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFFCLL)
          v387 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v387 = v385;
        if (v387)
        {
          v388 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v387);
          v376 = *(unsigned int **)a4;
          v314 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v388 = 0;
        }
        v432 = (unsigned int *)&v388[4 * v384];
        v433 = &v388[4 * v387];
        *v432 = v557;
        v434 = v432 + 1;
        while (v314 != v376)
        {
          v436 = *--v314;
          *--v432 = v436;
        }
        goto LABEL_955;
      }
      goto LABEL_959;
    case 3:
      v29 = (char **)(a4 + 16);
      v28 = *(char **)(a4 + 16);
      v30 = *(unsigned int **)(a4 + 8);
      if (v30 >= (unsigned int *)v28)
      {
        v68 = *(unsigned int **)a4;
        v69 = ((uint64_t)v30 - *(_QWORD *)a4) >> 2;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 62)
          goto LABEL_959;
        v71 = v28 - (char *)v68;
        if (v71 >> 1 > v70)
          v70 = v71 >> 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
          v72 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v72);
          v68 = *(unsigned int **)a4;
          v30 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v73 = 0;
        }
        v128 = (unsigned int *)&v73[4 * v69];
        v28 = &v73[4 * v72];
        *v128 = v8;
        v31 = v128 + 1;
        while (v30 != v68)
        {
          v129 = *--v30;
          *--v128 = v129;
        }
        *(_QWORD *)a4 = v128;
        *(_QWORD *)(a4 + 8) = v31;
        *(_QWORD *)(a4 + 16) = v28;
        if (v68)
        {
          operator delete(v68);
          v28 = *v29;
        }
      }
      else
      {
        *v30 = v8;
        v31 = v30 + 1;
      }
      *(_QWORD *)(a4 + 8) = v31;
      if (v31 >= (unsigned int *)v28)
      {
        v131 = *(unsigned int **)a4;
        v132 = ((uint64_t)v31 - *(_QWORD *)a4) >> 2;
        v133 = v132 + 1;
        if ((unint64_t)(v132 + 1) >> 62)
          goto LABEL_959;
        v134 = v28 - (char *)v131;
        if (v134 >> 1 > v133)
          v133 = v134 >> 1;
        if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
          v135 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v135 = v133;
        if (v135)
        {
          v136 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v135);
          v131 = *(unsigned int **)a4;
          v31 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v136 = 0;
        }
        v200 = (unsigned int *)&v136[4 * v132];
        v28 = &v136[4 * v135];
        *v200 = v558;
        v130 = v200 + 1;
        while (v31 != v131)
        {
          v201 = *--v31;
          *--v200 = v201;
        }
        *(_QWORD *)a4 = v200;
        *(_QWORD *)(a4 + 8) = v130;
        *(_QWORD *)(a4 + 16) = v28;
        if (v131)
        {
          operator delete(v131);
          v28 = *v29;
        }
      }
      else
      {
        *v31 = v558;
        v130 = v31 + 1;
      }
      *(_QWORD *)(a4 + 8) = v130;
      if (v130 >= (unsigned int *)v28)
      {
        v203 = *(unsigned int **)a4;
        v204 = ((uint64_t)v130 - *(_QWORD *)a4) >> 2;
        v205 = v204 + 1;
        if ((unint64_t)(v204 + 1) >> 62)
          goto LABEL_959;
        v206 = v28 - (char *)v203;
        if (v206 >> 1 > v205)
          v205 = v206 >> 1;
        if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL)
          v207 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v207 = v205;
        if (v207)
        {
          v208 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v207);
          v203 = *(unsigned int **)a4;
          v130 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v208 = 0;
        }
        v267 = &v208[4 * v204];
        v28 = &v208[4 * v207];
        *(_DWORD *)v267 = a1[2];
        v202 = (unsigned int *)(v267 + 4);
        while (v130 != v203)
        {
          v268 = *--v130;
          *((_DWORD *)v267 - 1) = v268;
          v267 -= 4;
        }
        *(_QWORD *)a4 = v267;
        *(_QWORD *)(a4 + 8) = v202;
        *(_QWORD *)(a4 + 16) = v28;
        if (v203)
        {
          operator delete(v203);
          v28 = *v29;
        }
      }
      else
      {
        *v130 = a1[2];
        v202 = v130 + 1;
      }
      *(_QWORD *)(a4 + 8) = v202;
      if (v202 >= (unsigned int *)v28)
      {
        v270 = *(unsigned int **)a4;
        v271 = ((uint64_t)v202 - *(_QWORD *)a4) >> 2;
        v272 = v271 + 1;
        if ((unint64_t)(v271 + 1) >> 62)
          goto LABEL_959;
        v273 = v28 - (char *)v270;
        if (v273 >> 1 > v272)
          v272 = v273 >> 1;
        if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFFCLL)
          v274 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v274 = v272;
        if (v274)
        {
          v275 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v274);
          v270 = *(unsigned int **)a4;
          v202 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v275 = 0;
        }
        v329 = &v275[4 * v271];
        v28 = &v275[4 * v274];
        *(_DWORD *)v329 = a1[1];
        v269 = (unsigned int *)(v329 + 4);
        while (v202 != v270)
        {
          v330 = *--v202;
          *((_DWORD *)v329 - 1) = v330;
          v329 -= 4;
        }
        *(_QWORD *)a4 = v329;
        *(_QWORD *)(a4 + 8) = v269;
        *(_QWORD *)(a4 + 16) = v28;
        if (v270)
        {
          operator delete(v270);
          v28 = *v29;
        }
      }
      else
      {
        *v202 = a1[1];
        v269 = v202 + 1;
      }
      *(_QWORD *)(a4 + 8) = v269;
      if (v269 >= (unsigned int *)v28)
      {
        v332 = *(unsigned int **)a4;
        v333 = ((uint64_t)v269 - *(_QWORD *)a4) >> 2;
        v334 = v333 + 1;
        if ((unint64_t)(v333 + 1) >> 62)
          goto LABEL_959;
        v335 = v28 - (char *)v332;
        if (v335 >> 1 > v334)
          v334 = v335 >> 1;
        if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFFCLL)
          v336 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v336 = v334;
        if (v336)
        {
          v337 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v336);
          v332 = *(unsigned int **)a4;
          v269 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v337 = 0;
        }
        v389 = (unsigned int *)&v337[4 * v333];
        v28 = &v337[4 * v336];
        *v389 = v557;
        v331 = v389 + 1;
        while (v269 != v332)
        {
          v390 = *--v269;
          *--v389 = v390;
        }
        *(_QWORD *)a4 = v389;
        *(_QWORD *)(a4 + 8) = v331;
        *(_QWORD *)(a4 + 16) = v28;
        if (v332)
        {
          operator delete(v332);
          v28 = *v29;
        }
      }
      else
      {
        *v269 = v557;
        v331 = v269 + 1;
      }
      *(_QWORD *)(a4 + 8) = v331;
      if (v331 >= (unsigned int *)v28)
      {
        v392 = *(unsigned int **)a4;
        v393 = ((uint64_t)v331 - *(_QWORD *)a4) >> 2;
        v394 = v393 + 1;
        if ((unint64_t)(v393 + 1) >> 62)
          goto LABEL_959;
        v395 = v28 - (char *)v392;
        if (v395 >> 1 > v394)
          v394 = v395 >> 1;
        if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFFCLL)
          v396 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v396 = v394;
        if (v396)
        {
          v397 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v396);
          v392 = *(unsigned int **)a4;
          v331 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v397 = 0;
        }
        v437 = (unsigned int *)&v397[4 * v393];
        v28 = &v397[4 * v396];
        *v437 = v558;
        v391 = v437 + 1;
        while (v331 != v392)
        {
          v438 = *--v331;
          *--v437 = v438;
        }
        *(_QWORD *)a4 = v437;
        *(_QWORD *)(a4 + 8) = v391;
        *(_QWORD *)(a4 + 16) = v28;
        if (v392)
        {
          operator delete(v392);
          v28 = *v29;
        }
      }
      else
      {
        *v331 = v558;
        v391 = v331 + 1;
      }
      *(_QWORD *)(a4 + 8) = v391;
      if (v391 >= (unsigned int *)v28)
      {
        v440 = *(unsigned int **)a4;
        v441 = ((uint64_t)v391 - *(_QWORD *)a4) >> 2;
        v442 = v441 + 1;
        if ((unint64_t)(v441 + 1) >> 62)
          goto LABEL_959;
        v443 = v28 - (char *)v440;
        if (v443 >> 1 > v442)
          v442 = v443 >> 1;
        if ((unint64_t)v443 >= 0x7FFFFFFFFFFFFFFCLL)
          v444 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v444 = v442;
        if (v444)
        {
          v445 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v444);
          v440 = *(unsigned int **)a4;
          v391 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v445 = 0;
        }
        v474 = &v445[4 * v441];
        v28 = &v445[4 * v444];
        *(_DWORD *)v474 = a1[2];
        v439 = (unsigned int *)(v474 + 4);
        while (v391 != v440)
        {
          v475 = *--v391;
          *((_DWORD *)v474 - 1) = v475;
          v474 -= 4;
        }
        *(_QWORD *)a4 = v474;
        *(_QWORD *)(a4 + 8) = v439;
        *(_QWORD *)(a4 + 16) = v28;
        if (v440)
        {
          operator delete(v440);
          v28 = *v29;
        }
      }
      else
      {
        *v391 = a1[2];
        v439 = v391 + 1;
      }
      *(_QWORD *)(a4 + 8) = v439;
      if (v439 >= (unsigned int *)v28)
      {
        v476 = *(unsigned int **)a4;
        v477 = ((uint64_t)v439 - *(_QWORD *)a4) >> 2;
        v478 = v477 + 1;
        if ((unint64_t)(v477 + 1) >> 62)
          goto LABEL_959;
        v479 = v28 - (char *)v476;
        if (v479 >> 1 > v478)
          v478 = v479 >> 1;
        if ((unint64_t)v479 >= 0x7FFFFFFFFFFFFFFCLL)
          v480 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v480 = v478;
        if (v480)
        {
          v481 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v480);
          v476 = *(unsigned int **)a4;
          v439 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v481 = 0;
        }
        v507 = (unsigned int *)&v481[4 * v477];
        v28 = &v481[4 * v480];
        *v507 = v558;
        v94 = v507 + 1;
        while (v439 != v476)
        {
          v508 = *--v439;
          *--v507 = v508;
        }
        *(_QWORD *)a4 = v507;
        *(_QWORD *)(a4 + 8) = v94;
        *(_QWORD *)(a4 + 16) = v28;
        if (v476)
        {
          operator delete(v476);
          v28 = *v29;
        }
      }
      else
      {
        *v439 = v558;
        v94 = v439 + 1;
      }
      *(_QWORD *)(a4 + 8) = v94;
      if (v94 < (unsigned int *)v28)
        goto LABEL_877;
      v167 = *(unsigned int **)a4;
      v509 = ((uint64_t)v94 - *(_QWORD *)a4) >> 2;
      v510 = v509 + 1;
      if (!((unint64_t)(v509 + 1) >> 62))
      {
        v511 = v28 - (char *)v167;
        if (v511 >> 1 > v510)
          v510 = v511 >> 1;
        if ((unint64_t)v511 >= 0x7FFFFFFFFFFFFFFCLL)
          v512 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v512 = v510;
        if (v512)
        {
          v513 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v512);
          v167 = *(unsigned int **)a4;
          v94 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v513 = 0;
        }
        v236 = (unsigned int *)&v513[4 * v509];
        v237 = &v513[4 * v512];
        *v236 = v557;
        v238 = v236 + 1;
        while (v94 != v167)
        {
          v537 = *--v94;
          *--v236 = v537;
        }
        goto LABEL_915;
      }
      goto LABEL_959;
    case 4:
      v33 = (char **)(a4 + 16);
      v32 = *(char **)(a4 + 16);
      v34 = *(unsigned int **)(a4 + 8);
      if (v34 >= (unsigned int *)v32)
      {
        v74 = *(unsigned int **)a4;
        v75 = ((uint64_t)v34 - *(_QWORD *)a4) >> 2;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62)
          goto LABEL_959;
        v77 = v32 - (char *)v74;
        if (v77 >> 1 > v76)
          v76 = v77 >> 1;
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
          v78 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v78 = v76;
        if (v78)
        {
          v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v78);
          v74 = *(unsigned int **)a4;
          v34 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v79 = 0;
        }
        v137 = (unsigned int *)&v79[4 * v75];
        v32 = &v79[4 * v78];
        *v137 = v8;
        v35 = v137 + 1;
        while (v34 != v74)
        {
          v138 = *--v34;
          *--v137 = v138;
        }
        *(_QWORD *)a4 = v137;
        *(_QWORD *)(a4 + 8) = v35;
        *(_QWORD *)(a4 + 16) = v32;
        if (v74)
        {
          operator delete(v74);
          v32 = *v33;
        }
      }
      else
      {
        *v34 = v8;
        v35 = v34 + 1;
      }
      *(_QWORD *)(a4 + 8) = v35;
      if (v35 >= (unsigned int *)v32)
      {
        v140 = *(unsigned int **)a4;
        v141 = ((uint64_t)v35 - *(_QWORD *)a4) >> 2;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 62)
          goto LABEL_959;
        v143 = v32 - (char *)v140;
        if (v143 >> 1 > v142)
          v142 = v143 >> 1;
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
          v144 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v144 = v142;
        if (v144)
        {
          v145 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v144);
          v140 = *(unsigned int **)a4;
          v35 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v145 = 0;
        }
        v209 = &v145[4 * v141];
        v32 = &v145[4 * v144];
        *(_DWORD *)v209 = a1[1];
        v139 = (unsigned int *)(v209 + 4);
        while (v35 != v140)
        {
          v210 = *--v35;
          *((_DWORD *)v209 - 1) = v210;
          v209 -= 4;
        }
        *(_QWORD *)a4 = v209;
        *(_QWORD *)(a4 + 8) = v139;
        *(_QWORD *)(a4 + 16) = v32;
        if (v140)
        {
          operator delete(v140);
          v32 = *v33;
        }
      }
      else
      {
        *v35 = a1[1];
        v139 = v35 + 1;
      }
      *(_QWORD *)(a4 + 8) = v139;
      if (v139 >= (unsigned int *)v32)
      {
        v212 = *(unsigned int **)a4;
        v213 = ((uint64_t)v139 - *(_QWORD *)a4) >> 2;
        v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 62)
          goto LABEL_959;
        v215 = v32 - (char *)v212;
        if (v215 >> 1 > v214)
          v214 = v215 >> 1;
        if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
          v216 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v216 = v214;
        if (v216)
        {
          v217 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v216);
          v212 = *(unsigned int **)a4;
          v139 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v217 = 0;
        }
        v276 = (unsigned int *)&v217[4 * v213];
        v32 = &v217[4 * v216];
        *v276 = v556;
        v211 = v276 + 1;
        while (v139 != v212)
        {
          v277 = *--v139;
          *--v276 = v277;
        }
        *(_QWORD *)a4 = v276;
        *(_QWORD *)(a4 + 8) = v211;
        *(_QWORD *)(a4 + 16) = v32;
        if (v212)
        {
          operator delete(v212);
          v32 = *v33;
        }
      }
      else
      {
        *v139 = v556;
        v211 = v139 + 1;
      }
      *(_QWORD *)(a4 + 8) = v211;
      if (v211 >= (unsigned int *)v32)
      {
        v279 = *(unsigned int **)a4;
        v280 = ((uint64_t)v211 - *(_QWORD *)a4) >> 2;
        v281 = v280 + 1;
        if ((unint64_t)(v280 + 1) >> 62)
          goto LABEL_959;
        v282 = v32 - (char *)v279;
        if (v282 >> 1 > v281)
          v281 = v282 >> 1;
        if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFFCLL)
          v283 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v283 = v281;
        if (v283)
        {
          v284 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v283);
          v279 = *(unsigned int **)a4;
          v211 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v284 = 0;
        }
        v338 = &v284[4 * v280];
        v32 = &v284[4 * v283];
        *(_DWORD *)v338 = a1[1];
        v278 = (unsigned int *)(v338 + 4);
        while (v211 != v279)
        {
          v339 = *--v211;
          *((_DWORD *)v338 - 1) = v339;
          v338 -= 4;
        }
        *(_QWORD *)a4 = v338;
        *(_QWORD *)(a4 + 8) = v278;
        *(_QWORD *)(a4 + 16) = v32;
        if (v279)
        {
          operator delete(v279);
          v32 = *v33;
        }
      }
      else
      {
        *v211 = a1[1];
        v278 = v211 + 1;
      }
      *(_QWORD *)(a4 + 8) = v278;
      if (v278 >= (unsigned int *)v32)
      {
        v340 = *(unsigned int **)a4;
        v341 = ((uint64_t)v278 - *(_QWORD *)a4) >> 2;
        v342 = v341 + 1;
        if ((unint64_t)(v341 + 1) >> 62)
          goto LABEL_959;
        v343 = v32 - (char *)v340;
        if (v343 >> 1 > v342)
          v342 = v343 >> 1;
        if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFFCLL)
          v344 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v344 = v342;
        if (v344)
        {
          v345 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v344);
          v340 = *(unsigned int **)a4;
          v278 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v345 = 0;
        }
        v398 = &v345[4 * v341];
        v32 = &v345[4 * v344];
        *(_DWORD *)v398 = a1[2];
        v314 = (unsigned int *)(v398 + 4);
        while (v278 != v340)
        {
          v399 = *--v278;
          *((_DWORD *)v398 - 1) = v399;
          v398 -= 4;
        }
        *(_QWORD *)a4 = v398;
        *(_QWORD *)(a4 + 8) = v314;
        *(_QWORD *)(a4 + 16) = v32;
        if (v340)
        {
          operator delete(v340);
          v32 = *v33;
        }
      }
      else
      {
        *v278 = a1[2];
        v314 = v278 + 1;
      }
      *(_QWORD *)(a4 + 8) = v314;
      if (v314 < (unsigned int *)v32)
        goto LABEL_941;
      v376 = *(unsigned int **)a4;
      v400 = ((uint64_t)v314 - *(_QWORD *)a4) >> 2;
      v401 = v400 + 1;
      if (!((unint64_t)(v400 + 1) >> 62))
      {
        v402 = v32 - (char *)v376;
        if (v402 >> 1 > v401)
          v401 = v402 >> 1;
        if ((unint64_t)v402 >= 0x7FFFFFFFFFFFFFFCLL)
          v403 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v403 = v401;
        if (v403)
        {
          v404 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v403);
          v376 = *(unsigned int **)a4;
          v314 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v404 = 0;
        }
        v432 = (unsigned int *)&v404[4 * v400];
        v433 = &v404[4 * v403];
        *v432 = v556;
        v434 = v432 + 1;
        while (v314 != v376)
        {
          v446 = *--v314;
          *--v432 = v446;
        }
        goto LABEL_955;
      }
      goto LABEL_959;
    case 5:
      v37 = (char **)(a4 + 16);
      v36 = *(char **)(a4 + 16);
      v38 = *(unsigned int **)(a4 + 8);
      if (v38 >= (unsigned int *)v36)
      {
        v80 = *(unsigned int **)a4;
        v81 = ((uint64_t)v38 - *(_QWORD *)a4) >> 2;
        v82 = v81 + 1;
        if ((unint64_t)(v81 + 1) >> 62)
          goto LABEL_959;
        v83 = v36 - (char *)v80;
        if (v83 >> 1 > v82)
          v82 = v83 >> 1;
        if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
          v84 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v84 = v82;
        if (v84)
        {
          v85 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v84);
          v80 = *(unsigned int **)a4;
          v38 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v85 = 0;
        }
        v146 = (unsigned int *)&v85[4 * v81];
        v36 = &v85[4 * v84];
        *v146 = v8;
        v39 = v146 + 1;
        while (v38 != v80)
        {
          v147 = *--v38;
          *--v146 = v147;
        }
        *(_QWORD *)a4 = v146;
        *(_QWORD *)(a4 + 8) = v39;
        *(_QWORD *)(a4 + 16) = v36;
        if (v80)
        {
          operator delete(v80);
          v36 = *v37;
        }
      }
      else
      {
        *v38 = v8;
        v39 = v38 + 1;
      }
      *(_QWORD *)(a4 + 8) = v39;
      if (v39 >= (unsigned int *)v36)
      {
        v149 = *(unsigned int **)a4;
        v150 = ((uint64_t)v39 - *(_QWORD *)a4) >> 2;
        v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 62)
          goto LABEL_959;
        v152 = v36 - (char *)v149;
        if (v152 >> 1 > v151)
          v151 = v152 >> 1;
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
          v153 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v153 = v151;
        if (v153)
        {
          v154 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v153);
          v149 = *(unsigned int **)a4;
          v39 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v154 = 0;
        }
        v218 = (unsigned int *)&v154[4 * v150];
        v36 = &v154[4 * v153];
        *v218 = v558;
        v148 = v218 + 1;
        while (v39 != v149)
        {
          v219 = *--v39;
          *--v218 = v219;
        }
        *(_QWORD *)a4 = v218;
        *(_QWORD *)(a4 + 8) = v148;
        *(_QWORD *)(a4 + 16) = v36;
        if (v149)
        {
          operator delete(v149);
          v36 = *v37;
        }
      }
      else
      {
        *v39 = v558;
        v148 = v39 + 1;
      }
      *(_QWORD *)(a4 + 8) = v148;
      if (v148 >= (unsigned int *)v36)
      {
        v221 = *(unsigned int **)a4;
        v222 = ((uint64_t)v148 - *(_QWORD *)a4) >> 2;
        v223 = v222 + 1;
        if ((unint64_t)(v222 + 1) >> 62)
          goto LABEL_959;
        v224 = v36 - (char *)v221;
        if (v224 >> 1 > v223)
          v223 = v224 >> 1;
        if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL)
          v225 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v225 = v223;
        if (v225)
        {
          v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v225);
          v221 = *(unsigned int **)a4;
          v148 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v226 = 0;
        }
        v285 = (unsigned int *)&v226[4 * v222];
        v36 = &v226[4 * v225];
        *v285 = v556;
        v220 = v285 + 1;
        while (v148 != v221)
        {
          v286 = *--v148;
          *--v285 = v286;
        }
        *(_QWORD *)a4 = v285;
        *(_QWORD *)(a4 + 8) = v220;
        *(_QWORD *)(a4 + 16) = v36;
        if (v221)
        {
          operator delete(v221);
          v36 = *v37;
        }
      }
      else
      {
        *v148 = v556;
        v220 = v148 + 1;
      }
      *(_QWORD *)(a4 + 8) = v220;
      if (v220 >= (unsigned int *)v36)
      {
        v288 = *(unsigned int **)a4;
        v289 = ((uint64_t)v220 - *(_QWORD *)a4) >> 2;
        v290 = v289 + 1;
        if ((unint64_t)(v289 + 1) >> 62)
          goto LABEL_959;
        v291 = v36 - (char *)v288;
        if (v291 >> 1 > v290)
          v290 = v291 >> 1;
        if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFFCLL)
          v292 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v292 = v290;
        if (v292)
        {
          v293 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v292);
          v288 = *(unsigned int **)a4;
          v220 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v293 = 0;
        }
        v346 = &v293[4 * v289];
        v36 = &v293[4 * v292];
        *(_DWORD *)v346 = a1[1];
        v287 = (unsigned int *)(v346 + 4);
        while (v220 != v288)
        {
          v347 = *--v220;
          *((_DWORD *)v346 - 1) = v347;
          v346 -= 4;
        }
        *(_QWORD *)a4 = v346;
        *(_QWORD *)(a4 + 8) = v287;
        *(_QWORD *)(a4 + 16) = v36;
        if (v288)
        {
          operator delete(v288);
          v36 = *v37;
        }
      }
      else
      {
        *v220 = a1[1];
        v287 = v220 + 1;
      }
      *(_QWORD *)(a4 + 8) = v287;
      if (v287 >= (unsigned int *)v36)
      {
        v349 = *(unsigned int **)a4;
        v350 = ((uint64_t)v287 - *(_QWORD *)a4) >> 2;
        v351 = v350 + 1;
        if ((unint64_t)(v350 + 1) >> 62)
          goto LABEL_959;
        v352 = v36 - (char *)v349;
        if (v352 >> 1 > v351)
          v351 = v352 >> 1;
        if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFFCLL)
          v353 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v353 = v351;
        if (v353)
        {
          v354 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v353);
          v349 = *(unsigned int **)a4;
          v287 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v354 = 0;
        }
        v405 = (unsigned int *)&v354[4 * v350];
        v36 = &v354[4 * v353];
        *v405 = v556;
        v348 = v405 + 1;
        while (v287 != v349)
        {
          v406 = *--v287;
          *--v405 = v406;
        }
        *(_QWORD *)a4 = v405;
        *(_QWORD *)(a4 + 8) = v348;
        *(_QWORD *)(a4 + 16) = v36;
        if (v349)
        {
          operator delete(v349);
          v36 = *v37;
        }
      }
      else
      {
        *v287 = v556;
        v348 = v287 + 1;
      }
      *(_QWORD *)(a4 + 8) = v348;
      if (v348 >= (unsigned int *)v36)
      {
        v408 = *(unsigned int **)a4;
        v409 = ((uint64_t)v348 - *(_QWORD *)a4) >> 2;
        v410 = v409 + 1;
        if ((unint64_t)(v409 + 1) >> 62)
          goto LABEL_959;
        v411 = v36 - (char *)v408;
        if (v411 >> 1 > v410)
          v410 = v411 >> 1;
        if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFFCLL)
          v412 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v412 = v410;
        if (v412)
        {
          v413 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v412);
          v408 = *(unsigned int **)a4;
          v348 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v413 = 0;
        }
        v447 = (unsigned int *)&v413[4 * v409];
        v36 = &v413[4 * v412];
        *v447 = v558;
        v407 = v447 + 1;
        while (v348 != v408)
        {
          v448 = *--v348;
          *--v447 = v448;
        }
        *(_QWORD *)a4 = v447;
        *(_QWORD *)(a4 + 8) = v407;
        *(_QWORD *)(a4 + 16) = v36;
        if (v408)
        {
          operator delete(v408);
          v36 = *v37;
        }
      }
      else
      {
        *v348 = v558;
        v407 = v348 + 1;
      }
      *(_QWORD *)(a4 + 8) = v407;
      if (v407 >= (unsigned int *)v36)
      {
        v450 = *(unsigned int **)a4;
        v451 = ((uint64_t)v407 - *(_QWORD *)a4) >> 2;
        v452 = v451 + 1;
        if ((unint64_t)(v451 + 1) >> 62)
          goto LABEL_959;
        v453 = v36 - (char *)v450;
        if (v453 >> 1 > v452)
          v452 = v453 >> 1;
        if ((unint64_t)v453 >= 0x7FFFFFFFFFFFFFFCLL)
          v454 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v454 = v452;
        if (v454)
        {
          v455 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v454);
          v450 = *(unsigned int **)a4;
          v407 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v455 = 0;
        }
        v482 = &v455[4 * v451];
        v36 = &v455[4 * v454];
        *(_DWORD *)v482 = a1[1];
        v449 = (unsigned int *)(v482 + 4);
        while (v407 != v450)
        {
          v483 = *--v407;
          *((_DWORD *)v482 - 1) = v483;
          v482 -= 4;
        }
        *(_QWORD *)a4 = v482;
        *(_QWORD *)(a4 + 8) = v449;
        *(_QWORD *)(a4 + 16) = v36;
        if (v450)
        {
          operator delete(v450);
          v36 = *v37;
        }
      }
      else
      {
        *v407 = a1[1];
        v449 = v407 + 1;
      }
      *(_QWORD *)(a4 + 8) = v449;
      if (v449 >= (unsigned int *)v36)
      {
        v484 = *(unsigned int **)a4;
        v485 = ((uint64_t)v449 - *(_QWORD *)a4) >> 2;
        v486 = v485 + 1;
        if ((unint64_t)(v485 + 1) >> 62)
          goto LABEL_959;
        v487 = v36 - (char *)v484;
        if (v487 >> 1 > v486)
          v486 = v487 >> 1;
        if ((unint64_t)v487 >= 0x7FFFFFFFFFFFFFFCLL)
          v488 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v488 = v486;
        if (v488)
        {
          v489 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v488);
          v484 = *(unsigned int **)a4;
          v449 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v489 = 0;
        }
        v514 = &v489[4 * v485];
        v36 = &v489[4 * v488];
        *(_DWORD *)v514 = a1[2];
        v314 = (unsigned int *)(v514 + 4);
        while (v449 != v484)
        {
          v515 = *--v449;
          *((_DWORD *)v514 - 1) = v515;
          v514 -= 4;
        }
        *(_QWORD *)a4 = v514;
        *(_QWORD *)(a4 + 8) = v314;
        *(_QWORD *)(a4 + 16) = v36;
        if (v484)
        {
          operator delete(v484);
          v36 = *v37;
        }
      }
      else
      {
        *v449 = a1[2];
        v314 = v449 + 1;
      }
      *(_QWORD *)(a4 + 8) = v314;
      if (v314 < (unsigned int *)v36)
        goto LABEL_941;
      v376 = *(unsigned int **)a4;
      v516 = ((uint64_t)v314 - *(_QWORD *)a4) >> 2;
      v517 = v516 + 1;
      if (!((unint64_t)(v516 + 1) >> 62))
      {
        v518 = v36 - (char *)v376;
        if (v518 >> 1 > v517)
          v517 = v518 >> 1;
        if ((unint64_t)v518 >= 0x7FFFFFFFFFFFFFFCLL)
          v519 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v519 = v517;
        if (v519)
        {
          v520 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v519);
          v376 = *(unsigned int **)a4;
          v314 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v520 = 0;
        }
        v432 = (unsigned int *)&v520[4 * v516];
        v433 = &v520[4 * v519];
        *v432 = v556;
        v434 = v432 + 1;
        while (v314 != v376)
        {
          v538 = *--v314;
          *--v432 = v538;
        }
        goto LABEL_955;
      }
      goto LABEL_959;
    case 6:
      v41 = (char **)(a4 + 16);
      v40 = *(char **)(a4 + 16);
      v42 = *(unsigned int **)(a4 + 8);
      if (v42 >= (unsigned int *)v40)
      {
        v86 = *(unsigned int **)a4;
        v87 = ((uint64_t)v42 - *(_QWORD *)a4) >> 2;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 62)
          goto LABEL_959;
        v89 = v40 - (char *)v86;
        if (v89 >> 1 > v88)
          v88 = v89 >> 1;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
          v90 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          v91 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v90);
          v86 = *(unsigned int **)a4;
          v42 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v91 = 0;
        }
        v155 = (unsigned int *)&v91[4 * v87];
        v40 = &v91[4 * v90];
        *v155 = v8;
        v43 = v155 + 1;
        while (v42 != v86)
        {
          v156 = *--v42;
          *--v155 = v156;
        }
        *(_QWORD *)a4 = v155;
        *(_QWORD *)(a4 + 8) = v43;
        *(_QWORD *)(a4 + 16) = v40;
        if (v86)
        {
          operator delete(v86);
          v40 = *v41;
        }
      }
      else
      {
        *v42 = v8;
        v43 = v42 + 1;
      }
      *(_QWORD *)(a4 + 8) = v43;
      if (v43 >= (unsigned int *)v40)
      {
        v158 = *(unsigned int **)a4;
        v159 = ((uint64_t)v43 - *(_QWORD *)a4) >> 2;
        v160 = v159 + 1;
        if ((unint64_t)(v159 + 1) >> 62)
          goto LABEL_959;
        v161 = v40 - (char *)v158;
        if (v161 >> 1 > v160)
          v160 = v161 >> 1;
        if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
          v162 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v162 = v160;
        if (v162)
        {
          v163 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v162);
          v158 = *(unsigned int **)a4;
          v43 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v163 = 0;
        }
        v227 = &v163[4 * v159];
        v40 = &v163[4 * v162];
        *(_DWORD *)v227 = a1[1];
        v157 = (unsigned int *)(v227 + 4);
        while (v43 != v158)
        {
          v228 = *--v43;
          *((_DWORD *)v227 - 1) = v228;
          v227 -= 4;
        }
        *(_QWORD *)a4 = v227;
        *(_QWORD *)(a4 + 8) = v157;
        *(_QWORD *)(a4 + 16) = v40;
        if (v158)
        {
          operator delete(v158);
          v40 = *v41;
        }
      }
      else
      {
        *v43 = a1[1];
        v157 = v43 + 1;
      }
      *(_QWORD *)(a4 + 8) = v157;
      if (v157 >= (unsigned int *)v40)
      {
        v230 = *(unsigned int **)a4;
        v231 = ((uint64_t)v157 - *(_QWORD *)a4) >> 2;
        v232 = v231 + 1;
        if ((unint64_t)(v231 + 1) >> 62)
          goto LABEL_959;
        v233 = v40 - (char *)v230;
        if (v233 >> 1 > v232)
          v232 = v233 >> 1;
        if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL)
          v234 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v234 = v232;
        if (v234)
        {
          v235 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v234);
          v230 = *(unsigned int **)a4;
          v157 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v235 = 0;
        }
        v294 = (unsigned int *)&v235[4 * v231];
        v40 = &v235[4 * v234];
        *v294 = v557;
        v229 = v294 + 1;
        while (v157 != v230)
        {
          v295 = *--v157;
          *--v294 = v295;
        }
        *(_QWORD *)a4 = v294;
        *(_QWORD *)(a4 + 8) = v229;
        *(_QWORD *)(a4 + 16) = v40;
        if (v230)
        {
          operator delete(v230);
          v40 = *v41;
        }
      }
      else
      {
        *v157 = v557;
        v229 = v157 + 1;
      }
      *(_QWORD *)(a4 + 8) = v229;
      if (v229 >= (unsigned int *)v40)
      {
        v297 = *(unsigned int **)a4;
        v298 = ((uint64_t)v229 - *(_QWORD *)a4) >> 2;
        v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 62)
          goto LABEL_959;
        v300 = v40 - (char *)v297;
        if (v300 >> 1 > v299)
          v299 = v300 >> 1;
        if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL)
          v301 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v301 = v299;
        if (v301)
        {
          v302 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v301);
          v297 = *(unsigned int **)a4;
          v229 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v302 = 0;
        }
        v355 = (unsigned int *)&v302[4 * v298];
        v40 = &v302[4 * v301];
        *v355 = *a1;
        v296 = v355 + 1;
        while (v229 != v297)
        {
          v356 = *--v229;
          *--v355 = v356;
        }
        *(_QWORD *)a4 = v355;
        *(_QWORD *)(a4 + 8) = v296;
        *(_QWORD *)(a4 + 16) = v40;
        if (v297)
        {
          operator delete(v297);
          v40 = *v41;
        }
      }
      else
      {
        *v229 = *a1;
        v296 = v229 + 1;
      }
      *(_QWORD *)(a4 + 8) = v296;
      if (v296 >= (unsigned int *)v40)
      {
        v358 = *(unsigned int **)a4;
        v359 = ((uint64_t)v296 - *(_QWORD *)a4) >> 2;
        v360 = v359 + 1;
        if ((unint64_t)(v359 + 1) >> 62)
          goto LABEL_959;
        v361 = v40 - (char *)v358;
        if (v361 >> 1 > v360)
          v360 = v361 >> 1;
        if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFFCLL)
          v362 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v362 = v360;
        if (v362)
        {
          v363 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v362);
          v358 = *(unsigned int **)a4;
          v296 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v363 = 0;
        }
        v414 = (unsigned int *)&v363[4 * v359];
        v40 = &v363[4 * v362];
        *v414 = v557;
        v357 = v414 + 1;
        while (v296 != v358)
        {
          v415 = *--v296;
          *--v414 = v415;
        }
        *(_QWORD *)a4 = v414;
        *(_QWORD *)(a4 + 8) = v357;
        *(_QWORD *)(a4 + 16) = v40;
        if (v358)
        {
          operator delete(v358);
          v40 = *v41;
        }
      }
      else
      {
        *v296 = v557;
        v357 = v296 + 1;
      }
      *(_QWORD *)(a4 + 8) = v357;
      if (v357 >= (unsigned int *)v40)
      {
        v417 = *(unsigned int **)a4;
        v418 = ((uint64_t)v357 - *(_QWORD *)a4) >> 2;
        v419 = v418 + 1;
        if ((unint64_t)(v418 + 1) >> 62)
          goto LABEL_959;
        v420 = v40 - (char *)v417;
        if (v420 >> 1 > v419)
          v419 = v420 >> 1;
        if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL)
          v421 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v421 = v419;
        if (v421)
        {
          v422 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v421);
          v417 = *(unsigned int **)a4;
          v357 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v422 = 0;
        }
        v456 = (unsigned int *)&v422[4 * v418];
        v40 = &v422[4 * v421];
        *v456 = v556;
        v416 = v456 + 1;
        while (v357 != v417)
        {
          v457 = *--v357;
          *--v456 = v457;
        }
        *(_QWORD *)a4 = v456;
        *(_QWORD *)(a4 + 8) = v416;
        *(_QWORD *)(a4 + 16) = v40;
        if (v417)
        {
          operator delete(v417);
          v40 = *v41;
        }
      }
      else
      {
        *v357 = v556;
        v416 = v357 + 1;
      }
      *(_QWORD *)(a4 + 8) = v416;
      if (v416 >= (unsigned int *)v40)
      {
        v459 = *(unsigned int **)a4;
        v460 = ((uint64_t)v416 - *(_QWORD *)a4) >> 2;
        v461 = v460 + 1;
        if ((unint64_t)(v460 + 1) >> 62)
          goto LABEL_959;
        v462 = v40 - (char *)v459;
        if (v462 >> 1 > v461)
          v461 = v462 >> 1;
        if ((unint64_t)v462 >= 0x7FFFFFFFFFFFFFFCLL)
          v463 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v463 = v461;
        if (v463)
        {
          v464 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v463);
          v459 = *(unsigned int **)a4;
          v416 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v464 = 0;
        }
        v490 = &v464[4 * v460];
        v40 = &v464[4 * v463];
        *(_DWORD *)v490 = a1[2];
        v458 = (unsigned int *)(v490 + 4);
        while (v416 != v459)
        {
          v491 = *--v416;
          *((_DWORD *)v490 - 1) = v491;
          v490 -= 4;
        }
        *(_QWORD *)a4 = v490;
        *(_QWORD *)(a4 + 8) = v458;
        *(_QWORD *)(a4 + 16) = v40;
        if (v459)
        {
          operator delete(v459);
          v40 = *v41;
        }
      }
      else
      {
        *v416 = a1[2];
        v458 = v416 + 1;
      }
      *(_QWORD *)(a4 + 8) = v458;
      if (v458 >= (unsigned int *)v40)
      {
        v492 = *(unsigned int **)a4;
        v493 = ((uint64_t)v458 - *(_QWORD *)a4) >> 2;
        v494 = v493 + 1;
        if ((unint64_t)(v493 + 1) >> 62)
          goto LABEL_959;
        v495 = v40 - (char *)v492;
        if (v495 >> 1 > v494)
          v494 = v495 >> 1;
        if ((unint64_t)v495 >= 0x7FFFFFFFFFFFFFFCLL)
          v496 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v496 = v494;
        if (v496)
        {
          v497 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v496);
          v492 = *(unsigned int **)a4;
          v458 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v497 = 0;
        }
        v521 = (unsigned int *)&v497[4 * v493];
        v40 = &v497[4 * v496];
        *v521 = v556;
        v94 = v521 + 1;
        while (v458 != v492)
        {
          v522 = *--v458;
          *--v521 = v522;
        }
        *(_QWORD *)a4 = v521;
        *(_QWORD *)(a4 + 8) = v94;
        *(_QWORD *)(a4 + 16) = v40;
        if (v492)
        {
          operator delete(v492);
          v40 = *v41;
        }
      }
      else
      {
        *v458 = v556;
        v94 = v458 + 1;
      }
      *(_QWORD *)(a4 + 8) = v94;
      if (v94 < (unsigned int *)v40)
      {
LABEL_877:
        v166 = v557;
        goto LABEL_878;
      }
      v167 = *(unsigned int **)a4;
      v523 = ((uint64_t)v94 - *(_QWORD *)a4) >> 2;
      v524 = v523 + 1;
      if (!((unint64_t)(v523 + 1) >> 62))
      {
        v525 = v40 - (char *)v167;
        if (v525 >> 1 > v524)
          v524 = v525 >> 1;
        if ((unint64_t)v525 >= 0x7FFFFFFFFFFFFFFCLL)
          v526 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v526 = v524;
        if (v526)
        {
          v527 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v526);
          v167 = *(unsigned int **)a4;
          v94 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v527 = 0;
        }
        v236 = (unsigned int *)&v527[4 * v523];
        v237 = &v527[4 * v526];
        *v236 = v557;
        v238 = v236 + 1;
        while (v94 != v167)
        {
          v539 = *--v94;
          *--v236 = v539;
        }
        goto LABEL_915;
      }
      goto LABEL_959;
    default:
      v17 = (char **)(a4 + 16);
      v16 = *(char **)(a4 + 16);
      v18 = *(unsigned int **)(a4 + 8);
      if (v18 >= (unsigned int *)v16)
      {
        v50 = *(unsigned int **)a4;
        v51 = ((uint64_t)v18 - *(_QWORD *)a4) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          goto LABEL_959;
        v53 = v16 - (char *)v50;
        if (v53 >> 1 > v52)
          v52 = v53 >> 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
        {
          v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v54);
          v50 = *(unsigned int **)a4;
          v18 = *(unsigned int **)(a4 + 8);
          v8 = *a1;
        }
        else
        {
          v55 = 0;
        }
        v101 = (unsigned int *)&v55[4 * v51];
        v16 = &v55[4 * v54];
        *v101 = v8;
        v19 = v101 + 1;
        while (v18 != v50)
        {
          v102 = *--v18;
          *--v101 = v102;
        }
        *(_QWORD *)a4 = v101;
        *(_QWORD *)(a4 + 8) = v19;
        *(_QWORD *)(a4 + 16) = v16;
        if (v50)
        {
          operator delete(v50);
          v16 = *v17;
        }
      }
      else
      {
        *v18 = v8;
        v19 = v18 + 1;
      }
      *(_QWORD *)(a4 + 8) = v19;
      if (v19 >= (unsigned int *)v16)
      {
        v104 = *(unsigned int **)a4;
        v105 = ((uint64_t)v19 - *(_QWORD *)a4) >> 2;
        v106 = v105 + 1;
        if ((unint64_t)(v105 + 1) >> 62)
          goto LABEL_959;
        v107 = v16 - (char *)v104;
        if (v107 >> 1 > v106)
          v106 = v107 >> 1;
        if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
          v108 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v108 = v106;
        if (v108)
        {
          v109 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v108);
          v104 = *(unsigned int **)a4;
          v19 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v109 = 0;
        }
        v173 = (unsigned int *)&v109[4 * v105];
        v16 = &v109[4 * v108];
        *v173 = v558;
        v103 = v173 + 1;
        while (v19 != v104)
        {
          v174 = *--v19;
          *--v173 = v174;
        }
        *(_QWORD *)a4 = v173;
        *(_QWORD *)(a4 + 8) = v103;
        *(_QWORD *)(a4 + 16) = v16;
        if (v104)
        {
          operator delete(v104);
          v16 = *v17;
        }
      }
      else
      {
        *v19 = v558;
        v103 = v19 + 1;
      }
      *(_QWORD *)(a4 + 8) = v103;
      if (v103 >= (unsigned int *)v16)
      {
        v176 = *(unsigned int **)a4;
        v177 = ((uint64_t)v103 - *(_QWORD *)a4) >> 2;
        v178 = v177 + 1;
        if ((unint64_t)(v177 + 1) >> 62)
          goto LABEL_959;
        v179 = v16 - (char *)v176;
        if (v179 >> 1 > v178)
          v178 = v179 >> 1;
        if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
          v180 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v180 = v178;
        if (v180)
        {
          v181 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v180);
          v176 = *(unsigned int **)a4;
          v103 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v181 = 0;
        }
        v240 = (unsigned int *)&v181[4 * v177];
        v16 = &v181[4 * v180];
        *v240 = v556;
        v175 = v240 + 1;
        while (v103 != v176)
        {
          v241 = *--v103;
          *--v240 = v241;
        }
        *(_QWORD *)a4 = v240;
        *(_QWORD *)(a4 + 8) = v175;
        *(_QWORD *)(a4 + 16) = v16;
        if (v176)
        {
          operator delete(v176);
          v16 = *v17;
        }
      }
      else
      {
        *v103 = v556;
        v175 = v103 + 1;
      }
      *(_QWORD *)(a4 + 8) = v175;
      if (v175 >= (unsigned int *)v16)
      {
        v243 = *(unsigned int **)a4;
        v244 = ((uint64_t)v175 - *(_QWORD *)a4) >> 2;
        v245 = v244 + 1;
        if ((unint64_t)(v244 + 1) >> 62)
          goto LABEL_959;
        v246 = v16 - (char *)v243;
        if (v246 >> 1 > v245)
          v245 = v246 >> 1;
        if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL)
          v247 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v247 = v245;
        if (v247)
        {
          v248 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v247);
          v243 = *(unsigned int **)a4;
          v175 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v248 = 0;
        }
        v303 = &v248[4 * v244];
        v16 = &v248[4 * v247];
        *(_DWORD *)v303 = a1[1];
        v242 = (unsigned int *)(v303 + 4);
        while (v175 != v243)
        {
          v304 = *--v175;
          *((_DWORD *)v303 - 1) = v304;
          v303 -= 4;
        }
        *(_QWORD *)a4 = v303;
        *(_QWORD *)(a4 + 8) = v242;
        *(_QWORD *)(a4 + 16) = v16;
        if (v243)
        {
          operator delete(v243);
          v16 = *v17;
        }
      }
      else
      {
        *v175 = a1[1];
        v242 = v175 + 1;
      }
      *(_QWORD *)(a4 + 8) = v242;
      if (v242 >= (unsigned int *)v16)
      {
        v306 = *(unsigned int **)a4;
        v307 = ((uint64_t)v242 - *(_QWORD *)a4) >> 2;
        v308 = v307 + 1;
        if ((unint64_t)(v307 + 1) >> 62)
          goto LABEL_959;
        v309 = v16 - (char *)v306;
        if (v309 >> 1 > v308)
          v308 = v309 >> 1;
        if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFFCLL)
          v310 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v310 = v308;
        if (v310)
        {
          v311 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v310);
          v306 = *(unsigned int **)a4;
          v242 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v311 = 0;
        }
        v364 = (unsigned int *)&v311[4 * v307];
        v16 = &v311[4 * v310];
        *v364 = v557;
        v305 = v364 + 1;
        while (v242 != v306)
        {
          v365 = *--v242;
          *--v364 = v365;
        }
        *(_QWORD *)a4 = v364;
        *(_QWORD *)(a4 + 8) = v305;
        *(_QWORD *)(a4 + 16) = v16;
        if (v306)
        {
          operator delete(v306);
          v16 = *v17;
        }
      }
      else
      {
        *v242 = v557;
        v305 = v242 + 1;
      }
      *(_QWORD *)(a4 + 8) = v305;
      if (v305 >= (unsigned int *)v16)
      {
        v367 = *(unsigned int **)a4;
        v368 = ((uint64_t)v305 - *(_QWORD *)a4) >> 2;
        v369 = v368 + 1;
        if ((unint64_t)(v368 + 1) >> 62)
          goto LABEL_959;
        v370 = v16 - (char *)v367;
        if (v370 >> 1 > v369)
          v369 = v370 >> 1;
        if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFFCLL)
          v371 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v371 = v369;
        if (v371)
        {
          v372 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v371);
          v367 = *(unsigned int **)a4;
          v305 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v372 = 0;
        }
        v423 = (unsigned int *)&v372[4 * v368];
        v16 = &v372[4 * v371];
        *v423 = v558;
        v366 = v423 + 1;
        while (v305 != v367)
        {
          v424 = *--v305;
          *--v423 = v424;
        }
        *(_QWORD *)a4 = v423;
        *(_QWORD *)(a4 + 8) = v366;
        *(_QWORD *)(a4 + 16) = v16;
        if (v367)
        {
          operator delete(v367);
          v16 = *v17;
        }
      }
      else
      {
        *v305 = v558;
        v366 = v305 + 1;
      }
      *(_QWORD *)(a4 + 8) = v366;
      if (v366 >= (unsigned int *)v16)
      {
        v426 = *(unsigned int **)a4;
        v427 = ((uint64_t)v366 - *(_QWORD *)a4) >> 2;
        v428 = v427 + 1;
        if ((unint64_t)(v427 + 1) >> 62)
          goto LABEL_959;
        v429 = v16 - (char *)v426;
        if (v429 >> 1 > v428)
          v428 = v429 >> 1;
        if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFFCLL)
          v430 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v430 = v428;
        if (v430)
        {
          v431 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v430);
          v426 = *(unsigned int **)a4;
          v366 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v431 = 0;
        }
        v465 = &v431[4 * v427];
        v16 = &v431[4 * v430];
        *(_DWORD *)v465 = a1[2];
        v425 = (unsigned int *)(v465 + 4);
        while (v366 != v426)
        {
          v466 = *--v366;
          *((_DWORD *)v465 - 1) = v466;
          v465 -= 4;
        }
        *(_QWORD *)a4 = v465;
        *(_QWORD *)(a4 + 8) = v425;
        *(_QWORD *)(a4 + 16) = v16;
        if (v426)
        {
          operator delete(v426);
          v16 = *v17;
        }
      }
      else
      {
        *v366 = a1[2];
        v425 = v366 + 1;
      }
      *(_QWORD *)(a4 + 8) = v425;
      if (v425 >= (unsigned int *)v16)
      {
        v468 = *(unsigned int **)a4;
        v469 = ((uint64_t)v425 - *(_QWORD *)a4) >> 2;
        v470 = v469 + 1;
        if ((unint64_t)(v469 + 1) >> 62)
          goto LABEL_959;
        v471 = v16 - (char *)v468;
        if (v471 >> 1 > v470)
          v470 = v471 >> 1;
        if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL)
          v472 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v472 = v470;
        if (v472)
        {
          v473 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v472);
          v468 = *(unsigned int **)a4;
          v425 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v473 = 0;
        }
        v498 = (unsigned int *)&v473[4 * v469];
        v16 = &v473[4 * v472];
        *v498 = v556;
        v467 = v498 + 1;
        while (v425 != v468)
        {
          v499 = *--v425;
          *--v498 = v499;
        }
        *(_QWORD *)a4 = v498;
        *(_QWORD *)(a4 + 8) = v467;
        *(_QWORD *)(a4 + 16) = v16;
        if (v468)
        {
          operator delete(v468);
          v16 = *v17;
        }
      }
      else
      {
        *v425 = v556;
        v467 = v425 + 1;
      }
      *(_QWORD *)(a4 + 8) = v467;
      if (v467 >= (unsigned int *)v16)
      {
        v501 = *(unsigned int **)a4;
        v502 = ((uint64_t)v467 - *(_QWORD *)a4) >> 2;
        v503 = v502 + 1;
        if ((unint64_t)(v502 + 1) >> 62)
          goto LABEL_959;
        v504 = v16 - (char *)v501;
        if (v504 >> 1 > v503)
          v503 = v504 >> 1;
        if ((unint64_t)v504 >= 0x7FFFFFFFFFFFFFFCLL)
          v505 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v505 = v503;
        if (v505)
        {
          v506 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v505);
          v501 = *(unsigned int **)a4;
          v467 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v506 = 0;
        }
        v528 = (unsigned int *)&v506[4 * v502];
        v16 = &v506[4 * v505];
        *v528 = v557;
        v500 = v528 + 1;
        while (v467 != v501)
        {
          v529 = *--v467;
          *--v528 = v529;
        }
        *(_QWORD *)a4 = v528;
        *(_QWORD *)(a4 + 8) = v500;
        *(_QWORD *)(a4 + 16) = v16;
        if (v501)
        {
          operator delete(v501);
          v16 = *v17;
        }
      }
      else
      {
        *v467 = v557;
        v500 = v467 + 1;
      }
      *(_QWORD *)(a4 + 8) = v500;
      if (v500 >= (unsigned int *)v16)
      {
        v531 = *(unsigned int **)a4;
        v532 = ((uint64_t)v500 - *(_QWORD *)a4) >> 2;
        v533 = v532 + 1;
        if ((unint64_t)(v532 + 1) >> 62)
          goto LABEL_959;
        v534 = v16 - (char *)v531;
        if (v534 >> 1 > v533)
          v533 = v534 >> 1;
        if ((unint64_t)v534 >= 0x7FFFFFFFFFFFFFFCLL)
          v535 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v535 = v533;
        if (v535)
        {
          v536 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v535);
          v531 = *(unsigned int **)a4;
          v500 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v536 = 0;
        }
        v540 = (unsigned int *)&v536[4 * v532];
        v16 = &v536[4 * v535];
        *v540 = v558;
        v530 = v540 + 1;
        while (v500 != v531)
        {
          v541 = *--v500;
          *--v540 = v541;
        }
        *(_QWORD *)a4 = v540;
        *(_QWORD *)(a4 + 8) = v530;
        *(_QWORD *)(a4 + 16) = v16;
        if (v531)
        {
          operator delete(v531);
          v16 = *v17;
        }
      }
      else
      {
        *v500 = v558;
        v530 = v500 + 1;
      }
      *(_QWORD *)(a4 + 8) = v530;
      if (v530 >= (unsigned int *)v16)
      {
        v542 = *(unsigned int **)a4;
        v543 = ((uint64_t)v530 - *(_QWORD *)a4) >> 2;
        v544 = v543 + 1;
        if ((unint64_t)(v543 + 1) >> 62)
          goto LABEL_959;
        v545 = v16 - (char *)v542;
        if (v545 >> 1 > v544)
          v544 = v545 >> 1;
        if ((unint64_t)v545 >= 0x7FFFFFFFFFFFFFFCLL)
          v546 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v546 = v544;
        if (v546)
        {
          v547 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v546);
          v542 = *(unsigned int **)a4;
          v530 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v547 = 0;
        }
        v548 = (unsigned int *)&v547[4 * v543];
        v16 = &v547[4 * v546];
        *v548 = v557;
        v314 = v548 + 1;
        while (v530 != v542)
        {
          v549 = *--v530;
          *--v548 = v549;
        }
        *(_QWORD *)a4 = v548;
        *(_QWORD *)(a4 + 8) = v314;
        *(_QWORD *)(a4 + 16) = v16;
        if (v542)
        {
          operator delete(v542);
          v16 = *v17;
        }
      }
      else
      {
        *v530 = v557;
        v314 = v530 + 1;
      }
      *(_QWORD *)(a4 + 8) = v314;
      if (v314 < (unsigned int *)v16)
      {
LABEL_941:
        v375 = v556;
        goto LABEL_942;
      }
      v376 = *(unsigned int **)a4;
      v550 = ((uint64_t)v314 - *(_QWORD *)a4) >> 2;
      v551 = v550 + 1;
      if (!((unint64_t)(v550 + 1) >> 62))
      {
        v552 = v16 - (char *)v376;
        if (v552 >> 1 > v551)
          v551 = v552 >> 1;
        if ((unint64_t)v552 >= 0x7FFFFFFFFFFFFFFCLL)
          v553 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v553 = v551;
        if (v553)
        {
          v554 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v553);
          v376 = *(unsigned int **)a4;
          v314 = *(unsigned int **)(a4 + 8);
        }
        else
        {
          v554 = 0;
        }
        v432 = (unsigned int *)&v554[4 * v550];
        v433 = &v554[4 * v553];
        *v432 = v556;
        v434 = v432 + 1;
        while (v314 != v376)
        {
          v555 = *--v314;
          *--v432 = v555;
        }
        goto LABEL_955;
      }
      goto LABEL_959;
  }
}

void geom::`anonymous namespace'::edge_vertex_map::~edge_vertex_map(geom::_anonymous_namespace_::edge_vertex_map *this)
{
  void *v2;

  _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE((uint64_t)this + 32, *((_QWORD **)this + 5));
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void geom::refine_triangle_mesh<double>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, char **a5, _QWORD *a6, uint64_t *a7)
{
  unsigned int *v8;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  _OWORD *v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int8x16_t *v40;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t v48;
  int8x16_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  int8x16_t *v56;
  char *v57;
  char *v58;
  int8x16_t *v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  void **v72;
  void *v73;
  unint64_t i;
  uint64_t v75;
  char **v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int *v94;
  uint64_t v95;
  char **v96;
  unsigned int *v97;
  unsigned int *v98;
  int v99;
  uint64_t v100;
  unsigned int *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v110[4];
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  float64x2_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD v124[2];
  char *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD v134[3];

  v8 = a4;
  a5[1] = *a5;
  a6[1] = *a6;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v134[0] = 0;
  v134[1] = 0;
  v132 = 0;
  v133 = v134;
  v11 = (int *)a7[9];
  v12 = a7[10] - (_QWORD)v11;
  if (v12)
  {
    v13 = v12 >> 2;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    do
    {
      v15 = *v11++;
      v16 = &v8[3 * v15];
      --v14;
    }
    while (v14);
  }
  else if (a3)
  {
    v17 = a4 + 2;
    v18 = a3;
    do
    {
      v17 += 3;
      --v18;
    }
    while (v18);
  }
  a5[1] = *a5;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)a5, a1 + ((unint64_t)(v131 - v130) >> 3));
  if (a1)
  {
    v19 = 0;
    v20 = a5 + 2;
    v21 = a5[1];
    do
    {
      if ((unint64_t)v21 >= *v20)
      {
        v24 = (v21 - *a5) >> 5;
        if ((unint64_t)(v24 + 1) >> 59)
LABEL_99:
          abort();
        v25 = *v20 - (_QWORD)*a5;
        v26 = v25 >> 4;
        if (v25 >> 4 <= (unint64_t)(v24 + 1))
          v26 = v24 + 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
          v27 = 0x7FFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a5 + 2), v27);
        else
          v28 = 0;
        v29 = &v28[32 * v24];
        v30 = (_OWORD *)(a2 + 32 * v19);
        v31 = v30[1];
        *(_OWORD *)v29 = *v30;
        *((_OWORD *)v29 + 1) = v31;
        v33 = *a5;
        v32 = a5[1];
        v34 = v29;
        if (v32 != *a5)
        {
          do
          {
            v35 = *((_OWORD *)v32 - 2);
            v36 = *((_OWORD *)v32 - 1);
            v32 -= 32;
            *((_OWORD *)v34 - 2) = v35;
            *((_OWORD *)v34 - 1) = v36;
            v34 -= 32;
          }
          while (v32 != v33);
          v32 = *a5;
        }
        v21 = v29 + 32;
        *a5 = v34;
        a5[1] = v29 + 32;
        a5[2] = &v28[32 * v27];
        if (v32)
          operator delete(v32);
      }
      else
      {
        v22 = (_OWORD *)(a2 + 32 * v19);
        v23 = v22[1];
        *(_OWORD *)v21 = *v22;
        *((_OWORD *)v21 + 1) = v23;
        v21 += 32;
      }
      a5[1] = v21;
      ++v19;
    }
    while (v19 != a1);
  }
  v37 = v130;
  if (((v131 - v130) & 0x7FFFFFFF8) != 0)
  {
    v38 = 0;
    v39 = a5 + 2;
    v40 = (int8x16_t *)a5[1];
    __asm { FMOV            V4.2D, #0.5 }
    *(float64x2_t *)v110 = _Q4;
    do
    {
      v46 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v37 + 4 * (2 * v38)));
      v47 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v37 + 4 * ((2 * (_DWORD)v38) | 1u)));
      v48 = vmulq_f64(vaddq_f64(v46[1], v47[1]), _Q4);
      v49 = (int8x16_t)vmulq_f64(vaddq_f64(*v46, *v47), _Q4);
      v50 = vextq_s8(v49, v49, 8uLL).u64[0];
      if ((unint64_t)v40 >= *v39)
      {
        v51 = ((char *)v40 - *a5) >> 5;
        if ((unint64_t)(v51 + 1) >> 59)
          goto LABEL_99;
        v52 = *v39 - (_QWORD)*a5;
        v53 = v52 >> 4;
        if (v52 >> 4 <= (unint64_t)(v51 + 1))
          v53 = v51 + 1;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
          v54 = 0x7FFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54)
        {
          v114 = v48;
          v116 = v49.i64[0];
          v112 = v50;
          v55 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a5 + 2), v54);
          v50 = v112;
          v48 = v114;
          v49.i64[0] = v116;
        }
        else
        {
          v55 = 0;
        }
        v49.i64[1] = v50;
        v56 = (int8x16_t *)&v55[32 * v51];
        *v56 = v49;
        v56[1] = (int8x16_t)v48;
        v58 = *a5;
        v57 = a5[1];
        v59 = v56;
        if (v57 != *a5)
        {
          do
          {
            v60 = *((int8x16_t *)v57 - 2);
            v61 = *((int8x16_t *)v57 - 1);
            v57 -= 32;
            v59[-2] = v60;
            v59[-1] = v61;
            v59 -= 2;
          }
          while (v57 != v58);
          v57 = *a5;
        }
        v40 = v56 + 2;
        *a5 = (char *)v59;
        a5[1] = v56[2].i8;
        a5[2] = &v55[32 * v54];
        if (v57)
          operator delete(v57);
        _Q4 = *(float64x2_t *)v110;
      }
      else
      {
        v49.i64[1] = v50;
        *v40 = v49;
        v40[1] = (int8x16_t)v48;
        v40 += 2;
      }
      a5[1] = (char *)v40;
      ++v38;
      v37 = v130;
    }
    while (v38 < ((unint64_t)(v131 - v130) >> 3));
  }
  v62 = a7[1];
  v63 = v62 - *a7;
  v64 = v63 >> 3;
  if ((v63 >> 3))
  {
    v66 = a7[3];
    v65 = a7[4];
    if (v62 == *a7)
      v67 = 0;
    else
      v67 = *a7;
    v68 = (v63 >> 3);
    if (v65 == v66)
      v69 = 0;
    else
      v69 = (unsigned int *)a7[3];
    if (a7[7] == a7[6])
      v70 = 0;
    else
      v70 = (unsigned int *)a7[6];
    v126 = 0;
    v127 = 0;
    v128 = 0;
    v71 = a7[13];
    v113 = v67;
    v117 = v65;
    v104 = v65 - v66;
    v105 = v66;
    if (v71)
    {
      v72 = (void **)geom::collection_to_vector<float>(v71);
      v73 = *v72;
    }
    else
    {
      v73 = 0;
      v72 = &v126;
    }
    v106 = (uint64_t)v72;
    v72[1] = v73;
    v75 = geom::collection_to_vector<float>(a7[12]);
    v76 = (char **)v75;
    v77 = *(char **)v75;
    *(_QWORD *)(v75 + 8) = *(_QWORD *)v75;
    v111 = v68;
    if (v68)
    {
      v78 = (_QWORD *)(v75 + 16);
      v79 = (_QWORD *)v113;
      do
      {
        if ((unint64_t)v77 >= *v78)
        {
          v80 = (v77 - *v76) >> 3;
          if ((unint64_t)(v80 + 1) >> 61)
            goto LABEL_99;
          v81 = *v78 - (_QWORD)*v76;
          v82 = v81 >> 2;
          if (v81 >> 2 <= (unint64_t)(v80 + 1))
            v82 = v80 + 1;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
            v83 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v83 = v82;
          if (v83)
            v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v76 + 2), v83);
          else
            v84 = 0;
          v85 = &v84[8 * v80];
          *(_QWORD *)v85 = *v79;
          v77 = v85 + 8;
          v87 = *v76;
          v86 = v76[1];
          if (v86 != *v76)
          {
            do
            {
              v88 = *((_QWORD *)v86 - 1);
              v86 -= 8;
              *((_QWORD *)v85 - 1) = v88;
              v85 -= 8;
            }
            while (v86 != v87);
            v86 = *v76;
          }
          *v76 = v85;
          v76[1] = v77;
          v76[2] = &v84[8 * v83];
          if (v86)
            operator delete(v86);
        }
        else
        {
          *(_QWORD *)v77 = *v79;
          v77 += 8;
        }
        v76[1] = v77;
        ++v79;
      }
      while (v79 != (_QWORD *)(v113 + 8 * v111));
    }
    v115 = (_QWORD *)geom::collection_to_vector<float>(a7[14]);
    v115[1] = *v115;
    LOBYTE(v119) = 0;
    std::vector<BOOL>::vector(&v125, a3, (unsigned __int8 *)&v119);
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v124[0] = 0;
    v124[1] = 0;
    v122 = 0;
    v123 = v124;
    v89 = (uint64_t)a6;
    v90 = v8;
    v91 = a1;
    if (v117 != v105)
    {
      if ((unint64_t)(v104 >> 2) <= 1)
        v92 = 1;
      else
        v92 = v104 >> 2;
      do
      {
        v118 = v70;
        v93 = *v69;
        *(_QWORD *)&v125[((unint64_t)*v69 >> 3) & 0x1FFFFFF8] |= 1 << *v69;
        v103 = (uint64_t)v76;
        v94 = v70;
        v95 = v89;
        v96 = v76;
        v97 = v69 + 1;
        v98 = v90;
        geom::refine_triangle_with_uvs(&v90[3 * v93], v91, (geom::_anonymous_namespace_::edge_vertex_map *)&v129, v113, v111, v94, v64, (uint64_t)&v119, v89, v106, v103, (uint64_t)v115);
        v90 = v98;
        v69 = v97;
        v76 = v96;
        v89 = v95;
        v70 = v118 + 3;
        --v92;
      }
      while (v92);
    }
    if (a3)
    {
      v99 = v91;
      v100 = v89;
      v101 = v90;
      v102 = 0;
      do
      {
        if (((*(_QWORD *)&v125[(v102 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v102) & 1) == 0)
        ++v102;
        v101 += 3;
      }
      while (a3 != v102);
    }
    if (v125)
      operator delete(v125);
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
  }
  else
  {
    for (i = a3; i; --i)
    {
      v8 += 3;
    }
  }
}

uint64_t geom::refine_triangle_mesh_options<float>::clear_refinement_face_subset(uint64_t result)
{
  *(_QWORD *)(result + 80) = *(_QWORD *)(result + 72);
  return result;
}

void geom::refine_triangle_mesh_options<float>::set_refinement_face_subset(std::vector<int> *a1, const void *a2, std::vector<int>::size_type __sz)
{
  void **p_begin;

  p_begin = (void **)&a1[3].__begin_;
  std::vector<unsigned int>::resize(a1 + 3, __sz);
  if (__sz)
    memmove(*p_begin, a2, 4 * __sz);
}

_QWORD *geom::refine_triangle_mesh_options<float>::clear_uvs(_QWORD *result)
{
  result[1] = *result;
  result[4] = result[3];
  result[7] = result[6];
  result[13] = 0;
  result[14] = 0;
  result[12] = 0;
  return result;
}

BOOL geom::refine_triangle_mesh_options<float>::has_uvs(_QWORD *a1)
{
  return a1[1] != *a1 && a1[7] != a1[6] && a1[12] && a1[14] != 0;
}

uint64_t geom::`anonymous namespace'::edge_vertex_map::find_or_add_edge(geom::_anonymous_namespace_::edge_vertex_map *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  unint64_t v35;
  unint64_t *v36;

  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v7 = a2 | ((unint64_t)a3 << 32);
  if (a2 < a3)
    v7 = a3 | ((unint64_t)a2 << 32);
  if (!v6)
    goto LABEL_14;
  v8 = (char *)this + 40;
  do
  {
    v9 = v6[4];
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = v6;
    else
      v11 = v6 + 1;
    if (v10)
      v8 = (char *)v6;
    v6 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == (char *)this + 40 || v7 < *((_QWORD *)v8 + 4))
  {
LABEL_14:
    v12 = (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
    v35 = v7;
    v36 = &v35;
    *((_DWORD *)std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)this + 4, &v35, (uint64_t)&std::piecewise_construct, &v36)+ 10) = v12;
    v13 = (char *)*((_QWORD *)this + 2);
    v14 = (char *)*((_QWORD *)this + 3);
    if (v13 >= v14)
    {
      v16 = (_BYTE *)*((_QWORD *)this + 1);
      v17 = (v13 - v16) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
        goto LABEL_49;
      v19 = v14 - v16;
      if (v19 >> 1 > v18)
        v18 = v19 >> 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)this + 24, v20);
        v16 = (_BYTE *)*((_QWORD *)this + 1);
        v13 = (char *)*((_QWORD *)this + 2);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * v17];
      v14 = &v21[4 * v20];
      *(_DWORD *)v22 = a2;
      v15 = v22 + 4;
      while (v13 != v16)
      {
        v23 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      *((_QWORD *)this + 1) = v22;
      *((_QWORD *)this + 2) = v15;
      *((_QWORD *)this + 3) = v14;
      if (v16)
      {
        operator delete(v16);
        v14 = (char *)*((_QWORD *)this + 3);
      }
    }
    else
    {
      *(_DWORD *)v13 = a2;
      v15 = v13 + 4;
    }
    *((_QWORD *)this + 2) = v15;
    if (v15 < v14)
    {
      *(_DWORD *)v15 = a3;
      v24 = v15 + 4;
LABEL_47:
      *((_QWORD *)this + 2) = v24;
      return v12;
    }
    v25 = (char *)*((_QWORD *)this + 1);
    v26 = (v15 - v25) >> 2;
    v27 = v26 + 1;
    if (!((unint64_t)(v26 + 1) >> 62))
    {
      v28 = v14 - v25;
      if (v28 >> 1 > v27)
        v27 = v28 >> 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)this + 24, v29);
        v25 = (char *)*((_QWORD *)this + 1);
        v15 = (char *)*((_QWORD *)this + 2);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[4 * v26];
      v32 = &v30[4 * v29];
      *(_DWORD *)v31 = a3;
      v24 = v31 + 4;
      while (v15 != v25)
      {
        v33 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v31 - 1) = v33;
        v31 -= 4;
      }
      *((_QWORD *)this + 1) = v31;
      *((_QWORD *)this + 2) = v24;
      *((_QWORD *)this + 3) = v32;
      if (v25)
        operator delete(v25);
      goto LABEL_47;
    }
LABEL_49:
    abort();
  }
  return *((unsigned int *)v8 + 10);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,unsigned int>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned int>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned int>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t geom::`anonymous namespace'::edge_vertex_map::find_edge(geom::_anonymous_namespace_::edge_vertex_map *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t result;
  unsigned int v13;

  v4 = a2 | ((unint64_t)a3 << 32);
  if (a2 < a3)
    v4 = a3 | ((unint64_t)a2 << 32);
  v7 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = (char *)this + 40;
  v6 = v7;
  if (!v7)
    goto LABEL_14;
  v8 = v5;
  do
  {
    v9 = v6[4];
    v10 = v9 >= v4;
    if (v9 >= v4)
      v11 = v6;
    else
      v11 = v6 + 1;
    if (v10)
      v8 = (char *)v6;
    v6 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != v5 && v4 >= *((_QWORD *)v8 + 4))
  {
    v13 = *((_DWORD *)v8 + 10);
    result = 1;
  }
  else
  {
LABEL_14:
    result = 0;
    v13 = -1;
  }
  *a4 = v13;
  return result;
}

uint64_t _ZZN4geom24refine_triangle_with_uvsEPKjjRKNS_12_GLOBAL__N_115edge_vertex_mapENS_5sliceIDv2_fEES1_jRS3_RNSt3__16vectorIjNSA_9allocatorIjEEEESF_RNSB_IS7_NSC_IS7_EEEESF_ENK3__0clEjj(uint64_t a1, unsigned int a2, unsigned int a3)
{
  geom::_anonymous_namespace_::edge_vertex_map *v6;
  unsigned int v7;
  void **v8;
  float32x2_t v9;
  float32x2_t *v10;
  unint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float32x2_t *v18;
  char *v19;
  char *v20;
  char *v21;
  float32x2_t v22;
  unsigned int v24;

  v24 = 0;
  v6 = *(geom::_anonymous_namespace_::edge_vertex_map **)a1;
  {
    v7 = v24;
  }
  else
  {
    v8 = *(void ***)(a1 + 8);
    v9 = vmul_f32(vadd_f32(*(float32x2_t *)(**(_QWORD **)(a1 + 16) + 8 * a2), *(float32x2_t *)(**(_QWORD **)(a1 + 16) + 8 * a3)), (float32x2_t)0x3F0000003F000000);
    v10 = (float32x2_t *)v8[1];
    v11 = (unint64_t)v8[2];
    if ((unint64_t)v10 >= v11)
    {
      v13 = ((char *)v10 - (_BYTE *)*v8) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        abort();
      v14 = v11 - (_QWORD)*v8;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v8 + 2), v16);
      else
        v17 = 0;
      v18 = (float32x2_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v12 = v18 + 1;
      v21 = (char *)*v8;
      v20 = (char *)v8[1];
      if (v20 != *v8)
      {
        do
        {
          v22 = *(float32x2_t *)(v20 - 8);
          v20 -= 8;
          v18[-1] = v22;
          --v18;
        }
        while (v20 != v21);
        v20 = (char *)*v8;
      }
      *v8 = v18;
      v8[1] = v12;
      v8[2] = v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v10 = v9;
      v12 = v10 + 1;
    }
    v8[1] = v12;
  }
  return v7 + **(_DWORD **)(a1 + 24);
}

uint64_t geom_create_marching_squares_opt_2f()
{
  uint64_t result;

  result = geom_marching_squares_opt_2f_obj_alloc();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t geom_create_marching_squares_opt_2d()
{
  uint64_t result;

  result = geom_marching_squares_opt_2d_obj_alloc();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void geom_triangulate_by_ear_clipping_2f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a1;
  geom::triangulate_by_ear_clipping<float>(v3, (std::vector<unsigned int> *)(a3 + 16));
}

void geom_triangulate_by_ear_clipping_2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a1;
  geom::triangulate_by_ear_clipping<double>(v3, (std::vector<unsigned int> *)(a3 + 16));
}

void geom_triangulate_by_ear_clipping_with_holes_2f(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v5[2];
  uint64_t v6[2];

  v6[0] = a2;
  v6[1] = a1;
  v5[0] = a4;
  v5[1] = a3;
  geom::triangulate_by_ear_clipping<float>(v6, v5, (std::vector<unsigned int> *)(a5 + 16));
}

void geom_triangulate_by_ear_clipping_with_holes_2d(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v5[2];
  uint64_t v6[2];

  v6[0] = a2;
  v6[1] = a1;
  v5[0] = a4;
  v5[1] = a3;
  geom::triangulate_by_ear_clipping<double>(v6, v5, (std::vector<unsigned int> *)(a5 + 16));
}

uint64_t geom_create_inset_evaluator_2f()
{
  uint64_t v0;

  v0 = geom_inset_evaluator_2f_obj_alloc();
  geom::straight_skeleton_evaluator<float>::straight_skeleton_evaluator(v0 + 16);
  return v0;
}

uint64_t geom_create_inset_evaluator_2d()
{
  uint64_t v0;

  v0 = geom_inset_evaluator_2d_obj_alloc();
  geom::straight_skeleton_evaluator<double>::straight_skeleton_evaluator(v0 + 16);
  return v0;
}

float geom_inset_evaluator_get_computed_inset_distance_2f(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 120) - 4) * *(float *)(a1 + 224);
}

double geom_inset_evaluator_get_computed_inset_distance_2d(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 120) - 8) * *(double *)(a1 + 240);
}

void geom_inset_evaluator_advance_inset_to_2f(uint64_t a1, float a2)
{
  geom::straight_skeleton_evaluator<float>::advance_to_inset_distance(a1 + 16, a2);
}

void geom_inset_evaluator_advance_inset_to_2d(uint64_t a1, double a2)
{
  geom::straight_skeleton_evaluator<double>::advance_to_inset_distance(a1 + 16, a2);
}

void geom_inset_evaluator_extract_offset_curve_2f(float32x2_t *a1, float32x2_t *a2, uint64_t a3)
{
  geom::straight_skeleton_evaluator<float>::extract_offset_curve(a1 + 2, a2 + 2, (_QWORD *)(a3 + 16));
}

void geom_inset_evaluator_extract_offset_curve_2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  geom::straight_skeleton_evaluator<double>::extract_offset_curve(a1 + 16, (_QWORD *)(a2 + 16), (_QWORD *)(a3 + 16));
}

_DWORD *geom_inset_evaluator_extract_joiner_mesh_2f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return geom::straight_skeleton_evaluator<float>::extract_joiner_mesh(a1 + 16, a2 + 16, (_QWORD *)(a3 + 16), (_QWORD *)(a4 + 16), (_QWORD *)(a5 + 16), a6 + 16);
}

_DWORD *geom_inset_evaluator_extract_joiner_mesh_2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return geom::straight_skeleton_evaluator<double>::extract_joiner_mesh(a1 + 16, (_QWORD *)(a2 + 16), (_QWORD *)(a3 + 16), (_QWORD *)(a4 + 16), (_QWORD *)(a5 + 16), (_QWORD *)(a6 + 16));
}

uint64_t geom::ddg_evaluator<float>::ddg_evaluator(uint64_t a1, const void *a2, unint64_t a3, const void *a4, std::vector<int>::size_type a5)
{
  std::vector<int> *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v10 = (std::vector<int> *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a1, a3);
  std::vector<unsigned int>::resize(v10, a5);
  if (a3)
    memmove(*(void **)a1, a2, 16 * a3);
  if (a5)
    memmove(v10->__begin_, a4, 4 * a5);
  v11 = operator new();
  v12 = geom::mesh_connectivity::mesh_connectivity(v11);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  if (v13)
    std::default_delete<geom::mesh_connectivity>::operator()[abi:nn180100](a1 + 48, v13);
  return a1;
}

uint64_t geom::ddg_evaluator<float>::ddg_evaluator(uint64_t a1, uint64_t a2, const std::vector<unsigned int> *a3)
{
  std::vector<unsigned int> *v5;
  uint64_t v6;

  v5 = (std::vector<unsigned int> *)_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)a1, a2);
  std::vector<float>::vector(v5 + 1, a3);
  v6 = operator new();
  *(_QWORD *)(a1 + 48) = geom::mesh_connectivity::mesh_connectivity(v6);
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

uint64_t geom::ddg_evaluator<float>::is_valid(uint64_t a1)
{
  if (geom::mesh_connectivity::is_manifold(*(geom::mesh_connectivity **)(a1 + 48))
    && geom::mesh_connectivity::is_oriented(*(geom::mesh_connectivity **)(a1 + 48)))
  {
    return geom::mesh_connectivity::is_triangle(*(geom::mesh_connectivity **)(a1 + 48));
  }
  else
  {
    return 0;
  }
}

uint64_t geom::ddg_evaluator<float>::vertex_count(uint64_t a1)
{
  return geom::mesh_connectivity::vertex_count(*(geom::mesh_connectivity **)(a1 + 48));
}

uint64_t geom::ddg_evaluator<float>::triangle_count(uint64_t a1)
{
  return geom::mesh_connectivity::face_count(*(geom::mesh_connectivity **)(a1 + 48));
}

BOOL geom::ddg_evaluator<float>::is_boundary_vertex(uint64_t a1, unsigned int a2)
{
  return geom::mesh_connectivity::is_boundary_vertex(*(geom::mesh_connectivity **)(a1 + 48), a2);
}

void geom::ddg_evaluator<float>::get_vertex_one_ring(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;

  geom::mesh_connectivity::get_adjacent_vertices_to_vertex(*(_QWORD *)(a1 + 48), a2, a3);
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 != *(_QWORD *)a3)
  {
    **(_DWORD **)a3 = *(_DWORD *)(v4 - 4);
    *(_QWORD *)(a3 + 8) = v4 - 4;
  }
}

void geom::ddg_evaluator<float>::get_vertex_incident_faces(uint64_t a1, unsigned int a2, uint64_t a3)
{
  geom::mesh_connectivity::get_incident_faces_to_vertex(*(uint64_t **)(a1 + 48), a2, a3);
}

float geom::ddg_evaluator<float>::compute_vertex_area(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  int *v6;
  int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int *v14;
  int *v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  geom::mesh_connectivity::get_incident_faces_to_vertex((uint64_t *)a1[6], a2, (uint64_t)&v14);
  if (v14 == v15)
  {
    v5 = 0.0;
    if (!v14)
      return v5 / 3.0;
    goto LABEL_5;
  }
  v3 = a1[3];
  v4 = *a1;
  v5 = 0.0;
  v6 = v14;
  do
  {
    v7 = *v6++;
    v8 = *(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * v7)));
    v9 = vsubq_f32(*(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * v7 + 1))), v8);
    v10 = vsubq_f32(*(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * v7 + 2))), v8);
    v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v9)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
    v12 = vmulq_f32(v11, v11);
    v5 = v5
       + sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), v12)).f32[0])* 0.5;
  }
  while (v6 != v15);
  if (v14)
  {
LABEL_5:
    v15 = v14;
    operator delete(v14);
  }
  return v5 / 3.0;
}

double geom::ddg_evaluator<float>::compute_vertex_normal(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  int *v6;
  int v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  int32x2_t v13;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  geom::mesh_connectivity::get_incident_faces_to_vertex((uint64_t *)a1[6], a2, (uint64_t)&v16);
  if (v16 == v17)
  {
    v5 = 0uLL;
  }
  else
  {
    v3 = a1[3];
    v4 = *a1;
    v5 = 0uLL;
    v6 = v16;
    do
    {
      v7 = *v6++;
      v8 = *(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * v7)));
      v9 = vsubq_f32(*(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * v7 + 1))), v8);
      v10 = vsubq_f32(*(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * v7 + 2))), v8);
      v11 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v9)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
      v5 = vaddq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL));
    }
    while (v6 != v17);
  }
  v12 = vmulq_f32(v5, v5);
  v13 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u64[0];
  if (*(float *)v13.i32 > 0.0)
  {
    *(float *)v13.i32 = sqrtf(*(float *)v13.i32);
    v5.i64[0] = vdivq_f32(v5, (float32x4_t)vdupq_lane_s32(v13, 0)).u64[0];
  }
  if (v16)
  {
    v17 = v16;
    v15 = v5.i64[0];
    operator delete(v16);
    v5.i64[0] = v15;
  }
  return *(double *)v5.i64;
}

float geom::ddg_evaluator<float>::compute_vertex_angle_defect(uint64_t *a1, unsigned int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t is_boundary_vertex;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  double v22;
  float32x4_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  geom::mesh_connectivity::get_adjacent_vertices_to_vertex(a1[6], a2, (uint64_t)&v25);
  v4 = v26;
  v5 = (char *)v26 - (char *)v25;
  if (v26 != v25)
  {
    v24 = *(float32x4_t *)(*a1 + 16 * a2);
    is_boundary_vertex = geom::mesh_connectivity::is_boundary_vertex((geom::mesh_connectivity *)a1[6], a2);
    v7 = ~(unint64_t)is_boundary_vertex + (v5 >> 2);
    v4 = v25;
    if (v7)
    {
      v8 = 0;
      v9 = *a1;
      v10 = (v5 >> 2) + (is_boundary_vertex << 63 >> 63);
      v11 = v10 - 2;
      v12 = v10 - 1;
      v13 = 0.0;
      do
      {
        v14 = v8 + 1;
        v15 = v8 + 2;
        if (v11 == v8)
          v16 = 1;
        else
          v16 = v8 + 2;
        v17 = vsubq_f32(*(float32x4_t *)(v9 + 16 * v4[v16]), v24);
        v18 = vsubq_f32(*(float32x4_t *)(v9 + 16 * v4[v15 % v7 + 1]), v24);
        v19 = vmulq_f32(v17, v18);
        v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), vnegq_f32(v17)), v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL));
        v21 = vmulq_f32(v20, v20);
        v13 = v13
            + atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), v21)).f32[0]), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
        v8 = v14;
      }
      while (v12 != v14);
      v22 = v13;
      goto LABEL_10;
    }
  }
  v22 = 0.0;
  if (v4)
  {
LABEL_10:
    v26 = v4;
    operator delete(v4);
  }
  return 6.28318531 - v22;
}

float geom::ddg_evaluator<float>::compute_vertex_mean_curvature(uint64_t *a1, unsigned int a2)
{
  float32x4_t v2;
  float32x4_t v3;

  *(double *)v2.i64 = geom::ddg_evaluator<float>::compute_vertex_mean_curvature_vector(a1, a2);
  v3 = vmulq_f32(v2, v2);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0])* 0.5;
}

double geom::ddg_evaluator<float>::compute_vertex_mean_curvature_vector(uint64_t *a1, unsigned int a2)
{
  float32x4_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  _BYTE *v17;
  void *__p;
  void *v19;

  v4.f32[0] = geom::ddg_evaluator<float>::compute_vertex_area(a1, a2);
  v5 = 0;
  if (v4.f32[0] == 0.0)
    return *(double *)&v5;
  v13 = v4;
  geom::ddg_evaluator<float>::compute_laplacian_stencil(a1, a2, 1, (uint64_t)&v16);
  v6 = v16;
  if (v17 == v16)
  {
    v9 = __p;
    v11.i64[0] = 0x8000000080000000;
    v11.i64[1] = 0x8000000080000000;
    v5 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vdivq_f32(v11, v13), 0).u64[0];
    if (!__p)
      goto LABEL_10;
  }
  else
  {
    v7 = 0;
    v8 = (v17 - (_BYTE *)v16) >> 2;
    v9 = __p;
    if (v8 <= 1)
      v8 = 1;
    v10 = 0uLL;
    do
    {
      v10 = vaddq_f32(v10, vmulq_n_f32(*(float32x4_t *)(*a1 + 16 * *((unsigned int *)v16 + v7)), *((float *)__p + v7)));
      ++v7;
    }
    while (v8 != v7);
    v5 = vdivq_f32(vnegq_f32(v10), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0)).u64[0];
  }
  v14 = v5;
  v19 = v9;
  operator delete(v9);
  v5 = v14;
  v6 = v16;
LABEL_10:
  if (v6)
  {
    v17 = v6;
    v15 = v5;
    operator delete(v6);
    v5 = v15;
  }
  return *(double *)&v5;
}

void geom::ddg_evaluator<float>::compute_laplacian_stencil(uint64_t *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  unint64_t v9;
  unsigned int v10;
  float v11;
  uint64_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float v27;
  float32x4_t v28;
  float v29;
  unsigned int *v30;
  float *v31;
  float v32;
  unsigned int *v33;
  float *v34;
  unint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v39[2];
  unsigned int v40[2];
  void *__p;
  _BYTE *v42;
  uint64_t v43;
  void *v44;
  _DWORD *v45;
  uint64_t v46;

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  __p = 0;
  v42 = 0;
  v43 = 0;
  geom::mesh_connectivity::get_incident_edges_to_vertex(a1[6], a2, (uint64_t)&v44);
  geom::mesh_connectivity::get_adjacent_vertices_to_vertex(a1[6], a2, (uint64_t)&__p);
  std::vector<unsigned int>::resize((std::vector<int> *)a4, (v42 - (_BYTE *)__p) >> 2);
  std::vector<float>::resize(a4 + 24, (v42 - (_BYTE *)__p) >> 2);
  v8 = v44;
  if (a3)
  {
    if (v45 == v44)
    {
      v30 = *(unsigned int **)a4;
      v31 = *(float **)(a4 + 24);
      v32 = -0.0;
      v8 = v45;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      v11 = 0.0;
      do
      {
        *(_QWORD *)v39 = 0;
        *(_QWORD *)v40 = 0;
        geom::mesh_connectivity::get_edge_vertices(a1[6], v8[v9], &v40[1], v40);
        geom::mesh_connectivity::get_edge_opposite_vertices(a1[6], *((_DWORD *)v44 + v9), &v39[1], v39);
        v12 = *a1;
        v13 = 0.0;
        if (v39[1] != -1)
        {
          v14 = *(float32x4_t *)(v12 + 16 * v39[1]);
          v15 = vsubq_f32(*(float32x4_t *)(v12 + 16 * v40[1]), v14);
          v16 = vsubq_f32(*(float32x4_t *)(v12 + 16 * v40[0]), v14);
          v17 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), vnegq_f32(v15)), v16, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
          v18 = vmulq_f32(v17, v17);
          v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), v18)).f32[0]);
          v13 = 0.0;
          if (v19 > 0.0)
          {
            v20 = vmulq_f32(v15, v16);
            v13 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]/ v19;
          }
          if (*((_BYTE *)a1 + 56))
            v13 = fmaxf(v13, 0.0);
        }
        if (v39[0] == -1)
        {
          v27 = 0.0;
        }
        else
        {
          v21 = *(float32x4_t *)(v12 + 16 * v39[0]);
          v22 = vsubq_f32(*(float32x4_t *)(v12 + 16 * v40[1]), v21);
          v23 = vsubq_f32(*(float32x4_t *)(v12 + 16 * v40[0]), v21);
          v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v22)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
          v25 = vmulq_f32(v24, v24);
          v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), v25)).f32[0]);
          v27 = 0.0;
          if (v26 > 0.0)
          {
            v28 = vmulq_f32(v22, v23);
            v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]/ v26;
          }
          if (*((_BYTE *)a1 + 56))
            v27 = fmaxf(v27, 0.0);
        }
        v29 = v13 + v27;
        v11 = v11 + v29;
        v30 = *(unsigned int **)a4;
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v10) = *((_DWORD *)__p + v10);
        v31 = *(float **)(a4 + 24);
        v31[v10] = v29 * 0.5;
        v9 = v10;
        v8 = v44;
        ++v10;
      }
      while (v9 < ((char *)v45 - (_BYTE *)v44) >> 2);
      v32 = v11 * -0.5;
    }
    *v30 = a2;
    *v31 = v32;
  }
  else
  {
    v33 = *(unsigned int **)a4;
    v34 = *(float **)(a4 + 24);
    v35 = ((char *)v45 - (_BYTE *)v44) >> 2;
    if (v45 != v44)
    {
      v36 = 1;
      v37 = __p;
      do
      {
        v33[v36] = v37[v36];
        v34[v36] = 1.0;
      }
      while (v35 > v36++);
    }
    *v33 = a2;
    *v34 = -(float)v35;
  }
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
    v8 = v44;
  }
  if (v8)
  {
    v45 = v8;
    operator delete(v8);
  }
}

__n128 geom::ddg_evaluator<float>::compute_face_gradient(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x2_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v29;
  void *__p;
  void *v31;
  char *v32;
  _OWORD v33[2];
  float32x4_t v34;
  _DWORD v35[2];
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = operator new(0xCuLL);
  v31 = v6 + 3;
  v32 = (char *)(v6 + 3);
  *(_QWORD *)v6 = 0;
  v6[2] = 0;
  __p = v6;
  geom::mesh_connectivity::get_face_vertices(a1[6], a2, (uint64_t)&__p);
  v7 = *((unsigned int *)__p + 1);
  v35[0] = *(_DWORD *)__p;
  v35[1] = v7;
  v8 = *a1;
  v9 = *(float32x4_t *)(*a1 + 16 * v35[0]);
  v10 = *(float32x4_t *)(*a1 + 16 * v7);
  v36 = *((_DWORD *)__p + 2);
  v33[0] = v9;
  v33[1] = v10;
  v34 = *(float32x4_t *)(v8 + 16 * v36);
  v11 = vsubq_f32(v10, v9);
  v12 = vsubq_f32(v34, v9);
  v13 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v11)), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
  v14 = vmulq_f32(v13, v13);
  v15 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), v14)).u64[0];
  v16 = 0uLL;
  if (*(float *)v15.i32 != 0.0)
  {
    v17 = 0;
    v18 = 0;
    v19 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), (int8x16_t)v13, 8uLL);
    v20 = vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
    v21 = 0uLL;
    do
    {
      v22 = v18 - 1;
      if (!(v17 * 4))
        v22 = 2;
      v23 = (float32x4_t)v33[v22];
      v24 = v18 + 1;
      if (v18 == 2)
        v25 = 0;
      else
        v25 = v18 + 1;
      v26 = vsubq_f32(v23, (float32x4_t)v33[v25]);
      v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), v20), v26, v19);
      v21 = vmlaq_n_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL), *(float *)(a3 + 4 * v35[v17++]));
      v18 = v24;
    }
    while (v17 != 3);
    v16 = vdivq_f32(v21, (float32x4_t)vdupq_lane_s32(v15, 0));
  }
  v29 = v16;
  v31 = __p;
  operator delete(__p);
  return (__n128)v29;
}

float geom::ddg_evaluator<float>::compute_vertex_divergence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  float v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  int v13;
  __int16 v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  _DWORD *v40;
  char *v41;
  char *v42;
  void *__p;
  unsigned int *v44;
  uint64_t v45;

  __p = 0;
  v44 = 0;
  v45 = 0;
  geom::mesh_connectivity::get_incident_faces_to_vertex(*(uint64_t **)(a1 + 48), a2, (uint64_t)&__p);
  v6 = operator new(0xCuLL);
  v41 = (char *)(v6 + 3);
  v42 = (char *)(v6 + 3);
  *(_QWORD *)v6 = 0;
  v6[2] = 0;
  v40 = v6;
  v7 = (unsigned int *)__p;
  v8 = v44;
  if (__p == v44)
  {
    v38 = 0.0;
  }
  else
  {
    v9 = 0.0;
    do
    {
      v10 = *v7;
      geom::mesh_connectivity::get_face_vertices(*(_QWORD *)(a1 + 48), *v7, (uint64_t)&v40);
      v11 = 0;
      v6 = v40;
      do
      {
        v12 = v11;
        v13 = v40[v11++];
      }
      while (v13 != a2);
      v14 = v12;
      v15 = 21846 * v12;
      v16 = *(float32x4_t *)(*(_QWORD *)a1 + 16 * a2);
      v17 = *(float32x4_t *)(*(_QWORD *)a1
                           + 16
                           * v40[(unsigned __int16)(v14 - 3 * ((v15 + 43692) >> 16) + 2)]);
      v18 = vsubq_f32(v16, v17);
      v19 = *(float32x4_t *)(*(_QWORD *)a1
                           + 16
                           * v40[(unsigned __int16)(v14 - 3 * ((v15 + 21846) >> 16) + 1)]);
      v20 = vsubq_f32(v19, v17);
      v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v18)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
      v22 = vmulq_f32(v21, v21);
      v23 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), v22)).f32[0]);
      v24 = 0.0;
      v25 = 0.0;
      if (v23 > 0.0)
      {
        v26 = vmulq_f32(v18, v20);
        v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]/ v23;
      }
      v27 = vsubq_f32(v16, v19);
      v28 = vsubq_f32(v17, v19);
      v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), vnegq_f32(v27)), v28, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
      v30 = vmulq_f32(v29, v29);
      v31 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), v30)).f32[0]);
      if (v31 > 0.0)
      {
        v32 = vmulq_f32(v27, v28);
        v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]/ v31;
      }
      v33 = vsubq_f32(v19, v16);
      v34 = vsubq_f32(v17, v16);
      v35 = *(float32x4_t *)(a3 + 16 * v10);
      v36 = vmulq_f32(v33, v35);
      v37 = vmulq_f32(v34, v35);
      v9 = v9
         + vmlas_n_f32(v24* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0], v25, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]);
      ++v7;
    }
    while (v7 != v8);
    v38 = v9 * 0.5;
  }
  v41 = (char *)v6;
  operator delete(v6);
  if (__p)
  {
    v44 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v38;
}

uint64_t geom::ddg_evaluator<float>::get_mesh_connectivity(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t geom::ddg_evaluator<float>::set_clamp_cotan_weights(uint64_t result, char a2)
{
  *(_BYTE *)(result + 56) = a2;
  return result;
}

uint64_t geom::ddg_evaluator<double>::ddg_evaluator(uint64_t a1, const void *a2, unint64_t a3, const void *a4, std::vector<int>::size_type a5)
{
  std::vector<int> *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v10 = (std::vector<int> *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a1, a3);
  std::vector<unsigned int>::resize(v10, a5);
  if (a3)
    memmove(*(void **)a1, a2, 32 * a3);
  if (a5)
    memmove(v10->__begin_, a4, 4 * a5);
  v11 = operator new();
  v12 = geom::mesh_connectivity::mesh_connectivity(v11);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  if (v13)
    std::default_delete<geom::mesh_connectivity>::operator()[abi:nn180100](a1 + 48, v13);
  return a1;
}

uint64_t geom::ddg_evaluator<double>::ddg_evaluator(uint64_t a1, uint64_t a2, const std::vector<unsigned int> *a3)
{
  std::vector<unsigned int> *v5;
  uint64_t v6;

  v5 = (std::vector<unsigned int> *)_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)a1, a2);
  std::vector<float>::vector(v5 + 1, a3);
  v6 = operator new();
  *(_QWORD *)(a1 + 48) = geom::mesh_connectivity::mesh_connectivity(v6);
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

double geom::ddg_evaluator<double>::compute_vertex_area(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  int *v6;
  int v7;
  float64x2_t *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  int *v20;
  int *v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  geom::mesh_connectivity::get_incident_faces_to_vertex((uint64_t *)a1[6], a2, (uint64_t)&v20);
  if (v20 == v21)
  {
    v5 = 0.0;
    if (!v20)
      return v5 / 3.0;
    goto LABEL_5;
  }
  v3 = a1[3];
  v4 = *a1;
  v5 = 0.0;
  v6 = v20;
  do
  {
    v7 = *v6++;
    v8 = (float64x2_t *)(v4 + 32 * *(unsigned int *)(v3 + 4 * (3 * v7)));
    v9 = (float64x2_t *)(v4 + 32 * *(unsigned int *)(v3 + 4 * (3 * v7 + 1)));
    v10 = (float64x2_t *)(v4 + 32 * *(unsigned int *)(v3 + 4 * (3 * v7 + 2)));
    v11 = v8[1];
    v12 = vsubq_f64(*v9, *v8);
    v13 = vsubq_f64(v9[1], v11);
    v14 = vsubq_f64(*v10, *v8);
    v15 = vsubq_f64(v10[1], v11);
    v16 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v13), v14, 1), v15, v12, 1);
    v15.f64[1] = v14.f64[0];
    v13.f64[1] = v12.f64[0];
    v17 = vmlaq_f64(vmulq_f64(v15, vnegq_f64(v12)), v14, v13);
    v18 = vmulq_f64(v17, v17);
    v5 = v5 + sqrt(v18.f64[1] + vmulq_f64(v16, v16).f64[0] + v18.f64[0]) * 0.5;
  }
  while (v6 != v21);
  if (v20)
  {
LABEL_5:
    v21 = v20;
    operator delete(v20);
  }
  return v5 / 3.0;
}

void geom::ddg_evaluator<double>::compute_vertex_normal(uint64_t *a1@<X0>, unsigned int a2@<W1>, float64x2_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int *v9;
  int v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  int64x2_t v20;
  unint64_t v21;
  float64x2_t v22;
  unint64_t v23;
  float64x2_t v24;
  float64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  geom::mesh_connectivity::get_incident_faces_to_vertex((uint64_t *)a1[6], a2, (uint64_t)&v26);
  if (v26 == v27)
  {
    v7 = 0uLL;
    v8 = 0uLL;
  }
  else
  {
    v5 = a1[3];
    v6 = *a1;
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = v26;
    do
    {
      v10 = *v9++;
      v11 = (float64x2_t *)(v6 + 32 * *(unsigned int *)(v5 + 4 * (3 * v10)));
      v12 = (float64x2_t *)(v6 + 32 * *(unsigned int *)(v5 + 4 * (3 * v10 + 1)));
      v13 = (float64x2_t *)(v6 + 32 * *(unsigned int *)(v5 + 4 * (3 * v10 + 2)));
      v14 = v11[1];
      v15 = vsubq_f64(*v12, *v11);
      v16 = vsubq_f64(v12[1], v14);
      v17 = vsubq_f64(*v13, *v11);
      v18 = vsubq_f64(v13[1], v14);
      *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v16), v17, 1), v18, v15, 1);
      v18.f64[1] = v17.f64[0];
      v16.f64[1] = v15.f64[0];
      v20 = (int64x2_t)vmlaq_f64(vmulq_f64(v18, vnegq_f64(v15)), v17, v16);
      *(_QWORD *)&v19.f64[1] = v20.i64[0];
      v8 = vaddq_f64(v8, (float64x2_t)vdupq_laneq_s64(v20, 1));
      v7 = vaddq_f64(v7, v19);
    }
    while (v9 != v27);
  }
  v21 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v22 = vmulq_f64(v8, v8);
  v22.f64[0] = v22.f64[0] + vaddvq_f64(vmulq_f64(v7, v7));
  if (v22.f64[0] > 0.0)
  {
    v22.f64[0] = sqrt(v22.f64[0]);
    v8 = vdivq_f64(v8, v22);
    *(_QWORD *)&v7.f64[1] = v21;
    v7 = vdivq_f64(v7, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22.f64[0], 0));
    v21 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  }
  if (v26)
  {
    v27 = v26;
    v24 = v8;
    v25 = v7.f64[0];
    v23 = v21;
    operator delete(v26);
    v21 = v23;
    v8 = v24;
    v7.f64[0] = v25;
  }
  *(_QWORD *)&v7.f64[1] = v21;
  *a3 = v7;
  a3[1] = v8;
}

double geom::ddg_evaluator<double>::compute_vertex_angle_defect(uint64_t *a1, unsigned int a2)
{
  unsigned int *v4;
  uint64_t v5;
  float64x2_t *v6;
  uint64_t is_boundary_vertex;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v29;
  float64x2_t v30;
  unsigned int *v31;
  unsigned int *v32;
  uint64_t v33;

  v31 = 0;
  v32 = 0;
  v33 = 0;
  geom::mesh_connectivity::get_adjacent_vertices_to_vertex(a1[6], a2, (uint64_t)&v31);
  v4 = v32;
  v5 = (char *)v32 - (char *)v31;
  if (v32 != v31)
  {
    v6 = (float64x2_t *)(*a1 + 32 * a2);
    v29 = *v6;
    v30 = v6[1];
    is_boundary_vertex = geom::mesh_connectivity::is_boundary_vertex((geom::mesh_connectivity *)a1[6], a2);
    v8 = ~(unint64_t)is_boundary_vertex + (v5 >> 2);
    v4 = v31;
    if (v8)
    {
      v9 = 0;
      v10 = *a1;
      v11 = (v5 >> 2) + (is_boundary_vertex << 63 >> 63);
      v12 = v11 - 2;
      v13 = v11 - 1;
      v14 = 0.0;
      do
      {
        v15 = v9 + 1;
        v16 = v9 + 2;
        if (v12 == v9)
          v17 = 1;
        else
          v17 = v9 + 2;
        v18 = (float64x2_t *)(v10 + 32 * v4[v17]);
        v19 = vsubq_f64(*v18, v29);
        v20 = vsubq_f64(v18[1], v30);
        v21 = (float64x2_t *)(v10 + 32 * v4[v16 % v8 + 1]);
        v22 = vsubq_f64(*v21, v29);
        v23 = vsubq_f64(v21[1], v30);
        v24 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v20), v22, 1), v23, v19, 1);
        v25.f64[0] = v23.f64[0];
        v25.f64[1] = v22.f64[0];
        v23.f64[0] = vmulq_f64(v20, v23).f64[0] + vaddvq_f64(vmulq_f64(v19, v22));
        v20.f64[1] = v19.f64[0];
        v26 = vmlaq_f64(vmulq_f64(v25, vnegq_f64(v19)), v22, v20);
        v27 = vmulq_f64(v26, v26);
        v14 = v14 + atan2(sqrt(v27.f64[1] + vmulq_f64(v24, v24).f64[0] + v27.f64[0]), v23.f64[0]);
        v9 = v15;
      }
      while (v13 != v15);
      goto LABEL_10;
    }
  }
  v14 = 0.0;
  if (v4)
  {
LABEL_10:
    v32 = v4;
    operator delete(v4);
  }
  return 6.28318531 - v14;
}

double geom::ddg_evaluator<double>::compute_vertex_mean_curvature(uint64_t *a1, unsigned int a2)
{
  float64x2_t v3;
  float64x2_t v4;

  geom::ddg_evaluator<double>::compute_vertex_mean_curvature_vector(a1, a2, (uint64_t)&v3);
  return sqrt(vmulq_f64(v4, v4).f64[0] + vaddvq_f64(vmulq_f64(v3, v3))) * 0.5;
}

int8x16_t geom::ddg_evaluator<double>::compute_vertex_mean_curvature_vector@<Q0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  float64x2_t v6;
  float64x2_t v7;
  int8x16_t result;
  unint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  unint64_t v22;
  unint64_t v23;
  float64x2_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  void *__p;
  void *v30;

  v6.f64[0] = geom::ddg_evaluator<double>::compute_vertex_area(a1, a2);
  if (v6.f64[0] == 0.0)
  {
    result.i64[0] = 0;
    v9 = 0;
    v7.f64[0] = 0.0;
    goto LABEL_14;
  }
  v24 = v6;
  geom::ddg_evaluator<double>::compute_laplacian_stencil(a1, a2, 1, (uint64_t)&v27);
  v12 = v27;
  v13 = (char *)v28 - (char *)v27;
  if (v28 != v27)
  {
    v14 = 0;
    v15 = v13 >> 2;
    v16 = __p;
    if ((unint64_t)(v13 >> 2) <= 1)
      v15 = 1;
    v17 = 0uLL;
    v18 = 0uLL;
    do
    {
      v11.f64[0] = *((float64_t *)__p + v14);
      v19 = (float64x2_t *)(*a1 + 32 * v27[v14]);
      v20 = vmulq_n_f64(*v19, v11.f64[0]);
      v11 = vmulq_f64(v11, v19[1]);
      v18 = vaddq_f64(v18, v11);
      v17 = vaddq_f64(v17, v20);
      ++v14;
    }
    while (v15 != v14);
    *(_QWORD *)&v17.f64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v21 = vdivq_f64(vnegq_f64(v18), v24);
    result = (int8x16_t)vdivq_f64(vnegq_f64(v17), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v24.f64[0], 0));
    v9 = vextq_s8(result, result, 8uLL).u64[0];
    goto LABEL_10;
  }
  v16 = __p;
  v10.f64[0] = -0.0;
  v21 = vdivq_f64(v10, v24);
  result = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0);
  v9 = vextq_s8(result, result, 8uLL).u64[0];
  if (__p)
  {
LABEL_10:
    v22 = v9;
    v25 = result.i64[0];
    v30 = v16;
    operator delete(v16);
    v9 = v22;
    result.i64[0] = v25;
    v12 = v27;
  }
  if (v12)
  {
    v28 = v12;
    v23 = v9;
    v26 = result.i64[0];
    operator delete(v12);
    v9 = v23;
    result.i64[0] = v26;
  }
  v7 = v21;
LABEL_14:
  result.i64[1] = v9;
  *(int8x16_t *)a3 = result;
  *(float64x2_t *)(a3 + 16) = v7;
  return result;
}

void geom::ddg_evaluator<double>::compute_laplacian_stencil(uint64_t *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  unint64_t v9;
  unsigned int v10;
  double v11;
  uint64_t v12;
  double v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  double v43;
  double v44;
  unsigned int *v45;
  double *v46;
  double v47;
  unsigned int *v48;
  double *v49;
  unint64_t v50;
  unsigned int v51;
  _DWORD *v52;
  unsigned int v54[2];
  unsigned int v55[2];
  void *__p;
  _BYTE *v57;
  uint64_t v58;
  void *v59;
  _DWORD *v60;
  uint64_t v61;

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  __p = 0;
  v57 = 0;
  v58 = 0;
  geom::mesh_connectivity::get_incident_edges_to_vertex(a1[6], a2, (uint64_t)&v59);
  geom::mesh_connectivity::get_adjacent_vertices_to_vertex(a1[6], a2, (uint64_t)&__p);
  std::vector<unsigned int>::resize((std::vector<int> *)a4, (v57 - (_BYTE *)__p) >> 2);
  std::vector<double>::resize(a4 + 24, (v57 - (_BYTE *)__p) >> 2);
  v8 = v59;
  if (a3)
  {
    if (v60 == v59)
    {
      v45 = *(unsigned int **)a4;
      v46 = *(double **)(a4 + 24);
      v47 = -0.0;
      v8 = v60;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      v11 = 0.0;
      do
      {
        *(_QWORD *)v54 = 0;
        *(_QWORD *)v55 = 0;
        geom::mesh_connectivity::get_edge_vertices(a1[6], v8[v9], &v55[1], v55);
        geom::mesh_connectivity::get_edge_opposite_vertices(a1[6], *((_DWORD *)v59 + v9), &v54[1], v54);
        v12 = *a1;
        v13 = 0.0;
        if (v54[1] != -1)
        {
          v14 = (float64x2_t *)(v12 + 32 * v54[1]);
          v15 = (float64x2_t *)(v12 + 32 * v55[1]);
          v17 = *v14;
          v16 = v14[1];
          v18 = vsubq_f64(v15[1], v16);
          v19 = vsubq_f64(*v15, *v14);
          v20 = (float64x2_t *)(v12 + 32 * v55[0]);
          v21 = vsubq_f64(v20[1], v16);
          v22.f64[0] = v18.f64[0];
          v22.f64[1] = v19.f64[0];
          v23 = vsubq_f64(*v20, v17);
          v24.f64[0] = v21.f64[0];
          v24.f64[1] = v23.f64[0];
          v25 = vmlaq_f64(vmulq_f64(v24, vnegq_f64(v19)), v23, v22);
          v26 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v18), v23, 1), v21, v19, 1);
          v27 = vmulq_f64(v25, v25);
          v28 = sqrt(v27.f64[1] + vmulq_f64(v26, v26).f64[0] + v27.f64[0]);
          v13 = 0.0;
          if (v28 > 0.0)
            v13 = (vmulq_f64(v18, v21).f64[0] + vaddvq_f64(vmulq_f64(v19, v23))) / v28;
          if (*((_BYTE *)a1 + 56))
            v13 = fmax(v13, 0.0);
        }
        if (v54[0] == -1)
        {
          v43 = 0.0;
        }
        else
        {
          v29 = (float64x2_t *)(v12 + 32 * v54[0]);
          v30 = (float64x2_t *)(v12 + 32 * v55[1]);
          v31 = v29[1];
          v32 = vsubq_f64(v30[1], v31);
          v33 = vsubq_f64(*v30, *v29);
          v34 = (float64x2_t *)(v12 + 32 * v55[0]);
          v35 = vsubq_f64(v34[1], v31);
          v36.f64[0] = v32.f64[0];
          v36.f64[1] = v33.f64[0];
          v37 = vsubq_f64(*v34, *v29);
          v38.f64[0] = v35.f64[0];
          v38.f64[1] = v37.f64[0];
          v39 = vmlaq_f64(vmulq_f64(v38, vnegq_f64(v33)), v37, v36);
          v40 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v32), v37, 1), v35, v33, 1);
          v41 = vmulq_f64(v39, v39);
          v42 = sqrt(v41.f64[1] + vmulq_f64(v40, v40).f64[0] + v41.f64[0]);
          v43 = 0.0;
          if (v42 > 0.0)
            v43 = (vmulq_f64(v32, v35).f64[0] + vaddvq_f64(vmulq_f64(v33, v37))) / v42;
          if (*((_BYTE *)a1 + 56))
            v43 = fmax(v43, 0.0);
        }
        v44 = v13 + v43;
        v11 = v11 + v44;
        v45 = *(unsigned int **)a4;
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v10) = *((_DWORD *)__p + v10);
        v46 = *(double **)(a4 + 24);
        v46[v10] = v44 * 0.5;
        v9 = v10;
        v8 = v59;
        ++v10;
      }
      while (v9 < ((char *)v60 - (_BYTE *)v59) >> 2);
      v47 = v11 * -0.5;
    }
    *v45 = a2;
    *v46 = v47;
  }
  else
  {
    v48 = *(unsigned int **)a4;
    v49 = *(double **)(a4 + 24);
    v50 = ((char *)v60 - (_BYTE *)v59) >> 2;
    if (v60 != v59)
    {
      v51 = 1;
      v52 = __p;
      do
      {
        v48[v51] = v52[v51];
        v49[v51] = 1.0;
      }
      while (v50 > v51++);
    }
    *v48 = a2;
    *v49 = -(double)v50;
  }
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
    v8 = v59;
  }
  if (v8)
  {
    v60 = v8;
    operator delete(v8);
  }
}

__n128 geom::ddg_evaluator<double>::compute_face_gradient@<Q0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  __int128 v44;
  __n128 result;
  unint64_t v46;
  int8x16_t v47;
  float64x2_t v48;
  void *__p;
  void *v50;
  char *v51;
  float64x2_t v52[2];
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  _DWORD v57[2];
  unsigned int v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v8 = operator new(0xCuLL);
  v50 = v8 + 3;
  v51 = (char *)(v8 + 3);
  *(_QWORD *)v8 = 0;
  v8[2] = 0;
  __p = v8;
  geom::mesh_connectivity::get_face_vertices(a1[6], a2, (uint64_t)&__p);
  v9 = *((unsigned int *)__p + 1);
  v57[0] = *(_DWORD *)__p;
  v57[1] = v9;
  v58 = *((_DWORD *)__p + 2);
  v10 = *a1;
  v11 = *a1 + 32 * v57[0];
  v12 = *(float64x2_t *)(v11 + 16);
  v52[0] = *(float64x2_t *)v11;
  v52[1] = v12;
  v13 = (float64x2_t *)(v10 + 32 * v9);
  v14 = v13[1];
  v53 = *v13;
  v54 = v14;
  v15 = (float64x2_t *)(v10 + 32 * v58);
  v16 = v15[1];
  v17 = vsubq_f64(v53, v52[0]);
  v18 = vsubq_f64(v14, v12);
  v19 = vsubq_f64(*v15, v52[0]);
  v20 = vsubq_f64(v16, v12);
  v21 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v18), v19, 1), v20, v17, 1);
  v20.f64[1] = v19.f64[0];
  v55 = *v15;
  v56 = v16;
  v18.f64[1] = v17.f64[0];
  v22 = vmlaq_f64(vmulq_f64(v20, vnegq_f64(v17)), v19, v18);
  v23 = vmulq_f64(v22, v22);
  v23.f64[0] = v23.f64[1] + vmulq_f64(v21, v21).f64[0] + v23.f64[0];
  if (v23.f64[0] == 0.0)
  {
    v47.i64[0] = 0;
    v46 = 0;
    v23.f64[0] = 0.0;
    v48 = v23;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v31 = (float64x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
    v26.f64[0] = v21.f64[0];
    v26.f64[1] = v22.f64[0];
    v30 = vnegq_f64(v26);
    v27 = (float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL);
    v28 = vnegq_f64(v31);
    v29 = 0uLL;
    v30.f64[1] = v27.f64[0];
    v31.f64[1] = v21.f64[0];
    v32 = 0uLL;
    do
    {
      v27.f64[0] = *(float64_t *)(a3 + 8 * v57[v24]);
      v33 = v25 - 1;
      if (!(v24 * 4))
        v33 = 2;
      v34 = &v52[2 * v33];
      v36 = *v34;
      v35 = v34[1];
      v37 = v25 + 1;
      if (v25 == 2)
        v38 = 0;
      else
        v38 = v25 + 1;
      v39 = &v52[2 * v38];
      v40 = vsubq_f64(v36, *v39);
      v41 = vsubq_f64(v35, v39[1]);
      *(_QWORD *)&v42.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v28, v40, 1), v41, v22);
      v41.f64[1] = v40.f64[0];
      v43 = vmlaq_f64(vmulq_f64(v41, v30), v40, v31);
      v42.f64[1] = v43.f64[0];
      v29 = vmlaq_n_f64(v29, v42, v27.f64[0]);
      v32 = vmlaq_laneq_f64(v32, v27, v43, 1);
      ++v24;
      v25 = v37;
    }
    while (v24 != 3);
    *(_QWORD *)&v29.f64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
    v47 = (int8x16_t)vdivq_f64(v29, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0));
    v48 = vdivq_f64(v32, v23);
    v46 = vextq_s8(v47, v47, 8uLL).u64[0];
  }
  v50 = __p;
  operator delete(__p);
  *(_QWORD *)&v44 = v47.i64[0];
  *((_QWORD *)&v44 + 1) = v46;
  result = (__n128)v48;
  *a4 = v44;
  a4[1] = v48;
  return result;
}

double geom::ddg_evaluator<double>::compute_vertex_divergence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  double v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  double v45;
  _DWORD *v47;
  char *v48;
  char *v49;
  void *__p;
  unsigned int *v51;
  uint64_t v52;

  __p = 0;
  v51 = 0;
  v52 = 0;
  geom::mesh_connectivity::get_incident_faces_to_vertex(*(uint64_t **)(a1 + 48), a2, (uint64_t)&__p);
  v6 = operator new(0xCuLL);
  v48 = (char *)(v6 + 3);
  v49 = (char *)(v6 + 3);
  *(_QWORD *)v6 = 0;
  v6[2] = 0;
  v47 = v6;
  v7 = (unsigned int *)__p;
  v8 = v51;
  if (__p == v51)
  {
    v45 = 0.0;
  }
  else
  {
    v9 = 0.0;
    do
    {
      v10 = *v7;
      geom::mesh_connectivity::get_face_vertices(*(_QWORD *)(a1 + 48), *v7, (uint64_t)&v47);
      v11 = 0;
      v6 = v47;
      do
      {
        LOBYTE(v12) = v11;
        v13 = v47[v11++];
      }
      while (v13 != a2);
      v14 = *(_QWORD *)a1 + 32 * a2;
      v12 = v12;
      v15 = *(_QWORD *)a1
          + 32 * v47[(unsigned __int16)(v12 - 3 * ((21846 * v12 + 21846) >> 16) + 1)];
      v16 = *(_QWORD *)a1
          + 32 * v47[(unsigned __int16)(v12 - 3 * ((21846 * v12 + 43692) >> 16) + 2)];
      v17 = *(float64x2_t *)v14;
      v18 = *(float64x2_t *)(v14 + 16);
      v19 = *(float64x2_t *)v16;
      v20 = *(float64x2_t *)(v16 + 16);
      v21 = vsubq_f64(v18, v20);
      v22 = vsubq_f64(*(float64x2_t *)v14, *(float64x2_t *)v16);
      v23 = *(float64x2_t *)v15;
      v24 = *(float64x2_t *)(v15 + 16);
      v25 = vsubq_f64(v24, v20);
      v26 = vsubq_f64(*(float64x2_t *)v15, *(float64x2_t *)v16);
      v27.f64[0] = v21.f64[0];
      v27.f64[1] = v22.f64[0];
      v28.f64[0] = v25.f64[0];
      v28.f64[1] = v26.f64[0];
      v29 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v21), v26, 1), v25, v22, 1);
      v30 = vmlaq_f64(vmulq_f64(v28, vnegq_f64(v22)), v26, v27);
      v31 = vmulq_f64(v30, v30);
      v32 = sqrt(v31.f64[1] + vmulq_f64(v29, v29).f64[0] + v31.f64[0]);
      v33 = 0.0;
      v34 = 0.0;
      if (v32 > 0.0)
        v34 = (vmulq_f64(v21, v25).f64[0] + vaddvq_f64(vmulq_f64(v22, v26))) / v32;
      v35 = vsubq_f64(v17, v23);
      v36 = vsubq_f64(v18, v24);
      v37 = vsubq_f64(v19, v23);
      v38 = vsubq_f64(v20, v24);
      v39.f64[0] = v36.f64[0];
      v39.f64[1] = v35.f64[0];
      v40.f64[0] = v38.f64[0];
      v40.f64[1] = v37.f64[0];
      v41 = vmlaq_f64(vmulq_f64(v40, vnegq_f64(v35)), v37, v39);
      v42 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v36), v37, 1), v38, v35, 1);
      v43 = vmulq_f64(v41, v41);
      v44 = sqrt(v43.f64[1] + vmulq_f64(v42, v42).f64[0] + v43.f64[0]);
      if (v44 > 0.0)
        v33 = (vmulq_f64(v36, v38).f64[0] + vaddvq_f64(vmulq_f64(v35, v37))) / v44;
      v9 = v9
         + v33
         * (vmulq_f64(vsubq_f64(v20, v18), *(float64x2_t *)(a3 + 32 * v10 + 16)).f64[0]
          + vaddvq_f64(vmulq_f64(vsubq_f64(v19, v17), *(float64x2_t *)(a3 + 32 * v10))))
         + v34
         * (vmulq_f64(vsubq_f64(v24, v18), *(float64x2_t *)(a3 + 32 * v10 + 16)).f64[0]
          + vaddvq_f64(vmulq_f64(vsubq_f64(v23, v17), *(float64x2_t *)(a3 + 32 * v10))));
      ++v7;
    }
    while (v7 != v8);
    v45 = v9 * 0.5;
  }
  v48 = (char *)v6;
  operator delete(v6);
  if (__p)
  {
    v51 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v45;
}

uint64_t geom::simplify_triangle_mesh_options<float>::get_preserve_uv_boundaries(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t geom::simplify_triangle_mesh_options<float>::set_preserve_uv_boundaries(uint64_t result, char a2)
{
  *(_BYTE *)(result + 128) = a2;
  return result;
}

BOOL geom::simplify_triangle_mesh_options<float>::has_fixed_vertex_indices(_QWORD *a1)
{
  return a1[1] != *a1;
}

_QWORD *geom::simplify_triangle_mesh_options<float>::clear_fixed_vertex_indices(_QWORD *result)
{
  result[1] = *result;
  return result;
}

void geom::simplify_triangle_mesh_options<float>::set_fixed_vertex_indices(std::vector<int> *a1, const void *a2, std::vector<int>::size_type __sz)
{
  std::vector<unsigned int>::resize(a1, __sz);
  if (__sz)
    memmove(a1->__begin_, a2, 4 * __sz);
}

uint64_t geom::simplify_triangle_mesh_options<float>::uv_values_count(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
}

_QWORD *geom::simplify_triangle_mesh_options<float>::clear_uvs(_QWORD *result)
{
  result[4] = result[3];
  result[7] = result[6];
  result[10] = result[9];
  result[13] = 0;
  result[14] = 0;
  result[12] = 0;
  return result;
}

void geom::simplify_triangle_mesh_options<float>::set_uvs_for_face_subset(std::vector<int> *a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, const void *a6, int *a7, int *a8, int *a9)
{
  void **p_begin;
  std::vector<int>::size_type v18;

  p_begin = (void **)&a1[1].__begin_;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&a1[1], a2);
  if (a2)
    memmove(*p_begin, a3, 8 * a2);
  std::vector<unsigned int>::resize(a1 + 2, a4);
  if (a4)
    memmove(a1[2].__begin_, a5, 4 * a4);
  v18 = 3 * a4;
  std::vector<unsigned int>::resize(a1 + 3, v18);
  if (4 * v18)
    memmove(a1[3].__begin_, a6, 4 * v18);
  a1[4].__begin_ = a7;
  a1[4].__end_ = a8;
  a1[4].__end_cap_.__value_ = a9;
}

void geom::simplify_triangle_mesh_options<float>::set_uvs(std::vector<int> *a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, int *a6, int *a7)
{
  void **p_begin;
  uint64_t v15;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v17;

  p_begin = (void **)&a1[1].__begin_;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&a1[1], a2);
  if (a2)
    memmove(*p_begin, a3, 8 * a2);
  std::vector<unsigned int>::resize(a1 + 2, a4);
  if (a4)
  {
    v15 = 0;
    begin = a1[2].__begin_;
    do
    {
      begin[v15] = v15;
      ++v15;
    }
    while (a4 != v15);
  }
  v17 = 3 * a4;
  std::vector<unsigned int>::resize(a1 + 3, v17);
  if (4 * v17)
    memmove(a1[3].__begin_, a5, 4 * v17);
  a1[4].__begin_ = a6;
  a1[4].__end_ = 0;
  a1[4].__end_cap_.__value_ = a7;
}

uint64_t geom::simplify_triangle_mesh_options<float>::set_output_new_to_old_vertex_map(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  return result;
}

uint64_t geom::simplify_triangle_mesh_options<float>::get_output_new_to_old_vertex_map(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

BOOL geom::simplify_triangle_mesh_options<float>::has_uvs(_QWORD *a1)
{
  return a1[4] != a1[3] && a1[10] != a1[9] && a1[12] && a1[14] != 0;
}

double geom_create_simplify_triangle_mesh_opt_3f()
{
  uint64_t v0;
  double result;

  v0 = geom_simplify_triangle_mesh_opt_3f_obj_alloc();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_QWORD *)(v0 + 144) = 0;
  return result;
}

double geom_create_simplify_triangle_mesh_opt_3d()
{
  uint64_t v0;
  double result;

  v0 = geom_simplify_triangle_mesh_opt_3d_obj_alloc();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_QWORD *)(v0 + 144) = 0;
  return result;
}

uint64_t geom_simplify_triangle_mesh_opt_set_preserve_uv_boundaries_3f(uint64_t result, char a2)
{
  *(_BYTE *)(result + 144) = a2;
  return result;
}

uint64_t geom_simplify_triangle_mesh_opt_set_preserve_uv_boundaries_3d(uint64_t result, char a2)
{
  *(_BYTE *)(result + 144) = a2;
  return result;
}

uint64_t geom_simplify_triangle_mesh_opt_get_preserve_uv_boundaries_3f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t geom_simplify_triangle_mesh_opt_get_preserve_uv_boundaries_3d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void geom_simplify_triangle_mesh_opt_set_fixed_vertex_indices_3f(uint64_t a1, std::vector<int>::size_type a2, const void *a3)
{
  void **v5;

  v5 = (void **)(a1 + 16);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 16), a2);
  if (a2)
    memmove(*v5, a3, 4 * a2);
}

void geom_simplify_triangle_mesh_opt_set_fixed_vertex_indices_3d(uint64_t a1, std::vector<int>::size_type a2, const void *a3)
{
  void **v5;

  v5 = (void **)(a1 + 16);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 16), a2);
  if (a2)
    memmove(*v5, a3, 4 * a2);
}

uint64_t geom_simplify_triangle_mesh_opt_get_fixed_vertex_indices_count_3f(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
}

uint64_t geom_simplify_triangle_mesh_opt_get_fixed_vertex_indices_count_3d(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2;
}

uint64_t geom_simplify_triangle_mesh_opt_get_fixed_vertex_indices_data_3f(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    return 0;
  else
    return *(_QWORD *)(a1 + 16);
}

uint64_t geom_simplify_triangle_mesh_opt_get_fixed_vertex_indices_data_3d(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 16))
    return 0;
  else
    return *(_QWORD *)(a1 + 16);
}

uint64_t geom_simplify_triangle_mesh_opt_clear_fixed_vertex_indices_3f(uint64_t result)
{
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 16);
  return result;
}

uint64_t geom_simplify_triangle_mesh_opt_clear_fixed_vertex_indices_3d(uint64_t result)
{
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 16);
  return result;
}

void geom_simplify_triangle_mesh_opt_set_uvs_3f(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, int *a6, int *a7)
{
  geom::simplify_triangle_mesh_options<float>::set_uvs((std::vector<int> *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

void geom_simplify_triangle_mesh_opt_set_uvs_3d(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, int *a6, int *a7)
{
  geom::simplify_triangle_mesh_options<float>::set_uvs((std::vector<int> *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

void geom_simplify_triangle_mesh_opt_set_uvs_for_face_subset_3f(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, const void *a6, int *a7, int *a8, int *a9)
{
  geom::simplify_triangle_mesh_options<float>::set_uvs_for_face_subset((std::vector<int> *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

void geom_simplify_triangle_mesh_opt_set_uvs_for_face_subset_3d(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, const void *a6, int *a7, int *a8, int *a9)
{
  geom::simplify_triangle_mesh_options<float>::set_uvs_for_face_subset((std::vector<int> *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

_QWORD *geom_simplify_triangle_mesh_opt_clear_uvs_3f(_QWORD *result)
{
  result[6] = result[5];
  result[9] = result[8];
  result[12] = result[11];
  result[15] = 0;
  result[16] = 0;
  result[14] = 0;
  return result;
}

_QWORD *geom_simplify_triangle_mesh_opt_clear_uvs_3d(_QWORD *result)
{
  result[6] = result[5];
  result[9] = result[8];
  result[12] = result[11];
  result[15] = 0;
  result[16] = 0;
  result[14] = 0;
  return result;
}

uint64_t geom_simplify_triangle_mesh_opt_get_uv_value_count_3f(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

uint64_t geom_simplify_triangle_mesh_opt_get_uv_value_count_3d(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

uint64_t geom_simplify_triangle_mesh_opt_get_uv_value_data_3f(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40))
    return 0;
  else
    return *(_QWORD *)(a1 + 40);
}

uint64_t geom_simplify_triangle_mesh_opt_get_uv_value_data_3d(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40))
    return 0;
  else
    return *(_QWORD *)(a1 + 40);
}

uint64_t geom_simplify_triangle_mesh_opt_get_triangles_with_uvs_count_3f(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
}

uint64_t geom_simplify_triangle_mesh_opt_get_triangles_with_uvs_count_3d(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
}

uint64_t geom_simplify_triangle_mesh_opt_get_triangles_with_uvs_data_3f(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 64))
    return 0;
  else
    return *(_QWORD *)(a1 + 64);
}

uint64_t geom_simplify_triangle_mesh_opt_get_triangles_with_uvs_data_3d(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 64))
    return 0;
  else
    return *(_QWORD *)(a1 + 64);
}

uint64_t geom_simplify_triangle_mesh_opt_get_triangle_uv_indices_data_3f(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 88))
    return 0;
  else
    return *(_QWORD *)(a1 + 88);
}

uint64_t geom_simplify_triangle_mesh_opt_get_triangle_uv_indices_data_3d(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 88))
    return 0;
  else
    return *(_QWORD *)(a1 + 88);
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_uv_value_collection_3f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_uv_value_collection_3d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_triangles_with_uvs_collection_3f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_triangles_with_uvs_collection_3d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_triangle_uv_indices_collection_3f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_triangle_uv_indices_collection_3d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

uint64_t geom_simplify_triangle_mesh_opt_set_output_new_to_old_vertex_map_collection_3f(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 136) = a2;
  return result;
}

uint64_t geom_simplify_triangle_mesh_opt_set_output_new_to_old_vertex_map_collection_3d(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 136) = a2;
  return result;
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_new_to_old_vertex_map_collection_3d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

uint64_t geom_simplify_triangle_mesh_opt_get_output_new_to_old_vertex_map_collection_3f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

void geom_simplify_triangle_mesh_with_default_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v9;
  std::vector<int> *v10;
  _QWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v15 = 0;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11[0] = a2;
  v11[1] = a1;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = a4;
  v11[3] = (12 * a3) >> 2;
  v9 = (_QWORD *)geom::collection_to_vector<float>(a6);
  v10 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
  geom::internal::simplify_triangle_mesh<float>((uint64_t)v11, a5, v9, v10);
}

void geom_simplify_triangle_mesh_with_default_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v9;
  std::vector<int> *v10;
  _QWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v15 = 0;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11[0] = a2;
  v11[1] = a1;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = a4;
  v11[3] = (12 * a3) >> 2;
  v9 = (_QWORD *)geom::collection_to_vector<float>(a6);
  v10 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
  geom::internal::simplify_triangle_mesh<double>((uint64_t)v11, a5, v9, v10);
}

void geom_simplify_triangle_mesh_with_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::vector<int> *v24;
  uint64_t v25;
  std::vector<int> *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  std::vector<int> *v30;
  std::vector<int> *v31;
  _QWORD v32[6];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;

  v11 = *(_QWORD *)(a8 + 16);
  v10 = *(_QWORD *)(a8 + 24);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v12 = v10 - v11;
  if (!v12)
    v11 = 0;
  v33 = 0uLL;
  v32[0] = a2;
  v32[1] = a1;
  v32[4] = v11;
  v32[5] = (v12 >> 2);
  v32[2] = a4;
  v32[3] = (12 * a3) >> 2;
  v13 = *(_QWORD *)(a8 + 136);
  v15 = *(_QWORD *)(a8 + 40);
  v14 = *(_QWORD *)(a8 + 48);
  v16 = v14 - v15;
  if (v14 == v15
    || (v17 = *(_QWORD *)(a8 + 88), *(_QWORD *)(a8 + 96) == v17)
    || (v18 = *(_QWORD *)(a8 + 112)) == 0
    || (v19 = *(_QWORD *)(a8 + 128)) == 0)
  {
    v29 = (_QWORD *)geom::collection_to_vector<float>(a6);
    v30 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
    if (v13)
    {
      v31 = (std::vector<int> *)geom::collection_to_vector<float>(v13);
      geom::internal::simplify_and_correspond_triangle_mesh<float>((uint64_t)v32, a5, v29, v30, v31);
    }
    else
    {
      geom::internal::simplify_triangle_mesh<float>((uint64_t)v32, a5, v29, v30);
    }
  }
  else
  {
    *(_QWORD *)&v33 = *(_QWORD *)(a8 + 40);
    *((_QWORD *)&v33 + 1) = v16 >> 3;
    v20 = *(_QWORD *)(a8 + 64);
    v21 = *(_QWORD *)(a8 + 72) - v20;
    if (!v21)
      v20 = 0;
    *(_QWORD *)&v34 = v20;
    *((_QWORD *)&v34 + 1) = v21 >> 2;
    *(_QWORD *)&v35 = v17;
    *((_QWORD *)&v35 + 1) = (v21 >> 1) + (v21 >> 2);
    v36 = *(_BYTE *)(a8 + 144);
    v22 = *(_QWORD *)(a8 + 120);
    if (v13)
    {
      v23 = (_QWORD *)geom::collection_to_vector<float>(a6);
      v24 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
      v25 = geom::collection_to_vector<float>(v19);
      v26 = (std::vector<int> *)geom::collection_to_vector<float>(v13);
      v27 = (_QWORD *)geom::collection_to_vector<float>(v18);
      if (v22)
      {
        v28 = geom::collection_to_vector<float>(v22);
        geom::internal::simplify_and_correspond_triangle_mesh<float>((uint64_t)v32, a5, v23, v24, v27, v28, v25, v26);
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        geom::internal::simplify_and_correspond_triangle_mesh<float>((uint64_t)v32, a5, v23, v24, v27, (uint64_t)&v37, v25, v26);
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
      }
    }
    else
    {
    }
  }
}

void sub_228973894(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void geom_simplify_triangle_mesh_with_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::vector<int> *v24;
  uint64_t v25;
  std::vector<int> *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  std::vector<int> *v30;
  std::vector<int> *v31;
  _QWORD v32[6];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;

  v11 = *(_QWORD *)(a8 + 16);
  v10 = *(_QWORD *)(a8 + 24);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v12 = v10 - v11;
  if (!v12)
    v11 = 0;
  v33 = 0uLL;
  v32[0] = a2;
  v32[1] = a1;
  v32[4] = v11;
  v32[5] = (v12 >> 2);
  v32[2] = a4;
  v32[3] = (12 * a3) >> 2;
  v13 = *(_QWORD *)(a8 + 136);
  v15 = *(_QWORD *)(a8 + 40);
  v14 = *(_QWORD *)(a8 + 48);
  v16 = v14 - v15;
  if (v14 == v15
    || (v17 = *(_QWORD *)(a8 + 88), *(_QWORD *)(a8 + 96) == v17)
    || (v18 = *(_QWORD *)(a8 + 112)) == 0
    || (v19 = *(_QWORD *)(a8 + 128)) == 0)
  {
    v29 = (_QWORD *)geom::collection_to_vector<float>(a6);
    v30 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
    if (v13)
    {
      v31 = (std::vector<int> *)geom::collection_to_vector<float>(v13);
      geom::internal::simplify_and_correspond_triangle_mesh<double>((uint64_t)v32, a5, v29, v30, v31);
    }
    else
    {
      geom::internal::simplify_triangle_mesh<double>((uint64_t)v32, a5, v29, v30);
    }
  }
  else
  {
    *(_QWORD *)&v33 = *(_QWORD *)(a8 + 40);
    *((_QWORD *)&v33 + 1) = v16 >> 3;
    v20 = *(_QWORD *)(a8 + 64);
    v21 = *(_QWORD *)(a8 + 72) - v20;
    if (!v21)
      v20 = 0;
    *(_QWORD *)&v34 = v20;
    *((_QWORD *)&v34 + 1) = v21 >> 2;
    *(_QWORD *)&v35 = v17;
    *((_QWORD *)&v35 + 1) = (v21 >> 1) + (v21 >> 2);
    v36 = *(_BYTE *)(a8 + 144);
    v22 = *(_QWORD *)(a8 + 120);
    if (v13)
    {
      v23 = (_QWORD *)geom::collection_to_vector<float>(a6);
      v24 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
      v25 = geom::collection_to_vector<float>(v19);
      v26 = (std::vector<int> *)geom::collection_to_vector<float>(v13);
      v27 = (_QWORD *)geom::collection_to_vector<float>(v18);
      if (v22)
      {
        v28 = geom::collection_to_vector<float>(v22);
        geom::internal::simplify_and_correspond_triangle_mesh<double>((uint64_t)v32, a5, v23, v24, v27, v28, v25, v26);
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        geom::internal::simplify_and_correspond_triangle_mesh<double>((uint64_t)v32, a5, v23, v24, v27, (uint64_t)&v37, v25, v26);
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
      }
    }
    else
    {
    }
  }
}

void sub_228973AB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void geom_simplify_triangle_mesh_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v9;
  std::vector<int> *v10;
  _QWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v15 = 0;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11[0] = a2;
  v11[1] = a1;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = a4;
  v11[3] = (12 * a3) >> 2;
  v9 = (_QWORD *)geom::collection_to_vector<float>(a6);
  v10 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
  geom::internal::simplify_triangle_mesh<float>((uint64_t)v11, a5, v9, v10);
}

void geom_simplify_triangle_mesh_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v9;
  std::vector<int> *v10;
  _QWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v15 = 0;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11[0] = a2;
  v11[1] = a1;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = a4;
  v11[3] = (12 * a3) >> 2;
  v9 = (_QWORD *)geom::collection_to_vector<float>(a6);
  v10 = (std::vector<int> *)geom::collection_to_vector<float>(a7);
  geom::internal::simplify_triangle_mesh<double>((uint64_t)v11, a5, v9, v10);
}

void geom_simplify_triangle_mesh_with_uvs_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD v15[12];
  char v16;

  v15[0] = a2;
  v15[1] = a1;
  v15[4] = 0;
  v15[5] = 0;
  v15[2] = a4;
  v15[3] = (12 * a3) >> 2;
  v15[6] = a6;
  v15[7] = a5;
  v15[8] = a8;
  v15[9] = a7;
  v15[10] = a9;
  v15[11] = 3 * a7;
  v16 = 0;
}

void geom::`anonymous namespace'::geom_simplify_triangle_mesh_with_uvs_helper_3<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  std::vector<int> *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;

  v13 = (_QWORD *)geom::collection_to_vector<float>(a3);
  v14 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  v15 = (_QWORD *)geom::collection_to_vector<float>(a5);
  v16 = geom::collection_to_vector<float>(a7);
  if (a6)
  {
    v17 = geom::collection_to_vector<float>(a6);
    geom::internal::simplify_triangle_mesh<float>(a1, a2, v13, v14, v15, v17, v16);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
    geom::internal::simplify_triangle_mesh<float>(a1, a2, v13, v14, v15, (uint64_t)&__p, v16);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
}

void sub_228973D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void geom_simplify_triangle_mesh_with_uvs_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD v15[12];
  char v16;

  v15[0] = a2;
  v15[1] = a1;
  v15[4] = 0;
  v15[5] = 0;
  v15[2] = a4;
  v15[3] = (12 * a3) >> 2;
  v15[6] = a6;
  v15[7] = a5;
  v15[8] = a8;
  v15[9] = a7;
  v15[10] = a9;
  v15[11] = 3 * a7;
  v16 = 0;
}

void geom::`anonymous namespace'::geom_simplify_triangle_mesh_with_uvs_helper_3<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  std::vector<int> *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;

  v13 = (_QWORD *)geom::collection_to_vector<float>(a3);
  v14 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  v15 = (_QWORD *)geom::collection_to_vector<float>(a5);
  v16 = geom::collection_to_vector<float>(a7);
  if (a6)
  {
    v17 = geom::collection_to_vector<float>(a6);
    geom::internal::simplify_triangle_mesh<double>(a1, a2, v13, v14, v15, v17, v16);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
    geom::internal::simplify_triangle_mesh<double>(a1, a2, v13, v14, v15, (uint64_t)&__p, v16);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
}

void sub_228973EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL geom::sparse_linear_solver<float>::entry::operator<(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3)
    return 1;
  if (v2 == v3)
    return *a1 < *a2;
  return 0;
}

double geom::sparse_linear_solver<float>::sparse_linear_solver(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_BYTE *)(a1 + 248) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  return result;
}

char *geom::sparse_linear_solver<float>::add_entry(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  uint64_t **v7;
  char *result;
  char v9;
  float v10;
  unsigned int v11[2];
  float v12;
  unsigned int *v13;

  v12 = a4;
  v7 = (uint64_t **)(a1 + 8);
  v13 = (unsigned int *)__PAIR64__(a3, a2);
  result = std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__emplace_unique_key_args<geom::sparse_linear_solver<float>::entry,geom::sparse_linear_solver<float>::entry,float const&>((uint64_t **)(a1 + 8), (unsigned int *)&v13, &v13, &v12);
  if ((v9 & 1) == 0)
  {
    v10 = v12;
    v11[0] = a2;
    v11[1] = a3;
    v13 = v11;
    result = std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__emplace_unique_key_args<geom::sparse_linear_solver<float>::entry,std::piecewise_construct_t const&,std::tuple<geom::sparse_linear_solver<float>::entry&&>,std::tuple<>>(v7, v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v13);
    *((float *)result + 9) = v10;
  }
  *(_BYTE *)(a1 + 248) = 0;
  return result;
}

void geom::sparse_linear_solver<float>::clear_enrties(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 16;
  _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1 + 8, *(_QWORD **)(a1 + 16));
  *(_QWORD *)(v1 - 8) = v1;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 232) = 0;
}

uint64_t geom::sparse_linear_solver<float>::get_entry(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v3 = a1 + 8;
  if ((uint64_t *)(a1 + 16) == std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::find<geom::sparse_linear_solver<float>::entry>(a1 + 8, v5))return 0;
  else
    return *(unsigned int *)std::map<geom::sparse_linear_solver<float>::entry,float,std::less<geom::sparse_linear_solver<float>::entry>,std::allocator<std::pair<geom::sparse_linear_solver<float>::entry const,float>>>::at(v3, v5) | 0x100000000;
}

uint64_t std::map<geom::sparse_linear_solver<float>::entry,float,std::less<geom::sparse_linear_solver<float>::entry>,std::allocator<std::pair<geom::sparse_linear_solver<float>::entry const,float>>>::at(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__find_equal<geom::sparse_linear_solver<float>::entry>(a1, &v4, a2);
  if (!v2)
    abort();
  return v2 + 36;
}

BOOL geom::sparse_linear_solver<float>::factor(unsigned int *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _OWORD *v9;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SparseFactorization_t v29;
  __int128 v30;
  SparseMatrix_Float *v31;
  SparseSymbolicFactorOptions *p_sfoptions;
  SparseNumericFactorOptions *v33;
  std::vector<int>::size_type v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BOOL8 result;
  _OWORD v54[2];
  SparseSymbolicFactorOptions sfoptions;
  SparseMatrix_Float v56;
  _OWORD v57[2];
  _OWORD v58[2];
  uint64_t v59;
  uint64_t (*v60)(const char *);
  _OWORD v61[2];
  uint64_t v62;
  _OWORD __x[6];
  uint64_t v64;

  v5 = *((_QWORD *)a1 + 4);
  v4 = (uint64_t)(a1 + 8);
  *((_QWORD *)a1 + 5) = v5;
  v6 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 8) = v6;
  v7 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 11) = v7;
  v8 = a1[1];
  a1[52] = *a1;
  v9 = a1 + 52;
  *((_BYTE *)a1 + 236) = 1;
  a1[53] = v8;
  *((_QWORD *)a1 + 30) = v7;
  *((_QWORD *)a1 + 27) = v5;
  *((_QWORD *)a1 + 28) = v6;
  v10 = v8 + 1;
  if (a2 > 1)
  {
    *(_QWORD *)&__x[0] = 0;
    std::vector<long>::resize(v4, v10, __x);
    v34 = *((_QWORD *)a1 + 3);
    LODWORD(__x[0]) = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 14), v34, (std::vector<int>::const_reference)__x);
    v35 = *((_QWORD *)a1 + 3);
    LODWORD(__x[0]) = 0;
    std::vector<float>::resize((uint64_t)(a1 + 20), v35, __x);
    *((_WORD *)a1 + 116) &= 0xFFF2u;
    v36 = (uint64_t *)*((_QWORD *)a1 + 4);
    v37 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 27) = v36;
    *((_QWORD *)a1 + 28) = v37;
    v38 = *((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 30) = v38;
    v39 = (unsigned int *)*((_QWORD *)a1 + 1);
    if (v39 != a1 + 4)
    {
      v40 = 0;
      do
      {
        ++v36[v39[8] + 1];
        *(_DWORD *)(v37 + 4 * v40) = v39[7];
        *(_DWORD *)(v38 + 4 * v40) = v39[9];
        v41 = (unsigned int *)*((_QWORD *)v39 + 1);
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = *(unsigned int **)v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (unsigned int *)*((_QWORD *)v39 + 2);
            v22 = *(_QWORD *)v42 == (_QWORD)v39;
            v39 = v42;
          }
          while (!v22);
        }
        ++v40;
        v39 = v42;
      }
      while (v42 != a1 + 4);
    }
    v43 = a1[53];
    if (v43)
    {
      if (v43 + 1 > 2)
        v44 = v43 + 1;
      else
        v44 = 2;
      v47 = *v36;
      v45 = v36 + 1;
      v46 = v47;
      v48 = v44 - 1;
      do
      {
        v46 += *v45;
        *v45++ = v46;
        --v48;
      }
      while (v48);
    }
    v49 = *((_OWORD *)a1 + 14);
    *(_OWORD *)&v56.structure.rowCount = *v9;
    *(_OWORD *)&v56.structure.rowIndices = v49;
    v56.data = (float *)*((_QWORD *)a1 + 30);
    *(_OWORD *)&sfoptions.control = xmmword_24F14BA80;
    *(_OWORD *)&sfoptions.ignoreRowsAndColumns = unk_24F14BA90;
    sfoptions.free = (void (__cdecl *)(void *))0x191D68428;
    sfoptions.reportError = (void (__cdecl *)(const char *))geom::sparse_linear_solver<float>::factor(geom_factorization_type)::{lambda(char const*)#1}::__invoke;
    v54[0] = xmmword_2289C34C8;
    v54[1] = unk_2289C34D8;
    v31 = &v56;
    p_sfoptions = &sfoptions;
    v33 = (SparseNumericFactorOptions *)v54;
    v29 = SparseFactorizationQR;
  }
  else
  {
    *(_QWORD *)&__x[0] = 0;
    std::vector<long>::resize(v4, v10, __x);
    v11 = *((_QWORD *)a1 + 3);
    LODWORD(__x[0]) = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 14), v11, (std::vector<int>::const_reference)__x);
    v12 = *a1 + ((*((_QWORD *)a1 + 3) - (unint64_t)*a1) >> 1);
    LODWORD(__x[0]) = 0;
    std::vector<float>::resize((uint64_t)(a1 + 20), v12, __x);
    *((_WORD *)a1 + 116) = a1[58] & 0xFFF0 | 0xE;
    v13 = (uint64_t *)*((_QWORD *)a1 + 4);
    v14 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 27) = v13;
    *((_QWORD *)a1 + 28) = v14;
    v15 = *((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 30) = v15;
    v16 = (unsigned int *)*((_QWORD *)a1 + 1);
    if (v16 != a1 + 4)
    {
      v17 = 0;
      do
      {
        v18 = v16[7];
        v19 = v16[8];
        if (v18 >= v19)
        {
          ++v13[v19 + 1];
          *(_DWORD *)(v14 + 4 * v17) = v18;
          *(_DWORD *)(v15 + 4 * v17++) = v16[9];
        }
        v20 = (unsigned int *)*((_QWORD *)v16 + 1);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = *(unsigned int **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (unsigned int *)*((_QWORD *)v16 + 2);
            v22 = *(_QWORD *)v21 == (_QWORD)v16;
            v16 = v21;
          }
          while (!v22);
        }
        v16 = v21;
      }
      while (v21 != a1 + 4);
    }
    v23 = a1[53];
    if (v23)
    {
      if (v23 + 1 > 2)
        v24 = v23 + 1;
      else
        v24 = 2;
      v27 = *v13;
      v25 = v13 + 1;
      v26 = v27;
      v28 = v24 - 1;
      do
      {
        v26 += *v25;
        *v25++ = v26;
        --v28;
      }
      while (v28);
    }
    v29 = a2 != 0;
    v30 = *((_OWORD *)a1 + 14);
    v61[0] = *v9;
    v61[1] = v30;
    v62 = *((_QWORD *)a1 + 30);
    v58[0] = xmmword_24F14BA80;
    v58[1] = unk_24F14BA90;
    v59 = 0x191D68428;
    v60 = geom::sparse_linear_solver<float>::factor(geom_factorization_type)::{lambda(char const*)#1}::__invoke;
    v57[0] = xmmword_2289C34C8;
    v57[1] = unk_2289C34D8;
    v31 = (SparseMatrix_Float *)v61;
    p_sfoptions = (SparseSymbolicFactorOptions *)v58;
    v33 = (SparseNumericFactorOptions *)v57;
  }
  SparseFactor(v29, v31, p_sfoptions, v33, (uint64_t)__x);
  v50 = __x[5];
  *(_OWORD *)(a1 + 42) = __x[4];
  *(_OWORD *)(a1 + 46) = v50;
  *((_QWORD *)a1 + 25) = v64;
  v51 = __x[1];
  *(_OWORD *)(a1 + 26) = __x[0];
  *(_OWORD *)(a1 + 30) = v51;
  v52 = __x[3];
  *(_OWORD *)(a1 + 34) = __x[2];
  *(_OWORD *)(a1 + 38) = v52;
  result = a1[26] == 0;
  *((_BYTE *)a1 + 248) = result;
  return result;
}

void std::vector<long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long>::__append((void **)a1, a2 - v3, a3);
  }
}

double SparseFactor@<D0>(SparseFactorization_t a1@<W0>, SparseMatrix_Float *a2@<X1>, SparseSymbolicFactorOptions *sfoptions@<X2>, SparseNumericFactorOptions *a4@<X3>, uint64_t a5@<X8>)
{
  int columnCount;
  int v8;
  double result;
  void (__cdecl *reportError)(const char *);
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char __str[264];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a2->structure.rowCount <= 0)
  {
    if (!sfoptions->reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SparseFactor();
      goto LABEL_34;
    }
    memset(__str, 0, 256);
    snprintf(__str, 0x100uLL, "%s.rowCount must be > 0, but is %d.\n", a4);
  }
  else
  {
    columnCount = a2->structure.columnCount;
    if (columnCount <= 0)
    {
      if (!sfoptions->reportError)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SparseFactor();
        goto LABEL_34;
      }
      memset(__str, 0, 256);
      snprintf(__str, 0x100uLL, "%s.columnCount must be > 0, but is %d.\n", a4);
    }
    else if (*(&a2->structure.blockSize + 2))
    {
      v8 = *(_WORD *)&a2->structure.attributes & 0xC;
      if (a2->structure.rowCount == columnCount || v8 != 12)
      {
        if ((a1 & 0xFE) == 0x28)
        {
          _SparseFactorQR_Float((SparseOpaqueFactorization_Float *)a5, a1, a2, sfoptions, a4);
          return result;
        }
        if (v8 == 12)
        {
          _SparseFactorSymmetric_Float((SparseOpaqueFactorization_Float *)a5, a1, a2, sfoptions, a4);
          return result;
        }
        reportError = sfoptions->reportError;
        if (reportError)
        {
          memset(&__str[69], 0, 187);
          strcpy(__str, "Cannot perform symmetric matrix factorization of non-square matrix.\n");
          goto LABEL_21;
        }
        v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v12)
          SparseFactor(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_34:
        _SparseTrap();
        goto LABEL_35;
      }
      if (!sfoptions->reportError)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SparseFactor();
        goto LABEL_34;
      }
      memset(__str, 0, 256);
      snprintf(__str, 0x100uLL, "%s.attributes.kind=SparseSymmetric, but %s.rowCount (%d) != %s.columnCount (%d).\n", a4);
    }
    else
    {
      if (!sfoptions->reportError)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SparseFactor();
        goto LABEL_34;
      }
      memset(__str, 0, 256);
      snprintf(__str, 0x100uLL, "%s.blockSize must be > 0, but is %d.]n", a4);
    }
  }
  reportError = sfoptions->reportError;
LABEL_21:
  ((void (*)(char *))reportError)(__str);
LABEL_35:
  result = 0.0;
  *(_QWORD *)(a5 + 96) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)a5 = -4;
  *(_DWORD *)(a5 + 8) = -4;
  return result;
}

uint64_t geom::sparse_linear_solver<float>::solve(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float *a5)
{
  int v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (__cdecl *reportError)(const char *);
  int v23;
  int v24;
  int v25;
  void (__cdecl *free)(void *);
  void *v27;
  void *v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  SparseOpaqueFactorization_Float Factored;
  uint64_t v38;
  DenseMatrix_Float Soln;
  DenseMatrix_Float RHS;
  SparseSymbolicFactorOptions v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 248))
  {
    v5 = a2;
    if (*(_DWORD *)a1 == a2)
    {
      v6 = a4;
      if (*(_DWORD *)(a1 + 4) == a4)
      {
        v7 = *(_OWORD *)(a1 + 104);
        v8 = *(_OWORD *)(a1 + 152);
        v9 = *(_OWORD *)(a1 + 184);
        *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 168);
        *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v9;
        v38 = *(_QWORD *)(a1 + 200);
        v10 = *(_OWORD *)(a1 + 120);
        *(_OWORD *)&Factored.status = v7;
        *(_OWORD *)&Factored.symbolicFactorization.columnCount = v10;
        *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 136);
        *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v8;
        if (!DWORD2(v7) && Factored.symbolicFactorization.workspaceSize_Float)
        {
          _SparseGetOptionsFromSymbolicFactor(&v41, &Factored.symbolicFactorization);
          reportError = v41.reportError;
          if (Factored.symbolicFactorization.status
            || !Factored.symbolicFactorization.workspaceSize_Float
            || Factored.status
            || !Factored.solveWorkspaceRequiredStatic)
          {
            if (!v41.reportError)
            {
              v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v29)
                geom::sparse_linear_solver<float>::solve(v29, v30, v31, v32, v33, v34, v35, v36);
              goto LABEL_7;
            }
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            memset(&v41, 0, sizeof(v41));
            snprintf((char *)&v41, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
          }
          else
          {
            if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
              v23 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
            else
              v23 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
            if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
              v24 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
            else
              v24 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
            if (BYTE1(Factored.symbolicFactorization.factorization) == 40)
              v25 = v23;
            else
              v25 = v24;
            if (v24 == v6)
            {
              if (v25 == v5)
              {
                free = v41.free;
                RHS.rowCount = v5;
                RHS.columnCount = 1;
                *(_DWORD *)&RHS.attributes = 0;
                RHS.data = a3;
                RHS.columnStride = v5;
                *(_DWORD *)&Soln.attributes = 0;
                Soln.data = a5;
                Soln.rowCount = v6;
                Soln.columnCount = 1;
                Soln.columnStride = v6;
                v27 = (void *)((uint64_t (*)(size_t))v41.malloc)(v38 + Factored.solveWorkspaceRequiredPerRHS);
                if (v27)
                {
                  v28 = v27;
                  _SparseSolveOpaque_Float(&Factored, &RHS, &Soln, v27);
                  ((void (*)(void *))free)(v28);
                  return 1;
                }
                if (reportError)
                {
                  v53 = 0u;
                  v54 = 0u;
                  v51 = 0u;
                  v52 = 0u;
                  v49 = 0u;
                  v50 = 0u;
                  v47 = 0u;
                  v48 = 0u;
                  v45 = 0u;
                  v46 = 0u;
                  v43 = 0u;
                  v44 = 0u;
                  v42 = 0u;
                  memset(&v41, 0, sizeof(v41));
                  snprintf((char *)&v41, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
                  goto LABEL_36;
                }
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  geom::sparse_linear_solver<float>::solve();
LABEL_7:
                _SparseTrap();
                return 1;
              }
              if (!v41.reportError)
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  geom::sparse_linear_solver<float>::solve();
                goto LABEL_7;
              }
            }
            else if (!v41.reportError)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                geom::sparse_linear_solver<float>::solve();
              goto LABEL_7;
            }
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            memset(&v41, 0, sizeof(v41));
            snprintf((char *)&v41, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
          }
LABEL_36:
          ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v41);
          return 1;
        }
        v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v11)
          geom::sparse_linear_solver<float>::solve(v11, v12, v13, v14, v15, v16, v17, v18);
        goto LABEL_7;
      }
    }
  }
  return 0;
}

uint64_t geom::sparse_linear_solver<float>::solve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v8;

  v6 = *(unsigned int *)(a1 + 4);
  v8 = 0;
  std::vector<float>::resize(a3, v6, &v8);
  return geom::sparse_linear_solver<float>::solve(a1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(float **)a2, (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2, *(float **)a3);
}

uint64_t geom::sparse_linear_solver<float>::solve(unsigned int *a1, uint64_t a2, float *a3)
{
  int v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (__cdecl *reportError)(const char *);
  int v21;
  void (__cdecl *free)(void *);
  void *v23;
  void *v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  SparseOpaqueFactorization_Float Factored;
  uint64_t v34;
  DenseMatrix_Float Soln;
  SparseSymbolicFactorOptions v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a1 + 248))
    return 0;
  v3 = a2;
  v4 = *a1;
  if ((_DWORD)v4 != a1[1] || v4 != a2)
    return 0;
  v7 = *(_OWORD *)(a1 + 26);
  v8 = *(_OWORD *)(a1 + 38);
  v9 = *(_OWORD *)(a1 + 46);
  *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 42);
  *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v9;
  v34 = *((_QWORD *)a1 + 25);
  v10 = *(_OWORD *)(a1 + 30);
  *(_OWORD *)&Factored.status = v7;
  *(_OWORD *)&Factored.symbolicFactorization.columnCount = v10;
  *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 34);
  *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v8;
  if (DWORD2(v7) || !Factored.symbolicFactorization.workspaceSize_Float)
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      geom::sparse_linear_solver<float>::solve(v11, v12, v13, v14, v15, v16, v17, v18);
    goto LABEL_10;
  }
  _SparseGetOptionsFromSymbolicFactor(&v36, &Factored.symbolicFactorization);
  reportError = v36.reportError;
  if (Factored.symbolicFactorization.status
    || !Factored.symbolicFactorization.workspaceSize_Float
    || Factored.status
    || !Factored.solveWorkspaceRequiredStatic)
  {
    if (!v36.reportError)
    {
      v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v25)
        geom::sparse_linear_solver<float>::solve(v25, v26, v27, v28, v29, v30, v31, v32);
      goto LABEL_10;
    }
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(&v36, 0, sizeof(v36));
    snprintf((char *)&v36, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    goto LABEL_30;
  }
  v21 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
  if (Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization) > v21)
    v21 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
  if (v21 != v3)
  {
    if (!v36.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        geom::sparse_linear_solver<float>::solve();
      goto LABEL_10;
    }
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(&v36, 0, sizeof(v36));
    snprintf((char *)&v36, 0x100uLL, "%s.count (%d) is not equal to largest dimension of matrix factorization %s.\n");
LABEL_30:
    ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v36);
    return 1;
  }
  free = v36.free;
  Soln.rowCount = v3;
  Soln.columnCount = 1;
  *(_DWORD *)&Soln.attributes = 0;
  Soln.data = a3;
  Soln.columnStride = v3;
  v23 = (void *)((uint64_t (*)(size_t))v36.malloc)(v34 + Factored.solveWorkspaceRequiredPerRHS);
  if (v23)
  {
    v24 = v23;
    _SparseSolveOpaque_Float(&Factored, 0, &Soln, v23);
    ((void (*)(void *))free)(v24);
    return 1;
  }
  if (reportError)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(&v36, 0, sizeof(v36));
    snprintf((char *)&v36, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
    goto LABEL_30;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    geom::sparse_linear_solver<float>::solve();
LABEL_10:
  _SparseTrap();
  return 1;
}

uint64_t geom::sparse_linear_solver<float>::solve(unsigned int *a1, uint64_t a2)
{
  return geom::sparse_linear_solver<float>::solve(a1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2, *(float **)a2);
}

uint64_t geom::sparse_linear_solver<float>::row_count(unsigned int *a1)
{
  return *a1;
}

uint64_t geom::sparse_linear_solver<float>::column_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t *geom::sparse_linear_solver<double>::add_entry(uint64_t a1, unsigned int a2, unsigned int a3, double a4)
{
  uint64_t **v7;
  uint64_t *result;
  char v9;
  double v10;
  unsigned int v11[2];
  double v12;
  unsigned int *v13;

  v12 = a4;
  v7 = (uint64_t **)(a1 + 8);
  v13 = (unsigned int *)__PAIR64__(a3, a2);
  result = std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__emplace_unique_key_args<geom::sparse_linear_solver<double>::entry,geom::sparse_linear_solver<double>::entry,double const&>((uint64_t **)(a1 + 8), (unsigned int *)&v13, (uint64_t *)&v13, (uint64_t *)&v12);
  if ((v9 & 1) == 0)
  {
    v10 = v12;
    v11[0] = a2;
    v11[1] = a3;
    v13 = v11;
    result = std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__emplace_unique_key_args<geom::sparse_linear_solver<double>::entry,std::piecewise_construct_t const&,std::tuple<geom::sparse_linear_solver<double>::entry&&>,std::tuple<>>(v7, v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
    *((double *)result + 5) = v10;
  }
  *(_BYTE *)(a1 + 248) = 0;
  return result;
}

uint64_t geom::sparse_linear_solver<double>::get_entry(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v3 = a1 + 8;
  if ((uint64_t *)(a1 + 16) == std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::find<geom::sparse_linear_solver<double>::entry>(a1 + 8, v5))return 0;
  else
    return *(_QWORD *)std::map<geom::sparse_linear_solver<double>::entry,double,std::less<geom::sparse_linear_solver<double>::entry>,std::allocator<std::pair<geom::sparse_linear_solver<double>::entry const,double>>>::at(v3, v5);
}

uint64_t std::map<geom::sparse_linear_solver<double>::entry,double,std::less<geom::sparse_linear_solver<double>::entry>,std::allocator<std::pair<geom::sparse_linear_solver<double>::entry const,double>>>::at(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__find_equal<geom::sparse_linear_solver<double>::entry>(a1, &v4, a2);
  if (!v2)
    abort();
  return v2 + 40;
}

BOOL geom::sparse_linear_solver<double>::factor(unsigned int *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _OWORD *v9;
  unint64_t v10;
  std::vector<int>::size_type v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  SparseFactorization_t v29;
  __int128 v30;
  SparseMatrix_Double *v31;
  SparseSymbolicFactorOptions *p_sfoptions;
  SparseNumericFactorOptions *v33;
  std::vector<int>::size_type v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BOOL8 result;
  _OWORD v54[2];
  SparseSymbolicFactorOptions sfoptions;
  SparseMatrix_Double v56;
  _OWORD v57[2];
  _OWORD v58[2];
  uint64_t v59;
  uint64_t (*v60)(const char *);
  _OWORD v61[2];
  uint64_t v62;
  _OWORD __x[6];
  uint64_t v64;

  v5 = *((_QWORD *)a1 + 4);
  v4 = (uint64_t)(a1 + 8);
  *((_QWORD *)a1 + 5) = v5;
  v6 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 8) = v6;
  v7 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 11) = v7;
  v8 = a1[1];
  a1[52] = *a1;
  v9 = a1 + 52;
  *((_BYTE *)a1 + 236) = 1;
  a1[53] = v8;
  *((_QWORD *)a1 + 30) = v7;
  *((_QWORD *)a1 + 27) = v5;
  *((_QWORD *)a1 + 28) = v6;
  v10 = v8 + 1;
  if (a2 > 1)
  {
    *(_QWORD *)&__x[0] = 0;
    std::vector<long>::resize(v4, v10, __x);
    v34 = *((_QWORD *)a1 + 3);
    LODWORD(__x[0]) = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 14), v34, (std::vector<int>::const_reference)__x);
    v35 = *((_QWORD *)a1 + 3);
    *(_QWORD *)&__x[0] = 0;
    std::vector<double>::resize((uint64_t)(a1 + 20), v35, __x);
    *((_WORD *)a1 + 116) &= 0xFFF2u;
    v36 = (uint64_t *)*((_QWORD *)a1 + 4);
    v37 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 27) = v36;
    *((_QWORD *)a1 + 28) = v37;
    v38 = *((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 30) = v38;
    v39 = (unsigned int *)*((_QWORD *)a1 + 1);
    if (v39 != a1 + 4)
    {
      v40 = 0;
      do
      {
        ++v36[v39[9] + 1];
        *(_DWORD *)(v37 + 4 * v40) = v39[8];
        *(_QWORD *)(v38 + 8 * v40) = *((_QWORD *)v39 + 5);
        v41 = (unsigned int *)*((_QWORD *)v39 + 1);
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = *(unsigned int **)v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (unsigned int *)*((_QWORD *)v39 + 2);
            v22 = *(_QWORD *)v42 == (_QWORD)v39;
            v39 = v42;
          }
          while (!v22);
        }
        ++v40;
        v39 = v42;
      }
      while (v42 != a1 + 4);
    }
    v43 = a1[53];
    if (v43)
    {
      if (v43 + 1 > 2)
        v44 = v43 + 1;
      else
        v44 = 2;
      v47 = *v36;
      v45 = v36 + 1;
      v46 = v47;
      v48 = v44 - 1;
      do
      {
        v46 += *v45;
        *v45++ = v46;
        --v48;
      }
      while (v48);
    }
    v49 = *((_OWORD *)a1 + 14);
    *(_OWORD *)&v56.structure.rowCount = *v9;
    *(_OWORD *)&v56.structure.rowIndices = v49;
    v56.data = (double *)*((_QWORD *)a1 + 30);
    *(_OWORD *)&sfoptions.control = xmmword_24F14BA80;
    *(_OWORD *)&sfoptions.ignoreRowsAndColumns = unk_24F14BA90;
    sfoptions.free = (void (__cdecl *)(void *))0x191D68428;
    sfoptions.reportError = (void (__cdecl *)(const char *))geom::sparse_linear_solver<double>::factor(geom_factorization_type)::{lambda(char const*)#1}::__invoke;
    v54[0] = xmmword_2289C34E8;
    v54[1] = unk_2289C34F8;
    v31 = &v56;
    p_sfoptions = &sfoptions;
    v33 = (SparseNumericFactorOptions *)v54;
    v29 = SparseFactorizationQR;
  }
  else
  {
    *(_QWORD *)&__x[0] = 0;
    std::vector<long>::resize(v4, v10, __x);
    v11 = *((_QWORD *)a1 + 3);
    LODWORD(__x[0]) = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 14), v11, (std::vector<int>::const_reference)__x);
    v12 = *a1 + ((*((_QWORD *)a1 + 3) - (unint64_t)*a1) >> 1);
    *(_QWORD *)&__x[0] = 0;
    std::vector<double>::resize((uint64_t)(a1 + 20), v12, __x);
    *((_WORD *)a1 + 116) = a1[58] & 0xFFF0 | 0xE;
    v13 = (uint64_t *)*((_QWORD *)a1 + 4);
    v14 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 27) = v13;
    *((_QWORD *)a1 + 28) = v14;
    v15 = *((_QWORD *)a1 + 10);
    *((_QWORD *)a1 + 30) = v15;
    v16 = (unsigned int *)*((_QWORD *)a1 + 1);
    if (v16 != a1 + 4)
    {
      v17 = 0;
      do
      {
        v18 = v16[8];
        v19 = v16[9];
        if (v18 >= v19)
        {
          ++v13[v19 + 1];
          *(_DWORD *)(v14 + 4 * v17) = v18;
          *(_QWORD *)(v15 + 8 * v17++) = *((_QWORD *)v16 + 5);
        }
        v20 = (unsigned int *)*((_QWORD *)v16 + 1);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = *(unsigned int **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (unsigned int *)*((_QWORD *)v16 + 2);
            v22 = *(_QWORD *)v21 == (_QWORD)v16;
            v16 = v21;
          }
          while (!v22);
        }
        v16 = v21;
      }
      while (v21 != a1 + 4);
    }
    v23 = a1[53];
    if (v23)
    {
      if (v23 + 1 > 2)
        v24 = v23 + 1;
      else
        v24 = 2;
      v27 = *v13;
      v25 = v13 + 1;
      v26 = v27;
      v28 = v24 - 1;
      do
      {
        v26 += *v25;
        *v25++ = v26;
        --v28;
      }
      while (v28);
    }
    v29 = a2 != 0;
    v30 = *((_OWORD *)a1 + 14);
    v61[0] = *v9;
    v61[1] = v30;
    v62 = *((_QWORD *)a1 + 30);
    v58[0] = xmmword_24F14BA80;
    v58[1] = unk_24F14BA90;
    v59 = 0x191D68428;
    v60 = geom::sparse_linear_solver<double>::factor(geom_factorization_type)::{lambda(char const*)#1}::__invoke;
    v57[0] = xmmword_2289C34E8;
    v57[1] = unk_2289C34F8;
    v31 = (SparseMatrix_Double *)v61;
    p_sfoptions = (SparseSymbolicFactorOptions *)v58;
    v33 = (SparseNumericFactorOptions *)v57;
  }
  SparseFactor(v29, v31, p_sfoptions, v33, (uint64_t)__x);
  v50 = __x[5];
  *(_OWORD *)(a1 + 42) = __x[4];
  *(_OWORD *)(a1 + 46) = v50;
  *((_QWORD *)a1 + 25) = v64;
  v51 = __x[1];
  *(_OWORD *)(a1 + 26) = __x[0];
  *(_OWORD *)(a1 + 30) = v51;
  v52 = __x[3];
  *(_OWORD *)(a1 + 34) = __x[2];
  *(_OWORD *)(a1 + 38) = v52;
  result = a1[26] == 0;
  *((_BYTE *)a1 + 248) = result;
  return result;
}

double SparseFactor@<D0>(SparseFactorization_t a1@<W0>, SparseMatrix_Double *a2@<X1>, SparseSymbolicFactorOptions *sfoptions@<X2>, SparseNumericFactorOptions *a4@<X3>, uint64_t a5@<X8>)
{
  int columnCount;
  int v8;
  double result;
  void (__cdecl *reportError)(const char *);
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char __str[264];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a2->structure.rowCount <= 0)
  {
    if (!sfoptions->reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        SparseFactor();
      goto LABEL_34;
    }
    memset(__str, 0, 256);
    snprintf(__str, 0x100uLL, "%s.rowCount must be > 0, but is %d.\n", a4);
  }
  else
  {
    columnCount = a2->structure.columnCount;
    if (columnCount <= 0)
    {
      if (!sfoptions->reportError)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SparseFactor();
        goto LABEL_34;
      }
      memset(__str, 0, 256);
      snprintf(__str, 0x100uLL, "%s.columnCount must be > 0, but is %d.\n", a4);
    }
    else if (*(&a2->structure.blockSize + 2))
    {
      v8 = *(_WORD *)&a2->structure.attributes & 0xC;
      if (a2->structure.rowCount == columnCount || v8 != 12)
      {
        if ((a1 & 0xFE) == 0x28)
        {
          _SparseFactorQR_Double((SparseOpaqueFactorization_Double *)a5, a1, a2, sfoptions, a4);
          return result;
        }
        if (v8 == 12)
        {
          _SparseFactorSymmetric_Double((SparseOpaqueFactorization_Double *)a5, a1, a2, sfoptions, a4);
          return result;
        }
        reportError = sfoptions->reportError;
        if (reportError)
        {
          memset(&__str[69], 0, 187);
          strcpy(__str, "Cannot perform symmetric matrix factorization of non-square matrix.\n");
          goto LABEL_21;
        }
        v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v12)
          SparseFactor(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_34:
        _SparseTrap();
        goto LABEL_35;
      }
      if (!sfoptions->reportError)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SparseFactor();
        goto LABEL_34;
      }
      memset(__str, 0, 256);
      snprintf(__str, 0x100uLL, "%s.attributes.kind=SparseSymmetric, but %s.rowCount (%d) != %s.columnCount (%d).\n", a4);
    }
    else
    {
      if (!sfoptions->reportError)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          SparseFactor();
        goto LABEL_34;
      }
      memset(__str, 0, 256);
      snprintf(__str, 0x100uLL, "%s.blockSize must be > 0, but is %d.]n", a4);
    }
  }
  reportError = sfoptions->reportError;
LABEL_21:
  ((void (*)(char *))reportError)(__str);
LABEL_35:
  result = 0.0;
  *(_QWORD *)(a5 + 96) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)a5 = -4;
  *(_DWORD *)(a5 + 8) = -4;
  return result;
}

uint64_t geom::sparse_linear_solver<double>::solve(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double *a5)
{
  int v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (__cdecl *reportError)(const char *);
  int v23;
  int v24;
  int v25;
  void (__cdecl *free)(void *);
  void *v27;
  void *v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  SparseOpaqueFactorization_Double Factored;
  uint64_t v38;
  DenseMatrix_Double Soln;
  DenseMatrix_Double RHS;
  SparseSymbolicFactorOptions v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 248))
  {
    v5 = a2;
    if (*(_DWORD *)a1 == a2)
    {
      v6 = a4;
      if (*(_DWORD *)(a1 + 4) == a4)
      {
        v7 = *(_OWORD *)(a1 + 104);
        v8 = *(_OWORD *)(a1 + 152);
        v9 = *(_OWORD *)(a1 + 184);
        *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 168);
        *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v9;
        v38 = *(_QWORD *)(a1 + 200);
        v10 = *(_OWORD *)(a1 + 120);
        *(_OWORD *)&Factored.status = v7;
        *(_OWORD *)&Factored.symbolicFactorization.columnCount = v10;
        *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 136);
        *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v8;
        if (!DWORD2(v7) && Factored.symbolicFactorization.workspaceSize_Float)
        {
          _SparseGetOptionsFromSymbolicFactor(&v41, &Factored.symbolicFactorization);
          reportError = v41.reportError;
          if (Factored.symbolicFactorization.status
            || !Factored.symbolicFactorization.workspaceSize_Float
            || Factored.status
            || !Factored.solveWorkspaceRequiredStatic)
          {
            if (!v41.reportError)
            {
              v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v29)
                geom::sparse_linear_solver<float>::solve(v29, v30, v31, v32, v33, v34, v35, v36);
              goto LABEL_7;
            }
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            memset(&v41, 0, sizeof(v41));
            snprintf((char *)&v41, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
          }
          else
          {
            if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
              v23 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
            else
              v23 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
            if (((*(_BYTE *)&Factored.attributes ^ *(_BYTE *)&Factored.symbolicFactorization.attributes) & 1) != 0)
              v24 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
            else
              v24 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
            if (BYTE1(Factored.symbolicFactorization.factorization) == 40)
              v25 = v23;
            else
              v25 = v24;
            if (v24 == v6)
            {
              if (v25 == v5)
              {
                free = v41.free;
                RHS.rowCount = v5;
                RHS.columnCount = 1;
                *(_DWORD *)&RHS.attributes = 0;
                RHS.data = a3;
                RHS.columnStride = v5;
                *(_DWORD *)&Soln.attributes = 0;
                Soln.data = a5;
                Soln.rowCount = v6;
                Soln.columnCount = 1;
                Soln.columnStride = v6;
                v27 = (void *)((uint64_t (*)(size_t))v41.malloc)(v38 + Factored.solveWorkspaceRequiredPerRHS);
                if (v27)
                {
                  v28 = v27;
                  _SparseSolveOpaque_Double(&Factored, &RHS, &Soln, v27);
                  ((void (*)(void *))free)(v28);
                  return 1;
                }
                if (reportError)
                {
                  v53 = 0u;
                  v54 = 0u;
                  v51 = 0u;
                  v52 = 0u;
                  v49 = 0u;
                  v50 = 0u;
                  v47 = 0u;
                  v48 = 0u;
                  v45 = 0u;
                  v46 = 0u;
                  v43 = 0u;
                  v44 = 0u;
                  v42 = 0u;
                  memset(&v41, 0, sizeof(v41));
                  snprintf((char *)&v41, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
                  goto LABEL_36;
                }
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  geom::sparse_linear_solver<float>::solve();
LABEL_7:
                _SparseTrap();
                return 1;
              }
              if (!v41.reportError)
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  geom::sparse_linear_solver<float>::solve();
                goto LABEL_7;
              }
            }
            else if (!v41.reportError)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                geom::sparse_linear_solver<float>::solve();
              goto LABEL_7;
            }
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            v42 = 0u;
            memset(&v41, 0, sizeof(v41));
            snprintf((char *)&v41, 0x100uLL, "%s (size %dx1) does not match dimensions of matrix factorization %s (%d x %d).\n");
          }
LABEL_36:
          ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v41);
          return 1;
        }
        v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v11)
          geom::sparse_linear_solver<float>::solve(v11, v12, v13, v14, v15, v16, v17, v18);
        goto LABEL_7;
      }
    }
  }
  return 0;
}

uint64_t geom::sparse_linear_solver<double>::solve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v8;

  v6 = *(unsigned int *)(a1 + 4);
  v8 = 0;
  std::vector<double>::resize(a3, v6, &v8);
  return geom::sparse_linear_solver<double>::solve(a1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3, *(double **)a2, (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3, *(double **)a3);
}

uint64_t geom::sparse_linear_solver<double>::solve(unsigned int *a1, uint64_t a2, double *a3)
{
  int v3;
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (__cdecl *reportError)(const char *);
  int v21;
  void (__cdecl *free)(void *);
  void *v23;
  void *v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  SparseOpaqueFactorization_Double Factored;
  uint64_t v34;
  DenseMatrix_Double Soln;
  SparseSymbolicFactorOptions v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a1 + 248))
    return 0;
  v3 = a2;
  v4 = *a1;
  if ((_DWORD)v4 != a1[1] || v4 != a2)
    return 0;
  v7 = *(_OWORD *)(a1 + 26);
  v8 = *(_OWORD *)(a1 + 38);
  v9 = *(_OWORD *)(a1 + 46);
  *(_OWORD *)&Factored.userFactorStorage = *(_OWORD *)(a1 + 42);
  *(_OWORD *)&Factored.solveWorkspaceRequiredStatic = v9;
  v34 = *((_QWORD *)a1 + 25);
  v10 = *(_OWORD *)(a1 + 30);
  *(_OWORD *)&Factored.status = v7;
  *(_OWORD *)&Factored.symbolicFactorization.columnCount = v10;
  *(_OWORD *)&Factored.symbolicFactorization.workspaceSize_Float = *(_OWORD *)(a1 + 34);
  *(_OWORD *)&Factored.symbolicFactorization.factorSize_Float = v8;
  if (DWORD2(v7) || !Factored.symbolicFactorization.workspaceSize_Float)
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      geom::sparse_linear_solver<float>::solve(v11, v12, v13, v14, v15, v16, v17, v18);
    goto LABEL_10;
  }
  _SparseGetOptionsFromSymbolicFactor(&v36, &Factored.symbolicFactorization);
  reportError = v36.reportError;
  if (Factored.symbolicFactorization.status
    || !Factored.symbolicFactorization.workspaceSize_Float
    || Factored.status
    || !Factored.solveWorkspaceRequiredStatic)
  {
    if (!v36.reportError)
    {
      v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v25)
        geom::sparse_linear_solver<float>::solve(v25, v26, v27, v28, v29, v30, v31, v32);
      goto LABEL_10;
    }
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(&v36, 0, sizeof(v36));
    snprintf((char *)&v36, 0x100uLL, "%s does not hold a completed matrix factorization.\n");
    goto LABEL_30;
  }
  v21 = Factored.symbolicFactorization.columnCount * LOBYTE(Factored.symbolicFactorization.factorization);
  if (Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization) > v21)
    v21 = Factored.symbolicFactorization.rowCount * LOBYTE(Factored.symbolicFactorization.factorization);
  if (v21 != v3)
  {
    if (!v36.reportError)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        geom::sparse_linear_solver<float>::solve();
      goto LABEL_10;
    }
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(&v36, 0, sizeof(v36));
    snprintf((char *)&v36, 0x100uLL, "%s.count (%d) is not equal to largest dimension of matrix factorization %s.\n");
LABEL_30:
    ((void (*)(SparseSymbolicFactorOptions *))reportError)(&v36);
    return 1;
  }
  free = v36.free;
  Soln.rowCount = v3;
  Soln.columnCount = 1;
  *(_DWORD *)&Soln.attributes = 0;
  Soln.data = a3;
  Soln.columnStride = v3;
  v23 = (void *)((uint64_t (*)(size_t))v36.malloc)(v34 + Factored.solveWorkspaceRequiredPerRHS);
  if (v23)
  {
    v24 = v23;
    _SparseSolveOpaque_Double(&Factored, 0, &Soln, v23);
    ((void (*)(void *))free)(v24);
    return 1;
  }
  if (reportError)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    memset(&v36, 0, sizeof(v36));
    snprintf((char *)&v36, 0x100uLL, "Failed to allocate workspace of size %ld for SparseSolve().\n");
    goto LABEL_30;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    geom::sparse_linear_solver<float>::solve();
LABEL_10:
  _SparseTrap();
  return 1;
}

uint64_t geom::sparse_linear_solver<double>::solve(unsigned int *a1, uint64_t a2)
{
  return geom::sparse_linear_solver<double>::solve(a1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3, *(double **)a2);
}

BOOL geom::compute_svd(geom *this, __CLPK_integer a2, __CLPK_doublereal *__a, __CLPK_doublereal *__u, __CLPK_doublereal *__s, double *a6, double *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t __lwork;
  double v16;
  __CLPK_integer v17;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  __n = a2;
  __m = (int)this;
  __ldu = (int)this;
  __lda = (int)this;
  v17 = 0;
  __ldvt = a2;
  v16 = 0.0;
  HIDWORD(__lwork) = -1;
  v11 = dgesvd_("All", "All", &__m, &__n, __a, &__lda, __s, __u, &__ldu, a6, &__ldvt, &v16, (__CLPK_integer *)&__lwork + 1, &v17);
  HIDWORD(__lwork) = (int)v16;
  MEMORY[0x24BDAC7A8](v11, v12);
  dgesvd_("All", "All", &__m, &__n, __a, &__lda, __s, __u, &__ldu, a6, &__ldvt, (__CLPK_doublereal *)((char *)&__lwork - v13), (__CLPK_integer *)&__lwork + 1, &v17);
  return v17 == 0;
}

BOOL geom::compute_svd(geom *this, __CLPK_integer a2, __CLPK_real *__a, __CLPK_real *__u, __CLPK_real *__s, float *a6, float *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __CLPK_integer __lwork;
  uint64_t v17;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  __n = a2;
  __m = (int)this;
  __ldu = (int)this;
  __lda = (int)this;
  __ldvt = a2;
  v17 = 0;
  __lwork = -1;
  v11 = sgesvd_("All", "All", &__m, &__n, __a, &__lda, __s, __u, &__ldu, a6, &__ldvt, (__CLPK_real *)&v17, &__lwork, (__CLPK_integer *)&v17 + 1);
  __lwork = (int)*(float *)&v17;
  MEMORY[0x24BDAC7A8](v11, v12);
  sgesvd_("All", "All", &__m, &__n, __a, &__lda, __s, __u, &__ldu, a6, &__ldvt, (__CLPK_real *)((char *)&v15 - v13), &__lwork, (__CLPK_integer *)&v17 + 1);
  return HIDWORD(v17) == 0;
}

double geom_compute_svd_3x3_f(_OWORD *a1, _OWORD *a2, _OWORD *a3, int8x16_t a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, float *a10)
{
  int8x16_t v11[3];

  v11[0] = a4;
  v11[1] = a5;
  v11[2] = a6;
  return geom::compute_svd_3x3<float>(v11, a1, a2, a3, a8, a9, a10);
}

uint64_t geom::sparse_linear_solver<float>::factor(geom_factorization_type)::{lambda(char const*)#1}::__invoke(const char *a1)
{
  return fprintf((FILE *)*MEMORY[0x24BDAC8E8], "[Geometry][Factorization Failed] %s", a1);
}

uint64_t geom::sparse_linear_solver<double>::factor(geom_factorization_type)::{lambda(char const*)#1}::__invoke(const char *a1)
{
  return fprintf((FILE *)*MEMORY[0x24BDAC8E8], "[Geometry][Factorization Failed] %s", a1);
}

char *std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__emplace_unique_key_args<geom::sparse_linear_solver<float>::entry,geom::sparse_linear_solver<float>::entry,float const&>(uint64_t **a1, unsigned int *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t *v7;
  char *v8;
  uint64_t **v9;
  uint64_t v11;

  v7 = std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__find_equal<geom::sparse_linear_solver<float>::entry>((uint64_t)a1, &v11, a2);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v8 + 28) = *a3;
    *((_DWORD *)v8 + 9) = *a4;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, v11, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__find_equal<geom::sparse_linear_solver<float>::entry>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v7 = *a3;
    v6 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 8);
        if (v6 >= v9)
          break;
LABEL_6:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_14;
      }
      if (v6 == v9)
      {
        v10 = *((_DWORD *)v8 + 7);
        if (v7 < v10)
          goto LABEL_6;
        if (v10 >= v7)
          goto LABEL_14;
      }
      else if (v9 >= v6)
      {
        goto LABEL_14;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_14;
    }
  }
  v8 = result;
LABEL_14:
  *a2 = v8;
  return result;
}

char *std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__emplace_unique_key_args<geom::sparse_linear_solver<float>::entry,std::piecewise_construct_t const&,std::tuple<geom::sparse_linear_solver<float>::entry&&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::__find_equal<geom::sparse_linear_solver<float>::entry>((uint64_t)a1, &v10, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = 0;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::__map_value_compare<geom::sparse_linear_solver<float>::entry,std::__value_type<geom::sparse_linear_solver<float>::entry,float>,std::less<geom::sparse_linear_solver<float>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<float>::entry,float>>>::find<geom::sparse_linear_solver<float>::entry>(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = *((_DWORD *)v3 + 8);
    if (v8 >= v6)
    {
      if (v8 == v6)
      {
        if (*((_DWORD *)v3 + 7) < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2 || __PAIR64__(v6, v5) < *(uint64_t *)((char *)v7 + 28))
    return v2;
  return v7;
}

void std::vector<long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      abort();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t *std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__emplace_unique_key_args<geom::sparse_linear_solver<double>::entry,geom::sparse_linear_solver<double>::entry,double const&>(uint64_t **a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t v11;

  v7 = std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__find_equal<geom::sparse_linear_solver<double>::entry>((uint64_t)a1, &v11, a2);
  v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (uint64_t *)operator new(0x30uLL);
    v8[4] = *a3;
    v8[5] = *a4;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, v11, v9, v8);
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__find_equal<geom::sparse_linear_solver<double>::entry>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v7 = *a3;
    v6 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 9);
        if (v6 >= v9)
          break;
LABEL_6:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_14;
      }
      if (v6 == v9)
      {
        v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10)
          goto LABEL_6;
        if (v10 >= v7)
          goto LABEL_14;
      }
      else if (v9 >= v6)
      {
        goto LABEL_14;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_14;
    }
  }
  v8 = result;
LABEL_14:
  *a2 = v8;
  return result;
}

uint64_t *std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__emplace_unique_key_args<geom::sparse_linear_solver<double>::entry,std::piecewise_construct_t const&,std::tuple<geom::sparse_linear_solver<double>::entry&&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::__find_equal<geom::sparse_linear_solver<double>::entry>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::__map_value_compare<geom::sparse_linear_solver<double>::entry,std::__value_type<geom::sparse_linear_solver<double>::entry,double>,std::less<geom::sparse_linear_solver<double>::entry>,true>,std::allocator<std::__value_type<geom::sparse_linear_solver<double>::entry,double>>>::find<geom::sparse_linear_solver<double>::entry>(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = *((_DWORD *)v3 + 9);
    if (v8 >= v6)
    {
      if (v8 == v6)
      {
        if (*((_DWORD *)v3 + 8) < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2 || __PAIR64__(v6, v5) < v7[4])
    return v2;
  return v7;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

void OUTLINED_FUNCTION_12(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_13(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

double geom::triangle_mesh_atlas::copy_face_vertex_uvs(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v9 = *(unsigned int *)(a2 + 4);
  v10 = ((*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  v11 = a1[1] - *a1;
  if (v10 <= v11)
  {
    if (v10 < v11)
      a1[1] = *a1 + v10;
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v10 - v11, geom::triangle_mesh_atlas::k_unassigned_vertex);
  }
  std::vector<BOOL>::resize((uint64_t)a5, v9, 0);
  v12 = a1 + 3;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v12, (3 * v9));
  v14 = *a3;
  if (a3[1] != *a3)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(unsigned int *)(v14 + 4 * v16);
      *(_QWORD *)(*a5 + ((v17 >> 3) & 0x1FFFFFF8)) |= 1 << v17;
      LODWORD(v17) = 3 * v17;
      *(_QWORD *)(*v12 + 8 * v17) = *(_QWORD *)(*a4 + v15);
      *(_QWORD *)(*v12 + 8 * (v17 + 1)) = *(_QWORD *)(*a4 + v15 + 8);
      result = *(double *)(*a4 + v15 + 16);
      *(double *)(*v12 + 8 * (v17 + 2)) = result;
      ++v16;
      v14 = *a3;
      v15 += 24;
    }
    while (v16 < (a3[1] - *a3) >> 2);
  }
  return result;
}

double geom::triangle_mesh_atlas::copy_face_vertex_uvs(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v11 = *(unsigned int *)(a2 + 4);
  v12 = ((*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  v13 = a1[1] - *a1;
  if (v12 <= v13)
  {
    if (v12 < v13)
      a1[1] = *a1 + v12;
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v12 - v13, geom::triangle_mesh_atlas::k_unassigned_vertex);
  }
  std::vector<BOOL>::resize((uint64_t)a6, v11, 0);
  v14 = a1 + 3;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v14, (3 * v11));
  v16 = *a3;
  if (a3[1] != *a3)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(unsigned int *)(v16 + 4 * v18);
      *(_QWORD *)(*a6 + ((v19 >> 3) & 0x1FFFFFF8)) |= 1 << v19;
      LODWORD(v19) = 3 * v19;
      *(_QWORD *)(*v14 + 8 * v19) = *(_QWORD *)(*a5 + 8 * *(unsigned int *)(*a4 + v17));
      *(_QWORD *)(*v14 + 8 * (v19 + 1)) = *(_QWORD *)(*a5 + 8 * *(unsigned int *)(*a4 + v17 + 4));
      result = *(double *)(*a5 + 8 * *(unsigned int *)(*a4 + v17 + 8));
      *(double *)(*v14 + 8 * (v19 + 2)) = result;
      ++v18;
      v16 = *a3;
      v17 += 12;
    }
    while (v18 < (a3[1] - *a3) >> 2);
  }
  return result;
}

double geom::triangle_mesh_atlas::find_face_vertex_uv(geom::triangle_mesh_atlas *this, const geom::triangle_mesh_connectivity *a2, int a3, int a4)
{
  int *v4;
  int v5;
  int v6;

  v4 = (int *)(*((_QWORD *)a2 + 2) + 4 * (3 * a3));
  v5 = *v4;
  if (v4[1] == a4)
    v6 = 1;
  else
    v6 = 2;
  if (v5 == a4)
    v6 = 0;
  return *(double *)(*((_QWORD *)this + 3) + 8 * (v6 + 3 * a3));
}

BOOL geom::triangle_mesh_atlas::is_wedge_boundary_a_uv_corner(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;

  v5 = a5[1];
  v6 = a4[1];
  v7 = 3 * (*a4 & 0x3FFFFFFF) + (v6 >> 30);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = v7 + ((v6 >> 31) ^ 1);
  if (v5 >> 30)
    v10 = -1;
  else
    v10 = 2;
  v11 = *(float32x2_t *)(v8 + 8 * v7);
  v12 = vsub_f32(*(float32x2_t *)(v8 + 8 * v9), v11);
  v13 = vsub_f32(*(float32x2_t *)(v8 + 8 * (v10 + (v5 >> 30) + 3 * (*a5 & 0x3FFFFFFF))), v11);
  v14 = vmul_f32(v12, v13);
  v15 = (int32x2_t)vmul_f32(v12, v12);
  v16 = (int32x2_t)vmul_f32(v13, v13);
  v17 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v15, v16), (float32x2_t)vzip2_s32(v15, v16)));
  return vdiv_f32(vadd_f32(v14, (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1)), vmul_lane_f32(v17, v17, 1)).f32[0] > -0.5;
}

BOOL geom::triangle_mesh_atlas::is_vertex_a_uv_corner(geom::triangle_mesh_atlas *this, const geom::triangle_mesh_connectivity *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _BOOL8 is_wedge_boundary_a_uv_corner;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  geom::triangle_mesh_atlas::vertex_incident_wedges((uint64_t)this, a2, a3, (char **)&v22, (unint64_t **)&__p);
  v9 = v22;
  v8 = v23;
  v10 = v23 - (_BYTE *)v22;
  if ((unint64_t)(v23 - (_BYTE *)v22) > 8
    || v23 - (_BYTE *)v22 == 8 && geom::triangle_mesh_half_edge_connectivity::is_boundary_vertex(a2, a3))
  {
    is_wedge_boundary_a_uv_corner = 1;
  }
  else if (v8 == v9)
  {
    is_wedge_boundary_a_uv_corner = 0;
  }
  else
  {
    v13 = 0;
    v14 = v10 >> 2;
    v15 = v22;
    v16 = 1;
    v17 = __p;
    do
    {
      if (v16 == 1)
        v18 = 0;
      else
        v18 = v15[v16 - 2];
      is_wedge_boundary_a_uv_corner = geom::triangle_mesh_atlas::is_wedge_boundary_a_uv_corner((uint64_t)this, v6, v7, &v17[2 * v18], &v17[2 * (v15[v13] - 1)]);
      if (is_wedge_boundary_a_uv_corner)
        break;
      v13 = v16++;
    }
    while (v14 > v13);
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  return is_wedge_boundary_a_uv_corner;
}

void geom::triangle_mesh_atlas::vertex_incident_wedges(uint64_t a1, geom::triangle_mesh_half_edge_connectivity *a2, unsigned int a3, char **a4, unint64_t **a5)
{
  uint64_t v5;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  geom::triangle_mesh_half_edge_connectivity *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned __int8 v26;
  float32x2_t v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  float32x2_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t *v45;
  char *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  float32x2_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char **v81;
  int v83;
  void *__p;
  _BYTE *v85;
  uint64_t v86;

  a4[1] = *a4;
  a5[1] = *a5;
  __p = 0;
  v85 = 0;
  v86 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(a2, a3, (uint64_t)&__p);
  v10 = __p;
  v11 = (unint64_t)(v85 - (_BYTE *)__p) >> 2;
  if (!(_DWORD)v11)
    goto LABEL_110;
  v12 = 0;
  while (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * *((unsigned int *)__p + v12)) == -1)
  {
    if (((unint64_t)(v85 - (_BYTE *)__p) >> 2) == ++v12)
      goto LABEL_111;
  }
  if ((_DWORD)v11 != (_DWORD)v12)
  {
    if (geom::triangle_mesh_half_edge_connectivity::is_boundary_vertex(a2, a3))
    {
      v13 = a2;
    }
    else
    {
      v14 = *((unsigned int *)__p + v12);
      v15 = *((_QWORD *)a2 + 2);
      v16 = 3 * v14;
      v17 = (_DWORD *)(v15 + 4 * (3 * v14));
      v13 = a2;
      if (*v17 == a3)
      {
        v18 = 0;
      }
      else if (v17[1] == a3)
      {
        v18 = 1;
      }
      else if (v17[2] == a3)
      {
        v18 = 2;
      }
      else
      {
        v18 = 255;
      }
      v19 = v11 - 1;
      if (v11 > 1)
      {
        v20 = v11 + v12;
        v21 = *(_QWORD *)(a1 + 96);
        v22 = *(_DWORD *)(v21 + 4 * v14);
        v23 = v18 + v16;
        while (1)
        {
          v24 = *((unsigned int *)__p + (v20 - 1) % v11);
          v25 = (_DWORD *)(v15 + 4 * (3 * v24));
          if (*v25 == a3)
          {
            v26 = 0;
          }
          else if (v25[1] == a3)
          {
            v26 = 1;
          }
          else
          {
            v26 = v25[2] == a3 ? 2 : -1;
          }
          if (*(_DWORD *)(v21 + 4 * v24) != v22)
            break;
          if (v22 != -1)
          {
            v27 = vsub_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 24) + 8 * v23), *(float32x2_t *)(*(_QWORD *)(a1 + 24) + 8 * (3 * (_DWORD)v24 + v26)));
            if (sqrtf(vaddv_f32(vmul_f32(v27, v27))) > 0.00001)
              break;
          }
          --v20;
          if (!--v19)
            goto LABEL_31;
        }
        LODWORD(v12) = v20 % v11;
LABEL_31:
        v13 = a2;
      }
    }
    v28 = 0;
    v83 = a3 & 0x3FFFFFFF;
    v81 = a4;
    v78 = (uint64_t)(a4 + 2);
    v79 = (uint64_t)(a5 + 2);
    v80 = (unint64_t)&unk_2289B4000;
    do
    {
      v29 = *((unsigned int *)__p + (v28 + v12) % v11);
      v30 = (_DWORD *)(*((_QWORD *)v13 + 2) + 4 * (3 * v29));
      if (*v30 == a3)
      {
        v31 = 0;
      }
      else if (v30[1] == a3)
      {
        v31 = 1;
      }
      else if (v30[2] == a3)
      {
        v31 = 2;
      }
      else
      {
        v31 = -1;
      }
      v32 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v29);
      v33 = *(float32x2_t *)(*(_QWORD *)(a1 + 24) + 8 * (3 * (_DWORD)v29 + v31));
      if (v32 != -1)
      {
        v34 = v80 & 0xC0000000 | v29 & 0x3FFFFFFF;
        v35 = v83 | (v31 << 30);
        v37 = a5[1];
        v36 = (unint64_t)a5[2];
        v80 = v34;
        if ((unint64_t)v37 >= v36)
        {
          v39 = v37 - *a5;
          if ((unint64_t)(v39 + 1) >> 61)
LABEL_113:
            abort();
          v40 = v36 - (_QWORD)*a5;
          v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1))
            v41 = v39 + 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v41;
          if (v42)
          {
            v43 = v83 | (v31 << 30);
            v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v79, v42);
            v35 = v43;
          }
          else
          {
            v44 = 0;
          }
          v45 = (unint64_t *)&v44[8 * v39];
          *v45 = v80 | (v35 << 32);
          v38 = v45 + 1;
          v47 = *a5;
          v46 = (char *)a5[1];
          if (v46 != (char *)*a5)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *--v45 = v48;
            }
            while (v46 != (char *)v47);
            v46 = (char *)*a5;
          }
          *a5 = v45;
          a5[1] = v38;
          a5[2] = (unint64_t *)&v44[8 * v42];
          if (v46)
            operator delete(v46);
          v13 = a2;
        }
        else
        {
          *v37 = v34 | (v35 << 32);
          v38 = v37 + 1;
        }
        a5[1] = v38;
      }
      while (++v28 < v11)
      {
        v49 = *((unsigned int *)__p + (v28 + v12) % v11);
        v50 = (_DWORD *)(*((_QWORD *)v13 + 2) + 4 * (3 * v49));
        if (*v50 == a3)
        {
          v51 = 0;
        }
        else if (v50[1] == a3)
        {
          v51 = 1;
        }
        else
        {
          v51 = v50[2] == a3 ? 2 : -1;
        }
        if (*(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v49) != v32)
          break;
        if (v32 != -1)
        {
          v52 = vsub_f32(v33, *(float32x2_t *)(*(_QWORD *)(a1 + 24) + 8 * (3 * (_DWORD)v49 + v51)));
          if (sqrtf(vaddv_f32(vmul_f32(v52, v52))) > 0.00001)
            break;
          v5 = v5 & 0xC0000000 | v49 & 0x3FFFFFFF;
          v53 = v83 | (v51 << 30);
          v55 = (uint64_t *)a5[1];
          v54 = (unint64_t)a5[2];
          if ((unint64_t)v55 >= v54)
          {
            v57 = ((char *)v55 - (char *)*a5) >> 3;
            if ((unint64_t)(v57 + 1) >> 61)
              goto LABEL_113;
            v58 = v54 - (_QWORD)*a5;
            v59 = v58 >> 2;
            if (v58 >> 2 <= (unint64_t)(v57 + 1))
              v59 = v57 + 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
              v60 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v60 = v59;
            if (v60)
              v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v79, v60);
            else
              v61 = 0;
            v62 = &v61[8 * v57];
            *(_QWORD *)v62 = v5 | (v53 << 32);
            v56 = (unint64_t *)(v62 + 8);
            v64 = *a5;
            v63 = (char *)a5[1];
            if (v63 != (char *)*a5)
            {
              do
              {
                v65 = *((_QWORD *)v63 - 1);
                v63 -= 8;
                *((_QWORD *)v62 - 1) = v65;
                v62 -= 8;
              }
              while (v63 != (char *)v64);
              v63 = (char *)*a5;
            }
            *a5 = (unint64_t *)v62;
            a5[1] = v56;
            a5[2] = (unint64_t *)&v61[8 * v60];
            if (v63)
              operator delete(v63);
            v13 = a2;
          }
          else
          {
            *v55 = v5 | (v53 << 32);
            v56 = (unint64_t *)(v55 + 1);
          }
          a5[1] = v56;
        }
      }
      if (v32 != -1)
      {
        v66 = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
        v68 = v81[1];
        v67 = (unint64_t)v81[2];
        if ((unint64_t)v68 >= v67)
        {
          v70 = *v81;
          v71 = (v68 - *v81) >> 2;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62)
            goto LABEL_113;
          v73 = v67 - (_QWORD)v70;
          if (v73 >> 1 > v72)
            v72 = v73 >> 1;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
            v74 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v74 = v72;
          if (v74)
          {
            v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v78, v74);
            v70 = *v81;
            v68 = v81[1];
          }
          else
          {
            v75 = 0;
          }
          v76 = &v75[4 * v71];
          *(_DWORD *)v76 = v66;
          v69 = v76 + 4;
          while (v68 != v70)
          {
            v77 = *((_DWORD *)v68 - 1);
            v68 -= 4;
            *((_DWORD *)v76 - 1) = v77;
            v76 -= 4;
          }
          *v81 = v76;
          v81[1] = v69;
          v81[2] = &v75[4 * v74];
          if (v70)
            operator delete(v70);
          v13 = a2;
        }
        else
        {
          *(_DWORD *)v68 = v66;
          v69 = v68 + 4;
        }
        v81[1] = v69;
      }
    }
    while (v28 < v11);
    v10 = __p;
LABEL_110:
    if (!v10)
      return;
  }
LABEL_111:
  v85 = v10;
  operator delete(v10);
}

void geom::triangle_mesh_atlas::classify_vertices(geom::triangle_mesh_atlas *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int half_edge_for_face_vertex;
  _BOOL4 is_vertex_a_uv_corner;
  uint64_t v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;

  v8 = *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40);
  __p = 0;
  v31 = 0;
  v32 = 0;
  v9 = (v8 >> 2);
  std::vector<BOOL>::resize((uint64_t)&__p, v9, 0);
  v10 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = *a3;
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (char *)__p;
    do
    {
      if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
      {
        v15 = (unsigned int *)(v13 + 4 * (3 * v11));
        v16 = *v15;
        v17 = v15[1];
        v18 = v15[2];
        *(_QWORD *)&v14[(v16 >> 3) & 0x1FFFFFF8] |= 1 << v16;
        *(_QWORD *)&v14[(v17 >> 3) & 0x1FFFFFF8] |= 1 << v17;
        *(_QWORD *)&v14[(v18 >> 3) & 0x1FFFFFF8] |= 1 << v18;
      }
      ++v11;
    }
    while (v11 != v10);
  }
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    v19 = 0;
    do
    {
      if (((*(_QWORD *)((char *)__p + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        *(_BYTE *)(*(_QWORD *)a1 + v19) = 0;
      ++v19;
    }
    while (v9 != v19);
  }
  if (__p)
    operator delete(__p);
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    v20 = 0;
    while (*(_BYTE *)(*(_QWORD *)a1 + v20) != 3)
    {
LABEL_36:
      if (++v20 == v9)
        return;
    }
    __p = 0;
    v31 = 0;
    v32 = 0;
    geom::triangle_mesh_connectivity::get_incident_edges_to_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, v20, (uint64_t)&__p);
    v21 = (unsigned int *)__p;
    if (v31 == __p)
      goto LABEL_31;
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = v21[v22];
      if (((*(_QWORD *)(*a4 + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) != 0
        || (v25 = *(_QWORD *)(a2 + 184), v24 < (*(_QWORD *)(a2 + 192) - v25) >> 2)
        && (half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, *(_DWORD *)(v25 + 4 * v24) / 3u, *(_DWORD *)(v25 + 4 * v24) % 3u), geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge((geom::triangle_mesh_half_edge_connectivity *)a2, half_edge_for_face_vertex)))
      {
        ++v23;
      }
      ++v22;
      v21 = (unsigned int *)__p;
    }
    while (v22 < (v31 - (_BYTE *)__p) >> 2 && v23 < 3);
    if (!v23)
    {
LABEL_31:
      *(_BYTE *)(*(_QWORD *)a1 + v20) = 0;
    }
    else
    {
      if (v23 == 2)
      {
        is_vertex_a_uv_corner = geom::triangle_mesh_atlas::is_vertex_a_uv_corner(a1, (const geom::triangle_mesh_connectivity *)a2, v20);
        v29 = *(_QWORD *)a1;
        if (!is_vertex_a_uv_corner)
        {
          *(_BYTE *)(v29 + v20) = 1;
          goto LABEL_34;
        }
      }
      else
      {
        v29 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v29 + v20) = 2;
    }
LABEL_34:
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
    goto LABEL_36;
  }
}

void geom::triangle_mesh_atlas::build_face_charts(std::vector<int> *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::vector<int>::pointer end;
  int *v12;
  std::vector<int>::pointer begin;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int v18;
  char *v19;
  char *v20;
  int *v21;
  int v22;
  std::vector<int>::size_type v23;
  uint64_t v24;
  int *value;
  char *v26;
  int *v27;
  std::vector<int>::pointer v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int half_edge_for_face_vertex;
  unsigned int v42;
  unsigned int v43;
  int half_edge_face;
  unsigned int half_edge_twin;
  unint64_t v46;
  std::vector<int>::pointer v47;
  int *v48;
  std::vector<int>::pointer v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  int *v55;
  int v56;
  unint64_t v57;
  int *v58;
  char *v59;
  int *v60;
  std::vector<int>::pointer v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  int *v67;
  int v68;
  unint64_t v69;
  unint64_t v71;
  int v72;
  std::vector<int> __p;
  void *v74[3];
  _DWORD v75[3];
  _DWORD v76[2];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a2 + 4);
  memset(v74, 0, sizeof(v74));
  std::vector<BOOL>::resize((uint64_t)v74, v7, 0);
  memset(&__p, 0, sizeof(__p));
  std::vector<unsigned int>::resize(a1 + 4, v7, &geom::triangle_mesh_atlas::k_invalid_chart);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v72 = 0;
    v69 = v7;
    do
    {
      v9 = v8 >> 6;
      v10 = 1 << v8;
      if ((*((_QWORD *)v74[0] + (v8 >> 6)) & (1 << v8)) == 0 && (*(_QWORD *)(*a3 + 8 * v9) & v10) != 0)
      {
        end = __p.__end_;
        v71 = v8;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          begin = __p.__begin_;
          v14 = __p.__end_ - __p.__begin_;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            goto LABEL_88;
          v16 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = v8;
            v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v17);
            LODWORD(v8) = v18;
            v20 = v19;
            begin = __p.__begin_;
            end = __p.__end_;
          }
          else
          {
            v20 = 0;
          }
          v21 = (int *)&v20[4 * v14];
          *v21 = v8;
          v12 = v21 + 1;
          while (end != begin)
          {
            v22 = *--end;
            *--v21 = v22;
          }
          __p.__begin_ = v21;
          __p.__end_ = v12;
          __p.__end_cap_.__value_ = (int *)&v20[4 * v17];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *__p.__end_ = v8;
          v12 = end + 1;
        }
        __p.__end_ = v12;
        *((_QWORD *)v74[0] + v9) |= v10;
        while (v12 != __p.__begin_)
        {
          v23 = v12 - __p.__begin_ - 1;
          v24 = __p.__begin_[v23];
          std::vector<unsigned int>::resize(&__p, v23);
          v26 = (char *)a1[3].__end_;
          value = a1[3].__end_cap_.__value_;
          if (v26 >= (char *)value)
          {
            v28 = a1[3].__begin_;
            v29 = (v26 - (char *)v28) >> 2;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
              goto LABEL_88;
            v31 = (char *)value - (char *)v28;
            if (v31 >> 1 > v30)
              v30 = v31 >> 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a1[3].__end_cap_, v32);
              v28 = a1[3].__begin_;
              v26 = (char *)a1[3].__end_;
            }
            else
            {
              v33 = 0;
            }
            v34 = (int *)&v33[4 * v29];
            *v34 = v24;
            v27 = v34 + 1;
            while (v26 != (char *)v28)
            {
              v35 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *--v34 = v35;
            }
            a1[3].__begin_ = v34;
            a1[3].__end_ = v27;
            a1[3].__end_cap_.__value_ = (int *)&v33[4 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_DWORD *)v26 = v24;
            v27 = (int *)(v26 + 4);
          }
          v36 = 0;
          a1[3].__end_ = v27;
          a1[4].__begin_[v24] = v72;
          v37 = *(_QWORD *)(a2 + 160);
          v38 = *(_DWORD *)(v37 + 4 * (3 * v24 + 1));
          v75[0] = *(_DWORD *)(v37 + 4 * (3 * v24));
          v75[1] = v38;
          v75[2] = *(_DWORD *)(v37 + 4 * (3 * v24 + 2));
          do
          {
            v39 = v75[v36];
            if (((*(_QWORD *)(*a4 + ((v39 >> 3) & 0x1FFFFFF8)) >> v39) & 1) == 0)
            {
              v40 = *(_QWORD *)(a2 + 184);
              if (v39 < (*(_QWORD *)(a2 + 192) - v40) >> 2)
              {
                half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, *(_DWORD *)(v40 + 4 * v39) / 3u, *(_DWORD *)(v40 + 4 * v39) % 3u);
                if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge((geom::triangle_mesh_half_edge_connectivity *)a2, half_edge_for_face_vertex))
                {
                  v42 = *(_DWORD *)(*(_QWORD *)(a2 + 184) + 4 * v39);
                  v43 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, v42 / 3, v42 % 3);
                  half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face((geom::triangle_mesh_half_edge_connectivity *)a2, v43);
                  v76[0] = half_edge_face;
                  if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge((geom::triangle_mesh_half_edge_connectivity *)a2, v43))
                  {
                    half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin((geom::triangle_mesh_half_edge_connectivity *)a2, v43);
                    v76[1] = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face((geom::triangle_mesh_half_edge_connectivity *)a2, half_edge_twin);
                    v46 = v76[half_edge_face == (_DWORD)v24];
                    if ((_DWORD)v46 != -1 && (*((_QWORD *)v74[0] + (v46 >> 6)) & (1 << v46)) == 0)
                    {
                      v47 = __p.__end_;
                      if (__p.__end_ >= __p.__end_cap_.__value_)
                      {
                        v49 = __p.__begin_;
                        v50 = __p.__end_ - __p.__begin_;
                        v51 = v50 + 1;
                        if ((unint64_t)(v50 + 1) >> 62)
                          goto LABEL_88;
                        v52 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                        if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v51)
                          v51 = v52 >> 1;
                        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                          v53 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v53 = v51;
                        if (v53)
                        {
                          v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v53);
                          v49 = __p.__begin_;
                          v47 = __p.__end_;
                        }
                        else
                        {
                          v54 = 0;
                        }
                        v55 = (int *)&v54[4 * v50];
                        *v55 = v46;
                        v48 = v55 + 1;
                        while (v47 != v49)
                        {
                          v56 = *--v47;
                          *--v55 = v56;
                        }
                        __p.__begin_ = v55;
                        __p.__end_ = v48;
                        __p.__end_cap_.__value_ = (int *)&v54[4 * v53];
                        if (v49)
                          operator delete(v49);
                      }
                      else
                      {
                        *__p.__end_ = v46;
                        v48 = v47 + 1;
                      }
                      __p.__end_ = v48;
                      *((_QWORD *)v74[0] + (v46 >> 6)) |= 1 << v46;
                    }
                  }
                }
              }
            }
            ++v36;
          }
          while (v36 != 3);
          v12 = __p.__end_;
        }
        v57 = (unint64_t)((char *)a1[3].__end_ - (char *)a1[3].__begin_) >> 2;
        v59 = (char *)a1[2].__end_;
        v58 = a1[2].__end_cap_.__value_;
        if (v59 >= (char *)v58)
        {
          v61 = a1[2].__begin_;
          v62 = (v59 - (char *)v61) >> 2;
          v63 = v62 + 1;
          v7 = v69;
          if ((unint64_t)(v62 + 1) >> 62)
LABEL_88:
            abort();
          v64 = (char *)v58 - (char *)v61;
          if (v64 >> 1 > v63)
            v63 = v64 >> 1;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
            v65 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65)
          {
            v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a1[2].__end_cap_, v65);
            v61 = a1[2].__begin_;
            v59 = (char *)a1[2].__end_;
          }
          else
          {
            v66 = 0;
          }
          v67 = (int *)&v66[4 * v62];
          *v67 = v57;
          v60 = v67 + 1;
          while (v59 != (char *)v61)
          {
            v68 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *--v67 = v68;
          }
          a1[2].__begin_ = v67;
          a1[2].__end_ = v60;
          a1[2].__end_cap_.__value_ = (int *)&v66[4 * v65];
          if (v61)
            operator delete(v61);
        }
        else
        {
          *(_DWORD *)v59 = v57;
          v60 = (int *)(v59 + 4);
          v7 = v69;
        }
        v8 = v71;
        ++v72;
        a1[2].__end_ = v60;
      }
      ++v8;
    }
    while (v8 != v7);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
  if (v74[0])
    operator delete(v74[0]);
}

void geom::triangle_mesh_atlas::init(std::vector<int> *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int half_edge_for_face_vertex;
  unsigned int v12;
  unsigned int v13;
  unsigned int half_edge_face;
  uint64_t v15;
  unsigned int v16;
  unsigned int half_edge_twin;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  float32x2_t v33;
  uint64_t v34;
  float32x2_t v35;
  float32x2_t v36;
  BOOL v37;
  unsigned int *v38;
  char v39;
  char v40;
  void *__p[3];
  void *v42[3];
  unsigned int v43[2];
  uint64_t v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  memset(v42, 0, sizeof(v42));
  geom::triangle_mesh_atlas::copy_face_vertex_uvs(a1, a2, a3, a4, v42);
  v6 = 3 * *(_DWORD *)(a2 + 4) - *(_DWORD *)(a2 + 8) + ((*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
  v7 = v6 >> 1;
  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, v6 >> 1, 0);
  if (v6 >= 2)
  {
    v8 = 0;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    do
    {
      v10 = *(_QWORD *)(a2 + 184);
      if (v8 >= (*(_QWORD *)(a2 + 192) - v10) >> 2)
      {
        half_edge_face = -1;
        v16 = -1;
      }
      else
      {
        half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, *(_DWORD *)(v10 + 4 * v8) / 3u, *(_DWORD *)(v10 + 4 * v8) % 3u);
        if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge((geom::triangle_mesh_half_edge_connectivity *)a2, half_edge_for_face_vertex))
        {
          v12 = *(_DWORD *)(*(_QWORD *)(a2 + 184) + 4 * v8);
          v13 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, v12 / 3, v12 % 3);
          half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face((geom::triangle_mesh_half_edge_connectivity *)a2, v13);
          if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge((geom::triangle_mesh_half_edge_connectivity *)a2, v13))
          {
            v15 = *(_QWORD *)((char *)v42[0] + (((unint64_t)half_edge_face >> 3) & 0x1FFFFFF8)) >> half_edge_face;
            goto LABEL_40;
          }
          half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin((geom::triangle_mesh_half_edge_connectivity *)a2, v13);
          v16 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face((geom::triangle_mesh_half_edge_connectivity *)a2, half_edge_twin);
        }
        else
        {
          half_edge_face = -1;
          v16 = -1;
        }
      }
      v18 = (1 << half_edge_face) & *(_QWORD *)((_BYTE *)v42[0]
                                                + (((unint64_t)half_edge_face >> 3) & 0x1FFFFFF8));
      if ((((v18 != 0) ^ (*(_QWORD *)((char *)v42[0] + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) >> v16)) & 1) != 0)
        goto LABEL_41;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 184);
        if (v8 >= (*(_QWORD *)(a2 + 192) - v19) >> 2)
        {
          *(_QWORD *)v43 = -1;
        }
        else
        {
          v20 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, *(_DWORD *)(v19 + 4 * v8) / 3u, *(_DWORD *)(v19 + 4 * v8) % 3u);
          geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)a2, v20, v43);
        }
        v21 = 0;
        v22 = *(_QWORD *)(a2 + 16);
        v23 = (uint64_t *)(v22 + 12 * half_edge_face);
        v24 = *v23;
        v25 = *((_DWORD *)v23 + 2);
        v26 = (uint64_t *)(v22 + 12 * v16);
        v27 = *v26;
        v28 = *((_DWORD *)v26 + 2);
        v29 = 1;
        do
        {
          v30 = 0;
          v31 = v43[v21];
          v32 = v29;
          v44 = v24;
          v45 = v25;
          while (*((_DWORD *)&v44 + v30) != v31)
          {
            if (++v30 == 3)
            {
              v33 = 0;
              goto LABEL_23;
            }
          }
          v33 = *(float32x2_t *)&a1[1].__begin_[6 * half_edge_face + 2 * v30];
LABEL_23:
          v34 = 0;
          v44 = v27;
          v45 = v28;
          while (*((_DWORD *)&v44 + v34) != v31)
          {
            if (++v34 == 3)
            {
              v35 = 0;
              goto LABEL_28;
            }
          }
          v35 = *(float32x2_t *)&a1[1].__begin_[6 * v16 + 2 * v34];
LABEL_28:
          v29 = 0;
          v36 = vsub_f32(v33, v35);
          *(&v39 + v21) = sqrtf(vaddv_f32(vmul_f32(v36, v36))) <= 0.00001;
          v21 = 1;
        }
        while ((v32 & 1) != 0);
        if (v39)
          v37 = v40 == 0;
        else
          v37 = 1;
        LOBYTE(v15) = v37;
        if (v39 != v40)
        {
          if (v39)
            v38 = &v43[1];
          else
            v38 = v43;
          *((_BYTE *)a1->__begin_ + *v38) = 2;
        }
LABEL_40:
        if ((v15 & 1) != 0)
LABEL_41:
          *(_QWORD *)((char *)__p[0] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  geom::triangle_mesh_atlas::build_face_charts(a1, a2, v42, __p);
  geom::triangle_mesh_atlas::classify_vertices((geom::triangle_mesh_atlas *)a1, a2, (uint64_t *)v42, __p);
  if (__p[0])
    operator delete(__p[0]);
  if (v42[0])
    operator delete(v42[0]);
}

void geom::triangle_mesh_atlas::init(std::vector<int> *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<int>::pointer begin;
  int *v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int half_edge_for_face_vertex;
  unsigned int v24;
  unsigned int v25;
  unsigned int half_edge_face;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int half_edge_twin;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  std::vector<int>::pointer v43;
  int *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  std::vector<int>::pointer v52;
  int *v53;
  unsigned int v54;
  BOOL v55;
  std::vector<int> v57;
  void *__p[3];
  void *v59[3];
  unsigned int v60[2];
  uint64_t v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v11 = 3 * *(_DWORD *)(a2 + 4)
      - *(_DWORD *)(a2 + 8)
      + ((*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
  memset(v59, 0, sizeof(v59));
  geom::triangle_mesh_atlas::copy_face_vertex_uvs(a1, a2, a3, a4, a5, v59);
  memset(__p, 0, sizeof(__p));
  std::vector<BOOL>::resize((uint64_t)__p, (3 * *(_DWORD *)(a2 + 4) - *(_DWORD *)(a2 + 8) + ((*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2)) >> 1, 0);
  memset(&v57, 0, sizeof(v57));
  std::vector<unsigned int>::resize(&v57, (3 * *(_DWORD *)(a2 + 4)), geom::k_invalid_index);
  v12 = (int *)*a3;
  v13 = a3[1] - *a3;
  if (v13)
  {
    v14 = v13 >> 2;
    begin = v57.__begin_;
    if (v14 <= 1)
      v14 = 1;
    v16 = (int *)(*a4 + 8);
    do
    {
      v17 = *v12++;
      v18 = 3 * v17;
      begin[3 * v17] = *(v16 - 2);
      begin[3 * v17 + 1] = *(v16 - 1);
      v19 = *v16;
      v16 += 3;
      begin[v18 + 2] = v19;
      --v14;
    }
    while (v14);
  }
  if (v11 >= 2)
  {
    v20 = 0;
    if (v11 >> 1 <= 1)
      v21 = 1;
    else
      v21 = v11 >> 1;
    do
    {
      v22 = *(_QWORD *)(a2 + 184);
      if (v20 >= (*(_QWORD *)(a2 + 192) - v22) >> 2)
      {
        half_edge_face = -1;
        v29 = -1;
      }
      else
      {
        half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, *(_DWORD *)(v22 + 4 * v20) / 3u, *(_DWORD *)(v22 + 4 * v20) % 3u);
        if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge((geom::triangle_mesh_half_edge_connectivity *)a2, half_edge_for_face_vertex))
        {
          v24 = *(_DWORD *)(*(_QWORD *)(a2 + 184) + 4 * v20);
          v25 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, v24 / 3, v24 % 3);
          half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face((geom::triangle_mesh_half_edge_connectivity *)a2, v25);
          if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge((geom::triangle_mesh_half_edge_connectivity *)a2, v25))
          {
            v27 = v11;
            v28 = v5;
            if (((*(_QWORD *)((char *)v59[0] + (((unint64_t)half_edge_face >> 3) & 0x1FFFFFF8)) >> half_edge_face) & 1) == 0)
              goto LABEL_59;
            goto LABEL_57;
          }
          half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin((geom::triangle_mesh_half_edge_connectivity *)a2, v25);
          v29 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face((geom::triangle_mesh_half_edge_connectivity *)a2, half_edge_twin);
        }
        else
        {
          half_edge_face = -1;
          v29 = -1;
        }
      }
      v31 = (1 << half_edge_face) & *(_QWORD *)((_BYTE *)v59[0]
                                                + (((unint64_t)half_edge_face >> 3) & 0x1FFFFFF8));
      if ((((v31 != 0) ^ (*(_QWORD *)((char *)v59[0] + (((unint64_t)v29 >> 3) & 0x1FFFFFF8)) >> v29)) & 1) != 0)
        goto LABEL_57;
      if (v31)
      {
        v32 = *(_QWORD *)(a2 + 184);
        if (v20 >= (*(_QWORD *)(a2 + 192) - v32) >> 2)
        {
          *(_QWORD *)v60 = -1;
          v34 = -1;
          v35 = -1;
        }
        else
        {
          v33 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)a2, *(_DWORD *)(v32 + 4 * v20) / 3u, *(_DWORD *)(v32 + 4 * v20) % 3u);
          geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)a2, v33, v60);
          v35 = v60[0];
          v34 = v60[1];
        }
        v27 = v6;
        v36 = 0;
        v37 = *(_QWORD *)(a2 + 16);
        v38 = 3 * half_edge_face;
        v39 = (uint64_t *)(v37 + 12 * half_edge_face);
        v61 = *v39;
        v62 = *((_DWORD *)v39 + 2);
        while (1)
        {
          v40 = v36 + 1;
          if (v36 == 2)
            v41 = 0;
          else
            v41 = v36 + 1;
          v42 = *((_DWORD *)&v61 + v36);
          if (v42 == v35 && *((_DWORD *)&v61 + v41) == v34)
          {
            v43 = v57.__begin_;
            v44 = &v57.__begin_[(v38 + v36)];
            v45 = v41 + v38;
            goto LABEL_35;
          }
          if (v42 == v34 && *((_DWORD *)&v61 + v41) == v35)
            break;
          ++v36;
          if (v40 == 3)
            goto LABEL_36;
        }
        v43 = v57.__begin_;
        v44 = &v57.__begin_[v41 + v38];
        v45 = v38 + v36;
LABEL_35:
        v7 = *v44;
        v27 = v43[v45];
LABEL_36:
        v46 = 0;
        v47 = 3 * v29;
        v48 = (uint64_t *)(v37 + 12 * v29);
        v61 = *v48;
        v62 = *((_DWORD *)v48 + 2);
        while (1)
        {
          v49 = v46 + 1;
          if (v46 == 2)
            v50 = 0;
          else
            v50 = v46 + 1;
          v51 = *((_DWORD *)&v61 + v46);
          if (v51 == v35 && *((_DWORD *)&v61 + v50) == v34)
          {
            v52 = v57.__begin_;
            v53 = &v57.__begin_[(v47 + v46)];
            v54 = v50 + v47;
            goto LABEL_48;
          }
          if (v51 == v34 && *((_DWORD *)&v61 + v50) == v35)
            break;
          ++v46;
          if (v49 == 3)
            goto LABEL_49;
        }
        v52 = v57.__begin_;
        v53 = &v57.__begin_[v50 + v47];
        v54 = v47 + v46;
LABEL_48:
        v5 = *v53;
        v11 = v52[v54];
LABEL_49:
        v55 = (_DWORD)v7 == (_DWORD)v5 && (_DWORD)v27 == (_DWORD)v11;
        if (((_DWORD)v27 == (_DWORD)v11) != ((_DWORD)v7 == (_DWORD)v5))
        {
          if ((_DWORD)v7 != (_DWORD)v5)
            v34 = v35;
          *((_BYTE *)a1->__begin_ + v34) = 2;
        }
        v6 = v27;
        v28 = v7;
        if (v55)
          goto LABEL_59;
LABEL_57:
        *(_QWORD *)((char *)__p[0] + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      }
      v27 = v11;
      v28 = v5;
LABEL_59:
      ++v20;
      v5 = v28;
      v11 = v27;
    }
    while (v20 != v21);
  }
  geom::triangle_mesh_atlas::build_face_charts(a1, a2, v59, __p);
  geom::triangle_mesh_atlas::classify_vertices((geom::triangle_mesh_atlas *)a1, a2, (uint64_t *)v59, __p);
  if (v57.__begin_)
  {
    v57.__end_ = v57.__begin_;
    operator delete(v57.__begin_);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v59[0])
    operator delete(v59[0]);
}

unint64_t geom::triangle_mesh_atlas::face_vertex_from_face_and_vertex(geom::triangle_mesh_atlas *this, const geom::triangle_mesh_connectivity *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v4 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a2 + 2) + 4 * (3 * a3);
  v8 = *(_QWORD *)v5;
  v9 = *(_DWORD *)(v5 + 8);
  v6 = a4 & 0x3FFFFFFF;
  while (*(_DWORD *)((char *)&v8 + v4) != a4)
  {
    v4 += 4;
    v6 = (v6 + 0x40000000);
    if (v4 == 12)
    {
      v6 = a4 & 0x3FFFFFFF;
      return a3 & 0x3FFFFFFF | (unint64_t)(v6 << 32);
    }
  }
  return a3 & 0x3FFFFFFF | (unint64_t)(v6 << 32);
}

void geom::triangle_mesh_atlas::pack_faces_into_charts(uint64_t a1, unsigned int **a2, char **a3, std::vector<unsigned int> *this)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v16;
  std::vector<unsigned int>::pointer begin;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  int v47;

  a3[1] = *a3;
  this->__end_ = this->__begin_;
  std::vector<unsigned int>::reserve(this, a2[1] - *a2);
  v8 = (uint64_t)*a2;
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * **a2);
  if (a2[1] == *a2)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(unsigned int *)(v8 + 4 * v10);
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v12);
      if (v13 == -1)
        break;
      end = this->__end_;
      value = this->__end_cap_.__value_;
      if (end >= value)
      {
        begin = this->__begin_;
        v18 = end - this->__begin_;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          goto LABEL_61;
        v20 = (char *)value - (char *)begin;
        if (v20 >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v21);
          begin = this->__begin_;
          end = this->__end_;
        }
        else
        {
          v22 = 0;
        }
        v23 = (unsigned int *)&v22[4 * v18];
        *v23 = v12;
        v16 = v23 + 1;
        while (end != begin)
        {
          v24 = *--end;
          *--v23 = v24;
        }
        this->__begin_ = v23;
        this->__end_ = v16;
        this->__end_cap_.__value_ = (unsigned int *)&v22[4 * v21];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v12;
        v16 = end + 1;
      }
      this->__end_ = v16;
      if (v13 != v9)
      {
        v26 = a3[1];
        v25 = (unint64_t)a3[2];
        if ((unint64_t)v26 >= v25)
        {
          v28 = *a3;
          v29 = (v26 - *a3) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            goto LABEL_61;
          v31 = v25 - (_QWORD)v28;
          if (v31 >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v32);
            v28 = *a3;
            v26 = a3[1];
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[4 * v29];
          *(_DWORD *)v34 = v11;
          v27 = v34 + 4;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          *a3 = v34;
          a3[1] = v27;
          a3[2] = &v33[4 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)v26 = v11;
          v27 = v26 + 4;
        }
        a3[1] = v27;
        v9 = v13;
      }
      v8 = (uint64_t)*a2;
      v10 = ++v11;
      if (v11 >= (unint64_t)(a2[1] - *a2))
        goto LABEL_42;
    }
    LODWORD(v10) = v11;
  }
LABEL_42:
  if (v9 != -1)
  {
    v36 = (unint64_t)a3[2];
    v37 = a3[1];
    if ((unint64_t)v37 >= v36)
    {
      v39 = *a3;
      v40 = (v37 - *a3) >> 2;
      v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 62)
LABEL_61:
        abort();
      v42 = v36 - (_QWORD)v39;
      if (v42 >> 1 > v41)
        v41 = v42 >> 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
        v43 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v43);
        v39 = *a3;
        v37 = a3[1];
      }
      else
      {
        v44 = 0;
      }
      v45 = &v44[4 * v40];
      v46 = &v44[4 * v43];
      *(_DWORD *)v45 = v10;
      v38 = v45 + 4;
      while (v37 != v39)
      {
        v47 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v45 - 1) = v47;
        v45 -= 4;
      }
      *a3 = v45;
      a3[1] = v38;
      a3[2] = v46;
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_DWORD *)v37 = v10;
      v38 = v37 + 4;
    }
    a3[1] = v38;
  }
}

void geom::triangle_mesh_atlas::vertex_incident_charts(uint64_t a1, _QWORD *a2, unsigned int a3, char **a4, std::vector<unsigned int> *a5)
{
  unint64_t v8;
  uint64_t v9;
  void *__p;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  __p = 0;
  v11 = 0;
  v12 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(a2, a3, (uint64_t)&__p);
  v8 = 126 - 2 * __clz((v11 - (_BYTE *)__p) >> 2);
  v13 = a1;
  if (v11 == __p)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *,false>((uint64_t)__p, (unsigned int *)v11, (uint64_t)&v13, v9, 1);
  geom::triangle_mesh_atlas::pack_faces_into_charts(a1, (unsigned int **)&__p, a4, a5);
  if (__p)
  {
    v11 = (char *)__p;
    operator delete(__p);
  }
}

void geom::triangle_mesh_atlas::edge_incident_wedges(uint64_t a1, geom::triangle_mesh_half_edge_connectivity *this, unsigned int a3, std::vector<unsigned int> *a4, uint64_t a5)
{
  int half_edge_face;
  unint64_t v10;
  uint64_t v11;
  unsigned int half_edge_for_face_vertex;
  unsigned int v13;
  unsigned int v14;
  unsigned int half_edge_twin;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int *v25[7];
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  char **v35[2];
  char v36;
  int v37;
  int v38;
  unsigned int v39[2];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  half_edge_face = -1;
  v37 = -1;
  v10 = a3;
  v11 = *((_QWORD *)this + 23);
  if (a3 < (unint64_t)((*((_QWORD *)this + 24) - v11) >> 2))
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, *(_DWORD *)(v11 + 4 * a3) / 3u, *(_DWORD *)(v11 + 4 * a3) % 3u);
    if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, half_edge_for_face_vertex))
    {
      v13 = *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v10);
      v14 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v13 / 3, v13 % 3);
      half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(this, v14);
      if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, v14))
      {
        half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v14);
        v37 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(this, half_edge_twin);
      }
    }
    else
    {
      half_edge_face = -1;
    }
  }
  v38 = half_edge_face;
  v35[0] = (char **)a4;
  v35[1] = (char **)a5;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v25[0] = &v38;
  v25[1] = &v37;
  v25[2] = (int *)&v26;
  v25[3] = (int *)&v36;
  v25[4] = (int *)&v32;
  v25[5] = (int *)&v29;
  v25[6] = (int *)v35;
  a4->__end_ = a4->__begin_;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  std::vector<unsigned int>::reserve(a4, 4uLL);
  _ZNSt3__16vectorIZNK4geom3bvhIfLh2EE13closest_pointINS_8functionIFDv2_fjS6_EEEEES6_T_S6_RfRjE5stateNS_9allocatorISC_EEE7reserveEm((void **)a5, 0x20uLL);
  v16 = *((_QWORD *)this + 23);
  if (v10 >= (*((_QWORD *)this + 24) - v16) >> 2)
  {
    *(_QWORD *)v39 = -1;
    v18 = -1;
  }
  else
  {
    v17 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, *(_DWORD *)(v16 + 4 * v10) / 3u, *(_DWORD *)(v16 + 4 * v10) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(this, v17, v39);
    v18 = v39[0];
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  geom::triangle_mesh_atlas::vertex_incident_wedges(a1, this, v18, (char **)&v22, (unint64_t **)&__p);
  geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_2::operator()(v25, (uint64_t *)&v22, &__p);
  geom::triangle_mesh_atlas::vertex_incident_wedges(a1, this, v39[1], (char **)&v22, (unint64_t **)&__p);
  geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_2::operator()(v25, (uint64_t *)&v22, &__p);
  geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_1::operator()(v35, v32, v33 - v32);
  geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_1::operator()(v35, (uint64_t *)v29, (v30 - (_BYTE *)v29) >> 3);
  geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_1::operator()(v35, (uint64_t *)v26, (v27 - (_BYTE *)v26) >> 3);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
}

void geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_2::operator()(int **a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  _BOOL4 v16;
  uint64_t **v17;
  uint64_t *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;

  v3 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    do
    {
      if (v5)
        v6 = *(unsigned int *)(v3 + 4 * v5 - 4);
      else
        v6 = 0;
      v7 = (uint64_t *)(*a3 + 8 * v6);
      v8 = *(unsigned int *)(v3 + 4 * v5);
      v9 = v8 - v6;
      if (v8 == v6)
      {
LABEL_7:
        geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_1::operator()((char ***)a1[6], v7, v9);
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = *a3 + 8 * v8;
        v13 = 8 * v8 - 8 * v6;
        v14 = v7;
        do
        {
          v15 = *(_DWORD *)v14 & 0x3FFFFFFF;
          if (v15 == **a1)
          {
            if ((v11 & 1) != 0)
              goto LABEL_19;
            v11 = 0;
            v10 = 1;
          }
          else
          {
            v16 = v15 == *a1[1];
            if ((v16 & v10 & 1) != 0)
            {
              LOBYTE(v10) = 1;
              v11 = 1;
              goto LABEL_18;
            }
            v11 |= v16;
          }
          ++v14;
          v13 -= 8;
        }
        while (v13);
        if ((v10 & 1) == 0)
          goto LABEL_44;
LABEL_18:
        if ((v11 & 1) != 0)
        {
LABEL_19:
          v17 = (uint64_t **)a1[2];
          v18 = v17[1];
          if (v18 == *v17)
          {
            v37 = v17 + 2;
            do
            {
              v38 = *v7;
              if ((unint64_t)v18 >= *v37)
              {
                v39 = v18 - *v17;
                if ((unint64_t)(v39 + 1) >> 61)
LABEL_114:
                  abort();
                v40 = *v37 - (_QWORD)*v17;
                v41 = v40 >> 2;
                if (v40 >> 2 <= (unint64_t)(v39 + 1))
                  v41 = v39 + 1;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v41;
                if (v42)
                  v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v17 + 2), v42);
                else
                  v43 = 0;
                v44 = (uint64_t *)&v43[8 * v39];
                *v44 = v38;
                v18 = v44 + 1;
                v46 = (char *)*v17;
                v45 = (char *)v17[1];
                if (v45 != (char *)*v17)
                {
                  do
                  {
                    v47 = *((_QWORD *)v45 - 1);
                    v45 -= 8;
                    *--v44 = v47;
                  }
                  while (v45 != v46);
                  v45 = (char *)*v17;
                }
                *v17 = v44;
                v17[1] = v18;
                v17[2] = (uint64_t *)&v43[8 * v42];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *v18++ = v38;
              }
              v17[1] = v18;
              ++v7;
            }
            while (v7 != (uint64_t *)v12);
          }
          else
          {
            v19 = **a1;
            v20 = *a1[1];
            v21 = v17 + 2;
            do
            {
              v22 = *v7;
              v23 = *v7 & 0x3FFFFFFF;
              if ((_DWORD)v23 != v19 && (_DWORD)v23 != v20)
              {
                if ((unint64_t)v18 >= *v21)
                {
                  v25 = v18 - *v17;
                  if ((unint64_t)(v25 + 1) >> 61)
                    goto LABEL_114;
                  v26 = *v21 - (_QWORD)*v17;
                  v27 = v26 >> 2;
                  if (v26 >> 2 <= (unint64_t)(v25 + 1))
                    v27 = v25 + 1;
                  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
                    v28 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v28 = v27;
                  if (v28)
                    v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v17 + 2), v28);
                  else
                    v29 = 0;
                  v30 = (uint64_t *)&v29[8 * v25];
                  *v30 = v22;
                  v18 = v30 + 1;
                  v32 = (char *)*v17;
                  v31 = (char *)v17[1];
                  if (v31 != (char *)*v17)
                  {
                    do
                    {
                      v33 = *((_QWORD *)v31 - 1);
                      v31 -= 8;
                      *--v30 = v33;
                    }
                    while (v31 != v32);
                    v31 = (char *)*v17;
                  }
                  *v17 = v30;
                  v17[1] = v18;
                  v17[2] = (uint64_t *)&v29[8 * v28];
                  if (v31)
                    operator delete(v31);
                }
                else
                {
                  *v18++ = v22;
                }
                v17[1] = v18;
              }
              ++v7;
            }
            while (v7 != (uint64_t *)v12);
          }
          goto LABEL_112;
        }
LABEL_44:
        if ((v10 & 1) != 0)
        {
          v34 = (uint64_t **)a1[4];
          v35 = v34[1];
          if (v35 == *v34)
            v36 = -1;
          else
            v36 = **a1;
          v51 = v34 + 2;
          do
          {
            v52 = *v7;
            if ((*(_DWORD *)v7 & 0x3FFFFFFF) != v36)
            {
              if ((unint64_t)v35 >= *v51)
              {
                v53 = v35 - *v34;
                if ((unint64_t)(v53 + 1) >> 61)
                  goto LABEL_114;
                v54 = *v51 - (_QWORD)*v34;
                v55 = v54 >> 2;
                if (v54 >> 2 <= (unint64_t)(v53 + 1))
                  v55 = v53 + 1;
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
                  v56 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v56 = v55;
                if (v56)
                  v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v34 + 2), v56);
                else
                  v57 = 0;
                v58 = (uint64_t *)&v57[8 * v53];
                *v58 = v52;
                v35 = v58 + 1;
                v60 = *v34;
                v59 = v34[1];
                if (v59 != *v34)
                {
                  do
                  {
                    v61 = *--v59;
                    *--v58 = v61;
                  }
                  while (v59 != v60);
                  v59 = *v34;
                }
                *v34 = v58;
                v34[1] = v35;
                v34[2] = (uint64_t *)&v57[8 * v56];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *v35++ = v52;
              }
              v34[1] = v35;
            }
            ++v7;
          }
          while (v7 != (uint64_t *)v12);
        }
        else
        {
          if ((v11 & 1) == 0)
            goto LABEL_7;
          v48 = (uint64_t **)a1[5];
          v49 = v48[1];
          if (v49 == *v48)
            v50 = -1;
          else
            v50 = *a1[1];
          v62 = v48 + 2;
          do
          {
            v63 = *v7;
            if ((*(_DWORD *)v7 & 0x3FFFFFFF) != v50)
            {
              if ((unint64_t)v49 >= *v62)
              {
                v64 = v49 - *v48;
                if ((unint64_t)(v64 + 1) >> 61)
                  goto LABEL_114;
                v65 = *v62 - (_QWORD)*v48;
                v66 = v65 >> 2;
                if (v65 >> 2 <= (unint64_t)(v64 + 1))
                  v66 = v64 + 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                  v67 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v67 = v66;
                if (v67)
                  v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v48 + 2), v67);
                else
                  v68 = 0;
                v69 = (uint64_t *)&v68[8 * v64];
                *v69 = v63;
                v49 = v69 + 1;
                v71 = *v48;
                v70 = v48[1];
                if (v70 != *v48)
                {
                  do
                  {
                    v72 = *--v70;
                    *--v69 = v72;
                  }
                  while (v70 != v71);
                  v70 = *v48;
                }
                *v48 = v69;
                v48[1] = v49;
                v48[2] = (uint64_t *)&v68[8 * v67];
                if (v70)
                  operator delete(v70);
              }
              else
              {
                *v49++ = v63;
              }
              v48[1] = v49;
            }
            ++v7;
          }
          while (v7 != (uint64_t *)v12);
        }
      }
LABEL_112:
      ++v5;
      v3 = *a2;
    }
    while (v5 < (a2[1] - *a2) >> 2);
  }
}

void geom::triangle_mesh_atlas::edge_incident_wedges(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<geom::triangle_mesh_atlas::face_vertex> &)const::$_1::operator()(char ***a1, uint64_t *a2, uint64_t a3)
{
  void **v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  void **v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  if (a3)
  {
    v6 = (void **)*a1;
    v7 = **a1;
    v8 = (char *)v6[1];
    if (v7 == v8)
      v9 = 0;
    else
      v9 = *((_DWORD *)v8 - 1);
    v10 = v9 + a3;
    v11 = (char *)v6[2];
    if (v8 >= v11)
    {
      v13 = (v8 - v7) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
LABEL_40:
        abort();
      v15 = v11 - v7;
      if (v15 >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v6 + 2), v16);
        v7 = (char *)*v6;
        v8 = (char *)v6[1];
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      v19 = &v17[4 * v16];
      *(_DWORD *)v18 = v10;
      v12 = v18 + 4;
      while (v8 != v7)
      {
        v20 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v18 - 1) = v20;
        v18 -= 4;
      }
      *v6 = v18;
      v6[1] = v12;
      v6[2] = v19;
      if (v7)
        operator delete(v7);
    }
    else
    {
      *(_DWORD *)v8 = v10;
      v12 = v8 + 4;
    }
    v6[1] = v12;
    v21 = &a2[a3];
    do
    {
      v22 = *a2;
      v23 = (void **)a1[1];
      v24 = v23[1];
      v25 = (unint64_t)v23[2];
      if ((unint64_t)v24 >= v25)
      {
        v27 = ((char *)v24 - (_BYTE *)*v23) >> 3;
        if ((unint64_t)(v27 + 1) >> 61)
          goto LABEL_40;
        v28 = v25 - (_QWORD)*v23;
        v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1))
          v29 = v27 + 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v23 + 2), v30);
        else
          v31 = 0;
        v32 = &v31[8 * v27];
        *(_QWORD *)v32 = v22;
        v26 = v32 + 8;
        v34 = (char *)*v23;
        v33 = (char *)v23[1];
        if (v33 != *v23)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
          v33 = (char *)*v23;
        }
        *v23 = v32;
        v23[1] = v26;
        v23[2] = &v31[8 * v30];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v24 = v22;
        v26 = v24 + 1;
      }
      v23[1] = v26;
      ++a2;
    }
    while (a2 != v21);
  }
}

void geom::triangle_mesh_atlas::edge_incident_charts(uint64_t a1, geom::triangle_mesh_half_edge_connectivity *this, unsigned int a3, char **a4, std::vector<unsigned int> *a5)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int half_edge_for_face_vertex;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int half_edge_face;
  unsigned int half_edge_twin;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  char *v22;
  unsigned int *v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  void *v36;
  unsigned int *v37;
  uint64_t v38;
  void *__p;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  v8 = *((_QWORD *)this + 23);
  if (a3 >= (unint64_t)((*((_QWORD *)this + 24) - v8) >> 2))
  {
    *(_QWORD *)v43 = -1;
    v10 = -1;
  }
  else
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, *(_DWORD *)(v8 + 4 * a3) / 3u, *(_DWORD *)(v8 + 4 * a3) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(this, half_edge_for_face_vertex, v43);
    v10 = v43[0];
  }
  __p = 0;
  v40 = 0;
  v41 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(this, v10, (uint64_t)&__p);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(this, v43[1], (uint64_t)&v36);
  v11 = *((_QWORD *)this + 23);
  if (v7 < (*((_QWORD *)this + 24) - v11) >> 2
    && (v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, *(_DWORD *)(v11 + 4 * v7) / 3u, *(_DWORD *)(v11 + 4 * v7) % 3u), geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, v12)))
  {
    v13 = *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v7);
    v14 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v13 / 3, v13 % 3);
    half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(this, v14);
    if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, v14))
    {
      half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v14);
      v17 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(this, half_edge_twin);
      goto LABEL_10;
    }
  }
  else
  {
    half_edge_face = -1;
  }
  v17 = -1;
LABEL_10:
  v18 = (unsigned int *)v36;
  v19 = v37;
  if (v36 != v37)
  {
    do
    {
      v20 = *v18;
      if (*v18 != half_edge_face && v20 != v17)
      {
        v22 = v40;
        if ((unint64_t)v40 >= v41)
        {
          v24 = (char *)__p;
          v25 = (v40 - (_BYTE *)__p) >> 2;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            abort();
          v27 = v41 - (_QWORD)__p;
          if ((uint64_t)(v41 - (_QWORD)__p) >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v41, v28);
            v24 = (char *)__p;
            v22 = v40;
          }
          else
          {
            v29 = 0;
          }
          v30 = (unsigned int *)&v29[4 * v25];
          *v30 = v20;
          v23 = v30 + 1;
          while (v22 != v24)
          {
            v31 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v40 = (char *)v23;
          v41 = (unint64_t)&v29[4 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_DWORD *)v40 = v20;
          v23 = (unsigned int *)(v22 + 4);
        }
        v40 = (char *)v23;
      }
      ++v18;
    }
    while (v18 != v19);
  }
  v32 = 126 - 2 * __clz((v40 - (_BYTE *)__p) >> 2);
  v42 = a1;
  if (v40 == __p)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::edge_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *,false>((uint64_t)__p, (unsigned int *)v40, (uint64_t)&v42, v33, 1);
  geom::triangle_mesh_atlas::pack_faces_into_charts(a1, (unsigned int **)&__p, a4, a5);
  if (v36)
  {
    v37 = (unsigned int *)v36;
    operator delete(v36);
  }
  if (__p)
  {
    v40 = (char *)__p;
    operator delete(__p);
  }
}

BOOL geom::triangle_mesh_atlas::edge_vertices_have_compatible_charts(geom::triangle_mesh_atlas *this, const geom::triangle_mesh_connectivity *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int half_edge_for_face_vertex;
  unsigned int v6;
  unsigned int *begin;
  unint64_t v8;
  _BOOL8 v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  std::vector<unsigned int> v16;
  std::vector<unsigned int> v17;
  _QWORD v18[2];
  unsigned int v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v18[0] = a2;
  v18[1] = this;
  v3 = *((_QWORD *)a2 + 23);
  if (a3 >= (unint64_t)((*((_QWORD *)a2 + 24) - v3) >> 2))
  {
    *(_QWORD *)v19 = -1;
    v6 = -1;
  }
  else
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(a2, *(_DWORD *)(v3 + 4 * a3) / 3u, *(_DWORD *)(v3 + 4 * a3) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(a2, half_edge_for_face_vertex, v19);
    v6 = v19[0];
  }
  memset(&v17, 0, sizeof(v17));
  memset(&v16, 0, sizeof(v16));
  geom::triangle_mesh_atlas::edge_vertices_have_compatible_charts(geom::triangle_mesh_connectivity const&,unsigned int)const::$_0::operator()((uint64_t)v18, v6, &v17);
  geom::triangle_mesh_atlas::edge_vertices_have_compatible_charts(geom::triangle_mesh_connectivity const&,unsigned int)const::$_0::operator()((uint64_t)v18, v19[1], &v16);
  begin = v17.__begin_;
  v8 = v17.__end_ - v17.__begin_;
  v9 = v8 == v16.__end_ - v16.__begin_;
  if (v17.__end_ != v17.__begin_ && v8 == v16.__end_ - v16.__begin_)
  {
    if (v8 <= 1)
      v10 = 1;
    else
      v10 = v17.__end_ - v17.__begin_;
    if (*v17.__begin_ == *v16.__begin_)
    {
      v11 = 1;
      do
      {
        v12 = v11;
        if (v10 == v11)
          break;
        v13 = v17.__begin_[v11];
        v14 = v16.__begin_[v11++];
      }
      while (v13 == v14);
      v9 = v12 >= v8;
    }
    else
    {
      v9 = 0;
    }
LABEL_19:
    v16.__end_ = v16.__begin_;
    operator delete(v16.__begin_);
    begin = v17.__begin_;
    if (!v17.__begin_)
      return v9;
    goto LABEL_16;
  }
  if (v16.__begin_)
    goto LABEL_19;
  if (v17.__begin_)
  {
LABEL_16:
    v17.__end_ = begin;
    operator delete(begin);
  }
  return v9;
}

void geom::triangle_mesh_atlas::edge_vertices_have_compatible_charts(geom::triangle_mesh_connectivity const&,unsigned int)const::$_0::operator()(uint64_t a1, unsigned int a2, std::vector<unsigned int> *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  uint64_t v8;
  std::vector<unsigned int>::value_type v9;
  std::vector<unsigned int>::value_type *begin;
  std::vector<unsigned int>::pointer end;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  std::vector<unsigned int> *v18;
  std::vector<unsigned int>::const_iterator v19;
  int v20;
  int v21;
  std::vector<unsigned int>::value_type v22;
  unsigned int *v23;
  unsigned int v24;
  std::vector<unsigned int>::value_type __x;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(*(_QWORD **)a1, a2, (uint64_t)&v26);
  a3->__end_ = a3->__begin_;
  std::vector<unsigned int>::reserve(a3, v27 - v26);
  v5 = v26;
  v6 = v27;
  if (v26 == v27)
    goto LABEL_32;
  p_end_cap = &a3->__end_cap_;
  do
  {
    v8 = *v5;
    __x = 0;
    v9 = *(_DWORD *)(*(_QWORD *)(v4 + 96) + 4 * v8);
    __x = v9;
    if (v9 == -1)
      goto LABEL_30;
    begin = a3->__begin_;
    end = a3->__end_;
    v12 = end - a3->__begin_;
    if (end == a3->__begin_ || begin[v12 - 1] < v9)
    {
      if (end >= p_end_cap->__value_)
      {
        v14 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          abort();
        v15 = (char *)p_end_cap->__value_ - (char *)begin;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a3->__end_cap_, v16);
          begin = a3->__begin_;
          end = a3->__end_;
          v9 = __x;
        }
        else
        {
          v17 = 0;
        }
        v23 = (unsigned int *)&v17[4 * v12];
        *v23 = v9;
        v13 = v23 + 1;
        while (end != begin)
        {
          v24 = *--end;
          *--v23 = v24;
        }
        a3->__begin_ = v23;
        a3->__end_ = v13;
        a3->__end_cap_.__value_ = (unsigned int *)&v17[4 * v16];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v9;
        v13 = end + 1;
      }
      a3->__end_ = v13;
    }
    else
    {
      if (*begin > v9)
      {
        v18 = a3;
        v19.__i_ = a3->__begin_;
LABEL_22:
        std::vector<unsigned int>::insert(v18, v19, &__x);
        goto LABEL_30;
      }
      v20 = 0;
      do
      {
        v21 = v20;
        v22 = begin[v20++];
      }
      while (v22 < v9);
      if (v22 > v9)
      {
        v19.__i_ = &begin[v21];
        v18 = a3;
        goto LABEL_22;
      }
    }
LABEL_30:
    ++v5;
  }
  while (v5 != v6);
  v5 = v26;
LABEL_32:
  if (v5)
  {
    v27 = v5;
    operator delete(v5);
  }
}

void geom::triangle_mesh_atlas::faces_in_chart(uint64_t a1, unsigned int a2, std::vector<int> *this)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  int *v10;
  int v11;

  if (a2)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(unsigned int *)(v5 + 4 * (a2 - 1));
  }
  else
  {
    v6 = 0;
    v5 = *(_QWORD *)(a1 + 48);
  }
  v7 = *(unsigned int *)(v5 + 4 * a2);
  std::vector<unsigned int>::resize(this, v7 - v6);
  v8 = v7 - v6;
  if (v7 > v6)
  {
    begin = this->__begin_;
    v10 = (int *)(*(_QWORD *)(a1 + 72) + 4 * v6);
    do
    {
      v11 = *v10++;
      *begin++ = v11;
      --v8;
    }
    while (v8);
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::const_reference v3;
  unsigned int *i;
  const unsigned int *end;
  unsigned int *value;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  std::__wrap_iter<const unsigned int *>::iterator_type v9;
  const unsigned int *v10;
  std::vector<unsigned int>::pointer v11;
  unsigned int v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  std::__split_buffer<unsigned int> __v;

  v3 = __x;
  i = (unsigned int *)__position.__i_;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v14 = end - this->__begin_ + 1;
    if (v14 >> 62)
      abort();
    v15 = (char *)__position.__i_ - (char *)begin;
    v16 = __position.__i_ - begin;
    v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)&this->__end_cap_;
    if (v18)
      v19 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v18);
    else
      v19 = 0;
    v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (begin == i)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v22);
        v20 = (unsigned int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *v20 = *v3;
    __v.__end_ = v20 + 1;
    i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v9 = __position.__i_ + 1;
    v10 = end - 1;
    v11 = this->__end_;
    while (v10 < end)
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9)
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    if (i <= v3)
      v3 += this->__end_ > v3;
    *i = *v3;
  }
  return (std::vector<unsigned int>::iterator)i;
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::vector<unsigned char>::__append(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      abort();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  BOOL v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  int64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v45 = *(a2 - 1);
        v46 = *v10;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96) + 4 * v45) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96)
                                                                                  + 4 * v46))
        {
          *v10 = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        v47 = v10 + 2;
        v48 = v10 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v49 = *(a2 - 1);
        v50 = v10[3];
        v51 = *(_QWORD *)(*(_QWORD *)a3 + 96);
        if (*(_DWORD *)(v51 + 4 * v49) < *(_DWORD *)(v51 + 4 * v50))
        {
          *v48 = v49;
          *(a2 - 1) = v50;
          v52 = *v48;
          v53 = *v47;
          if (*(_DWORD *)(v51 + 4 * v52) < *(_DWORD *)(v51 + 4 * v53))
          {
            *v47 = v52;
            *v48 = v53;
            v54 = v10[1];
            if (*(_DWORD *)(v51 + 4 * v52) < *(_DWORD *)(v51 + 4 * v54))
            {
              v10[1] = v52;
              v10[2] = v54;
              v55 = *v10;
              if (*(_DWORD *)(v51 + 4 * v52) < *(_DWORD *)(v51 + 4 * v55))
              {
                *v10 = v52;
                v10[1] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v56 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v57 = 0;
                v58 = *(_QWORD *)(*(_QWORD *)a3 + 96);
                v59 = v10;
                do
                {
                  v61 = *v59;
                  v60 = v59[1];
                  v59 = v56;
                  if (*(_DWORD *)(v58 + 4 * v60) < *(_DWORD *)(v58 + 4 * v61))
                  {
                    v62 = v57;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v62 + 4) = v61;
                      if (!v62)
                        break;
                      v61 = *(unsigned int *)((char *)v10 + v62 - 4);
                      v62 -= 4;
                      if (*(_DWORD *)(v58 + 4 * v60) >= *(_DWORD *)(v58 + 4 * v61))
                      {
                        v63 = (unsigned int *)((char *)v10 + v62 + 4);
                        goto LABEL_75;
                      }
                    }
                    v63 = v10;
LABEL_75:
                    *v63 = v60;
                  }
                  v56 = v59 + 1;
                  v57 += 4;
                }
                while (v59 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v94 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v95 = *(_QWORD *)(*(_QWORD *)a3 + 96);
              do
              {
                v97 = *v9;
                v96 = v9[1];
                v9 = v94;
                if (*(_DWORD *)(v95 + 4 * v96) < *(_DWORD *)(v95 + 4 * v97))
                {
                  do
                  {
                    *v94 = v97;
                    v97 = *(v94 - 2);
                    --v94;
                  }
                  while (*(_DWORD *)(v95 + 4 * v96) < *(_DWORD *)(v95 + 4 * v97));
                  *v94 = v96;
                }
                v94 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v64 = (v12 - 2) >> 1;
            v65 = *(_QWORD *)a3;
            v66 = v64;
            do
            {
              v67 = v66;
              if (v64 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v10[v68];
                v70 = *v69;
                if (2 * v67 + 2 >= (uint64_t)v12)
                {
                  v71 = *(_QWORD *)(v65 + 96);
                }
                else
                {
                  v71 = *(_QWORD *)(v65 + 96);
                  if (*(unsigned int *)(v71 + 4 * v70) < (unint64_t)*(unsigned int *)(v71 + 4 * v69[1]))
                  {
                    v70 = v69[1];
                    ++v69;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = &v10[v67];
                v73 = *v72;
                result = *(unsigned int *)(v71 + 4 * v70);
                if (result >= *(_DWORD *)(v71 + 4 * v73))
                {
                  do
                  {
                    result = (uint64_t)v69;
                    *v72 = v70;
                    if (v64 < v68)
                      break;
                    v74 = (2 * v68) | 1;
                    v69 = &v10[v74];
                    v75 = 2 * v68 + 2;
                    v70 = *v69;
                    if (v75 < (uint64_t)v12
                      && *(unsigned int *)(v71 + 4 * v70) < (unint64_t)*(unsigned int *)(v71 + 4 * v69[1]))
                    {
                      v70 = v69[1];
                      ++v69;
                      v74 = v75;
                    }
                    v72 = (unsigned int *)result;
                    v68 = v74;
                  }
                  while (*(_DWORD *)(v71 + 4 * v70) >= *(_DWORD *)(v71 + 4 * v73));
                  *(_DWORD *)result = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v76 = (unint64_t)v11 >> 2;
            do
            {
              v77 = 0;
              v78 = *v10;
              v79 = *(_QWORD *)a3;
              v80 = v10;
              do
              {
                v81 = &v80[v77];
                v84 = v81[1];
                v82 = v81 + 1;
                v83 = v84;
                v85 = (2 * v77) | 1;
                v77 = 2 * v77 + 2;
                if (v77 >= v76)
                {
                  v77 = v85;
                }
                else
                {
                  result = v82[1];
                  if (*(_DWORD *)(*(_QWORD *)(v79 + 96) + 4 * v83) >= *(_DWORD *)(*(_QWORD *)(v79 + 96) + 4 * result))
                  {
                    v77 = v85;
                  }
                  else
                  {
                    LODWORD(v83) = v82[1];
                    ++v82;
                  }
                }
                *v80 = v83;
                v80 = v82;
              }
              while (v77 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v78;
              }
              else
              {
                *v82 = *a2;
                *a2 = v78;
                v86 = (char *)v82 - (char *)v10 + 4;
                if (v86 >= 5)
                {
                  v87 = (((unint64_t)v86 >> 2) - 2) >> 1;
                  v88 = &v10[v87];
                  v89 = *v88;
                  v90 = *v82;
                  v91 = *(_QWORD *)(v79 + 96);
                  if (*(_DWORD *)(v91 + 4 * v89) < *(_DWORD *)(v91 + 4 * v90))
                  {
                    do
                    {
                      v92 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v10[v87];
                      v89 = *v88;
                      v82 = v92;
                    }
                    while (*(_DWORD *)(v91 + 4 * v89) < *(_DWORD *)(v91 + 4 * v90));
                    *v92 = v90;
                  }
                }
              }
            }
            while (v76-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(&v9[v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9, &v9[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(_QWORD *)(v17 + 96);
          v19 = *(_DWORD *)(v18 + 4 * v16);
          if (*(_DWORD *)(v18 + 4 * *(v9 - 1)) < v19)
            goto LABEL_12;
          if (v19 >= *(_DWORD *)(v18 + 4 * *(a2 - 1)))
          {
            v36 = v9 + 1;
            do
            {
              v10 = v36;
              if (v36 >= a2)
                break;
              ++v36;
            }
            while (v19 >= *(_DWORD *)(v18 + 4 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v35 = v10[1];
              ++v10;
            }
            while (v19 >= *(_DWORD *)(v18 + 4 * v35));
          }
          v37 = a2;
          if (v10 < a2)
          {
            v37 = a2;
            do
              v38 = *--v37;
            while (v19 < *(_DWORD *)(v18 + 4 * v38));
          }
          if (v10 < v37)
          {
            v39 = *v10;
            v40 = *v37;
            do
            {
              *v10 = v40;
              *v37 = v39;
              v41 = *(_DWORD *)(v18 + 4 * v16);
              do
              {
                v42 = v10[1];
                ++v10;
                v39 = v42;
              }
              while (v41 >= *(_DWORD *)(v18 + 4 * v42));
              do
              {
                v43 = *--v37;
                v40 = v43;
              }
              while (v41 < *(_DWORD *)(v18 + 4 * v43));
            }
            while (v10 < v37);
          }
          v44 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v44;
          a5 = 0;
          *v44 = v16;
          continue;
        }
        v18 = *(_QWORD *)(v17 + 96);
        v19 = *(_DWORD *)(v18 + 4 * v16);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while (*(_DWORD *)(v18 + 4 * v21) < v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(_DWORD *)(v18 + 4 * v25) >= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(_DWORD *)(v18 + 4 * v24) >= v19);
        }
        if (v22 >= v23)
        {
          v33 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = v21;
          v28 = v22;
          v29 = v23;
          do
          {
            *v28 = v26;
            *v29 = v27;
            v30 = *(_DWORD *)(v18 + 4 * v16);
            do
            {
              v31 = v28[1];
              ++v28;
              v27 = v31;
            }
            while (*(_DWORD *)(v18 + 4 * v31) < v30);
            do
            {
              v32 = *--v29;
              v26 = v32;
            }
            while (*(_DWORD *)(v18 + 4 * v32) >= v30);
          }
          while (v28 < v29);
          v33 = v28 - 1;
        }
        if (v33 != v9)
          *v9 = *v33;
        *v33 = v16;
        if (v22 < v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *,false>(v9, v33, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v33 + 1;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9, v33, a3);
        v10 = v33 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v33 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_33;
        }
        a2 = v33;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 96);
  v7 = *(_DWORD *)(v6 + 4 * v4);
  v8 = *a3;
  v9 = *(_DWORD *)(v6 + 4 * v8);
  if (v7 >= *(_DWORD *)(v6 + 4 * v5))
  {
    if (v9 < v7)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(_DWORD *)(v6 + 4 * v10) < *(_DWORD *)(v6 + 4 * v11))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 >= v7)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(_DWORD *)(v6 + 4 * v12) >= *(_DWORD *)(v6 + 4 * v5))
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96) + 4 * v8) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96)
                                                                               + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v20 = a1 + 2;
      v21 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v22 = *(a2 - 1);
      v23 = a1[3];
      v24 = *(_QWORD *)(*(_QWORD *)a3 + 96);
      if (*(_DWORD *)(v24 + 4 * v22) < *(_DWORD *)(v24 + 4 * v23))
      {
        *v21 = v22;
        *(a2 - 1) = v23;
        v25 = *v21;
        v26 = *v20;
        if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v26))
        {
          *v20 = v25;
          *v21 = v26;
          v27 = a1[1];
          if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v27))
          {
            a1[1] = v25;
            a1[2] = v27;
            v28 = *a1;
            if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v28))
            {
              *a1 = v25;
              a1[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 96);
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (*(_DWORD *)(v13 + 4 * v15) < *(_DWORD *)(v13 + 4 * v16))
    {
      v17 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v17) = v16;
        v18 = v17 - 4;
        if (v17 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (*(_DWORD *)(v13 + 4 * v15) >= *(_DWORD *)(v13 + 4 * v16))
        {
          v19 = (unsigned int *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 96);
  if (*(_DWORD *)(v13 + 4 * v11) < *(_DWORD *)(v13 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(_DWORD *)(v13 + 4 * v14) < *(_DWORD *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(_DWORD *)(v13 + 4 * v16) < *(_DWORD *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::edge_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  BOOL v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  int64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v45 = *(a2 - 1);
        v46 = *v10;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96) + 4 * v45) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96)
                                                                                  + 4 * v46))
        {
          *v10 = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        v47 = v10 + 2;
        v48 = v10 + 3;
        result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v49 = *(a2 - 1);
        v50 = v10[3];
        v51 = *(_QWORD *)(*(_QWORD *)a3 + 96);
        if (*(_DWORD *)(v51 + 4 * v49) < *(_DWORD *)(v51 + 4 * v50))
        {
          *v48 = v49;
          *(a2 - 1) = v50;
          v52 = *v48;
          v53 = *v47;
          if (*(_DWORD *)(v51 + 4 * v52) < *(_DWORD *)(v51 + 4 * v53))
          {
            *v47 = v52;
            *v48 = v53;
            v54 = v10[1];
            if (*(_DWORD *)(v51 + 4 * v52) < *(_DWORD *)(v51 + 4 * v54))
            {
              v10[1] = v52;
              v10[2] = v54;
              v55 = *v10;
              if (*(_DWORD *)(v51 + 4 * v52) < *(_DWORD *)(v51 + 4 * v55))
              {
                *v10 = v52;
                v10[1] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v56 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v57 = 0;
                v58 = *(_QWORD *)(*(_QWORD *)a3 + 96);
                v59 = v10;
                do
                {
                  v61 = *v59;
                  v60 = v59[1];
                  v59 = v56;
                  if (*(_DWORD *)(v58 + 4 * v60) < *(_DWORD *)(v58 + 4 * v61))
                  {
                    v62 = v57;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v62 + 4) = v61;
                      if (!v62)
                        break;
                      v61 = *(unsigned int *)((char *)v10 + v62 - 4);
                      v62 -= 4;
                      if (*(_DWORD *)(v58 + 4 * v60) >= *(_DWORD *)(v58 + 4 * v61))
                      {
                        v63 = (unsigned int *)((char *)v10 + v62 + 4);
                        goto LABEL_75;
                      }
                    }
                    v63 = v10;
LABEL_75:
                    *v63 = v60;
                  }
                  v56 = v59 + 1;
                  v57 += 4;
                }
                while (v59 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v94 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v95 = *(_QWORD *)(*(_QWORD *)a3 + 96);
              do
              {
                v97 = *v9;
                v96 = v9[1];
                v9 = v94;
                if (*(_DWORD *)(v95 + 4 * v96) < *(_DWORD *)(v95 + 4 * v97))
                {
                  do
                  {
                    *v94 = v97;
                    v97 = *(v94 - 2);
                    --v94;
                  }
                  while (*(_DWORD *)(v95 + 4 * v96) < *(_DWORD *)(v95 + 4 * v97));
                  *v94 = v96;
                }
                v94 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v64 = (v12 - 2) >> 1;
            v65 = *(_QWORD *)a3;
            v66 = v64;
            do
            {
              v67 = v66;
              if (v64 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v10[v68];
                v70 = *v69;
                if (2 * v67 + 2 >= (uint64_t)v12)
                {
                  v71 = *(_QWORD *)(v65 + 96);
                }
                else
                {
                  v71 = *(_QWORD *)(v65 + 96);
                  if (*(unsigned int *)(v71 + 4 * v70) < (unint64_t)*(unsigned int *)(v71 + 4 * v69[1]))
                  {
                    v70 = v69[1];
                    ++v69;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = &v10[v67];
                v73 = *v72;
                result = *(unsigned int *)(v71 + 4 * v70);
                if (result >= *(_DWORD *)(v71 + 4 * v73))
                {
                  do
                  {
                    result = (uint64_t)v69;
                    *v72 = v70;
                    if (v64 < v68)
                      break;
                    v74 = (2 * v68) | 1;
                    v69 = &v10[v74];
                    v75 = 2 * v68 + 2;
                    v70 = *v69;
                    if (v75 < (uint64_t)v12
                      && *(unsigned int *)(v71 + 4 * v70) < (unint64_t)*(unsigned int *)(v71 + 4 * v69[1]))
                    {
                      v70 = v69[1];
                      ++v69;
                      v74 = v75;
                    }
                    v72 = (unsigned int *)result;
                    v68 = v74;
                  }
                  while (*(_DWORD *)(v71 + 4 * v70) >= *(_DWORD *)(v71 + 4 * v73));
                  *(_DWORD *)result = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v76 = (unint64_t)v11 >> 2;
            do
            {
              v77 = 0;
              v78 = *v10;
              v79 = *(_QWORD *)a3;
              v80 = v10;
              do
              {
                v81 = &v80[v77];
                v84 = v81[1];
                v82 = v81 + 1;
                v83 = v84;
                v85 = (2 * v77) | 1;
                v77 = 2 * v77 + 2;
                if (v77 >= v76)
                {
                  v77 = v85;
                }
                else
                {
                  result = v82[1];
                  if (*(_DWORD *)(*(_QWORD *)(v79 + 96) + 4 * v83) >= *(_DWORD *)(*(_QWORD *)(v79 + 96) + 4 * result))
                  {
                    v77 = v85;
                  }
                  else
                  {
                    LODWORD(v83) = v82[1];
                    ++v82;
                  }
                }
                *v80 = v83;
                v80 = v82;
              }
              while (v77 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v78;
              }
              else
              {
                *v82 = *a2;
                *a2 = v78;
                v86 = (char *)v82 - (char *)v10 + 4;
                if (v86 >= 5)
                {
                  v87 = (((unint64_t)v86 >> 2) - 2) >> 1;
                  v88 = &v10[v87];
                  v89 = *v88;
                  v90 = *v82;
                  v91 = *(_QWORD *)(v79 + 96);
                  if (*(_DWORD *)(v91 + 4 * v89) < *(_DWORD *)(v91 + 4 * v90))
                  {
                    do
                    {
                      v92 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v10[v87];
                      v89 = *v88;
                      v82 = v92;
                    }
                    while (*(_DWORD *)(v91 + 4 * v89) < *(_DWORD *)(v91 + 4 * v90));
                    *v92 = v90;
                  }
                }
              }
            }
            while (v76-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(&v9[v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9, &v9[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(_QWORD *)(v17 + 96);
          v19 = *(_DWORD *)(v18 + 4 * v16);
          if (*(_DWORD *)(v18 + 4 * *(v9 - 1)) < v19)
            goto LABEL_12;
          if (v19 >= *(_DWORD *)(v18 + 4 * *(a2 - 1)))
          {
            v36 = v9 + 1;
            do
            {
              v10 = v36;
              if (v36 >= a2)
                break;
              ++v36;
            }
            while (v19 >= *(_DWORD *)(v18 + 4 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v35 = v10[1];
              ++v10;
            }
            while (v19 >= *(_DWORD *)(v18 + 4 * v35));
          }
          v37 = a2;
          if (v10 < a2)
          {
            v37 = a2;
            do
              v38 = *--v37;
            while (v19 < *(_DWORD *)(v18 + 4 * v38));
          }
          if (v10 < v37)
          {
            v39 = *v10;
            v40 = *v37;
            do
            {
              *v10 = v40;
              *v37 = v39;
              v41 = *(_DWORD *)(v18 + 4 * v16);
              do
              {
                v42 = v10[1];
                ++v10;
                v39 = v42;
              }
              while (v41 >= *(_DWORD *)(v18 + 4 * v42));
              do
              {
                v43 = *--v37;
                v40 = v43;
              }
              while (v41 < *(_DWORD *)(v18 + 4 * v43));
            }
            while (v10 < v37);
          }
          v44 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v44;
          a5 = 0;
          *v44 = v16;
          continue;
        }
        v18 = *(_QWORD *)(v17 + 96);
        v19 = *(_DWORD *)(v18 + 4 * v16);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while (*(_DWORD *)(v18 + 4 * v21) < v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(_DWORD *)(v18 + 4 * v25) >= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(_DWORD *)(v18 + 4 * v24) >= v19);
        }
        if (v22 >= v23)
        {
          v33 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = v21;
          v28 = v22;
          v29 = v23;
          do
          {
            *v28 = v26;
            *v29 = v27;
            v30 = *(_DWORD *)(v18 + 4 * v16);
            do
            {
              v31 = v28[1];
              ++v28;
              v27 = v31;
            }
            while (*(_DWORD *)(v18 + 4 * v31) < v30);
            do
            {
              v32 = *--v29;
              v26 = v32;
            }
            while (*(_DWORD *)(v18 + 4 * v32) >= v30);
          }
          while (v28 < v29);
          v33 = v28 - 1;
        }
        if (v33 != v9)
          *v9 = *v33;
        *v33 = v16;
        if (v22 < v23)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::edge_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *,false>(v9, v33, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v33 + 1;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::edge_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v9, v33, a3);
        v10 = v33 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::edge_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(v33 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_33;
        }
        a2 = v33;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::edge_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96) + 4 * v8) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 96)
                                                                               + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v20 = a1 + 2;
      v21 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v22 = *(a2 - 1);
      v23 = a1[3];
      v24 = *(_QWORD *)(*(_QWORD *)a3 + 96);
      if (*(_DWORD *)(v24 + 4 * v22) < *(_DWORD *)(v24 + 4 * v23))
      {
        *v21 = v22;
        *(a2 - 1) = v23;
        v25 = *v21;
        v26 = *v20;
        if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v26))
        {
          *v20 = v25;
          *v21 = v26;
          v27 = a1[1];
          if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v27))
          {
            a1[1] = v25;
            a1[2] = v27;
            v28 = *a1;
            if (*(_DWORD *)(v24 + 4 * v25) < *(_DWORD *)(v24 + 4 * v28))
            {
              *a1 = v25;
              a1[1] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::triangle_mesh_atlas::vertex_incident_charts(geom::triangle_mesh_connectivity const&,unsigned int,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 96);
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    if (*(_DWORD *)(v13 + 4 * v15) < *(_DWORD *)(v13 + 4 * v16))
    {
      v17 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v17) = v16;
        v18 = v17 - 4;
        if (v17 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (*(_DWORD *)(v13 + 4 * v15) >= *(_DWORD *)(v13 + 4 * v16))
        {
          v19 = (unsigned int *)((char *)a1 + v18);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t geom::triangle_mesh_half_edge_connectivity::vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::outgoing_half_edge_tag>::operator++(uint64_t result)
{
  unsigned int v1;
  int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;

  if (*(_BYTE *)result)
  {
    v2 = *(_DWORD *)(result + 8);
    v1 = *(_DWORD *)(result + 12);
    if (v1 >> 30)
      v3 = (v1 >> 30) - 1;
    else
      v3 = 2;
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 64) + 4 * (v3 + 3 * (v1 & 0x3FFFFFFF)));
    *(_DWORD *)(result + 12) = v4;
    v5 = v4 != v2;
    v6 = v4 >> 30 != 3;
    if (v2 != -1)
      v6 = v5;
    *(_BYTE *)result = v6;
  }
  return result;
}

double geom::triangle_mesh_half_edge_connectivity::triangle_mesh_half_edge_connectivity(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a7 + 16);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a8;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::outgoing_half_edge_tag>::operator*(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t geom::triangle_mesh_half_edge_connectivity::vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::incoming_half_edge_tag>::operator*(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 >> 30)
    v2 = (v1 & 0xC0000000) - 0x40000000;
  else
    v2 = 0x80000000;
  return v2 & 0xC0000000 | v1 & 0x3FFFFFFF;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::incident_face_tag>::operator*(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) & 0x3FFFFFFF;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::adjacent_vertex_tag>::operator*(uint64_t a1)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x24BDAC8D0];
  v3[0] = -1;
  geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(*(geom::triangle_mesh_half_edge_connectivity **)(a1 + 16), *(_DWORD *)(a1 + 12), (unsigned int *)v3);
  return *(unsigned int *)((unint64_t)v3 | (4 * (LODWORD(v3[0]) == *(_DWORD *)(a1 + 4))));
}

BOOL geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2, unsigned int *a3)
{
  _BOOL8 result;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  result = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2);
  if (result)
  {
    v7 = a2;
    if (a2 >> 30 == 3)
      v7 = *(_DWORD *)(*((_QWORD *)this + 11) + 4 * (a2 & 0x3FFFFFFF));
    v8 = 3 * (v7 & 0x3FFFFFFF);
    if (v7 >> 30 == 2)
      v9 = 0;
    else
      v9 = (v7 >> 30) + 1;
    v10 = *((_QWORD *)this + 2);
    v11 = *(_DWORD *)(v10 + 4 * (v8 + (v7 >> 30)));
    *a3 = v11;
    v12 = *(_DWORD *)(v10 + 4 * (v9 + v8));
    a3[1] = v12;
    if (v7 != a2)
    {
      *a3 = v12;
      a3[1] = v11;
    }
  }
  return result;
}

_QWORD *geom::triangle_mesh_half_edge_connectivity::make_vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::outgoing_half_edge_tag>@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = result[5];
  if (a2 >= (unint64_t)((result[6] - v3) >> 2) || (v4 = *(_DWORD *)(v3 + 4 * a2), v4 == -1))
  {
    result = 0;
    *(_QWORD *)a3 = 0;
    v4 = -1;
    *(_DWORD *)(a3 + 4) = -1;
    v5 = -1;
  }
  else if (v4 >> 30 == 3)
  {
    v5 = *(_DWORD *)(result[11] + 4 * (v4 & 0x3FFFFFFF));
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = a2;
    v4 = -1;
  }
  else
  {
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = a2;
    v5 = v4;
  }
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v5;
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::adjacent_vertex_tag>::operator++(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(_BYTE *)result)
  {
    v1 = *(_DWORD *)(result + 12);
    v2 = v1 >> 30;
    if (v1 >> 30 == 3)
    {
      v3 = 0;
LABEL_9:
      *(_BYTE *)result = v3;
      return result;
    }
    v4 = v1 & 0x3FFFFFFF;
    if (v2)
      v5 = v2 - 1;
    else
      v5 = 2;
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 64) + 4 * (v5 + 3 * v4));
    *(_DWORD *)(result + 12) = v6;
    v7 = *(_DWORD *)(result + 8);
    if (v7 != -1)
    {
      v3 = v6 != v7;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::face_vertex_to_component_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::outgoing_half_edge_tag>::operator*(uint64_t a1)
{
  if (*(_BYTE *)a1)
    return (*(_DWORD *)(a1 + 4) / 3u) & 0x3FFFFFFF | ((*(_DWORD *)(a1 + 4) + *(_DWORD *)(a1 + 4) / 3u) << 30);
  else
    return 0xFFFFFFFFLL;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::face_vertex_to_component_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::adjacent_face_tag>::operator*(uint64_t a1)
{
  unsigned int v1;
  unint64_t v2;
  unsigned int v3;
  geom::triangle_mesh_half_edge_connectivity *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)a1)
    return 0xFFFFFFFFLL;
  v9[0] = -1;
  v1 = *(_DWORD *)(a1 + 4);
  v2 = 2863311531 * v1;
  v3 = v1 / 3;
  v4 = *(geom::triangle_mesh_half_edge_connectivity **)(a1 + 16);
  v5 = (v1 / 3) & 0x3FFFFFFF | ((v1 + v1 / 3) << 30);
  if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v4, v5))
  {
    if (v5 >> 30 == 3)
      v5 = *(_DWORD *)(*((_QWORD *)v4 + 11) + 4 * ((v2 >> 33) & 0x3FFFFFFF));
    v6 = v5 & 0x3FFFFFFF;
    LODWORD(v9[0]) = v5 & 0x3FFFFFFF;
    v7 = *(_DWORD *)(*((_QWORD *)v4 + 8) + 4 * (3 * (v5 & 0x3FFFFFFF) + (v5 >> 30)));
    if (v7 >> 30 != 3)
      HIDWORD(v9[0]) = v7 & 0x3FFFFFFF;
  }
  else
  {
    v6 = -1;
  }
  return *(unsigned int *)((unint64_t)v9 | (4 * (v6 == v3)));
}

uint64_t geom::triangle_mesh_half_edge_connectivity::face_vertex_to_component_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::adjacent_face_tag>::operator++(uint64_t a1)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  BOOL is_boundary_half_edge;

  if (*(_BYTE *)a1)
  {
    v2 = *(_DWORD *)(a1 + 4);
    v3 = *(_DWORD *)(a1 + 8);
    v4 = v2 + 1;
    v5 = (v2 << 30) + 0x40000000;
    do
    {
      v6 = v4;
      *(_DWORD *)(a1 + 4) = v4;
      if (v4 >= v3)
        break;
      is_boundary_half_edge = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(*(geom::triangle_mesh_half_edge_connectivity **)(a1 + 16), v5 + ((v4 / 3) << 30) + ((v4 / 3) & 0x3FFFFFFF));
      v4 = v6 + 1;
      v5 += 0x40000000;
    }
    while (is_boundary_half_edge);
    *(_BYTE *)a1 = v6 < v3;
  }
  return a1;
}

BOOL geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  _BOOL8 result;

  result = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2);
  if (result)
    return a2 >> 30 == 3 || *(_DWORD *)(*((_QWORD *)this + 8) + 4 * (3 * (a2 & 0x3FFFFFFF) + (a2 >> 30))) >> 30 == 3;
  return result;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::face_vertex_to_component_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::outgoing_half_edge_tag>::operator++(uint64_t a1)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  _BOOL4 is_valid_half_edge;

  if (*(_BYTE *)a1)
  {
    v2 = *(_DWORD *)(a1 + 4);
    v3 = *(_DWORD *)(a1 + 8);
    v4 = v2 + 1;
    v5 = (v2 << 30) + 0x40000000;
    do
    {
      v6 = v4;
      *(_DWORD *)(a1 + 4) = v4;
      if (v4 >= v3)
        break;
      is_valid_half_edge = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(*(geom::triangle_mesh_half_edge_connectivity **)(a1 + 16), v5 + ((v4 / 3) << 30) + ((v4 / 3) & 0x3FFFFFFF));
      v4 = v6 + 1;
      v5 += 0x40000000;
    }
    while (!is_valid_half_edge);
    *(_BYTE *)a1 = v6 < v3;
  }
  return a1;
}

BOOL geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 == -1)
    return 0;
  v2 = a2 & 0x3FFFFFFF;
  if (a2 >> 30 == 3)
  {
    v3 = *((_QWORD *)this + 11);
    v4 = *((_QWORD *)this + 12);
  }
  else
  {
    v2 = (3 * v2);
    v3 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 3);
  }
  return v2 < (v4 - v3) >> 2 && *(_DWORD *)(v3 + 4 * v2) != -1;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::face_to_adjacent_faces_begin@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  geom::triangle_mesh_half_edge_connectivity *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  int v13;

  v4 = (3 * a2);
  v5 = *(_QWORD *)(this + 16);
  if (v4 >= (*(_QWORD *)(this + 24) - v5) >> 2 || *(_DWORD *)(v5 + 4 * v4) == -1)
  {
    v6 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v13 = -1;
    *(_DWORD *)(a3 + 4) = -1;
  }
  else
  {
    v6 = (geom::triangle_mesh_half_edge_connectivity *)this;
    v7 = a2 & 0x3FFFFFFF;
    this = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge((geom::triangle_mesh_half_edge_connectivity *)this, a2 & 0x3FFFFFFF);
    if ((_DWORD)this)
    {
      v8 = 0;
      v9 = v7 | 0x40000000;
      do
      {
        v10 = v8 + 1;
        this = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v6, v9);
        v11 = v8 < 2;
        if (!(_DWORD)this)
          break;
        v9 += 0x40000000;
      }
      while (v8++ < 2);
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v13 = v4 + 3;
    *(_BYTE *)a3 = v11;
    *(_DWORD *)(a3 + 4) = v4 + v10;
  }
  *(_DWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 16) = v6;
  return this;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::half_edges_begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  geom::triangle_mesh_half_edge_connectivity *v2;
  unint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;

  v2 = (geom::triangle_mesh_half_edge_connectivity *)this;
  v4 = ((uint64_t)(*(_QWORD *)(this + 24) - *(_QWORD *)(this + 16)) >> 2) / 3uLL;
  v5 = 3 * v4;
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = 0;
LABEL_3:
    v8 = 0;
    v9 = v6 & 0x3FFFFFFF;
    v10 = v7 + 3;
    v11 = v6 & 0x3FFFFFFF;
    while (1)
    {
      this = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v2, v11);
      if ((this & 1) != 0)
        break;
      --v8;
      v11 += 0x40000000;
      if (v8 == -3)
      {
        if (v10 >= v5)
          v12 = 1;
        else
          v12 = this;
        v6 = v9 + 1;
        v7 += 3;
        if ((v12 & 1) != 0)
        {
          LOBYTE(v4) = 0;
          goto LABEL_13;
        }
        goto LABEL_3;
      }
    }
    v10 = v7 - v8;
    LOBYTE(v4) = 1;
  }
  else
  {
    v10 = 0;
  }
LABEL_13:
  *(_BYTE *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v10;
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v2;
  return this;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::half_edges_end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = ((uint64_t)(*(_QWORD *)(this + 24) - *(_QWORD *)(this + 16)) >> 2) / 3uLL;
  *(_BYTE *)a2 = 0;
  LODWORD(v2) = 3 * v2;
  *(_DWORD *)(a2 + 4) = v2;
  *(_DWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = this;
  return this;
}

void geom::triangle_mesh_half_edge_connectivity::make(geom::triangle_mesh_half_edge_connectivity *this@<X0>, unint64_t a2@<X1>, const void *a3@<X2>, _BYTE *a4@<X8>)
{
  char *v9;
  size_t v10;
  void *v11;
  void *__p;
  void *v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, a2);
    v9 = (char *)v13;
    v10 = 4 * a2;
    bzero(v13, 4 * a2);
    v13 = &v9[4 * a2];
    v11 = __p;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  memcpy(v11, a3, v10);
  geom::triangle_mesh_half_edge_connectivity::make((std::vector<int>::size_type)this, (unsigned int **)&__p, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void geom::triangle_mesh_half_edge_connectivity::make(std::vector<int>::size_type __sz@<X0>, unsigned int **a2@<X1>, _BYTE *a3@<X8>)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v13;
  std::vector<int>::pointer v14;
  unsigned int **v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::vector<int>::pointer v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  std::vector<int>::pointer v29;
  int *v30;
  int v31;
  std::vector<int>::pointer v32;
  int *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  std::vector<int>::pointer v39;
  int *v40;
  int v41;
  unsigned int *v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t internal;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::vector<int>::pointer v55;
  std::vector<int>::pointer v56;
  int *v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  std::vector<int>::pointer v63;
  int *v64;
  int v65;
  uint64_t v66;
  std::vector<int>::pointer v67;
  std::vector<int>::pointer v68;
  int *v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  std::vector<int>::pointer v75;
  int *v76;
  int v77;
  uint64_t v78;
  std::vector<int>::pointer v79;
  std::vector<int>::pointer v80;
  int *v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  unint64_t v85;
  char *v86;
  std::vector<int>::pointer v87;
  int *v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  std::vector<int>::size_type v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int16 v96;
  void *v97;
  _DWORD *v98;
  uint64_t v99;
  void **v100;
  int v101;
  std::vector<int>::pointer v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::vector<unsigned int>::pointer v108;
  std::vector<unsigned int>::pointer v109;
  int64_t v110;
  int v111;
  int v112;
  unsigned int *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int **v120;
  unsigned int *v121;
  unint64_t v122;
  int64_t v123;
  unint64_t v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  std::vector<int>::pointer v128;
  std::vector<int>::pointer v129;
  std::vector<unsigned int>::pointer v130;
  _DWORD *v131;
  char *v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  void **v147;
  uint64_t i;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  unsigned int *v152;
  int64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  unint64_t *v157;
  unsigned int *v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  _QWORD *v166;
  int64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  int v175;
  unsigned int v176;
  unint64_t v177;
  unsigned int petal_of_faces_incident_to_face_vertex_helper;
  std::vector<int>::pointer v179;
  int *v180;
  std::vector<int>::pointer v181;
  int64_t v182;
  unint64_t v183;
  int64_t v184;
  unint64_t v185;
  char *v186;
  int *v187;
  int v188;
  std::vector<int>::pointer v189;
  std::vector<int>::pointer v190;
  int *v191;
  int64_t v192;
  unint64_t v193;
  int64_t v194;
  unint64_t v195;
  char *v196;
  std::vector<int>::pointer v197;
  int *v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  _DWORD *v203;
  unsigned int v204;
  unsigned int v205;
  _DWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unsigned int v213;
  void **v214;
  __int128 v215;
  unint64_t v216;
  int *value;
  __int128 v218;
  int *v219;
  __int128 v220;
  unsigned int *v221;
  __int128 v222;
  int v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int64_t v231;
  unsigned int v232;
  unint64_t v233;
  unint64_t v234;
  int64_t v235;
  int v236;
  unsigned int **v237;
  unint64_t v238;
  __int128 *v239;
  void *v240[2];
  __int128 v241;
  void *v242[2];
  int *v243;
  void *v244[2];
  int *v245;
  void *v246[2];
  void *v247[2];
  __int128 v248;
  _BYTE v249[32];
  uint64_t v250;
  char v251;
  std::vector<unsigned int> v252;
  std::vector<int> v253;
  std::vector<int> v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  std::vector<int> v258;
  void *__p;
  void *v260;
  uint64_t v261;
  unsigned int v262[6];
  unint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  void *v270[3];
  char *v271;
  char *v272;
  unint64_t v273;
  void *v274[5];

  v4 = *a2;
  v3 = a2[1];
  v5 = v3 - *a2;
  if (v5 % 3)
    v6 = 1;
  else
    v6 = (v5 / 3) > 0x20000000uLL;
  if (v6)
    goto LABEL_11;
  if (v3 != v4)
  {
    if (*v4 >= __sz)
      goto LABEL_11;
    v8 = 1;
    do
    {
      v9 = v8;
      if (v5 == v8)
        break;
      v10 = v4[v8++];
    }
    while (v10 < __sz);
    if (v9 < v5)
    {
LABEL_11:
      *a3 = 0;
      a3[192] = 0;
      return;
    }
  }
  memset(&v258, 0, sizeof(v258));
  v224 = __sz;
  std::vector<unsigned int>::resize(&v258, __sz, &geom::triangle_mesh_half_edge_connectivity::k_invalid_index);
  begin = v258.__begin_;
  end = v258.__end_;
  if (v258.__begin_ != v258.__end_)
  {
    v13 = 0;
    v14 = v258.__begin_;
    do
      *v14++ = v13++;
    while (v14 != end);
  }
  v15 = a2;
  v16 = *a2;
  v237 = v15;
  v17 = (unint64_t)v15[1];
  if ((uint64_t)(v17 - (_QWORD)v16) >= 1)
  {
    v18 = (unint64_t)((char *)end - (char *)begin) >> 2;
    do
    {
      v20 = *v16;
      v19 = v16[1];
      if (v20 == v19 || (v21 = v16[2], v20 == v21))
      {
        v22 = v258.__begin_;
        if (end >= v258.__end_cap_.__value_)
        {
          v24 = end - v258.__begin_;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            goto LABEL_312;
          v26 = (char *)v258.__end_cap_.__value_ - (char *)v258.__begin_;
          if (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v258.__end_cap_, v27);
            v29 = v258.__begin_;
            end = v258.__end_;
          }
          else
          {
            v28 = 0;
            v29 = v258.__begin_;
          }
          v30 = (int *)&v28[4 * v24];
          *v30 = v22[v20];
          v23 = v30 + 1;
          while (end != v29)
          {
            v31 = *--end;
            *--v30 = v31;
          }
          v258.__begin_ = v30;
          v258.__end_ = v23;
          v258.__end_cap_.__value_ = (int *)&v28[4 * v27];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *end = v258.__begin_[v20];
          v23 = end + 1;
        }
        v258.__end_ = v23;
        *v16 = v18;
        LODWORD(v18) = v18 + 1;
        v19 = v16[1];
        v21 = v16[2];
        end = v23;
      }
      if (v19 == v21)
      {
        v32 = v258.__begin_;
        if (end >= v258.__end_cap_.__value_)
        {
          v34 = end - v258.__begin_;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
LABEL_312:
            abort();
          v36 = (char *)v258.__end_cap_.__value_ - (char *)v258.__begin_;
          if (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v258.__end_cap_, v37);
            v39 = v258.__begin_;
            end = v258.__end_;
          }
          else
          {
            v38 = 0;
            v39 = v258.__begin_;
          }
          v40 = (int *)&v38[4 * v34];
          *v40 = v32[v21];
          v33 = v40 + 1;
          while (end != v39)
          {
            v41 = *--end;
            *--v40 = v41;
          }
          v258.__begin_ = v40;
          v258.__end_ = v33;
          v258.__end_cap_.__value_ = (int *)&v38[4 * v37];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *end = v258.__begin_[v21];
          v33 = end + 1;
        }
        v258.__end_ = v33;
        v16[1] = v18;
        LODWORD(v18) = v18 + 1;
        end = v33;
      }
      v16 += 3;
    }
    while ((unint64_t)v16 < v17);
  }
  v257 = 0;
  v255 = 0u;
  v256 = 0u;
  v43 = (void **)*v237;
  v42 = v237[1];
  v44 = (char *)v42 - (char *)*v237;
  v45 = v44 >> 2;
  if (*((_QWORD *)&v256 + 1) < (unint64_t)(v44 >> 2))
  {
    v43 = (void **)*v237;
    v42 = v237[1];
    v44 = (char *)v42 - (char *)*v237;
    v45 = v44 >> 2;
  }
  if ((unint64_t)v44 >= 0xC)
  {
    LODWORD(v46) = 0;
    v47 = v45 / 3;
    v48 = (unint64_t)((char *)v258.__end_ - (char *)v258.__begin_) >> 2;
    do
    {
      v50 = *(unsigned int *)v43;
      v49 = *((unsigned int *)v43 + 1);
      v239 = (__int128 *)(v50 | (v49 << 32));
      v52 = *((unsigned int *)v43 + 2);
      v239 = (__int128 *)(v49 | (v52 << 32));
      v239 = (__int128 *)(v52 | (v50 << 32));
      if ((v54 & internal) != 0xFFFFFFFFFFFFFFFFLL)
      {
        v56 = v258.__begin_;
        v55 = v258.__end_;
        if (v258.__end_ >= v258.__end_cap_.__value_)
        {
          v58 = v258.__end_ - v258.__begin_;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62)
            goto LABEL_312;
          v60 = (char *)v258.__end_cap_.__value_ - (char *)v258.__begin_;
          if (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 1 > v59)
            v59 = v60 >> 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v258.__end_cap_, v61);
            v63 = v258.__begin_;
            v55 = v258.__end_;
          }
          else
          {
            v62 = 0;
            v63 = v258.__begin_;
          }
          v64 = (int *)&v62[4 * v58];
          *v64 = v56[v50];
          v57 = v64 + 1;
          while (v55 != v63)
          {
            v65 = *--v55;
            *--v64 = v65;
          }
          v258.__begin_ = v64;
          v258.__end_ = v57;
          v258.__end_cap_.__value_ = (int *)&v62[4 * v61];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *v258.__end_ = v258.__begin_[v50];
          v57 = v55 + 1;
        }
        v258.__end_ = v57;
        *(_DWORD *)v43 = v48;
        LODWORD(v48) = v48 + 1;
      }
      if ((v53 & internal) != 0xFFFFFFFFFFFFFFFFLL)
      {
        v66 = *((unsigned int *)v43 + 1);
        v68 = v258.__begin_;
        v67 = v258.__end_;
        if (v258.__end_ >= v258.__end_cap_.__value_)
        {
          v70 = v258.__end_ - v258.__begin_;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62)
            goto LABEL_312;
          v72 = (char *)v258.__end_cap_.__value_ - (char *)v258.__begin_;
          if (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 1 > v71)
            v71 = v72 >> 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v258.__end_cap_, v73);
            v75 = v258.__begin_;
            v67 = v258.__end_;
          }
          else
          {
            v74 = 0;
            v75 = v258.__begin_;
          }
          v76 = (int *)&v74[4 * v70];
          *v76 = v68[v66];
          v69 = v76 + 1;
          while (v67 != v75)
          {
            v77 = *--v67;
            *--v76 = v77;
          }
          v258.__begin_ = v76;
          v258.__end_ = v69;
          v258.__end_cap_.__value_ = (int *)&v74[4 * v73];
          if (v75)
            operator delete(v75);
        }
        else
        {
          *v258.__end_ = v258.__begin_[v66];
          v69 = v67 + 1;
        }
        v258.__end_ = v69;
        *((_DWORD *)v43 + 1) = v48;
        LODWORD(v48) = v48 + 1;
      }
      if ((v54 & v53) != 0xFFFFFFFFFFFFFFFFLL)
      {
        v78 = *((unsigned int *)v43 + 2);
        v80 = v258.__begin_;
        v79 = v258.__end_;
        if (v258.__end_ >= v258.__end_cap_.__value_)
        {
          v82 = v258.__end_ - v258.__begin_;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
            goto LABEL_312;
          v84 = (char *)v258.__end_cap_.__value_ - (char *)v258.__begin_;
          if (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 1 > v83)
            v83 = v84 >> 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
            v85 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v85 = v83;
          if (v85)
          {
            v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v258.__end_cap_, v85);
            v87 = v258.__begin_;
            v79 = v258.__end_;
          }
          else
          {
            v86 = 0;
            v87 = v258.__begin_;
          }
          v88 = (int *)&v86[4 * v82];
          *v88 = v80[v78];
          v81 = v88 + 1;
          while (v79 != v87)
          {
            v89 = *--v79;
            *--v88 = v89;
          }
          v258.__begin_ = v88;
          v258.__end_ = v81;
          v258.__end_cap_.__value_ = (int *)&v86[4 * v85];
          if (v87)
            operator delete(v87);
        }
        else
        {
          *v258.__end_ = v258.__begin_[v78];
          v81 = v79 + 1;
        }
        v258.__end_ = v81;
        *((_DWORD *)v43 + 2) = v48;
        LODWORD(v48) = v48 + 1;
      }
      v274[0] = *v43;
      LODWORD(v271) = v46 & 0x3FFFFFFF;
      v274[0] = *(void **)((char *)v43 + 4);
      LODWORD(v271) = v46 & 0x3FFFFFFF | 0x40000000;
      v90 = *((unsigned int *)v43 + 2);
      v91 = *(_DWORD *)v43;
      v43 = (void **)((char *)v43 + 12);
      v274[0] = (void *)(v90 | ((unint64_t)v91 << 32));
      LODWORD(v271) = v46 & 0x3FFFFFFF | 0x80000000;
      v46 = (v46 + 1);
    }
    while (v47 > v46);
    v43 = (void **)*v237;
    v42 = v237[1];
  }
  memset(&v254, 0, sizeof(v254));
  memset(&v253, 0, sizeof(v253));
  memset(&v252, 0, sizeof(v252));
  v234 = (((char *)v42 - (char *)v43) >> 2) / 3uLL;
  v92 = ((unint64_t)((char *)v258.__end_ - (char *)v258.__begin_) >> 2);
  __p = 0;
  v260 = 0;
  v261 = 0;
  if (((unint64_t)((char *)v258.__end_ - (char *)v258.__begin_) >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, ((unint64_t)((char *)v258.__end_ - (char *)v258.__begin_) >> 2));
    v93 = (char *)v260;
    bzero(v260, 4 * v92);
    v260 = &v93[4 * v92];
  }
  v239 = &v255;
  if ((unint64_t)v256 >= 0x10)
  {
    v94 = 0;
    v95 = (unint64_t)v256 >> 4;
    while (1)
    {
      v96 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v255 + v94)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v96 != 0xFFFF)
        break;
      v94 += 16;
      if (!--v95)
        goto LABEL_126;
    }
    v97 = (void *)(__clz(__rbit64((unsigned __int16)~v96)) + v94);
    v240[0] = (void *)(unsigned __int16)~v96;
    v240[1] = v97;
    if (v97 != (void *)-1)
    {
      v98 = __p;
      do
      {
        v99 = *(unsigned int *)(*((_QWORD *)v239 + 1) + 12 * (_QWORD)v97);
        ++v98[v99];
        _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v239);
        v97 = v240[1];
      }
      while (v240[1] != (void *)-1);
    }
  }
LABEL_126:
  v254.__end_ = v254.__begin_;
  v253.__end_ = v253.__begin_;
  v252.__end_ = v252.__begin_;
  std::vector<unsigned int>::reserve(&v252, v234);
  v100 = (void **)*v237;
  if ((_DWORD)v234)
  {
    v101 = 0;
    v102 = v253.__begin_;
    do
    {
      v103 = 0;
      v104 = v101 & 0x3FFFFFFF;
      do
      {
        v105 = *((unsigned int *)v100 + v103);
        if (v103 == 2)
          v106 = 0;
        else
          v106 = v103 + 1;
        v239 = (__int128 *)(*((unsigned int *)v100 + v106) | (unint64_t)(v105 << 32));
        if (v107 == -1)
        {
          v108 = v252.__begin_;
          v109 = v252.__end_;
          v110 = v252.__end_ - v252.__begin_;
          v111 = v110 | 0xC0000000;
          v102[v103] = v110 | 0xC0000000;
          v112 = v104 | ((_DWORD)v103 << 30);
          if (v109 >= v252.__end_cap_.__value_)
          {
            v114 = v110 + 1;
            if ((unint64_t)(v110 + 1) >> 62)
              goto LABEL_312;
            v115 = (char *)v252.__end_cap_.__value_ - (char *)v108;
            if (((char *)v252.__end_cap_.__value_ - (char *)v108) >> 1 > v114)
              v114 = v115 >> 1;
            if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
              v116 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v116 = v114;
            if (v116)
            {
              v117 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v252.__end_cap_, v116);
              v108 = v252.__begin_;
              v109 = v252.__end_;
            }
            else
            {
              v117 = 0;
            }
            v118 = (unsigned int *)&v117[4 * v110];
            *v118 = v112;
            v113 = v118 + 1;
            while (v109 != v108)
            {
              v119 = *--v109;
              *--v118 = v119;
            }
            v252.__begin_ = v118;
            v252.__end_ = v113;
            v252.__end_cap_.__value_ = (unsigned int *)&v117[4 * v116];
            if (v108)
              operator delete(v108);
          }
          else
          {
            *v109 = v112;
            v113 = v109 + 1;
          }
          v252.__end_ = v113;
          v254.__begin_[v105] = v111;
        }
        else
        {
          v102[v103] = *(_DWORD *)(*((_QWORD *)&v255 + 1) + 12 * v107 + 8);
          if (v254.__begin_[v105] == -1)
            v254.__begin_[v105] = v104 | ((_DWORD)v103 << 30);
        }
        ++v103;
      }
      while (v103 != 3);
      ++v101;
      v100 = (void **)((char *)v100 + 12);
      v102 += 3;
    }
    while (v101 != (_DWORD)v234);
    v120 = v237;
    v100 = (void **)*v237;
  }
  else
  {
    v120 = v237;
  }
  v121 = v120[1];
  v122 = (v258.__end_ - v258.__begin_);
  v123 = v258.__end_ - v258.__begin_;
  LOBYTE(v239) = 0;
  std::vector<BOOL>::vector(v274, v122, (unsigned __int8 *)&v239);
  if (!(_DWORD)v123)
  {
    v226 = 0;
    goto LABEL_209;
  }
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v238 = (((char *)v121 - (char *)v100) >> 2) / 3uLL;
  v128 = v254.__begin_;
  v129 = v253.__begin_;
  v130 = v252.__begin_;
  v131 = __p;
  v132 = (char *)v274[0];
  v133 = v123;
  v134 = v123;
  do
  {
    v135 = v128[v124];
    if (v135 == -1)
    {
LABEL_161:
      v137 = 0;
      goto LABEL_173;
    }
    if (v135 >> 30 == 3)
    {
      v136 = v130[v135 & 0x3FFFFFFF];
      if (v136 >> 30 == 3)
        goto LABEL_161;
      v137 = 0;
      do
      {
        ++v137;
        v142 = v136 & 0x3FFFFFFF;
        v143 = v136 >> 30;
        if (v143)
          v144 = v143 - 1;
        else
          v144 = 2;
        v136 = v129[v144 + 3 * v142];
      }
      while (v136 >> 30 != 3);
    }
    else
    {
      v137 = 0;
      v138 = v128[v124];
      do
      {
        ++v137;
        v139 = v138 & 0x3FFFFFFF;
        v140 = v138 >> 30;
        if (v140)
          v141 = v140 - 1;
        else
          v141 = 2;
        v138 = v129[v141 + 3 * v139];
      }
      while (v138 != v135);
    }
LABEL_173:
    v145 = v131[v124];
    if (v137 != v145)
    {
      *(_QWORD *)&v132[(v124 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v124;
      ++v125;
      v127 += v145;
      if (v145 > v126)
        v126 = v145;
    }
    if (!v137)
      v133 = --v134;
    ++v124;
  }
  while (v124 != v122);
  v226 = v133;
  if (!v125)
  {
LABEL_209:
    v165 = (uint64_t)a3;
    goto LABEL_283;
  }
  v235 = v123;
  v271 = 0;
  v272 = 0;
  v273 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIfLh2EE13closest_pointINS_8functionIFDv2_fjS6_EEEEES6_T_S6_RfRjE5stateNS_9allocatorISC_EEE7reserveEm((void **)&v271, v127);
  if ((_DWORD)v238)
  {
    v146 = 0;
    v147 = (void **)*v237;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v149 = *((unsigned int *)v147 + i);
        if (((*(_QWORD *)((char *)v274[0] + ((v149 >> 3) & 0x1FFFFFF8)) >> v149) & 1) != 0)
        {
          v150 = ((unint64_t)(v146 & 0x3FFFFFFF) << 32) | (i << 62) | v149;
          v151 = v272;
          if ((unint64_t)v272 >= v273)
          {
            v153 = (v272 - v271) >> 3;
            if ((unint64_t)(v153 + 1) >> 61)
              goto LABEL_312;
            v154 = (uint64_t)(v273 - (_QWORD)v271) >> 2;
            if (v154 <= v153 + 1)
              v154 = v153 + 1;
            if (v273 - (unint64_t)v271 >= 0x7FFFFFFFFFFFFFF8)
              v155 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v155 = v154;
            if (v155)
              v156 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v273, v155);
            else
              v156 = 0;
            v157 = (unint64_t *)&v156[8 * v153];
            *v157 = v150;
            v152 = (unsigned int *)(v157 + 1);
            v159 = v271;
            v158 = (unsigned int *)v272;
            if (v272 != v271)
            {
              do
              {
                v160 = *((_QWORD *)v158 - 1);
                v158 -= 2;
                *--v157 = v160;
              }
              while (v158 != (unsigned int *)v159);
              v158 = (unsigned int *)v271;
            }
            v271 = (char *)v157;
            v272 = (char *)v152;
            v273 = (unint64_t)&v156[8 * v155];
            if (v158)
              operator delete(v158);
          }
          else
          {
            *(_QWORD *)v272 = v150;
            v152 = (unsigned int *)(v151 + 8);
          }
          v272 = (char *)v152;
        }
      }
      ++v146;
      v147 = (void **)((char *)v147 + 12);
    }
    while (v146 != (_DWORD)v238);
  }
  v161 = 126 - 2 * __clz((v272 - v271) >> 3);
  if (v272 == v271)
    v162 = 0;
  else
    v162 = v161;
  LOBYTE(v239) = 0;
  std::vector<BOOL>::vector(v270, v238, (unsigned __int8 *)&v239);
  v267 = 0;
  v268 = 0;
  v269 = 0;
  if (v126)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v267, v126);
    v163 = v268;
    bzero(v268, 4 * v126);
    v268 = &v163[4 * v126];
    v264 = 0;
    v265 = 0;
    v266 = 0;
    std::vector<float>::__vallocate[abi:nn180100](&v264, v126);
    v164 = v265;
    bzero(v265, 4 * v126);
    v265 = &v164[4 * v126];
  }
  else
  {
    v264 = 0;
    v265 = 0;
    v266 = 0;
  }
  v167 = v235;
  v166 = v237;
  if (((v272 - v271) & 0x7FFFFFFF8) != 0)
  {
    v168 = 0;
    v169 = 0;
    v227 = ((unint64_t)(v272 - v271) >> 3);
    v170 = 0xFFFFFFFFLL;
    do
    {
      v171 = v271;
      v172 = *(unsigned int *)&v271[8 * v168];
      if ((_DWORD)v170 != (_DWORD)v172)
      {
        if (v168 > v169)
        {
          v173 = (char *)v270[0];
          v174 = &v271[8 * v169 + 4];
          do
          {
            v175 = *(_DWORD *)v174;
            v174 += 8;
            *(_QWORD *)&v173[(unint64_t)(v175 & 0x3FFFFFC0) >> 3] &= ~(1 << v175);
            ++v169;
          }
          while (v168 != v169);
        }
        v176 = v254.__begin_[v172];
        if (v176 >> 30 == 3)
          v176 = v252.__begin_[v176 & 0x3FFFFFFF];
        v169 = v168;
        v171 = v271;
        v170 = v172;
      }
      v177 = *(unsigned int *)&v171[8 * v168 + 4];
      if (((*(_QWORD *)((char *)v270[0] + ((v177 >> 3) & 0x7FFFFF8)) >> v177) & 1) == 0)
      {
        v179 = v254.__end_;
        if (v254.__end_ >= v254.__end_cap_.__value_)
        {
          v181 = v254.__begin_;
          v182 = v254.__end_ - v254.__begin_;
          v183 = v182 + 1;
          if ((unint64_t)(v182 + 1) >> 62)
            goto LABEL_312;
          v184 = (char *)v254.__end_cap_.__value_ - (char *)v254.__begin_;
          if (((char *)v254.__end_cap_.__value_ - (char *)v254.__begin_) >> 1 > v183)
            v183 = v184 >> 1;
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFFCLL)
            v185 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v185 = v183;
          if (v185)
          {
            v186 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v254.__end_cap_, v185);
            v181 = v254.__begin_;
            v179 = v254.__end_;
          }
          else
          {
            v186 = 0;
          }
          v187 = (int *)&v186[4 * v182];
          *v187 = -1;
          v180 = v187 + 1;
          while (v179 != v181)
          {
            v188 = *--v179;
            *--v187 = v188;
          }
          v254.__begin_ = v187;
          v254.__end_ = v180;
          v254.__end_cap_.__value_ = (int *)&v186[4 * v185];
          if (v181)
            operator delete(v181);
        }
        else
        {
          *v254.__end_ = -1;
          v180 = v179 + 1;
        }
        v254.__end_ = v180;
        v190 = v258.__begin_;
        v189 = v258.__end_;
        if (v258.__end_ >= v258.__end_cap_.__value_)
        {
          v192 = v258.__end_ - v258.__begin_;
          v193 = v192 + 1;
          if ((unint64_t)(v192 + 1) >> 62)
            goto LABEL_312;
          v194 = (char *)v258.__end_cap_.__value_ - (char *)v258.__begin_;
          if (((char *)v258.__end_cap_.__value_ - (char *)v258.__begin_) >> 1 > v193)
            v193 = v194 >> 1;
          if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFFCLL)
            v195 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v195 = v193;
          if (v195)
          {
            v196 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v258.__end_cap_, v195);
            v197 = v258.__begin_;
            v189 = v258.__end_;
          }
          else
          {
            v196 = 0;
            v197 = v258.__begin_;
          }
          v198 = (int *)&v196[4 * v192];
          *v198 = v190[v170];
          v191 = v198 + 1;
          while (v189 != v197)
          {
            v199 = *--v189;
            *--v198 = v199;
          }
          v258.__begin_ = v198;
          v258.__end_ = v191;
          v258.__end_cap_.__value_ = (int *)&v196[4 * v195];
          if (v197)
            operator delete(v197);
        }
        else
        {
          *v258.__end_ = v258.__begin_[v170];
          v191 = v189 + 1;
        }
        ++v226;
        v258.__end_ = v191;
        if (petal_of_faces_incident_to_face_vertex_helper)
        {
          v225 = v167 + 1;
          v228 = v170;
          v200 = 0;
          v230 = 4 * petal_of_faces_incident_to_face_vertex_helper;
          v231 = v167 << 32;
          v229 = v167;
          v166 = v237;
          v233 = v168;
          v236 = v167;
          v232 = v170;
          while (1)
          {
            v201 = *(_DWORD *)&v264[v200];
            v202 = 3 * v201;
            v203 = (_DWORD *)(*v166 + 4 * (3 * v201));
            if (*v203 == (_DWORD)v170)
            {
              v204 = 0;
              v205 = 2;
              v206 = (_DWORD *)(*v166 + 4 * v202);
              v207 = v228;
              v208 = 1;
            }
            else
            {
              v206 = v203 + 1;
              if (v203[1] == (_DWORD)v170)
              {
                v205 = 0;
                v204 = 1;
                v207 = v228;
                v208 = 2;
              }
              else
              {
                v208 = 0;
                if (v203[2] == (_DWORD)v170)
                  v204 = 2;
                else
                  v204 = -1;
                v206 = &v203[v204];
                v207 = *v206;
                v205 = v204 - 1;
              }
            }
            v209 = v203[v205];
            v210 = v203[v208];
            v263 = v207 | ((unint64_t)v210 << 32);
            v239 = &v255;
            v240[0] = 0;
            v240[1] = (void *)v211;
            if (v211 >> 4 < (unint64_t)v256 >> 4)
              v240[0] = (void *)(unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v255 + 16 * (v211 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v263 = v209 | (v207 << 32);
            v239 = &v255;
            v240[0] = 0;
            v240[1] = (void *)v212;
            if (v212 >> 4 < (unint64_t)v256 >> 4)
              v240[0] = (void *)(unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v255 + 16 * (v212 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            *(_QWORD *)v262 = (v210 << 32) | v229;
            LODWORD(v263) = v201 & 0x3FFFFFFF | (v204 << 30);
            *(_QWORD *)v262 = v231 | v209;
            LODWORD(v263) = v201 & 0x3FFFFFFF | (v205 << 30);
            *v206 = v236;
            v213 = v253.__begin_[v204 + v202];
            v168 = v233;
            v170 = v232;
            if (v213 >> 30 == 3)
              goto LABEL_270;
            if (v254.__begin_[v229] == -1)
              break;
LABEL_271:
            v200 += 4;
            v166 = v237;
            if (v230 == v200)
            {
              v167 = v225;
              goto LABEL_274;
            }
          }
          v213 = v201 & 0x3FFFFFFF | (v204 << 30);
LABEL_270:
          v254.__begin_[v229] = v213;
          goto LABEL_271;
        }
        v167 = (v167 + 1);
        v166 = v237;
      }
LABEL_274:
      ++v168;
    }
    while (v168 != v227);
  }
  if (v264)
  {
    v265 = v264;
    operator delete(v264);
  }
  v165 = (uint64_t)a3;
  if (v267)
  {
    v268 = v267;
    operator delete(v267);
  }
  if (v270[0])
    operator delete(v270[0]);
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
LABEL_283:
  if (v274[0])
    operator delete(v274[0]);
  if (__p)
  {
    v260 = __p;
    operator delete(__p);
  }
  v214 = (void **)*v237;
  v215 = *(_OWORD *)(v237 + 1);
  memset(v249, 0, 25);
  v241 = v215;
  v216 = ((uint64_t)(v215 - (_QWORD)v214) >> 2) / 3uLL;
  v237[1] = 0;
  v237[2] = 0;
  *v237 = 0;
  value = v254.__end_cap_.__value_;
  v218 = *(_OWORD *)&v254.__begin_;
  memset(&v254, 0, sizeof(v254));
  v219 = v253.__end_cap_.__value_;
  v220 = *(_OWORD *)&v253.__begin_;
  memset(&v253, 0, sizeof(v253));
  v221 = v252.__end_cap_.__value_;
  v222 = *(_OWORD *)&v252.__begin_;
  memset(&v252, 0, sizeof(v252));
  v251 = 0;
  v247[1] = 0;
  v240[0] = 0;
  v248 = 0u;
  *(_OWORD *)v242 = v218;
  v243 = value;
  *(_OWORD *)v244 = v220;
  v245 = v219;
  *(_OWORD *)v246 = v222;
  v247[0] = v221;
  v239 = (__int128 *)__PAIR64__(v216, v226);
  v240[1] = v214;
  if (v226 != v224)
    std::optional<std::vector<unsigned int>>::operator=[abi:nn180100]<std::vector<unsigned int>,void>((std::vector<unsigned int> *)&v249[24], (__n128 *)&v258);
  std::pair<geom::triangle_mesh_half_edge_connectivity,std::optional<std::vector<unsigned int>>>::pair[abi:nn180100](v165, (__n128 *)&v239);
  *(_BYTE *)(v165 + 192) = 1;
  if (v251 && *(_QWORD *)&v249[24])
  {
    v250 = *(_QWORD *)&v249[24];
    operator delete(*(void **)&v249[24]);
  }
  if (*(_QWORD *)v249)
  {
    *(_QWORD *)&v249[8] = *(_QWORD *)v249;
    operator delete(*(void **)v249);
  }
  if (v247[1])
  {
    *(void **)&v248 = v247[1];
    operator delete(v247[1]);
  }
  if (v246[0])
  {
    v246[1] = v246[0];
    operator delete(v246[0]);
  }
  if (v244[0])
  {
    v244[1] = v244[0];
    operator delete(v244[0]);
  }
  if (v242[0])
  {
    v242[1] = v242[0];
    operator delete(v242[0]);
  }
  if (v240[1])
  {
    *(void **)&v241 = v240[1];
    operator delete(v240[1]);
  }
  if (v252.__begin_)
  {
    v252.__end_ = v252.__begin_;
    operator delete(v252.__begin_);
  }
  if (v253.__begin_)
  {
    v253.__end_ = v253.__begin_;
    operator delete(v253.__begin_);
  }
  if (v254.__begin_)
  {
    v254.__end_ = v254.__begin_;
    operator delete(v254.__begin_);
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v255);
  if (v258.__begin_)
  {
    v258.__end_ = v258.__begin_;
    operator delete(v258.__begin_);
  }
}

uint64_t geom::triangle_mesh_half_edge_connectivity::make_interior_half_edge(geom::triangle_mesh_half_edge_connectivity *this, uint64_t a2)
{
  if (a2 >> 30 == 3)
    return *(unsigned int *)(*((_QWORD *)this + 11) + 4 * (a2 & 0x3FFFFFFF));
  return a2;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  if (((a2 >> 30 != 3) & geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2)) != 0)
    return a2 & 0x3FFFFFFF;
  else
    return 0xFFFFFFFFLL;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin_with_exterior(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;

  if (!geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2))
    return 0xFFFFFFFFLL;
  v4 = a2 & 0x3FFFFFFF;
  if (a2 >> 30 != 3)
    v4 = 3 * (a2 & 0x3FFFFFFF) + (a2 >> 30);
  v5 = 64;
  if (a2 >> 30 == 3)
    v5 = 88;
  return *(unsigned int *)(*(_QWORD *)((char *)this + v5) + 4 * v4);
}

uint64_t geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2)
    && !geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, a2))
  {
    return *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (3 * (a2 & 0x3FFFFFFF) + (a2 >> 30)));
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t geom::triangle_mesh_half_edge_connectivity::get_face_half_edges(geom::triangle_mesh_half_edge_connectivity *this, int a2, unsigned int *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t result;

  v4 = (3 * a2);
  v5 = *((_QWORD *)this + 2);
  if (v4 >= (*((_QWORD *)this + 3) - v5) >> 2 || *(_DWORD *)(v5 + 4 * v4) == -1)
  {
    *(_QWORD *)a3 = -1;
    result = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = *((_QWORD *)this + 8);
    *a3 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin_with_exterior(this, *(_DWORD *)(v7 + 4 * v4));
    a3[1] = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin_with_exterior(this, *(_DWORD *)(v7 + 4 * (v4 + 1)));
    result = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin_with_exterior(this, *(_DWORD *)(v7 + 4 * (v4 + 2)));
  }
  a3[2] = result;
  return result;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(geom::triangle_mesh_half_edge_connectivity *this, int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;

  v3 = (3 * a2);
  v4 = *((_QWORD *)this + 2);
  if (v3 >= (*((_QWORD *)this + 3) - v4) >> 2 || a3 > 3 || *(_DWORD *)(v4 + 4 * v3) == -1)
    return 0xFFFFFFFFLL;
  else
    return geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin_with_exterior(this, *(_DWORD *)(*((_QWORD *)this + 8) + 4 * (v3 + a3)));
}

uint64_t geom::triangle_mesh_half_edge_connectivity::find_half_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;

  v3 = *(_DWORD *)(*((_QWORD *)this + 5) + 4 * a2);
  if (v3 == -1)
    return 0xFFFFFFFFLL;
  if (v3 >> 30 == 3)
  {
    v4 = *(unsigned int *)(*((_QWORD *)this + 11) + 4 * (v3 & 0x3FFFFFFF));
    if (v4 >> 30 != 3)
    {
      while (1)
      {
        v5 = 3 * (v4 & 0x3FFFFFFF);
        v6 = v4 >> 30;
        v7 = v4 >> 30 == 2 ? 0 : v6 + 1;
        if (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * (v7 + v5)) == a3)
          break;
        v8 = v6 - 1;
        if (!v6)
          v8 = 2;
        v4 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (v8 + v5));
        if (v4 >> 30 == 3)
          return 0xFFFFFFFFLL;
      }
      return v4;
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(unsigned int *)(*((_QWORD *)this + 5) + 4 * a2);
  while (1)
  {
    v9 = 3 * (v4 & 0x3FFFFFFF);
    v10 = v4 >> 30;
    v11 = v4 >> 30 == 2 ? 0 : v10 + 1;
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * (v11 + v9)) == a3)
      break;
    v12 = v10 - 1;
    if (!v10)
      v12 = 2;
    v4 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (v12 + v9));
    if ((_DWORD)v4 == v3)
      return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::find_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2, int a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(*((_QWORD *)this + 5) + 4 * a2);
  if (v3 == -1)
    return 0xFFFFFFFFLL;
  if (v3 >> 30 == 3)
  {
    v5 = v3 & 0x3FFFFFFF;
    v6 = *((_QWORD *)this + 11);
    for (i = *(unsigned int *)(v6 + 4 * v5);
          i >> 30 != 3;
          i = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (v11 + v8)))
    {
      v8 = 3 * (i & 0x3FFFFFFF);
      v9 = i >> 30;
      v10 = i >> 30 == 2 ? 0 : v9 + 1;
      if (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * (v10 + v8)) == a3)
        return i;
      if (v9)
        v11 = v9 - 1;
      else
        v11 = 2;
    }
    v17[0] = -1;
    i = *(unsigned int *)(v6 + 4 * (i & 0x3FFFFFFF));
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(this, i, (unsigned int *)v17);
    if (LODWORD(v17[0]) == a3)
      return i;
    return 0xFFFFFFFFLL;
  }
  i = *(unsigned int *)(*((_QWORD *)this + 5) + 4 * a2);
  while (1)
  {
    v12 = 3 * (i & 0x3FFFFFFF);
    v13 = i >> 30;
    v14 = i >> 30 == 2 ? 0 : v13 + 1;
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 4 * (v14 + v12)) == a3)
      break;
    if (v13)
      v15 = v13 - 1;
    else
      v15 = 2;
    i = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (v15 + v12));
    if ((_DWORD)i == v3)
      return 0xFFFFFFFFLL;
  }
  return i;
}

void geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v8;
  _QWORD *v9;
  int v10;
  int *v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int *v18;
  int v19;
  int v20;
  BOOL v21;

  v3 = *(int **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = a1[5];
  if (a2 < (unint64_t)((a1[6] - v4) >> 2))
  {
    v5 = *(_DWORD *)(v4 + 4 * a2);
    if (v5 != -1)
    {
      v8 = *(_DWORD *)(v4 + 4 * a2);
      if (v5 >> 30 == 3)
      {
        v8 = *(_DWORD *)(a1[11] + 4 * (v5 & 0x3FFFFFFF));
        v5 = -1;
      }
      v9 = (_QWORD *)(a3 + 16);
      do
      {
        v10 = v8 & 0x3FFFFFFF;
        if ((unint64_t)v3 >= *v9)
        {
          v12 = *(int **)a3;
          v13 = ((uint64_t)v3 - *(_QWORD *)a3) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            abort();
          v15 = *v9 - (_QWORD)v12;
          if (v15 >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v16);
            v12 = *(int **)a3;
            v3 = *(int **)(a3 + 8);
          }
          else
          {
            v17 = 0;
          }
          v18 = (int *)&v17[4 * v13];
          *v18 = v10;
          v11 = v18 + 1;
          while (v3 != v12)
          {
            v19 = *--v3;
            *--v18 = v19;
          }
          *(_QWORD *)a3 = v18;
          *(_QWORD *)(a3 + 8) = v11;
          *(_QWORD *)(a3 + 16) = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v3 = v10;
          v11 = v3 + 1;
        }
        *(_QWORD *)(a3 + 8) = v11;
        if (v8 >> 30)
          v20 = (v8 >> 30) - 1;
        else
          v20 = 2;
        v8 = *(_DWORD *)(a1[8] + 4 * (v20 + 3 * v10));
        v21 = v8 != v5;
        if (v5 == -1)
          v21 = v8 >> 30 != 3;
        v3 = v11;
      }
      while (v21);
    }
  }
}

uint64_t geom::triangle_mesh_half_edge_connectivity::get_vertex_opposite_half_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  _BOOL4 is_valid_half_edge;
  uint64_t result;
  unsigned int v6;
  int v7;

  is_valid_half_edge = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2);
  result = 0xFFFFFFFFLL;
  v6 = a2 >> 30;
  if (a2 >> 30 != 3 && is_valid_half_edge)
  {
    if (v6)
      v7 = v6 - 1;
    else
      v7 = 2;
    return *(unsigned int *)(*((_QWORD *)this + 2) + 4 * (v7 + 3 * (a2 & 0x3FFFFFFF)));
  }
  return result;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::count_incident_edges_to_vertex(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v2 = *(_QWORD *)(this + 40);
  if (a2 >= (unint64_t)((*(_QWORD *)(this + 48) - v2) >> 2))
    return 0;
  v3 = *(_DWORD *)(v2 + 4 * a2);
  if (v3 == -1)
    return 0;
  v4 = this;
  if (v3 >> 30 == 3)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(this + 88) + 4 * (v3 & 0x3FFFFFFF));
    v6 = *(_QWORD *)(this + 64);
    LODWORD(this) = 1;
    do
    {
      this = (this + 1);
      v7 = v5 & 0x3FFFFFFF;
      v8 = v5 >> 30;
      if (v8)
        v9 = v8 - 1;
      else
        v9 = 2;
      v5 = *(_DWORD *)(v6 + 4 * (v9 + 3 * v7));
    }
    while (v5 >> 30 != 3);
  }
  else
  {
    LODWORD(this) = 0;
    v10 = *(_QWORD *)(v4 + 64);
    v11 = *(_DWORD *)(v2 + 4 * a2);
    do
    {
      this = (this + 1);
      v12 = v11 & 0x3FFFFFFF;
      v13 = v11 >> 30;
      if (v13)
        v14 = v13 - 1;
      else
        v14 = 2;
      v11 = *(_DWORD *)(v10 + 4 * (v14 + 3 * v12));
    }
    while (v11 != v3);
  }
  return this;
}

void geom::triangle_mesh_half_edge_connectivity::get_incident_outgoing_half_edges_to_vertex(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  BOOL v20;

  v3 = *(unsigned int **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = a1[5];
  if (a2 < (unint64_t)((a1[6] - v4) >> 2))
  {
    v5 = *(_DWORD *)(v4 + 4 * a2);
    if (v5 != -1)
    {
      v8 = *(_DWORD *)(v4 + 4 * a2);
      if (v5 >> 30 == 3)
      {
        v8 = *(_DWORD *)(a1[11] + 4 * (v5 & 0x3FFFFFFF));
        v5 = -1;
      }
      v9 = (_QWORD *)(a3 + 16);
      do
      {
        if ((unint64_t)v3 >= *v9)
        {
          v11 = *(unsigned int **)a3;
          v12 = ((uint64_t)v3 - *(_QWORD *)a3) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            abort();
          v14 = *v9 - (_QWORD)v11;
          if (v14 >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v15);
            v11 = *(unsigned int **)a3;
            v3 = *(unsigned int **)(a3 + 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * v12];
          *(_DWORD *)v17 = v8;
          v10 = (unsigned int *)(v17 + 4);
          while (v3 != v11)
          {
            v18 = *--v3;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          *(_QWORD *)a3 = v17;
          *(_QWORD *)(a3 + 8) = v10;
          *(_QWORD *)(a3 + 16) = &v16[4 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v3 = v8;
          v10 = v3 + 1;
        }
        *(_QWORD *)(a3 + 8) = v10;
        if (v8 >> 30)
          v19 = (v8 >> 30) - 1;
        else
          v19 = 2;
        v8 = *(_DWORD *)(a1[8] + 4 * (v19 + 3 * (v8 & 0x3FFFFFFF)));
        v20 = v8 != v5;
        if (v5 == -1)
          v20 = v8 >> 30 != 3;
        v3 = v10;
      }
      while (v20);
    }
  }
}

void geom::triangle_mesh_half_edge_connectivity::get_incident_incoming_half_edges_to_vertex(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  int v22;
  BOOL v23;

  v3 = *(unsigned int **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = a1[5];
  if (a2 < (unint64_t)((a1[6] - v4) >> 2))
  {
    v5 = *(_DWORD *)(v4 + 4 * a2);
    if (v5 != -1)
    {
      v8 = *(_DWORD *)(v4 + 4 * a2);
      if (v5 >> 30 == 3)
      {
        v8 = *(_DWORD *)(a1[11] + 4 * (v5 & 0x3FFFFFFF));
        v5 = -1;
      }
      v9 = (_QWORD *)(a3 + 16);
      do
      {
        v10 = v8 >> 30;
        if (v8 >> 30)
          v11 = (v8 & 0xC0000000) - 0x40000000;
        else
          v11 = 0x80000000;
        v12 = v11 & 0xC0000000 | v8 & 0x3FFFFFFF;
        if ((unint64_t)v3 >= *v9)
        {
          v14 = *(unsigned int **)a3;
          v15 = ((uint64_t)v3 - *(_QWORD *)a3) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            abort();
          v17 = *v9 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v18);
            v14 = *(unsigned int **)a3;
            v3 = *(unsigned int **)(a3 + 8);
          }
          else
          {
            v19 = 0;
          }
          v20 = (unsigned int *)&v19[4 * v15];
          *v20 = v12;
          v13 = v20 + 1;
          while (v3 != v14)
          {
            v21 = *--v3;
            *--v20 = v21;
          }
          *(_QWORD *)a3 = v20;
          *(_QWORD *)(a3 + 8) = v13;
          *(_QWORD *)(a3 + 16) = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v3 = v12;
          v13 = v3 + 1;
        }
        *(_QWORD *)(a3 + 8) = v13;
        v22 = v10 - 1;
        if (!v10)
          v22 = 2;
        v8 = *(_DWORD *)(a1[8] + 4 * (v22 + 3 * (v8 & 0x3FFFFFFF)));
        v23 = v8 != v5;
        if (v5 == -1)
          v23 = v8 >> 30 != 3;
        v3 = v13;
      }
      while (v23);
    }
  }
}

geom::triangle_mesh_half_edge_connectivity *geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(geom::triangle_mesh_half_edge_connectivity *result, unsigned int a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char v19[4];
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  geom::triangle_mesh_half_edge_connectivity *v23;
  unsigned int v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = *((_QWORD *)result + 5);
  if (a2 < (unint64_t)((*((_QWORD *)result + 6) - v4) >> 2))
  {
    v5 = *(_DWORD *)(v4 + 4 * a2);
    if (v5 != -1)
    {
      v7 = *(_DWORD *)(v4 + 4 * a2);
      if (v5 >> 30 == 3)
      {
        v7 = *(_DWORD *)(*((_QWORD *)result + 11) + 4 * (v5 & 0x3FFFFFFF));
        v5 = -1;
      }
      v19[0] = 1;
      v20 = a2;
      v21 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v22 = v7;
      v23 = result;
      do
      {
        *(_QWORD *)v24 = -1;
        geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v23, v22, v24);
        v9 = *(_DWORD *)((unint64_t)v24 | (4 * (v24[0] == v20)));
        if ((unint64_t)v3 >= *v8)
        {
          v11 = *(_DWORD **)a3;
          v12 = ((uint64_t)v3 - *(_QWORD *)a3) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            abort();
          v14 = *v8 - (_QWORD)v11;
          if (v14 >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v15);
            v11 = *(_DWORD **)a3;
            v3 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * v12];
          *(_DWORD *)v17 = v9;
          v10 = v17 + 4;
          while (v3 != v11)
          {
            v18 = *--v3;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          *(_QWORD *)a3 = v17;
          *(_QWORD *)(a3 + 8) = v10;
          *(_QWORD *)(a3 + 16) = &v16[4 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v3 = v9;
          v10 = v3 + 1;
        }
        *(_QWORD *)(a3 + 8) = v10;
        result = (geom::triangle_mesh_half_edge_connectivity *)geom::triangle_mesh_half_edge_connectivity::vertex_to_half_edge_iterator<unsigned int,geom::triangle_mesh_half_edge_connectivity::adjacent_vertex_tag>::operator++((uint64_t)v19);
        v3 = v10;
      }
      while (v19[0]);
    }
  }
  return result;
}

BOOL geom::triangle_mesh_half_edge_connectivity::is_boundary_vertex(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 5);
  return a2 < (unint64_t)((*((_QWORD *)this + 6) - v2) >> 2)
      && (*(_DWORD *)(v2 + 4 * a2) + 0x40000000) < 0x3FFFFFFF;
}

BOOL geom::triangle_mesh_half_edge_connectivity::is_boundary_face(geom::triangle_mesh_half_edge_connectivity *this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v6[2];
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (3 * a2);
  v3 = *((_QWORD *)this + 2);
  if (v2 >= (*((_QWORD *)this + 3) - v3) >> 2 || *(_DWORD *)(v3 + 4 * v2) == -1)
    return 0;
  *(_QWORD *)v6 = -1;
  v7 = -1;
  geom::triangle_mesh_half_edge_connectivity::get_face_half_edges(this, a2, v6);
  return geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, v6[0])
      || geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, v6[1])
      || geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, v7);
}

uint64_t geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_manifold(geom::triangle_mesh_half_edge_connectivity *a1, unsigned int a2, std::vector<unsigned int> *a3, std::vector<unsigned int> *a4)
{
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;
  char v13;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  char v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v36;
  char v37;
  unsigned int v38;
  unsigned int edge;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(a1, a2))
    return 0;
  *(_QWORD *)v42 = -1;
  geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(a1, a2, v42);
  v8 = v42[0];
  v9 = *((_QWORD *)a1 + 5);
  v10 = (*((_QWORD *)a1 + 6) - v9) >> 2;
  v11 = v10 <= v42[0] || (*(_DWORD *)(v9 + 4 * v42[0]) + 1) < 0xC0000001;
  v12 = v42[1];
  if (v10 > v42[1])
  {
    v13 = (*(_DWORD *)(v9 + 4 * v42[1]) + 1) < 0xC0000001 || v11;
    if ((v13 & 1) == 0 && !geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(a1, a2))
      return 0;
  }
  std::vector<unsigned int>::reserve(a3, 6uLL);
  std::vector<unsigned int>::reserve(a4, 6uLL);
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(a1, v8, (uint64_t)a3);
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(a1, v12, (uint64_t)a4);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  begin = a3->__begin_;
  v16 = a4->__begin_;
  end = a4->__end_;
  v17 = (char *)a3->__end_ - (char *)a3->__begin_;
  v18 = v17 >> 2;
  v19 = end - a4->__begin_;
  v20 = v19 + (v17 >> 2);
  if (v17 && end != v16)
  {
    v41 = v8;
    v21 = 0;
    v22 = 0;
    do
    {
      while (1)
      {
        v23 = v16[v21];
        if (v23 >= begin[v22])
          break;
        if (++v21 >= v19)
          return v20;
      }
      if (v22 < v18)
      {
        while (1)
        {
          v24 = begin[v22];
          if (v24 >= v23)
            break;
          if (v18 == ++v22)
            return v20;
        }
        if (v24 == v23)
        {
          edge = geom::triangle_mesh_half_edge_connectivity::find_edge(a1, v41, v16[v21]);
          v38 = geom::triangle_mesh_half_edge_connectivity::find_edge(a1, v12, v23);
          v25 = edge;
          if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(a1, edge))
          {
            if (edge >> 30 == 3)
              v25 = *(_DWORD *)(*((_QWORD *)a1 + 11) + 4 * (edge & 0x3FFFFFFF));
            v40 = v25 & 0x3FFFFFFF;
            v26 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * (3 * (v25 & 0x3FFFFFFF) + (v25 >> 30)));
            v27 = v26 & 0x3FFFFFFF;
            v28 = v26 >> 30;
            if (v28 > 2)
              v29 = -1;
            else
              v29 = v27;
            if (v28 > 2)
              v30 = 1;
            else
              v30 = 2;
            v36 = v29;
            v37 = v30;
          }
          else
          {
            v36 = -1;
            v37 = 0;
            v40 = -1;
          }
          v31 = v38;
          if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(a1, v38))
          {
            if (v38 >> 30 == 3)
              v31 = *(_DWORD *)(*((_QWORD *)a1 + 11) + 4 * (v38 & 0x3FFFFFFF));
            v32 = v31 & 0x3FFFFFFF;
            v33 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * (3 * (v31 & 0x3FFFFFFF) + (v31 >> 30)));
            if (v33 >> 30 == 3)
              v34 = -1;
            else
              v34 = v33 & 0x3FFFFFFF;
          }
          else
          {
            v34 = -1;
            v32 = -1;
          }
          if (v40 == v34 || v40 == v32)
          {
            ++v22;
            ++v21;
            v20 = (v20 - 1);
          }
          else
          {
            if (v37 != 2)
              return 0;
            ++v22;
            ++v21;
            v20 = (v20 - 1);
            if (v36 != v34 && v36 != v32)
              return 0;
          }
        }
      }
    }
    while (v22 < v18 && v21 < v19);
  }
  return v20;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_safe_and_genus_preserving(geom::triangle_mesh_half_edge_connectivity *a1, unsigned int a2, std::vector<unsigned int> *a3, std::vector<unsigned int> *a4)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  int v12;
  int v13;
  unsigned int v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  result = geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_manifold(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    v7 = result;
    v15[0] = -1;
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(a1, a2, (unsigned int *)v15);
    v8 = *((_QWORD *)a1 + 5);
    v9 = (*((_QWORD *)a1 + 6) - v8) >> 2;
    v10 = v9 > LODWORD(v15[0]) && (*(_DWORD *)(v8 + 4 * LODWORD(v15[0])) + 0x40000000) < 0x3FFFFFFF;
    v11 = v9 > HIDWORD(v15[0]) && (*(_DWORD *)(v8 + 4 * HIDWORD(v15[0])) + 0x40000000) < 0x3FFFFFFF;
    v12 = v7 < 5 || v11;
    v13 = v10 | v12;
    v14 = v10 || v11;
    if (v7 <= 3)
      v14 = 0;
    if (v13 == 1)
      return v14;
    else
      return 1;
  }
  return result;
}

BOOL geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_safe(geom::triangle_mesh_half_edge_connectivity *a1, unsigned int a2, std::vector<unsigned int> *a3, std::vector<unsigned int> *a4)
{
  return geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_manifold(a1, a2, a3, a4) != 0;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::collapse_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  unsigned int v2;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  int v36;
  int v37;
  unsigned int v38;
  char *v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int *v60;
  int *v61;
  int32x2_t v62;
  int8x8_t v63;
  int v64;
  int32x2_t *v65;
  __int32 v66;
  _QWORD *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  _BOOL4 v73;
  unsigned __int8 v74;
  _BOOL4 v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;

  v2 = a2;
  v4 = (char *)this + 112;
  if (!geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_manifold(this, a2, (std::vector<unsigned int> *)((char *)this + 112), (std::vector<unsigned int> *)((char *)this + 136)))return 0xFFFFFFFFLL;
  if (v2 >> 30 == 3)
    v2 = *(_DWORD *)(*((_QWORD *)this + 11) + 4 * (v2 & 0x3FFFFFFF));
  v5 = 3 * (v2 & 0x3FFFFFFF);
  v6 = v2 >> 30;
  if (v2 >> 30 == 2)
    v7 = 0;
  else
    v7 = v6 + 1;
  if (v6)
    v8 = v6 - 1;
  else
    v8 = 2;
  v9 = v5 + (v2 >> 30);
  v11 = (char *)this + 64;
  v10 = *((_QWORD *)this + 8);
  v12 = *((_QWORD *)this + 2);
  v13 = *(unsigned int *)(v12 + 4 * v9);
  v14 = v7 + v5;
  v15 = *(unsigned int *)(v12 + 4 * v14);
  v16 = v8 + v5;
  v17 = *(unsigned int *)(v12 + 4 * v16);
  v18 = *(_DWORD *)(v10 + 4 * v16);
  v19 = *(_DWORD *)(v10 + 4 * v14);
  v20 = *(_DWORD *)(v10 + 4 * v9);
  v21 = v20 >> 30;
  if (v20 >> 30 == 3)
  {
    v22 = 0;
    v23 = -1;
    LODWORD(v24) = -3;
    if (v18 >> 30 == 3)
    {
      v25 = -1;
      v74 = -1;
      v78 = -1;
      v76 = -1;
      v26 = 0;
      if (v19 >> 30 == 3)
      {
        v27 = *(_DWORD *)(v10 + 4 * v5) & 0x3FFFFFFF;
        v28 = *((_QWORD *)this + 11);
        if (*(_DWORD *)(v28 + 4 * v27) != -1)
          ++*((_DWORD *)this + 2);
        *(_DWORD *)(v28 + 4 * v27) = -1;
        v29 = *(_DWORD *)(v10 + 4 * (v5 + 1)) & 0x3FFFFFFF;
        if (*(_DWORD *)(v28 + 4 * v29) != -1)
          ++*((_DWORD *)this + 2);
        *(_DWORD *)(v28 + 4 * v29) = -1;
        v30 = (_DWORD *)(v28 + 4 * (*(_DWORD *)(v10 + 4 * (v5 + 2)) & 0x3FFFFFFF));
        if (*v30 != -1)
          ++*((_DWORD *)this + 2);
        goto LABEL_25;
      }
    }
    else
    {
      v25 = -1;
      v74 = -1;
      v78 = -1;
      v76 = -1;
      v26 = 0;
    }
  }
  else
  {
    v23 = v20 & 0x3FFFFFFF;
    v24 = 3 * (v20 & 0x3FFFFFFF);
    if (v18 >> 30 != 3 && v19 >> 30 != 3 && (v18 & 0x3FFFFFFF) == v23 && (v19 & 0x3FFFFFFF) == v23)
    {
      v31 = (_DWORD *)(v12 + 4 * v24);
      if (*v31 == -1)
      {
LABEL_26:
        v32 = (_QWORD *)(v12 + 4 * v5);
        if (*(_DWORD *)v32 != -1)
        {
          --*((_DWORD *)this + 1);
          v33 = v5 + 2;
          *(_DWORD *)(v12 + 4 * v33) = -1;
          *v32 = -1;
          *(_QWORD *)(v10 + 4 * v5) = -1;
          *(_DWORD *)(v10 + 4 * v33) = -1;
        }
        v34 = *((_QWORD *)this + 5);
        *(_DWORD *)(v34 + 4 * v13) = -1;
        *(_DWORD *)(v34 + 4 * v15) = -1;
        *(_DWORD *)(v34 + 4 * v17) = -1;
        *(_DWORD *)this -= 3;
        return 0xFFFFFFFFLL;
      }
      --*((_DWORD *)this + 1);
      *(_DWORD *)(v12 + 4 * (v24 + 2)) = -1;
      *(_QWORD *)v31 = -1;
      *(_QWORD *)(v10 + 4 * v24) = -1;
      v30 = (_DWORD *)(v10 + 4 * (v24 + 2));
LABEL_25:
      *v30 = -1;
      goto LABEL_26;
    }
    if (v21 == 1)
      v36 = 0;
    else
      v36 = v21 + 2;
    if (v21 == 2)
      v37 = 1;
    else
      v37 = v36;
    if (v21 == 2)
      v38 = 0;
    else
      v38 = v21 + 1;
    v74 = v38;
    v25 = *(_DWORD *)(v10 + 4 * (v24 + v38));
    v78 = v37;
    v22 = v25 >> 30 != 3;
    v76 = *(_DWORD *)(v10 + 4 * (v24 + v37));
    v26 = v76 >> 30 != 3;
  }
  v73 = v26;
  v75 = v22;
  v79 = v25;
  v80 = v23;
  v81 = 3 * (v2 & 0x3FFFFFFF);
  v82 = v24;
  v77 = v2 & 0x3FFFFFFF;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(this, v15, (uint64_t)v4);
  if (v18 >> 30 == 3)
  {
    v39 = (char *)this + 88;
    v40 = v18 & 0x3FFFFFFF;
  }
  else
  {
    v40 = 3 * (v18 & 0x3FFFFFFF) + (v18 >> 30);
    v39 = (char *)this + 64;
  }
  *(_DWORD *)(*(_QWORD *)v39 + 4 * v40) = v19;
  if (v19 >> 30 == 3)
  {
    v41 = (char *)this + 88;
    v42 = v19 & 0x3FFFFFFF;
  }
  else
  {
    v42 = 3 * (v19 & 0x3FFFFFFF) + (v19 >> 30);
    v41 = (char *)this + 64;
  }
  *(_DWORD *)(*(_QWORD *)v41 + 4 * v42) = v18;
  if (v21 <= 2)
  {
    if (v75)
    {
      v46 = 3 * (v79 & 0x3FFFFFFF) + (v79 >> 30);
      v47 = (char *)this + 64;
    }
    else
    {
      v47 = (char *)this + 88;
      v46 = v79 & 0x3FFFFFFF;
    }
    *(_DWORD *)(*(_QWORD *)v47 + 4 * v46) = v76;
    if (v73)
    {
      v48 = 3 * (v76 & 0x3FFFFFFF) + (v76 >> 30);
    }
    else
    {
      v11 = (char *)this + 88;
      v48 = v76 & 0x3FFFFFFF;
    }
    *(_DWORD *)(*(_QWORD *)v11 + 4 * v48) = v79;
    v43 = *((_QWORD *)this + 5);
    v44 = (unsigned int *)(v43 + 4 * v13);
    v45 = *v44;
    if (*v44 == v2)
      goto LABEL_60;
    v2 = *v44;
    if (v45 == (v80 & 0x3FFFFFFF | (v74 << 30)))
      goto LABEL_60;
  }
  else
  {
    v43 = *((_QWORD *)this + 5);
    v44 = (unsigned int *)(v43 + 4 * v13);
    v45 = *v44;
    if (*v44 == v2)
      goto LABEL_60;
  }
  v2 = v45;
  if (*(_DWORD *)(v43 + 4 * v15) >> 30 == 3)
  {
LABEL_60:
    if (v2 >> 30 == 3)
    {
      v49 = v2 & 0x3FFFFFFF;
      v50 = *((_QWORD *)this + 11);
      if (*(_DWORD *)(v50 + 4 * v49) != -1)
        ++*((_DWORD *)this + 2);
      *(_DWORD *)(v50 + 4 * v49) = -1;
    }
    v51 = *(_DWORD *)(v43 + 4 * v15);
    if (v51 >> 30 == 3)
    {
      *v44 = v51;
      *(_DWORD *)(v43 + 4 * v15) = -1;
    }
    else if (v18 >> 30 == 3)
    {
      if ((v19 & 0xC0000000) == 0x80000000)
        v52 = 0;
      else
        v52 = (v19 & 0xC0000000) + 0x40000000;
      *v44 = v52 & 0xC0000000 | v19 & 0x3FFFFFFF;
    }
    else
    {
      *v44 = v18;
    }
  }
  v53 = *(_DWORD *)(v43 + 4 * v15);
  if ((v53 + 0x40000000) <= 0x3FFFFFFE)
  {
    v54 = v53 & 0x3FFFFFFF;
    v55 = *((_QWORD *)this + 11);
    if (*(_DWORD *)(v55 + 4 * v54) != -1)
      ++*((_DWORD *)this + 2);
    *(_DWORD *)(v55 + 4 * v54) = -1;
  }
  *(_DWORD *)(v43 + 4 * v15) = -1;
  --*(_DWORD *)this;
  v56 = *(_DWORD *)(v43 + 4 * v17);
  if (v56 >> 30 != 3 && (v56 & 0x3FFFFFFF) == v77)
    *(_DWORD *)(v43 + 4 * v17) = v19;
  v57 = *((_QWORD *)this + 2);
  if (v21 <= 2)
  {
    v58 = *(unsigned int *)(v57 + 4 * (v78 + v82));
    v59 = *(_DWORD *)(v43 + 4 * v58);
    if (v59 >> 30 != 3 && (v59 & 0x3FFFFFFF) == v80)
      *(_DWORD *)(v43 + 4 * v58) = v79;
  }
  v60 = (int *)*((_QWORD *)this + 14);
  v61 = (int *)*((_QWORD *)this + 15);
  if (v60 != v61)
  {
    v62 = vdup_n_s32(v15);
    v63 = (int8x8_t)vdup_n_s32(v13);
    do
    {
      v64 = *v60++;
      v65 = (int32x2_t *)(v57 + 4 * (3 * v64));
      *v65 = (int32x2_t)vbsl_s8((int8x8_t)vceq_s32(*v65, v62), v63, (int8x8_t)*v65);
      v66 = v65[1].i32[0];
      if (v66 == (_DWORD)v15)
        v66 = v13;
      v65[1].i32[0] = v66;
    }
    while (v60 != v61);
  }
  v67 = (_QWORD *)(v57 + 4 * v81);
  if (*(_DWORD *)v67 != -1)
  {
    --*((_DWORD *)this + 1);
    *v67 = -1;
    v68 = v81 + 2;
    *(_DWORD *)(v57 + 4 * v68) = -1;
    v69 = *((_QWORD *)this + 8);
    *(_QWORD *)(v69 + 4 * v81) = -1;
    *(_DWORD *)(v69 + 4 * v68) = -1;
  }
  if (v21 <= 2 && *(_DWORD *)(v57 + 4 * v82) != -1)
  {
    --*((_DWORD *)this + 1);
    *(_DWORD *)(v57 + 4 * v82) = -1;
    v70 = v82 + 1;
    *(_DWORD *)(v57 + 4 * v70) = -1;
    v71 = v82 + 2;
    *(_DWORD *)(v57 + 4 * v71) = -1;
    v72 = *((_QWORD *)this + 8);
    *(_DWORD *)(v72 + 4 * v82) = -1;
    *(_DWORD *)(v72 + 4 * v70) = -1;
    *(_DWORD *)(v72 + 4 * v71) = -1;
  }
  return v13;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::debug_print(geom::triangle_mesh_half_edge_connectivity *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t i;
  unsigned int v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  puts("triangle_mesh_half_edge_connectivity_state ");
  puts("  face_vertices: ");
  v2 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = v2 >> 2;
    do
    {
      printf("%zu : %d %d %d \n", v4, *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v3), *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v3 + 4), *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v3 + 8));
      v3 += 3;
      ++v4;
    }
    while (v3 < v5);
  }
  printf(" === v2e (%d %d) === \n", *(_DWORD *)this, (*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2);
  v6 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    v7 = 0;
    v8 = (v6 >> 2);
    do
    {
      printf("    %d ", v7);
      v9 = *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v7);
      if (v9 == -1)
      {
        printf("invalid ");
      }
      else if (v9 >> 30 == 3)
      {
        printf("border %d -> face-vertex (%d, %d) or edge (%d %d)");
      }
      else
      {
        printf("interior -> face-vertex (%d, %d) or edge (%d, %d)");
      }
      putchar(10);
      ++v7;
    }
    while (v8 != v7);
  }
  printf(" === e2e (%d, %d) === \n", (3 * *((_DWORD *)this + 1)- *((_DWORD *)this + 2)+ ((*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 2)) >> 1, (*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2);
  v10 = ((uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 2) / 3uLL;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      printf("    %d ", v12);
      if (*(_DWORD *)(*((_QWORD *)this + 8) + 4 * v11) == -1)
      {
        puts(" invalid");
      }
      else
      {
        printf("      (%d %d %d)\n", *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v11), *(_DWORD *)(*((_QWORD *)this + 2) + 4 * (v11 + 1)), *(_DWORD *)(*((_QWORD *)this + 2) + 4 * (v11 + 2)));
        for (i = 0; i != 3; ++i)
        {
          v14 = *(_DWORD *)(*((_QWORD *)this + 8) + 4 * (v11 + i));
          if (v14 >> 30 == 3)
          {
            if (*(_DWORD *)(*((_QWORD *)this + 11) + 4 * (v14 & 0x3FFFFFFF)) >> 30 == 3)
              printf("      ERROR:  border %d -> border %d \n");
            else
              printf("      border %d -> face-vertex (%d, %d) or edge (%d, %d) \n");
          }
          else
          {
            printf("      twin face - vertex (%d, %d) with verts (%d, %d)\n");
          }
        }
      }
      ++v12;
      v11 += 3;
    }
    while (v12 != (_DWORD)v10);
  }
  result = puts(" === b2e === ");
  v16 = *((_QWORD *)this + 12) - *((_QWORD *)this + 11);
  if ((v16 & 0x3FFFFFFFCLL) != 0)
  {
    v17 = 0;
    v18 = (v16 >> 2);
    do
    {
      printf("    %d ", v17);
      if (*(_DWORD *)(*((_QWORD *)this + 11) + 4 * v17) == -1)
        printf("invalid");
      else
        printf(" -> face-vertex (%d, %d) or edge (%d %d)");
      result = putchar(10);
      ++v17;
    }
    while (v18 != v17);
  }
  return result;
}

BOOL geom::triangle_mesh_half_edge_connectivity::is_internally_consistent(geom::triangle_mesh_half_edge_connectivity *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v47;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  v3 = (v2 - v1) >> 2;
  v4 = v3 / 3;
  if (v3 != 3 * (v3 / 3))
    return 0;
  v5 = *((_QWORD *)this + 2);
  if (v3 != (*((_QWORD *)this + 3) - v5) >> 2)
    return 0;
  v7 = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  v8 = *((_QWORD *)this + 11);
  v9 = *((_QWORD *)this + 12);
  if (v2 != v1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (*(_DWORD *)(v5 + 4 * v10) != -1)
        ++v11;
      v10 += 3;
    }
    while (v10 < v3);
    if (v11 == *((_DWORD *)this + 1))
    {
      if (v2 == v1)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        if (v3 <= 1)
          v13 = 1;
        else
          v13 = (v2 - v1) >> 2;
        v14 = (unsigned int *)*((_QWORD *)this + 8);
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (v16 >> 30 == 3)
            v17 = v15 != -1;
          else
            v17 = v15 > *(_DWORD *)(v1 + 4 * (3 * (v15 & 0x3FFFFFFF) + (v15 >> 30)));
          v12 += v17;
          --v13;
        }
        while (v13);
      }
      goto LABEL_22;
    }
    return 0;
  }
  v18 = 0;
  v12 = *((_DWORD *)this + 1);
  if (v12)
    return v18;
  v11 = 0;
LABEL_22:
  v19 = 3 * v11;
  v20 = *((_DWORD *)this + 2);
  if (v12 != (v19 - v20 + ((unint64_t)(v9 - v8) >> 2)) >> 1)
    return 0;
  v21 = (v9 - v8) >> 2;
  if (v6 != v7)
  {
    v22 = 0;
    v23 = 0;
    v24 = (v6 - v7) >> 2;
    if (v24 <= 1)
      v24 = 1;
    while (1)
    {
      v25 = *(_DWORD *)(v7 + 4 * v22);
      if (v25 != -1)
      {
        ++v23;
        v26 = v25 & 0x3FFFFFFF;
        if (v25 >> 30 == 3)
        {
          if (v21 <= v26)
            return 0;
          v25 = *(_DWORD *)(v8 + 4 * v26);
          if (v25 >> 30 == 3)
            return 0;
          v26 = v25 & 0x3FFFFFFF;
        }
        if (v4 <= v26 || v22 != *(_DWORD *)(v5 + 4 * (3 * (_DWORD)v26 + (v25 >> 30))))
          return 0;
      }
      if (v24 == ++v22)
        goto LABEL_36;
    }
  }
  v23 = 0;
LABEL_36:
  if (v23 != *(_DWORD *)this)
    return 0;
  if (v2 != v1)
  {
    v27 = 0;
    if (v3 <= 1)
      v3 = 1;
    do
    {
      v28 = *(_DWORD *)(v1 + 4 * v27);
      v29 = *(_DWORD *)(v5 + 4 * v27);
      if (v28 == -1 || v29 == -1)
      {
        if ((v28 == -1) != (v29 == -1))
          return 0;
      }
      else
      {
        v31 = v28 & 0x3FFFFFFF;
        if (v28 >> 30 == 3)
        {
          if (v21 <= v31)
            return 0;
          v32 = *(_DWORD *)(v8 + 4 * v31);
          if (v32 >> 30 == 3 || v4 <= (v32 & 0x3FFFFFFF))
            return 0;
          v33 = 3 * (v32 & 0x3FFFFFFF) + (v32 >> 30);
        }
        else
        {
          if (v4 <= v31)
            return 0;
          v34 = *(_DWORD *)(v1 + 4 * (3 * (_DWORD)v31 + (v28 >> 30)));
          if (v34 == -1)
            return 0;
          v35 = v34 & 0x3FFFFFFF;
          v36 = v34 >> 30;
          v37 = v36 != 3 && v4 > v35;
          if (!v37)
            return 0;
          v33 = 3 * (_DWORD)v35 + v36;
        }
        if (v27 != v33)
          return 0;
      }
      ++v27;
    }
    while (v3 != v27);
  }
  if (v9 != v8)
  {
    v38 = 0;
    v39 = 0;
    v40 = 1;
    while (1)
    {
      v41 = *(_DWORD *)(v8 + 4 * v38);
      if (v41 == -1)
      {
        ++v39;
      }
      else
      {
        if (v41 >> 30 == 3)
          return 0;
        if (v4 <= (v41 & 0x3FFFFFFF))
          return 0;
        v42 = 3 * (v41 & 0x3FFFFFFF) + (v41 >> 30);
        v43 = *(unsigned int *)(v5 + 4 * v42);
        if ((_DWORD)v43 == -1)
          return 0;
        v44 = v40 - 1;
        v45 = *(_DWORD *)(v7 + 4 * v43);
        if (v45 >> 30 != 3 || v44 != (v45 & 0x3FFFFFFF))
          return 0;
        v47 = *(_DWORD *)(v1 + 4 * v42);
        if (v47 >> 30 != 3 || v44 != (v47 & 0x3FFFFFFF))
          return 0;
      }
      v38 = v40;
      v37 = v21 > v40++;
      if (!v37)
        return v20 == v39;
    }
  }
  v39 = 0;
  return v20 == v39;
}

_QWORD *geom::triangle_mesh_half_edge_connectivity::get_incident_boundary_half_edges_to_boundary_vertex(_QWORD *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;

  *(_QWORD *)a3 = -1;
  v3 = this[5];
  if (a2 < (unint64_t)((this[6] - v3) >> 2))
  {
    v4 = *(_DWORD *)(v3 + 4 * a2);
    if ((v4 + 0x40000000) <= 0x3FFFFFFE)
    {
      v5 = *(_DWORD *)(this[11] + 4 * (v4 & 0x3FFFFFFF));
      *a3 = v5;
      a3[1] = v5;
      v6 = this[8];
      do
      {
        v7 = v5 & 0x3FFFFFFF;
        v8 = v5 >> 30;
        if (v8)
          v9 = v8 - 1;
        else
          v9 = 2;
        v5 = *(_DWORD *)(v6 + 4 * (v9 + 3 * v7));
        *a3 = v5;
      }
      while (v5 >> 30 != 3);
      *a3 = *(_DWORD *)(this[11] + 4 * (v5 & 0x3FFFFFFF));
    }
  }
  return this;
}

unint64_t geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  if (((a2 >> 30 != 3) & geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2)) != 0)
    return a2 & 0x3FFFFFFF | ((unint64_t)(a2 >> 30) << 32);
  else
    return 0xFFFFFFFFFFLL;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::get_boundary_loop_for_boundary_vertex(uint64_t this, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  geom::triangle_mesh_half_edge_connectivity *v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  unsigned int v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = *(_DWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v5 = *(_QWORD *)(this + 40);
  if (a2 < (unint64_t)((*(_QWORD *)(this + 48) - v5) >> 2)
    && (*(_DWORD *)(v5 + 4 * a2) + 0x40000000) <= 0x3FFFFFFE)
  {
    v7 = (geom::triangle_mesh_half_edge_connectivity *)this;
    v8 = (_QWORD *)(a3 + 16);
    v9 = a2;
    do
    {
      if ((unint64_t)v4 >= *v8)
      {
        v11 = *(_DWORD **)a3;
        v12 = ((uint64_t)v4 - *(_QWORD *)a3) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          abort();
        v14 = *v8 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v8, v15);
          v11 = *(_DWORD **)a3;
          v4 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        *(_DWORD *)v17 = v9;
        v10 = v17 + 4;
        while (v4 != v11)
        {
          v18 = *--v4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v4 = v9;
        v10 = v4 + 1;
      }
      *(_QWORD *)(a3 + 8) = v10;
      this = geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v7, *(_DWORD *)(*((_QWORD *)v7 + 5) + 4 * v9), v19);
      v9 = v19[v9 == v19[0]];
      v4 = v10;
    }
    while (v9 != v3);
  }
  return this;
}

void geom::triangle_mesh_half_edge_connectivity::get_boundary_loops(uint64_t a1, char **a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  void *__p;
  char *v30;
  uint64_t v31;
  void *v32;

  a2[1] = *a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v6 = ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v32, v6, (unsigned __int8 *)&__p);
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v9 = v7 - v8;
  if (((v7 - v8) & 0x3FFFFFFFCLL) != 0)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (v10 < v9 >> 2)
      {
        v12 = *(_DWORD *)(v8 + 4 * v10);
        if (v12 != -1
          && ((*(_QWORD *)((char *)v32 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0
          && (v12 + 0x40000000) <= 0x3FFFFFFE)
        {
          __p = 0;
          v30 = 0;
          v31 = 0;
          geom::triangle_mesh_half_edge_connectivity::get_boundary_loop_for_boundary_vertex(a1, v10, (uint64_t)&__p);
          v13 = __p;
          v14 = v30;
          if (__p != v30)
          {
            v15 = (char *)v32;
            v16 = (char *)__p;
            do
            {
              v17 = *(_DWORD *)v16;
              v16 += 4;
              *(_QWORD *)&v15[((unint64_t)v17 >> 3) & 0x1FFFFFF8] |= 1 << v17;
            }
            while (v16 != v14);
          }
          v11 += (unint64_t)(v14 - v13) >> 2;
          v19 = a2[1];
          v18 = (unint64_t)a2[2];
          if ((unint64_t)v19 >= v18)
          {
            v21 = *a2;
            v22 = (v19 - *a2) >> 2;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62)
              abort();
            v24 = v18 - (_QWORD)v21;
            if (v24 >> 1 > v23)
              v23 = v24 >> 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
              v25 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v25);
              v21 = *a2;
              v19 = a2[1];
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[4 * v22];
            *(_DWORD *)v27 = v11;
            v20 = v27 + 4;
            while (v19 != v21)
            {
              v28 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            *a2 = v27;
            a2[1] = v20;
            a2[2] = &v26[4 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_DWORD *)v19 = v11;
            v20 = v19 + 4;
          }
          a2[1] = v20;
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a3, *(_QWORD *)(a3 + 8), (char *)__p, v30, (v30 - (_BYTE *)__p) >> 2);
          if (__p)
          {
            v30 = (char *)__p;
            operator delete(__p);
          }
          v8 = *(_QWORD *)(a1 + 40);
          v7 = *(_QWORD *)(a1 + 48);
        }
      }
      ++v10;
      v9 = v7 - v8;
    }
    while (v10 < ((unint64_t)(v7 - v8) >> 2));
  }
  if (v32)
    operator delete(v32);
}

unint64_t geom::triangle_mesh_half_edge_connectivity::count_boundary_loops(geom::triangle_mesh_half_edge_connectivity *this)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v3;
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  v6 = 0;
  v7 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_boundary_loops((uint64_t)this, (char **)&v8, (uint64_t)&__p);
  v2 = v8;
  v1 = v9;
  if (!__p)
  {
    v3 = v8;
    if (!v8)
      return (unint64_t)(v1 - v2) >> 2;
    goto LABEL_3;
  }
  v6 = __p;
  operator delete(__p);
  v3 = v8;
  if (v8)
  {
LABEL_3:
    v9 = v3;
    operator delete(v3);
  }
  return (unint64_t)(v1 - v2) >> 2;
}

void geom::triangle_mesh_half_edge_connectivity::get_connected_component_for_face_helper(geom::triangle_mesh_half_edge_connectivity *a1, unsigned int a2, _QWORD *a3, int **a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  int v22;
  uint64_t i;
  unsigned int v24;
  unsigned int half_edge_twin;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  char *__p;
  char *v38;
  char *v39;
  unsigned int v40[3];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  a4[1] = *a4;
  v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v39, 1uLL);
  *(_DWORD *)v8 = a2;
  v10 = v8 + 4;
  __p = v8;
  v39 = &v8[4 * v9];
  *(_QWORD *)(*a3 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
  if (v8 != v8 + 4)
  {
    do
    {
      v11 = *((_DWORD *)v10 - 1);
      v38 = v10 - 4;
      v13 = a4[1];
      v12 = (unint64_t)a4[2];
      if ((unint64_t)v13 >= v12)
      {
        v15 = *a4;
        v16 = v13 - *a4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
LABEL_46:
          abort();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v19);
          v15 = *a4;
          v13 = a4[1];
        }
        else
        {
          v20 = 0;
        }
        v21 = (int *)&v20[4 * v16];
        *v21 = v11;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *--v13;
          *--v21 = v22;
        }
        *a4 = v21;
        a4[1] = v14;
        a4[2] = (int *)&v20[4 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v11;
        v14 = v13 + 1;
      }
      a4[1] = v14;
      geom::triangle_mesh_half_edge_connectivity::get_face_half_edges(a1, v11, v40);
      for (i = 0; i != 3; ++i)
      {
        v24 = v40[i];
        if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(a1, v24))
        {
          half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(a1, v24);
          v26 = ((half_edge_twin >> 30 != 3) & geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(a1, half_edge_twin)) != 0? half_edge_twin & 0x3FFFFFFF: 0xFFFFFFFFLL;
          if (((1 << v26) & *(_QWORD *)(*a3 + 8 * (v26 >> 6))) == 0)
          {
            v27 = v38;
            if (v38 >= v39)
            {
              v29 = __p;
              v30 = (v38 - __p) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_46;
              v32 = v39 - __p;
              if ((v39 - __p) >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v39, v33);
                v29 = __p;
                v27 = v38;
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = v26;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              __p = v35;
              v39 = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v38 = v26;
              v28 = v38 + 4;
            }
            v38 = v28;
            *(_QWORD *)(*a3 + 8 * (v26 >> 6)) |= 1 << v26;
          }
        }
      }
      v8 = __p;
      v10 = v38;
    }
    while (__p != v38);
  }
  if (v8)
    operator delete(v8);
}

void geom::triangle_mesh_half_edge_connectivity::get_connected_component_for_face(geom::triangle_mesh_half_edge_connectivity *a1, unsigned int a2, int **a3)
{
  unint64_t v6;
  unsigned __int8 v7;
  void *__p[3];

  v6 = (((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 2) / 3uLL);
  v7 = 0;
  std::vector<BOOL>::vector(__p, v6, &v7);
  geom::triangle_mesh_half_edge_connectivity::get_connected_component_for_face_helper(a1, a2, __p, a3);
  if (__p[0])
    operator delete(__p[0]);
}

void geom::triangle_mesh_half_edge_connectivity::get_connected_components(geom::triangle_mesh_half_edge_connectivity *a1, char **a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  void *__p;
  char *v26;
  uint64_t v27;
  void *v28[3];

  a2[1] = *a2;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v6 = (((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 2) / 3uLL);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(v28, v6, (unsigned __int8 *)&__p);
  __p = 0;
  v26 = 0;
  v27 = 0;
  v8 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v9 = (v7 - v8) >> 2;
  if ((v9 / 3))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (3 * v10);
      if (v9 > v12
        && *(_DWORD *)(v8 + 4 * v12) != -1
        && ((*(_QWORD *)((char *)v28[0] + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        geom::triangle_mesh_half_edge_connectivity::get_connected_component_for_face_helper(a1, v10, v28, (int **)&__p);
        v13 = (v26 - (_BYTE *)__p) >> 2;
        v11 += v13;
        std::vector<unsigned int>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a3, *(_QWORD *)(a3 + 8), (char *)__p, v26, v13);
        v15 = a2[1];
        v14 = (unint64_t)a2[2];
        if ((unint64_t)v15 >= v14)
        {
          v17 = *a2;
          v18 = (v15 - *a2) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            abort();
          v20 = v14 - (_QWORD)v17;
          if (v20 >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v21);
            v17 = *a2;
            v15 = a2[1];
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = v11;
          v16 = v23 + 4;
          while (v15 != v17)
          {
            v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *a2 = v23;
          a2[1] = v16;
          a2[2] = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v15 = v11;
          v16 = v15 + 4;
        }
        a2[1] = v16;
        v8 = *((_QWORD *)a1 + 2);
        v7 = *((_QWORD *)a1 + 3);
      }
      ++v10;
      v9 = (v7 - v8) >> 2;
    }
    while (v10 < (v9 / 3));
    if (__p)
    {
      v26 = (char *)__p;
      operator delete(__p);
    }
  }
  if (v28[0])
    operator delete(v28[0]);
}

unint64_t geom::triangle_mesh_half_edge_connectivity::count_connected_components(geom::triangle_mesh_half_edge_connectivity *this)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v3;
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  v6 = 0;
  v7 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_connected_components(this, (char **)&v8, (uint64_t)&__p);
  v2 = v8;
  v1 = v9;
  if (!__p)
  {
    v3 = v8;
    if (!v8)
      return (unint64_t)(v1 - v2) >> 2;
    goto LABEL_3;
  }
  v6 = __p;
  operator delete(__p);
  v3 = v8;
  if (v8)
  {
LABEL_3:
    v9 = v3;
    operator delete(v3);
  }
  return (unint64_t)(v1 - v2) >> 2;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::swap_edge(geom::triangle_mesh_half_edge_connectivity *this, unsigned int a2)
{
  unsigned int half_edge_twin;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;

  if (!geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(this, a2))
    return 0;
  half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, a2);
  if (half_edge_twin == -1)
    return 0;
  v5 = 0;
  v6 = a2 >> 30;
  if (half_edge_twin >> 30 == 2)
    v7 = 0;
  else
    v7 = (half_edge_twin & 0xC0000000) + 0x40000000;
  v8 = (a2 & 0xC0000000) + 0x40000000;
  if (v6 == 2)
    v8 = 0;
  v9 = 3 * (half_edge_twin & 0x3FFFFFFF);
  v10 = 3 * (a2 & 0x3FFFFFFF);
  if (half_edge_twin >> 30)
    v11 = (half_edge_twin - 0x40000000) >> 30;
  else
    v11 = 2;
  v12 = v11 + v9;
  if (v6)
    v13 = (a2 - 0x40000000) >> 30;
  else
    v13 = 2;
  v14 = v13 + v10;
  v15 = *((_QWORD *)this + 2);
  v16 = *(_DWORD *)(v15 + 4 * v12);
  v17 = *(_DWORD *)(v15 + 4 * v14);
  if (v16 != v17)
  {
    v18 = v9 + (half_edge_twin >> 30);
    v19 = v10 + (a2 >> 30);
    v20 = v10 + (v8 >> 30);
    v21 = v8 & 0xC0000000 | a2 & 0x3FFFFFFF;
    v22 = *(unsigned int *)(v15 + 4 * v19);
    v23 = v9 + (v7 >> 30);
    v24 = v7 & 0xC0000000 | half_edge_twin & 0x3FFFFFFF;
    v25 = *((_QWORD *)this + 8);
    v26 = *(_DWORD *)(v25 + 4 * v23);
    v27 = v26 & 0x3FFFFFFF;
    if (v26 >> 30 == 3)
      v28 = (unsigned int *)(*((_QWORD *)this + 11) + 4 * v27);
    else
      v28 = (unsigned int *)(v25 + 4 * (3 * (_DWORD)v27 + (v26 >> 30)));
    v30 = *(unsigned int *)(v15 + 4 * v18);
    *v28 = a2;
    v31 = *(_DWORD *)(v25 + 4 * v20);
    v32 = v31 & 0x3FFFFFFF;
    if (v31 >> 30 == 3)
      v33 = (unsigned int *)(*((_QWORD *)this + 11) + 4 * v32);
    else
      v33 = (unsigned int *)(v25 + 4 * (3 * (_DWORD)v32 + (v31 >> 30)));
    *v33 = half_edge_twin;
    *(_DWORD *)(v25 + 4 * v18) = *(_DWORD *)(v25 + 4 * v20);
    *(_DWORD *)(v25 + 4 * v19) = *(_DWORD *)(v25 + 4 * v23);
    *(_DWORD *)(v25 + 4 * v23) = v21;
    *(_DWORD *)(v25 + 4 * v20) = v24;
    v34 = *((_QWORD *)this + 5);
    if (*(_DWORD *)(v34 + 4 * v22) == v24)
      *(_DWORD *)(v34 + 4 * v22) = a2;
    if (*(_DWORD *)(v34 + 4 * v30) == v21)
      *(_DWORD *)(v34 + 4 * v30) = half_edge_twin;
    *(_DWORD *)(v15 + 4 * v23) = v17;
    *(_DWORD *)(v15 + 4 * v20) = v16;
    return 1;
  }
  return v5;
}

uint64_t geom::triangle_mesh_half_edge_connectivity::split_face(int32x2_t *this, int a2)
{
  unint64_t v3;
  char *v4;
  char *v5;
  int32x2_t *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int32x2_t *v13;
  int32x2_t v14;
  int32x2_t v15;
  char *v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  int v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  char *v78;
  int32x2_t *v79;
  char *v80;
  unsigned int *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  int v89;
  unsigned int v90;
  int *v91;
  unsigned int *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unsigned int *v98;
  unsigned int v99;
  int v100;
  char *v101;
  int *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  int *v108;
  int v109;
  int32x2_t v110;
  unsigned int *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  int v119;
  unsigned int v120;
  char *v121;
  unsigned int *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned int *v128;
  unsigned int v129;
  int v130;
  _DWORD *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  int v141;
  int32x2_t v142;
  unsigned int *v143;
  unint64_t v144;
  unsigned int *v145;
  _DWORD *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unsigned int *v152;
  char *v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v3 = (3 * a2);
  v6 = this + 2;
  v4 = (char *)this[2];
  v5 = (char *)v6[1];
  v7 = (v5 - v4) >> 2;
  if (v7 <= v3)
    return 0;
  v8 = *(_DWORD *)&v4[4 * v3];
  if (v8 == -1)
    return 0;
  v10 = (v3 + 2);
  v156 = (v3 + 1);
  v11 = *(unsigned int *)&v4[4 * v10];
  v13 = this + 4;
  v12 = (char *)this[4];
  v14 = this[5];
  v15 = this[6];
  v155 = *(unsigned int *)&v4[4 * v156];
  if (v5 >= v12)
  {
    v18 = v7 + 1;
    if ((v7 + 1) >> 62)
      goto LABEL_225;
    v19 = v12 - v4;
    if (v19 >> 1 > v18)
      v18 = v19 >> 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[4], v20);
      v4 = (char *)this[2];
      v5 = (char *)this[3];
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[4 * v7];
    v12 = &v21[4 * v20];
    *(_DWORD *)v22 = v155;
    v16 = v22 + 4;
    while (v5 != v4)
    {
      v23 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v22 - 1) = v23;
      v22 -= 4;
    }
    this[2] = (int32x2_t)v22;
    this[3] = (int32x2_t)v16;
    this[4] = (int32x2_t)v12;
    if (v4)
    {
      operator delete(v4);
      v12 = (char *)*v13;
    }
  }
  else
  {
    *(_DWORD *)v5 = *(_DWORD *)&v4[4 * v156];
    v16 = v5 + 4;
  }
  this[3] = (int32x2_t)v16;
  v157 = v11;
  if (v16 >= v12)
  {
    v25 = (_BYTE *)this[2];
    v26 = (v16 - v25) >> 2;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62)
      goto LABEL_225;
    v28 = v12 - v25;
    if (v28 >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[4], v29);
      v25 = (_BYTE *)this[2];
      v16 = (char *)this[3];
    }
    else
    {
      v30 = 0;
    }
    v31 = &v30[4 * v26];
    v12 = &v30[4 * v29];
    *(_DWORD *)v31 = v157;
    v24 = v31 + 4;
    while (v16 != v25)
    {
      v32 = *((_DWORD *)v16 - 1);
      v16 -= 4;
      *((_DWORD *)v31 - 1) = v32;
      v31 -= 4;
    }
    this[2] = (int32x2_t)v31;
    this[3] = (int32x2_t)v24;
    this[4] = (int32x2_t)v12;
    if (v25)
    {
      operator delete(v25);
      v12 = (char *)*v13;
    }
  }
  else
  {
    *(_DWORD *)v16 = v11;
    v24 = v16 + 4;
  }
  v33 = (*(_QWORD *)&v15 - *(_QWORD *)&v14) >> 2;
  this[3] = (int32x2_t)v24;
  if (v24 >= v12)
  {
    v35 = (_BYTE *)this[2];
    v36 = (v24 - v35) >> 2;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62)
      goto LABEL_225;
    v38 = v12 - v35;
    if (v38 >> 1 > v37)
      v37 = v38 >> 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[4], v39);
      v35 = (_BYTE *)this[2];
      v24 = (char *)this[3];
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[4 * v36];
    v12 = &v40[4 * v39];
    *(_DWORD *)v41 = v33;
    v34 = v41 + 4;
    while (v24 != v35)
    {
      v42 = *((_DWORD *)v24 - 1);
      v24 -= 4;
      *((_DWORD *)v41 - 1) = v42;
      v41 -= 4;
    }
    this[2] = (int32x2_t)v41;
    this[3] = (int32x2_t)v34;
    this[4] = (int32x2_t)v12;
    if (v35)
    {
      operator delete(v35);
      v12 = (char *)*v13;
    }
  }
  else
  {
    *(_DWORD *)v24 = v33;
    v34 = v24 + 4;
  }
  this[3] = (int32x2_t)v34;
  if (v34 >= v12)
  {
    v44 = (_BYTE *)this[2];
    v45 = (v34 - v44) >> 2;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 62)
      goto LABEL_225;
    v47 = v12 - v44;
    if (v47 >> 1 > v46)
      v46 = v47 >> 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
      v48 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[4], v48);
      v44 = (_BYTE *)this[2];
      v34 = (char *)this[3];
    }
    else
    {
      v49 = 0;
    }
    v50 = &v49[4 * v45];
    v12 = &v49[4 * v48];
    *(_DWORD *)v50 = v157;
    v43 = v50 + 4;
    while (v34 != v44)
    {
      v51 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v50 - 1) = v51;
      v50 -= 4;
    }
    this[2] = (int32x2_t)v50;
    this[3] = (int32x2_t)v43;
    this[4] = (int32x2_t)v12;
    if (v44)
    {
      operator delete(v44);
      v12 = (char *)*v13;
    }
  }
  else
  {
    *(_DWORD *)v34 = v157;
    v43 = v34 + 4;
  }
  this[3] = (int32x2_t)v43;
  if (v43 >= v12)
  {
    v53 = (_BYTE *)this[2];
    v54 = (v43 - v53) >> 2;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 62)
      goto LABEL_225;
    v56 = v12 - v53;
    if (v56 >> 1 > v55)
      v55 = v56 >> 1;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
      v57 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[4], v57);
      v53 = (_BYTE *)this[2];
      v43 = (char *)this[3];
    }
    else
    {
      v58 = 0;
    }
    v59 = &v58[4 * v54];
    v12 = &v58[4 * v57];
    *(_DWORD *)v59 = v8;
    v52 = v59 + 4;
    while (v43 != v53)
    {
      v60 = *((_DWORD *)v43 - 1);
      v43 -= 4;
      *((_DWORD *)v59 - 1) = v60;
      v59 -= 4;
    }
    this[2] = (int32x2_t)v59;
    this[3] = (int32x2_t)v52;
    this[4] = (int32x2_t)v12;
    if (v53)
    {
      operator delete(v53);
      v12 = (char *)*v13;
    }
  }
  else
  {
    *(_DWORD *)v43 = v8;
    v52 = v43 + 4;
  }
  this[3] = (int32x2_t)v52;
  if (v52 >= v12)
  {
    v62 = (char *)this[2];
    v63 = (v52 - v62) >> 2;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62)
      goto LABEL_225;
    v65 = v12 - v62;
    if (v65 >> 1 > v64)
      v64 = v65 >> 1;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
      v66 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
    {
      v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[4], v66);
      v62 = (char *)this[2];
      v52 = (char *)this[3];
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[4 * v63];
    v69 = &v67[4 * v66];
    *(_DWORD *)v68 = v33;
    v61 = v68 + 4;
    while (v52 != v62)
    {
      v70 = *((_DWORD *)v52 - 1);
      v52 -= 4;
      *((_DWORD *)v68 - 1) = v70;
      v68 -= 4;
    }
    this[2] = (int32x2_t)v68;
    this[3] = (int32x2_t)v61;
    this[4] = (int32x2_t)v69;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(_DWORD *)v52 = v33;
    v61 = v52 + 4;
  }
  v71 = v7 / 3;
  this[3] = (int32x2_t)v61;
  *(_DWORD *)(*(_QWORD *)&this[2] + 4 * v10) = v33;
  v72 = (char *)this[8];
  v73 = *(_DWORD *)&v72[4 * v156];
  v74 = v73 & 0x3FFFFFFF;
  if (v73 >> 30 == 3)
    *(_DWORD *)(*(_QWORD *)&this[11] + 4 * v74) = v71 & 0x3FFFFFFF;
  else
    *(_DWORD *)&v72[12 * (_DWORD)v74 + 4 * (v73 >> 30)] = v71 & 0x3FFFFFFF;
  v75 = v71 + 1;
  v76 = *(_DWORD *)&v72[4 * v10];
  v77 = v76 & 0x3FFFFFFF;
  if (v76 >> 30 == 3)
    *(_DWORD *)(*(_QWORD *)&this[11] + 4 * v77) = v75 & 0x3FFFFFFF;
  else
    *(_DWORD *)&v72[12 * (_DWORD)v77 + 4 * (v76 >> 30)] = v75 & 0x3FFFFFFF;
  v79 = this + 10;
  v78 = (char *)this[10];
  v80 = (char *)this[9];
  if (v80 >= v78)
  {
    v82 = (v80 - v72) >> 2;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 62)
      goto LABEL_225;
    v84 = v78 - v72;
    if (v84 >> 1 > v83)
      v83 = v84 >> 1;
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
      v85 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v85 = v83;
    if (v85)
    {
      v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[10], v85);
      v87 = (char *)this[8];
      v80 = (char *)this[9];
    }
    else
    {
      v86 = 0;
      v87 = v72;
    }
    v88 = &v86[4 * v82];
    v78 = &v86[4 * v85];
    *(_DWORD *)v88 = *(_DWORD *)&v72[4 * v156];
    v81 = (unsigned int *)(v88 + 4);
    while (v80 != v87)
    {
      v89 = *((_DWORD *)v80 - 1);
      v80 -= 4;
      *((_DWORD *)v88 - 1) = v89;
      v88 -= 4;
    }
    this[8] = (int32x2_t)v88;
    this[9] = (int32x2_t)v81;
    this[10] = (int32x2_t)v78;
    if (v87)
    {
      operator delete(v87);
      v78 = (char *)*v79;
    }
  }
  else
  {
    *(_DWORD *)v80 = *(_DWORD *)&v72[4 * v156];
    v81 = (unsigned int *)(v80 + 4);
  }
  this[9] = (int32x2_t)v81;
  v90 = v75 & 0x3FFFFFFF | 0x80000000;
  if (v81 >= (unsigned int *)v78)
  {
    v92 = (unsigned int *)this[8];
    v93 = v81 - v92;
    v94 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 62)
      goto LABEL_225;
    v95 = v78 - (char *)v92;
    if (v95 >> 1 > v94)
      v94 = v95 >> 1;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
      v96 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v96 = v94;
    if (v96)
    {
      v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[10], v96);
      v92 = (unsigned int *)this[8];
      v81 = (unsigned int *)this[9];
    }
    else
    {
      v97 = 0;
    }
    v98 = (unsigned int *)&v97[4 * v93];
    v78 = &v97[4 * v96];
    *v98 = v90;
    v91 = (int *)(v98 + 1);
    while (v81 != v92)
    {
      v99 = *--v81;
      *--v98 = v99;
    }
    this[8] = (int32x2_t)v98;
    this[9] = (int32x2_t)v91;
    this[10] = (int32x2_t)v78;
    if (v92)
    {
      operator delete(v92);
      v78 = (char *)*v79;
    }
  }
  else
  {
    *v81 = v90;
    v91 = (int *)(v81 + 1);
  }
  this[9] = (int32x2_t)v91;
  v100 = a2 & 0x3FFFFFFF | 0x40000000;
  if (v91 >= (int *)v78)
  {
    v102 = (int *)this[8];
    v103 = v91 - v102;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 62)
      goto LABEL_225;
    v105 = v78 - (char *)v102;
    if (v105 >> 1 > v104)
      v104 = v105 >> 1;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
      v106 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    if (v106)
    {
      v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[10], v106);
      v102 = (int *)this[8];
      v91 = (int *)this[9];
    }
    else
    {
      v107 = 0;
    }
    v108 = (int *)&v107[4 * v103];
    v78 = &v107[4 * v106];
    *v108 = v100;
    v101 = (char *)(v108 + 1);
    while (v91 != v102)
    {
      v109 = *--v91;
      *--v108 = v109;
    }
    this[8] = (int32x2_t)v108;
    this[9] = (int32x2_t)v101;
    this[10] = (int32x2_t)v78;
    if (v102)
    {
      operator delete(v102);
      v78 = (char *)*v79;
    }
  }
  else
  {
    *v91 = v100;
    v101 = (char *)(v91 + 1);
  }
  this[9] = (int32x2_t)v101;
  v110 = this[8];
  if (v101 >= v78)
  {
    v112 = (uint64_t)&v101[-*(_QWORD *)&v110] >> 2;
    v113 = v112 + 1;
    if ((unint64_t)(v112 + 1) >> 62)
      goto LABEL_225;
    v114 = (uint64_t)&v78[-*(_QWORD *)&v110];
    if (v114 >> 1 > v113)
      v113 = v114 >> 1;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL)
      v115 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    if (v115)
    {
      v116 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[10], v115);
      v117 = (char *)this[8];
      v101 = (char *)this[9];
    }
    else
    {
      v116 = 0;
      v117 = (char *)this[8];
    }
    v118 = &v116[4 * v112];
    v78 = &v116[4 * v115];
    *(_DWORD *)v118 = *(_DWORD *)(*(_QWORD *)&v110 + 4 * v10);
    v111 = (unsigned int *)(v118 + 4);
    while (v101 != v117)
    {
      v119 = *((_DWORD *)v101 - 1);
      v101 -= 4;
      *((_DWORD *)v118 - 1) = v119;
      v118 -= 4;
    }
    this[8] = (int32x2_t)v118;
    this[9] = (int32x2_t)v111;
    this[10] = (int32x2_t)v78;
    if (v117)
    {
      operator delete(v117);
      v78 = (char *)*v79;
    }
  }
  else
  {
    *(_DWORD *)v101 = *(_DWORD *)(*(_QWORD *)&v110 + 4 * v10);
    v111 = (unsigned int *)(v101 + 4);
  }
  this[9] = (int32x2_t)v111;
  v120 = a2 & 0x3FFFFFFF | 0x80000000;
  if (v111 >= (unsigned int *)v78)
  {
    v122 = (unsigned int *)this[8];
    v123 = v111 - v122;
    v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 62)
      goto LABEL_225;
    v125 = v78 - (char *)v122;
    if (v125 >> 1 > v124)
      v124 = v125 >> 1;
    if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL)
      v126 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v126 = v124;
    if (v126)
    {
      v127 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[10], v126);
      v122 = (unsigned int *)this[8];
      v111 = (unsigned int *)this[9];
    }
    else
    {
      v127 = 0;
    }
    v128 = (unsigned int *)&v127[4 * v123];
    v78 = &v127[4 * v126];
    *v128 = v120;
    v121 = (char *)(v128 + 1);
    while (v111 != v122)
    {
      v129 = *--v111;
      *--v128 = v129;
    }
    this[8] = (int32x2_t)v128;
    this[9] = (int32x2_t)v121;
    this[10] = (int32x2_t)v78;
    if (v122)
    {
      operator delete(v122);
      v78 = (char *)*v79;
    }
  }
  else
  {
    *v111 = v120;
    v121 = (char *)(v111 + 1);
  }
  this[9] = (int32x2_t)v121;
  v130 = v71 & 0x3FFFFFFF | 0x40000000;
  if (v121 >= v78)
  {
    v133 = (char *)this[8];
    v134 = (v121 - v133) >> 2;
    v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) >> 62)
      goto LABEL_225;
    v136 = v78 - v133;
    if (v136 >> 1 > v135)
      v135 = v136 >> 1;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
      v137 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    if (v137)
    {
      v138 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[10], v137);
      v133 = (char *)this[8];
      v121 = (char *)this[9];
    }
    else
    {
      v138 = 0;
    }
    v139 = &v138[4 * v134];
    v140 = &v138[4 * v137];
    *(_DWORD *)v139 = v130;
    v131 = v139 + 4;
    if (v121 == v133)
    {
      v132 = v157;
    }
    else
    {
      v132 = v157;
      do
      {
        v141 = *((_DWORD *)v121 - 1);
        v121 -= 4;
        *((_DWORD *)v139 - 1) = v141;
        v139 -= 4;
      }
      while (v121 != v133);
    }
    this[8] = (int32x2_t)v139;
    this[9] = (int32x2_t)v131;
    this[10] = (int32x2_t)v140;
    if (v133)
      operator delete(v133);
  }
  else
  {
    *(_DWORD *)v121 = v130;
    v131 = v121 + 4;
    v132 = v157;
  }
  this[9] = (int32x2_t)v131;
  v142 = this[8];
  *(_DWORD *)(*(_QWORD *)&v142 + 4 * v156) = v71 & 0x3FFFFFFF | 0x80000000;
  *(_DWORD *)(*(_QWORD *)&v142 + 4 * v10) = v75 & 0x3FFFFFFF | 0x40000000;
  v143 = (unsigned int *)this[5];
  if (v143[v155] == v100)
    v143[v155] = v71 & 0x3FFFFFFF;
  if (v143[v132] == v120)
    v143[v132] = v75 & 0x3FFFFFFF;
  v144 = (unint64_t)this[7];
  v145 = (unsigned int *)this[6];
  if ((unint64_t)v145 >= v144)
  {
    v147 = v145 - v143;
    v148 = v147 + 1;
    if (!((unint64_t)(v147 + 1) >> 62))
    {
      v149 = v144 - (_QWORD)v143;
      if (v149 >> 1 > v148)
        v148 = v149 >> 1;
      if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL)
        v150 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v150 = v148;
      if (v150)
      {
        v151 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[7], v150);
        v143 = (unsigned int *)this[5];
        v145 = (unsigned int *)this[6];
      }
      else
      {
        v151 = 0;
      }
      v152 = (unsigned int *)&v151[4 * v147];
      v153 = &v151[4 * v150];
      *v152 = v120;
      v146 = v152 + 1;
      while (v145 != v143)
      {
        v154 = *--v145;
        *--v152 = v154;
      }
      this[5] = (int32x2_t)v152;
      this[6] = (int32x2_t)v146;
      this[7] = (int32x2_t)v153;
      if (v143)
        operator delete(v143);
      goto LABEL_224;
    }
LABEL_225:
    abort();
  }
  *v145 = v120;
  v146 = v145 + 1;
LABEL_224:
  this[6] = (int32x2_t)v146;
  *this = vadd_s32(*this, (int32x2_t)0x200000001);
  return 1;
}

unint64_t geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>>::insert_or_assign@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v9 = *a3;
  if (result == -1)
  {
    v11 = result >> 4;
    if (result >> 4 < (unint64_t)a1[2] >> 4)
      goto LABEL_3;
LABEL_6:
    v12 = 0;
    goto LABEL_4;
  }
  v10 = a1[2];
  *(_DWORD *)(a1[1] + 12 * result + 8) = v9;
  v11 = result >> 4;
  if (result >> 4 >= v10 >> 4)
    goto LABEL_6;
LABEL_3:
  v12 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v11)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
LABEL_4:
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v12;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = 1;
  return result;
}

void geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>>::init(void **a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  void *v10;
  void *v11;

  a1[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = (void *)(v5 & 0x3FFFFFFFFFFFFF0);
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
      v6 = 64;
    else
      v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
    *a1 = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *((_OWORD *)*a1 + v7++) = v8;
      while (v5 >> 4 != v7);
    }
    if (((12 * (_QWORD)a1[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40)
      v9 = 64;
    else
      v9 = (12 * (_QWORD)a1[2] + 63) & 0xFFFFFFFFFFFFFFC0;
    v10 = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
    a1[1] = v10;
    v11 = a1[2];
    if (v11)
      bzero(v10, 12 * (_QWORD)v11);
  }
  else
  {
    v11 = 0;
  }
  a1[3] = 0;
  a1[4] = v11;
}

uint64_t geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>>::do_resize(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  uint64_t i;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if (a2 <= 1)
    a2 = 1;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = v4 >> 4;
    v7 = (__n128)xmmword_2289B6F60;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v18[0] + 8) + 12 * v9;
      v16 = *(_QWORD *)v10;
      v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    v11 = v21;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    v20 = v12;
    v21 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v22;
    v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>>::internal_add<unsigned int>(uint64_t *a1, unsigned int *a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;

  if (!a1[4])
  v6 = a2[1];
  v7 = (unint64_t)a1[2] >> 4;
  v8 = (v6 | ((unint64_t)*a2 << 32)) % v7;
  v9 = *a1;
  v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v8)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v10 >= 0x40)
  {
    do
    {
      if (v8 + 1 == v7)
        v8 = 0;
      else
        ++v8;
      v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v9 + 16 * v8)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v10 > 0x3F);
  }
  v11 = v9 + 16 * v8;
  v12 = *(unsigned __int8 *)(v11 + v10) == 255;
  *(_BYTE *)(v11 + v10) = v6 & 0x7F;
  result = v10 + 16 * v8;
  v14 = a1[1] + 12 * result;
  *(_QWORD *)v14 = *(_QWORD *)a2;
  *(_DWORD *)(v14 + 8) = a3;
  v15 = a1[4] - v12;
  ++a1[3];
  a1[4] = v15;
  return result;
}

uint64_t geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>>::grow_to_count(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  v1 = *(_QWORD *)(result + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
  }
  if (!*(_QWORD *)(result + 32))
  return result;
}

uint64_t geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>>::find_internal(_QWORD *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;

  v2 = a1[2];
  if (v2 < 0x10)
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = a2[1];
  v6 = (v5 | (unint64_t)(v4 << 32)) % (v2 >> 4);
  v7 = vdupq_n_s8(a2[1] & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v6;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_11:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    v15 = (int *)(a1[1] + 12 * (v12 + v13));
    v17 = *v15;
    v16 = v15[1];
    if ((_DWORD)v4 == v17 && (_DWORD)v5 == v16)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_11;
  }
}

uint64_t geom::`anonymous namespace'::find_petal_of_faces_incident_to_face_vertex_helper(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  _DWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  int v29;
  uint64_t internal;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  char *v38;
  char *v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  _QWORD *v56;
  unsigned int v58;
  uint64_t v59;
  unint64_t v61;

  v12 = *(_DWORD **)a5;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  v14 = (_QWORD *)(a5 + 16);
  v13 = *(_QWORD *)(a5 + 16);
  if ((unint64_t)v12 < v13)
  {
    *v12 = a2;
    v15 = v12 + 1;
LABEL_14:
    v56 = v14;
    v58 = 0;
    v59 = a1 << 32;
    v24 = a1;
    while (1)
    {
      v26 = v15 - 1;
      v25 = *(v15 - 1);
      *(_QWORD *)(a5 + 8) = v15 - 1;
      v27 = (unsigned int *)(*a3 + 4 * (3 * v25));
      v28 = *v27;
      if (v28 == v24)
        break;
      if (v27[1] == v24)
      {
        v29 = 1;
        goto LABEL_19;
      }
      if (v27[2] != v24)
        goto LABEL_47;
      v29 = 2;
LABEL_20:
      v61 = v59 | v28;
      if (internal != -1)
      {
        v31 = *(unsigned int *)(a4[1] + 12 * internal + 8);
        if (v31 >> 30 != 3 && ((*(_QWORD *)(*a6 + ((v31 >> 3) & 0x7FFFFF8)) >> v31) & 1) == 0)
        {
          v32 = v31 & 0x3FFFFFFF;
          if ((unint64_t)v26 >= *v56)
          {
            v33 = v26 - v12;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62)
              goto LABEL_71;
            v35 = *v56 - (_QWORD)v12;
            if (v35 >> 1 > v34)
              v34 = v35 >> 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v36 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = v32;
              v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v56, v36);
              v32 = v37;
              v12 = *(_DWORD **)a5;
              v26 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[4 * v33];
            *(_DWORD *)v39 = v32;
            v15 = v39 + 4;
            while (v26 != v12)
            {
              v40 = *--v26;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            *(_QWORD *)a5 = v39;
            *(_QWORD *)(a5 + 8) = v15;
            *(_QWORD *)(a5 + 16) = &v38[4 * v36];
            if (v12)
              operator delete(v12);
          }
          else
          {
            *v26 = v32;
          }
          *(_QWORD *)(a5 + 8) = v15;
          v26 = v15;
        }
      }
      v41 = v29 - 1;
      if (!v29)
        v41 = 2;
      v61 = v24 | ((unint64_t)v27[v41] << 32);
      if (v42 != -1)
      {
        v43 = *(unsigned int *)(a4[1] + 12 * v42 + 8);
        if (v43 >> 30 != 3 && ((*(_QWORD *)(*a6 + ((v43 >> 3) & 0x7FFFFF8)) >> v43) & 1) == 0)
        {
          v46 = v43 & 0x3FFFFFFF;
          if ((unint64_t)v26 >= *v56)
          {
            v47 = *(_DWORD **)a5;
            v48 = ((uint64_t)v26 - *(_QWORD *)a5) >> 2;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62)
LABEL_71:
              abort();
            v50 = *v56 - (_QWORD)v47;
            if (v50 >> 1 > v49)
              v49 = v50 >> 1;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v56, v51);
              v47 = *(_DWORD **)a5;
              v26 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[4 * v48];
            *(_DWORD *)v53 = v46;
            v15 = v53 + 4;
            while (v26 != v47)
            {
              v54 = *--v26;
              *((_DWORD *)v53 - 1) = v54;
              v53 -= 4;
            }
            *(_QWORD *)a5 = v53;
            *(_QWORD *)(a5 + 8) = v15;
            *(_QWORD *)(a5 + 16) = &v52[4 * v51];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *v26 = v46;
            v15 = v26 + 1;
          }
          *(_QWORD *)(a5 + 8) = v15;
          goto LABEL_48;
        }
      }
LABEL_47:
      v15 = v26;
LABEL_48:
      v44 = *a6;
      v45 = *(_QWORD *)(*a6 + 8 * (v25 >> 6));
      if ((v45 & (1 << v25)) == 0)
      {
        *(_DWORD *)(a7 + 4 * v58) = v25;
        *(_QWORD *)(v44 + 8 * (v25 >> 6)) = v45 | (1 << v25);
        ++v58;
      }
      v12 = *(_DWORD **)a5;
      if (*(_DWORD **)a5 == v15)
        return v58;
    }
    v29 = 0;
LABEL_19:
    v28 = v27[v29 + 1];
    goto LABEL_20;
  }
  v16 = v13 - (_QWORD)v12;
  v17 = v16 >> 1;
  if ((unint64_t)(v16 >> 1) <= 1)
    v17 = 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v18 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v18 = v17;
  v12 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a5 + 16, v18);
  v19 = *(_DWORD **)a5;
  v20 = *(_DWORD **)(a5 + 8);
  v22 = &v12[v21];
  *v12 = a2;
  v15 = v12 + 1;
  while (v20 != v19)
  {
    v23 = *--v20;
    *--v12 = v23;
  }
  *(_QWORD *)a5 = v12;
  *(_QWORD *)(a5 + 8) = v15;
  *(_QWORD *)(a5 + 16) = v22;
  if (v19)
  {
    operator delete(v19);
    v12 = *(_DWORD **)a5;
  }
  *(_QWORD *)(a5 + 8) = v15;
  if (v12 != v15)
    goto LABEL_14;
  return 0;
}

double geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>>::erase@<D0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x8_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (*(_QWORD **)a2 != a1 || (v6 = *((_QWORD *)a2 + 2), v6 == -1))
  {
    *(_QWORD *)a3 = a1;
    result = 0.0;
    *(_OWORD *)(a3 + 8) = xmmword_2289C3540;
  }
  else
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v13);
    v7 = (int8x16_t *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
    v8.i64[0] = -1;
    v8.i64[1] = -1;
    v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v7, v8), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    if (v9)
      v10 = -1;
    else
      v10 = 0x80;
    v7->i8[v6 & 0xF] = v10;
    v11 = a1[4];
    if (v9)
      ++v11;
    v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v11;
    if (v12 >= 0x11 && v12 < a1[2] >> 2)
    result = *(double *)&v13;
    *(_OWORD *)a3 = v13;
    *(_QWORD *)(a3 + 16) = v14;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geom::`anonymous namespace'::find_and_repair_non_manifold_vertices_helper(std::vector<unsigned int> const&,unsigned int &,geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>> &,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&)::{lambda(std::pair<unsigned int,unsigned int> const&,std::pair<unsigned int,unsigned int> const&)#1} &,std::pair<unsigned int,unsigned int>*,false>(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  BOOL v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  int v62;
  unsigned int *v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 2);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 2) = v38;
          v39 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v40 = *(a2 - 2);
        v41 = v8[6];
        if (v40 < v41)
        {
          v8[6] = v40;
          *(a2 - 2) = v41;
          v42 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v42;
          v43 = v8[6];
          v44 = v8[4];
          if (v43 < v44)
          {
            v45 = v8[5];
            v46 = v8[7];
            v8[4] = v43;
            v8[5] = v46;
            v8[6] = v44;
            v8[7] = v45;
            v47 = v8[2];
            if (v43 < v47)
            {
              v48 = v8[3];
              v8[2] = v43;
              v8[3] = v46;
              v8[4] = v47;
              v8[5] = v48;
              v49 = *v8;
              if (v43 < *v8)
              {
                v50 = v8[1];
                *v8 = v43;
                v8[1] = v46;
                v8[2] = v49;
                v8[3] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 2;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v56 = v55[2];
                v57 = *v55;
                v55 = v51;
                if (v56 < v57)
                {
                  v59 = *v51;
                  v58 = v51[1];
                  v60 = v54;
                  while (1)
                  {
                    v61 = (char *)v8 + v60;
                    v62 = *(unsigned int *)((char *)v8 + v60 + 4);
                    *((_DWORD *)v61 + 2) = v57;
                    *((_DWORD *)v61 + 3) = v62;
                    if (!v60)
                      break;
                    v57 = *((_DWORD *)v61 - 2);
                    v60 -= 8;
                    if (v57 <= v59)
                    {
                      v63 = (unsigned int *)((char *)v8 + v60 + 8);
                      goto LABEL_79;
                    }
                  }
                  v63 = v8;
LABEL_79:
                  *v63 = v59;
                  v63[1] = v58;
                }
                v51 = v55 + 2;
                v54 += 8;
              }
              while (v55 + 2 != a2);
            }
          }
          else if (!v53)
          {
            v91 = v8 + 3;
            do
            {
              v92 = v7[2];
              v93 = *v7;
              v7 = v51;
              if (v92 < v93)
              {
                v94 = *(_QWORD *)v51;
                v95 = v91;
                do
                {
                  v96 = v95;
                  *(v95 - 1) = v93;
                  v97 = *(v95 - 2);
                  v95 -= 2;
                  *v96 = v97;
                  v93 = *(v96 - 5);
                }
                while (v93 > v94);
                *(_QWORD *)(v95 - 1) = v94;
              }
              v51 = v7 + 2;
              v91 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v64 = (v10 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &v8[2 * v67];
                if (2 * v66 + 2 >= (uint64_t)v10)
                {
                  v69 = *v68;
                }
                else
                {
                  v69 = *v68;
                  v70 = v68[2];
                  if (*v68 <= v70)
                    v69 = v68[2];
                  if (*v68 < v70)
                  {
                    v68 += 2;
                    v67 = 2 * v66 + 2;
                  }
                }
                v71 = &v8[2 * v66];
                if (v69 >= *v71)
                {
                  v72 = *v71;
                  v73 = v71[1];
                  do
                  {
                    result = (uint64_t)v71;
                    v71 = v68;
                    *(_DWORD *)result = v69;
                    *(_DWORD *)(result + 4) = v68[1];
                    if (v64 < v67)
                      break;
                    result = (2 * v67) | 1;
                    v68 = &v8[2 * result];
                    v67 = 2 * v67 + 2;
                    if (v67 >= (uint64_t)v10)
                    {
                      v69 = *v68;
                      v67 = result;
                    }
                    else
                    {
                      v69 = *v68;
                      v74 = v68[2];
                      if (*v68 <= v74)
                        v69 = v68[2];
                      if (*v68 >= v74)
                        v67 = result;
                      else
                        v68 += 2;
                    }
                  }
                  while (v69 >= v72);
                  *v71 = v72;
                  v71[1] = v73;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v75 = (unint64_t)v9 >> 3;
            do
            {
              v76 = 0;
              v77 = *(_QWORD *)v8;
              v78 = v8;
              do
              {
                v79 = &v78[2 * v76 + 2];
                v80 = (2 * v76) | 1;
                v76 = 2 * v76 + 2;
                if (v76 >= v75)
                {
                  v81 = *v79;
                  v76 = v80;
                }
                else
                {
                  v81 = *v79;
                  v82 = v79[2];
                  if (*v79 <= v82)
                    v81 = v79[2];
                  if (*v79 >= v82)
                    v76 = v80;
                  else
                    v79 += 2;
                }
                *v78 = v81;
                v78[1] = v79[1];
                v78 = v79;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v79 == a2 - 2)
              {
                *(_QWORD *)v79 = v77;
              }
              else
              {
                *v79 = *(a2 - 2);
                v79[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v77;
                v83 = (char *)v79 - (char *)v8 + 8;
                if (v83 >= 9)
                {
                  v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                  v85 = &v8[2 * v84];
                  v86 = *v85;
                  if (*v85 < *v79)
                  {
                    v87 = *v79;
                    v88 = v79[1];
                    do
                    {
                      v89 = v79;
                      v79 = v85;
                      *v89 = v86;
                      v89[1] = v85[1];
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = &v8[2 * v84];
                      v86 = *v85;
                    }
                    while (*v85 < v87);
                    *v79 = v87;
                    v79[1] = v88;
                  }
                }
              }
              a2 -= 2;
            }
            while (v75-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
        }
        else
        {
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 2) >= *v7)
        {
          v27 = *(_QWORD *)v7;
          if (*(a2 - 2) <= *(_QWORD *)v7)
          {
            v29 = v7 + 2;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              v29 += 2;
            }
            while (*v8 <= v27);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[2];
              v8 += 2;
            }
            while (v28 <= v27);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v31 > v27);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              v34 = v8[1];
              v8[1] = v30[1];
              v30[1] = v34;
              do
              {
                v35 = v8[2];
                v8 += 2;
                v32 = v35;
              }
              while (v35 <= v27);
              do
              {
                v36 = *(v30 - 2);
                v30 -= 2;
                v33 = v36;
              }
              while (v36 > v27);
            }
            while (v8 < v30);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_QWORD *)v8 - 1) = v27;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        do
        {
          v16 = v7[v14 + 2];
          v14 += 2;
        }
        while (v16 < v15);
        v17 = &v7[v14];
        v18 = a2;
        if (v14 == 2)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v15);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v15);
        }
        if (v17 >= v18)
        {
          v8 = &v7[v14];
        }
        else
        {
          v21 = *v18;
          v8 = &v7[v14];
          v22 = v18;
          do
          {
            *v8 = v21;
            *v22 = v16;
            v23 = v8[1];
            v8[1] = v22[1];
            v22[1] = v23;
            do
            {
              v24 = v8[2];
              v8 += 2;
              v16 = v24;
            }
            while (v24 < v15);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
              v21 = v25;
            }
            while (v25 >= v15);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *((_QWORD *)v8 - 1) = v15;
        if (v17 < v18)
        {
LABEL_32:
          a4 = 0;
          continue;
        }
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geom::`anonymous namespace'::find_and_repair_non_manifold_vertices_helper(std::vector<unsigned int> const&,unsigned int &,geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>> &,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&)::{lambda(std::pair<unsigned int,unsigned int> const&,std::pair<unsigned int,unsigned int> const&)#1} &,std::pair<unsigned int,unsigned int>*>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      v10 = result[1];
      result[1] = a2[1];
      a2[1] = v10;
      v11 = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = v11;
      v6 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
    }
    v7 = v6;
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v7 = a2 + 1;
    v8 = a2[1];
    a2[1] = a3[1];
    a3[1] = v8;
    v9 = *result;
    if (*a2 < *result)
    {
      *result++ = *a2;
      *a2 = v9;
LABEL_10:
      v12 = *result;
      *result = *v7;
      *v7 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geom::`anonymous namespace'::find_and_repair_non_manifold_vertices_helper(std::vector<unsigned int> const&,unsigned int &,geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>> &,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&)::{lambda(std::pair<unsigned int,unsigned int> const&,std::pair<unsigned int,unsigned int> const&)#1} &,std::pair<unsigned int,unsigned int>*>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v20 = *(a2 - 2);
      v21 = a1[6];
      if (v20 < v21)
      {
        a1[6] = v20;
        *(a2 - 2) = v21;
        v22 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v22;
        v23 = a1[6];
        v24 = a1[4];
        if (v23 < v24)
        {
          v25 = a1[5];
          v26 = a1[7];
          a1[4] = v23;
          a1[5] = v26;
          a1[6] = v24;
          a1[7] = v25;
          v27 = a1[2];
          if (v23 < v27)
          {
            v28 = a1[3];
            a1[2] = v23;
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v28;
            v29 = *a1;
            if (v23 < *a1)
            {
              v30 = a1[1];
              *a1 = v23;
              a1[1] = v26;
              a1[2] = v29;
              a1[3] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    if (*v10 < *v9)
    {
      v15 = *v10;
      v14 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (unsigned int *)((char *)a1 + v16);
        v18 = *(unsigned int *)((char *)a1 + v16 + 20);
        v17[6] = v13;
        v17[7] = v18;
        if (v16 == -16)
          break;
        v13 = v17[2];
        v16 -= 8;
        if (v13 <= v15)
        {
          v19 = (unsigned int *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      v19[1] = v14;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geom::`anonymous namespace'::find_and_repair_non_manifold_vertices_helper(std::vector<unsigned int> const&,unsigned int &,geom::hash_brown<std::pair<unsigned int,unsigned int>,unsigned int,geom::`anonymous namespace'::vertex_pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>> &,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&,std::vector<unsigned int>&)::{lambda(std::pair<unsigned int,unsigned int> const&,std::pair<unsigned int,unsigned int> const&)#1} &,std::pair<unsigned int,unsigned int>*>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

__n128 std::pair<geom::triangle_mesh_half_edge_connectivity,std::optional<std::vector<unsigned int>>>::pair[abi:nn180100](uint64_t a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 40) = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = 0;
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v3;
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v4;
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2[4].n128_u64[0];
  a2[4].n128_u64[0] = v5;
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = v6;
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2[5].n128_u64[0];
  a2[5].n128_u64[0] = v7;
  v8 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = a2[5].n128_u64[1];
  a2[5].n128_u64[1] = v8;
  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = a2[6].n128_u64[0];
  a2[6].n128_u64[0] = v9;
  v10 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = v10;
  *(_DWORD *)a1 = a2->n128_u32[0];
  a2->n128_u32[0] = 0;
  LODWORD(v10) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = a2->n128_u32[1];
  a2->n128_u32[1] = v10;
  LODWORD(v10) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = a2->n128_u32[2];
  a2->n128_u32[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = v11;
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v12;
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v13;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (a2[11].n128_u8[8])
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    result = a2[10];
    *(__n128 *)(a1 + 160) = result;
    *(_QWORD *)(a1 + 176) = a2[11].n128_u64[0];
    a2[10].n128_u64[0] = 0;
    a2[10].n128_u64[1] = 0;
    a2[11].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 184) = 1;
  }
  return result;
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v10;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__split_buffer<unsigned int> __v;

  v5 = (unsigned int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      abort();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (unsigned int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void geom::triangulate_by_ear_clipping<float>(uint64_t *a1, std::vector<unsigned int> *a2)
{
  unint64_t v4;
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  uint64_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *__p;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  v4 = a1[1];
  if (v4)
  {
    v5 = (float32x2_t *)*a1;
    v6 = (float32x2_t)vdup_n_s32(0x7F800000u);
    v7 = (float32x2_t)0x7F0000007FLL;
    v8 = 8 * v4;
    do
    {
      v9 = *v5++;
      v6 = vminnm_f32(v9, v6);
      v7 = vmaxnm_f32(v9, v7);
      v8 -= 8;
    }
    while (v8);
    v10 = vabs_f32(v6);
    v11 = vabs_f32(v7);
  }
  else
  {
    v10 = (float32x2_t)vdup_n_s32(0x7F800000u);
    v11 = v10;
  }
  v12 = vmaxnm_f32(v10, v11);
  v13 = fmaxf(v12.f32[0], v12.f32[1]);
  if (v13 >= 0.000005)
    v14 = v13 * 0.000005;
  else
    v14 = 2.5e-11;
  if (v4 > 2)
  {
    geom::fixed_pool_list<unsigned long>::fixed_pool_list((uint64_t)&v47, v4);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    std::vector<double>::__vallocate[abi:nn180100](&v44, v4);
    v15 = (char *)v45;
    bzero(v45, 8 * v4);
    v16 = 0;
    v45 = &v15[8 * v4];
    v17 = v51;
    v18 = v49;
    v19 = v44;
    do
    {
      v20 = &v18[4 * v17[v48]];
      v21 = v18[7];
      ++v48;
      *v20 = v16;
      v20[2] = v18[5];
      v20[3] = v21;
      v22 = v20[1];
      v18[4 * v21 + 2] = v22;
      v18[7] = v22;
      v19[v16] = v16;
      ++v16;
    }
    while (v4 != v16);
    geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::fixed_pool_list(&v38, v4);
    __p = 0;
    v36 = 0;
    v37 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&__p, v4);
    v23 = v36;
    v24 = &v36[2 * v4];
    do
    {
      *v23 = 1;
      v23[1] = &v38;
      v23 += 2;
    }
    while (v23 != v24);
    v36 = v24;
    v25 = v49;
    v26 = *((_QWORD *)v49 + 2);
    while (v26 != 1)
    {
      v27 = &v25[4 * v26];
      v28 = v27[2];
      if (v28 == -1)
        v28 = v26;
      if (v28 == 1)
        v28 = v25[2];
      if (v26 == v25[2])
      {
        v29 = v25[7];
        if (v29 <= 1)
          v29 = 1;
      }
      else
      {
        v29 = v27[3];
        if (!v29)
          v29 = v26;
      }
      if (_simd_orient_pf2(*(simd_float2 *)(*a1 + 8 * *((_QWORD *)v44 + v25[4 * v29])), *(simd_float2 *)(*a1 + 8 * *((_QWORD *)v44 + *v27)), *(simd_float2 *)(*a1 + 8 * *((_QWORD *)v44 + v25[4 * v28]))) <= 0.0)
      {
        v30 = v40;
        v31 = (unint64_t *)((char *)v40 + 40 * *((_QWORD *)v42 + v39));
        v32 = *((_QWORD *)v40 + 9);
        ++v39;
        *v31 = v26;
        v31[1] = (unint64_t)&v47;
        v31[3] = v30[7];
        v31[4] = v32;
        v33 = v31[2];
        v30[5 * v32 + 3] = v33;
        v30[9] = v33;
        v34 = (unint64_t *)((char *)__p + 16 * *((_QWORD *)v49 + 4 * v26));
        *v34 = v33;
        v34[1] = (unint64_t)&v38;
      }
      v25 = v49;
      if (*((_QWORD *)v49 + 4 * v26 + 2) != -1)
        v26 = *((_QWORD *)v49 + 4 * v26 + 2);
    }
    a2->__end_ = a2->__begin_;
    geom::triangulate_by_ear_clipping_helper<float>(&v47, (uint64_t *)&v44, *a1, a1[1], &v38, (uint64_t *)&__p, a2, v14);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (v42)
    {
      v43 = v42;
      operator delete(v42);
    }
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
  }
  else
  {
    a2->__end_ = a2->__begin_;
  }
}

void geom::triangulate_by_ear_clipping_helper<float>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, std::vector<unsigned int> *a7, float a8)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  int is_triangle_incident_to_vertex_concave;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float32x2_t v30;
  int32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  double *v43;
  int64_t v44;
  double v45;
  double v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  double *v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t i;
  unint64_t v62;
  unint64_t v63;
  double *v64;
  double *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  float32x2_t v112;
  int32x2_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  int32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float v124;
  uint64_t v125;
  float32x2_t v126;
  int32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  int32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  void *v143[2];
  void *__p[2];
  __int128 v145;
  void *v146;
  double *v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  _OWORD v154[2];
  uint64_t v155;
  uint64_t v156[2];
  uint64_t v157;
  double v158;
  uint64_t v159;
  double v160;
  uint64_t v161;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  v156[0] = a3;
  v156[1] = a4;
  v15 = *a2;
  v14 = a2[1];
  v16 = (v14 - *a2) >> 3;
  v17 = v16 - 2;
  if (6 * (v16 - 2) <= 1)
    v18 = 1;
  else
    v18 = 6 * (v16 - 2);
  v155 = 0;
  memset(v154, 0, sizeof(v154));
  geom::hash_brown<std::pair<unsigned long,unsigned long>,unsigned long,geom::edge_hash,std::equal_to<std::pair<unsigned long,unsigned long>>>::init(v154, v18);
  geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::fixed_pool_list(&v149, v16);
  v146 = 0;
  v147 = 0;
  v148 = 0;
  if (v14 != v15)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v146, v16);
    v19 = v147;
    v20 = &v147[2 * v16];
    do
    {
      *(_QWORD *)v19 = 1;
      v19[1] = *(double *)&a1;
      v19 += 2;
    }
    while (v19 != v20);
    v147 = v20;
  }
  *(_OWORD *)__p = 0u;
  v145 = 0u;
  *(_OWORD *)v143 = 0u;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::reserve(v143, v16);
  std::vector<long>::resize((uint64_t)&__p[1], v16, &geom::indexed_priority_queue<unsigned long,double>::k_invalid_index);
  v21 = a1[2];
  v22 = *(_QWORD *)(v21 + 16);
  while (v22 != 1)
  {
    v23 = (uint64_t *)((char *)v146 + 16 * *(_QWORD *)(v21 + 32 * v22));
    *v23 = v22;
    v23[1] = (uint64_t)a1;
    v21 = a1[2];
    v24 = (_QWORD *)(*a6 + 16 * *(_QWORD *)(v21 + 32 * v22));
    if ((_QWORD *)v24[1] == a5 && *v24 == 1)
    {
      v159 = v22;
      v160 = *(double *)&a1;
      is_triangle_incident_to_vertex_concave = geom::is_triangle_incident_to_vertex_concave_free<float>(&v159, (uint64_t)a1, a2, v156, (uint64_t)a5, a8);
      v21 = a1[2];
      if (is_triangle_incident_to_vertex_concave)
      {
        v26 = (uint64_t *)(v21 + 32 * v22);
        v27 = v26[2];
        if (v27 == -1)
          v27 = v22;
        if (v27 == 1)
          v27 = *(_QWORD *)(v21 + 16);
        if (v22 == *(_QWORD *)(v21 + 16))
        {
          v28 = *(_QWORD *)(v21 + 56);
          if (v28 <= 1)
            v28 = 1;
        }
        else
        {
          v28 = v26[3];
          if (!v28)
            v28 = v22;
        }
        v29 = *v26;
        v30 = *(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * v29));
        v31 = (int32x2_t)vsub_f32(v30, *(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v21 + 32 * v28))));
        v32 = vsub_f32(*(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v21 + 32 * v27))), v30);
        v33 = vmul_f32(v32, v32);
        v33.i32[0] = vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)).u32[0];
        v34 = vrsqrte_f32((float32x2_t)v33.u32[0]);
        v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v34, v34)));
        v36 = (int32x2_t)vmul_f32(v35, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v35, v35)));
        v37 = vmul_n_f32(v32, *(float *)v36.i32);
        *(float *)v36.i32 = -*(float *)&v31.i32[1];
        v38 = (float32x2_t)vzip1_s32(v36, v31);
        v39 = vmul_f32(v38, v38);
        v39.i32[0] = vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1)).u32[0];
        v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
        v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
        v42 = vaddv_f32(vmul_f32(v37, vmul_n_f32(v38, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0])));
        if (v42 < 0.0)
          v42 = v42 + 2.0;
        v159 = v29;
        v160 = v42;
        geom::indexed_priority_queue<unsigned long,double>::push_or_change_cost(v143, (double *)&v159);
        v21 = a1[2];
      }
    }
    if (*(_QWORD *)(v21 + 32 * v22 + 16) != -1)
      v22 = *(_QWORD *)(v21 + 32 * v22 + 16);
  }
  a7->__end_ = a7->__begin_;
  std::vector<unsigned int>::reserve(a7, 3 * v17);
  v43 = (double *)v143[1];
  v44 = (char *)v143[1] - (char *)v143[0];
  if (v143[1] != v143[0])
  {
    v43 = (double *)v143[0];
    while (1)
    {
      v45 = *v43;
      v46 = v43[1];
      if (v44 == 16)
      {
        v143[1] = v43;
        v47 = __p[1];
      }
      else
      {
        v56 = (v44 >> 4) - 1;
        v57 = &v43[2 * v56];
        v58 = *v57;
        *v43 = *v57;
        v43[1] = v57[1];
        *((_QWORD *)__p[1] + *(_QWORD *)&v58) = 0;
        std::vector<geom::indexed_priority_queue<unsigned long,double>::key,std::allocator<geom::indexed_priority_queue<unsigned long,double>::key>>::resize((uint64_t)v143, v56);
        v59 = 0;
        v43 = (double *)v143[0];
        v60 = ((char *)v143[1] - (char *)v143[0]) >> 4;
        v47 = __p[1];
        for (i = 0; ; v59 = i)
        {
          v62 = (2 * v59) | 1;
          if (v62 < v60)
          {
            i = v59;
            if (v43[2 * v62 + 1] < v43[2 * v59 + 1])
              i = (2 * v59) | 1;
          }
          v63 = 2 * v59 + 2;
          if (v63 < v60 && v43[2 * v63 + 1] < v43[2 * i + 1])
            i = 2 * v59 + 2;
          if (i == v59)
            break;
          v64 = &v43[2 * v59];
          v65 = &v43[2 * i];
          v66 = *(_QWORD *)v64;
          v67 = *((_QWORD *)v64 + 1);
          *v64 = *v65;
          v64[1] = v65[1];
          *(_QWORD *)v65 = v66;
          *((_QWORD *)v65 + 1) = v67;
          v47[*(_QWORD *)v64] = v59;
          v47[*(_QWORD *)v65] = i;
        }
      }
      v47[*(_QWORD *)&v45] = -1;
      if (v46 == INFINITY)
        goto LABEL_178;
      v48 = (uint64_t *)((char *)v146 + 16 * *(_QWORD *)&v45);
      v49 = *v48;
      v50 = (_QWORD *)v48[1];
      if (v50 == a1 && v49 == 1)
        break;
      v52 = *(_QWORD *)(v50[2] + 32 * v49 + 16);
      if (v52 == -1)
        v52 = v49;
      if (v50 == a1 && v52 == 1)
      {
        v52 = *(_QWORD *)(a1[2] + 16);
        v54 = a1;
        goto LABEL_55;
      }
      v54 = v50;
      v55 = v50;
LABEL_56:
      v141 = v52;
      v142 = v54;
      if (v50 != a1)
        goto LABEL_57;
      v68 = a1[2];
      if (v49 == 1)
      {
        v70 = a1;
        v69 = 1;
        goto LABEL_66;
      }
      if (v49 == *(_QWORD *)(v68 + 16))
      {
        v69 = *(_QWORD *)(v68 + 56);
        if (v69 <= 1)
          v69 = 1;
        v70 = a1;
      }
      else
      {
LABEL_57:
        v68 = v50[2];
        v69 = *(_QWORD *)(v68 + 32 * v49 + 24);
        if (!v69)
          v69 = v49;
        v70 = v50;
      }
LABEL_66:
      v139 = v69;
      v140 = v70;
      v159 = *(_QWORD *)(v50[2] + 32 * v49);
      v160 = *(double *)(v55[2] + 32 * v52);
      v161 = *(_QWORD *)(v68 + 32 * v69);
      geom::add_triangle_helper<float>((int *)&v159, a7, (uint64_t *)v154, a2, v156[0]);
      geom::fixed_pool_list<unsigned long>::erase(a1, v49);
      v72 = v139;
      v71 = v140;
      v73 = v140[2];
      v74 = *(_QWORD *)(v73 + 32 * v139);
      v75 = *a6;
      v76 = (_QWORD *)(*a6 + 16 * v74);
      if ((_QWORD *)v76[1] == a5 && *v76 == 1)
        goto LABEL_89;
      if (v140 == a1 && v139 == 1)
      {
        v77 = 1;
LABEL_76:
        v78 = a1;
        goto LABEL_77;
      }
      v77 = *(_QWORD *)(v73 + 32 * v139 + 16);
      if (v77 == -1)
        v77 = v139;
      v78 = v140;
      if (v140 == a1 && v77 == 1)
      {
        v77 = *(_QWORD *)(a1[2] + 16);
        goto LABEL_76;
      }
LABEL_77:
      if (v140 != a1)
        goto LABEL_78;
      if (v139 != 1)
      {
        v80 = a1[2];
        if (v139 != *(_QWORD *)(v80 + 16))
        {
LABEL_78:
          v79 = *(_QWORD *)(v73 + 32 * v139 + 24);
          if (v79)
            v72 = v79;
          goto LABEL_87;
        }
        if (*(_QWORD *)(v80 + 56) <= 1uLL)
          v72 = 1;
        else
          v72 = *(_QWORD *)(v80 + 56);
      }
      v71 = a1;
LABEL_87:
      v81 = _simd_orient_pf2(*(simd_float2 *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v71[2] + 32 * v72))), *(simd_float2 *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * v74)), *(simd_float2 *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v78[2] + 32 * v77))));
      v75 = *a6;
      if (v81 > 0.0)
      {
        geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::erase(a5, *(_QWORD *)(v75 + 16 * *(_QWORD *)(v140[2] + 32 * v139)));
        v82 = (_QWORD *)(*a6 + 16 * *(_QWORD *)(v140[2] + 32 * v139));
        *v82 = 1;
        v82[1] = a5;
        v75 = *a6;
      }
LABEL_89:
      v84 = v141;
      v83 = v142;
      v85 = v142[2];
      v86 = *(_QWORD *)(v85 + 32 * v141);
      v87 = (_QWORD *)(v75 + 16 * v86);
      if ((_QWORD *)v87[1] == a5 && *v87 == 1)
        goto LABEL_112;
      if (v142 == a1 && v141 == 1)
      {
        v88 = 1;
LABEL_99:
        v89 = a1;
        goto LABEL_100;
      }
      v88 = *(_QWORD *)(v85 + 32 * v141 + 16);
      if (v88 == -1)
        v88 = v141;
      v89 = v142;
      if (v142 == a1 && v88 == 1)
      {
        v88 = *(_QWORD *)(a1[2] + 16);
        goto LABEL_99;
      }
LABEL_100:
      if (v142 != a1)
        goto LABEL_101;
      if (v141 != 1)
      {
        v91 = a1[2];
        if (v141 != *(_QWORD *)(v91 + 16))
        {
LABEL_101:
          v90 = *(_QWORD *)(v85 + 32 * v141 + 24);
          if (v90)
            v84 = v90;
          goto LABEL_110;
        }
        if (*(_QWORD *)(v91 + 56) <= 1uLL)
          v84 = 1;
        else
          v84 = *(_QWORD *)(v91 + 56);
      }
      v83 = a1;
LABEL_110:
      if (_simd_orient_pf2(*(simd_float2 *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v83[2] + 32 * v84))), *(simd_float2 *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * v86)), *(simd_float2 *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v89[2] + 32 * v88)))) > 0.0)
      {
        geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::erase(a5, *(_QWORD *)(*a6 + 16 * *(_QWORD *)(v142[2] + 32 * v141)));
        v92 = (_QWORD *)(*a6 + 16 * *(_QWORD *)(v142[2] + 32 * v141));
        *v92 = 1;
        v92[1] = a5;
      }
LABEL_112:
      v93 = *(_QWORD *)(v140[2] + 32 * v139);
      v94 = *((_QWORD *)__p[1] + v93);
      if (v94 == -1)
        v95 = INFINITY;
      else
        v95 = *((double *)v143[0] + 2 * v94 + 1);
      v96 = (_QWORD *)(*a6 + 16 * v93);
      if ((_QWORD *)v96[1] == a5
        && *v96 == 1
        && geom::is_triangle_incident_to_vertex_concave_free<float>((uint64_t *)&v139, (uint64_t)a1, a2, v156, (uint64_t)a5, a8))
      {
        v97 = v140;
        v98 = v140[2];
        if (v140 == a1 && v139 == 1)
        {
          v99 = 1;
          goto LABEL_143;
        }
        v99 = *(_QWORD *)(v98 + 32 * v139 + 16);
        if (v99 == -1)
          v99 = v139;
        v107 = v140;
        if (v140 == a1 && v99 == 1)
        {
          v99 = *(_QWORD *)(a1[2] + 16);
LABEL_143:
          v107 = a1;
        }
        if (v140 == a1)
        {
          if (v139 == 1)
          {
            v108 = 1;
          }
          else
          {
            v111 = a1[2];
            if (v139 != *(_QWORD *)(v111 + 16))
              goto LABEL_145;
            if (*(_QWORD *)(v111 + 56) <= 1uLL)
              v108 = 1;
            else
              v108 = *(_QWORD *)(v111 + 56);
          }
          v97 = a1;
        }
        else
        {
LABEL_145:
          v108 = *(_QWORD *)(v98 + 32 * v139 + 24);
          if (!v108)
            v108 = v139;
        }
        v112 = *(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v98 + 32 * v139)));
        v113 = (int32x2_t)vsub_f32(v112, *(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v97[2] + 32 * v108))));
        v114 = vsub_f32(*(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v107[2] + 32 * v99))), v112);
        v115 = vmul_f32(v114, v114);
        v115.i32[0] = vadd_f32(v115, (float32x2_t)vdup_lane_s32((int32x2_t)v115, 1)).u32[0];
        v116 = vrsqrte_f32((float32x2_t)v115.u32[0]);
        v117 = vmul_f32(v116, vrsqrts_f32((float32x2_t)v115.u32[0], vmul_f32(v116, v116)));
        v118 = (int32x2_t)vmul_f32(v117, vrsqrts_f32((float32x2_t)v115.u32[0], vmul_f32(v117, v117)));
        v119 = vmul_n_f32(v114, *(float *)v118.i32);
        *(float *)v118.i32 = -*(float *)&v113.i32[1];
        v120 = (float32x2_t)vzip1_s32(v118, v113);
        v121 = vmul_f32(v120, v120);
        v121.i32[0] = vadd_f32(v121, (float32x2_t)vdup_lane_s32((int32x2_t)v121, 1)).u32[0];
        v122 = vrsqrte_f32((float32x2_t)v121.u32[0]);
        v123 = vmul_f32(v122, vrsqrts_f32((float32x2_t)v121.u32[0], vmul_f32(v122, v122)));
        v124 = vaddv_f32(vmul_f32(v119, vmul_n_f32(v120, vmul_f32(v123, vrsqrts_f32((float32x2_t)v121.u32[0], vmul_f32(v123, v123))).f32[0])));
        if (v124 < 0.0)
          v124 = v124 + 2.0;
        v157 = *(_QWORD *)(v98 + 32 * v139);
        v158 = v124;
        goto LABEL_123;
      }
      if (v95 == INFINITY)
        goto LABEL_124;
      v157 = *(_QWORD *)(v140[2] + 32 * v139);
      v158 = INFINITY;
LABEL_123:
      geom::indexed_priority_queue<unsigned long,double>::push_or_change_cost(v143, (double *)&v157);
LABEL_124:
      v100 = *(_QWORD *)(v142[2] + 32 * v141);
      v101 = *((_QWORD *)__p[1] + v100);
      if (v101 == -1)
        v102 = INFINITY;
      else
        v102 = *((double *)v143[0] + 2 * v101 + 1);
      v103 = (_QWORD *)(*a6 + 16 * v100);
      if ((_QWORD *)v103[1] == a5
        && *v103 == 1
        && geom::is_triangle_incident_to_vertex_concave_free<float>(&v141, (uint64_t)a1, a2, v156, (uint64_t)a5, a8))
      {
        v104 = v142;
        v105 = v142[2];
        if (v142 == a1 && v141 == 1)
        {
          v106 = 1;
          goto LABEL_153;
        }
        v106 = *(_QWORD *)(v105 + 32 * v141 + 16);
        if (v106 == -1)
          v106 = v141;
        v109 = v142;
        if (v142 == a1 && v106 == 1)
        {
          v106 = *(_QWORD *)(a1[2] + 16);
LABEL_153:
          v109 = a1;
        }
        if (v142 == a1)
        {
          if (v141 == 1)
          {
            v110 = 1;
          }
          else
          {
            v125 = a1[2];
            if (v141 != *(_QWORD *)(v125 + 16))
              goto LABEL_155;
            if (*(_QWORD *)(v125 + 56) <= 1uLL)
              v110 = 1;
            else
              v110 = *(_QWORD *)(v125 + 56);
          }
          v104 = a1;
        }
        else
        {
LABEL_155:
          v110 = *(_QWORD *)(v105 + 32 * v141 + 24);
          if (!v110)
            v110 = v141;
        }
        v126 = *(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v105 + 32 * v141)));
        v127 = (int32x2_t)vsub_f32(v126, *(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v104[2] + 32 * v110))));
        v128 = vsub_f32(*(float32x2_t *)(v156[0] + 8 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v109[2] + 32 * v106))), v126);
        v129 = vmul_f32(v128, v128);
        v129.i32[0] = vadd_f32(v129, (float32x2_t)vdup_lane_s32((int32x2_t)v129, 1)).u32[0];
        v130 = vrsqrte_f32((float32x2_t)v129.u32[0]);
        v131 = vmul_f32(v130, vrsqrts_f32((float32x2_t)v129.u32[0], vmul_f32(v130, v130)));
        v132 = (int32x2_t)vmul_f32(v131, vrsqrts_f32((float32x2_t)v129.u32[0], vmul_f32(v131, v131)));
        v133 = vmul_n_f32(v128, *(float *)v132.i32);
        *(float *)v132.i32 = -*(float *)&v127.i32[1];
        v134 = (float32x2_t)vzip1_s32(v132, v127);
        v135 = vmul_f32(v134, v134);
        v135.i32[0] = vadd_f32(v135, (float32x2_t)vdup_lane_s32((int32x2_t)v135, 1)).u32[0];
        v136 = vrsqrte_f32((float32x2_t)v135.u32[0]);
        v137 = vmul_f32(v136, vrsqrts_f32((float32x2_t)v135.u32[0], vmul_f32(v136, v136)));
        v138 = vaddv_f32(vmul_f32(v133, vmul_n_f32(v134, vmul_f32(v137, vrsqrts_f32((float32x2_t)v135.u32[0], vmul_f32(v137, v137))).f32[0])));
        if (v138 < 0.0)
          v138 = v138 + 2.0;
        v157 = *(_QWORD *)(v105 + 32 * v141);
        v158 = v138;
LABEL_135:
        geom::indexed_priority_queue<unsigned long,double>::push_or_change_cost(v143, (double *)&v157);
        goto LABEL_136;
      }
      if (v102 != INFINITY)
      {
        v157 = *(_QWORD *)(v142[2] + 32 * v141);
        v158 = INFINITY;
        goto LABEL_135;
      }
LABEL_136:
      v43 = (double *)v143[0];
      v44 = (char *)v143[1] - (char *)v143[0];
      if (v143[1] == v143[0])
      {
        v43 = (double *)v143[1];
        goto LABEL_178;
      }
    }
    v54 = a1;
    v52 = 1;
LABEL_55:
    v55 = a1;
    goto LABEL_56;
  }
LABEL_178:
  if (__p[1])
  {
    *(void **)&v145 = __p[1];
    operator delete(__p[1]);
    v43 = (double *)v143[0];
  }
  if (v43)
  {
    v143[1] = v43;
    operator delete(v43);
  }
  if (v146)
  {
    v147 = (double *)v146;
    operator delete(v146);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v154);
}

void geom::triangulate_by_ear_clipping<double>(uint64_t *a1, std::vector<unsigned int> *a2)
{
  unint64_t v4;
  float64x2_t *v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *__p;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  v4 = a1[1];
  if (v4)
  {
    v5 = (float64x2_t *)*a1;
    v6 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v7 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v8 = 16 * v4;
    do
    {
      v9 = *v5++;
      v6 = vminnmq_f64(v9, v6);
      v7 = vmaxnmq_f64(v9, v7);
      v8 -= 16;
    }
    while (v8);
    v10 = vabsq_f64(v6);
    v11 = vabsq_f64(v7);
  }
  else
  {
    v10 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v11 = v10;
  }
  v12 = vpmaxq_f64(vmaxnmq_f64(v10, v11));
  if (v12 >= 1.0e-10)
    v13 = v12 * 1.0e-10;
  else
    v13 = 1.0e-20;
  if (v4 > 2)
  {
    geom::fixed_pool_list<unsigned long>::fixed_pool_list((uint64_t)&v46, v4);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    std::vector<double>::__vallocate[abi:nn180100](&v43, v4);
    v14 = (char *)v44;
    bzero(v44, 8 * v4);
    v15 = 0;
    v44 = &v14[8 * v4];
    v16 = v50;
    v17 = v48;
    v18 = v43;
    do
    {
      v19 = &v17[4 * v16[v47]];
      v20 = v17[7];
      ++v47;
      *v19 = v15;
      v19[2] = v17[5];
      v19[3] = v20;
      v21 = v19[1];
      v17[4 * v20 + 2] = v21;
      v17[7] = v21;
      v18[v15] = v15;
      ++v15;
    }
    while (v4 != v15);
    geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::fixed_pool_list(&v37, v4);
    __p = 0;
    v35 = 0;
    v36 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&__p, v4);
    v22 = v35;
    v23 = &v35[2 * v4];
    do
    {
      *v22 = 1;
      v22[1] = &v37;
      v22 += 2;
    }
    while (v22 != v23);
    v35 = v23;
    v24 = v48;
    v25 = *((_QWORD *)v48 + 2);
    while (v25 != 1)
    {
      v26 = &v24[4 * v25];
      v27 = v26[2];
      if (v27 == -1)
        v27 = v25;
      if (v27 == 1)
        v27 = v24[2];
      if (v25 == v24[2])
      {
        v28 = v24[7];
        if (v28 <= 1)
          v28 = 1;
      }
      else
      {
        v28 = v26[3];
        if (!v28)
          v28 = v25;
      }
      if (_simd_orient_pd2(*(simd_double2 *)(*a1 + 16 * *((_QWORD *)v43 + v24[4 * v28])), *(simd_double2 *)(*a1 + 16 * *((_QWORD *)v43 + *v26)), *(simd_double2 *)(*a1 + 16 * *((_QWORD *)v43 + v24[4 * v27]))) <= 0.0)
      {
        v29 = v39;
        v30 = (unint64_t *)((char *)v39 + 40 * *((_QWORD *)v41 + v38));
        v31 = *((_QWORD *)v39 + 9);
        ++v38;
        *v30 = v25;
        v30[1] = (unint64_t)&v46;
        v30[3] = v29[7];
        v30[4] = v31;
        v32 = v30[2];
        v29[5 * v31 + 3] = v32;
        v29[9] = v32;
        v33 = (unint64_t *)((char *)__p + 16 * *((_QWORD *)v48 + 4 * v25));
        *v33 = v32;
        v33[1] = (unint64_t)&v37;
      }
      v24 = v48;
      if (*((_QWORD *)v48 + 4 * v25 + 2) != -1)
        v25 = *((_QWORD *)v48 + 4 * v25 + 2);
    }
    a2->__end_ = a2->__begin_;
    geom::triangulate_by_ear_clipping_helper<double>(&v46, (uint64_t *)&v43, *a1, a1[1], &v37, (uint64_t *)&__p, a2, v13);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
  }
  else
  {
    a2->__end_ = a2->__begin_;
  }
}

void geom::triangulate_by_ear_clipping_helper<double>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6, std::vector<unsigned int> *a7, double a8)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  int is_triangle_incident_to_vertex_concave;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  int64x2_t v31;
  float64x2_t v32;
  int64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  double *v37;
  int64_t v38;
  double v39;
  double v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t i;
  unint64_t v56;
  unint64_t v57;
  double *v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  float64x2_t v106;
  int64x2_t v107;
  float64x2_t v108;
  int64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  uint64_t v113;
  float64x2_t v114;
  int64x2_t v115;
  float64x2_t v116;
  int64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  double v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  void *v125[2];
  void *__p[2];
  __int128 v127;
  void *v128;
  double *v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  _OWORD v136[2];
  uint64_t v137;
  uint64_t v138[2];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v138[0] = a3;
  v138[1] = a4;
  v15 = *a2;
  v14 = a2[1];
  v16 = (v14 - *a2) >> 3;
  v17 = v16 - 2;
  if (6 * (v16 - 2) <= 1)
    v18 = 1;
  else
    v18 = 6 * (v16 - 2);
  v137 = 0;
  memset(v136, 0, sizeof(v136));
  geom::hash_brown<std::pair<unsigned long,unsigned long>,unsigned long,geom::edge_hash,std::equal_to<std::pair<unsigned long,unsigned long>>>::init(v136, v18);
  geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::fixed_pool_list(&v131, v16);
  v128 = 0;
  v129 = 0;
  v130 = 0;
  if (v14 != v15)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v128, v16);
    v19 = v129;
    v20 = &v129[2 * v16];
    do
    {
      *(_QWORD *)v19 = 1;
      v19[1] = *(double *)&a1;
      v19 += 2;
    }
    while (v19 != v20);
    v129 = v20;
  }
  *(_OWORD *)__p = 0u;
  v127 = 0u;
  *(_OWORD *)v125 = 0u;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::reserve(v125, v16);
  std::vector<long>::resize((uint64_t)&__p[1], v16, &geom::indexed_priority_queue<unsigned long,double>::k_invalid_index);
  v21 = a1[2];
  v22 = *(_QWORD *)(v21 + 16);
  while (v22 != 1)
  {
    v23 = (uint64_t *)((char *)v128 + 16 * *(_QWORD *)(v21 + 32 * v22));
    *v23 = v22;
    v23[1] = (uint64_t)a1;
    v21 = a1[2];
    v24 = (_QWORD *)(*a6 + 16 * *(_QWORD *)(v21 + 32 * v22));
    if ((_QWORD *)v24[1] == a5 && *v24 == 1)
    {
      v141 = v22;
      v142 = *(double *)&a1;
      is_triangle_incident_to_vertex_concave = geom::is_triangle_incident_to_vertex_concave_free<double>(&v141, (uint64_t)a1, a2, v138, (uint64_t)a5, a8);
      v21 = a1[2];
      if (is_triangle_incident_to_vertex_concave)
      {
        v26 = (uint64_t *)(v21 + 32 * v22);
        v27 = v26[2];
        if (v27 == -1)
          v27 = v22;
        if (v27 == 1)
          v27 = *(_QWORD *)(v21 + 16);
        if (v22 == *(_QWORD *)(v21 + 16))
        {
          v28 = *(_QWORD *)(v21 + 56);
          if (v28 <= 1)
            v28 = 1;
        }
        else
        {
          v28 = v26[3];
          if (!v28)
            v28 = v22;
        }
        v29 = *v26;
        v30 = *(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * v29));
        v31 = (int64x2_t)vsubq_f64(v30, *(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v21 + 32 * v28))));
        v32 = vsubq_f64(*(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v21 + 32 * v27))), v30);
        v33 = (int64x2_t)vmulq_f64(v32, v32);
        v34 = vmulq_n_f64(v32, 1.0 / sqrt(vaddvq_f64((float64x2_t)v33)));
        *(double *)v33.i64 = -*(double *)&v31.i64[1];
        v35 = (float64x2_t)vzip1q_s64(v33, v31);
        v36 = vaddvq_f64(vmulq_f64(v34, vmulq_n_f64(v35, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v35, v35))))));
        if (v36 < 0.0)
          v36 = v36 + 2.0;
        v141 = v29;
        v142 = v36;
        geom::indexed_priority_queue<unsigned long,double>::push_or_change_cost(v125, (double *)&v141);
        v21 = a1[2];
      }
    }
    if (*(_QWORD *)(v21 + 32 * v22 + 16) != -1)
      v22 = *(_QWORD *)(v21 + 32 * v22 + 16);
  }
  a7->__end_ = a7->__begin_;
  std::vector<unsigned int>::reserve(a7, 3 * v17);
  v37 = (double *)v125[1];
  v38 = (char *)v125[1] - (char *)v125[0];
  if (v125[1] != v125[0])
  {
    v37 = (double *)v125[0];
    while (1)
    {
      v39 = *v37;
      v40 = v37[1];
      if (v38 == 16)
      {
        v125[1] = v37;
        v41 = __p[1];
      }
      else
      {
        v50 = (v38 >> 4) - 1;
        v51 = &v37[2 * v50];
        v52 = *v51;
        *v37 = *v51;
        v37[1] = v51[1];
        *((_QWORD *)__p[1] + *(_QWORD *)&v52) = 0;
        std::vector<geom::indexed_priority_queue<unsigned long,double>::key,std::allocator<geom::indexed_priority_queue<unsigned long,double>::key>>::resize((uint64_t)v125, v50);
        v53 = 0;
        v37 = (double *)v125[0];
        v54 = ((char *)v125[1] - (char *)v125[0]) >> 4;
        v41 = __p[1];
        for (i = 0; ; v53 = i)
        {
          v56 = (2 * v53) | 1;
          if (v56 < v54)
          {
            i = v53;
            if (v37[2 * v56 + 1] < v37[2 * v53 + 1])
              i = (2 * v53) | 1;
          }
          v57 = 2 * v53 + 2;
          if (v57 < v54 && v37[2 * v57 + 1] < v37[2 * i + 1])
            i = 2 * v53 + 2;
          if (i == v53)
            break;
          v58 = &v37[2 * v53];
          v59 = &v37[2 * i];
          v60 = *(_QWORD *)v58;
          v61 = *((_QWORD *)v58 + 1);
          *v58 = *v59;
          v58[1] = v59[1];
          *(_QWORD *)v59 = v60;
          *((_QWORD *)v59 + 1) = v61;
          v41[*(_QWORD *)v58] = v53;
          v41[*(_QWORD *)v59] = i;
        }
      }
      v41[*(_QWORD *)&v39] = -1;
      if (v40 == INFINITY)
        goto LABEL_178;
      v42 = (uint64_t *)((char *)v128 + 16 * *(_QWORD *)&v39);
      v43 = *v42;
      v44 = (_QWORD *)v42[1];
      if (v44 == a1 && v43 == 1)
        break;
      v46 = *(_QWORD *)(v44[2] + 32 * v43 + 16);
      if (v46 == -1)
        v46 = v43;
      if (v44 == a1 && v46 == 1)
      {
        v46 = *(_QWORD *)(a1[2] + 16);
        v48 = a1;
        goto LABEL_55;
      }
      v48 = v44;
      v49 = v44;
LABEL_56:
      v123 = v46;
      v124 = v48;
      if (v44 != a1)
        goto LABEL_57;
      v62 = a1[2];
      if (v43 == 1)
      {
        v64 = a1;
        v63 = 1;
        goto LABEL_66;
      }
      if (v43 == *(_QWORD *)(v62 + 16))
      {
        v63 = *(_QWORD *)(v62 + 56);
        if (v63 <= 1)
          v63 = 1;
        v64 = a1;
      }
      else
      {
LABEL_57:
        v62 = v44[2];
        v63 = *(_QWORD *)(v62 + 32 * v43 + 24);
        if (!v63)
          v63 = v43;
        v64 = v44;
      }
LABEL_66:
      v121 = v63;
      v122 = v64;
      v141 = *(_QWORD *)(v44[2] + 32 * v43);
      v142 = *(double *)(v49[2] + 32 * v46);
      v143 = *(_QWORD *)(v62 + 32 * v63);
      geom::add_triangle_helper<double>((int *)&v141, a7, (uint64_t *)v136, a2, v138[0]);
      geom::fixed_pool_list<unsigned long>::erase(a1, v43);
      v66 = v121;
      v65 = v122;
      v67 = v122[2];
      v68 = *(_QWORD *)(v67 + 32 * v121);
      v69 = *a6;
      v70 = (_QWORD *)(*a6 + 16 * v68);
      if ((_QWORD *)v70[1] == a5 && *v70 == 1)
        goto LABEL_89;
      if (v122 == a1 && v121 == 1)
      {
        v71 = 1;
LABEL_76:
        v72 = a1;
        goto LABEL_77;
      }
      v71 = *(_QWORD *)(v67 + 32 * v121 + 16);
      if (v71 == -1)
        v71 = v121;
      v72 = v122;
      if (v122 == a1 && v71 == 1)
      {
        v71 = *(_QWORD *)(a1[2] + 16);
        goto LABEL_76;
      }
LABEL_77:
      if (v122 != a1)
        goto LABEL_78;
      if (v121 != 1)
      {
        v74 = a1[2];
        if (v121 != *(_QWORD *)(v74 + 16))
        {
LABEL_78:
          v73 = *(_QWORD *)(v67 + 32 * v121 + 24);
          if (v73)
            v66 = v73;
          goto LABEL_87;
        }
        if (*(_QWORD *)(v74 + 56) <= 1uLL)
          v66 = 1;
        else
          v66 = *(_QWORD *)(v74 + 56);
      }
      v65 = a1;
LABEL_87:
      v75 = _simd_orient_pd2(*(simd_double2 *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v65[2] + 32 * v66))), *(simd_double2 *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * v68)), *(simd_double2 *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v72[2] + 32 * v71))));
      v69 = *a6;
      if (v75 > 0.0)
      {
        geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::erase(a5, *(_QWORD *)(v69 + 16 * *(_QWORD *)(v122[2] + 32 * v121)));
        v76 = (_QWORD *)(*a6 + 16 * *(_QWORD *)(v122[2] + 32 * v121));
        *v76 = 1;
        v76[1] = a5;
        v69 = *a6;
      }
LABEL_89:
      v78 = v123;
      v77 = v124;
      v79 = v124[2];
      v80 = *(_QWORD *)(v79 + 32 * v123);
      v81 = (_QWORD *)(v69 + 16 * v80);
      if ((_QWORD *)v81[1] == a5 && *v81 == 1)
        goto LABEL_112;
      if (v124 == a1 && v123 == 1)
      {
        v82 = 1;
LABEL_99:
        v83 = a1;
        goto LABEL_100;
      }
      v82 = *(_QWORD *)(v79 + 32 * v123 + 16);
      if (v82 == -1)
        v82 = v123;
      v83 = v124;
      if (v124 == a1 && v82 == 1)
      {
        v82 = *(_QWORD *)(a1[2] + 16);
        goto LABEL_99;
      }
LABEL_100:
      if (v124 != a1)
        goto LABEL_101;
      if (v123 != 1)
      {
        v85 = a1[2];
        if (v123 != *(_QWORD *)(v85 + 16))
        {
LABEL_101:
          v84 = *(_QWORD *)(v79 + 32 * v123 + 24);
          if (v84)
            v78 = v84;
          goto LABEL_110;
        }
        if (*(_QWORD *)(v85 + 56) <= 1uLL)
          v78 = 1;
        else
          v78 = *(_QWORD *)(v85 + 56);
      }
      v77 = a1;
LABEL_110:
      if (_simd_orient_pd2(*(simd_double2 *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v77[2] + 32 * v78))), *(simd_double2 *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * v80)), *(simd_double2 *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v83[2] + 32 * v82)))) > 0.0)
      {
        geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::erase(a5, *(_QWORD *)(*a6 + 16 * *(_QWORD *)(v124[2] + 32 * v123)));
        v86 = (_QWORD *)(*a6 + 16 * *(_QWORD *)(v124[2] + 32 * v123));
        *v86 = 1;
        v86[1] = a5;
      }
LABEL_112:
      v87 = *(_QWORD *)(v122[2] + 32 * v121);
      v88 = *((_QWORD *)__p[1] + v87);
      if (v88 == -1)
        v89 = INFINITY;
      else
        v89 = *((double *)v125[0] + 2 * v88 + 1);
      v90 = (_QWORD *)(*a6 + 16 * v87);
      if ((_QWORD *)v90[1] == a5
        && *v90 == 1
        && geom::is_triangle_incident_to_vertex_concave_free<double>((uint64_t *)&v121, (uint64_t)a1, a2, v138, (uint64_t)a5, a8))
      {
        v91 = v122;
        v92 = v122[2];
        if (v122 == a1 && v121 == 1)
        {
          v93 = 1;
          goto LABEL_143;
        }
        v93 = *(_QWORD *)(v92 + 32 * v121 + 16);
        if (v93 == -1)
          v93 = v121;
        v101 = v122;
        if (v122 == a1 && v93 == 1)
        {
          v93 = *(_QWORD *)(a1[2] + 16);
LABEL_143:
          v101 = a1;
        }
        if (v122 == a1)
        {
          if (v121 == 1)
          {
            v102 = 1;
          }
          else
          {
            v105 = a1[2];
            if (v121 != *(_QWORD *)(v105 + 16))
              goto LABEL_145;
            if (*(_QWORD *)(v105 + 56) <= 1uLL)
              v102 = 1;
            else
              v102 = *(_QWORD *)(v105 + 56);
          }
          v91 = a1;
        }
        else
        {
LABEL_145:
          v102 = *(_QWORD *)(v92 + 32 * v121 + 24);
          if (!v102)
            v102 = v121;
        }
        v106 = *(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v92 + 32 * v121)));
        v107 = (int64x2_t)vsubq_f64(v106, *(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v91[2] + 32 * v102))));
        v108 = vsubq_f64(*(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v101[2] + 32 * v93))), v106);
        v109 = (int64x2_t)vmulq_f64(v108, v108);
        v110 = vmulq_n_f64(v108, 1.0 / sqrt(vaddvq_f64((float64x2_t)v109)));
        *(double *)v109.i64 = -*(double *)&v107.i64[1];
        v111 = (float64x2_t)vzip1q_s64(v109, v107);
        v112 = vaddvq_f64(vmulq_f64(v110, vmulq_n_f64(v111, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v111, v111))))));
        if (v112 < 0.0)
          v112 = v112 + 2.0;
        v139 = *(_QWORD *)(v92 + 32 * v121);
        v140 = *(_QWORD *)&v112;
        goto LABEL_123;
      }
      if (v89 == INFINITY)
        goto LABEL_124;
      v139 = *(_QWORD *)(v122[2] + 32 * v121);
      v140 = 0x7FF0000000000000;
LABEL_123:
      geom::indexed_priority_queue<unsigned long,double>::push_or_change_cost(v125, (double *)&v139);
LABEL_124:
      v94 = *(_QWORD *)(v124[2] + 32 * v123);
      v95 = *((_QWORD *)__p[1] + v94);
      if (v95 == -1)
        v96 = INFINITY;
      else
        v96 = *((double *)v125[0] + 2 * v95 + 1);
      v97 = (_QWORD *)(*a6 + 16 * v94);
      if ((_QWORD *)v97[1] == a5
        && *v97 == 1
        && geom::is_triangle_incident_to_vertex_concave_free<double>(&v123, (uint64_t)a1, a2, v138, (uint64_t)a5, a8))
      {
        v98 = v124;
        v99 = v124[2];
        if (v124 == a1 && v123 == 1)
        {
          v100 = 1;
          goto LABEL_153;
        }
        v100 = *(_QWORD *)(v99 + 32 * v123 + 16);
        if (v100 == -1)
          v100 = v123;
        v103 = v124;
        if (v124 == a1 && v100 == 1)
        {
          v100 = *(_QWORD *)(a1[2] + 16);
LABEL_153:
          v103 = a1;
        }
        if (v124 == a1)
        {
          if (v123 == 1)
          {
            v104 = 1;
          }
          else
          {
            v113 = a1[2];
            if (v123 != *(_QWORD *)(v113 + 16))
              goto LABEL_155;
            if (*(_QWORD *)(v113 + 56) <= 1uLL)
              v104 = 1;
            else
              v104 = *(_QWORD *)(v113 + 56);
          }
          v98 = a1;
        }
        else
        {
LABEL_155:
          v104 = *(_QWORD *)(v99 + 32 * v123 + 24);
          if (!v104)
            v104 = v123;
        }
        v114 = *(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v99 + 32 * v123)));
        v115 = (int64x2_t)vsubq_f64(v114, *(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v98[2] + 32 * v104))));
        v116 = vsubq_f64(*(float64x2_t *)(v138[0] + 16 * *(_QWORD *)(*a2 + 8 * *(_QWORD *)(v103[2] + 32 * v100))), v114);
        v117 = (int64x2_t)vmulq_f64(v116, v116);
        v118 = vmulq_n_f64(v116, 1.0 / sqrt(vaddvq_f64((float64x2_t)v117)));
        *(double *)v117.i64 = -*(double *)&v115.i64[1];
        v119 = (float64x2_t)vzip1q_s64(v117, v115);
        v120 = vaddvq_f64(vmulq_f64(v118, vmulq_n_f64(v119, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v119, v119))))));
        if (v120 < 0.0)
          v120 = v120 + 2.0;
        v139 = *(_QWORD *)(v99 + 32 * v123);
        v140 = *(_QWORD *)&v120;
LABEL_135:
        geom::indexed_priority_queue<unsigned long,double>::push_or_change_cost(v125, (double *)&v139);
        goto LABEL_136;
      }
      if (v96 != INFINITY)
      {
        v139 = *(_QWORD *)(v124[2] + 32 * v123);
        v140 = 0x7FF0000000000000;
        goto LABEL_135;
      }
LABEL_136:
      v37 = (double *)v125[0];
      v38 = (char *)v125[1] - (char *)v125[0];
      if (v125[1] == v125[0])
      {
        v37 = (double *)v125[1];
        goto LABEL_178;
      }
    }
    v48 = a1;
    v46 = 1;
LABEL_55:
    v49 = a1;
    goto LABEL_56;
  }
LABEL_178:
  if (__p[1])
  {
    *(void **)&v127 = __p[1];
    operator delete(__p[1]);
    v37 = (double *)v125[0];
  }
  if (v37)
  {
    v125[1] = v37;
    operator delete(v37);
  }
  if (v128)
  {
    v129 = (double *)v128;
    operator delete(v128);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v136);
}

void geom::triangulate_by_ear_clipping<float>(uint64_t *a1, unsigned int **a2, std::vector<unsigned int> *a3)
{
  unint64_t v6;
  unint64_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  char *v40;
  uint64_t i;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  float32x2_t v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float v90;
  _BOOL4 v91;
  float v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float32x2_t v103;
  float v104;
  float32x2_t v105;
  float v106;
  uint64_t v107;
  float32x2_t v108;
  float v109;
  float v110;
  float v111;
  int v112;
  float v113;
  int v114;
  float v115;
  float v116;
  BOOL v117;
  float v118;
  float v119;
  int v120;
  float v121;
  float v122;
  float v123;
  int v124;
  int v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t *v129;
  _DWORD *v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *j;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  void **v184;
  uint64_t v185;
  unint64_t v186;
  void **v187;
  float v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v193;
  _QWORD *v194;
  uint64_t *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  float v200;
  uint64_t *v201;
  float32x2_t v202;
  float v203;
  uint64_t v204;
  std::vector<unsigned int>::pointer begin;
  uint64_t v206;
  unint64_t v207;
  _QWORD *v208;
  std::vector<unsigned int> *v209;
  uint64_t v210;
  BOOL v211;
  int v212;
  unint64_t v213;
  void *__p;
  uint64_t *v215;
  uint64_t *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  __int128 v220;
  void *v221;
  void *v222;
  uint64_t v223;
  void *v224;
  char *v225;
  char *v226;
  unint64_t v227;
  uint64_t v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235[3];
  void *v236;
  void *v237;
  uint64_t *v238[3];

  v6 = (unint64_t)a2[1];
  v7 = a1[1];
  if (v7)
  {
    v8 = (float32x2_t *)*a1;
    v9 = (float32x2_t)vdup_n_s32(0x7F800000u);
    v10 = 8 * v7;
    v11 = (float32x2_t)0x7F0000007FLL;
    do
    {
      v12 = *v8++;
      v9 = vminnm_f32(v12, v9);
      v11 = vmaxnm_f32(v12, v11);
      v10 -= 8;
    }
    while (v10);
    v13 = vabs_f32(v9);
    v14 = vabs_f32(v11);
  }
  else
  {
    v13 = (float32x2_t)vdup_n_s32(0x7F800000u);
    v14 = v13;
  }
  v15 = vmaxnm_f32(v13, v14);
  v16 = fmaxf(v15.f32[0], v15.f32[1]);
  if (v16 >= 0.000005)
    v17 = v16 * 0.000005;
  else
    v17 = 2.5e-11;
  v18 = v6 - 1;
  if (v6 == 1)
  {
    if (v7 == **a2)
    {
      geom::triangulate_by_ear_clipping<float>(a1, a3);
      return;
    }
    goto LABEL_64;
  }
  if (!v6 || v7 + 2 * v18 <= 2)
  {
LABEL_64:
    a3->__end_ = a3->__begin_;
    return;
  }
  geom::fixed_pool_list<unsigned long>::fixed_pool_list((uint64_t)&v233, v7 + 2 * v18);
  geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::fixed_pool_list(&v227, v7 + 2 * v18);
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v221 = 0;
  v222 = 0;
  v223 = 0;
  *(_QWORD *)&v220 = 1;
  *((_QWORD *)&v220 + 1) = &v227;
  std::vector<unsigned long long>::reserve(&v224, v7 + 2 * v18);
  std::vector<unsigned long>::resize((uint64_t)&v224, v7);
  if (v7)
  {
    v19 = 0;
    v20 = v224;
    do
    {
      v20[v19] = v19;
      ++v19;
    }
    while (v7 != v19);
  }
  std::vector<geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::const_node_iterator,std::allocator<std::allocator>>::resize(&v221, v7 + 2 * v18, &v220);
  v21 = **a2;
  v22 = v235[0];
  if ((_DWORD)v21)
  {
    v23 = 0;
    v24 = *((_QWORD *)v235[0] + 5);
    v25 = *((_QWORD *)v235[0] + 7);
    v26 = (char *)v236 + 8 * v234;
    v27 = v234 + 1;
    do
    {
      v28 = &v22[4 * *(_QWORD *)&v26[8 * v23]];
      v234 = v27 + v23;
      *v28 = v23;
      v28[2] = v24;
      v28[3] = v25;
      v29 = v28[1];
      v22[4 * v25 + 2] = v29;
      v22[7] = v29;
      ++v23;
      v25 = v29;
    }
    while (v21 != v23);
  }
  v30 = v22[2];
  while (v30 != 1)
  {
    v31 = &v22[4 * v30];
    v32 = v31[2];
    if (v32 == -1)
      v32 = v30;
    if (v32 == 1)
      v32 = v22[2];
    if (v30 == v22[2])
    {
      v33 = v22[7];
      if (v33 <= 1)
        v33 = 1;
    }
    else
    {
      v33 = v31[3];
      if (!v33)
        v33 = v30;
    }
    if (_simd_orient_pf2(*(simd_float2 *)(*a1 + 8 * *((_QWORD *)v224 + v22[4 * v33])), *(simd_float2 *)(*a1 + 8 * *((_QWORD *)v224 + *v31)), *(simd_float2 *)(*a1 + 8 * *((_QWORD *)v224 + v22[4 * v32]))) <= 0.0)
    {
      v34 = v229;
      v35 = (unint64_t *)((char *)v229 + 40 * *((_QWORD *)v231 + v228));
      v36 = (char *)v229 + 40 * v220;
      v37 = *((_QWORD *)v36 + 4);
      ++v228;
      *v35 = v30;
      v35[1] = (unint64_t)&v233;
      v35[3] = *((_QWORD *)v36 + 2);
      v35[4] = v37;
      v38 = v35[2];
      v34[5 * v37 + 3] = v38;
      *((_QWORD *)v36 + 4) = v38;
      v39 = (unint64_t *)((char *)v221 + 16 * *((_QWORD *)v235[0] + 4 * v30));
      *v39 = v38;
      v39[1] = (unint64_t)&v227;
    }
    v22 = v235[0];
    if (*((_QWORD *)v235[0] + 4 * v30 + 2) != -1)
      v30 = *((_QWORD *)v235[0] + 4 * v30 + 2);
  }
  v217 = 0;
  v218 = 0;
  v219 = 0;
  std::vector<double>::__vallocate[abi:nn180100](&v217, v6);
  v40 = (char *)v218;
  bzero(v218, 8 * v6);
  v218 = &v40[8 * v6];
  __p = 0;
  v215 = 0;
  v216 = 0;
  std::vector<unsigned long long>::reserve(&__p, v6 - 1);
  for (i = 1; i != v6; ++i)
  {
    v42 = &(*a2)[i];
    v43 = *(v42 - 1);
    v44 = *v42;
    if (v43 + 2 >= v44 || v7 < v44)
    {
      a3->__end_ = a3->__begin_;
      goto LABEL_289;
    }
    v46 = v217;
    *((_QWORD *)v217 + i) = v43;
    v47 = *a1;
    v48 = *(_QWORD *)(*a1 + 8 * v43);
    do
    {
      v49 = *(_QWORD *)(v47 + 8 * v43);
      if (*(float *)&v48 < *(float *)&v49)
      {
        v46[i] = v43;
        LODWORD(v48) = v49;
      }
      ++v43;
    }
    while (v44 != v43);
    v50 = v215;
    if (v215 >= v216)
    {
      v52 = (uint64_t *)__p;
      v53 = ((char *)v215 - (_BYTE *)__p) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        goto LABEL_305;
      v55 = (char *)v216 - (_BYTE *)__p;
      if (((char *)v216 - (_BYTE *)__p) >> 2 > v54)
        v54 = v55 >> 2;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v216, v56);
        v52 = (uint64_t *)__p;
        v50 = v215;
      }
      else
      {
        v57 = 0;
      }
      v58 = (uint64_t *)&v57[8 * v53];
      *v58 = i;
      v51 = v58 + 1;
      while (v50 != v52)
      {
        v59 = *--v50;
        *--v58 = v59;
      }
      __p = v58;
      v215 = v51;
      v216 = (uint64_t *)&v57[8 * v56];
      if (v52)
        operator delete(v52);
    }
    else
    {
      *v215 = i;
      v51 = v50 + 1;
    }
    v215 = v51;
  }
  v209 = a3;
  v60 = 126 - 2 * __clz(((char *)v51 - (_BYTE *)__p) >> 3);
  v238[0] = a1;
  v238[1] = (uint64_t *)&v217;
  if (v51 == __p)
    v61 = 0;
  else
    v61 = v60;
  std::__introsort<std::_ClassicAlgPolicy,void geom::triangulate_by_ear_clipping<float>(geom::slice<geom::vector_type<float,(unsigned char)2,void>::value> const&,geom::slice<unsigned int> const&,std::vector<unsigned int> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>((uint64_t)__p, v51, v238, v61, 1);
  if (v215 == __p)
    goto LABEL_285;
  v62 = 0;
  v63 = ((char *)v215 - (_BYTE *)__p) >> 3;
  if (v63 <= 1)
    v63 = 1;
  v213 = v63;
  do
  {
    v64 = v235[0];
    if (*((_QWORD *)v235[0] + 2) == 1)
      goto LABEL_274;
    v65 = *((_QWORD *)__p + v62);
    v66 = v217;
    v67 = *((_QWORD *)v217 + v65);
    v68 = *a1;
    v69 = *(float32x2_t *)(*a1 + 8 * v67);
    v70 = INFINITY;
    v71 = INFINITY;
    v72 = 1;
    v73 = *((_QWORD *)v235[0] + 2);
    do
    {
      v74 = (char *)v235[0] + 32 * v73;
      v75 = *((_QWORD *)v224 + *v74);
      v76 = v74[2];
      if (v76 == -1)
        v76 = v73;
      if (v76 == 1)
        v77 = *((_QWORD *)v235[0] + 2);
      else
        v77 = v76;
      v78 = *(float32x2_t *)(v68 + 8 * v75);
      v79 = *(float32x2_t *)(v68 + 8 * *((_QWORD *)v224 + *((_QWORD *)v235[0] + 4 * v77)));
      if ((vcgt_f32(v78, v69).u32[0] & 1) != 0 || (vcgt_f32(v79, v69).u8[0] & 1) != 0)
      {
        v80 = vsub_f32(v79, v78);
        v81 = vsub_f32(v78, v69);
        v82 = vmul_f32(v80, v80);
        v83 = vaddv_f32(v82);
        if (fabsf(v83) <= 0.00000011921)
        {
          if ((float)((float)(v81.f32[1] + (float)(-0.0 * v81.f32[0]))
                     * (float)(v81.f32[1] + (float)(-0.0 * v81.f32[0]))) > 1.0e-10)
            goto LABEL_100;
          v85 = vaddv_f32(vmul_f32(v81, (float32x2_t)1065353216));
          v86 = 0.0;
        }
        else
        {
          v84 = v80.f32[1] + (float)(-0.0 * v80.f32[0]);
          if (fabsf(v84 * v84) <= (float)(v83 * 1.0e-10))
          {
            v87 = vmlas_n_f32(-v81.f32[1], 0.0, v81.f32[0]);
            if (fabsf(v87 * v87) > (float)(vaddv_f32(vmul_f32(v81, v81)) * 1.0e-10))
              goto LABEL_100;
            v88 = vadd_f32(v82, (float32x2_t)vdup_lane_s32((int32x2_t)v82, 1));
            v85 = vaddv_f32(vmul_f32(v81, (float32x2_t)1065353216));
            v89 = vmul_f32(v80, vneg_f32(v81));
            LODWORD(v86) = vdiv_f32(vadd_f32(v89, (float32x2_t)vdup_lane_s32((int32x2_t)v89, 1)), v88).u32[0];
          }
          else
          {
            v85 = vmlas_n_f32(-(float)(v81.f32[1] * v80.f32[0]), v80.f32[1], v81.f32[0]) / v84;
            v86 = vmlas_n_f32(-v81.f32[1], 0.0, v81.f32[0]) / v84;
          }
        }
        if (v85 != 0.0)
        {
          v90 = fabsf(v85);
          v91 = v85 > 0.0;
          if (v90 != INFINITY)
            v91 = (float)((float)(v17 * (float)(v90 + 1.0)) + 0.0) <= v85;
          if (v91 && v85 < v70)
          {
            if (v86 != 0.0)
            {
              v93 = fabsf(v86);
              if (v93 == INFINITY)
              {
                if (v86 < 0.0)
                  goto LABEL_100;
              }
              else if ((float)(0.0 - (float)(v17 * (float)(v93 + 1.0))) > v86)
              {
                goto LABEL_100;
              }
            }
            if (v86 == 1.0)
              goto LABEL_99;
            v94 = fabsf(v86);
            if (v94 == INFINITY)
            {
              if (v86 <= 1.0)
                goto LABEL_99;
            }
            else if ((float)((float)(v17 * (float)((float)(v94 + 1.0) + 1.0)) + 1.0) >= v86)
            {
LABEL_99:
              v72 = v73;
              v71 = v86;
              v70 = v85;
            }
          }
        }
      }
LABEL_100:
      v73 = v76;
    }
    while (v76 != 1);
    if (v72 == 1)
      goto LABEL_274;
    v95 = fabsf(v71);
    if (v95 <= v17)
    {
      v211 = 0;
      v97 = &v233;
LABEL_169:
      v125 = 1;
      goto LABEL_170;
    }
    if (v71 == 1.0 || v95 != INFINITY && fabsf(v71 + -1.0) < (float)(v17 * (float)((float)(v95 + 1.0) + 1.0)))
    {
      v96 = *((_QWORD *)v235[0] + 4 * v72 + 2);
      if (v96 == -1)
        v96 = v72;
      if (v96 == 1)
        v72 = *((_QWORD *)v235[0] + 2);
      else
        v72 = v96;
      goto LABEL_166;
    }
    v98 = (uint64_t *)((char *)v235[0] + 32 * v72);
    v99 = v98[2];
    if (v99 == -1)
      v99 = v72;
    if (v99 == 1)
      v100 = *((_QWORD *)v235[0] + 2);
    else
      v100 = v99;
    if (COERCE_FLOAT(*(_QWORD *)(v68 + 8 * *((_QWORD *)v224 + *v98))) >= COERCE_FLOAT(*(_QWORD *)(v68 + 8 * *((_QWORD *)v224 + *((_QWORD *)v235[0] + 4 * v100)))))
      v101 = *v98;
    else
      v101 = *((_QWORD *)v235[0] + 4 * v100);
    v102 = *((_QWORD *)v229 + 3);
    if (v102 == 1)
    {
LABEL_164:
      if (v101 != *v98)
        v72 = v100;
LABEL_166:
      v97 = &v233;
      goto LABEL_167;
    }
    v103 = *(float32x2_t *)(v68 + 8 * v67);
    v104 = v70 + v103.f32[0];
    v105 = *(float32x2_t *)(v68 + 8 * *((_QWORD *)v224 + v101));
    LODWORD(v106) = vsub_f32(v103, v105).u32[0];
    v107 = *((_QWORD *)v229 + 3);
    while (2)
    {
      v108 = *(float32x2_t *)(v68
                            + 8
                            * *((_QWORD *)v224
                              + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v229 + 5 * v107 + 1) + 16)
                                          + 32 * *((_QWORD *)v229 + 5 * v107))));
      v109 = (float)((float)-(float)(v103.f32[1] - v105.f32[1]) * vsub_f32(v108, v105).f32[0])
           + (float)(v106 * (float)(v108.f32[1] - v105.f32[1]));
      v110 = (float)((float)-(float)(v103.f32[1] - v103.f32[1]) * vsub_f32(v108, v103).f32[0])
           + (float)((float)(v104 - v103.f32[0]) * (float)(v108.f32[1] - v103.f32[1]));
      if (v109 == 0.0)
      {
        if (v110 != 0.0)
        {
          v112 = 0;
          goto LABEL_140;
        }
      }
      else
      {
        v111 = fabsf(v109);
        v112 = v109 < 0.0;
        if (v111 != INFINITY)
          v112 = (float)(0.0 - (float)(v17 * (float)(v111 + 1.0))) >= v109;
        if (v110 != 0.0)
        {
LABEL_140:
          v113 = fabsf(v110);
          v114 = v110 < 0.0;
          v115 = v17 * (float)(v113 + 1.0);
          if (v113 != INFINITY)
            v114 = (float)(0.0 - v115) >= v110;
          if (v109 == 0.0 || v112 == v114)
            break;
          v116 = fabsf(v109);
          v117 = v116 != INFINITY && v116 < (float)(v17 * (float)(v116 + 1.0));
          if (v117 || v113 != INFINITY && v113 < v115)
            break;
LABEL_161:
          if (*((_QWORD *)v229 + 5 * v107 + 3) != -1)
            v107 = *((_QWORD *)v229 + 5 * v107 + 3);
          if (v107 == 1)
            goto LABEL_164;
          continue;
        }
      }
      break;
    }
    v118 = (float)((float)(v108.f32[0] - v104) * (float)-(float)(v105.f32[1] - v103.f32[1]))
         + (float)((float)(v105.f32[0] - v104) * (float)(v108.f32[1] - v103.f32[1]));
    if (v118 == 0.0)
      goto LABEL_276;
    v119 = fabsf(v118);
    if (v119 == INFINITY)
    {
      v120 = v118 < 0.0;
    }
    else
    {
      v121 = v17 * (float)(v119 + 1.0);
      if (v119 < v121)
        goto LABEL_276;
      v120 = (float)(0.0 - v121) >= v118;
    }
    v122 = v109 + v110;
    if (v122 == 0.0)
    {
      if ((v120 & 1) != 0)
        goto LABEL_276;
      goto LABEL_161;
    }
    v123 = fabsf(v122);
    v124 = v122 <= 0.0;
    if (v123 != INFINITY)
      v124 = (float)((float)(v17 * (float)(v123 + 1.0)) + 0.0) >= v122;
    if (v120 != v124)
      goto LABEL_161;
LABEL_276:
    if (v228)
    {
      v97 = &v233;
      v200 = INFINITY;
      v72 = 1;
      do
      {
        v201 = (uint64_t *)((char *)v229 + 40 * v102);
        v202 = vsub_f32(v103, *(float32x2_t *)(v68 + 8 * *((_QWORD *)v224 + *(_QWORD *)(*(_QWORD *)(v201[1] + 16) + 32 * *v201))));
        v203 = vaddv_f32(vmul_f32(v202, v202));
        if (v203 < v200)
        {
          v72 = *v201;
          v97 = (uint64_t *)v201[1];
          v200 = v203;
        }
        v204 = v201[3];
        if (v204 != -1)
          v102 = v204;
      }
      while (v102 != 1);
      if (v97 != &v233)
      {
        v125 = 0;
        v211 = v72 == 1;
LABEL_170:
        v126 = *(_QWORD *)(v97[2] + 32 * v72 + 16);
        if (v126 == -1)
          v126 = v72;
        v127 = v97 == &v233 && v126 == 1;
        if (v127)
          v128 = *((_QWORD *)v235[0] + 2);
        else
          v128 = v126;
        if (v127)
          v129 = &v233;
        else
          v129 = v97;
        v130 = *a2;
        v131 = (*a2)[v65];
        v132 = v234;
        v133 = v236;
        if (v67 < v131)
        {
          v134 = (char *)v235[0] + 32 * v128;
          v137 = *((_QWORD *)v134 + 3);
          v135 = (unint64_t *)(v134 + 24);
          v136 = v137;
          v138 = *(v135 - 2);
          do
          {
            v139 = &v64[4 * v133[v132++]];
            v234 = v132;
            *v139 = v67;
            v139[2] = v138;
            v139[3] = v136;
            v140 = v139[1];
            v64[4 * v136 + 2] = v140;
            *v135 = v140;
            ++v67;
            v136 = v140;
          }
          while (v131 != v67);
          v67 = v66[v65];
        }
        v141 = v130[v65 - 1];
        v142 = (char *)&v64[4 * v128];
        v143 = (uint64_t *)(v142 + 24);
        if (v67 <= v141)
        {
          v145 = *v143;
          v144 = *((_QWORD *)v142 + 1);
        }
        else
        {
          v144 = *((_QWORD *)v142 + 1);
          v145 = *v143;
          do
          {
            v146 = &v64[4 * v133[v132++]];
            v234 = v132;
            *v146 = v141;
            v146[2] = v144;
            v146[3] = v145;
            v147 = (char *)&v64[4 * v145];
            v145 = v146[1];
            *((_QWORD *)v147 + 2) = v145;
            *v143 = v145;
            ++v141;
          }
          while (v67 != v141);
        }
        v148 = (char *)v224;
        v149 = v225;
        v150 = (v225 - (_BYTE *)v224) >> 3;
        v151 = &v64[4 * v133[v132]];
        v234 = v132 + 1;
        *v151 = v150;
        v151[2] = v144;
        v151[3] = v145;
        v152 = v151[1];
        v64[4 * v145 + 2] = v152;
        *v143 = v152;
        v153 = v226;
        v212 = v125;
        if (v149 < v226)
        {
          *(_QWORD *)v149 = v66[v65];
          v154 = v149 + 8;
          goto LABEL_207;
        }
        v155 = v150 + 1;
        if (!((unint64_t)(v150 + 1) >> 61))
        {
          v156 = v72;
          v157 = v226 - v148;
          if ((v226 - v148) >> 2 > v155)
            v155 = v157 >> 2;
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
            v158 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v158 = v155;
          if (v158)
          {
            v159 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v226, v158);
            v148 = (char *)v224;
            v149 = v225;
          }
          else
          {
            v159 = 0;
          }
          v160 = &v159[8 * v150];
          *(_QWORD *)v160 = v66[v65];
          v154 = v160 + 8;
          while (v149 != v148)
          {
            v161 = *((_QWORD *)v149 - 1);
            v149 -= 8;
            *((_QWORD *)v160 - 1) = v161;
            v160 -= 8;
          }
          v153 = &v159[8 * v158];
          v224 = v160;
          v225 = v154;
          v226 = v153;
          if (v148)
          {
            operator delete(v148);
            v153 = v226;
          }
          v72 = v156;
          v125 = v212;
LABEL_207:
          v225 = v154;
          v162 = (char *)v224;
          v163 = (v154 - (_BYTE *)v224) >> 3;
          v164 = v235[0];
          v165 = (uint64_t *)((char *)v235[0] + 32 * *((_QWORD *)v236 + v234));
          v166 = (char *)v235[0] + 32 * v128;
          v167 = *((_QWORD *)v166 + 3);
          ++v234;
          *v165 = v163;
          v165[2] = *((_QWORD *)v166 + 1);
          v165[3] = v167;
          v168 = v165[1];
          v164[4 * v167 + 2] = v168;
          *((_QWORD *)v166 + 3) = v168;
          v169 = *(_QWORD *)(v97[2] + 32 * v72);
          if (v154 < v153)
          {
            *(_QWORD *)v154 = *(_QWORD *)&v162[8 * v169];
            j = v154 + 8;
LABEL_223:
            v225 = j;
            if (!v125)
              goto LABEL_308;
            if (v211)
            {
              v97 = &v233;
              v178 = 1;
              goto LABEL_234;
            }
            if (v72 != *((_QWORD *)v235[0] + 2))
            {
LABEL_308:
              if (*(_QWORD *)(v97[2] + 32 * v72 + 24))
                v178 = *(_QWORD *)(v97[2] + 32 * v72 + 24);
              else
                v178 = v72;
              goto LABEL_234;
            }
            if (*((_QWORD *)v235[0] + 7) <= 1uLL)
              v178 = 1;
            else
              v178 = *((_QWORD *)v235[0] + 7);
            v97 = &v233;
LABEL_234:
            while (2)
            {
              if (v97 == &v233 && v178 == 1)
              {
                v97 = &v233;
                v180 = v235[0];
                v178 = 1;
              }
              else
              {
                v180 = (_QWORD *)v97[2];
                if (v180[4 * v178 + 2] != -1)
                  v178 = v180[4 * v178 + 2];
                if (v97 == &v233 && v178 == 1)
                {
                  v180 = v235[0];
                  v178 = *((_QWORD *)v235[0] + 2);
                  v97 = &v233;
                }
              }
              v181 = v97 + 2;
              v182 = *((_QWORD *)v224 + v180[4 * v178]);
              if (v178 == 1 && v97 == &v233)
              {
                v183 = 1;
                goto LABEL_252;
              }
              v183 = v180[4 * v178 + 2];
              if (v183 == -1)
                v183 = v178;
              v184 = (void **)(v97 + 2);
              if (v97 == &v233 && v183 == 1)
              {
                v183 = *((_QWORD *)v235[0] + 2);
LABEL_252:
                v184 = v235;
              }
              v185 = *((_QWORD *)v224 + *((_QWORD *)*v184 + 4 * v183));
              if (v97 == &v233)
              {
                if (v178 == 1)
                {
                  v186 = 1;
                }
                else
                {
                  if (v178 != *((_QWORD *)v235[0] + 2))
                    goto LABEL_254;
                  v186 = *((_QWORD *)v235[0] + 7);
                  if (v186 <= 1)
                    v186 = 1;
                }
                v187 = v235;
              }
              else
              {
LABEL_254:
                v186 = v180[4 * v178 + 3];
                if (!v186)
                  v186 = v178;
                v187 = (void **)(v97 + 2);
              }
              v188 = _simd_orient_pf2(*(simd_float2 *)(*a1 + 8 * *((_QWORD *)v224 + *((_QWORD *)*v187 + 4 * v186))), *(simd_float2 *)(*a1 + 8 * v182), *(simd_float2 *)(*a1 + 8 * v185));
              v189 = (uint64_t *)((char *)v221 + 16 * *(_QWORD *)(*v181 + 32 * v178));
              v190 = v189[1];
              if (v188 <= 0.0)
              {
                if (v190 == *((_QWORD *)&v220 + 1))
                {
                  v193 = *v189;
                  if (v193 == (_QWORD)v220)
                  {
                    v194 = v229;
                    v195 = (uint64_t *)((char *)v229 + 40 * *((_QWORD *)v231 + v228));
                    v196 = (char *)v229 + 40 * v193;
                    v197 = *((_QWORD *)v196 + 4);
                    ++v228;
                    *v195 = v178;
                    v195[1] = (uint64_t)v97;
                    v195[3] = *((_QWORD *)v196 + 2);
                    v195[4] = v197;
                    v198 = v195[2];
                    v194[5 * v197 + 3] = v198;
                    *((_QWORD *)v196 + 4) = v198;
                    v199 = (uint64_t *)((char *)v221 + 16 * *(_QWORD *)(v97[2] + 32 * v178));
                    *v199 = v198;
                    v199[1] = (uint64_t)&v227;
                  }
                }
              }
              else
              {
                v191 = *v189;
                if (v190 != *((_QWORD *)&v220 + 1) || v191 != (_QWORD)v220)
                {
                  geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::erase(&v227, v191);
                  *((_OWORD *)v221 + *(_QWORD *)(*v181 + 32 * v178)) = v220;
                }
              }
              if (v97 == v129 && v178 == v128)
                goto LABEL_274;
              continue;
            }
          }
          v171 = v163 + 1;
          if (!((unint64_t)(v163 + 1) >> 61))
          {
            v210 = v72;
            v172 = v153 - v162;
            if (v172 >> 2 > v171)
              v171 = v172 >> 2;
            if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8)
              v173 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v173 = v171;
            if (v173)
            {
              v174 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v226, v173);
              v175 = (char *)v224;
              v154 = v225;
            }
            else
            {
              v174 = 0;
              v175 = v162;
            }
            v176 = &v174[8 * v163];
            *(_QWORD *)v176 = *(_QWORD *)&v162[8 * v169];
            for (j = v176 + 8; v154 != v175; v176 -= 8)
            {
              v177 = *((_QWORD *)v154 - 1);
              v154 -= 8;
              *((_QWORD *)v176 - 1) = v177;
            }
            v224 = v176;
            v225 = j;
            v226 = &v174[8 * v173];
            if (v175)
              operator delete(v175);
            v72 = v210;
            v125 = v212;
            goto LABEL_223;
          }
        }
LABEL_305:
        abort();
      }
LABEL_167:
      if (v72 != 1)
      {
        v211 = 0;
        goto LABEL_169;
      }
    }
LABEL_274:
    ++v62;
  }
  while (v62 != v213);
LABEL_285:
  v209->__end_ = v209->__begin_;
  geom::triangulate_by_ear_clipping_helper<float>(&v233, (uint64_t *)&v224, *a1, a1[1], &v227, (uint64_t *)&v221, v209, v17);
  begin = v209->__begin_;
  v206 = (char *)v209->__end_ - (char *)v209->__begin_;
  if (v206)
  {
    v207 = v206 >> 2;
    v208 = v224;
    if (v207 <= 1)
      v207 = 1;
    do
    {
      *begin = v208[*begin];
      ++begin;
      --v207;
    }
    while (v207);
  }
LABEL_289:
  if (__p)
  {
    v215 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  if (v224)
  {
    v225 = (char *)v224;
    operator delete(v224);
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v236)
  {
    v237 = v236;
    operator delete(v236);
  }
  if (v235[0])
  {
    v235[1] = v235[0];
    operator delete(v235[0]);
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::const_node_iterator,std::allocator<std::allocator>>::resize(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(a1[1] - *a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      a1[1] = *a1 + 16 * a2;
  }
  else
  {
    std::vector<geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::const_node_iterator,std::allocator<std::allocator>>::__append(a1, a2 - v3, a3);
  }
}

__n64 geom::make_vec2<float>(double a1, float a2)
{
  __n64 result;

  result.n64_f32[1] = a2;
  return result;
}

void geom::triangulate_by_ear_clipping<double>(uint64_t *a1, unsigned int **a2, std::vector<unsigned int> *a3)
{
  unint64_t v6;
  unint64_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  double v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  char *v39;
  uint64_t i;
  unsigned int *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  double v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  float64x2_t v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  int64x2_t v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  float64x2_t v89;
  int64x2_t v90;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float64x2_t v99;
  double v100;
  float64x2_t v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  float64x2_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  int v112;
  int v113;
  double v114;
  BOOL v115;
  double v116;
  BOOL v117;
  double v118;
  double v119;
  double v121;
  _BOOL4 v122;
  BOOL v123;
  int v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  void **v182;
  uint64_t v183;
  unint64_t v184;
  void **v185;
  double v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v191;
  _QWORD *v192;
  uint64_t *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  double v198;
  uint64_t *v199;
  float64x2_t v200;
  double v201;
  uint64_t v202;
  std::vector<unsigned int>::pointer begin;
  uint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  std::vector<unsigned int> *v207;
  uint64_t *v208;
  BOOL v209;
  int v210;
  unint64_t v211;
  void *__p;
  uint64_t *v213;
  uint64_t *v214;
  void *v215;
  void *v216;
  uint64_t v217;
  __int128 v218;
  void *v219;
  void *v220;
  uint64_t v221;
  void *v222;
  char *v223;
  char *v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  void *v228;
  void *v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  void *v233[3];
  _QWORD *v234;
  _QWORD *v235;
  uint64_t *v236[3];

  v6 = (unint64_t)a2[1];
  v7 = a1[1];
  if (v7)
  {
    v8 = (float64x2_t *)*a1;
    v9 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v10 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v11 = 16 * v7;
    do
    {
      v12 = *v8++;
      v9 = vminnmq_f64(v12, v9);
      v10 = vmaxnmq_f64(v12, v10);
      v11 -= 16;
    }
    while (v11);
    v13 = vabsq_f64(v9);
    v14 = vabsq_f64(v10);
  }
  else
  {
    v13 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v14 = v13;
  }
  v15 = vpmaxq_f64(vmaxnmq_f64(v13, v14));
  if (v15 >= 1.0e-10)
    v16 = v15 * 1.0e-10;
  else
    v16 = 1.0e-20;
  if (v6 == 1)
  {
    if (v7 == **a2)
    {
      geom::triangulate_by_ear_clipping<double>(a1, a3);
      return;
    }
    goto LABEL_64;
  }
  if (!v6 || (v17 = v6 - 1, v7 + 2 * (v6 - 1) <= 2))
  {
LABEL_64:
    a3->__end_ = a3->__begin_;
    return;
  }
  geom::fixed_pool_list<unsigned long>::fixed_pool_list((uint64_t)&v231, v7 + 2 * v17);
  geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::fixed_pool_list(&v225, v7 + 2 * v17);
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v219 = 0;
  v220 = 0;
  v221 = 0;
  *(_QWORD *)&v218 = 1;
  *((_QWORD *)&v218 + 1) = &v225;
  std::vector<unsigned long long>::reserve(&v222, v7 + 2 * v17);
  std::vector<unsigned long>::resize((uint64_t)&v222, v7);
  if (v7)
  {
    v18 = 0;
    v19 = v222;
    do
    {
      v19[v18] = v18;
      ++v18;
    }
    while (v7 != v18);
  }
  std::vector<geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::const_node_iterator,std::allocator<std::allocator>>::resize(&v219, v7 + 2 * v17, &v218);
  v20 = **a2;
  v21 = v233[0];
  if ((_DWORD)v20)
  {
    v22 = 0;
    v23 = *((_QWORD *)v233[0] + 5);
    v24 = *((_QWORD *)v233[0] + 7);
    v25 = (char *)&v234[v232];
    v26 = v232 + 1;
    do
    {
      v27 = &v21[4 * *(_QWORD *)&v25[8 * v22]];
      v232 = v26 + v22;
      *v27 = v22;
      v27[2] = v23;
      v27[3] = v24;
      v28 = v27[1];
      v21[4 * v24 + 2] = v28;
      v21[7] = v28;
      ++v22;
      v24 = v28;
    }
    while (v20 != v22);
  }
  v29 = v21[2];
  while (v29 != 1)
  {
    v30 = &v21[4 * v29];
    v31 = v30[2];
    if (v31 == -1)
      v31 = v29;
    if (v31 == 1)
      v31 = v21[2];
    if (v29 == v21[2])
    {
      v32 = v21[7];
      if (v32 <= 1)
        v32 = 1;
    }
    else
    {
      v32 = v30[3];
      if (!v32)
        v32 = v29;
    }
    if (_simd_orient_pd2(*(simd_double2 *)(*a1 + 16 * *((_QWORD *)v222 + v21[4 * v32])), *(simd_double2 *)(*a1 + 16 * *((_QWORD *)v222 + *v30)), *(simd_double2 *)(*a1 + 16 * *((_QWORD *)v222 + v21[4 * v31]))) <= 0.0)
    {
      v33 = v227;
      v34 = (unint64_t *)((char *)v227 + 40 * *((_QWORD *)v229 + v226));
      v35 = (char *)v227 + 40 * v218;
      v36 = *((_QWORD *)v35 + 4);
      ++v226;
      *v34 = v29;
      v34[1] = (unint64_t)&v231;
      v34[3] = *((_QWORD *)v35 + 2);
      v34[4] = v36;
      v37 = v34[2];
      v33[5 * v36 + 3] = v37;
      *((_QWORD *)v35 + 4) = v37;
      v38 = (unint64_t *)((char *)v219 + 16 * *((_QWORD *)v233[0] + 4 * v29));
      *v38 = v37;
      v38[1] = (unint64_t)&v225;
    }
    v21 = v233[0];
    if (*((_QWORD *)v233[0] + 4 * v29 + 2) != -1)
      v29 = *((_QWORD *)v233[0] + 4 * v29 + 2);
  }
  v215 = 0;
  v216 = 0;
  v217 = 0;
  std::vector<double>::__vallocate[abi:nn180100](&v215, v6);
  v39 = (char *)v216;
  bzero(v216, 8 * v6);
  v216 = &v39[8 * v6];
  __p = 0;
  v213 = 0;
  v214 = 0;
  std::vector<unsigned long long>::reserve(&__p, v6 - 1);
  for (i = 1; i != v6; ++i)
  {
    v41 = &(*a2)[i];
    v42 = *(v41 - 1);
    v43 = *v41;
    if (v42 + 2 >= v43 || v7 < v43)
    {
      a3->__end_ = a3->__begin_;
      goto LABEL_268;
    }
    v45 = v215;
    *((_QWORD *)v215 + i) = v42;
    v46 = *a1;
    v47 = *(double *)(*a1 + 16 * v42);
    do
    {
      v48 = *(double *)(v46 + 16 * v42);
      if (v47 < v48)
      {
        v45[i] = v42;
        v47 = v48;
      }
      ++v42;
    }
    while (v43 != v42);
    v49 = v213;
    if (v213 >= v214)
    {
      v51 = (uint64_t *)__p;
      v52 = ((char *)v213 - (_BYTE *)__p) >> 3;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 61)
        goto LABEL_284;
      v54 = (char *)v214 - (_BYTE *)__p;
      if (((char *)v214 - (_BYTE *)__p) >> 2 > v53)
        v53 = v54 >> 2;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
      {
        v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v214, v55);
        v51 = (uint64_t *)__p;
        v49 = v213;
      }
      else
      {
        v56 = 0;
      }
      v57 = (uint64_t *)&v56[8 * v52];
      *v57 = i;
      v50 = v57 + 1;
      while (v49 != v51)
      {
        v58 = *--v49;
        *--v57 = v58;
      }
      __p = v57;
      v213 = v50;
      v214 = (uint64_t *)&v56[8 * v55];
      if (v51)
        operator delete(v51);
    }
    else
    {
      *v213 = i;
      v50 = v49 + 1;
    }
    v213 = v50;
  }
  v208 = (uint64_t *)a2;
  v207 = a3;
  v59 = 126 - 2 * __clz(((char *)v50 - (_BYTE *)__p) >> 3);
  v236[0] = a1;
  v236[1] = (uint64_t *)&v215;
  if (v50 == __p)
    v60 = 0;
  else
    v60 = v59;
  std::__introsort<std::_ClassicAlgPolicy,void geom::triangulate_by_ear_clipping<double>(geom::slice<geom::vector_type<double,(unsigned char)2,void>::value> const&,geom::slice<unsigned int> const&,std::vector<unsigned int> &)::{lambda(unsigned long,unsigned long)#1} &,unsigned long *,false>((uint64_t)__p, v50, v236, v60, 1);
  if (v213 == __p)
    goto LABEL_264;
  v61 = 0;
  v62 = ((char *)v213 - (_BYTE *)__p) >> 3;
  v63 = v16 + 0.0;
  v64 = 0.0 - v16;
  if (v62 <= 1)
    v62 = 1;
  v211 = v62;
  do
  {
    v65 = v233[0];
    if (*((_QWORD *)v233[0] + 2) == 1)
      goto LABEL_252;
    v66 = *((_QWORD *)__p + v61);
    v67 = v215;
    v68 = *((_QWORD *)v215 + v66);
    v69 = *a1;
    v70 = *(float64x2_t *)(*a1 + 16 * v68);
    v71 = INFINITY;
    v72 = INFINITY;
    v73 = 1;
    v74 = *((_QWORD *)v233[0] + 2);
    do
    {
      v75 = (char *)v233[0] + 32 * v74;
      v76 = *((_QWORD *)v222 + *v75);
      v77 = v75[2];
      if (v77 == -1)
        v77 = v74;
      if (v77 == 1)
        v78 = *((_QWORD *)v233[0] + 2);
      else
        v78 = v77;
      v79 = *(float64x2_t *)(v69 + 16 * v76);
      v80 = *(float64x2_t *)(v69 + 16 * *((_QWORD *)v222 + *((_QWORD *)v233[0] + 4 * v78)));
      if ((vmovn_s64(vcgtq_f64(v79, v70)).u32[0] & 1) != 0 || (vmovn_s64(vcgtq_f64(v80, v70)).u8[0] & 1) != 0)
      {
        v81 = vsubq_f64(v80, v79);
        v82 = vsubq_f64(v79, v70);
        v83 = (int64x2_t)vmulq_f64(v81, v81);
        v84 = vaddvq_f64((float64x2_t)v83);
        if (fabs(v84) <= 2.22044605e-16)
        {
          if ((v82.f64[1] + -0.0 * v82.f64[0]) * (v82.f64[1] + -0.0 * v82.f64[0]) > 1.0e-12)
            goto LABEL_102;
          v86 = vaddvq_f64(vmulq_f64(v82, (float64x2_t)xmmword_2289B3FD0));
          v87 = 0.0;
        }
        else
        {
          v85 = v81.f64[1] + -0.0 * v81.f64[0];
          if (fabs(v85 * v85) <= v84 * 1.0e-12)
          {
            v88 = vmlad_n_f64(-v82.f64[1], 0.0, v82.f64[0]);
            if (fabs(v88 * v88) > vaddvq_f64(vmulq_f64(v82, v82)) * 1.0e-12)
              goto LABEL_102;
            v89 = vaddq_f64((float64x2_t)v83, (float64x2_t)vdupq_laneq_s64(v83, 1));
            v86 = vaddvq_f64(vmulq_f64(v82, (float64x2_t)xmmword_2289B3FD0));
            v90 = (int64x2_t)vmulq_f64(v81, vnegq_f64(v82));
            *(_QWORD *)&v87 = *(_OWORD *)&vdivq_f64(vaddq_f64((float64x2_t)v90, (float64x2_t)vdupq_laneq_s64(v90, 1)), v89);
          }
          else
          {
            v86 = vmlad_n_f64(-(v82.f64[1] * v81.f64[0]), v81.f64[1], v82.f64[0]) / v85;
            v87 = vmlad_n_f64(-v82.f64[1], 0.0, v82.f64[0]) / v85;
          }
        }
        v92 = v86 != 0.0 && v63 <= v86 && v86 < v71;
        if (v92 && (v87 == 0.0 || v64 <= v87) && (v87 == 1.0 || v16 + 1.0 >= v87))
        {
          v73 = v74;
          v72 = v87;
          v71 = v86;
        }
      }
LABEL_102:
      v74 = v77;
    }
    while (v77 != 1);
    if (v73 != 1)
    {
      if (fabs(v72) <= v16)
      {
        v123 = 0;
        v95 = &v231;
        v124 = 1;
        goto LABEL_148;
      }
      v93 = *((_QWORD *)v233[0] + 4 * v73 + 2);
      if (v93 == -1)
        v93 = v73;
      if (v93 == 1)
        v94 = *((_QWORD *)v233[0] + 2);
      else
        v94 = v93;
      v95 = &v231;
      if (v72 == 1.0 || fabs(v72 + -1.0) <= v16)
        goto LABEL_145;
      v96 = *((_QWORD *)v233[0] + 4 * v73);
      if (*(double *)(v69 + 16 * *((_QWORD *)v222 + v96)) >= *(double *)(v69
                                                                          + 16
                                                                          * *((_QWORD *)v222
                                                                            + *((_QWORD *)v233[0] + 4 * v94))))
        v97 = *((_QWORD *)v233[0] + 4 * v73);
      else
        v97 = *((_QWORD *)v233[0] + 4 * v94);
      v98 = *((_QWORD *)v227 + 3);
      if (v98 == 1)
      {
LABEL_142:
        if (v97 == v96)
          v94 = v73;
        v95 = &v231;
        goto LABEL_145;
      }
      v99 = *(float64x2_t *)(v69 + 16 * v68);
      v100 = v71 + v99.f64[0];
      v101 = *(float64x2_t *)(v69 + 16 * *((_QWORD *)v222 + v97));
      v102 = *(double *)(v69 + 16 * v68 + 8);
      *(_QWORD *)&v103 = *(_OWORD *)&vsubq_f64(v99, v101);
      v104 = *(double *)(v69 + 16 * *((_QWORD *)v222 + v97) + 8);
      v105 = *((_QWORD *)v227 + 3);
      while (1)
      {
        v106 = *((_QWORD *)v222
               + *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v227 + 5 * v105 + 1) + 16) + 32 * *((_QWORD *)v227 + 5 * v105)));
        v107 = *(float64x2_t *)(v69 + 16 * v106);
        v108 = *(double *)(v69 + 16 * v106 + 8);
        v109 = -(v102 - v104) * vsubq_f64(v107, v101).f64[0] + v103 * (v108 - v104);
        v110 = v108 - v102;
        v111 = -(v102 - v102) * vsubq_f64(v107, v99).f64[0] + (v100 - v99.f64[0]) * (v108 - v102);
        v112 = v109 != 0.0;
        if (v64 < v109)
          v112 = 0;
        v113 = v111 != 0.0;
        if (v64 < v111)
          v113 = 0;
        if (v112 == v113
          || ((v114 = fabs(v109), v109 != 0.0) ? (v115 = v114 > v16) : (v115 = 0),
              !v115 || ((v116 = fabs(v111), v111 != 0.0) ? (v117 = v116 > v16) : (v117 = 0), !v117)))
        {
          v118 = (v107.f64[0] - v100) * -(v104 - v102) + (v101.f64[0] - v100) * v110;
          v119 = fabs(v118);
          if (v118 == 0.0 || v119 <= v16)
            break;
          v121 = v109 + v111;
          v122 = v121 == 0.0;
          if (v63 >= v121)
            v122 = 1;
          if ((((v64 < v118) ^ v122) & 1) != 0)
            break;
        }
        if (*((_QWORD *)v227 + 5 * v105 + 3) != -1)
          v105 = *((_QWORD *)v227 + 5 * v105 + 3);
        if (v105 == 1)
          goto LABEL_142;
      }
      if (v226)
      {
        v95 = &v231;
        v198 = INFINITY;
        v73 = 1;
        do
        {
          v199 = (uint64_t *)((char *)v227 + 40 * v98);
          v200 = vsubq_f64(v99, *(float64x2_t *)(v69 + 16 * *((_QWORD *)v222 + *(_QWORD *)(*(_QWORD *)(v199[1] + 16) + 32 * *v199))));
          v201 = vaddvq_f64(vmulq_f64(v200, v200));
          if (v201 < v198)
          {
            v73 = *v199;
            v95 = (uint64_t *)v199[1];
            v198 = v201;
          }
          v202 = v199[3];
          if (v202 != -1)
            v98 = v202;
        }
        while (v98 != 1);
        if (v95 != &v231)
        {
          v124 = 0;
          v123 = v73 == 1;
LABEL_148:
          v125 = *(_QWORD *)(v95[2] + 32 * v73 + 16);
          if (v125 == -1)
            v125 = v73;
          v126 = v95 == &v231 && v125 == 1;
          if (v126)
            v127 = *((_QWORD *)v233[0] + 2);
          else
            v127 = v125;
          if (v126)
            v128 = &v231;
          else
            v128 = v95;
          v129 = *v208;
          v130 = *(unsigned int *)(*v208 + 4 * v66);
          v131 = v232;
          v132 = v234;
          if (v68 < v130)
          {
            v133 = (char *)v233[0] + 32 * v127;
            v136 = *((_QWORD *)v133 + 3);
            v134 = (unint64_t *)(v133 + 24);
            v135 = v136;
            v137 = *(v134 - 2);
            do
            {
              v138 = &v65[4 * v132[v131++]];
              v232 = v131;
              *v138 = v68;
              v138[2] = v137;
              v138[3] = v135;
              v139 = v138[1];
              v65[4 * v135 + 2] = v139;
              *v134 = v139;
              ++v68;
              v135 = v139;
            }
            while (v130 != v68);
            v68 = v67[v66];
          }
          v140 = *(unsigned int *)(v129 + 4 * v66 - 4);
          v141 = (char *)&v65[4 * v127];
          v142 = (uint64_t *)(v141 + 24);
          v209 = v123;
          if (v68 <= v140)
          {
            v144 = *v142;
            v143 = *((_QWORD *)v141 + 1);
          }
          else
          {
            v143 = *((_QWORD *)v141 + 1);
            v144 = *v142;
            do
            {
              v145 = &v65[4 * v132[v131++]];
              v232 = v131;
              *v145 = v140;
              v145[2] = v143;
              v145[3] = v144;
              v146 = (char *)&v65[4 * v144];
              v144 = v145[1];
              *((_QWORD *)v146 + 2) = v144;
              *v142 = v144;
              ++v140;
            }
            while (v68 != v140);
          }
          v147 = (char *)v222;
          v148 = v223;
          v149 = (v223 - (_BYTE *)v222) >> 3;
          v150 = &v65[4 * v132[v131]];
          v232 = v131 + 1;
          *v150 = v149;
          v150[2] = v143;
          v150[3] = v144;
          v151 = v150[1];
          v65[4 * v144 + 2] = v151;
          *v142 = v151;
          v152 = v224;
          v210 = v124;
          if (v148 < v224)
          {
            *(_QWORD *)v148 = v67[v66];
            v153 = v148 + 8;
            goto LABEL_185;
          }
          v154 = v149 + 1;
          if (!((unint64_t)(v149 + 1) >> 61))
          {
            v155 = v224 - v147;
            if ((v224 - v147) >> 2 > v154)
              v154 = v155 >> 2;
            if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
              v156 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v156 = v154;
            if (v156)
            {
              v157 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v224, v156);
              v147 = (char *)v222;
              v148 = v223;
            }
            else
            {
              v157 = 0;
            }
            v158 = &v157[8 * v149];
            *(_QWORD *)v158 = v67[v66];
            v153 = v158 + 8;
            while (v148 != v147)
            {
              v159 = *((_QWORD *)v148 - 1);
              v148 -= 8;
              *((_QWORD *)v158 - 1) = v159;
              v158 -= 8;
            }
            v152 = &v157[8 * v156];
            v222 = v158;
            v223 = v153;
            v224 = v152;
            if (v147)
            {
              operator delete(v147);
              v152 = v224;
            }
            v124 = v210;
LABEL_185:
            v223 = v153;
            v160 = (char *)v222;
            v161 = (v153 - (_BYTE *)v222) >> 3;
            v162 = v233[0];
            v163 = (uint64_t *)((char *)v233[0] + 32 * v234[v232]);
            v164 = (char *)v233[0] + 32 * v127;
            v165 = *((_QWORD *)v164 + 3);
            ++v232;
            *v163 = v161;
            v163[2] = *((_QWORD *)v164 + 1);
            v163[3] = v165;
            v166 = v163[1];
            v162[4 * v165 + 2] = v166;
            *((_QWORD *)v164 + 3) = v166;
            v167 = *(_QWORD *)(v95[2] + 32 * v73);
            if (v153 < v152)
            {
              *(_QWORD *)v153 = *(_QWORD *)&v160[8 * v167];
              v168 = v153 + 8;
              goto LABEL_202;
            }
            v169 = v161 + 1;
            if (!((unint64_t)(v161 + 1) >> 61))
            {
              v170 = v152 - v160;
              if (v170 >> 2 > v169)
                v169 = v170 >> 2;
              if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
                v171 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v171 = v169;
              if (v171)
              {
                v172 = *(_QWORD *)(v95[2] + 32 * v73);
                v173 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v224, v171);
                v167 = v172;
                v174 = (char *)v222;
                v153 = v223;
              }
              else
              {
                v173 = 0;
                v174 = v160;
              }
              v175 = &v173[8 * v161];
              *(_QWORD *)v175 = *(_QWORD *)&v160[8 * v167];
              v168 = v175 + 8;
              while (v153 != v174)
              {
                v176 = *((_QWORD *)v153 - 1);
                v153 -= 8;
                *((_QWORD *)v175 - 1) = v176;
                v175 -= 8;
              }
              v222 = v175;
              v223 = v168;
              v224 = &v173[8 * v171];
              if (v174)
                operator delete(v174);
              v124 = v210;
LABEL_202:
              v223 = v168;
              if (!v124)
                goto LABEL_287;
              if (v209)
              {
                v95 = &v231;
                v73 = 1;
                goto LABEL_212;
              }
              if (v73 == *((_QWORD *)v233[0] + 2))
              {
                if (*((_QWORD *)v233[0] + 7) <= 1uLL)
                  v73 = 1;
                else
                  v73 = *((_QWORD *)v233[0] + 7);
                v95 = &v231;
              }
              else
              {
LABEL_287:
                if (*(_QWORD *)(v95[2] + 32 * v73 + 24))
                  v73 = *(_QWORD *)(v95[2] + 32 * v73 + 24);
              }
LABEL_212:
              while (2)
              {
                if (v95 == &v231 && v73 == 1)
                {
                  v95 = &v231;
                  v178 = v233[0];
                  v73 = 1;
                }
                else
                {
                  v178 = (_QWORD *)v95[2];
                  if (v178[4 * v73 + 2] != -1)
                    v73 = v178[4 * v73 + 2];
                  if (v95 == &v231 && v73 == 1)
                  {
                    v178 = v233[0];
                    v73 = *((_QWORD *)v233[0] + 2);
                    v95 = &v231;
                  }
                }
                v179 = v95 + 2;
                v180 = *((_QWORD *)v222 + v178[4 * v73]);
                if (v73 == 1 && v95 == &v231)
                {
                  v181 = 1;
                  goto LABEL_230;
                }
                v181 = v178[4 * v73 + 2];
                if (v181 == -1)
                  v181 = v73;
                v182 = (void **)(v95 + 2);
                if (v95 == &v231 && v181 == 1)
                {
                  v181 = *((_QWORD *)v233[0] + 2);
LABEL_230:
                  v182 = v233;
                }
                v183 = *((_QWORD *)v222 + *((_QWORD *)*v182 + 4 * v181));
                if (v95 == &v231)
                {
                  if (v73 == 1)
                  {
                    v184 = 1;
                  }
                  else
                  {
                    if (v73 != *((_QWORD *)v233[0] + 2))
                      goto LABEL_232;
                    v184 = *((_QWORD *)v233[0] + 7);
                    if (v184 <= 1)
                      v184 = 1;
                  }
                  v185 = v233;
                }
                else
                {
LABEL_232:
                  v184 = v178[4 * v73 + 3];
                  if (!v184)
                    v184 = v73;
                  v185 = (void **)(v95 + 2);
                }
                v186 = _simd_orient_pd2(*(simd_double2 *)(*a1 + 16 * *((_QWORD *)v222 + *((_QWORD *)*v185 + 4 * v184))), *(simd_double2 *)(*a1 + 16 * v180), *(simd_double2 *)(*a1 + 16 * v183));
                v187 = (uint64_t *)((char *)v219 + 16 * *(_QWORD *)(*v179 + 32 * v73));
                v188 = v187[1];
                if (v186 <= 0.0)
                {
                  if (v188 == *((_QWORD *)&v218 + 1))
                  {
                    v191 = *v187;
                    if (v191 == (_QWORD)v218)
                    {
                      v192 = v227;
                      v193 = (uint64_t *)((char *)v227 + 40 * *((_QWORD *)v229 + v226));
                      v194 = (char *)v227 + 40 * v191;
                      v195 = *((_QWORD *)v194 + 4);
                      ++v226;
                      *v193 = v73;
                      v193[1] = (uint64_t)v95;
                      v193[3] = *((_QWORD *)v194 + 2);
                      v193[4] = v195;
                      v196 = v193[2];
                      v192[5 * v195 + 3] = v196;
                      *((_QWORD *)v194 + 4) = v196;
                      v197 = (uint64_t *)((char *)v219 + 16 * *(_QWORD *)(v95[2] + 32 * v73));
                      *v197 = v196;
                      v197[1] = (uint64_t)&v225;
                    }
                  }
                }
                else
                {
                  v189 = *v187;
                  if (v188 != *((_QWORD *)&v218 + 1) || v189 != (_QWORD)v218)
                  {
                    geom::fixed_pool_list<geom::fixed_pool_list<unsigned long>::const_node_iterator>::erase(&v225, v189);
                    *((_OWORD *)v219 + *(_QWORD *)(*v179 + 32 * v73)) = v218;
                  }
                }
                if (v95 == v128 && v73 == v127)
                  goto LABEL_252;
                continue;
              }
            }
          }
LABEL_284:
          abort();
        }
        v94 = v73;
LABEL_145:
        if (v94 != 1)
        {
          v123 = 0;
          v124 = 1;
          v73 = v94;
          goto LABEL_148;
        }
      }
    }
LABEL_252:
    ++v61;
  }
  while (v61 != v211);
LABEL_264:
  v207->__end_ = v207->__begin_;
  geom::triangulate_by_ear_clipping_helper<double>(&v231, (uint64_t *)&v222, *a1, a1[1], &v225, (uint64_t *)&v219, v207, v16);
  begin = v207->__begin_;
  v204 = (char *)v207->__end_ - (char *)v207->__begin_;
  if (v204)
  {
    v205 = v204 >> 2;
    v206 = v222;
    if (v205 <= 1)
      v205 = 1;
    do
    {
      *begin = v206[*begin];
      ++begin;
      --v205;
    }
    while (v205);
  }
LABEL_268:
  if (__p)
  {
    v213 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v222)
  {
    v223 = (char *)v222;
    operator delete(v222);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v233[0])
  {
    v233[1] = v233[0];
    operator delete(v233[0]);
  }
}

