uint64_t geom::arap_deformer<float>::arap_deformer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  v5 = geom::ddg_evaluator<float>::ddg_evaluator();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v5 + 64, a3, a3);
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t geom::arap_deformer<float>::arap_deformer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = geom::ddg_evaluator<float>::ddg_evaluator();
  v5 = (a2[1] - *a2) >> 4;
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 64, v5, v5);
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t geom::arap_deformer<float>::is_initialized(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 320);
}

uint64_t **geom::arap_deformer<float>::add_constraints(uint64_t **result, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  _DWORD *v10;

  v3 = result;
  v4 = *a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_OWORD *)(*a2 + 16 * v8);
      v10 = (_DWORD *)(v4 + v7);
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v3 + 41, (unsigned int *)(v4 + v7), (uint64_t)&std::piecewise_construct, &v10);
      *((_OWORD *)result + 3) = v9;
      ++v8;
      v4 = *a3;
      v7 += 4;
    }
    while (v8 < (a3[1] - *a3) >> 2);
  }
  *((_BYTE *)v3 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<float>::add_constraints(uint64_t **result, __int128 *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t **v5;
  uint64_t v6;
  __int128 v9;
  _DWORD *v10;

  v5 = result;
  if (a5)
  {
    v6 = a5;
    do
    {
      v9 = *a2++;
      v10 = a4;
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v5 + 41, a4, (uint64_t)&std::piecewise_construct, &v10);
      *((_OWORD *)result + 3) = v9;
      ++a4;
      --v6;
    }
    while (v6);
  }
  *((_BYTE *)v5 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<float>::add_static_constraints(uint64_t a1, uint64_t *a2)
{
  uint64_t **result;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  _DWORD *v10;

  result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check();
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_OWORD *)&(*v6)[2 * *(unsigned int *)(v5 + v7)];
      v10 = (_DWORD *)(v5 + v7);
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)(v5 + v7), (uint64_t)&std::piecewise_construct, &v10);
      *((_OWORD *)result + 3) = v9;
      ++v8;
      v5 = *a2;
      v7 += 4;
    }
    while (v8 < (a2[1] - *a2) >> 2);
  }
  *(_BYTE *)(a1 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<float>::add_static_constraints(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t **result;
  uint64_t **v7;
  __int128 v8;
  _DWORD *v9;

  result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a3)
  {
    v7 = result;
    do
    {
      v8 = *(_OWORD *)&(*v7)[2 * *a2];
      v9 = a2;
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), a2, (uint64_t)&std::piecewise_construct, &v9);
      *((_OWORD *)result + 3) = v8;
      ++a2;
      --a3;
    }
    while (a3);
  }
  *(_BYTE *)(a1 + 320) = 0;
  return result;
}

void geom::arap_deformer<float>::clear_constraints(uint64_t a1)
{
  _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1 + 328, *(_QWORD **)(a1 + 336));
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_BYTE *)(a1 + 320) = 0;
}

BOOL geom::arap_deformer<float>::initialize(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned int j;
  unsigned int v23;
  _BOOL8 result;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  geom::arap_deformer<float>::reset(a1);
  if (*(_QWORD *)(a1 + 400) == *(_QWORD *)(a1 + 408))
  {
    v2 = geom::ddg_evaluator<float>::vertex_count(a1);
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::resize((uint64_t *)(a1 + 400), v2);
    if (geom::ddg_evaluator<float>::vertex_count(a1))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        geom::ddg_evaluator<float>::compute_laplacian_stencil((uint64_t *)a1, v4, 1, (uint64_t)__p);
        v5 = *(_QWORD *)(a1 + 400);
        v6 = v5 + 48 * v3;
        v7 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)(v6 + 8) = v7;
          operator delete(v7);
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
        }
        *(_OWORD *)v6 = *(_OWORD *)__p;
        *(_QWORD *)(v6 + 16) = v26;
        __p[0] = 0;
        __p[1] = 0;
        v26 = 0;
        v8 = v5 + 48 * v3;
        v11 = *(void **)(v8 + 24);
        v10 = (_QWORD *)(v8 + 24);
        v9 = v11;
        if (v11)
        {
          *(_QWORD *)(v5 + 48 * v3 + 32) = v9;
          operator delete(v9);
          *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
        }
        *(_OWORD *)v10 = v27;
        *(_QWORD *)(v5 + 48 * v3 + 40) = v28;
        v27 = 0uLL;
        v28 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = ++v4;
      }
      while (geom::ddg_evaluator<float>::vertex_count(a1) > (unint64_t)v4);
    }
  }
  v12 = *(_QWORD *)(a1 + 400);
  if (*(_QWORD *)(a1 + 408) != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      for (i = *(uint64_t **)(a1 + 336); i; i = (uint64_t *)*i)
      {
        v16 = *((_DWORD *)i + 8);
        if (v14 >= v16)
        {
          if (v16 >= v14)
          {
            geom::sparse_linear_solver<float>::add_entry(a1 + 64, v14, v14, 1.0);
            goto LABEL_29;
          }
          ++i;
        }
      }
      v17 = (uint64_t *)(v12 + 48 * v13);
      geom::sparse_linear_solver<float>::add_entry(a1 + 64, v14, v14, -*(float *)v17[3]);
      v19 = *v17;
      v18 = v17[1];
      if ((unint64_t)(v18 - *v17) >= 5)
      {
        v20 = 1;
        do
        {
          v21 = *(uint64_t **)(a1 + 336);
          for (j = *(_DWORD *)(v19 + 4 * v20); v21; v21 = (uint64_t *)*v21)
          {
            v23 = *((_DWORD *)v21 + 8);
            if (j >= v23)
            {
              if (v23 >= j)
                goto LABEL_26;
              ++v21;
            }
          }
          geom::sparse_linear_solver<float>::add_entry(a1 + 64, v14, j, -*(float *)(v17[3] + 4 * v20));
          v19 = *v17;
          v18 = v17[1];
LABEL_26:
          v20 = (v20 + 1);
        }
        while (v20 < (v18 - v19) >> 2);
      }
LABEL_29:
      v12 = *(_QWORD *)(a1 + 400);
      v13 = ++v14;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 408) - v12) >> 4) > v14);
  }
  result = geom::sparse_linear_solver<float>::factor((unsigned int *)(a1 + 64), 0);
  *(_BYTE *)(a1 + 320) = 1;
  return result;
}

void geom::arap_deformer<float>::reset(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  LODWORD(v4) = 1065353216;
  DWORD1(v5) = 1065353216;
  DWORD2(v6) = 1065353216;
  geom::sparse_linear_solver<float>::clear_enrties(a1 + 64);
  v2 = geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a1 + 352 != v2)
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l((char *)(a1 + 352), *(char **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 4);
  v3 = geom::ddg_evaluator<float>::vertex_count(a1);
  std::vector<simd_float3x3>::resize(a1 + 376, v3, &v4);
  *(_BYTE *)(a1 + 320) = 0;
}

void std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<geom::ddg_evaluator<float>::stencil>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void geom::arap_deformer<float>::deform(_QWORD *a1, unsigned int a2, float a3)
{
  unsigned int v6;
  float v7;
  float v8;
  unsigned int v9;

  if (a2)
  {
    v6 = 0;
    v7 = 0.0;
    do
    {
      geom::arap_deformer<float>::deform_step((uint64_t)a1);
      if (a3 <= 0.0)
      {
        v9 = v6 + 1;
        v8 = v7;
      }
      else
      {
        v8 = geom::arap_deformer<float>::energy(a1);
        v9 = v6 + 1;
        if (v6 && v9 < a2 && (float)(vabds_f32(v8, v7) / (float)(v8 + a3)) < a3)
          return;
      }
      v6 = v9;
      v7 = v8;
    }
    while (v9 != a2);
  }
}

void geom::arap_deformer<float>::deform_step(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  __int32 v19;
  __int32 v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t *v48;
  uint64_t v49;
  unsigned __int32 v50;
  uint64_t *i;
  unsigned __int32 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  float v63;
  uint64_t **v64;
  float v65;
  uint64_t **v66;
  float v67;
  uint64_t **v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t **v73;
  uint64_t **v74;
  uint64_t **v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t j;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  __int32 v84;
  __int32 v85;
  __int32 v86;
  __int32 v87;
  __int32 v88;
  __int32 v89;
  uint64_t v90;
  unint64_t v91;
  __int32 v92;
  __int32 v93;
  __int32 v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  __int128 v101;
  uint64_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  __int128 v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;

  v5 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  v82 = *(_QWORD *)(a1 + 376);
  v83 = *(_QWORD *)(a1 + 384);
  v91 = (v83 - v82) / 48;
  if (v83 != v82)
  {
    v6 = 0;
    v7 = (v83 - v82) / 48;
    if (v91 <= 1)
      v7 = 1;
    v90 = v7;
    do
    {
      v111 = 0u;
      v112 = 0u;
      v110 = 0u;
      v8 = *(_QWORD *)(a1 + 400);
      v9 = (uint64_t *)(v8 + 48 * v6);
      v10 = *v9;
      v11 = v96;
      v12 = v97;
      v13 = v95;
      if ((unint64_t)(v9[1] - *v9) >= 5)
      {
        v14 = *(_QWORD *)(a1 + 352);
        v15 = (_QWORD *)(v8 + 48 * v6 + 24);
        v16 = 2;
        v17 = *v5;
        v18 = 1;
        v19 = v96.i32[3];
        v20 = v97.i32[3];
        do
        {
          v21 = *(unsigned int *)(v10 + 4 * v18);
          v22 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v6), *(float32x4_t *)(v17 + 16 * v21));
          v23 = vsubq_f32(*(float32x4_t *)(v14 + 16 * v6), *(float32x4_t *)(v14 + 16 * v21));
          v24 = *(float *)(*v15 + 4 * v18);
          v12 = vmulq_n_f32(vmulq_n_f32(v22, v23.f32[0]), v24);
          v11 = vmulq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)v23.f32, 1), v24);
          v13 = vmulq_n_f32(vmulq_laneq_f32(v22, v23, 2), v24);
          v25 = vaddq_f32(v110, v12);
          v12.i32[3] = v20;
          v26 = vaddq_f32(v111, v11);
          v11.i32[3] = v19;
          v27 = vaddq_f32(v112, v13);
          v13.i32[3] = v95.i32[3];
          v110.i32[2] = v25.i32[2];
          v111.i32[2] = v26.i32[2];
          v110.i64[0] = v25.i64[0];
          v111.i64[0] = v26.i64[0];
          v112.i32[2] = v27.i32[2];
          v112.i64[0] = v27.i64[0];
          v18 = v16;
          v10 = *v9;
          ++v16;
          v19 = v11.i32[3];
          v20 = v12.i32[3];
        }
        while (v18 < (v9[1] - *v9) >> 2);
      }
      v95 = v13;
      v96 = v11;
      v97 = v12;
      *(_QWORD *)((char *)&v109 + 4) = 0;
      LODWORD(v109) = 0;
      geom::compute_svd_3x3<float>((int8x16_t *)&v110, &v106, &v109, &v103, v2, v3, v4);
      v28 = 0;
      v29 = (float32x4_t)vzip1q_s32(v103, v104);
      v29.i32[2] = v105.i32[0];
      v30 = (float32x4_t)vzip2q_s32(vzip1q_s32(v103, v105), vdupq_lane_s32(*(int32x2_t *)v104.i8, 1));
      v31 = (float32x4_t)vzip2q_s32(v103, v104);
      v31.i32[2] = v105.i32[2];
      v32 = vzip1q_s32(v106, v108);
      v33 = vzip1q_s32(v32, v107);
      v34 = vzip1q_s32(vzip2q_s32(v106, v108), vdupq_laneq_s32(v107, 2));
      v35 = v33;
      v35.i32[3] = v92;
      v36 = vzip2q_s32(v32, vdupq_lane_s32(*(int32x2_t *)v107.i8, 1));
      v37 = v36;
      v37.i32[3] = v93;
      v38 = v34;
      v38.i32[3] = v94;
      v113 = v35;
      v114 = v37;
      v115 = v38;
      do
      {
        *(float32x4_t *)((char *)&v98 + v28) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)((char *)&v113 + v28))), v30, *(float32x2_t *)&v113.i8[v28], 1), v31, *(float32x4_t *)((char *)&v113 + v28), 2);
        v28 += 16;
      }
      while (v28 != 48);
      v39 = v98;
      v40 = (int32x4_t)v99;
      v41 = (int32x4_t)v100;
      v42 = vmulq_f32(v98, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL), v100, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), v99, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), v100, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL), v99, 8uLL)));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0] >= 0.0)
      {
        v39.i32[3] = 0;
        v40.i32[3] = 0;
        v41.i32[3] = 0;
      }
      else
      {
        v43 = 0;
        v33.i32[3] = v84;
        v36.i32[3] = v85;
        v34.i32[3] = v86;
        v113 = v33;
        v114 = v36;
        v115 = v34;
        do
        {
          *(float32x4_t *)((char *)&v98 + v43) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2289B3FA0, COERCE_FLOAT(*(_OWORD *)((char *)&v113 + v43))), (float32x4_t)xmmword_2289B3FB0, *(float32x2_t *)&v113.i8[v43], 1), (float32x4_t)xmmword_2289B3FC0, *(float32x4_t *)((char *)&v113 + v43), 2);
          v43 += 16;
        }
        while (v43 != 48);
        v44 = 0;
        v45 = v98;
        v46 = v99;
        v45.i32[3] = v87;
        v46.i32[3] = v88;
        v47 = v100;
        v47.i32[3] = v89;
        v113 = (int32x4_t)v45;
        v114 = (int32x4_t)v46;
        v115 = (int32x4_t)v47;
        do
        {
          *(float32x4_t *)((char *)&v98 + v44) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)((char *)&v113 + v44))), v30, *(float32x2_t *)&v113.i8[v44], 1), v31, *(float32x4_t *)((char *)&v113 + v44), 2);
          v44 += 16;
        }
        while (v44 != 48);
        v39 = v98;
        v40 = (int32x4_t)v99;
        v41 = (int32x4_t)v100;
      }
      v48 = (float32x4_t *)(*(_QWORD *)(a1 + 376) + 48 * v6++);
      *v48 = v39;
      v48[1] = (float32x4_t)v40;
      v48[2] = (float32x4_t)v41;
    }
    while (v6 != v90);
  }
  v102 = 0;
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v113.i32[0] = 0;
  std::vector<float>::resize((uint64_t)&v98, v91, &v113);
  v113.i32[0] = 0;
  std::vector<float>::resize((uint64_t)&v99.i64[1], v91, &v113);
  v113.i32[0] = 0;
  std::vector<float>::resize((uint64_t)&v101, v91, &v113);
  v110.i32[0] = 0;
  if (v83 == v82)
  {
    v79 = (unsigned int *)(a1 + 64);
    geom::sparse_linear_solver<float>::solve(v79, (uint64_t)&v98);
    geom::sparse_linear_solver<float>::solve(v79, (uint64_t)&v99.i64[1]);
    geom::sparse_linear_solver<float>::solve(v79, (uint64_t)&v101);
    goto LABEL_44;
  }
  v49 = 0;
  v50 = 0;
  do
  {
    for (i = *(uint64_t **)(a1 + 336); i; i = (uint64_t *)*i)
    {
      v52 = *((_DWORD *)i + 8);
      if (v50 >= v52)
      {
        if (v52 >= v50)
        {
          v113.i64[0] = (uint64_t)&v110;
          v73 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)&v110, (uint64_t)&std::piecewise_construct, &v113);
          *(_DWORD *)(v98.i64[0] + 4 * v110.u32[0]) = *((_DWORD *)v73 + 12);
          v113.i64[0] = (uint64_t)&v110;
          v74 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)&v110, (uint64_t)&std::piecewise_construct, &v113);
          *(_DWORD *)(v99.i64[1] + 4 * v110.u32[0]) = *((_DWORD *)v74 + 13);
          v113.i64[0] = (uint64_t)&v110;
          v75 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)&v110, (uint64_t)&std::piecewise_construct, &v113);
          v50 = v110.i32[0];
          *(_DWORD *)(v101 + 4 * v110.u32[0]) = *((_DWORD *)v75 + 14);
          goto LABEL_38;
        }
        ++i;
      }
    }
    v53 = *(_QWORD *)(a1 + 400);
    v54 = (uint64_t *)(v53 + 48 * v49);
    v55 = *v54;
    v56 = v54[1];
    if ((unint64_t)(v56 - *v54) < 5)
      goto LABEL_38;
    v57 = (_QWORD *)(v53 + 48 * v49 + 24);
    v58 = 1;
    do
    {
      v59 = *(uint64_t **)(a1 + 336);
      if (!v59)
        goto LABEL_35;
      v60 = (unsigned int *)(v55 + 4 * v58);
      v61 = *v60;
      while (1)
      {
        v62 = *((_DWORD *)v59 + 8);
        if (v61 >= v62)
          break;
LABEL_32:
        v59 = (uint64_t *)*v59;
        if (!v59)
          goto LABEL_35;
      }
      if (v62 < v61)
      {
        ++v59;
        goto LABEL_32;
      }
      v63 = *(float *)(*v57 + 4 * v58);
      v113.i64[0] = v55 + 4 * v58;
      v64 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), v60, (uint64_t)&std::piecewise_construct, &v113);
      *(float *)(v98.i64[0] + 4 * v110.u32[0]) = *(float *)(v98.i64[0] + 4 * v110.u32[0])
                                                 + (float)(v63 * *((float *)v64 + 12));
      v65 = *(float *)(*v57 + 4 * v58);
      v113.i64[0] = *v54 + 4 * v58;
      v66 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v113.i64[0], (uint64_t)&std::piecewise_construct, &v113);
      *(float *)(v99.i64[1] + 4 * v110.u32[0]) = *(float *)(v99.i64[1] + 4 * v110.u32[0])
                                                 + (float)(v65 * *((float *)v66 + 13));
      v67 = *(float *)(*v57 + 4 * v58);
      v113.i64[0] = *v54 + 4 * v58;
      v68 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v113.i64[0], (uint64_t)&std::piecewise_construct, &v113);
      v50 = v110.i32[0];
      *(float *)(v101 + 4 * v110.u32[0]) = *(float *)(v101 + 4 * v110.u32[0]) + (float)(v67 * *((float *)v68 + 14));
      v55 = *v54;
      v56 = v54[1];
LABEL_35:
      v69 = *(unsigned int *)(v55 + 4 * v58);
      v70 = vsubq_f32(*(float32x4_t *)(*v5 + 16 * v50), *(float32x4_t *)(*v5 + 16 * v69));
      v71 = *(_QWORD *)(a1 + 376);
      v72 = vmulq_n_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vaddq_f32(*(float32x4_t *)(v71 + 48 * v50), *(float32x4_t *)(v71 + 48 * v69)), v70.f32[0]), vaddq_f32(*(float32x4_t *)(v71 + 48 * v50 + 16), *(float32x4_t *)(v71 + 48 * v69 + 16)), *(float32x2_t *)v70.f32, 1), vaddq_f32(*(float32x4_t *)(v71 + 48 * v50 + 32), *(float32x4_t *)(v71 + 48 * v69 + 32)), v70, 2), *(float *)(*v57 + 4 * v58) * 0.5);
      *(float *)(v98.i64[0] + 4 * v50) = *(float *)(v98.i64[0] + 4 * v50) + v72.f32[0];
      *(float *)(v99.i64[1] + 4 * v50) = *(float *)(v99.i64[1] + 4 * v50) + v72.f32[1];
      *(float *)(v101 + 4 * v50) = v72.f32[2] + *(float *)(v101 + 4 * v50);
      v58 = (v58 + 1);
    }
    while (v58 < (v56 - v55) >> 2);
LABEL_38:
    v110.i32[0] = ++v50;
    v49 = v50;
  }
  while (v91 > v50);
  geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 64), (uint64_t)&v98);
  geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 64), (uint64_t)&v99.i64[1]);
  geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 64), (uint64_t)&v101);
  v77 = 0;
  v78 = (v83 - v82) / 48;
  if (v91 <= 1)
    v78 = 1;
  do
  {
    LODWORD(v76) = *(_DWORD *)(v98.i64[0] + 4 * v77);
    DWORD1(v76) = *(_DWORD *)(v99.i64[1] + 4 * v77);
    DWORD2(v76) = *(_DWORD *)(v101 + 4 * v77);
    *(_OWORD *)(*(_QWORD *)(a1 + 352) + 16 * v77++) = v76;
  }
  while (v78 != v77);
LABEL_44:
  for (j = 0; j != -72; j -= 24)
  {
    v81 = *(void **)((char *)&v101 + j);
    if (v81)
    {
      *(_QWORD *)((char *)&v101 + j + 8) = v81;
      operator delete(v81);
    }
  }
}

float geom::arap_deformer<float>::energy(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;

  v2 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check();
  v3 = *v2;
  v4 = v2[1];
  v5 = v4 - *v2;
  if (v4 == *v2)
    return 0.0;
  v6 = 0;
  v7 = v5 >> 4;
  v8 = a1[50];
  if (v7 <= 1)
    v7 = 1;
  result = 0.0;
  do
  {
    v10 = *(_QWORD *)(v8 + 48 * v6);
    v11 = *(_QWORD *)(v8 + 48 * v6 + 8) - v10;
    if ((unint64_t)v11 >= 5)
    {
      v12 = v11 >> 2;
      v13 = 2;
      v14 = 1;
      do
      {
        v15 = *(unsigned int *)(v10 + 4 * v14);
        v16 = vsubq_f32(*(float32x4_t *)(v3 + 16 * v6), *(float32x4_t *)(v3 + 16 * v15));
        v17 = vsubq_f32(vsubq_f32(*(float32x4_t *)(a1[44] + 16 * v6), *(float32x4_t *)(a1[44] + 16 * v15)), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a1[47] + 48 * v6), v16.f32[0]), *(float32x4_t *)(a1[47] + 48 * v6 + 16), *(float32x2_t *)v16.f32, 1), *(float32x4_t *)(a1[47] + 48 * v6 + 32), v16, 2));
        v18 = vmulq_f32(v17, v17);
        result = vmlas_n_f32(result, *(float *)(*(_QWORD *)(v8 + 48 * v6 + 24) + 4 * v14), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        v14 = v13;
      }
      while (v12 > v13++);
    }
    ++v6;
  }
  while (v6 != v7);
  return result;
}

void std::vector<simd_float3x3>::resize(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<simd_float3x3>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * a2;
  }
}

uint64_t geom::arap_deformer<float>::deformed_vertices(uint64_t a1)
{
  return a1 + 352;
}

double geom::compute_svd_3x3<float>(int8x16_t *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, float *a7)
{
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v18;
  int v19;
  _BYTE v20[32];
  int v21;
  _BYTE __u[32];
  int v23;
  __CLPK_real __a[4];
  int8x16_t v25;
  __int32 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v10.i32[3] = (__int32)a1[1];
  v11 = a1[2];
  v12 = vextq_s8(vextq_s8(a1[1], a1[1], 0xCuLL), v11, 8uLL);
  *(int8x16_t *)__a = v10;
  v25 = v12;
  v26 = v11.i32[2];
  if (geom::compute_svd((geom *)3, 3, __a, (__CLPK_real *)__u, (__CLPK_real *)&v18, (float *)v20, a7))
  {
    *(_QWORD *)&v13 = v18;
    DWORD2(v13) = v19;
    *a3 = v13;
    v15 = *(_OWORD *)&__u[12];
    *(_QWORD *)&v14 = *(_QWORD *)&__u[24];
    DWORD2(v14) = v23;
    *a2 = *(_OWORD *)__u;
    a2[1] = v15;
    a2[2] = v14;
    *(_QWORD *)&v13 = *(_QWORD *)v20;
    v16 = *(_OWORD *)&v20[12];
    *(_QWORD *)&v14 = *(_QWORD *)&v20[24];
    DWORD2(v14) = v21;
    *a4 = *(_OWORD *)v20;
    a4[1] = v16;
    a4[2] = v14;
  }
  return *(double *)&v13;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t geom::arap_deformer<double>::arap_deformer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  v5 = geom::ddg_evaluator<double>::ddg_evaluator();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v5 + 64, a3, a3);
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t geom::arap_deformer<double>::arap_deformer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = geom::ddg_evaluator<double>::ddg_evaluator();
  v5 = (a2[1] - *a2) >> 5;
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 64, v5, v5);
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t **geom::arap_deformer<double>::add_constraints(uint64_t **result, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;

  v3 = result;
  v4 = *a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (__int128 *)(*a2 + 32 * v8);
      v10 = v9[1];
      v11 = *v9;
      v12 = (_DWORD *)(v4 + v7);
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v3 + 41, (unsigned int *)(v4 + v7), (uint64_t)&std::piecewise_construct, &v12);
      *((_OWORD *)result + 3) = v11;
      *((_OWORD *)result + 4) = v10;
      ++v8;
      v4 = *a3;
      v7 += 4;
    }
    while (v8 < (a3[1] - *a3) >> 2);
  }
  *((_BYTE *)v3 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<double>::add_constraints(uint64_t **result, __int128 *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t **v5;
  uint64_t v6;
  __int128 v9;
  __int128 v10;
  _DWORD *v11;

  v5 = result;
  if (a5)
  {
    v6 = a5;
    do
    {
      v9 = a2[1];
      v10 = *a2;
      v11 = a4;
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v5 + 41, a4, (uint64_t)&std::piecewise_construct, &v11);
      *((_OWORD *)result + 3) = v10;
      *((_OWORD *)result + 4) = v9;
      a2 += 2;
      ++a4;
      --v6;
    }
    while (v6);
  }
  *((_BYTE *)v5 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<double>::add_static_constraints(uint64_t a1, uint64_t *a2)
{
  uint64_t **result;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;

  result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check();
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (_DWORD *)(v5 + v7);
      v10 = &(*v6)[4 * *(unsigned int *)(v5 + v7)];
      v11 = *((_OWORD *)v10 + 1);
      v12 = *(_OWORD *)v10;
      v13 = v9;
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), v9, (uint64_t)&std::piecewise_construct, &v13);
      *((_OWORD *)result + 3) = v12;
      *((_OWORD *)result + 4) = v11;
      ++v8;
      v5 = *a2;
      v7 += 4;
    }
    while (v8 < (a2[1] - *a2) >> 2);
  }
  *(_BYTE *)(a1 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<double>::add_static_constraints(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t **result;
  uint64_t **v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  _DWORD *v11;

  result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a3)
  {
    v7 = result;
    do
    {
      v8 = &(*v7)[4 * *a2];
      v9 = *((_OWORD *)v8 + 1);
      v10 = *(_OWORD *)v8;
      v11 = a2;
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), a2, (uint64_t)&std::piecewise_construct, &v11);
      *((_OWORD *)result + 3) = v10;
      *((_OWORD *)result + 4) = v9;
      ++a2;
      --a3;
    }
    while (a3);
  }
  *(_BYTE *)(a1 + 320) = 0;
  return result;
}

BOOL geom::arap_deformer<double>::initialize(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned int j;
  unsigned int v23;
  _BOOL8 result;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  geom::arap_deformer<double>::reset(a1);
  if (*(_QWORD *)(a1 + 400) == *(_QWORD *)(a1 + 408))
  {
    v2 = geom::ddg_evaluator<float>::vertex_count(a1);
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::resize((uint64_t *)(a1 + 400), v2);
    if (geom::ddg_evaluator<float>::vertex_count(a1))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        geom::ddg_evaluator<double>::compute_laplacian_stencil((uint64_t *)a1, v4, 1, (uint64_t)__p);
        v5 = *(_QWORD *)(a1 + 400);
        v6 = v5 + 48 * v3;
        v7 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)(v6 + 8) = v7;
          operator delete(v7);
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
        }
        *(_OWORD *)v6 = *(_OWORD *)__p;
        *(_QWORD *)(v6 + 16) = v26;
        __p[0] = 0;
        __p[1] = 0;
        v26 = 0;
        v8 = v5 + 48 * v3;
        v11 = *(void **)(v8 + 24);
        v10 = (_QWORD *)(v8 + 24);
        v9 = v11;
        if (v11)
        {
          *(_QWORD *)(v5 + 48 * v3 + 32) = v9;
          operator delete(v9);
          *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
        }
        *(_OWORD *)v10 = v27;
        *(_QWORD *)(v5 + 48 * v3 + 40) = v28;
        v27 = 0uLL;
        v28 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = ++v4;
      }
      while (geom::ddg_evaluator<float>::vertex_count(a1) > (unint64_t)v4);
    }
  }
  v12 = *(_QWORD *)(a1 + 400);
  if (*(_QWORD *)(a1 + 408) != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      for (i = *(uint64_t **)(a1 + 336); i; i = (uint64_t *)*i)
      {
        v16 = *((_DWORD *)i + 8);
        if (v14 >= v16)
        {
          if (v16 >= v14)
          {
            geom::sparse_linear_solver<double>::add_entry(a1 + 64, v14, v14, 1.0);
            goto LABEL_29;
          }
          ++i;
        }
      }
      v17 = (uint64_t *)(v12 + 48 * v13);
      geom::sparse_linear_solver<double>::add_entry(a1 + 64, v14, v14, -*(double *)v17[3]);
      v19 = *v17;
      v18 = v17[1];
      if ((unint64_t)(v18 - *v17) >= 5)
      {
        v20 = 1;
        do
        {
          v21 = *(uint64_t **)(a1 + 336);
          for (j = *(_DWORD *)(v19 + 4 * v20); v21; v21 = (uint64_t *)*v21)
          {
            v23 = *((_DWORD *)v21 + 8);
            if (j >= v23)
            {
              if (v23 >= j)
                goto LABEL_26;
              ++v21;
            }
          }
          geom::sparse_linear_solver<double>::add_entry(a1 + 64, v14, j, -*(double *)(v17[3] + 8 * v20));
          v19 = *v17;
          v18 = v17[1];
LABEL_26:
          v20 = (v20 + 1);
        }
        while (v20 < (v18 - v19) >> 2);
      }
LABEL_29:
      v12 = *(_QWORD *)(a1 + 400);
      v13 = ++v14;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 408) - v12) >> 4) > v14);
  }
  result = geom::sparse_linear_solver<double>::factor((unsigned int *)(a1 + 64), 0);
  *(_BYTE *)(a1 + 320) = 1;
  return result;
}

void geom::arap_deformer<double>::reset(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v5 = 0;
  v7 = 0u;
  v4[1] = 0u;
  v4[0] = 0x3FF0000000000000uLL;
  v6 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000uLL;
  geom::sparse_linear_solver<float>::clear_enrties(a1 + 64);
  v2 = geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a1 + 352 != v2)
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l((char *)(a1 + 352), *(char **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 5);
  v3 = geom::ddg_evaluator<float>::vertex_count(a1);
  std::vector<simd_double3x3>::resize(a1 + 376, v3, v4);
  *(_BYTE *)(a1 + 320) = 0;
}

void geom::arap_deformer<double>::deform(_QWORD *a1, unsigned int a2, double a3)
{
  unsigned int v6;
  double v7;
  double v8;
  unsigned int v9;

  if (a2)
  {
    v6 = 0;
    v7 = 0.0;
    do
    {
      geom::arap_deformer<double>::deform_step((uint64_t)a1);
      if (a3 <= 0.0)
      {
        v9 = v6 + 1;
        v8 = v7;
      }
      else
      {
        v8 = geom::arap_deformer<double>::energy(a1);
        v9 = v6 + 1;
        if (v6 && v9 < a2 && vabdd_f64(v8, v7) / (v8 + a3) < a3)
          return;
      }
      v6 = v9;
      v7 = v8;
    }
    while (v9 != a2);
  }
}

void geom::arap_deformer<double>::deform_step(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float64x2_t v15;
  unsigned int v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  unint64_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  __int128 v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  float64_t v47;
  float64_t v48;
  float64x2_t v49;
  unint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  uint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v70;
  uint64_t i;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int32 v81;
  uint64_t *j;
  unsigned __int32 v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  double v94;
  uint64_t **v95;
  double v96;
  uint64_t **v97;
  double v98;
  uint64_t **v99;
  float64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  uint64_t v103;
  float64x2_t *v104;
  float64x2_t v105;
  float64x2_t v106;
  uint64_t v107;
  float64x2_t *v108;
  float64x2_t *v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  uint64_t **v113;
  uint64_t **v114;
  uint64_t **v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  _OWORD *v120;
  unsigned int *v121;
  uint64_t k;
  float64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _OWORD v128[12];
  _OWORD v129[6];
  _OWORD v130[6];
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  int8x16_t v134;
  float64x2_t v135;
  int8x16_t v136;
  int64x2_t v137[2];
  int64x2_t v138;
  int64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  int64x2_t v142[2];
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;

  v5 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  v124 = *(_QWORD *)(a1 + 376);
  v125 = *(_QWORD *)(a1 + 384);
  v127 = (v125 - v124) / 96;
  if (v125 != v124)
  {
    v6 = 0;
    v7 = (v125 - v124) / 96;
    if (v127 <= 1)
      v7 = 1;
    v126 = v7;
    v8 = 0uLL;
    do
    {
      v153 = v8;
      v154 = v8;
      v151 = v8;
      v152 = v8;
      v149 = v8;
      v150 = v8;
      v9 = *(_QWORD *)(a1 + 400);
      v10 = (uint64_t *)(v9 + 48 * v6);
      v11 = *v10;
      if ((unint64_t)(v10[1] - *v10) >= 5)
      {
        v12 = *(_QWORD *)(a1 + 352);
        v13 = (_QWORD *)(v9 + 48 * v6 + 24);
        v14 = *v5;
        v15 = 0uLL;
        v16 = 2;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v22 = 1;
        do
        {
          v23 = (float64x2_t *)(v14 + 32 * v6);
          v25 = *v23;
          v24 = v23[1];
          v26 = *(unsigned int *)(v11 + 4 * v22);
          v27 = (float64x2_t *)(v14 + 32 * v26);
          v28 = vsubq_f64(v25, *v27);
          v29 = vsubq_f64(v24, v27[1]);
          v30 = (float64x2_t *)(v12 + 32 * v6);
          v31 = (float64x2_t *)(v12 + 32 * v26);
          v32 = *v31;
          v33 = vsubq_f64(v30[1], v31[1]);
          v34 = vsubq_f64(*v30, *v31);
          v32.f64[0] = *(float64_t *)(*v13 + 8 * v22);
          v21 = vaddq_f64(v21, vmulq_f64(vmulq_f64(v29, v34), v32));
          v20 = vaddq_f64(v20, vmulq_n_f64(vmulq_n_f64(v28, v34.f64[0]), v32.f64[0]));
          v19 = vaddq_f64(v19, vmulq_f64(vmulq_laneq_f64(v29, v34, 1), v32));
          v18 = vaddq_f64(v18, vmulq_n_f64(vmulq_laneq_f64(v28, v34, 1), v32.f64[0]));
          v17 = vaddq_f64(v17, vmulq_f64(vmulq_f64(v29, v33), v32));
          v15 = vaddq_f64(v15, vmulq_n_f64(vmulq_n_f64(v28, v33.f64[0]), v32.f64[0]));
          v149 = v20;
          v150 = v21;
          v151 = v18;
          v152 = v19;
          v153 = v15;
          v154 = v17;
          v22 = v16;
          v11 = *v10;
          ++v16;
        }
        while (v22 < (v10[1] - *v10) >> 2);
      }
      v148 = 0;
      v147 = 0uLL;
      geom::compute_svd_3x3<double>((uint64_t)&v149, v142, &v147, (uint64_t)v137, v2, v3, v4);
      v35 = 0;
      v8 = 0uLL;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      v37 = v140;
      v36 = v141;
      v38 = (int8x16_t)vzip1q_s64(v137[0], v138);
      v39 = (int8x16_t)vzip2q_s64(v137[0], v138);
      v40 = (int8x16_t)vzip1q_s64(v137[1], v139);
      v42 = v145;
      v41 = v146;
      v43 = vzip1q_s64(v142[0], v143);
      v44 = vzip2q_s64(v142[0], v143);
      v45 = vzip1q_s64(v142[1], v144);
      v46 = vdupq_laneq_s64(v145, 1);
      v130[0] = v43;
      v130[1] = v145;
      v130[2] = v44;
      v130[3] = v46;
      *(_QWORD *)&v47 = vextq_s8(v38, v38, 8uLL).u64[0];
      *(_QWORD *)&v48 = vextq_s8(v39, v39, 8uLL).u64[0];
      v49 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL);
      v50 = vextq_s8(v40, v40, 8uLL).u64[0];
      v130[4] = v45;
      v130[5] = v146;
      do
      {
        v52 = (float64x2_t)v130[v35];
        v51 = (float64x2_t)v130[v35 + 1];
        *(_QWORD *)&v53.f64[0] = v38.i64[0];
        v53.f64[1] = v47;
        *(_QWORD *)&v54.f64[0] = v39.i64[0];
        v54.f64[1] = v48;
        v55 = vmlaq_laneq_f64(vmulq_n_f64(v53, v52.f64[0]), v54, v52, 1);
        v56 = vmlaq_laneq_f64(vmulq_f64(v37, v52), v49, v52, 1);
        *(_QWORD *)&v52.f64[0] = v40.i64[0];
        *(_QWORD *)&v52.f64[1] = v50;
        v57 = (float64x2_t *)((char *)&v131 + v35 * 16);
        *v57 = vmlaq_n_f64(v55, v52, v51.f64[0]);
        v57[1] = vmlaq_f64(v56, v51, v36);
        v35 += 2;
      }
      while (v35 != 6);
      *(_QWORD *)&v58.f64[0] = v134.i64[0];
      *(_QWORD *)&v59.f64[0] = v136.i64[0];
      v58.f64[1] = v133.f64[0];
      v59.f64[1] = v135.f64[0];
      if (vmulq_f64(v132, vmlaq_laneq_f64(vmulq_f64(v135, vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v133, 1))), v133, v135, 1)).f64[0]+ vaddvq_f64(vmulq_f64(v131, vmlaq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v135, v136, 8uLL), vnegq_f64(v58)), v59, (float64x2_t)vextq_s8((int8x16_t)v133, v134, 8uLL)))) < 0.0)
      {
        v60 = 0;
        v128[0] = v43;
        v128[1] = v42;
        v128[2] = v44;
        v128[3] = v46;
        v128[4] = v45;
        v128[5] = v41;
        do
        {
          v62 = (float64x2_t)v128[v60];
          v61 = (float64x2_t)v128[v60 + 1];
          v63 = vmlaq_laneq_f64(vmulq_f64(v62, (float64x2_t)0), (float64x2_t)0, v62, 1);
          v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2289B3FD0, v62.f64[0]), (float64x2_t)xmmword_2289B3FE0, v62, 1), (float64x2_t)0, v61.f64[0]);
          __asm { FMOV            V18.2D, #-1.0 }
          v70 = (float64x2_t *)&v128[v60 + 6];
          *v70 = v64;
          v70[1] = vmlaq_f64(v63, _Q18, v61);
          v60 += 2;
        }
        while (v60 != 6);
        for (i = 0; i != 6; i += 2)
        {
          v73 = (float64x2_t)v128[i + 6];
          v72 = (float64x2_t)v128[i + 7];
          *(_QWORD *)&v74.f64[0] = v38.i64[0];
          v74.f64[1] = v47;
          *(_QWORD *)&v75.f64[0] = v39.i64[0];
          v75.f64[1] = v48;
          v76 = vmlaq_laneq_f64(vmulq_n_f64(v74, v73.f64[0]), v75, v73, 1);
          v77 = vmlaq_laneq_f64(vmulq_f64(v37, v73), v49, v73, 1);
          *(_QWORD *)&v73.f64[0] = v40.i64[0];
          *(_QWORD *)&v73.f64[1] = v50;
          v78 = (float64x2_t *)&v129[i];
          *v78 = vmlaq_n_f64(v76, v73, v72.f64[0]);
          v78[1] = vmlaq_f64(v77, v72, v36);
        }
        v133 = (float64x2_t)v129[2];
        v134 = (int8x16_t)v129[3];
        v135 = (float64x2_t)v129[4];
        v136 = (int8x16_t)v129[5];
        v131 = (float64x2_t)v129[0];
        v132 = (float64x2_t)v129[1];
      }
      v79 = *(_QWORD *)(a1 + 376) + 96 * v6;
      *(float64x2_t *)(v79 + 32) = v133;
      *(int8x16_t *)(v79 + 48) = v134;
      *(float64x2_t *)(v79 + 64) = v135;
      *(int8x16_t *)(v79 + 80) = v136;
      *(float64x2_t *)v79 = v131;
      *(float64x2_t *)(v79 + 16) = v132;
      ++v6;
    }
    while (v6 != v126);
  }
  v153.f64[0] = 0.0;
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  v142[0].i64[0] = 0;
  std::vector<double>::resize((uint64_t)&v149, v127, v142);
  v142[0].i64[0] = 0;
  std::vector<double>::resize((uint64_t)&v150.f64[1], v127, v142);
  v142[0].i64[0] = 0;
  std::vector<double>::resize((uint64_t)&v152, v127, v142);
  v137[0].i32[0] = 0;
  if (v125 == v124)
  {
    v121 = (unsigned int *)(a1 + 64);
    geom::sparse_linear_solver<double>::solve(v121, (uint64_t)&v149);
    geom::sparse_linear_solver<double>::solve(v121, (uint64_t)&v150.f64[1]);
    geom::sparse_linear_solver<double>::solve(v121, (uint64_t)&v152);
    goto LABEL_43;
  }
  v80 = 0;
  v81 = 0;
  do
  {
    for (j = *(uint64_t **)(a1 + 336); j; j = (uint64_t *)*j)
    {
      v83 = *((_DWORD *)j + 8);
      if (v81 >= v83)
      {
        if (v83 >= v81)
        {
          v142[0].i64[0] = (uint64_t)v137;
          v113 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v137, (uint64_t)&std::piecewise_construct, v142);
          *(_QWORD *)(*(_QWORD *)&v149.f64[0] + 8 * v137[0].u32[0]) = v113[6];
          v142[0].i64[0] = (uint64_t)v137;
          v114 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v137, (uint64_t)&std::piecewise_construct, v142);
          *(_QWORD *)(*(_QWORD *)&v150.f64[1] + 8 * v137[0].u32[0]) = v114[7];
          v142[0].i64[0] = (uint64_t)v137;
          v115 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v137, (uint64_t)&std::piecewise_construct, v142);
          v81 = v137[0].i32[0];
          *(_QWORD *)(*(_QWORD *)&v152.f64[0] + 8 * v137[0].u32[0]) = v115[8];
          goto LABEL_37;
        }
        ++j;
      }
    }
    v84 = *(_QWORD *)(a1 + 400);
    v85 = (uint64_t *)(v84 + 48 * v80);
    v86 = *v85;
    v87 = v85[1];
    if ((unint64_t)(v87 - *v85) < 5)
      goto LABEL_37;
    v88 = (_QWORD *)(v84 + 48 * v80 + 24);
    v89 = 1;
    do
    {
      v90 = *(uint64_t **)(a1 + 336);
      if (!v90)
        goto LABEL_34;
      v91 = (unsigned int *)(v86 + 4 * v89);
      v92 = *v91;
      while (1)
      {
        v93 = *((_DWORD *)v90 + 8);
        if (v92 >= v93)
          break;
LABEL_31:
        v90 = (uint64_t *)*v90;
        if (!v90)
          goto LABEL_34;
      }
      if (v93 < v92)
      {
        ++v90;
        goto LABEL_31;
      }
      v94 = *(double *)(*v88 + 8 * v89);
      v142[0].i64[0] = v86 + 4 * v89;
      v95 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), v91, (uint64_t)&std::piecewise_construct, v142);
      *(double *)(*(_QWORD *)&v149.f64[0] + 8 * v137[0].u32[0]) = *(double *)(*(_QWORD *)&v149.f64[0]
                                                                              + 8 * v137[0].u32[0])
                                                                  + v94 * *((double *)v95 + 6);
      v96 = *(double *)(*v88 + 8 * v89);
      v142[0].i64[0] = *v85 + 4 * v89;
      v97 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v142[0].i64[0], (uint64_t)&std::piecewise_construct, v142);
      *(double *)(*(_QWORD *)&v150.f64[1] + 8 * v137[0].u32[0]) = *(double *)(*(_QWORD *)&v150.f64[1]
                                                                              + 8 * v137[0].u32[0])
                                                                  + v96 * *((double *)v97 + 7);
      v98 = *(double *)(*v88 + 8 * v89);
      v142[0].i64[0] = *v85 + 4 * v89;
      v99 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v142[0].i64[0], (uint64_t)&std::piecewise_construct, v142);
      v81 = v137[0].i32[0];
      *(double *)(*(_QWORD *)&v152.f64[0] + 8 * v137[0].u32[0]) = *(double *)(*(_QWORD *)&v152.f64[0]
                                                                              + 8 * v137[0].u32[0])
                                                                  + v98 * *((double *)v99 + 8);
      v86 = *v85;
      v87 = v85[1];
LABEL_34:
      v100 = (float64x2_t *)(*v5 + 32 * v81);
      v101 = *v100;
      v102 = v100[1];
      v103 = *(unsigned int *)(v86 + 4 * v89);
      v104 = (float64x2_t *)(*v5 + 32 * v103);
      v105 = vsubq_f64(v102, v104[1]);
      v106 = vsubq_f64(v101, *v104);
      v107 = *(_QWORD *)(a1 + 376);
      v108 = (float64x2_t *)(v107 + 96 * v81);
      v109 = (float64x2_t *)(v107 + 96 * v103);
      v110 = *v109;
      v110.f64[0] = *(double *)(*v88 + 8 * v89) * 0.5;
      v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vaddq_f64(*v108, *v109), v106.f64[0]), vaddq_f64(v108[2], v109[2]), v106, 1), vaddq_f64(v108[4], v109[4]), v105.f64[0]);
      v106.f64[0] = vmulq_f64(vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v106, vaddq_f64(v108[1], v109[1])), vaddq_f64(v108[3], v109[3]), v106, 1), v105, vaddq_f64(v108[5], v109[5])), v110).f64[0];
      v112 = vmulq_n_f64(v111, v110.f64[0]);
      *(double *)(*(_QWORD *)&v149.f64[0] + 8 * v81) = *(double *)(*(_QWORD *)&v149.f64[0] + 8 * v81) + v112.f64[0];
      *(double *)(*(_QWORD *)&v150.f64[1] + 8 * v81) = *(double *)(*(_QWORD *)&v150.f64[1] + 8 * v81) + v112.f64[1];
      *(double *)(*(_QWORD *)&v152.f64[0] + 8 * v81) = v106.f64[0] + *(double *)(*(_QWORD *)&v152.f64[0] + 8 * v81);
      v89 = (v89 + 1);
    }
    while (v89 < (v87 - v86) >> 2);
LABEL_37:
    v137[0].i32[0] = ++v81;
    v80 = v81;
  }
  while (v127 > v81);
  geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 64), (uint64_t)&v149);
  geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 64), (uint64_t)&v150.f64[1]);
  geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 64), (uint64_t)&v152);
  v117 = 0;
  v118 = (v125 - v124) / 96;
  if (v127 <= 1)
    v118 = 1;
  do
  {
    *(_QWORD *)&v119 = *(_QWORD *)(*(_QWORD *)&v149.f64[0] + 8 * v117);
    *((_QWORD *)&v119 + 1) = *(_QWORD *)(*(_QWORD *)&v150.f64[1] + 8 * v117);
    *(_QWORD *)&v116 = *(_QWORD *)(*(_QWORD *)&v152.f64[0] + 8 * v117);
    v120 = (_OWORD *)(*(_QWORD *)(a1 + 352) + 32 * v117);
    *v120 = v119;
    v120[1] = v116;
    ++v117;
  }
  while (v118 != v117);
LABEL_43:
  for (k = 0; k != -9; k -= 3)
  {
    v123 = v152.f64[k];
    if (v123 != 0.0)
    {
      v152.f64[k + 1] = v123;
      operator delete(*(void **)&v123);
    }
  }
}

double geom::arap_deformer<double>::energy(_QWORD *a1)
{
  uint64_t *v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;

  v2 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check();
  v6 = *v2;
  v7 = v2[1];
  v8 = v7 - *v2;
  if (v7 == *v2)
    return 0.0;
  v9 = 0;
  v10 = v8 >> 5;
  v11 = a1[50];
  if (v10 <= 1)
    v10 = 1;
  result = 0.0;
  do
  {
    v13 = *(_QWORD *)(v11 + 48 * v9);
    v14 = *(_QWORD *)(v11 + 48 * v9 + 8) - v13;
    if ((unint64_t)v14 >= 5)
    {
      v15 = v14 >> 2;
      v16 = (float64x2_t *)(v6 + 32 * v9);
      v18 = *v16;
      v17 = v16[1];
      v19 = a1[44];
      v20 = (float64x2_t *)(v19 + 32 * v9);
      v22 = *v20;
      v21 = v20[1];
      v23 = (int8x16_t *)(a1[47] + 96 * v9);
      v24 = vextq_s8(*v23, *v23, 8uLL).u64[0];
      v25 = vextq_s8(v23[2], v23[2], 8uLL).u64[0];
      v26 = vextq_s8(v23[4], v23[4], 8uLL).u64[0];
      v27 = 2;
      v28 = 1;
      do
      {
        v29 = *(unsigned int *)(v13 + 4 * v28);
        v30 = (float64x2_t *)(v6 + 32 * v29);
        v31 = vsubq_f64(v17, v30[1]);
        v32 = (float64x2_t *)(v19 + 32 * v29);
        v33 = vsubq_f64(v18, *v30);
        *(_QWORD *)&v34.f64[0] = v23->i64[0];
        *(_QWORD *)&v34.f64[1] = v24;
        *(_QWORD *)&v3.f64[0] = v23[1].i64[0];
        *(_QWORD *)&v35.f64[0] = v23[2].i64[0];
        *(_QWORD *)&v35.f64[1] = v25;
        v36 = vmlaq_laneq_f64(vmulq_n_f64(v34, v33.f64[0]), v35, v33, 1);
        *(_QWORD *)&v4.f64[0] = v23[3].i64[0];
        v37 = vmlaq_laneq_f64(vmulq_f64(v33, v3), v4, v33, 1);
        *(_QWORD *)&v33.f64[0] = v23[4].i64[0];
        *(_QWORD *)&v33.f64[1] = v26;
        *(_QWORD *)&v5.f64[0] = v23[5].i64[0];
        v38 = vsubq_f64(vsubq_f64(v22, *v32), vmlaq_n_f64(v36, v33, v31.f64[0]));
        v39 = vsubq_f64(vsubq_f64(v21, v32[1]), vmlaq_f64(v37, v31, v5));
        result = result
               + *(double *)(*(_QWORD *)(v11 + 48 * v9 + 24) + 8 * v28)
               * (vmulq_f64(v39, v39).f64[0] + vaddvq_f64(vmulq_f64(v38, v38)));
        v28 = v27;
      }
      while (v15 > v27++);
    }
    ++v9;
  }
  while (v9 != v10);
  return result;
}

void std::vector<simd_double3x3>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<simd_double3x3>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 96 * a2;
  }
}

__n128 geom::compute_svd_3x3<double>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  __CLPK_doublereal v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 __s;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 __u;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __CLPK_doublereal __a[3];
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v10 = *(double *)(a1 + 16);
  *(_OWORD *)__a = *(_OWORD *)a1;
  v36 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  __a[2] = v10;
  v37 = v11;
  v12 = *(_QWORD *)(a1 + 80);
  v38 = *(_OWORD *)(a1 + 64);
  v39 = v12;
  if (geom::compute_svd((geom *)3, 3, __a, (__CLPK_doublereal *)&__u, (__CLPK_doublereal *)&__s, v23.n128_f64, a7))
  {
    *(_QWORD *)&v14 = v22;
    *a3 = __s;
    a3[1] = v14;
    *(_QWORD *)&v14 = v30;
    v17 = v31;
    *(_QWORD *)&v15 = v32;
    v18 = v33;
    *(_QWORD *)&v16 = v34;
    *a2 = __u;
    a2[1] = v14;
    a2[2] = v17;
    a2[3] = v15;
    result = v23;
    *(_QWORD *)&v14 = v24;
    v19 = v25;
    a2[4] = v18;
    a2[5] = v16;
    *(_QWORD *)&v15 = v26;
    v20 = v27;
    *(_QWORD *)&v16 = v28;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v14;
    *(_OWORD *)(a4 + 32) = v19;
    *(_OWORD *)(a4 + 48) = v15;
    *(_OWORD *)(a4 + 64) = v20;
    *(_OWORD *)(a4 + 80) = v16;
  }
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t **_ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_OWORD *)v11 + 3) = 0u;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *_ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1, *a2);
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[48 * v8];
    v18 = &v12[48 * v11];
    v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil> &>::~__split_buffer(&v15);
  }
}

void std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 -= 48;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void **std::__split_buffer<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil> &>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil> &>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<geom::ddg_evaluator<float>::stencil>::destroy[abi:nn180100](v4, i - 48);
  }
}

void std::allocator<geom::ddg_evaluator<float>::stencil>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

void std::vector<simd_float3x3>::__append(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 4) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 48 * a2;
      do
      {
        v17 = *a3;
        v18 = a3[2];
        v9[1] = a3[1];
        v9[2] = v18;
        *v9 = v17;
        v9 += 3;
        v16 -= 48;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 4);
    v11 = v10 + a2;
    if (v10 + a2 > 0x555555555555555)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 4);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(v6, v13);
    else
      v14 = 0;
    v19 = &v14[48 * v10];
    v20 = &v19[48 * a2];
    v21 = 48 * a2;
    v22 = v19;
    do
    {
      v23 = *a3;
      v24 = a3[2];
      *((_OWORD *)v22 + 1) = a3[1];
      *((_OWORD *)v22 + 2) = v24;
      *(_OWORD *)v22 = v23;
      v22 += 48;
      v21 -= 48;
    }
    while (v21);
    v25 = &v14[48 * v13];
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 3);
        v29 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v19 - 1) = v29;
        *((_OWORD *)v19 - 3) = v28;
        v19 -= 48;
        v26 -= 48;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v25;
    if (v26)
      operator delete(v26);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

uint64_t **_ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x50uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_OWORD *)v11 + 4) = 0u;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      abort();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    abort();
  result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a2);
}

void std::vector<simd_double3x3>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 5) >= a2)
  {
    if (a2)
    {
      v15 = &v9[6 * a2];
      v16 = 96 * a2;
      do
      {
        v17 = a3[1];
        *v9 = *a3;
        v9[1] = v17;
        v18 = a3[2];
        v19 = a3[3];
        v20 = a3[5];
        v9[4] = a3[4];
        v9[5] = v20;
        v9[2] = v18;
        v9[3] = v19;
        v9 += 6;
        v16 -= 96;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 5);
    v11 = v10 + a2;
    if (v10 + a2 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 5);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x155555555555555)
      v13 = 0x2AAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v6, v13);
    else
      v14 = 0;
    v21 = &v14[96 * v10];
    v22 = &v21[96 * a2];
    v23 = 96 * a2;
    v24 = v21;
    do
    {
      v25 = a3[1];
      *(_OWORD *)v24 = *a3;
      *((_OWORD *)v24 + 1) = v25;
      v26 = a3[2];
      v27 = a3[3];
      v28 = a3[5];
      *((_OWORD *)v24 + 4) = a3[4];
      *((_OWORD *)v24 + 5) = v28;
      *((_OWORD *)v24 + 2) = v26;
      *((_OWORD *)v24 + 3) = v27;
      v24 += 96;
      v23 -= 96;
    }
    while (v23);
    v29 = &v14[96 * v13];
    v31 = (char *)*a1;
    v30 = (char *)a1[1];
    if (v30 != *a1)
    {
      do
      {
        v32 = *((_OWORD *)v30 - 5);
        *((_OWORD *)v21 - 6) = *((_OWORD *)v30 - 6);
        *((_OWORD *)v21 - 5) = v32;
        v33 = *((_OWORD *)v30 - 4);
        v34 = *((_OWORD *)v30 - 3);
        v35 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v21 - 1) = v35;
        *((_OWORD *)v21 - 4) = v33;
        *((_OWORD *)v21 - 3) = v34;
        v21 -= 96;
        v30 -= 96;
      }
      while (v30 != v31);
      v30 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v22;
    a1[2] = v29;
    if (v30)
      operator delete(v30);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(96 * a2);
}

void std::vector<double>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      abort();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

_QWORD *geom::acd<float>::acd(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t *geom::acd<float>::~acd(uint64_t *a1)
{
  std::unique_ptr<geom::acd<float>::impl,std::default_delete<geom::acd<float>::impl>>::reset[abi:nn180100](a1, 0);
  return a1;
}

_QWORD *geom::acd<float>::acd(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *geom::acd<float>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  std::unique_ptr<geom::acd<float>::impl,std::default_delete<geom::acd<float>::impl>>::reset[abi:nn180100](a1, v3);
  return a1;
}

void geom::acd<float>::init(uint64_t *a1, float32x4_t *a2, unint64_t a3, _DWORD *a4, std::vector<unsigned int>::size_type a5, unsigned int a6)
{
  _OWORD *v12;
  int32x4_t v13;
  __int128 v14;

  v12 = (_OWORD *)operator new();
  *v12 = 0u;
  v12[1] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[11] = 0u;
  v12[12] = 0u;
  v12[15] = 0u;
  v12[16] = 0u;
  v12[17] = 0u;
  v12[18] = 0u;
  v12[19] = 0u;
  v12[20] = 0u;
  v12[21] = 0u;
  v12[14] = 0u;
  v13 = vdupq_n_s32(0x7F800000u);
  v12[1] = v13;
  v12[2] = 0u;
  *(_QWORD *)&v14 = 0x7F0000007FLL;
  *((_QWORD *)&v14 + 1) = 0x7F0000007FLL;
  v12[2] = v14;
  v12[3] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  *((_QWORD *)v12 + 12) = 0;
  *((_DWORD *)v12 + 36) = 1065353216;
  v12[12] = v13;
  v12[13] = 0u;
  v12[13] = v14;
  *(_OWORD *)((char *)v12 + 232) = 0u;
  *(_OWORD *)((char *)v12 + 248) = 0u;
  *(_OWORD *)((char *)v12 + 264) = 0u;
  *(_OWORD *)((char *)v12 + 280) = 0u;
  *(_OWORD *)((char *)v12 + 296) = 0u;
  *(_OWORD *)((char *)v12 + 312) = 0u;
  std::unique_ptr<geom::acd<float>::impl,std::default_delete<geom::acd<float>::impl>>::reset[abi:nn180100](a1, (uint64_t)v12);
  geom::acd<float>::impl::init(*a1, a2, a3, a4, a5, a6, -1, 0.0);
}

void geom::acd<float>::init(uint64_t *a1, float32x4_t *a2, unint64_t a3, _DWORD *a4, std::vector<unsigned int>::size_type a5, unsigned int a6, int a7, float a8)
{
  _OWORD *v16;
  int32x4_t v17;
  __int128 v18;

  v16 = (_OWORD *)operator new();
  *v16 = 0u;
  v16[1] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  v16[19] = 0u;
  v16[20] = 0u;
  v16[21] = 0u;
  v16[14] = 0u;
  v17 = vdupq_n_s32(0x7F800000u);
  v16[1] = v17;
  v16[2] = 0u;
  *(_QWORD *)&v18 = 0x7F0000007FLL;
  *((_QWORD *)&v18 + 1) = 0x7F0000007FLL;
  v16[2] = v18;
  v16[3] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  *((_QWORD *)v16 + 12) = 0;
  *((_DWORD *)v16 + 36) = 1065353216;
  v16[12] = v17;
  v16[13] = 0u;
  v16[13] = v18;
  *(_OWORD *)((char *)v16 + 232) = 0u;
  *(_OWORD *)((char *)v16 + 248) = 0u;
  *(_OWORD *)((char *)v16 + 264) = 0u;
  *(_OWORD *)((char *)v16 + 280) = 0u;
  *(_OWORD *)((char *)v16 + 296) = 0u;
  *(_OWORD *)((char *)v16 + 312) = 0u;
  std::unique_ptr<geom::acd<float>::impl,std::default_delete<geom::acd<float>::impl>>::reset[abi:nn180100](a1, (uint64_t)v16);
  geom::acd<float>::impl::init(*a1, a2, a3, a4, a5, a6, a7, a8);
}

void geom::acd<float>::split_clusters_automatically(uint64_t *a1, unsigned int *a2)
{
  geom::acd<float>::impl::split_clusters_automatically(*a1, a2);
}

uint64_t geom::acd<float>::merge_clusters_automatically(uint64_t *a1, uint64_t a2)
{
  return geom::acd<float>::impl::merge_clusters_automatically(*a1, a2);
}

uint64_t geom::acd<float>::split_cluster_with_plane(float32x4_t **a1, unsigned int a2, float32x4_t *a3, __int32 *a4)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v7[2];

  v4 = *a1;
  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  return geom::acd<float>::impl::split_cluster_with_plane(v4, a2, v7, a4);
}

uint64_t *geom::acd<float>::merge_clusters(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<float>::impl::merge_clusters(*a1, a2, a3);
}

uint64_t geom::acd<float>::cluster_count(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 136);
}

uint64_t geom::acd<float>::impl::cluster_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

void geom::acd<float>::cluster_indices(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;

  v2 = *a1;
  v3 = *(_DWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v4 = *(uint64_t **)(v2 + 128);
  if (v4)
  {
    v6 = (_QWORD *)(a2 + 16);
    do
    {
      if ((unint64_t)v3 >= *v6)
      {
        v8 = *(_DWORD **)a2;
        v9 = ((uint64_t)v3 - *(_QWORD *)a2) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          abort();
        v11 = *v6 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v12);
          v8 = *(_DWORD **)a2;
          v3 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = *((_DWORD *)v4 + 4);
        v7 = v14 + 4;
        while (v3 != v8)
        {
          v15 = *--v3;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *(_QWORD *)a2 = v14;
        *(_QWORD *)(a2 + 8) = v7;
        *(_QWORD *)(a2 + 16) = &v13[4 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v3 = *((_DWORD *)v4 + 4);
        v7 = v3 + 1;
      }
      *(_QWORD *)(a2 + 8) = v7;
      v4 = (uint64_t *)*v4;
      v3 = v7;
    }
    while (v4);
  }
}

void geom::acd<float>::impl::cluster_indices(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v3 = *(uint64_t **)(a1 + 128);
  if (v3)
  {
    v5 = (_QWORD *)(a2 + 16);
    do
    {
      if ((unint64_t)v2 >= *v5)
      {
        v7 = *(_DWORD **)a2;
        v8 = ((uint64_t)v2 - *(_QWORD *)a2) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          abort();
        v10 = *v5 - (_QWORD)v7;
        if (v10 >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v5, v11);
          v7 = *(_DWORD **)a2;
          v2 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = *((_DWORD *)v3 + 4);
        v6 = v13 + 4;
        while (v2 != v7)
        {
          v14 = *--v2;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        *(_QWORD *)a2 = v13;
        *(_QWORD *)(a2 + 8) = v6;
        *(_QWORD *)(a2 + 16) = &v12[4 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v2 = *((_DWORD *)v3 + 4);
        v6 = v2 + 1;
      }
      *(_QWORD *)(a2 + 8) = v6;
      v3 = (uint64_t *)*v3;
      v2 = v6;
    }
    while (v3);
  }
}

void geom::acd<float>::get_hull_of_cluster(float32x4_t **a1, unsigned int a2, char **a3, std::vector<unsigned int> *a4)
{
  geom::acd<float>::impl::get_hull_of_cluster(*a1, a2, a3, a4);
}

float32x4_t geom::acd<float>::impl::mesh_vertex_transform(float32x4_t *a1, float *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t result;

  v3 = vsubq_f32(a1[2], a1[1]);
  *a2 = fmaxf(fmaxf(v3.f32[0], v3.f32[2]), v3.f32[1]) * 0.5;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  result = vmulq_f32(vaddq_f32(a1[1], a1[2]), v4);
  *a3 = result;
  return result;
}

uint64_t *geom::acd<double>::~acd(uint64_t *a1)
{
  std::unique_ptr<geom::acd<double>::impl,std::default_delete<geom::acd<double>::impl>>::reset[abi:nn180100](a1, 0);
  return a1;
}

uint64_t *geom::acd<double>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  std::unique_ptr<geom::acd<double>::impl,std::default_delete<geom::acd<double>::impl>>::reset[abi:nn180100](a1, v3);
  return a1;
}

void geom::acd<double>::init(uint64_t *a1, float64x2_t *a2, unint64_t a3, _DWORD *a4, std::vector<unsigned int>::size_type a5, unsigned int a6)
{
  _OWORD *v12;
  int64x2_t v13;
  __int128 v14;
  int64x2_t v15;
  __int128 v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;

  v12 = (_OWORD *)operator new();
  *v12 = 0u;
  v12[1] = 0u;
  v13 = vdupq_n_s64(0x7FF0000000000000uLL);
  v12[2] = 0u;
  v12[3] = 0u;
  *(_QWORD *)&v14 = 0x7FF0000000000000;
  v15 = vdupq_n_s64(0xFFF0000000000000);
  v12[4] = 0u;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[11] = 0u;
  v12[12] = 0u;
  v12[13] = 0u;
  v12[14] = 0u;
  v12[15] = 0u;
  v12[16] = 0u;
  v12[17] = 0u;
  v12[18] = 0u;
  v12[19] = 0u;
  v12[20] = 0u;
  v12[21] = 0u;
  v12[22] = 0u;
  v12[23] = 0u;
  v12[24] = 0u;
  v12[25] = 0u;
  v12[26] = 0u;
  v12[27] = 0u;
  v12[1] = v13;
  v12[2] = v14;
  *(_QWORD *)&v16 = 0xFFF0000000000000;
  v12[4] = v16;
  v12[5] = 0u;
  v12[3] = v15;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[6] = 0u;
  v12[7] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  *((_QWORD *)v12 + 16) = 0;
  *((_DWORD *)v12 + 44) = 1065353216;
  v12[15] = v13;
  v12[16] = v14;
  v12[17] = v15;
  v12[18] = v16;
  *(_OWORD *)((char *)v12 + 312) = 0u;
  *(_OWORD *)((char *)v12 + 328) = 0u;
  *(_OWORD *)((char *)v12 + 344) = 0u;
  *(_OWORD *)((char *)v12 + 360) = 0u;
  *(_OWORD *)((char *)v12 + 376) = 0u;
  *(_OWORD *)((char *)v12 + 392) = 0u;
  std::unique_ptr<geom::acd<double>::impl,std::default_delete<geom::acd<double>::impl>>::reset[abi:nn180100](a1, (uint64_t)v12);
  geom::acd<double>::impl::init(*a1, a2, a3, a4, a5, a6, -1, 0.0, v17, v18, v19, v20);
}

void geom::acd<double>::init(uint64_t *a1, float64x2_t *a2, unint64_t a3, _DWORD *a4, std::vector<unsigned int>::size_type a5, unsigned int a6, int a7, double a8)
{
  _OWORD *v16;
  int64x2_t v17;
  __int128 v18;
  int64x2_t v19;
  __int128 v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;

  v16 = (_OWORD *)operator new();
  *v16 = 0u;
  v16[1] = 0u;
  v17 = vdupq_n_s64(0x7FF0000000000000uLL);
  v16[2] = 0u;
  v16[3] = 0u;
  *(_QWORD *)&v18 = 0x7FF0000000000000;
  v19 = vdupq_n_s64(0xFFF0000000000000);
  v16[4] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  v16[19] = 0u;
  v16[20] = 0u;
  v16[21] = 0u;
  v16[22] = 0u;
  v16[23] = 0u;
  v16[24] = 0u;
  v16[25] = 0u;
  v16[26] = 0u;
  v16[27] = 0u;
  v16[1] = v17;
  v16[2] = v18;
  *(_QWORD *)&v20 = 0xFFF0000000000000;
  v16[4] = v20;
  v16[5] = 0u;
  v16[3] = v19;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  *((_QWORD *)v16 + 16) = 0;
  *((_DWORD *)v16 + 44) = 1065353216;
  v16[15] = v17;
  v16[16] = v18;
  v16[17] = v19;
  v16[18] = v20;
  *(_OWORD *)((char *)v16 + 312) = 0u;
  *(_OWORD *)((char *)v16 + 328) = 0u;
  *(_OWORD *)((char *)v16 + 344) = 0u;
  *(_OWORD *)((char *)v16 + 360) = 0u;
  *(_OWORD *)((char *)v16 + 376) = 0u;
  *(_OWORD *)((char *)v16 + 392) = 0u;
  std::unique_ptr<geom::acd<double>::impl,std::default_delete<geom::acd<double>::impl>>::reset[abi:nn180100](a1, (uint64_t)v16);
  geom::acd<double>::impl::init(*a1, a2, a3, a4, a5, a6, a7, a8, v21, v22, v23, v24);
}

void geom::acd<double>::split_clusters_automatically(uint64_t *a1, unsigned int *a2)
{
  geom::acd<double>::impl::split_clusters_automatically(*a1, a2);
}

uint64_t geom::acd<double>::merge_clusters_automatically(uint64_t *a1, uint64_t a2)
{
  return geom::acd<double>::impl::merge_clusters_automatically(*a1, a2);
}

uint64_t geom::acd<double>::split_cluster_with_plane(uint64_t *a1, unsigned int a2, float64x2_t *a3, _DWORD *a4)
{
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v7[3];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  v7[2] = a3[2];
  return geom::acd<double>::impl::split_cluster_with_plane(v4, a2, v7, a4);
}

uint64_t *geom::acd<double>::merge_clusters(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<double>::impl::merge_clusters(*a1, a2, a3);
}

uint64_t geom::acd<double>::cluster_count(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 168);
}

uint64_t geom::acd<double>::impl::cluster_count(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

void geom::acd<double>::cluster_indices(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;

  v2 = *a1;
  v3 = *(_DWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v4 = *(uint64_t **)(v2 + 160);
  if (v4)
  {
    v6 = (_QWORD *)(a2 + 16);
    do
    {
      if ((unint64_t)v3 >= *v6)
      {
        v8 = *(_DWORD **)a2;
        v9 = ((uint64_t)v3 - *(_QWORD *)a2) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          abort();
        v11 = *v6 - (_QWORD)v8;
        if (v11 >> 1 > v10)
          v10 = v11 >> 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v12);
          v8 = *(_DWORD **)a2;
          v3 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = *((_DWORD *)v4 + 4);
        v7 = v14 + 4;
        while (v3 != v8)
        {
          v15 = *--v3;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *(_QWORD *)a2 = v14;
        *(_QWORD *)(a2 + 8) = v7;
        *(_QWORD *)(a2 + 16) = &v13[4 * v12];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v3 = *((_DWORD *)v4 + 4);
        v7 = v3 + 1;
      }
      *(_QWORD *)(a2 + 8) = v7;
      v4 = (uint64_t *)*v4;
      v3 = v7;
    }
    while (v4);
  }
}

void geom::acd<double>::impl::cluster_indices(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t *v3;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;

  v2 = *(_DWORD **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v3 = *(uint64_t **)(a1 + 160);
  if (v3)
  {
    v5 = (_QWORD *)(a2 + 16);
    do
    {
      if ((unint64_t)v2 >= *v5)
      {
        v7 = *(_DWORD **)a2;
        v8 = ((uint64_t)v2 - *(_QWORD *)a2) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          abort();
        v10 = *v5 - (_QWORD)v7;
        if (v10 >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v5, v11);
          v7 = *(_DWORD **)a2;
          v2 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = *((_DWORD *)v3 + 4);
        v6 = v13 + 4;
        while (v2 != v7)
        {
          v14 = *--v2;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        *(_QWORD *)a2 = v13;
        *(_QWORD *)(a2 + 8) = v6;
        *(_QWORD *)(a2 + 16) = &v12[4 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v2 = *((_DWORD *)v3 + 4);
        v6 = v2 + 1;
      }
      *(_QWORD *)(a2 + 8) = v6;
      v3 = (uint64_t *)*v3;
      v2 = v6;
    }
    while (v3);
  }
}

void geom::acd<double>::get_hull_of_cluster(uint64_t *a1, unsigned int a2, char **a3, std::vector<unsigned int> *a4)
{
  geom::acd<double>::impl::get_hull_of_cluster(*a1, a2, a3, a4);
}

float64x2_t geom::acd<double>::impl::mesh_vertex_transform(float64x2_t *a1, double *a2, float64x2_t *a3)
{
  float64x2_t v3;
  float64x2_t result;
  float64x2_t v10;

  v3 = vsubq_f64(a1[3], a1[1]);
  *a2 = fmax(fmax(v3.f64[0], vsubq_f64(a1[4], a1[2]).f64[0]), v3.f64[1]) * 0.5;
  __asm { FMOV            V2.2D, #0.5 }
  result = vmulq_f64(vaddq_f64(a1[1], a1[3]), _Q2);
  v10 = vmulq_f64(vaddq_f64(a1[2], a1[4]), _Q2);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t std::unique_ptr<geom::acd<float>::impl,std::default_delete<geom::acd<float>::impl>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    geom::acd<float>::impl::~impl(result);
    JUMPOUT(0x22E2B768CLL);
  }
  return result;
}

uint64_t geom::acd<float>::impl::~impl(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v8;

  v8 = (void **)(a1 + 304);
  std::vector<geom::triangle_mesh_connectivity>::__destroy_vector::operator()[abi:nn180100](&v8);
  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(_QWORD *)(a1 + 264) = v3;
    operator delete(v3);
  }
  geom::convex_mesh_cache<float>::~convex_mesh_cache(a1 + 224);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::~__hash_table(a1 + 112);
  v4 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v4)
    std::default_delete<geom::bvh<float,(unsigned char)3>>::operator()[abi:nn180100](a1 + 96, v4);
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v6);
  }
  return a1;
}

void std::vector<geom::triangle_mesh_connectivity>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)(v4 - 208));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void geom::triangle_mesh_connectivity::~triangle_mesh_connectivity(geom::triangle_mesh_connectivity *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 11);
  if (v6)
  {
    *((_QWORD *)this + 12) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 8);
  if (v7)
  {
    *((_QWORD *)this + 9) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 6) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
  {
    *((_QWORD *)this + 3) = v9;
    operator delete(v9);
  }
}

uint64_t geom::convex_mesh_cache<float>::~convex_mesh_cache(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  void **block[7];

  v2 = (void **)(a1 + 8);
  v3 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
  block[0] = (void **)MEMORY[0x24BDAC760];
  block[1] = (void **)0x40000000;
  block[2] = (void **)___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIfED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke;
  block[3] = (void **)&__block_descriptor_tmp;
  block[4] = (void **)1024;
  block[5] = (void **)v3;
  block[6] = (void **)a1;
  dispatch_apply((unint64_t)(v3 + 1023) >> 10, 0, block);
  block[0] = v2;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](block);
  return a1;
}

void ___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIfED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v2 = a1[4];
  v3 = v2 * a2;
  v4 = v2 * a2 + v2;
  if (a1[5] < v4)
    v4 = a1[5];
  v5 = v4 - v3;
  if (v4 > v3)
  {
    v7 = 16 * v3;
    do
    {
      std::shared_ptr<geom::convex_mesh<float>>::reset[abi:nn180100]((_QWORD *)(*(_QWORD *)(a1[6] + 8) + v7));
      v7 += 16;
      --v5;
    }
    while (v5);
  }
}

void std::shared_ptr<geom::convex_mesh<float>>::reset[abi:nn180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)(v2 + 3), v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<geom::cluster<float>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 112);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v3 = *(void **)(a2 + 88);
    if (v3)
    {
      *(_QWORD *)(a2 + 96) = v3;
      operator delete(v3);
    }
    v4 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](a2);
    MEMORY[0x22E2B768C](v4, 0x10F0C401673C24ALL);
  }
}

void std::default_delete<geom::bvh<float,(unsigned char)3>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  if (a2)
  {
    v3 = a2 + 80;
    if (*(_BYTE *)(a2 + 96) && *(_QWORD *)v3)
      MEMORY[0x22E2B7674](*(_QWORD *)v3, 0x1000C80E0EAB150);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
    v4 = (_QWORD *)(a2 + 56);
    if (*(_BYTE *)(a2 + 72) && *v4)
      MEMORY[0x22E2B7674](*v4, 0x1000C80451B5BE8);
    *v4 = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 72) = 0;
    v5 = *(void **)(a2 + 32);
    if (v5)
    {
      *(_QWORD *)(a2 + 40) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a2 + 8);
    if (v6)
    {
      *(_QWORD *)(a2 + 16) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x22E2B768CLL);
  }
}

uint64_t std::unique_ptr<geom::acd<double>::impl,std::default_delete<geom::acd<double>::impl>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    geom::acd<double>::impl::~impl(result);
    JUMPOUT(0x22E2B768CLL);
  }
  return result;
}

uint64_t geom::acd<double>::impl::~impl(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v8;

  v8 = (void **)(a1 + 384);
  std::vector<geom::triangle_mesh_connectivity>::__destroy_vector::operator()[abi:nn180100](&v8);
  v2 = *(void **)(a1 + 360);
  if (v2)
  {
    *(_QWORD *)(a1 + 368) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(_QWORD *)(a1 + 344) = v3;
    operator delete(v3);
  }
  geom::convex_mesh_cache<double>::~convex_mesh_cache(a1 + 304);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::~__hash_table(a1 + 144);
  v4 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
    std::default_delete<geom::bvh<double,(unsigned char)3>>::operator()[abi:nn180100](a1 + 128, v4);
  v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(_QWORD *)(a1 + 112) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t geom::convex_mesh_cache<double>::~convex_mesh_cache(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  void **block[7];

  v2 = (void **)(a1 + 8);
  v3 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
  block[0] = (void **)MEMORY[0x24BDAC760];
  block[1] = (void **)0x40000000;
  block[2] = (void **)___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIdED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke;
  block[3] = (void **)&__block_descriptor_tmp_2;
  block[4] = (void **)1024;
  block[5] = (void **)v3;
  block[6] = (void **)a1;
  dispatch_apply((unint64_t)(v3 + 1023) >> 10, 0, block);
  block[0] = v2;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](block);
  return a1;
}

void ___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIdED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v2 = a1[4];
  v3 = v2 * a2;
  v4 = v2 * a2 + v2;
  if (a1[5] < v4)
    v4 = a1[5];
  v5 = v4 - v3;
  if (v4 > v3)
  {
    v7 = 16 * v3;
    do
    {
      std::shared_ptr<geom::convex_mesh<float>>::reset[abi:nn180100]((_QWORD *)(*(_QWORD *)(a1[6] + 8) + v7));
      v7 += 16;
      --v5;
    }
    while (v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)(v2 + 3), v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<geom::cluster<double>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void **v5;

  if (a2)
  {
    v5 = (void **)(a2 + 168);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    v3 = *(void **)(a2 + 144);
    if (v3)
    {
      *(_QWORD *)(a2 + 152) = v3;
      operator delete(v3);
    }
    v4 = std::shared_ptr<geom::convex_mesh<float>>::~shared_ptr[abi:nn180100](a2);
    MEMORY[0x22E2B768C](v4, 0x10F0C408DC99B65);
  }
}

void std::default_delete<geom::bvh<double,(unsigned char)3>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;

  if (a2)
  {
    v3 = a2 + 80;
    if (*(_BYTE *)(a2 + 96) && *(_QWORD *)v3)
      MEMORY[0x22E2B7674](*(_QWORD *)v3, 0x1000C80FA0F61DDLL);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
    v4 = (_QWORD *)(a2 + 56);
    if (*(_BYTE *)(a2 + 72) && *v4)
      MEMORY[0x22E2B7674](*v4, 0x1000C80E0EAB150);
    *v4 = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 72) = 0;
    v5 = *(void **)(a2 + 32);
    if (v5)
    {
      *(_QWORD *)(a2 + 40) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a2 + 8);
    if (v6)
    {
      *(_QWORD *)(a2 + 16) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x22E2B768CLL);
  }
}

uint64_t geom::create_exact_winding_number_3<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_QWORD *)(v9 + 248) = 0;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  v14[0] = &off_24F148060;
  v14[1] = v9;
  v15 = v14;
  geom::bvh<float,(unsigned char)3>::build_median(v9, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v13 = 0;
  geom::bvh<double,(unsigned char)2>::tree_statistics(v8, (unsigned int *)(v8 + 256), &v13);
  return v8;
}

uint64_t geom::create_exact_winding_number_3<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_QWORD *)(v9 + 248) = 0;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  v14[0] = &off_24F1480F0;
  v14[1] = v9;
  v15 = v14;
  geom::bvh<double,(unsigned char)3>::build_median(v9, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v13 = 0;
  geom::bvh<double,(unsigned char)3>::tree_statistics(v8, (unsigned int *)(v8 + 256), &v13);
  return v8;
}

float geom::query_exact_winding_number_3<float>(_QWORD *a1, float32x4_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  float v5;
  unsigned int v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  __n128 v11;
  __n128 v12;
  uint64_t v13;
  int v14;
  int v15;
  float v17;
  float v18;
  _BOOL4 v19;
  _BOOL4 v20;
  float v21;
  float v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  int32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int v56;
  float v58;
  float v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;

  v3 = (_DWORD *)operator new[]();
  *v3 = 0;
  v4 = a1[1];
  v5 = fabsf(a2.f32[0]);
  v59 = fabsf(a2.f32[1]);
  v60 = v5 == INFINITY;
  v58 = fabsf(a2.f32[2]);
  v6 = 1;
  v7 = 0.0;
  do
  {
    v8 = v6 - 1;
    v9 = v3[v8];
    v10 = (__n128 *)(v4 + (v9 << 6));
    v11 = v10[2];
    v12 = (__n128)a2;
    if (v11.n128_f32[0] != a2.f32[0])
    {
      v17 = fabsf(v11.n128_f32[0]);
      if (((v17 != INFINITY) & ~v60) != 0)
      {
        v12.n128_f32[0] = a2.f32[0] + (float)((float)((float)(v5 + v17) + 1.0) * 0.00001);
        if (v12.n128_f32[0] < v11.n128_f32[0])
          goto LABEL_51;
      }
      else
      {
        v12 = (__n128)a2;
        if (v11.n128_f32[0] > a2.f32[0])
          goto LABEL_51;
      }
    }
    v12.n128_u32[0] = HIDWORD(v10[2].n128_u64[0]);
    if (v11.n128_f32[1] != a2.f32[1])
    {
      v18 = fabsf(v11.n128_f32[1]);
      v19 = v59 == INFINITY;
      if (v18 == INFINITY)
        v19 = 1;
      if (v19)
      {
        if (v11.n128_f32[1] > a2.f32[1])
          goto LABEL_51;
      }
      else if ((float)(a2.f32[1] + (float)((float)((float)(v59 + v18) + 1.0) * 0.00001)) < v11.n128_f32[1])
      {
        goto LABEL_51;
      }
    }
    if (v11.n128_f32[2] != a2.f32[2])
    {
      v12.n128_f32[0] = fabsf(v11.n128_f32[2]);
      v20 = v58 == INFINITY;
      if (v12.n128_f32[0] == INFINITY)
        v20 = 1;
      if (v20)
      {
        if (v11.n128_f32[2] > a2.f32[2])
          goto LABEL_51;
      }
      else
      {
        v12.n128_f32[0] = a2.f32[2] + (float)((float)((float)(v58 + v12.n128_f32[0]) + 1.0) * 0.00001);
        if (v12.n128_f32[0] < v11.n128_f32[2])
          goto LABEL_51;
      }
    }
    v11 = v10[3];
    v12 = (__n128)a2;
    if (v11.n128_f32[0] != a2.f32[0])
    {
      v21 = fabsf(v11.n128_f32[0]);
      if (((v21 != INFINITY) & ~v60) != 0)
      {
        v12.n128_f32[0] = a2.f32[0] + (float)((float)((float)(v5 + v21) + 1.0) * -0.00001);
        if (v12.n128_f32[0] > v11.n128_f32[0])
          goto LABEL_51;
      }
      else
      {
        v12 = (__n128)a2;
        if (v11.n128_f32[0] < a2.f32[0])
          goto LABEL_51;
      }
    }
    v12.n128_u32[0] = HIDWORD(v10[3].n128_u64[0]);
    if (v11.n128_f32[1] != a2.f32[1])
    {
      v22 = fabsf(v11.n128_f32[1]);
      v23 = v59 == INFINITY;
      if (v22 == INFINITY)
        v23 = 1;
      if (v23)
      {
        if (v11.n128_f32[1] < a2.f32[1])
          goto LABEL_51;
      }
      else if ((float)(a2.f32[1] + (float)((float)((float)(v59 + v22) + 1.0) * -0.00001)) > v11.n128_f32[1])
      {
        goto LABEL_51;
      }
    }
    v11.n128_u32[0] = v10[3].n128_u64[1];
    if (v11.n128_f32[2] == a2.f32[2])
      goto LABEL_8;
    v12.n128_f32[0] = fabsf(v11.n128_f32[2]);
    v24 = v58 == INFINITY;
    if (v12.n128_f32[0] == INFINITY)
      v24 = 1;
    if (v24)
    {
      if (v11.n128_f32[2] >= a2.f32[2])
        goto LABEL_8;
    }
    else
    {
      v12.n128_f32[0] = a2.f32[2] + (float)((float)((float)(v58 + v12.n128_f32[0]) + 1.0) * -0.00001);
      if (v12.n128_f32[0] <= v11.n128_f32[2])
      {
LABEL_8:
        v13 = v4 + (v9 << 6);
        v15 = *(_DWORD *)(v13 + 4);
        v14 = *(_DWORD *)(v13 + 8);
        if (v15 == -1 && v14 == -1)
        {
          v7 = v7 + v11.n128_f32[0];
        }
        else
        {
          v3[v8] = v15;
          LODWORD(v8) = v6 + 1;
          v3[v6] = v14;
        }
        goto LABEL_64;
      }
    }
LABEL_51:
    v25 = v10->n128_u32[0];
    v26 = a1[29];
    v27 = *(_DWORD *)(v26 + 8 * v25 + 4);
    if (v27)
    {
      v28 = *(unsigned int *)(v26 + 8 * v25);
      v29 = a1[23];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[24] - v29) >> 2) <= v28)
        abort();
      v30 = (_DWORD *)(v29 + 12 * v28);
      v33 = *v30;
      v31 = v30 + 2;
      v32 = v33;
      v34 = a1[13];
      v35 = vsubq_f32(*(float32x4_t *)(v34 + 16 * v33), a2);
      v36 = vmulq_f32(v35, v35);
      v12 = (__n128)vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1));
      v37 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), (float32x4_t)v12).f32[0]);
      v62 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
      v63 = v35;
      v11 = (__n128)vextq_s8(vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL), (int8x16_t)v35, 8uLL);
      v61 = (float32x4_t)v11;
      v38 = 12 * (v28 + v27) - 12 * v28;
      v39 = 0.0;
      do
      {
        v40 = *(v31 - 2);
        if (v32 != (_DWORD)v40)
        {
          v41 = *(v31 - 1);
          if (v32 != (_DWORD)v41)
          {
            v11.n128_u32[0] = 0;
            v42 = (int32x4_t)a2;
            v43 = (int8x16_t)vsubq_f32(*(float32x4_t *)(v34 + 16 * v40), a2);
            v44 = (int8x16_t)vsubq_f32(*(float32x4_t *)(v34 + 16 * v41), a2);
            v45 = *v31;
            v42.i32[0] = *v31;
            v46 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v42, (int32x4_t)v11), 0);
            v47 = (float32x4_t)vbslq_s8(v46, v44, v43);
            v48 = vmulq_f32(v47, v47);
            v49 = (float32x4_t)vbslq_s8(v46, v43, v44);
            v48.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).f32[0]);
            v50 = vmulq_f32(v49, v49);
            v51 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0]);
            v52 = vmulq_f32(v47, vmlaq_f32(vmulq_f32(v61, vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL))), v62, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v49, (int8x16_t)v49, 0xCuLL), (int8x16_t)v49, 8uLL)));
            v53 = vmulq_f32(v47, v49);
            v54 = vmulq_f32(v63, v49);
            v55 = vmulq_f32(v63, v47);
            v11.n128_f32[0] = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0], vmlas_n_f32(vmlas_n_f32((float)(v37* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0])+ (float)((float)(v48.f32[0] * v51) * v37), v48.f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).f32[0]), v51, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]));
            v11.n128_f32[0] = v11.n128_f32[0] + v11.n128_f32[0];
            if (v45 >= 0)
              v56 = v45;
            else
              v56 = -v45;
            v39 = v39 + (float)(v11.n128_f32[0] * (float)v56);
          }
        }
        v31 += 3;
        v38 -= 12;
      }
      while (v38);
      v12.n128_u64[0] = 0x402921FB54442D18;
      v11.n128_f64[0] = v39 / 12.5663706;
      v11.n128_f32[0] = v11.n128_f64[0];
    }
    else
    {
      v11.n128_u32[0] = 0;
    }
    v7 = v7 - v11.n128_f32[0];
LABEL_64:
    v6 = v8;
  }
  while ((_DWORD)v8);
  MEMORY[0x22E2B7674](v3, 0x1000C8052888210, v11, v12);
  return v7;
}

double geom::query_exact_winding_number_3<double>(_QWORD *a1, float64x2_t *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  int8x16_t v10;
  double v12;
  double v13;
  _BOOL4 v14;
  BOOL v15;
  int8x16_t v17;
  double v19;
  double v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  int8x16_t v40;
  int32x4_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  float64x2_t *v46;
  int32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float64x2_t *v50;
  int8x16_t v51;
  int v52;
  int8x16_t v53;
  int8x16_t v54;
  int64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  int v64;
  double v65;
  uint64_t v66;
  int v67;
  int v68;
  float64_t v71;
  int8x16_t v72;
  float64x2_t v73;
  unint64_t v74;
  float64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80[3];

  v78 = a2[1];
  v79 = *a2;
  v3 = (_DWORD *)operator new[]();
  *v3 = 0;
  v4 = a1[1];
  v5 = 1;
  v6 = 0.0;
  do
  {
    v7 = v5 - 1;
    v8 = v3[v7];
    v9 = (unsigned int *)(v4 + 96 * v8);
    v10 = *((int8x16_t *)v9 + 2);
    if (*(double *)v10.i64 != v79.f64[0] && v79.f64[0] + 0.000001 < *(double *)v10.i64)
      goto LABEL_29;
    v12 = *((double *)v9 + 6);
    *(_QWORD *)&v13 = vextq_s8(v10, v10, 8uLL).u64[0];
    v14 = v12 == v78.f64[0];
    if (v78.f64[0] + 0.000001 >= v12)
      v14 = 1;
    v15 = v79.f64[1] + 0.000001 >= v13 || v13 == v79.f64[1];
    if (!v15 || !v14)
      goto LABEL_29;
    v17 = *((int8x16_t *)v9 + 4);
    if (*(double *)v17.i64 != v79.f64[0] && v79.f64[0] + -0.000001 > *(double *)v17.i64)
      goto LABEL_29;
    v19 = *((double *)v9 + 10);
    *(_QWORD *)&v20 = vextq_s8(v17, v17, 8uLL).u64[0];
    v21 = v19 == v78.f64[0];
    if (v78.f64[0] + -0.000001 <= v19)
      v21 = 1;
    v22 = v79.f64[1] + -0.000001 <= v20 || v20 == v79.f64[1];
    if (!v22 || !v21)
    {
LABEL_29:
      v24 = *v9;
      v25 = a1[29];
      v26 = *(_DWORD *)(v25 + 8 * v24 + 4);
      if (v26)
      {
        v27 = *(unsigned int *)(v25 + 8 * v24);
        v28 = a1[23];
        if (0xAAAAAAAAAAAAAAABLL * ((a1[24] - v28) >> 2) <= v27)
          abort();
        v29 = 3 * v27;
        v30 = (_DWORD *)(v28 + 12 * v27);
        v33 = *v30;
        v31 = v30 + 2;
        v32 = v33;
        v34 = a1[13];
        v35 = v27 + v26;
        v36 = (float64x2_t *)(v34 + 32 * v33);
        v37 = vsubq_f64(*v36, v79);
        v38 = vsubq_f64(v36[1], v78);
        v39 = sqrt(vmulq_f64(v38, v38).f64[0] + vaddvq_f64(vmulq_f64(v37, v37)));
        v40.i64[0] = *(_QWORD *)&v38.f64[0];
        v40.i64[1] = *(_QWORD *)&v37.f64[0];
        v75 = v38.f64[0];
        v76 = v38;
        v73 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL);
        v74 = vextq_s8(v40, v40, 8uLL).u64[0];
        v77 = v37;
        v72 = vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL);
        v41 = (int32x4_t)vextq_s8(v72, v72, 8uLL);
        v71 = *(double *)v41.i64;
        v42 = 12 * v35 - 4 * v29;
        v43 = 0.0;
        do
        {
          v44 = *(v31 - 2);
          if (v32 != (_DWORD)v44)
          {
            v45 = *(v31 - 1);
            if (v32 != (_DWORD)v45)
            {
              v41.i32[0] = 0;
              v46 = (float64x2_t *)(v34 + 32 * v44);
              v47 = (int32x4_t)v78;
              v48 = (int8x16_t)vsubq_f64(v46[1], v78);
              v49 = (int8x16_t)vsubq_f64(*v46, v79);
              v50 = (float64x2_t *)(v34 + 32 * v45);
              v51 = (int8x16_t)vsubq_f64(v50[1], v78);
              v52 = *v31;
              v47.i32[0] = *v31;
              v53 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v47, v41), 0);
              v54 = (int8x16_t)vsubq_f64(*v50, v79);
              v55 = (int64x2_t)vbslq_s8(v53, v49, v54);
              v56 = (float64x2_t)vbslq_s8(v53, v48, v51);
              v57 = (float64x2_t)vbslq_s8(v53, v54, v49);
              v58 = (float64x2_t)vbslq_s8(v53, v51, v48);
              *(double *)v54.i64 = sqrt(vmulq_f64(v58, v58).f64[0] + vaddvq_f64(vmulq_f64(v57, v57)));
              *(double *)v51.i64 = sqrt(vmulq_f64(v56, v56).f64[0]+ vaddvq_f64(vmulq_f64((float64x2_t)v55, (float64x2_t)v55)));
              v59 = (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v56, 8uLL);
              v60 = vmulq_f64(v58, v56).f64[0];
              v61 = vmulq_f64(v76, v56).f64[0];
              *(_QWORD *)&v56.f64[1] = v55.i64[0];
              *(_QWORD *)&v62.f64[0] = v72.i64[0];
              v62.f64[1] = v71;
              v63 = vmulq_f64(v62, vnegq_f64(v56));
              v62.f64[0] = v75;
              *(_QWORD *)&v62.f64[1] = v74;
              *(double *)v41.i64 = atan2(vmulq_f64(v58, vmlaq_f64(vmulq_f64(v77, vnegq_f64((float64x2_t)vdupq_laneq_s64(v55, 1))), v73, (float64x2_t)v55)).f64[0]+ vaddvq_f64(vmulq_f64(v57, vmlaq_f64(v63, v62, v59))), v39 * (v60 + vaddvq_f64(vmulq_f64(v57, (float64x2_t)v55)))+ *(double *)v54.i64 * *(double *)v51.i64 * v39+ (v61 + vaddvq_f64(vmulq_f64(v77, (float64x2_t)v55))) * *(double *)v54.i64+ (vmulq_f64(v76, v58).f64[0] + vaddvq_f64(vmulq_f64(v77, v57))) * *(double *)v51.i64);
              *(double *)v41.i64 = *(double *)v41.i64 + *(double *)v41.i64;
              if (v52 >= 0)
                v64 = v52;
              else
                v64 = -v52;
              v43 = v43 + *(double *)v41.i64 * (double)v64;
            }
          }
          v31 += 3;
          v42 -= 12;
        }
        while (v42);
        v65 = v43 / 12.5663706;
      }
      else
      {
        v65 = 0.0;
      }
      v6 = v6 - v65;
    }
    else
    {
      v66 = v4 + 96 * v8;
      v68 = *(_DWORD *)(v66 + 4);
      v67 = *(_DWORD *)(v66 + 8);
      if (v68 == -1 && v67 == -1)
      {
        v80[0] = v79;
        v80[1] = v78;
      }
      else
      {
        v3[v7] = v68;
        LODWORD(v7) = v5 + 1;
        v3[v5] = v67;
      }
    }
    v5 = v7;
  }
  while ((_DWORD)v7);
  MEMORY[0x22E2B7674](v3, 0x1000C8052888210);
  return v6;
}

_QWORD *geom::free_exact_winding_number_3<float>(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  if (result)
  {
    v1 = result;
    v2 = (void *)result[29];
    if (v2)
    {
      v1[30] = v2;
      operator delete(v2);
    }
    v3 = v1[26];
    if (v3)
    {
      v4 = v1[27];
      v5 = (void *)v1[26];
      if (v4 != v3)
      {
        v6 = v1[27];
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = (void *)v1[26];
      }
      v1[27] = v3;
      operator delete(v5);
    }
    v9 = (void *)v1[23];
    if (v9)
    {
      v1[24] = v9;
      operator delete(v9);
    }
    JUMPOUT(0x22E2B768CLL);
  }
  return result;
}

_QWORD *geom::free_exact_winding_number_3<double>(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  if (result)
  {
    v1 = result;
    v2 = (void *)result[29];
    if (v2)
    {
      v1[30] = v2;
      operator delete(v2);
    }
    v3 = v1[26];
    if (v3)
    {
      v4 = v1[27];
      v5 = (void *)v1[26];
      if (v4 != v3)
      {
        v6 = v1[27];
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = (void *)v1[26];
      }
      v1[27] = v3;
      operator delete(v5);
    }
    v9 = (void *)v1[23];
    if (v9)
    {
      v1[24] = v9;
      operator delete(v9);
    }
    JUMPOUT(0x22E2B768CLL);
  }
  return result;
}

uint64_t geom::create_approximate_winding_number_3<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  v9[24] = 0;
  v9[25] = 0;
  v9[26] = 0;
  v14[0] = &off_24F148180;
  v14[1] = v9;
  v15 = v14;
  geom::bvh<float,(unsigned char)3>::build_surface_area_heuristic((uint64_t)v9, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v13 = 0;
  geom::bvh<double,(unsigned char)2>::tree_statistics(v8, (unsigned int *)(v8 + 184), &v13);
  return v8;
}

uint64_t geom::create_approximate_winding_number_3<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  v9[24] = 0;
  v9[25] = 0;
  v9[26] = 0;
  v14[0] = &off_24F148200;
  v14[1] = v9;
  v15 = v14;
  geom::bvh<double,(unsigned char)3>::build_surface_area_heuristic((uint64_t)v9, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v11 = 5;
LABEL_5:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v13 = 0;
  geom::bvh<double,(unsigned char)3>::tree_statistics(v8, (unsigned int *)(v8 + 184), &v13);
  return v8;
}

float geom::query_approximate_winding_number_3<float>(_QWORD *a1, float32x4_t a2)
{
  _DWORD *v3;
  float32x4_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned int v19;
  unint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float v65;
  unsigned int v66;
  unsigned int v67;

  v3 = (_DWORD *)operator new[]();
  v4 = a2;
  v5 = v3;
  *v3 = 0;
  v6 = a1[1];
  v7 = a1[24];
  v8 = 0.0;
  v9 = 1;
  do
  {
    v10 = v9 - 1;
    v11 = (unsigned int *)(v6 + ((unint64_t)v5[v10] << 6));
    v12 = (float32x4_t *)(v7 + 240 * *v11);
    v13 = vsubq_f32(v4, *v12);
    v14 = vmulq_f32(v13, v13);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]) <= (float)(v12[1].f32[0] + v12[1].f32[0]))
    {
      v67 = v11[1];
      v66 = v11[2];
      if (v67 != -1 || v66 != -1)
      {
        v5[v10] = v67;
        LODWORD(v10) = v9 + 1;
        v5[v9] = v66;
        goto LABEL_11;
      }
      v4 = a2;
    }
    else
    {
      v15 = vsubq_f32(*v12, v4);
      v16 = vmulq_f32(v15, v15);
      v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1);
      v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2);
      v16.f32[0] = vaddq_f32(v18, vaddq_f32(v16, v17)).f32[0];
      v17.f32[0] = sqrtf(v16.f32[0]) * v16.f32[0];
      v18.f32[0] = v17.f32[0] * v16.f32[0];
      v16.f32[0] = (float)(v17.f32[0] * v16.f32[0]) * v16.f32[0];
      *(float *)&v19 = 1.0 / v17.f32[0];
      LODWORD(v20) = 0;
      *((float *)&v20 + 1) = 1.0 / v17.f32[0];
      v21.i64[0] = 0;
      v21.i32[3] = 0;
      v21.f32[2] = 1.0 / v17.f32[0];
      v22 = vdivq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0));
      v23 = vmulq_n_f32(v15, v15.f32[0]);
      v24 = vmulq_lane_f32(v15, *(float32x2_t *)v15.f32, 1);
      v25 = vmulq_laneq_f32(v15, v15, 2);
      v26 = vaddq_f32((float32x4_t)v19, vmulq_n_f32(v23, -3.0 / v18.f32[0]));
      v27 = vaddq_f32((float32x4_t)v20, vmulq_n_f32(v24, -3.0 / v18.f32[0]));
      v28 = vmulq_n_f32(v25, -3.0 / v18.f32[0]);
      v29 = vdivq_f32(vnegq_f32(v15), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0));
      v30 = (float32x4_t)vrev64q_s32((int32x4_t)v29);
      v31 = (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
      v32 = (float32x4_t)vuzp2q_s32(vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int32x4_t)v29);
      v32.i32[0] = 0;
      v31.i32[1] = 0;
      v30.i32[2] = 0;
      v33 = vaddq_f32(v21, v28);
      v34 = vmulq_n_f32(v15, 15.0 / v16.f32[0]);
      v35 = vmulq_n_f32(v23, v34.f32[0]);
      v36 = vmulq_n_f32(v24, v34.f32[0]);
      v37 = vmulq_n_f32(v25, v34.f32[0]);
      v38 = vmulq_lane_f32(v23, *(float32x2_t *)v34.f32, 1);
      v39 = vmulq_lane_f32(v24, *(float32x2_t *)v34.f32, 1);
      v40 = vmulq_lane_f32(v25, *(float32x2_t *)v34.f32, 1);
      v41 = vmulq_laneq_f32(v23, v34, 2);
      v42 = vmulq_laneq_f32(v24, v34, 2);
      v43 = vmulq_laneq_f32(v25, v34, 2);
      v44 = vaddq_f32(v29, v35);
      v45 = vaddq_f32(v30, v36);
      v46 = vaddq_f32(v31, v37);
      v47 = vaddq_f32(v29, v39);
      v48 = vaddq_f32(v29, v43);
      v49 = (float32x4_t *)(v7 + 240 * *v11);
      v50 = vmulq_f32(v22, v49[2]);
      v51 = vmulq_f32(v26, v49[3]);
      v52 = vmulq_f32(v27, v49[4]);
      v53 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))));
      v54 = vmulq_f32(v33, v49[5]);
      v55 = vmulq_f32(v44, v49[6]);
      v56 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))), v53);
      v57 = vmulq_f32(v45, v49[7]);
      v53.i32[0] = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1)))).u32[0];
      v58 = (int8x16_t)vmulq_f32(v46, v49[8]);
      v33.f32[0] = vaddv_f32(*(float32x2_t *)v58.i8);
      v59 = (int8x16_t)vmulq_f32(vaddq_f32(v30, v38), v49[9]);
      v45.f32[0] = vaddv_f32(*(float32x2_t *)v59.i8);
      v60 = vmulq_f32(v47, v49[10]);
      v61 = (int8x16_t)vmulq_f32(vaddq_f32(v32, v40), v49[11]);
      v62 = (int8x16_t)vmulq_f32(vaddq_f32(v31, v41), v49[12]);
      v63 = (int32x4_t)vmulq_f32(vaddq_f32(v32, v42), v49[13]);
      v64 = (int32x4_t)vmulq_f32(v48, v49[14]);
      *(float32x2_t *)v31.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v61.i8, *(int32x2_t *)v62.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v61.i8, *(int32x2_t *)v62.i8));
      *(int32x2_t *)v62.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
      *(int32x2_t *)v59.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), *(int32x2_t *)v63.i8);
      *(int32x2_t *)v61.i8 = vdup_laneq_s32(v63, 2);
      v63.i32[0] = v45.i32[0];
      v61.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).u32[0];
      *(float32x2_t *)v59.i8 = vadd_f32(*(float32x2_t *)v61.i8, vadd_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v63.i8));
      *(int32x2_t *)v58.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), *(int32x2_t *)v64.i8);
      *(int32x2_t *)v63.i8 = vdup_laneq_s32(v64, 2);
      v64.i32[0] = v33.i32[0];
      v63.i32[0] = v53.i32[0];
      v65 = (float)(vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))), v56).f32[0]+ (float)(vaddv_f32(vadd_f32(vadd_f32(*(float32x2_t *)v63.i8, vadd_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v64.i8)), vadd_f32(vadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v31.f32), *(float32x2_t *)v59.i8)))* 0.5))/ 12.566;
    }
    v8 = v8 + v65;
LABEL_11:
    v9 = v10;
  }
  while ((_DWORD)v10);
  MEMORY[0x22E2B7674](v5, 0x1000C8052888210);
  return v8;
}

double geom::query_approximate_winding_number_3<double>(_QWORD *a1, float64x2_t *a2)
{
  _DWORD *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t *v72;
  double v73;
  uint64_t v74;
  int v75;
  int v76;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81[2];

  v79 = *a2;
  v80 = a2[1];
  v3 = (_DWORD *)operator new[]();
  v7 = v79;
  v6 = v80;
  v8 = v3;
  *v3 = 0;
  v9 = a1[1];
  v10 = a1[24];
  v11 = 0.0;
  v12 = 1;
  do
  {
    v13 = v12 - 1;
    v14 = v8[v13];
    v15 = (unsigned int *)(v9 + 96 * v14);
    v16 = (float64x2_t *)(v10 + 464 * *v15);
    v17 = v16[1];
    v18 = vsubq_f64(v7, *v16);
    v19 = vsubq_f64(v6, v17);
    if (sqrt(vmulq_f64(v19, v19).f64[0] + vaddvq_f64(vmulq_f64(v18, v18))) <= v16[2].f64[0] + v16[2].f64[0])
    {
      v74 = v9 + 96 * v14;
      v76 = *(_DWORD *)(v74 + 4);
      v75 = *(_DWORD *)(v74 + 8);
      if (v76 != -1 || v75 != -1)
      {
        v8[v13] = v76;
        LODWORD(v13) = v12 + 1;
        v8[v12] = v75;
        goto LABEL_11;
      }
      v81[0] = v7;
      v81[1] = v6;
      v7 = v79;
      v6 = v80;
    }
    else
    {
      v20 = vsubq_f64(v17, v6);
      v21 = vsubq_f64(*v16, v7);
      v22 = vmulq_f64(v20, v20);
      v23 = v22.f64[0] + vaddvq_f64(vmulq_f64(v21, v21));
      v24 = sqrt(v23);
      v7.f64[0] = v23 * v24;
      v4.f64[0] = v23 * (v23 * v24);
      v25 = v23 * v4.f64[0];
      v26 = vdivq_f64(v21, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v23 * v24), 0));
      v27 = vdivq_f64(v20, v7);
      v7.f64[0] = 1.0 / v7.f64[0];
      v28 = vmulq_f64(v20, v21);
      v29 = vmulq_n_f64(v21, v21.f64[0]);
      v30 = vmulq_laneq_f64(v20, v21, 1);
      v31 = vmulq_laneq_f64(v21, v21, 1);
      v32 = vmulq_n_f64(v21, v20.f64[0]);
      v5.f64[0] = -3.0 / v4.f64[0];
      v33 = vmulq_f64(v28, v5);
      v34 = vaddq_f64((float64x2_t)*(unint64_t *)&v7.f64[0], vmulq_n_f64(v29, -3.0 / v4.f64[0]));
      v35.f64[0] = 0.0;
      v35.f64[1] = v7.f64[0];
      v36 = vmulq_f64(v30, v5);
      v37 = vaddq_f64(v35, vmulq_n_f64(v31, -3.0 / v4.f64[0]));
      v38 = vmulq_n_f64(v32, -3.0 / v4.f64[0]);
      v39 = vaddq_f64(v7, vmulq_f64(v22, v5));
      v40 = vdivq_f64(vnegq_f64(v20), v4);
      v41 = vdivq_f64(vnegq_f64(v21), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0));
      v42 = (float64x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL);
      v4.f64[0] = 15.0 / v25;
      v43 = vmulq_f64(v20, v4);
      v44 = vmulq_n_f64(v21, 15.0 / v25);
      v45 = vmulq_f64(v28, v44);
      v46 = vmulq_n_f64(v29, v44.f64[0]);
      v47 = vmulq_f64(v30, v44);
      v48 = vmulq_n_f64(v31, v44.f64[0]);
      v49 = vmulq_f64(v22, v44);
      v50 = vmulq_n_f64(v32, v44.f64[0]);
      v51 = vmulq_laneq_f64(v28, v44, 1);
      v52 = vmulq_laneq_f64(v29, v44, 1);
      v53 = vmulq_laneq_f64(v30, v44, 1);
      v54 = vmulq_laneq_f64(v31, v44, 1);
      v55 = vmulq_laneq_f64(v22, v44, 1);
      v56 = vmulq_laneq_f64(v32, v44, 1);
      v57 = vmulq_f64(v28, v43);
      v58 = vmulq_n_f64(v29, v43.f64[0]);
      v59 = vmulq_f64(v30, v43);
      v60 = vmulq_n_f64(v31, v43.f64[0]);
      v61 = vmulq_f64(v22, v43);
      v62 = vmulq_n_f64(v32, v43.f64[0]);
      v63 = vaddq_f64(v42, v48);
      v64 = vaddq_f64(v42, v52);
      v65 = vaddq_f64((float64x2_t)*(unint64_t *)&v40.f64[0], v50);
      v66 = vaddq_f64((float64x2_t)*(unint64_t *)&v40.f64[0], v58);
      v67 = vaddq_f64(v40, v45);
      v68 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40.f64[0], 0);
      v68.f64[0] = 0.0;
      v69 = vaddq_f64(v68, v56);
      v70 = vaddq_f64(v68, v60);
      v71 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v41, 1);
      v72 = (float64x2_t *)(v10 + 464 * *v15);
      v26.f64[0] = vmulq_f64(v27, v72[4]).f64[0] + vaddvq_f64(vmulq_f64(v26, v72[3]));
      v27.f64[0] = vmulq_f64(v39, v72[10]).f64[0]
                 + vaddvq_f64(vmulq_f64(vaddq_f64(v38, (float64x2_t)0), v72[9]))
                 + vmulq_f64(vaddq_f64(v33, (float64x2_t)0), v72[6]).f64[0]
                 + vaddvq_f64(vmulq_f64(v34, v72[5]))
                 + vmulq_f64(vaddq_f64(v36, (float64x2_t)0), v72[8]).f64[0]
                 + vaddvq_f64(vmulq_f64(v37, v72[7]));
      v4 = vmulq_f64(vaddq_f64(v51, (float64x2_t)0), v72[18]);
      v5 = v72[23];
      v61.f64[0] = vmulq_f64(vaddq_f64(v41, v49), v72[16]).f64[0]
                 + vaddvq_f64(vmulq_f64(v65, v72[15]))
                 + vmulq_f64(v67, v72[12]).f64[0]
                 + vaddvq_f64(vmulq_f64(vaddq_f64(v41, v46), v72[11]))
                 + vmulq_f64(vaddq_f64(v47, (float64x2_t)0), v72[14]).f64[0]
                 + vaddvq_f64(vmulq_f64(v63, v72[13]))
                 + vmulq_f64(vaddq_f64(v71, v55), v72[22]).f64[0]
                 + vaddvq_f64(vmulq_f64(v69, v72[21]))
                 + v4.f64[0]
                 + vaddvq_f64(vmulq_f64(v64, v72[17]))
                 + vmulq_f64(vaddq_f64(v40, v53), v72[20]).f64[0]
                 + vaddvq_f64(vmulq_f64(vaddq_f64(v41, v54), v72[19]))
                 + vmulq_f64(vaddq_f64(v40, v61), v72[28]).f64[0]
                 + vaddvq_f64(vmulq_f64(vaddq_f64(v41, v62), v72[27]))
                 + vmulq_f64(vaddq_f64(v41, v57), v72[24]).f64[0]
                 + vaddvq_f64(vmulq_f64(v66, v5))
                 + vmulq_f64(vaddq_f64(v71, v59), v72[26]).f64[0]
                 + vaddvq_f64(vmulq_f64(v70, v72[25]));
      v26.f64[0] = v26.f64[0] + v27.f64[0];
      v7 = v79;
      v6 = v80;
      v73 = (v26.f64[0] + v61.f64[0] * 0.5) / 12.5663706;
    }
    v11 = v11 + v73;
LABEL_11:
    v12 = v13;
  }
  while ((_DWORD)v13);
  MEMORY[0x22E2B7674](v8, 0x1000C8052888210);
  return v11;
}

uint64_t geom::free_approximate_winding_number_3<float>(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 192);
    if (v2)
    {
      *(_QWORD *)(v1 + 200) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x22E2B768CLL);
  }
  return result;
}

uint64_t geom::free_approximate_winding_number_3<double>(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 192);
    if (v2)
    {
      *(_QWORD *)(v1 + 200) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x22E2B768CLL);
  }
  return result;
}

uint64_t geom::`anonymous namespace'::winding_number_base<float>::winding_number_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  unint64_t v35;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v44[8];
  void *v45[2];
  uint64_t v46;
  void *__p[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  v10 = geom::bvh<float,(unsigned char)3>::bvh(a1, 0, 0, 0, 0, 0);
  *(_OWORD *)(v10 + 136) = 0u;
  v11 = v10 + 136;
  *(_QWORD *)(v10 + 104) = a2;
  *(_QWORD *)(v10 + 112) = a3;
  *(_QWORD *)(v10 + 120) = a4;
  *(_QWORD *)(v10 + 128) = a5;
  v12 = v10 + 160;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(v10 + 136, a5 / 3);
  std::vector<geom::bbox<float,(unsigned char)3>>::resize(v12, *(_QWORD *)(v11 - 8) / 3uLL);
  v13 = *(float32x4_t **)v11;
  if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
  {
    v35 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 2;
    v16 = 1;
    __asm { FMOV            V0.4S, #3.0 }
    do
    {
      v22 = *(_QWORD *)(a1 + 120);
      v23 = *(unsigned int *)(v22 + 4 * (v15 - 2));
      v24 = *(unsigned int *)(v22 + 4 * (v15 - 1));
      v25 = *(unsigned int *)(v22 + 4 * v15);
      v26 = *(_QWORD *)(a1 + 104);
      v13[v14] = vdivq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v26 + 16 * v23), *(float32x4_t *)(v26 + 16 * v24)), *(float32x4_t *)(v26 + 16 * v25)), _Q0);
      v27 = *(float32x4_t *)(v26 + 16 * v23);
      v28 = *(float32x4_t *)(v26 + 16 * v24);
      v29 = *(float32x4_t *)(v26 + 16 * v25);
      v28.i32[3] = 0;
      v29.i32[3] = 0;
      v27.i32[3] = 0;
      v30 = vminnmq_f32(v28, v29);
      v30.i32[3] = 0;
      *(float32x4_t *)(*(_QWORD *)(a1 + 160) + 32 * v14) = vminnmq_f32(v27, v30);
      v31 = *(float32x4_t *)(v26 + 16 * v23);
      v32 = *(float32x4_t *)(v26 + 16 * v24);
      v33 = *(float32x4_t *)(v26 + 16 * v25);
      v32.i32[3] = 0;
      v33.i32[3] = 0;
      v34 = vmaxnmq_f32(v32, v33);
      v31.i32[3] = 0;
      v34.i32[3] = 0;
      *(float32x4_t *)(*(_QWORD *)(a1 + 160) + 32 * v14 + 16) = vmaxnmq_f32(v31, v34);
      v14 = v16;
      v13 = *(float32x4_t **)(a1 + 136);
      v35 = (uint64_t)(*(_QWORD *)(a1 + 144) - (_QWORD)v13) >> 4;
      v15 += 3;
    }
    while (v35 > v16++);
  }
  geom::bvh<float,(unsigned char)3>::bvh((uint64_t)v44, v13, (const void *)v35, *(const void **)(a1 + 160), (const void *)((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 5), 0);
  *(_BYTE *)a1 = v44[0];
  v37 = *(void **)(a1 + 8);
  if (v37)
  {
    *(_QWORD *)(a1 + 16) = v37;
    operator delete(v37);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v45;
  *(_QWORD *)(a1 + 24) = v46;
  v45[1] = 0;
  v46 = 0;
  v45[0] = 0;
  v38 = *(void **)(a1 + 32);
  if (v38)
  {
    *(_QWORD *)(a1 + 40) = v38;
    operator delete(v38);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 48) = v48;
  __p[1] = 0;
  v48 = 0;
  __p[0] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v39 = *(_QWORD *)(a1 + 56);
    if (v39)
      MEMORY[0x22E2B7674](v39, 0x1000C80451B5BE8);
  }
  v40 = v50;
  *(_QWORD *)(a1 + 56) = v49;
  *(_QWORD *)(a1 + 64) = v40;
  *(_BYTE *)(a1 + 72) = v51;
  v51 = 0;
  v49 = 0;
  v50 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v41 = *(_QWORD *)(a1 + 80);
    if (v41)
      MEMORY[0x22E2B7674](v41, 0x1000C80E0EAB150);
  }
  v42 = v53;
  *(_QWORD *)(a1 + 80) = v52;
  *(_QWORD *)(a1 + 88) = v42;
  *(_BYTE *)(a1 + 96) = v54;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if (v51 && v49)
    MEMORY[0x22E2B7674](v49, 0x1000C80451B5BE8);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  return a1;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void std::vector<geom::bbox<float,(unsigned char)3>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<geom::bbox<float,(unsigned char)3>>::__append((void **)a1, a2 - v2);
  }
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<geom::bbox<float,(unsigned char)3>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int32x4_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t *v17;
  int32x4_t *v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t *v21;
  char *v22;
  int32x4_t *v23;
  char *v24;
  int32x4_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(int32x4_t **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 5)
  {
    if (a2)
    {
      v14 = &v7[2 * a2];
      v15 = vdupq_n_s32(0x7F800000u);
      v16.i64[0] = 0x7F0000007FLL;
      v16.i64[1] = 0x7F0000007FLL;
      do
      {
        *v7 = v15;
        v7[1] = v16;
        v7 += 2;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      abort();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v17 = (int32x4_t *)&v13[32 * v10];
    v18 = &v17[2 * a2];
    v19 = vdupq_n_s32(0x7F800000u);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    v21 = v17;
    do
    {
      *v21 = v19;
      v21[1] = v20;
      v21 += 2;
    }
    while (v21 != v18);
    v22 = &v13[32 * v12];
    v24 = (char *)*a1;
    v23 = (int32x4_t *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = v23[-1];
        v17[-2] = v23[-2];
        v17[-1] = v25;
        v17 -= 2;
        v23 -= 2;
      }
      while (v23 != (int32x4_t *)v24);
      v23 = (int32x4_t *)*a1;
    }
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148060;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148060;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  size_t v34;
  char *v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *edge_count;
  int v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  int v57;
  unsigned int v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  unsigned int v83;
  uint64_t v86;
  _DWORD *v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(char **)(v4 + 232);
  v6 = *(char **)(v4 + 240);
  v7 = (v6 - v5) >> 3;
  v8 = *a2;
  if (v7 > v8)
    goto LABEL_19;
  v9 = (v8 + 1);
  v10 = v9 - v7;
  if (v9 <= v7)
  {
    if (v9 >= v7)
      goto LABEL_19;
    v19 = &v5[8 * v9];
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v4 + 248);
  if (v10 <= (v11 - (uint64_t)v6) >> 3)
  {
    memset(*(void **)(v4 + 240), 255, 8 * v10);
    v19 = &v6[8 * v10];
LABEL_18:
    *(_QWORD *)(v4 + 240) = v19;
    goto LABEL_19;
  }
  v12 = v11 - (_QWORD)v5;
  if (v12 >> 2 > v9)
    v9 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v9;
  if (v13 >> 61)
    goto LABEL_95;
  v14 = (char *)operator new(8 * v13);
  v15 = &v14[8 * v7];
  v16 = &v14[8 * v13];
  memset(v15, 255, 8 * v10);
  v17 = &v15[8 * v10];
  if (v6 != v5)
  {
    do
    {
      v18 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    while (v6 != v5);
    v6 = v5;
  }
  *(_QWORD *)(v4 + 232) = v15;
  *(_QWORD *)(v4 + 240) = v17;
  *(_QWORD *)(v4 + 248) = v16;
  if (v6)
    operator delete(v6);
LABEL_19:
  LODWORD(a3) = a2[4];
  v20 = sqrt((double)*(unint64_t *)&a3);
  if (v20 <= 8)
    v21 = 8;
  else
    v21 = v20;
  v22 = *(_QWORD **)(v4 + 208);
  v23 = *(_QWORD **)(v4 + 216);
  v24 = 0xAAAAAAAAAAAAAAABLL * (v23 - v22);
  v88 = v21;
  v25 = v21 - v24;
  if (v21 <= v24)
    goto LABEL_42;
  v26 = *(_QWORD *)(v4 + 224);
  if (0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v23) >> 3) >= v25)
  {
    bzero(v23, 24 * ((24 * v25 - 24) / 0x18) + 24);
    *(_QWORD *)(v4 + 216) = &v23[3 * ((24 * v25 - 24) / 0x18) + 3];
    goto LABEL_42;
  }
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v22) >> 3);
  v28 = 0x5555555555555556 * ((v26 - (uint64_t)v22) >> 3);
  if (v28 <= v21)
    v28 = v21;
  if (v27 >= 0x555555555555555)
    v29 = 0xAAAAAAAAAAAAAAALL;
  else
    v29 = v28;
  if (v29 > 0xAAAAAAAAAAAAAAALL)
LABEL_95:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v30 = 3 * v29;
  v31 = (char *)operator new(24 * v29);
  v32 = &v31[8 * (v23 - v22)];
  v33 = &v31[8 * v30];
  v34 = 24 * ((24 * v25 - 24) / 0x18) + 24;
  bzero(v32, v34);
  v35 = &v32[v34];
  if (v23 == v22)
  {
    *(_QWORD *)(v4 + 208) = v32;
    *(_QWORD *)(v4 + 216) = v35;
    *(_QWORD *)(v4 + 224) = v33;
    if (!v23)
      goto LABEL_42;
LABEL_41:
    operator delete(v23);
    goto LABEL_42;
  }
  do
  {
    v36 = *(_OWORD *)(v23 - 3);
    v23 -= 3;
    *(_OWORD *)(v32 - 24) = v36;
    v32 -= 24;
    *((_QWORD *)v32 + 2) = v23[2];
    *v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
  }
  while (v23 != v22);
  v23 = *(_QWORD **)(v4 + 208);
  v37 = *(_QWORD **)(v4 + 216);
  *(_QWORD *)(v4 + 208) = v32;
  *(_QWORD *)(v4 + 216) = v35;
  *(_QWORD *)(v4 + 224) = v33;
  if (v37 != v23)
  {
    v38 = v37;
    do
    {
      v40 = (void *)*(v38 - 3);
      v38 -= 3;
      v39 = v40;
      if (v40)
      {
        *(v37 - 2) = v39;
        operator delete(v39);
      }
      v37 = v38;
    }
    while (v38 != v23);
  }
  if (v23)
    goto LABEL_41;
LABEL_42:
  v41 = (_QWORD *)(*(_QWORD *)(v4 + 208) + 8);
  v42 = v88;
  do
  {
    *v41 = *(v41 - 1);
    v41 += 3;
    --v42;
  }
  while (v42);
  v43 = a2[4];
  if (v43)
  {
    v44 = a2[3];
    v45 = (_DWORD *)(*(_QWORD *)(v4 + 32) + 4 * v44);
    for (i = 4 * (v43 + v44) - 4 * v44; i; i -= 4)
    {
      v47 = (3 * *v45);
      v48 = *(_QWORD *)(v4 + 120);
      v49 = *(_DWORD *)(v48 + 4 * v47);
      v50 = (v47 + 1);
      v51 = *(_DWORD *)(v48 + 4 * v50);
      if (v49 >= v51)
      {
        if (v51 >= v49)
          goto LABEL_51;
        v89 = *(_DWORD *)(v48 + 4 * v50);
        v90 = v49;
        v53 = -1;
      }
      else
      {
        v89 = *(_DWORD *)(v48 + 4 * v47);
        v90 = v51;
        v53 = 1;
      }
      *((_DWORD *)edge_count + 2) += v53;
      v48 = *(_QWORD *)(v4 + 120);
      v51 = *(_DWORD *)(v48 + 4 * v50);
LABEL_51:
      v54 = (v47 + 2);
      v55 = *(_DWORD *)(v48 + 4 * v54);
      if (v51 >= v55)
      {
        if (v55 >= v51)
          goto LABEL_56;
        v89 = *(_DWORD *)(v48 + 4 * v54);
        v90 = v51;
        v57 = -1;
      }
      else
      {
        v89 = v51;
        v90 = v55;
        v57 = 1;
      }
      *((_DWORD *)v56 + 2) += v57;
      v48 = *(_QWORD *)(v4 + 120);
      v55 = *(_DWORD *)(v48 + 4 * v54);
LABEL_56:
      v58 = *(_DWORD *)(v48 + 4 * v47);
      if (v55 < v58)
      {
        v89 = v55;
        v90 = v58;
        v60 = 1;
LABEL_60:
        *((_DWORD *)v59 + 2) += v60;
        goto LABEL_61;
      }
      if (v58 < v55)
      {
        v89 = v58;
        v90 = v55;
        v60 = -1;
        goto LABEL_60;
      }
LABEL_61:
      ++v45;
    }
  }
  v61 = 0;
  v62 = 0;
  v63 = *(_DWORD **)(v4 + 192);
  v86 = *(_QWORD *)(v4 + 184);
  v87 = v63;
  do
  {
    v64 = (uint64_t **)(*(_QWORD *)(v4 + 208) + 24 * v61);
    v65 = *v64;
    v66 = v64[1];
    while (v65 != v66)
    {
      if (*((_DWORD *)v65 + 2))
      {
        v67 = *(_QWORD *)(v4 + 200);
        if ((unint64_t)v63 >= v67)
        {
          v70 = *(_DWORD **)(v4 + 184);
          v71 = 0xAAAAAAAAAAAAAAABLL * (v63 - v70) + 1;
          if (v71 > 0x1555555555555555)
            abort();
          v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)v70) >> 2);
          if (2 * v72 > v71)
            v71 = 2 * v72;
          if (v72 >= 0xAAAAAAAAAAAAAAALL)
            v73 = 0x1555555555555555;
          else
            v73 = v71;
          if (v73)
          {
            if (v73 > 0x1555555555555555)
              goto LABEL_95;
            v74 = (char *)operator new(12 * v73);
          }
          else
          {
            v74 = 0;
          }
          v75 = *v65;
          v76 = &v74[4 * (v63 - v70)];
          *((_DWORD *)v76 + 2) = *((_DWORD *)v65 + 2);
          *(_QWORD *)v76 = v75;
          v77 = v76;
          if (v63 != v70)
          {
            do
            {
              v78 = *(_QWORD *)(v63 - 3);
              v63 -= 3;
              v79 = v63[2];
              *(_QWORD *)(v77 - 12) = v78;
              v77 -= 12;
              *((_DWORD *)v77 + 2) = v79;
            }
            while (v63 != v70);
            v63 = *(_DWORD **)(v4 + 184);
          }
          v69 = v76 + 12;
          *(_QWORD *)(v4 + 184) = v77;
          *(_QWORD *)(v4 + 192) = v76 + 12;
          *(_QWORD *)(v4 + 200) = &v74[12 * v73];
          if (v63)
            operator delete(v63);
        }
        else
        {
          v68 = *v65;
          v63[2] = *((_DWORD *)v65 + 2);
          *(_QWORD *)v63 = v68;
          v69 = v63 + 3;
        }
        *(_QWORD *)(v4 + 192) = v69;
        v80 = *((_DWORD *)v65 + 2);
        if (v80 < 0)
          v80 = -v80;
        v62 += v80;
        v63 = v69;
      }
      v65 = (uint64_t *)((char *)v65 + 12);
    }
    ++v61;
  }
  while (v61 != v88);
  v81 = 1431655765 * (((unint64_t)v87 - v86) >> 2)
      - 1431655765 * (((unint64_t)v63 - *(_QWORD *)(v4 + 184)) >> 2);
  v82 = (_DWORD *)(*(_QWORD *)(v4 + 232) + 8 * *a2);
  *v82 = -1431655765 * (((unint64_t)v87 - v86) >> 2);
  v82[1] = v81;
  v83 = a2[4];
  return v83 < 0x64 || v62 >= v83;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_;
}

_QWORD *geom::`anonymous namespace'::winding_number_exact<float>::find_edge_count(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  v5 = 0xBF58476D1CE4E5B9 * ((v4 | (v3 << 32)) ^ ((v4 | (unint64_t)(v3 << 32)) >> 30));
  v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % a3;
  v7 = *(_QWORD *)(a1 + 208);
  v8 = (char **)(v7 + 24 * v6);
  v10 = v8 + 1;
  v9 = v8[1];
  v11 = *v8;
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v8) >> 2);
  v13 = -1431655765 * ((v9 - *v8) >> 2);
  if (-1431655765 * ((v9 - *v8) >> 2))
  {
    result = *v8;
    while (*result != __PAIR64__(v4, v3))
    {
      result = (_QWORD *)((char *)result + 12);
      if (!--v13)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v15 = *(_QWORD *)a2;
    v16 = v7 + 24 * v6;
    v19 = *(_QWORD *)(v16 + 16);
    v18 = (_QWORD *)(v16 + 16);
    v17 = v19;
    if ((unint64_t)v9 >= v19)
    {
      v21 = v12 + 1;
      if (v12 + 1 > 0x1555555555555555)
        abort();
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v11) >> 2);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0xAAAAAAAAAAAAAAALL)
        v23 = 0x1555555555555555;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v24 = (char *)operator new(12 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[12 * v12];
      *(_QWORD *)v25 = v15;
      *((_DWORD *)v25 + 2) = 0;
      v20 = v25 + 12;
      if (v9 != v11)
      {
        do
        {
          v26 = *(_QWORD *)(v9 - 12);
          v9 -= 12;
          v27 = *((_DWORD *)v9 + 2);
          *(_QWORD *)(v25 - 12) = v26;
          v25 -= 12;
          *((_DWORD *)v25 + 2) = v27;
        }
        while (v9 != v11);
        v9 = *v8;
      }
      *v8 = v25;
      *v10 = v20;
      *v18 = &v24[12 * v23];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v9 = v15;
      *((_DWORD *)v9 + 2) = 0;
      v20 = v9 + 12;
    }
    *v10 = v20;
    return v20 - 3;
  }
  return result;
}

BOOL std::type_info::operator==[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t geom::`anonymous namespace'::winding_number_base<double>::winding_number_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  __n128 v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t *v35;
  unint64_t v36;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v45[8];
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v10 = geom::bvh<double,(unsigned char)3>::bvh(a1, 0, 0, 0, 0, 0);
  *(_OWORD *)(v10 + 136) = 0u;
  v11 = v10 + 136;
  *(_QWORD *)(v10 + 104) = a2;
  *(_QWORD *)(v10 + 112) = a3;
  *(_QWORD *)(v10 + 120) = a4;
  *(_QWORD *)(v10 + 128) = a5;
  v12 = v10 + 160;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(v10 + 136, a5 / 3);
  std::vector<geom::bbox<double,(unsigned char)3>>::resize(v12, *(_QWORD *)(v11 - 8) / 3uLL, v13, v14, v15);
  v16 = *(char **)v11;
  if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
  {
    v36 = 0;
  }
  else
  {
    v17 = 0;
    v18 = 2;
    v19 = 1;
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      v25 = *(_QWORD *)(a1 + 120);
      v26 = *(_QWORD *)(a1 + 104);
      v27 = (float64x2_t *)(v26 + 32 * *(unsigned int *)(v25 + 4 * (v18 - 2)));
      v28 = (float64x2_t *)(v26 + 32 * *(unsigned int *)(v25 + 4 * (v18 - 1)));
      v29 = (float64x2_t *)(v26 + 32 * *(unsigned int *)(v25 + 4 * v18));
      v30 = vdivq_f64(vaddq_f64(vaddq_f64(v27[1], v28[1]), v29[1]), _Q0);
      v31 = (float64x2_t *)&v16[32 * v17];
      *v31 = vdivq_f64(vaddq_f64(vaddq_f64(*v27, *v28), *v29), _Q0);
      v31[1] = v30;
      v32 = vminnmq_f64((float64x2_t)*(unint64_t *)&v27[1].f64[0], (float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v28[1].f64[0], (float64x2_t)*(unint64_t *)&v29[1].f64[0]));
      v33 = (float64x2_t *)(*(_QWORD *)(a1 + 160) + (v17 << 6));
      *v33 = vminnmq_f64(*v27, vminnmq_f64(*v28, *v29));
      v33[1] = v32;
      v34 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v27[1].f64[0], (float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)*(unint64_t *)&v28[1].f64[0], (float64x2_t)*(unint64_t *)&v29[1].f64[0]));
      v35 = (float64x2_t *)(*(_QWORD *)(a1 + 160) + (v17 << 6));
      v35[2] = vmaxnmq_f64(*v27, vmaxnmq_f64(*v28, *v29));
      v35[3] = v34;
      v17 = v19;
      v16 = *(char **)(a1 + 136);
      v36 = (uint64_t)(*(_QWORD *)(a1 + 144) - (_QWORD)v16) >> 5;
      v18 += 3;
    }
    while (v36 > v19++);
  }
  geom::bvh<double,(unsigned char)3>::bvh((uint64_t)v45, v16, (const void *)v36, *(const void **)(a1 + 160), (const void *)((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 6), 0);
  *(_BYTE *)a1 = v45[0];
  v38 = *(void **)(a1 + 8);
  if (v38)
  {
    *(_QWORD *)(a1 + 16) = v38;
    operator delete(v38);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v46;
  *(_QWORD *)(a1 + 24) = v47;
  v46[1] = 0;
  v47 = 0;
  v46[0] = 0;
  v39 = *(void **)(a1 + 32);
  if (v39)
  {
    *(_QWORD *)(a1 + 40) = v39;
    operator delete(v39);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 48) = v49;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v40 = *(_QWORD *)(a1 + 56);
    if (v40)
      MEMORY[0x22E2B7674](v40, 0x1000C80E0EAB150);
  }
  v41 = v51;
  *(_QWORD *)(a1 + 56) = v50;
  *(_QWORD *)(a1 + 64) = v41;
  *(_BYTE *)(a1 + 72) = v52;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    v42 = *(_QWORD *)(a1 + 80);
    if (v42)
      MEMORY[0x22E2B7674](v42, 0x1000C80FA0F61DDLL);
  }
  v43 = v54;
  *(_QWORD *)(a1 + 80) = v53;
  *(_QWORD *)(a1 + 88) = v43;
  *(_BYTE *)(a1 + 96) = v55;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  if (v52 && v50)
    MEMORY[0x22E2B7674](v50, 0x1000C80E0EAB150);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  return a1;
}

void _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void std::vector<geom::bbox<double,(unsigned char)3>>::resize(uint64_t a1, unint64_t a2, double a3, double a4, __n128 a5)
{
  unint64_t v5;

  v5 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6;
  if (a2 <= v5)
  {
    if (a2 < v5)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (a2 << 6);
  }
  else
  {
    std::vector<geom::bbox<double,(unsigned char)3>>::__append((void **)a1, a2 - v5, a3, a4, a5);
  }
}

void _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      abort();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[32 * v10];
    v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    v16 = &v14[32 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 2);
        v20 = *((_OWORD *)v17 - 1);
        v17 -= 32;
        *((_OWORD *)v14 - 2) = v19;
        *((_OWORD *)v14 - 1) = v20;
        v14 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<geom::bbox<double,(unsigned char)3>>::__append(void **a1, unint64_t a2, double a3, double a4, __n128 a5)
{
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __n128 *v17;
  int64x2_t v18;
  int64x2_t v19;
  char *v20;
  char *v21;
  int64x2_t v22;
  int64x2_t v23;
  __n128 *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  v10 = *(__n128 **)(v7 - 8);
  if (a2 <= (v9 - (_BYTE *)v10) >> 6)
  {
    if (a2)
    {
      v17 = &v10[4 * a2];
      v18 = vdupq_n_s64(0x7FF0000000000000uLL);
      v19 = vdupq_n_s64(0xFFF0000000000000);
      do
      {
        a5.n128_u64[0] = 0x7FF0000000000000;
        *v10 = (__n128)v18;
        v10[1] = a5;
        a5.n128_u64[0] = 0xFFF0000000000000;
        v10[2] = (__n128)v19;
        v10[3] = a5;
        v10 += 4;
      }
      while (v10 != v17);
      v10 = v17;
    }
    a1[1] = v10;
  }
  else
  {
    v11 = (char *)v10 - (_BYTE *)*a1;
    v12 = a2 + (v11 >> 6);
    if (v12 >> 58)
      abort();
    v13 = v11 >> 6;
    v14 = v8 - (_BYTE *)*a1;
    if (v14 >> 5 > v12)
      v12 = v14 >> 5;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0)
      v15 = 0x3FFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v7, v15);
    else
      v16 = 0;
    v20 = &v16[64 * v13];
    v21 = &v20[64 * a2];
    v22 = vdupq_n_s64(0x7FF0000000000000uLL);
    v23 = vdupq_n_s64(0xFFF0000000000000);
    v24 = (__n128 *)v20;
    do
    {
      a5.n128_u64[0] = 0x7FF0000000000000;
      *v24 = (__n128)v22;
      v24[1] = a5;
      a5.n128_u64[0] = 0xFFF0000000000000;
      v24[2] = (__n128)v23;
      v24[3] = a5;
      v24 += 4;
    }
    while (v24 != (__n128 *)v21);
    v25 = &v16[64 * v15];
    v27 = (char *)*a1;
    v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 4);
        v29 = *((_OWORD *)v26 - 3);
        v30 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v20 - 1) = v30;
        *((_OWORD *)v20 - 4) = v28;
        *((_OWORD *)v20 - 3) = v29;
        v20 -= 64;
        v26 -= 64;
      }
      while (v26 != v27);
      v26 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v21;
    a1[2] = v25;
    if (v26)
      operator delete(v26);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a2 << 6);
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1480F0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1480F0;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  size_t v34;
  char *v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *edge_count;
  int v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  int v57;
  unsigned int v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  _DWORD *v82;
  unsigned int v83;
  uint64_t v86;
  _DWORD *v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(char **)(v4 + 232);
  v6 = *(char **)(v4 + 240);
  v7 = (v6 - v5) >> 3;
  v8 = *a2;
  if (v7 > v8)
    goto LABEL_19;
  v9 = (v8 + 1);
  v10 = v9 - v7;
  if (v9 <= v7)
  {
    if (v9 >= v7)
      goto LABEL_19;
    v19 = &v5[8 * v9];
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v4 + 248);
  if (v10 <= (v11 - (uint64_t)v6) >> 3)
  {
    memset(*(void **)(v4 + 240), 255, 8 * v10);
    v19 = &v6[8 * v10];
LABEL_18:
    *(_QWORD *)(v4 + 240) = v19;
    goto LABEL_19;
  }
  v12 = v11 - (_QWORD)v5;
  if (v12 >> 2 > v9)
    v9 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v9;
  if (v13 >> 61)
    goto LABEL_95;
  v14 = (char *)operator new(8 * v13);
  v15 = &v14[8 * v7];
  v16 = &v14[8 * v13];
  memset(v15, 255, 8 * v10);
  v17 = &v15[8 * v10];
  if (v6 != v5)
  {
    do
    {
      v18 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    while (v6 != v5);
    v6 = v5;
  }
  *(_QWORD *)(v4 + 232) = v15;
  *(_QWORD *)(v4 + 240) = v17;
  *(_QWORD *)(v4 + 248) = v16;
  if (v6)
    operator delete(v6);
LABEL_19:
  LODWORD(a3) = a2[4];
  v20 = sqrt((double)*(unint64_t *)&a3);
  if (v20 <= 8)
    v21 = 8;
  else
    v21 = v20;
  v22 = *(_QWORD **)(v4 + 208);
  v23 = *(_QWORD **)(v4 + 216);
  v24 = 0xAAAAAAAAAAAAAAABLL * (v23 - v22);
  v88 = v21;
  v25 = v21 - v24;
  if (v21 <= v24)
    goto LABEL_42;
  v26 = *(_QWORD *)(v4 + 224);
  if (0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v23) >> 3) >= v25)
  {
    bzero(v23, 24 * ((24 * v25 - 24) / 0x18) + 24);
    *(_QWORD *)(v4 + 216) = &v23[3 * ((24 * v25 - 24) / 0x18) + 3];
    goto LABEL_42;
  }
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v22) >> 3);
  v28 = 0x5555555555555556 * ((v26 - (uint64_t)v22) >> 3);
  if (v28 <= v21)
    v28 = v21;
  if (v27 >= 0x555555555555555)
    v29 = 0xAAAAAAAAAAAAAAALL;
  else
    v29 = v28;
  if (v29 > 0xAAAAAAAAAAAAAAALL)
LABEL_95:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v30 = 3 * v29;
  v31 = (char *)operator new(24 * v29);
  v32 = &v31[8 * (v23 - v22)];
  v33 = &v31[8 * v30];
  v34 = 24 * ((24 * v25 - 24) / 0x18) + 24;
  bzero(v32, v34);
  v35 = &v32[v34];
  if (v23 == v22)
  {
    *(_QWORD *)(v4 + 208) = v32;
    *(_QWORD *)(v4 + 216) = v35;
    *(_QWORD *)(v4 + 224) = v33;
    if (!v23)
      goto LABEL_42;
LABEL_41:
    operator delete(v23);
    goto LABEL_42;
  }
  do
  {
    v36 = *(_OWORD *)(v23 - 3);
    v23 -= 3;
    *(_OWORD *)(v32 - 24) = v36;
    v32 -= 24;
    *((_QWORD *)v32 + 2) = v23[2];
    *v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
  }
  while (v23 != v22);
  v23 = *(_QWORD **)(v4 + 208);
  v37 = *(_QWORD **)(v4 + 216);
  *(_QWORD *)(v4 + 208) = v32;
  *(_QWORD *)(v4 + 216) = v35;
  *(_QWORD *)(v4 + 224) = v33;
  if (v37 != v23)
  {
    v38 = v37;
    do
    {
      v40 = (void *)*(v38 - 3);
      v38 -= 3;
      v39 = v40;
      if (v40)
      {
        *(v37 - 2) = v39;
        operator delete(v39);
      }
      v37 = v38;
    }
    while (v38 != v23);
  }
  if (v23)
    goto LABEL_41;
LABEL_42:
  v41 = (_QWORD *)(*(_QWORD *)(v4 + 208) + 8);
  v42 = v88;
  do
  {
    *v41 = *(v41 - 1);
    v41 += 3;
    --v42;
  }
  while (v42);
  v43 = a2[4];
  if (v43)
  {
    v44 = a2[3];
    v45 = (_DWORD *)(*(_QWORD *)(v4 + 32) + 4 * v44);
    for (i = 4 * (v43 + v44) - 4 * v44; i; i -= 4)
    {
      v47 = (3 * *v45);
      v48 = *(_QWORD *)(v4 + 120);
      v49 = *(_DWORD *)(v48 + 4 * v47);
      v50 = (v47 + 1);
      v51 = *(_DWORD *)(v48 + 4 * v50);
      if (v49 >= v51)
      {
        if (v51 >= v49)
          goto LABEL_51;
        v89 = *(_DWORD *)(v48 + 4 * v50);
        v90 = v49;
        v53 = -1;
      }
      else
      {
        v89 = *(_DWORD *)(v48 + 4 * v47);
        v90 = v51;
        v53 = 1;
      }
      *((_DWORD *)edge_count + 2) += v53;
      v48 = *(_QWORD *)(v4 + 120);
      v51 = *(_DWORD *)(v48 + 4 * v50);
LABEL_51:
      v54 = (v47 + 2);
      v55 = *(_DWORD *)(v48 + 4 * v54);
      if (v51 >= v55)
      {
        if (v55 >= v51)
          goto LABEL_56;
        v89 = *(_DWORD *)(v48 + 4 * v54);
        v90 = v51;
        v57 = -1;
      }
      else
      {
        v89 = v51;
        v90 = v55;
        v57 = 1;
      }
      *((_DWORD *)v56 + 2) += v57;
      v48 = *(_QWORD *)(v4 + 120);
      v55 = *(_DWORD *)(v48 + 4 * v54);
LABEL_56:
      v58 = *(_DWORD *)(v48 + 4 * v47);
      if (v55 < v58)
      {
        v89 = v55;
        v90 = v58;
        v60 = 1;
LABEL_60:
        *((_DWORD *)v59 + 2) += v60;
        goto LABEL_61;
      }
      if (v58 < v55)
      {
        v89 = v58;
        v90 = v55;
        v60 = -1;
        goto LABEL_60;
      }
LABEL_61:
      ++v45;
    }
  }
  v61 = 0;
  v62 = 0;
  v63 = *(_DWORD **)(v4 + 192);
  v86 = *(_QWORD *)(v4 + 184);
  v87 = v63;
  do
  {
    v64 = (uint64_t **)(*(_QWORD *)(v4 + 208) + 24 * v61);
    v65 = *v64;
    v66 = v64[1];
    while (v65 != v66)
    {
      if (*((_DWORD *)v65 + 2))
      {
        v67 = *(_QWORD *)(v4 + 200);
        if ((unint64_t)v63 >= v67)
        {
          v70 = *(_DWORD **)(v4 + 184);
          v71 = 0xAAAAAAAAAAAAAAABLL * (v63 - v70) + 1;
          if (v71 > 0x1555555555555555)
            abort();
          v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)v70) >> 2);
          if (2 * v72 > v71)
            v71 = 2 * v72;
          if (v72 >= 0xAAAAAAAAAAAAAAALL)
            v73 = 0x1555555555555555;
          else
            v73 = v71;
          if (v73)
          {
            if (v73 > 0x1555555555555555)
              goto LABEL_95;
            v74 = (char *)operator new(12 * v73);
          }
          else
          {
            v74 = 0;
          }
          v75 = *v65;
          v76 = &v74[4 * (v63 - v70)];
          *((_DWORD *)v76 + 2) = *((_DWORD *)v65 + 2);
          *(_QWORD *)v76 = v75;
          v77 = v76;
          if (v63 != v70)
          {
            do
            {
              v78 = *(_QWORD *)(v63 - 3);
              v63 -= 3;
              v79 = v63[2];
              *(_QWORD *)(v77 - 12) = v78;
              v77 -= 12;
              *((_DWORD *)v77 + 2) = v79;
            }
            while (v63 != v70);
            v63 = *(_DWORD **)(v4 + 184);
          }
          v69 = v76 + 12;
          *(_QWORD *)(v4 + 184) = v77;
          *(_QWORD *)(v4 + 192) = v76 + 12;
          *(_QWORD *)(v4 + 200) = &v74[12 * v73];
          if (v63)
            operator delete(v63);
        }
        else
        {
          v68 = *v65;
          v63[2] = *((_DWORD *)v65 + 2);
          *(_QWORD *)v63 = v68;
          v69 = v63 + 3;
        }
        *(_QWORD *)(v4 + 192) = v69;
        v80 = *((_DWORD *)v65 + 2);
        if (v80 < 0)
          v80 = -v80;
        v62 += v80;
        v63 = v69;
      }
      v65 = (uint64_t *)((char *)v65 + 12);
    }
    ++v61;
  }
  while (v61 != v88);
  v81 = 1431655765 * (((unint64_t)v87 - v86) >> 2)
      - 1431655765 * (((unint64_t)v63 - *(_QWORD *)(v4 + 184)) >> 2);
  v82 = (_DWORD *)(*(_QWORD *)(v4 + 232) + 8 * *a2);
  *v82 = -1431655765 * (((unint64_t)v87 - v86) >> 2);
  v82[1] = v81;
  v83 = a2[4];
  return v83 < 0x64 || v62 >= v83;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_;
}

float geom::`anonymous namespace'::winding_number_base<float>::naive_winding_number(_QWORD *a1, uint64_t a2, float32x4_t a3)
{
  int v3;
  float32x4_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  double v25;

  v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a3;
    v5 = *(unsigned int *)(a2 + 12);
    v6 = (int *)(a1[4] + 4 * v5);
    v7 = a1[15];
    v8 = a1[13];
    v9 = 4 * (v3 + v5) - 4 * v5;
    v10 = 0.0;
    do
    {
      v11 = *v6++;
      v12 = vsubq_f32(*(float32x4_t *)(v8 + 16 * *(unsigned int *)(v7 + 4 * (3 * v11))), v4);
      v13 = vsubq_f32(*(float32x4_t *)(v8 + 16 * *(unsigned int *)(v7 + 4 * (3 * v11 + 1))), v4);
      v14 = vmulq_f32(v12, v12);
      v15 = vsubq_f32(*(float32x4_t *)(v8 + 16 * *(unsigned int *)(v7 + 4 * (3 * v11 + 2))), v4);
      v16 = vmulq_f32(v13, v13);
      LODWORD(v17) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
      v18 = vmulq_f32(v15, v15);
      v14.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
      v19 = sqrtf(v17);
      v18.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
      v20 = vmulq_f32(v12, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (int8x16_t)v15, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), (int8x16_t)v13, 8uLL)));
      v21 = vmulq_f32(v12, v13);
      v22 = vmulq_f32(v13, v15);
      v23 = vmulq_f32(v12, v15);
      v24 = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0], vmlas_n_f32(vmlas_n_f32((float)(v18.f32[0]* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0])+ (float)((float)(v14.f32[0] * v19) * v18.f32[0]), v14.f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v19, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]));
      v4 = a3;
      v10 = v10 + (float)(v24 + v24);
      v9 -= 4;
    }
    while (v9);
    v25 = v10;
  }
  else
  {
    v25 = 0.0;
  }
  return v25 / 12.5663706;
}

double geom::`anonymous namespace'::winding_number_base<double>::naive_winding_number(_QWORD *a1, float64x2_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  float64x2_t v30;
  float64x2_t v31;

  v3 = *(_DWORD *)(a3 + 16);
  if (v3)
  {
    v30 = *a2;
    v31 = a2[1];
    v4 = *(unsigned int *)(a3 + 12);
    v5 = (int *)(a1[4] + 4 * v4);
    v6 = a1[15];
    v7 = a1[13];
    v8 = 4 * (v3 + v4) - 4 * v4;
    v9 = 0.0;
    do
    {
      v10 = *v5++;
      v11 = (float64x2_t *)(v7 + 32 * *(unsigned int *)(v6 + 4 * (3 * v10)));
      v12 = vsubq_f64(*v11, v30);
      v13 = vsubq_f64(v11[1], v31);
      v14 = (float64x2_t *)(v7 + 32 * *(unsigned int *)(v6 + 4 * (3 * v10 + 1)));
      v15 = vsubq_f64(*v14, v30);
      v16 = (float64x2_t *)(v7 + 32 * *(unsigned int *)(v6 + 4 * (3 * v10 + 2)));
      v17 = vsubq_f64(v14[1], v31);
      v18 = vsubq_f64(*v16, v30);
      v19 = vsubq_f64(v16[1], v31);
      v20 = sqrt(vmulq_f64(v13, v13).f64[0] + vaddvq_f64(vmulq_f64(v12, v12)));
      v21 = sqrt(vmulq_f64(v17, v17).f64[0] + vaddvq_f64(vmulq_f64(v15, v15)));
      v22 = sqrt(vmulq_f64(v19, v19).f64[0] + vaddvq_f64(vmulq_f64(v18, v18)));
      v23 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v17, 8uLL);
      v24 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL);
      v25 = vmulq_f64(v17, v19).f64[0];
      v26 = vmulq_f64(v13, v19).f64[0];
      v19.f64[1] = v18.f64[0];
      v27 = vmulq_f64(v13, v17).f64[0];
      v17.f64[1] = v15.f64[0];
      v28 = atan2(vmulq_f64(v13, vmlaq_laneq_f64(vmulq_f64(v18, vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1))), v15, v18, 1)).f64[0]+ vaddvq_f64(vmulq_f64(v12, vmlaq_f64(vmulq_f64(v24, vnegq_f64(v17)), v19, v23))), (v27 + vaddvq_f64(vmulq_f64(v12, v15))) * v22+ v20 * v21 * v22+ (v25 + vaddvq_f64(vmulq_f64(v15, v18))) * v20+ (v26 + vaddvq_f64(vmulq_f64(v12, v18))) * v21);
      v9 = v9 + v28 + v28;
      v8 -= 4;
    }
    while (v8);
  }
  else
  {
    v9 = 0.0;
  }
  return v9 / 12.5663706;
}

uint64_t geom::`anonymous namespace'::winding_number_base<float>::~winding_number_base(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 96) && *v4)
    MEMORY[0x22E2B7674](*v4, 0x1000C80E0EAB150);
  *v4 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  v5 = (_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 72) && *v5)
    MEMORY[0x22E2B7674](*v5, 0x1000C80451B5BE8);
  *v5 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t geom::`anonymous namespace'::winding_number_base<double>::~winding_number_base(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 96) && *v4)
    MEMORY[0x22E2B7674](*v4, 0x1000C80FA0F61DDLL);
  *v4 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  v5 = (_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 72) && *v5)
    MEMORY[0x22E2B7674](*v5, 0x1000C80E0EAB150);
  *v5 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148180;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148180;
  a2[1] = v2;
  return result;
}

float _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t *v34;
  float32x4_t *v35;
  __int128 v36;
  __int128 v37;
  unsigned int v38;
  float v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  float32x4_t *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t *v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float result;

  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(char **)(v3 + 192);
  v4 = *(char **)(v3 + 200);
  v6 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 4);
  v7 = *a2;
  if (v6 > v7)
    goto LABEL_18;
  v8 = (v7 + 1);
  v9 = v8 - v6;
  if (v8 <= v6)
  {
    if (v8 >= v6)
      goto LABEL_18;
    v28 = &v5[240 * v8];
    goto LABEL_17;
  }
  v10 = *(_QWORD *)(v3 + 208);
  if (0xEEEEEEEEEEEEEEEFLL * ((v10 - (uint64_t)v4) >> 4) >= v9)
  {
    bzero(*(void **)(v3 + 200), 240 * ((240 * v9 - 240) / 0xF0) + 240);
    v28 = &v4[240 * ((240 * v9 - 240) / 0xF0) + 240];
LABEL_17:
    *(_QWORD *)(v3 + 200) = v28;
    goto LABEL_18;
  }
  v11 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - (uint64_t)v5) >> 4);
  if (2 * v11 > v8)
    v8 = 2 * v11;
  if (v11 >= 0x88888888888888)
    v8 = 0x111111111111111;
  if (v8 > 0x111111111111111)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v12 = 240 * v8;
  v13 = (char *)operator new(240 * v8);
  v14 = &v13[16 * ((v4 - v5) >> 4)];
  v15 = &v13[v12];
  bzero(v14, 240 * ((240 * v9 - 240) / 0xF0) + 240);
  v16 = &v14[240 * ((240 * v9 - 240) / 0xF0) + 240];
  if (v4 != v5)
  {
    do
    {
      v17 = *((_OWORD *)v4 - 15);
      v18 = *((_OWORD *)v4 - 13);
      *((_OWORD *)v14 - 14) = *((_OWORD *)v4 - 14);
      *((_OWORD *)v14 - 13) = v18;
      *((_OWORD *)v14 - 15) = v17;
      v19 = *((_OWORD *)v4 - 12);
      v20 = *((_OWORD *)v4 - 11);
      v21 = *((_OWORD *)v4 - 9);
      *((_OWORD *)v14 - 10) = *((_OWORD *)v4 - 10);
      *((_OWORD *)v14 - 9) = v21;
      *((_OWORD *)v14 - 12) = v19;
      *((_OWORD *)v14 - 11) = v20;
      v22 = *((_OWORD *)v4 - 8);
      v23 = *((_OWORD *)v4 - 7);
      v24 = *((_OWORD *)v4 - 5);
      *((_OWORD *)v14 - 6) = *((_OWORD *)v4 - 6);
      *((_OWORD *)v14 - 5) = v24;
      *((_OWORD *)v14 - 8) = v22;
      *((_OWORD *)v14 - 7) = v23;
      v25 = *((_OWORD *)v4 - 4);
      v26 = *((_OWORD *)v4 - 3);
      v27 = *((_OWORD *)v4 - 1);
      *((_OWORD *)v14 - 2) = *((_OWORD *)v4 - 2);
      *((_OWORD *)v14 - 1) = v27;
      *((_OWORD *)v14 - 4) = v25;
      *((_OWORD *)v14 - 3) = v26;
      v14 -= 240;
      v4 -= 240;
    }
    while (v4 != v5);
    v4 = v5;
  }
  *(_QWORD *)(v3 + 192) = v14;
  *(_QWORD *)(v3 + 200) = v16;
  *(_QWORD *)(v3 + 208) = v15;
  if (v4)
    operator delete(v4);
LABEL_18:
  v29 = *a2;
  v30 = *(_QWORD *)(v3 + 192);
  v31 = v30 + 240 * *a2;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 48) = 0;
  v32 = (float32x4_t *)(v31 + 48);
  v33 = 0uLL;
  *(_QWORD *)(v31 + 64) = 0;
  v34 = (float32x4_t *)(v31 + 64);
  *(_DWORD *)(v31 + 72) = 0;
  *(_QWORD *)(v31 + 80) = 0;
  v35 = (float32x4_t *)(v31 + 80);
  *(_DWORD *)(v31 + 88) = 0;
  *(_DWORD *)(v31 + 200) = 0;
  *(_QWORD *)(v31 + 192) = 0;
  *(_DWORD *)(v31 + 216) = 0;
  *(_QWORD *)(v31 + 208) = 0;
  *(_DWORD *)(v31 + 232) = 0;
  *(_QWORD *)(v31 + 224) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_DWORD *)(v31 + 56) = 0;
  v36 = *(_OWORD *)(v31 + 192);
  v40 = *(float32x4_t *)(v31 + 208);
  v37 = *(_OWORD *)(v31 + 224);
  *(float32x4_t *)(v31 + 160) = v40;
  *(_OWORD *)(v31 + 176) = v37;
  *(_OWORD *)(v31 + 128) = v37;
  *(_OWORD *)(v31 + 144) = v36;
  *(_OWORD *)(v31 + 96) = v36;
  *(float32x4_t *)(v31 + 112) = v40;
  *(_OWORD *)v31 = 0u;
  v38 = a2[4];
  v39 = 0.0;
  v40.i32[0] = 0;
  if (v38)
  {
    v41 = a2[3];
    v42 = v38 + v41;
    v43 = (unsigned int *)(*(_QWORD *)(v3 + 32) + 4 * v41);
    v44 = 4 * v42 - 4 * v41;
    do
    {
      v45 = *v43++;
      v40 = *(float32x4_t *)(*(_QWORD *)(v3 + 136) + 16 * v45);
      v33 = vaddq_f32(v33, v40);
      *(float32x4_t *)v31 = v33;
      v44 -= 4;
    }
    while (v44);
    v40.f32[0] = (float)a2[4];
  }
  *(float32x4_t *)v31 = vdivq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0));
  v46 = a2[4];
  if (v46)
  {
    v47 = (float32x4_t *)(v31 + 96);
    v48 = a2[3];
    v49 = v46 + v48;
    v50 = (int *)(*(_QWORD *)(v3 + 32) + 4 * v48);
    v51 = (float32x4_t *)(v30 + 240 * v29);
    v52 = v51 + 9;
    v53 = v51 + 10;
    v54 = v51 + 11;
    v55 = v51 + 12;
    v56 = v51 + 13;
    v57 = v51 + 14;
    v58 = 4 * v49 - 4 * v48;
    v39 = 0.0;
    v59.i64[0] = 0x3F0000003F000000;
    v59.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V2.4S, #3.0 }
    v65 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      v66 = *v50++;
      v67 = *(_QWORD *)(v3 + 120);
      v68 = *(unsigned int *)(v67 + 4 * (3 * v66));
      v69 = *(unsigned int *)(v67 + 4 * (3 * v66 + 1));
      v70 = *(_QWORD *)(v3 + 104);
      v71 = *(unsigned int *)(v67 + 4 * (3 * v66 + 2));
      v72 = *(float32x4_t *)(v70 + 16 * v68);
      v73 = *(float32x4_t *)v31;
      v74 = vsubq_f32(v72, *(float32x4_t *)v31);
      v75 = vmulq_f32(v74, v74);
      v76 = *(float32x4_t *)(v70 + 16 * v69);
      v77 = vsubq_f32(v76, *(float32x4_t *)v31);
      v78 = vmulq_f32(v77, v77);
      v79 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2);
      v80 = vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1));
      v81 = *(float32x4_t *)(v70 + 16 * v71);
      v82 = vsubq_f32(v81, *(float32x4_t *)v31);
      v83 = vmulq_f32(v82, v82);
      v84 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1)));
      v85 = vaddq_f32(v79, v80);
      LODWORD(v86) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).u32[0];
      v87 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL);
      v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL);
      v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), (int8x16_t)v81, 0xCuLL);
      v90 = vaddq_f32(vmlaq_f32(vmulq_f32(v87, vnegq_f32(v81)), v72, v89), vaddq_f32(vmlaq_f32(vmulq_f32(v88, vnegq_f32(v72)), v76, v87), vmlaq_f32(vmulq_f32(v89, vnegq_f32(v76)), v81, v88)));
      if ((vmovn_s32(vcgtq_f32(v85, v84)).u8[0] & 1) != 0)
        v84.f32[0] = v85.f32[0];
      v91 = vmulq_f32(v90, v59);
      *(float32x4_t *)(v31 + 32) = vaddq_f32(*(float32x4_t *)(v31 + 32), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), (int8x16_t)v91, 0xCuLL));
      if (v86 >= v39)
        v39 = v86;
      v92 = *v35;
      v93 = vsubq_f32(vdivq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v70 + 16 * v68), *(float32x4_t *)(v70 + 16 * v69)), *(float32x4_t *)(v70 + 16 * v71)), _Q2), v73);
      v94 = vaddq_f32(*v32, vmulq_laneq_f32(v93, v91, 2));
      v95 = vaddq_f32(*v34, vmulq_n_f32(v93, v91.f32[0]));
      *(_DWORD *)(v31 + 56) = v94.i32[2];
      v96 = vaddq_f32(v92, vmulq_lane_f32(v93, *(float32x2_t *)v91.f32, 1));
      v32->i64[0] = v94.i64[0];
      *(_DWORD *)(v31 + 72) = v95.i32[2];
      v34->i64[0] = v95.i64[0];
      *(_DWORD *)(v31 + 88) = v96.i32[2];
      v35->i64[0] = v96.i64[0];
      v97 = *(float32x4_t *)(v70 + 16 * v68);
      v98 = *(float32x4_t *)(v70 + 16 * v69);
      v99 = *(float32x4_t *)(v70 + 16 * v71);
      v100 = vsubq_f32(vmulq_f32(vaddq_f32(v97, v98), v59), v73);
      v101 = vsubq_f32(vmulq_f32(vaddq_f32(v98, v99), v59), v73);
      v102 = vaddq_f32(v97, v99);
      if (v84.f32[0] >= v39)
        v39 = v84.f32[0];
      v103 = vsubq_f32(vmulq_f32(v102, v59), v73);
      v104 = vmlaq_f32(vmulq_f32(vmulq_lane_f32(v101, *(float32x2_t *)v101.f32, 1), v65), v65, vmulq_lane_f32(v100, *(float32x2_t *)v100.f32, 1));
      v105 = vmlaq_f32(vmulq_f32(vmulq_laneq_f32(v101, v101, 2), v65), v65, vmulq_laneq_f32(v100, v100, 2));
      v106 = vaddq_f32(vmulq_f32(vmulq_n_f32(v103, v103.f32[0]), v65), vmlaq_f32(vmulq_f32(vmulq_n_f32(v101, v101.f32[0]), v65), v65, vmulq_n_f32(v100, v100.f32[0])));
      v107 = vaddq_f32(vmulq_f32(vmulq_lane_f32(v103, *(float32x2_t *)v103.f32, 1), v65), v104);
      v108 = vaddq_f32(vmulq_f32(vmulq_laneq_f32(v103, v103, 2), v65), v105);
      v109 = vmulq_laneq_f32(v106, v91, 2);
      v110 = vmulq_laneq_f32(v107, v91, 2);
      v111 = vmulq_laneq_f32(v108, v91, 2);
      v112 = vmulq_n_f32(v106, v91.f32[0]);
      v113 = vmulq_n_f32(v107, v91.f32[0]);
      v114 = vmulq_n_f32(v108, v91.f32[0]);
      v115 = vmulq_lane_f32(v106, *(float32x2_t *)v91.f32, 1);
      v116 = vmulq_lane_f32(v107, *(float32x2_t *)v91.f32, 1);
      v117 = vmulq_lane_f32(v108, *(float32x2_t *)v91.f32, 1);
      v118 = vaddq_f32(*v47, v109);
      v119 = vaddq_f32(*(float32x4_t *)(v31 + 112), v110);
      *v47 = v118;
      *(float32x4_t *)(v31 + 112) = v119;
      v120 = *v52;
      *(float32x4_t *)(v31 + 128) = vaddq_f32(*(float32x4_t *)(v31 + 128), v111);
      *v52 = vaddq_f32(v120, v112);
      v121 = *v54;
      *v53 = vaddq_f32(*v53, v113);
      *v54 = vaddq_f32(v114, v121);
      v122 = *v56;
      *v55 = vaddq_f32(v115, *v55);
      *v56 = vaddq_f32(v116, v122);
      *v57 = vaddq_f32(v117, *v57);
      v58 -= 4;
    }
    while (v58);
  }
  result = sqrtf(v39);
  *(float *)(v30 + 240 * v29 + 16) = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_;
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148200;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148200;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2, double a3, double a4, double a5, float64x2_t a6)
{
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  float64x2_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t *v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64x2_t *v44;
  float64x2_t *v45;
  uint64_t v46;
  float64x2_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  double result;

  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(char **)(v7 + 192);
  v8 = *(char **)(v7 + 200);
  v10 = 0x34F72C234F72C235 * ((v8 - v9) >> 4);
  v11 = *a2;
  if (v10 > v11)
    goto LABEL_18;
  v12 = (v11 + 1);
  v13 = v12 - v10;
  if (v12 <= v10)
  {
    if (v12 >= v10)
      goto LABEL_18;
    v21 = &v9[464 * v12];
    goto LABEL_17;
  }
  v14 = *(_QWORD *)(v7 + 208);
  if (0x34F72C234F72C235 * ((v14 - (uint64_t)v8) >> 4) >= v13)
  {
    bzero(*(void **)(v7 + 200), 464 * ((464 * v13 - 464) / 0x1D0) + 464);
    v21 = &v8[464 * ((464 * v13 - 464) / 0x1D0) + 464];
LABEL_17:
    *(_QWORD *)(v7 + 200) = v21;
    goto LABEL_18;
  }
  v15 = 0x34F72C234F72C235 * ((v14 - (uint64_t)v9) >> 4);
  if (2 * v15 > v12)
    v12 = 2 * v15;
  if (v15 >= 0x469EE58469EE58)
    v12 = 0x8D3DCB08D3DCB0;
  if (v12 > 0x8D3DCB08D3DCB0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v16 = 464 * v12;
  v17 = (char *)operator new(464 * v12);
  v18 = &v17[16 * ((v8 - v9) >> 4)];
  v19 = &v17[v16];
  bzero(v18, 464 * ((464 * v13 - 464) / 0x1D0) + 464);
  v20 = &v18[464 * ((464 * v13 - 464) / 0x1D0) + 464];
  if (v8 != v9)
  {
    do
    {
      v8 -= 464;
      v18 -= 464;
      memcpy(v18, v8, 0x1D0uLL);
    }
    while (v8 != v9);
    v8 = v9;
  }
  *(_QWORD *)(v7 + 192) = v18;
  *(_QWORD *)(v7 + 200) = v20;
  *(_QWORD *)(v7 + 208) = v19;
  if (v8)
    operator delete(v8);
LABEL_18:
  v22 = *a2;
  v23 = *(_QWORD *)(v7 + 192);
  v24 = v23 + 464 * *a2;
  v25 = 0uLL;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_OWORD *)(v24 + 160) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_OWORD *)(v24 + 224) = 0u;
  *(_OWORD *)(v24 + 240) = 0u;
  *(_OWORD *)(v24 + 256) = 0u;
  *(_OWORD *)(v24 + 272) = 0u;
  *(_OWORD *)(v24 + 288) = 0u;
  *(_OWORD *)(v24 + 304) = 0u;
  *(_OWORD *)(v24 + 320) = 0u;
  *(_OWORD *)(v24 + 336) = 0u;
  *(_OWORD *)(v24 + 352) = 0u;
  *(_OWORD *)(v24 + 368) = 0u;
  *(_OWORD *)(v24 + 384) = 0u;
  *(_OWORD *)(v24 + 400) = 0u;
  *(_OWORD *)(v24 + 416) = 0u;
  *(_OWORD *)(v24 + 432) = 0u;
  *(_OWORD *)(v24 + 448) = 0u;
  v26 = 0.0;
  v27 = a2[4];
  if (v27)
  {
    v28 = a2[3];
    v29 = v27 + v28;
    v30 = (unsigned int *)(*(_QWORD *)(v7 + 32) + 4 * v28);
    v31 = 4 * v29 - 4 * v28;
    v32 = 0uLL;
    do
    {
      v33 = *v30++;
      v34 = *(_QWORD *)(v7 + 136) + 32 * v33;
      a6 = *(float64x2_t *)(v34 + 16);
      v25 = vaddq_f64(v25, *(float64x2_t *)v34);
      v32 = vaddq_f64(v32, a6);
      *(float64x2_t *)v24 = v25;
      *(float64x2_t *)(v24 + 16) = v32;
      v31 -= 4;
    }
    while (v31);
    LODWORD(a6.f64[0]) = a2[4];
    a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
  }
  else
  {
    v32 = 0uLL;
    a6.f64[0] = 0.0;
  }
  *(float64x2_t *)v24 = vdivq_f64(v25, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6.f64[0], 0));
  *(float64x2_t *)(v24 + 16) = vdivq_f64(v32, a6);
  v35 = a2[4];
  if (v35)
  {
    v36 = a2[3];
    v37 = v35 + v36;
    v38 = (int *)(*(_QWORD *)(v7 + 32) + 4 * v36);
    v39 = (float64x2_t *)(v23 + 464 * v22);
    v40 = v39 + 17;
    v41 = v39 + 19;
    v42 = v39 + 21;
    v43 = v39 + 23;
    v44 = v39 + 25;
    v45 = v39 + 27;
    v46 = 4 * v37 - 4 * v36;
    v26 = 0.0;
    __asm
    {
      FMOV            V1.2D, #0.5
      FMOV            V2.2D, #3.0
    }
    a6.f64[0] = 0.333333333;
    v53 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    do
    {
      v54 = *v38++;
      v55 = *(_QWORD *)(v7 + 120);
      v56 = *(_QWORD *)(v7 + 104);
      v57 = (float64x2_t *)(v56 + 32 * *(unsigned int *)(v55 + 4 * (3 * v54)));
      v58 = (float64x2_t *)(v56 + 32 * *(unsigned int *)(v55 + 4 * (3 * v54 + 1)));
      v59 = (float64x2_t *)(v56 + 32 * *(unsigned int *)(v55 + 4 * (3 * v54 + 2)));
      v60 = v57[1];
      v62 = *(float64x2_t *)v24;
      v61 = *(float64x2_t *)(v24 + 16);
      v63 = vsubq_f64(*v57, *(float64x2_t *)v24);
      v64 = vsubq_f64(v60, v61);
      v65 = v58[1];
      v66 = vsubq_f64(*v58, *(float64x2_t *)v24);
      v67 = vsubq_f64(v65, v61);
      v68 = v59[1];
      v69 = vsubq_f64(*v59, *(float64x2_t *)v24);
      v70 = vsubq_f64(v68, v61);
      v71 = vnegq_f64(v60);
      v72 = vmulq_f64(v64, v64).f64[0] + vaddvq_f64(vmulq_f64(v63, v63));
      v73 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v68), *v57, 1), v60, *v59, 1);
      v60.f64[1] = v57->f64[0];
      v74 = vmulq_f64(v67, v67).f64[0] + vaddvq_f64(vmulq_f64(v66, v66));
      v67.f64[0] = vaddvq_f64(vmulq_f64(v69, v69));
      v75 = vmlaq_laneq_f64(vmulq_laneq_f64(v71, *v58, 1), v65, *v57, 1);
      v76 = vnegq_f64(v65);
      v77 = vmulq_f64(v70, v70).f64[0] + v67.f64[0];
      v65.f64[1] = v58->f64[0];
      v78 = vmlaq_laneq_f64(vmulq_laneq_f64(v76, *v59, 1), v68, *v58, 1);
      v68.f64[1] = v59->f64[0];
      v79 = vmulq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v60, vnegq_f64(*v59)), *v57, v68), vaddq_f64(vmlaq_f64(vmulq_f64(v65, vnegq_f64(*v57)), *v58, v60), vmlaq_f64(vmulq_f64(v68, vnegq_f64(*v58)), *v59, v65))), _Q1);
      v80 = vmulq_f64(vaddq_f64(v73, vaddq_f64(v75, v78)), _Q1);
      if (v72 < v74)
        v72 = v74;
      v81.f64[0] = v80.f64[0];
      v81.f64[1] = v79.f64[0];
      v82 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v79, 1);
      if (v77 >= v26)
        v26 = v77;
      v83 = vaddq_f64(*(float64x2_t *)(v24 + 64), v82);
      *(float64x2_t *)(v24 + 48) = vaddq_f64(*(float64x2_t *)(v24 + 48), v81);
      *(float64x2_t *)(v24 + 64) = v83;
      if (v72 >= v26)
        v26 = v72;
      v84 = vsubq_f64(vdivq_f64(vaddq_f64(vaddq_f64(*v57, *v58), *v59), _Q2), v62);
      v85 = vsubq_f64(vdivq_f64(vaddq_f64(vaddq_f64(v57[1], v58[1]), v59[1]), _Q2), v61);
      v86 = vaddq_f64(*(float64x2_t *)(v24 + 96), vmulq_f64(v80, v85));
      v87 = vaddq_f64(*(float64x2_t *)(v24 + 112), vmulq_n_f64(v84, v79.f64[0]));
      v88 = vaddq_f64(*(float64x2_t *)(v24 + 128), vmulq_f64(v79, v85));
      v89 = vaddq_f64(*(float64x2_t *)(v24 + 144), vmulq_laneq_f64(v84, v79, 1));
      v90 = vaddq_f64(*(float64x2_t *)(v24 + 160), vmulq_laneq_f64(v85, v79, 1));
      *(float64x2_t *)(v24 + 80) = vaddq_f64(*(float64x2_t *)(v24 + 80), vmulq_n_f64(v84, v80.f64[0]));
      *(float64x2_t *)(v24 + 96) = v86;
      *(float64x2_t *)(v24 + 112) = v87;
      *(float64x2_t *)(v24 + 128) = v88;
      *(float64x2_t *)(v24 + 144) = v89;
      *(float64x2_t *)(v24 + 160) = v90;
      v91 = v57[1];
      v92 = v58[1];
      v93 = vsubq_f64(vmulq_f64(vaddq_f64(*v57, *v58), _Q1), v62);
      v94 = v59[1];
      v95 = vsubq_f64(vmulq_f64(vaddq_f64(v91, v92), _Q1), v61);
      v96 = vsubq_f64(vmulq_f64(vaddq_f64(*v58, *v59), _Q1), v62);
      v97 = vsubq_f64(vmulq_f64(vaddq_f64(v92, v94), _Q1), v61);
      v98 = vsubq_f64(vmulq_f64(vaddq_f64(*v57, *v59), _Q1), v62);
      v99 = vsubq_f64(vmulq_f64(vaddq_f64(v91, v94), _Q1), v61);
      v100 = vmlaq_f64(vmulq_f64(vmulq_f64(v97, v96), a6), a6, vmulq_f64(v95, v93));
      v101 = vmlaq_f64(vmulq_f64(vmulq_n_f64(v96, v96.f64[0]), v53), v53, vmulq_n_f64(v93, v93.f64[0]));
      v102 = vmlaq_f64(vmulq_f64(vmulq_laneq_f64(v97, v96, 1), a6), a6, vmulq_laneq_f64(v95, v93, 1));
      v103 = vmlaq_f64(vmulq_f64(vmulq_laneq_f64(v96, v96, 1), v53), v53, vmulq_laneq_f64(v93, v93, 1));
      v104 = vmlaq_f64(vmulq_f64(vmulq_n_f64(v96, v97.f64[0]), v53), v53, vmulq_n_f64(v93, v95.f64[0]));
      v105 = vmlaq_f64(vmulq_f64(vmulq_f64(v97, v97), a6), a6, vmulq_f64(v95, v95));
      v106 = vaddq_f64(vmulq_f64(vmulq_f64(v99, v98), a6), v100);
      v107 = vaddq_f64(vmulq_f64(vmulq_n_f64(v98, v98.f64[0]), v53), v101);
      v108 = vaddq_f64(vmulq_f64(vmulq_laneq_f64(v99, v98, 1), a6), v102);
      v109 = vaddq_f64(vmulq_f64(vmulq_laneq_f64(v98, v98, 1), v53), v103);
      v111 = *(float64x2_t *)(v24 + 240);
      v110 = *(float64x2_t *)(v24 + 256);
      v112 = *v40;
      v113 = v40[1];
      v114 = vaddq_f64(vmulq_f64(vmulq_n_f64(v98, v99.f64[0]), v53), v104);
      v115 = vaddq_f64(vmulq_f64(vmulq_f64(v99, v99), a6), v105);
      v116 = vmulq_f64(v80, v106);
      v117 = vmulq_n_f64(v107, v80.f64[0]);
      v118 = vmulq_f64(v80, v108);
      v119 = vmulq_n_f64(v109, v80.f64[0]);
      v120 = vmulq_f64(v80, v115);
      v121 = vmulq_n_f64(v114, v80.f64[0]);
      v122 = vmulq_f64(v79, v106);
      v123 = vmulq_n_f64(v107, v79.f64[0]);
      v124 = vmulq_f64(v79, v108);
      v125 = vaddq_f64(*(float64x2_t *)(v24 + 192), v116);
      v126 = vaddq_f64(*(float64x2_t *)(v24 + 208), v119);
      v127 = vmulq_n_f64(v109, v79.f64[0]);
      v128 = vaddq_f64(*(float64x2_t *)(v24 + 224), v118);
      v129 = vmulq_n_f64(v114, v79.f64[0]);
      *(float64x2_t *)(v24 + 176) = vaddq_f64(*(float64x2_t *)(v24 + 176), v117);
      *(float64x2_t *)(v24 + 192) = v125;
      v130 = vmulq_f64(v79, v115);
      v131 = vmulq_laneq_f64(v106, v79, 1);
      v132 = vmulq_laneq_f64(v107, v79, 1);
      v133 = vmulq_laneq_f64(v108, v79, 1);
      *(float64x2_t *)(v24 + 208) = v126;
      *(float64x2_t *)(v24 + 224) = v128;
      v134 = vmulq_laneq_f64(v109, v79, 1);
      v135 = vmulq_laneq_f64(v114, v79, 1);
      *(float64x2_t *)(v24 + 240) = vaddq_f64(v111, v121);
      *(float64x2_t *)(v24 + 256) = vaddq_f64(v110, v120);
      v136 = vmulq_laneq_f64(v115, v79, 1);
      *v40 = vaddq_f64(v112, v123);
      v40[1] = vaddq_f64(v113, v122);
      v137 = vaddq_f64(v41[1], v124);
      *v41 = vaddq_f64(*v41, v127);
      v41[1] = v137;
      v138 = vaddq_f64(v130, v42[1]);
      *v42 = vaddq_f64(v129, *v42);
      v42[1] = v138;
      v139 = vaddq_f64(v131, v43[1]);
      *v43 = vaddq_f64(v132, *v43);
      v43[1] = v139;
      v140 = vaddq_f64(v133, v44[1]);
      *v44 = vaddq_f64(v134, *v44);
      v44[1] = v140;
      v141 = vaddq_f64(v136, v45[1]);
      *v45 = vaddq_f64(v135, *v45);
      v45[1] = v141;
      v46 -= 4;
    }
    while (v46);
  }
  result = sqrt(v26);
  *(double *)(v23 + 464 * v22 + 32) = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_;
}

_QWORD *geom_exact_winding_number_3f_dispose(uint64_t a1)
{
  return geom::free_exact_winding_number_3<float>(*(_QWORD **)(a1 + 16));
}

_QWORD *geom_exact_winding_number_3d_dispose(uint64_t a1)
{
  return geom::free_exact_winding_number_3<double>(*(_QWORD **)(a1 + 16));
}

uint64_t geom_approximate_winding_number_3f_dispose(uint64_t a1)
{
  return geom::free_approximate_winding_number_3<float>(*(_QWORD *)(a1 + 16));
}

uint64_t geom_approximate_winding_number_3d_dispose(uint64_t a1)
{
  return geom::free_approximate_winding_number_3<double>(*(_QWORD *)(a1 + 16));
}

uint64_t geom_create_exact_winding_number_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = geom_exact_winding_number_3f_obj_alloc();
  *(_QWORD *)(v8 + 16) = geom::create_exact_winding_number_3<float>(a1, a2, a3, a4);
  return v8;
}

uint64_t geom_create_exact_winding_number_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = geom_exact_winding_number_3d_obj_alloc();
  *(_QWORD *)(v8 + 16) = geom::create_exact_winding_number_3<double>(a1, a2, a3, a4);
  return v8;
}

float geom_query_exact_winding_number_3f(uint64_t a1, float32x4_t a2)
{
  return geom::query_exact_winding_number_3<float>(*(_QWORD **)(a1 + 16), a2);
}

double geom_query_exact_winding_number_3d(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  _QWORD *v3;
  float64x2_t v5[2];

  v2 = a2[1];
  v3 = *(_QWORD **)(a1 + 16);
  v5[0] = *a2;
  v5[1] = v2;
  return geom::query_exact_winding_number_3<double>(v3, v5);
}

uint64_t geom_create_approximate_winding_number_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = geom_approximate_winding_number_3f_obj_alloc();
  *(_QWORD *)(v8 + 16) = geom::create_approximate_winding_number_3<float>(a1, a2, a3, a4);
  return v8;
}

uint64_t geom_create_approximate_winding_number_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = geom_approximate_winding_number_3d_obj_alloc();
  *(_QWORD *)(v8 + 16) = geom::create_approximate_winding_number_3<double>(a1, a2, a3, a4);
  return v8;
}

float geom_query_approximate_winding_number_3f(uint64_t a1, float32x4_t a2)
{
  return geom::query_approximate_winding_number_3<float>(*(_QWORD **)(a1 + 16), a2);
}

double geom_query_approximate_winding_number_3d(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  _QWORD *v3;
  float64x2_t v5[2];

  v2 = a2[1];
  v3 = *(_QWORD **)(a1 + 16);
  v5[0] = *a2;
  v5[1] = v2;
  return geom::query_approximate_winding_number_3<double>(v3, v5);
}

uint64_t geom_create_approximate_convex_decomposition_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, _DWORD *a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;

  v10 = geom_approximate_convex_decomposition_3f_obj_alloc();
  v11 = geom::acd<float>::acd((_QWORD *)(v10 + 16));
  geom::acd<float>::init(v11, a2, a1, a4, 3 * a3, a5);
  return v10;
}

uint64_t geom_create_approximate_convex_decomposition_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, _DWORD *a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;

  v10 = geom_approximate_convex_decomposition_3d_obj_alloc();
  v11 = geom::acd<float>::acd((_QWORD *)(v10 + 16));
  geom::acd<double>::init(v11, a2, a1, a4, 3 * a3, a5);
  return v10;
}

uint64_t geom_create_approximate_convex_decomposition_constrained_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, _DWORD *a4, unsigned int a5, int a6, float a7)
{
  uint64_t v14;
  uint64_t *v15;

  v14 = geom_approximate_convex_decomposition_3f_obj_alloc();
  v15 = geom::acd<float>::acd((_QWORD *)(v14 + 16));
  geom::acd<float>::init(v15, a2, a1, a4, 3 * a3, a5, a6, a7);
  return v14;
}

uint64_t geom_create_approximate_convex_decomposition_constrained_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, _DWORD *a4, unsigned int a5, int a6, double a7)
{
  uint64_t v14;
  uint64_t *v15;

  v14 = geom_approximate_convex_decomposition_3d_obj_alloc();
  v15 = geom::acd<float>::acd((_QWORD *)(v14 + 16));
  geom::acd<double>::init(v15, a2, a1, a4, 3 * a3, a5, a6, a7);
  return v14;
}

void geom_approximate_convex_decomposition_split_clusters_automatically_3f(uint64_t a1, uint64_t a2)
{
  geom::acd<float>::split_clusters_automatically((uint64_t *)(a1 + 16), (unsigned int *)(a2 + 16));
}

void geom_approximate_convex_decomposition_split_clusters_automatically_3d(uint64_t a1, uint64_t a2)
{
  geom::acd<double>::split_clusters_automatically((uint64_t *)(a1 + 16), (unsigned int *)(a2 + 16));
}

uint64_t geom_approximate_convex_decomposition_merge_clusters_automatically_3f(uint64_t a1, uint64_t a2)
{
  return geom::acd<float>::merge_clusters_automatically((uint64_t *)(a1 + 16), a2 + 16);
}

uint64_t geom_approximate_convex_decomposition_merge_clusters_automatically_3d(uint64_t a1, uint64_t a2)
{
  return geom::acd<double>::merge_clusters_automatically((uint64_t *)(a1 + 16), a2 + 16);
}

uint64_t geom_approximate_convex_decomposition_cluster_count_3f(uint64_t a1)
{
  return geom::acd<float>::cluster_count(a1 + 16);
}

uint64_t geom_approximate_convex_decomposition_cluster_count_3d(uint64_t a1)
{
  return geom::acd<double>::cluster_count(a1 + 16);
}

void geom_approximate_convex_decomposition_cluster_indices_3f(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(a1 + 16);
  v3 = geom::collection_to_vector<float>(a2);
  geom::acd<float>::cluster_indices(v2, v3);
}

void geom_approximate_convex_decomposition_cluster_indices_3d(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(a1 + 16);
  v3 = geom::collection_to_vector<float>(a2);
  geom::acd<double>::cluster_indices(v2, v3);
}

void geom_approximate_convex_decomposition_hull_for_cluster_3f(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  float32x4_t **v6;
  char **v7;
  std::vector<unsigned int> *v8;

  v6 = (float32x4_t **)(a1 + 16);
  v7 = (char **)geom::collection_to_vector<float>(a3);
  v8 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a4);
  geom::acd<float>::get_hull_of_cluster(v6, a2, v7, v8);
}

void geom_approximate_convex_decomposition_hull_for_cluster_3d(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  char **v7;
  std::vector<unsigned int> *v8;

  v6 = (uint64_t *)(a1 + 16);
  v7 = (char **)geom::collection_to_vector<float>(a3);
  v8 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a4);
  geom::acd<double>::get_hull_of_cluster(v6, a2, v7, v8);
}

uint64_t geom_approximate_convex_decomposition_split_cluster_with_plane_3f(uint64_t a1, unsigned int a2, float32x4_t *a3, __int32 *a4)
{
  float32x4_t **v4;
  float32x4_t v5;
  float32x4_t v7[2];
  int v8;

  v8 = 0;
  v4 = (float32x4_t **)(a1 + 16);
  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  if (!a4)
    a4 = &v8;
  return geom::acd<float>::split_cluster_with_plane(v4, a2, v7, a4);
}

uint64_t geom_approximate_convex_decomposition_split_cluster_with_plane_3d(uint64_t a1, unsigned int a2, float64x2_t *a3, int *a4)
{
  uint64_t *v4;
  float64x2_t v5;
  int v7;
  float64x2_t v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v4 = (uint64_t *)(a1 + 16);
  v5 = a3[1];
  v8[0] = *a3;
  v8[1] = v5;
  v8[2] = a3[2];
  if (!a4)
    a4 = &v7;
  return geom::acd<double>::split_cluster_with_plane(v4, a2, v8, a4);
}

uint64_t *geom_approximate_convex_decomposition_merge_clusters_3f(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<float>::merge_clusters((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t *geom_approximate_convex_decomposition_merge_clusters_3d(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<double>::merge_clusters((uint64_t *)(a1 + 16), a2, a3);
}

double geom_create_approximate_convex_decomposition_opt_3f()
{
  uint64_t v0;
  double result;

  v0 = geom_approximate_convex_decomposition_opt_3f_obj_alloc();
  *(_QWORD *)(v0 + 24) = 0x100000000;
  *(_DWORD *)(v0 + 16) = 20;
  result = 5.37764279e-19;
  *(_QWORD *)(v0 + 20) = 0x3C23D70A3E800000;
  return result;
}

double geom_create_approximate_convex_decomposition_opt_3d()
{
  uint64_t v0;
  double result;

  v0 = geom_approximate_convex_decomposition_opt_3d_obj_alloc();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_DWORD *)(v0 + 16) = 20;
  result = 0.25;
  *(_OWORD *)(v0 + 24) = xmmword_2289B44A0;
  *(_BYTE *)(v0 + 40) = 1;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_get_max_cluster_count_3f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t geom_approximate_convex_decomposition_opt_get_max_cluster_count_3d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

float geom_approximate_convex_decomposition_opt_get_split_min_concavity_reduction_3f(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

double geom_approximate_convex_decomposition_opt_get_split_min_concavity_reduction_3d(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

float geom_approximate_convex_decomposition_opt_get_merge_max_allowed_volume_increase_3f(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

double geom_approximate_convex_decomposition_opt_get_merge_max_allowed_volume_increase_3d(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t geom_approximate_convex_decomposition_opt_get_recursive_cut_search_enabled_3f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28);
}

uint64_t geom_approximate_convex_decomposition_opt_get_recursive_cut_search_enabled_3d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t geom_approximate_convex_decomposition_opt_set_max_cluster_count_3f(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_max_cluster_count_3d(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_split_min_concavity_reduction_3f(uint64_t result, float a2)
{
  *(float *)(result + 20) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_split_min_concavity_reduction_3d(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_merge_max_allowed_volume_increase_3f(uint64_t result, float a2)
{
  *(float *)(result + 24) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_merge_max_allowed_volume_increase_3d(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_recursive_cut_search_enabled_3f(uint64_t result, char a2)
{
  *(_BYTE *)(result + 28) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_recursive_cut_search_enabled_3d(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2;
  return result;
}

void geom::interpolating_curve<float>::build(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  geom::interpolating_curve<float>::build_helper(a2, a1, 0);
}

void geom::interpolating_curve<float>::build_helper(uint64_t a1, _QWORD *a2, char a3)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;
  int8x16_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  float v44;
  uint64_t v45;
  double v46;
  float v47;
  double v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 i;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 j;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int16 k;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  __int16 v81;
  unsigned __int16 v82;
  unsigned __int16 v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  float v88;
  float *v89;
  _DWORD *v90;
  float *v91;
  _DWORD *v92;
  int v93;
  uint64_t v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int16 m;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  float v104;
  float **v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  float v111;
  float v112;
  unsigned __int16 v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118[2];
  char v119;
  _DWORD v120[6];
  char v121;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2);
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  v11 = v6;
  if (v8 != v10)
  {
    do
      v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2);
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 192) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    v12 = 0;
    v13 = -1;
  }
  else
  {
    v12 = 0;
    v13 = -1;
    v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 20 * v14) != *(_DWORD *)(*a2 + 20 * v12))
      {
        v13 = v14 - 1;
        *(_QWORD *)&v108 = *a2 + 20 * v12;
        *((_QWORD *)&v108 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        geom::interpolating_curve<float>::append_spline((_QWORD *)a1, &v108);
        v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(_QWORD *)&v108 = *a2 + 20 * v12;
    *((_QWORD *)&v108 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    geom::interpolating_curve<float>::append_spline((_QWORD *)a1, &v108);
  }
  v16 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 3));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v17 = 0;
    v18 = *v9;
    v19 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 3)) <= 1)
      v20 = 1;
    else
      v20 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 3);
    v21 = (__int16 *)(v18 + 56);
    v22 = v20;
    do
    {
      v23 = *v21;
      v21 += 44;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    v30 = 0;
    v31 = 0;
    v32 = *(_QWORD *)(a1 + 72);
    do
    {
      v33 = *(unsigned __int16 *)(v32 + 88 * v30 + 56);
      if (*(_WORD *)(v32 + 88 * v30 + 56))
      {
        v34 = *(_QWORD *)a1;
        do
        {
          v35 = (v31 + 1);
          *(_WORD *)(v34 + 2 * (unsigned __int16)v31) = v30;
          LODWORD(v31) = v31 + 1;
          --v33;
        }
        while (v33);
      }
      else
      {
        v35 = v31;
      }
      ++v30;
      v31 = v35;
    }
    while (v30 != v20);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 16);
  if ((a3 & 1) != 0)
  {
    LOWORD(v118[0]) = 512;
    v118[1] = 0.001;
    v119 = 1;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v36 = *(_QWORD *)(a1 + 96);
    v106 = (_QWORD *)(a1 + 96);
    v107 = a1;
    *(_QWORD *)(a1 + 104) = v36;
    v37 = *(_QWORD *)(a1 + 120);
    v105 = (float **)(a1 + 120);
    *(_WORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 154) = 0;
    *(_QWORD *)(a1 + 128) = v37;
    v38 = *a2;
    v39 = a2[1] - *a2;
    if (v39)
      v40 = *(float *)(v38 + 4);
    else
      v40 = 0.0;
    v41 = 0xCCCCCCCCCCCCCCCDLL * (v39 >> 2);
    if (v41 >= 2)
    {
      v42 = 1;
      while (1)
      {
        v43 = *(_DWORD *)(v38 + 20 * v42);
        if (v43 == *(_DWORD *)(v38 + 20 * (v42 - 1)))
          break;
LABEL_106:
        v42 = (v42 + 1);
        v38 = *a2;
        v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2);
        if (v41 <= v42)
          goto LABEL_126;
      }
      v44 = *(float *)(v38 + 20 * v42 + 4);
      LOBYTE(v118[0]) = v43 != 0;
      v113 = 0;
      v45 = v107;
      v114 = 0;
      *((_QWORD *)&v108 + 1) = v108;
      *(_QWORD *)&v110 = *((_QWORD *)&v109 + 1);
      v46 = v44;
      *(double *)v24.i64 = (v44 + v40 * 2.0) * 0.333333333;
      v47 = *(double *)v24.i64;
      v48 = (v40 + v44 * 2.0) * 0.333333333;
      v49 = v48;
      if (*(_BYTE *)(v107 + 192))
      {
        v50 = v40;
      }
      else
      {
        v51 = *(_QWORD *)(v107 + 72);
        v52 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v107 + 80) - v51) >> 3);
        if ((v52 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v40)
        {
          LOWORD(v52) = v52 - 1;
          if (*(float *)(v107 + 188) > v40)
          {
            for (i = 0; ; i = v55 + 1)
            {
              v54 = i;
              while (1)
              {
                v55 = (v54 + (unsigned __int16)v52) >> 1;
                if (*(float *)(v51 + 88 * v55 + 48) <= v40)
                  break;
                LOWORD(v52) = v55 - 1;
              }
              if (*(float *)(v51 + 88 * v55 + 52) > v40)
                break;
            }
            LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
          }
        }
        else
        {
          LOWORD(v52) = 0;
        }
        v56 = (unsigned __int16)v52;
        v57 = (unsigned __int16)v52;
        v58 = geom::interpolating_spline<float>::evaluate_length_at(v51 + 88 * (unsigned __int16)v52, v40);
        if (v57)
          v46 = *(float *)(*(_QWORD *)(v45 + 48) + 4 * (v56 - 1));
        else
          v46 = 0.0;
        v48 = v46 + v58;
        v50 = v48;
        v59 = v107;
        if (!*(_BYTE *)(v107 + 192))
        {
          v60 = *(_QWORD *)(v107 + 72);
          v61 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v107 + 80) - v60) >> 3);
          if ((v61 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v47)
          {
            LOWORD(v61) = v61 - 1;
            if (*(float *)(v107 + 188) > v47)
            {
              for (j = 0; ; j = v64 + 1)
              {
                v63 = j;
                while (1)
                {
                  v64 = (v63 + (unsigned __int16)v61) >> 1;
                  if (*(float *)(v60 + 88 * v64 + 48) <= v47)
                    break;
                  LOWORD(v61) = v64 - 1;
                }
                if (*(float *)(v60 + 88 * v64 + 52) > v47)
                  break;
              }
              LODWORD(v61) = (v63 + (unsigned __int16)v61) >> 1;
            }
          }
          else
          {
            LOWORD(v61) = 0;
          }
          v65 = (unsigned __int16)v61;
          v66 = (unsigned __int16)v61;
          v67 = geom::interpolating_spline<float>::evaluate_length_at(v60 + 88 * (unsigned __int16)v61, v47);
          v46 = v66 ? *(float *)(*(_QWORD *)(v59 + 48) + 4 * (v65 - 1)) : 0.0;
          v48 = v46 + v67;
          v47 = v48;
          v68 = v107;
          if (!*(_BYTE *)(v107 + 192))
          {
            v69 = *(_QWORD *)(v107 + 72);
            v70 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v107 + 80) - v69) >> 3);
            if ((v70 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v49)
            {
              LOWORD(v70) = v70 - 1;
              if (*(float *)(v107 + 188) > v49)
              {
                for (k = 0; ; k = v73 + 1)
                {
                  v72 = k;
                  while (1)
                  {
                    v73 = (v72 + (unsigned __int16)v70) >> 1;
                    if (*(float *)(v69 + 88 * v73 + 48) <= v49)
                      break;
                    LOWORD(v70) = v73 - 1;
                  }
                  if (*(float *)(v69 + 88 * v73 + 52) > v49)
                    break;
                }
                LODWORD(v70) = (v72 + (unsigned __int16)v70) >> 1;
              }
            }
            else
            {
              LOWORD(v70) = 0;
            }
            v74 = (unsigned __int16)v70;
            v75 = (unsigned __int16)v70;
            v76 = geom::interpolating_spline<float>::evaluate_length_at(v69 + 88 * (unsigned __int16)v70, v49);
            v46 = v75 ? *(float *)(*(_QWORD *)(v68 + 48) + 4 * (v74 - 1)) : 0.0;
            v48 = v46 + v76;
            v49 = v48;
            v77 = v107;
            if (!*(_BYTE *)(v107 + 192))
            {
              v97 = *(_QWORD *)(v107 + 72);
              v98 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v107 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v44)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v107 + 188) > v44)
                {
                  for (m = 0; ; m = v101 + 1)
                  {
                    v100 = m;
                    while (1)
                    {
                      v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v44)
                        break;
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v44)
                      break;
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              v102 = (unsigned __int16)v98;
              v103 = (unsigned __int16)v98;
              v104 = geom::interpolating_spline<float>::evaluate_length_at(v97 + 88 * (unsigned __int16)v98, v44);
              if (v103)
                v46 = *(float *)(*(_QWORD *)(v77 + 48) + 4 * (v102 - 1));
              else
                v46 = 0.0;
              v48 = v46 + v104;
              *(float *)&v48 = v48;
              goto LABEL_82;
            }
          }
        }
      }
      *(float *)&v48 = v44;
LABEL_82:
      *(float *)v120 = v40;
      *(float *)&v120[1] = v44;
      *(float *)&v120[2] = v50;
      *(float *)&v120[3] = v47;
      *(float *)&v120[4] = v49;
      v120[5] = LODWORD(v48);
      v121 = 0;
      v78 = v113;
      v79 = *(_DWORD *)(a1 + 104);
      v80 = *(_QWORD *)(a1 + 96);
      v81 = *(_WORD *)(a1 + 152);
      if (v81)
        v82 = v81 + 1;
      else
        v82 = 0;
      v83 = v81 + v113;
      if (v81 + v113)
      {
        std::vector<float>::resize((uint64_t)v106, (unsigned __int16)(3 * v83 + 1));
        *(_WORD *)(a1 + 152) = v83;
        if (!*(_BYTE *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v83 + 1);
          if ((_DWORD)v78)
            goto LABEL_91;
          goto LABEL_105;
        }
LABEL_90:
        if ((_DWORD)v78)
          goto LABEL_91;
        goto LABEL_105;
      }
      *(_QWORD *)(a1 + 104) = v80;
      *(_WORD *)(a1 + 152) = 0;
      if (*(_BYTE *)(a1 + 154))
        goto LABEL_90;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
      if (!(_DWORD)v78)
      {
LABEL_105:
        v40 = v44;
        goto LABEL_106;
      }
LABEL_91:
      v84 = (unsigned __int16)((v79 - v80) >> 2);
      v85 = v82;
      v86 = v114;
      v87 = v113;
      v88 = (float)v113;
      v89 = (float *)*((_QWORD *)&v109 + 1);
      v90 = (_DWORD *)v108;
      v91 = *v105;
      v92 = (_DWORD *)*v106;
      v93 = 3;
      v94 = 1;
      while (1)
      {
        if (v84)
        {
          if (v86)
            goto LABEL_94;
        }
        else
        {
          if (v86)
          {
            if ((_DWORD)v87)
              v96 = v111 + (float)((float)((float)(v112 - v111) / v88) * 0.0);
            else
              v96 = v112;
          }
          else
          {
            v96 = *v89;
          }
          *v91 = v96;
          *v92 = *v90;
          ++v85;
          v84 = 1;
          if (v86)
          {
LABEL_94:
            if (v87 == v94)
            {
              v95 = v112;
            }
            else
            {
              *(float *)&v25 = (float)(v112 - v111) / v88;
              v95 = v111 + (float)((float)(unsigned __int16)v94 * *(float *)&v25);
            }
            goto LABEL_104;
          }
        }
        v95 = v89[v94];
LABEL_104:
        v91[v85] = v95;
        v92[(unsigned __int16)v84] = v90[(unsigned __int16)(v93 - 2)];
        v92[(unsigned __int16)(v84 + 1)] = v90[(unsigned __int16)(v93 - 1)];
        v92[(unsigned __int16)(v84 + 2)] = v90[(unsigned __int16)v93];
        ++v85;
        v84 += 3;
        ++v94;
        v93 += 3;
        if (v94 - v78 == 1)
          goto LABEL_105;
      }
    }
LABEL_126:
    *(_BYTE *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + 20 * v41 - 16);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v108);
  }
}

void geom::interpolating_curve<float>::build_arc_length_parameterized(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  geom::interpolating_curve<float>::build_helper(a2, a1, 1);
}

float geom::interpolating_curve<float>::evaluate_at(uint64_t a1, float a2)
{
  unint64_t span;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t v12;
  int v13;

  if (*(_BYTE *)(a1 + 192))
  {
    span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    v4 = (unsigned __int16)(3 * span);
    v5 = *(_QWORD *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
  if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (i = 0; ; i = v10 + 1)
      {
        v9 = i;
        while (1)
        {
          v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(float *)(v6 + 88 * v10 + 48) <= a2)
            break;
          LOWORD(v7) = v10 - 1;
        }
        if (*(float *)(v6 + 88 * v10 + 52) > a2)
          break;
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  v11 = (_QWORD *)(v6 + 88 * (unsigned __int16)v7);
  v12 = geom::interpolating_spline<float>::find_span((uint64_t)v11, a2);
  v13 = (unsigned __int16)(3 * v12);
  return (float)(*(float *)(*v11 + 4 * (unsigned __int16)(3 * v12))
               * (float)((float)(1.0 - *((float *)&v12 + 1))
                       * (float)((float)(1.0 - *((float *)&v12 + 1)) * (float)(1.0 - *((float *)&v12 + 1)))))
       + *(float *)(*v11 + 4 * (v13 + 1))
       * ((float)((float)(1.0 - *((float *)&v12 + 1)) * (float)(1.0 - *((float *)&v12 + 1)))
        * 3.0
        * *((float *)&v12 + 1))
       + *(float *)(*v11 + 4 * (v13 + 2))
       * ((float)(1.0 - *((float *)&v12 + 1))
        * 3.0
        * (float)(*((float *)&v12 + 1) * *((float *)&v12 + 1)))
       + (float)(*(float *)(*v11 + 4 * (v13 + 3))
               * (float)((float)(*((float *)&v12 + 1) * *((float *)&v12 + 1)) * *((float *)&v12 + 1)));
}

uint64_t geom::interpolating_curve<float>::find_spline_for_parameter(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 i;
  int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v2) >> 3);
  if ((v3 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (i = 0; ; i = v6 + 1)
      {
        v5 = i;
        while (1)
        {
          v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(float *)(v2 + 88 * v6 + 48) <= a2)
            break;
          LOWORD(v3) = v6 - 1;
        }
        if (*(float *)(v2 + 88 * v6 + 52) > a2)
          break;
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return v2 + 88 * (unsigned __int16)v3;
}

unint64_t geom::interpolating_curve<float>::evaluate_tangent_at(uint64_t a1, float a2)
{
  unint64_t span;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  unsigned __int16 j;
  int v12;
  unsigned int v13;

  if (*(_BYTE *)(a1 + 192))
  {
    span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    v4 = (unsigned __int16)(3 * span);
    v5 = *(_QWORD *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (i = 0; ; i = v10 + 1)
        {
          v9 = i;
          while (1)
          {
            v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2)
              break;
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (j = 0; ; j = v13 + 1)
        {
          v12 = j;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2)
              break;
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float geom::interpolating_curve<float>::evaluate_length_at(uint64_t a1, float result)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 i;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  double v10;
  double v11;

  if (!*(_BYTE *)(a1 + 192))
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (i = 0; ; i = v7 + 1)
        {
          v6 = i;
          while (1)
          {
            v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result)
              break;
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result)
            break;
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    v8 = (unsigned __int16)v4;
    v9 = (unsigned __int16)v4;
    v10 = geom::interpolating_spline<float>::evaluate_length_at(v3 + 88 * (unsigned __int16)v4, result);
    if (v9)
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v8 - 1));
    else
      v11 = 0.0;
    return v11 + v10;
  }
  return result;
}

uint64_t geom::interpolating_curve<float>::find_spline_index_for_parameter(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 i;
  int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v2) >> 3);
  if ((v3 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (i = 0; ; i = v6 + 1)
      {
        v5 = i;
        while (1)
        {
          v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(float *)(v2 + 88 * v6 + 48) <= a2)
            break;
          LOWORD(v3) = v6 - 1;
        }
        if (*(float *)(v2 + 88 * v6 + 52) > a2)
          break;
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return (unsigned __int16)v3;
}

float geom::interpolating_spline<float>::evaluate_length_at(uint64_t a1, float a2)
{
  unsigned __int16 span;
  uint64_t v5;
  float v6;
  int v7;
  unsigned int v8;
  float v9;

  span = geom::interpolating_spline<float>::find_span(a1, a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v5)
  {
    if (span)
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + geom::interpolating_spline<float>::evaluate_span_length(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 58))
  {
    v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span)
      v9 = *(float *)(a1 + 52);
    else
      v9 = *(float *)(a1 + 48)
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    v9 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * span);
  }
  return v6 + geom::interpolating_spline<float>::evaluate_length_betweeen((_QWORD *)a1, v9, a2);
}

float geom::interpolating_curve<float>::evaluate_total_length(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 192))
  {
    v1 = *(unsigned __int16 *)(a1 + 152);
    if (*(_WORD *)(a1 + 152))
      v2 = *(_WORD *)(a1 + 152);
    else
      v2 = -1;
    if (*(_BYTE *)(a1 + 154))
    {
      if (v1 == v2)
        return *(float *)(a1 + 148);
      else
        return *(float *)(a1 + 144)
             + (float)((float)v2 * (float)((float)(*(float *)(a1 + 148) - *(float *)(a1 + 144)) / (float)v1));
    }
    else
    {
      return *(float *)(*(_QWORD *)(a1 + 120) + 4 * v2);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v4)
      return *(float *)(*(_QWORD *)(a1 + 48) - 0x45D1745D1745D174 * (v4 >> 3) - 4);
    else
      return 0.0;
  }
}

float geom::interpolating_curve<float>::min_knot(uint64_t a1)
{
  return *(float *)(a1 + 184);
}

float geom::interpolating_curve<float>::max_knot(uint64_t a1)
{
  return *(float *)(a1 + 188);
}

uint64_t geom::interpolating_curve<float>::span_count(_DWORD *a1)
{
  return (unsigned __int16)((a1[2] - *a1) >> 1);
}

void geom::interpolating_curve<float>::span_knots(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 192))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 58))
    {
      v20 = v18 + 88 * v9;
      v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      v23 = v21 + (float)((float)v10 * v22);
      v24 = v22 + v23;
    }
    else
    {
      v25 = (float *)(*(_QWORD *)(v18 + 88 * v9 + 24) + 4 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + geom::interpolating_spline<float>::evaluate_length_at(v19, v23);
    v17 = v11
        + geom::interpolating_spline<float>::evaluate_length_at(*(_QWORD *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 58))
    {
      v13 = v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t geom::interpolating_curve<float>::calculate_monomial_basis_for_span(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;

  v4 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v5 = *(_QWORD *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  *(_DWORD *)a3 = *(_DWORD *)(v5 + 4 * v4);
  *(float *)(a3 + 4) = (float)(*(float *)(v5 + 4 * (v3 + 1)) - *(float *)(v5 + 4 * v4)) * 3.0;
  v6 = (*(float *)(v5 + 4 * v4)
      + *(float *)(v5 + 4 * (v3 + 1)) * -2.0
      + *(float *)(v5 + 4 * (v4 + 2)))
     * 3.0;
  *(float *)(a3 + 8) = v6;
  v7 = *(float *)(v5 + 4 * (v4 + 3))
     + (float)(*(float *)(v5 + 4 * (v3 + 1)) - *(float *)(v5 + 4 * (v4 + 2))) * 3.0
     - *(float *)(v5 + 4 * v4);
  *(float *)(a3 + 12) = v7;
  v8 = fabsf(v6);
  if (fabsf(v7) > 0.00001 || v8 > 0.00001)
    return 4;
  else
    return 2;
}

uint64_t geom::interpolating_curve<float>::calculate_bezier_basis_for_span(_QWORD *a1, unsigned int a2, float *a3)
{
  int v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t result;
  float v13;
  float v14;

  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v4 = *(_QWORD *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v5 = *(float *)(v4
                + 4 * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v6 = *(float *)(v4 + 4 * (v3 + 1));
  v7 = (float)(v6 - v5) * 3.0;
  v8 = *(float *)(v4 + 4 * (v3 + 2));
  v9 = (v5 + v6 * -2.0 + v8) * 3.0;
  v10 = *(float *)(v4 + 4 * (v3 + 3)) + (float)(v6 - v8) * 3.0 - v5;
  if (fabsf(v9) > 0.00001 || fabsf(v10) > 0.00001)
  {
    v11 = v5 + (float)(v7 * 0.33333);
    v13 = (float)(v5 + (float)(v7 * 0.66667)) + (float)(v9 * 0.33333);
    v14 = (float)((float)(v5 + v7) + v9) + v10;
    result = 4;
  }
  else
  {
    v11 = v5 + v7;
    result = 2;
    v13 = 0.0;
    v14 = 0.0;
  }
  *a3 = v5;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v14;
  return result;
}

uint64_t std::vector<geom::interpolating_spline<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      abort();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

uint64_t geom::interpolating_curve<float>::append_spline(_QWORD *a1, _WORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  char *v20;
  int v21;
  _BYTE v23[88];
  _OWORD v24[3];
  unsigned __int16 v25;
  _QWORD v26[4];

  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch(**(_DWORD **)a2)
  {
    case 0:
      geom::interpolating_curve<float>::build_linear_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      geom::interpolating_curve<float>::build_hermite_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      geom::interpolating_curve<float>::build_catmull_rom_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      geom::interpolating_curve<float>::build_natural_spline(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + geom::interpolating_spline<float>::evaluate_span_length((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = geom::interpolating_spline<float>::evaluate_total_length((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (float *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      v13 = (float *)a1[6];
      v11 = (float *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (float *)&v18[4 * v14];
    v20 = &v18[4 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  std::vector<geom::interpolating_spline<float>>::push_back[abi:nn180100](a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void geom::interpolating_curve<float>::build_linear_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  double v16;
  float v17;
  unsigned __int16 v18;
  float v19;
  void *__p;
  char *v21;
  uint64_t v22;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  v6 = v5;
  std::vector<float>::resize((uint64_t)&__p, v5 + 1);
  v7 = *(_QWORD *)a1;
  v8 = (char *)__p;
  *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = *(_QWORD *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    v11 = (float *)(v8 + 4);
    v12 = (float *)(v7 + 28);
    do
    {
      v13 = *(v12 - 1);
      *v11 = v13;
      v14 = *(v12 - 5);
      v15 = (float)(v13 - *(v11 - 1)) * (float)(*v12 - v14);
      *(float *)(v9 + 4 * (unsigned __int16)v10) = v14;
      v16 = v15 / 3.0;
      v17 = v16 + *(v12 - 5);
      *(float *)(v9 + 4 * (unsigned __int16)(v10 + 1)) = v17;
      v18 = v10 + 2;
      LOWORD(v10) = v10 + 3;
      v19 = *v12;
      v12 += 5;
      *(float *)&v16 = v19 - v16;
      *(_DWORD *)(v9 + 4 * v18) = LODWORD(v16);
      ++v11;
      --v6;
    }
    while (v6);
    v10 = (unsigned __int16)v10;
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(v9 + 4 * v10) = *(_DWORD *)(v7 + 20 * *((_QWORD *)a1 + 1) - 12);
  *(_BYTE *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v8, (uint64_t)v21, (v21 - v8) >> 2);
    v8 = (char *)__p;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v8;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v21 - 1);
  v21 = v8;
  operator delete(v8);
}

uint64_t geom::interpolating_spline<float>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1, (__n128 *)a2);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 24, (__n128 *)(a2 + 24));
  v4 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_QWORD *)(a1 + 48) = v4;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 64, (__n128 *)(a2 + 64));
  return a1;
}

void geom::interpolating_curve<float>::build_catmull_rom_spline(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  float v7;
  char *v8;
  float *v9;
  uint64_t v10;
  float *v11;
  float *v12;
  _DWORD *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  int v26;
  uint64_t v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unsigned __int16 v56;
  float v57;
  float v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  int *v65;
  int v66;
  void *__p;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;

  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v4 = a1[1];
  v5 = v4 - 1;
  std::vector<float>::resize((uint64_t)&v73, (unsigned __int16)(v4 + 2));
  std::vector<float>::resize((uint64_t)&v70, (unsigned __int16)(v4 + 2));
  v6 = *a1;
  v7 = -(*(float *)(*a1 + 28) - *(float *)(*a1 + 8) * 2.0);
  v8 = (char *)v73;
  *(float *)v73 = v7;
  v9 = (float *)v70;
  *(_DWORD *)v70 = 0;
  v9[1] = sqrtf(vabds_f32(*(float *)(v6 + 28), *(float *)(v6 + 8)));
  if ((_WORD)v4 == 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = (unsigned __int16)(v4 - 1);
    v11 = v9 + 2;
    v12 = (float *)(v6 + 28);
    v13 = v8 + 4;
    v14 = v10;
    do
    {
      *v13++ = *((_DWORD *)v12 - 5);
      *v11 = *(v11 - 1) + sqrtf(vabds_f32(*v12, *(v12 - 5)));
      ++v11;
      v12 += 5;
      --v14;
    }
    while (v14);
  }
  v15 = *(float *)(v6 + 20 * v10 + 8);
  v16 = 4 * (unsigned __int16)(v4 + 2);
  v17 = v16 - 8;
  *(float *)&v8[v17] = v15;
  v18 = -(*(float *)&v8[v16 - 12] - v15 * 2.0);
  v16 -= 4;
  *(float *)&v8[v16] = v18;
  v9[(unint64_t)v16 / 4] = *(float *)((char *)v9 + v17)
                                + sqrtf(vabds_f32(*(float *)(v6 + 20 * (unsigned __int16)(v4 - 2) + 28), *(float *)(v6 + 20 * (unsigned __int16)(v4 - 2) + 8)));
  if ((_WORD)v4 == 1)
  {
    v20 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
    {
      v20 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v10 + 1);
    v19 = 0;
    LOWORD(v20) = 0;
    v21 = *(_QWORD *)a2;
    v22 = (float *)v70;
    v23 = (float *)v73;
    do
    {
      v24 = v22[v19];
      v25 = v23[v19];
      v26 = v19 + 2;
      v27 = v19 + 1;
      v28 = v22[(v19 + 1)];
      v29 = v22[(v19 + 2)];
      v30 = v19 + 3;
      v31 = v29 - v28;
      v32 = v22[v30];
      v33 = 1.0 / (float)(v28 - v24);
      v34 = 1.0 / (float)(v29 - v24);
      v35 = 1.0 / (float)(v29 - v28);
      v36 = v32 - v28;
      v37 = 1.0 / (float)(v32 - v28);
      v38 = v32 - v29;
      v39 = v23[v27];
      v40 = v33 * (float)((float)((float)(v28 - v28) * v25) - (float)((float)(v24 - v28) * v39));
      v41 = v23[v26];
      v42 = v35 * (float)((float)((float)(v29 - v28) * v39) - (float)((float)(v28 - v28) * v41));
      v43 = v23[v30];
      v44 = (float)(1.0 / v38) * (float)((float)(v36 * v41) - (float)((float)(v29 - v28) * v43));
      v45 = v33 * (float)(v39 - v25);
      v46 = v35 * (float)(v41 - v39);
      v47 = (float)(1.0 / v38) * (float)(v43 - v41);
      v48 = (float)(v29 - v28)
          * (float)(v35
                  * (float)((float)((float)((float)(v37 * (float)((float)(v36 * v42) - (float)((float)(v28 - v28) * v44)))
                                          - (float)(v34
                                                  * (float)((float)((float)(v29 - v28) * v40)
                                                          - (float)((float)(v24 - v28) * v42))))
                                  + (float)((float)(v29 - v28)
                                          * (float)(v34
                                                  * (float)((float)((float)(v42 - v40)
                                                                  + (float)((float)(v29 - v28) * v45))
                                                          - (float)((float)(v24 - v28) * v46)))))
                          - (float)((float)(v28 - v28)
                                  * (float)(v37
                                          * (float)((float)((float)(v44 - v42) + (float)(v36 * v46))
                                                  - (float)((float)(v28 - v28) * v47))))));
      v49 = v24 - v29;
      v50 = v28 - v29;
      v51 = v29 - v29;
      v52 = v33 * (float)((float)(v50 * v25) - (float)(v49 * v39));
      v53 = v35 * (float)((float)(v51 * v39) - (float)(v50 * v41));
      v54 = (float)(1.0 / v38) * (float)((float)(v38 * v41) - (float)(v51 * v43));
      v55 = v31
          * (float)(v35
                  * (float)((float)((float)((float)(v37 * (float)((float)(v38 * v53) - (float)(v50 * v54)))
                                          - (float)(v34 * (float)((float)(v51 * v52) - (float)(v49 * v53))))
                                  + (float)(v51
                                          * (float)(v34
                                                  * (float)((float)((float)(v53 - v52) + (float)(v51 * v45))
                                                          - (float)(v49 * v46)))))
                          - (float)(v50
                                  * (float)(v37
                                          * (float)((float)((float)(v54 - v53) + (float)(v38 * v46)) - (float)(v50 * v47))))));
      *(float *)(v21 + 4 * (unsigned __int16)v20) = v39;
      v56 = v20 + 2;
      v57 = v48 / 3.0 + v23[v27];
      *(float *)(v21 + 4 * (unsigned __int16)(v20 + 1)) = v57;
      LOWORD(v20) = v20 + 3;
      v58 = v23[v26] - v55 / 3.0;
      *(float *)(v21 + 4 * v56) = v58;
      v19 = v27;
    }
    while (v10 != v27);
    v20 = (unsigned __int16)v20;
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v20) = *(_DWORD *)(*a1 + 20 * v10 + 8);
  v59 = a1[1];
  v68 = 0;
  v69 = 0;
  __p = 0;
  if (v59)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v59);
    v60 = (char *)v68;
    bzero(v68, 4 * v59);
    v61 = &v60[4 * v59];
    v68 = v61;
    v62 = a1[1];
    v63 = (char *)__p;
    if (v62)
    {
      v64 = 0;
      v65 = (int *)(*a1 + 4);
      do
      {
        v66 = *v65;
        v65 += 5;
        *(_DWORD *)&v63[4 * v64++] = v66;
      }
      while (v62 != v64);
    }
  }
  else
  {
    v63 = 0;
    v61 = 0;
  }
  *(_BYTE *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v63, (uint64_t)v61, (v61 - v63) >> 2);
    v63 = (char *)__p;
    v61 = (char *)v68;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v63;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v61 - 1);
  v68 = v63;
  operator delete(v63);
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
}

void geom::interpolating_curve<float>::build_natural_spline(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  int v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  float *v16;
  float *v17;
  unint64_t v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  float *v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float *v46;
  float *v47;
  float *v48;
  double v49;
  float v50;
  __int16 v51;
  unsigned __int16 v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float *v57;
  unsigned int v58;
  float *v59;
  float *v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  double v67;
  float v68;
  double v69;
  float v70;
  double v71;
  float v72;
  unsigned __int16 v73;
  uint64_t v74;
  float v75;
  float v76;
  char *v77;
  void *v78;
  uint64_t v79;
  void *__p;
  _BYTE *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;

  v89 = 0;
  v90 = 0;
  v91 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  __p = 0;
  v81 = 0;
  v82 = 0;
  v4 = a1[1];
  v78 = 0;
  v79 = 0;
  v77 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v77, v4);
    v5 = v78;
    bzero(v78, 4 * v4);
    v4 = (unint64_t)v5 + 4 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v77;
      v9 = (int *)(*a1 + 4);
      do
      {
        v10 = *v9;
        v9 += 5;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v77;
  v12 = (unsigned __int16)v6;
  std::vector<float>::resize((uint64_t)&v89, (unsigned __int16)v6);
  std::vector<float>::resize((uint64_t)&v86, v12);
  std::vector<float>::resize((uint64_t)&v83, v12);
  std::vector<float>::resize((uint64_t)&__p, v12);
  v13 = v12 - 1;
  v14 = v89;
  v89[v12 - 1] = 0;
  *v14 = 0;
  v15 = __p;
  *((_DWORD *)__p + v12 - 1) = 1065353216;
  *v15 = 1065353216;
  v16 = (float *)v86;
  *((_DWORD *)v86 + v12 - 1) = 0;
  *v16 = 0.0;
  v17 = (float *)v83;
  *((_DWORD *)v83 + v12 - 1) = 0;
  *v17 = 0.0;
  if (v12 - 1 >= 2)
  {
    v18 = v12 - 2;
    v19 = (float *)(*a1 + 28);
    v20 = v17 + 1;
    v21 = v16 + 1;
    v22 = (float *)(v15 + 1);
    v23 = (float *)(v11 + 4);
    v24 = (float *)(v14 + 1);
    v25 = v19;
    do
    {
      v26 = *v23;
      v27 = *v23 - *(v23 - 1);
      v28 = v23[1];
      ++v23;
      v29 = v28 - v26;
      *v24++ = v27;
      *v22++ = (float)(v27 + v29) + (float)(v27 + v29);
      *v21++ = v29;
      v30 = v25[5];
      v25 += 5;
      v31 = -3.0 / v27 * (float)(*v19 - *(v19 - 5)) + 3.0 / v29 * (float)(v30 - *v19);
      *v20++ = v31;
      v19 = v25;
      --v18;
    }
    while (v18);
  }
  v32 = v81 - (_BYTE *)v15;
  v33 = ((unint64_t)(v81 - (_BYTE *)v15) >> 2) - 1;
  *v16 = *v16 / *(float *)v15;
  *v17 = *v17 / *(float *)v15;
  if ((int)v33 > 1)
  {
    v34 = v33 - 1;
    v35 = (float *)(v15 + 1);
    v36 = (float *)(v14 + 1);
    v37 = v17 + 1;
    v38 = v16 + 1;
    do
    {
      v39 = *(v38 - 1);
      *v38 = *v38 / (float)(*v35 - (float)(*v36 * v39));
      ++v38;
      v40 = *v36++;
      v41 = v40;
      v42 = *v37 - (float)(v40 * *(v37 - 1));
      v43 = *v35++;
      *v37++ = v42 / (float)(v43 - (float)(v41 * v39));
      --v34;
    }
    while (v34);
  }
  v17[(int)v33] = (float)(v17[(int)v33]
                        - (float)(*(float *)&v14[(int)v33]
                                * *(float *)((char *)v17 + (((v32 << 30) - 0x200000000) >> 30))))
                / (float)(*(float *)&v15[(int)v33]
                        - (float)(*(float *)&v14[(int)v33]
                                * *(float *)((char *)v16 + (((v32 << 30) - 0x200000000) >> 30))));
  if ((int)v33 >= 1)
  {
    do
    {
      v44 = v17[v33];
      v45 = v33-- > 1;
      v17[v33] = v17[v33] - (float)(v16[v33] * v44);
    }
    while (v45);
  }
  if (v12 != 1)
  {
    v46 = (float *)(*a1 + 28);
    v47 = (float *)(v11 + 4);
    v48 = v17 + 1;
    do
    {
      v49 = (float)(*v47 - *(v47 - 1));
      v50 = v49 / -3.0 * (*v48 + *(v48 - 1) * 2.0) + 1.0 / v49 * (float)(*v46 - *(v46 - 5));
      *v16++ = v50;
      *(float *)&v49 = 1.0 / (v49 * 3.0) * (float)(*v48 - *(v48 - 1));
      *v15++ = LODWORD(v49);
      v46 += 5;
      ++v47;
      ++v48;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v51 = *((_WORD *)a1 + 4);
  v52 = v51 - 1;
  if (v51 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
    v58 = 0;
    v53 = 0;
    v54 = *(_QWORD *)a2;
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v52 + 1));
    *(_WORD *)(a2 + 56) = v52;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v52 + 1);
    LOWORD(v53) = 0;
    v54 = *(_QWORD *)a2;
    v55 = (float *)v86;
    v56 = (float *)v83;
    v57 = (float *)__p;
    v58 = v52;
    v59 = (float *)(*a1 + 28);
    v60 = (float *)(v11 + 4);
    v61 = v52;
    do
    {
      v62 = *(v60 - 1);
      v63 = *(v59 - 5);
      v64 = *v59;
      v59 += 5;
      v65 = v64;
      v66 = *v55++;
      v67 = v66;
      v68 = *v56++;
      v69 = v68;
      v70 = *v57++;
      v71 = (float)(*v60 - v62);
      v72 = (v67 + (float)(v62 - v62) * ((float)(v62 - v62) * 3.0 * v70 + v69 * 2.0)) * v71;
      *(float *)&v71 = (v67 + v71 * (v71 * 3.0 * v70 + v69 * 2.0)) * v71;
      *(float *)(v54 + 4 * (unsigned __int16)v53) = v63;
      v73 = v53 + 2;
      v74 = (unsigned __int16)(v53 + 1);
      LOWORD(v53) = v53 + 3;
      v75 = v72 / 3.0 + v63;
      *(float *)(v54 + 4 * v74) = v75;
      v76 = v65 - *(float *)&v71 / 3.0;
      *(float *)(v54 + 4 * v73) = v76;
      ++v60;
      --v61;
    }
    while (v61);
    v53 = (unsigned __int16)v53;
  }
  *(_DWORD *)(v54 + 4 * v53) = *(_DWORD *)(*a1 + 20 * v58 + 8);
  *(_BYTE *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void geom::interpolating_curve<float>::build_hermite_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned __int16 v17;
  float v18;
  float v19;
  void *__p;
  char *v21;
  uint64_t v22;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  v6 = v5;
  std::vector<float>::resize((uint64_t)&__p, v5 + 1);
  v7 = *(_QWORD *)a1;
  v8 = (char *)__p;
  *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = *(_QWORD *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    v11 = (float *)(v8 + 4);
    v12 = (float *)(v7 + 32);
    do
    {
      v13 = *(v12 - 2);
      *v11 = v13;
      v14 = v13 - *(v11 - 1);
      v15 = *(v12 - 4) * v14;
      v16 = v14 * *v12;
      *(float *)(v9 + 4 * (unsigned __int16)v10) = *(v12 - 6);
      v17 = v10 + 2;
      v18 = v15 / 3.0 + *(v12 - 6);
      *(float *)(v9 + 4 * (unsigned __int16)(v10 + 1)) = v18;
      LOWORD(v10) = v10 + 3;
      v19 = *(v12 - 1) - v16 / 3.0;
      *(float *)(v9 + 4 * v17) = v19;
      ++v11;
      v12 += 5;
      --v6;
    }
    while (v6);
    v10 = (unsigned __int16)v10;
  }
  else
  {
    v10 = 0;
  }
  *(_DWORD *)(v9 + 4 * v10) = *(_DWORD *)(v7 + 20 * *((_QWORD *)a1 + 1) - 12);
  *(_BYTE *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v8, (uint64_t)v21, (v21 - v8) >> 2);
    v8 = (char *)__p;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v8;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v21 - 1);
  v21 = v8;
  operator delete(v8);
}

float geom::interpolating_spline<float>::evaluate_total_length(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  float v3;

  v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56))
    v2 = *(_WORD *)(a1 + 56);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 58))
  {
    if (v1 == v2)
      v3 = *(float *)(a1 + 52);
    else
      v3 = *(float *)(a1 + 48)
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    v3 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * v2);
  }
  return geom::interpolating_spline<float>::evaluate_length_at(a1, v3);
}

uint64_t std::vector<geom::interpolating_spline<float>>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0x2E8BA2E8BA2E8BALL)
      abort();
    v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x1745D1745D1745DLL)
      v13 = 0x2E8BA2E8BA2E8BALL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[88 * v10];
    v18 = &v14[88 * v13];
    geom::interpolating_spline<float>::interpolating_spline((uint64_t)v16, a2);
    v17 = v16 + 88;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = geom::interpolating_spline<float>::interpolating_spline(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 88;
  }
  a1[1] = v9;
  return result;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void geom::interpolating_curve<double>::build(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  geom::interpolating_curve<double>::build_helper((uint64_t)a2, a1, 0);
}

void geom::interpolating_curve<double>::build_helper(uint64_t a1, _QWORD *a2, char a3)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  __int16 *v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int16 i;
  int v46;
  unsigned int v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int16 j;
  int v54;
  unsigned int v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int16 k;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  unsigned __int16 v74;
  unsigned __int16 v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  double v80;
  double *v81;
  _QWORD *v82;
  double *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  double v87;
  double v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int16 m;
  int v94;
  unsigned int v95;
  double v96;
  double v97;
  int v98;
  int v99;
  int v100;
  int v101;
  double **v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  double v108;
  double v109;
  unsigned __int16 v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115[2];
  char v116;
  _QWORD v117[6];
  char v118;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  v11 = v6;
  if (v8 != v10)
  {
    do
      v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 208) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    v12 = 0;
    v13 = -1;
  }
  else
  {
    v12 = 0;
    v13 = -1;
    v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 40 * v14) != *(_DWORD *)(*a2 + 40 * v12))
      {
        v13 = v14 - 1;
        *(_QWORD *)&v105 = *a2 + 40 * v12;
        *((_QWORD *)&v105 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        geom::interpolating_curve<double>::append_spline((_QWORD *)a1, &v105);
        v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(_QWORD *)&v105 = *a2 + 40 * v12;
    *((_QWORD *)&v105 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    geom::interpolating_curve<double>::append_spline((_QWORD *)a1, &v105);
  }
  v16 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v17 = 0;
    v18 = *v9;
    v19 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5) <= 1)
      v20 = 1;
    else
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5);
    v21 = (__int16 *)(v18 + 64);
    v22 = v20;
    do
    {
      v23 = *v21;
      v21 += 48;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    v24 = 0;
    v25 = 0;
    v26 = *(_QWORD *)(a1 + 72);
    do
    {
      v27 = *(unsigned __int16 *)(v26 + 96 * v24 + 64);
      if (*(_WORD *)(v26 + 96 * v24 + 64))
      {
        v28 = *(_QWORD *)a1;
        do
        {
          v29 = (v25 + 1);
          *(_WORD *)(v28 + 2 * (unsigned __int16)v25) = v24;
          LODWORD(v25) = v25 + 1;
          --v27;
        }
        while (v27);
      }
      else
      {
        v29 = v25;
      }
      ++v24;
      v25 = v29;
    }
    while (v24 != v20);
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(*a2 + 8);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2[1] - 32);
  if ((a3 & 1) != 0)
  {
    LOWORD(v115[0]) = 512;
    v115[1] = 0.001;
    v116 = 1;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v30 = *(_QWORD *)(a1 + 96);
    v103 = (_QWORD *)(a1 + 96);
    v104 = a1;
    *(_QWORD *)(a1 + 104) = v30;
    v31 = *(_QWORD *)(a1 + 120);
    v102 = (double **)(a1 + 120);
    *(_WORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 162) = 0;
    *(_QWORD *)(a1 + 128) = v31;
    v32 = *a2;
    v33 = a2[1] - *a2;
    if (v33)
      v34 = *(double *)(v32 + 8);
    else
      v34 = 0.0;
    v35 = 0xCCCCCCCCCCCCCCCDLL * (v33 >> 3);
    if (v35 >= 2)
    {
      v36 = 1;
      while (1)
      {
        v37 = *(_DWORD *)(v32 + 40 * v36);
        if (v37 == *(_DWORD *)(v32 + 40 * (v36 - 1)))
          break;
LABEL_101:
        v36 = (v36 + 1);
        v32 = *a2;
        v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
        if (v35 <= v36)
          goto LABEL_126;
      }
      v38 = *(double *)(v32 + 40 * v36 + 8);
      LOBYTE(v115[0]) = v37 != 0;
      v110 = 0;
      v39 = v104;
      v111 = 0;
      *((_QWORD *)&v105 + 1) = v105;
      *(_QWORD *)&v107 = *((_QWORD *)&v106 + 1);
      v40 = (v38 + v34 * 2.0) * 0.333333333;
      v41 = (v34 + v38 * 2.0) * 0.333333333;
      if (*(_BYTE *)(v104 + 208))
      {
        v42 = v34;
LABEL_76:
        v69 = v38;
LABEL_77:
        *(double *)v117 = v34;
        *(double *)&v117[1] = v38;
        *(double *)&v117[2] = v42;
        *(double *)&v117[3] = v40;
        *(double *)&v117[4] = v41;
        *(double *)&v117[5] = v69;
        v118 = 0;
        v70 = v110;
        v71 = *(_DWORD *)(a1 + 104);
        v72 = *(_QWORD *)(a1 + 96);
        v73 = *(_WORD *)(a1 + 160);
        if (v73)
          v74 = v73 + 1;
        else
          v74 = 0;
        v75 = v73 + v110;
        if (v73 + v110)
        {
          std::vector<double>::resize((uint64_t)v103, (unsigned __int16)(3 * v75 + 1));
          *(_WORD *)(a1 + 160) = v75;
          if (!*(_BYTE *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v75 + 1);
            if ((_DWORD)v70)
              goto LABEL_86;
            goto LABEL_100;
          }
LABEL_85:
          if ((_DWORD)v70)
            goto LABEL_86;
          goto LABEL_100;
        }
        *(_QWORD *)(a1 + 104) = v72;
        *(_WORD *)(a1 + 160) = 0;
        if (*(_BYTE *)(a1 + 162))
          goto LABEL_85;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
        if (!(_DWORD)v70)
        {
LABEL_100:
          v34 = v38;
          goto LABEL_101;
        }
LABEL_86:
        v76 = (unsigned __int16)((v71 - v72) >> 3);
        v77 = v74;
        v78 = v111;
        v79 = v110;
        v80 = (double)v110;
        v81 = (double *)*((_QWORD *)&v106 + 1);
        v82 = (_QWORD *)v105;
        v83 = *v102;
        v84 = (_QWORD *)*v103;
        v85 = 3;
        v86 = 1;
        while (1)
        {
          if (v76)
          {
            if (v78)
              goto LABEL_89;
          }
          else
          {
            if (v78)
            {
              if ((_DWORD)v79)
                v88 = v108 + (v109 - v108) / v80 * 0.0;
              else
                v88 = v109;
            }
            else
            {
              v88 = *v81;
            }
            *v83 = v88;
            *v84 = *v82;
            ++v77;
            v76 = 1;
            if (v78)
            {
LABEL_89:
              if (v79 == v86)
                v87 = v109;
              else
                v87 = v108 + (double)(unsigned __int16)v86 * ((v109 - v108) / v80);
              goto LABEL_99;
            }
          }
          v87 = v81[v86];
LABEL_99:
          v83[v77] = v87;
          v84[(unsigned __int16)v76] = v82[(unsigned __int16)(v85 - 2)];
          v84[(unsigned __int16)(v76 + 1)] = v82[(unsigned __int16)(v85 - 1)];
          v84[(unsigned __int16)(v76 + 2)] = v82[(unsigned __int16)v85];
          ++v77;
          v76 += 3;
          ++v86;
          v85 += 3;
          if (v86 - v70 == 1)
            goto LABEL_100;
        }
      }
      v43 = *(_QWORD *)(v104 + 72);
      v44 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v43) >> 5);
      if ((v44 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v34)
      {
        LOWORD(v44) = v44 - 1;
        if (*(double *)(v104 + 200) > v34)
        {
          for (i = 0; ; i = v47 + 1)
          {
            v46 = i;
            while (1)
            {
              v47 = (v46 + (unsigned __int16)v44) >> 1;
              if (*(double *)(v43 + 96 * v47 + 48) <= v34)
                break;
              LOWORD(v44) = v47 - 1;
            }
            if (*(double *)(v43 + 96 * v47 + 56) > v34)
              break;
          }
          LODWORD(v44) = (v46 + (unsigned __int16)v44) >> 1;
        }
        v64 = (unsigned __int16)v44;
        v65 = (unsigned __int16)v44;
        v48 = geom::interpolating_spline<double>::evaluate_length_at(v43 + 96 * (unsigned __int16)v44, v34);
        if (v65)
        {
          v49 = *(double *)(*(_QWORD *)(v39 + 48) + 8 * (v64 - 1));
LABEL_48:
          v42 = v48 + v49;
          v50 = v104;
          if (*(_BYTE *)(v104 + 208))
            goto LABEL_76;
          v51 = *(_QWORD *)(v104 + 72);
          v52 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v51) >> 5);
          if ((v52 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v40)
          {
            LOWORD(v52) = v52 - 1;
            if (*(double *)(v104 + 200) > v40)
            {
              for (j = 0; ; j = v55 + 1)
              {
                v54 = j;
                while (1)
                {
                  v55 = (v54 + (unsigned __int16)v52) >> 1;
                  if (*(double *)(v51 + 96 * v55 + 48) <= v40)
                    break;
                  LOWORD(v52) = v55 - 1;
                }
                if (*(double *)(v51 + 96 * v55 + 56) > v40)
                  break;
              }
              LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
            }
            v89 = (unsigned __int16)v52;
            v90 = (unsigned __int16)v52;
            v56 = geom::interpolating_spline<double>::evaluate_length_at(v51 + 96 * (unsigned __int16)v52, (v38 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              v57 = *(double *)(*(_QWORD *)(v50 + 48) + 8 * (v89 - 1));
LABEL_60:
              v40 = v56 + v57;
              v58 = v104;
              if (*(_BYTE *)(v104 + 208))
                goto LABEL_76;
              v59 = *(_QWORD *)(v104 + 72);
              v60 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v59) >> 5);
              if ((v60 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v41)
              {
                LOWORD(v60) = v60 - 1;
                if (*(double *)(v104 + 200) > v41)
                {
                  for (k = 0; ; k = v63 + 1)
                  {
                    v62 = k;
                    while (1)
                    {
                      v63 = (v62 + (unsigned __int16)v60) >> 1;
                      if (*(double *)(v59 + 96 * v63 + 48) <= v41)
                        break;
                      LOWORD(v60) = v63 - 1;
                    }
                    if (*(double *)(v59 + 96 * v63 + 56) > v41)
                      break;
                  }
                  LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
                }
                v98 = (unsigned __int16)v60;
                v99 = (unsigned __int16)v60;
                v66 = geom::interpolating_spline<double>::evaluate_length_at(v59 + 96 * (unsigned __int16)v60, (v34 + v38 * 2.0) * 0.333333333);
                if (v99)
                {
                  v67 = *(double *)(*(_QWORD *)(v58 + 48) + 8 * (v98 - 1));
LABEL_75:
                  v41 = v66 + v67;
                  v68 = v104;
                  if (*(_BYTE *)(v104 + 208))
                    goto LABEL_76;
                  v91 = *(_QWORD *)(v104 + 72);
                  v92 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v38)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v104 + 200) > v38)
                    {
                      for (m = 0; ; m = v95 + 1)
                      {
                        v94 = m;
                        while (1)
                        {
                          v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v38)
                            break;
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v38)
                          break;
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    v100 = (unsigned __int16)v92;
                    v101 = (unsigned __int16)v92;
                    v96 = geom::interpolating_spline<double>::evaluate_length_at(v91 + 96 * (unsigned __int16)v92, v38);
                    if (v101)
                    {
                      v97 = *(double *)(*(_QWORD *)(v68 + 48) + 8 * (v100 - 1));
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    v96 = geom::interpolating_spline<double>::evaluate_length_at(v91, v38);
                  }
                  v97 = 0.0;
LABEL_119:
                  v69 = v96 + v97;
                  goto LABEL_77;
                }
              }
              else
              {
                v66 = geom::interpolating_spline<double>::evaluate_length_at(v59, (v34 + v38 * 2.0) * 0.333333333);
              }
              v67 = 0.0;
              goto LABEL_75;
            }
          }
          else
          {
            v56 = geom::interpolating_spline<double>::evaluate_length_at(v51, (v38 + v34 * 2.0) * 0.333333333);
          }
          v57 = 0.0;
          goto LABEL_60;
        }
      }
      else
      {
        v48 = geom::interpolating_spline<double>::evaluate_length_at(v43, v34);
      }
      v49 = 0.0;
      goto LABEL_48;
    }
LABEL_126:
    *(_BYTE *)(a1 + 208) = 1;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v32 + 40 * v35 - 32);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v105);
  }
}

void geom::interpolating_curve<double>::build_arc_length_parameterized(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  geom::interpolating_curve<double>::build_helper((uint64_t)a2, a1, 1);
}

double geom::interpolating_curve<double>::evaluate_at(uint64_t a1, double a2)
{
  int v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  double v13;
  uint64_t v15;
  double v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 208))
  {
    v15 = 0;
    v16 = 0.0;
    v17 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v15, a2);
    v3 = (unsigned __int16)(3 * v15);
    v4 = *(_QWORD *)(a1 + 96);
    v5 = 1.0 - v16;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v16 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v15)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v16 * (v16 * v16));
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v6) >> 5);
  if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (i = 0; ; i = v10 + 1)
      {
        v9 = i;
        while (1)
        {
          v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(double *)(v6 + 96 * v10 + 48) <= a2)
            break;
          LOWORD(v7) = v10 - 1;
        }
        if (*(double *)(v6 + 96 * v10 + 56) > a2)
          break;
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  v11 = (_QWORD *)(v6 + 96 * (unsigned __int16)v7);
  v15 = 0;
  v16 = 0.0;
  v17 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v11, (uint64_t)&v15, a2);
  v12 = (unsigned __int16)(3 * v15);
  v13 = 1.0 - v16;
  return *(double *)(*v11 + 8 * (v12 + 1)) * (v16 * (v13 * v13 * 3.0))
       + *(double *)(*v11 + 8 * (unsigned __int16)(3 * v15)) * (v13 * (v13 * v13))
       + *(double *)(*v11 + 8 * (v12 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(*v11 + 8 * (v12 + 3)) * (v16 * (v16 * v16));
}

uint64_t geom::interpolating_curve<double>::find_spline_for_parameter(uint64_t a1, double a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 i;
  int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v2) >> 5);
  if ((v3 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (i = 0; ; i = v6 + 1)
      {
        v5 = i;
        while (1)
        {
          v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(double *)(v2 + 96 * v6 + 48) <= a2)
            break;
          LOWORD(v3) = v6 - 1;
        }
        if (*(double *)(v2 + 96 * v6 + 56) > a2)
          break;
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return v2 + 96 * (unsigned __int16)v3;
}

uint64_t geom::interpolating_curve<double>::evaluate_tangent_at(uint64_t a1, double a2)
{
  int v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  unsigned __int16 j;
  int v12;
  unsigned int v13;
  uint64_t v15;
  double v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 208))
  {
    v15 = 0;
    v16 = 0.0;
    v17 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v15, a2);
    v3 = (unsigned __int16)(3 * v15);
    v4 = *(_QWORD *)(a1 + 96);
    v5 = 1.0 - v16;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v16 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v15)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v16 * (v16 * v16));
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (i = 0; ; i = v10 + 1)
        {
          v9 = i;
          while (1)
          {
            v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v10 + 48) <= a2)
              break;
            LOWORD(v7) = v10 - 1;
          }
          if (*(double *)(v6 + 96 * v10 + 56) > a2)
            break;
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (j = 0; ; j = v13 + 1)
        {
          v12 = j;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v13 + 48) <= a2)
              break;
            LOWORD(v7) = v13 - 1;
          }
          if (*(double *)(v6 + 96 * v13 + 56) > a2)
            break;
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  v15 = 0;
  v16 = 0.0;
  v17 = 0;
  return geom::interpolating_spline<double>::find_span(v6 + 96 * (unsigned __int16)v7, (uint64_t)&v15, a2);
}

double geom::interpolating_curve<double>::evaluate_length_at(uint64_t a1, double result)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 i;
  int v7;
  unsigned int v8;
  double v9;
  double v10;
  int v11;
  int v12;

  if (!*(_BYTE *)(a1 + 208))
  {
    v4 = a1 + 72;
    v3 = *(_QWORD *)(a1 + 72);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (i = 0; ; i = v8 + 1)
        {
          v7 = i;
          while (1)
          {
            v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result)
              break;
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result)
            break;
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      v11 = (unsigned __int16)v5;
      v12 = (unsigned __int16)v5;
      v9 = geom::interpolating_spline<double>::evaluate_length_at(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        v10 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      v9 = geom::interpolating_spline<double>::evaluate_length_at(v3, result);
    }
    v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

uint64_t geom::interpolating_curve<double>::find_spline_index_for_parameter(uint64_t a1, double a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 i;
  int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v2) >> 5);
  if ((v3 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (i = 0; ; i = v6 + 1)
      {
        v5 = i;
        while (1)
        {
          v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(double *)(v2 + 96 * v6 + 48) <= a2)
            break;
          LOWORD(v3) = v6 - 1;
        }
        if (*(double *)(v2 + 96 * v6 + 56) > a2)
          break;
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return (unsigned __int16)v3;
}

double geom::interpolating_spline<double>::evaluate_length_at(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  unsigned int v8;
  double v9;
  _WORD v11[12];

  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  v4 = v11[0];
  v5 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + geom::interpolating_spline<double>::evaluate_span_length(a1, v7++);
      while ((_DWORD)v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 66))
  {
    v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == (_DWORD)v4)
      v9 = *(double *)(a1 + 56);
    else
      v9 = *(double *)(a1 + 48)
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    v9 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v4);
  }
  return v6 + geom::interpolating_spline<double>::evaluate_length_betweeen((_QWORD *)a1, v9, a2);
}

double geom::interpolating_curve<double>::evaluate_total_length(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 208))
  {
    v1 = *(unsigned __int16 *)(a1 + 160);
    if (*(_WORD *)(a1 + 160))
      v2 = *(_WORD *)(a1 + 160);
    else
      v2 = -1;
    if (*(_BYTE *)(a1 + 162))
    {
      if (v1 == v2)
        return *(double *)(a1 + 152);
      else
        return *(double *)(a1 + 144) + (double)v2 * ((*(double *)(a1 + 152) - *(double *)(a1 + 144)) / (double)v1);
    }
    else
    {
      return *(double *)(*(_QWORD *)(a1 + 120) + 8 * v2);
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v4)
      return *(double *)(*(_QWORD *)(a1 + 48) + 0x5555555555555558 * (v4 >> 5) - 8);
    else
      return 0.0;
  }
}

double geom::interpolating_curve<double>::min_knot(uint64_t a1)
{
  return *(double *)(a1 + 192);
}

double geom::interpolating_curve<double>::max_knot(uint64_t a1)
{
  return *(double *)(a1 + 200);
}

void geom::interpolating_curve<double>::span_knots(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 66))
    {
      v20 = v18 + 96 * v9;
      v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      v23 = v21 + (double)v10 * v22;
      v24 = v22 + v23;
    }
    else
    {
      v25 = (double *)(*(_QWORD *)(v18 + 96 * v9 + 24) + 8 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + geom::interpolating_spline<double>::evaluate_length_at(v19, v23);
    v17 = v11
        + geom::interpolating_spline<double>::evaluate_length_at(*(_QWORD *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 66))
    {
      v13 = v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t geom::interpolating_curve<double>::calculate_monomial_basis_for_span(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v4 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v5 = *(_QWORD *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  *(_QWORD *)a3 = *(_QWORD *)(v5 + 8 * v4);
  *(double *)(a3 + 8) = (*(double *)(v5 + 8 * (v3 + 1)) - *(double *)(v5 + 8 * v4)) * 3.0;
  v6 = (*(double *)(v5 + 8 * v4)
      + *(double *)(v5 + 8 * (v3 + 1)) * -2.0
      + *(double *)(v5 + 8 * (v4 + 2)))
     * 3.0;
  *(double *)(a3 + 16) = v6;
  v7 = *(double *)(v5 + 8 * (v4 + 3))
     + (*(double *)(v5 + 8 * (v3 + 1)) - *(double *)(v5 + 8 * (v4 + 2))) * 3.0;
  v8 = *(double *)(v5 + 8 * v4);
  *(double *)(a3 + 24) = v7 - v8;
  v9 = fabs(v6);
  if (vabdd_f64(v7, v8) > 0.000001 || v9 > 0.000001)
    return 4;
  else
    return 2;
}

uint64_t geom::interpolating_curve<double>::calculate_bezier_basis_for_span(_QWORD *a1, unsigned int a2, double *a3)
{
  int v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t result;
  double v13;
  double v14;
  double v15;

  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v4 = *(_QWORD *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v5 = *(double *)(v4
                 + 8 * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v6 = *(double *)(v4 + 8 * (v3 + 1));
  v7 = (v6 - v5) * 3.0;
  v8 = *(double *)(v4 + 8 * (v3 + 2));
  v9 = (v5 + v6 * -2.0 + v8) * 3.0;
  v10 = *(double *)(v4 + 8 * (v3 + 3)) + (v6 - v8) * 3.0;
  if (fabs(v9) > 0.000001 || vabdd_f64(v10, v5) > 0.000001)
  {
    v15 = v10 - v5;
    v11 = v5 + v7 * 0.333333333;
    v13 = v5 + v7 * 0.666666667 + v9 * 0.333333333;
    v14 = v5 + v7 + v9 + v15;
    result = 4;
  }
  else
  {
    v11 = v5 + v7;
    result = 2;
    v13 = 0.0;
    v14 = 0.0;
  }
  *a3 = v5;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v14;
  return result;
}

uint64_t std::vector<geom::interpolating_spline<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      abort();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 96 * v6;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

uint64_t geom::interpolating_curve<double>::append_spline(_QWORD *a1, _WORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  char *v20;
  uint64_t v21;
  _BYTE v23[96];
  _OWORD v24[4];
  unsigned __int16 v25;
  _QWORD v26[3];

  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(**(_DWORD **)a2)
  {
    case 0:
      geom::interpolating_curve<double>::build_linear_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      geom::interpolating_curve<double>::build_hermite_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      geom::interpolating_curve<double>::build_catmull_rom_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      geom::interpolating_curve<double>::build_natural_spline(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + geom::interpolating_spline<double>::evaluate_span_length((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = geom::interpolating_spline<double>::evaluate_total_length((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (double *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      v13 = (double *)a1[6];
      v11 = (double *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (double *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_QWORD *)v11-- - 1);
      *((_QWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  std::vector<geom::interpolating_spline<double>>::push_back[abi:nn180100](a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void geom::interpolating_curve<double>::build_linear_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  unsigned __int16 v16;
  double v17;
  double v18;
  void *__p;
  char *v20;
  uint64_t v21;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v20 = 0;
  v21 = 0;
  v6 = v5;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  v7 = *(_QWORD *)a1;
  v8 = (char *)__p;
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v9 = *(_QWORD *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    v11 = (double *)(v8 + 8);
    v12 = (double *)(v7 + 56);
    do
    {
      v13 = *(v12 - 1);
      *v11 = v13;
      v14 = *(v12 - 5);
      v15 = (v13 - *(v11 - 1)) * (*v12 - v14);
      *(double *)(v9 + 8 * (unsigned __int16)v10) = v14;
      v16 = v10 + 2;
      v17 = v15 / 3.0;
      *(double *)(v9 + 8 * (unsigned __int16)(v10 + 1)) = *(v12 - 5) + v17;
      LOWORD(v10) = v10 + 3;
      v18 = *v12;
      v12 += 5;
      *(double *)(v9 + 8 * v16) = v18 - v17;
      ++v11;
      --v6;
    }
    while (v6);
    v10 = (unsigned __int16)v10;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v9 + 8 * v10) = *(_QWORD *)(v7 + 40 * *((_QWORD *)a1 + 1) - 24);
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v20, (v20 - v8) >> 3);
    v8 = (char *)__p;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v8;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v20 - 1);
  v20 = v8;
  operator delete(v8);
}

uint64_t geom::interpolating_spline<double>::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1, (__n128 *)a2);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 24, (__n128 *)(a2 + 24));
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v4;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 72, (__n128 *)(a2 + 72));
  return a1;
}

void geom::interpolating_curve<double>::build_catmull_rom_spline(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  char *v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double v22;
  double v23;
  int v24;
  uint64_t v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  unsigned __int16 v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void *__p;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;

  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v4 = a1[1];
  v5 = v4 - 1;
  std::vector<double>::resize((uint64_t)&v68, (unsigned __int16)(v4 + 2));
  std::vector<double>::resize((uint64_t)&v65, (unsigned __int16)(v4 + 2));
  v6 = *a1;
  v7 = (char *)v68;
  *(double *)v68 = -(*(double *)(*a1 + 56) - *(double *)(*a1 + 16) * 2.0);
  v8 = (double *)v65;
  *(_QWORD *)v65 = 0;
  v8[1] = sqrt(vabdd_f64(*(double *)(v6 + 56), *(double *)(v6 + 16)));
  if ((_WORD)v4 == 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = (unsigned __int16)(v4 - 1);
    v10 = v8 + 2;
    v11 = (double *)(v6 + 56);
    v12 = v7 + 8;
    v13 = v9;
    do
    {
      *v12++ = *((_QWORD *)v11 - 5);
      *v10 = *(v10 - 1) + sqrt(vabdd_f64(*v11, *(v11 - 5)));
      ++v10;
      v11 += 5;
      --v13;
    }
    while (v13);
  }
  v14 = *(double *)(v6 + 40 * v9 + 16);
  v15 = (unsigned __int16)(v4 + 2);
  v16 = v15 * 8 - 16;
  *(double *)&v7[v16] = v14;
  *(double *)&v7[--v15 * 8] = -(*(double *)&v7[8 * (unsigned __int16)(v4 + 2) - 24] - v14 * 2.0);
  v8[v15] = *(double *)((char *)v8 + v16)
          + sqrt(vabdd_f64(*(double *)(v6 + 40 * (unsigned __int16)(v4 - 2) + 56), *(double *)(v6 + 40 * (unsigned __int16)(v4 - 2) + 16)));
  if ((_WORD)v4 == 1)
  {
    v18 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
    {
      v18 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v9 + 1);
    v17 = 0;
    LOWORD(v18) = 0;
    v19 = *(_QWORD *)a2;
    v20 = (double *)v65;
    v21 = (double *)v68;
    do
    {
      v22 = v20[v17];
      v23 = v21[v17];
      v24 = v17 + 2;
      v25 = v17 + 1;
      v26 = v20[(v17 + 1)];
      v27 = v20[(v17 + 2)];
      v28 = v17 + 3;
      v29 = v27 - v26;
      v30 = v20[v28];
      v31 = 1.0 / (v26 - v22);
      v32 = 1.0 / (v27 - v22);
      v33 = 1.0 / (v27 - v26);
      v34 = v30 - v26;
      v35 = 1.0 / (v30 - v26);
      v36 = v30 - v27;
      v37 = v21[v25];
      v38 = v31 * ((v26 - v26) * v23 - (v22 - v26) * v37);
      v39 = v21[v24];
      v40 = v33 * ((v27 - v26) * v37 - (v26 - v26) * v39);
      v41 = v21[v28];
      v42 = 1.0 / v36 * (v34 * v39 - (v27 - v26) * v41);
      v43 = v31 * (v37 - v23);
      v44 = v33 * (v39 - v37);
      v45 = 1.0 / v36 * (v41 - v39);
      v46 = (v27 - v26)
          * (v33
           * (v35 * (v34 * v40 - (v26 - v26) * v42)
            - v32 * ((v27 - v26) * v38 - (v22 - v26) * v40)
            + (v27 - v26) * (v32 * (v40 - v38 + (v27 - v26) * v43 - (v22 - v26) * v44))
            - (v26 - v26) * (v35 * (v42 - v40 + v34 * v44 - (v26 - v26) * v45))));
      v47 = v22 - v27;
      v48 = v26 - v27;
      v49 = v27 - v27;
      v50 = v31 * (v48 * v23 - v47 * v37);
      v51 = v33 * (v49 * v37 - v48 * v39);
      v52 = 1.0 / v36 * (v36 * v39 - v49 * v41);
      *(double *)(v19 + 8 * (unsigned __int16)v18) = v37;
      v53 = v18 + 2;
      *(double *)(v19 + 8 * (unsigned __int16)(v18 + 1)) = v21[v25] + v46 / 3.0;
      LOWORD(v18) = v18 + 3;
      *(double *)(v19 + 8 * v53) = v21[v24]
                                   - v29
                                   * (v33
                                    * (v35 * (v36 * v51 - v48 * v52)
                                     - v32 * (v49 * v50 - v47 * v51)
                                     + v49 * (v32 * (v51 - v50 + v49 * v43 - v47 * v44))
                                     - v48 * (v35 * (v52 - v51 + v36 * v44 - v48 * v45))))
                                   / 3.0;
      v17 = v25;
    }
    while (v9 != v25);
    v18 = (unsigned __int16)v18;
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = *(_QWORD *)(*a1 + 40 * v9 + 16);
  v54 = a1[1];
  v63 = 0;
  v64 = 0;
  __p = 0;
  if (v54)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v54);
    v55 = (char *)v63;
    bzero(v63, 8 * v54);
    v56 = &v55[8 * v54];
    v63 = v56;
    v57 = a1[1];
    v58 = (char *)__p;
    if (v57)
    {
      v59 = 0;
      v60 = (uint64_t *)(*a1 + 8);
      do
      {
        v61 = *v60;
        v60 += 5;
        *(_QWORD *)&v58[8 * v59++] = v61;
      }
      while (v57 != v59);
    }
  }
  else
  {
    v58 = 0;
    v56 = 0;
  }
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v58, (uint64_t)v56, (v56 - v58) >> 3);
    v58 = (char *)__p;
    v56 = (char *)v63;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v58;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v56 - 1);
  v63 = v58;
  operator delete(v58);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
}

void geom::interpolating_curve<double>::build_natural_spline(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  double *v15;
  double *v16;
  double *v17;
  unint64_t v18;
  double *v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double *v46;
  double *v47;
  double *v48;
  double v49;
  __int16 v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  double *v55;
  double *v56;
  unsigned int v57;
  double *v58;
  double *v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  unsigned __int16 v71;
  uint64_t v72;
  char *v73;
  void *v74;
  uint64_t v75;
  void *__p;
  _BYTE *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;

  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  v4 = a1[1];
  v74 = 0;
  v75 = 0;
  v73 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v73, v4);
    v5 = v74;
    bzero(v74, 8 * v4);
    v4 = (unint64_t)v5 + 8 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v73;
      v9 = (uint64_t *)(*a1 + 8);
      do
      {
        v10 = *v9;
        v9 += 5;
        *(_QWORD *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v73;
  v12 = (unsigned __int16)v6;
  std::vector<double>::resize((uint64_t)&v85, (unsigned __int16)v6);
  std::vector<double>::resize((uint64_t)&v82, v12);
  std::vector<double>::resize((uint64_t)&v79, v12);
  std::vector<double>::resize((uint64_t)&__p, v12);
  v13 = v12 - 1;
  v14 = v85;
  v85[v12 - 1] = 0;
  *v14 = 0;
  v15 = (double *)__p;
  *((_QWORD *)__p + v12 - 1) = 0x3FF0000000000000;
  *v15 = 1.0;
  v16 = (double *)v82;
  *((_QWORD *)v82 + v12 - 1) = 0;
  *v16 = 0.0;
  v17 = (double *)v79;
  *((_QWORD *)v79 + v12 - 1) = 0;
  *v17 = 0.0;
  if (v12 - 1 >= 2)
  {
    v18 = v12 - 2;
    v19 = (double *)(*a1 + 56);
    v20 = v17 + 1;
    v21 = v16 + 1;
    v22 = v15 + 1;
    v23 = (double *)(v11 + 8);
    v24 = (double *)(v14 + 1);
    v25 = v19;
    do
    {
      v27 = *(v23 - 1);
      v26 = *v23;
      v28 = v23[1];
      ++v23;
      v29 = v26 - v27;
      v30 = v28 - v26;
      *v24++ = v29;
      *v22++ = v29 + v30 + v29 + v30;
      *v21++ = v30;
      v31 = v25[5];
      v25 += 5;
      *v20++ = -3.0 / v29 * (*v19 - *(v19 - 5)) + 3.0 / v30 * (v31 - *v19);
      v19 = v25;
      --v18;
    }
    while (v18);
  }
  v32 = v77 - (_BYTE *)v15;
  v33 = ((unint64_t)(v77 - (_BYTE *)v15) >> 3) - 1;
  *v16 = *v16 / *v15;
  *v17 = *v17 / *v15;
  if ((int)v33 > 1)
  {
    v34 = v33 - 1;
    v35 = v15 + 1;
    v36 = (double *)(v14 + 1);
    v37 = v17 + 1;
    v38 = v16 + 1;
    do
    {
      v39 = *(v38 - 1);
      *v38 = *v38 / (*v35 - *v36 * v39);
      ++v38;
      v40 = *v36++;
      v41 = v40;
      v42 = *v37 - v40 * *(v37 - 1);
      v43 = *v35++;
      *v37++ = v42 / (v43 - v41 * v39);
      --v34;
    }
    while (v34);
  }
  v17[(int)v33] = (v17[(int)v33]
                 - *(double *)&v14[(int)v33] * *(double *)((char *)v17 + (((v32 << 29) - 0x200000000) >> 29)))
                / (v15[(int)v33]
                 - *(double *)&v14[(int)v33] * *(double *)((char *)v16 + (((v32 << 29) - 0x200000000) >> 29)));
  if ((int)v33 >= 1)
  {
    do
    {
      v44 = v17[v33];
      v45 = v33-- > 1;
      v17[v33] = v17[v33] - v16[v33] * v44;
    }
    while (v45);
  }
  if (v12 != 1)
  {
    v46 = (double *)(*a1 + 56);
    v47 = (double *)(v11 + 8);
    v48 = v17 + 1;
    do
    {
      v49 = *v47 - *(v47 - 1);
      *v16++ = v49 / -3.0 * (*v48 + *(v48 - 1) * 2.0) + 1.0 / v49 * (*v46 - *(v46 - 5));
      *v15++ = 1.0 / (v49 * 3.0) * (*v48 - *(v48 - 1));
      v46 += 5;
      ++v47;
      ++v48;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v50 = *((_WORD *)a1 + 4);
  v51 = v50 - 1;
  if (v50 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
    v57 = 0;
    v52 = 0;
    v53 = *(_QWORD *)a2;
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v51 + 1));
    *(_WORD *)(a2 + 64) = v51;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v51 + 1);
    LOWORD(v52) = 0;
    v53 = *(_QWORD *)a2;
    v54 = (double *)v82;
    v55 = (double *)v79;
    v56 = (double *)__p;
    v57 = v51;
    v58 = (double *)(*a1 + 56);
    v59 = (double *)(v11 + 8);
    v60 = v51;
    do
    {
      v61 = *(v59 - 1);
      v62 = *(v58 - 5);
      v63 = *v58;
      v58 += 5;
      v64 = v63;
      v65 = *v59 - v61;
      v66 = *v54++;
      v67 = v66;
      v68 = *v55++;
      v69 = v68;
      v70 = *v56++;
      *(double *)(v53 + 8 * (unsigned __int16)v52) = v62;
      v71 = v52 + 2;
      v72 = (unsigned __int16)(v52 + 1);
      LOWORD(v52) = v52 + 3;
      *(double *)(v53 + 8 * v72) = v62 + v65 * (v67 + (v61 - v61) * ((v61 - v61) * 3.0 * v70 + v69 * 2.0)) / 3.0;
      *(double *)(v53 + 8 * v71) = v64 - v65 * (v67 + v65 * (v65 * 3.0 * v70 + v69 * 2.0)) / 3.0;
      ++v59;
      --v60;
    }
    while (v60);
    v52 = (unsigned __int16)v52;
  }
  *(_QWORD *)(v53 + 8 * v52) = *(_QWORD *)(*a1 + 40 * v57 + 16);
  *(_BYTE *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 3);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v11;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    v77 = __p;
    operator delete(__p);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
}

void geom::interpolating_curve<double>::build_hermite_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned __int16 v17;
  void *__p;
  char *v19;
  uint64_t v20;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  v6 = v5;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  v7 = *(_QWORD *)a1;
  v8 = (char *)__p;
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v9 = *(_QWORD *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    v11 = (double *)(v8 + 8);
    v12 = (double *)(v7 + 64);
    do
    {
      v13 = *(v12 - 2);
      *v11 = v13;
      v14 = v13 - *(v11 - 1);
      v15 = *(v12 - 4) * v14;
      v16 = v14 * *v12;
      *(double *)(v9 + 8 * (unsigned __int16)v10) = *(v12 - 6);
      v17 = v10 + 2;
      *(double *)(v9 + 8 * (unsigned __int16)(v10 + 1)) = v15 / 3.0 + *(v12 - 6);
      LOWORD(v10) = v10 + 3;
      *(double *)(v9 + 8 * v17) = *(v12 - 1) - v16 / 3.0;
      ++v11;
      v12 += 5;
      --v6;
    }
    while (v6);
    v10 = (unsigned __int16)v10;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v9 + 8 * v10) = *(_QWORD *)(v7 + 40 * *((_QWORD *)a1 + 1) - 24);
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v19, (v19 - v8) >> 3);
    v8 = (char *)__p;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v8;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v19 - 1);
  v19 = v8;
  operator delete(v8);
}

double geom::interpolating_spline<double>::evaluate_total_length(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  double v3;

  v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64))
    v2 = *(_WORD *)(a1 + 64);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 66))
  {
    if (v1 == v2)
      v3 = *(double *)(a1 + 56);
    else
      v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
  }
  else
  {
    v3 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v2);
  }
  return geom::interpolating_spline<double>::evaluate_length_at(a1, v3);
}

uint64_t std::vector<geom::interpolating_spline<double>>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x155555555555555)
      v13 = 0x2AAAAAAAAAAAAAALL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[96 * v10];
    v18 = &v14[96 * v13];
    geom::interpolating_spline<double>::interpolating_spline((uint64_t)v16, a2);
    v17 = v16 + 96;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = geom::interpolating_spline<double>::interpolating_spline(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 96;
  }
  a1[1] = v9;
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  __int16 i;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  uint64_t v23;
  __int16 v24;
  int8x16_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  unint64_t v41;
  int v42;
  float v43;
  uint64_t v44;
  double v45;
  float v46;
  double v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 j;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 k;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 m;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  float v87;
  float *v88;
  _DWORD *v89;
  float *v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  float v94;
  float v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int16 n;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  float v104;
  float **v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  float v110;
  float v111;
  unsigned __int16 v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117[2];
  char v118;
  _DWORD v119[6];
  char v120;

  v6 = a2[1] - *a2;
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    v11 = v6 >> 5;
  }
  else
  {
    do
      v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    v11 = (uint64_t)(a2[1] - *a2) >> 5;
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 192) = 0;
  v12 = (unsigned __int16)(v6 >> 5);
  if (v12 < 2)
  {
    v13 = 0;
    v14 = -1;
  }
  else
  {
    v13 = 0;
    v14 = -1;
    for (i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + 32 * i) != *(_DWORD *)(*a2 + 32 * v13))
      {
        v14 = i - 1;
        *(_QWORD *)&v107 = *a2 + 32 * v13;
        *((_QWORD *)&v107 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv2_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float32x2_t **)&v107);
        v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(_QWORD *)&v107 = *a2 + 32 * v13;
    *((_QWORD *)&v107 + 1) = (unsigned __int16)((unint64_t)v6 >> 5) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv2_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float32x2_t **)&v107);
  }
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v18 = 0;
    v19 = *v9;
    v20 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3)) <= 1)
      v21 = 1;
    else
      v21 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3);
    v22 = (__int16 *)(v19 + 56);
    v23 = v21;
    do
    {
      v24 = *v22;
      v22 += 44;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)(a1 + 72);
    do
    {
      v34 = *(unsigned __int16 *)(v33 + 88 * v31 + 56);
      if (*(_WORD *)(v33 + 88 * v31 + 56))
      {
        v35 = *(_QWORD *)a1;
        do
        {
          v36 = (v32 + 1);
          *(_WORD *)(v35 + 2 * (unsigned __int16)v32) = v31;
          LODWORD(v32) = v32 + 1;
          --v34;
        }
        while (v34);
      }
      else
      {
        v36 = v32;
      }
      ++v31;
      v32 = v36;
    }
    while (v31 != v21);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 28);
  if ((a3 & 1) != 0)
  {
    LOWORD(v117[0]) = 512;
    v117[1] = 0.001;
    v118 = 1;
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
    v37 = *(_QWORD *)(a1 + 120);
    v105 = (float **)(a1 + 120);
    v106 = a1;
    *(_WORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 154) = 0;
    *(_QWORD *)(a1 + 128) = v37;
    v38 = *a2;
    v39 = a2[1] - *a2;
    if (v39)
      v40 = *(float *)(v38 + 4);
    else
      v40 = 0.0;
    if (v39 >= 0x21)
    {
      v41 = 1;
      while (1)
      {
        v42 = *(_DWORD *)(v38 + 32 * v41);
        if (v42 == *(_DWORD *)(v38 + 32 * (v41 - 1)))
          break;
LABEL_107:
        v41 = (v41 + 1);
        v38 = *a2;
        v96 = (uint64_t)(a2[1] - *a2) >> 5;
        if (v96 <= v41)
          goto LABEL_128;
      }
      v43 = *(float *)(v38 + 32 * v41 + 4);
      LOBYTE(v117[0]) = v42 != 0;
      v112 = 0;
      v44 = v106;
      v113 = 0;
      *((_QWORD *)&v107 + 1) = v107;
      *(_QWORD *)&v109 = *((_QWORD *)&v108 + 1);
      v45 = v43;
      *(double *)v25.i64 = (v43 + v40 * 2.0) * 0.333333333;
      v46 = *(double *)v25.i64;
      v47 = (v40 + v43 * 2.0) * 0.333333333;
      v48 = v47;
      if (*(_BYTE *)(v106 + 192))
      {
        v49 = v40;
      }
      else
      {
        v50 = *(_QWORD *)(v106 + 72);
        v51 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v50) >> 3);
        if ((v51 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v40)
        {
          LOWORD(v51) = v51 - 1;
          if (*(float *)(v106 + 188) > v40)
          {
            for (j = 0; ; j = v54 + 1)
            {
              v53 = j;
              while (1)
              {
                v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(float *)(v50 + 88 * v54 + 48) <= v40)
                  break;
                LOWORD(v51) = v54 - 1;
              }
              if (*(float *)(v50 + 88 * v54 + 52) > v40)
                break;
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
        }
        else
        {
          LOWORD(v51) = 0;
        }
        v55 = (unsigned __int16)v51;
        v56 = (unsigned __int16)v51;
        v57 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v50 + 88 * (unsigned __int16)v51, v40);
        if (v56)
          v45 = *(float *)(*(_QWORD *)(v44 + 48) + 4 * (v55 - 1));
        else
          v45 = 0.0;
        v47 = v45 + v57;
        v49 = v47;
        v58 = v106;
        if (!*(_BYTE *)(v106 + 192))
        {
          v59 = *(_QWORD *)(v106 + 72);
          v60 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v59) >> 3);
          if ((v60 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v46)
          {
            LOWORD(v60) = v60 - 1;
            if (*(float *)(v106 + 188) > v46)
            {
              for (k = 0; ; k = v63 + 1)
              {
                v62 = k;
                while (1)
                {
                  v63 = (v62 + (unsigned __int16)v60) >> 1;
                  if (*(float *)(v59 + 88 * v63 + 48) <= v46)
                    break;
                  LOWORD(v60) = v63 - 1;
                }
                if (*(float *)(v59 + 88 * v63 + 52) > v46)
                  break;
              }
              LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
            }
          }
          else
          {
            LOWORD(v60) = 0;
          }
          v64 = (unsigned __int16)v60;
          v65 = (unsigned __int16)v60;
          v66 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, v46);
          v45 = v65 ? *(float *)(*(_QWORD *)(v58 + 48) + 4 * (v64 - 1)) : 0.0;
          v47 = v45 + v66;
          v46 = v47;
          v67 = v106;
          if (!*(_BYTE *)(v106 + 192))
          {
            v68 = *(_QWORD *)(v106 + 72);
            v69 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v68) >> 3);
            if ((v69 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v48)
            {
              LOWORD(v69) = v69 - 1;
              if (*(float *)(v106 + 188) > v48)
              {
                for (m = 0; ; m = v72 + 1)
                {
                  v71 = m;
                  while (1)
                  {
                    v72 = (v71 + (unsigned __int16)v69) >> 1;
                    if (*(float *)(v68 + 88 * v72 + 48) <= v48)
                      break;
                    LOWORD(v69) = v72 - 1;
                  }
                  if (*(float *)(v68 + 88 * v72 + 52) > v48)
                    break;
                }
                LODWORD(v69) = (v71 + (unsigned __int16)v69) >> 1;
              }
            }
            else
            {
              LOWORD(v69) = 0;
            }
            v73 = (unsigned __int16)v69;
            v74 = (unsigned __int16)v69;
            v75 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v68 + 88 * (unsigned __int16)v69, v48);
            v45 = v74 ? *(float *)(*(_QWORD *)(v67 + 48) + 4 * (v73 - 1)) : 0.0;
            v47 = v45 + v75;
            v48 = v47;
            v76 = v106;
            if (!*(_BYTE *)(v106 + 192))
            {
              v97 = *(_QWORD *)(v106 + 72);
              v98 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v43)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v106 + 188) > v43)
                {
                  for (n = 0; ; n = v101 + 1)
                  {
                    v100 = n;
                    while (1)
                    {
                      v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v43)
                        break;
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v43)
                      break;
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              v102 = (unsigned __int16)v98;
              v103 = (unsigned __int16)v98;
              v104 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v97 + 88 * (unsigned __int16)v98, v43);
              if (v103)
                v45 = *(float *)(*(_QWORD *)(v76 + 48) + 4 * (v102 - 1));
              else
                v45 = 0.0;
              v47 = v45 + v104;
              *(float *)&v47 = v47;
              goto LABEL_83;
            }
          }
        }
      }
      *(float *)&v47 = v43;
LABEL_83:
      *(float *)v119 = v40;
      *(float *)&v119[1] = v43;
      *(float *)&v119[2] = v49;
      *(float *)&v119[3] = v46;
      *(float *)&v119[4] = v48;
      v119[5] = LODWORD(v47);
      v120 = 0;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v106, (uint64_t)v119, v117, (uint64_t)&v107, v47, v45, v25, v26, v27, v28, v29, v30);
      v77 = v112;
      v78 = *(_DWORD *)(a1 + 104);
      v79 = *(_QWORD *)(a1 + 96);
      v80 = *(_WORD *)(a1 + 152);
      if (v80)
        v81 = v80 + 1;
      else
        v81 = 0;
      v82 = v80 + v112;
      if (v80 + v112)
      {
        std::vector<float>::resize(a1 + 96, (unsigned __int16)(3 * v82 + 1));
        *(_WORD *)(a1 + 152) = v82;
        if (!*(_BYTE *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v82 + 1);
          if ((_DWORD)v77)
            goto LABEL_92;
          goto LABEL_106;
        }
LABEL_91:
        if ((_DWORD)v77)
          goto LABEL_92;
        goto LABEL_106;
      }
      *(_QWORD *)(a1 + 104) = v79;
      *(_WORD *)(a1 + 152) = 0;
      if (*(_BYTE *)(a1 + 154))
        goto LABEL_91;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
      if (!(_DWORD)v77)
      {
LABEL_106:
        v40 = v43;
        goto LABEL_107;
      }
LABEL_92:
      v83 = (unsigned __int16)((v78 - v79) >> 2);
      v84 = v81;
      v85 = v113;
      v86 = v112;
      v87 = (float)v112;
      v88 = (float *)*((_QWORD *)&v108 + 1);
      v89 = (_DWORD *)v107;
      v90 = *v105;
      v91 = *(_DWORD **)(a1 + 96);
      v92 = 3;
      v93 = 1;
      while (1)
      {
        if (v83)
        {
          if (v85)
            goto LABEL_95;
        }
        else
        {
          if (v85)
          {
            if ((_DWORD)v86)
              v95 = v110 + (float)((float)((float)(v111 - v110) / v87) * 0.0);
            else
              v95 = v111;
          }
          else
          {
            v95 = *v88;
          }
          *v90 = v95;
          *v91 = *v89;
          ++v84;
          v83 = 1;
          if (v85)
          {
LABEL_95:
            if (v86 == v93)
            {
              v94 = v111;
            }
            else
            {
              *(float *)&v26 = (float)(v111 - v110) / v87;
              v94 = v110 + (float)((float)(unsigned __int16)v93 * *(float *)&v26);
            }
            goto LABEL_105;
          }
        }
        v94 = v88[v93];
LABEL_105:
        v90[v84] = v94;
        v91[(unsigned __int16)v83] = v89[(unsigned __int16)(v92 - 2)];
        v91[(unsigned __int16)(v83 + 1)] = v89[(unsigned __int16)(v92 - 1)];
        v91[(unsigned __int16)(v83 + 2)] = v89[(unsigned __int16)v92];
        ++v84;
        v83 += 3;
        ++v93;
        v92 += 3;
        if (v93 - v77 == 1)
          goto LABEL_106;
      }
    }
    v96 = v39 >> 5;
LABEL_128:
    *(_BYTE *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + 32 * v96 - 28);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v107);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 1);
}

float32x2_t _ZNK4geom19interpolating_curveIDv2_fE11evaluate_atEf(uint64_t a1, float a2)
{
  unint64_t span;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float32x2_t v17;
  float v18;

  if (*(_BYTE *)(a1 + 192))
  {
    span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    v4 = (unsigned __int16)(3 * span);
    v5 = *(_QWORD *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
  if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (i = 0; ; i = v10 + 1)
      {
        v9 = i;
        while (1)
        {
          v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(float *)(v6 + 88 * v10 + 48) <= a2)
            break;
          LOWORD(v7) = v10 - 1;
        }
        if (*(float *)(v6 + 88 * v10 + 52) > a2)
          break;
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  v11 = (_QWORD *)(v6 + 88 * (unsigned __int16)v7);
  v12 = geom::interpolating_spline<float>::find_span((uint64_t)v11, a2);
  v13 = *((float *)&v12 + 1);
  v14 = (unsigned __int16)(3 * v12);
  v15 = 1.0 - *((float *)&v12 + 1);
  v16 = (float)(v15 * v15) * 3.0 * *((float *)&v12 + 1);
  v17 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(*v11 + 8 * (v14 + 1)), v16), *(float32x2_t *)(*v11 + 8 * (unsigned __int16)(3 * v12)), v15 * (float)(v15 * v15));
  v18 = (float)(1.0 - *((float *)&v12 + 1)) * 3.0 * (float)(v13 * v13);
  return vmla_n_f32(vmla_n_f32(v17, *(float32x2_t *)(*v11 + 8 * (v14 + 2)), v18), *(float32x2_t *)(*v11 + 8 * (v14 + 3)), (float)(v13 * v13) * v13);
}

unint64_t _ZNK4geom19interpolating_curveIDv2_fE19evaluate_tangent_atEf(uint64_t a1, float a2)
{
  unint64_t span;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  unsigned __int16 j;
  int v12;
  unsigned int v13;

  if (*(_BYTE *)(a1 + 192))
  {
    span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    v4 = (unsigned __int16)(3 * span);
    v5 = *(_QWORD *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (i = 0; ; i = v10 + 1)
        {
          v9 = i;
          while (1)
          {
            v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2)
              break;
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (j = 0; ; j = v13 + 1)
        {
          v12 = j;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2)
              break;
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float _ZNK4geom19interpolating_curveIDv2_fE18evaluate_length_atEf(uint64_t a1, float result)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 i;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  double v10;
  double v11;

  if (!*(_BYTE *)(a1 + 192))
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (i = 0; ; i = v7 + 1)
        {
          v6 = i;
          while (1)
          {
            v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result)
              break;
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result)
            break;
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    v8 = (unsigned __int16)v4;
    v9 = (unsigned __int16)v4;
    v10 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v3 + 88 * (unsigned __int16)v4, result);
    if (v9)
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v8 - 1));
    else
      v11 = 0.0;
    return v11 + v10;
  }
  return result;
}

float _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(uint64_t a1, float a2)
{
  unsigned __int16 span;
  uint64_t v5;
  float v6;
  int v7;
  unsigned int v8;
  float v9;

  span = geom::interpolating_spline<float>::find_span(a1, a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v5)
  {
    if (span)
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + _ZNK4geom20interpolating_splineIDv2_fE20evaluate_span_lengthEj(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 58))
  {
    v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span)
      v9 = *(float *)(a1 + 52);
    else
      v9 = *(float *)(a1 + 48)
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    v9 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * span);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEff((_QWORD *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv2_fE10span_knotsEtRfS3_(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 192))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 58))
    {
      v20 = v18 + 88 * v9;
      v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      v23 = v21 + (float)((float)v10 * v22);
      v24 = v22 + v23;
    }
    else
    {
      v25 = (float *)(*(_QWORD *)(v18 + 88 * v9 + 24) + 4 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v19, v23);
    v17 = v11
        + _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(*(_QWORD *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 58))
    {
      v13 = v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_fE33calculate_monomial_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, float32x2_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float32x2_t v12;
  float32x2_t v13;

  v3 = a1[9];
  v4 = 88 * *(unsigned __int16 *)(*a1 + 2 * a2);
  v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *a3 = *(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * v6);
  __asm { FMOV            V1.2S, #3.0 }
  a3[1] = vmul_f32(vsub_f32(*(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * (v5 + 1)), *(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * v6)), _D1);
  v12 = vmul_f32(vadd_f32(vmla_f32(*(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * v6), (float32x2_t)0xC0000000C0000000, *(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * (v5 + 1))), *(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * (v6 + 2))), _D1);
  a3[2] = v12;
  v13 = vsub_f32(vmla_f32(*(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * (v6 + 3)), _D1, vsub_f32(*(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * (v5 + 1)), *(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * (v6 + 2)))), *(float32x2_t *)(*(_QWORD *)(v3 + v4) + 8 * v6));
  a3[3] = v13;
  if (sqrtf(vaddv_f32(vmul_f32(v12, v12))) <= 0.00001 && sqrtf(vaddv_f32(vmul_f32(v13, v13))) <= 0.00001)
    return 2;
  else
    return 4;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_fE31calculate_bezier_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, float32x2_t *a3)
{
  int v3;
  uint64_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;

  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v4 = *(_QWORD *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v5 = *(float32x2_t *)(v4
                      + 8
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v6 = *(float32x2_t *)(v4 + 8 * (v3 + 1));
  __asm { FMOV            V4.2S, #3.0 }
  v12 = vmul_f32(vsub_f32(v6, v5), _D4);
  v13 = *(float32x2_t *)(v4 + 8 * (v3 + 2));
  v14 = vmul_f32(vadd_f32(vmla_f32(v5, (float32x2_t)0xC0000000C0000000, v6), v13), _D4);
  v15 = vsub_f32(vmla_f32(*(float32x2_t *)(v4 + 8 * (v3 + 3)), _D4, vsub_f32(v6, v13)), v5);
  if (sqrtf(vaddv_f32(vmul_f32(v14, v14))) <= 0.00001 && sqrtf(vaddv_f32(vmul_f32(v15, v15))) <= 0.00001)
  {
    *a3 = v5;
    a3[1] = vadd_f32(v5, v12);
    a3[2] = 0;
    a3[3] = 0;
    return 2;
  }
  else
  {
    v16 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    *a3 = v5;
    a3[1] = vmla_f32(v5, v16, v12);
    a3[2] = vmla_f32(vmla_f32(v5, (float32x2_t)vdup_n_s32(0x3F2AAAABu), v12), v16, v14);
    a3[3] = vadd_f32(vadd_f32(vadd_f32(v5, v12), v14), v15);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv2_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1, float32x2_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  char *v20;
  int v21;
  _BYTE v23[88];
  _OWORD v24[3];
  unsigned __int16 v25;
  _QWORD v26[4];

  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch((*a2)->i32[0])
  {
    case 0:
      _ZN4geom19interpolating_curveIDv2_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv2_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv2_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv2_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + _ZNK4geom20interpolating_splineIDv2_fE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = _ZNK4geom20interpolating_splineIDv2_fE21evaluate_total_lengthEv((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (float *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      v13 = (float *)a1[6];
      v11 = (float *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (float *)&v18[4 * v14];
    v20 = &v18[4 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv2_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  float v16;
  float *v17;
  float v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  unsigned __int16 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v5 + 1);
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::vector<float>::resize((uint64_t)&v26, v5 + 1);
  v6 = *(_QWORD *)a1;
  *(_DWORD *)v26 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v5)
  {
    v7 = 0;
    LOWORD(v8) = 0;
    v9 = 36;
    __asm { FMOV            V0.2S, #3.0 }
    do
    {
      v15 = *(_QWORD *)a1;
      v16 = *(float *)(*(_QWORD *)a1 + v9);
      v17 = (float *)&v26[v7];
      v17[1] = v16;
      v18 = v16 - *v17;
      v19 = (float32x2_t *)(v15 + 8 * v7);
      v20 = v19[1];
      v21 = vsub_f32(v19[5], v20);
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)v8) = v20;
      v22 = vdiv_f32(vmul_n_f32(v21, v18), _D0);
      v23 = v8 + 2;
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)(v8 + 1)) = vadd_f32(v19[1], v22);
      LOWORD(v8) = v8 + 3;
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * v23) = vsub_f32(v19[5], v22);
      v7 += 4;
      v9 += 32;
    }
    while (4 * v5 != v7);
    v6 = *(_QWORD *)a1;
    v8 = (unsigned __int16)v8;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = *(_QWORD *)(v6 + 32 * *((_QWORD *)a1 + 1) - 24);
  *(_BYTE *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v26)
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v26, (uint64_t)v27, (v27 - v26) >> 2);
  v24 = v26;
  v25 = (uint64_t)v27;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v26;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v25 - 4);
  v27 = v24;
  operator delete(v24);
}

void _ZN4geom19interpolating_curveIDv2_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float32x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  float32x2_t *v4;
  __int16 v5;
  float *v6;
  float32x2_t *v7;
  float32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float32x2_t *v16;
  float32x2_t v17;
  int32x2_t v18;
  float32x2_t v19;
  int32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  int v31;
  char *v32;
  float32x2_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  unsigned __int16 v60;
  unint64_t v61;
  char *v62;
  char *v63;
  float32x2_t *v64;
  char *v65;
  float32x2_t *v66;
  int *v67;
  int v68;
  void *__p;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;

  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v4 = a1[1];
  v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v75, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<float>::resize((uint64_t)&v72, (unsigned __int16)((_WORD)v4 + 2));
  *(float32x2_t *)v75 = vmla_f32(vneg_f32((*a1)[5]), (float32x2_t)0x4000000040000000, (*a1)[1]);
  v6 = (float *)v72;
  *(_DWORD *)v72 = 0;
  v7 = *a1;
  v8 = vsub_f32((*a1)[5], (*a1)[1]);
  v6[1] = sqrtf(sqrtf(vaddv_f32(vmul_f32(v8, v8))));
  if ((_WORD)v4 == 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = (unsigned __int16)((_WORD)v4 - 1);
    v11 = 8;
    do
    {
      *(float32x2_t *)((char *)v75 + v11) = v7[v9 + 1];
      v7 = *a1;
      v12 = vsub_f32((*a1)[v9 + 5], (*a1)[v9 + 1]);
      *(float *)((char *)v72 + v9 + 8) = *(float *)((char *)v72 + v9 + 4) + sqrtf(sqrtf(vaddv_f32(vmul_f32(v12, v12))));
      v9 += 4;
      v11 += 8;
    }
    while (4 * (unsigned __int16)((_WORD)v4 - 1) != v9);
  }
  v13 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float32x2_t *)v75 + v13) = v7[4 * v10 + 1];
  v14 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float32x2_t *)v75 + v14) = vmla_f32(vneg_f32(*(float32x2_t *)((char *)v75 + 8 * (unsigned __int16)((_WORD)v4 + 2) - 24)), (float32x2_t)0x4000000040000000, *(float32x2_t *)((char *)v75 + 8 * v13));
  v15 = *((float *)v72 + v13);
  v16 = &(*a1)[4 * (unsigned __int16)((_WORD)v4 - 2)];
  v17 = vsub_f32(v16[5], v16[1]);
  *((float *)v72 + v14) = v15 + sqrtf(sqrtf(vaddv_f32(vmul_f32(v17, v17))));
  if ((_WORD)v4 == 1)
  {
    v25 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
    {
      v25 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v10 + 1);
    v24 = 0;
    LOWORD(v25) = 0;
    __asm { FMOV            V1.2S, #3.0 }
    do
    {
      v31 = v24 + 2;
      v32 = (char *)v75;
      v19.i32[0] = *((_DWORD *)v72 + v24);
      v33 = *(float32x2_t *)((char *)v75 + 8 * v24);
      v34 = v24 + 1;
      v21.i32[0] = *((_DWORD *)v72 + (v24 + 1));
      v20.i32[0] = *((_DWORD *)v72 + (v24 + 2));
      v35 = *((float *)v72 + (v24 + 3));
      *(float *)v18.i32 = *(float *)v20.i32 - v21.f32[0];
      v36 = 1.0 / (float)(v21.f32[0] - v19.f32[0]);
      v37 = 1.0 / (float)(*(float *)v20.i32 - v19.f32[0]);
      v38 = 1.0 / (float)(*(float *)v20.i32 - v21.f32[0]);
      v39 = v35 - v21.f32[0];
      v40 = 1.0 / (float)(v35 - v21.f32[0]);
      v41 = v35 - *(float *)v20.i32;
      v42 = 1.0 / (float)(v35 - *(float *)v20.i32);
      v22.f32[0] = v19.f32[0] - v21.f32[0];
      v23.f32[0] = v21.f32[0] - v21.f32[0];
      v43 = *(float32x2_t *)((char *)v75 + 8 * (v24 + 1));
      v44 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 0));
      v45 = vmul_n_f32(vmla_n_f32(vmul_f32(v43, v44), v33, v21.f32[0] - v21.f32[0]), v36);
      v46 = *(float32x2_t *)((char *)v75 + 8 * (v24 + 2));
      v47 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v23, 0));
      v48 = vmul_n_f32(vmla_n_f32(vmul_f32(v46, v47), v43, *(float *)v20.i32 - v21.f32[0]), v38);
      v49 = *(float32x2_t *)((char *)v75 + 8 * (v24 + 3));
      v50 = vmul_n_f32(vmla_n_f32(vmul_f32(v49, vneg_f32((float32x2_t)vdup_lane_s32(v18, 0))), v46, v39), v42);
      v51 = vmul_n_f32(vmla_n_f32(vmul_f32(v48, v44), v45, *(float *)v20.i32 - v21.f32[0]), v37);
      v52 = vmul_n_f32(vmla_n_f32(vmul_f32(v50, v47), v48, v39), v40);
      v53 = vmul_n_f32(vsub_f32(v43, v33), v36);
      v54 = vmul_n_f32(vsub_f32(v46, v43), v38);
      v55 = vmul_n_f32(vsub_f32(v49, v46), v42);
      v56 = vmul_n_f32(vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v52, v51), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v48, v45), v53, *(float *)v20.i32 - v21.f32[0]), v54, v22, 0), v37), *(float *)v20.i32 - v21.f32[0]), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v50, v48), v54, v39), v55, v23, 0), v40), v23, 0), v38), *(float *)v20.i32 - v21.f32[0]);
      v19.f32[0] = v19.f32[0] - *(float *)v20.i32;
      v21.f32[0] = v21.f32[0] - *(float *)v20.i32;
      *(float *)v20.i32 = *(float *)v20.i32 - *(float *)v20.i32;
      v23 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v19, 0));
      v57 = vmul_n_f32(vmla_n_f32(vmul_f32(v43, v23), v33, v21.f32[0]), v36);
      v22 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v21, 0));
      v58 = vmul_n_f32(vmla_n_f32(vmul_f32(v46, v22), v43, *(float *)v20.i32), v38);
      v59 = vmul_n_f32(vmla_n_f32(vmul_f32(v49, vneg_f32((float32x2_t)vdup_lane_s32(v20, 0))), v46, v41), v42);
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)v25) = v43;
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)(v25 + 1)) = vadd_f32(*(float32x2_t *)&v32[8* (v24 + 1)], vdiv_f32(v56, _D1));
      v60 = v25 + 2;
      LOWORD(v25) = v25 + 3;
      v18 = (int32x2_t)vsub_f32(*(float32x2_t *)&v32[8 * v31], vdiv_f32(vmul_n_f32(vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(vmul_n_f32(vmla_n_f32(vmul_f32(v59, v22), v58, v41), v40), vmul_n_f32(vmla_n_f32(vmul_f32(v58, v23), v57, *(float *)v20.i32), v37)), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v58, v57), v53, *(float *)v20.i32), v54, v19, 0), v37), *(float *)v20.i32), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v59, v58), v54, v41), v55, v21, 0), v40), v21, 0), v38), *(float *)v18.i32), _D1));
      *(int32x2_t *)(*(_QWORD *)a2 + 8 * v60) = v18;
      v24 = v34;
    }
    while (v10 != v34);
    v25 = (unsigned __int16)v25;
  }
  *(float32x2_t *)(*(_QWORD *)a2 + 8 * v25) = (*a1)[4 * v10 + 1];
  v61 = (unint64_t)a1[1];
  v70 = 0;
  v71 = 0;
  __p = 0;
  if (v61)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v61);
    v62 = (char *)v70;
    bzero(v70, 4 * v61);
    v63 = &v62[4 * v61];
    v70 = v63;
    v64 = a1[1];
    v65 = (char *)__p;
    if (v64)
    {
      v66 = 0;
      v67 = (int *)*a1 + 1;
      do
      {
        v68 = *v67;
        v67 += 8;
        *(_DWORD *)&v65[4 * (_QWORD)v66] = v68;
        v66 = (float32x2_t *)((char *)v66 + 1);
      }
      while (v64 != v66);
    }
  }
  else
  {
    v65 = 0;
    v63 = 0;
  }
  *(_BYTE *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v65, (uint64_t)v63, (v63 - v65) >> 2);
    v65 = (char *)__p;
    v63 = (char *)v70;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v65;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v63 - 1);
  v70 = v65;
  operator delete(v65);
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  int v10;
  char *v11;
  unint64_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  float32x2_t *v25;
  float32x2_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float32x2_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float v36;
  float v37;
  __int16 v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v45;
  uint64_t v46;
  float v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  unsigned __int16 v54;
  char *v55;
  void *v56;
  uint64_t v57;
  void *__p;
  _BYTE *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  int32x2_t *v67;
  int32x2_t *v68;
  uint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v4 = a1[1];
  v56 = 0;
  v57 = 0;
  v55 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v55, v4);
    v5 = v56;
    bzero(v56, 4 * v4);
    v4 = (unint64_t)v5 + 4 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v55;
      v9 = (int *)(*a1 + 4);
      do
      {
        v10 = *v9;
        v9 += 8;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v55;
  v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v61, v12);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  v16 = v12 - 1;
  v67[v12 - 1] = 0;
  *v67 = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((int32x2_t *)__p + v12 - 1) = _D1;
  *(int32x2_t *)__p = _D1;
  *((_QWORD *)v64 + v12 - 1) = 0;
  *(_QWORD *)v64 = 0;
  *((_QWORD *)v61 + v12 - 1) = 0;
  *(_QWORD *)v61 = 0;
  if (v12 - 1 >= 2)
  {
    v22 = 0;
    v23 = 0;
    v24 = v11 + 4;
    do
    {
      v13.i32[0] = *(_DWORD *)&v24[v22];
      *(float *)_D1.i32 = *(float *)v13.i32 - *(float *)&v11[v22];
      *(float *)v13.i32 = *(float *)&v24[v22 + 4] - *(float *)v13.i32;
      v14.f32[0] = (float)(*(float *)_D1.i32 + *(float *)v13.i32) + (float)(*(float *)_D1.i32 + *(float *)v13.i32);
      v67[v23 + 1] = vdup_lane_s32(_D1, 0);
      *((int32x2_t *)__p + v23 + 1) = vdup_lane_s32((int32x2_t)v14, 0);
      *((int32x2_t *)v64 + v23 + 1) = vdup_lane_s32(v13, 0);
      v25 = (float32x2_t *)(*a1 + 8 * v22);
      v26 = v25[5];
      *(float *)_D1.i32 = 3.0 / *(float *)_D1.i32;
      v14 = vsub_f32(v25[9], v26);
      v15 = v25[1];
      _D1 = (int32x2_t)vmla_n_f32(vmul_f32(vsub_f32(v26, v15), vneg_f32((float32x2_t)vdup_lane_s32(_D1, 0))), v14, 3.0 / *(float *)v13.i32);
      *((int32x2_t *)v61 + ++v23) = _D1;
      v22 += 4;
    }
    while (v12 - 2 != v23);
  }
  v27 = v59 - (_BYTE *)__p;
  v28 = ((unint64_t)(v59 - (_BYTE *)__p) >> 3) - 1;
  *(float32x2_t *)v64 = vdiv_f32(*(float32x2_t *)v64, *(float32x2_t *)__p);
  *(float32x2_t *)v61 = vdiv_f32(*(float32x2_t *)v61, *(float32x2_t *)__p);
  if ((int)v28 > 1)
  {
    v29 = v28 - 1;
    v30 = 8;
    do
    {
      *(float32x2_t *)((char *)v64 + v30) = vdiv_f32(*(float32x2_t *)((char *)v64 + v30), vmls_f32(*(float32x2_t *)((char *)__p + v30), *(float32x2_t *)((char *)v64 + v30 - 8), (float32x2_t)v67[(unint64_t)v30 / 8]));
      *(float32x2_t *)((char *)v61 + v30) = vdiv_f32(vmls_f32(*(float32x2_t *)((char *)v61 + v30), *(float32x2_t *)((char *)v61 + v30 - 8), (float32x2_t)v67[(unint64_t)v30 / 8]), vmls_f32(*(float32x2_t *)((char *)__p + v30), *(float32x2_t *)((char *)v64 + v30 - 8), (float32x2_t)v67[(unint64_t)v30 / 8]));
      v30 += 8;
      --v29;
    }
    while (v29);
  }
  *((float32x2_t *)v61 + (int)v28) = vdiv_f32(vmls_f32(*(float32x2_t *)((char *)v61 + 8 * (int)v28), *(float32x2_t *)((char *)v61 + (((v27 << 29) - 0x200000000) >> 29)), (float32x2_t)v67[(int)v28]), vmls_f32(*(float32x2_t *)((char *)__p + 8 * (int)v28), *(float32x2_t *)((char *)v64 + (((v27 << 29) - 0x200000000) >> 29)), (float32x2_t)v67[(int)v28]));
  if ((int)v28 >= 1)
  {
    do
    {
      v31 = *(float32x2_t *)((char *)v61 + 8 * v28);
      v32 = v28-- > 1;
      *((float32x2_t *)v61 + v28) = vmls_f32(*(float32x2_t *)((char *)v61 + 8 * v28), v31, *(float32x2_t *)((char *)v64 + 8 * v28));
    }
    while (v32);
  }
  if (v12 != 1)
  {
    v33 = 0;
    v34 = 0;
    do
    {
      v15.f32[0] = *(float *)&v11[v34 + 4] - *(float *)&v11[v34];
      v35 = v15.f32[0];
      v36 = 1.0 / v15.f32[0];
      v15.f32[0] = v15.f32[0] / 3.0;
      *(float32x2_t *)((char *)v64 + v33) = vmla_n_f32(vmul_f32(vmla_f32(*(float32x2_t *)((char *)v61 + v33 + 8), (float32x2_t)0x4000000040000000, *(float32x2_t *)((char *)v61 + v33)), vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v15, 0))), vsub_f32(*(float32x2_t *)(*a1 + 8 * v34 + 40), *(float32x2_t *)(*a1 + 8 * v34 + 8)), v36);
      v37 = 1.0 / (v35 * 3.0);
      v15 = vmul_n_f32(vsub_f32(*(float32x2_t *)((char *)v61 + v33 + 8), *(float32x2_t *)((char *)v61 + v33)), v37);
      *(float32x2_t *)((char *)__p + v33) = v15;
      v34 += 4;
      v33 += 8;
      --v16;
    }
    while (v16);
  }
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v38 = *((_WORD *)a1 + 4);
  v39 = v38 - 1;
  if (v38 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    v43 = 0;
    v42 = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v39 + 1));
    *(_WORD *)(a2 + 56) = v39;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v39 + 1);
    v40 = 0;
    v41 = 0;
    LOWORD(v42) = 0;
    v43 = v39;
    __asm { FMOV            V2.2S, #3.0 }
    do
    {
      v45 = *(float *)&v11[v41];
      v46 = *a1 + 8 * v41;
      v47 = *(float *)&v11[v41 + 4] - v45;
      v48 = *(float32x2_t *)(v46 + 8);
      v49 = *(float32x2_t *)((char *)v61 + v40);
      v50 = *(float32x2_t *)(v46 + 40);
      v51 = *(float32x2_t *)((char *)__p + v40);
      v52 = vmla_n_f32(*(float32x2_t *)((char *)v64 + v40), vmla_f32(vmul_n_f32(v51, (float)(v45 - v45) * 3.0), (float32x2_t)0x4000000040000000, v49), v45 - v45);
      v53 = vmla_n_f32(*(float32x2_t *)((char *)v64 + v40), vmla_f32(vmul_n_f32(v51, v47 * 3.0), (float32x2_t)0x4000000040000000, v49), v47);
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)v42) = v48;
      v54 = v42 + 2;
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)(v42 + 1)) = vadd_f32(v48, vdiv_f32(vmul_n_f32(v52, v47), _D2));
      LOWORD(v42) = v42 + 3;
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * v54) = vsub_f32(v50, vdiv_f32(vmul_n_f32(v53, v47), _D2));
      v41 += 4;
      v40 += 8;
    }
    while (4 * v39 != v41);
    v42 = (unsigned __int16)v42;
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v42) = *(_QWORD *)(*a1 + 32 * v43 + 8);
  *(_BYTE *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  float v16;
  float *v17;
  float v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v5 + 1);
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<float>::resize((uint64_t)&v24, v5 + 1);
  v6 = *(_QWORD *)a1;
  *(_DWORD *)v24 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v5)
  {
    v7 = 0;
    LOWORD(v8) = 0;
    v9 = 36;
    __asm { FMOV            V0.2S, #3.0 }
    do
    {
      v15 = *(_QWORD *)a1;
      v16 = *(float *)(*(_QWORD *)a1 + v9);
      v17 = (float *)&v24[v7];
      v17[1] = v16;
      v18 = v16 - *v17;
      v19 = (float32x2_t *)(v15 + 8 * v7);
      v20 = vmul_n_f32(v19[3], v18);
      v21 = vmul_n_f32(v19[6], v18);
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)v8) = v19[1];
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)(v8 + 1)) = vadd_f32(vdiv_f32(v20, _D0), v19[1]);
      LOWORD(v17) = v8 + 2;
      LOWORD(v8) = v8 + 3;
      *(float32x2_t *)(*(_QWORD *)a2 + 8 * (unsigned __int16)v17) = vsub_f32(v19[5], vdiv_f32(v21, _D0));
      v7 += 4;
      v9 += 32;
    }
    while (4 * v5 != v7);
    v6 = *(_QWORD *)a1;
    v8 = (unsigned __int16)v8;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v8) = *(_QWORD *)(v6 + 32 * *((_QWORD *)a1 + 1) - 24);
  *(_BYTE *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v24)
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 2);
  v22 = v24;
  v23 = (uint64_t)v25;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v24;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v23 - 4);
  v25 = v22;
  operator delete(v22);
}

float _ZNK4geom20interpolating_splineIDv2_fE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  float v3;

  v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56))
    v2 = *(_WORD *)(a1 + 56);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 58))
  {
    if (v1 == v2)
      v3 = *(float *)(a1 + 52);
    else
      v3 = *(float *)(a1 + 48)
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    v3 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0x2E8BA2E8BA2E8BALL)
      abort();
    v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x1745D1745D1745DLL)
      v13 = 0x2E8BA2E8BA2E8BALL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[88 * v10];
    v18 = &v14[88 * v13];
    _ZN4geom20interpolating_splineIDv2_fEC2ERKS2_((uint64_t)v16, a2);
    v17 = v16 + 88;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = _ZN4geom20interpolating_splineIDv2_fEC2ERKS2_(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 88;
  }
  a1[1] = v9;
  return result;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  __int16 i;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  uint64_t v23;
  __int16 v24;
  int8x16_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  unint64_t v41;
  int v42;
  float v43;
  uint64_t v44;
  double v45;
  float v46;
  double v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 j;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 k;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 m;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  float v87;
  float *v88;
  _DWORD *v89;
  float *v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  float v94;
  float v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int16 n;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  float v104;
  float **v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  float v110;
  float v111;
  unsigned __int16 v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117[2];
  char v118;
  _DWORD v119[6];
  char v120;

  v6 = a2[1] - *a2;
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    v11 = v6 >> 6;
  }
  else
  {
    do
      v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    v11 = (uint64_t)(a2[1] - *a2) >> 6;
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 192) = 0;
  v12 = (unsigned __int16)(v6 >> 6);
  if (v12 < 2)
  {
    v13 = 0;
    v14 = -1;
  }
  else
  {
    v13 = 0;
    v14 = -1;
    for (i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + ((uint64_t)i << 6)) != *(_DWORD *)(*a2 + ((uint64_t)v13 << 6)))
      {
        v14 = i - 1;
        *(_QWORD *)&v107 = *a2 + ((uint64_t)v13 << 6);
        *((_QWORD *)&v107 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv3_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float32x4_t **)&v107);
        v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(_QWORD *)&v107 = *a2 + ((uint64_t)v13 << 6);
    *((_QWORD *)&v107 + 1) = (unsigned __int16)((unint64_t)v6 >> 6) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv3_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float32x4_t **)&v107);
  }
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v18 = 0;
    v19 = *v9;
    v20 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3)) <= 1)
      v21 = 1;
    else
      v21 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3);
    v22 = (__int16 *)(v19 + 56);
    v23 = v21;
    do
    {
      v24 = *v22;
      v22 += 44;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)(a1 + 72);
    do
    {
      v34 = *(unsigned __int16 *)(v33 + 88 * v31 + 56);
      if (*(_WORD *)(v33 + 88 * v31 + 56))
      {
        v35 = *(_QWORD *)a1;
        do
        {
          v36 = (v32 + 1);
          *(_WORD *)(v35 + 2 * (unsigned __int16)v32) = v31;
          LODWORD(v32) = v32 + 1;
          --v34;
        }
        while (v34);
      }
      else
      {
        v36 = v32;
      }
      ++v31;
      v32 = v36;
    }
    while (v31 != v21);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 60);
  if ((a3 & 1) != 0)
  {
    LOWORD(v117[0]) = 512;
    v117[1] = 0.001;
    v118 = 1;
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
    v37 = *(_QWORD *)(a1 + 120);
    v105 = (float **)(a1 + 120);
    v106 = a1;
    *(_WORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 154) = 0;
    *(_QWORD *)(a1 + 128) = v37;
    v38 = *a2;
    v39 = a2[1] - *a2;
    if (v39)
      v40 = *(float *)(v38 + 4);
    else
      v40 = 0.0;
    if (v39 >= 0x41)
    {
      v41 = 1;
      while (1)
      {
        v42 = *(_DWORD *)(v38 + (v41 << 6));
        if (v42 == *(_DWORD *)(v38 + ((unint64_t)(v41 - 1) << 6)))
          break;
LABEL_107:
        v41 = (v41 + 1);
        v38 = *a2;
        v96 = (uint64_t)(a2[1] - *a2) >> 6;
        if (v96 <= v41)
          goto LABEL_128;
      }
      v43 = *(float *)(v38 + (v41 << 6) + 4);
      LOBYTE(v117[0]) = v42 != 0;
      v112 = 0;
      v44 = v106;
      v113 = 0;
      *((_QWORD *)&v107 + 1) = v107;
      *(_QWORD *)&v109 = *((_QWORD *)&v108 + 1);
      v45 = v43;
      *(double *)v25.i64 = (v43 + v40 * 2.0) * 0.333333333;
      v46 = *(double *)v25.i64;
      v47 = (v40 + v43 * 2.0) * 0.333333333;
      v48 = v47;
      if (*(_BYTE *)(v106 + 192))
      {
        v49 = v40;
      }
      else
      {
        v50 = *(_QWORD *)(v106 + 72);
        v51 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v50) >> 3);
        if ((v51 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v40)
        {
          LOWORD(v51) = v51 - 1;
          if (*(float *)(v106 + 188) > v40)
          {
            for (j = 0; ; j = v54 + 1)
            {
              v53 = j;
              while (1)
              {
                v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(float *)(v50 + 88 * v54 + 48) <= v40)
                  break;
                LOWORD(v51) = v54 - 1;
              }
              if (*(float *)(v50 + 88 * v54 + 52) > v40)
                break;
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
        }
        else
        {
          LOWORD(v51) = 0;
        }
        v55 = (unsigned __int16)v51;
        v56 = (unsigned __int16)v51;
        v57 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v50 + 88 * (unsigned __int16)v51, v40);
        if (v56)
          v45 = *(float *)(*(_QWORD *)(v44 + 48) + 4 * (v55 - 1));
        else
          v45 = 0.0;
        v47 = v45 + v57;
        v49 = v47;
        v58 = v106;
        if (!*(_BYTE *)(v106 + 192))
        {
          v59 = *(_QWORD *)(v106 + 72);
          v60 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v59) >> 3);
          if ((v60 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v46)
          {
            LOWORD(v60) = v60 - 1;
            if (*(float *)(v106 + 188) > v46)
            {
              for (k = 0; ; k = v63 + 1)
              {
                v62 = k;
                while (1)
                {
                  v63 = (v62 + (unsigned __int16)v60) >> 1;
                  if (*(float *)(v59 + 88 * v63 + 48) <= v46)
                    break;
                  LOWORD(v60) = v63 - 1;
                }
                if (*(float *)(v59 + 88 * v63 + 52) > v46)
                  break;
              }
              LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
            }
          }
          else
          {
            LOWORD(v60) = 0;
          }
          v64 = (unsigned __int16)v60;
          v65 = (unsigned __int16)v60;
          v66 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, v46);
          v45 = v65 ? *(float *)(*(_QWORD *)(v58 + 48) + 4 * (v64 - 1)) : 0.0;
          v47 = v45 + v66;
          v46 = v47;
          v67 = v106;
          if (!*(_BYTE *)(v106 + 192))
          {
            v68 = *(_QWORD *)(v106 + 72);
            v69 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v68) >> 3);
            if ((v69 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v48)
            {
              LOWORD(v69) = v69 - 1;
              if (*(float *)(v106 + 188) > v48)
              {
                for (m = 0; ; m = v72 + 1)
                {
                  v71 = m;
                  while (1)
                  {
                    v72 = (v71 + (unsigned __int16)v69) >> 1;
                    if (*(float *)(v68 + 88 * v72 + 48) <= v48)
                      break;
                    LOWORD(v69) = v72 - 1;
                  }
                  if (*(float *)(v68 + 88 * v72 + 52) > v48)
                    break;
                }
                LODWORD(v69) = (v71 + (unsigned __int16)v69) >> 1;
              }
            }
            else
            {
              LOWORD(v69) = 0;
            }
            v73 = (unsigned __int16)v69;
            v74 = (unsigned __int16)v69;
            v75 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v68 + 88 * (unsigned __int16)v69, v48);
            v45 = v74 ? *(float *)(*(_QWORD *)(v67 + 48) + 4 * (v73 - 1)) : 0.0;
            v47 = v45 + v75;
            v48 = v47;
            v76 = v106;
            if (!*(_BYTE *)(v106 + 192))
            {
              v97 = *(_QWORD *)(v106 + 72);
              v98 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v43)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v106 + 188) > v43)
                {
                  for (n = 0; ; n = v101 + 1)
                  {
                    v100 = n;
                    while (1)
                    {
                      v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v43)
                        break;
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v43)
                      break;
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              v102 = (unsigned __int16)v98;
              v103 = (unsigned __int16)v98;
              v104 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v97 + 88 * (unsigned __int16)v98, v43);
              if (v103)
                v45 = *(float *)(*(_QWORD *)(v76 + 48) + 4 * (v102 - 1));
              else
                v45 = 0.0;
              v47 = v45 + v104;
              *(float *)&v47 = v47;
              goto LABEL_83;
            }
          }
        }
      }
      *(float *)&v47 = v43;
LABEL_83:
      *(float *)v119 = v40;
      *(float *)&v119[1] = v43;
      *(float *)&v119[2] = v49;
      *(float *)&v119[3] = v46;
      *(float *)&v119[4] = v48;
      v119[5] = LODWORD(v47);
      v120 = 0;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v106, (uint64_t)v119, v117, (uint64_t)&v107, v47, v45, v25, v26, v27, v28, v29, v30);
      v77 = v112;
      v78 = *(_DWORD *)(a1 + 104);
      v79 = *(_QWORD *)(a1 + 96);
      v80 = *(_WORD *)(a1 + 152);
      if (v80)
        v81 = v80 + 1;
      else
        v81 = 0;
      v82 = v80 + v112;
      if (v80 + v112)
      {
        std::vector<float>::resize(a1 + 96, (unsigned __int16)(3 * v82 + 1));
        *(_WORD *)(a1 + 152) = v82;
        if (!*(_BYTE *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v82 + 1);
          if ((_DWORD)v77)
            goto LABEL_92;
          goto LABEL_106;
        }
LABEL_91:
        if ((_DWORD)v77)
          goto LABEL_92;
        goto LABEL_106;
      }
      *(_QWORD *)(a1 + 104) = v79;
      *(_WORD *)(a1 + 152) = 0;
      if (*(_BYTE *)(a1 + 154))
        goto LABEL_91;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
      if (!(_DWORD)v77)
      {
LABEL_106:
        v40 = v43;
        goto LABEL_107;
      }
LABEL_92:
      v83 = (unsigned __int16)((v78 - v79) >> 2);
      v84 = v81;
      v85 = v113;
      v86 = v112;
      v87 = (float)v112;
      v88 = (float *)*((_QWORD *)&v108 + 1);
      v89 = (_DWORD *)v107;
      v90 = *v105;
      v91 = *(_DWORD **)(a1 + 96);
      v92 = 3;
      v93 = 1;
      while (1)
      {
        if (v83)
        {
          if (v85)
            goto LABEL_95;
        }
        else
        {
          if (v85)
          {
            if ((_DWORD)v86)
              v95 = v110 + (float)((float)((float)(v111 - v110) / v87) * 0.0);
            else
              v95 = v111;
          }
          else
          {
            v95 = *v88;
          }
          *v90 = v95;
          *v91 = *v89;
          ++v84;
          v83 = 1;
          if (v85)
          {
LABEL_95:
            if (v86 == v93)
            {
              v94 = v111;
            }
            else
            {
              *(float *)&v26 = (float)(v111 - v110) / v87;
              v94 = v110 + (float)((float)(unsigned __int16)v93 * *(float *)&v26);
            }
            goto LABEL_105;
          }
        }
        v94 = v88[v93];
LABEL_105:
        v90[v84] = v94;
        v91[(unsigned __int16)v83] = v89[(unsigned __int16)(v92 - 2)];
        v91[(unsigned __int16)(v83 + 1)] = v89[(unsigned __int16)(v92 - 1)];
        v91[(unsigned __int16)(v83 + 2)] = v89[(unsigned __int16)v92];
        ++v84;
        v83 += 3;
        ++v93;
        v92 += 3;
        if (v93 - v77 == 1)
          goto LABEL_106;
      }
    }
    v96 = v39 >> 6;
LABEL_128:
    *(_BYTE *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + (v96 << 6) - 60);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v107);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 1);
}

double _ZNK4geom19interpolating_curveIDv3_fE11evaluate_atEf(uint64_t a1, float a2)
{
  unint64_t span;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float32x4_t v17;
  float v18;
  double result;

  if (*(_BYTE *)(a1 + 192))
  {
    span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    v4 = (unsigned __int16)(3 * span);
    v5 = *(_QWORD *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
  if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (i = 0; ; i = v10 + 1)
      {
        v9 = i;
        while (1)
        {
          v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(float *)(v6 + 88 * v10 + 48) <= a2)
            break;
          LOWORD(v7) = v10 - 1;
        }
        if (*(float *)(v6 + 88 * v10 + 52) > a2)
          break;
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  v11 = (_QWORD *)(v6 + 88 * (unsigned __int16)v7);
  v12 = geom::interpolating_spline<float>::find_span((uint64_t)v11, a2);
  v13 = *((float *)&v12 + 1);
  v14 = (unsigned __int16)(3 * v12);
  v15 = 1.0 - *((float *)&v12 + 1);
  v16 = (float)(v15 * v15) * 3.0 * *((float *)&v12 + 1);
  v17 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(*v11 + 16 * (v14 + 1)), v16), *(float32x4_t *)(*v11 + 16 * (unsigned __int16)(3 * v12)), v15 * (float)(v15 * v15));
  v18 = (float)(1.0 - *((float *)&v12 + 1)) * 3.0 * (float)(v13 * v13);
  *(_QWORD *)&result = vmlaq_n_f32(vmlaq_n_f32(v17, *(float32x4_t *)(*v11 + 16 * (v14 + 2)), v18), *(float32x4_t *)(*v11 + 16 * (v14 + 3)), (float)(v13 * v13) * v13).u64[0];
  return result;
}

unint64_t _ZNK4geom19interpolating_curveIDv3_fE19evaluate_tangent_atEf(uint64_t a1, float a2)
{
  unint64_t span;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  unsigned __int16 j;
  int v12;
  unsigned int v13;

  if (*(_BYTE *)(a1 + 192))
  {
    span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    v4 = (unsigned __int16)(3 * span);
    v5 = *(_QWORD *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (i = 0; ; i = v10 + 1)
        {
          v9 = i;
          while (1)
          {
            v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2)
              break;
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (j = 0; ; j = v13 + 1)
        {
          v12 = j;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2)
              break;
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float _ZNK4geom19interpolating_curveIDv3_fE18evaluate_length_atEf(uint64_t a1, float result)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 i;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  double v10;
  double v11;

  if (!*(_BYTE *)(a1 + 192))
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (i = 0; ; i = v7 + 1)
        {
          v6 = i;
          while (1)
          {
            v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result)
              break;
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result)
            break;
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    v8 = (unsigned __int16)v4;
    v9 = (unsigned __int16)v4;
    v10 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v3 + 88 * (unsigned __int16)v4, result);
    if (v9)
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v8 - 1));
    else
      v11 = 0.0;
    return v11 + v10;
  }
  return result;
}

float _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(uint64_t a1, float a2)
{
  unsigned __int16 span;
  uint64_t v5;
  float v6;
  int v7;
  unsigned int v8;
  float v9;

  span = geom::interpolating_spline<float>::find_span(a1, a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v5)
  {
    if (span)
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + _ZNK4geom20interpolating_splineIDv3_fE20evaluate_span_lengthEj(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 58))
  {
    v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span)
      v9 = *(float *)(a1 + 52);
    else
      v9 = *(float *)(a1 + 48)
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    v9 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * span);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEff((_QWORD *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv3_fE10span_knotsEtRfS3_(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 192))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 58))
    {
      v20 = v18 + 88 * v9;
      v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      v23 = v21 + (float)((float)v10 * v22);
      v24 = v22 + v23;
    }
    else
    {
      v25 = (float *)(*(_QWORD *)(v18 + 88 * v9 + 24) + 4 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v19, v23);
    v17 = v11
        + _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(*(_QWORD *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 58))
    {
      v13 = v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv3_fE33calculate_monomial_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;

  v3 = a1[9];
  v4 = 88 * *(unsigned __int16 *)(*a1 + 2 * a2);
  v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v3 + v4) + 16 * v6);
  __asm { FMOV            V1.4S, #3.0 }
  *(float32x4_t *)(a3 + 16) = vmulq_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * v6)), _Q1);
  v12.i64[0] = 0xC0000000C0000000;
  v12.i64[1] = 0xC0000000C0000000;
  v13 = vmulq_f32(vaddq_f32(vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * v6), v12, *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1))), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 2))), _Q1);
  *(float32x4_t *)(a3 + 32) = v13;
  v14 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 3)), _Q1, vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 2)))), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * v6));
  *(float32x4_t *)(a3 + 48) = v14;
  v15 = vmulq_f32(v13, v13);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]) <= 0.00001&& (v16 = vmulq_f32(v14, v14), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]) <= 0.00001))
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv3_fE31calculate_bezier_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;

  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v4 = *(_QWORD *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v5 = *(float32x4_t *)(v4
                      + 16
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v6 = *(float32x4_t *)(v4 + 16 * (v3 + 1));
  __asm { FMOV            V4.4S, #3.0 }
  v12 = vmulq_f32(vsubq_f32(v6, v5), _Q4);
  v13.i64[0] = 0xC0000000C0000000;
  v13.i64[1] = 0xC0000000C0000000;
  v14 = *(float32x4_t *)(v4 + 16 * (v3 + 2));
  v15 = vmulq_f32(vaddq_f32(vmlaq_f32(v5, v13, v6), v14), _Q4);
  v16 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(v4 + 16 * (v3 + 3)), _Q4, vsubq_f32(v6, v14)), v5);
  v17 = vmulq_f32(v15, v15);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]) <= 0.00001&& (v18 = vmulq_f32(v16, v16), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]) <= 0.00001))
  {
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vaddq_f32(v5, v12);
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    return 2;
  }
  else
  {
    v19 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vmlaq_f32(v5, v19, v12);
    *(float32x4_t *)(a3 + 32) = vmlaq_f32(vmlaq_f32(v5, (float32x4_t)vdupq_n_s32(0x3F2AAAABu), v12), v19, v15);
    *(float32x4_t *)(a3 + 48) = vaddq_f32(vaddq_f32(vaddq_f32(v5, v12), v15), v16);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv3_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1, float32x4_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  char *v20;
  int v21;
  _BYTE v23[88];
  _OWORD v24[3];
  unsigned __int16 v25;
  _QWORD v26[4];

  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch((*a2)->i32[0])
  {
    case 0:
      _ZN4geom19interpolating_curveIDv3_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv3_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv3_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv3_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + _ZNK4geom20interpolating_splineIDv3_fE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = _ZNK4geom20interpolating_splineIDv3_fE21evaluate_total_lengthEv((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (float *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      v13 = (float *)a1[6];
      v11 = (float *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (float *)&v18[4 * v14];
    v20 = &v18[4 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv3_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  float v16;
  float *v17;
  float v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unsigned __int16 v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v5 + 1);
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::vector<float>::resize((uint64_t)&v26, v5 + 1);
  v6 = *(_QWORD *)a1;
  *(_DWORD *)v26 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v5)
  {
    v7 = 0;
    LOWORD(v8) = 0;
    v9 = 68;
    __asm { FMOV            V0.4S, #3.0 }
    do
    {
      v15 = *(_QWORD *)a1;
      v16 = *(float *)(*(_QWORD *)a1 + v9);
      v17 = (float *)&v26[v7];
      v17[1] = v16;
      v18 = v16 - *v17;
      v19 = (float32x4_t *)(v15 + 16 * v7);
      v20 = v19[1];
      v21 = vsubq_f32(v19[5], v20);
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v8) = v20;
      v22 = vdivq_f32(vmulq_n_f32(v21, v18), _Q0);
      v23 = v8 + 2;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v8 + 1)) = vaddq_f32(v19[1], v22);
      LOWORD(v8) = v8 + 3;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * v23) = vsubq_f32(v19[5], v22);
      v7 += 4;
      v9 += 64;
    }
    while (4 * v5 != v7);
    v6 = *(_QWORD *)a1;
    v8 = (unsigned __int16)v8;
  }
  else
  {
    v8 = 0;
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v8) = *(_OWORD *)(v6 + (*((_QWORD *)a1 + 1) << 6) - 48);
  *(_BYTE *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v26)
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v26, (uint64_t)v27, (v27 - v26) >> 2);
  v24 = v26;
  v25 = (uint64_t)v27;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v26;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v25 - 4);
  v27 = v24;
  operator delete(v24);
}

void _ZN4geom19interpolating_curveIDv3_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float32x4_t **a1@<X1>, uint64_t a2@<X8>)
{
  float32x4_t *v4;
  __int16 v5;
  float32x4_t v6;
  float *v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  int v35;
  float32x4_t *v36;
  float32x4_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned __int16 v64;
  unint64_t v65;
  char *v66;
  char *v67;
  float32x4_t *v68;
  char *v69;
  float32x4_t *v70;
  __int32 *v71;
  __int32 v72;
  void *__p;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;

  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v4 = a1[1];
  v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v79, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<float>::resize((uint64_t)&v76, (unsigned __int16)((_WORD)v4 + 2));
  v6.i64[0] = 0x4000000040000000;
  v6.i64[1] = 0x4000000040000000;
  *(float32x4_t *)v79 = vmlaq_f32(vnegq_f32((*a1)[5]), v6, (*a1)[1]);
  v7 = (float *)v76;
  *(_DWORD *)v76 = 0;
  v8 = *a1;
  v9 = vsubq_f32((*a1)[5], (*a1)[1]);
  v10 = vmulq_f32(v9, v9);
  v7[1] = sqrtf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]));
  if ((_WORD)v4 == 1)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = (unsigned __int16)((_WORD)v4 - 1);
    v13 = 16;
    do
    {
      *(float32x4_t *)((char *)v79 + v13) = v8[v11 + 1];
      v8 = *a1;
      v14 = vsubq_f32((*a1)[v11 + 5], (*a1)[v11 + 1]);
      v15 = vmulq_f32(v14, v14);
      *(float *)((char *)v76 + v11 + 8) = *(float *)((char *)v76 + v11 + 4)
                                        + sqrtf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]));
      v11 += 4;
      v13 += 16;
    }
    while (4 * (unsigned __int16)((_WORD)v4 - 1) != v11);
  }
  v16 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float32x4_t *)v79 + v16) = v8[4 * v12 + 1];
  v17 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float32x4_t *)v79 + v17) = vmlaq_f32(vnegq_f32(*((float32x4_t *)v79 + (unsigned __int16)((_WORD)v4 + 2) - 3)), v6, *((float32x4_t *)v79 + v16));
  v18 = *((float *)v76 + v16);
  v19 = &(*a1)[4 * (unint64_t)(unsigned __int16)((_WORD)v4 - 2)];
  v20 = vsubq_f32(v19[5], v19[1]);
  v21 = vmulq_f32(v20, v20);
  *((float *)v76 + v17) = v18
                        + sqrtf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]));
  if ((_WORD)v4 == 1)
  {
    v29 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
    {
      v29 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v12 + 1);
    v28 = 0;
    LOWORD(v29) = 0;
    __asm { FMOV            V1.4S, #3.0 }
    do
    {
      v35 = v28 + 2;
      v36 = (float32x4_t *)v79;
      v23.i32[0] = *((_DWORD *)v76 + v28);
      v37 = *((float32x4_t *)v79 + v28);
      v38 = v28 + 1;
      v25.i32[0] = *((_DWORD *)v76 + (v28 + 1));
      v24.i32[0] = *((_DWORD *)v76 + (v28 + 2));
      v39 = *((float *)v76 + (v28 + 3));
      v22.f32[0] = *(float *)v24.i32 - v25.f32[0];
      v40 = 1.0 / (float)(v25.f32[0] - v23.f32[0]);
      v41 = 1.0 / (float)(*(float *)v24.i32 - v23.f32[0]);
      v42 = 1.0 / (float)(*(float *)v24.i32 - v25.f32[0]);
      v43 = v39 - v25.f32[0];
      v44 = 1.0 / (float)(v39 - v25.f32[0]);
      v45 = v39 - *(float *)v24.i32;
      v46 = 1.0 / (float)(v39 - *(float *)v24.i32);
      v26.f32[0] = v23.f32[0] - v25.f32[0];
      v27.f32[0] = v25.f32[0] - v25.f32[0];
      v47 = *((float32x4_t *)v79 + (v28 + 1));
      v48 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0));
      v49 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v48), v37, v25.f32[0] - v25.f32[0]), v40);
      v50 = *((float32x4_t *)v79 + (v28 + 2));
      v51 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
      v52 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v51), v47, *(float *)v24.i32 - v25.f32[0]), v42);
      v53 = *((float32x4_t *)v79 + (v28 + 3));
      v54 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0))), v50, v43), v46);
      v55 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v52, v48), v49, *(float *)v24.i32 - v25.f32[0]), v41);
      v56 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v54, v51), v52, v43), v44);
      v57 = vmulq_n_f32(vsubq_f32(v47, v37), v40);
      v58 = vmulq_n_f32(vsubq_f32(v50, v47), v42);
      v59 = vmulq_n_f32(vsubq_f32(v53, v50), v46);
      v60 = vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v56, v55), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v52, v49), v57, *(float *)v24.i32 - v25.f32[0]), v58, *(float32x2_t *)v26.f32, 0), v41), *(float *)v24.i32 - v25.f32[0]), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v54, v52), v58, v43), v59, *(float32x2_t *)v27.f32, 0), v44), *(float32x2_t *)v27.f32, 0), v42), *(float *)v24.i32 - v25.f32[0]);
      v23.f32[0] = v23.f32[0] - *(float *)v24.i32;
      v25.f32[0] = v25.f32[0] - *(float *)v24.i32;
      *(float *)v24.i32 = *(float *)v24.i32 - *(float *)v24.i32;
      v27 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v23, 0));
      v61 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v27), v37, v25.f32[0]), v40);
      v26 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v25, 0));
      v62 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v26), v47, *(float *)v24.i32), v42);
      v63 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(v24, 0))), v50, v45), v46);
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v29) = v47;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v29 + 1)) = vaddq_f32(v36[(v28 + 1)], vdivq_f32(v60, _Q1));
      v64 = v29 + 2;
      LOWORD(v29) = v29 + 3;
      v22 = vsubq_f32(v36[v35], vdivq_f32(vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v63, v26), v62, v45), v44), vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v62, v27), v61, *(float *)v24.i32), v41)), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v62, v61), v57, *(float *)v24.i32), v58, v23, 0), v41), *(float *)v24.i32), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v63, v62), v58, v45), v59, v25, 0), v44), v25, 0), v42), v22.f32[0]), _Q1));
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * v64) = v22;
      v28 = v38;
    }
    while (v12 != v38);
    v29 = (unsigned __int16)v29;
  }
  *(float32x4_t *)(*(_QWORD *)a2 + 16 * v29) = (*a1)[4 * v12 + 1];
  v65 = (unint64_t)a1[1];
  v74 = 0;
  v75 = 0;
  __p = 0;
  if (v65)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v65);
    v66 = (char *)v74;
    bzero(v74, 4 * v65);
    v67 = &v66[4 * v65];
    v74 = v67;
    v68 = a1[1];
    v69 = (char *)__p;
    if (v68)
    {
      v70 = 0;
      v71 = &(*a1)->i32[1];
      do
      {
        v72 = *v71;
        v71 += 16;
        *(_DWORD *)&v69[4 * (_QWORD)v70] = v72;
        v70 = (float32x4_t *)((char *)v70 + 1);
      }
      while (v68 != v70);
    }
  }
  else
  {
    v69 = 0;
    v67 = 0;
  }
  *(_BYTE *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v69, (uint64_t)v67, (v67 - v69) >> 2);
    v69 = (char *)__p;
    v67 = (char *)v74;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v69;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v67 - 1);
  v74 = v69;
  operator delete(v69);
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  int v10;
  char *v11;
  unint64_t v12;
  int32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  float32x4_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  double v36;
  float v37;
  float v38;
  __int16 v39;
  unsigned __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float v47;
  uint64_t v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  unsigned __int16 v57;
  char *v58;
  void *v59;
  uint64_t v60;
  void *__p;
  _BYTE *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;

  v70 = 0;
  v71 = 0;
  v72 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  __p = 0;
  v62 = 0;
  v63 = 0;
  v4 = a1[1];
  v59 = 0;
  v60 = 0;
  v58 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v58, v4);
    v5 = v59;
    bzero(v59, 4 * v4);
    v4 = (unint64_t)v5 + 4 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v58;
      v9 = (int *)(*a1 + 4);
      do
      {
        v10 = *v9;
        v9 += 16;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v58;
  v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v70, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  v16 = v12 - 1;
  v70[v12 - 1] = 0u;
  *v70 = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((float32x4_t *)__p + v12 - 1) = _Q1;
  *(float32x4_t *)__p = _Q1;
  *((_OWORD *)v67 + v12 - 1) = 0u;
  *(_OWORD *)v67 = 0u;
  *((_OWORD *)v64 + v12 - 1) = 0u;
  *(_OWORD *)v64 = 0u;
  if (v12 - 1 >= 2)
  {
    v22 = 0;
    v23 = 0;
    v24 = v11 + 4;
    do
    {
      v13.i32[0] = *(_DWORD *)&v24[v22];
      _Q1.f32[0] = *(float *)v13.i32 - *(float *)&v11[v22];
      *(float *)v13.i32 = *(float *)&v24[v22 + 4] - *(float *)v13.i32;
      v14.f32[0] = (float)(_Q1.f32[0] + *(float *)v13.i32) + (float)(_Q1.f32[0] + *(float *)v13.i32);
      v70[v23 + 1] = vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
      *((int32x4_t *)__p + v23 + 1) = vdupq_lane_s32(*(int32x2_t *)v14.f32, 0);
      *((int32x4_t *)v67 + v23 + 1) = vdupq_lane_s32(v13, 0);
      v25 = *a1 + 16 * v22;
      v26 = *(float32x4_t *)(v25 + 80);
      _Q1.f32[0] = 3.0 / _Q1.f32[0];
      v14 = vsubq_f32(*(float32x4_t *)(v25 + 144), v26);
      v15 = *(float32x4_t *)(v25 + 16);
      _Q1 = vmlaq_n_f32(vmulq_f32(vsubq_f32(v26, v15), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0))), v14, 3.0 / *(float *)v13.i32);
      *((float32x4_t *)v64 + ++v23) = _Q1;
      v22 += 4;
    }
    while (v12 - 2 != v23);
  }
  v27 = v62 - (_BYTE *)__p;
  v28 = ((unint64_t)(v62 - (_BYTE *)__p) >> 4) - 1;
  *(float32x4_t *)v67 = vdivq_f32(*(float32x4_t *)v67, *(float32x4_t *)__p);
  *(float32x4_t *)v64 = vdivq_f32(*(float32x4_t *)v64, *(float32x4_t *)__p);
  if ((int)v28 > 1)
  {
    v29 = v28 - 1;
    v30 = 16;
    do
    {
      *(float32x4_t *)((char *)v67 + v30) = vdivq_f32(*(float32x4_t *)((char *)v67 + v30), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      *(float32x4_t *)((char *)v64 + v30) = vdivq_f32(vmlsq_f32(*(float32x4_t *)((char *)v64 + v30), *(float32x4_t *)((char *)v64 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      v30 += 16;
      --v29;
    }
    while (v29);
  }
  *((float32x4_t *)v64 + (int)v28) = vdivq_f32(vmlsq_f32(*((float32x4_t *)v64 + (int)v28), *(float32x4_t *)((char *)v64 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]), vmlsq_f32(*((float32x4_t *)__p + (int)v28), *(float32x4_t *)((char *)v67 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]));
  if ((int)v28 >= 1)
  {
    do
    {
      v31 = *((float32x4_t *)v64 + v28);
      v32 = v28-- > 1;
      *((float32x4_t *)v64 + v28) = vmlsq_f32(*((float32x4_t *)v64 + v28), v31, *((float32x4_t *)v67 + v28));
    }
    while (v32);
  }
  if (v12 != 1)
  {
    v33 = 0;
    v34 = 0;
    v35.i64[0] = 0x4000000040000000;
    v35.i64[1] = 0x4000000040000000;
    do
    {
      v15.f32[0] = *(float *)&v11[v34 + 4] - *(float *)&v11[v34];
      v36 = v15.f32[0];
      v37 = 1.0 / v15.f32[0];
      v15.f32[0] = v15.f32[0] / 3.0;
      *(float32x4_t *)((char *)v67 + v33) = vmlaq_n_f32(vmulq_f32(vmlaq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), v35, *(float32x4_t *)((char *)v64 + v33)), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * v34 + 80), *(float32x4_t *)(*a1 + 16 * v34 + 16)), v37);
      v38 = 1.0 / (v36 * 3.0);
      v15 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), *(float32x4_t *)((char *)v64 + v33)), v38);
      *(float32x4_t *)((char *)__p + v33) = v15;
      v34 += 4;
      v33 += 16;
      --v16;
    }
    while (v16);
  }
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v39 = *((_WORD *)a1 + 4);
  v40 = v39 - 1;
  if (v39 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    v44 = 0;
    v43 = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v40 + 1));
    *(_WORD *)(a2 + 56) = v40;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v40 + 1);
    v41 = 0;
    v42 = 0;
    LOWORD(v43) = 0;
    v44 = v40;
    v45.i64[0] = 0x4000000040000000;
    v45.i64[1] = 0x4000000040000000;
    __asm { FMOV            V2.4S, #3.0 }
    do
    {
      v47 = *(float *)&v11[v42];
      v48 = *a1 + 16 * v42;
      v49 = *(float *)&v11[v42 + 4] - v47;
      v50 = *(float32x4_t *)(v48 + 16);
      v51 = *(float32x4_t *)((char *)v64 + v41);
      v52 = *(float32x4_t *)((char *)__p + v41);
      v53 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), vmlaq_f32(vmulq_n_f32(v52, (float)(v47 - v47) * 3.0), v45, v51), v47 - v47), v49);
      v54 = vmlaq_f32(vmulq_n_f32(v52, v49 * 3.0), v45, v51);
      v55 = *(float32x4_t *)(v48 + 80);
      v56 = vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), v54, v49);
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v43) = v50;
      v57 = v43 + 2;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v43 + 1)) = vaddq_f32(v50, vdivq_f32(v53, _Q2));
      LOWORD(v43) = v43 + 3;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * v57) = vsubq_f32(v55, vdivq_f32(vmulq_n_f32(v56, v49), _Q2));
      v42 += 4;
      v41 += 16;
    }
    while (4 * v40 != v42);
    v43 = (unsigned __int16)v43;
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v43) = *(_OWORD *)(*a1 + (v44 << 6) + 16);
  *(_BYTE *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  float v16;
  float *v17;
  float v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v5 + 1);
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<float>::resize((uint64_t)&v24, v5 + 1);
  v6 = *(_QWORD *)a1;
  *(_DWORD *)v24 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v5)
  {
    v7 = 0;
    LOWORD(v8) = 0;
    v9 = 68;
    __asm { FMOV            V0.4S, #3.0 }
    do
    {
      v15 = *(_QWORD *)a1;
      v16 = *(float *)(*(_QWORD *)a1 + v9);
      v17 = (float *)&v24[v7];
      v17[1] = v16;
      v18 = v16 - *v17;
      v19 = (float32x4_t *)(v15 + 16 * v7);
      v20 = vmulq_n_f32(v19[3], v18);
      v21 = vmulq_n_f32(v19[6], v18);
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v8) = v19[1];
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v8 + 1)) = vaddq_f32(vdivq_f32(v20, _Q0), v19[1]);
      LOWORD(v17) = v8 + 2;
      LOWORD(v8) = v8 + 3;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v17) = vsubq_f32(v19[5], vdivq_f32(v21, _Q0));
      v7 += 4;
      v9 += 64;
    }
    while (4 * v5 != v7);
    v6 = *(_QWORD *)a1;
    v8 = (unsigned __int16)v8;
  }
  else
  {
    v8 = 0;
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v8) = *(_OWORD *)(v6 + (*((_QWORD *)a1 + 1) << 6) - 48);
  *(_BYTE *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v24)
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 2);
  v22 = v24;
  v23 = (uint64_t)v25;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v24;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v23 - 4);
  v25 = v22;
  operator delete(v22);
}

float _ZNK4geom20interpolating_splineIDv3_fE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  float v3;

  v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56))
    v2 = *(_WORD *)(a1 + 56);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 58))
  {
    if (v1 == v2)
      v3 = *(float *)(a1 + 52);
    else
      v3 = *(float *)(a1 + 48)
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    v3 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0x2E8BA2E8BA2E8BALL)
      abort();
    v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x1745D1745D1745DLL)
      v13 = 0x2E8BA2E8BA2E8BALL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[88 * v10];
    v18 = &v14[88 * v13];
    _ZN4geom20interpolating_splineIDv3_fEC2ERKS2_((uint64_t)v16, a2);
    v17 = v16 + 88;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = _ZN4geom20interpolating_splineIDv3_fEC2ERKS2_(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 88;
  }
  a1[1] = v9;
  return result;
}

void _ZN4geom19interpolating_curveIDv4_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  __int16 i;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  __int16 *v22;
  uint64_t v23;
  __int16 v24;
  int8x16_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  unint64_t v41;
  int v42;
  float v43;
  uint64_t v44;
  double v45;
  float v46;
  double v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 j;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 k;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 m;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  __int16 v80;
  unsigned __int16 v81;
  unsigned __int16 v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  float v87;
  float *v88;
  _DWORD *v89;
  float *v90;
  _DWORD *v91;
  int v92;
  uint64_t v93;
  float v94;
  float v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int16 n;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  float v104;
  float **v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  float v110;
  float v111;
  unsigned __int16 v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117[2];
  char v118;
  _DWORD v119[6];
  char v120;

  v6 = a2[1] - *a2;
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    v11 = v6 >> 6;
  }
  else
  {
    do
      v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    v11 = (uint64_t)(a2[1] - *a2) >> 6;
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 192) = 0;
  v12 = (unsigned __int16)(v6 >> 6);
  if (v12 < 2)
  {
    v13 = 0;
    v14 = -1;
  }
  else
  {
    v13 = 0;
    v14 = -1;
    for (i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + ((uint64_t)i << 6)) != *(_DWORD *)(*a2 + ((uint64_t)v13 << 6)))
      {
        v14 = i - 1;
        *(_QWORD *)&v107 = *a2 + ((uint64_t)v13 << 6);
        *((_QWORD *)&v107 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv4_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float32x4_t **)&v107);
        v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(_QWORD *)&v107 = *a2 + ((uint64_t)v13 << 6);
    *((_QWORD *)&v107 + 1) = (unsigned __int16)((unint64_t)v6 >> 6) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv4_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float32x4_t **)&v107);
  }
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v18 = 0;
    v19 = *v9;
    v20 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3)) <= 1)
      v21 = 1;
    else
      v21 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3);
    v22 = (__int16 *)(v19 + 56);
    v23 = v21;
    do
    {
      v24 = *v22;
      v22 += 44;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)(a1 + 72);
    do
    {
      v34 = *(unsigned __int16 *)(v33 + 88 * v31 + 56);
      if (*(_WORD *)(v33 + 88 * v31 + 56))
      {
        v35 = *(_QWORD *)a1;
        do
        {
          v36 = (v32 + 1);
          *(_WORD *)(v35 + 2 * (unsigned __int16)v32) = v31;
          LODWORD(v32) = v32 + 1;
          --v34;
        }
        while (v34);
      }
      else
      {
        v36 = v32;
      }
      ++v31;
      v32 = v36;
    }
    while (v31 != v21);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 60);
  if ((a3 & 1) != 0)
  {
    LOWORD(v117[0]) = 512;
    v117[1] = 0.001;
    v118 = 1;
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
    v37 = *(_QWORD *)(a1 + 120);
    v105 = (float **)(a1 + 120);
    v106 = a1;
    *(_WORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 154) = 0;
    *(_QWORD *)(a1 + 128) = v37;
    v38 = *a2;
    v39 = a2[1] - *a2;
    if (v39)
      v40 = *(float *)(v38 + 4);
    else
      v40 = 0.0;
    if (v39 >= 0x41)
    {
      v41 = 1;
      while (1)
      {
        v42 = *(_DWORD *)(v38 + (v41 << 6));
        if (v42 == *(_DWORD *)(v38 + ((unint64_t)(v41 - 1) << 6)))
          break;
LABEL_107:
        v41 = (v41 + 1);
        v38 = *a2;
        v96 = (uint64_t)(a2[1] - *a2) >> 6;
        if (v96 <= v41)
          goto LABEL_128;
      }
      v43 = *(float *)(v38 + (v41 << 6) + 4);
      LOBYTE(v117[0]) = v42 != 0;
      v112 = 0;
      v44 = v106;
      v113 = 0;
      *((_QWORD *)&v107 + 1) = v107;
      *(_QWORD *)&v109 = *((_QWORD *)&v108 + 1);
      v45 = v43;
      *(double *)v25.i64 = (v43 + v40 * 2.0) * 0.333333333;
      v46 = *(double *)v25.i64;
      v47 = (v40 + v43 * 2.0) * 0.333333333;
      v48 = v47;
      if (*(_BYTE *)(v106 + 192))
      {
        v49 = v40;
      }
      else
      {
        v50 = *(_QWORD *)(v106 + 72);
        v51 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v50) >> 3);
        if ((v51 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v40)
        {
          LOWORD(v51) = v51 - 1;
          if (*(float *)(v106 + 188) > v40)
          {
            for (j = 0; ; j = v54 + 1)
            {
              v53 = j;
              while (1)
              {
                v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(float *)(v50 + 88 * v54 + 48) <= v40)
                  break;
                LOWORD(v51) = v54 - 1;
              }
              if (*(float *)(v50 + 88 * v54 + 52) > v40)
                break;
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
        }
        else
        {
          LOWORD(v51) = 0;
        }
        v55 = (unsigned __int16)v51;
        v56 = (unsigned __int16)v51;
        v57 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v50 + 88 * (unsigned __int16)v51, v40);
        if (v56)
          v45 = *(float *)(*(_QWORD *)(v44 + 48) + 4 * (v55 - 1));
        else
          v45 = 0.0;
        v47 = v45 + v57;
        v49 = v47;
        v58 = v106;
        if (!*(_BYTE *)(v106 + 192))
        {
          v59 = *(_QWORD *)(v106 + 72);
          v60 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v59) >> 3);
          if ((v60 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v46)
          {
            LOWORD(v60) = v60 - 1;
            if (*(float *)(v106 + 188) > v46)
            {
              for (k = 0; ; k = v63 + 1)
              {
                v62 = k;
                while (1)
                {
                  v63 = (v62 + (unsigned __int16)v60) >> 1;
                  if (*(float *)(v59 + 88 * v63 + 48) <= v46)
                    break;
                  LOWORD(v60) = v63 - 1;
                }
                if (*(float *)(v59 + 88 * v63 + 52) > v46)
                  break;
              }
              LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
            }
          }
          else
          {
            LOWORD(v60) = 0;
          }
          v64 = (unsigned __int16)v60;
          v65 = (unsigned __int16)v60;
          v66 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, v46);
          v45 = v65 ? *(float *)(*(_QWORD *)(v58 + 48) + 4 * (v64 - 1)) : 0.0;
          v47 = v45 + v66;
          v46 = v47;
          v67 = v106;
          if (!*(_BYTE *)(v106 + 192))
          {
            v68 = *(_QWORD *)(v106 + 72);
            v69 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v68) >> 3);
            if ((v69 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v48)
            {
              LOWORD(v69) = v69 - 1;
              if (*(float *)(v106 + 188) > v48)
              {
                for (m = 0; ; m = v72 + 1)
                {
                  v71 = m;
                  while (1)
                  {
                    v72 = (v71 + (unsigned __int16)v69) >> 1;
                    if (*(float *)(v68 + 88 * v72 + 48) <= v48)
                      break;
                    LOWORD(v69) = v72 - 1;
                  }
                  if (*(float *)(v68 + 88 * v72 + 52) > v48)
                    break;
                }
                LODWORD(v69) = (v71 + (unsigned __int16)v69) >> 1;
              }
            }
            else
            {
              LOWORD(v69) = 0;
            }
            v73 = (unsigned __int16)v69;
            v74 = (unsigned __int16)v69;
            v75 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v68 + 88 * (unsigned __int16)v69, v48);
            v45 = v74 ? *(float *)(*(_QWORD *)(v67 + 48) + 4 * (v73 - 1)) : 0.0;
            v47 = v45 + v75;
            v48 = v47;
            v76 = v106;
            if (!*(_BYTE *)(v106 + 192))
            {
              v97 = *(_QWORD *)(v106 + 72);
              v98 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v106 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v43)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v106 + 188) > v43)
                {
                  for (n = 0; ; n = v101 + 1)
                  {
                    v100 = n;
                    while (1)
                    {
                      v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v43)
                        break;
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v43)
                      break;
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              v102 = (unsigned __int16)v98;
              v103 = (unsigned __int16)v98;
              v104 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v97 + 88 * (unsigned __int16)v98, v43);
              if (v103)
                v45 = *(float *)(*(_QWORD *)(v76 + 48) + 4 * (v102 - 1));
              else
                v45 = 0.0;
              v47 = v45 + v104;
              *(float *)&v47 = v47;
              goto LABEL_83;
            }
          }
        }
      }
      *(float *)&v47 = v43;
LABEL_83:
      *(float *)v119 = v40;
      *(float *)&v119[1] = v43;
      *(float *)&v119[2] = v49;
      *(float *)&v119[3] = v46;
      *(float *)&v119[4] = v48;
      v119[5] = LODWORD(v47);
      v120 = 0;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v106, (uint64_t)v119, v117, (uint64_t)&v107, v47, v45, v25, v26, v27, v28, v29, v30);
      v77 = v112;
      v78 = *(_DWORD *)(a1 + 104);
      v79 = *(_QWORD *)(a1 + 96);
      v80 = *(_WORD *)(a1 + 152);
      if (v80)
        v81 = v80 + 1;
      else
        v81 = 0;
      v82 = v80 + v112;
      if (v80 + v112)
      {
        std::vector<float>::resize(a1 + 96, (unsigned __int16)(3 * v82 + 1));
        *(_WORD *)(a1 + 152) = v82;
        if (!*(_BYTE *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v82 + 1);
          if ((_DWORD)v77)
            goto LABEL_92;
          goto LABEL_106;
        }
LABEL_91:
        if ((_DWORD)v77)
          goto LABEL_92;
        goto LABEL_106;
      }
      *(_QWORD *)(a1 + 104) = v79;
      *(_WORD *)(a1 + 152) = 0;
      if (*(_BYTE *)(a1 + 154))
        goto LABEL_91;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
      if (!(_DWORD)v77)
      {
LABEL_106:
        v40 = v43;
        goto LABEL_107;
      }
LABEL_92:
      v83 = (unsigned __int16)((v78 - v79) >> 2);
      v84 = v81;
      v85 = v113;
      v86 = v112;
      v87 = (float)v112;
      v88 = (float *)*((_QWORD *)&v108 + 1);
      v89 = (_DWORD *)v107;
      v90 = *v105;
      v91 = *(_DWORD **)(a1 + 96);
      v92 = 3;
      v93 = 1;
      while (1)
      {
        if (v83)
        {
          if (v85)
            goto LABEL_95;
        }
        else
        {
          if (v85)
          {
            if ((_DWORD)v86)
              v95 = v110 + (float)((float)((float)(v111 - v110) / v87) * 0.0);
            else
              v95 = v111;
          }
          else
          {
            v95 = *v88;
          }
          *v90 = v95;
          *v91 = *v89;
          ++v84;
          v83 = 1;
          if (v85)
          {
LABEL_95:
            if (v86 == v93)
            {
              v94 = v111;
            }
            else
            {
              *(float *)&v26 = (float)(v111 - v110) / v87;
              v94 = v110 + (float)((float)(unsigned __int16)v93 * *(float *)&v26);
            }
            goto LABEL_105;
          }
        }
        v94 = v88[v93];
LABEL_105:
        v90[v84] = v94;
        v91[(unsigned __int16)v83] = v89[(unsigned __int16)(v92 - 2)];
        v91[(unsigned __int16)(v83 + 1)] = v89[(unsigned __int16)(v92 - 1)];
        v91[(unsigned __int16)(v83 + 2)] = v89[(unsigned __int16)v92];
        ++v84;
        v83 += 3;
        ++v93;
        v92 += 3;
        if (v93 - v77 == 1)
          goto LABEL_106;
      }
    }
    v96 = v39 >> 6;
LABEL_128:
    *(_BYTE *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + (v96 << 6) - 60);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v107);
  }
}

void _ZN4geom19interpolating_curveIDv4_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_BYTE *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 1);
}

unint64_t _ZNK4geom19interpolating_curveIDv4_fE19evaluate_tangent_atEf(uint64_t a1, float a2)
{
  unint64_t span;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  unsigned __int16 j;
  int v12;
  unsigned int v13;

  if (*(_BYTE *)(a1 + 192))
  {
    span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    v4 = (unsigned __int16)(3 * span);
    v5 = *(_QWORD *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (i = 0; ; i = v10 + 1)
        {
          v9 = i;
          while (1)
          {
            v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2)
              break;
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (j = 0; ; j = v13 + 1)
        {
          v12 = j;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2)
              break;
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2)
            break;
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float _ZNK4geom19interpolating_curveIDv4_fE18evaluate_length_atEf(uint64_t a1, float result)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 i;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  double v10;
  double v11;

  if (!*(_BYTE *)(a1 + 192))
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (i = 0; ; i = v7 + 1)
        {
          v6 = i;
          while (1)
          {
            v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result)
              break;
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result)
            break;
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    v8 = (unsigned __int16)v4;
    v9 = (unsigned __int16)v4;
    v10 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v3 + 88 * (unsigned __int16)v4, result);
    if (v9)
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v8 - 1));
    else
      v11 = 0.0;
    return v11 + v10;
  }
  return result;
}

float _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(uint64_t a1, float a2)
{
  unsigned __int16 span;
  uint64_t v5;
  float v6;
  int v7;
  unsigned int v8;
  float v9;

  span = geom::interpolating_spline<float>::find_span(a1, a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v5)
  {
    if (span)
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + _ZNK4geom20interpolating_splineIDv4_fE20evaluate_span_lengthEj(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 58))
  {
    v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span)
      v9 = *(float *)(a1 + 52);
    else
      v9 = *(float *)(a1 + 48)
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    v9 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * span);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEff((_QWORD *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv4_fE10span_knotsEtRfS3_(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 192))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(float *)(*(_QWORD *)(a1 + 48) + 4 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 58))
    {
      v20 = v18 + 88 * v9;
      v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      v23 = v21 + (float)((float)v10 * v22);
      v24 = v22 + v23;
    }
    else
    {
      v25 = (float *)(*(_QWORD *)(v18 + 88 * v9 + 24) + 4 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v19, v23);
    v17 = v11
        + _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(*(_QWORD *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 58))
    {
      v13 = v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 88 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv4_fE33calculate_monomial_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;

  v3 = a1[9];
  v4 = 88 * *(unsigned __int16 *)(*a1 + 2 * a2);
  v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v3 + v4) + 16 * v6);
  __asm { FMOV            V1.4S, #3.0 }
  *(float32x4_t *)(a3 + 16) = vmulq_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * v6)), _Q1);
  v12.i64[0] = 0xC0000000C0000000;
  v12.i64[1] = 0xC0000000C0000000;
  v13 = vmulq_f32(vaddq_f32(vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * v6), v12, *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1))), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 2))), _Q1);
  *(float32x4_t *)(a3 + 32) = v13;
  v14 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 3)), _Q1, vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 2)))), *(float32x4_t *)(*(_QWORD *)(v3 + v4) + 16 * v6));
  *(float32x4_t *)(a3 + 48) = v14;
  v15 = (int8x16_t)vmulq_f32(v13, v13);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)))) <= 0.00001
    && (v16 = (int8x16_t)vmulq_f32(v14, v14),
        sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)))) <= 0.00001))
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv4_fE31calculate_bezier_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;

  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v4 = *(_QWORD *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v5 = *(float32x4_t *)(v4
                      + 16
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v6 = *(float32x4_t *)(v4 + 16 * (v3 + 1));
  __asm { FMOV            V4.4S, #3.0 }
  v12 = vmulq_f32(vsubq_f32(v6, v5), _Q4);
  v13.i64[0] = 0xC0000000C0000000;
  v13.i64[1] = 0xC0000000C0000000;
  v14 = *(float32x4_t *)(v4 + 16 * (v3 + 2));
  v15 = vmulq_f32(vaddq_f32(vmlaq_f32(v5, v13, v6), v14), _Q4);
  v16 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(v4 + 16 * (v3 + 3)), _Q4, vsubq_f32(v6, v14)), v5);
  v17 = (int8x16_t)vmulq_f32(v15, v15);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)))) <= 0.00001
    && (v18 = (int8x16_t)vmulq_f32(v16, v16),
        sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)))) <= 0.00001))
  {
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vaddq_f32(v5, v12);
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    return 2;
  }
  else
  {
    v19 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vmlaq_f32(v5, v19, v12);
    *(float32x4_t *)(a3 + 32) = vmlaq_f32(vmlaq_f32(v5, (float32x4_t)vdupq_n_s32(0x3F2AAAABu), v12), v19, v15);
    *(float32x4_t *)(a3 + 48) = vaddq_f32(vaddq_f32(vaddq_f32(v5, v12), v15), v16);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv4_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1, float32x4_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  char *v20;
  int v21;
  _BYTE v23[88];
  _OWORD v24[3];
  unsigned __int16 v25;
  _QWORD v26[4];

  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch((*a2)->i32[0])
  {
    case 0:
      _ZN4geom19interpolating_curveIDv3_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv3_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv4_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv4_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + _ZNK4geom20interpolating_splineIDv4_fE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = _ZNK4geom20interpolating_splineIDv4_fE21evaluate_total_lengthEv((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (float *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      v13 = (float *)a1[6];
      v11 = (float *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (float *)&v18[4 * v14];
    v20 = &v18[4 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv4_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float32x4_t **a1@<X1>, uint64_t a2@<X8>)
{
  float32x4_t *v4;
  __int16 v5;
  float32x4_t v6;
  float *v7;
  float32x4_t *v8;
  float32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float32x4_t *v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x2_t v23;
  int32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  int v35;
  float32x4_t *v36;
  float32x4_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned __int16 v64;
  unint64_t v65;
  char *v66;
  char *v67;
  float32x4_t *v68;
  char *v69;
  float32x4_t *v70;
  __int32 *v71;
  __int32 v72;
  void *__p;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;

  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v4 = a1[1];
  v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v79, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<float>::resize((uint64_t)&v76, (unsigned __int16)((_WORD)v4 + 2));
  v6.i64[0] = 0x4000000040000000;
  v6.i64[1] = 0x4000000040000000;
  *(float32x4_t *)v79 = vmlaq_f32(vnegq_f32((*a1)[5]), v6, (*a1)[1]);
  v7 = (float *)v76;
  *(_DWORD *)v76 = 0;
  v8 = *a1;
  v9 = vsubq_f32((*a1)[5], (*a1)[1]);
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  v7[1] = sqrtf(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)))));
  if ((_WORD)v4 == 1)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = (unsigned __int16)((_WORD)v4 - 1);
    v13 = 16;
    do
    {
      *(float32x4_t *)((char *)v79 + v13) = v8[v11 + 1];
      v8 = *a1;
      v14 = vsubq_f32((*a1)[v11 + 5], (*a1)[v11 + 1]);
      v15 = (int8x16_t)vmulq_f32(v14, v14);
      *(float *)((char *)v76 + v11 + 8) = *(float *)((char *)v76 + v11 + 4)
                                        + sqrtf(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)))));
      v11 += 4;
      v13 += 16;
    }
    while (4 * (unsigned __int16)((_WORD)v4 - 1) != v11);
  }
  v16 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float32x4_t *)v79 + v16) = v8[4 * v12 + 1];
  v17 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float32x4_t *)v79 + v17) = vmlaq_f32(vnegq_f32(*((float32x4_t *)v79 + (unsigned __int16)((_WORD)v4 + 2) - 3)), v6, *((float32x4_t *)v79 + v16));
  v18 = *((float *)v76 + v16);
  v19 = &(*a1)[4 * (unint64_t)(unsigned __int16)((_WORD)v4 - 2)];
  v20 = vsubq_f32(v19[5], v19[1]);
  v21 = (int8x16_t)vmulq_f32(v20, v20);
  *((float *)v76 + v17) = v18
                        + sqrtf(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)))));
  if ((_WORD)v4 == 1)
  {
    v29 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(_BYTE *)(a2 + 58))
    {
      v29 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v12 + 1);
    v28 = 0;
    LOWORD(v29) = 0;
    __asm { FMOV            V1.4S, #3.0 }
    do
    {
      v35 = v28 + 2;
      v36 = (float32x4_t *)v79;
      v23.i32[0] = *((_DWORD *)v76 + v28);
      v37 = *((float32x4_t *)v79 + v28);
      v38 = v28 + 1;
      v25.i32[0] = *((_DWORD *)v76 + (v28 + 1));
      v24.i32[0] = *((_DWORD *)v76 + (v28 + 2));
      v39 = *((float *)v76 + (v28 + 3));
      v22.f32[0] = *(float *)v24.i32 - v25.f32[0];
      v40 = 1.0 / (float)(v25.f32[0] - v23.f32[0]);
      v41 = 1.0 / (float)(*(float *)v24.i32 - v23.f32[0]);
      v42 = 1.0 / (float)(*(float *)v24.i32 - v25.f32[0]);
      v43 = v39 - v25.f32[0];
      v44 = 1.0 / (float)(v39 - v25.f32[0]);
      v45 = v39 - *(float *)v24.i32;
      v46 = 1.0 / (float)(v39 - *(float *)v24.i32);
      v26.f32[0] = v23.f32[0] - v25.f32[0];
      v27.f32[0] = v25.f32[0] - v25.f32[0];
      v47 = *((float32x4_t *)v79 + (v28 + 1));
      v48 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0));
      v49 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v48), v37, v25.f32[0] - v25.f32[0]), v40);
      v50 = *((float32x4_t *)v79 + (v28 + 2));
      v51 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
      v52 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v51), v47, *(float *)v24.i32 - v25.f32[0]), v42);
      v53 = *((float32x4_t *)v79 + (v28 + 3));
      v54 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0))), v50, v43), v46);
      v55 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v52, v48), v49, *(float *)v24.i32 - v25.f32[0]), v41);
      v56 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v54, v51), v52, v43), v44);
      v57 = vmulq_n_f32(vsubq_f32(v47, v37), v40);
      v58 = vmulq_n_f32(vsubq_f32(v50, v47), v42);
      v59 = vmulq_n_f32(vsubq_f32(v53, v50), v46);
      v60 = vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v56, v55), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v52, v49), v57, *(float *)v24.i32 - v25.f32[0]), v58, *(float32x2_t *)v26.f32, 0), v41), *(float *)v24.i32 - v25.f32[0]), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v54, v52), v58, v43), v59, *(float32x2_t *)v27.f32, 0), v44), *(float32x2_t *)v27.f32, 0), v42), *(float *)v24.i32 - v25.f32[0]);
      v23.f32[0] = v23.f32[0] - *(float *)v24.i32;
      v25.f32[0] = v25.f32[0] - *(float *)v24.i32;
      *(float *)v24.i32 = *(float *)v24.i32 - *(float *)v24.i32;
      v27 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v23, 0));
      v61 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v27), v37, v25.f32[0]), v40);
      v26 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v25, 0));
      v62 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v26), v47, *(float *)v24.i32), v42);
      v63 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(v24, 0))), v50, v45), v46);
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v29) = v47;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v29 + 1)) = vaddq_f32(v36[(v28 + 1)], vdivq_f32(v60, _Q1));
      v64 = v29 + 2;
      LOWORD(v29) = v29 + 3;
      v22 = vsubq_f32(v36[v35], vdivq_f32(vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v63, v26), v62, v45), v44), vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v62, v27), v61, *(float *)v24.i32), v41)), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v62, v61), v57, *(float *)v24.i32), v58, v23, 0), v41), *(float *)v24.i32), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v63, v62), v58, v45), v59, v25, 0), v44), v25, 0), v42), v22.f32[0]), _Q1));
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * v64) = v22;
      v28 = v38;
    }
    while (v12 != v38);
    v29 = (unsigned __int16)v29;
  }
  *(float32x4_t *)(*(_QWORD *)a2 + 16 * v29) = (*a1)[4 * v12 + 1];
  v65 = (unint64_t)a1[1];
  v74 = 0;
  v75 = 0;
  __p = 0;
  if (v65)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v65);
    v66 = (char *)v74;
    bzero(v74, 4 * v65);
    v67 = &v66[4 * v65];
    v74 = v67;
    v68 = a1[1];
    v69 = (char *)__p;
    if (v68)
    {
      v70 = 0;
      v71 = &(*a1)->i32[1];
      do
      {
        v72 = *v71;
        v71 += 16;
        *(_DWORD *)&v69[4 * (_QWORD)v70] = v72;
        v70 = (float32x4_t *)((char *)v70 + 1);
      }
      while (v68 != v70);
    }
  }
  else
  {
    v69 = 0;
    v67 = 0;
  }
  *(_BYTE *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v69, (uint64_t)v67, (v67 - v69) >> 2);
    v69 = (char *)__p;
    v67 = (char *)v74;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v69;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v67 - 1);
  v74 = v69;
  operator delete(v69);
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
}

void _ZN4geom19interpolating_curveIDv4_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  int v10;
  char *v11;
  unint64_t v12;
  int32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  float32x4_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  double v36;
  float v37;
  float v38;
  __int16 v39;
  unsigned __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float v47;
  uint64_t v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  unsigned __int16 v57;
  char *v58;
  void *v59;
  uint64_t v60;
  void *__p;
  _BYTE *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;

  v70 = 0;
  v71 = 0;
  v72 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  __p = 0;
  v62 = 0;
  v63 = 0;
  v4 = a1[1];
  v59 = 0;
  v60 = 0;
  v58 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v58, v4);
    v5 = v59;
    bzero(v59, 4 * v4);
    v4 = (unint64_t)v5 + 4 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v58;
      v9 = (int *)(*a1 + 4);
      do
      {
        v10 = *v9;
        v9 += 16;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v58;
  v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v70, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  v16 = v12 - 1;
  v70[v12 - 1] = 0u;
  *v70 = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((float32x4_t *)__p + v12 - 1) = _Q1;
  *(float32x4_t *)__p = _Q1;
  *((_OWORD *)v67 + v12 - 1) = 0u;
  *(_OWORD *)v67 = 0u;
  *((_OWORD *)v64 + v12 - 1) = 0u;
  *(_OWORD *)v64 = 0u;
  if (v12 - 1 >= 2)
  {
    v22 = 0;
    v23 = 0;
    v24 = v11 + 4;
    do
    {
      v13.i32[0] = *(_DWORD *)&v24[v22];
      _Q1.f32[0] = *(float *)v13.i32 - *(float *)&v11[v22];
      *(float *)v13.i32 = *(float *)&v24[v22 + 4] - *(float *)v13.i32;
      v14.f32[0] = (float)(_Q1.f32[0] + *(float *)v13.i32) + (float)(_Q1.f32[0] + *(float *)v13.i32);
      v70[v23 + 1] = vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
      *((int32x4_t *)__p + v23 + 1) = vdupq_lane_s32(*(int32x2_t *)v14.f32, 0);
      *((int32x4_t *)v67 + v23 + 1) = vdupq_lane_s32(v13, 0);
      v25 = *a1 + 16 * v22;
      v26 = *(float32x4_t *)(v25 + 80);
      _Q1.f32[0] = 3.0 / _Q1.f32[0];
      v14 = vsubq_f32(*(float32x4_t *)(v25 + 144), v26);
      v15 = *(float32x4_t *)(v25 + 16);
      _Q1 = vmlaq_n_f32(vmulq_f32(vsubq_f32(v26, v15), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0))), v14, 3.0 / *(float *)v13.i32);
      *((float32x4_t *)v64 + ++v23) = _Q1;
      v22 += 4;
    }
    while (v12 - 2 != v23);
  }
  v27 = v62 - (_BYTE *)__p;
  v28 = ((unint64_t)(v62 - (_BYTE *)__p) >> 4) - 1;
  *(float32x4_t *)v67 = vdivq_f32(*(float32x4_t *)v67, *(float32x4_t *)__p);
  *(float32x4_t *)v64 = vdivq_f32(*(float32x4_t *)v64, *(float32x4_t *)__p);
  if ((int)v28 > 1)
  {
    v29 = v28 - 1;
    v30 = 16;
    do
    {
      *(float32x4_t *)((char *)v67 + v30) = vdivq_f32(*(float32x4_t *)((char *)v67 + v30), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      *(float32x4_t *)((char *)v64 + v30) = vdivq_f32(vmlsq_f32(*(float32x4_t *)((char *)v64 + v30), *(float32x4_t *)((char *)v64 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      v30 += 16;
      --v29;
    }
    while (v29);
  }
  *((float32x4_t *)v64 + (int)v28) = vdivq_f32(vmlsq_f32(*((float32x4_t *)v64 + (int)v28), *(float32x4_t *)((char *)v64 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]), vmlsq_f32(*((float32x4_t *)__p + (int)v28), *(float32x4_t *)((char *)v67 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]));
  if ((int)v28 >= 1)
  {
    do
    {
      v31 = *((float32x4_t *)v64 + v28);
      v32 = v28-- > 1;
      *((float32x4_t *)v64 + v28) = vmlsq_f32(*((float32x4_t *)v64 + v28), v31, *((float32x4_t *)v67 + v28));
    }
    while (v32);
  }
  if (v12 != 1)
  {
    v33 = 0;
    v34 = 0;
    v35.i64[0] = 0x4000000040000000;
    v35.i64[1] = 0x4000000040000000;
    do
    {
      v15.f32[0] = *(float *)&v11[v34 + 4] - *(float *)&v11[v34];
      v36 = v15.f32[0];
      v37 = 1.0 / v15.f32[0];
      v15.f32[0] = v15.f32[0] / 3.0;
      *(float32x4_t *)((char *)v67 + v33) = vmlaq_n_f32(vmulq_f32(vmlaq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), v35, *(float32x4_t *)((char *)v64 + v33)), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * v34 + 80), *(float32x4_t *)(*a1 + 16 * v34 + 16)), v37);
      v38 = 1.0 / (v36 * 3.0);
      v15 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), *(float32x4_t *)((char *)v64 + v33)), v38);
      *(float32x4_t *)((char *)__p + v33) = v15;
      v34 += 4;
      v33 += 16;
      --v16;
    }
    while (v16);
  }
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v39 = *((_WORD *)a1 + 4);
  v40 = v39 - 1;
  if (v39 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    v44 = 0;
    v43 = 0;
    if (!*(_BYTE *)(a2 + 58))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v40 + 1));
    *(_WORD *)(a2 + 56) = v40;
    if (!*(_BYTE *)(a2 + 58))
      std::vector<float>::resize(a2 + 24, v40 + 1);
    v41 = 0;
    v42 = 0;
    LOWORD(v43) = 0;
    v44 = v40;
    v45.i64[0] = 0x4000000040000000;
    v45.i64[1] = 0x4000000040000000;
    __asm { FMOV            V2.4S, #3.0 }
    do
    {
      v47 = *(float *)&v11[v42];
      v48 = *a1 + 16 * v42;
      v49 = *(float *)&v11[v42 + 4] - v47;
      v50 = *(float32x4_t *)(v48 + 16);
      v51 = *(float32x4_t *)((char *)v64 + v41);
      v52 = *(float32x4_t *)((char *)__p + v41);
      v53 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), vmlaq_f32(vmulq_n_f32(v52, (float)(v47 - v47) * 3.0), v45, v51), v47 - v47), v49);
      v54 = vmlaq_f32(vmulq_n_f32(v52, v49 * 3.0), v45, v51);
      v55 = *(float32x4_t *)(v48 + 80);
      v56 = vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), v54, v49);
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v43) = v50;
      v57 = v43 + 2;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v43 + 1)) = vaddq_f32(v50, vdivq_f32(v53, _Q2));
      LOWORD(v43) = v43 + 3;
      *(float32x4_t *)(*(_QWORD *)a2 + 16 * v57) = vsubq_f32(v55, vdivq_f32(vmulq_n_f32(v56, v49), _Q2));
      v42 += 4;
      v41 += 16;
    }
    while (4 * v40 != v42);
    v43 = (unsigned __int16)v43;
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v43) = *(_OWORD *)(*a1 + (v44 << 6) + 16);
  *(_BYTE *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

float _ZNK4geom20interpolating_splineIDv4_fE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  float v3;

  v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56))
    v2 = *(_WORD *)(a1 + 56);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 58))
  {
    if (v1 == v2)
      v3 = *(float *)(a1 + 52);
    else
      v3 = *(float *)(a1 + 48)
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    v3 = *(float *)(*(_QWORD *)(a1 + 24) + 4 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(a1, v3);
}

void _ZN4geom19interpolating_curveIDv2_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  __int16 i;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  __int16 *v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  int v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 j;
  int v45;
  unsigned int v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int16 k;
  int v53;
  unsigned int v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int16 m;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  __int16 v72;
  unsigned __int16 v73;
  unsigned __int16 v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  double v79;
  double *v80;
  _QWORD *v81;
  double *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  double v86;
  double v87;
  unint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int16 n;
  int v94;
  unsigned int v95;
  double v96;
  double v97;
  int v98;
  int v99;
  int v100;
  int v101;
  double **v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  double v107;
  double v108;
  unsigned __int16 v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float v114[2];
  char v115;
  _QWORD v116[6];
  char v117;

  v6 = a2[1] - *a2;
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    v11 = v6 >> 6;
  }
  else
  {
    do
      v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    v11 = (uint64_t)(a2[1] - *a2) >> 6;
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 208) = 0;
  v12 = (unsigned __int16)(v6 >> 6);
  if (v12 < 2)
  {
    v13 = 0;
    v14 = -1;
  }
  else
  {
    v13 = 0;
    v14 = -1;
    for (i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + ((uint64_t)i << 6)) != *(_DWORD *)(*a2 + ((uint64_t)v13 << 6)))
      {
        v14 = i - 1;
        *(_QWORD *)&v104 = *a2 + ((uint64_t)v13 << 6);
        *((_QWORD *)&v104 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv2_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float64x2_t **)&v104);
        v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(_QWORD *)&v104 = *a2 + ((uint64_t)v13 << 6);
    *((_QWORD *)&v104 + 1) = (unsigned __int16)((unint64_t)v6 >> 6) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv2_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float64x2_t **)&v104);
  }
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 5));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v18 = 0;
    v19 = *v9;
    v20 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 5) <= 1)
      v21 = 1;
    else
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 5);
    v22 = (__int16 *)(v19 + 64);
    v23 = v21;
    do
    {
      v24 = *v22;
      v22 += 48;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    v25 = 0;
    v26 = 0;
    v27 = *(_QWORD *)(a1 + 72);
    do
    {
      v28 = *(unsigned __int16 *)(v27 + 96 * v25 + 64);
      if (*(_WORD *)(v27 + 96 * v25 + 64))
      {
        v29 = *(_QWORD *)a1;
        do
        {
          v30 = (v26 + 1);
          *(_WORD *)(v29 + 2 * (unsigned __int16)v26) = v25;
          LODWORD(v26) = v26 + 1;
          --v28;
        }
        while (v28);
      }
      else
      {
        v30 = v26;
      }
      ++v25;
      v26 = v30;
    }
    while (v25 != v21);
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(*a2 + 8);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2[1] - 56);
  if ((a3 & 1) != 0)
  {
    LOWORD(v114[0]) = 512;
    v114[1] = 0.001;
    v115 = 1;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
    v31 = *(_QWORD *)(a1 + 120);
    v102 = (double **)(a1 + 120);
    v103 = a1;
    *(_WORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 162) = 0;
    *(_QWORD *)(a1 + 128) = v31;
    v32 = *a2;
    v33 = a2[1] - *a2;
    if (v33)
      v34 = *(double *)(v32 + 8);
    else
      v34 = 0.0;
    if (v33 >= 0x41)
    {
      v35 = 1;
      while (1)
      {
        v36 = *(_DWORD *)(v32 + (v35 << 6));
        if (v36 == *(_DWORD *)(v32 + ((unint64_t)(v35 - 1) << 6)))
          break;
LABEL_102:
        v35 = (v35 + 1);
        v32 = *a2;
        v88 = (uint64_t)(a2[1] - *a2) >> 6;
        if (v88 <= v35)
          goto LABEL_128;
      }
      v37 = *(double *)(v32 + (v35 << 6) + 8);
      LOBYTE(v114[0]) = v36 != 0;
      v109 = 0;
      v38 = v103;
      v110 = 0;
      *((_QWORD *)&v104 + 1) = v104;
      *(_QWORD *)&v106 = *((_QWORD *)&v105 + 1);
      v39 = (v37 + v34 * 2.0) * 0.333333333;
      v40 = (v34 + v37 * 2.0) * 0.333333333;
      if (*(_BYTE *)(v103 + 208))
      {
        v41 = v34;
LABEL_77:
        v68 = v37;
LABEL_78:
        *(double *)v116 = v34;
        *(double *)&v116[1] = v37;
        *(double *)&v116[2] = v41;
        *(double *)&v116[3] = v39;
        *(double *)&v116[4] = v40;
        *(double *)&v116[5] = v68;
        v117 = 0;
        _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v103, (uint64_t)v116, v114, (uint64_t)&v104);
        v69 = v109;
        v70 = *(_DWORD *)(a1 + 104);
        v71 = *(_QWORD *)(a1 + 96);
        v72 = *(_WORD *)(a1 + 160);
        if (v72)
          v73 = v72 + 1;
        else
          v73 = 0;
        v74 = v72 + v109;
        if (v72 + v109)
        {
          std::vector<double>::resize(a1 + 96, (unsigned __int16)(3 * v74 + 1));
          *(_WORD *)(a1 + 160) = v74;
          if (!*(_BYTE *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v74 + 1);
            if ((_DWORD)v69)
              goto LABEL_87;
            goto LABEL_101;
          }
LABEL_86:
          if ((_DWORD)v69)
            goto LABEL_87;
          goto LABEL_101;
        }
        *(_QWORD *)(a1 + 104) = v71;
        *(_WORD *)(a1 + 160) = 0;
        if (*(_BYTE *)(a1 + 162))
          goto LABEL_86;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
        if (!(_DWORD)v69)
        {
LABEL_101:
          v34 = v37;
          goto LABEL_102;
        }
LABEL_87:
        v75 = (unsigned __int16)((v70 - v71) >> 3);
        v76 = v73;
        v77 = v110;
        v78 = v109;
        v79 = (double)v109;
        v80 = (double *)*((_QWORD *)&v105 + 1);
        v81 = (_QWORD *)v104;
        v82 = *v102;
        v83 = *(_QWORD **)(a1 + 96);
        v84 = 3;
        v85 = 1;
        while (1)
        {
          if (v75)
          {
            if (v77)
              goto LABEL_90;
          }
          else
          {
            if (v77)
            {
              if ((_DWORD)v78)
                v87 = v107 + (v108 - v107) / v79 * 0.0;
              else
                v87 = v108;
            }
            else
            {
              v87 = *v80;
            }
            *v82 = v87;
            *v83 = *v81;
            ++v76;
            v75 = 1;
            if (v77)
            {
LABEL_90:
              if (v78 == v85)
                v86 = v108;
              else
                v86 = v107 + (double)(unsigned __int16)v85 * ((v108 - v107) / v79);
              goto LABEL_100;
            }
          }
          v86 = v80[v85];
LABEL_100:
          v82[v76] = v86;
          v83[(unsigned __int16)v75] = v81[(unsigned __int16)(v84 - 2)];
          v83[(unsigned __int16)(v75 + 1)] = v81[(unsigned __int16)(v84 - 1)];
          v83[(unsigned __int16)(v75 + 2)] = v81[(unsigned __int16)v84];
          ++v76;
          v75 += 3;
          ++v85;
          v84 += 3;
          if (v85 - v69 == 1)
            goto LABEL_101;
        }
      }
      v42 = *(_QWORD *)(v103 + 72);
      v43 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v103 + 80) - v42) >> 5);
      if ((v43 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v34)
      {
        LOWORD(v43) = v43 - 1;
        if (*(double *)(v103 + 200) > v34)
        {
          for (j = 0; ; j = v46 + 1)
          {
            v45 = j;
            while (1)
            {
              v46 = (v45 + (unsigned __int16)v43) >> 1;
              if (*(double *)(v42 + 96 * v46 + 48) <= v34)
                break;
              LOWORD(v43) = v46 - 1;
            }
            if (*(double *)(v42 + 96 * v46 + 56) > v34)
              break;
          }
          LODWORD(v43) = (v45 + (unsigned __int16)v43) >> 1;
        }
        v63 = (unsigned __int16)v43;
        v64 = (unsigned __int16)v43;
        v47 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v42 + 96 * (unsigned __int16)v43, v34);
        if (v64)
        {
          v48 = *(double *)(*(_QWORD *)(v38 + 48) + 8 * (v63 - 1));
LABEL_49:
          v41 = v47 + v48;
          v49 = v103;
          if (*(_BYTE *)(v103 + 208))
            goto LABEL_77;
          v50 = *(_QWORD *)(v103 + 72);
          v51 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v103 + 80) - v50) >> 5);
          if ((v51 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v39)
          {
            LOWORD(v51) = v51 - 1;
            if (*(double *)(v103 + 200) > v39)
            {
              for (k = 0; ; k = v54 + 1)
              {
                v53 = k;
                while (1)
                {
                  v54 = (v53 + (unsigned __int16)v51) >> 1;
                  if (*(double *)(v50 + 96 * v54 + 48) <= v39)
                    break;
                  LOWORD(v51) = v54 - 1;
                }
                if (*(double *)(v50 + 96 * v54 + 56) > v39)
                  break;
              }
              LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
            }
            v89 = (unsigned __int16)v51;
            v90 = (unsigned __int16)v51;
            v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v37 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              v56 = *(double *)(*(_QWORD *)(v49 + 48) + 8 * (v89 - 1));
LABEL_61:
              v39 = v55 + v56;
              v57 = v103;
              if (*(_BYTE *)(v103 + 208))
                goto LABEL_77;
              v58 = *(_QWORD *)(v103 + 72);
              v59 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v103 + 80) - v58) >> 5);
              if ((v59 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v40)
              {
                LOWORD(v59) = v59 - 1;
                if (*(double *)(v103 + 200) > v40)
                {
                  for (m = 0; ; m = v62 + 1)
                  {
                    v61 = m;
                    while (1)
                    {
                      v62 = (v61 + (unsigned __int16)v59) >> 1;
                      if (*(double *)(v58 + 96 * v62 + 48) <= v40)
                        break;
                      LOWORD(v59) = v62 - 1;
                    }
                    if (*(double *)(v58 + 96 * v62 + 56) > v40)
                      break;
                  }
                  LODWORD(v59) = (v61 + (unsigned __int16)v59) >> 1;
                }
                v98 = (unsigned __int16)v59;
                v99 = (unsigned __int16)v59;
                v65 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v58 + 96 * (unsigned __int16)v59, (v34 + v37 * 2.0) * 0.333333333);
                if (v99)
                {
                  v66 = *(double *)(*(_QWORD *)(v57 + 48) + 8 * (v98 - 1));
LABEL_76:
                  v40 = v65 + v66;
                  v67 = v103;
                  if (*(_BYTE *)(v103 + 208))
                    goto LABEL_77;
                  v91 = *(_QWORD *)(v103 + 72);
                  v92 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v103 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v37)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v103 + 200) > v37)
                    {
                      for (n = 0; ; n = v95 + 1)
                      {
                        v94 = n;
                        while (1)
                        {
                          v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v37)
                            break;
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v37)
                          break;
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    v100 = (unsigned __int16)v92;
                    v101 = (unsigned __int16)v92;
                    v96 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v91 + 96 * (unsigned __int16)v92, v37);
                    if (v101)
                    {
                      v97 = *(double *)(*(_QWORD *)(v67 + 48) + 8 * (v100 - 1));
                      goto LABEL_120;
                    }
                  }
                  else
                  {
                    v96 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v91, v37);
                  }
                  v97 = 0.0;
LABEL_120:
                  v68 = v96 + v97;
                  goto LABEL_78;
                }
              }
              else
              {
                v65 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v58, (v34 + v37 * 2.0) * 0.333333333);
              }
              v66 = 0.0;
              goto LABEL_76;
            }
          }
          else
          {
            v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50, (v37 + v34 * 2.0) * 0.333333333);
          }
          v56 = 0.0;
          goto LABEL_61;
        }
      }
      else
      {
        v47 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v42, v34);
      }
      v48 = 0.0;
      goto LABEL_49;
    }
    v88 = v33 >> 6;
LABEL_128:
    *(_BYTE *)(a1 + 208) = 1;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v32 + (v88 << 6) - 56);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v104);
  }
}

void _ZN4geom19interpolating_curveIDv2_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 1);
}

double _ZNK4geom19interpolating_curveIDv2_dE11evaluate_atEd(uint64_t a1, double a2)
{
  int v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  double result;
  uint64_t v14;
  double v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 208))
  {
    v14 = 0;
    v15 = 0.0;
    v16 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v14, a2);
    v3 = (unsigned __int16)(3 * v14);
    v4 = *(_QWORD *)(a1 + 96);
    v5 = 1.0 - v15;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v15 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v14)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v15 * v15 * ((1.0 - v15) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v15 * (v15 * v15));
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v6) >> 5);
  if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (i = 0; ; i = v10 + 1)
      {
        v9 = i;
        while (1)
        {
          v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(double *)(v6 + 96 * v10 + 48) <= a2)
            break;
          LOWORD(v7) = v10 - 1;
        }
        if (*(double *)(v6 + 96 * v10 + 56) > a2)
          break;
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  v11 = (_QWORD *)(v6 + 96 * (unsigned __int16)v7);
  v14 = 0;
  v15 = 0.0;
  v16 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v11, (uint64_t)&v14, a2);
  v12 = (unsigned __int16)(3 * v14);
  *(_QWORD *)&result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(*v11 + 16 * (v12 + 1)), v15 * ((1.0 - v15) * (1.0 - v15) * 3.0)), *(float64x2_t *)(*v11 + 16 * (unsigned __int16)(3 * v14)), (1.0 - v15) * ((1.0 - v15) * (1.0 - v15))), *(float64x2_t *)(*v11 + 16 * (v12 + 2)), v15 * v15 * ((1.0 - v15) * 3.0)), *(float64x2_t *)(*v11 + 16 * (v12 + 3)), v15 * (v15 * v15));
  return result;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_dE19evaluate_tangent_atEd(uint64_t a1, double a2)
{
  int v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 i;
  int v9;
  unsigned int v10;
  unsigned __int16 j;
  int v12;
  unsigned int v13;
  uint64_t v15;
  double v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 208))
  {
    v15 = 0;
    v16 = 0.0;
    v17 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v15, a2);
    v3 = (unsigned __int16)(3 * v15);
    v4 = *(_QWORD *)(a1 + 96);
    v5 = 1.0 - v16;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v16 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v15)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v16 * (v16 * v16));
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (i = 0; ; i = v10 + 1)
        {
          v9 = i;
          while (1)
          {
            v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v10 + 48) <= a2)
              break;
            LOWORD(v7) = v10 - 1;
          }
          if (*(double *)(v6 + 96 * v10 + 56) > a2)
            break;
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (j = 0; ; j = v13 + 1)
        {
          v12 = j;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v13 + 48) <= a2)
              break;
            LOWORD(v7) = v13 - 1;
          }
          if (*(double *)(v6 + 96 * v13 + 56) > a2)
            break;
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  v15 = 0;
  v16 = 0.0;
  v17 = 0;
  return geom::interpolating_spline<double>::find_span(v6 + 96 * (unsigned __int16)v7, (uint64_t)&v15, a2);
}

double _ZNK4geom19interpolating_curveIDv2_dE18evaluate_length_atEd(uint64_t a1, double result)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 i;
  int v7;
  unsigned int v8;
  double v9;
  double v10;
  int v11;
  int v12;

  if (!*(_BYTE *)(a1 + 208))
  {
    v4 = a1 + 72;
    v3 = *(_QWORD *)(a1 + 72);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (i = 0; ; i = v8 + 1)
        {
          v7 = i;
          while (1)
          {
            v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result)
              break;
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result)
            break;
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      v11 = (unsigned __int16)v5;
      v12 = (unsigned __int16)v5;
      v9 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        v10 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      v9 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v3, result);
    }
    v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

double _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  unsigned int v8;
  double v9;
  _WORD v11[12];

  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  v4 = v11[0];
  v5 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + _ZNK4geom20interpolating_splineIDv2_dE20evaluate_span_lengthEj(a1, v7++);
      while ((_DWORD)v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 66))
  {
    v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == (_DWORD)v4)
      v9 = *(double *)(a1 + 56);
    else
      v9 = *(double *)(a1 + 48)
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    v9 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v4);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEdd((_QWORD *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv2_dE10span_knotsEtRdS3_(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 66))
    {
      v20 = v18 + 96 * v9;
      v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      v23 = v21 + (double)v10 * v22;
      v24 = v22 + v23;
    }
    else
    {
      v25 = (double *)(*(_QWORD *)(v18 + 96 * v9 + 24) + 8 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v19, v23);
    v17 = v11
        + _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(*(_QWORD *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 66))
    {
      v13 = v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_dE33calculate_monomial_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float64x2_t v13;
  float64x2_t v14;

  v3 = a1[9];
  v4 = 96 * *(unsigned __int16 *)(*a1 + 2 * a2);
  v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *(_OWORD *)a3 = *(_OWORD *)(*(_QWORD *)(v3 + v4) + 16 * v6);
  __asm { FMOV            V1.2D, #3.0 }
  *(float64x2_t *)(a3 + 16) = vmulq_f64(vsubq_f64(*(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1)), *(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * v6)), _Q1);
  __asm { FMOV            V3.2D, #-2.0 }
  v13 = vmulq_f64(vaddq_f64(vmlaq_f64(*(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * v6), _Q3, *(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1))), *(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 2))), _Q1);
  *(float64x2_t *)(a3 + 32) = v13;
  v14 = vsubq_f64(vmlaq_f64(*(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 3)), _Q1, vsubq_f64(*(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * (v5 + 1)), *(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * (v6 + 2)))), *(float64x2_t *)(*(_QWORD *)(v3 + v4) + 16 * v6));
  *(float64x2_t *)(a3 + 48) = v14;
  if (sqrt(vaddvq_f64(vmulq_f64(v13, v13))) <= 0.000001 && sqrt(vaddvq_f64(vmulq_f64(v14, v14))) <= 0.000001)
    return 2;
  else
    return 4;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_dE31calculate_bezier_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v12;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;

  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v4 = *(_QWORD *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v5 = *(float64x2_t *)(v4
                      + 16
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v6 = *(float64x2_t *)(v4 + 16 * (v3 + 1));
  __asm { FMOV            V4.2D, #3.0 }
  v12 = vmulq_f64(vsubq_f64(v6, v5), _Q4);
  __asm { FMOV            V2.2D, #-2.0 }
  v14 = *(float64x2_t *)(v4 + 16 * (v3 + 2));
  v15 = vmulq_f64(vaddq_f64(vmlaq_f64(v5, _Q2, v6), v14), _Q4);
  v16 = vsubq_f64(vmlaq_f64(*(float64x2_t *)(v4 + 16 * (v3 + 3)), _Q4, vsubq_f64(v6, v14)), v5);
  if (sqrt(vaddvq_f64(vmulq_f64(v15, v15))) <= 0.000001 && sqrt(vaddvq_f64(vmulq_f64(v16, v16))) <= 0.000001)
  {
    *(float64x2_t *)a3 = v5;
    *(float64x2_t *)(a3 + 16) = vaddq_f64(v5, v12);
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    return 2;
  }
  else
  {
    v17 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    *(float64x2_t *)a3 = v5;
    *(float64x2_t *)(a3 + 16) = vmlaq_f64(v5, v17, v12);
    *(float64x2_t *)(a3 + 32) = vmlaq_f64(vmlaq_f64(v5, (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), v12), v17, v15);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(vaddq_f64(vaddq_f64(v5, v12), v15), v16);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv2_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1, float64x2_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  char *v20;
  uint64_t v21;
  _BYTE v23[96];
  _OWORD v24[4];
  unsigned __int16 v25;
  _QWORD v26[3];

  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(LODWORD((*a2)->f64[0]))
  {
    case 0:
      _ZN4geom19interpolating_curveIDv2_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv2_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv2_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv2_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + _ZNK4geom20interpolating_splineIDv2_dE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = _ZNK4geom20interpolating_splineIDv2_dE21evaluate_total_lengthEv((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (double *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      v13 = (double *)a1[6];
      v11 = (double *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (double *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_QWORD *)v11-- - 1);
      *((_QWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv2_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v15;
  double v16;
  double *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  unsigned __int16 v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<double>::resize((uint64_t)&v24, v5 + 1);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)v24 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    LOWORD(v9) = 0;
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      v15 = (float64x2_t *)(*(_QWORD *)a1 + v7);
      v16 = v15[4].f64[1];
      v17 = (double *)&v24[v8];
      v17[1] = v16;
      v18 = v15[1];
      v19 = vmulq_n_f64(vsubq_f64(v15[5], v18), v16 - *v17);
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v9) = v18;
      v20 = vdivq_f64(v19, _Q0);
      v21 = v9 + 2;
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v9 + 1)) = vaddq_f64(v15[1], v20);
      LOWORD(v9) = v9 + 3;
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * v21) = vsubq_f64(v15[5], v20);
      v8 += 8;
      v7 += 64;
    }
    while (8 * v5 != v8);
    v6 = *(_QWORD *)a1;
    v9 = (unsigned __int16)v9;
  }
  else
  {
    v9 = 0;
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v9) = *(_OWORD *)(v6 + (*((_QWORD *)a1 + 1) << 6) - 48);
  *(_BYTE *)(a2 + 66) = 0;
  if ((char **)(a2 + 24) != &v24)
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 3);
  v22 = v24;
  v23 = (uint64_t)v25;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v24;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v23 - 8);
  v25 = v22;
  operator delete(v22);
}

void _ZN4geom19interpolating_curveIDv2_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float64x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  float64x2_t *v4;
  __int16 v5;
  double *v11;
  float64x2_t *v12;
  float64x2_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float64x2_t *v22;
  float64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  float64x2_t *v28;
  double v29;
  float64x2_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  unsigned __int16 v65;
  unint64_t v66;
  char *v67;
  char *v68;
  float64x2_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *__p;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;

  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v4 = a1[1];
  v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v79, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<double>::resize((uint64_t)&v76, (unsigned __int16)((_WORD)v4 + 2));
  __asm { FMOV            V0.2D, #2.0 }
  *(float64x2_t *)v79 = vmlaq_f64(vnegq_f64((*a1)[5]), _Q0, (*a1)[1]);
  v11 = (double *)v76;
  *(_QWORD *)v76 = 0;
  v12 = *a1;
  v13 = vsubq_f64((*a1)[5], (*a1)[1]);
  v11[1] = sqrt(sqrt(vaddvq_f64(vmulq_f64(v13, v13))));
  if ((_WORD)v4 == 1)
  {
    v16 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = (unsigned __int16)((_WORD)v4 - 1);
    do
    {
      *((float64x2_t *)v79 + v15 + 1) = v12[v14 / 0x10 + 1];
      v17 = (double *)((char *)v76 + 8 * v15++);
      v12 = *a1;
      v18 = vsubq_f64((*a1)[v14 / 0x10 + 5], (*a1)[v14 / 0x10 + 1]);
      v17[2] = v17[1] + sqrt(sqrt(vaddvq_f64(vmulq_f64(v18, v18))));
      v14 += 64;
    }
    while ((unint64_t)(unsigned __int16)((_WORD)v4 - 1) << 6 != v14);
  }
  v19 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float64x2_t *)v79 + v19) = v12[4 * v16 + 1];
  v20 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float64x2_t *)v79 + v20) = vmlaq_f64(vnegq_f64(*((float64x2_t *)v79 + (unsigned __int16)((_WORD)v4 + 2) - 3)), _Q0, *((float64x2_t *)v79 + v19));
  v21 = *((double *)v76 + v19);
  v22 = &(*a1)[4 * (unint64_t)(unsigned __int16)((_WORD)v4 - 2)];
  v23 = vsubq_f64(v22[5], v22[1]);
  *((double *)v76 + v20) = v21 + sqrt(sqrt(vaddvq_f64(vmulq_f64(v23, v23))));
  if ((_WORD)v4 == 1)
  {
    v25 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
    {
      v25 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v16 + 1);
    v24 = 0;
    LOWORD(v25) = 0;
    __asm { FMOV            V1.2D, #3.0 }
    do
    {
      v27 = v24 + 2;
      v28 = (float64x2_t *)v79;
      v29 = *((double *)v76 + v24);
      v30 = *((float64x2_t *)v79 + v24);
      v31 = v24 + 1;
      v32 = *((double *)v76 + (v24 + 1));
      v33 = *((double *)v76 + (v24 + 2));
      v34 = *((double *)v76 + (v24 + 3));
      v35 = v33 - v32;
      v36 = 1.0 / (v32 - v29);
      v37 = 1.0 / (v33 - v29);
      v38 = 1.0 / (v33 - v32);
      v39 = v34 - v32;
      v40 = 1.0 / (v34 - v32);
      v41 = v34 - v33;
      v42 = 1.0 / (v34 - v33);
      v43 = *((float64x2_t *)v79 + (v24 + 1));
      v44 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v29 - v32), 0));
      v45 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v43, v44), v30, v32 - v32), v36);
      v46 = *((float64x2_t *)v79 + (v24 + 2));
      v47 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v32 - v32), 0));
      v48 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v46, v47), v43, v33 - v32), v38);
      v49 = *((float64x2_t *)v79 + (v24 + 3));
      v50 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v49, vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v33 - v32), 0))), v46, v39), v42);
      v51 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v48, v44), v45, v33 - v32), v37);
      v52 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v50, v47), v48, v39), v40);
      v53 = vmulq_n_f64(vsubq_f64(v43, v30), v36);
      v54 = vmulq_n_f64(vsubq_f64(v46, v43), v38);
      v55 = vmulq_n_f64(vsubq_f64(v49, v46), v42);
      v56 = vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v52, v51), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v48, v45), v53, v33 - v32), v54, v29 - v32, 0), v37), v33 - v32), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v50, v48), v54, v39), v55, v32 - v32, 0), v40), v32 - v32, 0), v38), v33 - v32);
      v57 = v29 - v33;
      v58 = v32 - v33;
      v59 = v33 - v33;
      v60 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0));
      v61 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v43, v60), v30, v58), v36);
      v62 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v58, 0));
      v63 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v46, v62), v43, v59), v38);
      v64 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v49, vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59, 0))), v46, v41), v42);
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v25) = v43;
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v25 + 1)) = vaddq_f64(v28[(v24 + 1)], vdivq_f64(v56, _Q1));
      v65 = v25 + 2;
      LOWORD(v25) = v25 + 3;
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * v65) = vsubq_f64(v28[v27], vdivq_f64(vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v64, v62), v63, v41), v40), vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v63, v60), v61, v59), v37)), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v63, v61), v53, v59), v54, v57, 0),
                                                                   v37),
                                                                 v59),
                                                               vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v64, v63), v54, v41), v55, v58, 0), v40), v58, 0), v38), v35), _Q1));
      v24 = v31;
    }
    while (v16 != v31);
    v25 = (unsigned __int16)v25;
  }
  *(float64x2_t *)(*(_QWORD *)a2 + 16 * v25) = (*a1)[4 * v16 + 1];
  v66 = (unint64_t)a1[1];
  v74 = 0;
  v75 = 0;
  __p = 0;
  if (v66)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v66);
    v67 = (char *)v74;
    bzero(v74, 8 * v66);
    v68 = &v67[8 * v66];
    v74 = v68;
    v69 = a1[1];
    v70 = (char *)__p;
    if (v69)
    {
      v71 = 0;
      v72 = (uint64_t)&(*a1)->f64[1];
      do
      {
        *(_QWORD *)&v70[v71] = *(_QWORD *)(v72 + 8 * v71);
        v71 += 8;
        v69 = (float64x2_t *)((char *)v69 - 1);
      }
      while (v69);
    }
  }
  else
  {
    v70 = 0;
    v68 = 0;
  }
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v70, (uint64_t)v68, (v68 - v70) >> 3);
    v70 = (char *)__p;
    v68 = (char *)v74;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v70;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v68 - 1);
  v74 = v70;
  operator delete(v70);
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
}

void _ZN4geom19interpolating_curveIDv2_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  __int16 v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double *v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  float64x2_t *v49;
  float64x2_t v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  void *__p;
  _BYTE *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  uint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v4 = a1[1];
  v56 = 0;
  v57 = 0;
  v55 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v55, v4);
    v5 = v56;
    bzero(v56, 8 * v4);
    v4 = (unint64_t)v5 + 8 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v55;
      v9 = (uint64_t *)(*a1 + 8);
      do
      {
        v10 = *v9;
        v9 += 8;
        *(_QWORD *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v55;
  v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v61, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  v13 = v12 - 1;
  v67[v12 - 1] = 0u;
  *v67 = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)__p + v12 - 1) = _Q1;
  *(_OWORD *)__p = _Q1;
  *((_OWORD *)v64 + v12 - 1) = 0u;
  *(_OWORD *)v64 = 0u;
  *((_OWORD *)v61 + v12 - 1) = 0u;
  *(_OWORD *)v61 = 0u;
  if (v12 - 1 >= 2)
  {
    v19 = 0;
    v20 = 0;
    v21 = (double *)(v11 + 8);
    do
    {
      v22 = *v21;
      *(double *)&v23 = *v21 - *(v21 - 1);
      v24 = v21[1];
      ++v21;
      *(double *)&v25 = v24 - v22;
      v67[v20 + 1] = vdupq_lane_s64(v23, 0);
      *((int64x2_t *)__p + v20 + 1) = vdupq_lane_s64(COERCE__INT64(*(double *)&v23 + *(double *)&v25 + *(double *)&v23+ *(double *)&v25), 0);
      *((int64x2_t *)v64 + v20 + 1) = vdupq_lane_s64(v25, 0);
      *((float64x2_t *)v61 + ++v20) = vmlaq_n_f64(vmulq_f64(vsubq_f64(*(float64x2_t *)(*a1 + v19 + 80), *(float64x2_t *)(*a1 + v19 + 16)), vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(3.0 / *(double *)&v23), 0))), vsubq_f64(*(float64x2_t *)(*a1 + v19 + 144), *(float64x2_t *)(*a1 + v19 + 80)), 3.0 / *(double *)&v25);
      v19 += 64;
    }
    while (v12 - 2 != v20);
  }
  v26 = v59 - (_BYTE *)__p;
  v27 = ((unint64_t)(v59 - (_BYTE *)__p) >> 4) - 1;
  *(float64x2_t *)v64 = vdivq_f64(*(float64x2_t *)v64, *(float64x2_t *)__p);
  *(float64x2_t *)v61 = vdivq_f64(*(float64x2_t *)v61, *(float64x2_t *)__p);
  if ((int)v27 > 1)
  {
    v28 = v27 - 1;
    v29 = 16;
    do
    {
      *(float64x2_t *)((char *)v64 + v29) = vdivq_f64(*(float64x2_t *)((char *)v64 + v29), vmlsq_f64(*(float64x2_t *)((char *)__p + v29), *(float64x2_t *)((char *)v64 + v29 - 16), (float64x2_t)v67[(unint64_t)v29 / 0x10]));
      *(float64x2_t *)((char *)v61 + v29) = vdivq_f64(vmlsq_f64(*(float64x2_t *)((char *)v61 + v29), *(float64x2_t *)((char *)v61 + v29 - 16), (float64x2_t)v67[(unint64_t)v29 / 0x10]), vmlsq_f64(*(float64x2_t *)((char *)__p + v29), *(float64x2_t *)((char *)v64 + v29 - 16), (float64x2_t)v67[(unint64_t)v29 / 0x10]));
      v29 += 16;
      --v28;
    }
    while (v28);
  }
  *((float64x2_t *)v61 + (int)v27) = vdivq_f64(vmlsq_f64(*((float64x2_t *)v61 + (int)v27), *(float64x2_t *)((char *)v61 + (((v26 << 28) - 0x200000000) >> 28)), (float64x2_t)v67[(int)v27]), vmlsq_f64(*((float64x2_t *)__p + (int)v27), *(float64x2_t *)((char *)v64 + (((v26 << 28) - 0x200000000) >> 28)), (float64x2_t)v67[(int)v27]));
  if ((int)v27 >= 1)
  {
    do
    {
      v30 = *((float64x2_t *)v61 + v27);
      v31 = v27-- > 1;
      *((float64x2_t *)v61 + v27) = vmlsq_f64(*((float64x2_t *)v61 + v27), v30, *((float64x2_t *)v64 + v27));
    }
    while (v31);
  }
  __asm { FMOV            V16.2D, #2.0 }
  if (v12 != 1)
  {
    v33 = 0;
    v34 = 0;
    v35 = (double *)(v11 + 8);
    do
    {
      v36 = *v35 - *(v35 - 1);
      *(float64x2_t *)((char *)v64 + v33) = vmlaq_n_f64(vmulq_f64(vmlaq_f64(*(float64x2_t *)((char *)v61 + v33 + 16), _Q16, *(float64x2_t *)((char *)v61 + v33)), vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v36 / 3.0), 0))), vsubq_f64(*(float64x2_t *)(*a1 + v34 + 80), *(float64x2_t *)(*a1 + v34 + 16)), 1.0 / v36);
      *(float64x2_t *)((char *)__p + v33) = vmulq_n_f64(vsubq_f64(*(float64x2_t *)((char *)v61 + v33 + 16), *(float64x2_t *)((char *)v61 + v33)), 1.0 / (v36 * 3.0));
      v34 += 64;
      v33 += 16;
      ++v35;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v37 = *((_WORD *)a1 + 4);
  v38 = v37 - 1;
  if (v37 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    v42 = 0;
    v41 = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    v54 = _Q16;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v38 + 1));
    *(_WORD *)(a2 + 64) = v38;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v38 + 1);
    v39 = 0;
    v40 = 0;
    LOWORD(v41) = 0;
    v42 = v38;
    __asm { FMOV            V1.2D, #3.0 }
    do
    {
      v44 = (double *)&v11[8 * v40];
      v45 = *((float64x2_t *)v64 + v40);
      v46 = *((float64x2_t *)v61 + v40);
      v47 = *((float64x2_t *)__p + v40);
      v48 = v40 + 1;
      v49 = (float64x2_t *)(*a1 + v39);
      v50 = v49[1];
      v51 = v49[5];
      v52 = v44[1] - *v44;
      v53 = vmulq_n_f64(vmlaq_n_f64(v45, vmlaq_f64(vmulq_n_f64(v47, (*v44 - *v44) * 3.0), v54, v46), *v44 - *v44), v52);
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v41) = v50;
      LOWORD(v44) = v41 + 2;
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v41 + 1)) = vaddq_f64(v50, vdivq_f64(v53, _Q1));
      LOWORD(v41) = v41 + 3;
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v44) = vsubq_f64(v51, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v45, vmlaq_f64(vmulq_n_f64(v47, v52 * 3.0), v54, v46), v52), v52), _Q1));
      v39 += 64;
      v40 = v48;
    }
    while (v38 != v48);
    v41 = (unsigned __int16)v41;
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v41) = *(_OWORD *)(*a1 + (v42 << 6) + 16);
  *(_BYTE *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 3);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v11;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void _ZN4geom19interpolating_curveIDv2_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  unsigned __int16 v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  std::vector<double>::resize((uint64_t)&v24, v5 + 1);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)v24 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v7 = 0;
    LOWORD(v8) = 0;
    v9 = 8;
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      v15 = (float64x2_t *)(*(_QWORD *)a1 + v7);
      v16 = v15[4].f64[1];
      v17 = *(double *)&v24[v9 - 8];
      *(double *)&v24[v9] = v16;
      v18 = v16 - v17;
      v19 = v15[6];
      v20 = vmulq_n_f64(v15[3], v18);
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)v8) = v15[1];
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * (unsigned __int16)(v8 + 1)) = vaddq_f64(vdivq_f64(v20, _Q0), v15[1]);
      v21 = v8 + 2;
      LOWORD(v8) = v8 + 3;
      *(float64x2_t *)(*(_QWORD *)a2 + 16 * v21) = vsubq_f64(v15[5], vdivq_f64(vmulq_n_f64(v19, v18), _Q0));
      v7 += 64;
      v9 += 8;
    }
    while ((unint64_t)v5 << 6 != v7);
    v6 = *(_QWORD *)a1;
    v8 = (unsigned __int16)v8;
  }
  else
  {
    v8 = 0;
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v8) = *(_OWORD *)(v6 + (*((_QWORD *)a1 + 1) << 6) - 48);
  *(_BYTE *)(a2 + 66) = 0;
  if ((char **)(a2 + 24) != &v24)
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 3);
  v22 = v24;
  v23 = (uint64_t)v25;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v24;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v23 - 8);
  v25 = v22;
  operator delete(v22);
}

double _ZNK4geom20interpolating_splineIDv2_dE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  double v3;

  v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64))
    v2 = *(_WORD *)(a1 + 64);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 66))
  {
    if (v1 == v2)
      v3 = *(double *)(a1 + 56);
    else
      v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
  }
  else
  {
    v3 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x155555555555555)
      v13 = 0x2AAAAAAAAAAAAAALL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[96 * v10];
    v18 = &v14[96 * v13];
    _ZN4geom20interpolating_splineIDv2_dEC2ERKS2_((uint64_t)v16, a2);
    v17 = v16 + 96;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = _ZN4geom20interpolating_splineIDv2_dEC2ERKS2_(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 96;
  }
  a1[1] = v9;
  return result;
}

void _ZN4geom19interpolating_curveIDv3_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  __int16 *v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int16 i;
  int v46;
  unsigned int v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int16 j;
  int v54;
  unsigned int v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int16 k;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  unsigned __int16 v74;
  unsigned __int16 v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  double v80;
  double *v81;
  _QWORD *v82;
  double *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  double v87;
  double v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int16 m;
  int v94;
  unsigned int v95;
  double v96;
  double v97;
  int v98;
  int v99;
  int v100;
  int v101;
  double **v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  double v108;
  double v109;
  unsigned __int16 v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115[2];
  char v116;
  _QWORD v117[6];
  char v118;

  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  v11 = v6;
  if (v8 != v10)
  {
    do
      v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 208) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    v12 = 0;
    v13 = -1;
  }
  else
  {
    v12 = 0;
    v13 = -1;
    v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 112 * v14) != *(_DWORD *)(*a2 + 112 * v12))
      {
        v13 = v14 - 1;
        *(_QWORD *)&v105 = *a2 + 112 * v12;
        *((_QWORD *)&v105 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        _ZN4geom19interpolating_curveIDv3_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float64x2_t **)&v105);
        v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(_QWORD *)&v105 = *a2 + 112 * v12;
    *((_QWORD *)&v105 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    _ZN4geom19interpolating_curveIDv3_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float64x2_t **)&v105);
  }
  v16 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v17 = 0;
    v18 = *v9;
    v19 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5) <= 1)
      v20 = 1;
    else
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5);
    v21 = (__int16 *)(v18 + 64);
    v22 = v20;
    do
    {
      v23 = *v21;
      v21 += 48;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    v24 = 0;
    v25 = 0;
    v26 = *(_QWORD *)(a1 + 72);
    do
    {
      v27 = *(unsigned __int16 *)(v26 + 96 * v24 + 64);
      if (*(_WORD *)(v26 + 96 * v24 + 64))
      {
        v28 = *(_QWORD *)a1;
        do
        {
          v29 = (v25 + 1);
          *(_WORD *)(v28 + 2 * (unsigned __int16)v25) = v24;
          LODWORD(v25) = v25 + 1;
          --v27;
        }
        while (v27);
      }
      else
      {
        v29 = v25;
      }
      ++v24;
      v25 = v29;
    }
    while (v24 != v20);
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(*a2 + 8);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2[1] - 104);
  if ((a3 & 1) != 0)
  {
    LOWORD(v115[0]) = 512;
    v115[1] = 0.001;
    v116 = 1;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v30 = *(_QWORD *)(a1 + 96);
    v103 = (_QWORD *)(a1 + 96);
    v104 = a1;
    *(_QWORD *)(a1 + 104) = v30;
    v31 = *(_QWORD *)(a1 + 120);
    v102 = (double **)(a1 + 120);
    *(_WORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 162) = 0;
    *(_QWORD *)(a1 + 128) = v31;
    v32 = *a2;
    v33 = a2[1] - *a2;
    if (v33)
      v34 = *(double *)(v32 + 8);
    else
      v34 = 0.0;
    v35 = 0x6DB6DB6DB6DB6DB7 * (v33 >> 4);
    if (v35 >= 2)
    {
      v36 = 1;
      while (1)
      {
        v37 = *(_DWORD *)(v32 + 112 * v36);
        if (v37 == *(_DWORD *)(v32 + 112 * (v36 - 1)))
          break;
LABEL_101:
        v36 = (v36 + 1);
        v32 = *a2;
        v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
        if (v35 <= v36)
          goto LABEL_126;
      }
      v38 = *(double *)(v32 + 112 * v36 + 8);
      LOBYTE(v115[0]) = v37 != 0;
      v110 = 0;
      v39 = v104;
      v111 = 0;
      *((_QWORD *)&v105 + 1) = v105;
      *(_QWORD *)&v107 = *((_QWORD *)&v106 + 1);
      v40 = (v38 + v34 * 2.0) * 0.333333333;
      v41 = (v34 + v38 * 2.0) * 0.333333333;
      if (*(_BYTE *)(v104 + 208))
      {
        v42 = v34;
LABEL_76:
        v69 = v38;
LABEL_77:
        *(double *)v117 = v34;
        *(double *)&v117[1] = v38;
        *(double *)&v117[2] = v42;
        *(double *)&v117[3] = v40;
        *(double *)&v117[4] = v41;
        *(double *)&v117[5] = v69;
        v118 = 0;
        _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v104, (uint64_t)v117, v115, (uint64_t)&v105);
        v70 = v110;
        v71 = *(_DWORD *)(a1 + 104);
        v72 = *(_QWORD *)(a1 + 96);
        v73 = *(_WORD *)(a1 + 160);
        if (v73)
          v74 = v73 + 1;
        else
          v74 = 0;
        v75 = v73 + v110;
        if (v73 + v110)
        {
          std::vector<double>::resize((uint64_t)v103, (unsigned __int16)(3 * v75 + 1));
          *(_WORD *)(a1 + 160) = v75;
          if (!*(_BYTE *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v75 + 1);
            if ((_DWORD)v70)
              goto LABEL_86;
            goto LABEL_100;
          }
LABEL_85:
          if ((_DWORD)v70)
            goto LABEL_86;
          goto LABEL_100;
        }
        *(_QWORD *)(a1 + 104) = v72;
        *(_WORD *)(a1 + 160) = 0;
        if (*(_BYTE *)(a1 + 162))
          goto LABEL_85;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
        if (!(_DWORD)v70)
        {
LABEL_100:
          v34 = v38;
          goto LABEL_101;
        }
LABEL_86:
        v76 = (unsigned __int16)((v71 - v72) >> 3);
        v77 = v74;
        v78 = v111;
        v79 = v110;
        v80 = (double)v110;
        v81 = (double *)*((_QWORD *)&v106 + 1);
        v82 = (_QWORD *)v105;
        v83 = *v102;
        v84 = (_QWORD *)*v103;
        v85 = 3;
        v86 = 1;
        while (1)
        {
          if (v76)
          {
            if (v78)
              goto LABEL_89;
          }
          else
          {
            if (v78)
            {
              if ((_DWORD)v79)
                v88 = v108 + (v109 - v108) / v80 * 0.0;
              else
                v88 = v109;
            }
            else
            {
              v88 = *v81;
            }
            *v83 = v88;
            *v84 = *v82;
            ++v77;
            v76 = 1;
            if (v78)
            {
LABEL_89:
              if (v79 == v86)
                v87 = v109;
              else
                v87 = v108 + (double)(unsigned __int16)v86 * ((v109 - v108) / v80);
              goto LABEL_99;
            }
          }
          v87 = v81[v86];
LABEL_99:
          v83[v77] = v87;
          v84[(unsigned __int16)v76] = v82[(unsigned __int16)(v85 - 2)];
          v84[(unsigned __int16)(v76 + 1)] = v82[(unsigned __int16)(v85 - 1)];
          v84[(unsigned __int16)(v76 + 2)] = v82[(unsigned __int16)v85];
          ++v77;
          v76 += 3;
          ++v86;
          v85 += 3;
          if (v86 - v70 == 1)
            goto LABEL_100;
        }
      }
      v43 = *(_QWORD *)(v104 + 72);
      v44 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v43) >> 5);
      if ((v44 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v34)
      {
        LOWORD(v44) = v44 - 1;
        if (*(double *)(v104 + 200) > v34)
        {
          for (i = 0; ; i = v47 + 1)
          {
            v46 = i;
            while (1)
            {
              v47 = (v46 + (unsigned __int16)v44) >> 1;
              if (*(double *)(v43 + 96 * v47 + 48) <= v34)
                break;
              LOWORD(v44) = v47 - 1;
            }
            if (*(double *)(v43 + 96 * v47 + 56) > v34)
              break;
          }
          LODWORD(v44) = (v46 + (unsigned __int16)v44) >> 1;
        }
        v64 = (unsigned __int16)v44;
        v65 = (unsigned __int16)v44;
        v48 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v43 + 96 * (unsigned __int16)v44, v34);
        if (v65)
        {
          v49 = *(double *)(*(_QWORD *)(v39 + 48) + 8 * (v64 - 1));
LABEL_48:
          v42 = v48 + v49;
          v50 = v104;
          if (*(_BYTE *)(v104 + 208))
            goto LABEL_76;
          v51 = *(_QWORD *)(v104 + 72);
          v52 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v51) >> 5);
          if ((v52 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v40)
          {
            LOWORD(v52) = v52 - 1;
            if (*(double *)(v104 + 200) > v40)
            {
              for (j = 0; ; j = v55 + 1)
              {
                v54 = j;
                while (1)
                {
                  v55 = (v54 + (unsigned __int16)v52) >> 1;
                  if (*(double *)(v51 + 96 * v55 + 48) <= v40)
                    break;
                  LOWORD(v52) = v55 - 1;
                }
                if (*(double *)(v51 + 96 * v55 + 56) > v40)
                  break;
              }
              LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
            }
            v89 = (unsigned __int16)v52;
            v90 = (unsigned __int16)v52;
            v56 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v51 + 96 * (unsigned __int16)v52, (v38 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              v57 = *(double *)(*(_QWORD *)(v50 + 48) + 8 * (v89 - 1));
LABEL_60:
              v40 = v56 + v57;
              v58 = v104;
              if (*(_BYTE *)(v104 + 208))
                goto LABEL_76;
              v59 = *(_QWORD *)(v104 + 72);
              v60 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v59) >> 5);
              if ((v60 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v41)
              {
                LOWORD(v60) = v60 - 1;
                if (*(double *)(v104 + 200) > v41)
                {
                  for (k = 0; ; k = v63 + 1)
                  {
                    v62 = k;
                    while (1)
                    {
                      v63 = (v62 + (unsigned __int16)v60) >> 1;
                      if (*(double *)(v59 + 96 * v63 + 48) <= v41)
                        break;
                      LOWORD(v60) = v63 - 1;
                    }
                    if (*(double *)(v59 + 96 * v63 + 56) > v41)
                      break;
                  }
                  LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
                }
                v98 = (unsigned __int16)v60;
                v99 = (unsigned __int16)v60;
                v66 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v59 + 96 * (unsigned __int16)v60, (v34 + v38 * 2.0) * 0.333333333);
                if (v99)
                {
                  v67 = *(double *)(*(_QWORD *)(v58 + 48) + 8 * (v98 - 1));
LABEL_75:
                  v41 = v66 + v67;
                  v68 = v104;
                  if (*(_BYTE *)(v104 + 208))
                    goto LABEL_76;
                  v91 = *(_QWORD *)(v104 + 72);
                  v92 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v38)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v104 + 200) > v38)
                    {
                      for (m = 0; ; m = v95 + 1)
                      {
                        v94 = m;
                        while (1)
                        {
                          v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v38)
                            break;
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v38)
                          break;
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    v100 = (unsigned __int16)v92;
                    v101 = (unsigned __int16)v92;
                    v96 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v91 + 96 * (unsigned __int16)v92, v38);
                    if (v101)
                    {
                      v97 = *(double *)(*(_QWORD *)(v68 + 48) + 8 * (v100 - 1));
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    v96 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v91, v38);
                  }
                  v97 = 0.0;
LABEL_119:
                  v69 = v96 + v97;
                  goto LABEL_77;
                }
              }
              else
              {
                v66 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v59, (v34 + v38 * 2.0) * 0.333333333);
              }
              v67 = 0.0;
              goto LABEL_75;
            }
          }
          else
          {
            v56 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v51, (v38 + v34 * 2.0) * 0.333333333);
          }
          v57 = 0.0;
          goto LABEL_60;
        }
      }
      else
      {
        v48 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v43, v34);
      }
      v49 = 0.0;
      goto LABEL_48;
    }
LABEL_126:
    *(_BYTE *)(a1 + 208) = 1;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v32 + 112 * v35 - 104);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v105);
  }
}

void _ZN4geom19interpolating_curveIDv3_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 1);
}

float64_t _ZNK4geom19interpolating_curveIDv3_dE11evaluate_atEd@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 i;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v26;
  double v27;
  uint64_t v28;

  if (*(_BYTE *)(a1 + 208))
  {
    v26 = 0;
    v27 = 0.0;
    v28 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v26, a3);
    v5 = (unsigned __int16)(3 * v26);
    v6 = *(_QWORD *)(a1 + 96);
    v7 = 1.0 - v27;
    a3 = *(double *)(v6 + 8 * (v5 + 1)) * (v27 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v26)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v27 * v27 * ((1.0 - v27) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v27 * (v27 * v27));
  }
  v8 = *(_QWORD *)(a1 + 72);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v8) >> 5);
  if ((v9 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
  {
    LOWORD(v9) = v9 - 1;
    if (*(double *)(a1 + 200) > a3)
    {
      for (i = 0; ; i = v12 + 1)
      {
        v11 = i;
        while (1)
        {
          v12 = (v11 + (unsigned __int16)v9) >> 1;
          if (*(double *)(v8 + 96 * v12 + 48) <= a3)
            break;
          LOWORD(v9) = v12 - 1;
        }
        if (*(double *)(v8 + 96 * v12 + 56) > a3)
          break;
      }
      LODWORD(v9) = (v11 + (unsigned __int16)v9) >> 1;
    }
  }
  else
  {
    LOWORD(v9) = 0;
  }
  v13 = (_QWORD *)(v8 + 96 * (unsigned __int16)v9);
  v26 = 0;
  v27 = 0.0;
  v28 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v13, (uint64_t)&v26, a3);
  v23.f64[0] = v27;
  v14 = (unsigned __int16)(3 * v26);
  v15 = (float64x2_t *)(*v13 + 32 * (unsigned __int16)(3 * v26));
  v16 = (float64x2_t *)(*v13 + 32 * (v14 + 1));
  v17 = (float64x2_t *)(*v13 + 32 * (v14 + 2));
  v18 = (float64x2_t *)(*v13 + 32 * (v14 + 3));
  v19 = 1.0 - v27;
  v20.f64[0] = v19 * (v19 * v19);
  v21.f64[0] = v27 * (v19 * v19 * 3.0);
  v22.f64[0] = v23.f64[0] * v23.f64[0] * ((1.0 - v27) * 3.0);
  v23.f64[0] = v23.f64[0] * (v23.f64[0] * v23.f64[0]);
  v24 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16[1], v21), v20, v15[1]), v22, v17[1]), v23, v18[1]);
  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v16, v21.f64[0]), *v15, v20.f64[0]), *v17, v22.f64[0]), *v18, v23.f64[0]);
  a2[1] = v24;
  return v23.f64[0];
}

uint64_t _ZNK4geom19interpolating_curveIDv3_dE19evaluate_tangent_atEd@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 i;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t result;
  float64x2_t v16;
  int v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 j;
  int v39;
  unsigned int v40;
  _QWORD *v41;
  float64x2_t v42;
  int v43;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  uint64_t v59;
  double v60;
  double v61;

  if (*(_BYTE *)(a1 + 208))
  {
    v59 = 0;
    v60 = 0.0;
    v61 = 0.0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v59, a3);
    v5 = (unsigned __int16)(3 * v59);
    v6 = *(_QWORD *)(a1 + 96);
    v7 = 1.0 - v60;
    v8 = *(double *)(v6 + 8 * (v5 + 1)) * (v60 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v59)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v60 * v60 * ((1.0 - v60) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v60 * (v60 * v60));
    v9 = *(_QWORD *)(a1 + 72);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v9) >> 5);
    if ((v10 & 0xFFFE) != 0 && *(double *)(a1 + 192) < v8)
    {
      LOWORD(v10) = v10 - 1;
      if (*(double *)(a1 + 200) > v8)
      {
        for (i = 0; ; i = v13 + 1)
        {
          v12 = i;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v10) >> 1;
            if (*(double *)(v9 + 96 * v13 + 48) <= v8)
              break;
            LOWORD(v10) = v13 - 1;
          }
          if (*(double *)(v9 + 96 * v13 + 56) > v8)
            break;
        }
        LODWORD(v10) = (v12 + (unsigned __int16)v10) >> 1;
      }
    }
    else
    {
      LOWORD(v10) = 0;
    }
    v14 = (_QWORD *)(v9 + 96 * (unsigned __int16)v10);
    v59 = 0;
    v60 = 0.0;
    v61 = 0.0;
    result = geom::interpolating_spline<double>::find_span((uint64_t)v14, (uint64_t)&v59, v8);
    v16.f64[0] = v61 * 3.0;
    v17 = (unsigned __int16)(3 * v59);
    v18 = *v14 + 32 * (v17 + 1);
    v19 = *(float64x2_t *)(v18 + 16);
    v20 = (float64x2_t *)(*v14 + 32 * (unsigned __int16)(3 * v59));
    v21 = vsubq_f64(*(float64x2_t *)v18, *v20);
    v22 = vsubq_f64(v19, v20[1]);
    v23 = *v14 + 32 * (v17 + 2);
    v24 = *(float64x2_t *)v23;
    v25 = *(float64x2_t *)(v23 + 16);
    v26 = vsubq_f64(v25, v19);
    v27 = vsubq_f64(*(float64x2_t *)v23, *(float64x2_t *)v18);
    v28 = *v14 + 32 * (v17 + 3);
    v29 = *(float64x2_t *)v28;
    v30 = *(float64x2_t *)(v28 + 16);
    v31 = vsubq_f64(v30, v25);
    v29.f64[0] = 1.0 - v60;
    v30.f64[0] = v29.f64[0] * v29.f64[0];
    v29.f64[0] = v60 * (v29.f64[0] + v29.f64[0]);
    v32.f64[0] = v60 * v60;
    v33 = vmulq_f64(v16, vmlaq_f64(vmlaq_f64(vmulq_f64(v29, v26), v30, v22), v32, v31));
    v34 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, v29.f64[0]), v21, v30.f64[0]), vsubq_f64(*(float64x2_t *)v28, v24), v60 * v60), v61 * 3.0);
    v35 = vmulq_f64(v33, v33);
    *(float *)v35.f64 = sqrt(v35.f64[0] + vaddvq_f64(vmulq_f64(v34, v34)));
    if (*(float *)v35.f64 > 0.0)
    {
      v35.f64[0] = 1.0 / *(float *)v35.f64;
      v33 = vmulq_f64(v33, v35);
      *(_QWORD *)&v34.f64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
      v34 = vmulq_n_f64(v34, v35.f64[0]);
    }
  }
  else
  {
    v36 = *(_QWORD *)(a1 + 72);
    v37 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v36) >> 5);
    if ((v37 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
    {
      LOWORD(v37) = v37 - 1;
      if (*(double *)(a1 + 200) > a3)
      {
        for (j = 0; ; j = v40 + 1)
        {
          v39 = j;
          while (1)
          {
            v40 = (v39 + (unsigned __int16)v37) >> 1;
            if (*(double *)(v36 + 96 * v40 + 48) <= a3)
              break;
            LOWORD(v37) = v40 - 1;
          }
          if (*(double *)(v36 + 96 * v40 + 56) > a3)
            break;
        }
        LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
      }
    }
    else
    {
      LOWORD(v37) = 0;
    }
    v41 = (_QWORD *)(v36 + 96 * (unsigned __int16)v37);
    v59 = 0;
    v60 = 0.0;
    v61 = 0.0;
    result = geom::interpolating_spline<double>::find_span((uint64_t)v41, (uint64_t)&v59, a3);
    v42.f64[0] = v61 * 3.0;
    v43 = (unsigned __int16)(3 * v59);
    v44 = *v41 + 32 * (v43 + 1);
    v45 = *(float64x2_t *)(v44 + 16);
    v46 = (float64x2_t *)(*v41 + 32 * (unsigned __int16)(3 * v59));
    v47 = vsubq_f64(*(float64x2_t *)v44, *v46);
    v48 = vsubq_f64(v45, v46[1]);
    v49 = *v41 + 32 * (v43 + 2);
    v50 = *(float64x2_t *)v49;
    v51 = *(float64x2_t *)(v49 + 16);
    v52 = vsubq_f64(v51, v45);
    v53 = vsubq_f64(*(float64x2_t *)v49, *(float64x2_t *)v44);
    v54 = *v41 + 32 * (v43 + 3);
    v55 = *(float64x2_t *)v54;
    v56 = *(float64x2_t *)(v54 + 16);
    v57 = vsubq_f64(v56, v51);
    v55.f64[0] = 1.0 - v60;
    v56.f64[0] = v55.f64[0] * v55.f64[0];
    v55.f64[0] = v60 * (v55.f64[0] + v55.f64[0]);
    v58.f64[0] = v60 * v60;
    v33 = vmulq_f64(v42, vmlaq_f64(vmlaq_f64(vmulq_f64(v55, v52), v56, v48), v58, v57));
    v34 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v53, v55.f64[0]), v47, v56.f64[0]), vsubq_f64(*(float64x2_t *)v54, v50), v60 * v60), v61 * 3.0);
  }
  *a2 = v34;
  a2[1] = v33;
  return result;
}

double _ZNK4geom19interpolating_curveIDv3_dE18evaluate_length_atEd(uint64_t a1, double result)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 i;
  int v7;
  unsigned int v8;
  double v9;
  double v10;
  int v11;
  int v12;

  if (!*(_BYTE *)(a1 + 208))
  {
    v4 = a1 + 72;
    v3 = *(_QWORD *)(a1 + 72);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (i = 0; ; i = v8 + 1)
        {
          v7 = i;
          while (1)
          {
            v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result)
              break;
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result)
            break;
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      v11 = (unsigned __int16)v5;
      v12 = (unsigned __int16)v5;
      v9 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        v10 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      v9 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v3, result);
    }
    v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

double _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  unsigned int v8;
  double v9;
  _WORD v11[12];

  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  v4 = v11[0];
  v5 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + _ZNK4geom20interpolating_splineIDv3_dE20evaluate_span_lengthEj(a1, v7++);
      while ((_DWORD)v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 66))
  {
    v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == (_DWORD)v4)
      v9 = *(double *)(a1 + 56);
    else
      v9 = *(double *)(a1 + 48)
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    v9 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v4);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEdd((_QWORD *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv3_dE10span_knotsEtRdS3_(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 66))
    {
      v20 = v18 + 96 * v9;
      v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      v23 = v21 + (double)v10 * v22;
      v24 = v22 + v23;
    }
    else
    {
      v25 = (double *)(*(_QWORD *)(v18 + 96 * v9 + 24) + 8 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v19, v23);
    v17 = v11
        + _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(*(_QWORD *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 66))
    {
      v13 = v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv3_dE33calculate_monomial_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t v40;
  float64x2_t v41;

  v3 = a1[9];
  v4 = 96 * *(unsigned __int16 *)(*a1 + 2 * a2);
  v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v7 = (_OWORD *)(*(_QWORD *)(v3 + v4) + 32 * v6);
  v8 = v7[1];
  *(_OWORD *)a3 = *v7;
  *(_OWORD *)(a3 + 16) = v8;
  v9 = *(_QWORD *)(v3 + v4);
  v10 = (v5 + 1);
  v11 = (float64x2_t *)(v9 + 32 * v10);
  v12 = (float64x2_t *)(v9 + 32 * v6);
  __asm { FMOV            V2.2D, #3.0 }
  v18 = vmulq_f64(vsubq_f64(v11[1], v12[1]), _Q2);
  *(float64x2_t *)(a3 + 32) = vmulq_f64(vsubq_f64(*v11, *v12), _Q2);
  *(float64x2_t *)(a3 + 48) = v18;
  v19 = *(_QWORD *)(v3 + v4);
  v20 = (float64x2_t *)(v19 + 32 * v6);
  v22 = *v20;
  v21 = v20[1];
  v23 = (float64x2_t *)(v19 + 32 * v10);
  __asm { FMOV            V5.2D, #-2.0 }
  v25 = vmlaq_f64(v22, _Q5, *v23);
  v26 = vmlaq_f64(v21, _Q5, v23[1]);
  v27 = (v5 + 2);
  v28 = (float64x2_t *)(v19 + 32 * v27);
  v29 = vmulq_f64(vaddq_f64(v25, *v28), _Q2);
  v30 = vmulq_f64(vaddq_f64(v26, v28[1]), _Q2);
  *(float64x2_t *)(a3 + 64) = v29;
  *(float64x2_t *)(a3 + 80) = v30;
  v31 = *(_QWORD *)(v3 + v4);
  v32 = (float64x2_t *)(v31 + 32 * (v5 + 3));
  v34 = *v32;
  v33 = v32[1];
  v35 = (float64x2_t *)(v31 + 32 * v10);
  v36 = *v35;
  v37 = v35[1];
  v38 = (float64x2_t *)(v31 + 32 * v27);
  v39 = (float64x2_t *)(v31 + 32 * v6);
  v40 = vsubq_f64(vmlaq_f64(v33, _Q2, vsubq_f64(v37, v38[1])), v39[1]);
  v41 = vsubq_f64(vmlaq_f64(v34, _Q2, vsubq_f64(v36, *v38)), *v39);
  *(float64x2_t *)(a3 + 96) = v41;
  *(float64x2_t *)(a3 + 112) = v40;
  if (sqrt(vmulq_f64(v30, v30).f64[0] + vaddvq_f64(vmulq_f64(v29, v29))) <= 0.000001
    && (*(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0],
        sqrt(vmulq_f64(v40, v40).f64[0] + vaddvq_f64(vmulq_f64(v41, v41))) <= 0.000001))
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv3_dE31calculate_bezier_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  float64x2_t v3;
  int v4;
  uint64_t v5;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;

  v4 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v5 = *(_QWORD *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v6 = (float64x2_t *)(v5
                     + 32
                     * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v7 = *v6;
  v8 = v6[1];
  v9 = (float64x2_t *)(v5 + 32 * (v4 + 1));
  v11 = *v9;
  v10 = v9[1];
  __asm { FMOV            V16.2D, #3.0 }
  v17 = vmulq_f64(vsubq_f64(v10, v8), _Q16);
  v18 = vmulq_f64(vsubq_f64(*v9, v7), _Q16);
  __asm { FMOV            V4.2D, #-2.0 }
  v20 = vmlaq_f64(v7, _Q4, *v9);
  v21 = (float64x2_t *)(v5 + 32 * (v4 + 2));
  v22 = v21[1];
  v23 = vmulq_f64(vaddq_f64(vmlaq_f64(v8, _Q4, v10), v22), _Q16);
  v24 = vmulq_f64(vaddq_f64(v20, *v21), _Q16);
  v25 = (float64x2_t *)(v5 + 32 * (v4 + 3));
  v26 = vmlaq_f64(*v25, _Q16, vsubq_f64(v11, *v21));
  v27 = vsubq_f64(vmlaq_f64(v25[1], _Q16, vsubq_f64(v10, v22)), v8);
  v28 = vsubq_f64(v26, v7);
  if (sqrt(vmulq_f64(v23, v23).f64[0] + vaddvq_f64(vmulq_f64(v24, v24))) <= 0.000001
    && (v29.f64[0] = v28.f64[0],
        *(_QWORD *)&v29.f64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0],
        sqrt(vmulq_f64(v27, v27).f64[0] + vaddvq_f64(vmulq_f64(v29, v29))) <= 0.000001))
  {
    *(float64x2_t *)a3 = v7;
    *(float64x2_t *)(a3 + 16) = v8;
    *(float64x2_t *)(a3 + 32) = vaddq_f64(v7, v18);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(v8, v17);
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    return 2;
  }
  else
  {
    v30.f64[0] = v18.f64[0];
    *(_QWORD *)&v30.f64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
    v31.f64[0] = v7.f64[0];
    *(_QWORD *)&v31.f64[1] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    v32 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    v33 = vmlaq_f64(v31, v32, v30);
    v3.f64[0] = 0.333333333;
    *(float64x2_t *)(a3 + 32) = v33;
    *(float64x2_t *)(a3 + 48) = vmlaq_f64(v8, v3, v17);
    v33.f64[0] = 0.666666667;
    *(float64x2_t *)a3 = v7;
    *(float64x2_t *)(a3 + 16) = v8;
    v34 = vmlaq_f64(v31, (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), v30);
    v30.f64[0] = v24.f64[0];
    *(_QWORD *)&v30.f64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    *(float64x2_t *)(a3 + 64) = vmlaq_f64(v34, v32, v30);
    *(float64x2_t *)(a3 + 80) = vmlaq_f64(vmlaq_f64(v8, v33, v17), v3, v23);
    *(float64x2_t *)(a3 + 96) = vaddq_f64(vaddq_f64(vaddq_f64(v7, v18), v24), v28);
    *(float64x2_t *)(a3 + 112) = vaddq_f64(vaddq_f64(vaddq_f64(v8, v17), v23), v27);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv3_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1, float64x2_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  char *v20;
  uint64_t v21;
  _BYTE v23[96];
  _OWORD v24[4];
  unsigned __int16 v25;
  _QWORD v26[3];

  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(LODWORD((*a2)->f64[0]))
  {
    case 0:
      _ZN4geom19interpolating_curveIDv3_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv3_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv3_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv3_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + _ZNK4geom20interpolating_splineIDv3_dE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = _ZNK4geom20interpolating_splineIDv3_dE21evaluate_total_lengthEv((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (double *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      v13 = (double *)a1[6];
      v11 = (double *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (double *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_QWORD *)v11-- - 1);
      *((_QWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv3_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  float64x2_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  uint64_t v29;
  __int128 v30;
  _OWORD *v31;
  void *__p;
  char *v33;
  uint64_t v34;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v33 = 0;
  v34 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  v7 = *(_QWORD *)a1;
  v8 = (char *)__p;
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v9 = 0;
    LOWORD(v10) = 0;
    v11 = (double *)(v8 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      v17 = (float64x2_t *)(*(_QWORD *)a1 + v9);
      v6.f64[0] = v17[7].f64[1];
      *v11 = v6.f64[0];
      v6.f64[0] = v6.f64[0] - *(v11 - 1);
      v18 = v17[1];
      v19 = v17[2];
      v20 = vmulq_n_f64(vsubq_f64(v17[8], v18), v6.f64[0]);
      v21 = vmulq_f64(v6, vsubq_f64(v17[9], v19));
      v22 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v10);
      *v22 = v18;
      v22[1] = v19;
      LOWORD(v22) = v10 + 2;
      v23 = vdivq_f64(v21, _Q0);
      v24 = vdivq_f64(v20, _Q0);
      v25 = vaddq_f64(v17[2], v23);
      v26 = *(_QWORD *)a2 + 32 * (unsigned __int16)(v10 + 1);
      *(float64x2_t *)v26 = vaddq_f64(v17[1], v24);
      *(float64x2_t *)(v26 + 16) = v25;
      LOWORD(v10) = v10 + 3;
      v27 = vsubq_f64(v17[8], v24);
      v6 = vsubq_f64(v17[9], v23);
      v28 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v22);
      *v28 = v27;
      v28[1] = v6;
      v9 += 112;
      ++v11;
    }
    while (112 * v5 != v9);
    v7 = *(_QWORD *)a1;
    v10 = (unsigned __int16)v10;
  }
  else
  {
    v10 = 0;
  }
  v29 = v7 + 112 * *((_QWORD *)a1 + 1);
  v30 = *(_OWORD *)(v29 - 80);
  v31 = (_OWORD *)(*(_QWORD *)a2 + 32 * v10);
  *v31 = *(_OWORD *)(v29 - 96);
  v31[1] = v30;
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v33, (v33 - v8) >> 3);
    v8 = (char *)__p;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v8;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v33 - 1);
  v33 = v8;
  operator delete(v8);
}

void _ZN4geom19interpolating_curveIDv3_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float64x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  float64x2_t *v4;
  __int16 v5;
  float64x2_t v11;
  char *v12;
  double *v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  _OWORD *v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  uint64_t v49;
  float64_t *v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  float64x2_t *v55;
  uint64_t v56;
  double v57;
  float64x2_t *v58;
  float64x2_t *v59;
  double v60;
  float64x2_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t *v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  float64x2_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  _OWORD *v120;
  unint64_t v121;
  char *v122;
  char *v123;
  float64x2_t *v124;
  char *v125;
  float64x2_t *v126;
  uint64_t *v127;
  uint64_t v128;
  float64x2_t v129;
  float64x2_t v130;
  void *__p;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  uint64_t v139;

  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v4 = a1[1];
  v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v137, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<double>::resize((uint64_t)&v134, (unsigned __int16)((_WORD)v4 + 2));
  __asm { FMOV            V0.2D, #2.0 }
  v11 = vmlaq_f64(vnegq_f64((*a1)[9]), _Q0, (*a1)[2]);
  v12 = (char *)v137;
  *(float64x2_t *)v137 = vmlaq_f64(vnegq_f64((*a1)[8]), _Q0, (*a1)[1]);
  *((float64x2_t *)v12 + 1) = v11;
  v13 = (double *)v134;
  *(_QWORD *)v134 = 0;
  v14 = *a1;
  v15 = vsubq_f64((*a1)[8], (*a1)[1]);
  v16 = vsubq_f64((*a1)[9], (*a1)[2]);
  v13[1] = sqrt(sqrt(vmulq_f64(v16, v16).f64[0] + vaddvq_f64(vmulq_f64(v15, v15))));
  if ((_WORD)v4 == 1)
  {
    v18 = 0;
  }
  else
  {
    v17 = 0;
    v18 = (unsigned __int16)((_WORD)v4 - 1);
    v19 = v13 + 2;
    v20 = v12 + 32;
    do
    {
      v21 = &v14[v17];
      v22 = v21[2];
      *v20 = v21[1];
      v20[1] = v22;
      v20 += 2;
      v14 = *a1;
      v23 = &(*a1)[v17];
      v24 = vsubq_f64(v23[8], v23[1]);
      v25 = vsubq_f64(v23[9], v23[2]);
      *v19 = *(v19 - 1) + sqrt(sqrt(vmulq_f64(v25, v25).f64[0] + vaddvq_f64(vmulq_f64(v24, v24))));
      ++v19;
      v17 += 7;
    }
    while (7 * (unsigned __int16)((_WORD)v4 - 1) != v17);
  }
  v26 = &v14[7 * v18];
  v27 = v26[1];
  v28 = v26[2];
  v29 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  v30 = (float64x2_t *)&v12[32 * v29];
  *v30 = v27;
  v30[1] = v28;
  v31 = (float64x2_t *)&v12[32 * (unsigned __int16)((_WORD)v4 + 2)];
  v32 = vmlaq_f64(vnegq_f64(v31[-5]), _Q0, v28);
  v33 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  v34 = (float64x2_t *)&v12[32 * v33];
  *v34 = vmlaq_f64(vnegq_f64(v31[-6]), _Q0, v27);
  v34[1] = v32;
  v35 = &(*a1)[7 * (unsigned __int16)((_WORD)v4 - 2)];
  v36 = vsubq_f64(v35[8], v35[1]);
  v37 = vsubq_f64(v35[9], v35[2]);
  v13[v33] = v13[v29] + sqrt(sqrt(vmulq_f64(v37, v37).f64[0] + vaddvq_f64(vmulq_f64(v36, v36))));
  if ((_WORD)v4 == 1)
  {
    v49 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
    {
      v49 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v18 + 1);
    v48 = 0;
    LOWORD(v49) = 0;
    v50 = (float64_t *)v134;
    v51 = (char *)v137;
    __asm { FMOV            V0.2D, #3.0 }
    v129 = _Q0;
    do
    {
      v53 = (v48 + 2);
      v42.f64[0] = v50[v48];
      v54 = (v48 + 3);
      v55 = (float64x2_t *)&v51[32 * v48];
      v56 = v48 + 1;
      v57 = v50[(v48 + 1)];
      v44.f64[0] = v50[v53];
      v58 = (float64x2_t *)&v51[32 * (v48 + 1)];
      v59 = (float64x2_t *)&v51[32 * v53];
      v60 = v50[v54];
      v38.f64[0] = v44.f64[0] - v57;
      v43.f64[0] = 1.0 / (v57 - v42.f64[0]);
      v39.f64[0] = 1.0 / (v44.f64[0] - v57);
      v46.f64[0] = v60 - v57;
      v40.f64[0] = v60 - v44.f64[0];
      v41.f64[0] = 1.0 / (v60 - v44.f64[0]);
      v47.f64[0] = v42.f64[0] - v57;
      v45.f64[0] = v57 - v57;
      v61 = (float64x2_t *)&v51[32 * v54];
      v62 = v55[1];
      v63 = v58[1];
      v64 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v42.f64[0] - v57), 0));
      v65 = vnegq_f64(v47);
      v66 = vmulq_f64(v43, vmlaq_f64(vmulq_f64(v63, v65), v62, v45));
      v67 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v58, v64), *v55, v57 - v57), v43.f64[0]);
      v68 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v44.f64[0] - v57), 0);
      v69 = v59[1];
      v70 = vnegq_f64(v45);
      v71 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v57 - v57), 0));
      v72 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v59, v71), *v58, v44.f64[0] - v57), v39.f64[0]);
      v73 = vmulq_f64(v39, vmlaq_f64(vmulq_f64(v69, v70), v63, v38));
      v74 = vmlaq_n_f64(vmulq_f64(v72, v64), v67, v44.f64[0] - v57);
      v75 = vmlaq_f64(vmulq_f64(v73, v65), v66, v38);
      v130 = vmulq_f64(v43, vsubq_f64(v63, v62));
      v76 = vmulq_n_f64(vsubq_f64(*v58, *v55), v43.f64[0]);
      v77 = vmulq_n_f64(vsubq_f64(*v59, *v58), v39.f64[0]);
      v78 = vmulq_f64(v39, vsubq_f64(v69, v63));
      v79 = vmlsq_f64(vmlaq_f64(vsubq_f64(v73, v66), v130, v38), v78, v47);
      v80 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v72, v67), v76, v44.f64[0] - v57), v77, v42.f64[0] - v57, 0);
      v81 = v61[1];
      v82 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v61, vnegq_f64(v68)), *v59, v46.f64[0]), v41.f64[0]);
      v83 = vmlaq_n_f64(vmulq_f64(v82, v71), v72, v46.f64[0]);
      v84 = vsubq_f64(v82, v72);
      v85 = vmulq_f64(v41, vmlaq_f64(vmulq_f64(v81, vnegq_f64(v38)), v69, v46));
      v86 = vmlaq_f64(vmulq_f64(v85, v70), v73, v46);
      v68.f64[0] = 1.0 / (v44.f64[0] - v42.f64[0]);
      v87 = vmlaq_f64(vsubq_f64(v85, v73), v78, v46);
      v88 = vmlaq_n_f64(v84, v77, v46.f64[0]);
      v46.f64[0] = 1.0 / v46.f64[0];
      v89 = vmlaq_f64(vsubq_f64(vmulq_f64(v46, v86), vmulq_f64(v68, v75)), vmulq_f64(v68, v79), v38);
      v90 = vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v83, v46.f64[0]), vmulq_n_f64(v74, v68.f64[0])), vmulq_n_f64(v80, v68.f64[0]), v44.f64[0] - v57);
      v91 = vmulq_f64(v41, vsubq_f64(v81, v69));
      v92 = vmulq_n_f64(vsubq_f64(*v61, *v59), v41.f64[0]);
      v47 = vmlsq_lane_f64(v90, vmulq_n_f64(vmlsq_lane_f64(v88, v92, v57 - v57, 0), v46.f64[0]), v57 - v57, 0);
      v93 = vmlsq_f64(v89, vmulq_f64(v46, vmlsq_f64(v87, v91, v45)), v45);
      v45.f64[0] = v42.f64[0] - v44.f64[0];
      v42.f64[0] = v57 - v44.f64[0];
      v44.f64[0] = v44.f64[0] - v44.f64[0];
      v94 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45.f64[0], 0));
      v95 = vnegq_f64(v45);
      v96 = vmulq_f64(v43, vmlaq_f64(vmulq_f64(v63, v95), v62, v42));
      v97 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v58, v94), *v55, v42.f64[0]), v43.f64[0]);
      v98 = vnegq_f64(v42);
      v99 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42.f64[0], 0));
      v100 = vmlaq_f64(vmulq_f64(v81, vnegq_f64(v44)), v69, v40);
      v101 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v59, v99), *v58, v44.f64[0]), v39.f64[0]);
      v102 = vmulq_f64(v39, vmlaq_f64(vmulq_f64(v69, v98), v63, v44));
      v103 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v61, vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v44.f64[0], 0))), *v59, v40.f64[0]), v41.f64[0]);
      v104 = vmulq_f64(v41, v100);
      v105 = vmlaq_n_f64(vsubq_f64(v101, v97), v76, v44.f64[0]);
      v106 = vmlsq_f64(vmlaq_f64(vsubq_f64(v102, v96), v130, v44), v78, v45);
      v107 = vmlsq_lane_f64(v105, v77, v45.f64[0], 0);
      v45 = vmlaq_f64(vmulq_f64(v104, v98), v102, v40);
      v108 = vmlaq_n_f64(vsubq_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v103, v99), v101, v40.f64[0]), v46.f64[0]), vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v101, v94), v97, v44.f64[0]), v68.f64[0])), vmulq_n_f64(v107, v68.f64[0]), v44.f64[0]);
      v43 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v103, v101), v77, v40.f64[0]), v92, v42.f64[0], 0);
      v109 = vmlsq_f64(vmlaq_f64(vsubq_f64(vmulq_f64(v46, v45), vmulq_f64(v68, vmlaq_f64(vmulq_f64(v102, v95), v96, v44))), vmulq_f64(v68, v106), v44), vmulq_f64(v46, vmlsq_f64(vmlaq_f64(vsubq_f64(v104, v102), v78, v40), v91, v42)), v42);
      v41 = vmulq_n_f64(v47, v39.f64[0]);
      v40 = vmulq_f64(v38, vmulq_f64(v39, v93));
      v110 = vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(v108, vmulq_n_f64(v43, v46.f64[0]), v42.f64[0], 0), v39.f64[0]), v38.f64[0]);
      v111 = vmulq_f64(v38, vmulq_f64(v39, v109));
      v112 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v49);
      *v112 = *v58;
      v112[1] = v63;
      v113 = vaddq_f64(*v58, vdivq_f64(vmulq_n_f64(v41, v38.f64[0]), v129));
      v39 = vdivq_f64(v40, v129);
      v114 = vaddq_f64(v58[1], v39);
      v115 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)(v49 + 1));
      *v115 = v113;
      v115[1] = v114;
      v116 = vsubq_f64(*v59, vdivq_f64(v110, v129));
      v38 = v59[1];
      v117 = *(_QWORD *)a2 + 32 * (unsigned __int16)(v49 + 2);
      *(float64x2_t *)v117 = v116;
      *(float64x2_t *)(v117 + 16) = vsubq_f64(v38, vdivq_f64(v111, v129));
      LOWORD(v49) = v49 + 3;
      v48 = v56;
    }
    while (v18 != v56);
    v49 = (unsigned __int16)v49;
  }
  v118 = (uint64_t)&(*a1)[7 * v18];
  v119 = *(_OWORD *)(v118 + 32);
  v120 = (_OWORD *)(*(_QWORD *)a2 + 32 * v49);
  *v120 = *(_OWORD *)(v118 + 16);
  v120[1] = v119;
  v121 = (unint64_t)a1[1];
  v132 = 0;
  v133 = 0;
  __p = 0;
  if (v121)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v121);
    v122 = (char *)v132;
    bzero(v132, 8 * v121);
    v123 = &v122[8 * v121];
    v132 = v123;
    v124 = a1[1];
    v125 = (char *)__p;
    if (v124)
    {
      v126 = 0;
      v127 = (uint64_t *)&(*a1)->f64[1];
      do
      {
        v128 = *v127;
        v127 += 14;
        *(_QWORD *)&v125[8 * (_QWORD)v126] = v128;
        v126 = (float64x2_t *)((char *)v126 + 1);
      }
      while (v124 != v126);
    }
  }
  else
  {
    v125 = 0;
    v123 = 0;
  }
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v125, (uint64_t)v123, (v123 - v125) >> 3);
    v125 = (char *)__p;
    v123 = (char *)v132;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v125;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v123 - 1);
  v132 = v125;
  operator delete(v125);
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
}

void _ZN4geom19interpolating_curveIDv3_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  unint64_t v15;
  float64x2_t *v16;
  char *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t *v25;
  _OWORD *v26;
  float64x2_t *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  float64_t *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  int64_t v40;
  unint64_t v41;
  float64x2_t v42;
  float64x2_t v43;
  unint64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64x2_t *v47;
  float64x2_t *v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t *v68;
  BOOL v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t v72;
  uint64_t v74;
  double *v75;
  float64x2_t *v76;
  float64x2_t *v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  __int16 v81;
  unsigned __int16 v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  uint64_t v86;
  uint64_t v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t *v90;
  unsigned int v91;
  double *v92;
  uint64_t v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t *v111;
  float64x2_t *v112;
  float64x2_t v113;
  float64x2_t *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  _OWORD *v118;
  float64x2_t v119;
  char *v120;
  void *v121;
  uint64_t v122;
  void *__p;
  _BYTE *v124;
  uint64_t v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  float64x2_t *v132;
  float64x2_t *v133;
  uint64_t v134;

  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  __p = 0;
  v124 = 0;
  v125 = 0;
  v4 = a1[1];
  v121 = 0;
  v122 = 0;
  v120 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v120, v4);
    v5 = v121;
    bzero(v121, 8 * v4);
    v4 = (unint64_t)v5 + 8 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v120;
      v9 = (uint64_t *)(*a1 + 8);
      do
      {
        v10 = *v9;
        v9 += 14;
        *(_QWORD *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v120;
  v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v132, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v129, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v126, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  v15 = v12 - 1;
  v16 = v132;
  v17 = (char *)&v132[2 * v12 - 2];
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *v16 = 0u;
  v16[1] = 0u;
  v18 = (float64x2_t *)__p;
  v19 = (float64x2_t *)((char *)__p + 32 * v12 - 32);
  __asm { FMOV            V1.2D, #1.0 }
  *v19 = _Q1;
  v19[1] = _Q1;
  *v18 = _Q1;
  v18[1] = _Q1;
  v25 = (float64x2_t *)v129;
  v26 = (char *)v129 + 32 * v12 - 32;
  *v26 = 0u;
  v26[1] = 0u;
  *v25 = 0u;
  v25[1] = 0u;
  v27 = (float64x2_t *)v126;
  v28 = (char *)v126 + 32 * v12 - 32;
  *v28 = 0u;
  v28[1] = 0u;
  *v27 = 0u;
  v27[1] = 0u;
  if (v12 - 1 >= 2)
  {
    v29 = 0;
    v30 = 0;
    v31 = (float64_t *)(v11 + 8);
    do
    {
      _Q1.f64[0] = *v31;
      v13.f64[0] = *v31 - *(v31 - 1);
      v32 = v31[1];
      ++v31;
      _Q1.f64[0] = v32 - _Q1.f64[0];
      v14.f64[0] = v13.f64[0] + _Q1.f64[0] + v13.f64[0] + _Q1.f64[0];
      v33 = (uint64_t)&v16[2 * v30 + 2];
      *(int64x2_t *)v33 = vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0);
      *(float64x2_t *)(v33 + 16) = v13;
      v34 = (uint64_t)&v18[2 * v30 + 2];
      v35 = (uint64_t)&v25[2 * v30 + 2];
      *(int64x2_t *)v34 = vdupq_lane_s64(*(uint64_t *)&v14.f64[0], 0);
      *(float64x2_t *)(v34 + 16) = v14;
      *(int64x2_t *)v35 = vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
      *(float64x2_t *)(v35 + 16) = _Q1;
      _Q1.f64[0] = 3.0 / _Q1.f64[0];
      v36 = (float64x2_t *)(*a1 + v29);
      v13.f64[0] = 3.0 / v13.f64[0];
      v37 = v36[8];
      v14 = vsubq_f64(v36[15], v37);
      v38 = vmlaq_n_f64(vmulq_f64(vsubq_f64(v37, v36[1]), vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0))), v14, _Q1.f64[0]);
      v13 = vmlaq_f64(vmulq_f64(vsubq_f64(v36[9], v36[2]), vnegq_f64(v13)), vsubq_f64(v36[16], v36[9]), _Q1);
      v39 = &v27[2 * v30 + 2];
      *v39 = v38;
      v39[1] = v13;
      ++v30;
      v29 += 112;
    }
    while (v12 - 2 != v30);
  }
  v40 = v124 - (_BYTE *)v18;
  v41 = ((unint64_t)(v124 - (_BYTE *)v18) >> 5) - 1;
  v42 = vdivq_f64(v25[1], v18[1]);
  *v25 = vdivq_f64(*v25, *v18);
  v25[1] = v42;
  v43 = vdivq_f64(v27[1], v18[1]);
  *v27 = vdivq_f64(*v27, *v18);
  v27[1] = v43;
  if ((int)v41 > 1)
  {
    v44 = v41 - 1;
    v45 = v18 + 2;
    v46 = v16 + 2;
    v47 = v27 + 2;
    v48 = v25 + 2;
    do
    {
      v50 = v48[-2];
      v49 = v48[-1];
      v51 = vdivq_f64(v48[1], vmlsq_f64(v45[1], v49, v46[1]));
      *v48 = vdivq_f64(*v48, vmlsq_f64(*v45, v50, *v46));
      v48[1] = v51;
      v48 += 2;
      v53 = *v46;
      v52 = v46[1];
      v46 += 2;
      v55 = *v45;
      v54 = v45[1];
      v45 += 2;
      v56 = vdivq_f64(vmlsq_f64(v47[1], v47[-1], v52), vmlsq_f64(v54, v49, v52));
      *v47 = vdivq_f64(vmlsq_f64(*v47, v47[-2], v53), vmlsq_f64(v55, v50, v53));
      v47[1] = v56;
      v47 += 2;
      --v44;
    }
    while (v44);
  }
  v57 = &v27[2 * (int)v41];
  v58 = &v16[2 * (int)v41];
  v60 = *v58;
  v59 = v58[1];
  v61 = (v40 << 27) - 0x200000000;
  v62 = (float64x2_t *)((char *)v27 + (v61 >> 27));
  v63 = vmlsq_f64(*v57, *v62, v60);
  v64 = vmlsq_f64(v57[1], v62[1], v59);
  v65 = &v18[2 * (int)v41];
  v66 = (float64x2_t *)((char *)v25 + (v61 >> 27));
  v67 = vdivq_f64(v64, vmlsq_f64(v65[1], v66[1], v59));
  *v57 = vdivq_f64(v63, vmlsq_f64(*v65, *v66, v60));
  v57[1] = v67;
  if ((int)v41 >= 1)
  {
    do
    {
      v68 = &v27[2 * v41];
      v69 = v41-- > 1;
      v70 = &v25[2 * v41];
      v59 = *v68;
      v60 = v68[1];
      v71 = &v27[2 * v41];
      v72 = vmlsq_f64(v71[1], v60, v70[1]);
      *v71 = vmlsq_f64(*v71, v59, *v70);
      v71[1] = v72;
    }
    while (v69);
  }
  __asm { FMOV            V20.2D, #2.0 }
  if (v12 != 1)
  {
    v74 = 0;
    v75 = (double *)(v11 + 8);
    v76 = v27 + 2;
    do
    {
      v59.f64[0] = *v75 - *(v75 - 1);
      v60.f64[0] = 1.0 / v59.f64[0];
      v77 = (float64x2_t *)(*a1 + v74);
      v78 = v77[1];
      v79 = vsubq_f64(v77[8], v78);
      v78.f64[0] = v59.f64[0] / 3.0;
      v80 = vmlaq_f64(vmulq_f64(vmlaq_f64(v76[1], _Q20, v76[-1]), vnegq_f64(v78)), vsubq_f64(v77[9], v77[2]), v60);
      *v25 = vmlaq_n_f64(vmulq_f64(vmlaq_f64(*v76, _Q20, v76[-2]), vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v59.f64[0] / 3.0), 0))), v79, 1.0 / v59.f64[0]);
      v25[1] = v80;
      v25 += 2;
      v59.f64[0] = 1.0 / (v59.f64[0] * 3.0);
      v60 = vmulq_n_f64(vsubq_f64(*v76, v76[-2]), v59.f64[0]);
      v59 = vmulq_f64(v59, vsubq_f64(v76[1], v76[-1]));
      v74 += 112;
      *v18 = v60;
      v18[1] = v59;
      v18 += 2;
      ++v75;
      v76 += 2;
      --v15;
    }
    while (v15);
  }
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v81 = *((_WORD *)a1 + 4);
  v82 = v81 - 1;
  if (v81 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    v91 = 0;
    v87 = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    v119 = _Q20;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v82 + 1));
    *(_WORD *)(a2 + 64) = v82;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v82 + 1);
    v86 = 0;
    LOWORD(v87) = 0;
    v88 = (float64x2_t *)v129;
    v89 = (float64x2_t *)v126;
    v90 = (float64x2_t *)__p;
    v91 = v82;
    v92 = (double *)(v11 + 8);
    __asm { FMOV            V1.2D, #3.0 }
    v94 = v82;
    do
    {
      v83.f64[0] = *(v92 - 1);
      v95 = (float64x2_t *)(*a1 + v86);
      v84.f64[0] = *v92 - v83.f64[0];
      v83.f64[0] = v83.f64[0] - v83.f64[0];
      v96 = v95[1];
      v97 = v95[2];
      v98 = *v88;
      v99 = v88[1];
      v88 += 2;
      v101 = *v89;
      v100 = v89[1];
      v89 += 2;
      v103 = v95[8];
      v102 = v95[9];
      v85.f64[0] = v83.f64[0] * 3.0;
      v104 = *v90;
      v105 = v90[1];
      v90 += 2;
      v106 = vmulq_f64(v85, v105);
      v107 = vmlaq_f64(vmulq_n_f64(v104, v83.f64[0] * 3.0), v119, v101);
      v108 = vmlaq_f64(v99, vmlaq_f64(v106, v119, v100), v83);
      v109 = vmulq_n_f64(vmlaq_n_f64(v98, v107, v83.f64[0]), v84.f64[0]);
      v107.f64[0] = v84.f64[0] * 3.0;
      v110 = vmulq_f64(v107, v105);
      v85 = vmlaq_f64(vmulq_n_f64(v104, v84.f64[0] * 3.0), v119, v101);
      v111 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v87);
      *v111 = v96;
      v111[1] = v97;
      v112 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)(v87 + 1));
      LOWORD(v111) = v87 + 2;
      *v112 = vaddq_f64(v96, vdivq_f64(v109, _Q1));
      v112[1] = vaddq_f64(v97, vdivq_f64(vmulq_f64(v84, v108), _Q1));
      LOWORD(v87) = v87 + 3;
      v113 = vdivq_f64(vmulq_f64(v84, vmlaq_f64(v99, vmlaq_f64(v110, v119, v100), v84)), _Q1);
      v84 = vsubq_f64(v103, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v98, v85, v84.f64[0]), v84.f64[0]), _Q1));
      v83 = vsubq_f64(v102, v113);
      v114 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v111);
      ++v92;
      v86 += 112;
      *v114 = v84;
      v114[1] = v83;
      --v94;
    }
    while (v94);
    v87 = (unsigned __int16)v87;
  }
  v115 = *a1 + 112 * v91;
  v116 = *(_OWORD *)(v115 + 16);
  v117 = *(_OWORD *)(v115 + 32);
  v118 = (_OWORD *)(*(_QWORD *)a2 + 32 * v87);
  *v118 = v116;
  v118[1] = v117;
  *(_BYTE *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 3);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v11;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    v124 = __p;
    operator delete(__p);
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
}

void _ZN4geom19interpolating_curveIDv3_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  float64x2_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  _OWORD *v23;
  float64x2_t v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  uint64_t v28;
  __int128 v29;
  _OWORD *v30;
  void *__p;
  char *v32;
  uint64_t v33;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v32 = 0;
  v33 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  v7 = *(_QWORD *)a1;
  v8 = (char *)__p;
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v9 = 0;
    LOWORD(v10) = 0;
    v11 = (double *)(v8 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      v17 = (float64x2_t *)(*(_QWORD *)a1 + v9);
      v6.f64[0] = v17[7].f64[1];
      *v11 = v6.f64[0];
      v6.f64[0] = v6.f64[0] - *(v11 - 1);
      v18 = vmulq_n_f64(v17[5], v6.f64[0]);
      v19 = vmulq_f64(v17[6], v6);
      v20 = vmulq_n_f64(v17[10], v6.f64[0]);
      v21 = vmulq_f64(v17[11], v6);
      v22 = v17[2];
      v23 = (_OWORD *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v10);
      *v23 = v17[1];
      v23[1] = v22;
      LOWORD(v23) = v10 + 2;
      v24 = vaddq_f64(vdivq_f64(v19, _Q0), v17[2]);
      v25 = *(_QWORD *)a2 + 32 * (unsigned __int16)(v10 + 1);
      *(float64x2_t *)v25 = vaddq_f64(vdivq_f64(v18, _Q0), v17[1]);
      *(float64x2_t *)(v25 + 16) = v24;
      LOWORD(v10) = v10 + 3;
      v26 = vsubq_f64(v17[8], vdivq_f64(v20, _Q0));
      v6 = vsubq_f64(v17[9], vdivq_f64(v21, _Q0));
      v27 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v23);
      *v27 = v26;
      v27[1] = v6;
      v9 += 112;
      ++v11;
    }
    while (112 * v5 != v9);
    v7 = *(_QWORD *)a1;
    v10 = (unsigned __int16)v10;
  }
  else
  {
    v10 = 0;
  }
  v28 = v7 + 112 * *((_QWORD *)a1 + 1);
  v29 = *(_OWORD *)(v28 - 80);
  v30 = (_OWORD *)(*(_QWORD *)a2 + 32 * v10);
  *v30 = *(_OWORD *)(v28 - 96);
  v30[1] = v29;
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v32, (v32 - v8) >> 3);
    v8 = (char *)__p;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v8;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v32 - 1);
  v32 = v8;
  operator delete(v8);
}

double _ZNK4geom20interpolating_splineIDv3_dE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  double v3;

  v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64))
    v2 = *(_WORD *)(a1 + 64);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 66))
  {
    if (v1 == v2)
      v3 = *(double *)(a1 + 56);
    else
      v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
  }
  else
  {
    v3 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x155555555555555)
      v13 = 0x2AAAAAAAAAAAAAALL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[96 * v10];
    v18 = &v14[96 * v13];
    _ZN4geom20interpolating_splineIDv3_dEC2ERKS2_((uint64_t)v16, a2);
    v17 = v16 + 96;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = _ZN4geom20interpolating_splineIDv3_dEC2ERKS2_(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 96;
  }
  a1[1] = v9;
  return result;
}

void _ZN4geom19interpolating_curveIDv4_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  __int16 *v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int16 i;
  int v46;
  unsigned int v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int16 j;
  int v54;
  unsigned int v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int16 k;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  unsigned __int16 v74;
  unsigned __int16 v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  double v80;
  double *v81;
  _QWORD *v82;
  double *v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  double v87;
  double v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int16 m;
  int v94;
  unsigned int v95;
  double v96;
  double v97;
  int v98;
  int v99;
  int v100;
  int v101;
  double **v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  double v108;
  double v109;
  unsigned __int16 v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115[2];
  char v116;
  _QWORD v117[6];
  char v118;

  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  v10 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (uint64_t *)(a1 + 72);
  v11 = v6;
  if (v8 != v10)
  {
    do
      v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  }
  *(_QWORD *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(_BYTE *)(a1 + 208) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    v12 = 0;
    v13 = -1;
  }
  else
  {
    v12 = 0;
    v13 = -1;
    v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 112 * v14) != *(_DWORD *)(*a2 + 112 * v12))
      {
        v13 = v14 - 1;
        *(_QWORD *)&v105 = *a2 + 112 * v12;
        *((_QWORD *)&v105 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        _ZN4geom19interpolating_curveIDv4_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float64x2_t **)&v105);
        v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(_QWORD *)&v105 = *a2 + 112 * v12;
    *((_QWORD *)&v105 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    _ZN4geom19interpolating_curveIDv4_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((_QWORD *)a1, (float64x2_t **)&v105);
  }
  v16 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    v17 = 0;
    v18 = *v9;
    v19 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5) <= 1)
      v20 = 1;
    else
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5);
    v21 = (__int16 *)(v18 + 64);
    v22 = v20;
    do
    {
      v23 = *v21;
      v21 += 48;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    v24 = 0;
    v25 = 0;
    v26 = *(_QWORD *)(a1 + 72);
    do
    {
      v27 = *(unsigned __int16 *)(v26 + 96 * v24 + 64);
      if (*(_WORD *)(v26 + 96 * v24 + 64))
      {
        v28 = *(_QWORD *)a1;
        do
        {
          v29 = (v25 + 1);
          *(_WORD *)(v28 + 2 * (unsigned __int16)v25) = v24;
          LODWORD(v25) = v25 + 1;
          --v27;
        }
        while (v27);
      }
      else
      {
        v29 = v25;
      }
      ++v24;
      v25 = v29;
    }
    while (v24 != v20);
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(*a2 + 8);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2[1] - 104);
  if ((a3 & 1) != 0)
  {
    LOWORD(v115[0]) = 512;
    v115[1] = 0.001;
    v116 = 1;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v30 = *(_QWORD *)(a1 + 96);
    v103 = (_QWORD *)(a1 + 96);
    v104 = a1;
    *(_QWORD *)(a1 + 104) = v30;
    v31 = *(_QWORD *)(a1 + 120);
    v102 = (double **)(a1 + 120);
    *(_WORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 162) = 0;
    *(_QWORD *)(a1 + 128) = v31;
    v32 = *a2;
    v33 = a2[1] - *a2;
    if (v33)
      v34 = *(double *)(v32 + 8);
    else
      v34 = 0.0;
    v35 = 0x6DB6DB6DB6DB6DB7 * (v33 >> 4);
    if (v35 >= 2)
    {
      v36 = 1;
      while (1)
      {
        v37 = *(_DWORD *)(v32 + 112 * v36);
        if (v37 == *(_DWORD *)(v32 + 112 * (v36 - 1)))
          break;
LABEL_101:
        v36 = (v36 + 1);
        v32 = *a2;
        v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
        if (v35 <= v36)
          goto LABEL_126;
      }
      v38 = *(double *)(v32 + 112 * v36 + 8);
      LOBYTE(v115[0]) = v37 != 0;
      v110 = 0;
      v39 = v104;
      v111 = 0;
      *((_QWORD *)&v105 + 1) = v105;
      *(_QWORD *)&v107 = *((_QWORD *)&v106 + 1);
      v40 = (v38 + v34 * 2.0) * 0.333333333;
      v41 = (v34 + v38 * 2.0) * 0.333333333;
      if (*(_BYTE *)(v104 + 208))
      {
        v42 = v34;
LABEL_76:
        v69 = v38;
LABEL_77:
        *(double *)v117 = v34;
        *(double *)&v117[1] = v38;
        *(double *)&v117[2] = v42;
        *(double *)&v117[3] = v40;
        *(double *)&v117[4] = v41;
        *(double *)&v117[5] = v69;
        v118 = 0;
        _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v104, (uint64_t)v117, v115, (uint64_t)&v105);
        v70 = v110;
        v71 = *(_DWORD *)(a1 + 104);
        v72 = *(_QWORD *)(a1 + 96);
        v73 = *(_WORD *)(a1 + 160);
        if (v73)
          v74 = v73 + 1;
        else
          v74 = 0;
        v75 = v73 + v110;
        if (v73 + v110)
        {
          std::vector<double>::resize((uint64_t)v103, (unsigned __int16)(3 * v75 + 1));
          *(_WORD *)(a1 + 160) = v75;
          if (!*(_BYTE *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v75 + 1);
            if ((_DWORD)v70)
              goto LABEL_86;
            goto LABEL_100;
          }
LABEL_85:
          if ((_DWORD)v70)
            goto LABEL_86;
          goto LABEL_100;
        }
        *(_QWORD *)(a1 + 104) = v72;
        *(_WORD *)(a1 + 160) = 0;
        if (*(_BYTE *)(a1 + 162))
          goto LABEL_85;
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
        if (!(_DWORD)v70)
        {
LABEL_100:
          v34 = v38;
          goto LABEL_101;
        }
LABEL_86:
        v76 = (unsigned __int16)((v71 - v72) >> 3);
        v77 = v74;
        v78 = v111;
        v79 = v110;
        v80 = (double)v110;
        v81 = (double *)*((_QWORD *)&v106 + 1);
        v82 = (_QWORD *)v105;
        v83 = *v102;
        v84 = (_QWORD *)*v103;
        v85 = 3;
        v86 = 1;
        while (1)
        {
          if (v76)
          {
            if (v78)
              goto LABEL_89;
          }
          else
          {
            if (v78)
            {
              if ((_DWORD)v79)
                v88 = v108 + (v109 - v108) / v80 * 0.0;
              else
                v88 = v109;
            }
            else
            {
              v88 = *v81;
            }
            *v83 = v88;
            *v84 = *v82;
            ++v77;
            v76 = 1;
            if (v78)
            {
LABEL_89:
              if (v79 == v86)
                v87 = v109;
              else
                v87 = v108 + (double)(unsigned __int16)v86 * ((v109 - v108) / v80);
              goto LABEL_99;
            }
          }
          v87 = v81[v86];
LABEL_99:
          v83[v77] = v87;
          v84[(unsigned __int16)v76] = v82[(unsigned __int16)(v85 - 2)];
          v84[(unsigned __int16)(v76 + 1)] = v82[(unsigned __int16)(v85 - 1)];
          v84[(unsigned __int16)(v76 + 2)] = v82[(unsigned __int16)v85];
          ++v77;
          v76 += 3;
          ++v86;
          v85 += 3;
          if (v86 - v70 == 1)
            goto LABEL_100;
        }
      }
      v43 = *(_QWORD *)(v104 + 72);
      v44 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v43) >> 5);
      if ((v44 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v34)
      {
        LOWORD(v44) = v44 - 1;
        if (*(double *)(v104 + 200) > v34)
        {
          for (i = 0; ; i = v47 + 1)
          {
            v46 = i;
            while (1)
            {
              v47 = (v46 + (unsigned __int16)v44) >> 1;
              if (*(double *)(v43 + 96 * v47 + 48) <= v34)
                break;
              LOWORD(v44) = v47 - 1;
            }
            if (*(double *)(v43 + 96 * v47 + 56) > v34)
              break;
          }
          LODWORD(v44) = (v46 + (unsigned __int16)v44) >> 1;
        }
        v64 = (unsigned __int16)v44;
        v65 = (unsigned __int16)v44;
        v48 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v43 + 96 * (unsigned __int16)v44, v34);
        if (v65)
        {
          v49 = *(double *)(*(_QWORD *)(v39 + 48) + 8 * (v64 - 1));
LABEL_48:
          v42 = v48 + v49;
          v50 = v104;
          if (*(_BYTE *)(v104 + 208))
            goto LABEL_76;
          v51 = *(_QWORD *)(v104 + 72);
          v52 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v51) >> 5);
          if ((v52 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v40)
          {
            LOWORD(v52) = v52 - 1;
            if (*(double *)(v104 + 200) > v40)
            {
              for (j = 0; ; j = v55 + 1)
              {
                v54 = j;
                while (1)
                {
                  v55 = (v54 + (unsigned __int16)v52) >> 1;
                  if (*(double *)(v51 + 96 * v55 + 48) <= v40)
                    break;
                  LOWORD(v52) = v55 - 1;
                }
                if (*(double *)(v51 + 96 * v55 + 56) > v40)
                  break;
              }
              LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
            }
            v89 = (unsigned __int16)v52;
            v90 = (unsigned __int16)v52;
            v56 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v51 + 96 * (unsigned __int16)v52, (v38 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              v57 = *(double *)(*(_QWORD *)(v50 + 48) + 8 * (v89 - 1));
LABEL_60:
              v40 = v56 + v57;
              v58 = v104;
              if (*(_BYTE *)(v104 + 208))
                goto LABEL_76;
              v59 = *(_QWORD *)(v104 + 72);
              v60 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v59) >> 5);
              if ((v60 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v41)
              {
                LOWORD(v60) = v60 - 1;
                if (*(double *)(v104 + 200) > v41)
                {
                  for (k = 0; ; k = v63 + 1)
                  {
                    v62 = k;
                    while (1)
                    {
                      v63 = (v62 + (unsigned __int16)v60) >> 1;
                      if (*(double *)(v59 + 96 * v63 + 48) <= v41)
                        break;
                      LOWORD(v60) = v63 - 1;
                    }
                    if (*(double *)(v59 + 96 * v63 + 56) > v41)
                      break;
                  }
                  LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
                }
                v98 = (unsigned __int16)v60;
                v99 = (unsigned __int16)v60;
                v66 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v59 + 96 * (unsigned __int16)v60, (v34 + v38 * 2.0) * 0.333333333);
                if (v99)
                {
                  v67 = *(double *)(*(_QWORD *)(v58 + 48) + 8 * (v98 - 1));
LABEL_75:
                  v41 = v66 + v67;
                  v68 = v104;
                  if (*(_BYTE *)(v104 + 208))
                    goto LABEL_76;
                  v91 = *(_QWORD *)(v104 + 72);
                  v92 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v38)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v104 + 200) > v38)
                    {
                      for (m = 0; ; m = v95 + 1)
                      {
                        v94 = m;
                        while (1)
                        {
                          v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v38)
                            break;
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v38)
                          break;
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    v100 = (unsigned __int16)v92;
                    v101 = (unsigned __int16)v92;
                    v96 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v91 + 96 * (unsigned __int16)v92, v38);
                    if (v101)
                    {
                      v97 = *(double *)(*(_QWORD *)(v68 + 48) + 8 * (v100 - 1));
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    v96 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v91, v38);
                  }
                  v97 = 0.0;
LABEL_119:
                  v69 = v96 + v97;
                  goto LABEL_77;
                }
              }
              else
              {
                v66 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v59, (v34 + v38 * 2.0) * 0.333333333);
              }
              v67 = 0.0;
              goto LABEL_75;
            }
          }
          else
          {
            v56 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v51, (v38 + v34 * 2.0) * 0.333333333);
          }
          v57 = 0.0;
          goto LABEL_60;
        }
      }
      else
      {
        v48 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v43, v34);
      }
      v49 = 0.0;
      goto LABEL_48;
    }
LABEL_126:
    *(_BYTE *)(a1 + 208) = 1;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v32 + 112 * v35 - 104);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v105);
  }
}

void _ZN4geom19interpolating_curveIDv4_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 1);
}

double _ZNK4geom19interpolating_curveIDv4_dE11evaluate_atEd@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 i;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  double v14;
  int v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double result;
  float64x2_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;

  if (*(_BYTE *)(a1 + 208))
  {
    v26 = 0;
    v27 = 0.0;
    v28 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v26, a3);
    v5 = (unsigned __int16)(3 * v26);
    v6 = *(_QWORD *)(a1 + 96);
    v7 = 1.0 - v27;
    a3 = *(double *)(v6 + 8 * (v5 + 1)) * (v27 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v26)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v27 * v27 * ((1.0 - v27) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v27 * (v27 * v27));
  }
  v8 = *(_QWORD *)(a1 + 72);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v8) >> 5);
  if ((v9 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
  {
    LOWORD(v9) = v9 - 1;
    if (*(double *)(a1 + 200) > a3)
    {
      for (i = 0; ; i = v12 + 1)
      {
        v11 = i;
        while (1)
        {
          v12 = (v11 + (unsigned __int16)v9) >> 1;
          if (*(double *)(v8 + 96 * v12 + 48) <= a3)
            break;
          LOWORD(v9) = v12 - 1;
        }
        if (*(double *)(v8 + 96 * v12 + 56) > a3)
          break;
      }
      LODWORD(v9) = (v11 + (unsigned __int16)v9) >> 1;
    }
  }
  else
  {
    LOWORD(v9) = 0;
  }
  v13 = (_QWORD *)(v8 + 96 * (unsigned __int16)v9);
  v26 = 0;
  v27 = 0.0;
  v28 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v13, (uint64_t)&v26, a3);
  v14 = v27;
  v15 = (unsigned __int16)(3 * v26);
  v16 = (float64x2_t *)(*v13 + 32 * (unsigned __int16)(3 * v26));
  v17 = (float64x2_t *)(*v13 + 32 * (v15 + 1));
  v18 = (float64x2_t *)(*v13 + 32 * (v15 + 2));
  v19 = (float64x2_t *)(*v13 + 32 * (v15 + 3));
  v20 = 1.0 - v27;
  v21 = v20 * (v20 * v20);
  v22 = v27 * (v20 * v20 * 3.0);
  v23 = v14 * v14 * ((1.0 - v27) * 3.0);
  result = v14 * (v14 * v14);
  v25 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17[1], v22), v16[1], v21), v18[1], v23), v19[1], result);
  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v17, v22), *v16, v21), *v18, v23), *v19, result);
  a2[1] = v25;
  return result;
}

uint64_t _ZNK4geom19interpolating_curveIDv4_dE19evaluate_tangent_atEd@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 i;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  double v27;
  double v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  float v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int16 j;
  int v37;
  unsigned int v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  float64x2_t v42;
  float64x2_t *v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t *v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  double v55;
  double v56;

  if (*(_BYTE *)(a1 + 208))
  {
    v54 = 0;
    v55 = 0.0;
    v56 = 0.0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v54, a3);
    v5 = (unsigned __int16)(3 * v54);
    v6 = *(_QWORD *)(a1 + 96);
    v7 = 1.0 - v55;
    v8 = *(double *)(v6 + 8 * (v5 + 1)) * (v55 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v54)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v55 * v55 * ((1.0 - v55) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v55 * (v55 * v55));
    v9 = *(_QWORD *)(a1 + 72);
    v10 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v9) >> 5);
    if ((v10 & 0xFFFE) != 0 && *(double *)(a1 + 192) < v8)
    {
      LOWORD(v10) = v10 - 1;
      if (*(double *)(a1 + 200) > v8)
      {
        for (i = 0; ; i = v13 + 1)
        {
          v12 = i;
          while (1)
          {
            v13 = (v12 + (unsigned __int16)v10) >> 1;
            if (*(double *)(v9 + 96 * v13 + 48) <= v8)
              break;
            LOWORD(v10) = v13 - 1;
          }
          if (*(double *)(v9 + 96 * v13 + 56) > v8)
            break;
        }
        LODWORD(v10) = (v12 + (unsigned __int16)v10) >> 1;
      }
    }
    else
    {
      LOWORD(v10) = 0;
    }
    v14 = (_QWORD *)(v9 + 96 * (unsigned __int16)v10);
    v54 = 0;
    v55 = 0.0;
    v56 = 0.0;
    result = geom::interpolating_spline<double>::find_span((uint64_t)v14, (uint64_t)&v54, v8);
    v16 = (unsigned __int16)(3 * v54);
    v17 = *v14 + 32 * (v16 + 1);
    v18 = *(float64x2_t *)(v17 + 16);
    v19 = (float64x2_t *)(*v14 + 32 * (unsigned __int16)(3 * v54));
    v20 = vsubq_f64(v18, v19[1]);
    v21 = vsubq_f64(*(float64x2_t *)v17, *v19);
    v22 = *v14 + 32 * (v16 + 2);
    v24 = *(float64x2_t *)v22;
    v23 = *(float64x2_t *)(v22 + 16);
    v25 = vsubq_f64(*(float64x2_t *)v22, *(float64x2_t *)v17);
    v26 = (float64x2_t *)(*v14 + 32 * (v16 + 3));
    v27 = 1.0 - v55;
    v28 = v27 * v27;
    v29 = v55 * (v27 + v27);
    v30 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v25, v29), v21, v28), vsubq_f64(*v26, v24), v55 * v55), v56 * 3.0);
    v31 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v23, v18), v29), v20, v28), vsubq_f64(v26[1], v23), v55 * v55), v56 * 3.0);
    v32 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v30, v30), vmulq_f64(v31, v31))));
    if (v32 > 0.0)
    {
      v33 = 1.0 / v32;
      v31 = vmulq_n_f64(v31, v33);
      v30 = vmulq_n_f64(v30, v33);
    }
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 72);
    v35 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v34) >> 5);
    if ((v35 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
    {
      LOWORD(v35) = v35 - 1;
      if (*(double *)(a1 + 200) > a3)
      {
        for (j = 0; ; j = v38 + 1)
        {
          v37 = j;
          while (1)
          {
            v38 = (v37 + (unsigned __int16)v35) >> 1;
            if (*(double *)(v34 + 96 * v38 + 48) <= a3)
              break;
            LOWORD(v35) = v38 - 1;
          }
          if (*(double *)(v34 + 96 * v38 + 56) > a3)
            break;
        }
        LODWORD(v35) = (v37 + (unsigned __int16)v35) >> 1;
      }
    }
    else
    {
      LOWORD(v35) = 0;
    }
    v39 = (_QWORD *)(v34 + 96 * (unsigned __int16)v35);
    v54 = 0;
    v55 = 0.0;
    v56 = 0.0;
    result = geom::interpolating_spline<double>::find_span((uint64_t)v39, (uint64_t)&v54, a3);
    v40 = (unsigned __int16)(3 * v54);
    v41 = *v39 + 32 * (v40 + 1);
    v42 = *(float64x2_t *)(v41 + 16);
    v43 = (float64x2_t *)(*v39 + 32 * (unsigned __int16)(3 * v54));
    v44 = vsubq_f64(*(float64x2_t *)v41, *v43);
    v45 = vsubq_f64(v42, v43[1]);
    v46 = *v39 + 32 * (v40 + 2);
    v47 = *(float64x2_t *)v46;
    v48 = *(float64x2_t *)(v46 + 16);
    v49 = vsubq_f64(*(float64x2_t *)v46, *(float64x2_t *)v41);
    v50 = (float64x2_t *)(*v39 + 32 * (v40 + 3));
    v51 = 1.0 - v55;
    v52 = v51 * v51;
    v53 = v55 * (v51 + v51);
    v31 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v48, v42), v53), v45, v52), vsubq_f64(v50[1], v48), v55 * v55), v56 * 3.0);
    v30 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v49, v53), v44, v52), vsubq_f64(*v50, v47), v55 * v55), v56 * 3.0);
  }
  *a2 = v30;
  a2[1] = v31;
  return result;
}

double _ZNK4geom19interpolating_curveIDv4_dE18evaluate_length_atEd(uint64_t a1, double result)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 i;
  int v7;
  unsigned int v8;
  double v9;
  double v10;
  int v11;
  int v12;

  if (!*(_BYTE *)(a1 + 208))
  {
    v4 = a1 + 72;
    v3 = *(_QWORD *)(a1 + 72);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (i = 0; ; i = v8 + 1)
        {
          v7 = i;
          while (1)
          {
            v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result)
              break;
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result)
            break;
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      v11 = (unsigned __int16)v5;
      v12 = (unsigned __int16)v5;
      v9 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        v10 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      v9 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v3, result);
    }
    v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

double _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  unsigned int v8;
  double v9;
  _WORD v11[12];

  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  v4 = v11[0];
  v5 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      v7 = 0;
      v6 = 0.0;
      do
        v6 = v6 + _ZNK4geom20interpolating_splineIDv4_dE20evaluate_span_lengthEj(a1, v7++);
      while ((_DWORD)v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  v6 = 0.0;
LABEL_9:
  if (*(_BYTE *)(a1 + 66))
  {
    v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == (_DWORD)v4)
      v9 = *(double *)(a1 + 56);
    else
      v9 = *(double *)(a1 + 48)
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    v9 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v4);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEdd((_QWORD *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv4_dE10span_knotsEtRdS3_(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9;
  unsigned __int16 v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  uint64_t v26;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
  v10 = a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 2 * a2))
      v11 = *(double *)(*(_QWORD *)(a1 + 48) + 8 * (v9 - 1));
    else
      v11 = 0.0;
    v18 = *(_QWORD *)(a1 + 72);
    v19 = v18 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
    if (*(_BYTE *)(v19 + 66))
    {
      v20 = v18 + 96 * v9;
      v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      v23 = v21 + (double)v10 * v22;
      v24 = v22 + v23;
    }
    else
    {
      v25 = (double *)(*(_QWORD *)(v18 + 96 * v9 + 24) + 8 * v10);
      v23 = *v25;
      v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v19, v23);
    v17 = v11
        + _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(*(_QWORD *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (*(_BYTE *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 66))
    {
      v13 = v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2);
      v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      v17 = v15 + v16;
    }
    else
    {
      v26 = *(_QWORD *)(v12 + 96 * *(unsigned __int16 *)(*(_QWORD *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv4_dE33calculate_monomial_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t v40;
  float64x2_t v41;

  v3 = a1[9];
  v4 = 96 * *(unsigned __int16 *)(*a1 + 2 * a2);
  v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v7 = (_OWORD *)(*(_QWORD *)(v3 + v4) + 32 * v6);
  v8 = v7[1];
  *(_OWORD *)a3 = *v7;
  *(_OWORD *)(a3 + 16) = v8;
  v9 = *(_QWORD *)(v3 + v4);
  v10 = (v5 + 1);
  v11 = (float64x2_t *)(v9 + 32 * v10);
  v12 = (float64x2_t *)(v9 + 32 * v6);
  __asm { FMOV            V2.2D, #3.0 }
  v18 = vmulq_f64(vsubq_f64(v11[1], v12[1]), _Q2);
  *(float64x2_t *)(a3 + 32) = vmulq_f64(vsubq_f64(*v11, *v12), _Q2);
  *(float64x2_t *)(a3 + 48) = v18;
  v19 = *(_QWORD *)(v3 + v4);
  v20 = (float64x2_t *)(v19 + 32 * v6);
  v22 = *v20;
  v21 = v20[1];
  v23 = (float64x2_t *)(v19 + 32 * v10);
  __asm { FMOV            V5.2D, #-2.0 }
  v25 = vmlaq_f64(v22, _Q5, *v23);
  v26 = vmlaq_f64(v21, _Q5, v23[1]);
  v27 = (v5 + 2);
  v28 = (float64x2_t *)(v19 + 32 * v27);
  v29 = vmulq_f64(vaddq_f64(v25, *v28), _Q2);
  v30 = vmulq_f64(vaddq_f64(v26, v28[1]), _Q2);
  *(float64x2_t *)(a3 + 64) = v29;
  *(float64x2_t *)(a3 + 80) = v30;
  v31 = *(_QWORD *)(v3 + v4);
  v32 = (float64x2_t *)(v31 + 32 * (v5 + 3));
  v33 = *v32;
  v34 = v32[1];
  v35 = (float64x2_t *)(v31 + 32 * v10);
  v37 = *v35;
  v36 = v35[1];
  v38 = (float64x2_t *)(v31 + 32 * v27);
  v39 = (float64x2_t *)(v31 + 32 * v6);
  v40 = vsubq_f64(vmlaq_f64(v33, _Q2, vsubq_f64(v37, *v38)), *v39);
  v41 = vsubq_f64(vmlaq_f64(v34, _Q2, vsubq_f64(v36, v38[1])), v39[1]);
  *(float64x2_t *)(a3 + 96) = v40;
  *(float64x2_t *)(a3 + 112) = v41;
  if (sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v29, v29), vmulq_f64(v30, v30)))) <= 0.000001
    && sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v40, v40), vmulq_f64(v41, v41)))) <= 0.000001)
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv4_dE31calculate_bezier_basis_for_spanEtPS1_(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  float64x2_t *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;

  v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  v4 = *(_QWORD *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  v5 = (float64x2_t *)(v4
                     + 32
                     * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  v6 = *v5;
  v7 = v5[1];
  v8 = (float64x2_t *)(v4 + 32 * (v3 + 1));
  v10 = *v8;
  v9 = v8[1];
  __asm { FMOV            V16.2D, #3.0 }
  v16 = vmulq_f64(vsubq_f64(v9, v7), _Q16);
  v17 = vmulq_f64(vsubq_f64(*v8, v6), _Q16);
  __asm { FMOV            V4.2D, #-2.0 }
  v19 = vmlaq_f64(v6, _Q4, *v8);
  v20 = (float64x2_t *)(v4 + 32 * (v3 + 2));
  v21 = v20[1];
  v22 = vaddq_f64(vmlaq_f64(v7, _Q4, v9), v21);
  v23 = vmulq_f64(vaddq_f64(v19, *v20), _Q16);
  v24 = vmulq_f64(v22, _Q16);
  v25 = (float64x2_t *)(v4 + 32 * (v3 + 3));
  v26 = vmlaq_f64(*v25, _Q16, vsubq_f64(v10, *v20));
  v27 = vsubq_f64(vmlaq_f64(v25[1], _Q16, vsubq_f64(v9, v21)), v7);
  v28 = vsubq_f64(v26, v6);
  if (sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v23, v23), vmulq_f64(v24, v24)))) <= 0.000001
    && sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v28, v28), vmulq_f64(v27, v27)))) <= 0.000001)
  {
    *(float64x2_t *)a3 = v6;
    *(float64x2_t *)(a3 + 16) = v7;
    *(float64x2_t *)(a3 + 32) = vaddq_f64(v6, v17);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(v7, v16);
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    return 2;
  }
  else
  {
    *(float64x2_t *)a3 = v6;
    *(float64x2_t *)(a3 + 16) = v7;
    v29 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    v30 = (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL);
    *(float64x2_t *)(a3 + 32) = vmlaq_f64(v6, v29, v17);
    *(float64x2_t *)(a3 + 48) = vmlaq_f64(v7, v29, v16);
    *(float64x2_t *)(a3 + 64) = vmlaq_f64(vmlaq_f64(v6, v30, v17), v29, v23);
    *(float64x2_t *)(a3 + 80) = vmlaq_f64(vmlaq_f64(v7, v30, v16), v29, v24);
    *(float64x2_t *)(a3 + 96) = vaddq_f64(vaddq_f64(vaddq_f64(v6, v17), v23), v28);
    *(float64x2_t *)(a3 + 112) = vaddq_f64(vaddq_f64(vaddq_f64(v7, v16), v24), v27);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv4_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1, float64x2_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  double *v19;
  char *v20;
  uint64_t v21;
  _BYTE v23[96];
  _OWORD v24[4];
  unsigned __int16 v25;
  _QWORD v26[3];

  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(LODWORD((*a2)->f64[0]))
  {
    case 0:
      _ZN4geom19interpolating_curveIDv4_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv4_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv4_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv4_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    v4 = 0;
    v5 = 0.0;
    do
    {
      v5 = v5 + _ZNK4geom20interpolating_splineIDv4_dE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  v6 = _ZNK4geom20interpolating_splineIDv4_dE21evaluate_total_lengthEv((uint64_t)v24);
  v7 = a1[10] - a1[9];
  if (v7)
    v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  else
    v8 = 0.0;
  v9 = v6 + v8;
  v10 = a1[8];
  v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (double *)a1[6];
    v14 = v11 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      v13 = (double *)a1[6];
      v11 = (double *)a1[7];
    }
    else
    {
      v18 = 0;
    }
    v19 = (double *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    while (v11 != v13)
    {
      v21 = *((_QWORD *)v11-- - 1);
      *((_QWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv4_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  float64x2_t *v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t *v30;
  uint64_t v31;
  __int128 v32;
  _OWORD *v33;
  void *__p;
  char *v35;
  uint64_t v36;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v35 = 0;
  v36 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  v6 = *(_QWORD *)a1;
  v7 = (char *)__p;
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v8 = 0;
    LOWORD(v9) = 0;
    v10 = (double *)(v7 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      v16 = (float64x2_t *)(*(_QWORD *)a1 + v8);
      v17 = v16[7].f64[1];
      *v10 = v17;
      v18 = v17 - *(v10 - 1);
      v19 = v16[1];
      v20 = v16[2];
      v21 = vmulq_n_f64(vsubq_f64(v16[8], v19), v18);
      v22 = vmulq_n_f64(vsubq_f64(v16[9], v20), v18);
      v23 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v9);
      *v23 = v19;
      v23[1] = v20;
      LOWORD(v23) = v9 + 2;
      v24 = vdivq_f64(v22, _Q0);
      v25 = vdivq_f64(v21, _Q0);
      v26 = vaddq_f64(v16[2], v24);
      v27 = *(_QWORD *)a2 + 32 * (unsigned __int16)(v9 + 1);
      *(float64x2_t *)v27 = vaddq_f64(v16[1], v25);
      *(float64x2_t *)(v27 + 16) = v26;
      LOWORD(v9) = v9 + 3;
      v28 = vsubq_f64(v16[8], v25);
      v29 = vsubq_f64(v16[9], v24);
      v30 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v23);
      *v30 = v28;
      v30[1] = v29;
      v8 += 112;
      ++v10;
    }
    while (112 * v5 != v8);
    v6 = *(_QWORD *)a1;
    v9 = (unsigned __int16)v9;
  }
  else
  {
    v9 = 0;
  }
  v31 = v6 + 112 * *((_QWORD *)a1 + 1);
  v32 = *(_OWORD *)(v31 - 80);
  v33 = (_OWORD *)(*(_QWORD *)a2 + 32 * v9);
  *v33 = *(_OWORD *)(v31 - 96);
  v33[1] = v32;
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v7, (uint64_t)v35, (v35 - v7) >> 3);
    v7 = (char *)__p;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v7;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v35 - 1);
  v35 = v7;
  operator delete(v7);
}

void _ZN4geom19interpolating_curveIDv4_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float64x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  float64x2_t *v4;
  __int16 v5;
  float64x2_t v11;
  char *v12;
  double *v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  _OWORD *v20;
  float64x2_t *v21;
  float64x2_t v22;
  float64x2_t *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  float64x2_t *v30;
  float64x2_t *v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  char *v41;
  uint64_t v43;
  double v44;
  uint64_t v45;
  float64x2_t *v46;
  uint64_t v47;
  double v48;
  double v49;
  float64x2_t *v50;
  float64x2_t *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  float64x2_t *v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  double v89;
  double v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t *v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t *v123;
  uint64_t v124;
  __int128 v125;
  _OWORD *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  float64x2_t *v130;
  char *v131;
  float64x2_t *v132;
  uint64_t *v133;
  uint64_t v134;
  float64x2_t v135;
  float64x2_t v136;
  void *__p;
  void *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;

  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v4 = a1[1];
  v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v143, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<double>::resize((uint64_t)&v140, (unsigned __int16)((_WORD)v4 + 2));
  __asm { FMOV            V0.2D, #2.0 }
  v11 = vmlaq_f64(vnegq_f64((*a1)[9]), _Q0, (*a1)[2]);
  v12 = (char *)v143;
  *(float64x2_t *)v143 = vmlaq_f64(vnegq_f64((*a1)[8]), _Q0, (*a1)[1]);
  *((float64x2_t *)v12 + 1) = v11;
  v13 = (double *)v140;
  *(_QWORD *)v140 = 0;
  v14 = *a1;
  v15 = vsubq_f64((*a1)[8], (*a1)[1]);
  v16 = vsubq_f64((*a1)[9], (*a1)[2]);
  v13[1] = sqrt(sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v15, v15), vmulq_f64(v16, v16)))));
  if ((_WORD)v4 == 1)
  {
    v18 = 0;
  }
  else
  {
    v17 = 0;
    v18 = (unsigned __int16)((_WORD)v4 - 1);
    v19 = v13 + 2;
    v20 = v12 + 32;
    do
    {
      v21 = &v14[v17];
      v22 = v21[2];
      *v20 = v21[1];
      v20[1] = v22;
      v20 += 2;
      v14 = *a1;
      v23 = &(*a1)[v17];
      v24 = vsubq_f64(v23[8], v23[1]);
      v25 = vsubq_f64(v23[9], v23[2]);
      *v19 = *(v19 - 1) + sqrt(sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v24, v24), vmulq_f64(v25, v25)))));
      ++v19;
      v17 += 7;
    }
    while (7 * (unsigned __int16)((_WORD)v4 - 1) != v17);
  }
  v26 = &v14[7 * v18];
  v27 = v26[1];
  v28 = v26[2];
  v29 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  v30 = (float64x2_t *)&v12[32 * v29];
  *v30 = v27;
  v30[1] = v28;
  v31 = (float64x2_t *)&v12[32 * (unsigned __int16)((_WORD)v4 + 2)];
  v32 = vmlaq_f64(vnegq_f64(v31[-5]), _Q0, v28);
  v33 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  v34 = (float64x2_t *)&v12[32 * v33];
  *v34 = vmlaq_f64(vnegq_f64(v31[-6]), _Q0, v27);
  v34[1] = v32;
  v35 = &(*a1)[7 * (unsigned __int16)((_WORD)v4 - 2)];
  v36 = vsubq_f64(v35[8], v35[1]);
  v37 = vsubq_f64(v35[9], v35[2]);
  v13[v33] = v13[v29] + sqrt(sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v36, v36), vmulq_f64(v37, v37)))));
  if ((_WORD)v4 == 1)
  {
    v39 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
    {
      v39 = 0;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v18 + 1);
    v38 = 0;
    LOWORD(v39) = 0;
    v40 = (double *)v140;
    v41 = (char *)v143;
    __asm { FMOV            V0.2D, #3.0 }
    v135 = _Q0;
    do
    {
      v43 = (v38 + 2);
      v44 = v40[v38];
      v45 = (v38 + 3);
      v46 = (float64x2_t *)&v41[32 * v38];
      v47 = v38 + 1;
      v48 = v40[(v38 + 1)];
      v49 = v40[v43];
      v50 = (float64x2_t *)&v41[32 * (v38 + 1)];
      v51 = (float64x2_t *)&v41[32 * v43];
      v52 = v40[v45];
      v53 = v49 - v48;
      v54 = 1.0 / (v48 - v44);
      v55 = 1.0 / (v49 - v48);
      v56 = v52 - v49;
      v57 = 1.0 / (v52 - v49);
      v58 = (float64x2_t *)&v41[32 * v45];
      v59 = v46[1];
      v60 = v50[1];
      v61 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v44 - v48), 0));
      v62 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v60, v61), v59, v48 - v48), v54);
      v63 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v50, v61), *v46, v48 - v48), v54);
      v64 = v51[1];
      v65 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v48 - v48), 0));
      v66 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v51, v65), *v50, v49 - v48), v55);
      v67 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v64, v65), v60, v49 - v48), v55);
      v68 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v49 - v48), 0));
      v69 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v58, v68), *v51, v52 - v48), v57);
      v70 = vmlaq_n_f64(vmulq_f64(v66, v61), v63, v49 - v48);
      v71 = vmlaq_n_f64(vmulq_f64(v67, v61), v62, v49 - v48);
      v136 = vmulq_n_f64(vsubq_f64(v60, v59), v54);
      v72 = vmulq_n_f64(vsubq_f64(*v50, *v46), v54);
      v73 = vmulq_n_f64(vsubq_f64(*v51, *v50), v55);
      v74 = vmulq_n_f64(vsubq_f64(v64, v60), v55);
      v75 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v67, v62), v136, v49 - v48), v74, v44 - v48, 0);
      v76 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v66, v63), v72, v49 - v48), v73, v44 - v48, 0);
      v77 = vmlaq_n_f64(vmulq_f64(v69, v65), v66, v52 - v48);
      v78 = vsubq_f64(v69, v66);
      v79 = v58[1];
      v80 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v79, v68), v64, v52 - v48), v57);
      v81 = vmlaq_n_f64(vmulq_f64(v80, v65), v67, v52 - v48);
      v82 = vsubq_f64(v80, v67);
      v80.f64[0] = 1.0 / (v49 - v44);
      v83 = 1.0 / (v52 - v48);
      v84 = vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v77, v83), vmulq_n_f64(v70, v80.f64[0])), vmulq_n_f64(v76, v80.f64[0]), v49 - v48);
      v85 = vmulq_n_f64(vsubq_f64(*v58, *v51), v57);
      v86 = vmlsq_lane_f64(v84, vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(v78, v73, v52 - v48), v85, v48 - v48, 0), v83), v48 - v48, 0);
      v87 = vmulq_n_f64(vsubq_f64(v79, v64), v57);
      v88 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v81, v83), vmulq_n_f64(v71, v80.f64[0])), vmulq_n_f64(v75, v80.f64[0]), v49 - v48), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(v82, v74, v52 - v48), v87, v48 - v48, 0), v83), v48 - v48, 0);
      v89 = v44 - v49;
      v90 = v48 - v49;
      v91 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v89, 0));
      v92 = v49 - v49;
      v93 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v60, v91), v59, v90), v54);
      v94 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v50, v91), *v46, v90), v54);
      v95 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v92, 0));
      v96 = vmulq_f64(*v58, v95);
      v97 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v90, 0));
      v98 = vmlaq_n_f64(vmulq_f64(v79, v95), v64, v56);
      v99 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v51, v97), *v50, v92), v55);
      v100 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v64, v97), v60, v92), v55);
      v101 = vmulq_n_f64(vmlaq_n_f64(v96, *v51, v56), v57);
      v102 = vmulq_n_f64(v98, v57);
      v103 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v100, v93), v136, v92), v74, v89, 0);
      v104 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v99, v94), v72, v92), v73, v89, 0);
      v105 = vmlaq_n_f64(vsubq_f64(v102, v100), v74, v56);
      v106 = vmulq_f64(v102, v97);
      v107 = vmulq_f64(v101, v97);
      v108 = vmlaq_n_f64(vsubq_f64(v101, v99), v73, v56);
      v109 = vmlaq_n_f64(v107, v99, v56);
      v110 = vmlaq_n_f64(v106, v100, v56);
      v111 = vmulq_f64(v100, v91);
      v112 = vmlaq_n_f64(vmulq_f64(v99, v91), v94, v92);
      v113 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v110, v83), vmulq_n_f64(vmlaq_n_f64(v111, v93, v92), v80.f64[0])), vmulq_n_f64(v103, v80.f64[0]), v92), vmulq_n_f64(vmlsq_lane_f64(v105, v87, v90, 0), v83), v90, 0);
      v114 = vmulq_n_f64(vmulq_n_f64(v88, v55), v53);
      v115 = vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v109, v83), vmulq_n_f64(v112, v80.f64[0])), vmulq_n_f64(v104, v80.f64[0]), v92), vmulq_n_f64(vmlsq_lane_f64(v108, v85, v90, 0), v83), v90, 0), v55), v53);
      v116 = vmulq_n_f64(vmulq_n_f64(v113, v55), v53);
      v117 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v39);
      *v117 = *v50;
      v117[1] = v60;
      v118 = vaddq_f64(*v50, vdivq_f64(vmulq_n_f64(vmulq_n_f64(v86, v55), v53), v135));
      v119 = vaddq_f64(v50[1], vdivq_f64(v114, v135));
      v120 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)(v39 + 1));
      *v120 = v118;
      v120[1] = v119;
      v121 = vsubq_f64(*v51, vdivq_f64(v115, v135));
      v122 = vsubq_f64(v51[1], vdivq_f64(v116, v135));
      v123 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)(v39 + 2));
      *v123 = v121;
      v123[1] = v122;
      LOWORD(v39) = v39 + 3;
      v38 = v47;
    }
    while (v18 != v47);
    v39 = (unsigned __int16)v39;
  }
  v124 = (uint64_t)&(*a1)[7 * v18];
  v125 = *(_OWORD *)(v124 + 32);
  v126 = (_OWORD *)(*(_QWORD *)a2 + 32 * v39);
  *v126 = *(_OWORD *)(v124 + 16);
  v126[1] = v125;
  v127 = (unint64_t)a1[1];
  v138 = 0;
  v139 = 0;
  __p = 0;
  if (v127)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v127);
    v128 = (char *)v138;
    bzero(v138, 8 * v127);
    v129 = &v128[8 * v127];
    v138 = v129;
    v130 = a1[1];
    v131 = (char *)__p;
    if (v130)
    {
      v132 = 0;
      v133 = (uint64_t *)&(*a1)->f64[1];
      do
      {
        v134 = *v133;
        v133 += 14;
        *(_QWORD *)&v131[8 * (_QWORD)v132] = v134;
        v132 = (float64x2_t *)((char *)v132 + 1);
      }
      while (v130 != v132);
    }
  }
  else
  {
    v131 = 0;
    v129 = 0;
  }
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v131, (uint64_t)v129, (v129 - v131) >> 3);
    v131 = (char *)__p;
    v129 = (char *)v138;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v131;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v129 - 1);
  v138 = v131;
  operator delete(v131);
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
}

void _ZN4geom19interpolating_curveIDv4_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  float64x2_t *v14;
  char *v15;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v23;
  _OWORD *v24;
  float64x2_t *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  int64x2_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  int64x2_t *v37;
  int64x2_t v38;
  int64x2_t *v39;
  double v40;
  float64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  unint64_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t *v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t *v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t *v76;
  BOOL v77;
  float64x2_t *v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  uint64_t v84;
  double *v85;
  float64x2_t *v86;
  double v87;
  float64x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  __int16 v94;
  unsigned __int16 v95;
  uint64_t v96;
  uint64_t v97;
  float64x2_t *v98;
  float64x2_t *v99;
  float64x2_t *v100;
  unsigned int v101;
  double *v102;
  uint64_t v104;
  double v105;
  float64x2_t *v106;
  double v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t *v119;
  float64x2_t *v120;
  float64x2_t *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  _OWORD *v125;
  float64x2_t v126;
  char *v127;
  void *v128;
  uint64_t v129;
  void *__p;
  _BYTE *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  float64x2_t *v139;
  float64x2_t *v140;
  uint64_t v141;

  v139 = 0;
  v140 = 0;
  v141 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  __p = 0;
  v131 = 0;
  v132 = 0;
  v4 = a1[1];
  v128 = 0;
  v129 = 0;
  v127 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v127, v4);
    v5 = v128;
    bzero(v128, 8 * v4);
    v4 = (unint64_t)v5 + 8 * v4;
    v6 = a1[1];
    if (v6)
    {
      v7 = 0;
      v8 = v127;
      v9 = (uint64_t *)(*a1 + 8);
      do
      {
        v10 = *v9;
        v9 += 14;
        *(_QWORD *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v11 = v127;
  v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v139, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v136, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v133, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  v13 = v12 - 1;
  v14 = v139;
  v15 = (char *)&v139[2 * v12 - 2];
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *v14 = 0u;
  v14[1] = 0u;
  v16 = (float64x2_t *)__p;
  v17 = (float64x2_t *)((char *)__p + 32 * v12 - 32);
  __asm { FMOV            V1.2D, #1.0 }
  *v17 = _Q1;
  v17[1] = _Q1;
  *v16 = _Q1;
  v16[1] = _Q1;
  v23 = (float64x2_t *)v136;
  v24 = (char *)v136 + 32 * v12 - 32;
  *v24 = 0u;
  v24[1] = 0u;
  *v23 = 0u;
  v23[1] = 0u;
  v25 = (float64x2_t *)v133;
  v26 = (char *)v133 + 32 * v12 - 32;
  *v26 = 0u;
  v26[1] = 0u;
  *v25 = 0u;
  v25[1] = 0u;
  if (v12 - 1 >= 2)
  {
    v27 = 0;
    v28 = 0;
    v29 = (double *)(v11 + 8);
    do
    {
      v30 = *v29;
      *(double *)&v31 = *v29 - *(v29 - 1);
      v32 = v29[1];
      ++v29;
      *(double *)&v33 = v32 - v30;
      v34 = vdupq_lane_s64(v31, 0);
      v35 = (int64x2_t *)&v14[2 * v28 + 2];
      *v35 = v34;
      v35[1] = v34;
      v36 = vdupq_lane_s64(COERCE__INT64(*(double *)&v31 + *(double *)&v33 + *(double *)&v31 + *(double *)&v33), 0);
      v37 = (int64x2_t *)&v16[2 * v28 + 2];
      v38 = vdupq_lane_s64(v33, 0);
      *v37 = v36;
      v37[1] = v36;
      v39 = (int64x2_t *)&v23[2 * v28 + 2];
      *v39 = v38;
      v39[1] = v38;
      v40 = 3.0 / *(double *)&v33;
      v41 = (float64x2_t *)(*a1 + v27);
      v42 = v41[9];
      v43 = vsubq_f64(v41[16], v42);
      v44 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(3.0 / *(double *)&v31), 0));
      v45 = vmulq_f64(vsubq_f64(v42, v41[2]), v44);
      v46 = vmlaq_n_f64(vmulq_f64(vsubq_f64(v41[8], v41[1]), v44), vsubq_f64(v41[15], v41[8]), v40);
      v47 = (uint64_t)&v25[2 * v28 + 2];
      *(float64x2_t *)v47 = v46;
      *(float64x2_t *)(v47 + 16) = vmlaq_n_f64(v45, v43, v40);
      ++v28;
      v27 += 112;
    }
    while (v12 - 2 != v28);
  }
  v48 = v131 - (_BYTE *)v16;
  v49 = ((unint64_t)(v131 - (_BYTE *)v16) >> 5) - 1;
  v50 = vdivq_f64(v23[1], v16[1]);
  *v23 = vdivq_f64(*v23, *v16);
  v23[1] = v50;
  v51 = vdivq_f64(v25[1], v16[1]);
  *v25 = vdivq_f64(*v25, *v16);
  v25[1] = v51;
  if ((int)v49 > 1)
  {
    v52 = v49 - 1;
    v53 = v16 + 2;
    v54 = v14 + 2;
    v55 = v25 + 2;
    v56 = v23 + 2;
    do
    {
      v58 = v56[-2];
      v57 = v56[-1];
      v59 = vdivq_f64(v56[1], vmlsq_f64(v53[1], v57, v54[1]));
      *v56 = vdivq_f64(*v56, vmlsq_f64(*v53, v58, *v54));
      v56[1] = v59;
      v56 += 2;
      v61 = *v54;
      v60 = v54[1];
      v54 += 2;
      v63 = *v53;
      v62 = v53[1];
      v53 += 2;
      v64 = vdivq_f64(vmlsq_f64(v55[1], v55[-1], v60), vmlsq_f64(v62, v57, v60));
      *v55 = vdivq_f64(vmlsq_f64(*v55, v55[-2], v61), vmlsq_f64(v63, v58, v61));
      v55[1] = v64;
      v55 += 2;
      --v52;
    }
    while (v52);
  }
  v65 = &v25[2 * (int)v49];
  v66 = &v14[2 * (int)v49];
  v68 = *v66;
  v67 = v66[1];
  v69 = (v48 << 27) - 0x200000000;
  v70 = (float64x2_t *)((char *)v25 + (v69 >> 27));
  v71 = vmlsq_f64(*v65, *v70, v68);
  v72 = vmlsq_f64(v65[1], v70[1], v67);
  v73 = &v16[2 * (int)v49];
  v74 = (float64x2_t *)((char *)v23 + (v69 >> 27));
  v75 = vdivq_f64(v72, vmlsq_f64(v73[1], v74[1], v67));
  *v65 = vdivq_f64(v71, vmlsq_f64(*v73, *v74, v68));
  v65[1] = v75;
  if ((int)v49 >= 1)
  {
    do
    {
      v76 = &v25[2 * v49];
      v77 = v49-- > 1;
      v78 = &v23[2 * v49];
      v79 = *v76;
      v80 = v76[1];
      v81 = &v25[2 * v49];
      v82 = vmlsq_f64(v81[1], v80, v78[1]);
      *v81 = vmlsq_f64(*v81, v79, *v78);
      v81[1] = v82;
    }
    while (v77);
  }
  __asm { FMOV            V19.2D, #2.0 }
  if (v12 != 1)
  {
    v84 = 0;
    v85 = (double *)(v11 + 8);
    v86 = v25 + 2;
    do
    {
      v87 = *v85 - *(v85 - 1);
      v88 = (float64x2_t *)(*a1 + v84);
      v89 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v87 / 3.0), 0));
      v90 = vmlaq_n_f64(vmulq_f64(vmlaq_f64(v86[1], _Q19, v86[-1]), v89), vsubq_f64(v88[9], v88[2]), 1.0 / v87);
      *v23 = vmlaq_n_f64(vmulq_f64(vmlaq_f64(*v86, _Q19, v86[-2]), v89), vsubq_f64(v88[8], v88[1]), 1.0 / v87);
      v23[1] = v90;
      v23 += 2;
      v91 = 1.0 / (v87 * 3.0);
      v92 = vmulq_n_f64(vsubq_f64(*v86, v86[-2]), v91);
      v93 = vmulq_n_f64(vsubq_f64(v86[1], v86[-1]), v91);
      v84 += 112;
      *v16 = v92;
      v16[1] = v93;
      v16 += 2;
      ++v85;
      v86 += 2;
      --v13;
    }
    while (v13);
  }
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v94 = *((_WORD *)a1 + 4);
  v95 = v94 - 1;
  if (v94 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    v101 = 0;
    v97 = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    v126 = _Q19;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v95 + 1));
    *(_WORD *)(a2 + 64) = v95;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v95 + 1);
    v96 = 0;
    LOWORD(v97) = 0;
    v98 = (float64x2_t *)v136;
    v99 = (float64x2_t *)v133;
    v100 = (float64x2_t *)__p;
    v101 = v95;
    v102 = (double *)(v11 + 8);
    __asm { FMOV            V1.2D, #3.0 }
    v104 = v95;
    do
    {
      v105 = *(v102 - 1);
      v106 = (float64x2_t *)(*a1 + v96);
      v107 = *v102 - v105;
      v108 = v105 - v105;
      v109 = v106[1];
      v110 = v106[2];
      v111 = *v98;
      v112 = v98[1];
      v98 += 2;
      v114 = *v99;
      v113 = v99[1];
      v99 += 2;
      v116 = v106[8];
      v115 = v106[9];
      v117 = *v100;
      v118 = v100[1];
      v100 += 2;
      v119 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v97);
      *v119 = v109;
      v119[1] = v110;
      v120 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)(v97 + 1));
      LOWORD(v119) = v97 + 2;
      *v120 = vaddq_f64(v109, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v111, vmlaq_f64(vmulq_n_f64(v117, v108 * 3.0), v126, v114), v108), v107), _Q1));
      v120[1] = vaddq_f64(v110, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v112, vmlaq_f64(vmulq_n_f64(v118, v108 * 3.0), v126, v113), v108), v107), _Q1));
      LOWORD(v97) = v97 + 3;
      v121 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v119);
      ++v102;
      v96 += 112;
      *v121 = vsubq_f64(v116, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v111, vmlaq_f64(vmulq_n_f64(v117, v107 * 3.0), v126, v114), v107), v107), _Q1));
      v121[1] = vsubq_f64(v115, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v112, vmlaq_f64(vmulq_n_f64(v118, v107 * 3.0), v126, v113), v107), v107), _Q1));
      --v104;
    }
    while (v104);
    v97 = (unsigned __int16)v97;
  }
  v122 = *a1 + 112 * v101;
  v123 = *(_OWORD *)(v122 + 16);
  v124 = *(_OWORD *)(v122 + 32);
  v125 = (_OWORD *)(*(_QWORD *)a2 + 32 * v97);
  *v125 = v123;
  v125[1] = v124;
  *(_BYTE *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (_QWORD)v11) >> 3);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v11;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    v131 = __p;
    operator delete(__p);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v139)
  {
    v140 = v139;
    operator delete(v139);
  }
}

void _ZN4geom19interpolating_curveIDv4_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  unsigned __int16 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  float64x2_t *v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  _OWORD *v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t *v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  void *__p;
  char *v34;
  uint64_t v35;

  v4 = a1[4];
  v5 = v4 - 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(_BYTE *)(a2 + 66))
      *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(_BYTE *)(a2 + 66))
      std::vector<double>::resize(a2 + 24, v5 + 1);
  }
  __p = 0;
  v34 = 0;
  v35 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  v6 = *(_QWORD *)a1;
  v7 = (char *)__p;
  *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v5)
  {
    v8 = 0;
    LOWORD(v9) = 0;
    v10 = (double *)(v7 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      v16 = (float64x2_t *)(*(_QWORD *)a1 + v8);
      v17 = v16[7].f64[1];
      *v10 = v17;
      v18 = v17 - *(v10 - 1);
      v19 = vmulq_n_f64(v16[5], v18);
      v20 = vmulq_n_f64(v16[6], v18);
      v21 = vmulq_n_f64(v16[10], v18);
      v22 = vmulq_n_f64(v16[11], v18);
      v23 = v16[2];
      v24 = (_OWORD *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v9);
      *v24 = v16[1];
      v24[1] = v23;
      LOWORD(v24) = v9 + 2;
      v25 = vaddq_f64(vdivq_f64(v20, _Q0), v16[2]);
      v26 = *(_QWORD *)a2 + 32 * (unsigned __int16)(v9 + 1);
      *(float64x2_t *)v26 = vaddq_f64(vdivq_f64(v19, _Q0), v16[1]);
      *(float64x2_t *)(v26 + 16) = v25;
      LOWORD(v9) = v9 + 3;
      v27 = vsubq_f64(v16[8], vdivq_f64(v21, _Q0));
      v28 = vsubq_f64(v16[9], vdivq_f64(v22, _Q0));
      v29 = (float64x2_t *)(*(_QWORD *)a2 + 32 * (unsigned __int16)v24);
      *v29 = v27;
      v29[1] = v28;
      v8 += 112;
      ++v10;
    }
    while (112 * v5 != v8);
    v6 = *(_QWORD *)a1;
    v9 = (unsigned __int16)v9;
  }
  else
  {
    v9 = 0;
  }
  v30 = v6 + 112 * *((_QWORD *)a1 + 1);
  v31 = *(_OWORD *)(v30 - 80);
  v32 = (_OWORD *)(*(_QWORD *)a2 + 32 * v9);
  *v32 = *(_OWORD *)(v30 - 96);
  v32[1] = v31;
  *(_BYTE *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v7, (uint64_t)v34, (v34 - v7) >> 3);
    v7 = (char *)__p;
  }
  *(_QWORD *)(a2 + 48) = *(_QWORD *)v7;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)v34 - 1);
  v34 = v7;
  operator delete(v7);
}

double _ZNK4geom20interpolating_splineIDv4_dE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1;
  unsigned __int16 v2;
  double v3;

  v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64))
    v2 = *(_WORD *)(a1 + 64);
  else
    v2 = -1;
  if (*(_BYTE *)(a1 + 66))
  {
    if (v1 == v2)
      v3 = *(double *)(a1 + 56);
    else
      v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
  }
  else
  {
    v3 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(a1, v3);
}

uint64_t geom::interpolating_spline<float>::~interpolating_spline(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t geom::interpolating_spline<double>::~interpolating_spline(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

__n128 _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

unint64_t geom::interpolating_spline<float>::find_span(uint64_t a1, float a2)
{
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  int v6;
  unint64_t v7;
  float *v8;
  float v9;
  uint64_t v10;
  unsigned __int16 v11;
  float v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned __int16 v22;
  float *v23;
  float *v25;

  if (*(_BYTE *)(a1 + 58))
  {
    v2 = *(unsigned __int16 *)(a1 + 56);
    v3 = *(float *)(a1 + 48);
    v4 = *(float *)(a1 + 52);
    if (v3 >= a2)
    {
      LOWORD(v6) = 0;
      v7 = 0;
    }
    else if (v4 <= a2)
    {
      LOWORD(v6) = v2 - 1;
      v7 = 0x3F80000000000000;
    }
    else
    {
      v5 = (float)((float)(a2 - v3) / (float)(v4 - v3)) * (float)v2;
      v6 = (int)v5;
      v7 = (unint64_t)COERCE_UNSIGNED_INT(v5 - (float)(int)v5) << 32;
    }
    return v7 | (unsigned __int16)v6;
  }
  else
  {
    v8 = *(float **)(a1 + 24);
    v9 = *v8;
    if (*v8 >= a2)
    {
      v16 = 0;
      v19 = 1.0 / (float)(v8[1] - v9);
      v20 = v9 - v9;
    }
    else
    {
      v10 = (*(_QWORD *)(a1 + 32) - (_QWORD)v8) >> 2;
      v11 = v10 - 1;
      v12 = v8[(unsigned __int16)(v10 - 1)];
      if (v12 <= a2)
      {
        v22 = v10 - 2;
        v16 = (unsigned __int16)(v10 - 2);
        v23 = &v8[v22];
        v19 = 1.0 / (float)(v23[1] - *v23);
        v20 = v12 - *v23;
      }
      else
      {
        v13 = 0;
        v14 = v10 - 1;
LABEL_8:
        v15 = v14;
        while (1)
        {
          v16 = (v13 + v15) >> 1;
          v17 = v8[v16];
          if (v17 > a2)
          {
            v14 = v16 - 1;
            goto LABEL_8;
          }
          v18 = v8[(v16 + 1)];
          if (v18 >= a2)
            break;
          v13 = (unsigned __int16)(v16 + 1);
        }
        if ((_DWORD)v16 == v11 - 1 || v18 > a2)
        {
          v19 = 1.0 / (float)(v18 - v17);
          v20 = a2 - v17;
        }
        else
        {
          v16 = (unsigned __int16)(v16 + 1);
          v25 = &v8[v16];
          v19 = 1.0 / (float)(v25[1] - *v25);
          v20 = v18 - *v25;
        }
      }
    }
    return v16 | ((unint64_t)COERCE_UNSIGNED_INT(v20 * v19) << 32);
  }
}

float geom::interpolating_spline<float>::evaluate_span_length(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  float v3;
  float v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 58))
  {
    v2 = *(unsigned __int16 *)(a1 + 56);
    v3 = *(float *)(a1 + 52);
    if (v2 == a2)
      v4 = *(float *)(a1 + 52);
    else
      v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(float *)(a1 + 48)
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(float *)(v5 + 4 * a2);
    v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return geom::interpolating_spline<float>::evaluate_length_betweeen((_QWORD *)a1, v4, v3);
}

float geom::interpolating_spline<float>::evaluate_length_betweeen(_QWORD *a1, float a2, float a3)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t span;
  float v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v4 = 0;
  v5 = (float)(a2 + a3) * 0.5;
  v6 = (float)(a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(float *)((char *)&geom::interpolating_spline<float>::evaluate_length_betweeen(float,float)const::table
                  + v4
                  + 4);
    span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&geom::interpolating_spline<float>::evaluate_length_betweeen(float,float)const::table+ v4)));
    v11 = (unsigned __int16)(3 * span);
    v12 = *(float *)(*a1 + 4 * (v11 + 1));
    v13 = *(float *)(*a1 + 4 * (v11 + 2));
    v14 = (float)((float)(v12 - *(float *)(*a1 + 4 * (unsigned __int16)(3 * span)))
                * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))))
        + (float)(v13 - v12)
        * (((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1)))
         * *((float *)&span + 1))
        + (float)((float)(*((float *)&span + 1) * *((float *)&span + 1))
                * (float)(*(float *)(*a1 + 4 * (v11 + 3)) - v13));
    v15 = v10 * 3.0 * v14;
    v7 = v7 + (float)(v8 * fabsf(v15));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 88;
    geom::interpolating_spline<float>::interpolating_spline(v6 - 88, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(88 * a2);
}

__n128 geom::interpolating_spline<float>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

uint64_t std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    geom::interpolating_spline<float>::~interpolating_spline(i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      abort();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(2 * a2);
}

void geom::`anonymous namespace'::fit_function_with_spline_recursively<geom::interpolating_curve<float>::build_helper(std::vector<geom::interpolating_key<float>> const&,BOOL)::{lambda(float)#1},float>(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int32x2_t v34;
  __int32 v35;
  float64x2_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 i;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  double v54;
  double v55;
  _DWORD *v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  unsigned __int16 j;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  double v67;
  double v68;
  uint64_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float v72;
  int8x16_t v73;
  float v74;
  int8x16_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 k;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  double v84;
  double v85;
  int v86;
  int v87;
  _DWORD *v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  int8x16_t v93;
  unint64_t v94;
  unint64_t v95;
  __int32 v96;
  __int32 v97;
  __int32 v98;
  int8x16_t v99;
  float v100[6];
  char v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  char v108;

  v15 = *(float *)(a2 + 8);
  v16 = *(float *)(a2 + 12);
  v18 = *(float *)(a2 + 16);
  v17 = *(float *)(a2 + 20);
  v20 = *(float *)a2;
  v19 = *(float *)(a2 + 4);
  v21 = *(float *)a2;
  v22 = v19;
  if (*((_BYTE *)a3 + 8))
  {
    v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    v24 = (float)(v16 - v15) / (float)(v17 - v15);
    v25 = (float)(v18 - v15) / (float)(v17 - v15);
    v26 = v24;
    v27 = 1.0 - v24;
    v28 = 1.0 - v25;
    v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    v99 = a7;
    v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v17), (float64x2_t)xmmword_2289B4520, v15), (float64x2_t)xmmword_2289B4530, v16), (float64x2_t)xmmword_2289B4540, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    v99 = (int8x16_t)v36;
    v35 = *(_DWORD *)(a2 + 20);
  }
  v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    v38 = (v22 + v21 * 5.0) * 0.166666667;
    v39 = (float)(v20 + v19) * 0.5;
    v40 = (v21 + v22 * 5.0) * 0.166666667;
    v41 = *a1;
    v42 = v39;
    v43 = v38;
    v44 = v40;
    if (!*(_BYTE *)(*a1 + 192))
    {
      v45 = *(_QWORD *)(v41 + 72);
      v46 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v41 + 80) - v45) >> 3);
      v91 = *(float *)(a2 + 12);
      v92 = *(float *)(a2 + 16);
      v93 = a12;
      v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (i = 0; ; i = v49 + 1)
          {
            v48 = i;
            while (1)
            {
              v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38)
                break;
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38)
              break;
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      v52 = (unsigned __int16)v46;
      v53 = (unsigned __int16)v46;
      v54 = geom::interpolating_spline<float>::evaluate_length_at(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53)
        v55 = *(float *)(*(_QWORD *)(v41 + 48) + 4 * (v52 - 1));
      else
        v55 = 0.0;
      a12 = v93;
      v35 = v96;
      v16 = v91;
      v18 = v92;
      v43 = v55 + v54;
      v58 = *a1;
      if (*(_BYTE *)(*a1 + 192))
      {
        v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        v59 = *(_QWORD *)(v58 + 72);
        v60 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (j = 0; ; j = v64 + 1)
            {
              v63 = j;
              while (1)
              {
                v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39)
                  break;
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39)
                break;
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        v65 = (unsigned __int16)v60;
        v66 = (unsigned __int16)v60;
        v67 = geom::interpolating_spline<float>::evaluate_length_at(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66)
          v68 = *(float *)(*(_QWORD *)(v58 + 48) + 4 * (v65 - 1));
        else
          v68 = 0.0;
        a12 = v93;
        v35 = v96;
        v16 = v91;
        v18 = v92;
        v43 = v61;
        v42 = v68 + v67;
        v69 = *a1;
        if (!*(_BYTE *)(*a1 + 192))
        {
          v77 = *(_QWORD *)(v69 + 72);
          v78 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v69 + 80) - v77) >> 3);
          v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (k = 0; ; k = v81 + 1)
              {
                v80 = k;
                while (1)
                {
                  v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40)
                    break;
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40)
                  break;
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          v82 = (unsigned __int16)v78;
          v83 = (unsigned __int16)v78;
          v84 = geom::interpolating_spline<float>::evaluate_length_at(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83)
            v85 = *(float *)(*(_QWORD *)(v69 + 48) + 4 * (v82 - 1));
          else
            v85 = 0.0;
          a12 = v93;
          v35 = v96;
          v16 = v91;
          v18 = v92;
          v43 = v90;
          v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      v102 = v20;
      v103 = (float)(v20 + v19) * 0.5;
      v104 = v15;
      v105 = v43;
      v106 = v16;
      v107 = v42;
      v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      v101 = v37 + 1;
      return;
    }
    v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4550);
    v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4560);
    v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4570);
    v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v50 = *(unsigned __int16 *)(a4 + 56);
    v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(_BYTE *)(a4 + 58))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v94 = a12.i64[0];
      v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(_BYTE *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        v35 = v97;
      }
    }
    v56 = *(_DWORD **)a4;
    if (v50)
    {
      v57 = *(float **)(a4 + 24);
    }
    else
    {
      *v56 = v99.i32[0];
      v57 = *(float **)(a4 + 24);
      *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  v86 = *(unsigned __int16 *)(a4 + 56);
  v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(_BYTE *)(a4 + 58))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v95 = a12.i64[0];
    v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(_BYTE *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      v35 = v98;
    }
  }
  v88 = *(_DWORD **)a4;
  if (v86)
  {
    v89 = *(float **)(a4 + 24);
  }
  else
  {
    *v88 = v99.i32[0];
    v89 = *(float **)(a4 + 24);
    *v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

uint64_t geom::interpolating_spline<float>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int> *v4;
  uint64_t v5;

  v4 = std::vector<float>::vector((std::vector<unsigned int> *)a1, (const std::vector<unsigned int> *)a2);
  std::vector<float>::vector(v4 + 1, (const std::vector<unsigned int> *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_QWORD *)(a1 + 48) = v5;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  return a1;
}

std::vector<unsigned int> *__cdecl std::vector<float>::vector(std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  int64_t v5;
  std::vector<unsigned int>::pointer v6;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = __x->__begin_;
  end = __x->__end_;
  v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<float>::__vallocate[abi:nn180100](this, v5 >> 2);
    v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v6 + v5);
  }
  return this;
}

char *std::vector<float>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

char *std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t geom::interpolating_spline<double>::find_span@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unsigned int v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  double v9;
  uint64_t v10;
  unsigned __int16 v11;
  double v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;

  if (!*(_BYTE *)(result + 66))
  {
    v8 = *(double **)(result + 24);
    v9 = *v8;
    if (*v8 >= a3)
    {
      *(_WORD *)a2 = 0;
      v19 = 1.0 / (v8[1] - v9);
      *(double *)(a2 + 16) = v19;
      v20 = v9 - v9;
    }
    else
    {
      v10 = (*(_QWORD *)(result + 32) - (_QWORD)v8) >> 3;
      v11 = v10 - 1;
      v12 = v8[(unsigned __int16)(v10 - 1)];
      if (v12 <= a3)
      {
        *(_WORD *)a2 = v10 - 2;
        v21 = &v8[(unsigned __int16)(v10 - 2)];
        v22 = *v21;
        v19 = 1.0 / (v21[1] - *v21);
        *(double *)(a2 + 16) = v19;
        v20 = v12 - v22;
      }
      else
      {
        v13 = 0;
        v14 = v11;
LABEL_8:
        v15 = v14;
        while (1)
        {
          v16 = (v13 + v15) >> 1;
          v17 = v8[v16];
          if (v17 > a3)
          {
            v14 = v16 - 1;
            goto LABEL_8;
          }
          v18 = v8[v16 + 1];
          if (v18 >= a3)
            break;
          v13 = (unsigned __int16)(v16 + 1);
        }
        if (v16 == v11 - 1 || v18 > a3)
        {
          *(_WORD *)a2 = v16;
          v26 = 1.0 / (v18 - v17);
          *(double *)(a2 + 16) = v26;
          v25 = (a3 - v17) * v26;
          goto LABEL_22;
        }
        *(_WORD *)a2 = v16 + 1;
        v23 = &v8[(unsigned __int16)(v16 + 1)];
        v24 = *v23;
        v19 = 1.0 / (v23[1] - *v23);
        *(double *)(a2 + 16) = v19;
        v20 = v18 - v24;
      }
    }
    v25 = v20 * v19;
LABEL_22:
    *(double *)(a2 + 8) = v25;
    return result;
  }
  v3 = *(unsigned __int16 *)(result + 64);
  v4 = *(double *)(result + 48);
  v5 = *(double *)(result + 56);
  if (v4 >= a3)
  {
    *(_WORD *)a2 = 0;
    v7 = 0.0;
  }
  else if (v5 <= a3)
  {
    *(_WORD *)a2 = v3 - 1;
    v7 = 1.0;
  }
  else
  {
    v6 = (a3 - v4) / (v5 - v4) * (double)v3;
    *(_WORD *)a2 = (int)v6;
    v7 = v6 - (double)(int)v6;
  }
  *(double *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = (double)v3 / (v5 - v4);
  return result;
}

double geom::interpolating_spline<double>::evaluate_span_length(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  double v3;
  double v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 66))
  {
    v2 = *(unsigned __int16 *)(a1 + 64);
    v3 = *(double *)(a1 + 56);
    if (v2 == a2)
      v4 = *(double *)(a1 + 56);
    else
      v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(double *)(v5 + 8 * a2);
    v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return geom::interpolating_spline<double>::evaluate_length_betweeen((_QWORD *)a1, v4, v3);
}

double geom::interpolating_spline<double>::evaluate_length_betweeen(_QWORD *a1, double a2, double a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  double v12;
  uint64_t v14;
  double v15;
  double v16;

  v4 = 0;
  v5 = (a2 + a3) * 0.5;
  v6 = (a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(double *)((char *)&geom::interpolating_spline<double>::evaluate_length_betweeen(double,double)const::table
                   + v4
                   + 8);
    v9 = v5
       + v6
       * *(double *)((char *)&geom::interpolating_spline<double>::evaluate_length_betweeen(double,double)const::table
                   + v4);
    v14 = 0;
    v15 = 0.0;
    v16 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v14, v9);
    v10 = (unsigned __int16)(3 * v14);
    v11 = *(double *)(*a1 + 8 * (v10 + 1));
    v12 = *(double *)(*a1 + 8 * (v10 + 2));
    v7 = v7
       + v8
       * fabs(v16* 3.0* (v15 * (1.0 - v15 + 1.0 - v15) * (v12 - v11)+ (v11 - *(double *)(*a1 + 8 * (unsigned __int16)(3 * v14))) * ((1.0 - v15) * (1.0 - v15))+ (*(double *)(*a1 + 8 * (v10 + 3)) - v12) * (v15 * v15)));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 96;
    geom::interpolating_spline<double>::interpolating_spline(v6 - 96, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 geom::interpolating_spline<double>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v2 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

uint64_t std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    geom::interpolating_spline<double>::~interpolating_spline(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void geom::`anonymous namespace'::fit_function_with_spline_recursively<geom::interpolating_curve<double>::build_helper(std::vector<geom::interpolating_key<double>> const&,BOOL)::{lambda(double)#1},double>(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  int64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  float64_t v26;
  float64x2_t v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 i;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  double v43;
  double v44;
  _QWORD *v45;
  double *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int16 j;
  int v53;
  unsigned int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int16 k;
  int v68;
  unsigned int v69;
  double v70;
  double v71;
  int v72;
  int v73;
  _QWORD *v74;
  double *v75;
  int v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  double v87;
  double v88;
  double v89;
  int64x2_t v90;
  double v91[6];
  char v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  char v99;

  v7 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  v10 = *(double *)(a2 + 32);
  v9 = *(double *)(a2 + 40);
  v12 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  if (*((_BYTE *)a3 + 8))
  {
    v13 = (v8 - v7) / (v9 - v7);
    v14 = (v10 - v7) / (v9 - v7);
    v15 = 1.0 - v13;
    v16 = 1.0 - v14;
    v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    v22 = (int64x2_t)vmulq_f64(v19, v18);
    v23 = (int64x2_t)vmulq_f64(v20, v18);
    v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    v90 = (int64x2_t)v24;
    v26 = *(double *)(a2 + 8);
  }
  else
  {
    v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v9), (float64x2_t)xmmword_2289B4520, v7), (float64x2_t)xmmword_2289B4530, v8), (float64x2_t)xmmword_2289B4540, v10);
    v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    v90 = (int64x2_t)v27;
    v26 = *(double *)(a2 + 40);
  }
  v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    v29 = (v11 + v12 * 5.0) * 0.166666667;
    v30 = (v12 + v11) * 0.5;
    v31 = (v12 + v11 * 5.0) * 0.166666667;
    v32 = *a1;
    v33 = v30;
    v34 = v29;
    v35 = v31;
    if (!*(_BYTE *)(*a1 + 208))
    {
      v36 = *(_QWORD *)(v32 + 72);
      v37 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v32 + 80) - v36) >> 5);
      v78 = *(double *)(a2 + 24);
      v79 = *(double *)(a2 + 32);
      v80 = *(double *)(a2 + 16);
      v82 = *(double *)(a2 + 40);
      v84 = v25;
      v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (i = 0; ; i = v40 + 1)
          {
            v39 = i;
            while (1)
            {
              v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29)
                break;
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29)
              break;
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        v47 = (unsigned __int16)v37;
        v48 = (unsigned __int16)v37;
        v43 = geom::interpolating_spline<double>::evaluate_length_at(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48)
          v44 = *(double *)(*(_QWORD *)(v32 + 48) + 8 * (v47 - 1));
        else
          v44 = 0.0;
        v7 = v80;
        v9 = v82;
        v25 = v84;
        v26 = v87;
        v8 = v78;
        v10 = v79;
      }
      else
      {
        v43 = geom::interpolating_spline<double>::evaluate_length_at(v36, (v11 + v12 * 5.0) * 0.166666667);
        v8 = v78;
        v10 = v79;
        v25 = v84;
        v26 = v87;
        v7 = v80;
        v9 = v82;
        v44 = 0.0;
      }
      v34 = v43 + v44;
      v49 = *a1;
      if (*(_BYTE *)(*a1 + 208))
      {
        v33 = (v12 + v11) * 0.5;
      }
      else
      {
        v50 = *(_QWORD *)(v49 + 72);
        v51 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (j = 0; ; j = v54 + 1)
            {
              v53 = j;
              while (1)
              {
                v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30)
                  break;
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30)
                break;
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          v57 = (unsigned __int16)v51;
          v58 = (unsigned __int16)v51;
          v55 = geom::interpolating_spline<double>::evaluate_length_at(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58)
            v56 = *(double *)(*(_QWORD *)(v49 + 48) + 8 * (v57 - 1));
          else
            v56 = 0.0;
          v7 = v80;
          v9 = v82;
          v25 = v84;
          v26 = v87;
          v8 = v78;
          v10 = v79;
        }
        else
        {
          v55 = geom::interpolating_spline<double>::evaluate_length_at(v50, (v12 + v11) * 0.5);
          v8 = v78;
          v10 = v79;
          v25 = v84;
          v26 = v87;
          v7 = v80;
          v9 = v82;
          v56 = 0.0;
        }
        v33 = v55 + v56;
        v59 = *a1;
        if (!*(_BYTE *)(*a1 + 208))
        {
          v65 = *(_QWORD *)(v59 + 72);
          v66 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (k = 0; ; k = v69 + 1)
              {
                v68 = k;
                while (1)
                {
                  v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31)
                    break;
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31)
                  break;
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            v76 = (unsigned __int16)v66;
            v77 = (unsigned __int16)v66;
            v70 = geom::interpolating_spline<double>::evaluate_length_at(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77)
              v71 = *(double *)(*(_QWORD *)(v59 + 48) + 8 * (v76 - 1));
            else
              v71 = 0.0;
            v7 = v80;
            v9 = v82;
            v25 = v84;
            v26 = v87;
            v8 = v78;
            v10 = v79;
          }
          else
          {
            v70 = geom::interpolating_spline<double>::evaluate_length_at(v65, (v12 + v11 * 5.0) * 0.166666667);
            v8 = v78;
            v10 = v79;
            v25 = v84;
            v26 = v87;
            v7 = v80;
            v9 = v82;
            v71 = 0.0;
          }
          v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      v93 = v12;
      v94 = (v12 + v11) * 0.5;
      v95 = v7;
      v96 = v34;
      v97 = v8;
      v98 = v33;
      v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      v92 = v28 + 1;
      return;
    }
    v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B4590), vmulq_f64(v61, (float64x2_t)xmmword_2289B4580)));
    v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45B0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45A0)));
    v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45D0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45C0)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v41 = *(unsigned __int16 *)(a4 + 64);
    v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(_BYTE *)(a4 + 66))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v81 = v7;
      v83 = v9;
      v85 = v25;
      v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      v25 = v85;
      v26 = v88;
      v7 = v81;
      v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(_BYTE *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        v25 = v85;
        v26 = v88;
        v7 = v81;
        v9 = v83;
      }
    }
    v45 = *(_QWORD **)a4;
    if (v41)
    {
      v46 = *(double **)(a4 + 24);
    }
    else
    {
      *v45 = v90.i64[0];
      v46 = *(double **)(a4 + 24);
      *v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  v72 = *(unsigned __int16 *)(a4 + 64);
  v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(_BYTE *)(a4 + 66))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v86 = v25;
    v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    v25 = v86;
    v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(_BYTE *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      v25 = v86;
      v26 = v89;
    }
  }
  v74 = *(_QWORD **)a4;
  if (v72)
  {
    v75 = *(double **)(a4 + 24);
  }
  else
  {
    *v74 = v90.i64[0];
    v75 = *(double **)(a4 + 24);
    *v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

uint64_t geom::interpolating_spline<double>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = std::vector<double>::vector((_QWORD *)a1, a2);
  std::vector<double>::vector(v4 + 3, a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v5;
  std::vector<double>::vector((_QWORD *)(a1 + 72), a2 + 72);
  return a1;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<double>::__vallocate[abi:nn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<double>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      abort();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

char *std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      abort();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

float _ZNK4geom20interpolating_splineIDv2_fE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  float v3;
  float v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 58))
  {
    v2 = *(unsigned __int16 *)(a1 + 56);
    v3 = *(float *)(a1 + 52);
    if (v2 == a2)
      v4 = *(float *)(a1 + 52);
    else
      v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(float *)(a1 + 48)
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(float *)(v5 + 4 * a2);
    v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEff((_QWORD *)a1, v4, v3);
}

float _ZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEff(_QWORD *a1, float a2, float a3)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t span;
  float v10;
  int v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;

  v4 = 0;
  v5 = (float)(a2 + a3) * 0.5;
  v6 = (float)(a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEffE5table + v4 + 4);
    span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEffE5table + v4)));
    v11 = (unsigned __int16)(3 * span);
    v12 = *(float32x2_t *)(*a1 + 8 * (v11 + 1));
    v13 = *(float32x2_t *)(*a1 + 8 * (v11 + 2));
    v14 = ((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1))) * *((float *)&span + 1);
    v15 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(vsub_f32(v13, v12), v14), vsub_f32(v12, *(float32x2_t *)(*a1 + 8 * (unsigned __int16)(3 * span))), (float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))), vsub_f32(*(float32x2_t *)(*a1 + 8 * (v11 + 3)), v13), *((float *)&span + 1) * *((float *)&span + 1)), v10 * 3.0);
    v7 = v7 + (float)(v8 * sqrtf(vaddv_f32(vmul_f32(v15, v15))));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int32x2_t v34;
  __int32 v35;
  float64x2_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 i;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  double v54;
  double v55;
  _DWORD *v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  unsigned __int16 j;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  double v67;
  double v68;
  uint64_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float v72;
  int8x16_t v73;
  float v74;
  int8x16_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 k;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  double v84;
  double v85;
  int v86;
  int v87;
  _DWORD *v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  int8x16_t v93;
  unint64_t v94;
  unint64_t v95;
  __int32 v96;
  __int32 v97;
  __int32 v98;
  int8x16_t v99;
  float v100[6];
  char v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  char v108;

  v15 = *(float *)(a2 + 8);
  v16 = *(float *)(a2 + 12);
  v18 = *(float *)(a2 + 16);
  v17 = *(float *)(a2 + 20);
  v20 = *(float *)a2;
  v19 = *(float *)(a2 + 4);
  v21 = *(float *)a2;
  v22 = v19;
  if (*((_BYTE *)a3 + 8))
  {
    v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    v24 = (float)(v16 - v15) / (float)(v17 - v15);
    v25 = (float)(v18 - v15) / (float)(v17 - v15);
    v26 = v24;
    v27 = 1.0 - v24;
    v28 = 1.0 - v25;
    v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    v99 = a7;
    v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v17), (float64x2_t)xmmword_2289B4520, v15), (float64x2_t)xmmword_2289B4530, v16), (float64x2_t)xmmword_2289B4540, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    v99 = (int8x16_t)v36;
    v35 = *(_DWORD *)(a2 + 20);
  }
  v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    v38 = (v22 + v21 * 5.0) * 0.166666667;
    v39 = (float)(v20 + v19) * 0.5;
    v40 = (v21 + v22 * 5.0) * 0.166666667;
    v41 = *a1;
    v42 = v39;
    v43 = v38;
    v44 = v40;
    if (!*(_BYTE *)(*a1 + 192))
    {
      v45 = *(_QWORD *)(v41 + 72);
      v46 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v41 + 80) - v45) >> 3);
      v91 = *(float *)(a2 + 12);
      v92 = *(float *)(a2 + 16);
      v93 = a12;
      v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (i = 0; ; i = v49 + 1)
          {
            v48 = i;
            while (1)
            {
              v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38)
                break;
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38)
              break;
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      v52 = (unsigned __int16)v46;
      v53 = (unsigned __int16)v46;
      v54 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53)
        v55 = *(float *)(*(_QWORD *)(v41 + 48) + 4 * (v52 - 1));
      else
        v55 = 0.0;
      a12 = v93;
      v35 = v96;
      v16 = v91;
      v18 = v92;
      v43 = v55 + v54;
      v58 = *a1;
      if (*(_BYTE *)(*a1 + 192))
      {
        v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        v59 = *(_QWORD *)(v58 + 72);
        v60 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (j = 0; ; j = v64 + 1)
            {
              v63 = j;
              while (1)
              {
                v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39)
                  break;
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39)
                break;
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        v65 = (unsigned __int16)v60;
        v66 = (unsigned __int16)v60;
        v67 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66)
          v68 = *(float *)(*(_QWORD *)(v58 + 48) + 4 * (v65 - 1));
        else
          v68 = 0.0;
        a12 = v93;
        v35 = v96;
        v16 = v91;
        v18 = v92;
        v43 = v61;
        v42 = v68 + v67;
        v69 = *a1;
        if (!*(_BYTE *)(*a1 + 192))
        {
          v77 = *(_QWORD *)(v69 + 72);
          v78 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v69 + 80) - v77) >> 3);
          v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (k = 0; ; k = v81 + 1)
              {
                v80 = k;
                while (1)
                {
                  v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40)
                    break;
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40)
                  break;
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          v82 = (unsigned __int16)v78;
          v83 = (unsigned __int16)v78;
          v84 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83)
            v85 = *(float *)(*(_QWORD *)(v69 + 48) + 4 * (v82 - 1));
          else
            v85 = 0.0;
          a12 = v93;
          v35 = v96;
          v16 = v91;
          v18 = v92;
          v43 = v90;
          v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      v102 = v20;
      v103 = (float)(v20 + v19) * 0.5;
      v104 = v15;
      v105 = v43;
      v106 = v16;
      v107 = v42;
      v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      v101 = v37 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v102, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v100, a3, a4);
      return;
    }
    v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4550);
    v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4560);
    v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4570);
    v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v50 = *(unsigned __int16 *)(a4 + 56);
    v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(_BYTE *)(a4 + 58))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v94 = a12.i64[0];
      v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(_BYTE *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        v35 = v97;
      }
    }
    v56 = *(_DWORD **)a4;
    if (v50)
    {
      v57 = *(float **)(a4 + 24);
    }
    else
    {
      *v56 = v99.i32[0];
      v57 = *(float **)(a4 + 24);
      *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  v86 = *(unsigned __int16 *)(a4 + 56);
  v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(_BYTE *)(a4 + 58))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v95 = a12.i64[0];
    v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(_BYTE *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      v35 = v98;
    }
  }
  v88 = *(_DWORD **)a4;
  if (v86)
  {
    v89 = *(float **)(a4 + 24);
  }
  else
  {
    *v88 = v99.i32[0];
    v89 = *(float **)(a4 + 24);
    *v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

uint64_t _ZN4geom20interpolating_splineIDv2_fEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int> *v4;
  uint64_t v5;

  v4 = (std::vector<unsigned int> *)std::vector<double>::vector((_QWORD *)a1, a2);
  std::vector<float>::vector(v4 + 1, (const std::vector<unsigned int> *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_QWORD *)(a1 + 48) = v5;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  return a1;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

float _ZNK4geom20interpolating_splineIDv3_fE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  float v3;
  float v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 58))
  {
    v2 = *(unsigned __int16 *)(a1 + 56);
    v3 = *(float *)(a1 + 52);
    if (v2 == a2)
      v4 = *(float *)(a1 + 52);
    else
      v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(float *)(a1 + 48)
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(float *)(v5 + 4 * a2);
    v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEff((_QWORD *)a1, v4, v3);
}

float _ZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEff(_QWORD *a1, float a2, float a3)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t span;
  int v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;

  v4 = 0;
  v5 = (float)(a2 + a3) * 0.5;
  v6 = (float)(a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEffE5table + v4 + 4);
    span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEffE5table + v4)));
    v10 = (unsigned __int16)(3 * span);
    v11 = *(float32x4_t *)(*a1 + 16 * (v10 + 1));
    v13 = *(float32x4_t *)(*a1 + 16 * (v10 + 2));
    v14 = ((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1))) * *((float *)&span + 1);
    v15 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vsubq_f32(v13, v11), v14), vsubq_f32(v11, *(float32x4_t *)(*a1 + 16 * (unsigned __int16)(3 * span))), (float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * (v10 + 3)), v13), *((float *)&span + 1) * *((float *)&span + 1)), v12 * 3.0);
    v16 = vmulq_f32(v15, v15);
    v7 = v7
       + (float)(v8
               * sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int32x2_t v34;
  __int32 v35;
  float64x2_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 i;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  double v54;
  double v55;
  _DWORD *v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  unsigned __int16 j;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  double v67;
  double v68;
  uint64_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float v72;
  int8x16_t v73;
  float v74;
  int8x16_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 k;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  double v84;
  double v85;
  int v86;
  int v87;
  _DWORD *v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  int8x16_t v93;
  unint64_t v94;
  unint64_t v95;
  __int32 v96;
  __int32 v97;
  __int32 v98;
  int8x16_t v99;
  float v100[6];
  char v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  char v108;

  v15 = *(float *)(a2 + 8);
  v16 = *(float *)(a2 + 12);
  v18 = *(float *)(a2 + 16);
  v17 = *(float *)(a2 + 20);
  v20 = *(float *)a2;
  v19 = *(float *)(a2 + 4);
  v21 = *(float *)a2;
  v22 = v19;
  if (*((_BYTE *)a3 + 8))
  {
    v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    v24 = (float)(v16 - v15) / (float)(v17 - v15);
    v25 = (float)(v18 - v15) / (float)(v17 - v15);
    v26 = v24;
    v27 = 1.0 - v24;
    v28 = 1.0 - v25;
    v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    v99 = a7;
    v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v17), (float64x2_t)xmmword_2289B4520, v15), (float64x2_t)xmmword_2289B4530, v16), (float64x2_t)xmmword_2289B4540, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    v99 = (int8x16_t)v36;
    v35 = *(_DWORD *)(a2 + 20);
  }
  v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    v38 = (v22 + v21 * 5.0) * 0.166666667;
    v39 = (float)(v20 + v19) * 0.5;
    v40 = (v21 + v22 * 5.0) * 0.166666667;
    v41 = *a1;
    v42 = v39;
    v43 = v38;
    v44 = v40;
    if (!*(_BYTE *)(*a1 + 192))
    {
      v45 = *(_QWORD *)(v41 + 72);
      v46 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v41 + 80) - v45) >> 3);
      v91 = *(float *)(a2 + 12);
      v92 = *(float *)(a2 + 16);
      v93 = a12;
      v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (i = 0; ; i = v49 + 1)
          {
            v48 = i;
            while (1)
            {
              v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38)
                break;
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38)
              break;
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      v52 = (unsigned __int16)v46;
      v53 = (unsigned __int16)v46;
      v54 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53)
        v55 = *(float *)(*(_QWORD *)(v41 + 48) + 4 * (v52 - 1));
      else
        v55 = 0.0;
      a12 = v93;
      v35 = v96;
      v16 = v91;
      v18 = v92;
      v43 = v55 + v54;
      v58 = *a1;
      if (*(_BYTE *)(*a1 + 192))
      {
        v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        v59 = *(_QWORD *)(v58 + 72);
        v60 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (j = 0; ; j = v64 + 1)
            {
              v63 = j;
              while (1)
              {
                v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39)
                  break;
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39)
                break;
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        v65 = (unsigned __int16)v60;
        v66 = (unsigned __int16)v60;
        v67 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66)
          v68 = *(float *)(*(_QWORD *)(v58 + 48) + 4 * (v65 - 1));
        else
          v68 = 0.0;
        a12 = v93;
        v35 = v96;
        v16 = v91;
        v18 = v92;
        v43 = v61;
        v42 = v68 + v67;
        v69 = *a1;
        if (!*(_BYTE *)(*a1 + 192))
        {
          v77 = *(_QWORD *)(v69 + 72);
          v78 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v69 + 80) - v77) >> 3);
          v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (k = 0; ; k = v81 + 1)
              {
                v80 = k;
                while (1)
                {
                  v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40)
                    break;
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40)
                  break;
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          v82 = (unsigned __int16)v78;
          v83 = (unsigned __int16)v78;
          v84 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83)
            v85 = *(float *)(*(_QWORD *)(v69 + 48) + 4 * (v82 - 1));
          else
            v85 = 0.0;
          a12 = v93;
          v35 = v96;
          v16 = v91;
          v18 = v92;
          v43 = v90;
          v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      v102 = v20;
      v103 = (float)(v20 + v19) * 0.5;
      v104 = v15;
      v105 = v43;
      v106 = v16;
      v107 = v42;
      v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      v101 = v37 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v102, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v100, a3, a4);
      return;
    }
    v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4550);
    v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4560);
    v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4570);
    v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v50 = *(unsigned __int16 *)(a4 + 56);
    v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(_BYTE *)(a4 + 58))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v94 = a12.i64[0];
      v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(_BYTE *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        v35 = v97;
      }
    }
    v56 = *(_DWORD **)a4;
    if (v50)
    {
      v57 = *(float **)(a4 + 24);
    }
    else
    {
      *v56 = v99.i32[0];
      v57 = *(float **)(a4 + 24);
      *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  v86 = *(unsigned __int16 *)(a4 + 56);
  v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(_BYTE *)(a4 + 58))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v95 = a12.i64[0];
    v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(_BYTE *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      v35 = v98;
    }
  }
  v88 = *(_DWORD **)a4;
  if (v86)
  {
    v89 = *(float **)(a4 + 24);
  }
  else
  {
    *v88 = v99.i32[0];
    v89 = *(float **)(a4 + 24);
    *v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

uint64_t _ZN4geom20interpolating_splineIDv3_fEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned int> *v4;
  uint64_t v5;

  v4 = (std::vector<unsigned int> *)_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)a1, a2);
  std::vector<float>::vector(v4 + 1, (const std::vector<unsigned int> *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_QWORD *)(a1 + 48) = v5;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  return a1;
}

_QWORD *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v5 >> 4);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

float _ZNK4geom20interpolating_splineIDv4_fE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  float v3;
  float v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 58))
  {
    v2 = *(unsigned __int16 *)(a1 + 56);
    v3 = *(float *)(a1 + 52);
    if (v2 == a2)
      v4 = *(float *)(a1 + 52);
    else
      v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(float *)(a1 + 48)
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(float *)(v5 + 4 * a2);
    v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEff((_QWORD *)a1, v4, v3);
}

float _ZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEff(_QWORD *a1, float a2, float a3)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unint64_t span;
  int v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  int8x16_t v16;

  v4 = 0;
  v5 = (float)(a2 + a3) * 0.5;
  v6 = (float)(a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEffE5table + v4 + 4);
    span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEffE5table + v4)));
    v10 = (unsigned __int16)(3 * span);
    v11 = *(float32x4_t *)(*a1 + 16 * (v10 + 1));
    v13 = *(float32x4_t *)(*a1 + 16 * (v10 + 2));
    v14 = ((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1))) * *((float *)&span + 1);
    v15 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vsubq_f32(v13, v11), v14), vsubq_f32(v11, *(float32x4_t *)(*a1 + 16 * (unsigned __int16)(3 * span))), (float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * (v10 + 3)), v13), *((float *)&span + 1) * *((float *)&span + 1)), v12 * 3.0);
    v16 = (int8x16_t)vmulq_f32(v15, v15);
    v7 = v7
       + (float)(v8
               * sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)))));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int32x2_t v34;
  __int32 v35;
  float64x2_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 i;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  double v54;
  double v55;
  _DWORD *v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  unsigned __int16 j;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  double v67;
  double v68;
  uint64_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float v72;
  int8x16_t v73;
  float v74;
  int8x16_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 k;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  double v84;
  double v85;
  int v86;
  int v87;
  _DWORD *v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  int8x16_t v93;
  unint64_t v94;
  unint64_t v95;
  __int32 v96;
  __int32 v97;
  __int32 v98;
  int8x16_t v99;
  float v100[6];
  char v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  char v108;

  v15 = *(float *)(a2 + 8);
  v16 = *(float *)(a2 + 12);
  v18 = *(float *)(a2 + 16);
  v17 = *(float *)(a2 + 20);
  v20 = *(float *)a2;
  v19 = *(float *)(a2 + 4);
  v21 = *(float *)a2;
  v22 = v19;
  if (*((_BYTE *)a3 + 8))
  {
    v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    v24 = (float)(v16 - v15) / (float)(v17 - v15);
    v25 = (float)(v18 - v15) / (float)(v17 - v15);
    v26 = v24;
    v27 = 1.0 - v24;
    v28 = 1.0 - v25;
    v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    v99 = a7;
    v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v17), (float64x2_t)xmmword_2289B4520, v15), (float64x2_t)xmmword_2289B4530, v16), (float64x2_t)xmmword_2289B4540, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    v99 = (int8x16_t)v36;
    v35 = *(_DWORD *)(a2 + 20);
  }
  v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    v38 = (v22 + v21 * 5.0) * 0.166666667;
    v39 = (float)(v20 + v19) * 0.5;
    v40 = (v21 + v22 * 5.0) * 0.166666667;
    v41 = *a1;
    v42 = v39;
    v43 = v38;
    v44 = v40;
    if (!*(_BYTE *)(*a1 + 192))
    {
      v45 = *(_QWORD *)(v41 + 72);
      v46 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v41 + 80) - v45) >> 3);
      v91 = *(float *)(a2 + 12);
      v92 = *(float *)(a2 + 16);
      v93 = a12;
      v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (i = 0; ; i = v49 + 1)
          {
            v48 = i;
            while (1)
            {
              v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38)
                break;
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38)
              break;
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      v52 = (unsigned __int16)v46;
      v53 = (unsigned __int16)v46;
      v54 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53)
        v55 = *(float *)(*(_QWORD *)(v41 + 48) + 4 * (v52 - 1));
      else
        v55 = 0.0;
      a12 = v93;
      v35 = v96;
      v16 = v91;
      v18 = v92;
      v43 = v55 + v54;
      v58 = *a1;
      if (*(_BYTE *)(*a1 + 192))
      {
        v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        v59 = *(_QWORD *)(v58 + 72);
        v60 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (j = 0; ; j = v64 + 1)
            {
              v63 = j;
              while (1)
              {
                v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39)
                  break;
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39)
                break;
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        v65 = (unsigned __int16)v60;
        v66 = (unsigned __int16)v60;
        v67 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66)
          v68 = *(float *)(*(_QWORD *)(v58 + 48) + 4 * (v65 - 1));
        else
          v68 = 0.0;
        a12 = v93;
        v35 = v96;
        v16 = v91;
        v18 = v92;
        v43 = v61;
        v42 = v68 + v67;
        v69 = *a1;
        if (!*(_BYTE *)(*a1 + 192))
        {
          v77 = *(_QWORD *)(v69 + 72);
          v78 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v69 + 80) - v77) >> 3);
          v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (k = 0; ; k = v81 + 1)
              {
                v80 = k;
                while (1)
                {
                  v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40)
                    break;
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40)
                  break;
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          v82 = (unsigned __int16)v78;
          v83 = (unsigned __int16)v78;
          v84 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83)
            v85 = *(float *)(*(_QWORD *)(v69 + 48) + 4 * (v82 - 1));
          else
            v85 = 0.0;
          a12 = v93;
          v35 = v96;
          v16 = v91;
          v18 = v92;
          v43 = v90;
          v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      v102 = v20;
      v103 = (float)(v20 + v19) * 0.5;
      v104 = v15;
      v105 = v43;
      v106 = v16;
      v107 = v42;
      v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      v101 = v37 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v102, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v100, a3, a4);
      return;
    }
    v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4550);
    v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4560);
    v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_2289B4570);
    v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001)
          goto LABEL_48;
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001)
        goto LABEL_48;
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v50 = *(unsigned __int16 *)(a4 + 56);
    v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(_BYTE *)(a4 + 58))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v94 = a12.i64[0];
      v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(_BYTE *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        v35 = v97;
      }
    }
    v56 = *(_DWORD **)a4;
    if (v50)
    {
      v57 = *(float **)(a4 + 24);
    }
    else
    {
      *v56 = v99.i32[0];
      v57 = *(float **)(a4 + 24);
      *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  v86 = *(unsigned __int16 *)(a4 + 56);
  v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(_BYTE *)(a4 + 58))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v95 = a12.i64[0];
    v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(_BYTE *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      v35 = v98;
    }
  }
  v88 = *(_DWORD **)a4;
  if (v86)
  {
    v89 = *(float **)(a4 + 24);
  }
  else
  {
    *v88 = v99.i32[0];
    v89 = *(float **)(a4 + 24);
    *v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

double _ZNK4geom20interpolating_splineIDv2_dE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  double v3;
  double v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 66))
  {
    v2 = *(unsigned __int16 *)(a1 + 64);
    v3 = *(double *)(a1 + 56);
    if (v2 == a2)
      v4 = *(double *)(a1 + 56);
    else
      v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(double *)(v5 + 8 * a2);
    v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEdd((_QWORD *)a1, v4, v3);
}

double _ZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEdd(_QWORD *a1, double a2, double a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v15;
  double v16;
  double v17;

  v4 = 0;
  v5 = (a2 + a3) * 0.5;
  v6 = (a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEddE5table + v4 + 8);
    v9 = v5
       + v6 * *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEddE5table + v4);
    v15 = 0;
    v16 = 0.0;
    v17 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v15, v9);
    v10 = (unsigned __int16)(3 * v15);
    v11 = *(float64x2_t *)(*a1 + 16 * (v10 + 1));
    v12 = *(float64x2_t *)(*a1 + 16 * (v10 + 2));
    v13 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v12, v11), v16 * (1.0 - v16 + 1.0 - v16)), vsubq_f64(v11, *(float64x2_t *)(*a1 + 16 * (unsigned __int16)(3 * v15))), (1.0 - v16) * (1.0 - v16)), vsubq_f64(*(float64x2_t *)(*a1 + 16 * (v10 + 3)), v12), v16 * v16), v17 * 3.0);
    v7 = v7 + v8 * sqrt(vaddvq_f64(vmulq_f64(v13, v13)));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  int64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  float64_t v26;
  float64x2_t v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 i;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  double v43;
  double v44;
  _QWORD *v45;
  double *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int16 j;
  int v53;
  unsigned int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int16 k;
  int v68;
  unsigned int v69;
  double v70;
  double v71;
  int v72;
  int v73;
  _QWORD *v74;
  double *v75;
  int v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  double v87;
  double v88;
  double v89;
  int64x2_t v90;
  double v91[6];
  char v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  char v99;

  v7 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  v10 = *(double *)(a2 + 32);
  v9 = *(double *)(a2 + 40);
  v12 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  if (*((_BYTE *)a3 + 8))
  {
    v13 = (v8 - v7) / (v9 - v7);
    v14 = (v10 - v7) / (v9 - v7);
    v15 = 1.0 - v13;
    v16 = 1.0 - v14;
    v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    v22 = (int64x2_t)vmulq_f64(v19, v18);
    v23 = (int64x2_t)vmulq_f64(v20, v18);
    v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    v90 = (int64x2_t)v24;
    v26 = *(double *)(a2 + 8);
  }
  else
  {
    v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v9), (float64x2_t)xmmword_2289B4520, v7), (float64x2_t)xmmword_2289B4530, v8), (float64x2_t)xmmword_2289B4540, v10);
    v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    v90 = (int64x2_t)v27;
    v26 = *(double *)(a2 + 40);
  }
  v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    v29 = (v11 + v12 * 5.0) * 0.166666667;
    v30 = (v12 + v11) * 0.5;
    v31 = (v12 + v11 * 5.0) * 0.166666667;
    v32 = *a1;
    v33 = v30;
    v34 = v29;
    v35 = v31;
    if (!*(_BYTE *)(*a1 + 208))
    {
      v36 = *(_QWORD *)(v32 + 72);
      v37 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v32 + 80) - v36) >> 5);
      v78 = *(double *)(a2 + 24);
      v79 = *(double *)(a2 + 32);
      v80 = *(double *)(a2 + 16);
      v82 = *(double *)(a2 + 40);
      v84 = v25;
      v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (i = 0; ; i = v40 + 1)
          {
            v39 = i;
            while (1)
            {
              v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29)
                break;
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29)
              break;
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        v47 = (unsigned __int16)v37;
        v48 = (unsigned __int16)v37;
        v43 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48)
          v44 = *(double *)(*(_QWORD *)(v32 + 48) + 8 * (v47 - 1));
        else
          v44 = 0.0;
        v7 = v80;
        v9 = v82;
        v25 = v84;
        v26 = v87;
        v8 = v78;
        v10 = v79;
      }
      else
      {
        v43 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v36, (v11 + v12 * 5.0) * 0.166666667);
        v8 = v78;
        v10 = v79;
        v25 = v84;
        v26 = v87;
        v7 = v80;
        v9 = v82;
        v44 = 0.0;
      }
      v34 = v43 + v44;
      v49 = *a1;
      if (*(_BYTE *)(*a1 + 208))
      {
        v33 = (v12 + v11) * 0.5;
      }
      else
      {
        v50 = *(_QWORD *)(v49 + 72);
        v51 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (j = 0; ; j = v54 + 1)
            {
              v53 = j;
              while (1)
              {
                v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30)
                  break;
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30)
                break;
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          v57 = (unsigned __int16)v51;
          v58 = (unsigned __int16)v51;
          v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58)
            v56 = *(double *)(*(_QWORD *)(v49 + 48) + 8 * (v57 - 1));
          else
            v56 = 0.0;
          v7 = v80;
          v9 = v82;
          v25 = v84;
          v26 = v87;
          v8 = v78;
          v10 = v79;
        }
        else
        {
          v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50, (v12 + v11) * 0.5);
          v8 = v78;
          v10 = v79;
          v25 = v84;
          v26 = v87;
          v7 = v80;
          v9 = v82;
          v56 = 0.0;
        }
        v33 = v55 + v56;
        v59 = *a1;
        if (!*(_BYTE *)(*a1 + 208))
        {
          v65 = *(_QWORD *)(v59 + 72);
          v66 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (k = 0; ; k = v69 + 1)
              {
                v68 = k;
                while (1)
                {
                  v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31)
                    break;
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31)
                  break;
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            v76 = (unsigned __int16)v66;
            v77 = (unsigned __int16)v66;
            v70 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77)
              v71 = *(double *)(*(_QWORD *)(v59 + 48) + 8 * (v76 - 1));
            else
              v71 = 0.0;
            v7 = v80;
            v9 = v82;
            v25 = v84;
            v26 = v87;
            v8 = v78;
            v10 = v79;
          }
          else
          {
            v70 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v65, (v12 + v11 * 5.0) * 0.166666667);
            v8 = v78;
            v10 = v79;
            v25 = v84;
            v26 = v87;
            v7 = v80;
            v9 = v82;
            v71 = 0.0;
          }
          v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      v93 = v12;
      v94 = (v12 + v11) * 0.5;
      v95 = v7;
      v96 = v34;
      v97 = v8;
      v98 = v33;
      v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      v92 = v28 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v93, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v91, a3, a4);
      return;
    }
    v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B4590), vmulq_f64(v61, (float64x2_t)xmmword_2289B4580)));
    v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45B0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45A0)));
    v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45D0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45C0)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v41 = *(unsigned __int16 *)(a4 + 64);
    v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(_BYTE *)(a4 + 66))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v81 = v7;
      v83 = v9;
      v85 = v25;
      v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      v25 = v85;
      v26 = v88;
      v7 = v81;
      v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(_BYTE *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        v25 = v85;
        v26 = v88;
        v7 = v81;
        v9 = v83;
      }
    }
    v45 = *(_QWORD **)a4;
    if (v41)
    {
      v46 = *(double **)(a4 + 24);
    }
    else
    {
      *v45 = v90.i64[0];
      v46 = *(double **)(a4 + 24);
      *v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  v72 = *(unsigned __int16 *)(a4 + 64);
  v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(_BYTE *)(a4 + 66))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v86 = v25;
    v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    v25 = v86;
    v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(_BYTE *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      v25 = v86;
      v26 = v89;
    }
  }
  v74 = *(_QWORD **)a4;
  if (v72)
  {
    v75 = *(double **)(a4 + 24);
  }
  else
  {
    *v74 = v90.i64[0];
    v75 = *(double **)(a4 + 24);
    *v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

uint64_t _ZN4geom20interpolating_splineIDv2_dEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)a1, a2);
  std::vector<double>::vector(v4 + 3, a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v5;
  std::vector<double>::vector((_QWORD *)(a1 + 72), a2 + 72);
  return a1;
}

double _ZNK4geom20interpolating_splineIDv3_dE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  double v3;
  double v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 66))
  {
    v2 = *(unsigned __int16 *)(a1 + 64);
    v3 = *(double *)(a1 + 56);
    if (v2 == a2)
      v4 = *(double *)(a1 + 56);
    else
      v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(double *)(v5 + 8 * a2);
    v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEdd((_QWORD *)a1, v4, v3);
}

double _ZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEdd(_QWORD *a1, double a2, double a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  uint64_t v32;
  double v33;
  double v34;

  v4 = 0;
  v5 = (a2 + a3) * 0.5;
  v6 = (a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEddE5table + v4 + 8);
    v9 = v5
       + v6 * *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEddE5table + v4);
    v32 = 0;
    v33 = 0.0;
    v34 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v32, v9);
    v10.f64[0] = v34 * 3.0;
    v11 = (unsigned __int16)(3 * v32);
    v12 = *a1 + 32 * (v11 + 1);
    v13 = *a1 + 32 * (unsigned __int16)(3 * v32);
    v14 = *(float64x2_t *)v13;
    v15 = *(float64x2_t *)(v12 + 16);
    v16 = vsubq_f64(v15, *(float64x2_t *)(v13 + 16));
    v17 = *a1 + 32 * (v11 + 2);
    v19 = *(float64x2_t *)v17;
    v18 = *(float64x2_t *)(v17 + 16);
    v20 = vsubq_f64(*(float64x2_t *)v17, *(float64x2_t *)v12);
    v21 = *a1 + 32 * (v11 + 3);
    v22 = *(float64x2_t *)(v21 + 16);
    v23 = vsubq_f64(v18, v15);
    v24 = 1.0 - v33;
    v25.f64[0] = v24 * v24;
    v26 = vsubq_f64(v22, v18);
    v22.f64[0] = v33 * (v24 + v24);
    v27.f64[0] = v33 * v33;
    v28 = vmlaq_f64(vmlaq_f64(vmulq_f64(v22, v23), v25, v16), v27, v26);
    v29 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v22.f64[0]), vsubq_f64(*(float64x2_t *)v12, v14), v24 * v24), vsubq_f64(*(float64x2_t *)v21, v19), v33 * v33), v34 * 3.0);
    v30 = vmulq_f64(v10, v28);
    v7 = v7 + v8 * sqrt(vmulq_f64(v30, v30).f64[0] + vaddvq_f64(vmulq_f64(v29, v29)));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  int64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  float64_t v26;
  float64x2_t v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 i;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  double v43;
  double v44;
  _QWORD *v45;
  double *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int16 j;
  int v53;
  unsigned int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int16 k;
  int v68;
  unsigned int v69;
  double v70;
  double v71;
  int v72;
  int v73;
  _QWORD *v74;
  double *v75;
  int v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  double v87;
  double v88;
  double v89;
  int64x2_t v90;
  double v91[6];
  char v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  char v99;

  v7 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  v10 = *(double *)(a2 + 32);
  v9 = *(double *)(a2 + 40);
  v12 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  if (*((_BYTE *)a3 + 8))
  {
    v13 = (v8 - v7) / (v9 - v7);
    v14 = (v10 - v7) / (v9 - v7);
    v15 = 1.0 - v13;
    v16 = 1.0 - v14;
    v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    v22 = (int64x2_t)vmulq_f64(v19, v18);
    v23 = (int64x2_t)vmulq_f64(v20, v18);
    v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    v90 = (int64x2_t)v24;
    v26 = *(double *)(a2 + 8);
  }
  else
  {
    v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v9), (float64x2_t)xmmword_2289B4520, v7), (float64x2_t)xmmword_2289B4530, v8), (float64x2_t)xmmword_2289B4540, v10);
    v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    v90 = (int64x2_t)v27;
    v26 = *(double *)(a2 + 40);
  }
  v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    v29 = (v11 + v12 * 5.0) * 0.166666667;
    v30 = (v12 + v11) * 0.5;
    v31 = (v12 + v11 * 5.0) * 0.166666667;
    v32 = *a1;
    v33 = v30;
    v34 = v29;
    v35 = v31;
    if (!*(_BYTE *)(*a1 + 208))
    {
      v36 = *(_QWORD *)(v32 + 72);
      v37 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v32 + 80) - v36) >> 5);
      v78 = *(double *)(a2 + 24);
      v79 = *(double *)(a2 + 32);
      v80 = *(double *)(a2 + 16);
      v82 = *(double *)(a2 + 40);
      v84 = v25;
      v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (i = 0; ; i = v40 + 1)
          {
            v39 = i;
            while (1)
            {
              v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29)
                break;
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29)
              break;
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        v47 = (unsigned __int16)v37;
        v48 = (unsigned __int16)v37;
        v43 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48)
          v44 = *(double *)(*(_QWORD *)(v32 + 48) + 8 * (v47 - 1));
        else
          v44 = 0.0;
        v7 = v80;
        v9 = v82;
        v25 = v84;
        v26 = v87;
        v8 = v78;
        v10 = v79;
      }
      else
      {
        v43 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v36, (v11 + v12 * 5.0) * 0.166666667);
        v8 = v78;
        v10 = v79;
        v25 = v84;
        v26 = v87;
        v7 = v80;
        v9 = v82;
        v44 = 0.0;
      }
      v34 = v43 + v44;
      v49 = *a1;
      if (*(_BYTE *)(*a1 + 208))
      {
        v33 = (v12 + v11) * 0.5;
      }
      else
      {
        v50 = *(_QWORD *)(v49 + 72);
        v51 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (j = 0; ; j = v54 + 1)
            {
              v53 = j;
              while (1)
              {
                v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30)
                  break;
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30)
                break;
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          v57 = (unsigned __int16)v51;
          v58 = (unsigned __int16)v51;
          v55 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58)
            v56 = *(double *)(*(_QWORD *)(v49 + 48) + 8 * (v57 - 1));
          else
            v56 = 0.0;
          v7 = v80;
          v9 = v82;
          v25 = v84;
          v26 = v87;
          v8 = v78;
          v10 = v79;
        }
        else
        {
          v55 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v50, (v12 + v11) * 0.5);
          v8 = v78;
          v10 = v79;
          v25 = v84;
          v26 = v87;
          v7 = v80;
          v9 = v82;
          v56 = 0.0;
        }
        v33 = v55 + v56;
        v59 = *a1;
        if (!*(_BYTE *)(*a1 + 208))
        {
          v65 = *(_QWORD *)(v59 + 72);
          v66 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (k = 0; ; k = v69 + 1)
              {
                v68 = k;
                while (1)
                {
                  v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31)
                    break;
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31)
                  break;
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            v76 = (unsigned __int16)v66;
            v77 = (unsigned __int16)v66;
            v70 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77)
              v71 = *(double *)(*(_QWORD *)(v59 + 48) + 8 * (v76 - 1));
            else
              v71 = 0.0;
            v7 = v80;
            v9 = v82;
            v25 = v84;
            v26 = v87;
            v8 = v78;
            v10 = v79;
          }
          else
          {
            v70 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v65, (v12 + v11 * 5.0) * 0.166666667);
            v8 = v78;
            v10 = v79;
            v25 = v84;
            v26 = v87;
            v7 = v80;
            v9 = v82;
            v71 = 0.0;
          }
          v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      v93 = v12;
      v94 = (v12 + v11) * 0.5;
      v95 = v7;
      v96 = v34;
      v97 = v8;
      v98 = v33;
      v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      v92 = v28 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v93, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v91, a3, a4);
      return;
    }
    v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B4590), vmulq_f64(v61, (float64x2_t)xmmword_2289B4580)));
    v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45B0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45A0)));
    v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45D0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45C0)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v41 = *(unsigned __int16 *)(a4 + 64);
    v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(_BYTE *)(a4 + 66))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v81 = v7;
      v83 = v9;
      v85 = v25;
      v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      v25 = v85;
      v26 = v88;
      v7 = v81;
      v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(_BYTE *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        v25 = v85;
        v26 = v88;
        v7 = v81;
        v9 = v83;
      }
    }
    v45 = *(_QWORD **)a4;
    if (v41)
    {
      v46 = *(double **)(a4 + 24);
    }
    else
    {
      *v45 = v90.i64[0];
      v46 = *(double **)(a4 + 24);
      *v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  v72 = *(unsigned __int16 *)(a4 + 64);
  v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(_BYTE *)(a4 + 66))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v86 = v25;
    v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    v25 = v86;
    v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(_BYTE *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      v25 = v86;
      v26 = v89;
    }
  }
  v74 = *(_QWORD **)a4;
  if (v72)
  {
    v75 = *(double **)(a4 + 24);
  }
  else
  {
    *v74 = v90.i64[0];
    v75 = *(double **)(a4 + 24);
    *v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

uint64_t _ZN4geom20interpolating_splineIDv3_dEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)a1, a2);
  std::vector<double>::vector(v4 + 3, a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v5;
  std::vector<double>::vector((_QWORD *)(a1 + 72), a2 + 72);
  return a1;
}

_QWORD *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v5 >> 5);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

double _ZNK4geom20interpolating_splineIDv4_dE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v2;
  double v3;
  double v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 66))
  {
    v2 = *(unsigned __int16 *)(a1 + 64);
    v3 = *(double *)(a1 + 56);
    if (v2 == a2)
      v4 = *(double *)(a1 + 56);
    else
      v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    if (v2 != (unsigned __int16)(a2 + 1))
      v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(double *)(v5 + 8 * a2);
    v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEdd((_QWORD *)a1, v4, v3);
}

double _ZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEdd(_QWORD *a1, double a2, double a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v27;
  double v28;
  double v29;

  v4 = 0;
  v5 = (a2 + a3) * 0.5;
  v6 = (a3 - a2) * 0.5;
  v7 = 0.0;
  do
  {
    v8 = *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEddE5table + v4 + 8);
    v9 = v5
       + v6 * *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEddE5table + v4);
    v27 = 0;
    v28 = 0.0;
    v29 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v27, v9);
    v10 = (unsigned __int16)(3 * v27);
    v11 = *a1 + 32 * (v10 + 1);
    v12 = *a1 + 32 * (unsigned __int16)(3 * v27);
    v13 = *(float64x2_t *)v12;
    v14 = *(float64x2_t *)(v11 + 16);
    v15 = vsubq_f64(v14, *(float64x2_t *)(v12 + 16));
    v16 = *a1 + 32 * (v10 + 2);
    v18 = *(float64x2_t *)v16;
    v17 = *(float64x2_t *)(v16 + 16);
    v19 = vsubq_f64(*(float64x2_t *)v16, *(float64x2_t *)v11);
    v20 = (float64x2_t *)(*a1 + 32 * (v10 + 3));
    v21 = 1.0 - v28;
    v22 = v21 * v21;
    v23 = v28 * (v21 + v21);
    v24 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, v23), vsubq_f64(*(float64x2_t *)v11, v13), v22), vsubq_f64(*v20, v18), v28 * v28), v29 * 3.0);
    v25 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v17, v14), v23), v15, v22), vsubq_f64(v20[1], v17), v28 * v28), v29 * 3.0);
    v7 = v7 + v8 * sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v24, v24), vmulq_f64(v25, v25))));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  int64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  int64x2_t v25;
  float64_t v26;
  float64x2_t v27;
  unsigned int v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 i;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  double v43;
  double v44;
  _QWORD *v45;
  double *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int16 j;
  int v53;
  unsigned int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  uint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int16 k;
  int v68;
  unsigned int v69;
  double v70;
  double v71;
  int v72;
  int v73;
  _QWORD *v74;
  double *v75;
  int v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  double v87;
  double v88;
  double v89;
  int64x2_t v90;
  double v91[6];
  char v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  char v99;

  v7 = *(double *)(a2 + 16);
  v8 = *(double *)(a2 + 24);
  v10 = *(double *)(a2 + 32);
  v9 = *(double *)(a2 + 40);
  v12 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  if (*((_BYTE *)a3 + 8))
  {
    v13 = (v8 - v7) / (v9 - v7);
    v14 = (v10 - v7) / (v9 - v7);
    v15 = 1.0 - v13;
    v16 = 1.0 - v14;
    v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    v22 = (int64x2_t)vmulq_f64(v19, v18);
    v23 = (int64x2_t)vmulq_f64(v20, v18);
    v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    v90 = (int64x2_t)v24;
    v26 = *(double *)(a2 + 8);
  }
  else
  {
    v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_2289B4510, v9), (float64x2_t)xmmword_2289B4520, v7), (float64x2_t)xmmword_2289B4530, v8), (float64x2_t)xmmword_2289B4540, v10);
    v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    v90 = (int64x2_t)v27;
    v26 = *(double *)(a2 + 40);
  }
  v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    v29 = (v11 + v12 * 5.0) * 0.166666667;
    v30 = (v12 + v11) * 0.5;
    v31 = (v12 + v11 * 5.0) * 0.166666667;
    v32 = *a1;
    v33 = v30;
    v34 = v29;
    v35 = v31;
    if (!*(_BYTE *)(*a1 + 208))
    {
      v36 = *(_QWORD *)(v32 + 72);
      v37 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v32 + 80) - v36) >> 5);
      v78 = *(double *)(a2 + 24);
      v79 = *(double *)(a2 + 32);
      v80 = *(double *)(a2 + 16);
      v82 = *(double *)(a2 + 40);
      v84 = v25;
      v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (i = 0; ; i = v40 + 1)
          {
            v39 = i;
            while (1)
            {
              v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29)
                break;
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29)
              break;
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        v47 = (unsigned __int16)v37;
        v48 = (unsigned __int16)v37;
        v43 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48)
          v44 = *(double *)(*(_QWORD *)(v32 + 48) + 8 * (v47 - 1));
        else
          v44 = 0.0;
        v7 = v80;
        v9 = v82;
        v25 = v84;
        v26 = v87;
        v8 = v78;
        v10 = v79;
      }
      else
      {
        v43 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v36, (v11 + v12 * 5.0) * 0.166666667);
        v8 = v78;
        v10 = v79;
        v25 = v84;
        v26 = v87;
        v7 = v80;
        v9 = v82;
        v44 = 0.0;
      }
      v34 = v43 + v44;
      v49 = *a1;
      if (*(_BYTE *)(*a1 + 208))
      {
        v33 = (v12 + v11) * 0.5;
      }
      else
      {
        v50 = *(_QWORD *)(v49 + 72);
        v51 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (j = 0; ; j = v54 + 1)
            {
              v53 = j;
              while (1)
              {
                v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30)
                  break;
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30)
                break;
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          v57 = (unsigned __int16)v51;
          v58 = (unsigned __int16)v51;
          v55 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58)
            v56 = *(double *)(*(_QWORD *)(v49 + 48) + 8 * (v57 - 1));
          else
            v56 = 0.0;
          v7 = v80;
          v9 = v82;
          v25 = v84;
          v26 = v87;
          v8 = v78;
          v10 = v79;
        }
        else
        {
          v55 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v50, (v12 + v11) * 0.5);
          v8 = v78;
          v10 = v79;
          v25 = v84;
          v26 = v87;
          v7 = v80;
          v9 = v82;
          v56 = 0.0;
        }
        v33 = v55 + v56;
        v59 = *a1;
        if (!*(_BYTE *)(*a1 + 208))
        {
          v65 = *(_QWORD *)(v59 + 72);
          v66 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (k = 0; ; k = v69 + 1)
              {
                v68 = k;
                while (1)
                {
                  v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31)
                    break;
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31)
                  break;
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            v76 = (unsigned __int16)v66;
            v77 = (unsigned __int16)v66;
            v70 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77)
              v71 = *(double *)(*(_QWORD *)(v59 + 48) + 8 * (v76 - 1));
            else
              v71 = 0.0;
            v7 = v80;
            v9 = v82;
            v25 = v84;
            v26 = v87;
            v8 = v78;
            v10 = v79;
          }
          else
          {
            v70 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v65, (v12 + v11 * 5.0) * 0.166666667);
            v8 = v78;
            v10 = v79;
            v25 = v84;
            v26 = v87;
            v7 = v80;
            v9 = v82;
            v71 = 0.0;
          }
          v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      v93 = v12;
      v94 = (v12 + v11) * 0.5;
      v95 = v7;
      v96 = v34;
      v97 = v8;
      v98 = v33;
      v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      v92 = v28 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v93, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v91, a3, a4);
      return;
    }
    v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(_QWORD *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B4590), vmulq_f64(v61, (float64x2_t)xmmword_2289B4580)));
    v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45B0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45A0)));
    v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_2289B45D0), vmulq_f64(v61, (float64x2_t)xmmword_2289B45C0)));
    if (*((_BYTE *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001)
          goto LABEL_51;
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001)
        goto LABEL_51;
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((_BYTE *)a3 + 8))
  {
LABEL_16:
    v41 = *(unsigned __int16 *)(a4 + 64);
    v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(_BYTE *)(a4 + 66))
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v81 = v7;
      v83 = v9;
      v85 = v25;
      v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      v25 = v85;
      v26 = v88;
      v7 = v81;
      v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(_BYTE *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        v25 = v85;
        v26 = v88;
        v7 = v81;
        v9 = v83;
      }
    }
    v45 = *(_QWORD **)a4;
    if (v41)
    {
      v46 = *(double **)(a4 + 24);
    }
    else
    {
      *v45 = v90.i64[0];
      v46 = *(double **)(a4 + 24);
      *v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  v72 = *(unsigned __int16 *)(a4 + 64);
  v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(_BYTE *)(a4 + 66))
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v86 = v25;
    v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    v25 = v86;
    v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(_BYTE *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      v25 = v86;
      v26 = v89;
    }
  }
  v74 = *(_QWORD **)a4;
  if (v72)
  {
    v75 = *(double **)(a4 + 24);
  }
  else
  {
    *v74 = v90.i64[0];
    v75 = *(double **)(a4 + 24);
    *v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

float geom::convex_hull_triangulated_3<float>(unint64_t a1, float32x4_t *a2, _QWORD *a3, unsigned int a4, float a5)
{
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  char *v13;
  unsigned int *v14;
  char **v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  _DWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  char *i;
  unint64_t v55;
  unsigned int *v57;
  _BYTE v58[48];
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  _OWORD __dst[4];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  a3[1] = *a3;
  if (!a1)
    return 0.0;
  if (a1 > 3)
  {
    v10 = a1;
  }
  else
  {
    memcpy(__dst, a2, 16 * a1);
    v9 = __dst[0];
    v10 = 4;
    v11 = a1;
    do
      __dst[v11++] = v9;
    while (v11 != 4);
    a2 = (float32x4_t *)__dst;
  }
  v55 = v10;
  v13 = (char *)*a3;
  a3[1] = *a3;
  v14 = v60;
  v57 = v61;
  if (v60 != v61)
  {
    v15 = (char **)(a3 + 2);
    do
    {
      v16 = *v14;
      if ((_DWORD)v16 != -1)
      {
        v17 = *(_DWORD *)(v59 + 16 * v16 + 12);
        v18 = *v14;
        do
        {
          v19 = v59;
          v20 = v59 + 16 * v18;
          v23 = *(_DWORD *)(v20 + 8);
          v22 = (unsigned int *)(v20 + 8);
          v21 = v23;
          if (v18 != v16 && v21 != v16)
          {
            v24 = *v15;
            if (v13 >= *v15)
            {
              v26 = (char *)*a3;
              v27 = (uint64_t)&v13[-*a3] >> 2;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62)
                goto LABEL_73;
              v29 = v24 - v26;
              if (v29 >> 1 > v28)
                v28 = v29 >> 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
                v30 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v30);
                v26 = (char *)*a3;
                v13 = (char *)a3[1];
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[4 * v27];
              *(_DWORD *)v32 = v17;
              v25 = v32 + 4;
              while (v13 != v26)
              {
                v33 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v32 - 1) = v33;
                v32 -= 4;
              }
              v24 = &v31[4 * v30];
              *a3 = v32;
              a3[1] = v25;
              a3[2] = v24;
              if (v26)
              {
                operator delete(v26);
                v24 = *v15;
              }
            }
            else
            {
              *(_DWORD *)v13 = v17;
              v25 = v13 + 4;
            }
            a3[1] = v25;
            v34 = (_DWORD *)(v19 + 16 * v18 + 12);
            if (v25 >= v24)
            {
              v36 = (char *)*a3;
              v37 = (uint64_t)&v25[-*a3] >> 2;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62)
                goto LABEL_73;
              v39 = v24 - v36;
              if (v39 >> 1 > v38)
                v38 = v39 >> 1;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                v40 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v40);
                v36 = (char *)*a3;
                v25 = (char *)a3[1];
              }
              else
              {
                v41 = 0;
              }
              v42 = &v41[4 * v37];
              *(_DWORD *)v42 = *v34;
              v35 = v42 + 4;
              while (v25 != v36)
              {
                v43 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v42 - 1) = v43;
                v42 -= 4;
              }
              v24 = &v41[4 * v40];
              *a3 = v42;
              a3[1] = v35;
              a3[2] = v24;
              if (v36)
              {
                operator delete(v36);
                v24 = *v15;
              }
            }
            else
            {
              *(_DWORD *)v25 = *v34;
              v35 = v25 + 4;
            }
            a3[1] = v35;
            v44 = (_DWORD *)(v19 + 16 * v21 + 12);
            if (v35 >= v24)
            {
              v45 = (char *)*a3;
              v46 = (uint64_t)&v35[-*a3] >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
LABEL_73:
                abort();
              v48 = v24 - v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v49);
                v45 = (char *)*a3;
                v35 = (char *)a3[1];
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = *v44;
              v13 = v51 + 4;
              while (v35 != v45)
              {
                v52 = *((_DWORD *)v35 - 1);
                v35 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *a3 = v51;
              a3[1] = v13;
              a3[2] = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v35 = *v44;
              v13 = v35 + 4;
            }
            a3[1] = v13;
            v21 = *v22;
            v16 = *v14;
          }
          v18 = v21;
        }
        while (v21 != v16);
      }
      v14 += 20;
    }
    while (v14 != v57);
  }
  if (v55 != a1)
  {
    for (i = (char *)*a3; i != v13; i += 4)
    {
      if (*(unsigned int *)i >= a1)
        *(_DWORD *)i = 0;
    }
  }
  return v12;
}

uint64_t geom::`anonymous namespace'::hull_mesh<float>::hull_mesh(uint64_t a1, float32x4_t *a2, unint64_t a3, float a4)
{
  void **v8;
  std::vector<int> *v9;
  char *v10;
  float v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t *v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  _QWORD *v33;
  float32x4_t *v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  std::vector<int>::value_type __x;

  *(_OWORD *)(a1 + 96) = 0u;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v9 = (std::vector<int> *)(a1 + 168);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v10 = (char *)operator new(0xCuLL);
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 4) = 0;
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 152) = v10 + 12;
  *(_QWORD *)(a1 + 160) = v10 + 12;
  __x = 0;
  std::vector<unsigned int>::resize(v9, a3, &__x);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 336) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 344) = -1;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 488) = 0;
  v11 = 0.00000011921;
  if (a4 >= 0.00000011921)
    v11 = a4;
  *(float *)(a1 + 528) = v11;
  v12 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  if (a3)
  {
    v13 = 16 * a3;
    v14.i64[0] = 0x7F0000007FLL;
    v14.i32[2] = 127;
    v15 = a2;
    do
    {
      v16 = *v15++;
      v17 = v16;
      v17.i32[3] = 0;
      v12.i32[3] = 0;
      v12 = vminnmq_f32(v17, v12);
      v14.i32[3] = 0;
      v14 = vmaxnmq_f32(v17, v14);
      v13 -= 16;
    }
    while (v13);
  }
  else
  {
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
  }
  v47 = v14;
  v49 = v12;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(v8, a3);
  if (a3)
  {
    v19.i64[0] = 0x3F0000003F000000;
    v19.i64[1] = 0x3F0000003F000000;
    v20 = vmulq_f32(vsubq_f32(v47, v49), v19);
    v18.i64[0] = 0x3400000034000000;
    __asm { FMOV            V4.4S, #1.0 }
    v26 = _Q4;
    v26.i32[1] = v20.i32[1];
    v26.i32[2] = v20.i32[2];
    v27 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v18, v20)), 0), (int8x16_t)v20, v26);
    v28 = _Q4;
    v28.i32[0] = v27.i32[0];
    v28.i32[2] = v27.i32[2];
    v27.i32[3] = v20.i32[3];
    v29 = &a2[a3];
    v30 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 1))), 0), v27, v28);
    _Q4.i64[0] = v30.i64[0];
    v31 = vmulq_f32(vaddq_f32(v47, v49), v19);
    v32 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v18, (float32x4_t)vdupq_laneq_s32(v30, 2))), 0), (int8x16_t)v30, _Q4);
    v33 = (_QWORD *)(a1 + 112);
    v34 = *(float32x4_t **)(a1 + 104);
    v46 = v32;
    v48 = v31;
    do
    {
      v35 = vdivq_f32(vsubq_f32(*a2, v31), v32);
      if ((unint64_t)v34 >= *v33)
      {
        v36 = ((char *)v34 - (_BYTE *)*v8) >> 4;
        if ((unint64_t)(v36 + 1) >> 60)
          abort();
        v37 = *v33 - (_QWORD)*v8;
        v38 = v37 >> 3;
        if (v37 >> 3 <= (unint64_t)(v36 + 1))
          v38 = v36 + 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        if (v39)
        {
          v50 = v35;
          v40 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 112, v39);
          v35 = v50;
        }
        else
        {
          v40 = 0;
        }
        v41 = (float32x4_t *)&v40[16 * v36];
        *v41 = v35;
        v34 = v41 + 1;
        v43 = *(float32x4_t **)(a1 + 96);
        v42 = *(float32x4_t **)(a1 + 104);
        if (v42 != v43)
        {
          do
          {
            v44 = v42[-1];
            --v42;
            v41[-1] = v44;
            --v41;
          }
          while (v42 != v43);
          v42 = (float32x4_t *)*v8;
        }
        *(_QWORD *)(a1 + 96) = v41;
        *(_QWORD *)(a1 + 104) = v34;
        *(_QWORD *)(a1 + 112) = &v40[16 * v39];
        if (v42)
          operator delete(v42);
        v32 = v46;
        v31 = v48;
      }
      else
      {
        *v34++ = v35;
      }
      *(_QWORD *)(a1 + 104) = v34;
      ++a2;
    }
    while (a2 != v29);
  }
  return a1;
}

float geom::`anonymous namespace'::hull_mesh<float>::compute_hull(uint64_t a1, unsigned int a2)
{
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned int v23;
  int16x4_t v24;
  unsigned int v25;
  int16x4_t v26;
  unsigned int v27;
  int16x4_t v28;
  unsigned int v29;
  int16x4_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  _OWORD *v36;
  std::vector<int>::pointer *p_end;
  float v38;
  uint64_t v39;
  float32x4_t v40;
  _OWORD *v41;
  std::vector<int>::pointer *v42;
  unint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  unint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  uint64_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float v71;
  float v72;
  unsigned __int32 v74;
  unsigned int v75;
  unsigned __int32 v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int *v87;
  uint64_t v88;
  float32x4_t *v89;
  float32x4_t *v90;
  unsigned int v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  _BOOL4 v107;
  _DWORD *v108;
  std::vector<int> *v109;
  uint64_t v110;
  void **v111;
  uint64_t v112;
  std::vector<int>::pointer begin;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  unsigned int *v117;
  _QWORD *v118;
  float32x4_t v119;
  float v120;
  float v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float32x4_t *v129;
  float32x4_t *v130;
  const float *v131;
  uint64_t v132;
  uint64_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t *v142;
  float32x4_t v143;
  float32x4_t *v144;
  const float *v145;
  uint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float v150;
  float32x4_t *v151;
  float *v152;
  uint64_t v153;
  float v154;
  int v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  int v162;
  float32x4_t *v163;
  const float *f32;
  float32x4_t v165;
  int32x4_t v166;
  float v167;
  float32x4_t v168;
  uint64_t v169;
  uint64_t v170;
  int *value;
  std::vector<int>::pointer end;
  int *v173;
  float32x4_t v174;
  unint64_t v175;
  float32x4_t *v176;
  const float *v177;
  float32x4_t v178;
  _QWORD *v179;
  _DWORD *v180;
  unint64_t v181;
  _DWORD *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  char *v188;
  char *v189;
  _DWORD *v190;
  int v191;
  _DWORD *v192;
  uint64_t v193;
  unsigned int v194;
  std::vector<int>::pointer v195;
  int *v196;
  std::vector<int>::pointer v197;
  int64_t v198;
  unint64_t v199;
  int64_t v200;
  unint64_t v201;
  char *v202;
  int *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int v209;
  char v210;
  int *v211;
  std::vector<int>::pointer v212;
  unsigned int *v213;
  unsigned int v214;
  char *v215;
  char *v216;
  std::vector<int>::pointer v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  int v230;
  _DWORD *v231;
  std::vector<int>::pointer v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  unsigned int *v238;
  unsigned int v239;
  int v240;
  unsigned int *v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  uint64_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  int32x2_t v257;
  float32x4_t v258;
  float v259;
  float v260;
  char *v261;
  std::vector<int>::pointer v262;
  std::vector<int>::pointer v263;
  uint64_t v264;
  int v265;
  int *v266;
  int v267;
  char *v268;
  char *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  int v276;
  unsigned int *v277;
  unsigned int *v278;
  uint64_t v279;
  std::vector<int>::pointer v280;
  std::vector<int>::pointer v281;
  uint64_t v282;
  float32x4_t v283;
  std::vector<int>::pointer v284;
  uint64_t v285;
  unsigned int v286;
  float32x4_t *v287;
  unsigned int v288;
  uint64_t v289;
  float32x4_t *v290;
  float32x4_t v291;
  unint64_t v292;
  float32x4_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char *v298;
  float32x4_t *v299;
  float32x4_t *v300;
  float32x4_t *v301;
  float32x4_t v302;
  float32x4_t *v303;
  float32x4_t v304;
  float32x4_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  float32x4_t *v312;
  float32x4_t *v313;
  float32x4_t *v314;
  float32x4_t v315;
  int64_t v316;
  uint64_t v317;
  unsigned int v318;
  std::vector<int> *v319;
  uint64_t v320;
  std::vector<int>::pointer v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  std::vector<int>::pointer v327;
  unsigned int *v328;
  unint64_t v329;
  uint64_t v330;
  unsigned int v331;
  float v332;
  uint64_t v333;
  unsigned int v334;
  _DWORD *v335;
  unsigned int v336;
  unint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  float v342;
  unsigned int v343;
  float v344;
  uint64_t v345;
  std::vector<int>::pointer v346;
  int64_t v347;
  unint64_t v348;
  int64_t v349;
  unint64_t v350;
  char *v351;
  float32x4_t *v352;
  float32x4_t *v353;
  int32x4_t v354;
  float32x2_t v355;
  float32x2_t v356;
  float32x4_t v357;
  int32x4_t v358;
  float32x2_t v359;
  float32x2_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  int32x4_t v364;
  float32x4_t v365;
  int32x2_t *v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x2_t v369;
  uint64_t v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  int32x2_t *v374;
  char *v375;
  char *v376;
  int32x2_t v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  uint64_t v381;
  unsigned int v382;
  unsigned int v383;
  float32x4_t v384;
  float32x4_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  std::vector<int>::pointer v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  float32x4_t v401;
  float32x4_t v402;
  int32x4_t v403;
  unsigned int v404;
  unsigned int v405;
  float32x4_t v406;
  uint64_t v407;
  uint64_t v408;
  float32x4_t *v409;
  int *v410;
  unint64_t v411;
  uint64_t v412;
  std::vector<int>::pointer v413;
  int *v414;
  int v415;
  unsigned int *v416;
  int *v417;
  int *v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  char *v423;
  int *v424;
  int v425;
  int *v426;
  int *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  char *v432;
  int *v433;
  int *v434;
  int v435;
  unsigned int *v436;
  BOOL v437;
  unsigned int *v438;
  unsigned int v439;
  uint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unsigned int v443;
  int v444;
  std::vector<int> *v446;
  uint64_t *v447;
  geom::partitioned_set *v448;
  unsigned int v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  uint64_t v454;
  void **v455;
  int **v456;
  unsigned int v457;
  unsigned int v458;
  float32x4_t v459;
  std::vector<int> *v460;
  unsigned int v461;
  uint64_t v462;
  float32x4_t v463;
  std::vector<int> *v464;
  std::vector<int> *v465[2];
  std::vector<int> *v466[2];
  uint64_t v467;
  float32x4_t v468;
  unsigned int **v469;
  geom::_anonymous_namespace_::integer_hashset *v470[2];
  geom::_anonymous_namespace_::integer_hashset *v471[2];
  void *v472;
  char *v473;
  char *v474;
  std::vector<int> v475;
  unsigned int v476;
  std::vector<int> __p;
  float32x4_t v478;
  int v479;
  void *v480;
  char *v481;
  char *v482;
  void **v483;
  float32x4_t v484;
  float32x4_t v485;
  _OWORD v486[4];
  std::vector<int> v487;
  std::vector<int> *v488;
  uint64_t v489;

  v489 = *MEMORY[0x24BDAC8D0];
  v3 = *(float32x4_t **)(a1 + 96);
  v4 = *(float32x4_t **)(a1 + 104);
  v5 = *v3;
  v6 = v4 - v3;
  if ((unint64_t)((char *)v4 - (char *)v3) < 0x11)
  {
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v19 = *v3;
    v18 = *v3;
    v17 = *v3;
    v16 = *v3;
    v15 = *v3;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 2;
    v14 = 1;
    v15 = *v3;
    v16 = *v3;
    v17 = *v3;
    v18 = *v3;
    v19 = *v3;
    do
    {
      v20 = v3[v14];
      if ((vmovn_s32(vcgtq_f32(v15, v20)).u8[0] & 1) != 0)
      {
        v12 = v13 - 1;
        v21 = -1;
      }
      else
      {
        v21 = 0;
      }
      v15 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v21), (int8x16_t)v20, (int8x16_t)v15);
      v22 = vmovn_s32(vcgtq_f32(v20, v5)).u8[0];
      if ((v22 & 1) != 0)
        v23 = -1;
      else
        v23 = 0;
      v5 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v23), (int8x16_t)v20, (int8x16_t)v5);
      if ((v22 & 1) != 0)
        v11 = v13 - 1;
      v24 = vmovn_s32(vcgtq_f32(v19, v20));
      if ((v24.i8[2] & 1) != 0)
        v25 = -1;
      else
        v25 = 0;
      v19 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v25), (int8x16_t)v20, (int8x16_t)v19);
      if ((v24.i8[2] & 1) != 0)
        v10 = v13 - 1;
      v26 = vmovn_s32(vcgtq_f32(v20, v18));
      if ((v26.i8[2] & 1) != 0)
        v27 = -1;
      else
        v27 = 0;
      v18 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v27), (int8x16_t)v20, (int8x16_t)v18);
      if ((v26.i8[2] & 1) != 0)
        v9 = v13 - 1;
      v28 = vmovn_s32(vcgtq_f32(v17, v20));
      if ((v28.i8[4] & 1) != 0)
        v29 = -1;
      else
        v29 = 0;
      v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v29), (int8x16_t)v20, (int8x16_t)v17);
      if ((v28.i8[4] & 1) != 0)
        v8 = v13 - 1;
      v30 = vmovn_s32(vcgtq_f32(v20, v16));
      if ((v30.i8[4] & 1) != 0)
        v31 = -1;
      else
        v31 = 0;
      v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v31), (int8x16_t)v20, (int8x16_t)v16);
      if ((v30.i8[4] & 1) != 0)
        v7 = v13 - 1;
      v14 = v13;
      v437 = v6 > v13++;
    }
    while (v437);
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v484 = v15;
  v485 = v5;
  v36 = v486;
  v486[0] = v19;
  v486[1] = v18;
  v487.__begin_ = (std::vector<int>::pointer)__PAIR64__(v11, v12);
  v487.__end_ = (std::vector<int>::pointer)__PAIR64__(v9, v10);
  p_end = &v487.__end_;
  v487.__end_cap_.__value_ = (int *)__PAIR64__(v7, v8);
  v38 = -1.0;
  v39 = 1;
  v486[2] = v17;
  v486[3] = v16;
  do
  {
    if (v35 <= 4)
    {
      v40 = *(&v484 + v35);
      v41 = v36;
      v42 = p_end;
      v43 = v39;
      do
      {
        if (v43 <= 4)
        {
          v44 = 0;
          v45 = vsubq_f32(*(&v484 + v43), v40);
          v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
          v47 = vnegq_f32(v45);
          do
          {
            v48 = vsubq_f32((float32x4_t)v41[v44], v40);
            v49 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), v47), v48, v46);
            v50 = vmulq_f32(v49, v49);
            v51 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), v50)).f32[0];
            if (v51 > v38)
            {
              v34 = *((_DWORD *)&v487.__begin_ + v35);
              v33 = *((_DWORD *)&v487.__begin_ + v43);
              v38 = v51;
              v32 = *((_DWORD *)v42 + v44);
            }
            ++v44;
          }
          while (v43 + v44 < 5);
        }
        ++v43;
        v42 = (std::vector<int>::pointer *)((char *)v42 + 4);
        ++v41;
      }
      while (v43 != 6);
    }
    ++v35;
    ++v39;
    p_end = (std::vector<int>::pointer *)((char *)p_end + 4);
    ++v36;
  }
  while (v35 != 6);
  if (v34 != v33 && v33 != v32 && v34 != v32)
  {
    v462 = v34;
    goto LABEL_72;
  }
  v52 = 0;
  v53 = -1.0;
  v54 = 1;
  do
  {
    if (v52 <= 4)
    {
      v55 = v54;
      do
      {
        v56 = vsubq_f32(*(&v484 + v52), *(&v484 + v55));
        v57 = vmulq_f32(v56, v56);
        v58 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0]);
        if (v58 > v53)
        {
          v34 = *((_DWORD *)&v487.__begin_ + v52);
          v33 = *((_DWORD *)&v487.__begin_ + v55);
          v53 = v58;
        }
        ++v55;
      }
      while (v55 != 6);
    }
    ++v52;
    ++v54;
  }
  while (v52 != 6);
  v462 = v34;
  if (v4 != v3)
  {
    v59 = 0;
    v60 = vsubq_f32(v3[v33], v3[v34]);
    v61 = (int32x4_t)vmulq_f32(v60, v60);
    v61.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1))).u32[0];
    v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
    v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
    v64 = vmulq_n_f32(v60, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
    v60.f32[0] = (float)v34;
    v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 0);
    v66 = 0.0;
    while (1)
    {
      v67 = vsubq_f32(v3[v59], v65);
      v68 = vmulq_f32(v64, v67);
      v69 = vmlsq_lane_f32(v67, v64, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))), 0);
      v70 = vmulq_f32(v69, v69);
      v71 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).f32[0]);
      if (v71 != v66)
      {
        v72 = fabsf(v66);
        if (v71 != INFINITY && v72 != INFINITY)
        {
          if ((float)(v66 + (float)((float)((float)(v72 + fabsf(v71)) + 1.0) * 0.00001)) > v71)
            goto LABEL_62;
LABEL_61:
          v32 = v59;
          v66 = v71;
          goto LABEL_62;
        }
        if (v71 > v66)
          goto LABEL_61;
      }
LABEL_62:
      if (v6 <= ++v59)
        goto LABEL_70;
    }
  }
  v66 = 0.0;
LABEL_70:
  if (fabsf(v66) <= 0.00001)
    v32 = v34;
LABEL_72:
  *(float *)(a1 + 528) = fmaxf(*(float *)(a1 + 528), 0.0000011921);
  LODWORD(v475.__begin_) = v79;
  LODWORD(v472) = v80;
  v81 = *(_QWORD *)(a1 + 48);
  v82 = (unsigned int *)(v81 + 16 * v74);
  v83 = (unsigned int *)(v81 + 16 * v458);
  v84 = (unsigned int *)(v81 + 16 * v75);
  v85 = (unsigned int *)(v81 + 16 * v76);
  v86 = (unsigned int *)(v81 + 16 * v77);
  v87 = (unsigned int *)(v81 + 16 * v78);
  v88 = *(_QWORD *)(a1 + 72);
  v89 = (float32x4_t *)(v88 + 80 * v79);
  v467 = v88;
  v90 = (float32x4_t *)(v88 + 80 * v80);
  v82[2] = v458;
  v82[3] = v34;
  v83[2] = v75;
  v83[3] = v33;
  v84[2] = v74;
  v84[3] = v32;
  v85[2] = v78;
  v85[3] = v33;
  v86[2] = v76;
  v86[3] = v32;
  v87[2] = v77;
  v87[3] = v34;
  *v82 = v79;
  v82[1] = v76;
  *v83 = v79;
  v83[1] = v77;
  v91 = v80;
  *v84 = v79;
  v84[1] = v78;
  *v85 = v80;
  v85[1] = v74;
  *v86 = v80;
  v86[1] = v458;
  *v87 = v80;
  v87[1] = v75;
  v89->i32[0] = v74;
  v90->i32[0] = v76;
  v92 = *(_QWORD *)(a1 + 96);
  v93 = *(float32x4_t *)(v92 + 16 * v462);
  v94 = *(float32x4_t *)(v92 + 16 * v33);
  v95 = *(float32x4_t *)(v92 + 16 * v32);
  v96 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL);
  v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL);
  v98 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL);
  v99 = vaddq_f32(vmlaq_f32(vmulq_f32(v96, vnegq_f32(v95)), v93, v98), vaddq_f32(vmlaq_f32(vmulq_f32(v97, vnegq_f32(v93)), v94, v96), vmlaq_f32(vmulq_f32(v98, vnegq_f32(v94)), v95, v97)));
  v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), (int8x16_t)v99, 0xCuLL);
  v101 = vmulq_f32(v99, v99);
  v89[1] = v100;
  v101.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 2), v101)).f32[0]);
  v89[2].i32[0] = v101.i32[0];
  v89[2].i8[4] = v101.f32[0] <= 0.00000011921;
  v90[1] = vnegq_f32(v100);
  v90[2].i32[0] = v101.i32[0];
  v90[2].i8[4] = v101.f32[0] <= 0.00000011921;
  v102 = vaddq_f32(vaddq_f32(v93, v94), v95);
  v89[3] = v102;
  v89[4].i32[0] = 3;
  v90[3] = v102;
  v90[4].i32[0] = 3;
  __asm { FMOV            V1.4S, #3.0 }
  v451 = _Q1;
  *(float32x4_t *)(a1 + 320) = vdivq_f32(v102, _Q1);
  v107 = (v89[2].u8[4] | v90[2].u8[4]) != 0;
  v108 = operator new(0x28uLL);
  *(_QWORD *)v108 = &off_24F148280;
  v108[2] = v34;
  v108[3] = v33;
  v108[4] = v32;
  v108[5] = v79;
  *((_BYTE *)v108 + 24) = v107;
  *((_QWORD *)v108 + 4) = a1;
  v485.i64[1] = (uint64_t)v108;
  v478.i32[0] = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 4;
  geom::partitioned_set::init((std::vector<int> *)(a1 + 200), v478.u32[0], (uint64_t)&v478, 1uLL);
  memset(&__p, 0, sizeof(__p));
  v479 = 0;
  if (v485.i64[1])
  {
    if ((float32x4_t *)v485.i64[1] == &v484)
    {
      v483 = &v480;
      (*(void (**)(float32x4_t *, void **))(v484.i64[0] + 24))(&v484, &v480);
    }
    else
    {
      v483 = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v485.i64[1] + 16))(v485.i64[1]);
    }
  }
  else
  {
    v483 = 0;
  }
  std::__function::__value_func<unsigned int ()>::__value_func[abi:nn180100]<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>>((uint64_t)&v487, &v480);
  geom::partitioned_set::split((uint64_t *)(a1 + 200), &v479, 3u, &__p, (uint64_t)&v487);
  v109 = v488;
  if (v488 == &v487)
  {
    v110 = 4;
    v109 = &v487;
  }
  else
  {
    if (!v488)
      goto LABEL_82;
    v110 = 5;
  }
  (*(void (**)(void))&v109->__begin_[2 * v110])();
LABEL_82:
  v111 = v483;
  if (v483 == &v480)
  {
    v112 = 4;
    v111 = &v480;
  }
  else
  {
    if (!v483)
      goto LABEL_87;
    v112 = 5;
  }
  (*((void (**)(void))*v111 + v112))();
LABEL_87:
  begin = __p.__begin_;
  *(_DWORD *)(a1 + 340) = *__p.__begin_;
  v114 = v467 + 80 * v79;
  *(_DWORD *)(v114 + 68) = begin[1];
  v115 = (unsigned int *)(v114 + 68);
  v116 = v467 + 80 * v91;
  *(_DWORD *)(v116 + 68) = begin[2];
  v117 = (unsigned int *)(v116 + 68);
  __p.__end_ = begin;
  operator delete(begin);
  v118 = (_QWORD *)(a1 + 120);
  std::vector<float>::resize(a1 + 120, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 4);
  v120 = 0.0;
  v121 = 0.0;
  if (!v107)
  {
    v122 = *v115;
    v123 = *(_QWORD *)(a1 + 272);
    v124 = (*(_QWORD *)(a1 + 280) - v123) >> 3;
    if (v124 <= v122 || (v125 = *(unsigned int *)(v123 + 8 * v122), (_DWORD)v125 == -1))
    {
      v126 = 0xFFFFFFFFLL;
    }
    else
    {
      v127 = *(_QWORD *)(a1 + 96);
      v128 = *(_QWORD *)(a1 + 72) + 80 * LODWORD(v475.__begin_);
      v129 = (float32x4_t *)(v128 + 48);
      v119.f32[0] = (float)*(unsigned int *)(v128 + 64);
      v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v119.f32, 0);
      v130 = (float32x4_t *)(v128 + 16);
      v131 = (const float *)(v128 + 32);
      v132 = *(_QWORD *)(a1 + 120);
      v133 = *(_QWORD *)(a1 + 200);
      v126 = 0xFFFFFFFFLL;
      do
      {
        v134 = vld1q_dup_f32(v131);
        v135 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v127 + 16 * v125), vdivq_f32(*v129, v119)), vdivq_f32(*v130, v134));
        v136 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0];
        *(float *)(v132 + 4 * v125) = v136;
        if (v136 > *(float *)(a1 + 528) && (v126 == 0xFFFFFFFFLL || v136 > *(float *)(v132 + 4 * v126)))
          v126 = v125;
        v125 = *(unsigned int *)(v133 + 4 * v125);
      }
      while ((_DWORD)v125 != -1);
    }
    v137 = *v117;
    if (v124 <= v137 || (v138 = *(unsigned int *)(v123 + 8 * v137), (_DWORD)v138 == -1))
    {
      v139 = 0xFFFFFFFFLL;
    }
    else
    {
      v140 = *(_QWORD *)(a1 + 96);
      v141 = *(_QWORD *)(a1 + 72) + 80 * v472;
      v142 = (float32x4_t *)(v141 + 48);
      v119.f32[0] = (float)*(unsigned int *)(v141 + 64);
      v143 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v119.f32, 0);
      v144 = (float32x4_t *)(v141 + 16);
      v145 = (const float *)(v141 + 32);
      v146 = *(_QWORD *)(a1 + 120);
      v147 = *(_QWORD *)(a1 + 200);
      v139 = 0xFFFFFFFFLL;
      do
      {
        v148 = vld1q_dup_f32(v145);
        v149 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v140 + 16 * v138), vdivq_f32(*v142, v143)), vdivq_f32(*v144, v148));
        v150 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).f32[0];
        *(float *)(v146 + 4 * v138) = v150;
        if (v150 > *(float *)(a1 + 528) && (v139 == 0xFFFFFFFFLL || v150 > *(float *)(v146 + 4 * v139)))
          v139 = v138;
        v138 = *(unsigned int *)(v147 + 4 * v138);
      }
      while ((_DWORD)v138 != -1);
    }
    if (v126 != 0xFFFFFFFFLL)
    {
      LODWORD(v487.__begin_) = v126;
      HIDWORD(v487.__begin_) = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v126);
    }
    if (v139 != 0xFFFFFFFFLL)
    {
      LODWORD(v487.__begin_) = v139;
      HIDWORD(v487.__begin_) = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v139);
    }
    v121 = 0.0;
    v120 = 0.0;
    if (v126 != 0xFFFFFFFFLL)
      v120 = *(float *)(*v118 + 4 * v126);
    if (v139 != 0xFFFFFFFFLL)
      v121 = *(float *)(*v118 + 4 * v139);
  }
  v151 = (float32x4_t *)v485.i64[1];
  if ((float32x4_t *)v485.i64[1] == &v484)
  {
    v153 = 4;
    v151 = &v484;
    v152 = (float *)&unk_2289B4000;
    goto LABEL_118;
  }
  v152 = (float *)&unk_2289B4000;
  if (v485.i64[1])
  {
    v153 = 5;
LABEL_118:
    (*(void (**)(void))(v151->i64[0] + 8 * v153))();
  }
  if (v120 >= v121)
    v154 = v120;
  else
    v154 = v121;
  if (v154 > v152[14])
    v155 = 1;
  else
    v155 = 2;
  if (v107)
    v155 = 3;
  *(_DWORD *)(a1 + 336) = v155;
  if (v155 == 2)
  {
    v163 = *(float32x4_t **)(a1 + 72);
    f32 = v163[2].f32;
    v165 = vld1q_dup_f32(f32);
    v166 = (int32x4_t)vdivq_f32(v163[1], v165);
    v167 = fabsf(*(float *)&v166.i32[2]);
    if (v167 <= 0.00000011921)
    {
      v468 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v166.i32[1]), v166);
    }
    else
    {
      v168.i32[0] = 0;
      v168.f32[1] = -*(float *)&v166.i32[2];
      v168.i64[1] = v166.u32[1];
      v468 = v168;
    }
    v463 = (float32x4_t)v166;
    if (v167 <= 0.00000011921)
    {
      v459 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v166.i32[1]), v166);
    }
    else
    {
      v174.i32[0] = 0;
      v174.f32[1] = -*(float *)&v166.i32[2];
      v174.i64[1] = v166.u32[1];
      v459 = v174;
    }
    v484 = 0uLL;
    v485.i64[0] = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm((void **)&v484, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 4);
    v352 = *(float32x4_t **)(a1 + 96);
    v353 = *(float32x4_t **)(a1 + 104);
    if (v352 == v353)
    {
      v366 = (int32x2_t *)v484.i64[1];
    }
    else
    {
      v354 = (int32x4_t)vmulq_f32(v468, v468);
      v354.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v354, 2), vadd_f32(*(float32x2_t *)v354.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v354.i8, 1))).u32[0];
      v355 = vrsqrte_f32((float32x2_t)v354.u32[0]);
      v356 = vmul_f32(v355, vrsqrts_f32((float32x2_t)v354.u32[0], vmul_f32(v355, v355)));
      v357 = vmulq_n_f32(v468, vmul_f32(v356, vrsqrts_f32((float32x2_t)v354.u32[0], vmul_f32(v356, v356))).f32[0]);
      v358 = (int32x4_t)vmulq_f32(v459, v459);
      v358.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v358, 2), vadd_f32(*(float32x2_t *)v358.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v358.i8, 1))).u32[0];
      v359 = vrsqrte_f32((float32x2_t)v358.u32[0]);
      v360 = vmul_f32(v359, vrsqrts_f32((float32x2_t)v358.u32[0], vmul_f32(v359, v359)));
      v361 = vmulq_n_f32(v459, vmul_f32(v360, vrsqrts_f32((float32x2_t)v358.u32[0], vmul_f32(v360, v360))).f32[0]);
      v362 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v361, (int32x4_t)v361), (int8x16_t)v361, 0xCuLL), vnegq_f32(v463)), v361, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v463, (int32x4_t)v463), (int8x16_t)v463, 0xCuLL));
      v363 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v362, (int32x4_t)v362), (int8x16_t)v362, 0xCuLL);
      v364 = (int32x4_t)vmulq_f32(v362, v362);
      v364.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v364.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v364, 2), *(float32x2_t *)v364.i8)).u32[0];
      *(float32x2_t *)v362.f32 = vrsqrte_f32((float32x2_t)v364.u32[0]);
      *(float32x2_t *)v362.f32 = vmul_f32(*(float32x2_t *)v362.f32, vrsqrts_f32((float32x2_t)v364.u32[0], vmul_f32(*(float32x2_t *)v362.f32, *(float32x2_t *)v362.f32)));
      v365 = vmulq_n_f32(v363, vmul_f32(*(float32x2_t *)v362.f32, vrsqrts_f32((float32x2_t)v364.u32[0], vmul_f32(*(float32x2_t *)v362.f32, *(float32x2_t *)v362.f32))).f32[0]);
      v366 = (int32x2_t *)v484.i64[1];
      *(float32x4_t *)v465 = v365;
      *(float32x4_t *)v470 = v357;
      do
      {
        v367 = (int32x4_t)vmulq_f32(v357, *v352);
        v368 = (int32x4_t)vmulq_f32(v365, *v352);
        v369 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v367, 2), vadd_f32(*(float32x2_t *)v367.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v367.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v368, 2), vadd_f32(*(float32x2_t *)v368.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v368.i8, 1))));
        if ((unint64_t)v366 >= v485.i64[0])
        {
          v370 = ((uint64_t)v366 - v484.i64[0]) >> 3;
          if ((unint64_t)(v370 + 1) >> 61)
            goto LABEL_476;
          v371 = (v485.i64[0] - v484.i64[0]) >> 2;
          if (v371 <= v370 + 1)
            v371 = v370 + 1;
          if (v485.i64[0] - v484.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v372 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v372 = v371;
          if (v372)
            v373 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v485, v372);
          else
            v373 = 0;
          v374 = (int32x2_t *)&v373[8 * v370];
          *v374 = v369;
          v366 = v374 + 1;
          v375 = (char *)v484.i64[1];
          v376 = (char *)v484.i64[0];
          if (v484.i64[1] != v484.i64[0])
          {
            do
            {
              v377 = *(int32x2_t *)(v375 - 8);
              v375 -= 8;
              v374[-1] = v377;
              --v374;
            }
            while (v375 != v376);
            v375 = (char *)v484.i64[0];
          }
          v484.i64[0] = (uint64_t)v374;
          v484.i64[1] = (uint64_t)v366;
          v485.i64[0] = (uint64_t)&v373[8 * v372];
          if (v375)
            operator delete(v375);
          v365 = *(float32x4_t *)v465;
          v357 = *(float32x4_t *)v470;
        }
        else
        {
          *v366++ = v369;
        }
        v484.i64[1] = (uint64_t)v366;
        ++v352;
      }
      while (v352 != v353);
    }
    memset(&v487, 0, sizeof(v487));
    geom::convex_hull_2<float>(((uint64_t)v366 - v484.i64[0]) >> 3, v484.i64[0], &v487);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v380 = v379;
    if (v487.__end_ == v487.__begin_)
    {
      v390 = 0;
      v393 = 0;
      v405 = 0;
      v404 = 0;
      v391 = *(_QWORD *)(a1 + 48);
      v385 = 0uLL;
      v384 = 0uLL;
      v387 = v378;
      v388 = v380;
    }
    else
    {
      v381 = 0;
      v461 = 0;
      v457 = 0;
      v382 = 0;
      v383 = 0;
      v384 = 0uLL;
      v385 = 0uLL;
      v386 = 1;
      v387 = v378;
      v388 = v379;
      do
      {
        *(float32x4_t *)v466 = v384;
        *(float32x4_t *)v471 = v385;
        v391 = *(_QWORD *)(a1 + 48);
        if (v386 == 1)
        {
          v392 = *(_QWORD *)(a1 + 72);
          *(_DWORD *)(v392 + 80 * v378) = v389;
          *(_DWORD *)(v392 + 80 * v388) = v390;
          v457 = v390;
          v461 = v389;
        }
        else
        {
          *(_DWORD *)(v391 + 16 * v382 + 8) = v389;
          *(_DWORD *)(v391 + 16 * v390 + 8) = v383;
        }
        v393 = v389;
        *(_DWORD *)(v391 + 16 * v389) = v378;
        *(_DWORD *)(v391 + 16 * v390) = v380;
        v394 = v391 + 16 * v389;
        *(_DWORD *)(v394 + 4) = v390;
        v395 = v391 + 16 * v390;
        *(_DWORD *)(v395 + 4) = v389;
        v396 = v487.__begin_;
        *(_DWORD *)(v394 + 12) = v487.__begin_[v381];
        v397 = v386;
        v398 = v487.__end_ - v396;
        v399 = v386 % v398;
        *(_DWORD *)(v395 + 12) = v396[v399];
        v400 = *(_QWORD *)(a1 + 96);
        v401 = *(float32x4_t *)(v400 + 16 * v396[v381]);
        v385 = vaddq_f32(*(float32x4_t *)v471, v401);
        v402 = *(float32x4_t *)(v400 + 16 * v396[v399]);
        v403 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v402, (int32x4_t)v402), (int8x16_t)v402, 0xCuLL), vnegq_f32(v401)), v402, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v401, (int32x4_t)v401), (int8x16_t)v401, 0xCuLL));
        v437 = v398 > v386++;
        v384 = vaddq_f32(*(float32x4_t *)v466, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v403, v403), (int8x16_t)v403, 0xCuLL));
        v381 = v397;
        v382 = v389;
        v383 = v390;
      }
      while (v437);
      v404 = v461;
      v405 = v457;
    }
    *(_DWORD *)(v391 + 16 * v405 + 8) = v390;
    *(_DWORD *)(v391 + 16 * v393 + 8) = v404;
    *(float32x4_t *)(*(_QWORD *)(a1 + 72) + 80 * v387 + 16) = v384;
    *(float32x4_t *)(*(_QWORD *)(a1 + 72) + 80 * v388 + 16) = vnegq_f32(v384);
    v406 = vmulq_f32(v384, v384);
    v406.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v406, 2), vaddq_f32(v406, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v406.f32, 1))).f32[0]);
    v407 = *(_QWORD *)(a1 + 72);
    v408 = v407 + 80 * v388;
    *(_DWORD *)(v408 + 32) = v406.i32[0];
    v409 = (float32x4_t *)(v407 + 80 * v387);
    v409[2].i32[0] = v406.i32[0];
    *(_BYTE *)(v408 + 36) = v406.f32[0] <= 0.00000011921;
    v409[2].i8[4] = v406.f32[0] <= 0.00000011921;
    v409[3] = v385;
    *(float32x4_t *)(*(_QWORD *)(a1 + 72) + 80 * v388 + 48) = v385;
    v410 = v487.__begin_;
    v411 = (unint64_t)((char *)v487.__end_ - (char *)v487.__begin_) >> 2;
    v412 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(v412 + 80 * v388 + 64) = v411;
    *(_DWORD *)(v412 + 80 * v387 + 64) = v411;
    if (v410)
    {
      v487.__end_ = v410;
      operator delete(v410);
    }
    v413 = (std::vector<int>::pointer)v484.i64[0];
    if (!v484.i64[0])
      return 0.0;
    v484.i64[1] = v484.i64[0];
LABEL_473:
    operator delete(v413);
    return 0.0;
  }
  if (v155 == 3)
  {
    memset(&v487, 0, sizeof(v487));
    v480 = 0;
    v481 = 0;
    v482 = 0;
    v156 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v482, 1uLL);
    v157 = (char *)v480;
    v158 = v481;
    v160 = &v156[4 * v159];
    *(_DWORD *)v156 = 0;
    v161 = v156 + 4;
    while (v158 != v157)
    {
      v162 = *((_DWORD *)v158 - 1);
      v158 -= 4;
      *((_DWORD *)v156 - 1) = v162;
      v156 -= 4;
    }
    v480 = v156;
    v481 = v161;
    v482 = v160;
    if (v157)
      operator delete(v157);
    v481 = v161;
    v170 = *(_QWORD *)(a1 + 72);
    end = v487.__end_;
    value = v487.__end_cap_.__value_;
    if (v487.__end_ >= v487.__end_cap_.__value_)
    {
      v346 = v487.__begin_;
      v347 = v487.__end_ - v487.__begin_;
      v348 = v347 + 1;
      if ((unint64_t)(v347 + 1) >> 62)
        goto LABEL_476;
      v349 = (char *)v487.__end_cap_.__value_ - (char *)v487.__begin_;
      if (((char *)v487.__end_cap_.__value_ - (char *)v487.__begin_) >> 1 > v348)
        v348 = v349 >> 1;
      if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL)
        v350 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v350 = v348;
      if (v350)
      {
        v351 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v487.__end_cap_, v350);
        v346 = v487.__begin_;
        end = v487.__end_;
      }
      else
      {
        v351 = 0;
      }
      v414 = (int *)&v351[4 * v347];
      value = (int *)&v351[4 * v350];
      *v414 = *(_DWORD *)(v170 + 80);
      v173 = v414 + 1;
      while (end != v346)
      {
        v415 = *--end;
        *--v414 = v415;
      }
      v487.__begin_ = v414;
      v487.__end_ = v173;
      v487.__end_cap_.__value_ = value;
      if (v346)
      {
        operator delete(v346);
        value = v487.__end_cap_.__value_;
      }
    }
    else
    {
      *v487.__end_ = *(_DWORD *)(v170 + 80);
      v173 = end + 1;
    }
    v487.__end_ = v173;
    v416 = (unsigned int *)v487.__begin_;
    v417 = (int *)(*(_QWORD *)(a1 + 48) + 16 * *v487.__begin_ + 8);
    if (v173 >= value)
    {
      v419 = v173 - v487.__begin_;
      v420 = v419 + 1;
      if ((unint64_t)(v419 + 1) >> 62)
        goto LABEL_476;
      v421 = (char *)value - (char *)v487.__begin_;
      if (v421 >> 1 > v420)
        v420 = v421 >> 1;
      if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFFCLL)
        v422 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v422 = v420;
      if (v422)
      {
        v423 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v487.__end_cap_, v422);
        v416 = (unsigned int *)v487.__begin_;
        v173 = v487.__end_;
      }
      else
      {
        v423 = 0;
      }
      v424 = (int *)&v423[4 * v419];
      value = (int *)&v423[4 * v422];
      *v424 = *v417;
      v418 = v424 + 1;
      while (v173 != (int *)v416)
      {
        v425 = *--v173;
        *--v424 = v425;
      }
      v487.__begin_ = v424;
      v487.__end_ = v418;
      v487.__end_cap_.__value_ = value;
      if (v416)
      {
        operator delete(v416);
        v416 = (unsigned int *)v487.__begin_;
        value = v487.__end_cap_.__value_;
      }
      else
      {
        v416 = (unsigned int *)v424;
      }
    }
    else
    {
      *v173 = *v417;
      v418 = v173 + 1;
    }
    v487.__end_ = v418;
    v426 = (int *)(*(_QWORD *)(a1 + 48) + 16 * v416[1] + 8);
    if (v418 < value)
    {
      *v418 = *v426;
      v427 = v418 + 1;
LABEL_449:
      v487.__end_ = v427;
      v436 = (unsigned int *)(v427 - 1);
      v437 = v416 != (unsigned int *)v427 && v436 > v416;
      if (v437)
      {
        v438 = v416 + 1;
        do
        {
          v439 = *(v438 - 1);
          *(v438 - 1) = *v436;
          *v436-- = v439;
        }
        while (v438++ < v436);
      }
      v440 = *(_QWORD *)(a1 + 272);
      v441 = (*(_QWORD *)(a1 + 280) - v440) >> 3;
      if (*(_QWORD *)(a1 + 280) == v440)
      {
LABEL_461:
        v443 = -1;
      }
      else
      {
        v442 = 0;
        v443 = 0;
        while (*(_DWORD *)(v440 + 8 * v442) == -1)
        {
          v442 = ++v443;
          if (v441 <= v443)
            goto LABEL_461;
        }
      }
      v437 = v441 > v443;
      v444 = -1;
      if (v437)
        v444 = *(_DWORD *)(v440 + 8 * v443);
      LODWORD(v475.__begin_) = v444;
      *(_DWORD *)(*(_QWORD *)(a1 + 72) + 68) = -1;
      v484.i32[0] = 0;
      v484.i64[1] = 0;
      v485 = 0uLL;
      *(_QWORD *)&v486[0] = 0x3FE0000000000000;
      v484.i32[0] = 0;
      memset(&__p, 0, sizeof(__p));
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v484.i64[1])
      {
        v485.i64[0] = v484.i64[1];
        operator delete((void *)v484.i64[1]);
      }
      if (v480)
      {
        v481 = (char *)v480;
        operator delete(v480);
      }
      v413 = v487.__begin_;
      if (!v487.__begin_)
        return 0.0;
      v487.__end_ = v487.__begin_;
      goto LABEL_473;
    }
    v428 = ((char *)v418 - (char *)v416) >> 2;
    v429 = v428 + 1;
    if (!((unint64_t)(v428 + 1) >> 62))
    {
      v430 = (char *)value - (char *)v416;
      if (v430 >> 1 > v429)
        v429 = v430 >> 1;
      if ((unint64_t)v430 >= 0x7FFFFFFFFFFFFFFCLL)
        v431 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v431 = v429;
      if (v431)
      {
        v432 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v487.__end_cap_, v431);
        v416 = (unsigned int *)v487.__begin_;
        v418 = v487.__end_;
      }
      else
      {
        v432 = 0;
      }
      v433 = (int *)&v432[4 * v428];
      v434 = (int *)&v432[4 * v431];
      *v433 = *v426;
      v427 = v433 + 1;
      while (v418 != (int *)v416)
      {
        v435 = *--v418;
        *--v433 = v435;
      }
      v487.__begin_ = v433;
      v487.__end_ = v427;
      v487.__end_cap_.__value_ = v434;
      if (v416)
      {
        operator delete(v416);
        v416 = (unsigned int *)v487.__begin_;
      }
      else
      {
        v416 = (unsigned int *)v433;
      }
      goto LABEL_449;
    }
LABEL_476:
    abort();
  }
  v480 = 0;
  v481 = 0;
  v482 = 0;
  memset(&__p, 0, sizeof(__p));
  v484.i32[0] = 0;
  v484.i64[1] = 0;
  v485 = 0uLL;
  *(_QWORD *)&v486[0] = 0x3FE0000000000000;
  v484.i32[0] = 0;
  memset(&v475, 0, sizeof(v475));
  v472 = 0;
  v473 = 0;
  v474 = 0;
  v481 = (char *)v480;
  __p.__end_ = __p.__begin_;
  v169 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 152) - v169 == 12)
  {
    v450 = 3;
    goto LABEL_353;
  }
  v456 = (int **)(a1 + 368);
  v460 = (std::vector<int> *)(a1 + 352);
  v469 = (unsigned int **)(a1 + 488);
  v464 = (std::vector<int> *)(a1 + 496);
  v455 = (void **)(a1 + 376);
  v454 = a1 + 392;
  v450 = 3;
  v447 = (uint64_t *)(a1 + 120);
  v448 = (geom::partitioned_set *)(a1 + 200);
  v446 = (std::vector<int> *)(a1 + 144);
  do
  {
    v175 = *(_QWORD *)(v169 + 12);
    v476 = HIDWORD(v175);
    *(_OWORD *)&v487.__begin_ = *(_OWORD *)(*(_QWORD *)(a1 + 96) + 16 * HIDWORD(v175));
    v176 = (float32x4_t *)(*(_QWORD *)(a1 + 72) + 80 * v175);
    v177 = v176[2].f32;
    v178 = vld1q_dup_f32(v177);
    v478 = vdivq_f32(v176[1], v178);
    v179 = operator new(0x20uLL);
    *v179 = &off_24F148400;
    v179[1] = a1;
    v179[2] = &v487;
    v179[3] = &v478;
    v180 = *(_DWORD **)(a1 + 352);
    *(_QWORD *)(a1 + 360) = v180;
    v181 = *(_QWORD *)(a1 + 368);
    if ((unint64_t)v180 >= v181)
    {
      v183 = v181 - (_QWORD)v180;
      v184 = v183 >> 1;
      if ((unint64_t)(v183 >> 1) <= 1)
        v184 = 1;
      if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFFCLL)
        v185 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v185 = v184;
      v187 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v456, v185);
      v188 = *(char **)(a1 + 352);
      v189 = *(char **)(a1 + 360);
      *v187 = v176->i32[0];
      v182 = v187 + 1;
      v190 = v187;
      while (v189 != v188)
      {
        v191 = *((_DWORD *)v189 - 1);
        v189 -= 4;
        *--v190 = v191;
      }
      *(_QWORD *)(a1 + 352) = v190;
      *(_QWORD *)(a1 + 360) = v182;
      *(_QWORD *)(a1 + 368) = &v187[v186];
      if (v188)
        operator delete(v188);
    }
    else
    {
      *v180 = v176->i32[0];
      v182 = v180 + 1;
    }
    *(_QWORD *)(a1 + 360) = v182;
    v192 = *(_DWORD **)(a1 + 352);
LABEL_157:
    if (v192 != v182)
    {
      v193 = *(v182 - 1);
      v194 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16 * v193);
      *(_QWORD *)(a1 + 360) = v182 - 1;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 456)
                     + 4
      {
        v195 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          v197 = __p.__begin_;
          v198 = __p.__end_ - __p.__begin_;
          v199 = v198 + 1;
          if ((unint64_t)(v198 + 1) >> 62)
            goto LABEL_476;
          v200 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v199)
            v199 = v200 >> 1;
          if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFFCLL)
            v201 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v201 = v199;
          if (v201)
          {
            v202 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v201);
            v197 = __p.__begin_;
            v195 = __p.__end_;
          }
          else
          {
            v202 = 0;
          }
          v203 = (int *)&v202[4 * v198];
          *v203 = v194;
          v196 = v203 + 1;
          while (v195 != v197)
          {
            v204 = *--v195;
            *--v203 = v204;
          }
          __p.__begin_ = v203;
          __p.__end_ = v196;
          __p.__end_cap_.__value_ = (int *)&v202[4 * v201];
          if (v197)
            operator delete(v197);
        }
        else
        {
          *__p.__end_ = v194;
          v196 = v195 + 1;
        }
        __p.__end_ = v196;
      }
      v205 = v193;
      while (1)
      {
        v206 = *(_QWORD *)(a1 + 48);
        v207 = v206 + 16 * v205;
        v208 = (unsigned int *)(v207 + 4);
        v209 = *(_DWORD *)(v206 + 16 * *(unsigned int *)(v207 + 4));
        if (*(_DWORD *)(*(_QWORD *)(a1 + 456)
                       + 4
        {
          v479 = v209;
          v210 = (*(uint64_t (**)(_QWORD *, int *))(*v179 + 48))(v179, &v479);
          if ((v210 & 1) != 0)
          {
            v212 = *(std::vector<int>::pointer *)(a1 + 360);
            v211 = *(int **)(a1 + 368);
            if (v212 >= v211)
            {
              v217 = v460->__begin_;
              v218 = v212 - v460->__begin_;
              v219 = v218 + 1;
              if ((unint64_t)(v218 + 1) >> 62)
                goto LABEL_476;
              v220 = (char *)v211 - (char *)v217;
              if (v220 >> 1 > v219)
                v219 = v220 >> 1;
              if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFFCLL)
                v221 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v221 = v219;
              if (v221)
              {
                v222 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v456, v221);
                v217 = *(std::vector<int>::pointer *)(a1 + 352);
                v212 = *(std::vector<int>::pointer *)(a1 + 360);
              }
              else
              {
                v222 = 0;
              }
              v229 = &v222[4 * v218];
              *(_DWORD *)v229 = v205;
              v213 = (unsigned int *)(v229 + 4);
              while (v212 != v217)
              {
                v230 = *--v212;
                *((_DWORD *)v229 - 1) = v230;
                v229 -= 4;
              }
              v211 = (int *)&v222[4 * v221];
              *(_QWORD *)(a1 + 352) = v229;
              *(_QWORD *)(a1 + 360) = v213;
              *(_QWORD *)(a1 + 368) = v211;
              if (v217)
              {
                operator delete(v217);
                v211 = *v456;
              }
            }
            else
            {
              *v212 = v205;
              v213 = (unsigned int *)(v212 + 1);
            }
            *(_QWORD *)(a1 + 360) = v213;
            if (v213 >= (unsigned int *)v211)
            {
              v232 = v460->__begin_;
              v233 = ((char *)v213 - (char *)v460->__begin_) >> 2;
              v234 = v233 + 1;
              if ((unint64_t)(v233 + 1) >> 62)
                goto LABEL_476;
              v235 = (char *)v211 - (char *)v232;
              if (v235 >> 1 > v234)
                v234 = v235 >> 1;
              if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL)
                v236 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v236 = v234;
              if (v236)
              {
                v237 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v456, v236);
                v232 = *(std::vector<int>::pointer *)(a1 + 352);
                v213 = *(unsigned int **)(a1 + 360);
              }
              else
              {
                v237 = 0;
              }
              v238 = (unsigned int *)&v237[4 * v233];
              *v238 = *v208;
              v231 = v238 + 1;
              while (v213 != (unsigned int *)v232)
              {
                v239 = *--v213;
                *--v238 = v239;
              }
              *(_QWORD *)(a1 + 352) = v238;
              *(_QWORD *)(a1 + 360) = v231;
              *(_QWORD *)(a1 + 368) = &v237[4 * v236];
              if (v232)
                operator delete(v232);
            }
            else
            {
              *v213 = *v208;
              v231 = v213 + 1;
            }
            *(_QWORD *)(a1 + 360) = v231;
            v240 = 4;
            if ((v210 & 1) != 0)
              goto LABEL_224;
          }
          else
          {
            v214 = *v208;
            {
              v215 = v481;
              if (v481 >= v482)
              {
                v223 = (char *)v480;
                v224 = (v481 - (_BYTE *)v480) >> 2;
                v225 = v224 + 1;
                if ((unint64_t)(v224 + 1) >> 62)
                  goto LABEL_476;
                v226 = v482 - (_BYTE *)v480;
                if ((v482 - (_BYTE *)v480) >> 1 > v225)
                  v225 = v226 >> 1;
                if ((unint64_t)v226 >= 0x7FFFFFFFFFFFFFFCLL)
                  v227 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v227 = v225;
                if (v227)
                {
                  v228 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v482, v227);
                  v223 = (char *)v480;
                  v215 = v481;
                  v214 = *v208;
                }
                else
                {
                  v228 = 0;
                }
                v241 = (unsigned int *)&v228[4 * v224];
                *v241 = v214;
                v216 = (char *)(v241 + 1);
                while (v215 != v223)
                {
                  v242 = *((_DWORD *)v215 - 1);
                  v215 -= 4;
                  *--v241 = v242;
                }
                v480 = v241;
                v481 = v216;
                v482 = &v228[4 * v227];
                if (v223)
                  operator delete(v223);
              }
              else
              {
                *(_DWORD *)v481 = v214;
                v216 = v215 + 4;
              }
              v481 = v216;
              v240 = 0;
              if ((v210 & 1) != 0)
                goto LABEL_224;
            }
          }
        }
        v240 = 0;
        v205 = *(unsigned int *)(v207 + 8);
LABEL_224:
        if (v240 || v205 == v193)
        {
          v192 = *(_DWORD **)(a1 + 352);
          v182 = *(_DWORD **)(a1 + 360);
          goto LABEL_157;
        }
      }
    }
    *(_DWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a1 + 456);
    *(_DWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a1 + 352);
    (*(void (**)(_QWORD *))(*v179 + 40))(v179);
    if (v450 >= a2)
      break;
    v243 = *(_QWORD *)(a1 + 72);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 80) - v243) >> 4)
       - ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2) < 3
      || (v244 = (unsigned int *)v480, v480 == v481))
    {
LABEL_247:
      v261 = (char *)v472;
      v473 = (char *)v472;
      v262 = __p.__begin_;
      v263 = __p.__end_;
      while (v262 != v263)
      {
        v264 = v243 + 80 * *v262;
        v267 = *(_DWORD *)(v264 + 68);
        v266 = (int *)(v264 + 68);
        v265 = v267;
        if (v267 != -1)
        {
          if (v261 >= v474)
          {
            v269 = (char *)v472;
            v270 = (v261 - (_BYTE *)v472) >> 2;
            v271 = v270 + 1;
            if ((unint64_t)(v270 + 1) >> 62)
              goto LABEL_476;
            v272 = v474 - (_BYTE *)v472;
            if ((v474 - (_BYTE *)v472) >> 1 > v271)
              v271 = v272 >> 1;
            if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFFCLL)
              v273 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v273 = v271;
            if (v273)
            {
              v274 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v474, v273);
              v269 = (char *)v472;
              v261 = v473;
              v265 = *v266;
            }
            else
            {
              v274 = 0;
            }
            v275 = &v274[4 * v270];
            *(_DWORD *)v275 = v265;
            v268 = v275 + 4;
            while (v261 != v269)
            {
              v276 = *((_DWORD *)v261 - 1);
              v261 -= 4;
              *((_DWORD *)v275 - 1) = v276;
              v275 -= 4;
            }
            v472 = v275;
            v473 = v268;
            v474 = &v274[4 * v273];
            if (v269)
              operator delete(v269);
          }
          else
          {
            *(_DWORD *)v261 = v265;
            v268 = v261 + 4;
          }
          v473 = v268;
          v243 = *(_QWORD *)(a1 + 72);
          *(_DWORD *)(v243 + 80 * *v262 + 68) = -1;
          v261 = v268;
        }
        ++v262;
      }
      v484.i32[0] = 0;
      v485.i64[0] = v484.i64[1];
      v277 = (unsigned int *)v480;
      v278 = (unsigned int *)v481;
      while (v277 != v278)
      {
        v279 = *v277;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 16 * v279) != -1)
        ++v277;
      }
      v280 = v475.__begin_;
      v281 = v475.__end_;
      while (v280 != v281)
      {
        v282 = *v280;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 16 * v282) != -1)
        ++v280;
      }
      v479 = 0;
      v479 = geom::partitioned_set::merge(v448, (unsigned int *)v472, (v473 - (_BYTE *)v472) >> 2);
      __p.__end_ = __p.__begin_;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v455, 0);
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(v455, ((char *)__p.__end_ - (char *)__p.__begin_) >> 1);
      v284 = __p.__begin_;
      if (__p.__end_ == __p.__begin_)
      {
        v316 = 0;
      }
      else
      {
        v285 = 0;
        v286 = 0;
        v287 = *(float32x4_t **)(a1 + 384);
        do
        {
          v288 = v284[v285];
          v289 = *(_QWORD *)(a1 + 72);
          v290 = (float32x4_t *)(v289 + 80 * v288);
          v283.f32[0] = (float)v290[4].u32[0];
          v291 = vdivq_f32(v290[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v283.f32, 0));
          v292 = *(_QWORD *)(a1 + 392);
          if ((unint64_t)v287 >= v292)
          {
            v294 = ((char *)v287 - (_BYTE *)*v455) >> 4;
            if ((unint64_t)(v294 + 1) >> 60)
              goto LABEL_476;
            v295 = v292 - (_QWORD)*v455;
            v296 = v295 >> 3;
            if (v295 >> 3 <= (unint64_t)(v294 + 1))
              v296 = v294 + 1;
            if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF0)
              v297 = 0xFFFFFFFFFFFFFFFLL;
            else
              v297 = v296;
            if (v297)
            {
              v452 = v291;
              v298 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v454, v297);
              v291 = v452;
            }
            else
            {
              v298 = 0;
            }
            v299 = (float32x4_t *)&v298[16 * v294];
            *v299 = v291;
            v293 = v299 + 1;
            v301 = *(float32x4_t **)(a1 + 376);
            v300 = *(float32x4_t **)(a1 + 384);
            if (v300 != v301)
            {
              do
              {
                v302 = v300[-1];
                --v300;
                v299[-1] = v302;
                --v299;
              }
              while (v300 != v301);
              v300 = (float32x4_t *)*v455;
            }
            *(_QWORD *)(a1 + 376) = v299;
            *(_QWORD *)(a1 + 384) = v293;
            *(_QWORD *)(a1 + 392) = &v298[16 * v297];
            if (v300)
              operator delete(v300);
          }
          else
          {
            *v287 = v291;
            v293 = v287 + 1;
          }
          *(_QWORD *)(a1 + 384) = v293;
          v303 = (float32x4_t *)(v289 + 80 * v288);
          v304 = v303[1];
          v303 += 2;
          v283 = vld1q_dup_f32(v303->f32);
          v305 = vdivq_f32(v304, v283);
          v306 = *(_QWORD *)(a1 + 392);
          if ((unint64_t)v293 >= v306)
          {
            v307 = ((char *)v293 - (_BYTE *)*v455) >> 4;
            if ((unint64_t)(v307 + 1) >> 60)
              goto LABEL_476;
            v308 = v306 - (_QWORD)*v455;
            v309 = v308 >> 3;
            if (v308 >> 3 <= (unint64_t)(v307 + 1))
              v309 = v307 + 1;
            if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFF0)
              v310 = 0xFFFFFFFFFFFFFFFLL;
            else
              v310 = v309;
            if (v310)
            {
              v453 = v305;
              v311 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v454, v310);
              v305 = v453;
            }
            else
            {
              v311 = 0;
            }
            v312 = (float32x4_t *)&v311[16 * v307];
            *v312 = v305;
            v287 = v312 + 1;
            v314 = *(float32x4_t **)(a1 + 376);
            v313 = *(float32x4_t **)(a1 + 384);
            if (v313 != v314)
            {
              do
              {
                v315 = v313[-1];
                --v313;
                v312[-1] = v315;
                --v312;
              }
              while (v313 != v314);
              v313 = (float32x4_t *)*v455;
            }
            *(_QWORD *)(a1 + 376) = v312;
            *(_QWORD *)(a1 + 384) = v287;
            *(_QWORD *)(a1 + 392) = &v311[16 * v310];
            if (v313)
              operator delete(v313);
          }
          else
          {
            *v293 = v305;
            v287 = v293 + 1;
          }
          *(_QWORD *)(a1 + 384) = v287;
          v284 = __p.__begin_;
          v285 = ++v286;
        }
        while (v286 < (unint64_t)(__p.__end_ - __p.__begin_));
        v316 = ((char *)__p.__end_ - (char *)__p.__begin_) << 30;
      }
      v317 = v476;
      v318 = *(_DWORD *)(a1 + 340);
      if (v318 == -1)
        *(_DWORD *)(a1 + 340) = geom::partitioned_set::extract(v448, v476);
      else
        geom::partitioned_set::extract(v448, v476, v318);
      v487.__begin_ = (std::vector<int>::pointer)&off_24F148490;
      v487.__end_ = (std::vector<int>::pointer)a1;
      v487.__end_cap_.__value_ = (int *)(v316 | v317);
      v488 = &v487;
      geom::partitioned_set::split((uint64_t *)v448, &v479, ((unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2) + 1, v460, (uint64_t)&v487);
      v319 = v488;
      if (v488 == &v487)
      {
        v319 = &v487;
        v320 = 4;
LABEL_322:
        (*(void (**)(void))&v319->__begin_[2 * v320])();
      }
      else if (v488)
      {
        v320 = 5;
        goto LABEL_322;
      }
      v321 = __p.__begin_;
      if (__p.__end_ != __p.__begin_)
      {
        v322 = 0;
        v323 = __p.__end_ - __p.__begin_;
        v324 = *(_QWORD *)(a1 + 72);
        v325 = *(_QWORD *)(a1 + 352);
        do
        {
          *(_DWORD *)(v324 + 80 * v321[v322] + 68) = *(_DWORD *)(v325 + 4 * v322);
          ++v322;
        }
        while (v323 > v322);
      }
      LODWORD(v487.__begin_) = *(_DWORD *)(a1 + 340);
      HIDWORD(v487.__begin_) = *(_DWORD *)(*(_QWORD *)(a1 + 360) - 4);
      v326 = geom::partitioned_set::merge(v448, (unsigned int *)&v487, 2);
      *(_DWORD *)(*(_QWORD *)(a1 + 360) - 4) = v326;
      *(_DWORD *)(a1 + 340) = v326;
      v328 = (unsigned int *)__p.__begin_;
      v327 = __p.__end_;
      while (v328 != (unsigned int *)v327)
      {
        v329 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 80 * *v328 + 68);
        v330 = *(_QWORD *)(a1 + 272);
        if (v329 < (*(_QWORD *)(a1 + 280) - v330) >> 3)
        {
          v331 = *(_DWORD *)(v330 + 8 * v329);
          if (v331 != -1)
          {
            v332 = *(float *)(a1 + 528);
            v333 = *v447;
            v334 = -1;
            do
            {
              if (*(float *)(v333 + 4 * v331) > v332)
              {
                v334 = v331;
                v332 = *(float *)(v333 + 4 * v331);
              }
              v331 = *(_DWORD *)(*(_QWORD *)v448 + 4 * v331);
            }
            while (v331 != -1);
            if (v334 != -1)
            {
              v478.i32[0] = v334;
              v478.i32[1] = *(_DWORD *)(v333 + 4 * v334);
            }
          }
        }
        ++v328;
      }
      goto LABEL_352;
    }
    v245 = *(_QWORD *)(a1 + 48);
    v246 = *(_QWORD *)(a1 + 96);
    v247 = *(float32x4_t *)(v246 + 16 * v476);
    v248 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v247, (int32x4_t)v247), (int8x16_t)v247, 0xCuLL);
    v249 = vnegq_f32(v247);
    while (1)
    {
      v250 = v245 + 16 * *v244;
      v251 = *(float32x4_t *)(v246 + 16 * *(unsigned int *)(v245 + 16 * *(unsigned int *)(v250 + 8) + 12));
      v252 = *(float32x4_t *)(v246 + 16 * *(unsigned int *)(v250 + 12));
      v253 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v251, (int32x4_t)v251), (int8x16_t)v251, 0xCuLL);
      v254 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v252, (int32x4_t)v252), (int8x16_t)v252, 0xCuLL);
      v255 = vaddq_f32(vmlaq_f32(vmulq_f32(v253, v249), v251, v248), vaddq_f32(vmlaq_f32(vmulq_f32(v254, vnegq_f32(v251)), v252, v253), vmlaq_f32(vmulq_f32(v248, vnegq_f32(v252)), v247, v254)));
      v256 = vmulq_f32(v255, v255);
      v257 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v256.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v256, 2), v256)).u64[0];
      *(float *)v257.i32 = sqrtf(*(float *)v257.i32);
      if (*(float *)v257.i32 <= 0.00000011921)
        goto LABEL_246;
      v258 = vmulq_f32(vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v255, (int32x4_t)v255), (int8x16_t)v255, 0xCuLL), (float32x4_t)vdupq_lane_s32(v257, 0)), vsubq_f32(vdivq_f32(vaddq_f32(v247, vaddq_f32(v251, v252)), v451), *(float32x4_t *)(a1 + 320)));
      v259 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v258, 2), vaddq_f32(v258, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v258.f32, 1))).f32[0];
      if (v259 == 0.0)
        goto LABEL_246;
      v260 = fabsf(v259);
      if (v260 != INFINITY)
        break;
      if (v259 < 0.0)
        goto LABEL_337;
LABEL_246:
      if (++v244 == (unsigned int *)v481)
        goto LABEL_247;
    }
    if ((float)(0.0 - (float)(*(float *)(a1 + 528) * (float)(v260 + 1.0))) < v259)
      goto LABEL_246;
LABEL_337:
    v335 = (_DWORD *)(v243 + 80 * *__p.__begin_ + 68);
    v336 = *(_DWORD *)(a1 + 344);
    if (v336 == -1)
    {
      v339 = geom::partitioned_set::extract(v448, v476);
      *(_DWORD *)(a1 + 344) = v339;
      LODWORD(v337) = *v335;
      if (*v335 == v339)
        goto LABEL_342;
    }
    else
    {
      geom::partitioned_set::extract(v448, v476, v336);
      v337 = *v335;
      v338 = *(_QWORD *)(a1 + 272);
      if (v337 >= (*(_QWORD *)(a1 + 280) - v338) >> 3 || *(_DWORD *)(v338 + 8 * v337) == -1)
      {
LABEL_342:
        LODWORD(v337) = -1;
        *v335 = -1;
      }
    }
    v340 = *(_QWORD *)(a1 + 272);
    if (v337 >= (unint64_t)((*(_QWORD *)(a1 + 280) - v340) >> 3)
      || (v341 = *(_DWORD *)(v340 + 8 * v337), v341 == -1))
    {
    }
    else
    {
      v342 = *(float *)(a1 + 528);
      v343 = -1;
      do
      {
        if (*(float *)(*v447 + 4 * v341) > v342)
        {
          v343 = v341;
          v342 = *(float *)(*v447 + 4 * v341);
        }
        v341 = *(_DWORD *)(*(_QWORD *)v448 + 4 * v341);
      }
      while (v341 != -1);
      if (v343 != -1)
      {
        LODWORD(v487.__begin_) = v343;
        HIDWORD(v487.__begin_) = *(_DWORD *)(*v447 + 4 * v343);
      }
    }
LABEL_352:
    ++v450;
    v481 = (char *)v480;
    __p.__end_ = __p.__begin_;
    v169 = *(_QWORD *)(a1 + 144);
  }
  while (*(_QWORD *)(a1 + 152) - v169 != 12);
LABEL_353:
  v344 = 0.0;
  if (v450 == a2)
  {
    v345 = *(_QWORD *)(a1 + 144);
    v344 = -1.0;
    if (*(_QWORD *)(a1 + 152) - v345 != 12)
      v344 = *(float *)(v345 + 20);
  }
  if (v472)
  {
    v473 = (char *)v472;
    operator delete(v472);
  }
  if (v475.__begin_)
  {
    v475.__end_ = v475.__begin_;
    operator delete(v475.__begin_);
  }
  if (v484.i64[1])
  {
    v485.i64[0] = v484.i64[1];
    operator delete((void *)v484.i64[1]);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v480)
  {
    v481 = (char *)v480;
    operator delete(v480);
  }
  return v344;
}

uint64_t geom::`anonymous namespace'::hull_mesh<float>::~hull_mesh(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(_QWORD *)(a1 + 504) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 456);
  if (v3)
  {
    *(_QWORD *)(a1 + 464) = v3;
    operator delete(v3);
  }
  std::deque<unsigned int>::~deque[abi:nn180100]((_QWORD *)(a1 + 400));
  v4 = *(void **)(a1 + 376);
  if (v4)
  {
    *(_QWORD *)(a1 + 384) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 296);
  if (v6)
  {
    *(_QWORD *)(a1 + 304) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(_QWORD *)(a1 + 280) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 248);
  if (v8)
  {
    *(_QWORD *)(a1 + 256) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 224);
  if (v9)
  {
    *(_QWORD *)(a1 + 232) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 200);
  if (v10)
  {
    *(_QWORD *)(a1 + 208) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 168);
  if (v11)
  {
    *(_QWORD *)(a1 + 176) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 144);
  if (v12)
  {
    *(_QWORD *)(a1 + 152) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 120);
  if (v13)
  {
    *(_QWORD *)(a1 + 128) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 96);
  if (v14)
  {
    *(_QWORD *)(a1 + 104) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 72);
  if (v15)
  {
    *(_QWORD *)(a1 + 80) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 48);
  if (v16)
  {
    *(_QWORD *)(a1 + 56) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 24);
  if (v17)
  {
    *(_QWORD *)(a1 + 32) = v17;
    operator delete(v17);
  }
  v18 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v18;
    operator delete(v18);
  }
  return a1;
}

double geom::convex_hull_triangulated_3<double>(unint64_t a1, float64x2_t *a2, _QWORD *a3, unsigned int a4, double a5)
{
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  double v14;
  char *v15;
  unsigned int *v16;
  char **v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  _DWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  char *i;
  unint64_t v57;
  unsigned int *v59;
  _BYTE v60[48];
  uint64_t v61;
  unsigned int *v62;
  unsigned int *v63;
  _OWORD __dst[8];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  a3[1] = *a3;
  if (!a1)
    return 0.0;
  if (a1 > 3)
  {
    v11 = a1;
  }
  else
  {
    memcpy(__dst, a2, 32 * a1);
    v10 = __dst[0];
    v9 = __dst[1];
    v11 = 4;
    v12 = a1;
    do
    {
      v13 = &__dst[2 * v12];
      *v13 = v10;
      v13[1] = v9;
      ++v12;
    }
    while (v12 != 4);
    a2 = (float64x2_t *)__dst;
  }
  v57 = v11;
  v15 = (char *)*a3;
  a3[1] = *a3;
  v16 = v62;
  v59 = v63;
  if (v62 != v63)
  {
    v17 = (char **)(a3 + 2);
    do
    {
      v18 = *v16;
      if ((_DWORD)v18 != -1)
      {
        v19 = *(_DWORD *)(v61 + 16 * v18 + 12);
        v20 = *v16;
        do
        {
          v21 = v61;
          v22 = v61 + 16 * v20;
          v25 = *(_DWORD *)(v22 + 8);
          v24 = (unsigned int *)(v22 + 8);
          v23 = v25;
          if (v20 != v18 && v23 != v18)
          {
            v26 = *v17;
            if (v15 >= *v17)
            {
              v28 = (char *)*a3;
              v29 = (uint64_t)&v15[-*a3] >> 2;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62)
                goto LABEL_73;
              v31 = v26 - v28;
              if (v31 >> 1 > v30)
                v30 = v31 >> 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v32);
                v28 = (char *)*a3;
                v15 = (char *)a3[1];
              }
              else
              {
                v33 = 0;
              }
              v34 = &v33[4 * v29];
              *(_DWORD *)v34 = v19;
              v27 = v34 + 4;
              while (v15 != v28)
              {
                v35 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v34 - 1) = v35;
                v34 -= 4;
              }
              v26 = &v33[4 * v32];
              *a3 = v34;
              a3[1] = v27;
              a3[2] = v26;
              if (v28)
              {
                operator delete(v28);
                v26 = *v17;
              }
            }
            else
            {
              *(_DWORD *)v15 = v19;
              v27 = v15 + 4;
            }
            a3[1] = v27;
            v36 = (_DWORD *)(v21 + 16 * v20 + 12);
            if (v27 >= v26)
            {
              v38 = (char *)*a3;
              v39 = (uint64_t)&v27[-*a3] >> 2;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62)
                goto LABEL_73;
              v41 = v26 - v38;
              if (v41 >> 1 > v40)
                v40 = v41 >> 1;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                v42 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
              {
                v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v42);
                v38 = (char *)*a3;
                v27 = (char *)a3[1];
              }
              else
              {
                v43 = 0;
              }
              v44 = &v43[4 * v39];
              *(_DWORD *)v44 = *v36;
              v37 = v44 + 4;
              while (v27 != v38)
              {
                v45 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v44 - 1) = v45;
                v44 -= 4;
              }
              v26 = &v43[4 * v42];
              *a3 = v44;
              a3[1] = v37;
              a3[2] = v26;
              if (v38)
              {
                operator delete(v38);
                v26 = *v17;
              }
            }
            else
            {
              *(_DWORD *)v27 = *v36;
              v37 = v27 + 4;
            }
            a3[1] = v37;
            v46 = (_DWORD *)(v21 + 16 * v23 + 12);
            if (v37 >= v26)
            {
              v47 = (char *)*a3;
              v48 = (uint64_t)&v37[-*a3] >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
LABEL_73:
                abort();
              v50 = v26 - v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v51);
                v47 = (char *)*a3;
                v37 = (char *)a3[1];
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = *v46;
              v15 = v53 + 4;
              while (v37 != v47)
              {
                v54 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *a3 = v53;
              a3[1] = v15;
              a3[2] = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v37 = *v46;
              v15 = v37 + 4;
            }
            a3[1] = v15;
            v23 = *v24;
            v18 = *v16;
          }
          v20 = v23;
        }
        while (v23 != v18);
      }
      v16 += 28;
    }
    while (v16 != v59);
  }
  if (v57 != a1)
  {
    for (i = (char *)*a3; i != v15; i += 4)
    {
      if (*(unsigned int *)i >= a1)
        *(_DWORD *)i = 0;
    }
  }
  return v14;
}

uint64_t geom::`anonymous namespace'::hull_mesh<double>::hull_mesh(uint64_t a1, float64x2_t *a2, unint64_t a3, double a4)
{
  void **v8;
  std::vector<int> *v9;
  _QWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int8x16_t v26;
  float64x2_t v27;
  int8x16_t v29;
  int8x16_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  int8x16_t v35;
  float64x2_t v36;
  int8x16_t v37;
  float64x2_t v38;
  _QWORD *v39;
  int8x16_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  int8x16_t v43;
  unint64_t v44;
  float64x2_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v58;
  uint64_t v59;
  int8x16_t v60;
  uint64_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  unint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  uint64_t v74;
  std::vector<int>::value_type __x;

  *(_OWORD *)(a1 + 96) = 0u;
  v8 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v9 = (std::vector<int> *)(a1 + 168);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v10 = operator new(0x18uLL);
  *(_DWORD *)v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 152) = v10 + 3;
  *(_QWORD *)(a1 + 160) = v10 + 3;
  __x = 0;
  std::vector<unsigned int>::resize(v9, a3, &__x);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 352) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 360) = -1;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 504) = 0;
  v13 = 2.22044605e-16;
  if (a4 >= 2.22044605e-16)
    v13 = a4;
  *(double *)(a1 + 544) = v13;
  if (a3)
  {
    v12.f64[0] = -INFINITY;
    v11.f64[0] = INFINITY;
    v14 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v15 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v16 = 32 * a3;
    v17 = a2;
    do
    {
      v18 = *v17;
      v19 = v17[1];
      v17 += 2;
      v15 = vminnmq_f64(v18, v15);
      v11 = vminnmq_f64((float64x2_t)*(unint64_t *)&v19.f64[0], (float64x2_t)*(unint64_t *)&v11.f64[0]);
      v14 = vmaxnmq_f64(v18, v14);
      v12 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v19.f64[0], (float64x2_t)*(unint64_t *)&v12.f64[0]);
      v16 -= 32;
    }
    while (v16);
  }
  else
  {
    v11.f64[0] = INFINITY;
    v12.f64[0] = -INFINITY;
    v15 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v14 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  }
  v73 = v11;
  v69 = v15;
  v71 = v12;
  v20 = vsubq_f64(v12, v11);
  __asm { FMOV            V2.2D, #0.5 }
  v26 = (int8x16_t)vmulq_f64(v20, _Q2);
  v65 = _Q2;
  v67 = v14;
  v27 = vmulq_f64(vsubq_f64(v14, v15), _Q2);
  v20.f64[0] = 2.22044605e-16;
  __asm { FMOV            V7.2D, #1.0 }
  v29.i64[0] = _Q7.i64[0];
  v29.i64[1] = *(_QWORD *)&v27.f64[1];
  v30 = vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(v20, v27)).i64[0], 0), (int8x16_t)v27, v29);
  v63 = (float64x2_t)v26;
  if (*(double *)&v30.i64[1] <= 2.22044605e-16)
  {
    _Q7.i64[0] = v30.i64[0];
    v30.i64[1] = 1.0;
    v60 = _Q7;
    v61 = v30.i64[0];
    v59 = vextq_s8(v30, v30, 8uLL).u64[0];
    v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
  }
  else
  {
    v59 = vextq_s8(v30, v30, 8uLL).u64[0];
    v60 = v30;
    v61 = v30.i64[0];
  }
  v58 = v26;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(v8, a3);
  if (a3)
  {
    v32 = v67;
    v31 = v69;
    v33 = &a2[2 * a3];
    *(_QWORD *)&v31.f64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    *(_QWORD *)&v32.f64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    v34 = vaddq_f64(v32, v31);
    v31.f64[1] = v71.f64[1];
    v41 = vmulq_f64(v34, v65);
    v31.f64[0] = 2.22044605e-16;
    v35 = (int8x16_t)vcgeq_f64(v31, v63);
    *(_QWORD *)&v32.f64[0] = vmvnq_s8(v35).u64[0];
    v36 = vmulq_f64(vaddq_f64(v71, v73), v65);
    v37.i64[0] = v61;
    v37.i64[1] = v59;
    v42 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0), v60, v37);
    *(_QWORD *)&v38.f64[1] = v58.i64[1];
    *(int8x8_t *)&v38.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)v58.i8, *(int8x8_t *)&v32.f64[0]), vand_s8(*(int8x8_t *)v35.i8, (int8x8_t)0x3FF0000000000000));
    v39 = (_QWORD *)(a1 + 112);
    v40 = *(int8x16_t **)(a1 + 104);
    *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    *(_QWORD *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    v66 = v36;
    v68 = v41;
    v62 = v38;
    v64 = v42;
    do
    {
      v43 = (int8x16_t)vdivq_f64(vsubq_f64(*a2, v41), v42);
      v44 = vextq_s8(v43, v43, 8uLL).u64[0];
      v45 = vdivq_f64(vsubq_f64(a2[1], v36), v38);
      if ((unint64_t)v40 >= *v39)
      {
        v46 = ((char *)v40 - (_BYTE *)*v8) >> 5;
        if ((unint64_t)(v46 + 1) >> 59)
          abort();
        v47 = *v39 - (_QWORD)*v8;
        v48 = v47 >> 4;
        if (v47 >> 4 <= (unint64_t)(v46 + 1))
          v48 = v46 + 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
          v49 = 0x7FFFFFFFFFFFFFFLL;
        else
          v49 = v48;
        if (v49)
        {
          v74 = v43.i64[0];
          v70 = v44;
          v72 = v45;
          v50 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 112, v49);
          v44 = v70;
          v45 = v72;
          v43.i64[0] = v74;
        }
        else
        {
          v50 = 0;
        }
        v43.i64[1] = v44;
        v51 = (int8x16_t *)&v50[32 * v46];
        *v51 = v43;
        v51[1] = (int8x16_t)v45;
        v53 = *(int8x16_t **)(a1 + 96);
        v52 = *(int8x16_t **)(a1 + 104);
        v54 = v51;
        if (v52 != v53)
        {
          do
          {
            v55 = v52[-2];
            v56 = v52[-1];
            v52 -= 2;
            v54[-2] = v55;
            v54[-1] = v56;
            v54 -= 2;
          }
          while (v52 != v53);
          v52 = (int8x16_t *)*v8;
        }
        v40 = v51 + 2;
        *(_QWORD *)(a1 + 96) = v54;
        *(_QWORD *)(a1 + 104) = v51 + 2;
        *(_QWORD *)(a1 + 112) = &v50[32 * v49];
        if (v52)
          operator delete(v52);
        v36 = v66;
        v41 = v68;
        v38 = v62;
        v42 = v64;
      }
      else
      {
        v43.i64[1] = v44;
        *v40 = v43;
        v40[1] = (int8x16_t)v45;
        v40 += 2;
      }
      *(_QWORD *)(a1 + 104) = v40;
      a2 += 2;
    }
    while (a2 != v33);
  }
  return a1;
}

double geom::`anonymous namespace'::hull_mesh<double>::compute_hull(uint64_t a1, unsigned int a2)
{
  int8x16_t *v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x16_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  float64x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float64x2_t v19;
  int8x16_t v20;
  float64x2_t v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int8x16_t v25;
  float64x2_t v26;
  float64x2_t *v27;
  float64x2_t v28;
  float64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  double v33;
  float64x2_t v34;
  int8x16_t v35;
  double v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  _OWORD *v46;
  _BYTE *v47;
  double v48;
  uint64_t v49;
  void **v50;
  float64x2_t v51;
  float64x2_t v52;
  _OWORD *v53;
  _BYTE *v54;
  unint64_t v55;
  uint64_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  unint64_t v61;
  float64x2_t v62;
  int8x16_t v63;
  unint64_t v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  unint64_t v75;
  double v76;
  uint64_t v77;
  void **v78;
  float64x2_t v79;
  float64x2_t v80;
  uint64_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  double v85;
  uint64_t v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t *v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  double v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  double v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  float64x2_t *v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t *v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t *v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  _BOOL4 v152;
  _DWORD *v153;
  unsigned int v154;
  _QWORD *v155;
  uint64_t v156;
  float64x2_t *v157;
  uint64_t v158;
  std::vector<int>::pointer begin;
  uint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  unsigned int *v163;
  _QWORD *v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  double v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  float64x2_t *v177;
  float64x2_t *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  float64x2_t v182;
  float64x2_t *v183;
  float64x2_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  float64x2_t *v190;
  float64x2_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  float64x2_t v195;
  float64x2_t *v196;
  float64x2_t v197;
  void **v198;
  double *v199;
  uint64_t v200;
  double v201;
  int v202;
  _DWORD *v203;
  float64_t v204;
  float64_t v205;
  uint64_t v206;
  _DWORD *v207;
  _DWORD *v208;
  int v209;
  float64x2_t *v210;
  float64x2_t v211;
  float64x2_t v212;
  int64x2_t v213;
  int8x16_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  _DWORD *v221;
  unsigned int *v222;
  float64x2_t v223;
  unsigned int v224;
  uint64_t v225;
  _OWORD *v226;
  __int128 v227;
  uint64_t v228;
  float64x2_t v229;
  _QWORD *v230;
  _DWORD *v231;
  unint64_t v232;
  _DWORD *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  _DWORD *v238;
  char *v239;
  char *v240;
  _DWORD *v241;
  int v242;
  _DWORD *v243;
  uint64_t v244;
  unsigned int v245;
  std::vector<unsigned int>::pointer end;
  unsigned int *v247;
  std::vector<unsigned int>::pointer v248;
  int64_t v249;
  unint64_t v250;
  int64_t v251;
  unint64_t v252;
  char *v253;
  unsigned int *v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int *v259;
  unsigned int v260;
  char v261;
  int *v262;
  std::vector<int>::pointer v263;
  unsigned int *v264;
  int v265;
  std::vector<int>::pointer v266;
  int *v267;
  std::vector<int>::pointer v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  std::vector<int>::pointer v274;
  int64_t v275;
  unint64_t v276;
  int64_t v277;
  unint64_t v278;
  char *v279;
  char *v280;
  int v281;
  _DWORD *v282;
  std::vector<int>::pointer v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  unsigned int *v289;
  unsigned int v290;
  int v291;
  int *v292;
  int v293;
  uint64_t v294;
  int *v295;
  uint64_t v296;
  uint64_t v297;
  float64x2_t *v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  int8x16_t v302;
  unint64_t v303;
  float64x2_t v304;
  int8x16_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  float64x2_t *v309;
  float64x2_t *v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  double v321;
  BOOL v322;
  char *v323;
  std::vector<unsigned int>::pointer v324;
  std::vector<unsigned int>::pointer v325;
  uint64_t v326;
  int v327;
  int *v328;
  int v329;
  char *v330;
  char *v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  char *v336;
  char *v337;
  int v338;
  std::vector<int>::pointer v339;
  std::vector<int>::pointer v340;
  uint64_t v341;
  std::vector<int>::pointer v342;
  std::vector<int>::pointer v343;
  uint64_t v344;
  float64x2_t v345;
  std::vector<unsigned int>::pointer v346;
  uint64_t v347;
  unsigned int v348;
  float64x2_t *v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  float64x2_t v353;
  float64x2_t v354;
  unint64_t v355;
  unint64_t v356;
  float64x2_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  float64x2_t *v363;
  float64x2_t *v364;
  float64x2_t *v365;
  float64x2_t *v366;
  float64x2_t v367;
  float64x2_t *v368;
  float64x2_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  char *v376;
  float64x2_t *v377;
  float64x2_t *v378;
  float64x2_t *v379;
  float64x2_t *v380;
  float64x2_t v381;
  int64_t v382;
  uint64_t v383;
  unsigned int v384;
  _QWORD *v385;
  uint64_t v386;
  std::vector<unsigned int>::pointer v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  std::vector<unsigned int>::pointer v393;
  unsigned int *v394;
  unint64_t v395;
  uint64_t v396;
  unsigned int v397;
  double v398;
  uint64_t v399;
  unsigned int v400;
  _DWORD *v401;
  unsigned int v402;
  unint64_t v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  unsigned int v407;
  double v408;
  unsigned int v409;
  double v410;
  uint64_t v411;
  _DWORD *v412;
  uint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  char *v417;
  float64x2_t *v418;
  float64x2_t *v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  char *v432;
  float64x2_t v433;
  __int128 v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  __int128 v442;
  unsigned int v443;
  unsigned int v444;
  _DWORD *v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  float64x2_t v449;
  float64x2_t v450;
  unsigned int v451;
  float64x2_t v452;
  float64x2_t v453;
  uint64_t v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  float64x2_t *v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t *v470;
  float64x2_t v471;
  float64x2_t v472;
  int64x2_t v473;
  unsigned int v474;
  unsigned int v475;
  uint64_t v476;
  uint64_t v477;
  float64x2_t *v478;
  double v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  void *v485;
  char *v486;
  int v487;
  unsigned int *v488;
  unsigned int *v489;
  char *v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  char *v495;
  unsigned int *v496;
  unsigned int v497;
  unsigned int *v498;
  unsigned int *v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  char *v504;
  unsigned int *v505;
  char *v506;
  unsigned int v507;
  unsigned int *v508;
  unsigned int *v510;
  unsigned int v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unsigned int v515;
  int v516;
  std::vector<int> *v518;
  uint64_t *v519;
  geom::partitioned_set *v520;
  unsigned int v522;
  float64x2_t v523;
  unint64_t v524;
  unint64_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64_t v528;
  float64_t v529;
  float64x2_t v530;
  uint64_t v531;
  float64x2_t v532;
  unsigned int v533;
  float64x2_t v534;
  void **v535;
  float64x2_t v536;
  unsigned int v537;
  float64x2_t v538;
  int **v539;
  float64x2_t v540;
  float64x2_t v541;
  unsigned int v542;
  float64x2_t v543;
  std::vector<int> *v544;
  std::vector<int> *v545[2];
  std::vector<int> *v546[2];
  uint64_t v547;
  std::vector<int> *v548[2];
  std::vector<int> *v549;
  std::vector<int> *v550[2];
  std::vector<int> *v551[2];
  uint64_t v552;
  float64_t v553;
  geom::_anonymous_namespace_::integer_hashset *v554;
  geom::_anonymous_namespace_::integer_hashset *v555[2];
  geom::_anonymous_namespace_::integer_hashset *v556[2];
  void *v557;
  char *v558;
  char *v559;
  std::vector<int> v560;
  unsigned int v561;
  std::vector<unsigned int> v562;
  std::vector<int> __p;
  int v564;
  void *v565[2];
  int8x16_t v566;
  int8x16_t v567;
  int8x16_t v568;
  _OWORD v569[8];
  float64x2_t v570;
  float64x2_t v571;
  _BYTE v572[32];
  uint64_t v573;

  v573 = *MEMORY[0x24BDAC8D0];
  v3 = *(int8x16_t **)(a1 + 96);
  v4 = *(int8x16_t **)(a1 + 104);
  v6 = *v3;
  v5 = v3[1];
  v7 = ((char *)v4 - (char *)v3) >> 5;
  if ((unint64_t)((char *)v4 - (char *)v3) < 0x21)
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v24 = *(int64x2_t *)v3;
    v25 = v3[1];
    v22 = *(int64x2_t *)v3;
    v23 = v25;
    v20 = *v3;
    v39 = v25;
    v18 = *v3;
    v41 = v25;
    v31 = *v3;
    v17 = v25;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 2;
    v15 = 1;
    v16 = *(float64x2_t *)v3;
    v17 = v3[1];
    v18 = *v3;
    v19 = (float64x2_t)v17;
    v20 = *v3;
    v21 = (float64x2_t)v17;
    v22 = *(int64x2_t *)v3;
    v23 = v17;
    v24 = *(int64x2_t *)v3;
    v25 = v17;
    v26 = *(float64x2_t *)v3;
    do
    {
      v27 = (float64x2_t *)&v3[2 * v15];
      v29 = *v27;
      v28 = v27[1];
      v30 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v16, *v27).i64[0], 0);
      v17 = vbslq_s8(v30, (int8x16_t)v28, v17);
      v31 = vbslq_s8(v30, *(int8x16_t *)v27, (int8x16_t)v16);
      if (v27->f64[0] < v16.f64[0])
        v13 = v14 - 1;
      v32 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v29, v26).i64[0], 0);
      v5 = vbslq_s8(v32, (int8x16_t)v28, v5);
      v6 = vbslq_s8(v32, (int8x16_t)v29, (int8x16_t)v26);
      if (v29.f64[0] > v26.f64[0])
        v12 = v14 - 1;
      v33 = *(double *)&v24.i64[1];
      v34 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1);
      v35 = (int8x16_t)vdupq_lane_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v24, 1), v34).i64[0], 0);
      v25 = vbslq_s8(v35, (int8x16_t)v28, v25);
      v24 = (int64x2_t)vbslq_s8(v35, (int8x16_t)v29, (int8x16_t)v24);
      if (v29.f64[1] < v33)
        v11 = v14 - 1;
      v36 = *(double *)&v22.i64[1];
      v37 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v34, (float64x2_t)vdupq_laneq_s64(v22, 1)).i64[0], 0);
      v23 = vbslq_s8(v37, (int8x16_t)v28, v23);
      v22 = (int64x2_t)vbslq_s8(v37, (int8x16_t)v29, (int8x16_t)v22);
      if (v29.f64[1] > v36)
        v10 = v14 - 1;
      v38 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v21, v28).i64[0], 0);
      v39 = vbslq_s8(v38, (int8x16_t)v28, (int8x16_t)v21);
      v20 = vbslq_s8(v38, (int8x16_t)v29, v20);
      if (v28.f64[0] < v21.f64[0])
        v9 = v14 - 1;
      v40 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v28, v19).i64[0], 0);
      if (v28.f64[0] > v19.f64[0])
        v8 = v14 - 1;
      v15 = v14;
      v41 = vbslq_s8(v40, (int8x16_t)v28, (int8x16_t)v19);
      v322 = v7 > v14++;
      v18 = vbslq_s8(v40, (int8x16_t)v29, v18);
      v16 = (float64x2_t)v31;
      v19 = (float64x2_t)v41;
      v21 = (float64x2_t)v39;
      v26 = (float64x2_t)v6;
    }
    while (v322);
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  *(int8x16_t *)v565 = v31;
  v566 = v17;
  v567 = v6;
  v568 = v5;
  v46 = v569;
  v569[0] = v24;
  v569[1] = v25;
  v569[2] = v22;
  v569[3] = v23;
  v569[4] = v20;
  v569[5] = v39;
  *(_QWORD *)v572 = __PAIR64__(v12, v13);
  *(_QWORD *)&v572[8] = __PAIR64__(v10, v11);
  v47 = &v572[8];
  *(_QWORD *)&v572[16] = __PAIR64__(v8, v9);
  v48 = -1.0;
  v49 = 1;
  v569[6] = v18;
  v569[7] = v41;
  do
  {
    if (v45 <= 4)
    {
      v50 = &v565[4 * v45];
      v52 = *(float64x2_t *)v50;
      v51 = *((float64x2_t *)v50 + 1);
      v53 = v46;
      v54 = v47;
      v55 = v49;
      do
      {
        if (v55 <= 4)
        {
          v56 = 0;
          v57 = (float64x2_t *)&v565[4 * v55];
          v58 = vsubq_f64(*v57, v52);
          v60 = vsubq_f64(v57[1], v51);
          v59 = vnegq_f64(v60);
          v60.f64[1] = v58.f64[0];
          v61 = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
          v62 = (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL);
          v63 = (int8x16_t)vnegq_f64(v58);
          v64 = vextq_s8(v63, v63, 8uLL).u64[0];
          do
          {
            v65 = (float64x2_t *)&v53[2 * v56];
            v66 = vsubq_f64(*v65, v52);
            v67 = vsubq_f64(v65[1], v51);
            v68.f64[0] = v67.f64[0];
            v68.f64[1] = v66.f64[0];
            *(_QWORD *)&v69.f64[0] = v63.i64[0];
            *(_QWORD *)&v69.f64[1] = v64;
            v70 = vmlaq_f64(vmulq_laneq_f64(v59, v66, 1), v67, v62);
            v71 = vmulq_f64(v68, v69);
            v68.f64[0] = v60.f64[0];
            *(_QWORD *)&v68.f64[1] = v61;
            v72 = vmlaq_f64(v71, v66, v68);
            v73 = vmulq_f64(v72, v72);
            v74 = v73.f64[1] + vmulq_f64(v70, v70).f64[0] + v73.f64[0];
            if (v74 > v48)
            {
              v44 = *(_DWORD *)&v572[4 * v45];
              v43 = *(_DWORD *)&v572[4 * v55];
              v48 = v74;
              v42 = *(_DWORD *)&v54[4 * v56];
            }
            ++v56;
          }
          while (v55 + v56 < 5);
        }
        ++v55;
        v54 += 4;
        v53 += 2;
      }
      while (v55 != 6);
    }
    ++v45;
    ++v49;
    v47 += 4;
    v46 += 2;
  }
  while (v45 != 6);
  if (v44 == v43 || v43 == v42 || v44 == v42)
  {
    v75 = 0;
    v76 = -1.0;
    v77 = 1;
    do
    {
      if (v75 <= 4)
      {
        v78 = &v565[4 * v75];
        v80 = *(float64x2_t *)v78;
        v79 = *((float64x2_t *)v78 + 1);
        v81 = v77;
        do
        {
          v82 = (float64x2_t *)&v565[4 * v81];
          v83 = vsubq_f64(v80, *v82);
          v84 = vsubq_f64(v79, v82[1]);
          v85 = sqrt(vmulq_f64(v84, v84).f64[0] + vaddvq_f64(vmulq_f64(v83, v83)));
          if (v85 > v76)
          {
            v44 = *(_DWORD *)&v572[4 * v75];
            v43 = *(_DWORD *)&v572[4 * v81];
            v76 = v85;
          }
          ++v81;
        }
        while (v81 != 6);
      }
      ++v75;
      ++v77;
    }
    while (v75 != 6);
    if (v4 == v3)
    {
      v96 = 0.0;
    }
    else
    {
      v86 = 0;
      v87 = (float64x2_t *)&v3[2 * v43];
      v89 = *v87;
      v88 = v87[1];
      v90 = (float64x2_t *)&v3[2 * v44];
      v91 = vsubq_f64(v89, *v90);
      v92 = vsubq_f64(v88, v90[1]);
      v93 = vmulq_f64(v92, v92);
      v94 = vmulq_f64(v91, v91);
      v93.f64[0] = 1.0 / sqrt(v93.f64[0] + vaddvq_f64(v94));
      v95 = vmulq_f64(v92, v93);
      v98 = vmulq_n_f64(v91, v93.f64[0]);
      v96 = 0.0;
      *(_QWORD *)&v98.f64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
      do
      {
        v99 = (float64x2_t *)&v3[2 * v86];
        v94.f64[0] = (double)v44;
        v100 = vsubq_f64(v99[1], v94);
        v97.f64[1] = (double)v44;
        v97.f64[0] = (double)v44;
        v101 = vsubq_f64(*v99, v97);
        v102 = vmulq_f64(v98, v101);
        v102.f64[0] = vmulq_f64(v95, v100).f64[0] + vaddvq_f64(v102);
        v103 = vmlsq_lane_f64(v101, v98, v102.f64[0], 0);
        v104 = vmlsq_f64(v100, v95, v102);
        v105 = sqrt(vmulq_f64(v104, v104).f64[0] + vaddvq_f64(vmulq_f64(v103, v103)));
        if (v105 != v96 && v96 + 0.000001 <= v105)
        {
          v42 = v86;
          v96 = v105;
        }
        ++v86;
      }
      while (v7 > v86);
    }
    v547 = v44;
    if (fabs(v96) <= 0.000001)
      v42 = v44;
  }
  else
  {
    v547 = v44;
  }
  *(double *)(a1 + 544) = fmax(*(double *)(a1 + 544), 2.22044605e-15);
  LODWORD(v562.__begin_) = v111;
  LODWORD(v560.__begin_) = v112;
  v113 = *(_QWORD *)(a1 + 48);
  v114 = (unsigned int *)(v113 + 16 * v106);
  v115 = (unsigned int *)(v113 + 16 * v542);
  v116 = (unsigned int *)(v113 + 16 * v107);
  v117 = (unsigned int *)(v113 + 16 * v108);
  v118 = (unsigned int *)(v113 + 16 * v109);
  v119 = (unsigned int *)(v113 + 16 * v110);
  v120 = *(_QWORD *)(a1 + 72);
  v121 = v120 + 112 * v111;
  v552 = v120;
  v122 = v120 + 112 * v112;
  v114[2] = v542;
  v114[3] = v44;
  v115[2] = v107;
  v115[3] = v43;
  v116[2] = v106;
  v116[3] = v42;
  v117[2] = v110;
  v117[3] = v43;
  v118[2] = v108;
  v118[3] = v42;
  v119[2] = v109;
  v119[3] = v44;
  *v114 = v111;
  v114[1] = v108;
  *v115 = v111;
  v115[1] = v109;
  *v116 = v111;
  v116[1] = v110;
  v123 = v111;
  *v117 = v112;
  v117[1] = v106;
  *v118 = v112;
  v118[1] = v542;
  v124 = v112;
  *v119 = v112;
  v119[1] = v107;
  *(_DWORD *)v121 = v106;
  *(_DWORD *)v122 = v108;
  v125 = *(_QWORD *)(a1 + 96);
  v126 = (float64x2_t *)(v125 + 32 * v547);
  v127 = *v126;
  v128 = v126[1];
  v129 = (float64x2_t *)(v125 + 32 * v43);
  v130 = *v129;
  v131 = v129[1];
  v132 = (float64x2_t *)(v125 + 32 * v42);
  v133 = *v132;
  v134 = v132[1];
  v135 = vnegq_f64(v128);
  v136 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v134), v127, 1), v128, *v132, 1);
  v137 = vaddq_f64(v128, v131);
  v128.f64[1] = v127.f64[0];
  v138 = vmlaq_laneq_f64(vmulq_laneq_f64(v135, *v129, 1), v131, v127, 1);
  v139 = vnegq_f64(v131);
  v131.f64[1] = v129->f64[0];
  v140 = vmlaq_laneq_f64(vmulq_laneq_f64(v139, *v132, 1), v134, *v129, 1);
  v141 = vaddq_f64(v137, v134);
  v134.f64[1] = v132->f64[0];
  v142 = vaddq_f64(vmlaq_f64(vmulq_f64(v128, vnegq_f64(*v132)), v127, v134), vaddq_f64(vmlaq_f64(vmulq_f64(v131, vnegq_f64(v127)), v130, v128), vmlaq_f64(vmulq_f64(v134, vnegq_f64(v130)), *v132, v131)));
  v143 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v142, 1);
  v144 = vaddq_f64(v136, vaddq_f64(v138, v140));
  v138.f64[0] = vmulq_f64(v144, v144).f64[0];
  v144.f64[1] = v142.f64[0];
  *(float64x2_t *)(v121 + 16) = v144;
  *(float64x2_t *)(v121 + 32) = v143;
  v145 = vmulq_f64(v142, v142);
  v145.f64[0] = sqrt(v145.f64[1] + v138.f64[0] + v145.f64[0]);
  *(float64_t *)(v121 + 48) = v145.f64[0];
  *(_BYTE *)(v121 + 56) = v145.f64[0] <= 2.22044605e-16;
  *(float64x2_t *)(v122 + 16) = vnegq_f64(v144);
  *(float64x2_t *)(v122 + 32) = vnegq_f64(v143);
  *(float64_t *)(v122 + 48) = v145.f64[0];
  *(_BYTE *)(v122 + 56) = v145.f64[0] <= 2.22044605e-16;
  v146 = vaddq_f64(vaddq_f64(v127, v130), v133);
  *(float64x2_t *)(v121 + 64) = v146;
  *(float64x2_t *)(v121 + 80) = v141;
  *(_DWORD *)(v121 + 96) = 3;
  *(float64x2_t *)(v122 + 64) = v146;
  *(float64x2_t *)(v122 + 80) = v141;
  *(_DWORD *)(v122 + 96) = 3;
  __asm { FMOV            V1.2D, #3.0 }
  v523 = _Q1;
  *(float64x2_t *)(a1 + 320) = vdivq_f64(v146, _Q1);
  *(float64x2_t *)(a1 + 336) = vdivq_f64(v141, _Q1);
  v152 = (*(unsigned __int8 *)(v121 + 56) | *(unsigned __int8 *)(v122 + 56)) != 0;
  v153 = operator new(0x28uLL);
  *(_QWORD *)v153 = &off_24F148510;
  v153[2] = v44;
  v153[3] = v43;
  v153[4] = v42;
  v153[5] = v123;
  *((_BYTE *)v153 + 24) = v152;
  *((_QWORD *)v153 + 4) = a1;
  v566.i64[1] = (uint64_t)v153;
  LODWORD(v557) = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5;
  geom::partitioned_set::init((std::vector<int> *)(a1 + 200), v557, (uint64_t)&v557, 1uLL);
  memset(&__p, 0, sizeof(__p));
  v564 = 0;
  if (v566.i64[1])
  {
    if ((void **)v566.i64[1] == v565)
    {
      *(_QWORD *)&v571.f64[1] = &v570;
      (*((void (**)(void **, float64x2_t *))v565[0] + 3))(v565, &v570);
    }
    else
    {
      *(_QWORD *)&v571.f64[1] = (*(uint64_t (**)(void))(*(_QWORD *)v566.i64[1] + 16))();
    }
  }
  else
  {
    v571.f64[1] = 0.0;
  }
  v154 = v124;
  std::__function::__value_func<unsigned int ()>::__value_func[abi:nn180100]<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>>((uint64_t)v572, &v570);
  geom::partitioned_set::split((uint64_t *)(a1 + 200), &v564, 3u, &__p, (uint64_t)v572);
  v155 = *(_QWORD **)&v572[24];
  if (*(_BYTE **)&v572[24] == v572)
  {
    v156 = 4;
    v155 = v572;
  }
  else
  {
    if (!*(_QWORD *)&v572[24])
      goto LABEL_58;
    v156 = 5;
  }
  (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_58:
  v157 = *(float64x2_t **)&v571.f64[1];
  if (*(float64x2_t **)&v571.f64[1] == &v570)
  {
    v158 = 4;
    v157 = &v570;
  }
  else
  {
    if (!*(_QWORD *)&v571.f64[1])
      goto LABEL_63;
    v158 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)&v157->f64[0] + 8 * v158))();
LABEL_63:
  begin = __p.__begin_;
  *(_DWORD *)(a1 + 356) = *__p.__begin_;
  v160 = v552 + 112 * v123;
  *(_DWORD *)(v160 + 100) = begin[1];
  v161 = (unsigned int *)(v160 + 100);
  v162 = v552 + 112 * v154;
  *(_DWORD *)(v162 + 100) = begin[2];
  v163 = (unsigned int *)(v162 + 100);
  __p.__end_ = begin;
  operator delete(begin);
  v164 = (_QWORD *)(a1 + 120);
  std::vector<double>::resize(a1 + 120, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5);
  v168 = 0.0;
  v169 = 0.0;
  if (!v152)
  {
    v170 = *v161;
    v171 = *(_QWORD *)(a1 + 272);
    v172 = (*(_QWORD *)(a1 + 280) - v171) >> 3;
    if (v172 <= v170 || (v173 = *(unsigned int *)(v171 + 8 * v170), (_DWORD)v173 == -1))
    {
      v174 = 0xFFFFFFFFLL;
    }
    else
    {
      v175 = *(_QWORD *)(a1 + 96);
      v176 = *(_QWORD *)(a1 + 72) + 112 * LODWORD(v562.__begin_);
      v177 = (float64x2_t *)(v176 + 64);
      LODWORD(v165.f64[0]) = *(_DWORD *)(v176 + 96);
      v165.f64[0] = (double)*(unint64_t *)&v165.f64[0];
      v178 = (float64x2_t *)(v176 + 16);
      v179 = (uint64_t *)(v176 + 48);
      v180 = *(_QWORD *)(a1 + 120);
      v181 = *(_QWORD *)(a1 + 200);
      v182.f64[0] = v165.f64[0];
      v182.f64[1] = v165.f64[0];
      v174 = 0xFFFFFFFFLL;
      do
      {
        v183 = (float64x2_t *)(v175 + 32 * v173);
        *(_QWORD *)&v167.f64[0] = *v179;
        v184 = vdivq_f64(v178[1], v167);
        v167 = v183[1];
        v166 = vmulq_f64(vsubq_f64(v167, vdivq_f64(v177[1], v165)), v184);
        v166.f64[0] = v166.f64[0]
                    + vaddvq_f64(vmulq_f64(vsubq_f64(*v183, vdivq_f64(*v177, v182)), vdivq_f64(*v178, (float64x2_t)vdupq_lane_s64(*v179, 0))));
        *(float64_t *)(v180 + 8 * v173) = v166.f64[0];
        if (v166.f64[0] > *(double *)(a1 + 544) && (v174 == 0xFFFFFFFFLL || v166.f64[0] > *(double *)(v180 + 8 * v174)))
          v174 = v173;
        v173 = *(unsigned int *)(v181 + 4 * v173);
      }
      while ((_DWORD)v173 != -1);
    }
    v185 = *v163;
    if (v172 <= v185 || (v186 = *(unsigned int *)(v171 + 8 * v185), (_DWORD)v186 == -1))
    {
      v187 = 0xFFFFFFFFLL;
    }
    else
    {
      v188 = *(_QWORD *)(a1 + 96);
      v189 = *(_QWORD *)(a1 + 72) + 112 * LODWORD(v560.__begin_);
      v190 = (float64x2_t *)(v189 + 64);
      LODWORD(v165.f64[0]) = *(_DWORD *)(v189 + 96);
      v165.f64[0] = (double)*(unint64_t *)&v165.f64[0];
      v191 = (float64x2_t *)(v189 + 16);
      v192 = (uint64_t *)(v189 + 48);
      v193 = *(_QWORD *)(a1 + 120);
      v194 = *(_QWORD *)(a1 + 200);
      v195.f64[0] = v165.f64[0];
      v195.f64[1] = v165.f64[0];
      v187 = 0xFFFFFFFFLL;
      do
      {
        v196 = (float64x2_t *)(v188 + 32 * v186);
        *(_QWORD *)&v167.f64[0] = *v192;
        v197 = vdivq_f64(v191[1], v167);
        v167 = v196[1];
        v166 = vmulq_f64(vsubq_f64(v167, vdivq_f64(v190[1], v165)), v197);
        v166.f64[0] = v166.f64[0]
                    + vaddvq_f64(vmulq_f64(vsubq_f64(*v196, vdivq_f64(*v190, v195)), vdivq_f64(*v191, (float64x2_t)vdupq_lane_s64(*v192, 0))));
        *(float64_t *)(v193 + 8 * v186) = v166.f64[0];
        if (v166.f64[0] > *(double *)(a1 + 544) && (v187 == 0xFFFFFFFFLL || v166.f64[0] > *(double *)(v193 + 8 * v187)))
          v187 = v186;
        v186 = *(unsigned int *)(v194 + 4 * v186);
      }
      while ((_DWORD)v186 != -1);
    }
    if (v174 != 0xFFFFFFFFLL)
    {
      *(_DWORD *)v572 = v174;
      *(_QWORD *)&v572[8] = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v174);
    }
    if (v187 != 0xFFFFFFFFLL)
    {
      *(_DWORD *)v572 = v187;
      *(_QWORD *)&v572[8] = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v187);
    }
    v169 = 0.0;
    v168 = 0.0;
    if (v174 != 0xFFFFFFFFLL)
      v168 = *(double *)(*v164 + 8 * v174);
    if (v187 != 0xFFFFFFFFLL)
      v169 = *(double *)(*v164 + 8 * v187);
  }
  v198 = (void **)v566.i64[1];
  if ((void **)v566.i64[1] == v565)
  {
    v200 = 4;
    v198 = v565;
    v199 = (double *)&unk_2289B4000;
  }
  else
  {
    v199 = (double *)&unk_2289B4000;
    if (!v566.i64[1])
      goto LABEL_95;
    v200 = 5;
  }
  (*((void (**)(void))*v198 + v200))();
LABEL_95:
  if (v168 >= v169)
    v201 = v168;
  else
    v201 = v169;
  if (v201 > v199[10])
    v202 = 1;
  else
    v202 = 2;
  if (v152)
    v202 = 3;
  *(_DWORD *)(a1 + 352) = v202;
  if (v202 == 2)
  {
    v210 = *(float64x2_t **)(a1 + 72);
    v215 = v210[1];
    v211 = v210[2];
    v166.f64[0] = v210[3].f64[0];
    v212 = vdivq_f64(v211, v166);
    v213 = (int64x2_t)vdivq_f64(v215, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v166.f64[0], 0));
    v214 = vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL);
    v215.f64[0] = fabs(v212.f64[0]);
    if (v215.f64[0] <= 2.22044605e-16)
    {
      v211.f64[0] = -*(double *)v214.i64;
      v530 = 0u;
      v543 = (float64x2_t)vzip1q_s64((int64x2_t)v211, v213);
    }
    else
    {
      v216.f64[0] = 0.0;
      v216.f64[1] = -v212.f64[0];
      v543 = v216;
      v530 = (float64x2_t)vdupq_laneq_s64(v213, 1);
    }
    *(int8x16_t *)v548 = v214;
    v553 = *(double *)v213.i64;
    v538 = v212;
    if (v215.f64[0] <= 2.22044605e-16)
    {
      v215.f64[0] = -*(double *)v214.i64;
      v532 = 0u;
      v534 = (float64x2_t)vzip1q_s64((int64x2_t)v215, v213);
    }
    else
    {
      v223.f64[0] = 0.0;
      v223.f64[1] = -v212.f64[0];
      v532 = (float64x2_t)vdupq_laneq_s64(v213, 1);
      v534 = v223;
    }
    v565[0] = 0;
    v565[1] = 0;
    v566.i64[0] = 0;
    _ZNSt3__16vectorIDv2_dNS_9allocatorIS1_EEE7reserveEm(v565, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5);
    v418 = *(float64x2_t **)(a1 + 96);
    v419 = *(float64x2_t **)(a1 + 104);
    if (v418 == v419)
    {
      v432 = (char *)v565[1];
    }
    else
    {
      v420 = vmulq_f64(v530, v530);
      v420.f64[0] = 1.0 / sqrt(v420.f64[0] + vaddvq_f64(vmulq_f64(v543, v543)));
      v431 = vmulq_n_f64(v543, v420.f64[0]);
      v421 = vmulq_f64(v530, v420);
      v420.f64[0] = v538.f64[0];
      v422.f64[0] = v553;
      v420.f64[1] = v553;
      *(std::vector<int> **)&v422.f64[1] = v548[0];
      v423 = vmulq_f64(v534, v534);
      v423.f64[0] = 1.0 / sqrt(vmulq_f64(v532, v532).f64[0] + vaddvq_f64(v423));
      v424 = vmulq_n_f64(v534, v423.f64[0]);
      v425 = vmulq_f64(v532, v423);
      v426 = vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v538), v424, 1), v425, *(float64x2_t *)v548);
      v425.f64[1] = v424.f64[0];
      v427 = vmlaq_f64(vmulq_f64(v425, vnegq_f64(v422)), v424, v420);
      v428 = vmulq_f64(v427, v427);
      v424.f64[0] = vmulq_f64(v426, v426).f64[0];
      v426.f64[1] = v427.f64[0];
      v428.f64[0] = 1.0 / sqrt(v428.f64[1] + v424.f64[0] + v428.f64[0]);
      v429 = vmulq_laneq_f64(v428, v427, 1);
      v430 = vmulq_n_f64(v426, v428.f64[0]);
      *(_QWORD *)&v431.f64[1] = vextq_s8((int8x16_t)v431, (int8x16_t)v431, 8uLL).u64[0];
      v432 = (char *)v565[1];
      *(float64x2_t *)v545 = v421;
      *(float64x2_t *)v550 = v431;
      v536 = v430;
      v540 = v429;
      do
      {
        v433 = v418[1];
        *(double *)&v434 = vmulq_f64(v421, v433).f64[0] + vaddvq_f64(vmulq_f64(v431, *v418));
        *((double *)&v434 + 1) = vmulq_f64(v429, v433).f64[0] + vaddvq_f64(vmulq_f64(v430, *v418));
        if ((unint64_t)v432 >= v566.i64[0])
        {
          v435 = (v432 - (char *)v565[0]) >> 4;
          if ((unint64_t)(v435 + 1) >> 60)
            goto LABEL_452;
          v436 = (uint64_t)(v566.i64[0] - (unint64_t)v565[0]) >> 3;
          if (v436 <= v435 + 1)
            v436 = v435 + 1;
          if (v566.i64[0] - (unint64_t)v565[0] >= 0x7FFFFFFFFFFFFFF0)
            v437 = 0xFFFFFFFFFFFFFFFLL;
          else
            v437 = v436;
          if (v437)
          {
            *(_OWORD *)v555 = v434;
            v438 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v566, v437);
            v434 = *(_OWORD *)v555;
          }
          else
          {
            v438 = 0;
          }
          v439 = &v438[16 * v435];
          *(_OWORD *)v439 = v434;
          v432 = v439 + 16;
          v441 = (char *)v565[0];
          v440 = (char *)v565[1];
          if (v565[1] != v565[0])
          {
            do
            {
              v442 = *((_OWORD *)v440 - 1);
              v440 -= 16;
              *((_OWORD *)v439 - 1) = v442;
              v439 -= 16;
            }
            while (v440 != v441);
            v440 = (char *)v565[0];
          }
          v565[0] = v439;
          v565[1] = v432;
          v566.i64[0] = (uint64_t)&v438[16 * v437];
          if (v440)
            operator delete(v440);
          v421 = *(float64x2_t *)v545;
          v431 = *(float64x2_t *)v550;
          v430 = v536;
          v429 = v540;
        }
        else
        {
          *(_OWORD *)v432 = v434;
          v432 += 16;
        }
        v565[1] = v432;
        v418 += 2;
      }
      while (v418 != v419);
    }
    memset(v572, 0, 24);
    geom::convex_hull_2<double>((v432 - (char *)v565[0]) >> 4, (uint64_t)v565[0], (std::vector<int> *)v572);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v445 = *(_DWORD **)&v572[8];
    if (*(_QWORD *)&v572[8] == *(_QWORD *)v572)
    {
      v457 = 0;
      v460 = 0;
      v475 = 0;
      v474 = 0;
      v464 = (uint64_t)(*(_QWORD *)&v572[8] - *(_QWORD *)v572) >> 2;
      v458 = *(_QWORD *)(a1 + 48);
      v452 = 0uLL;
      v453 = 0uLL;
      v449 = 0uLL;
      v476 = v443;
      v450 = 0uLL;
      v454 = v444;
    }
    else
    {
      v446 = 0;
      v537 = 0;
      v533 = 0;
      v447 = 0;
      v448 = 0;
      v449 = 0uLL;
      v450 = 0uLL;
      v451 = 1;
      v452 = 0uLL;
      v453 = 0uLL;
      v454 = v444;
      do
      {
        v541 = v453;
        *(float64x2_t *)v546 = v452;
        *(float64x2_t *)v551 = v450;
        *(float64x2_t *)v556 = v449;
        v457 = v456;
        v458 = *(_QWORD *)(a1 + 48);
        if (v451 == 1)
        {
          v459 = *(_QWORD *)(a1 + 72);
          *(_DWORD *)(v459 + 112 * v443) = v455;
          *(_DWORD *)(v459 + 112 * v444) = v456;
          v533 = v456;
          v537 = v455;
        }
        else
        {
          *(_DWORD *)(v458 + 16 * v447 + 8) = v455;
          *(_DWORD *)(v458 + 16 * v456 + 8) = v448;
        }
        v460 = v455;
        *(_DWORD *)(v458 + 16 * v455) = v443;
        *(_DWORD *)(v458 + 16 * v456) = v444;
        v461 = v458 + 16 * v455;
        *(_DWORD *)(v461 + 4) = v456;
        v462 = v458 + 16 * v456;
        *(_DWORD *)(v462 + 4) = v455;
        v445 = *(_DWORD **)v572;
        *(_DWORD *)(v461 + 12) = *(_DWORD *)(*(_QWORD *)v572 + 4 * v446);
        v463 = v451;
        v464 = (uint64_t)(*(_QWORD *)&v572[8] - (_QWORD)v445) >> 2;
        v465 = v451 % v464;
        *(_DWORD *)(v462 + 12) = v445[v465];
        v466 = *(_QWORD *)(a1 + 96);
        v467 = (float64x2_t *)(v466 + 32 * v445[v446]);
        v468 = *v467;
        v469 = v467[1];
        v450 = vaddq_f64(*(float64x2_t *)v551, v469);
        v470 = (float64x2_t *)(v466 + 32 * v445[v465]);
        v471 = v470[1];
        *(_QWORD *)&v472.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v469), *v470, 1), v471, v468, 1);
        v471.f64[1] = v470->f64[0];
        v449 = vaddq_f64(*(float64x2_t *)v556, v468);
        v469.f64[1] = v468.f64[0];
        v473 = (int64x2_t)vmlaq_f64(vmulq_f64(v471, vnegq_f64(v468)), *v470, v469);
        *(_QWORD *)&v472.f64[1] = v473.i64[0];
        v452 = vaddq_f64(*(float64x2_t *)v546, v472);
        v322 = v464 > v451++;
        v453 = vaddq_f64(v541, (float64x2_t)vdupq_laneq_s64(v473, 1));
        v446 = v463;
        v447 = v455;
        v448 = v457;
      }
      while (v322);
      v474 = v537;
      v475 = v533;
      v476 = v443;
    }
    *(_DWORD *)(v458 + 16 * v475 + 8) = v457;
    *(_DWORD *)(v458 + 16 * v460 + 8) = v474;
    v477 = *(_QWORD *)(a1 + 72) + 112 * v476;
    *(float64x2_t *)(v477 + 16) = v452;
    *(float64x2_t *)(v477 + 32) = v453;
    v478 = (float64x2_t *)(*(_QWORD *)(a1 + 72) + 112 * v454);
    v478[1] = vnegq_f64(v452);
    v478[2] = vnegq_f64(v453);
    v479 = sqrt(vmulq_f64(v453, v453).f64[0] + vaddvq_f64(vmulq_f64(v452, v452)));
    v480 = *(_QWORD *)(a1 + 72);
    v481 = v480 + 112 * v454;
    *(double *)(v481 + 48) = v479;
    v482 = v480 + 112 * v476;
    *(double *)(v482 + 48) = v479;
    *(_BYTE *)(v481 + 56) = v479 <= 2.22044605e-16;
    *(_BYTE *)(v482 + 56) = v479 <= 2.22044605e-16;
    *(float64x2_t *)(v482 + 64) = v449;
    *(float64x2_t *)(v482 + 80) = v450;
    v483 = *(_QWORD *)(a1 + 72) + 112 * v454;
    *(float64x2_t *)(v483 + 64) = v449;
    *(float64x2_t *)(v483 + 80) = v450;
    v484 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(v484 + 112 * v454 + 96) = v464;
    *(_DWORD *)(v484 + 112 * v476 + 96) = v464;
    if (v445)
    {
      *(_QWORD *)&v572[8] = v445;
      operator delete(v445);
    }
    v485 = v565[0];
    if (!v565[0])
      return 0.0;
    v565[1] = v565[0];
LABEL_449:
    operator delete(v485);
    return 0.0;
  }
  if (v202 == 3)
  {
    memset(v572, 0, 24);
    v570 = 0uLL;
    v571.f64[0] = 0.0;
    v203 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v571, 1uLL);
    v205 = v570.f64[1];
    v204 = v570.f64[0];
    v207 = &v203[v206];
    *v203 = 0;
    v208 = v203 + 1;
    while (*(_QWORD *)&v205 != *(_QWORD *)&v204)
    {
      v209 = *(_DWORD *)(*(_QWORD *)&v205 - 4);
      *(_QWORD *)&v205 -= 4;
      *--v203 = v209;
    }
    *(_QWORD *)&v570.f64[0] = v203;
    *(_QWORD *)&v570.f64[1] = v208;
    *(_QWORD *)&v571.f64[0] = v207;
    if (v204 != 0.0)
      operator delete(*(void **)&v204);
    *(_QWORD *)&v570.f64[1] = v208;
    v219 = *(_QWORD *)(a1 + 72);
    v221 = *(_DWORD **)&v572[8];
    v220 = *(char **)&v572[16];
    if (*(_QWORD *)&v572[8] >= *(_QWORD *)&v572[16])
    {
      v412 = *(_DWORD **)v572;
      v413 = (uint64_t)(*(_QWORD *)&v572[8] - *(_QWORD *)v572) >> 2;
      v414 = v413 + 1;
      if ((unint64_t)(v413 + 1) >> 62)
        goto LABEL_452;
      v415 = *(_QWORD *)&v572[16] - *(_QWORD *)v572;
      if ((uint64_t)(*(_QWORD *)&v572[16] - *(_QWORD *)v572) >> 1 > v414)
        v414 = v415 >> 1;
      if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFFCLL)
        v416 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v416 = v414;
      if (v416)
      {
        v417 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v572[16], v416);
        v221 = *(_DWORD **)&v572[8];
        v412 = *(_DWORD **)v572;
      }
      else
      {
        v417 = 0;
      }
      v486 = &v417[4 * v413];
      v220 = &v417[4 * v416];
      *(_DWORD *)v486 = *(_DWORD *)(v219 + 112);
      v222 = (unsigned int *)(v486 + 4);
      while (v221 != v412)
      {
        v487 = *--v221;
        *((_DWORD *)v486 - 1) = v487;
        v486 -= 4;
      }
      *(_QWORD *)v572 = v486;
      *(_QWORD *)&v572[8] = v222;
      *(_QWORD *)&v572[16] = v220;
      if (v412)
      {
        operator delete(v412);
        v220 = *(char **)&v572[16];
      }
    }
    else
    {
      **(_DWORD **)&v572[8] = *(_DWORD *)(v219 + 112);
      v222 = v221 + 1;
    }
    *(_QWORD *)&v572[8] = v222;
    v488 = *(unsigned int **)v572;
    v489 = (unsigned int *)(*(_QWORD *)(a1 + 48) + 16 * **(_DWORD **)v572 + 8);
    if (v222 >= (unsigned int *)v220)
    {
      v491 = ((uint64_t)v222 - *(_QWORD *)v572) >> 2;
      v492 = v491 + 1;
      if ((unint64_t)(v491 + 1) >> 62)
        goto LABEL_452;
      v493 = (uint64_t)&v220[-*(_QWORD *)v572];
      if (v493 >> 1 > v492)
        v492 = v493 >> 1;
      if ((unint64_t)v493 >= 0x7FFFFFFFFFFFFFFCLL)
        v494 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v494 = v492;
      if (v494)
      {
        v495 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v572[16], v494);
        v222 = *(unsigned int **)&v572[8];
        v488 = *(unsigned int **)v572;
      }
      else
      {
        v495 = 0;
      }
      v496 = (unsigned int *)&v495[4 * v491];
      v220 = &v495[4 * v494];
      *v496 = *v489;
      v490 = (char *)(v496 + 1);
      while (v222 != v488)
      {
        v497 = *--v222;
        *--v496 = v497;
      }
      *(_QWORD *)v572 = v496;
      *(_QWORD *)&v572[8] = v490;
      *(_QWORD *)&v572[16] = v220;
      if (v488)
      {
        operator delete(v488);
        v488 = *(unsigned int **)v572;
        v220 = *(char **)&v572[16];
      }
      else
      {
        v488 = v496;
      }
    }
    else
    {
      *v222 = *v489;
      v490 = (char *)(v222 + 1);
    }
    *(_QWORD *)&v572[8] = v490;
    v498 = (unsigned int *)(*(_QWORD *)(a1 + 48) + 16 * v488[1] + 8);
    if (v490 >= v220)
    {
      v500 = (v490 - (char *)v488) >> 2;
      v501 = v500 + 1;
      if ((unint64_t)(v500 + 1) >> 62)
        goto LABEL_452;
      v502 = v220 - (char *)v488;
      if (v502 >> 1 > v501)
        v501 = v502 >> 1;
      if ((unint64_t)v502 >= 0x7FFFFFFFFFFFFFFCLL)
        v503 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v503 = v501;
      if (v503)
      {
        v504 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v572[16], v503);
        v490 = *(char **)&v572[8];
        v488 = *(unsigned int **)v572;
      }
      else
      {
        v504 = 0;
      }
      v505 = (unsigned int *)&v504[4 * v500];
      v506 = &v504[4 * v503];
      *v505 = *v498;
      v499 = v505 + 1;
      while (v490 != (char *)v488)
      {
        v507 = *((_DWORD *)v490 - 1);
        v490 -= 4;
        *--v505 = v507;
      }
      *(_QWORD *)v572 = v505;
      *(_QWORD *)&v572[8] = v499;
      *(_QWORD *)&v572[16] = v506;
      if (v488)
      {
        operator delete(v488);
        v488 = *(unsigned int **)v572;
      }
      else
      {
        v488 = v505;
      }
    }
    else
    {
      *(_DWORD *)v490 = *v498;
      v499 = (unsigned int *)(v490 + 4);
    }
    *(_QWORD *)&v572[8] = v499;
    v508 = v499 - 1;
    if (v488 != v499 && v508 > v488)
    {
      v510 = v488 + 1;
      do
      {
        v511 = *(v510 - 1);
        *(v510 - 1) = *v508;
        *v508-- = v511;
      }
      while (v510++ < v508);
    }
    v512 = *(_QWORD *)(a1 + 272);
    v513 = (*(_QWORD *)(a1 + 280) - v512) >> 3;
    if (*(_QWORD *)(a1 + 280) == v512)
    {
LABEL_437:
      v515 = -1;
    }
    else
    {
      v514 = 0;
      v515 = 0;
      while (*(_DWORD *)(v512 + 8 * v514) == -1)
      {
        v514 = ++v515;
        if (v513 <= v515)
          goto LABEL_437;
      }
    }
    v322 = v513 > v515;
    v516 = -1;
    if (v322)
      v516 = *(_DWORD *)(v512 + 8 * v515);
    LODWORD(v562.__begin_) = v516;
    *(_DWORD *)(*(_QWORD *)(a1 + 72) + 100) = -1;
    LODWORD(v565[0]) = 0;
    v565[1] = 0;
    v566 = 0uLL;
    v567.i64[0] = 0x3FE0000000000000;
    LODWORD(v565[0]) = 0;
    memset(&__p, 0, sizeof(__p));
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v565[1])
    {
      v566.i64[0] = (uint64_t)v565[1];
      operator delete(v565[1]);
    }
    if (*(_QWORD *)&v570.f64[0])
    {
      v570.f64[1] = v570.f64[0];
      operator delete(*(void **)&v570.f64[0]);
    }
    v485 = *(void **)v572;
    if (!*(_QWORD *)v572)
      return 0.0;
    *(_QWORD *)&v572[8] = *(_QWORD *)v572;
    goto LABEL_449;
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v562, 0, sizeof(v562));
  LODWORD(v565[0]) = 0;
  v565[1] = 0;
  v566 = 0uLL;
  v567.i64[0] = 0x3FE0000000000000;
  LODWORD(v565[0]) = 0;
  memset(&v560, 0, sizeof(v560));
  v557 = 0;
  v558 = 0;
  v559 = 0;
  __p.__end_ = __p.__begin_;
  v562.__end_ = v562.__begin_;
  v218 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 152) - v218 != 24)
  {
    v544 = (std::vector<int> *)(a1 + 368);
    v539 = (int **)(a1 + 384);
    v554 = (geom::_anonymous_namespace_::integer_hashset *)(a1 + 504);
    v549 = (std::vector<int> *)(a1 + 512);
    v535 = (void **)(a1 + 392);
    v531 = a1 + 408;
    v522 = 3;
    v519 = (uint64_t *)(a1 + 120);
    v520 = (geom::partitioned_set *)(a1 + 200);
    v518 = (std::vector<int> *)(a1 + 144);
    while (1)
    {
      v224 = *(_DWORD *)(v218 + 24);
      v225 = *(unsigned int *)(v218 + 32);
      v561 = v225;
      v226 = (_OWORD *)(*(_QWORD *)(a1 + 96) + 32 * v225);
      v227 = v226[1];
      *(_OWORD *)v572 = *v226;
      *(_OWORD *)&v572[16] = v227;
      v228 = *(_QWORD *)(a1 + 72) + 112 * v224;
      v217.f64[0] = *(float64_t *)(v228 + 48);
      v229 = vdivq_f64(*(float64x2_t *)(v228 + 32), v217);
      v570 = vdivq_f64(*(float64x2_t *)(v228 + 16), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v217.f64[0], 0));
      v571 = v229;
      v230 = operator new(0x20uLL);
      *v230 = &off_24F148590;
      v230[1] = a1;
      v230[2] = v572;
      v230[3] = &v570;
      v231 = *(_DWORD **)(a1 + 368);
      *(_QWORD *)(a1 + 376) = v231;
      v232 = *(_QWORD *)(a1 + 384);
      if ((unint64_t)v231 >= v232)
      {
        v234 = v232 - (_QWORD)v231;
        v235 = v234 >> 1;
        if ((unint64_t)(v234 >> 1) <= 1)
          v235 = 1;
        if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFFCLL)
          v236 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v236 = v235;
        v238 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v539, v236);
        v239 = *(char **)(a1 + 368);
        v240 = *(char **)(a1 + 376);
        *v238 = *(_DWORD *)v228;
        v233 = v238 + 1;
        v241 = v238;
        while (v240 != v239)
        {
          v242 = *((_DWORD *)v240 - 1);
          v240 -= 4;
          *--v241 = v242;
        }
        *(_QWORD *)(a1 + 368) = v241;
        *(_QWORD *)(a1 + 376) = v233;
        *(_QWORD *)(a1 + 384) = &v238[v237];
        if (v239)
          operator delete(v239);
      }
      else
      {
        *v231 = *(_DWORD *)v228;
        v233 = v231 + 1;
      }
      *(_QWORD *)(a1 + 376) = v233;
      v243 = *(_DWORD **)(a1 + 368);
      while (2)
      {
        if (v243 != v233)
        {
          v244 = *(v233 - 1);
          v245 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 16 * v244);
          *(_QWORD *)(a1 + 376) = v233 - 1;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 472)
                         + 4
          end = v562.__end_;
          if (v562.__end_ < v562.__end_cap_.__value_)
          {
            *v562.__end_ = v245;
            v247 = end + 1;
            goto LABEL_151;
          }
          v248 = v562.__begin_;
          v249 = v562.__end_ - v562.__begin_;
          v250 = v249 + 1;
          if (!((unint64_t)(v249 + 1) >> 62))
          {
            v251 = (char *)v562.__end_cap_.__value_ - (char *)v562.__begin_;
            if (((char *)v562.__end_cap_.__value_ - (char *)v562.__begin_) >> 1 > v250)
              v250 = v251 >> 1;
            if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
              v252 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v252 = v250;
            if (v252)
            {
              v253 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v562.__end_cap_, v252);
              v248 = v562.__begin_;
              end = v562.__end_;
            }
            else
            {
              v253 = 0;
            }
            v254 = (unsigned int *)&v253[4 * v249];
            *v254 = v245;
            v247 = v254 + 1;
            while (end != v248)
            {
              v255 = *--end;
              *--v254 = v255;
            }
            v562.__begin_ = v254;
            v562.__end_ = v247;
            v562.__end_cap_.__value_ = (unsigned int *)&v253[4 * v252];
            if (v248)
              operator delete(v248);
LABEL_151:
            v562.__end_ = v247;
LABEL_152:
            v256 = v244;
LABEL_153:
            v257 = *(_QWORD *)(a1 + 48);
            v258 = v257 + 16 * v256;
            v259 = (unsigned int *)(v258 + 4);
            v260 = *(_DWORD *)(v257 + 16 * *(unsigned int *)(v258 + 4));
            if (*(_DWORD *)(*(_QWORD *)(a1 + 472)
                           + 4
            {
LABEL_199:
              v291 = 0;
              v256 = *(unsigned int *)(v258 + 8);
            }
            else
            {
              v564 = v260;
              v261 = (*(uint64_t (**)(_QWORD *, int *))(*v230 + 48))(v230, &v564);
              if ((v261 & 1) != 0)
              {
                v263 = *(std::vector<int>::pointer *)(a1 + 376);
                v262 = *(int **)(a1 + 384);
                if (v263 >= v262)
                {
                  v268 = v544->__begin_;
                  v269 = v263 - v544->__begin_;
                  v270 = v269 + 1;
                  if ((unint64_t)(v269 + 1) >> 62)
                    goto LABEL_452;
                  v271 = (char *)v262 - (char *)v268;
                  if (v271 >> 1 > v270)
                    v270 = v271 >> 1;
                  if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFFCLL)
                    v272 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v272 = v270;
                  if (v272)
                  {
                    v273 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v539, v272);
                    v268 = *(std::vector<int>::pointer *)(a1 + 368);
                    v263 = *(std::vector<int>::pointer *)(a1 + 376);
                  }
                  else
                  {
                    v273 = 0;
                  }
                  v280 = &v273[4 * v269];
                  *(_DWORD *)v280 = v256;
                  v264 = (unsigned int *)(v280 + 4);
                  while (v263 != v268)
                  {
                    v281 = *--v263;
                    *((_DWORD *)v280 - 1) = v281;
                    v280 -= 4;
                  }
                  v262 = (int *)&v273[4 * v272];
                  *(_QWORD *)(a1 + 368) = v280;
                  *(_QWORD *)(a1 + 376) = v264;
                  *(_QWORD *)(a1 + 384) = v262;
                  if (v268)
                  {
                    operator delete(v268);
                    v262 = *v539;
                  }
                }
                else
                {
                  *v263 = v256;
                  v264 = (unsigned int *)(v263 + 1);
                }
                *(_QWORD *)(a1 + 376) = v264;
                if (v264 >= (unsigned int *)v262)
                {
                  v283 = v544->__begin_;
                  v284 = ((char *)v264 - (char *)v544->__begin_) >> 2;
                  v285 = v284 + 1;
                  if ((unint64_t)(v284 + 1) >> 62)
                    goto LABEL_452;
                  v286 = (char *)v262 - (char *)v283;
                  if (v286 >> 1 > v285)
                    v285 = v286 >> 1;
                  if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFFCLL)
                    v287 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v287 = v285;
                  if (v287)
                  {
                    v288 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v539, v287);
                    v283 = *(std::vector<int>::pointer *)(a1 + 368);
                    v264 = *(unsigned int **)(a1 + 376);
                  }
                  else
                  {
                    v288 = 0;
                  }
                  v289 = (unsigned int *)&v288[4 * v284];
                  *v289 = *v259;
                  v282 = v289 + 1;
                  while (v264 != (unsigned int *)v283)
                  {
                    v290 = *--v264;
                    *--v289 = v290;
                  }
                  *(_QWORD *)(a1 + 368) = v289;
                  *(_QWORD *)(a1 + 376) = v282;
                  *(_QWORD *)(a1 + 384) = &v288[4 * v287];
                  if (v283)
                    operator delete(v283);
                }
                else
                {
                  *v264 = *v259;
                  v282 = v264 + 1;
                }
                *(_QWORD *)(a1 + 376) = v282;
                v291 = 4;
                if ((v261 & 1) == 0)
                  goto LABEL_199;
              }
              else
              {
                v265 = *v259;
                  goto LABEL_199;
                v266 = __p.__end_;
                if (__p.__end_ >= __p.__end_cap_.__value_)
                {
                  v274 = __p.__begin_;
                  v275 = __p.__end_ - __p.__begin_;
                  v276 = v275 + 1;
                  if ((unint64_t)(v275 + 1) >> 62)
                    goto LABEL_452;
                  v277 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                  if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v276)
                    v276 = v277 >> 1;
                  if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFFCLL)
                    v278 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v278 = v276;
                  if (v278)
                  {
                    v279 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v278);
                    v274 = __p.__begin_;
                    v266 = __p.__end_;
                    v265 = *v259;
                  }
                  else
                  {
                    v279 = 0;
                  }
                  v292 = (int *)&v279[4 * v275];
                  *v292 = v265;
                  v267 = v292 + 1;
                  while (v266 != v274)
                  {
                    v293 = *--v266;
                    *--v292 = v293;
                  }
                  __p.__begin_ = v292;
                  __p.__end_ = v267;
                  __p.__end_cap_.__value_ = (int *)&v279[4 * v278];
                  if (v274)
                    operator delete(v274);
                }
                else
                {
                  *__p.__end_ = v265;
                  v267 = v266 + 1;
                }
                __p.__end_ = v267;
                v291 = 0;
                if ((v261 & 1) == 0)
                  goto LABEL_199;
              }
            }
            if (v291 || v256 == v244)
            {
              v243 = *(_DWORD **)(a1 + 368);
              v233 = *(_DWORD **)(a1 + 376);
              continue;
            }
            goto LABEL_153;
          }
LABEL_452:
          abort();
        }
        break;
      }
      *(_DWORD *)(a1 + 464) = 0;
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
      *(_DWORD *)(a1 + 504) = 0;
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a1 + 512);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a1 + 368);
      (*(void (**)(_QWORD *))(*v230 + 40))(v230);
      if (v522 >= a2)
        goto LABEL_329;
      v294 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 80) - v294) >> 4)
                            - ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2)) < 3
        || (v295 = __p.__begin_, __p.__begin_ == __p.__end_))
      {
LABEL_223:
        v323 = (char *)v557;
        v558 = (char *)v557;
        v324 = v562.__begin_;
        v325 = v562.__end_;
        while (v324 != v325)
        {
          v326 = v294 + 112 * *v324;
          v329 = *(_DWORD *)(v326 + 100);
          v328 = (int *)(v326 + 100);
          v327 = v329;
          if (v329 != -1)
          {
            if (v323 >= v559)
            {
              v331 = (char *)v557;
              v332 = (v323 - (_BYTE *)v557) >> 2;
              v333 = v332 + 1;
              if ((unint64_t)(v332 + 1) >> 62)
                goto LABEL_452;
              v334 = v559 - (_BYTE *)v557;
              if ((v559 - (_BYTE *)v557) >> 1 > v333)
                v333 = v334 >> 1;
              if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFFCLL)
                v335 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v335 = v333;
              if (v335)
              {
                v336 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v559, v335);
                v331 = (char *)v557;
                v323 = v558;
                v327 = *v328;
              }
              else
              {
                v336 = 0;
              }
              v337 = &v336[4 * v332];
              *(_DWORD *)v337 = v327;
              v330 = v337 + 4;
              while (v323 != v331)
              {
                v338 = *((_DWORD *)v323 - 1);
                v323 -= 4;
                *((_DWORD *)v337 - 1) = v338;
                v337 -= 4;
              }
              v557 = v337;
              v558 = v330;
              v559 = &v336[4 * v335];
              if (v331)
                operator delete(v331);
            }
            else
            {
              *(_DWORD *)v323 = v327;
              v330 = v323 + 4;
            }
            v558 = v330;
            v294 = *(_QWORD *)(a1 + 72);
            *(_DWORD *)(v294 + 112 * *v324 + 100) = -1;
            v323 = v330;
          }
          ++v324;
        }
        LODWORD(v565[0]) = 0;
        v566.i64[0] = (uint64_t)v565[1];
        v339 = __p.__begin_;
        v340 = __p.__end_;
        while (v339 != v340)
        {
          v341 = *v339;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 16 * v341) != -1)
          ++v339;
        }
        v342 = v560.__begin_;
        v343 = v560.__end_;
        while (v342 != v343)
        {
          v344 = *v342;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 16 * v344) != -1)
          ++v342;
        }
        v564 = 0;
        v564 = geom::partitioned_set::merge(v520, (unsigned int *)v557, (v558 - (_BYTE *)v557) >> 2);
        v562.__end_ = v562.__begin_;
        _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)v535, 0);
        _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(v535, ((char *)v562.__end_ - (char *)v562.__begin_) >> 1);
        v346 = v562.__begin_;
        if (v562.__end_ == v562.__begin_)
        {
          v382 = 0;
        }
        else
        {
          v347 = 0;
          v348 = 0;
          v349 = *(float64x2_t **)(a1 + 400);
          do
          {
            v350 = v346[v347];
            v351 = *(_QWORD *)(a1 + 72);
            v352 = v351 + 112 * v350;
            LODWORD(v345.f64[0]) = *(_DWORD *)(v352 + 96);
            v345.f64[0] = (double)*(unint64_t *)&v345.f64[0];
            v353 = vdivq_f64(*(float64x2_t *)(v352 + 80), v345);
            v354 = vdivq_f64(*(float64x2_t *)(v352 + 64), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v345.f64[0], 0));
            v355 = vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
            v356 = *(_QWORD *)(a1 + 408);
            if ((unint64_t)v349 >= v356)
            {
              v358 = ((char *)v349 - (_BYTE *)*v535) >> 5;
              if ((unint64_t)(v358 + 1) >> 59)
                goto LABEL_452;
              v359 = v356 - (_QWORD)*v535;
              v360 = v359 >> 4;
              if (v359 >> 4 <= (unint64_t)(v358 + 1))
                v360 = v358 + 1;
              if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFE0)
                v361 = 0x7FFFFFFFFFFFFFFLL;
              else
                v361 = v360;
              if (v361)
              {
                v526 = v353;
                v528 = v354.f64[0];
                v524 = v355;
                v362 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v531, v361);
                v355 = v524;
                v353 = v526;
                v354.f64[0] = v528;
              }
              else
              {
                v362 = 0;
              }
              *(_QWORD *)&v354.f64[1] = v355;
              v363 = (float64x2_t *)&v362[32 * v358];
              *v363 = v354;
              v363[1] = v353;
              v365 = *(float64x2_t **)(a1 + 392);
              v364 = *(float64x2_t **)(a1 + 400);
              v366 = v363;
              if (v364 != v365)
              {
                do
                {
                  v354 = v364[-2];
                  v367 = v364[-1];
                  v364 -= 2;
                  v366[-2] = v354;
                  v366[-1] = v367;
                  v366 -= 2;
                }
                while (v364 != v365);
                v364 = (float64x2_t *)*v535;
              }
              v357 = v363 + 2;
              *(_QWORD *)(a1 + 392) = v366;
              *(_QWORD *)(a1 + 400) = v363 + 2;
              *(_QWORD *)(a1 + 408) = &v362[32 * v361];
              if (v364)
                operator delete(v364);
            }
            else
            {
              *(_QWORD *)&v354.f64[1] = v355;
              *v349 = v354;
              v349[1] = v353;
              v357 = v349 + 2;
            }
            *(_QWORD *)(a1 + 400) = v357;
            v368 = (float64x2_t *)(v351 + 112 * v350);
            v354.f64[0] = v368[3].f64[0];
            v369 = vdivq_f64(v368[2], v354);
            v345 = vdivq_f64(v368[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v354.f64[0], 0));
            v370 = vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
            v371 = *(_QWORD *)(a1 + 408);
            if ((unint64_t)v357 >= v371)
            {
              v372 = ((char *)v357 - (_BYTE *)*v535) >> 5;
              if ((unint64_t)(v372 + 1) >> 59)
                goto LABEL_452;
              v373 = v371 - (_QWORD)*v535;
              v374 = v373 >> 4;
              if (v373 >> 4 <= (unint64_t)(v372 + 1))
                v374 = v372 + 1;
              if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFE0)
                v375 = 0x7FFFFFFFFFFFFFFLL;
              else
                v375 = v374;
              if (v375)
              {
                v527 = v369;
                v529 = v345.f64[0];
                v525 = v370;
                v376 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v531, v375);
                v370 = v525;
                v369 = v527;
                v345.f64[0] = v529;
              }
              else
              {
                v376 = 0;
              }
              *(_QWORD *)&v345.f64[1] = v370;
              v377 = (float64x2_t *)&v376[32 * v372];
              *v377 = v345;
              v377[1] = v369;
              v379 = *(float64x2_t **)(a1 + 392);
              v378 = *(float64x2_t **)(a1 + 400);
              v380 = v377;
              if (v378 != v379)
              {
                do
                {
                  v345 = v378[-2];
                  v381 = v378[-1];
                  v378 -= 2;
                  v380[-2] = v345;
                  v380[-1] = v381;
                  v380 -= 2;
                }
                while (v378 != v379);
                v378 = (float64x2_t *)*v535;
              }
              v349 = v377 + 2;
              *(_QWORD *)(a1 + 392) = v380;
              *(_QWORD *)(a1 + 400) = v377 + 2;
              *(_QWORD *)(a1 + 408) = &v376[32 * v375];
              if (v378)
                operator delete(v378);
            }
            else
            {
              *(_QWORD *)&v345.f64[1] = v370;
              *v357 = v345;
              v357[1] = v369;
              v349 = v357 + 2;
            }
            *(_QWORD *)(a1 + 400) = v349;
            v346 = v562.__begin_;
            v347 = ++v348;
          }
          while (v348 < (unint64_t)(v562.__end_ - v562.__begin_));
          v382 = ((char *)v562.__end_ - (char *)v562.__begin_) << 30;
        }
        v383 = v561;
        v384 = *(_DWORD *)(a1 + 356);
        if (v384 == -1)
          *(_DWORD *)(a1 + 356) = geom::partitioned_set::extract(v520, v561);
        else
          geom::partitioned_set::extract(v520, v561, v384);
        *(_QWORD *)v572 = &off_24F148610;
        *(_QWORD *)&v572[8] = a1;
        *(_QWORD *)&v572[16] = v382 | v383;
        *(_QWORD *)&v572[24] = v572;
        geom::partitioned_set::split((uint64_t *)v520, &v564, ((unint64_t)((char *)v562.__end_ - (char *)v562.__begin_) >> 2) + 1, v544, (uint64_t)v572);
        v385 = *(_QWORD **)&v572[24];
        if (*(_BYTE **)&v572[24] == v572)
        {
          v385 = v572;
          v386 = 4;
LABEL_298:
          (*(void (**)(void))(*v385 + 8 * v386))();
        }
        else if (*(_QWORD *)&v572[24])
        {
          v386 = 5;
          goto LABEL_298;
        }
        v387 = v562.__begin_;
        if (v562.__end_ != v562.__begin_)
        {
          v388 = 0;
          v389 = v562.__end_ - v562.__begin_;
          v390 = *(_QWORD *)(a1 + 72);
          v391 = *(_QWORD *)(a1 + 368);
          do
          {
            *(_DWORD *)(v390 + 112 * v387[v388] + 100) = *(_DWORD *)(v391 + 4 * v388);
            ++v388;
          }
          while (v389 > v388);
        }
        LODWORD(v570.f64[0]) = *(_DWORD *)(a1 + 356);
        HIDWORD(v570.f64[0]) = *(_DWORD *)(*(_QWORD *)(a1 + 376) - 4);
        v392 = geom::partitioned_set::merge(v520, (unsigned int *)&v570, 2);
        *(_DWORD *)(*(_QWORD *)(a1 + 376) - 4) = v392;
        *(_DWORD *)(a1 + 356) = v392;
        v394 = v562.__begin_;
        v393 = v562.__end_;
        while (v394 != v393)
        {
          v395 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 112 * *v394 + 100);
          v396 = *(_QWORD *)(a1 + 272);
          if (v395 < (*(_QWORD *)(a1 + 280) - v396) >> 3)
          {
            v397 = *(_DWORD *)(v396 + 8 * v395);
            if (v397 != -1)
            {
              v398 = *(double *)(a1 + 544);
              v399 = *v519;
              v400 = -1;
              do
              {
                if (*(double *)(v399 + 8 * v397) > v398)
                {
                  v400 = v397;
                  v398 = *(double *)(v399 + 8 * v397);
                }
                v397 = *(_DWORD *)(*(_QWORD *)v520 + 4 * v397);
              }
              while (v397 != -1);
              if (v400 != -1)
              {
                *(_DWORD *)v572 = v400;
                *(_QWORD *)&v572[8] = *(_QWORD *)(v399 + 8 * v400);
              }
            }
          }
          ++v394;
        }
        goto LABEL_328;
      }
      v296 = *(_QWORD *)(a1 + 48);
      v297 = *(_QWORD *)(a1 + 96);
      v298 = (float64x2_t *)(v297 + 32 * v561);
      v299 = *v298;
      v300 = v298[1];
      v301 = (float64x2_t)vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL);
      v302.i64[0] = *(_QWORD *)&v298[1].f64[0];
      v302.i64[1] = *(_QWORD *)&v298->f64[0];
      v303 = vextq_s8(v302, v302, 8uLL).u64[0];
      v304 = vnegq_f64(v300);
      v305 = (int8x16_t)vnegq_f64(*v298);
      v306 = vextq_s8(v305, v305, 8uLL).u64[0];
      while (1)
      {
        v307 = v296 + 16 * *v295;
        v308 = *(unsigned int *)(v307 + 8);
        v309 = (float64x2_t *)(v297 + 32 * *(unsigned int *)(v307 + 12));
        v310 = (float64x2_t *)(v297 + 32 * *(unsigned int *)(v296 + 16 * v308 + 12));
        v311 = v310[1];
        v312 = v309[1];
        v313.f64[0] = v310[1].f64[0];
        v313.f64[1] = v310->f64[0];
        v314.f64[0] = v309[1].f64[0];
        v314.f64[1] = v309->f64[0];
        *(_QWORD *)&v315.f64[0] = v302.i64[0];
        *(_QWORD *)&v315.f64[1] = v303;
        v316.f64[0] = v299.f64[0];
        v316.f64[1] = v301.f64[0];
        *(_QWORD *)&v317.f64[0] = v305.i64[0];
        *(_QWORD *)&v317.f64[1] = v306;
        v318 = vaddq_f64(vmlaq_f64(vmulq_f64(v313, v317), *v310, v315), vaddq_f64(vmlaq_f64(vmulq_f64(v314, vnegq_f64(*v310)), *v309, v313), vmlaq_f64(vmulq_f64(v315, vnegq_f64(*v309)), v316, v314)));
        v319 = vaddq_f64(vmlaq_f64(vmulq_laneq_f64(v304, *v310, 1), v311, v301), vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v311), *v309, 1), v312, *v310, 1), vmlaq_laneq_f64(vmulq_f64(v301, vnegq_f64(v312)), v300, *v309, 1)));
        v320 = vmulq_f64(v318, v318);
        v320.f64[0] = sqrt(v320.f64[1] + vmulq_f64(v319, v319).f64[0] + v320.f64[0]);
        if (v320.f64[0] > 2.22044605e-16)
        {
          v319.f64[1] = v318.f64[0];
          v321 = vmulq_f64(vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v318, (int8x16_t)v318, 8uLL), v320), vsubq_f64(vdivq_f64(vaddq_f64(v300, vaddq_f64(v311, v312)), v523), *(float64x2_t *)(a1 + 336))).f64[0]+ vaddvq_f64(vmulq_f64(vdivq_f64(v319, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v320.f64[0], 0)), vsubq_f64(vdivq_f64(vaddq_f64(v299, vaddq_f64(*v310, *v309)), v523), *(float64x2_t *)(a1 + 320))));
          v322 = v321 == 0.0 || 0.0 - *(double *)(a1 + 544) < v321;
          if (!v322)
            break;
        }
        if (++v295 == __p.__end_)
          goto LABEL_223;
      }
      v401 = (_DWORD *)(v294 + 112 * *v562.__begin_ + 100);
      v402 = *(_DWORD *)(a1 + 360);
      if (v402 == -1)
      {
        v405 = geom::partitioned_set::extract(v520, v561);
        *(_DWORD *)(a1 + 360) = v405;
        LODWORD(v403) = *v401;
        if (*v401 == v405)
          goto LABEL_318;
      }
      else
      {
        geom::partitioned_set::extract(v520, v561, v402);
        v403 = *v401;
        v404 = *(_QWORD *)(a1 + 272);
        if (v403 >= (*(_QWORD *)(a1 + 280) - v404) >> 3 || *(_DWORD *)(v404 + 8 * v403) == -1)
        {
LABEL_318:
          LODWORD(v403) = -1;
          *v401 = -1;
        }
      }
      v406 = *(_QWORD *)(a1 + 272);
      if (v403 >= (unint64_t)((*(_QWORD *)(a1 + 280) - v406) >> 3)
        || (v407 = *(_DWORD *)(v406 + 8 * v403), v407 == -1))
      {
      }
      else
      {
        v408 = *(double *)(a1 + 544);
        v409 = -1;
        do
        {
          if (*(double *)(*v519 + 8 * v407) > v408)
          {
            v409 = v407;
            v408 = *(double *)(*v519 + 8 * v407);
          }
          v407 = *(_DWORD *)(*(_QWORD *)v520 + 4 * v407);
        }
        while (v407 != -1);
        if (v409 != -1)
        {
          *(_DWORD *)v572 = v409;
          *(_QWORD *)&v572[8] = *(_QWORD *)(*v519 + 8 * v409);
        }
      }
LABEL_328:
      ++v522;
      __p.__end_ = __p.__begin_;
      v562.__end_ = v562.__begin_;
      v218 = *(_QWORD *)(a1 + 144);
      if (*(_QWORD *)(a1 + 152) - v218 == 24)
        goto LABEL_329;
    }
  }
  v522 = 3;
LABEL_329:
  v410 = 0.0;
  if (v522 == a2)
  {
    v411 = *(_QWORD *)(a1 + 144);
    v410 = -1.0;
    if (*(_QWORD *)(a1 + 152) - v411 != 24)
      v410 = *(double *)(v411 + 40);
  }
  if (v557)
  {
    v558 = (char *)v557;
    operator delete(v557);
  }
  if (v560.__begin_)
  {
    v560.__end_ = v560.__begin_;
    operator delete(v560.__begin_);
  }
  if (v565[1])
  {
    v566.i64[0] = (uint64_t)v565[1];
    operator delete(v565[1]);
  }
  if (v562.__begin_)
  {
    v562.__end_ = v562.__begin_;
    operator delete(v562.__begin_);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return v410;
}

uint64_t geom::`anonymous namespace'::hull_mesh<double>::~hull_mesh(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v2 = *(void **)(a1 + 512);
  if (v2)
  {
    *(_QWORD *)(a1 + 520) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 472);
  if (v3)
  {
    *(_QWORD *)(a1 + 480) = v3;
    operator delete(v3);
  }
  std::deque<unsigned int>::~deque[abi:nn180100]((_QWORD *)(a1 + 416));
  v4 = *(void **)(a1 + 392);
  if (v4)
  {
    *(_QWORD *)(a1 + 400) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 368);
  if (v5)
  {
    *(_QWORD *)(a1 + 376) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 296);
  if (v6)
  {
    *(_QWORD *)(a1 + 304) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(_QWORD *)(a1 + 280) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 248);
  if (v8)
  {
    *(_QWORD *)(a1 + 256) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 224);
  if (v9)
  {
    *(_QWORD *)(a1 + 232) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 200);
  if (v10)
  {
    *(_QWORD *)(a1 + 208) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 168);
  if (v11)
  {
    *(_QWORD *)(a1 + 176) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 144);
  if (v12)
  {
    *(_QWORD *)(a1 + 152) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 120);
  if (v13)
  {
    *(_QWORD *)(a1 + 128) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 96);
  if (v14)
  {
    *(_QWORD *)(a1 + 104) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 72);
  if (v15)
  {
    *(_QWORD *)(a1 + 80) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 48);
  if (v16)
  {
    *(_QWORD *)(a1 + 56) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 24);
  if (v17)
  {
    *(_QWORD *)(a1 + 32) = v17;
    operator delete(v17);
  }
  v18 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v18;
    operator delete(v18);
  }
  return a1;
}

uint64_t geom::half_plane_intersection_3<float>(unint64_t a1, float32x4_t *a2, char **a3, unint64_t *a4, char **a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  float32x4_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  __int32 v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  __int32 v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  int8x16_t v56;
  float32x2_t v57;
  int8x8_t v58;
  unint64_t v59;
  unint64_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  int8x16_t *v68;
  char *v69;
  char *v70;
  int8x16_t v71;
  char **v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  _DWORD *v106;
  unint64_t v108;
  int v109;
  BOOL v110;
  int *v111;
  int *v112;
  int *v113;
  int *v115;
  int v116;
  int *v117;
  int v118;
  uint64_t v120;
  uint64_t v121;
  char **v122;
  unint64_t v123;
  uint64_t v124;
  char **v125;
  unsigned int *v126;
  float32x4_t v127;
  int8x16_t v128;
  void *v129[3];
  void *v130;
  char *v131;
  char *v132;
  void *v133;
  char *v134;
  char *v135;
  void *__p;
  char *v137;
  unint64_t v138;
  void *v139[2];
  void *v140[2];
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  _OWORD v144[2];
  int v145;
  unsigned int *v146;
  _BYTE v147[48];
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  if (a1 < 4)
    return 0;
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  if (v152 == 1)
  {
    v122 = a5;
    v11 = v148;
    v120 = v149;
    v12 = v150;
    memset(v144, 0, sizeof(v144));
    v145 = 1065353216;
    v143 = 0;
    v141 = 0u;
    *(_OWORD *)v142 = 0u;
    *(_OWORD *)v139 = 0u;
    *(_OWORD *)v140 = 0u;
    __p = 0;
    v137 = 0;
    v138 = 0;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    LODWORD(v146) = 0;
    if (v151 != v150)
    {
      LODWORD(v13) = 0;
      v14 = 0;
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((v151 - v150) >> 4);
      v121 = (uint64_t)(a3 + 2);
      v124 = v150;
      v125 = a3;
      v123 = v15;
      do
      {
        v16 = (_DWORD *)(v12 + 80 * v14);
        v17 = *v16;
        if ((_DWORD)v17 != -1)
        {
          v137 = (char *)__p;
          v134 = (char *)v133;
          v131 = (char *)v130;
          v18 = v12 + 80 * v14;
          v21 = *(_DWORD *)(v18 + 64);
          v20 = (unsigned int *)(v18 + 64);
          v19 = v21;
          if (v21 > (unint64_t)((uint64_t)(v138 - (_QWORD)__p) >> 2))
          {
            std::vector<float>::reserve(&__p, v19);
            std::vector<float>::reserve(&v133, *v20);
            std::vector<float>::reserve(&v130, *v20);
            v17 = *v16;
          }
          v126 = v20;
          do
          {
            v22 = a2[*(unsigned int *)(v11 + 16 * v17 + 12)];
            v23 = v137;
            v127 = v22;
            if ((unint64_t)v137 >= v138)
            {
              v25 = (char *)__p;
              v26 = (v137 - (_BYTE *)__p) >> 2;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62)
                goto LABEL_160;
              v28 = v138 - (_QWORD)__p;
              if ((uint64_t)(v138 - (_QWORD)__p) >> 1 > v27)
                v27 = v28 >> 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                v29 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v138, v29);
                v22 = v127;
                v31 = v30;
                v25 = (char *)__p;
                v23 = v137;
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[4 * v26];
              *(_DWORD *)v32 = v22.i32[0];
              v24 = v32 + 4;
              while (v23 != v25)
              {
                v33 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v32 - 1) = v33;
                v32 -= 4;
              }
              __p = v32;
              v137 = v24;
              v138 = (unint64_t)&v31[4 * v29];
              if (v25)
              {
                operator delete(v25);
                v22 = v127;
              }
            }
            else
            {
              *(_DWORD *)v137 = v22.i32[0];
              v24 = v23 + 4;
            }
            v137 = v24;
            v34 = v22.i32[1];
            v35 = v134;
            if (v134 >= v135)
            {
              v37 = (char *)v133;
              v38 = (v134 - (_BYTE *)v133) >> 2;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 62)
                goto LABEL_160;
              v40 = v135 - (_BYTE *)v133;
              if ((v135 - (_BYTE *)v133) >> 1 > v39)
                v39 = v40 >> 1;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
                v41 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v135, v41);
                v37 = (char *)v133;
                v35 = v134;
              }
              else
              {
                v42 = 0;
              }
              v43 = &v42[4 * v38];
              *(_DWORD *)v43 = v34;
              v36 = v43 + 4;
              while (v35 != v37)
              {
                v44 = *((_DWORD *)v35 - 1);
                v35 -= 4;
                *((_DWORD *)v43 - 1) = v44;
                v43 -= 4;
              }
              v133 = v43;
              v134 = v36;
              v135 = &v42[4 * v41];
              if (v37)
                operator delete(v37);
              v22.i32[2] = v127.i32[2];
            }
            else
            {
              *(_DWORD *)v134 = v22.i32[1];
              v36 = v35 + 4;
            }
            v134 = v36;
            v45 = v22.i32[2];
            v46 = v131;
            if (v131 >= v132)
            {
              v48 = (char *)v130;
              v49 = (v131 - (_BYTE *)v130) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_160;
              v51 = v132 - (_BYTE *)v130;
              if ((v132 - (_BYTE *)v130) >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v132, v52);
                v48 = (char *)v130;
                v46 = v131;
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = v45;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              v130 = v54;
              v131 = v47;
              v132 = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v131 = v22.i32[2];
              v47 = v46 + 4;
            }
            v131 = v47;
            v17 = *(unsigned int *)(v11 + 16 * v17 + 8);
          }
          while (v17 != *v16);
          *(double *)v56.i64 = geom::plane_intersection_finder<float>::find_plane_intersection_point((uint64_t)v139, *v126, __p, v133, v130);
          v57.i32[1] = v56.i32[1];
          v57.i32[0] = vextq_s8(v56, v56, 8uLL).u32[0];
          v58 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v57), (int8x8_t)vcgez_f32(v57)));
          if ((v58.i8[4] & 1) != 0 || (v58.i8[0] & 1) != 0)
          {
            v5 = 0;
            v125[1] = *v125;
            goto LABEL_145;
          }
          v128 = v56;
          v59 = (unint64_t)(v125[1] - *v125) >> 4;
          v129[0] = &v146;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v144, (unsigned int *)&v146, (uint64_t)&std::piecewise_construct, (_DWORD **)v129)+ 5) = v59;
          v61 = (int8x16_t *)v125[1];
          v60 = (unint64_t)v125[2];
          if ((unint64_t)v61 >= v60)
          {
            v63 = ((char *)v61 - *v125) >> 4;
            if ((unint64_t)(v63 + 1) >> 60)
LABEL_160:
              abort();
            v64 = v60 - (_QWORD)*v125;
            v65 = v64 >> 3;
            if (v64 >> 3 <= (unint64_t)(v63 + 1))
              v65 = v63 + 1;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
              v66 = 0xFFFFFFFFFFFFFFFLL;
            else
              v66 = v65;
            if (v66)
              v67 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v121, v66);
            else
              v67 = 0;
            v68 = (int8x16_t *)&v67[16 * v63];
            *v68 = v128;
            v62 = v68 + 1;
            v70 = *v125;
            v69 = v125[1];
            if (v69 != *v125)
            {
              do
              {
                v71 = *((int8x16_t *)v69 - 1);
                v69 -= 16;
                v68[-1] = v71;
                --v68;
              }
              while (v69 != v70);
              v69 = *v125;
            }
            *v125 = (char *)v68;
            v125[1] = (char *)v62;
            v125[2] = &v67[16 * v66];
            if (v69)
              operator delete(v69);
          }
          else
          {
            *v61 = v128;
            v62 = v61 + 1;
          }
          v15 = v123;
          v12 = v124;
          v125[1] = (char *)v62;
          LODWORD(v13) = (_DWORD)v146;
        }
        v13 = (v13 + 1);
        LODWORD(v146) = v13;
        v14 = v13;
      }
      while (v15 > v13);
    }
    memset(v129, 0, sizeof(v129));
    std::vector<BOOL>::resize((uint64_t)v129, a1, 0);
    v72 = a5;
    if (v120 != v11)
    {
      v73 = 0;
      v74 = 0;
      v75 = (v120 - v11) >> 4;
      do
      {
        if (*(_DWORD *)(v11 + 16 * v73) != -1)
        {
          v76 = v11 + 16 * v73;
          v78 = *(_DWORD *)(v76 + 12);
          v77 = (_DWORD *)(v76 + 12);
          if (((*(_QWORD *)((char *)v129[0] + (((unint64_t)v78 >> 3) & 0x1FFFFFF8)) >> v78) & 1) == 0)
          {
            v79 = 0;
            v80 = v74;
            do
            {
              v146 = (unsigned int *)(v11 + 16 * v80);
              v81 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v144, v146, (uint64_t)&std::piecewise_construct, &v146)+ 5);
              v83 = (_DWORD *)a4[1];
              v82 = a4[2];
              if ((unint64_t)v83 >= v82)
              {
                v85 = (_DWORD *)*a4;
                v86 = (uint64_t)((uint64_t)v83 - *a4) >> 2;
                v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62)
                  goto LABEL_160;
                v88 = v82 - (_QWORD)v85;
                if (v88 >> 1 > v87)
                  v87 = v88 >> 1;
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                  v89 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v89 = v87;
                if (v89)
                {
                  v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v89);
                  v85 = (_DWORD *)*a4;
                  v83 = (_DWORD *)a4[1];
                }
                else
                {
                  v90 = 0;
                }
                v91 = &v90[4 * v86];
                *(_DWORD *)v91 = v81;
                v84 = v91 + 4;
                while (v83 != v85)
                {
                  v92 = *--v83;
                  *((_DWORD *)v91 - 1) = v92;
                  v91 -= 4;
                }
                *a4 = (unint64_t)v91;
                a4[1] = (unint64_t)v84;
                a4[2] = (unint64_t)&v90[4 * v89];
                if (v85)
                  operator delete(v85);
              }
              else
              {
                *v83 = v81;
                v84 = v83 + 1;
              }
              a4[1] = (unint64_t)v84;
              ++v79;
              v80 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v80 + 4) + 8);
            }
            while (v80 != v74);
            v146 = (unsigned int *)(v11 + 16 * v74);
            std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v144, v146, (uint64_t)&std::piecewise_construct, &v146);
            v72 = v122;
            v94 = v122[1];
            v93 = (unint64_t)v122[2];
            if ((unint64_t)v94 >= v93)
            {
              v96 = *v122;
              v97 = (v94 - *v122) >> 2;
              v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 62)
                goto LABEL_160;
              v99 = v93 - (_QWORD)v96;
              if (v99 >> 1 > v98)
                v98 = v99 >> 1;
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                v100 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v100 = v98;
              if (v100)
              {
                v101 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v122 + 2), v100);
                v96 = *v122;
                v94 = v122[1];
              }
              else
              {
                v101 = 0;
              }
              v102 = &v101[4 * v97];
              *(_DWORD *)v102 = v79;
              v95 = v102 + 4;
              while (v94 != v96)
              {
                v103 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v102 - 1) = v103;
                v102 -= 4;
              }
              *v122 = v102;
              v122[1] = v95;
              v122[2] = &v101[4 * v100];
              if (v96)
                operator delete(v96);
            }
            else
            {
              *(_DWORD *)v94 = v79;
              v95 = v94 + 4;
            }
            v75 = (v120 - v11) >> 4;
            v122[1] = v95;
            *(_QWORD *)((char *)v129[0] + (((unint64_t)*v77 >> 3) & 0x1FFFFFF8)) |= 1 << *v77;
          }
        }
        v73 = ++v74;
      }
      while (v75 > v74);
    }
    v104 = *a4;
    v105 = a4[1];
    v106 = (_DWORD *)(v105 - 4);
    if (*a4 != v105 && (unint64_t)v106 > v104)
    {
      v108 = v104 + 4;
      do
      {
        v109 = *(_DWORD *)(v108 - 4);
        *(_DWORD *)(v108 - 4) = *v106;
        *v106-- = v109;
        v110 = v108 >= (unint64_t)v106;
        v108 += 4;
      }
      while (!v110);
    }
    v112 = (int *)*v72;
    v111 = (int *)v72[1];
    v113 = v111 - 1;
    if (*v72 != (char *)v111 && v113 > v112)
    {
      v115 = v112 + 1;
      do
      {
        v116 = *(v115 - 1);
        *(v115 - 1) = *v113;
        *v113-- = v116;
        v110 = v115++ >= v113;
      }
      while (!v110);
    }
    if (v112 != v111)
    {
      v117 = v112 + 1;
      if (v112 + 1 != v111)
      {
        v118 = *v112;
        do
        {
          v118 += *v117;
          *v117++ = v118;
        }
        while (v117 != v111);
      }
    }
    if (v129[0])
      operator delete(v129[0]);
    v5 = 1;
LABEL_145:
    if (v130)
    {
      v131 = (char *)v130;
      operator delete(v130);
    }
    if (v133)
    {
      v134 = (char *)v133;
      operator delete(v133);
    }
    if (__p)
    {
      v137 = (char *)__p;
      operator delete(__p);
    }
    if (v142[0])
    {
      v142[1] = v142[0];
      operator delete(v142[0]);
    }
    if (v140[1])
    {
      *(void **)&v141 = v140[1];
      operator delete(v140[1]);
    }
    if (v139[0])
    {
      v139[1] = v139[0];
      operator delete(v139[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v144);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

double geom::plane_intersection_finder<float>::find_plane_intersection_point(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5)
{
  void **v10;
  __CLPK_real *__c__;
  __CLPK_integer v13;
  char __trans;
  char __side;
  __CLPK_integer v16;
  __CLPK_integer __info;
  __CLPK_integer __lwork;
  __CLPK_real __work;
  __CLPK_integer __n;
  __CLPK_integer __lda;
  __CLPK_real __tau[3];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = (void **)(a1 + 24);
  std::vector<float>::resize(a1 + 24, 3 * a2);
  if (a2)
  {
    memmove(*v10, a3, 4 * a2);
    memmove((char *)*v10 + 4 * a2, a4, 4 * a2);
    memmove((char *)*v10 + 8 * a2, a5, 4 * a2);
  }
  __n = 3;
  __lda = a2;
  __lwork = -1;
  __work = 0.0;
  *(float *)&__info = 0.0;
  sgeqrf_(&__lda, &__n, *(__CLPK_real **)(a1 + 24), &__lda, __tau, &__work, &__lwork, &__info);
  v16 = (int)__work;
  std::vector<float>::resize(a1 + 48, (int)__work);
  sgeqrf_(&__lda, &__n, *(__CLPK_real **)(a1 + 24), &__lda, __tau, *(__CLPK_real **)(a1 + 48), &v16, &__info);
  std::vector<float>::resize(a1, a2);
  __c__ = *(__CLPK_real **)a1;
  if (a2 >= 1)
    memset_pattern16(*(void **)a1, &unk_2289B4CC0, 4 * (a2 - ((a2 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  __side = 76;
  __trans = 84;
  __n = 1;
  __lda = a2;
  __lwork = -1;
  LODWORD(__work) = 3;
  v16 = 0;
  *(float *)&__info = 0.0;
  sormqr_(&__side, &__trans, &__lda, &__n, (__CLPK_integer *)&__work, *(__CLPK_real **)(a1 + 24), &__lda, __tau, __c__, &__lda, (__CLPK_real *)&__info, &__lwork, &v16);
  v13 = (int)*(float *)&__info;
  std::vector<float>::resize(a1 + 48, (int)*(float *)&__info);
  sormqr_(&__side, &__trans, &__lda, &__n, (__CLPK_integer *)&__work, *(__CLPK_real **)(a1 + 24), &__lda, __tau, *(__CLPK_real **)a1, &__lda, *(__CLPK_real **)(a1 + 48), &v13, &v16);
  cblas_strsv(CblasColMajor, CblasUpper, CblasNoTrans, CblasNonUnit, 3, *(const float **)(a1 + 24), a2, *(float **)a1, 1);
  return **(double **)a1;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        abort();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:nn180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

uint64_t geom::half_plane_intersection_3<double>(unint64_t a1, float64x2_t *a2, void **a3, unint64_t *a4, char **a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 *v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  vDSP_Length v56;
  const double *v57;
  const double *v58;
  const double *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  float64x2_t v65;
  float64x2_t v66;
  __int128 v67;
  int8x16_t v68;
  unint64_t v69;
  _OWORD *v70;
  unint64_t v71;
  __int128 v72;
  _OWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  __int128 v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  char **v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  int v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  _DWORD *v120;
  unint64_t v122;
  int v123;
  BOOL v124;
  int *v125;
  int *v126;
  int *v127;
  int *v129;
  int v130;
  int *v131;
  int v132;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  void **v139;
  char **v140;
  __int128 v141;
  double v142;
  __int128 v143;
  double v144;
  float64x2_t v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  float64x2_t v149;
  float64x2_t v150;
  __int128 v151;
  double v152;
  float64x2_t v153;
  uint64_t v154;
  unsigned int v155;
  void *v156;
  char *v157;
  char *v158;
  void *v159;
  char *v160;
  char *v161;
  void *__p;
  char *v163;
  unint64_t v164;
  _OWORD v165[2];
  int v166;
  float64x2_t v167[6];
  float64_t v168;
  float64_t v169;
  float64_t __C;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  _BYTE v177[48];
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;

  v183 = *MEMORY[0x24BDAC8D0];
  if (a1 < 4)
    return 0;
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  if (v182 == 1)
  {
    v140 = a5;
    v11 = v178;
    v134 = v179;
    v135 = a1;
    v12 = v180;
    memset(v165, 0, sizeof(v165));
    v166 = 1065353216;
    __p = 0;
    v163 = 0;
    v164 = 0;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v156 = 0;
    v157 = 0;
    v158 = 0;
    v155 = 0;
    if (v181 != v180)
    {
      LODWORD(v13) = 0;
      v14 = 0;
      v15 = 0x6DB6DB6DB6DB6DB7 * ((v181 - v180) >> 4);
      v136 = (uint64_t)(a3 + 2);
      v137 = v15;
      v138 = v180;
      v139 = a3;
      do
      {
        v16 = (_DWORD *)(v12 + 112 * v14);
        v17 = *v16;
        if ((_DWORD)v17 != -1)
        {
          v163 = (char *)__p;
          v160 = (char *)v159;
          v157 = (char *)v156;
          v18 = v12 + 112 * v14;
          v21 = *(_DWORD *)(v18 + 96);
          v20 = (unsigned int *)(v18 + 96);
          v19 = v21;
          if (v21 > (unint64_t)((uint64_t)(v164 - (_QWORD)__p) >> 3))
          {
            std::vector<double>::reserve(&__p, v19);
            std::vector<double>::reserve(&v159, *v20);
            std::vector<double>::reserve(&v156, *v20);
            v17 = *v16;
          }
          do
          {
            v22 = (__int128 *)&a2[2 * *(unsigned int *)(v11 + 16 * v17 + 12)];
            v23 = *v22;
            v151 = v22[1];
            v24 = v163;
            if ((unint64_t)v163 >= v164)
            {
              v26 = (char *)__p;
              v27 = (v163 - (_BYTE *)__p) >> 3;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61)
                goto LABEL_149;
              v29 = v164 - (_QWORD)__p;
              if ((uint64_t)(v164 - (_QWORD)__p) >> 2 > v28)
                v28 = v29 >> 2;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              v147 = v23;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v164, v30);
                v23 = v147;
                v32 = v31;
                v26 = (char *)__p;
                v24 = v163;
              }
              else
              {
                v32 = 0;
              }
              v33 = &v32[8 * v27];
              *(_QWORD *)v33 = v23;
              v25 = v33 + 8;
              while (v24 != v26)
              {
                v34 = *((_QWORD *)v24 - 1);
                v24 -= 8;
                *((_QWORD *)v33 - 1) = v34;
                v33 -= 8;
              }
              __p = v33;
              v163 = v25;
              v164 = (unint64_t)&v32[8 * v30];
              if (v26)
              {
                operator delete(v26);
                *((_QWORD *)&v23 + 1) = *((_QWORD *)&v147 + 1);
              }
            }
            else
            {
              *(_QWORD *)v163 = v23;
              v25 = v24 + 8;
            }
            v163 = v25;
            v35 = *((_QWORD *)&v23 + 1);
            v36 = v160;
            if (v160 >= v161)
            {
              v38 = (char *)v159;
              v39 = (v160 - (_BYTE *)v159) >> 3;
              v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 61)
                goto LABEL_149;
              v41 = v161 - (_BYTE *)v159;
              if ((v161 - (_BYTE *)v159) >> 2 > v40)
                v40 = v41 >> 2;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                v42 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v42 = v40;
              if (v42)
              {
                v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v161, v42);
                v38 = (char *)v159;
                v36 = v160;
              }
              else
              {
                v43 = 0;
              }
              v44 = &v43[8 * v39];
              *(_QWORD *)v44 = v35;
              v37 = v44 + 8;
              while (v36 != v38)
              {
                v45 = *((_QWORD *)v36 - 1);
                v36 -= 8;
                *((_QWORD *)v44 - 1) = v45;
                v44 -= 8;
              }
              v159 = v44;
              v160 = v37;
              v161 = &v43[8 * v42];
              if (v38)
                operator delete(v38);
            }
            else
            {
              *(_QWORD *)v160 = *((_QWORD *)&v23 + 1);
              v37 = v36 + 8;
            }
            v160 = v37;
            v46 = v157;
            if (v157 >= v158)
            {
              v48 = (char *)v156;
              v49 = (v157 - (_BYTE *)v156) >> 3;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_149;
              v51 = v158 - (_BYTE *)v156;
              if ((v158 - (_BYTE *)v156) >> 2 > v50)
                v50 = v51 >> 2;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v158, v52);
                v48 = (char *)v156;
                v46 = v157;
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[8 * v49];
              *(_QWORD *)v54 = v151;
              v47 = v54 + 8;
              while (v46 != v48)
              {
                v55 = *((_QWORD *)v46 - 1);
                v46 -= 8;
                *((_QWORD *)v54 - 1) = v55;
                v54 -= 8;
              }
              v156 = v54;
              v157 = v47;
              v158 = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_QWORD *)v157 = v151;
              v47 = v46 + 8;
            }
            v157 = v47;
            v17 = *(unsigned int *)(v11 + 16 * v17 + 8);
          }
          while (v17 != *v16);
          v56 = *v20;
          v57 = (const double *)__p;
          v58 = (const double *)v159;
          v59 = (const double *)v156;
          v168 = 0.0;
          v169 = 0.0;
          __C = 0.0;
          v152 = cblas_ddot(v56, (const double *)__p, 1, (const double *)__p, 1);
          v144 = cblas_ddot(v56, v57, 1, v58, 1);
          *(double *)&v60 = cblas_ddot(v56, v57, 1, v59, 1);
          v148 = v60;
          v142 = cblas_ddot(v56, v58, 1, v58, 1);
          *(double *)&v61 = cblas_ddot(v56, v58, 1, v59, 1);
          v143 = v61;
          *(double *)&v62 = cblas_ddot(v56, v59, 1, v59, 1);
          v141 = v62;
          vDSP_sveD(v57, 1, &__C, v56);
          vDSP_sveD(v58, 1, &v169, v56);
          vDSP_sveD(v59, 1, &v168, v56);
          *(double *)&v63 = v152;
          *(double *)&v64 = v144;
          *((double *)&v63 + 1) = v144;
          *((double *)&v64 + 1) = v142;
          v65.f64[0] = v169;
          v66.f64[0] = __C;
          *(_QWORD *)&v67 = v148;
          v171 = v63;
          v172 = v148;
          *((_QWORD *)&v67 + 1) = v143;
          v145 = v65;
          v65.f64[0] = v168;
          v149 = v65;
          v153 = v66;
          v173 = v64;
          v174 = v143;
          v175 = v67;
          v176 = v141;
          __invert_d3();
          v68 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v167[0], v153.f64[0]), v167[2], v145.f64[0]), v167[4], v149.f64[0]);
          v150 = vmlaq_f64(vmlaq_f64(vmulq_f64(v153, v167[1]), v145, v167[3]), v149, v167[5]);
          v154 = v68.i64[0];
          v146 = vextq_s8(v68, v68, 8uLL).u64[0];
          v69 = (unint64_t)((_BYTE *)v139[1] - (_BYTE *)*v139) >> 5;
          *(_QWORD *)&v171 = &v155;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v165, &v155, (uint64_t)&std::piecewise_construct, (_DWORD **)&v171)+ 5) = v69;
          v70 = v139[1];
          v71 = (unint64_t)v139[2];
          if ((unint64_t)v70 >= v71)
          {
            v74 = ((char *)v70 - (_BYTE *)*v139) >> 5;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 59)
LABEL_149:
              abort();
            v76 = v71 - (_QWORD)*v139;
            if (v76 >> 4 > v75)
              v75 = v76 >> 4;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0)
              v77 = 0x7FFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
              v78 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v136, v77);
            else
              v78 = 0;
            *(_QWORD *)&v79 = v154;
            *((_QWORD *)&v79 + 1) = v146;
            v80 = &v78[32 * v74];
            *(_OWORD *)v80 = v79;
            *((float64x2_t *)v80 + 1) = v150;
            v82 = (char *)*v139;
            v81 = (char *)v139[1];
            v83 = v80;
            if (v81 != *v139)
            {
              do
              {
                v84 = *((_OWORD *)v81 - 2);
                v85 = *((_OWORD *)v81 - 1);
                v81 -= 32;
                *((_OWORD *)v83 - 2) = v84;
                *((_OWORD *)v83 - 1) = v85;
                v83 -= 32;
              }
              while (v81 != v82);
              v81 = (char *)*v139;
            }
            v73 = v80 + 32;
            *v139 = v83;
            v139[1] = v80 + 32;
            v139[2] = &v78[32 * v77];
            if (v81)
              operator delete(v81);
          }
          else
          {
            *(_QWORD *)&v72 = v154;
            *((_QWORD *)&v72 + 1) = v146;
            *v70 = v72;
            v70[1] = v150;
            v73 = v70 + 2;
          }
          v15 = v137;
          v12 = v138;
          v139[1] = v73;
          LODWORD(v13) = v155;
        }
        v13 = (v13 + 1);
        v155 = v13;
        v14 = v13;
      }
      while (v15 > v13);
    }
    v171 = 0uLL;
    *(_QWORD *)&v172 = 0;
    std::vector<BOOL>::resize((uint64_t)&v171, v135, 0);
    v86 = v140;
    if (v134 != v11)
    {
      v87 = 0;
      v88 = 0;
      v89 = (v134 - v11) >> 4;
      do
      {
        if (*(_DWORD *)(v11 + 16 * v87) != -1)
        {
          v90 = v11 + 16 * v87;
          v92 = *(_DWORD *)(v90 + 12);
          v91 = (_DWORD *)(v90 + 12);
          if (((*(_QWORD *)(v171 + (((unint64_t)v92 >> 3) & 0x1FFFFFF8)) >> v92) & 1) == 0)
          {
            v93 = 0;
            v94 = v88;
            do
            {
              *(_QWORD *)&v167[0].f64[0] = v11 + 16 * v94;
              v95 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v165, *(unsigned int **)&v167[0].f64[0], (uint64_t)&std::piecewise_construct, v167)+ 5);
              v97 = (_DWORD *)a4[1];
              v96 = a4[2];
              if ((unint64_t)v97 >= v96)
              {
                v99 = (_DWORD *)*a4;
                v100 = (uint64_t)((uint64_t)v97 - *a4) >> 2;
                v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 62)
                  goto LABEL_149;
                v102 = v96 - (_QWORD)v99;
                if (v102 >> 1 > v101)
                  v101 = v102 >> 1;
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL)
                  v103 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v103 = v101;
                if (v103)
                {
                  v104 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v103);
                  v99 = (_DWORD *)*a4;
                  v97 = (_DWORD *)a4[1];
                }
                else
                {
                  v104 = 0;
                }
                v105 = &v104[4 * v100];
                *(_DWORD *)v105 = v95;
                v98 = v105 + 4;
                while (v97 != v99)
                {
                  v106 = *--v97;
                  *((_DWORD *)v105 - 1) = v106;
                  v105 -= 4;
                }
                *a4 = (unint64_t)v105;
                a4[1] = (unint64_t)v98;
                a4[2] = (unint64_t)&v104[4 * v103];
                if (v99)
                  operator delete(v99);
              }
              else
              {
                *v97 = v95;
                v98 = v97 + 1;
              }
              a4[1] = (unint64_t)v98;
              ++v93;
              v94 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v94 + 4) + 8);
            }
            while (v94 != v88);
            *(_QWORD *)&v167[0].f64[0] = v11 + 16 * v88;
            std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v165, *(unsigned int **)&v167[0].f64[0], (uint64_t)&std::piecewise_construct, v167);
            v108 = v140[1];
            v107 = (unint64_t)v140[2];
            if ((unint64_t)v108 >= v107)
            {
              v110 = *v140;
              v111 = (v108 - *v140) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
                goto LABEL_149;
              v113 = v107 - (_QWORD)v110;
              if (v113 >> 1 > v112)
                v112 = v113 >> 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                v114 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v140 + 2), v114);
                v110 = *v140;
                v108 = v140[1];
              }
              else
              {
                v115 = 0;
              }
              v116 = &v115[4 * v111];
              *(_DWORD *)v116 = v93;
              v109 = v116 + 4;
              while (v108 != v110)
              {
                v117 = *((_DWORD *)v108 - 1);
                v108 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *v140 = v116;
              v140[1] = v109;
              v140[2] = &v115[4 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_DWORD *)v108 = v93;
              v109 = v108 + 4;
            }
            v89 = (v134 - v11) >> 4;
            v86 = v140;
            v140[1] = v109;
            *(_QWORD *)(v171 + (((unint64_t)*v91 >> 3) & 0x1FFFFFF8)) |= 1 << *v91;
          }
        }
        v87 = ++v88;
      }
      while (v89 > v88);
    }
    v118 = *a4;
    v119 = a4[1];
    v120 = (_DWORD *)(v119 - 4);
    if (*a4 != v119 && (unint64_t)v120 > v118)
    {
      v122 = v118 + 4;
      do
      {
        v123 = *(_DWORD *)(v122 - 4);
        *(_DWORD *)(v122 - 4) = *v120;
        *v120-- = v123;
        v124 = v122 >= (unint64_t)v120;
        v122 += 4;
      }
      while (!v124);
    }
    v126 = (int *)*v86;
    v125 = (int *)v86[1];
    v127 = v125 - 1;
    if (*v86 != (char *)v125 && v127 > v126)
    {
      v129 = v126 + 1;
      do
      {
        v130 = *(v129 - 1);
        *(v129 - 1) = *v127;
        *v127-- = v130;
        v124 = v129++ >= v127;
      }
      while (!v124);
    }
    if (v126 != v125)
    {
      v131 = v126 + 1;
      if (v126 + 1 != v125)
      {
        v132 = *v126;
        do
        {
          v132 += *v131;
          *v131++ = v132;
        }
        while (v131 != v125);
      }
    }
    if ((_QWORD)v171)
      operator delete((void *)v171);
    v5 = 1;
    if (v156)
    {
      v157 = (char *)v156;
      operator delete(v156);
    }
    if (v159)
    {
      v160 = (char *)v159;
      operator delete(v159);
    }
    if (__p)
    {
      v163 = (char *)__p;
      operator delete(__p);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v165);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

float geom_convex_hull_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  char **v7;
  char **v8;

  v7 = (char **)geom::collection_to_vector<float>(a3);
  v8 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<float>(a1, a2, v7, v8, 0xFFFFFFFF, 0.0);
}

float geom::convex_hull_3<float>(unint64_t a1, float32x4_t *a2, char **a3, char **a4, unsigned int a5, float a6)
{
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  _DWORD *v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  char *v44;
  char *v45;
  unint64_t v46;
  _DWORD *v48;
  _BYTE v49[48];
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _OWORD __dst[4];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  a3[1] = *a3;
  a4[1] = *a4;
  if (!a1)
    return 0.0;
  if (a1 > 3)
  {
    v12 = a1;
  }
  else
  {
    memcpy(__dst, a2, 16 * a1);
    v11 = __dst[0];
    v12 = 4;
    v13 = a1;
    do
      __dst[v13++] = v11;
    while (v13 != 4);
    a2 = (float32x4_t *)__dst;
  }
  v46 = v12;
  a3[1] = *a3;
  a4[1] = *a4;
  v16 = v51;
  v15 = v52;
  if (v51 != v52)
  {
    v17 = a3 + 2;
    v48 = v52;
    do
    {
      v18 = *v16;
      if ((_DWORD)v18 != -1)
      {
        v19 = a3[1];
        do
        {
          v20 = v50;
          v21 = (_DWORD *)(v50 + 16 * v18 + 12);
          if ((unint64_t)v19 >= *v17)
          {
            v22 = *a3;
            v23 = (v19 - *a3) >> 2;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 62)
              goto LABEL_56;
            v25 = *v17 - (_QWORD)v22;
            if (v25 >> 1 > v24)
              v24 = v25 >> 1;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
              v26 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v26);
              v22 = *a3;
              v19 = a3[1];
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[4 * v23];
            *(_DWORD *)v28 = *v21;
            v29 = v28 + 4;
            while (v19 != v22)
            {
              v30 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *((_DWORD *)v28 - 1) = v30;
              v28 -= 4;
            }
            *a3 = v28;
            a3[1] = v29;
            a3[2] = &v27[4 * v26];
            if (v22)
              operator delete(v22);
            v19 = v29;
          }
          else
          {
            *(_DWORD *)v19 = *v21;
            v19 += 4;
          }
          a3[1] = v19;
          v18 = *(unsigned int *)(v20 + 16 * v18 + 8);
        }
        while (v18 != *v16);
        v31 = (unint64_t)(v19 - *a3) >> 2;
        v33 = a4[1];
        v32 = (unint64_t)a4[2];
        if ((unint64_t)v33 >= v32)
        {
          v35 = *a4;
          v36 = (v33 - *a4) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
LABEL_56:
            abort();
          v38 = v32 - (_QWORD)v35;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v39);
            v35 = *a4;
            v33 = a4[1];
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[4 * v36];
          *(_DWORD *)v41 = v31;
          v34 = v41 + 4;
          while (v33 != v35)
          {
            v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }
          *a4 = v41;
          a4[1] = v34;
          a4[2] = &v40[4 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_DWORD *)v33 = v31;
          v34 = v33 + 4;
        }
        v15 = v48;
        a4[1] = v34;
      }
      v16 += 20;
    }
    while (v16 != v15);
  }
  if (v46 != a1)
  {
    v44 = *a3;
    v45 = a3[1];
    while (v44 != v45)
    {
      if (*(unsigned int *)v44 >= a1)
        *(_DWORD *)v44 = 0;
      v44 += 4;
    }
  }
  return v14;
}

double geom_convex_hull_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4)
{
  char **v7;
  char **v8;

  v7 = (char **)geom::collection_to_vector<float>(a3);
  v8 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<double>(a1, a2, v7, v8, 0xFFFFFFFF, 0.0);
}

double geom::convex_hull_3<double>(unint64_t a1, float64x2_t *a2, char **a3, char **a4, unsigned int a5, double a6)
{
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  double v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  char *v46;
  char *v47;
  unint64_t v48;
  _DWORD *v50;
  _BYTE v51[48];
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _OWORD __dst[8];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  a3[1] = *a3;
  a4[1] = *a4;
  if (!a1)
    return 0.0;
  if (a1 > 3)
  {
    v13 = a1;
  }
  else
  {
    memcpy(__dst, a2, 32 * a1);
    v12 = __dst[0];
    v11 = __dst[1];
    v13 = 4;
    v14 = a1;
    do
    {
      v15 = &__dst[2 * v14];
      *v15 = v12;
      v15[1] = v11;
      ++v14;
    }
    while (v14 != 4);
    a2 = (float64x2_t *)__dst;
  }
  v48 = v13;
  a3[1] = *a3;
  a4[1] = *a4;
  v18 = v53;
  v17 = v54;
  if (v53 != v54)
  {
    v19 = a3 + 2;
    v50 = v54;
    do
    {
      v20 = *v18;
      if ((_DWORD)v20 != -1)
      {
        v21 = a3[1];
        do
        {
          v22 = v52;
          v23 = (_DWORD *)(v52 + 16 * v20 + 12);
          if ((unint64_t)v21 >= *v19)
          {
            v24 = *a3;
            v25 = (v21 - *a3) >> 2;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62)
              goto LABEL_56;
            v27 = *v19 - (_QWORD)v24;
            if (v27 >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v28);
              v24 = *a3;
              v21 = a3[1];
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[4 * v25];
            *(_DWORD *)v30 = *v23;
            v31 = v30 + 4;
            while (v21 != v24)
            {
              v32 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *((_DWORD *)v30 - 1) = v32;
              v30 -= 4;
            }
            *a3 = v30;
            a3[1] = v31;
            a3[2] = &v29[4 * v28];
            if (v24)
              operator delete(v24);
            v21 = v31;
          }
          else
          {
            *(_DWORD *)v21 = *v23;
            v21 += 4;
          }
          a3[1] = v21;
          v20 = *(unsigned int *)(v22 + 16 * v20 + 8);
        }
        while (v20 != *v18);
        v33 = (unint64_t)(v21 - *a3) >> 2;
        v35 = a4[1];
        v34 = (unint64_t)a4[2];
        if ((unint64_t)v35 >= v34)
        {
          v37 = *a4;
          v38 = (v35 - *a4) >> 2;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
LABEL_56:
            abort();
          v40 = v34 - (_QWORD)v37;
          if (v40 >> 1 > v39)
            v39 = v40 >> 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
            v41 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v41);
            v37 = *a4;
            v35 = a4[1];
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[4 * v38];
          *(_DWORD *)v43 = v33;
          v36 = v43 + 4;
          while (v35 != v37)
          {
            v44 = *((_DWORD *)v35 - 1);
            v35 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          *a4 = v43;
          a4[1] = v36;
          a4[2] = &v42[4 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *(_DWORD *)v35 = v33;
          v36 = v35 + 4;
        }
        v17 = v50;
        a4[1] = v36;
      }
      v18 += 28;
    }
    while (v18 != v17);
  }
  if (v48 != a1)
  {
    v46 = *a3;
    v47 = a3[1];
    while (v46 != v47)
    {
      if (*(unsigned int *)v46 >= a1)
        *(_DWORD *)v46 = 0;
      v46 += 4;
    }
  }
  return v16;
}

float geom_convex_hull_approx_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char **v9;
  char **v10;

  v9 = (char **)geom::collection_to_vector<float>(a3);
  v10 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<float>(a1, a2, v9, v10, a5, 0.0);
}

double geom_convex_hull_approx_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char **v9;
  char **v10;

  v9 = (char **)geom::collection_to_vector<float>(a3);
  v10 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<double>(a1, a2, v9, v10, a5, 0.0);
}

float geom_convex_hull_approx_with_tolerance_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, float a6)
{
  char **v11;
  char **v12;

  v11 = (char **)geom::collection_to_vector<float>(a3);
  v12 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<float>(a1, a2, v11, v12, a5, a6);
}

double geom_convex_hull_approx_with_tolerance_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6)
{
  char **v11;
  char **v12;

  v11 = (char **)geom::collection_to_vector<float>(a3);
  v12 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<double>(a1, a2, v11, v12, a5, a6);
}

uint64_t std::deque<unsigned int>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

void geom::`anonymous namespace'::hull_mesh<float>::grow_hull(_QWORD *a1, _QWORD *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5, std::vector<int> *a6)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<int>::size_type v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<int>::pointer begin;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  std::vector<int>::pointer v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      if (*(_DWORD *)(a1[9] + 80 * *v8) != -1)
      ++v8;
    }
    while (v8 != v9);
  }
  v10 = a2[1] - *a2;
  v11 = v10 >> 2;
  std::vector<unsigned int>::resize(a6, 3 * (v10 >> 2));
  v12 = ((unint64_t)v10 >> 2);
  if ((v10 >> 2))
  {
    v13 = 0;
    v14 = (unint64_t)v10 >> 1;
    do
    {
      begin = a6->__begin_;
      v17 = *(unsigned int *)(*a2 + 4 * v13);
      v18 = a1[6];
      v19 = *(unsigned int *)(*a2 + 4 * (((int)v11 - 1 + (int)v13) % v11));
      v20 = (unsigned int *)(v18 + 16 * begin[(v11 + v13)]);
      v21 = begin[v13];
      v22 = (unsigned int *)(v18 + 16 * v21);
      v23 = (unsigned int *)(v18 + 16 * begin[(v14 + v13)]);
      v24 = a1[9] + 80 * v16;
      v20[2] = v21;
      v22[2] = begin[(v14 + v13)];
      v23[2] = begin[(v11 + v13)];
      *v20 = v16;
      *v22 = v16;
      *v23 = v16;
      v20[3] = *(_DWORD *)(v18 + 16 * v19 + 12);
      v25 = v18 + 16 * v17;
      v22[3] = *(_DWORD *)(v25 + 12);
      v26 = *a4;
      v23[3] = v26;
      v20[1] = v17;
      *(_DWORD *)(v25 + 4) = begin[(v11 + v13)];
      v27 = a1[12];
      v28 = *(float32x4_t *)(v27 + 16 * v26);
      v29 = *(float32x4_t *)(v27 + 16 * v20[3]);
      v30 = *(float32x4_t *)(v27 + 16 * v22[3]);
      v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL);
      v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
      v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL);
      v34 = vaddq_f32(vmlaq_f32(vmulq_f32(v31, vnegq_f32(v30)), v28, v33), vaddq_f32(vmlaq_f32(vmulq_f32(v32, vnegq_f32(v28)), v29, v31), vmlaq_f32(vmulq_f32(v33, vnegq_f32(v29)), v30, v32)));
      *(int8x16_t *)(v24 + 16) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
      v35 = vmulq_f32(v34, v34);
      v35.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), v35)).f32[0]);
      *(_DWORD *)(v24 + 32) = v35.i32[0];
      *(_BYTE *)(v24 + 36) = v35.f32[0] <= 0.00000011921;
      *(float32x4_t *)(v24 + 48) = vaddq_f32(vaddq_f32(v28, v29), v30);
      *(_DWORD *)(v24 + 64) = 3;
      *(_DWORD *)v24 = begin[(v11 + v13)];
      if (v35.f32[0] > 0.00000011921)
      ++v13;
    }
    while (v12 != v13);
    v36 = 0;
    v37 = a6->__begin_;
    v38 = a1[6];
    do
    {
      v39 = v36 + 1;
      if (v12 - 1 == v36)
        v40 = 0;
      else
        v40 = v36 + 1;
      if (v36)
        v41 = v36;
      else
        v41 = v10 >> 2;
      v42 = v37[v36];
      v43 = v37[2 * ((unint64_t)v10 >> 2) + v36];
      *(_DWORD *)(v38 + 16 * v42 + 4) = v37[(v40 + 2 * v11)];
      *(_DWORD *)(v38 + 16 * v43 + 4) = v37[v41 - 1];
      v36 = v39;
    }
    while (v12 != v39);
  }
  std::vector<unsigned int>::resize(a6, v12);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t geom::`anonymous namespace'::hull_mesh<float>::new_face(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = a1[4];
  if (v2 == a1[3])
  {
    v6 = (char *)a1[10];
    v5 = a1[11];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (char *)a1[9];
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v8) >> 4) + 1;
      if (v9 > 0x333333333333333)
        abort();
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v8) >> 4);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0x199999999999999)
        v11 = 0x333333333333333;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 > 0x333333333333333)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v12 = (char *)operator new(80 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * ((v6 - v8) >> 4)];
      *(_DWORD *)v13 = -1;
      *(_OWORD *)(v13 + 4) = 0u;
      *(_OWORD *)(v13 + 20) = 0u;
      v13[36] = 1;
      *(_QWORD *)(v13 + 37) = 0;
      *(_QWORD *)(v13 + 53) = 0;
      *(_QWORD *)(v13 + 45) = 0;
      *(_QWORD *)(v13 + 60) = 0;
      *((_DWORD *)v13 + 17) = -1;
      *((_QWORD *)v13 + 9) = 0;
      v7 = v13 + 80;
      if (v6 != v8)
      {
        do
        {
          *((_OWORD *)v13 - 5) = *((_OWORD *)v6 - 5);
          v14 = *((_OWORD *)v6 - 4);
          v15 = *((_OWORD *)v6 - 3);
          v16 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v13 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v13 - 1) = v16;
          *((_OWORD *)v13 - 4) = v14;
          *((_OWORD *)v13 - 3) = v15;
          v13 -= 80;
          v6 -= 80;
        }
        while (v6 != v8);
        v6 = (char *)a1[9];
      }
      a1[9] = v13;
      a1[10] = v7;
      a1[11] = &v12[80 * v11];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_DWORD *)v6 = -1;
      *(_OWORD *)(v6 + 4) = 0u;
      *(_OWORD *)(v6 + 20) = 0u;
      v6[36] = 1;
      *(_QWORD *)(v6 + 37) = 0;
      *(_QWORD *)(v6 + 53) = 0;
      *(_QWORD *)(v6 + 45) = 0;
      *(_QWORD *)(v6 + 60) = 0;
      *((_DWORD *)v6 + 17) = -1;
      v7 = v6 + 80;
      *((_QWORD *)v6 + 9) = 0;
    }
    a1[10] = v7;
    return -858993459 * (((unint64_t)v7 - a1[9]) >> 4) - 1;
  }
  else
  {
    result = *(unsigned int *)(v2 - 4);
    a1[4] = v2 - 4;
    v4 = a1[9] + 80 * result;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 32) = 0;
    *(_BYTE *)(v4 + 36) = 1;
    *(_QWORD *)(v4 + 64) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v4 + 48) = 0u;
  }
  return result;
}

uint64_t geom::`anonymous namespace'::hull_mesh<float>::new_halfedge(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v2 = a1[1];
  if (v2 == *a1)
  {
    v6 = (char *)a1[7];
    v5 = a1[8];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (char *)a1[6];
      v9 = (v6 - v8) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[16 * v9];
      v7 = v14 + 16;
      *(_QWORD *)v14 = -1;
      *((_QWORD *)v14 + 1) = -1;
      if (v6 != v8)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
          v14 -= 16;
          v6 -= 16;
        }
        while (v6 != v8);
        v6 = (char *)a1[6];
      }
      a1[6] = v14;
      a1[7] = v7;
      a1[8] = &v13[16 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      v7 = v6 + 16;
      *(_QWORD *)v6 = -1;
      *((_QWORD *)v6 + 1) = -1;
    }
    a1[7] = v7;
    return (((unint64_t)v7 - a1[6]) >> 4) - 1;
  }
  else
  {
    result = *(unsigned int *)(v2 - 4);
    a1[1] = v2 - 4;
    v4 = (_QWORD *)(a1[6] + 16 * result);
    *v4 = -1;
    v4[1] = -1;
  }
  return result;
}

float geom::`anonymous namespace'::max_heap<geom::`anonymous namespace'::hull_mesh<float>::conflict_face,geom::`anonymous namespace'::hull_mesh<float>::conflict_face_selector_cmp>::remove(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float result;
  int *v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *a2;
  v3 = a1[3];
  if (v2 < (a1[4] - v3) >> 2)
  {
    v4 = *(unsigned int *)(v3 + 4 * v2);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      v6 = a1[1];
      v7 = (_DWORD *)(*a1 + 12 * v4);
      *(_DWORD *)(v3 + 4 * *v7) = 0;
      v9 = *(_DWORD *)(v6 - 12);
      v6 -= 12;
      v8 = v9;
      v10 = *(_QWORD *)(v6 + 4);
      a1[1] = v6;
      if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2) != v4)
      {
        *v7 = v8;
        *(_QWORD *)(v5 + 12 * v4 + 4) = v10;
        *(_DWORD *)(a1[3] + 4 * v8) = v4;
        v11 = (2 * v4);
        v12 = *a1;
        v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
        while (v13 > v11)
        {
          v14 = v11 | 1;
          if (v13 <= v14)
          {
            LODWORD(v14) = v11;
          }
          else if (*(float *)(v12 + 12 * v11 + 8) >= *(float *)(v12 + 12 * v14 + 8))
          {
            LODWORD(v14) = v11;
          }
          result = *(float *)(v12 + 12 * v14 + 8);
          if (result < *(float *)(v12 + 12 * v4 + 8))
            break;
          v16 = (int *)(v12 + 12 * v4);
          v17 = (int *)(v12 + 12 * v14);
          v18 = *v16;
          *v16 = *v17;
          *v17 = v18;
          v19 = *(_QWORD *)(v16 + 1);
          *(_QWORD *)(v16 + 1) = *(_QWORD *)(v17 + 1);
          *(_QWORD *)(v17 + 1) = v19;
          v12 = *a1;
          v20 = a1[1];
          v21 = a1[3];
          *(_DWORD *)(v21 + 4 * *(unsigned int *)(*a1 + 12 * v4)) = v4;
          *(_DWORD *)(v21 + 4 * *(unsigned int *)(v12 + 12 * v14)) = v14;
          v11 = (2 * v14);
          v13 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v12) >> 2);
          LODWORD(v4) = v14;
        }
      }
    }
  }
  return result;
}

void geom::`anonymous namespace'::max_heap<geom::`anonymous namespace'::hull_mesh<float>::conflict_face,geom::`anonymous namespace'::hull_mesh<float>::conflict_face_selector_cmp>::insert(std::vector<int> *a1, unsigned int *a2, uint64_t *a3)
{
  std::vector<int>::pointer end;
  unint64_t v7;
  unint64_t v8;
  std::vector<int> *v9;
  std::vector<int>::pointer v10;
  std::vector<int>::pointer begin;
  int v12;
  uint64_t v13;
  unint64_t value;
  int *v15;
  std::vector<int>::pointer v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  std::vector<int>::pointer v26;
  unint64_t v27;
  int *v28;
  int *v29;
  int v30;
  uint64_t v31;
  std::vector<int>::pointer v32;
  BOOL v33;
  std::vector<int>::value_type __x;

  end = a1->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (end - a1->__begin_);
  v8 = *a2;
  begin = a1[1].__begin_;
  v9 = a1 + 1;
  v10 = begin;
  if (v8 >= a1[1].__end_ - begin)
  {
    __x = 0;
    std::vector<unsigned int>::resize(v9, (v8 + 1), &__x);
    v8 = *a2;
    v10 = a1[1].__begin_;
    end = a1->__end_;
  }
  v10[v8] = v7;
  v12 = *a2;
  v13 = *a3;
  value = (unint64_t)a1->__end_cap_.__value_;
  if ((unint64_t)end >= value)
  {
    v16 = a1->__begin_;
    v17 = 0xAAAAAAAAAAAAAAABLL * (end - a1->__begin_);
    v18 = v17 + 1;
    if (v17 + 1 > 0x1555555555555555)
      abort();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(value - (_QWORD)v16) >> 2);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0xAAAAAAAAAAAAAAALL)
      v20 = 0x1555555555555555;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(12 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[12 * v17];
    *(_DWORD *)v22 = v12;
    *(_QWORD *)(v22 + 4) = v13;
    v15 = (int *)(v22 + 12);
    if (end != v16)
    {
      do
      {
        v23 = *(_QWORD *)(end - 3);
        end -= 3;
        v24 = end[2];
        *(_QWORD *)(v22 - 12) = v23;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v24;
      }
      while (end != v16);
      end = a1->__begin_;
    }
    a1->__begin_ = (std::vector<int>::pointer)v22;
    a1->__end_ = v15;
    a1->__end_cap_.__value_ = (int *)&v21[12 * v20];
    if (end)
      operator delete(end);
  }
  else
  {
    *end = v12;
    *(_QWORD *)(end + 1) = v13;
    v15 = end + 3;
  }
  v25 = v7;
  a1->__end_ = v15;
  if (v7 >= 2uLL)
  {
    v26 = a1->__begin_;
    do
    {
      v27 = v25 >> 1;
      if (*(float *)&v26[3 * v25 + 2] < *(float *)&v26[3 * (v25 >> 1) + 2])
        break;
      v28 = &v26[3 * v27];
      v29 = &v26[3 * v25];
      v30 = *v29;
      *v29 = *v28;
      *v28 = v30;
      v31 = *(_QWORD *)(v29 + 1);
      *(_QWORD *)(v29 + 1) = *(_QWORD *)(v28 + 1);
      *(_QWORD *)(v28 + 1) = v31;
      v26 = a1->__begin_;
      v32 = a1[1].__begin_;
      v32[a1->__begin_[3 * v25]] = v25;
      v32[v26[3 * v27]] = v27;
      v33 = v25 > 3;
      v25 >>= 1;
    }
    while (v33);
  }
}

void geom::`anonymous namespace'::hull_mesh<float>::dissolve_edge_if_coplanar(uint64_t a1, int a2, unsigned int **a3, char **a4)
{
  uint64_t v5;
  uint64_t v6;
  int32x2_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  BOOL *v18;
  int v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  const float *f32;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x2_t v32;
  float32x4_t v33;
  unsigned int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float v39;
  float v40;
  float32x4_t v41;
  float v42;
  BOOL v43;
  BOOL v44;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  int v67;
  int *v68;
  int v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  uint64_t v81;
  int v82;
  int *v83;
  int v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  _BOOL4 is_halfedge_dissolvable;
  unsigned int v101;
  float32x4_t v102;
  unsigned int v103;
  __int32 v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  BOOL *v108;
  _QWORD *v110;
  int v111;
  int v112;
  unsigned int v113[3];

  v112 = a2;
  v110 = (_QWORD *)(a1 + 400);
  std::deque<unsigned int>::push_back((_QWORD *)(a1 + 400), &v112);
  v5 = *(_QWORD *)(a1 + 440);
  if (v5)
  {
    v97 = (uint64_t)(a4 + 2);
    do
    {
      v6 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 408) + ((*(_QWORD *)(a1 + 432) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * (*(_QWORD *)(a1 + 432) & 0x3FFLL));
      ++*(_QWORD *)(a1 + 432);
      *(_QWORD *)(a1 + 440) = v5 - 1;
      std::deque<unsigned int>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)v110, 1);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_DWORD *)(v8 + 16 * v6);
      if (v9 != -1)
      {
        v10 = v8 + 16 * v6;
        v13 = *(_DWORD *)(v10 + 4);
        v11 = (unsigned int *)(v10 + 4);
        v12 = v13;
        v14 = *(_DWORD *)(v8 + 16 * v13);
        if (v14 != -1 && v14 != v9)
        {
          v16 = *(_QWORD *)(a1 + 72);
          v17 = v16 + 80 * v9;
          v19 = *(unsigned __int8 *)(v17 + 36);
          v18 = (BOOL *)(v17 + 36);
          if (!(v19 | *(unsigned __int8 *)(v16 + 80 * v14 + 36)))
          {
            v20 = (float32x4_t *)(v16 + 80 * v9);
            v22 = v20[1];
            v21 = v20 + 1;
            v23 = v22;
            v24 = (float32x4_t *)(v16 + 80 * v14);
            v25 = v24[1];
            f32 = v24[2].f32;
            v27 = vld1q_dup_f32(f32);
            v28 = vdivq_f32(v25, v27);
            v7.i32[0] = v21[1].i32[0];
            v29 = vdivq_f32(v22, (float32x4_t)vdupq_lane_s32(v7, 0));
            v30 = vmulq_f32(v28, v29);
            v31 = vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1));
            v32 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), v31).u64[0];
            if (*(float *)v32.i32 > 0.0)
            {
              v33 = v24[3];
              v34 = v24[4].u32[0];
              *(float *)v32.i32 = (float)v34;
              v31.f32[0] = (float)v21[3].u32[0];
              v35 = vdivq_f32(v33, (float32x4_t)vdupq_lane_s32(v32, 0));
              v36 = vdivq_f32(v21[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0));
              v37 = vmulq_f32(vsubq_f32(v35, v36), v29);
              LODWORD(v38) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u32[0];
              v39 = *(float *)(a1 + 528);
              v40 = -v39;
              v41 = vmulq_f32(vsubq_f32(v36, v35), v28);
              v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
              v43 = v42 <= v39 && v42 < v40;
              v44 = v43 && v38 <= v39;
              if (!v44 || v38 >= v40)
              {
                v108 = v18;
                v106 = v25;
                v107 = v23;
                v105 = v21[2];
                v103 = v34;
                v104 = v21[3].i32[0];
                v102 = v33;
                if (is_halfedge_dissolvable && v46)
                {
                  v47 = *(unsigned int *)(v8 + 16 * v6 + 8);
                  v48 = *(unsigned int *)(v8 + 16 * v12 + 8);
                  v98 = *(_DWORD *)(v8 + 16 * *(unsigned int *)(v8 + 16 * v48 + 4) + 8);
                  v101 = *(_DWORD *)(v8 + 16 * *(unsigned int *)(v8 + 16 * v47 + 4) + 8);
                  v49 = v6;
                  do
                  {
                    v50 = v8 + 16 * v49;
                    v52 = *(_DWORD *)(v50 + 8);
                    v51 = (_DWORD *)(v50 + 8);
                    v49 = v52;
                  }
                  while (v52 != (_DWORD)v6);
                  v53 = v12;
                  do
                  {
                    v54 = v8 + 16 * v53;
                    v56 = *(_DWORD *)(v54 + 8);
                    v55 = (_DWORD *)(v54 + 8);
                    v53 = v56;
                  }
                  while (v56 != (_DWORD)v12);
                  v113[0] = v9;
                  v57 = *(unsigned int *)(v8 + 16 * v6 + 12);
                  v58 = *(_QWORD *)(a1 + 96);
                  v59 = *(unsigned int *)(v8 + 16 * v12 + 12);
                  v60 = vaddq_f32(v106, v107);
                  v61 = vmulq_f32(v60, v60);
                  *v21 = v60;
                  v60.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0]);
                  v21[1].i32[0] = v60.i32[0];
                  *v108 = v60.f32[0] <= 0.00000011921;
                  v21[2] = vaddq_f32(v105, vsubq_f32(v102, vaddq_f32(*(float32x4_t *)(v58 + 16 * v57), *(float32x4_t *)(v58 + 16 * v59))));
                  v21[3].i32[0] = v103 + v104 - 2;
                  v62 = *v11;
                  v63 = *(_QWORD *)(a1 + 48);
                  v64 = v62;
                  do
                  {
                    v65 = (unsigned int *)(v63 + 16 * v64);
                    *v65 = v9;
                    v64 = v65[2];
                  }
                  while (v64 != v62);
                  *v51 = v48;
                  *v55 = v47;
                  *(_DWORD *)(v16 + 80 * v9) = v47;
                  v66 = v16 + 80 * v9;
                  v69 = *(_DWORD *)(v66 + 68);
                  v68 = (int *)(v66 + 68);
                  v67 = v69;
                  if (v69 != -1)
                  {
                    v71 = a4[1];
                    v70 = (unint64_t)a4[2];
                    if ((unint64_t)v71 >= v70)
                    {
                      v73 = *a4;
                      v74 = (v71 - *a4) >> 2;
                      v75 = v74 + 1;
                      if ((unint64_t)(v74 + 1) >> 62)
                        goto LABEL_72;
                      v76 = v70 - (_QWORD)v73;
                      if (v76 >> 1 > v75)
                        v75 = v76 >> 1;
                      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                        v77 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v77 = v75;
                      if (v77)
                      {
                        v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v97, v77);
                        v73 = *a4;
                        v71 = a4[1];
                        v67 = *v68;
                      }
                      else
                      {
                        v78 = 0;
                      }
                      v79 = &v78[4 * v74];
                      *(_DWORD *)v79 = v67;
                      v72 = v79 + 4;
                      while (v71 != v73)
                      {
                        v80 = *((_DWORD *)v71 - 1);
                        v71 -= 4;
                        *((_DWORD *)v79 - 1) = v80;
                        v79 -= 4;
                      }
                      *a4 = v79;
                      a4[1] = v72;
                      a4[2] = &v78[4 * v77];
                      if (v73)
                        operator delete(v73);
                    }
                    else
                    {
                      *(_DWORD *)v71 = v67;
                      v72 = v71 + 4;
                    }
                    a4[1] = v72;
                    *v68 = -1;
                  }
                  v81 = v16 + 80 * v14;
                  v84 = *(_DWORD *)(v81 + 68);
                  v83 = (int *)(v81 + 68);
                  v82 = v84;
                  if (v84 != -1)
                  {
                    v86 = a4[1];
                    v85 = (unint64_t)a4[2];
                    if ((unint64_t)v86 >= v85)
                    {
                      v88 = *a4;
                      v89 = (v86 - *a4) >> 2;
                      v90 = v89 + 1;
                      if ((unint64_t)(v89 + 1) >> 62)
LABEL_72:
                        abort();
                      v91 = v85 - (_QWORD)v88;
                      if (v91 >> 1 > v90)
                        v90 = v91 >> 1;
                      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                        v92 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v92 = v90;
                      if (v92)
                      {
                        v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v97, v92);
                        v88 = *a4;
                        v86 = a4[1];
                        v82 = *v83;
                      }
                      else
                      {
                        v93 = 0;
                      }
                      v94 = &v93[4 * v89];
                      *(_DWORD *)v94 = v82;
                      v87 = v94 + 4;
                      while (v86 != v88)
                      {
                        v95 = *((_DWORD *)v86 - 1);
                        v86 -= 4;
                        *((_DWORD *)v94 - 1) = v95;
                        v94 -= 4;
                      }
                      *a4 = v94;
                      a4[1] = v87;
                      a4[2] = &v93[4 * v92];
                      if (v88)
                        operator delete(v88);
                    }
                    else
                    {
                      *(_DWORD *)v86 = v82;
                      v87 = v86 + 4;
                    }
                    a4[1] = v87;
                    *v83 = -1;
                  }
                  if (!*v108)
                  {
                  }
                  v113[0] = 0;
                  v111 = 0;
                  v111 = v96;
                  if (v113[0] != -1)
                  {
                    std::deque<unsigned int>::push_back(v110, v113);
                    v96 = v111;
                  }
                  if (v96 != -1)
                    std::deque<unsigned int>::push_back(v110, &v111);
                }
              }
            }
          }
        }
      }
      v5 = *(_QWORD *)(a1 + 440);
    }
    while (v5);
  }
}

void geom::`anonymous namespace'::integer_hashset::populate(unsigned int *a1, std::vector<unsigned int> *this)
{
  unsigned int *v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int *v16;
  unsigned int v17;

  std::vector<unsigned int>::reserve(this, *a1 + this->__end_ - this->__begin_);
  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  for (i = (unsigned int *)*((_QWORD *)a1 + 2); v4 != i; ++v4)
  {
    v6 = *v4;
    if (*v4 != -1)
    {
      end = this->__end_;
      value = this->__end_cap_.__value_;
      if (end >= value)
      {
        begin = this->__begin_;
        v11 = end - this->__begin_;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          abort();
        v13 = (char *)value - (char *)begin;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v14);
          begin = this->__begin_;
          end = this->__end_;
        }
        else
        {
          v15 = 0;
        }
        v16 = (unsigned int *)&v15[4 * v11];
        *v16 = v6;
        v9 = v16 + 1;
        while (end != begin)
        {
          v17 = *--end;
          *--v16 = v17;
        }
        this->__begin_ = v16;
        this->__end_ = v9;
        this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v6;
        v9 = end + 1;
      }
      this->__end_ = v9;
    }
  }
}

uint64_t geom::partitioned_set::init(std::vector<int> *this, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  std::__compressed_pair<int *> *p_end_cap;
  int *end;
  uint64_t v12;
  std::vector<int>::pointer begin;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer v21;
  uint64_t v22;
  std::vector<int>::pointer v23;
  std::vector<int>::pointer v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;

  if (a4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    p_end_cap = &this[3].__end_cap_;
    end = this[3].__end_;
    do
    {
      v12 = v8 + *(_DWORD *)(a3 + 4 * v7) - 1;
      if (end >= p_end_cap->__value_)
      {
        begin = this[3].__begin_;
        v14 = ((char *)end - (char *)begin) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        v15 = (char *)p_end_cap->__value_ - (char *)begin;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&this[3].__end_cap_, v17);
        else
          v18 = 0;
        v19 = (int *)&v18[8 * v14];
        *(_QWORD *)v19 = v8 | (unint64_t)(v12 << 32);
        end = v19 + 2;
        v21 = this[3].__begin_;
        v20 = this[3].__end_;
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 2;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 2;
          }
          while (v20 != v21);
          v20 = this[3].__begin_;
        }
        this[3].__begin_ = v19;
        this[3].__end_ = end;
        this[3].__end_cap_.__value_ = (int *)&v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)end = v8 | (unint64_t)(v12 << 32);
        end += 2;
      }
      this[3].__end_ = end;
      v8 += *(_DWORD *)(a3 + 4 * v7);
      v7 = ++v9;
    }
    while (a4 > v9);
  }
  std::vector<unsigned int>::resize(this, a2, &geom::partitioned_set::null_index);
  std::vector<unsigned int>::resize(this + 1, a2, &geom::partitioned_set::null_index);
  std::vector<unsigned int>::resize(this + 2, a2, &geom::partitioned_set::null_index);
  v23 = this[3].__begin_;
  v24 = this[3].__end_;
  v25 = (char *)v24 - (char *)v23;
  if (v24 != v23)
  {
    v26 = 0;
    v27 = v25 >> 3;
    do
    {
      v28 = &v23[2 * v26];
      v29 = *v28;
      v30 = (unsigned int *)(v28 + 1);
      v31 = v28[1];
      while (v29 <= v31)
      {
        if (v29 != v31)
          this->__begin_[v29] = v29 + 1;
        v32 = v29;
        if (v29 != *v28)
        {
          this[1].__begin_[v29] = v29 - 1;
          v32 = *v28;
        }
        v31 = *v30;
        if (v29 == *v30 || v29 == v32)
        {
          this[2].__begin_[v29] = v26;
          v31 = *v30;
        }
        ++v29;
      }
      ++v26;
    }
    while (v27 > v26);
  }
  return geom::bvh<float,(unsigned char)2>::invariant_check(this);
}

void std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F148280;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F148280;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  v4 = *a2;
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v4 || *(_DWORD *)(a1 + 12) == (_DWORD)v4 || *(_DWORD *)(a1 + 16) == (_DWORD)v4)
    return 0;
  if (*(_BYTE *)(a1 + 24))
    return 1;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 96);
  v10 = *(_QWORD *)(v8 + 72) + 80 * *(unsigned int *)(a1 + 20);
  *(float *)&a4 = (float)*(unsigned int *)(v10 + 64);
  v11 = vdivq_f32(*(float32x4_t *)(v10 + 48), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0));
  v12 = *(float32x4_t *)(v10 + 16);
  v10 += 32;
  v13 = vld1q_dup_f32((const float *)v10);
  v14 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v9 + 16 * v4), v11), vdivq_f32(v12, v13));
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0] > 0.0)return 1;
  else
    return 2;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target_type()
{
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int)>::__value_func[abi:nn180100]<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    v5 = operator new(0x28uLL);
    v6 = v5;
    *v5 = &unk_24F148310;
    if (v3 == a2)
    {
      v5[4] = v5 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v5[4] = v3;
      a2[3] = 0;
    }
    *(_QWORD *)(a1 + 24) = v6;
  }
  return a1;
}

_QWORD *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24F148310;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_24F148310;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_24F148310;
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24F148310;
  return std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()>::target();
}

uint64_t std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::target_type()
{
}

void std::__throw_bad_function_call[abi:nn180100]()
{
  _QWORD *v0;
  unsigned int v1;
  int v2;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
}

void geom::`anonymous namespace'::hull_mesh<float>::delete_face(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;

  v23 = a2;
  v6 = a1[9];
  v7 = (unsigned int *)(v6 + 80 * a2);
  if (a3)
  {
    v8 = *v7;
    do
    {
      v9 = *(_DWORD *)(a1[6] + 16 * v8 + 8);
      v8 = v9;
    }
    while (v9 != *v7);
  }
  *v7 = -1;
  v10 = v6 + 80 * a2;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  *(_BYTE *)(v10 + 36) = 1;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 64) = 0;
  v11 = a1[5];
  v12 = (unsigned int *)a1[4];
  if ((unint64_t)v12 >= v11)
  {
    v14 = (unsigned int *)a1[3];
    v15 = v12 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      abort();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 5), v18);
      v14 = (unsigned int *)a1[3];
      v12 = (unsigned int *)a1[4];
    }
    else
    {
      v19 = 0;
    }
    v20 = (unsigned int *)&v19[4 * v15];
    v21 = &v19[4 * v18];
    *v20 = a2;
    v13 = v20 + 1;
    while (v12 != v14)
    {
      v22 = *--v12;
      *--v20 = v22;
    }
    a1[3] = v20;
    a1[4] = v13;
    a1[5] = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v12 = a2;
    v13 = v12 + 1;
  }
  a1[4] = v13;
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

double geom::`anonymous namespace'::integer_hashset::insert(unsigned int **this, unsigned int a2)
{
  unsigned int v4;
  double result;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  std::vector<int>::pointer begin;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  std::vector<int> v18;

  v6 = this[1];
  if (v6[v4] == -1)
  {
    v6[v4] = a2;
    v7 = *(_DWORD *)this + 1;
    *(_DWORD *)this = v7;
    v8 = (unint64_t)((char *)this[2] - (char *)v6) >> 2;
    result = *((double *)this + 4) * (double)v8;
    if (v7 > result)
    {
      v9 = 2 * v8;
      memset(&v18, 0, sizeof(v18));
      v10 = this[1];
      v11 = this[2];
      if (v10 != v11)
      {
        begin = v18.__begin_;
        v13 = this[1];
        do
        {
          v14 = *v13;
          if (*v13 != -1)
          {
            v15 = 73244475 * ((73244475 * (v14 ^ HIWORD(v14))) ^ ((73244475 * (v14 ^ HIWORD(v14))) >> 16));
            v16 = v15 ^ HIWORD(v15);
            do
            {
              v17 = v16 % v9;
              v16 = v17 + 1;
            }
            while (begin[v17] != -1);
            begin[v17] = v14;
          }
          ++v13;
        }
        while (v13 != v11);
      }
      if (v10)
      {
        this[2] = v10;
        operator delete(v10);
      }
      result = *(double *)&v18.__begin_;
      *(std::vector<int> *)(this + 1) = v18;
    }
  }
  return result;
}

void geom::`anonymous namespace'::hull_mesh<float>::delete_halfedge(uint64_t a1, unsigned int a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;

  v4 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * a2);
  *v4 = -1;
  v4[1] = -1;
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned int **)(a1 + 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(unsigned int **)a1;
    v10 = ((uint64_t)v7 - *(_QWORD *)a1) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5, v13);
      v9 = *(unsigned int **)a1;
      v7 = *(unsigned int **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *(_DWORD *)v15 = a2;
    v8 = v15 + 4;
    while (v7 != v9)
    {
      v17 = *--v7;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 8) = v8;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t geom::`anonymous namespace'::integer_hashset::index_of(geom::_anonymous_namespace_::integer_hashset *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;

  v2 = *((_QWORD *)this + 1);
  v3 = (unint64_t)(*((_QWORD *)this + 2) - v2) >> 2;
  v4 = 73244475 * ((73244475 * (a2 ^ HIWORD(a2))) ^ ((73244475 * (a2 ^ HIWORD(a2))) >> 16));
  v5 = v4 ^ HIWORD(v4);
  do
  {
    result = v5 % v3;
    v7 = *(_DWORD *)(v2 + 4 * result);
    v5 = result + 1;
  }
  while (v7 != a2 && v7 != -1);
  return result;
}

void std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F148400;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F148400;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 72);
  if (*(_BYTE *)(v3 + 80 * *a2 + 36))
    return 1;
  v5 = (float32x4_t *)(v3 + 80 * *a2);
  v6 = *(unsigned int *)(*(_QWORD *)(v2 + 48) + 16 * v5->u32[0] + 12);
  v7 = v5[1];
  v5 += 2;
  v8 = vld1q_dup_f32(v5->f32);
  v9 = vmulq_f32(vsubq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 16), *(float32x4_t *)(*(_QWORD *)(v2 + 96) + 16 * v6)), vdivq_f32(v7, v8));
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0] >= (float)-*(float *)(v2 + 528);
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

BOOL geom::`anonymous namespace'::hull_mesh<float>::is_halfedge_dissolvable(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(v2 + 16 * a2 + 4);
  v4 = (unsigned int *)(v2 + 16 * *(unsigned int *)(v2 + 16 * v3 + 8));
  v5 = v4[1];
  v6 = v2 + 16 * v5;
  v7 = (unsigned int *)(v2 + 16 * *(unsigned int *)(v6 + 8));
  v8 = v7[1];
  if (*(_DWORD *)(v2 + 16 * v8 + 8) != a2)
    return 1;
  if (*(_DWORD *)(v2
                 + 16
                 * *(unsigned int *)(v2
                                   + 16
                                   * *(unsigned int *)(v2
                                                     + 16
                                                     * *(unsigned int *)(v2
                                                                       + 16
                                                                       * *(unsigned int *)(v2
                                                                                         + 16
                                                                                         * *(unsigned int *)(v6 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == (_DWORD)v5)
    return 0;
  v9 = v2 + 16 * v8;
  if (*(_DWORD *)(v2
                 + 16
                 * *(unsigned int *)(v2
                                   + 16
                                   * *(unsigned int *)(v2
                                                     + 16
                                                     * *(unsigned int *)(v2
                                                                       + 16
                                                                       * *(unsigned int *)(v2
                                                                                         + 16
                                                                                         * *(unsigned int *)(v9 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == (_DWORD)v8)
    return 0;
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *v7;
  v12 = *(_DWORD *)(v10 + 80 * *v7 + 64);
  if (v12 == 3)
    return 0;
  v13 = (unsigned int *)(v2 + 16 * a2);
  v16 = *v13;
  v14 = v13 + 3;
  v15 = v16;
  v17 = *(_DWORD *)(v10 + 80 * v16 + 64);
  if (v17 == 3)
    return 0;
  v18 = (float32x4_t *)(v10 + 80 * v11);
  v19 = v18[1];
  v20 = vaddq_f32(v19, *(float32x4_t *)(v10 + 80 * v15 + 16));
  v21 = vmulq_f32(v20, v20);
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1);
  v22.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, v22)).f32[0]);
  if (fabsf(v22.f32[0]) <= 0.00000011921)
    return 1;
  v23 = v2 + 16 * v3;
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(float32x4_t *)(v24 + 16 * *v14);
  v26 = (float32x4_t *)(v10 + 80 * *v4);
  v27.i64[0] = 0xC0000000C0000000;
  v27.i64[1] = 0xC0000000C0000000;
  v28 = vmlaq_f32(vsubq_f32(vaddq_f32(v26[3], *(float32x4_t *)(v10 + 80 * v15 + 48)), *(float32x4_t *)(v24 + 16 * *(unsigned int *)(v23 + 12))), v27, v25);
  v27.f32[0] = (float)(v17 + v26[4].i32[0] - 3);
  v29 = vmulq_f32(vdivq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0)), vsubq_f32(v25, vdivq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0))));
  v30 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0];
  v31 = *(float *)(a1 + 528);
  v32 = -v31;
  if (v30 > v31 || v30 < v32)
    return 0;
  v34 = *(float32x4_t *)(v24 + 16 * *(unsigned int *)(v9 + 12));
  v35 = *(float32x4_t *)(v24 + 16 * *(unsigned int *)(v2 + 16 * v5 + 12));
  v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
  v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
  v38 = vnegq_f32(v34);
  v39 = (int32x4_t)vmlaq_f32(vmulq_f32(v37, v38), v35, v36);
  v40 = (int8x16_t)vuzp1q_s32(v39, v39);
  v41 = (float32x4_t)vextq_s8(v40, (int8x16_t)v39, 0xCuLL);
  *(float *)v40.i32 = (float)(v12 - 1);
  v42 = vaddq_f32(v19, v41);
  v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
  v44 = (int32x4_t)vmlaq_f32(vmulq_f32(v43, v38), v25, v36);
  v45 = vsubq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL));
  v46 = (int32x4_t)vmlaq_f32(vmulq_f32(v37, vnegq_f32(v25)), v35, v43);
  v47 = vsubq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL));
  v48 = vmulq_f32(v47, v47);
  v48.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).u64[0];
  v48.f32[0] = sqrtf(v48.f32[0]);
  v49 = vmulq_f32(vdivq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 0)), vsubq_f32(v25, vdivq_f32(vsubq_f32(v18[3], v25), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 0))));
  v50 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0];
  return v50 <= v31 && v50 >= v32;
}

uint64_t geom::`anonymous namespace'::hull_mesh<float>::dissolve_vertex_if_redundant(_QWORD *a1, unsigned int a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  float32x4_t *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  __int8 *v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  uint64_t v77;
  int v78;
  int *v79;
  int v80;
  unint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  unsigned int v84;
  _DWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;

  v4 = a1[9];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[10] - v4) >> 4) - ((uint64_t)(a1[4] - a1[3]) >> 2) == 2)
    return 0xFFFFFFFFLL;
  v6 = a1[6];
  v7 = *(unsigned int *)(v6 + 16 * a2 + 4);
  v8 = *(unsigned int *)(v6 + 16 * v7 + 8);
  if (*(_DWORD *)(v6 + 16 * *(unsigned int *)(v6 + 16 * v8 + 4) + 8) != a2)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)(v4 + 80 * *(unsigned int *)(v6 + 16 * v7) + 64) >= *(_DWORD *)(v4
                                                                                  + 80
                                                                                  * *(unsigned int *)(v6 + 16 * a2)
                                                                                  + 64))
    v11 = a2;
  else
    v11 = v8;
  v12 = v11;
  do
  {
    v13 = v12;
    v12 = *(_DWORD *)(v6 + 16 * v12 + 8);
  }
  while (v12 != (_DWORD)v11);
  v14 = v13;
  v15 = *(unsigned int *)(v6 + 16 * a2 + 8);
  v16 = (unsigned int *)(v6 + 16 * v11);
  if (*(_DWORD *)(v6 + 16 * v15 + 8) == v13)
  {
    v17 = *v16;
    v96 = *(unsigned int *)(v6 + 16 * v13 + 4);
    v97 = *(_DWORD *)(v6 + 16 * v96 + 8);
    v18 = *(unsigned int *)(v6 + 16 * v11 + 4);
    v19 = *(_DWORD *)(v6 + 16 * v11 + 4);
    do
    {
      v20 = v19;
      v19 = *(_DWORD *)(v6 + 16 * v19 + 8);
    }
    while (v19 != (_DWORD)v18);
    v21 = *(unsigned int *)(v6 + 16 * v18);
    v22 = *(unsigned int *)(v6 + 16 * v11 + 12);
    v23 = a1[12];
    v24 = v21 + 4 * v21;
    v25 = (float32x4_t *)(v4 + 16 * v24);
    v26 = vaddq_f32(*(float32x4_t *)(v4 + 80 * v17 + 16), v25[1]);
    v25[1] = v26;
    v27 = vmulq_f32(v26, v26);
    v101 = v21;
    v27.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
    v28 = (float32x4_t *)(a1[9] + 16 * v24);
    v28[2].i32[0] = v27.i32[0];
    v28[2].i8[4] = v27.f32[0] <= 0.00000011921;
    v28[3] = vsubq_f32(v28[3], *(float32x4_t *)(v23 + 16 * v22));
    v29 = a1[9];
    --*(_DWORD *)(v29 + 16 * v24 + 64);
    v30 = v29 + 80 * v17;
    v33 = *(_DWORD *)(v30 + 68);
    v32 = (int *)(v30 + 68);
    v31 = v33;
    v98 = v17;
    if (v33 != -1)
    {
      v34 = *(_QWORD *)(a4 + 16);
      v35 = *(_DWORD **)(a4 + 8);
      if ((unint64_t)v35 >= v34)
      {
        v68 = *(_DWORD **)a4;
        v69 = ((uint64_t)v35 - *(_QWORD *)a4) >> 2;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 62)
          goto LABEL_58;
        v71 = v34 - (_QWORD)v68;
        if (v71 >> 1 > v70)
          v70 = v71 >> 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
          v72 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
        {
          v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v72);
          v68 = *(_DWORD **)a4;
          v35 = *(_DWORD **)(a4 + 8);
          v31 = *v32;
        }
        else
        {
          v73 = 0;
        }
        v74 = &v73[4 * v69];
        v75 = &v73[4 * v72];
        *(_DWORD *)v74 = v31;
        v36 = v74 + 4;
        while (v35 != v68)
        {
          v76 = *--v35;
          *((_DWORD *)v74 - 1) = v76;
          v74 -= 4;
        }
        *(_QWORD *)a4 = v74;
        *(_QWORD *)(a4 + 8) = v36;
        *(_QWORD *)(a4 + 16) = v75;
        if (v68)
          operator delete(v68);
        LODWORD(v17) = v98;
      }
      else
      {
        *v35 = v31;
        v36 = v35 + 1;
      }
      *(_QWORD *)(a4 + 8) = v36;
      v29 = a1[9];
      *(_DWORD *)(v29 + 80 * v17 + 68) = -1;
      LODWORD(v21) = v101;
    }
    v77 = v29 + 80 * v21;
    v80 = *(_DWORD *)(v77 + 68);
    v79 = (int *)(v77 + 68);
    v78 = v80;
    if (v80 == -1)
    {
      v84 = v21;
LABEL_55:
      *(_DWORD *)(a1[6] + 16 * v15) = v21;
      v94 = a1[9] + 80 * v84;
      *(_DWORD *)v94 = v15;
      v95 = a1[6];
      *(_DWORD *)(v95 + 16 * v20 + 8) = v15;
      *(_DWORD *)(v95 + 16 * v15 + 8) = v97;
      if (!*(_BYTE *)(v94 + 36))
      {
      }
      return v15;
    }
    v81 = *(_QWORD *)(a4 + 16);
    v82 = *(_DWORD **)(a4 + 8);
    if ((unint64_t)v82 < v81)
    {
      *v82 = v78;
      v83 = v82 + 1;
LABEL_54:
      *(_QWORD *)(a4 + 8) = v83;
      v84 = v101;
      *(_DWORD *)(a1[9] + 80 * v101 + 68) = -1;
      LODWORD(v21) = v84;
      goto LABEL_55;
    }
    v85 = *(_DWORD **)a4;
    v86 = ((uint64_t)v82 - *(_QWORD *)a4) >> 2;
    v87 = v86 + 1;
    if (!((unint64_t)(v86 + 1) >> 62))
    {
      v88 = v81 - (_QWORD)v85;
      if (v88 >> 1 > v87)
        v87 = v88 >> 1;
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
        v89 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
      {
        v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v89);
        v85 = *(_DWORD **)a4;
        v82 = *(_DWORD **)(a4 + 8);
        v78 = *v79;
      }
      else
      {
        v90 = 0;
      }
      v91 = &v90[4 * v86];
      v92 = &v90[4 * v89];
      *(_DWORD *)v91 = v78;
      v83 = v91 + 4;
      while (v82 != v85)
      {
        v93 = *--v82;
        *((_DWORD *)v91 - 1) = v93;
        v91 -= 4;
      }
      *(_QWORD *)a4 = v91;
      *(_QWORD *)(a4 + 8) = v83;
      *(_QWORD *)(a4 + 16) = v92;
      if (v85)
        operator delete(v85);
      goto LABEL_54;
    }
LABEL_58:
    abort();
  }
  v38 = v6 + 16 * v11;
  v39 = *(_QWORD *)(v38 + 4);
  v40 = (unsigned int *)(v6 + 16 * v39);
  v42 = v40[2];
  v41 = v40[3];
  v43 = v6 + 16 * v42;
  v15 = *(unsigned int *)(v43 + 4);
  v44 = (unsigned int *)(v6 + 16 * v15);
  *(_QWORD *)(v44 + 1) = v39;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  v40[1] = v15;
  v40[2] = v43;
  *(_DWORD *)(v4 + 80 * *v44) = v15;
  v45 = *v40;
  v46 = (float32x4_t *)(v4 + 80 * *v40);
  v46->i32[0] = v39;
  v47 = *v16;
  v99 = v45;
  v100 = v47;
  v48 = v44[3];
  v49 = a1[12];
  v50 = *(unsigned int *)(v38 + 12);
  v51 = *(float32x4_t *)(v49 + 16 * v48);
  v52 = *(float32x4_t *)(v49 + 16 * v50);
  v53 = (float32x4_t *)(v4 + 80 * v47);
  v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
  v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL);
  v56 = vnegq_f32(v51);
  v57 = vmlaq_f32(vmulq_f32(v55, v56), v52, v54);
  v58 = *(float32x4_t *)(v49 + 16 * v41);
  v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL);
  v60 = (int32x4_t)vmlaq_f32(vmulq_f32(v59, v56), v58, v54);
  v61 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL);
  v62 = (int32x4_t)vaddq_f32(v57, vmlaq_f32(vmulq_f32(v59, vnegq_f32(v52)), v58, v55));
  v63 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v62, v62), (int8x16_t)v62, 0xCuLL);
  v53[1] = vsubq_f32(v53[1], v63);
  v46[1] = vaddq_f32(v46[1], v63);
  v53[1] = vaddq_f32(v61, v53[1]);
  v64 = vsubq_f32(v46[1], v61);
  v46[1] = v64;
  v65 = vmulq_f32(v53[1], v53[1]);
  v53[2].f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0]);
  v66 = vmulq_f32(v64, v64);
  v66.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0]);
  v46[2].i32[0] = v66.i32[0];
  v53[2].i8[4] = v53[2].f32[0] <= 0.00000011921;
  v46[2].i8[4] = v66.f32[0] <= 0.00000011921;
  v67 = &v46[2].i8[4];
  v53[3] = vsubq_f32(v53[3], *(float32x4_t *)(v49 + 16 * v50));
  *(float32x4_t *)(v67 + 12) = vsubq_f32(*(float32x4_t *)(v67 + 12), *(float32x4_t *)(v49 + 16 * v50));
  --v53[4].i32[0];
  --*((_DWORD *)v67 + 7);
  if (!v53[2].i8[4])
  {
  }
  if (!*v67)
  {
  }
  return v15;
}

void std::deque<unsigned int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<unsigned int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void std::__split_buffer<unsigned int *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned int *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<unsigned int>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t geom::`anonymous namespace'::integer_hashset::erase(geom::_anonymous_namespace_::integer_hashset *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v12;
  BOOL v14;
  BOOL v15;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v3 + 4 * result) != -1)
  {
    v6 = (unint64_t)(v4 - v3) >> 2;
    do
    {
      v7 = result;
      do
      {
        result = ((int)result + 1) % v6;
        v8 = *(_DWORD *)(v3 + 4 * result);
        v9 = 73244475 * ((73244475 * (v8 ^ HIWORD(v8))) ^ ((73244475 * (v8 ^ HIWORD(v8))) >> 16));
        v10 = (v9 ^ HIWORD(v9)) % v6;
        v12 = v7 < result && v7 >= v10;
        v14 = v7 < result || v7 >= v10;
        if (v10 > result)
          v15 = v14;
        else
          v15 = v12;
      }
      while (v8 != -1 && !v15);
      *(_DWORD *)(v3 + 4 * v7) = v8;
    }
    while (*(_DWORD *)(v3 + 4 * result) != -1);
    --*(_DWORD *)this;
  }
  return result;
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      abort();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

void std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F148490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F148490;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  float v8;
  float32x4_t v9;
  float v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  result = *(unsigned int *)(a1 + 20);
  if ((_DWORD)result)
  {
    v5 = 0;
    LODWORD(v6) = -1;
    v7 = 1;
    v8 = -INFINITY;
    do
    {
      v9 = vmulq_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v2 + 96) + 16 * v3), *(float32x4_t *)(*(_QWORD *)(v2 + 376) + 16 * (v7 - 1))), *(float32x4_t *)(*(_QWORD *)(v2 + 376) + 16 * v7));
      v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0];
      if (v10 <= v8)
      {
        v6 = v6;
      }
      else
      {
        v8 = v10;
        v6 = v5;
      }
      ++v5;
      v7 += 2;
    }
    while (result != v5);
  }
  else
  {
    v6 = 0xFFFFFFFFLL;
    v8 = -INFINITY;
  }
  if (v8 > (float)(*(float *)(v2 + 528) * -2.0))
  {
    *(float *)(*(_QWORD *)(v2 + 120) + 4 * v3) = v8;
    return v6;
  }
  return result;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target_type()
{
}

void _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 2);
        v14 = *((_OWORD *)v10 - 1);
        v10 -= 32;
        *((_OWORD *)v12 - 2) = v13;
        *((_OWORD *)v12 - 1) = v14;
        v12 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void geom::`anonymous namespace'::hull_mesh<double>::grow_hull(_QWORD *a1, _QWORD *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5, std::vector<int> *a6)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<int>::size_type v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<int>::pointer begin;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t *v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  std::vector<int>::pointer v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v8 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      if (*(_DWORD *)(a1[9] + 112 * *v8) != -1)
      ++v8;
    }
    while (v8 != v9);
  }
  v10 = a2[1] - *a2;
  v11 = v10 >> 2;
  std::vector<unsigned int>::resize(a6, 3 * (v10 >> 2));
  v12 = ((unint64_t)v10 >> 2);
  if ((v10 >> 2))
  {
    v13 = 0;
    v14 = (unint64_t)v10 >> 1;
    do
    {
      begin = a6->__begin_;
      v17 = *(unsigned int *)(*a2 + 4 * v13);
      v18 = *(unsigned int *)(*a2 + 4 * (((int)v11 - 1 + (int)v13) % v11));
      v19 = a1[6];
      v20 = (unsigned int *)(v19 + 16 * begin[(v11 + v13)]);
      v21 = begin[v13];
      v22 = (unsigned int *)(v19 + 16 * v21);
      v23 = (unsigned int *)(v19 + 16 * begin[(v14 + v13)]);
      v24 = a1[9];
      v20[2] = v21;
      v22[2] = begin[(v14 + v13)];
      v23[2] = begin[(v11 + v13)];
      *v20 = v16;
      *v22 = v16;
      *v23 = v16;
      v20[3] = *(_DWORD *)(v19 + 16 * v18 + 12);
      v25 = v19 + 16 * v17;
      v22[3] = *(_DWORD *)(v25 + 12);
      v26 = *a4;
      v23[3] = v26;
      v20[1] = v17;
      v27 = v24 + 112 * v16;
      *(_DWORD *)(v25 + 4) = begin[(v11 + v13)];
      v28 = a1[12];
      v29 = (float64x2_t *)(v28 + 32 * v26);
      v30 = *v29;
      v31 = v29[1];
      v32 = (float64x2_t *)(v28 + 32 * v20[3]);
      v33 = *v32;
      v34 = v32[1];
      v35 = (float64x2_t *)(v28 + 32 * v22[3]);
      v36 = *v35;
      v37 = v35[1];
      v38 = vnegq_f64(v31);
      v39 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v37), *v29, 1), v31, *v35, 1);
      v40 = vaddq_f64(v31, v34);
      v31.f64[1] = v29->f64[0];
      v41 = vmlaq_laneq_f64(vmulq_laneq_f64(v38, *v32, 1), v34, *v29, 1);
      v42 = vnegq_f64(v34);
      v34.f64[1] = v32->f64[0];
      v43 = vmlaq_laneq_f64(vmulq_laneq_f64(v42, *v35, 1), v37, *v32, 1);
      v44 = vaddq_f64(v40, v37);
      v37.f64[1] = v35->f64[0];
      v45 = vaddq_f64(vmlaq_f64(vmulq_f64(v31, vnegq_f64(*v35)), *v29, v37), vaddq_f64(vmlaq_f64(vmulq_f64(v34, vnegq_f64(*v29)), *v32, v31), vmlaq_f64(vmulq_f64(v37, vnegq_f64(*v32)), *v35, v34)));
      v46 = vaddq_f64(v39, vaddq_f64(v41, v43));
      v37.f64[0] = vmulq_f64(v46, v46).f64[0];
      v46.f64[1] = v45.f64[0];
      *(float64x2_t *)(v27 + 16) = v46;
      *(int64x2_t *)(v27 + 32) = vdupq_laneq_s64((int64x2_t)v45, 1);
      v47 = vmulq_f64(v45, v45);
      v47.f64[0] = sqrt(v47.f64[1] + v37.f64[0] + v47.f64[0]);
      *(float64_t *)(v27 + 48) = v47.f64[0];
      *(_BYTE *)(v27 + 56) = v47.f64[0] <= 2.22044605e-16;
      *(float64x2_t *)(v27 + 64) = vaddq_f64(vaddq_f64(v30, v33), v36);
      *(float64x2_t *)(v27 + 80) = v44;
      *(_DWORD *)(v27 + 96) = 3;
      *(_DWORD *)v27 = begin[(v11 + v13)];
      if (v47.f64[0] > 2.22044605e-16)
      ++v13;
    }
    while (v12 != v13);
    v48 = 0;
    v49 = a6->__begin_;
    v50 = a1[6];
    do
    {
      v51 = v48 + 1;
      if (v12 - 1 == v48)
        v52 = 0;
      else
        v52 = v48 + 1;
      if (v48)
        v53 = v48;
      else
        v53 = v10 >> 2;
      v54 = v49[v48];
      v55 = v49[2 * ((unint64_t)v10 >> 2) + v48];
      *(_DWORD *)(v50 + 16 * v54 + 4) = v49[(v52 + 2 * v11)];
      *(_DWORD *)(v50 + 16 * v55 + 4) = v49[v53 - 1];
      v48 = v51;
    }
    while (v12 != v51);
  }
  std::vector<unsigned int>::resize(a6, v12);
}

void _ZNSt3__16vectorIDv2_dNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t geom::`anonymous namespace'::hull_mesh<double>::new_face(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v2 = a1[4];
  if (v2 == a1[3])
  {
    v6 = (char *)a1[10];
    v5 = a1[11];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (char *)a1[9];
      v9 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v8) >> 4) + 1;
      if (v9 > 0x249249249249249)
        abort();
      v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (_QWORD)v8) >> 4);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0x124924924924924)
        v11 = 0x249249249249249;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 > 0x249249249249249)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v12 = (char *)operator new(112 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * ((v6 - v8) >> 4)];
      *(_DWORD *)v13 = -1;
      *(_OWORD *)(v13 + 4) = 0u;
      *(_OWORD *)(v13 + 20) = 0u;
      *(_OWORD *)(v13 + 36) = 0u;
      *((_DWORD *)v13 + 13) = 0;
      v13[56] = 1;
      *(_OWORD *)(v13 + 57) = 0u;
      *(_OWORD *)(v13 + 73) = 0u;
      *(_OWORD *)(v13 + 84) = 0u;
      *((_DWORD *)v13 + 25) = -1;
      *((_QWORD *)v13 + 13) = 0;
      v7 = v13 + 112;
      if (v6 != v8)
      {
        do
        {
          v14 = *((_OWORD *)v6 - 7);
          v15 = *((_OWORD *)v6 - 5);
          *((_OWORD *)v13 - 6) = *((_OWORD *)v6 - 6);
          *((_OWORD *)v13 - 5) = v15;
          *((_OWORD *)v13 - 7) = v14;
          v16 = *((_OWORD *)v6 - 4);
          v17 = *((_OWORD *)v6 - 3);
          v18 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v13 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v13 - 1) = v18;
          *((_OWORD *)v13 - 4) = v16;
          *((_OWORD *)v13 - 3) = v17;
          v13 -= 112;
          v6 -= 112;
        }
        while (v6 != v8);
        v6 = (char *)a1[9];
      }
      a1[9] = v13;
      a1[10] = v7;
      a1[11] = &v12[112 * v11];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_DWORD *)v6 = -1;
      *(_OWORD *)(v6 + 4) = 0u;
      *(_OWORD *)(v6 + 20) = 0u;
      *(_OWORD *)(v6 + 36) = 0u;
      *((_DWORD *)v6 + 13) = 0;
      v6[56] = 1;
      *(_OWORD *)(v6 + 57) = 0u;
      *(_OWORD *)(v6 + 73) = 0u;
      *(_OWORD *)(v6 + 84) = 0u;
      *((_DWORD *)v6 + 25) = -1;
      v7 = v6 + 112;
      *((_QWORD *)v6 + 13) = 0;
    }
    a1[10] = v7;
    return -1227133513 * (((unint64_t)v7 - a1[9]) >> 4) - 1;
  }
  else
  {
    result = *(unsigned int *)(v2 - 4);
    a1[4] = v2 - 4;
    v4 = a1[9] + 112 * result;
    *(_QWORD *)(v4 + 48) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_BYTE *)(v4 + 56) = 1;
    *(_QWORD *)(v4 + 96) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_OWORD *)(v4 + 80) = 0u;
  }
  return result;
}

__n128 geom::`anonymous namespace'::max_heap<geom::`anonymous namespace'::hull_mesh<double>::conflict_face,geom::`anonymous namespace'::hull_mesh<double>::conflict_face_selector_cmp>::remove(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  __n128 result;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  unint64_t v14;
  int *v15;
  int *v16;
  int v17;
  uint64_t v18;
  _BYTE v19[20];

  v2 = *a2;
  v3 = a1[3];
  if (v2 < (a1[4] - v3) >> 2)
  {
    v4 = *(unsigned int *)(v3 + 4 * v2);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      v6 = (_DWORD *)(*a1 + 24 * v4);
      *(_DWORD *)(v3 + 4 * *v6) = 0;
      v7 = a1[1];
      v9 = *(_DWORD *)(v7 - 24);
      v7 -= 24;
      v8 = v9;
      result = *(__n128 *)(v7 + 4);
      *(__n128 *)v19 = result;
      *(_DWORD *)&v19[16] = *(_DWORD *)(v7 + 20);
      a1[1] = v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v7 - v5) >> 3) != v4)
      {
        *v6 = v8;
        result = *(__n128 *)&v19[4];
        *(_OWORD *)(v5 + 24 * v4 + 8) = *(_OWORD *)&v19[4];
        *(_DWORD *)(a1[3] + 4 * v8) = v4;
        v11 = (2 * v4);
        v12 = *a1;
        for (i = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3); i > v11; LODWORD(v4) = v14)
        {
          v14 = v11 | 1;
          if (i <= v14)
          {
            LODWORD(v14) = v11;
          }
          else if (*(double *)(v12 + 24 * v11 + 16) >= *(double *)(v12 + 24 * v14 + 16))
          {
            LODWORD(v14) = v11;
          }
          result.n128_u64[0] = *(_QWORD *)(v12 + 24 * v14 + 16);
          if (result.n128_f64[0] < *(double *)(v12 + 24 * v4 + 16))
            break;
          v15 = (int *)(v12 + 24 * v4);
          v16 = (int *)(v12 + 24 * v14);
          v17 = *v15;
          *v15 = *v16;
          *v16 = v17;
          result = *(__n128 *)(v15 + 2);
          *(_OWORD *)(v15 + 2) = *(_OWORD *)(v16 + 2);
          *(__n128 *)(v16 + 2) = result;
          v12 = *a1;
          v18 = a1[3];
          *(_DWORD *)(v18 + 4 * *(unsigned int *)(*a1 + 24 * v4)) = v4;
          *(_DWORD *)(v18 + 4 * *(unsigned int *)(v12 + 24 * v14)) = v14;
          v11 = (2 * v14);
          i = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - v12) >> 3);
        }
      }
    }
  }
  return result;
}

__n128 geom::`anonymous namespace'::max_heap<geom::`anonymous namespace'::hull_mesh<double>::conflict_face,geom::`anonymous namespace'::hull_mesh<double>::conflict_face_selector_cmp>::insert(std::vector<int> *a1, unsigned int *a2, _OWORD *a3)
{
  std::vector<int>::pointer end;
  unint64_t v7;
  unint64_t v8;
  std::vector<int> *v9;
  std::vector<int>::pointer v10;
  std::vector<int>::pointer begin;
  __n128 result;
  int v13;
  unint64_t value;
  int *v15;
  std::vector<int>::pointer v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  std::vector<int>::pointer v24;
  unint64_t v25;
  int *v26;
  int *v27;
  int v28;
  std::vector<int>::pointer v29;
  BOOL v30;
  _BYTE __x[20];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  end = a1->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
  v8 = *a2;
  begin = a1[1].__begin_;
  v9 = a1 + 1;
  v10 = begin;
  if (v8 >= a1[1].__end_ - begin)
  {
    *(_DWORD *)__x = 0;
    std::vector<unsigned int>::resize(v9, (v8 + 1), (std::vector<int>::const_reference)__x);
    v8 = *a2;
    v10 = a1[1].__begin_;
    end = a1->__end_;
  }
  v10[v8] = v7;
  v13 = *a2;
  *(_OWORD *)&__x[4] = *a3;
  value = (unint64_t)a1->__end_cap_.__value_;
  if ((unint64_t)end >= value)
  {
    v16 = a1->__begin_;
    v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(value - (_QWORD)v16) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(24 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[24 * v17];
    *(_DWORD *)v22 = v13;
    result.n128_u64[0] = *(_QWORD *)__x;
    *(_OWORD *)(v22 + 4) = *(_OWORD *)__x;
    *((_DWORD *)v22 + 5) = *(_DWORD *)&__x[16];
    v15 = (int *)(v22 + 24);
    if (end != v16)
    {
      do
      {
        result = *(__n128 *)(end - 6);
        *((_QWORD *)v22 - 1) = *((_QWORD *)end - 1);
        *(__n128 *)(v22 - 24) = result;
        v22 -= 24;
        end -= 6;
      }
      while (end != v16);
      end = a1->__begin_;
    }
    a1->__begin_ = (std::vector<int>::pointer)v22;
    a1->__end_ = v15;
    a1->__end_cap_.__value_ = (int *)&v21[24 * v20];
    if (end)
      operator delete(end);
  }
  else
  {
    *end = v13;
    result.n128_u64[0] = *(_QWORD *)__x;
    *(_OWORD *)(end + 1) = *(_OWORD *)__x;
    end[5] = *(_DWORD *)&__x[16];
    v15 = end + 6;
  }
  v23 = v7;
  a1->__end_ = v15;
  if (v7 >= 2uLL)
  {
    v24 = a1->__begin_;
    do
    {
      v25 = v23 >> 1;
      result.n128_u64[0] = *(_QWORD *)&v24[6 * v23 + 4];
      if (result.n128_f64[0] < *(double *)&v24[6 * (v23 >> 1) + 4])
        break;
      v26 = &v24[6 * v25];
      v27 = &v24[6 * v23];
      v28 = *v27;
      *v27 = *v26;
      *v26 = v28;
      result = *(__n128 *)(v27 + 2);
      *(_OWORD *)(v27 + 2) = *(_OWORD *)(v26 + 2);
      *(__n128 *)(v26 + 2) = result;
      v24 = a1->__begin_;
      v29 = a1[1].__begin_;
      v29[a1->__begin_[6 * v23]] = v23;
      v29[v24[6 * v25]] = v25;
      v30 = v23 > 3;
      v23 >>= 1;
    }
    while (v30);
  }
  return result;
}

void geom::`anonymous namespace'::hull_mesh<double>::dissolve_edge_if_coplanar(uint64_t a1, int a2, unsigned int **a3, char **a4)
{
  uint64_t v5;
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  BOOL *v21;
  int v22;
  float64x2_t *v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  unsigned int v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  double v45;
  double v46;
  float64x2_t v47;
  double v49;
  BOOL v50;
  BOOL v51;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float64x2_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  _DWORD *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  _DWORD *v69;
  unsigned int v70;
  uint64_t v71;
  float64x2_t *v72;
  float64x2_t *v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  int v82;
  int *v83;
  int v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  int v97;
  int *v98;
  int v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  _BOOL4 is_halfedge_dissolvable;
  unsigned int v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  unsigned int v120;
  float64x2_t v121;
  int v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  BOOL *v127;
  _QWORD *v129;
  int v130;
  int v131;
  unsigned int v132[3];

  v131 = a2;
  v129 = (_QWORD *)(a1 + 416);
  std::deque<unsigned int>::push_back((_QWORD *)(a1 + 416), &v131);
  v5 = *(_QWORD *)(a1 + 456);
  if (v5)
  {
    v112 = (uint64_t)(a4 + 2);
    do
    {
      v6 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 424) + ((*(_QWORD *)(a1 + 448) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * (*(_QWORD *)(a1 + 448) & 0x3FFLL));
      ++*(_QWORD *)(a1 + 448);
      *(_QWORD *)(a1 + 456) = v5 - 1;
      std::deque<unsigned int>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)v129, 1);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_DWORD *)(v11 + 16 * v6);
      if (v12 != -1)
      {
        v13 = v11 + 16 * v6;
        v16 = *(_DWORD *)(v13 + 4);
        v14 = (unsigned int *)(v13 + 4);
        v15 = v16;
        v17 = *(_DWORD *)(v11 + 16 * v16);
        if (v17 != -1 && v17 != v12)
        {
          v19 = *(_QWORD *)(a1 + 72);
          v20 = v19 + 112 * v12;
          v22 = *(unsigned __int8 *)(v20 + 56);
          v21 = (BOOL *)(v20 + 56);
          if (!(v22 | *(unsigned __int8 *)(v19 + 112 * v17 + 56)))
          {
            v23 = (float64x2_t *)(v19 + 112 * v12);
            v25 = v23[1];
            v26 = v23[2];
            v24 = v23 + 1;
            v27 = v19 + 112 * v17;
            v28 = *(float64x2_t *)(v27 + 16);
            v29 = *(float64x2_t *)(v27 + 32);
            v7.f64[0] = *(float64_t *)(v27 + 48);
            v30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7.f64[0], 0);
            v31 = vdivq_f64(v29, v7);
            v32 = vdivq_f64(v28, v30);
            v8.f64[0] = v24[2].f64[0];
            v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0);
            v34 = vdivq_f64(v26, v8);
            v35 = vdivq_f64(v25, v33);
            if (vmulq_f64(v31, v34).f64[0] + vaddvq_f64(vmulq_f64(v32, v35)) > 0.0)
            {
              v37 = *(float64x2_t *)(v27 + 64);
              v36 = *(float64x2_t *)(v27 + 80);
              v38 = *(_DWORD *)(v27 + 96);
              *(_QWORD *)&v39 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
              v9.f64[0] = (double)v38;
              v40 = vdivq_f64(v37, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v38), 0));
              v41 = vdivq_f64(v36, v9);
              v10.f64[0] = (double)LODWORD(v24[5].f64[0]);
              v42 = vdivq_f64(v24[3], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10.f64[0], 0));
              v43 = vdivq_f64(v24[4], v10);
              *(_QWORD *)&v35.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
              v44 = vmulq_f64(vsubq_f64(v41, v43), v34).f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v40, v42), v35));
              v45 = *(double *)(a1 + 544);
              v46 = -v45;
              v47 = vsubq_f64(v43, v41);
              v32.f64[1] = v39;
              v32.f64[0] = vaddvq_f64(vmulq_f64(vsubq_f64(v42, v40), v32));
              v49 = vmulq_f64(v47, v31).f64[0] + v32.f64[0];
              v50 = v49 <= v45 && v49 < v46;
              v51 = v50 && v44 <= v45;
              if (!v51 || v44 >= v46)
              {
                v127 = v21;
                v126 = v25;
                v124 = v29;
                v125 = v28;
                v123 = v24[3];
                v122 = LODWORD(v24[5].f64[0]);
                v121 = v24[4];
                v120 = v38;
                v118 = v36;
                v119 = v26;
                v117 = v37;
                if (is_halfedge_dissolvable && v60)
                {
                  v61 = *(unsigned int *)(v11 + 16 * v6 + 8);
                  v62 = *(unsigned int *)(v11 + 16 * v15 + 8);
                  v113 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v62 + 4) + 8);
                  v116 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v61 + 4) + 8);
                  v63 = v6;
                  do
                  {
                    v64 = v11 + 16 * v63;
                    v66 = *(_DWORD *)(v64 + 8);
                    v65 = (_DWORD *)(v64 + 8);
                    v63 = v66;
                  }
                  while (v66 != (_DWORD)v6);
                  v67 = v15;
                  do
                  {
                    v68 = v11 + 16 * v67;
                    v70 = *(_DWORD *)(v68 + 8);
                    v69 = (_DWORD *)(v68 + 8);
                    v67 = v70;
                  }
                  while (v70 != (_DWORD)v15);
                  v132[0] = v12;
                  v71 = *(_QWORD *)(a1 + 96);
                  v72 = (float64x2_t *)(v71 + 32 * *(unsigned int *)(v11 + 16 * v6 + 12));
                  v73 = (float64x2_t *)(v71 + 32 * *(unsigned int *)(v11 + 16 * v15 + 12));
                  v74 = vaddq_f64(v125, v126);
                  v75 = vaddq_f64(v124, v119);
                  *v24 = v74;
                  v24[1] = v75;
                  v74.f64[0] = sqrt(vmulq_f64(v75, v75).f64[0] + vaddvq_f64(vmulq_f64(v74, v74)));
                  v24[2].f64[0] = v74.f64[0];
                  *v127 = v74.f64[0] <= 2.22044605e-16;
                  v76 = vaddq_f64(v121, vsubq_f64(v118, vaddq_f64(v72[1], v73[1])));
                  v24[3] = vaddq_f64(v123, vsubq_f64(v117, vaddq_f64(*v72, *v73)));
                  v24[4] = v76;
                  LODWORD(v24[5].f64[0]) = v120 + v122 - 2;
                  v77 = *v14;
                  v78 = *(_QWORD *)(a1 + 48);
                  v79 = v77;
                  do
                  {
                    v80 = (unsigned int *)(v78 + 16 * v79);
                    *v80 = v12;
                    v79 = v80[2];
                  }
                  while (v79 != v77);
                  *v65 = v62;
                  *v69 = v61;
                  *(_DWORD *)(v19 + 112 * v12) = v61;
                  v81 = v19 + 112 * v12;
                  v84 = *(_DWORD *)(v81 + 100);
                  v83 = (int *)(v81 + 100);
                  v82 = v84;
                  if (v84 != -1)
                  {
                    v86 = a4[1];
                    v85 = (unint64_t)a4[2];
                    if ((unint64_t)v86 >= v85)
                    {
                      v88 = *a4;
                      v89 = (v86 - *a4) >> 2;
                      v90 = v89 + 1;
                      if ((unint64_t)(v89 + 1) >> 62)
                        goto LABEL_72;
                      v91 = v85 - (_QWORD)v88;
                      if (v91 >> 1 > v90)
                        v90 = v91 >> 1;
                      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                        v92 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v92 = v90;
                      if (v92)
                      {
                        v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v112, v92);
                        v88 = *a4;
                        v86 = a4[1];
                        v82 = *v83;
                      }
                      else
                      {
                        v93 = 0;
                      }
                      v94 = &v93[4 * v89];
                      *(_DWORD *)v94 = v82;
                      v87 = v94 + 4;
                      while (v86 != v88)
                      {
                        v95 = *((_DWORD *)v86 - 1);
                        v86 -= 4;
                        *((_DWORD *)v94 - 1) = v95;
                        v94 -= 4;
                      }
                      *a4 = v94;
                      a4[1] = v87;
                      a4[2] = &v93[4 * v92];
                      if (v88)
                        operator delete(v88);
                    }
                    else
                    {
                      *(_DWORD *)v86 = v82;
                      v87 = v86 + 4;
                    }
                    a4[1] = v87;
                    *v83 = -1;
                  }
                  v96 = v19 + 112 * v17;
                  v99 = *(_DWORD *)(v96 + 100);
                  v98 = (int *)(v96 + 100);
                  v97 = v99;
                  if (v99 != -1)
                  {
                    v101 = a4[1];
                    v100 = (unint64_t)a4[2];
                    if ((unint64_t)v101 >= v100)
                    {
                      v103 = *a4;
                      v104 = (v101 - *a4) >> 2;
                      v105 = v104 + 1;
                      if ((unint64_t)(v104 + 1) >> 62)
LABEL_72:
                        abort();
                      v106 = v100 - (_QWORD)v103;
                      if (v106 >> 1 > v105)
                        v105 = v106 >> 1;
                      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                        v107 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v107 = v105;
                      if (v107)
                      {
                        v108 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v112, v107);
                        v103 = *a4;
                        v101 = a4[1];
                        v97 = *v98;
                      }
                      else
                      {
                        v108 = 0;
                      }
                      v109 = &v108[4 * v104];
                      *(_DWORD *)v109 = v97;
                      v102 = v109 + 4;
                      while (v101 != v103)
                      {
                        v110 = *((_DWORD *)v101 - 1);
                        v101 -= 4;
                        *((_DWORD *)v109 - 1) = v110;
                        v109 -= 4;
                      }
                      *a4 = v109;
                      a4[1] = v102;
                      a4[2] = &v108[4 * v107];
                      if (v103)
                        operator delete(v103);
                    }
                    else
                    {
                      *(_DWORD *)v101 = v97;
                      v102 = v101 + 4;
                    }
                    a4[1] = v102;
                    *v98 = -1;
                  }
                  if (!*v127)
                  {
                  }
                  v132[0] = 0;
                  v130 = 0;
                  v130 = v111;
                  if (v132[0] != -1)
                  {
                    std::deque<unsigned int>::push_back(v129, v132);
                    v111 = v130;
                  }
                  if (v111 != -1)
                    std::deque<unsigned int>::push_back(v129, &v130);
                }
              }
            }
          }
        }
      }
      v5 = *(_QWORD *)(a1 + 456);
    }
    while (v5);
  }
}

void std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F148510;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F148510;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, double a3, double a4, float64x2_t a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  uint64_t v11;
  float64x2_t *v12;
  uint64_t v13;

  v7 = *a2;
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v7 || *(_DWORD *)(a1 + 12) == (_DWORD)v7 || *(_DWORD *)(a1 + 16) == (_DWORD)v7)
    return 0;
  if (*(_BYTE *)(a1 + 24))
    return 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (float64x2_t *)(*(_QWORD *)(v11 + 96) + 32 * v7);
  v13 = *(_QWORD *)(v11 + 72) + 112 * *(unsigned int *)(a1 + 20);
  LODWORD(a5.f64[0]) = *(_DWORD *)(v13 + 96);
  a5.f64[0] = (double)*(unint64_t *)&a5.f64[0];
  a7.f64[0] = *(float64_t *)(v13 + 48);
  if (vmulq_f64(vsubq_f64(v12[1], vdivq_f64(*(float64x2_t *)(v13 + 80), a5)), vdivq_f64(*(float64x2_t *)(v13 + 32), a7)).f64[0]+ vaddvq_f64(vmulq_f64(vsubq_f64(*v12, vdivq_f64(*(float64x2_t *)(v13 + 64), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5.f64[0], 0))), vdivq_f64(*(float64x2_t *)(v13 + 16), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a7.f64[0], 0)))) > 0.0)return 1;
  else
    return 2;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target_type()
{
}

void geom::`anonymous namespace'::hull_mesh<double>::delete_face(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;

  v23 = a2;
  v6 = a1[9];
  v7 = (unsigned int *)(v6 + 112 * a2);
  if (a3)
  {
    v8 = *v7;
    do
    {
      v9 = *(_DWORD *)(a1[6] + 16 * v8 + 8);
      v8 = v9;
    }
    while (v9 != *v7);
  }
  *v7 = -1;
  v10 = v6 + 112 * a2;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 48) = 0;
  *(_BYTE *)(v10 + 56) = 1;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_DWORD *)(v10 + 96) = 0;
  v11 = a1[5];
  v12 = (unsigned int *)a1[4];
  if ((unint64_t)v12 >= v11)
  {
    v14 = (unsigned int *)a1[3];
    v15 = v12 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      abort();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 5), v18);
      v14 = (unsigned int *)a1[3];
      v12 = (unsigned int *)a1[4];
    }
    else
    {
      v19 = 0;
    }
    v20 = (unsigned int *)&v19[4 * v15];
    v21 = &v19[4 * v18];
    *v20 = a2;
    v13 = v20 + 1;
    while (v12 != v14)
    {
      v22 = *--v12;
      *--v20 = v22;
    }
    a1[3] = v20;
    a1[4] = v13;
    a1[5] = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v12 = a2;
    v13 = v12 + 1;
  }
  a1[4] = v13;
}

void std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24F148590;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F148590;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2, double a3, double a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v10;
  float64x2_t *v11;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 72);
  if (*(_BYTE *)(v8 + 112 * *a2 + 56))
    return 1;
  v10 = (float64x2_t *)(v8 + 112 * *a2);
  v11 = (float64x2_t *)(*(_QWORD *)(v7 + 96)
                      + 32 * *(unsigned int *)(*(_QWORD *)(v7 + 48) + 16 * LODWORD(v10->f64[0]) + 12));
  a7.f64[0] = v10[3].f64[0];
  return vmulq_f64(vsubq_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 16) + 16), v11[1]), vdivq_f64(v10[2], a7)).f64[0]
       + vaddvq_f64(vmulq_f64(vsubq_f64(*(float64x2_t *)*(_QWORD *)(a1 + 16), *v11), vdivq_f64(v10[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a7.f64[0], 0)))) >= -*(double *)(v7 + 544);
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

BOOL geom::`anonymous namespace'::hull_mesh<double>::is_halfedge_dissolvable(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  unsigned int *v31;
  uint64_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  unsigned int *v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  int64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(unsigned int *)(v9 + 16 * a2 + 4);
  v11 = (unsigned int *)(v9 + 16 * *(unsigned int *)(v9 + 16 * v10 + 8));
  v12 = v11[1];
  v13 = v9 + 16 * v12;
  v14 = (unsigned int *)(v9 + 16 * *(unsigned int *)(v13 + 8));
  v15 = v14[1];
  if (*(_DWORD *)(v9 + 16 * v15 + 8) != a2)
    return 1;
  if (*(_DWORD *)(v9
                 + 16
                 * *(unsigned int *)(v9
                                   + 16
                                   * *(unsigned int *)(v9
                                                     + 16
                                                     * *(unsigned int *)(v9
                                                                       + 16
                                                                       * *(unsigned int *)(v9
                                                                                         + 16
                                                                                         * *(unsigned int *)(v13 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == (_DWORD)v12)
    return 0;
  v16 = v9 + 16 * v15;
  if (*(_DWORD *)(v9
                 + 16
                 * *(unsigned int *)(v9
                                   + 16
                                   * *(unsigned int *)(v9
                                                     + 16
                                                     * *(unsigned int *)(v9
                                                                       + 16
                                                                       * *(unsigned int *)(v9
                                                                                         + 16
                                                                                         * *(unsigned int *)(v16 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == (_DWORD)v15)
    return 0;
  v17 = *(_QWORD *)(a1 + 72);
  v18 = *v14;
  v19 = *(_DWORD *)(v17 + 112 * *v14 + 96);
  if (v19 == 3)
    return 0;
  v20 = (unsigned int *)(v9 + 16 * a2);
  v23 = *v20;
  v21 = v20 + 3;
  v22 = v23;
  v24 = *(_DWORD *)(v17 + 112 * v23 + 96);
  if (v24 == 3)
    return 0;
  v25 = (float64x2_t *)(v17 + 112 * v18);
  v27 = v25[1];
  v26 = v25[2];
  v28 = (float64x2_t *)(v17 + 112 * v22);
  v29 = vaddq_f64(v27, v28[1]);
  v30 = vaddq_f64(v26, v28[2]);
  a9.f64[0] = sqrt(vmulq_f64(v30, v30).f64[0] + vaddvq_f64(vmulq_f64(v29, v29)));
  if (fabs(a9.f64[0]) <= 2.22044605e-16)
    return 1;
  v31 = (unsigned int *)(v9 + 16 * v10 + 12);
  v32 = *(_QWORD *)(a1 + 96);
  v33 = (float64x2_t *)(v32 + 32 * *v21);
  v35 = *v33;
  v34 = v33[1];
  v36 = v17 + 112 * *v11;
  v37 = (float64x2_t *)(v17 + 112 * v22);
  v38 = vaddq_f64(*(float64x2_t *)(v36 + 64), v37[4]);
  v39 = vaddq_f64(*(float64x2_t *)(v36 + 80), v37[5]);
  v40 = (float64x2_t *)(v32 + 32 * *v31);
  v41.f64[0] = v33->f64[0];
  *(_QWORD *)&v41.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  __asm { FMOV            V7.2D, #-2.0 }
  v46 = vmlaq_f64(vsubq_f64(v38, *v40), _Q7, v41);
  v47 = vmlaq_f64(vsubq_f64(v39, v40[1]), _Q7, v34);
  _Q7.f64[0] = (double)(v24 + *(_DWORD *)(v36 + 96) - 3);
  v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q7.f64[0], 0);
  v49 = vdivq_f64(v47, _Q7);
  v50 = vdivq_f64(v46, v48);
  v51 = vmulq_f64(vdivq_f64(v30, a9), vsubq_f64(v34, v49)).f64[0]
      + vaddvq_f64(vmulq_f64(vdivq_f64(v29, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a9.f64[0], 0)), vsubq_f64(*v33, v50)));
  v52 = *(double *)(a1 + 544);
  v53 = -v52;
  if (v51 > v52 || v51 < v53)
    return 0;
  v55 = (unsigned int *)(v9 + 16 * v12 + 12);
  v50.f64[0] = (double)(v19 - 1);
  v56 = vdivq_f64(vsubq_f64(v25[5], v34), v50);
  v57 = (float64x2_t *)(v32 + 32 * *(unsigned int *)(v16 + 12));
  v58 = v57[1];
  v59 = (float64x2_t *)(v32 + 32 * *v55);
  v60 = v59[1];
  v61 = vnegq_f64(v58);
  *(_QWORD *)&v62.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v61, *v59, 1), v60, *v57, 1);
  *(_QWORD *)&v63.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v34), *v59, 1), v60, v35, 1);
  v60.f64[1] = v59->f64[0];
  v64 = vnegq_f64(*v57);
  v58.f64[1] = v57->f64[0];
  v65 = (int64x2_t)vmlaq_f64(vmulq_f64(v60, v64), *v59, v58);
  *(_QWORD *)&v62.f64[1] = v65.i64[0];
  v66 = vdivq_f64(vsubq_f64(v25[4], v35), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v50.f64[0], 0));
  v67 = vaddq_f64(v27, v62);
  v68.f64[0] = v33[1].f64[0];
  v68.f64[1] = v33->f64[0];
  v69 = (int64x2_t)vmlaq_f64(vmulq_f64(v68, v64), v35, v58);
  *(_QWORD *)&v61.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v61, v35, 1), v34, *v57, 1);
  *(_QWORD *)&v61.f64[1] = v69.i64[0];
  v70 = (int64x2_t)vmlaq_f64(vmulq_f64(v60, vnegq_f64(v35)), *v59, v68);
  *(_QWORD *)&v63.f64[1] = v70.i64[0];
  v71 = vsubq_f64(vsubq_f64(v67, v61), v63);
  v72 = vsubq_f64(vsubq_f64(vaddq_f64(v26, (float64x2_t)vdupq_laneq_s64(v65, 1)), (float64x2_t)vdupq_laneq_s64(v69, 1)), (float64x2_t)vdupq_laneq_s64(v70, 1));
  v73 = vmulq_f64(v72, v72);
  v73.f64[0] = sqrt(v73.f64[0] + vaddvq_f64(vmulq_f64(v71, v71)));
  v74 = vmulq_f64(vsubq_f64(v34, v56), vdivq_f64(v72, v73)).f64[0]
      + vaddvq_f64(vmulq_f64(vsubq_f64(v35, v66), vdivq_f64(v71, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v73.f64[0], 0))));
  return v74 <= v52 && v74 >= v53;
}

uint64_t geom::`anonymous namespace'::hull_mesh<double>::dissolve_vertex_if_redundant(_QWORD *a1, unsigned int a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t *v50;
  uint64_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  int64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  _DWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  int v83;
  int *v84;
  int v85;
  unint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  unsigned int v89;
  _DWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;

  v4 = a1[9];
  if (0x6DB6DB6DB6DB6DB7 * ((a1[10] - v4) >> 4) - ((uint64_t)(a1[4] - a1[3]) >> 2) == 2)
    return 0xFFFFFFFFLL;
  v6 = a1[6];
  v7 = *(unsigned int *)(v6 + 16 * a2 + 4);
  v8 = *(unsigned int *)(v6 + 16 * v7 + 8);
  if (*(_DWORD *)(v6 + 16 * *(unsigned int *)(v6 + 16 * v8 + 4) + 8) != a2)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)(v4 + 112 * *(unsigned int *)(v6 + 16 * v7) + 96) >= *(_DWORD *)(v4
                                                                                   + 112
                                                                                   * *(unsigned int *)(v6 + 16 * a2)
                                                                                   + 96))
    v11 = a2;
  else
    v11 = v8;
  v12 = v11;
  do
  {
    v13 = v12;
    v12 = *(_DWORD *)(v6 + 16 * v12 + 8);
  }
  while (v12 != (_DWORD)v11);
  v14 = v13;
  v15 = *(unsigned int *)(v6 + 16 * a2 + 8);
  v16 = (unsigned int *)(v6 + 16 * v11);
  if (*(_DWORD *)(v6 + 16 * v15 + 8) == v13)
  {
    v17 = *v16;
    v101 = *(unsigned int *)(v6 + 16 * v13 + 4);
    v102 = *(_DWORD *)(v6 + 16 * v101 + 8);
    v18 = *(unsigned int *)(v6 + 16 * v11 + 4);
    v19 = *(_DWORD *)(v6 + 16 * v11 + 4);
    do
    {
      v20 = v19;
      v19 = *(_DWORD *)(v6 + 16 * v19 + 8);
    }
    while (v19 != (_DWORD)v18);
    v106 = *(_DWORD *)(v6 + 16 * v18);
    v21 = v106;
    v22 = (float64x2_t *)(a1[12] + 32 * *(unsigned int *)(v6 + 16 * v11 + 12));
    v23 = 112 * v106;
    v24 = (float64x2_t *)(v4 + v23);
    v25 = (float64x2_t *)(v4 + 112 * v17);
    v26 = vaddq_f64(v25[2], v24[2]);
    v27 = vaddq_f64(v25[1], v24[1]);
    v24[1] = v27;
    v24[2] = v26;
    v27.f64[0] = sqrt(vmulq_f64(v26, v26).f64[0] + vaddvq_f64(vmulq_f64(v27, v27)));
    v28 = a1[9] + v23;
    *(float64_t *)(v28 + 48) = v27.f64[0];
    *(_BYTE *)(v28 + 56) = v27.f64[0] <= 2.22044605e-16;
    v29 = vsubq_f64(*(float64x2_t *)(v28 + 80), v22[1]);
    *(float64x2_t *)(v28 + 64) = vsubq_f64(*(float64x2_t *)(v28 + 64), *v22);
    *(float64x2_t *)(v28 + 80) = v29;
    v30 = a1[9];
    --*(_DWORD *)(v30 + v23 + 96);
    v32 = (int *)(v30 + 112 * v17 + 100);
    v31 = *v32;
    v103 = v17;
    if (*v32 != -1)
    {
      v33 = *(_QWORD *)(a4 + 16);
      v34 = *(_DWORD **)(a4 + 8);
      if ((unint64_t)v34 >= v33)
      {
        v73 = *(_DWORD **)a4;
        v74 = ((uint64_t)v34 - *(_QWORD *)a4) >> 2;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62)
          goto LABEL_58;
        v76 = v33 - (_QWORD)v73;
        if (v76 >> 1 > v75)
          v75 = v76 >> 1;
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v77 = v75;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v77);
          v73 = *(_DWORD **)a4;
          v34 = *(_DWORD **)(a4 + 8);
          v31 = *v32;
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[4 * v74];
        v80 = &v78[4 * v77];
        *(_DWORD *)v79 = v31;
        v35 = v79 + 4;
        while (v34 != v73)
        {
          v81 = *--v34;
          *((_DWORD *)v79 - 1) = v81;
          v79 -= 4;
        }
        *(_QWORD *)a4 = v79;
        *(_QWORD *)(a4 + 8) = v35;
        *(_QWORD *)(a4 + 16) = v80;
        if (v73)
          operator delete(v73);
        LODWORD(v17) = v103;
      }
      else
      {
        *v34 = v31;
        v35 = v34 + 1;
      }
      *(_QWORD *)(a4 + 8) = v35;
      v30 = a1[9];
      *(_DWORD *)(v30 + 112 * v17 + 100) = -1;
      v21 = v106;
    }
    v82 = v30 + 112 * v21;
    v85 = *(_DWORD *)(v82 + 100);
    v84 = (int *)(v82 + 100);
    v83 = v85;
    if (v85 == -1)
    {
      v89 = v21;
LABEL_55:
      *(_DWORD *)(a1[6] + 16 * v15) = v21;
      v99 = a1[9] + 112 * v89;
      *(_DWORD *)v99 = v15;
      v100 = a1[6];
      *(_DWORD *)(v100 + 16 * v20 + 8) = v15;
      *(_DWORD *)(v100 + 16 * v15 + 8) = v102;
      if (!*(_BYTE *)(v99 + 56))
      {
      }
      return v15;
    }
    v86 = *(_QWORD *)(a4 + 16);
    v87 = *(_DWORD **)(a4 + 8);
    if ((unint64_t)v87 < v86)
    {
      *v87 = v83;
      v88 = v87 + 1;
LABEL_54:
      *(_QWORD *)(a4 + 8) = v88;
      v89 = v106;
      *(_DWORD *)(a1[9] + 112 * v106 + 100) = -1;
      v21 = v89;
      goto LABEL_55;
    }
    v90 = *(_DWORD **)a4;
    v91 = ((uint64_t)v87 - *(_QWORD *)a4) >> 2;
    v92 = v91 + 1;
    if (!((unint64_t)(v91 + 1) >> 62))
    {
      v93 = v86 - (_QWORD)v90;
      if (v93 >> 1 > v92)
        v92 = v93 >> 1;
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
        v94 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v94 = v92;
      if (v94)
      {
        v95 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v94);
        v90 = *(_DWORD **)a4;
        v87 = *(_DWORD **)(a4 + 8);
        v83 = *v84;
      }
      else
      {
        v95 = 0;
      }
      v96 = &v95[4 * v91];
      v97 = &v95[4 * v94];
      *(_DWORD *)v96 = v83;
      v88 = v96 + 4;
      while (v87 != v90)
      {
        v98 = *--v87;
        *((_DWORD *)v96 - 1) = v98;
        v96 -= 4;
      }
      *(_QWORD *)a4 = v96;
      *(_QWORD *)(a4 + 8) = v88;
      *(_QWORD *)(a4 + 16) = v97;
      if (v90)
        operator delete(v90);
      goto LABEL_54;
    }
LABEL_58:
    abort();
  }
  v37 = v6 + 16 * v11;
  v38 = *(_QWORD *)(v37 + 4);
  v39 = (unsigned int *)(v6 + 16 * v38);
  v41 = v39[2];
  v40 = v39[3];
  v42 = v6 + 16 * v41;
  v15 = *(unsigned int *)(v42 + 4);
  v43 = (unsigned int *)(v6 + 16 * v15);
  *(_QWORD *)(v43 + 1) = v38;
  LODWORD(v42) = *(_DWORD *)(v42 + 8);
  v39[1] = v15;
  v39[2] = v42;
  *(_DWORD *)(v4 + 112 * *v43) = v15;
  v44 = *v39;
  v45 = v4 + 112 * *v39;
  *(_DWORD *)v45 = v38;
  v46 = *v16;
  v104 = v44;
  v105 = v46;
  v47 = a1[12];
  v48 = (float64x2_t *)(v47 + 32 * v43[3]);
  v49 = (float64x2_t *)(v47 + 32 * *(unsigned int *)(v37 + 12));
  v50 = (float64x2_t *)(v47 + 32 * v40);
  v51 = v4 + 112 * v46;
  v52 = v48[1];
  v53 = v49[1];
  v54 = vnegq_f64(v52);
  v55 = vmlaq_laneq_f64(vmulq_laneq_f64(v54, *v49, 1), v53, *v48, 1);
  v56 = vnegq_f64(v53);
  v53.f64[1] = v49->f64[0];
  v57 = vnegq_f64(*v48);
  v52.f64[1] = v48->f64[0];
  v58 = vmlaq_f64(vmulq_f64(v53, v57), *v49, v52);
  v59 = v50[1];
  v60 = vmlaq_laneq_f64(vmulq_laneq_f64(v56, *v50, 1), v59, *v49, 1);
  *(_QWORD *)&v54.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v54, *v50, 1), v59, *v48, 1);
  v59.f64[1] = v50->f64[0];
  v61 = vmlaq_f64(vmulq_f64(v59, v57), *v50, v52);
  v62 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v61, 1);
  v54.f64[1] = v61.f64[0];
  v63 = (int64x2_t)vaddq_f64(v58, vmlaq_f64(vmulq_f64(v59, vnegq_f64(*v49)), *v50, v53));
  *(_QWORD *)&v61.f64[0] = *(_OWORD *)&vaddq_f64(v55, v60);
  *(_QWORD *)&v61.f64[1] = v63.i64[0];
  v64 = (float64x2_t)vdupq_laneq_s64(v63, 1);
  v65 = vsubq_f64(*(float64x2_t *)(v51 + 32), v64);
  *(float64x2_t *)(v51 + 16) = vsubq_f64(*(float64x2_t *)(v51 + 16), v61);
  *(float64x2_t *)(v51 + 32) = v65;
  v66 = vaddq_f64(*(float64x2_t *)(v45 + 32), v64);
  *(float64x2_t *)(v45 + 16) = vaddq_f64(*(float64x2_t *)(v45 + 16), v61);
  *(float64x2_t *)(v45 + 32) = v66;
  v67 = vaddq_f64(*(float64x2_t *)(v51 + 32), v62);
  *(float64x2_t *)(v51 + 16) = vaddq_f64(*(float64x2_t *)(v51 + 16), v54);
  *(float64x2_t *)(v51 + 32) = v67;
  v68 = vsubq_f64(*(float64x2_t *)(v45 + 16), v54);
  v69 = vsubq_f64(*(float64x2_t *)(v45 + 32), v62);
  *(float64x2_t *)(v45 + 16) = v68;
  *(float64x2_t *)(v45 + 32) = v69;
  *(double *)(v51 + 48) = sqrt(vmulq_f64(*(float64x2_t *)(v51 + 32), *(float64x2_t *)(v51 + 32)).f64[0]+ vaddvq_f64(vmulq_f64(*(float64x2_t *)(v51 + 16), *(float64x2_t *)(v51 + 16))));
  v69.f64[0] = sqrt(vmulq_f64(v69, v69).f64[0] + vaddvq_f64(vmulq_f64(v68, v68)));
  *(float64_t *)(v45 + 48) = v69.f64[0];
  *(_BYTE *)(v51 + 56) = *(double *)(v51 + 48) <= 2.22044605e-16;
  *(_BYTE *)(v45 + 56) = v69.f64[0] <= 2.22044605e-16;
  v70 = v45 + 56;
  v71 = vsubq_f64(*(float64x2_t *)(v51 + 80), v49[1]);
  *(float64x2_t *)(v51 + 64) = vsubq_f64(*(float64x2_t *)(v51 + 64), *v49);
  *(float64x2_t *)(v51 + 80) = v71;
  v72 = vsubq_f64(*(float64x2_t *)(v70 + 24), v49[1]);
  *(float64x2_t *)(v70 + 8) = vsubq_f64(*(float64x2_t *)(v70 + 8), *v49);
  *(float64x2_t *)(v70 + 24) = v72;
  --*(_DWORD *)(v51 + 96);
  --*(_DWORD *)(v70 + 40);
  if (!*(_BYTE *)(v51 + 56))
  {
  }
  if (!*(_BYTE *)v70)
  {
  }
  return v15;
}

void std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F148610;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F148610;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  double v12;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  result = *(unsigned int *)(a1 + 20);
  if ((_DWORD)result)
  {
    v5 = 0;
    v9 = *(_QWORD *)(v2 + 96) + 32 * v3;
    v7 = *(float64x2_t *)v9;
    v6 = *(float64x2_t *)(v9 + 16);
    LODWORD(v9) = -1;
    v10 = 1;
    v11 = -INFINITY;
    do
    {
      v8 = *(_QWORD *)(v2 + 392);
      v12 = vmulq_f64(vsubq_f64(v6, *(float64x2_t *)(v8 + 32 * (v10 - 1) + 16)), *(float64x2_t *)(v8 + 32 * v10 + 16)).f64[0]+ vaddvq_f64(vmulq_f64(vsubq_f64(v7, *(float64x2_t *)(v8 + 32 * (v10 - 1))), *(float64x2_t *)(v8 + 32 * v10)));
      if (v12 <= v11)
      {
        v9 = v9;
      }
      else
      {
        v11 = v12;
        v9 = v5;
      }
      ++v5;
      v10 += 2;
    }
    while (result != v5);
  }
  else
  {
    v9 = 0xFFFFFFFFLL;
    v11 = -INFINITY;
  }
  if (v11 > *(double *)(v2 + 544) * -2.0)
  {
    *(double *)(*(_QWORD *)(v2 + 120) + 8 * v3) = v11;
    return v9;
  }
  return result;
}

uint64_t std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::`anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:nn180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:nn180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

double geom_create_bvh_create_opt_2f()
{
  uint64_t opt_2f_obj_alloc;
  double result;

  opt_2f_obj_alloc = geom_bvh_create_opt_2f_obj_alloc();
  result = 0.0;
  *(_OWORD *)(opt_2f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2f_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_2f_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_2f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2f_obj_alloc + 48) = 1;
  return result;
}

double geom_create_bvh_create_opt_2d()
{
  uint64_t opt_2d_obj_alloc;
  double result;

  opt_2d_obj_alloc = geom_bvh_create_opt_2d_obj_alloc();
  result = 0.0;
  *(_OWORD *)(opt_2d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2d_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_2d_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_2d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2d_obj_alloc + 48) = 1;
  return result;
}

double geom_create_bvh_create_opt_3f()
{
  uint64_t opt_3f_obj_alloc;
  double result;

  opt_3f_obj_alloc = geom_bvh_create_opt_3f_obj_alloc();
  result = 0.0;
  *(_OWORD *)(opt_3f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3f_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_3f_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_3f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3f_obj_alloc + 48) = 1;
  return result;
}

double geom_create_bvh_create_opt_3d()
{
  uint64_t opt_3d_obj_alloc;
  double result;

  opt_3d_obj_alloc = geom_bvh_create_opt_3d_obj_alloc();
  result = 0.0;
  *(_OWORD *)(opt_3d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3d_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_3d_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_3d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3d_obj_alloc + 48) = 1;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_2f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_2f(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_2d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_2d(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_3f(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_3f(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_3d(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_3d(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_2f(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_2f(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if (*(_DWORD *)(a1 + 48) == 1)
    return *(unsigned int *)(a1 + 32);
  v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_2f(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_2f(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1)
    *(_DWORD *)(result + 48) = 1;
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_2f(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 48))
  {
    v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_2f(v3, v4, v5);
  }
  else
  {
    if (a2)
      *a2 = *(_QWORD *)(result + 32);
    if (a3)
      *a3 = *(_DWORD *)(result + 40);
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_2f(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48))
    *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_2d(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_2d(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if (*(_DWORD *)(a1 + 48) == 1)
    return *(unsigned int *)(a1 + 32);
  v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_2d(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_2d(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1)
    *(_DWORD *)(result + 48) = 1;
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_2d(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 48))
  {
    v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_2d(v3, v4, v5);
  }
  else
  {
    if (a2)
      *a2 = *(_QWORD *)(result + 32);
    if (a3)
      *a3 = *(_DWORD *)(result + 40);
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_2d(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48))
    *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_3f(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_3f(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if (*(_DWORD *)(a1 + 48) == 1)
    return *(unsigned int *)(a1 + 32);
  v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_3f(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_3f(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1)
    *(_DWORD *)(result + 48) = 1;
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_3f(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 48))
  {
    v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_3f(v3, v4, v5);
  }
  else
  {
    if (a2)
      *a2 = *(_QWORD *)(result + 32);
    if (a3)
      *a3 = *(_DWORD *)(result + 40);
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_3f(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48))
    *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_3d(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_3d(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if (*(_DWORD *)(a1 + 48) == 1)
    return *(unsigned int *)(a1 + 32);
  v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_3d(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_3d(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1)
    *(_DWORD *)(result + 48) = 1;
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_3d(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 48))
  {
    v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_3d(v3, v4, v5);
  }
  else
  {
    if (a2)
      *a2 = *(_QWORD *)(result + 32);
    if (a3)
      *a3 = *(_DWORD *)(result + 40);
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_3d(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48))
    *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_2f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_2f(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_2d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_2d(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_3f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_3f(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_3d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_3d(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t geom_create_bvh_with_default_options_2f(const void *a1, void *a2, const void *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0u;
  v6 = 0u;
  v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<float,(unsigned char)2>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_2f(const void *a1, void *a2, const void *a3, uint64_t a4)
{
  return create_bvh_with_opt<float,(unsigned char)2>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<float,(unsigned char)2>(const void *a1, void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;

  if (a5)
  {
    v9 = a5;
    geom::bvh<float,(unsigned char)2>::reset(a5 + 16, a2, (uint64_t)a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    v9 = geom_bvh_2f_obj_alloc();
    geom::bvh<float,(unsigned char)2>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_2f(v12);
}

uint64_t geom_recreate_bvh_with_options_2f(uint64_t a1, const void *a2, void *a3, const void *a4, uint64_t a5)
{
  return create_bvh_with_opt<float,(unsigned char)2>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_with_default_options_2d(const void *a1, void *a2, const void *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0u;
  v6 = 0u;
  v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<double,(unsigned char)2>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_2d(const void *a1, void *a2, const void *a3, uint64_t a4)
{
  return create_bvh_with_opt<double,(unsigned char)2>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<double,(unsigned char)2>(const void *a1, void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;

  if (a5)
  {
    v9 = a5;
    geom::bvh<double,(unsigned char)2>::reset(a5 + 16, a2, (uint64_t)a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    v9 = geom_bvh_2d_obj_alloc();
    geom::bvh<double,(unsigned char)2>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_2d(v12);
}

uint64_t geom_recreate_bvh_with_options_2d(uint64_t a1, const void *a2, void *a3, const void *a4, uint64_t a5)
{
  return create_bvh_with_opt<double,(unsigned char)2>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_with_default_options_3f(const void *a1, void *a2, const void *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0u;
  v6 = 0u;
  v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<float,(unsigned char)3>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_3f(const void *a1, void *a2, const void *a3, uint64_t a4)
{
  return create_bvh_with_opt<float,(unsigned char)3>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<float,(unsigned char)3>(const void *a1, void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;

  if (a5)
  {
    v9 = a5;
    geom::bvh<float,(unsigned char)3>::reset(a5 + 16, a2, (uint64_t)a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    v9 = geom_bvh_3f_obj_alloc();
    geom::bvh<float,(unsigned char)3>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_3f(v12);
}

uint64_t geom_recreate_bvh_with_options_3f(uint64_t a1, const void *a2, void *a3, const void *a4, uint64_t a5)
{
  return create_bvh_with_opt<float,(unsigned char)3>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_with_default_options_3d(const void *a1, void *a2, const void *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0u;
  v6 = 0u;
  v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<double,(unsigned char)3>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_3d(const void *a1, void *a2, const void *a3, uint64_t a4)
{
  return create_bvh_with_opt<double,(unsigned char)3>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<double,(unsigned char)3>(const void *a1, void *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;

  if (a5)
  {
    v9 = a5;
    geom::bvh<double,(unsigned char)3>::reset(a5 + 16, a2, (uint64_t)a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    v9 = geom_bvh_3d_obj_alloc();
    geom::bvh<double,(unsigned char)3>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_3d(v12);
}

uint64_t geom_recreate_bvh_with_options_3d(uint64_t a1, const void *a2, void *a3, const void *a4, uint64_t a5)
{
  return create_bvh_with_opt<double,(unsigned char)3>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_2f(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  return create_bvh<float,(unsigned char)2>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<float,(unsigned char)2>(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  _QWORD *v13;

  v12 = geom_bvh_2f_obj_alloc();
  v13 = (_QWORD *)geom::bvh<float,(unsigned char)2>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t geom_create_bvh_2d(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  return create_bvh<double,(unsigned char)2>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<double,(unsigned char)2>(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  _QWORD *v13;

  v12 = geom_bvh_2d_obj_alloc();
  v13 = (_QWORD *)geom::bvh<double,(unsigned char)2>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t geom_create_bvh_3f(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  return create_bvh<float,(unsigned char)3>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<float,(unsigned char)3>(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  _QWORD *v13;

  v12 = geom_bvh_3f_obj_alloc();
  v13 = (_QWORD *)geom::bvh<float,(unsigned char)3>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t geom_create_bvh_3d(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5)
{
  return create_bvh<double,(unsigned char)3>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<double,(unsigned char)3>(const void *a1, const void *a2, const void *a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12;
  _QWORD *v13;

  v12 = geom_bvh_3d_obj_alloc();
  v13 = (_QWORD *)geom::bvh<double,(unsigned char)3>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t create_bvh_custom_heuristic<float,(unsigned char)2,true>(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = a5;
  v11 = geom_bvh_2f_obj_alloc();
  v12 = geom::bvh<float,(unsigned char)2>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v25[0] = &off_24F148690;
  v25[1] = a4;
  v26 = v25;
  v23[0] = &off_24F148BF0;
  v23[1] = &v20;
  v24 = v23;
  v22 = v21;
  v21[0] = &off_24F148690;
  v21[1] = a4;
  geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(v12, (uint64_t)v23, (uint64_t)v21, a6);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
LABEL_6:
  v15 = v24;
  if (v24 == v23)
  {
    v16 = 4;
    v15 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v16 = 5;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v16))(v15);
LABEL_11:
  v17 = v26;
  if (v26 == v25)
  {
    v18 = 4;
    v17 = v25;
    goto LABEL_15;
  }
  if (v26)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(_QWORD *))(*v17 + 8 * v18))(v17);
  }
  return v11;
}

void sub_2288B80D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

uint64_t create_bvh_custom_heuristic<double,(unsigned char)2,true>(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = a5;
  v11 = geom_bvh_2d_obj_alloc();
  v12 = geom::bvh<double,(unsigned char)2>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v25[0] = &off_24F1487B0;
  v25[1] = a4;
  v26 = v25;
  v23[0] = &off_24F148C70;
  v23[1] = &v20;
  v24 = v23;
  v22 = v21;
  v21[0] = &off_24F1487B0;
  v21[1] = a4;
  geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(v12, (uint64_t)v23, (uint64_t)v21, a6);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
LABEL_6:
  v15 = v24;
  if (v24 == v23)
  {
    v16 = 4;
    v15 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v16 = 5;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v16))(v15);
LABEL_11:
  v17 = v26;
  if (v26 == v25)
  {
    v18 = 4;
    v17 = v25;
    goto LABEL_15;
  }
  if (v26)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(_QWORD *))(*v17 + 8 * v18))(v17);
  }
  return v11;
}

void sub_2288B82A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

uint64_t create_bvh_custom_heuristic<float,(unsigned char)3,true>(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = a5;
  v11 = geom_bvh_3f_obj_alloc();
  v12 = geom::bvh<float,(unsigned char)3>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v25[0] = &off_24F148950;
  v25[1] = a4;
  v26 = v25;
  v23[0] = &off_24F148CF0;
  v23[1] = &v20;
  v24 = v23;
  v22 = v21;
  v21[0] = &off_24F148950;
  v21[1] = a4;
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(v12, (uint64_t)v23, (uint64_t)v21, a6);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
LABEL_6:
  v15 = v24;
  if (v24 == v23)
  {
    v16 = 4;
    v15 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v16 = 5;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v16))(v15);
LABEL_11:
  v17 = v26;
  if (v26 == v25)
  {
    v18 = 4;
    v17 = v25;
    goto LABEL_15;
  }
  if (v26)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(_QWORD *))(*v17 + 8 * v18))(v17);
  }
  return v11;
}

void sub_2288B8478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

uint64_t create_bvh_custom_heuristic<double,(unsigned char)3,true>(const void *a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = a5;
  v11 = geom_bvh_3d_obj_alloc();
  v12 = geom::bvh<double,(unsigned char)3>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v25[0] = &off_24F148AE0;
  v25[1] = a4;
  v26 = v25;
  v23[0] = &off_24F148D70;
  v23[1] = &v20;
  v24 = v23;
  v22 = v21;
  v21[0] = &off_24F148AE0;
  v21[1] = a4;
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(v12, (uint64_t)v23, (uint64_t)v21, a6);
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
LABEL_6:
  v15 = v24;
  if (v24 == v23)
  {
    v16 = 4;
    v15 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v16 = 5;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v16))(v15);
LABEL_11:
  v17 = v26;
  if (v26 == v25)
  {
    v18 = 4;
    v17 = v25;
    goto LABEL_15;
  }
  if (v26)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(_QWORD *))(*v17 + 8 * v18))(v17);
  }
  return v11;
}

void sub_2288B8648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

void geom_triangle_mesh_bvh_3f_dispose(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v2 = a1 + 144;
  if (*(_BYTE *)(a1 + 160) && *(_QWORD *)v2)
    MEMORY[0x22E2B7674](*(_QWORD *)v2, 0x1000C80451B5BE8);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = (_QWORD *)(a1 + 168);
  if (*(_BYTE *)(a1 + 184) && *v3)
    MEMORY[0x22E2B7674](*v3, 0x1000C8052888210);
  *v3 = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = v4;
    operator delete(v4);
  }
}

void geom_triangle_mesh_bvh_3d_dispose(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v2 = a1 + 144;
  if (*(_BYTE *)(a1 + 160) && *(_QWORD *)v2)
    MEMORY[0x22E2B7674](*(_QWORD *)v2, 0x1000C80E0EAB150);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = (_QWORD *)(a1 + 168);
  if (*(_BYTE *)(a1 + 184) && *v3)
    MEMORY[0x22E2B7674](*v3, 0x1000C8052888210);
  *v3 = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = v4;
    operator delete(v4);
  }
}

uint64_t geom_bezier_curve_bvh_2f_dispose(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = result;
  v2 = result + 120;
  if (*(_BYTE *)(result + 136))
  {
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
      result = MEMORY[0x22E2B7674](result, 0x1000C8000313F17);
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = (uint64_t *)(v1 + 144);
  if (*(_BYTE *)(v1 + 160))
  {
    result = *v3;
    if (*v3)
      result = MEMORY[0x22E2B7674](result, 0x1000C8052888210);
  }
  *v3 = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  return result;
}

uint64_t geom_bezier_curve_bvh_2d_dispose(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = result;
  v2 = result + 120;
  if (*(_BYTE *)(result + 136))
  {
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
      result = MEMORY[0x22E2B7674](result, 0x1000C80451B5BE8);
  }
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 0;
  v3 = (uint64_t *)(v1 + 144);
  if (*(_BYTE *)(v1 + 160))
  {
    result = *v3;
    if (*v3)
      result = MEMORY[0x22E2B7674](result, 0x1000C8052888210);
  }
  *v3 = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_BYTE *)(v1 + 160) = 0;
  return result;
}

_QWORD *geom_create_triangle_mesh_bvh_3f(uint64_t a1, float32x4_t *a2, uint64_t a3, char *a4, int a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v9 = v8[19];
  v15[0] = v8[18];
  v15[1] = v9;
  v10 = v8[22];
  v14[0] = v8[21];
  v14[1] = v10;
  v11 = (uint64_t)(v8[7] - v8[6]) >> 2;
  v13[0] = v8[6];
  v13[1] = v11;
  return v8;
}

_QWORD *geom_create_triangle_mesh_bvh_3d(uint64_t a1, char *a2, uint64_t a3, char *a4, int a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v9 = v8[19];
  v15[0] = v8[18];
  v15[1] = v9;
  v10 = v8[22];
  v14[0] = v8[21];
  v14[1] = v10;
  v11 = (uint64_t)(v8[7] - v8[6]) >> 2;
  v13[0] = v8[6];
  v13[1] = v11;
  return v8;
}

_QWORD *geom_create_triangle_mesh_bvh_custom_heuristic_3f(uint64_t a1, float32x4_t *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, int a7)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v23 = a6;
  v28[0] = &off_24F148950;
  v28[1] = a5;
  v29 = v28;
  v26[0] = &off_24F148DF0;
  v26[1] = &v23;
  v27 = v26;
  v25 = v24;
  v24[0] = &off_24F148950;
  v24[1] = a5;
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>((uint64_t)(v9 + 2), (uint64_t)v26, (uint64_t)v24, a7);
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = v9[19];
  v22[0] = v9[18];
  v22[1] = v14;
  v15 = v9[22];
  v21[0] = v9[21];
  v21[1] = v15;
  v16 = (uint64_t)(v9[7] - v9[6]) >> 2;
  v20[0] = v9[6];
  v20[1] = v16;
  v17 = v29;
  if (v29 == v28)
  {
    v18 = 4;
    v17 = v28;
    goto LABEL_15;
  }
  if (v29)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  return v9;
}

void sub_2288B8B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 48);
  if (v25 == (_QWORD *)(v23 - 72))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 72);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *geom_create_triangle_mesh_bvh_custom_heuristic_3d(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, int a7)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v23 = a6;
  v28[0] = &off_24F148AE0;
  v28[1] = a5;
  v29 = v28;
  v26[0] = &off_24F148E70;
  v26[1] = &v23;
  v27 = v26;
  v25 = v24;
  v24[0] = &off_24F148AE0;
  v24[1] = a5;
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>((uint64_t)(v9 + 2), (uint64_t)v26, (uint64_t)v24, a7);
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = v9[19];
  v22[0] = v9[18];
  v22[1] = v14;
  v15 = v9[22];
  v21[0] = v9[21];
  v21[1] = v15;
  v16 = (uint64_t)(v9[7] - v9[6]) >> 2;
  v20[0] = v9[6];
  v20[1] = v16;
  v17 = v29;
  if (v29 == v28)
  {
    v18 = 4;
    v17 = v28;
    goto LABEL_15;
  }
  if (v29)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  return v9;
}

void sub_2288B8D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;

  v25 = *(_QWORD **)(v23 - 48);
  if (v25 == (_QWORD *)(v23 - 72))
  {
    v26 = 4;
    v25 = (_QWORD *)(v23 - 72);
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geom_create_triangle_mesh_bvh_with_default_options_3f(uint64_t a1, float32x4_t *a2, uint64_t a3, char *a4)
{
  uint64_t opt_3f_obj_alloc;

  opt_3f_obj_alloc = geom_bvh_create_opt_3f_obj_alloc();
  *(_OWORD *)(opt_3f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3f_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_3f_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_3f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3f_obj_alloc + 48) = 1;
}

uint64_t geom_create_triangle_mesh_bvh_with_options_3f(uint64_t a1, float32x4_t *a2, uint64_t a3, char *a4, uint64_t a5)
{
}

uint64_t `anonymous namespace'::create_triangle_mesh_bvh_with_opt<float>(uint64_t a1, float32x4_t *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v8 = (_QWORD *)v7;
  v9 = *(_DWORD *)(a5 + 48);
  if (!v9)
  {
    goto LABEL_5;
  }
  if (v9 == 1)
  {
LABEL_5:
    v10 = v8[19];
    v17[0] = v8[18];
    v17[1] = v10;
    v11 = v8[22];
    v16[0] = v8[21];
    v16[1] = v11;
    v12 = (uint64_t)(v8[7] - v8[6]) >> 2;
    v15[0] = v8[6];
    v15[1] = v12;
    return (uint64_t)v8;
  }
  v14 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_triangle_mesh_bvh_with_options_3f(v14);
}

uint64_t geom_recreate_triangle_mesh_bvh_with_options_3f(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, char *a5, uint64_t a6)
{
}

uint64_t geom_create_triangle_mesh_bvh_with_default_options_3d(uint64_t a1, char *a2, uint64_t a3, char *a4)
{
  uint64_t opt_3d_obj_alloc;

  opt_3d_obj_alloc = geom_bvh_create_opt_3d_obj_alloc();
  *(_OWORD *)(opt_3d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3d_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_3d_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_3d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3d_obj_alloc + 48) = 1;
}

uint64_t geom_create_triangle_mesh_bvh_with_options_3d(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
}

uint64_t `anonymous namespace'::create_triangle_mesh_bvh_with_opt<double>(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v8 = (_QWORD *)v7;
  v9 = *(_DWORD *)(a5 + 48);
  if (!v9)
  {
    goto LABEL_5;
  }
  if (v9 == 1)
  {
LABEL_5:
    v10 = v8[19];
    v17[0] = v8[18];
    v17[1] = v10;
    v11 = v8[22];
    v16[0] = v8[21];
    v16[1] = v11;
    v12 = (uint64_t)(v8[7] - v8[6]) >> 2;
    v15[0] = v8[6];
    v15[1] = v12;
    return (uint64_t)v8;
  }
  v14 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_triangle_mesh_bvh_with_options_3d(v14);
}

uint64_t geom_recreate_triangle_mesh_bvh_with_options_3d(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6)
{
}

uint64_t geom_create_bezier_curve_bvh_2f(uint64_t a1, unsigned int *a2, char *a3, int a4, uint64_t a5)
{
  uint64_t v7;

  return v7;
}

uint64_t `anonymous namespace'::construct_bezier_curve_bvh<float>(uint64_t a1, unsigned int *a2, char *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  int32x2_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float32x2_t v33;
  float32x2_t *v34;
  uint64_t v35;
  float32x2_t v36;
  uint64_t v37;
  float32x2_t *v38;
  float32x2_t v39;
  int32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const void *v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;

  if (a5)
  {
    if (a1)
    {
      v10 = a2[a1 - 1];
      v52 = a3;
      v53 = v10;
      v50 = a2;
      v51 = a1;
      if ((_DWORD)v10)
      {
        if (a4)
        {
          v11 = (void *)operator new[]();
          memcpy(v11, a3, 8 * v10);
          v12 = 1;
        }
        else
        {
          v12 = 0;
          v11 = a3;
        }
      }
      else
      {
        v12 = 0;
        v10 = 0;
        v11 = 0;
      }
    }
    else
    {
      v12 = 0;
      v10 = 0;
      v11 = 0;
      v52 = a3;
      v53 = 0;
      v50 = a2;
      v51 = 0;
    }
    v16 = a1;
    if (*(_BYTE *)(a5 + 136))
    {
      v17 = *(_QWORD *)(a5 + 120);
      v16 = a1;
      if (v17)
      {
        MEMORY[0x22E2B7674](v17, 0x1000C8000313F17);
        v16 = v51;
      }
    }
    v18 = 0;
    *(_QWORD *)(a5 + 120) = v11;
    *(_QWORD *)(a5 + 128) = v10;
    *(_BYTE *)(a5 + 136) = v12;
    if (v16)
      v19 = a2;
    else
      v19 = 0;
    if (v16 && a4)
    {
      v19 = (void *)operator new[]();
      memcpy(v19, a2, 4 * v16);
      v18 = 1;
    }
    if (*(_BYTE *)(a5 + 160))
    {
      v20 = *(_QWORD *)(a5 + 144);
      if (v20)
        MEMORY[0x22E2B7674](v20, 0x1000C8052888210);
    }
    *(_QWORD *)(a5 + 144) = v19;
    *(_QWORD *)(a5 + 152) = v16;
    v14 = a5;
    *(_BYTE *)(a5 + 160) = v18;
    if (a1)
      goto LABEL_25;
LABEL_28:
    v27 = 0;
    v26 = 0;
    v21 = 0;
    v22 = 0;
    v47 = 0;
    v48 = a1;
    v49 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_40;
  }
  v13 = geom_bezier_curve_bvh_2f_obj_alloc();
  v14 = v13;
  if (!a1)
  {
    v52 = a3;
    v53 = 0;
    v50 = a2;
    v51 = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v52, a4, v13 + 120);
    geom::make_external_array<geom::slice<unsigned int>>(&v50, a4, v14 + 144);
    goto LABEL_28;
  }
  v15 = a2[a1 - 1];
  v52 = a3;
  v53 = v15;
  v50 = a2;
  v51 = a1;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v52, a4, v13 + 120);
  geom::make_external_array<geom::slice<unsigned int>>(&v50, a4, v14 + 144);
LABEL_25:
  v21 = operator new[]();
  v47 = v21;
  v48 = a1;
  v49 = 1;
  v22 = operator new[]();
  v24 = vdup_n_s32(0x7F800000u);
  v25 = (_QWORD *)v22;
  do
  {
    *v25 = v24;
    v25[1] = 0x7F0000007FLL;
    v25 += 2;
  }
  while (v25 != (_QWORD *)(v22 + 16 * a1));
  v44 = v22;
  v45 = a1;
  v26 = 1;
  v46 = 1;
  v27 = a1;
  v28 = 0;
  v29 = vdup_n_s32(0x7F800000u);
  do
  {
    if (v28)
      v30 = a2[v28 - 1];
    else
      v30 = 0;
    v31 = a2[v28];
    v32 = v31 - v30;
    if (v31 == v30)
    {
      v23.f32[0] = 0.0 / (float)v32;
      *(int32x2_t *)(v21 + 8 * v28) = vdup_lane_s32((int32x2_t)v23, 0);
      v23 = (float32x2_t)0x7F0000007FLL;
      v33 = (float32x2_t)v29;
    }
    else
    {
      v34 = (float32x2_t *)&a3[8 * v30];
      v35 = 8 * v31 - 8 * v30;
      v36 = 0;
      v37 = v35;
      v38 = v34;
      do
      {
        v39 = *v38++;
        v40.i32[1] = v39.i32[1];
        v36 = vadd_f32(v36, v39);
        v37 -= 8;
      }
      while (v37);
      *(float *)v40.i32 = (float)v32;
      *(float32x2_t *)(v21 + 8 * v28) = vdiv_f32(v36, (float32x2_t)vdup_lane_s32(v40, 0));
      v23 = (float32x2_t)0x7F0000007FLL;
      v33 = (float32x2_t)v29;
      if (v30 != v31)
      {
        v33 = (float32x2_t)v29;
        do
        {
          v41 = *v34++;
          v33 = vminnm_f32(v41, v33);
          v23 = vmaxnm_f32(v41, v23);
          v35 -= 8;
        }
        while (v35);
      }
    }
    v42 = (float32x2_t *)(v22 + 16 * v28);
    *v42 = v33;
    v42[1] = v23;
    ++v28;
  }
  while (v28 != a1);
LABEL_40:
  if (a5)
  {
    geom::bvh<float,(unsigned char)2>::reset(v14 + 16, (uint64_t)&v47, (uint64_t)&v44);
    if (v46 && v44)
      MEMORY[0x22E2B7674](v44, 0x1000C80451B5BE8);
  }
  else
  {
    *(_BYTE *)(v14 + 16) = 0;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_QWORD *)(v14 + 72) = v21;
    *(_QWORD *)(v14 + 80) = a1;
    *(_BYTE *)(v14 + 88) = v26;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    *(_QWORD *)(v14 + 96) = v22;
    *(_QWORD *)(v14 + 104) = v27;
    *(_BYTE *)(v14 + 112) = v26;
  }
  if (v49 && v47)
    MEMORY[0x22E2B7674](v47, 0x1000C8000313F17);
  return v14;
}

void sub_2288B94B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B7674](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  switch(a2)
  {
    case 0:
      v13[0] = &off_24F148EF0;
      v13[1] = &v4;
      v14 = v13;
      geom::bvh<float,(unsigned char)2>::build_middle_split((uint64_t)result, (uint64_t)v13);
      result = v14;
      if (v14 != v13)
        goto LABEL_11;
      v3 = 4;
      result = v13;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 1:
      v11[0] = &off_24F148EF0;
      v11[1] = &v4;
      v12 = v11;
      geom::bvh<float,(unsigned char)2>::build_median((uint64_t)result, (uint64_t)v11);
      result = v12;
      if (v12 != v11)
        goto LABEL_11;
      v3 = 4;
      result = v11;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 2:
      v9[0] = &off_24F148EF0;
      v9[1] = &v4;
      v10 = v9;
      geom::bvh<float,(unsigned char)2>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v9);
      result = v10;
      if (v10 != v9)
        goto LABEL_11;
      v3 = 4;
      result = v9;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 3:
      v7[0] = &off_24F148EF0;
      v7[1] = &v4;
      v8 = v7;
      geom::bvh<float,(unsigned char)2>::build_volume_heuristic((uint64_t)result, (uint64_t)v7);
      result = v8;
      if (v8 != v7)
        goto LABEL_11;
      v3 = 4;
      result = v7;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 4:
      v5[0] = &off_24F148EF0;
      v5[1] = &v4;
      v6 = v5;
      geom::bvh<float,(unsigned char)2>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
      result = v6;
      if (v6 == v5)
      {
        v3 = 4;
        result = v5;
      }
      else
      {
LABEL_11:
        if (!result)
          return result;
        v3 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    default:
      return result;
  }
}

void sub_2288B9688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 64);
  if (v23 == (_QWORD *)(v21 - 88))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 88);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geom_create_bezier_curve_bvh_2d(uint64_t a1, unsigned int *a2, char *a3, int a4, uint64_t a5)
{
  uint64_t v7;

  return v7;
}

uint64_t `anonymous namespace'::construct_bezier_curve_bvh<double>(uint64_t a1, unsigned int *a2, char *a3, int a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  int64x2_t v24;
  _OWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t *v36;
  uint64_t v37;
  float64x2_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t *v43;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;

  if (a5)
  {
    if (a1)
    {
      v10 = a2[a1 - 1];
      v53 = a3;
      v54 = v10;
      v51 = a2;
      v52 = a1;
      if ((_DWORD)v10)
      {
        if (a4)
        {
          v11 = (void *)operator new[]();
          memcpy(v11, a3, 16 * v10);
          v12 = 1;
        }
        else
        {
          v12 = 0;
          v11 = a3;
        }
      }
      else
      {
        v12 = 0;
        v10 = 0;
        v11 = 0;
      }
    }
    else
    {
      v12 = 0;
      v10 = 0;
      v11 = 0;
      v53 = a3;
      v54 = 0;
      v51 = a2;
      v52 = 0;
    }
    v16 = a1;
    if (*(_BYTE *)(a5 + 136))
    {
      v17 = *(_QWORD *)(a5 + 120);
      v16 = a1;
      if (v17)
      {
        MEMORY[0x22E2B7674](v17, 0x1000C80451B5BE8);
        v16 = v52;
      }
    }
    v18 = 0;
    *(_QWORD *)(a5 + 120) = v11;
    *(_QWORD *)(a5 + 128) = v10;
    *(_BYTE *)(a5 + 136) = v12;
    if (v16)
      v19 = a2;
    else
      v19 = 0;
    if (v16 && a4)
    {
      v19 = (void *)operator new[]();
      memcpy(v19, a2, 4 * v16);
      v18 = 1;
    }
    if (*(_BYTE *)(a5 + 160))
    {
      v20 = *(_QWORD *)(a5 + 144);
      if (v20)
        MEMORY[0x22E2B7674](v20, 0x1000C8052888210);
    }
    *(_QWORD *)(a5 + 144) = v19;
    *(_QWORD *)(a5 + 152) = v16;
    v14 = a5;
    *(_BYTE *)(a5 + 160) = v18;
    if (a1)
      goto LABEL_25;
LABEL_28:
    v27 = 0;
    v26 = 0;
    v21 = 0;
    v22 = 0;
    v48 = 0;
    v49 = a1;
    v50 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_40;
  }
  v13 = geom_bezier_curve_bvh_2d_obj_alloc();
  v14 = v13;
  if (!a1)
  {
    v53 = a3;
    v54 = 0;
    v51 = a2;
    v52 = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v53, a4, v13 + 120);
    geom::make_external_array<geom::slice<unsigned int>>(&v51, a4, v14 + 144);
    goto LABEL_28;
  }
  v15 = a2[a1 - 1];
  v53 = a3;
  v54 = v15;
  v51 = a2;
  v52 = a1;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v53, a4, v13 + 120);
  geom::make_external_array<geom::slice<unsigned int>>(&v51, a4, v14 + 144);
LABEL_25:
  v21 = operator new[]();
  v48 = v21;
  v49 = a1;
  v50 = 1;
  v22 = operator new[]();
  v23 = vdupq_n_s64(0x7FF0000000000000uLL);
  v24 = vdupq_n_s64(0xFFF0000000000000);
  v25 = (_OWORD *)v22;
  do
  {
    *v25 = v23;
    v25[1] = v24;
    v25 += 2;
  }
  while (v25 != (_OWORD *)(v22 + 32 * a1));
  v45 = v22;
  v46 = a1;
  v26 = 1;
  v47 = 1;
  v27 = a1;
  v28 = 0;
  v29 = vdupq_n_s64(0x7FF0000000000000uLL);
  v30 = vdupq_n_s64(0xFFF0000000000000);
  do
  {
    if (v28)
      v31 = a2[v28 - 1];
    else
      v31 = 0;
    v32 = a2[v28];
    v33 = v32 - v31;
    if (v32 == v31)
    {
      *(int64x2_t *)(v21 + 16 * v28) = vdupq_lane_s64(COERCE__INT64(0.0 / (double)v33), 0);
      v34 = (float64x2_t)v30;
      v35 = (float64x2_t)v29;
    }
    else
    {
      v36 = (float64x2_t *)&a3[16 * v31];
      v37 = 16 * v32 - 16 * v31;
      v38 = 0uLL;
      v39 = v37;
      v40 = v36;
      do
      {
        v41 = *v40++;
        v38 = vaddq_f64(v38, v41);
        v39 -= 16;
      }
      while (v39);
      *(float64x2_t *)(v21 + 16 * v28) = vdivq_f64(v38, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v33), 0));
      v34 = (float64x2_t)v30;
      v35 = (float64x2_t)v29;
      if (v31 != v32)
      {
        v34 = (float64x2_t)v30;
        v35 = (float64x2_t)v29;
        do
        {
          v42 = *v36++;
          v35 = vminnmq_f64(v42, v35);
          v34 = vmaxnmq_f64(v42, v34);
          v37 -= 16;
        }
        while (v37);
      }
    }
    v43 = (float64x2_t *)(v22 + 32 * v28);
    *v43 = v35;
    v43[1] = v34;
    ++v28;
  }
  while (v28 != a1);
LABEL_40:
  if (a5)
  {
    geom::bvh<double,(unsigned char)2>::reset(v14 + 16, (uint64_t)&v48, (uint64_t)&v45);
    if (v47 && v45)
      MEMORY[0x22E2B7674](v45, 0x1000C80E0EAB150);
  }
  else
  {
    *(_BYTE *)(v14 + 16) = 0;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_QWORD *)(v14 + 72) = v21;
    *(_QWORD *)(v14 + 80) = a1;
    *(_BYTE *)(v14 + 88) = v26;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    *(_QWORD *)(v14 + 96) = v22;
    *(_QWORD *)(v14 + 104) = v27;
    *(_BYTE *)(v14 + 112) = v26;
  }
  if (v50 && v48)
    MEMORY[0x22E2B7674](v48, 0x1000C80451B5BE8);
  return v14;
}

void sub_2288B9BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B7674](v1, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  switch(a2)
  {
    case 0:
      v13[0] = &off_24F148F70;
      v13[1] = &v4;
      v14 = v13;
      geom::bvh<double,(unsigned char)2>::build_middle_split((uint64_t)result, (uint64_t)v13);
      result = v14;
      if (v14 != v13)
        goto LABEL_11;
      v3 = 4;
      result = v13;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 1:
      v11[0] = &off_24F148F70;
      v11[1] = &v4;
      v12 = v11;
      geom::bvh<double,(unsigned char)2>::build_median((uint64_t)result, (uint64_t)v11);
      result = v12;
      if (v12 != v11)
        goto LABEL_11;
      v3 = 4;
      result = v11;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 2:
      v9[0] = &off_24F148F70;
      v9[1] = &v4;
      v10 = v9;
      geom::bvh<double,(unsigned char)2>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v9);
      result = v10;
      if (v10 != v9)
        goto LABEL_11;
      v3 = 4;
      result = v9;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 3:
      v7[0] = &off_24F148F70;
      v7[1] = &v4;
      v8 = v7;
      geom::bvh<double,(unsigned char)2>::build_volume_heuristic((uint64_t)result, (uint64_t)v7);
      result = v8;
      if (v8 != v7)
        goto LABEL_11;
      v3 = 4;
      result = v7;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 4:
      v5[0] = &off_24F148F70;
      v5[1] = &v4;
      v6 = v5;
      geom::bvh<double,(unsigned char)2>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
      result = v6;
      if (v6 == v5)
      {
        v3 = 4;
        result = v5;
      }
      else
      {
LABEL_11:
        if (!result)
          return result;
        v3 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    default:
      return result;
  }
}

void sub_2288B9D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 64);
  if (v23 == (_QWORD *)(v21 - 88))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 88);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geom_create_bezier_curve_bvh_with_default_options_2f(uint64_t a1, unsigned int *a2, char *a3)
{
  uint64_t opt_2f_obj_alloc;

  opt_2f_obj_alloc = geom_bvh_create_opt_2f_obj_alloc();
  *(_OWORD *)(opt_2f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2f_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_2f_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_2f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2f_obj_alloc + 48) = 1;
}

uint64_t geom_create_bezier_curve_bvh_with_options_2f(uint64_t a1, unsigned int *a2, char *a3, uint64_t a4)
{
}

uint64_t `anonymous namespace'::create_bezier_curve_bvh_with_opt<float>(uint64_t a1, unsigned int *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v7 = v6;
  v8 = *(_DWORD *)(a4 + 48);
  if (!v8)
  {
    return v7;
  }
  if (v8 == 1)
  {
    return v7;
  }
  v10 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bezier_curve_bvh_with_options_2f(v10);
}

uint64_t geom_recreate_bezier_curve_bvh_with_options_2f(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
}

uint64_t geom_create_bezier_curve_bvh_with_default_options_2d(uint64_t a1, unsigned int *a2, char *a3)
{
  uint64_t opt_2d_obj_alloc;

  opt_2d_obj_alloc = geom_bvh_create_opt_2d_obj_alloc();
  *(_OWORD *)(opt_2d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2d_obj_alloc + 40) = 0u;
  *(_QWORD *)(opt_2d_obj_alloc + 16) = 1;
  *(_BYTE *)(opt_2d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2d_obj_alloc + 48) = 1;
}

uint64_t geom_create_bezier_curve_bvh_with_options_2d(uint64_t a1, unsigned int *a2, char *a3, uint64_t a4)
{
}

uint64_t `anonymous namespace'::create_bezier_curve_bvh_with_opt<double>(uint64_t a1, unsigned int *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  v7 = v6;
  v8 = *(_DWORD *)(a4 + 48);
  if (!v8)
  {
    return v7;
  }
  if (v8 == 1)
  {
    return v7;
  }
  v10 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bezier_curve_bvh_with_options_2d(v10);
}

uint64_t geom_recreate_bezier_curve_bvh_with_options_2d(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
}

uint64_t geom_bvh_tree_statistics_2f(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = 0;
  v5 = 0;
  v3 = a1 + 16;
  if (!a2)
    a2 = (unsigned int *)&v6;
  if (!a3)
    a3 = &v5;
  return geom::bvh<float,(unsigned char)2>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_tree_statistics_2d(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = 0;
  v5 = 0;
  v3 = a1 + 16;
  if (!a2)
    a2 = (unsigned int *)&v6;
  if (!a3)
    a3 = &v5;
  return geom::bvh<double,(unsigned char)2>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_tree_statistics_3f(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = 0;
  v5 = 0;
  v3 = a1 + 16;
  if (!a2)
    a2 = (unsigned int *)&v6;
  if (!a3)
    a3 = &v5;
  return geom::bvh<double,(unsigned char)2>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_tree_statistics_3d(uint64_t a1, unsigned int *a2, int *a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = 0;
  v5 = 0;
  v3 = a1 + 16;
  if (!a2)
    a2 = (unsigned int *)&v6;
  if (!a3)
    a3 = &v5;
  return geom::bvh<double,(unsigned char)3>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_get_nodes_2f(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 32) - result) >> 3);
  return result;
}

uint64_t geom_bvh_get_nodes_2d(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = (*(_QWORD *)(a1 + 32) - result) >> 6;
  return result;
}

uint64_t geom_bvh_get_nodes_3f(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = (*(_QWORD *)(a1 + 32) - result) >> 6;
  return result;
}

uint64_t geom_bvh_get_nodes_3d(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - result) >> 5);
  return result;
}

uint64_t geom_bvh_get_primitive_partition_2f(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (a2)
    *a2 = (*(_QWORD *)(a1 + 56) - result) >> 2;
  return result;
}

uint64_t geom_bvh_get_primitive_partition_2d(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (a2)
    *a2 = (*(_QWORD *)(a1 + 56) - result) >> 2;
  return result;
}

uint64_t geom_bvh_get_primitive_partition_3f(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (a2)
    *a2 = (*(_QWORD *)(a1 + 56) - result) >> 2;
  return result;
}

uint64_t geom_bvh_get_primitive_partition_3d(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (a2)
    *a2 = (*(_QWORD *)(a1 + 56) - result) >> 2;
  return result;
}

uint64_t geom_bvh_get_primitives_for_node_2f(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(v3 + 40 * a2 + 12);
  v5 = *(_QWORD *)(a1 + 48);
  if (a3)
    *a3 = (*(_DWORD *)(v3 + 40 * a2 + 16) + v4) - v4;
  return v5 + 4 * v4;
}

uint64_t geom_bvh_get_primitives_for_node_2d(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 24) + ((unint64_t)a2 << 6);
  v4 = *(unsigned int *)(v3 + 12);
  v5 = *(_QWORD *)(a1 + 48);
  if (a3)
    *a3 = (*(_DWORD *)(v3 + 16) + v4) - v4;
  return v5 + 4 * v4;
}

uint64_t geom_bvh_get_primitives_for_node_3f(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 24) + ((unint64_t)a2 << 6);
  v4 = *(unsigned int *)(v3 + 12);
  v5 = *(_QWORD *)(a1 + 48);
  if (a3)
    *a3 = (*(_DWORD *)(v3 + 16) + v4) - v4;
  return v5 + 4 * v4;
}

uint64_t geom_bvh_get_primitives_for_node_3d(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(v3 + 96 * a2 + 12);
  v5 = *(_QWORD *)(a1 + 48);
  if (a3)
    *a3 = (*(_DWORD *)(v3 + 96 * a2 + 16) + v4) - v4;
  return v5 + 4 * v4;
}

uint64_t geom_bvh_raycast_2f(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unsigned int *a5, double a6, double a7)
{
  _QWORD *v7;
  float *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = a3;
  v21 = a2;
  v19 = 0;
  v22[0] = &off_24F148FF0;
  v22[1] = &v21;
  v22[2] = &v20;
  v23 = v22;
  v7 = (_QWORD *)(a1 + 16);
  if (a4)
    v8 = a4;
  else
    v8 = (float *)&v19 + 1;
  if (a5)
    v9 = a5;
  else
    v9 = (unsigned int *)&v19;
  v15 = geom::bvh<float,(unsigned char)2>::raycast(v7, (uint64_t)v22, v8, v9, a6, a7);
  v16 = v23;
  if (v23 == v22)
  {
    v17 = 4;
    v16 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v17 = 5;
LABEL_11:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v16 + 8 * v17))(v16, v10, v11, v12, v13, v14);
  }
  return v15;
}

void sub_2288BA3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geom_bvh_raycast_2d(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, unsigned int *a5, float64x2_t a6, __n128 a7)
{
  _QWORD *v7;
  double *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v16 = a3;
  v17 = a2;
  v15 = 0;
  v14 = 0;
  v18[0] = &off_24F149080;
  v18[1] = &v17;
  v18[2] = &v16;
  v19 = v18;
  v7 = (_QWORD *)(a1 + 16);
  if (a4)
    v8 = a4;
  else
    v8 = (double *)&v15;
  if (a5)
    v9 = a5;
  else
    v9 = (unsigned int *)&v14;
  v10 = geom::bvh<double,(unsigned char)2>::raycast(v7, (uint64_t)v18, v8, v9, a6, a7);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
    goto LABEL_11;
  }
  if (v19)
  {
    v12 = 5;
LABEL_11:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  return v10;
}

void sub_2288BA4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t geom_bvh_raycast_3f(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unsigned int *a5, float32x4_t a6, __n128 a7)
{
  _QWORD *v7;
  float *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = a3;
  v21 = a2;
  v19 = 0;
  v22[0] = &off_24F149110;
  v22[1] = &v21;
  v22[2] = &v20;
  v23 = v22;
  v7 = (_QWORD *)(a1 + 16);
  if (a4)
    v8 = a4;
  else
    v8 = (float *)&v19 + 1;
  if (a5)
    v9 = a5;
  else
    v9 = (unsigned int *)&v19;
  v15 = geom::bvh<float,(unsigned char)3>::raycast(v7, (uint64_t)v22, v8, v9, a6, a7);
  v16 = v23;
  if (v23 == v22)
  {
    v17 = 4;
    v16 = v22;
    goto LABEL_11;
  }
  if (v23)
  {
    v17 = 5;
LABEL_11:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v16 + 8 * v17))(v16, v10, v11, v12, v13, v14);
  }
  return v15;
}

void sub_2288BA5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geom_bvh_raycast_3d(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, double *a5, unsigned int *a6)
{
  __int128 v6;
  __int128 v7;
  __n128 v8;
  _QWORD *v9;
  double *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v23[4];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v26 = a4;
  v27 = a2;
  v25 = 0;
  v24 = 0;
  v28[0] = &off_24F1491A0;
  v28[1] = &v27;
  v28[2] = &v26;
  v29 = v28;
  v6 = a3[1];
  v23[0] = *a3;
  v23[1] = v6;
  v7 = a3[2];
  v8 = (__n128)a3[3];
  v23[2] = v7;
  v23[3] = (__int128)v8;
  v9 = (_QWORD *)(a1 + 16);
  if (a5)
    v10 = a5;
  else
    v10 = (double *)&v25;
  if (a6)
    v11 = a6;
  else
    v11 = (unsigned int *)&v24;
  v19 = geom::bvh<double,(unsigned char)3>::raycast(v9, (uint64_t)v28, v23, v10, v11, *(double *)&v7, v8);
  v20 = v29;
  if (v29 == v28)
  {
    v21 = 4;
    v20 = v28;
    goto LABEL_11;
  }
  if (v29)
  {
    v21 = 5;
LABEL_11:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v20 + 8 * v21))(v20, v12, v13, v14, v15, v16, v17, v18);
  }
  return v19;
}

void sub_2288BA6D0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 32);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 56);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double geom_bvh_closest_point_2f(_QWORD *a1, void (*a2)(_QWORD, uint64_t, double), uint64_t a3, float *a4, unsigned int *a5, float32x2_t a6)
{
  int v11;
  int v12;
  double v13;
  float32x2_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  float *v18;
  float *v19;
  unsigned int v20;
  float *v21;
  float32x2_t v22;
  float v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float *v28;
  float v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int *v34;
  unsigned int v35;
  int *v36;
  unsigned int v37;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float32x2_t v42;
  float32x2_t v43;
  float v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  float32x2_t v52;
  float v53;
  float32x2_t v54;
  float v55;
  unsigned int v56;
  float *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  float *v75;
  uint64_t v76;
  float *v77;
  char *v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  float *v94;
  uint64_t v95;
  uint64_t v97;
  char *v99;
  int v100;

  if (a4)
  {
    *a4 = INFINITY;
    *(float *)&v11 = 0.0;
  }
  else
  {
    *(float *)&v11 = INFINITY;
  }
  v12 = -1;
  if (a5)
  {
    *a5 = -1;
    v12 = 0;
  }
  v13 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  if (a1[7] != a1[6])
  {
    v14 = (float32x2_t *)a1[3];
    v15 = a1[4] - (_QWORD)v14;
    if (v15)
    {
      v16 = a1;
      v17 = __clz(-858993459 * (v15 >> 3));
      if (v17 == 31)
      {
        v18 = 0;
        v19 = 0;
      }
      else
      {
        v20 = 31 - v17;
        v21 = (float *)operator new(8 * (31 - v17));
        v16 = a1;
        v19 = v21;
        v18 = &v21[2 * v20];
      }
      v22 = vsub_f32(vmaxnm_f32(vminnm_f32(a6, v14[4]), v14[3]), a6);
      v23 = vaddv_f32(vmul_f32(v22, v22));
      if (v19 >= v18)
      {
        v25 = (char *)v18 - (char *)v19;
        v26 = v25 >> 2;
        if ((unint64_t)(v25 >> 2) <= 1)
          v26 = 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v28 = (float *)operator new(8 * v27);
        v99 = (char *)&v28[2 * v27];
        *v28 = 0.0;
        v28[1] = v23;
        v24 = v28 + 2;
        if (v19)
          operator delete(v19);
        v19 = v28;
        v16 = a1;
      }
      else
      {
        v99 = (char *)v18;
        *v19 = 0.0;
        v19[1] = v23;
        v24 = v19 + 2;
      }
      v13 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
      v97 = a3;
      while (1)
      {
        v29 = *(float *)&v11;
        if (a4)
          v29 = *a4;
        v30 = v24 - 2;
        if (v29 <= *(v24 - 1))
        {
          v24 -= 2;
        }
        else
        {
          v100 = v12;
          v31 = v16[3];
          v32 = v31 + 40 * *(unsigned int *)v30;
          v35 = *(_DWORD *)(v32 + 4);
          v34 = (int *)(v32 + 4);
          v33 = v35;
          v36 = v34 + 1;
          v37 = v34[1];
          if (v35 == -1 && v37 == -1)
          {
            v46 = v31 + 40 * *(unsigned int *)v30;
            v47 = *(_DWORD *)(v46 + 16);
            if (!v47)
              goto LABEL_61;
            v48 = *(unsigned int *)(v46 + 12);
            v49 = (unsigned int *)(v16[6] + 4 * v48);
            v50 = 4 * (v47 + v48) - 4 * v48;
            v12 = v100;
            while (2)
            {
              v51 = *v49;
              a2(*v49, v97, *(double *)&a6);
              v53 = *(float *)&v11;
              if (a4)
                v53 = *a4;
              v54 = vsub_f32(a6, v52);
              v55 = vaddv_f32(vmul_f32(v54, v54));
              if (v55 < v53)
                goto LABEL_50;
              v56 = v12;
              if (a5)
                v56 = *a5;
              if (v55 == v53 && v51 < v56)
              {
LABEL_50:
                if (a4)
                {
                  *a4 = v55;
                  if (a5)
                    goto LABEL_52;
LABEL_54:
                  v12 = v51;
                }
                else
                {
                  *(float *)&v11 = v55;
                  if (!a5)
                    goto LABEL_54;
LABEL_52:
                  *a5 = v51;
                }
                v13 = *(double *)&v52;
              }
              ++v49;
              v50 -= 4;
              if (!v50)
              {
                v24 = v30;
                goto LABEL_155;
              }
              continue;
            }
          }
          v39 = vsub_f32(vmaxnm_f32(vminnm_f32(a6, *(float32x2_t *)(v31 + 40 * v33 + 32)), *(float32x2_t *)(v31 + 40 * v33 + 24)), a6);
          v40 = vmul_f32(v39, v39);
          v41 = vaddv_f32(v40);
          v42 = vsub_f32(vmaxnm_f32(vminnm_f32(a6, *(float32x2_t *)(v31 + 40 * v37 + 32)), *(float32x2_t *)(v31 + 40 * v37 + 24)), a6);
          v43 = vmul_f32(v42, v42);
          v44 = vaddv_f32(v43);
          if (v41 < v29 && v44 < v29)
          {
            if ((vcgt_f32(vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)), vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1))).u8[0] & 1) != 0)
            {
              if (v30 < (float *)v99)
              {
                *((_DWORD *)v24 - 2) = v37;
                *(v24 - 1) = v44;
                v58 = v24;
                v12 = v100;
                goto LABEL_137;
              }
              v59 = ((char *)v30 - (char *)v19) >> 3;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 61)
                abort();
              if ((v99 - (char *)v19) >> 2 > v60)
                v60 = (v99 - (char *)v19) >> 2;
              if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
                v61 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v61 = v60;
              if (v61)
              {
                if (v61 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v62 = (char *)operator new(8 * v61);
              }
              else
              {
                v62 = 0;
              }
              v75 = (float *)&v62[8 * v59];
              *(_DWORD *)v75 = v37;
              v75[1] = v44;
              v58 = v75 + 2;
              v99 = &v62[8 * v61];
              if (v30 == v19)
              {
                v12 = v100;
              }
              else
              {
                v12 = v100;
                do
                {
                  v76 = *((_QWORD *)v30 - 1);
                  v30 -= 2;
                  *((_QWORD *)v75 - 1) = v76;
                  v75 -= 2;
                }
                while (v30 != v19);
                if (!v19)
                  goto LABEL_136;
              }
              operator delete(v19);
LABEL_136:
              v19 = v75;
              v16 = a1;
LABEL_137:
              v88 = *v34;
              if (v58 >= (float *)v99)
              {
                v89 = ((char *)v58 - (char *)v19) >> 3;
                v90 = v89 + 1;
                if ((unint64_t)(v89 + 1) >> 61)
                  abort();
                if ((v99 - (char *)v19) >> 2 > v90)
                  v90 = (v99 - (char *)v19) >> 2;
                if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
                  v91 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v91 = v90;
                if (v91)
                {
                  if (v91 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v92 = (char *)operator new(8 * v91);
                }
                else
                {
                  v92 = 0;
                }
                v77 = (float *)&v92[8 * v89];
                *(_DWORD *)v77 = v88;
                v77[1] = v41;
                v24 = v77 + 2;
                v99 = &v92[8 * v91];
                if (v58 != v19)
                {
                  do
                  {
                    v93 = *((_QWORD *)v58 - 1);
                    v58 -= 2;
                    *((_QWORD *)v77 - 1) = v93;
                    v77 -= 2;
                  }
                  while (v58 != v19);
                  goto LABEL_152;
                }
                goto LABEL_153;
              }
              *(_DWORD *)v58 = v88;
              v58[1] = v41;
            }
            else
            {
              if (v30 >= (float *)v99)
              {
                v67 = ((char *)v30 - (char *)v19) >> 3;
                v68 = v67 + 1;
                v12 = v100;
                if ((unint64_t)(v67 + 1) >> 61)
                  abort();
                if ((v99 - (char *)v19) >> 2 > v68)
                  v68 = (v99 - (char *)v19) >> 2;
                if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
                  v69 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v69 = v68;
                if (v69)
                {
                  if (v69 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v70 = (char *)operator new(8 * v69);
                }
                else
                {
                  v70 = 0;
                }
                v80 = (float *)&v70[8 * v67];
                *(_DWORD *)v80 = v33;
                v80[1] = v41;
                v58 = v80 + 2;
                v99 = &v70[8 * v69];
                if (v30 == v19)
                  goto LABEL_117;
                do
                {
                  v81 = *((_QWORD *)v30 - 1);
                  v30 -= 2;
                  *((_QWORD *)v80 - 1) = v81;
                  v80 -= 2;
                }
                while (v30 != v19);
                if (v19)
LABEL_117:
                  operator delete(v19);
                v19 = v80;
                v16 = a1;
              }
              else
              {
                *((_DWORD *)v24 - 2) = v33;
                *(v24 - 1) = v41;
                v58 = v24;
                v12 = v100;
              }
              v82 = *v36;
              if (v58 >= (float *)v99)
              {
                v83 = ((char *)v58 - (char *)v19) >> 3;
                v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 61)
                  abort();
                if ((v99 - (char *)v19) >> 2 > v84)
                  v84 = (v99 - (char *)v19) >> 2;
                if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
                  v85 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v85 = v84;
                if (v85)
                {
                  if (v85 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v86 = (char *)operator new(8 * v85);
                }
                else
                {
                  v86 = 0;
                }
                v77 = (float *)&v86[8 * v83];
                *(_DWORD *)v77 = v82;
                v77[1] = v44;
                v24 = v77 + 2;
                v99 = &v86[8 * v85];
                if (v58 == v19)
                  goto LABEL_153;
                do
                {
                  v87 = *((_QWORD *)v58 - 1);
                  v58 -= 2;
                  *((_QWORD *)v77 - 1) = v87;
                  v77 -= 2;
                }
                while (v58 != v19);
LABEL_152:
                if (v19)
LABEL_153:
                  operator delete(v19);
                v19 = v77;
LABEL_155:
                v16 = a1;
                goto LABEL_156;
              }
              *(_DWORD *)v58 = v82;
              v58[1] = v44;
            }
            v24 = v58 + 2;
            goto LABEL_156;
          }
          if (v41 >= v29)
          {
            if (v44 < v29)
            {
              if (v30 < (float *)v99)
              {
                *((_DWORD *)v24 - 2) = v37;
                *(v24 - 1) = v44;
LABEL_62:
                v12 = v100;
                goto LABEL_156;
              }
              v71 = ((char *)v30 - (char *)v19) >> 3;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 61)
                abort();
              if ((v99 - (char *)v19) >> 2 > v72)
                v72 = (v99 - (char *)v19) >> 2;
              if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v72;
              if (v73)
              {
                if (v73 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v74 = (char *)operator new(8 * v73);
              }
              else
              {
                v74 = 0;
              }
              v94 = (float *)&v74[8 * v71];
              *(_DWORD *)v94 = v37;
              v94[1] = v44;
              v24 = v94 + 2;
              v99 = &v74[8 * v73];
              if (v30 == v19)
              {
                v12 = v100;
              }
              else
              {
                v12 = v100;
                do
                {
                  v95 = *((_QWORD *)v30 - 1);
                  v30 -= 2;
                  *((_QWORD *)v94 - 1) = v95;
                  v94 -= 2;
                }
                while (v30 != v19);
                if (!v19)
                  goto LABEL_166;
              }
              operator delete(v19);
LABEL_166:
              v19 = v94;
              goto LABEL_155;
            }
LABEL_61:
            v24 -= 2;
            goto LABEL_62;
          }
          v12 = v100;
          if (v30 >= (float *)v99)
          {
            v63 = ((char *)v30 - (char *)v19) >> 3;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61)
              abort();
            if ((v99 - (char *)v19) >> 2 > v64)
              v64 = (v99 - (char *)v19) >> 2;
            if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8)
              v65 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v65 = v64;
            if (v65)
            {
              if (v65 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v66 = (char *)operator new(8 * v65);
            }
            else
            {
              v66 = 0;
            }
            v77 = (float *)&v66[8 * v63];
            v78 = &v66[8 * v65];
            *(_DWORD *)v77 = v33;
            v77[1] = v41;
            v24 = v77 + 2;
            v99 = v78;
            if (v30 != v19)
            {
              do
              {
                v79 = *((_QWORD *)v30 - 1);
                v30 -= 2;
                *((_QWORD *)v77 - 1) = v79;
                v77 -= 2;
              }
              while (v30 != v19);
              goto LABEL_152;
            }
            goto LABEL_153;
          }
          *((_DWORD *)v24 - 2) = v33;
          *(v24 - 1) = v41;
        }
LABEL_156:
        if (v19 == v24)
        {
          if (v24)
            operator delete(v24);
          return v13;
        }
      }
    }
  }
  return v13;
}

void sub_2288BAEEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 geom_bvh_closest_point_2d(_QWORD *a1, void (*a2)(_QWORD, uint64_t, __n128), uint64_t a3, double *a4, unsigned int *a5, float64x2_t a6)
{
  uint64_t v10;
  int v11;
  float64x2_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  double *v16;
  double *v17;
  unsigned int v18;
  double *v19;
  float64x2_t v20;
  double v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double *v26;
  double v27;
  double *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  float64x2_t v36;
  int64x2_t v37;
  double v38;
  float64x2_t v39;
  int64x2_t v40;
  double v41;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  double v51;
  unsigned int v52;
  double *v54;
  double *v55;
  double *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  double *v73;
  double *v74;
  double *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  double *v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  double *v87;
  uint64_t v89;
  char *v91;
  int v92;
  int64x2_t v93;

  if (a4)
  {
    *a4 = INFINITY;
    v10 = 0;
  }
  else
  {
    v10 = 0x7FF0000000000000;
  }
  v11 = -1;
  if (a5)
  {
    *a5 = -1;
    v11 = 0;
  }
  v93 = vdupq_n_s64(0x7FF8000000000000uLL);
  if (a1[7] != a1[6])
  {
    v12 = (float64x2_t *)a1[3];
    v13 = a1[4] - (_QWORD)v12;
    if (v13)
    {
      v14 = a1;
      v15 = __clz(v13 >> 6);
      if (v15 == 31)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v18 = 31 - v15;
        v19 = (double *)operator new(16 * (31 - v15));
        v14 = a1;
        v17 = v19;
        v16 = &v19[2 * v18];
      }
      v20 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a6, v12[3]), v12[2]), a6);
      v21 = vaddvq_f64(vmulq_f64(v20, v20));
      if (v17 >= v16)
      {
        v23 = (char *)v16 - (char *)v17;
        v24 = v23 >> 3;
        if ((unint64_t)(v23 >> 3) <= 1)
          v24 = 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v26 = (double *)operator new(16 * v25);
        v91 = (char *)&v26[2 * v25];
        *v26 = 0.0;
        v22 = v26 + 2;
        v26[1] = v21;
        if (v17)
          operator delete(v17);
        v17 = v26;
        v14 = a1;
      }
      else
      {
        v91 = (char *)v16;
        *v17 = 0.0;
        v22 = v17 + 2;
        v17[1] = v21;
      }
      v93 = vdupq_n_s64(0x7FF8000000000000uLL);
      v89 = a3;
      while (1)
      {
        v27 = *(double *)&v10;
        if (a4)
          v27 = *a4;
        v28 = v22 - 2;
        if (v27 <= *(v22 - 1))
        {
LABEL_36:
          v22 -= 2;
          goto LABEL_167;
        }
        v92 = v11;
        v29 = v14[3];
        v30 = (unsigned int *)(v29 + ((unint64_t)*(unsigned int *)v28 << 6));
        v32 = (int *)(v30 + 1);
        v31 = v30[1];
        v33 = (int *)(v30 + 2);
        v34 = v30[2];
        if (v30[1] == -1 && (_DWORD)v34 == -1)
        {
          v43 = v30[4];
          if (!v43)
          {
            v22 -= 2;
LABEL_122:
            v11 = v92;
            goto LABEL_167;
          }
          v44 = v30[3];
          v45 = (unsigned int *)(v14[6] + 4 * v44);
          v46 = 4 * (v43 + v44) - 4 * v44;
          v11 = v92;
          while (2)
          {
            v47 = *v45;
            a2(*v45, v89, (__n128)a6);
            v49 = *(double *)&v10;
            if (a4)
              v49 = *a4;
            v50 = vsubq_f64(a6, v48);
            v51 = vaddvq_f64(vmulq_f64(v50, v50));
            if (v51 < v49)
              goto LABEL_48;
            v52 = v11;
            if (a5)
              v52 = *a5;
            if (v51 == v49 && v47 < v52)
            {
LABEL_48:
              if (a4)
              {
                *a4 = v51;
                if (a5)
                  goto LABEL_50;
LABEL_52:
                v11 = v47;
              }
              else
              {
                v10 = *(_QWORD *)&v51;
                if (!a5)
                  goto LABEL_52;
LABEL_50:
                *a5 = v47;
              }
              v93 = (int64x2_t)v48;
            }
            ++v45;
            v46 -= 4;
            if (!v46)
            {
              v22 = v28;
              goto LABEL_166;
            }
            continue;
          }
        }
        v36 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a6, *(float64x2_t *)(v29 + (v31 << 6) + 48)), *(float64x2_t *)(v29 + (v31 << 6) + 32)), a6);
        v37 = (int64x2_t)vmulq_f64(v36, v36);
        v38 = vaddvq_f64((float64x2_t)v37);
        v39 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a6, *(float64x2_t *)(v29 + (v34 << 6) + 48)), *(float64x2_t *)(v29 + (v34 << 6) + 32)), a6);
        v40 = (int64x2_t)vmulq_f64(v39, v39);
        v41 = vaddvq_f64((float64x2_t)v40);
        if (v38 < v27 && v41 < v27)
          break;
        if (v38 < v27)
        {
          v11 = v92;
          if (v28 >= (double *)v91)
          {
            v61 = ((char *)v28 - (char *)v17) >> 4;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 60)
              abort();
            if ((v91 - (char *)v17) >> 3 > v62)
              v62 = (v91 - (char *)v17) >> 3;
            if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0)
              v63 = 0xFFFFFFFFFFFFFFFLL;
            else
              v63 = v62;
            if (v63)
            {
              if (v63 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v64 = (char *)operator new(16 * v63);
            }
            else
            {
              v64 = 0;
            }
            v74 = (double *)&v64[16 * v61];
            v91 = &v64[16 * v63];
            *(_DWORD *)v74 = v31;
            v74[1] = v38;
            v22 = v74 + 2;
            if (v28 == v17)
              goto LABEL_112;
            do
            {
              *((_OWORD *)v74 - 1) = *((_OWORD *)v28 - 1);
              v74 -= 2;
              v28 -= 2;
            }
            while (v28 != v17);
            if (v17)
LABEL_112:
              operator delete(v17);
            v17 = v74;
            goto LABEL_166;
          }
          *((_DWORD *)v22 - 4) = v31;
          *(v22 - 1) = v38;
        }
        else
        {
          v11 = v92;
          if (v41 >= v27)
            goto LABEL_36;
          if (v28 >= (double *)v91)
          {
            v69 = ((char *)v28 - (char *)v17) >> 4;
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 60)
              abort();
            if ((v91 - (char *)v17) >> 3 > v70)
              v70 = (v91 - (char *)v17) >> 3;
            if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0)
              v71 = 0xFFFFFFFFFFFFFFFLL;
            else
              v71 = v70;
            if (v71)
            {
              if (v71 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v72 = (char *)operator new(16 * v71);
            }
            else
            {
              v72 = 0;
            }
            v87 = (double *)&v72[16 * v69];
            v91 = &v72[16 * v71];
            *(_DWORD *)v87 = v34;
            v87[1] = v41;
            v22 = v87 + 2;
            if (v28 == v17)
              goto LABEL_164;
            do
            {
              *((_OWORD *)v87 - 1) = *((_OWORD *)v28 - 1);
              v87 -= 2;
              v28 -= 2;
            }
            while (v28 != v17);
            if (v17)
LABEL_164:
              operator delete(v17);
            v17 = v87;
            goto LABEL_166;
          }
          *((_DWORD *)v22 - 4) = v34;
          *(v22 - 1) = v41;
        }
LABEL_167:
        if (v17 == v22)
        {
          if (v22)
            operator delete(v22);
          return (__n128)v93;
        }
      }
      if ((vmovn_s64(vcgtq_f64(vaddq_f64((float64x2_t)v40, (float64x2_t)vdupq_laneq_s64(v40, 1)), vaddq_f64((float64x2_t)v37, (float64x2_t)vdupq_laneq_s64(v37, 1)))).u8[0] & 1) == 0)
      {
        if (v28 >= (double *)v91)
        {
          v65 = ((char *)v28 - (char *)v17) >> 4;
          v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 60)
            abort();
          if ((v91 - (char *)v17) >> 3 > v66)
            v66 = (v91 - (char *)v17) >> 3;
          if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0)
            v67 = 0xFFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          if (v67)
          {
            if (v67 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v68 = (char *)operator new(16 * v67);
          }
          else
          {
            v68 = 0;
          }
          v75 = (double *)&v68[16 * v65];
          v56 = (double *)&v68[16 * v67];
          *(_DWORD *)v75 = v31;
          v75[1] = v38;
          v55 = v75 + 2;
          if (v28 == v17)
            goto LABEL_118;
          do
          {
            *((_OWORD *)v75 - 1) = *((_OWORD *)v28 - 1);
            v75 -= 2;
            v28 -= 2;
          }
          while (v28 != v17);
          if (v17)
LABEL_118:
            operator delete(v17);
          v17 = v75;
          v14 = a1;
        }
        else
        {
          *((_DWORD *)v22 - 4) = v31;
          *(v22 - 1) = v38;
          v55 = v22;
          v56 = (double *)v91;
        }
        v76 = *v33;
        v91 = (char *)v56;
        if (v55 >= v56)
        {
          v77 = ((char *)v55 - (char *)v17) >> 4;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 60)
            abort();
          if ((v91 - (char *)v17) >> 3 > v78)
            v78 = (v91 - (char *)v17) >> 3;
          if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0)
            v79 = 0xFFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          if (v79)
          {
            if (v79 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v80 = (char *)operator new(16 * v79);
          }
          else
          {
            v80 = 0;
          }
          v81 = (double *)&v80[16 * v77];
          v91 = &v80[16 * v79];
          *(_DWORD *)v81 = v76;
          v81[1] = v41;
          v22 = v81 + 2;
          if (v55 != v17)
          {
            v11 = v92;
            do
            {
              *((_OWORD *)v81 - 1) = *((_OWORD *)v55 - 1);
              v81 -= 2;
              v55 -= 2;
            }
            while (v55 != v17);
LABEL_155:
            if (!v17)
            {
LABEL_159:
              v17 = v81;
LABEL_166:
              v14 = a1;
              goto LABEL_167;
            }
LABEL_158:
            operator delete(v17);
            goto LABEL_159;
          }
LABEL_157:
          v11 = v92;
          goto LABEL_158;
        }
        *(_DWORD *)v55 = v76;
        v55[1] = v41;
        v22 = v55 + 2;
        goto LABEL_122;
      }
      if (v28 < (double *)v91)
      {
        *((_DWORD *)v22 - 4) = v34;
        *(v22 - 1) = v41;
        v54 = v22;
        v11 = v92;
LABEL_140:
        v82 = *v32;
        if (v54 >= (double *)v91)
        {
          v83 = ((char *)v54 - (char *)v17) >> 4;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 60)
            abort();
          if ((v91 - (char *)v17) >> 3 > v84)
            v84 = (v91 - (char *)v17) >> 3;
          if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0)
            v85 = 0xFFFFFFFFFFFFFFFLL;
          else
            v85 = v84;
          if (v85)
          {
            if (v85 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v86 = (char *)operator new(16 * v85);
          }
          else
          {
            v86 = 0;
          }
          v81 = (double *)&v86[16 * v83];
          v91 = &v86[16 * v85];
          *(_DWORD *)v81 = v82;
          v81[1] = v38;
          v22 = v81 + 2;
          if (v54 != v17)
          {
            v11 = v92;
            do
            {
              *((_OWORD *)v81 - 1) = *((_OWORD *)v54 - 1);
              v81 -= 2;
              v54 -= 2;
            }
            while (v54 != v17);
            goto LABEL_155;
          }
          goto LABEL_157;
        }
        *(_DWORD *)v54 = v82;
        v54[1] = v38;
        v22 = v54 + 2;
        goto LABEL_167;
      }
      v57 = ((char *)v28 - (char *)v17) >> 4;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 60)
        abort();
      if ((v91 - (char *)v17) >> 3 > v58)
        v58 = (v91 - (char *)v17) >> 3;
      if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0)
        v59 = 0xFFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      if (v59)
      {
        if (v59 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v60 = (char *)operator new(16 * v59);
      }
      else
      {
        v60 = 0;
      }
      v73 = (double *)&v60[16 * v57];
      v91 = &v60[16 * v59];
      *(_DWORD *)v73 = v34;
      v73[1] = v41;
      v54 = v73 + 2;
      if (v28 == v17)
      {
        v11 = v92;
      }
      else
      {
        v11 = v92;
        do
        {
          *((_OWORD *)v73 - 1) = *((_OWORD *)v28 - 1);
          v73 -= 2;
          v28 -= 2;
        }
        while (v28 != v17);
        if (!v17)
          goto LABEL_139;
      }
      operator delete(v17);
LABEL_139:
      v17 = v73;
      v14 = a1;
      goto LABEL_140;
    }
  }
  return (__n128)v93;
}

void sub_2288BB768(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 geom_bvh_closest_point_3f(_QWORD *a1, void (*a2)(_QWORD, uint64_t, __n128), uint64_t a3, float *a4, unsigned int *a5, float32x4_t a6)
{
  int v10;
  int v11;
  float32x4_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  unsigned int v18;
  char *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned __int32 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  float v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  float32x4_t *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  unsigned int v66;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  __int32 v106;
  __int32 v107;
  __int32 v108;
  __int32 v109;
  uint64_t v110;
  __int32 v111;
  __int32 v112;
  __int32 v113;
  __int32 v114;
  float32x4_t v115;
  char *v117;
  int v118;
  int32x4_t v119;
  unsigned __int32 v120;

  if (a4)
  {
    *a4 = INFINITY;
    v10 = 0;
  }
  else
  {
    v10 = 2139095040;
  }
  v11 = -1;
  if (a5)
  {
    *a5 = -1;
    v11 = 0;
  }
  v119 = vdupq_n_s32(0x7FC00000u);
  if (a1[7] != a1[6])
  {
    v12 = (float32x4_t *)a1[3];
    v13 = a1[4] - (_QWORD)v12;
    if (v13)
    {
      v14 = a1;
      v15 = __clz(v13 >> 6);
      if (v15 == 31)
      {
        v16 = 0;
        v17 = 0;
      }
      else
      {
        v18 = 31 - v15;
        v19 = (char *)operator new(8 * (31 - v15));
        v14 = a1;
        v17 = v19;
        v16 = &v19[8 * v18];
      }
      v20 = a6;
      v20.i32[3] = 0;
      v22 = v12[2];
      v21 = v12[3];
      v21.i32[3] = 0;
      v115 = v20;
      v23 = vminnmq_f32(v20, v21);
      v23.i32[3] = 0;
      v22.i32[3] = 0;
      v24 = vsubq_f32(vmaxnmq_f32(v23, v22), a6);
      v25 = vmulq_f32(v24, v24);
      v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
      if (v17 >= v16)
      {
        v120 = v26;
        v28 = v16 - v17;
        v29 = v28 >> 2;
        if ((unint64_t)(v28 >> 2) <= 1)
          v29 = 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v31 = (char *)operator new(8 * v30);
        v117 = &v31[8 * v30];
        *(_DWORD *)v31 = 0;
        *((_DWORD *)v31 + 1) = v120;
        v27 = v31 + 8;
        if (v17)
          operator delete(v17);
        v17 = v31;
        v14 = a1;
      }
      else
      {
        v117 = v16;
        *(_DWORD *)v17 = 0;
        *((_DWORD *)v17 + 1) = v26;
        v27 = v17 + 8;
      }
      v119 = vdupq_n_s32(0x7FC00000u);
      v110 = a3;
      while (1)
      {
        v32 = *(float *)&v10;
        if (a4)
          v32 = *a4;
        v33 = (unsigned int *)(v27 - 8);
        if (v32 <= *((float *)v27 - 1))
        {
          v27 -= 8;
        }
        else
        {
          v118 = v11;
          v34 = v14[3];
          v35 = (unsigned int *)(v34 + ((unint64_t)*v33 << 6));
          v37 = (int *)(v35 + 1);
          v36 = v35[1];
          v38 = (int *)(v35 + 2);
          v39 = v35[2];
          if (v35[1] == -1 && (_DWORD)v39 == -1)
          {
            v56 = v35[4];
            if (v56)
            {
              v57 = v35[3];
              v58 = (unsigned int *)(v14[6] + 4 * v57);
              v59 = 4 * (v56 + v57) - 4 * v57;
              v11 = v118;
              do
              {
                v60 = *v58;
                a2(*v58, v110, (__n128)a6);
                v62 = *(float *)&v10;
                if (a4)
                  v62 = *a4;
                v63 = vsubq_f32(a6, v61);
                v64 = vmulq_f32(v63, v63);
                v65 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0];
                if (v65 < v62)
                  goto LABEL_50;
                v66 = v11;
                if (a5)
                  v66 = *a5;
                if (v65 == v62 && v60 < v66)
                {
LABEL_50:
                  if (a4)
                    *a4 = v65;
                  else
                    v10 = LODWORD(v65);
                  v119 = (int32x4_t)v61;
                  if (a5)
                    *a5 = v60;
                  else
                    v11 = v60;
                }
                ++v58;
                v59 -= 4;
              }
              while (v59);
              v27 = (char *)v33;
              goto LABEL_155;
            }
            goto LABEL_61;
          }
          v41 = (float32x4_t *)(v34 + (v36 << 6));
          v43 = v41[2];
          v42 = v41[3];
          v42.i32[3] = 0;
          v44 = vminnmq_f32(v115, v42);
          v44.i32[3] = 0;
          v43.i32[3] = 0;
          v45 = vsubq_f32(vmaxnmq_f32(v44, v43), a6);
          v46 = vmulq_f32(v45, v45);
          v47 = (float32x4_t *)(v34 + (v39 << 6));
          v49 = v47[2];
          v48 = v47[3];
          v48.i32[3] = 0;
          v50 = vminnmq_f32(v115, v48);
          v50.i32[3] = 0;
          v49.i32[3] = 0;
          v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)));
          v52 = vsubq_f32(vmaxnmq_f32(v50, v49), a6);
          v53 = vmulq_f32(v52, v52);
          v54 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1)));
          if (v51.f32[0] < v32 && v54.f32[0] < v32)
          {
            if ((vmovn_s32(vcgtq_f32(v54, v51)).u8[0] & 1) != 0)
            {
              if (v33 < (unsigned int *)v117)
              {
                *((_DWORD *)v27 - 2) = v39;
                *((_DWORD *)v27 - 1) = v54.i32[0];
                v68 = v27;
                v11 = v118;
                goto LABEL_137;
              }
              v69 = ((char *)v33 - v17) >> 3;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 61)
                abort();
              if ((v117 - v17) >> 2 > v70)
                v70 = (v117 - v17) >> 2;
              if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8)
                v71 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v71 = v70;
              v111 = v51.i32[0];
              if (v71)
              {
                v106 = v54.i32[0];
                if (v71 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v72 = (char *)operator new(8 * v71);
                v51.i32[0] = v111;
                v54.i32[0] = v106;
              }
              else
              {
                v72 = 0;
              }
              v85 = &v72[8 * v69];
              v117 = &v72[8 * v71];
              *(_DWORD *)v85 = v39;
              *((_DWORD *)v85 + 1) = v54.i32[0];
              v68 = v85 + 8;
              if (v33 == (unsigned int *)v17)
              {
                v11 = v118;
              }
              else
              {
                v11 = v118;
                do
                {
                  v86 = *((_QWORD *)v33 - 1);
                  v33 -= 2;
                  *((_QWORD *)v85 - 1) = v86;
                  v85 -= 8;
                }
                while (v33 != (unsigned int *)v17);
                if (!v17)
                  goto LABEL_136;
              }
              operator delete(v17);
              v51.i32[0] = v111;
LABEL_136:
              v17 = v85;
              v14 = a1;
LABEL_137:
              v97 = *v37;
              if (v68 >= v117)
              {
                v98 = (v68 - v17) >> 3;
                v99 = v98 + 1;
                if ((unint64_t)(v98 + 1) >> 61)
                  abort();
                if ((v117 - v17) >> 2 > v99)
                  v99 = (v117 - v17) >> 2;
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8)
                  v100 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v100 = v99;
                if (v100)
                {
                  v114 = v51.i32[0];
                  if (v100 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v101 = (char *)operator new(8 * v100);
                  v51.i32[0] = v114;
                }
                else
                {
                  v101 = 0;
                }
                v87 = &v101[8 * v98];
                v117 = &v101[8 * v100];
                *(_DWORD *)v87 = v97;
                *((_DWORD *)v87 + 1) = v51.i32[0];
                v27 = v87 + 8;
                if (v68 != v17)
                {
                  do
                  {
                    v102 = *((_QWORD *)v68 - 1);
                    v68 -= 8;
                    *((_QWORD *)v87 - 1) = v102;
                    v87 -= 8;
                  }
                  while (v68 != v17);
                  goto LABEL_152;
                }
                goto LABEL_153;
              }
              *(_DWORD *)v68 = v97;
              *((_DWORD *)v68 + 1) = v51.i32[0];
            }
            else
            {
              if (v33 >= (unsigned int *)v117)
              {
                v77 = ((char *)v33 - v17) >> 3;
                v78 = v77 + 1;
                v11 = v118;
                if ((unint64_t)(v77 + 1) >> 61)
                  abort();
                if ((v117 - v17) >> 2 > v78)
                  v78 = (v117 - v17) >> 2;
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8)
                  v79 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v79 = v78;
                v107 = v54.i32[0];
                if (v79)
                {
                  v113 = v51.i32[0];
                  if (v79 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v80 = (char *)operator new(8 * v79);
                  v51.i32[0] = v113;
                  v54.i32[0] = v107;
                }
                else
                {
                  v80 = 0;
                }
                v89 = &v80[8 * v77];
                *(_DWORD *)v89 = v36;
                *((_DWORD *)v89 + 1) = v51.i32[0];
                v68 = v89 + 8;
                v117 = &v80[8 * v79];
                if (v33 == (unsigned int *)v17)
                  goto LABEL_117;
                do
                {
                  v90 = *((_QWORD *)v33 - 1);
                  v33 -= 2;
                  *((_QWORD *)v89 - 1) = v90;
                  v89 -= 8;
                }
                while (v33 != (unsigned int *)v17);
                if (v17)
                {
LABEL_117:
                  operator delete(v17);
                  v54.i32[0] = v107;
                }
                v17 = v89;
                v14 = a1;
              }
              else
              {
                *((_DWORD *)v27 - 2) = v36;
                *((_DWORD *)v27 - 1) = v51.i32[0];
                v68 = v27;
                v11 = v118;
              }
              v91 = *v38;
              if (v68 >= v117)
              {
                v92 = (v68 - v17) >> 3;
                v93 = v92 + 1;
                if ((unint64_t)(v92 + 1) >> 61)
                  abort();
                if ((v117 - v17) >> 2 > v93)
                  v93 = (v117 - v17) >> 2;
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8)
                  v94 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v94 = v93;
                if (v94)
                {
                  v109 = v54.i32[0];
                  if (v94 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v95 = (char *)operator new(8 * v94);
                  v54.i32[0] = v109;
                }
                else
                {
                  v95 = 0;
                }
                v87 = &v95[8 * v92];
                v117 = &v95[8 * v94];
                *(_DWORD *)v87 = v91;
                *((_DWORD *)v87 + 1) = v54.i32[0];
                v27 = v87 + 8;
                if (v68 == v17)
                  goto LABEL_153;
                do
                {
                  v96 = *((_QWORD *)v68 - 1);
                  v68 -= 8;
                  *((_QWORD *)v87 - 1) = v96;
                  v87 -= 8;
                }
                while (v68 != v17);
LABEL_152:
                if (v17)
LABEL_153:
                  operator delete(v17);
                v17 = v87;
LABEL_155:
                v14 = a1;
                goto LABEL_156;
              }
              *(_DWORD *)v68 = v91;
              *((_DWORD *)v68 + 1) = v54.i32[0];
            }
            v27 = v68 + 8;
            goto LABEL_156;
          }
          if (v51.f32[0] >= v32)
          {
            if (v54.f32[0] < v32)
            {
              if (v33 >= (unsigned int *)v117)
              {
                v81 = ((char *)v33 - v17) >> 3;
                v82 = v81 + 1;
                if ((unint64_t)(v81 + 1) >> 61)
                  abort();
                if ((v117 - v17) >> 2 > v82)
                  v82 = (v117 - v17) >> 2;
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8)
                  v83 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v83 = v82;
                if (v83)
                {
                  v108 = v54.i32[0];
                  if (v83 >> 61)
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  v84 = (char *)operator new(8 * v83);
                  v54.i32[0] = v108;
                }
                else
                {
                  v84 = 0;
                }
                v103 = &v84[8 * v81];
                v117 = &v84[8 * v83];
                *(_DWORD *)v103 = v39;
                *((_DWORD *)v103 + 1) = v54.i32[0];
                v27 = v103 + 8;
                if (v33 == (unsigned int *)v17)
                {
                  v11 = v118;
                }
                else
                {
                  v11 = v118;
                  do
                  {
                    v104 = *((_QWORD *)v33 - 1);
                    v33 -= 2;
                    *((_QWORD *)v103 - 1) = v104;
                    v103 -= 8;
                  }
                  while (v33 != (unsigned int *)v17);
                  if (!v17)
                    goto LABEL_166;
                }
                operator delete(v17);
LABEL_166:
                v17 = v103;
                goto LABEL_155;
              }
              *((_DWORD *)v27 - 2) = v39;
              *((_DWORD *)v27 - 1) = v54.i32[0];
              goto LABEL_62;
            }
LABEL_61:
            v27 -= 8;
LABEL_62:
            v11 = v118;
            goto LABEL_156;
          }
          v11 = v118;
          if (v33 >= (unsigned int *)v117)
          {
            v73 = ((char *)v33 - v17) >> 3;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61)
              abort();
            if ((v117 - v17) >> 2 > v74)
              v74 = (v117 - v17) >> 2;
            if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8)
              v75 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v75 = v74;
            if (v75)
            {
              v112 = v51.i32[0];
              if (v75 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v76 = (char *)operator new(8 * v75);
              v51.i32[0] = v112;
            }
            else
            {
              v76 = 0;
            }
            v87 = &v76[8 * v73];
            v117 = &v76[8 * v75];
            *(_DWORD *)v87 = v36;
            *((_DWORD *)v87 + 1) = v51.i32[0];
            v27 = v87 + 8;
            if (v33 != (unsigned int *)v17)
            {
              do
              {
                v88 = *((_QWORD *)v33 - 1);
                v33 -= 2;
                *((_QWORD *)v87 - 1) = v88;
                v87 -= 8;
              }
              while (v33 != (unsigned int *)v17);
              goto LABEL_152;
            }
            goto LABEL_153;
          }
          *((_DWORD *)v27 - 2) = v36;
          *((_DWORD *)v27 - 1) = v51.i32[0];
        }
LABEL_156:
        if (v17 == v27)
        {
          if (v27)
            operator delete(v27);
          break;
        }
      }
    }
  }
  return (__n128)v119;
}

void sub_2288BC028(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

int8x16_t geom_bvh_closest_point_3d@<Q0>(_QWORD *a1@<X0>, void (*a2)(float64x2_t *__return_ptr, uint64_t, _OWORD *, uint64_t)@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X3>, double *a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v11;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  double *v18;
  double *v19;
  int8x16_t result;
  unint64_t v21;
  unsigned int v22;
  double *v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  double *v33;
  double v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int *v39;
  unsigned int v40;
  unsigned int v41;
  int *v42;
  uint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  double v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  double v64;
  unsigned int v65;
  double *v67;
  double *v68;
  double *v69;
  double *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  double *v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  double *v93;
  double *v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  double *v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  char *v105;
  int v106;
  unsigned int v107;
  float64x2_t v108;
  int64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  unint64_t v112;
  _OWORD v113[2];
  float64x2_t v114;
  float64x2_t v115;

  v11 = a1;
  v13 = a3[1];
  v110 = *a3;
  v111 = v13;
  if (a5)
  {
    *a5 = INFINITY;
    v14 = 0;
  }
  else
  {
    v14 = 0x7FF0000000000000;
  }
  if (a6)
  {
    *a6 = -1;
    v106 = 0;
  }
  else
  {
    v106 = -1;
  }
  if (a1[7] == a1[6] || (v15 = a1[3], (v16 = a1[4] - v15) == 0))
  {
    result.i64[0] = 0x7FF8000000000000;
    v21 = 0x7FF8000000000000;
    v13.f64[0] = NAN;
    goto LABEL_173;
  }
  v17 = __clz(-1431655765 * (v16 >> 5));
  if (v17 == 31)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v22 = 31 - v17;
    v23 = (double *)operator new(16 * (31 - v17));
    v11 = a1;
    v19 = v23;
    v18 = &v23[2 * v22];
  }
  v24 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v110, *(float64x2_t *)(v15 + 64)), *(float64x2_t *)(v15 + 32)), v110);
  v25 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v111.f64[0], (float64x2_t)*(unint64_t *)(v15 + 80)), (float64x2_t)*(unint64_t *)(v15 + 48)), v111);
  v26 = vmulq_f64(v25, v25);
  v27 = v26.f64[0] + vaddvq_f64(vmulq_f64(v24, v24));
  v102 = a7;
  if (v19 >= v18)
  {
    v30 = (char *)v18 - (char *)v19;
    v31 = v30 >> 3;
    if ((unint64_t)(v30 >> 3) <= 1)
      v31 = 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v33 = (double *)operator new(16 * v32);
    v105 = (char *)&v33[2 * v32];
    *v33 = 0.0;
    v28 = v33 + 2;
    v33[1] = v27;
    v29 = v106;
    if (v19)
      operator delete(v19);
    v19 = v33;
    v11 = a1;
  }
  else
  {
    v105 = (char *)v18;
    *v19 = 0.0;
    v28 = v19 + 2;
    v19[1] = v27;
    v29 = v106;
  }
  v26.f64[0] = NAN;
  v108 = v26;
  v109 = vdupq_n_s64(0x7FF8000000000000uLL);
  v103 = a4;
  do
  {
    v34 = *(double *)&v14;
    if (a5)
      v34 = *a5;
    v35 = v28 - 2;
    if (v34 <= *(v28 - 1))
    {
LABEL_38:
      v28 -= 2;
      continue;
    }
    v107 = v29;
    v36 = v11[3];
    v37 = v36 + 96 * *(unsigned int *)v35;
    v40 = *(_DWORD *)(v37 + 4);
    v39 = (int *)(v37 + 4);
    v38 = v40;
    v42 = v39 + 1;
    v41 = v39[1];
    if (v40 == -1 && v41 == -1)
    {
      v53 = v36 + 96 * *(unsigned int *)v35;
      v54 = *(_DWORD *)(v53 + 16);
      if (!v54)
      {
        v28 -= 2;
LABEL_113:
        v29 = v107;
        continue;
      }
      v55 = *(unsigned int *)(v53 + 12);
      v56 = (unsigned int *)(v11[6] + 4 * v55);
      v57 = 4 * (v54 + v55) - 4 * v55;
      v29 = v107;
      while (1)
      {
        v58 = *v56;
        v113[0] = v110;
        v113[1] = v111;
        a2(&v114, v58, v113, v103);
        v59 = *(double *)&v14;
        if (a5)
          v59 = *a5;
        v61 = v114;
        v60 = v115;
        v62 = vsubq_f64(v110, v114);
        v63 = vsubq_f64(v111, v115);
        v64 = vmulq_f64(v63, v63).f64[0] + vaddvq_f64(vmulq_f64(v62, v62));
        if (v64 >= v59)
        {
          v65 = v29;
          if (a6)
            v65 = *a6;
          if (v64 != v59 || v58 >= v65)
            goto LABEL_56;
        }
        if (a5)
        {
          *a5 = v64;
          if (!a6)
            goto LABEL_54;
        }
        else
        {
          v14 = *(_QWORD *)&v64;
          if (!a6)
          {
LABEL_54:
            v29 = v58;
            goto LABEL_55;
          }
        }
        *a6 = v58;
LABEL_55:
        v108 = v60;
        v109 = (int64x2_t)v61;
LABEL_56:
        ++v56;
        v57 -= 4;
        if (!v57)
        {
          v28 = v35;
          goto LABEL_58;
        }
      }
    }
    v44 = v36 + 96 * v38;
    v45 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v110, *(float64x2_t *)(v44 + 64)), *(float64x2_t *)(v44 + 32)), v110);
    v46 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v111.f64[0], (float64x2_t)*(unint64_t *)(v44 + 80)), (float64x2_t)*(unint64_t *)(v44 + 48)), v111);
    v47 = vmulq_f64(v46, v46).f64[0] + vaddvq_f64(vmulq_f64(v45, v45));
    v48 = v36 + 96 * v41;
    v49 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v110, *(float64x2_t *)(v48 + 64)), *(float64x2_t *)(v48 + 32)), v110);
    v50 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v111.f64[0], (float64x2_t)*(unint64_t *)(v48 + 80)), (float64x2_t)*(unint64_t *)(v48 + 48)), v111);
    v51 = vmulq_f64(v50, v50).f64[0] + vaddvq_f64(vmulq_f64(v49, v49));
    if (v47 < v34 && v51 < v34)
    {
      if (v47 >= v51)
      {
        if (v35 >= (double *)v105)
        {
          v79 = ((char *)v35 - (char *)v19) >> 4;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 60)
            abort();
          if ((v105 - (char *)v19) >> 3 > v80)
            v80 = (v105 - (char *)v19) >> 3;
          if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0)
            v81 = 0xFFFFFFFFFFFFFFFLL;
          else
            v81 = v80;
          if (v81)
          {
            if (v81 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v82 = (char *)operator new(16 * v81);
          }
          else
          {
            v82 = 0;
          }
          v94 = (double *)&v82[16 * v79];
          v70 = (double *)&v82[16 * v81];
          *(_DWORD *)v94 = v38;
          v94[1] = v47;
          v69 = v94 + 2;
          if (v35 == v19)
            goto LABEL_133;
          do
          {
            *((_OWORD *)v94 - 1) = *((_OWORD *)v35 - 1);
            v94 -= 2;
            v35 -= 2;
          }
          while (v35 != v19);
          if (v19)
LABEL_133:
            operator delete(v19);
          v19 = v94;
          v11 = a1;
          v29 = v107;
        }
        else
        {
          *((_DWORD *)v28 - 4) = v38;
          *(v28 - 1) = v47;
          v69 = v28;
          v29 = v107;
          v70 = (double *)v105;
        }
        v95 = *v42;
        if (v69 < v70)
        {
          v105 = (char *)v70;
          *(_DWORD *)v69 = v95;
          v69[1] = v51;
          v28 = v69 + 2;
          continue;
        }
        v96 = ((char *)v69 - (char *)v19) >> 4;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 60)
          abort();
        if (v70 - v19 > v97)
          v97 = v70 - v19;
        if ((unint64_t)((char *)v70 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0)
          v98 = 0xFFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        if (v98)
        {
          if (v98 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v99 = (char *)operator new(16 * v98);
        }
        else
        {
          v99 = 0;
        }
        v100 = (double *)&v99[16 * v96];
        v105 = &v99[16 * v98];
        *(_DWORD *)v100 = v95;
        v100[1] = v51;
        v28 = v100 + 2;
        if (v69 == v19)
          goto LABEL_154;
        do
        {
          *((_OWORD *)v100 - 1) = *((_OWORD *)v69 - 1);
          v100 -= 2;
          v69 -= 2;
        }
        while (v69 != v19);
      }
      else
      {
        if (v35 >= (double *)v105)
        {
          v71 = ((char *)v35 - (char *)v19) >> 4;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 60)
            abort();
          if ((v105 - (char *)v19) >> 3 > v72)
            v72 = (v105 - (char *)v19) >> 3;
          if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0)
            v73 = 0xFFFFFFFFFFFFFFFLL;
          else
            v73 = v72;
          if (v73)
          {
            if (v73 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v74 = (char *)operator new(16 * v73);
          }
          else
          {
            v74 = 0;
          }
          v87 = (double *)&v74[16 * v71];
          v68 = (double *)&v74[16 * v73];
          *(_DWORD *)v87 = v41;
          v87[1] = v51;
          v67 = v87 + 2;
          if (v35 == v19)
            goto LABEL_109;
          do
          {
            *((_OWORD *)v87 - 1) = *((_OWORD *)v35 - 1);
            v87 -= 2;
            v35 -= 2;
          }
          while (v35 != v19);
          if (v19)
LABEL_109:
            operator delete(v19);
          v19 = v87;
          v11 = a1;
        }
        else
        {
          *((_DWORD *)v28 - 4) = v41;
          *(v28 - 1) = v51;
          v67 = v28;
          v68 = (double *)v105;
        }
        v88 = *v39;
        if (v67 < v68)
        {
          v105 = (char *)v68;
          *(_DWORD *)v67 = v88;
          v67[1] = v47;
          v28 = v67 + 2;
          goto LABEL_113;
        }
        v89 = ((char *)v67 - (char *)v19) >> 4;
        v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 60)
          abort();
        if (v68 - v19 > v90)
          v90 = v68 - v19;
        if ((unint64_t)((char *)v68 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0)
          v91 = 0xFFFFFFFFFFFFFFFLL;
        else
          v91 = v90;
        if (v91)
        {
          if (v91 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v92 = (char *)operator new(16 * v91);
        }
        else
        {
          v92 = 0;
        }
        v100 = (double *)&v92[16 * v89];
        v105 = &v92[16 * v91];
        *(_DWORD *)v100 = v88;
        v100[1] = v47;
        v28 = v100 + 2;
        if (v67 == v19)
          goto LABEL_154;
        do
        {
          *((_OWORD *)v100 - 1) = *((_OWORD *)v67 - 1);
          v100 -= 2;
          v67 -= 2;
        }
        while (v67 != v19);
      }
      if (!v19)
      {
LABEL_155:
        v19 = v100;
        v11 = a1;
        v29 = v107;
        continue;
      }
LABEL_154:
      operator delete(v19);
      goto LABEL_155;
    }
    if (v47 < v34)
    {
      v29 = v107;
      if (v35 < (double *)v105)
      {
        *((_DWORD *)v28 - 4) = v38;
        *(v28 - 1) = v47;
        continue;
      }
      v75 = ((char *)v35 - (char *)v19) >> 4;
      v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 60)
        abort();
      if ((v105 - (char *)v19) >> 3 > v76)
        v76 = (v105 - (char *)v19) >> 3;
      if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0)
        v77 = 0xFFFFFFFFFFFFFFFLL;
      else
        v77 = v76;
      if (v77)
      {
        if (v77 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v78 = (char *)operator new(16 * v77);
      }
      else
      {
        v78 = 0;
      }
      v93 = (double *)&v78[16 * v75];
      v105 = &v78[16 * v77];
      *(_DWORD *)v93 = v38;
      v93[1] = v47;
      v28 = v93 + 2;
      if (v35 == v19)
      {
        v29 = v107;
      }
      else
      {
        v29 = v107;
        do
        {
          *((_OWORD *)v93 - 1) = *((_OWORD *)v35 - 1);
          v93 -= 2;
          v35 -= 2;
        }
        while (v35 != v19);
        if (!v19)
          goto LABEL_160;
      }
      operator delete(v19);
LABEL_160:
      v19 = v93;
LABEL_58:
      v11 = a1;
      continue;
    }
    v29 = v107;
    if (v51 >= v34)
      goto LABEL_38;
    if (v35 >= (double *)v105)
    {
      v83 = ((char *)v35 - (char *)v19) >> 4;
      v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 60)
        abort();
      if ((v105 - (char *)v19) >> 3 > v84)
        v84 = (v105 - (char *)v19) >> 3;
      if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0)
        v85 = 0xFFFFFFFFFFFFFFFLL;
      else
        v85 = v84;
      if (v85)
      {
        if (v85 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v86 = (char *)operator new(16 * v85);
      }
      else
      {
        v86 = 0;
      }
      v101 = (double *)&v86[16 * v83];
      v105 = &v86[16 * v85];
      *(_DWORD *)v101 = v41;
      v101[1] = v51;
      v28 = v101 + 2;
      if (v35 == v19)
      {
        v29 = v107;
      }
      else
      {
        v29 = v107;
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v35 - 1);
          v101 -= 2;
          v35 -= 2;
        }
        while (v35 != v19);
        if (!v19)
        {
LABEL_169:
          v19 = v101;
          goto LABEL_58;
        }
      }
      operator delete(v19);
      goto LABEL_169;
    }
    *((_DWORD *)v28 - 4) = v41;
    *(v28 - 1) = v51;
  }
  while (v19 != v28);
  result = (int8x16_t)v109;
  v21 = vextq_s8(result, result, 8uLL).u64[0];
  if (v28)
  {
    v112 = v21;
    operator delete(v28);
    v21 = v112;
    result.i64[0] = v109.i64[0];
  }
  a7 = v102;
  v13 = v108;
LABEL_173:
  result.i64[1] = v21;
  *(int8x16_t *)a7 = result;
  *(float64x2_t *)(a7 + 16) = v13;
  return result;
}

void sub_2288BC994(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

unint64_t geom_triangle_mesh_bvh_raycast_3f(uint64_t a1, float *a2, unsigned int *a3, int32x4_t *a4, float32x4_t a5, __n128 a6)
{
  _QWORD *v10;
  float *v11;
  unsigned int *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v19;
  int32x4_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = a1;
  v21 = -1;
  v22 = 2139095040;
  v20 = vdupq_n_s32(0x7FC00000u);
  v19 = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24F149230;
  v10[1] = &v23;
  v10[2] = &v22;
  v10[3] = &v21;
  v10[4] = &v20;
  v25 = v10;
  if (a2)
    v11 = a2;
  else
    v11 = (float *)&v19 + 1;
  if (a3)
    v12 = a3;
  else
    v12 = (unsigned int *)&v19;
  v13 = geom::bvh<float,(unsigned char)3>::raycast((_QWORD *)(a1 + 16), (uint64_t)v24, v11, v12, a5, a6);
  v14 = v25;
  if (v25 == v24)
  {
    v15 = 4;
    v14 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_12;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_12:
  if (a4)
    *a4 = v20;
  return v13;
}

void sub_2288BCB04(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geom_triangle_mesh_bvh_raycast_3d(uint64_t a1, __int128 *a2, double *a3, unsigned int *a4, int64x2_t *a5, double a6, __n128 a7)
{
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __n128 v15;
  double *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __n128 v24;
  __int128 v26[4];
  int v27;
  uint64_t v28;
  int64x2_t v29;
  __n128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v32 = 0x7FF0000000000000;
  v33 = a1;
  v31 = -1;
  a7.n128_u64[0] = 0x7FF8000000000000;
  v29 = vdupq_n_s64(0x7FF8000000000000uLL);
  v30 = a7;
  v28 = 0;
  v27 = 0;
  v12 = operator new(0x28uLL);
  *v12 = &off_24F1492B0;
  v12[1] = &v33;
  v12[2] = &v32;
  v12[3] = &v31;
  v12[4] = &v29;
  v35 = v12;
  v13 = a2[1];
  v26[0] = *a2;
  v26[1] = v13;
  v14 = a2[2];
  v15 = (__n128)a2[3];
  if (a3)
    v16 = a3;
  else
    v16 = (double *)&v28;
  if (a4)
    v17 = a4;
  else
    v17 = (unsigned int *)&v27;
  v26[2] = a2[2];
  v26[3] = (__int128)v15;
  v21 = geom::bvh<double,(unsigned char)3>::raycast((_QWORD *)(a1 + 16), (uint64_t)v34, v26, v16, v17, *(double *)&v14, v15);
  v22 = v35;
  if (v35 == v34)
  {
    v23 = 4;
    v22 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_12;
    v23 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v22 + 8 * v23))(v22, v18, v19, v20);
LABEL_12:
  if (a5)
  {
    v24 = v30;
    *a5 = v29;
    a5[1] = (int64x2_t)v24;
  }
  return v21;
}

void sub_2288BCC80(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double geom_triangle_mesh_bvh_closest_point_3f(_QWORD *a1, float *a2, unsigned int *a3, float32x4_t *a4, float32x4_t a5)
{
  float *v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  unint64_t v12;
  uint64_t v13;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned __int32 v22;
  char *v23;
  _QWORD *v24;
  float *v25;
  float *v26;
  unsigned int v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  int32x4_t v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  float *v55;
  float v56;
  uint64_t v57;
  unsigned int *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unsigned int *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t *v90;
  unint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  int8x8_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x8_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int16x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  int8x8_t v129;
  float32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int16x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int16x4_t v144;
  float32x4_t v145;
  int8x8_t v146;
  float32x4_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int16x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int8x8_t v157;
  float32x4_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  uint64_t v170;
  uint64_t v171;
  float32x4_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float v179;
  unsigned int v180;
  char *v181;
  float *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  int v210;
  float *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  int v220;
  float *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  float *v228;
  uint64_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float v235;
  float v236;
  float v237;
  float32x4_t v238;
  float32x4_t v239;
  float v240;
  float32_t v241;
  float32_t v242;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  float32x4_t *v247;
  __int32 v249;
  __int32 v250;
  __int32 v251;
  __int32 v252;
  __int32 v253;
  __int32 v254;
  __int32 v255;
  __int32 v256;
  float32x4_t v257;
  _QWORD *v258;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  uint64_t v263;
  uint64_t v264;
  float32x4_t v265;
  unsigned __int32 v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  int8x16_t v270;
  float32x4_t *v271;
  float32x4_t *v272;
  uint64_t v273;
  char *v274;
  float *v275;
  char *v276;

  v7 = a2;
  v8 = a5;
  v9 = a1[18];
  v10 = a1[21];
  v11.i64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
  if (a1[7] == a1[6] || (v12 = a1[4] - a1[3]) == 0)
  {
    v27 = -1;
    v28 = INFINITY;
    if (!a2)
      goto LABEL_7;
    goto LABEL_6;
  }
  v13 = a1[15];
  v274 = 0;
  v275 = 0;
  v276 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIfLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIfEEEEDv3_fT_S8_RfRjE5stateNS_9allocatorISC_EEE7reserveEm((uint64_t)&v274, 31 - __clz(v12 >> 6));
  v15 = (float32x4_t *)a1[3];
  v8 = a5;
  v16 = a5;
  v16.i32[3] = 0;
  v18 = v15[2];
  v17 = v15[3];
  v17.i32[3] = 0;
  v257 = v16;
  v19 = vminnmq_f32(v16, v17);
  v19.i32[3] = 0;
  v18.i32[3] = 0;
  v20 = vsubq_f32(vmaxnmq_f32(v19, v18), a5);
  v21 = vmulq_f32(v20, v20);
  v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u32[0];
  v23 = (char *)v275;
  v24 = a1;
  v258 = a1;
  v246 = v9;
  v247 = a4;
  v244 = a3;
  v245 = v10;
  if (v275 >= (float *)v276)
  {
    v39 = v274;
    v40 = ((char *)v275 - v274) >> 3;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61)
      abort();
    v42 = v276 - v274;
    if ((v276 - v274) >> 2 > v41)
      v41 = v42 >> 2;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      v266 = v22;
      if (v43 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v44 = (char *)operator new(8 * v43);
      v8 = a5;
      v24 = v258;
      v22 = v266;
    }
    else
    {
      v44 = 0;
    }
    v26 = (float *)&v44[8 * v40];
    *v26 = 0.0;
    *((_DWORD *)v26 + 1) = v22;
    v25 = v26 + 2;
    if (v23 != v39)
    {
      do
      {
        v52 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v26 - 1) = v52;
        v26 -= 2;
      }
      while (v23 != v39);
      v23 = v274;
    }
    v274 = (char *)v26;
    v276 = &v44[8 * v43];
    if (v23)
    {
      operator delete(v23);
      v24 = v258;
      v8 = a5;
    }
  }
  else
  {
    *v275 = 0.0;
    *((_DWORD *)v23 + 1) = v22;
    v25 = (float *)(v23 + 8);
    v26 = (float *)v274;
  }
  v271 = 0;
  v272 = 0;
  v273 = 0;
  if (v26 == v25)
  {
    v11.i64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
    v27 = -1;
    v28 = INFINITY;
    v7 = a2;
    goto LABEL_199;
  }
  v260 = vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
  v11 = vdupq_n_s32(0x7FC00000u);
  v27 = -1;
  v28 = INFINITY;
  v265 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1);
  v267 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2);
  v53 = v26;
  do
  {
    v55 = v25 - 2;
    v54 = *((unsigned int *)v25 - 2);
    v56 = *(v25 - 1);
    v275 = v25 - 2;
    if (v28 <= v56)
    {
LABEL_87:
      v25 = v55;
      goto LABEL_194;
    }
    v57 = v24[3];
    v58 = (unsigned int *)(v57 + (v54 << 6));
    v59 = (int *)(v58 + 1);
    v60 = v58[1];
    v62 = (int *)(v58 + 2);
    v61 = v58[2];
    if (v58[1] == -1 && (_DWORD)v61 == -1)
    {
      v261 = v11;
      v81 = v58[3];
      v79 = v58 + 3;
      v80 = v81;
      v82 = v24[6];
      v83 = v79[1];
      v84 = v83 + v81 - (unint64_t)v81;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v271, v84);
      v85 = *v79;
      v86 = v79[1] + v85;
      v87 = (float32x4_t)v260;
      v89 = v265;
      v88 = v267;
      if (v85 >> 2 < (v86 + 3) >> 2)
      {
        v90 = v271;
        v91 = v85 >> 2;
        v92 = 4 * (v85 >> 2);
        while (1)
        {
          v93 = (float32x4_t *)(v13 + 144 * v91);
          v94 = *v93;
          v95 = v93[1];
          v96 = v93[2];
          v97 = v93[3];
          v98 = vsubq_f32(v97, *v93);
          v100 = v93[4];
          v99 = v93[5];
          v101 = vsubq_f32(v100, v95);
          v102 = vsubq_f32(v99, v96);
          v103 = v93[6];
          v104 = v93[7];
          v105 = vsubq_f32(v103, *v93);
          v106 = vsubq_f32(v104, v95);
          v107 = v93[8];
          v108 = vsubq_f32(v107, v96);
          v109 = vsubq_f32(v87, *v93);
          v110 = vsubq_f32(v89, v95);
          v111 = vsubq_f32(v88, v96);
          v112 = vmlaq_f32(vmlaq_f32(vmulq_f32(v101, v110), v109, v98), v111, v102);
          v113 = vmlaq_f32(vmlaq_f32(vmulq_f32(v110, v106), v109, v105), v111, v108);
          v114 = (int32x4_t)vandq_s8((int8x16_t)vclezq_f32(v113), (int8x16_t)vclezq_f32(v112));
          if ((vminvq_u32((uint32x4_t)v114) & 0x80000000) != 0)
          {
            v125 = (int8x16_t)v93[2];
            goto LABEL_71;
          }
          v115 = (int8x8_t)vmovn_s32(v114);
          v116 = vsubq_f32(v88, v99);
          v117 = vsubq_f32(v89, v100);
          v118 = vsubq_f32(v87, v97);
          v119 = vmlaq_f32(vmlaq_f32(vmulq_f32(v117, v101), v118, v98), v116, v102);
          v120 = vmlaq_f32(vmlaq_f32(vmulq_f32(v117, v106), v118, v105), v116, v108);
          v121 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgeq_f32(v119, v120), (int8x16_t)vcgezq_f32(v119)));
          v122 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v121, v115));
          v123 = vbslq_s8(v122, (int8x16_t)v97, (int8x16_t)v94);
          v124 = vbslq_s8(v122, (int8x16_t)v100, (int8x16_t)v95);
          v125 = vbslq_s8(v122, (int8x16_t)v99, (int8x16_t)v96);
          v126 = (int16x4_t)vorr_s8(v115, v121);
          if ((vminvq_u32((uint32x4_t)vmovl_s16(v126)) & 0x80000000) != 0)
          {
            v94 = (float32x4_t)v123;
            v95 = (float32x4_t)v124;
            goto LABEL_71;
          }
          v127 = vmlaq_f32(vmulq_f32(v113, vnegq_f32(v119)), v120, v112);
          v128 = vsubq_f32(v112, v119);
          v129 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vclezq_f32(v119), (int8x16_t)vcgezq_f32(v112)), (int8x16_t)vceqzq_f32(v128)), (int8x16_t)vclezq_f32(v127)));
          v130 = vdivq_f32(v112, v128);
          v131 = (int8x16_t)vaddq_f32(v96, vmulq_f32(v102, v130));
          v132 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v129, (int8x8_t)v126));
          v133 = vbslq_s8(v132, (int8x16_t)vaddq_f32(vmulq_f32(v98, v130), v94), v123);
          v134 = vbslq_s8(v132, (int8x16_t)vaddq_f32(v95, vmulq_f32(v101, v130)), v124);
          v125 = vbslq_s8(v132, v131, v125);
          v135 = (int16x4_t)vorr_s8(v129, (int8x8_t)v126);
          if ((vminvq_u32((uint32x4_t)vmovl_s16(v135)) & 0x80000000) != 0)
            break;
          v136 = vsubq_f32(v87, v103);
          v89 = v265;
          v137 = vsubq_f32(v265, v104);
          v138 = vsubq_f32(v267, v107);
          v139 = vmlaq_f32(vmlaq_f32(vmulq_f32(v101, v137), v136, v98), v138, v102);
          v140 = vmlaq_f32(vmlaq_f32(vmulq_f32(v106, v137), v136, v105), v138, v108);
          *(int16x4_t *)v138.f32 = vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgezq_f32(v140), (int8x16_t)vcgeq_f32(v140, v139)));
          v141 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(*(int8x8_t *)v138.f32, (int8x8_t)v135));
          v142 = vbslq_s8(v141, (int8x16_t)v103, v133);
          v143 = vbslq_s8(v141, (int8x16_t)v104, v134);
          v125 = vbslq_s8(v141, (int8x16_t)v107, v125);
          v144 = (int16x4_t)vorr_s8((int8x8_t)v135, *(int8x8_t *)v138.f32);
          if ((vminvq_u32((uint32x4_t)vmovl_s16(v144)) & 0x80000000) == 0)
          {
            v145 = vmlaq_f32(vmulq_f32(v140, vnegq_f32(v112)), v113, v139);
            v146 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vclezq_f32(v140), (int8x16_t)vcgezq_f32(v113)), (int8x16_t)vceqq_f32(v113, v140)), (int8x16_t)vclezq_f32(v145)));
            v147 = vdivq_f32(v113, vsubq_f32(v113, v140));
            v148 = (int8x16_t)vaddq_f32(v96, vmulq_f32(v108, v147));
            v149 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v146, (int8x8_t)v144));
            v150 = vbslq_s8(v149, (int8x16_t)vaddq_f32(vmulq_f32(v105, v147), v94), v142);
            v151 = vbslq_s8(v149, (int8x16_t)vaddq_f32(v95, vmulq_f32(v106, v147)), v143);
            v125 = vbslq_s8(v149, v148, v125);
            v152 = (int16x4_t)vorr_s8((int8x8_t)v144, v146);
            if ((vminvq_u32((uint32x4_t)vmovl_s16(v152)) & 0x80000000) != 0)
            {
              v94 = (float32x4_t)v150;
              v95 = (float32x4_t)v151;
            }
            else
            {
              v153 = vsubq_f32(v103, v97);
              v154 = vmlaq_f32(vmulq_f32(v120, vnegq_f32(v139)), v140, v119);
              v155 = vsubq_f32(v120, v119);
              v156 = vsubq_f32(v139, v140);
              v157 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgezq_f32(v156), (int8x16_t)vcgezq_f32(v155)), (int8x16_t)vclezq_f32(v154)));
              v158 = vdivq_f32(v155, vaddq_f32(v155, v156));
              v159 = (int8x16_t)vaddq_f32(vmulq_f32(vsubq_f32(v104, v100), v158), v100);
              v160 = (int8x16_t)vaddq_f32(vmulq_f32(vsubq_f32(v107, v99), v158), v99);
              v161 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v157, (int8x8_t)v152));
              v162 = vbslq_s8(v161, (int8x16_t)vaddq_f32(vmulq_f32(v153, v158), v97), v150);
              v163 = vbslq_s8(v161, v159, v151);
              v125 = vbslq_s8(v161, v160, v125);
              v164 = (int8x16_t)vmovl_s16((int16x4_t)vorr_s8((int8x8_t)v152, v157));
              if ((vminvq_u32((uint32x4_t)v164) & 0x80000000) != 0)
              {
                v94 = (float32x4_t)v162;
                v95 = (float32x4_t)v163;
              }
              else
              {
                __asm { FMOV            V22.4S, #1.0 }
                v167 = vdivq_f32(_Q22, vaddq_f32(v127, vaddq_f32(v154, v145)));
                v168 = vmulq_f32(v145, v167);
                v169 = vmulq_f32(v127, v167);
                v94 = (float32x4_t)vbslq_s8(v164, v162, (int8x16_t)vaddq_f32(vmulq_f32(v105, v169), vaddq_f32(vmulq_f32(v98, v168), v94)));
                v95 = (float32x4_t)vbslq_s8(v164, v163, (int8x16_t)vaddq_f32(vmulq_f32(v106, v169), vaddq_f32(v95, vmulq_f32(v101, v168))));
                v125 = vorrq_s8(vandq_s8(v125, v164), vbicq_s8((int8x16_t)vaddq_f32(vmulq_f32(v108, v169), vaddq_f32(v96, vmulq_f32(v102, v168))), v164));
              }
            }
            v87 = (float32x4_t)v260;
            goto LABEL_69;
          }
          v94 = (float32x4_t)v142;
          v95 = (float32x4_t)v143;
LABEL_70:
          v88 = v267;
LABEL_71:
          v170 = 0;
          v171 = v92 & 0xFFFFFFFC;
          do
          {
            if (v171 + v170 >= v85 && v171 + v170 < v86)
            {
              v173 = &v90[(v92 & 0xFFFFFFFC) - v85 + v170];
              v268 = v94;
              LODWORD(v174) = *(_DWORD *)((unint64_t)&v268 & 0xFFFFFFFFFFFFFFF3 | (4 * (v170 & 3)));
              v269 = v95;
              v270 = v125;
              HIDWORD(v174) = *(_DWORD *)((unint64_t)&v269 & 0xFFFFFFFFFFFFFFF3 | (4 * (v170 & 3)));
              v173->i32[2] = *(_DWORD *)((unint64_t)&v270 & 0xFFFFFFFFFFFFFFF3 | (4 * (v170 & 3)));
              v173->i64[0] = v174;
            }
            ++v170;
          }
          while (v170 != 4);
          ++v91;
          LODWORD(v92) = v92 + 4;
          if (v91 == (v86 + 3) >> 2)
            goto LABEL_79;
        }
        v94 = (float32x4_t)v133;
        v95 = (float32x4_t)v134;
LABEL_69:
        v89 = v265;
        goto LABEL_70;
      }
LABEL_79:
      v8 = a5;
      v11 = v261;
      if (!v83)
      {
        v25 = v55;
        v24 = v258;
        goto LABEL_194;
      }
      v175 = 0;
      v176 = v82 + 4 * v80;
      v24 = v258;
      while (1)
      {
        v177 = vsubq_f32(a5, v271[v175]);
        v178 = vmulq_f32(v177, v177);
        v179 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 2), vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1))).f32[0];
        if (v179 >= v28)
        {
          if (v179 != v28)
            goto LABEL_86;
          v180 = *(_DWORD *)(v176 + 4 * v175);
          if (v180 >= v27)
            goto LABEL_86;
        }
        else
        {
          v180 = *(_DWORD *)(v176 + 4 * v175);
        }
        v27 = v180;
        v28 = v179;
        v11 = (int32x4_t)v271[v175];
LABEL_86:
        if (v84 <= ++v175)
          goto LABEL_87;
      }
    }
    v64 = (float32x4_t *)(v57 + (v60 << 6));
    v66 = v64[2];
    v65 = v64[3];
    v65.i32[3] = 0;
    v67 = vminnmq_f32(v257, v65);
    v67.i32[3] = 0;
    v66.i32[3] = 0;
    v68 = vsubq_f32(vmaxnmq_f32(v67, v66), v8);
    v69 = vmulq_f32(v68, v68);
    v70 = (float32x4_t *)(v57 + (v61 << 6));
    v72 = v70[2];
    v71 = v70[3];
    v71.i32[3] = 0;
    v73 = vminnmq_f32(v257, v71);
    v73.i32[3] = 0;
    v72.i32[3] = 0;
    v74 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1)));
    v75 = vsubq_f32(vmaxnmq_f32(v73, v72), v8);
    v76 = vmulq_f32(v75, v75);
    v77 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)));
    if (v74.f32[0] < v28 && v77.f32[0] < v28)
    {
      v181 = v276;
      v262 = v11;
      if ((vmovn_s32(vcgtq_f32(v77, v74)).u8[0] & 1) != 0)
      {
        if (v55 < (float *)v276)
        {
          *((_DWORD *)v25 - 2) = v61;
          *(v25 - 1) = v77.f32[0];
          goto LABEL_149;
        }
        v183 = ((char *)v55 - (char *)v53) >> 3;
        v184 = v183 + 1;
        if ((unint64_t)(v183 + 1) >> 61)
          abort();
        v185 = v276 - (char *)v53;
        if ((v276 - (char *)v53) >> 2 > v184)
          v184 = v185 >> 2;
        if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8)
          v186 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v186 = v184;
        v253 = v74.i32[0];
        if (v186)
        {
          v249 = v77.i32[0];
          if (v186 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v187 = (char *)operator new(8 * v186);
          v8 = a5;
          v11 = v262;
          v24 = v258;
          v77.i32[0] = v249;
          v74.i32[0] = v253;
        }
        else
        {
          v187 = 0;
        }
        v203 = &v187[8 * v183];
        v181 = &v187[8 * v186];
        *(_DWORD *)v203 = v61;
        *((_DWORD *)v203 + 1) = v77.i32[0];
        v25 = (float *)(v203 + 8);
        if (v55 == v53)
        {
          v274 = &v187[8 * v183];
          v275 = (float *)(v203 + 8);
          v276 = &v187[8 * v186];
        }
        else
        {
          do
          {
            v204 = *((_QWORD *)v55 - 1);
            v55 -= 2;
            *((_QWORD *)v203 - 1) = v204;
            v203 -= 8;
          }
          while (v55 != v53);
          v53 = (float *)v274;
          v274 = v203;
          v275 = v25;
          v276 = &v187[8 * v186];
          if (!v53)
          {
LABEL_149:
            v275 = v25;
            v210 = *v59;
            if (v25 < (float *)v181)
            {
              *(_DWORD *)v25 = v210;
              v25[1] = v74.f32[0];
LABEL_168:
              v182 = v25 + 2;
              goto LABEL_193;
            }
            v211 = (float *)v274;
            v212 = ((char *)v25 - v274) >> 3;
            v213 = v212 + 1;
            if ((unint64_t)(v212 + 1) >> 61)
              abort();
            v214 = v181 - v274;
            if (v214 >> 2 > v213)
              v213 = v214 >> 2;
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8)
              v215 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v215 = v213;
            if (v215)
            {
              v256 = v74.i32[0];
              if (v215 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v216 = (char *)operator new(8 * v215);
              v8 = a5;
              v11 = v262;
              v24 = v258;
              v74.i32[0] = v256;
            }
            else
            {
              v216 = 0;
            }
            v217 = &v216[8 * v212];
            v218 = &v216[8 * v215];
            *(_DWORD *)v217 = v210;
            *((_DWORD *)v217 + 1) = v74.i32[0];
            v182 = (float *)(v217 + 8);
            if (v25 != v211)
            {
              do
              {
                v219 = *((_QWORD *)v25 - 1);
                v25 -= 2;
                *((_QWORD *)v217 - 1) = v219;
                v217 -= 8;
              }
              while (v25 != v211);
              goto LABEL_181;
            }
            goto LABEL_183;
          }
        }
        operator delete(v53);
        v74.i32[0] = v253;
        v24 = v258;
        v11 = v262;
        v8 = a5;
        v181 = v276;
        goto LABEL_149;
      }
      if (v55 < (float *)v276)
      {
        *((_DWORD *)v25 - 2) = v60;
        *(v25 - 1) = v74.f32[0];
        goto LABEL_166;
      }
      v193 = ((char *)v55 - (char *)v53) >> 3;
      v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 61)
        abort();
      v195 = v276 - (char *)v53;
      if ((v276 - (char *)v53) >> 2 > v194)
        v194 = v195 >> 2;
      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8)
        v196 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v196 = v194;
      v250 = v77.i32[0];
      if (v196)
      {
        v255 = v74.i32[0];
        if (v196 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v197 = (char *)operator new(8 * v196);
        v8 = a5;
        v11 = v262;
        v24 = v258;
        v77.i32[0] = v250;
        v74.i32[0] = v255;
      }
      else
      {
        v197 = 0;
      }
      v208 = &v197[8 * v193];
      v181 = &v197[8 * v196];
      *(_DWORD *)v208 = v60;
      *((_DWORD *)v208 + 1) = v74.i32[0];
      v25 = (float *)(v208 + 8);
      if (v55 == v53)
      {
        v274 = &v197[8 * v193];
        v275 = (float *)(v208 + 8);
        v276 = &v197[8 * v196];
      }
      else
      {
        do
        {
          v209 = *((_QWORD *)v55 - 1);
          v55 -= 2;
          *((_QWORD *)v208 - 1) = v209;
          v208 -= 8;
        }
        while (v55 != v53);
        v53 = (float *)v274;
        v274 = v208;
        v275 = v25;
        v276 = &v197[8 * v196];
        if (!v53)
        {
LABEL_166:
          v275 = v25;
          v220 = *v62;
          if (v25 < (float *)v181)
          {
            *(_DWORD *)v25 = v220;
            v25[1] = v77.f32[0];
            goto LABEL_168;
          }
          v221 = (float *)v274;
          v222 = ((char *)v25 - v274) >> 3;
          v223 = v222 + 1;
          if ((unint64_t)(v222 + 1) >> 61)
            abort();
          v224 = v181 - v274;
          if (v224 >> 2 > v223)
            v223 = v224 >> 2;
          if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8)
            v225 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v225 = v223;
          if (v225)
          {
            v252 = v77.i32[0];
            if (v225 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v226 = (char *)operator new(8 * v225);
            v8 = a5;
            v11 = v262;
            v24 = v258;
            v77.i32[0] = v252;
          }
          else
          {
            v226 = 0;
          }
          v217 = &v226[8 * v222];
          v218 = &v226[8 * v225];
          *(_DWORD *)v217 = v220;
          *((_DWORD *)v217 + 1) = v77.i32[0];
          v182 = (float *)(v217 + 8);
          if (v25 != v221)
          {
            do
            {
              v227 = *((_QWORD *)v25 - 1);
              v25 -= 2;
              *((_QWORD *)v217 - 1) = v227;
              v217 -= 8;
            }
            while (v25 != v221);
LABEL_181:
            v25 = (float *)v274;
            v274 = v217;
            v275 = v182;
            v276 = v218;
            if (!v25)
              goto LABEL_193;
            goto LABEL_184;
          }
LABEL_183:
          v274 = v217;
          v275 = v182;
          v276 = v218;
LABEL_184:
          v228 = v25;
LABEL_192:
          operator delete(v228);
          v24 = v258;
          v11 = v262;
          v8 = a5;
          goto LABEL_193;
        }
      }
      operator delete(v53);
      v77.i32[0] = v250;
      v24 = v258;
      v11 = v262;
      v8 = a5;
      v181 = v276;
      goto LABEL_166;
    }
    if (v74.f32[0] < v28)
    {
      if (v55 < (float *)v276)
      {
        *((_DWORD *)v25 - 2) = v60;
        *(v25 - 1) = v74.f32[0];
        goto LABEL_94;
      }
      v188 = ((char *)v55 - (char *)v53) >> 3;
      v189 = v188 + 1;
      if ((unint64_t)(v188 + 1) >> 61)
        abort();
      v190 = v276 - (char *)v53;
      if ((v276 - (char *)v53) >> 2 > v189)
        v189 = v190 >> 2;
      if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8)
        v191 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v191 = v189;
      v262 = v11;
      if (v191)
      {
        v254 = v74.i32[0];
        if (v191 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v192 = (char *)operator new(8 * v191);
        v8 = a5;
        v11 = v262;
        v24 = v258;
        v74.i32[0] = v254;
      }
      else
      {
        v192 = 0;
      }
      v205 = &v192[8 * v188];
      v206 = &v192[8 * v191];
      *(_DWORD *)v205 = v60;
      *((_DWORD *)v205 + 1) = v74.i32[0];
      v182 = (float *)(v205 + 8);
      if (v55 != v53)
      {
        do
        {
          v207 = *((_QWORD *)v55 - 1);
          v55 -= 2;
          *((_QWORD *)v205 - 1) = v207;
          v205 -= 8;
        }
        while (v55 != v53);
LABEL_188:
        v53 = (float *)v274;
        v274 = v205;
        v275 = v182;
        v276 = v206;
        if (!v53)
          goto LABEL_193;
        goto LABEL_191;
      }
LABEL_190:
      v274 = v205;
      v275 = v182;
      v276 = v206;
LABEL_191:
      v228 = v53;
      goto LABEL_192;
    }
    if (v77.f32[0] >= v28)
      goto LABEL_87;
    if (v55 >= (float *)v276)
    {
      v198 = ((char *)v55 - (char *)v53) >> 3;
      v199 = v198 + 1;
      if ((unint64_t)(v198 + 1) >> 61)
        abort();
      v200 = v276 - (char *)v53;
      if ((v276 - (char *)v53) >> 2 > v199)
        v199 = v200 >> 2;
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
        v201 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v201 = v199;
      v262 = v11;
      if (v201)
      {
        v251 = v77.i32[0];
        if (v201 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v202 = (char *)operator new(8 * v201);
        v8 = a5;
        v11 = v262;
        v24 = v258;
        v77.i32[0] = v251;
      }
      else
      {
        v202 = 0;
      }
      v205 = &v202[8 * v198];
      v206 = &v202[8 * v201];
      *(_DWORD *)v205 = v61;
      *((_DWORD *)v205 + 1) = v77.i32[0];
      v182 = (float *)(v205 + 8);
      if (v55 != v53)
      {
        do
        {
          v229 = *((_QWORD *)v55 - 1);
          v55 -= 2;
          *((_QWORD *)v205 - 1) = v229;
          v205 -= 8;
        }
        while (v55 != v53);
        goto LABEL_188;
      }
      goto LABEL_190;
    }
    *((_DWORD *)v25 - 2) = v61;
    *(v25 - 1) = v77.f32[0];
LABEL_94:
    v182 = v25;
LABEL_193:
    v275 = v182;
    v25 = v182;
LABEL_194:
    v53 = (float *)v274;
  }
  while (v274 != (char *)v25);
  v7 = a2;
  if (v271)
  {
    v272 = v271;
    v263 = v11.i64[0];
    operator delete(v271);
    v11.i64[0] = v263;
    v8 = a5;
  }
  v26 = v25;
LABEL_199:
  v9 = v246;
  a4 = v247;
  v10 = v245;
  if (v26)
  {
    v275 = v26;
    v264 = v11.i64[0];
    operator delete(v26);
    v11.i64[0] = v264;
    v8 = a5;
  }
  a3 = v244;
  if (v7)
LABEL_6:
    *v7 = v28;
LABEL_7:
  if (a3)
    *a3 = v27;
  if (a4)
  {
    if (v27 == -1)
    {
      v38 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
      goto LABEL_216;
    }
    v29 = *(float32x4_t *)(v9 + 16 * *(unsigned int *)(v10 + 12 * v27));
    v30 = *(float32x4_t *)(v9 + 16 * *(unsigned int *)(v10 + 4 * (3 * v27 + 1)));
    v31 = *(float32x4_t *)(v9 + 16 * *(unsigned int *)(v10 + 4 * (3 * v27 + 2)));
    v32 = vsubq_f32(v30, v29);
    v33 = vsubq_f32(v31, v29);
    v34 = vsubq_f32(v8, v29);
    v35 = vmulq_f32(v34, v32);
    v36 = vmulq_f32(v34, v33);
    v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)));
    v38 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1)));
    if (v37.f32[0] <= 0.0 && v38.f32[0] <= 0.0)
    {
      v38 = (float32x4_t)xmmword_2289B3FA0;
      goto LABEL_216;
    }
    v45 = vsubq_f32(v8, v30);
    v46 = vmulq_f32(v32, v45);
    v47 = vmulq_f32(v45, v33);
    v48 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)));
    v49 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1)));
    if (v48.f32[0] >= 0.0 && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v48, v49))).u8[0] & 1) == 0)
    {
      v38 = (float32x4_t)xmmword_2289B3FB0;
      goto LABEL_216;
    }
    v50 = (float)(v37.f32[0] * v49.f32[0]) - (float)(v48.f32[0] * v38.f32[0]);
    if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v37, v48))).u8[0] & 1) != 0
      && v48.f32[0] <= 0.0
      && v37.f32[0] >= 0.0
      && v50 <= 0.0)
    {
      v51 = (int32x4_t)vdivq_f32(v37, vsubq_f32(v37, v48));
      v38 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(1.0 - *(float *)v51.i32), v51);
      goto LABEL_216;
    }
    v230 = vsubq_f32(v8, v31);
    v231 = vmulq_f32(v32, v230);
    v232 = vmulq_f32(v33, v230);
    v233 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v231, 2), vaddq_f32(v231, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v231.f32, 1)));
    v234 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v232, 2), vaddq_f32(v232, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v232.f32, 1)));
    if (v234.f32[0] >= 0.0 && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v234, v233))).u8[0] & 1) == 0)
    {
      v38 = (float32x4_t)xmmword_2289B6F00;
      goto LABEL_216;
    }
    v235 = (float)(v233.f32[0] * v38.f32[0]) - (float)(v37.f32[0] * v234.f32[0]);
    if (v234.f32[0] <= 0.0
      && v235 <= 0.0
      && v38.f32[0] >= 0.0
      && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v38, v234))).u8[0] & 1) != 0)
    {
      v236 = vdivq_f32(v38, vsubq_f32(v38, v234)).f32[0];
      v38.i32[1] = 0;
      v38.i32[3] = 0;
      v38.f32[0] = 1.0 - v236;
      goto LABEL_211;
    }
    v237 = (float)(v48.f32[0] * v234.f32[0]) - (float)(v233.f32[0] * v49.f32[0]);
    if (v237 <= 0.0
      && (v238 = vsubq_f32(v49, v48), v238.f32[0] >= 0.0)
      && (v239 = vsubq_f32(v233, v234), v239.f32[0] >= 0.0))
    {
      v236 = vdivq_f32(v238, vaddq_f32(v238, v239)).f32[0];
      v38.i32[0] = 0;
      v38.i32[3] = 0;
      v38.f32[1] = 1.0 - v236;
LABEL_211:
      v38.f32[2] = v236;
    }
    else
    {
      v240 = 1.0 / (float)(v50 + (float)(v237 + v235));
      v241 = v235 * v240;
      v242 = v50 * v240;
      v38.f32[0] = (float)(1.0 - (float)(v235 * v240)) - v242;
      v38.f32[1] = v241;
      v38.f32[2] = v242;
    }
LABEL_216:
    *a4 = v38;
  }
  return *(double *)v11.i64;
}

void sub_2288BDCBC(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 200);
  if (v4)
  {
    *(_QWORD *)(v2 - 192) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    *(_QWORD *)(v2 - 168) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void geom_triangle_mesh_bvh_closest_point_3d(_QWORD *a1@<X0>, _OWORD *a2@<X1>, double *a3@<X2>, int *a4@<X3>, int64x2_t *a5@<X4>, int64x2_t *a6@<X8>)
{
  float64x2_t v6;
  double *v9;
  float64x2_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  unint64_t v18;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double *v24;
  _QWORD *v25;
  double *v26;
  double *v27;
  int v28;
  double v29;
  int v30;
  float64x2_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  double v45;
  int64x2_t v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v58;
  double *v59;
  unsigned int v60;
  double *v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  unsigned int v66;
  unsigned int v67;
  int *v68;
  unsigned int v69;
  uint64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  double v74;
  uint64_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  unsigned int *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  float64x2_t *v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  float64x2_t v132;
  int8x8_t v133;
  int8x16_t v134;
  int8x8_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  int8x16_t v141;
  int8x16_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  uint32x4_t v150;
  int64x2_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x8_t v156;
  int8x16_t v157;
  int64x2_t v158;
  int8x16_t v159;
  unint64_t v160;
  int8x16_t v161;
  int8x16_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  int8x8_t v167;
  float64x2_t v168;
  uint32x4_t v169;
  int64x2_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  float64x2_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x8_t v178;
  int8x16_t v179;
  int64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  uint32x4_t v193;
  int64x2_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x8_t v201;
  int8x16_t v202;
  int64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  uint32x4_t v209;
  int64x2_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  float64x2_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x8_t v218;
  int8x16_t v219;
  int64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  int8x8_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  uint32x4_t v236;
  int64x2_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x16_t v243;
  uint32x4_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int64x2_t v247;
  int8x16_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  int64x2_t v255;
  int8x16_t v256;
  int8x16_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  float64x2_t *v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  double v271;
  unsigned int v272;
  char *v273;
  double *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char *v294;
  double *v295;
  char *v296;
  char *v297;
  double *v298;
  int v299;
  double *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  char *v306;
  char *v307;
  int v308;
  double *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char *v314;
  double *v315;
  float64x2_t v316;
  float64x2_t v317;
  double v318;
  double v319;
  double v321;
  BOOL v322;
  double v323;
  double v324;
  double v325;
  double v326;
  int64x2_t *v327;
  double *v328;
  int *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  double v334;
  int v335;
  _QWORD *v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  int8x16_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  _OWORD v384[2];
  _OWORD v385[2];
  _OWORD v386[2];
  char *v387;
  char *v388;
  uint64_t v389;
  char *v390;
  double *v391;
  double *v392;

  v9 = a3;
  v12 = *(int64x2_t *)a2;
  v11 = *((float64x2_t *)a2 + 1);
  v13 = a1[18];
  v14 = a1[21];
  v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  __asm { FMOV            V20.2D, #1.0 }
  if (a1[7] == a1[6] || (v18 = a1[4] - a1[3]) == 0)
  {
    v6.f64[0] = NAN;
    v28 = -1;
    v29 = INFINITY;
    if (!a3)
      goto LABEL_7;
    goto LABEL_6;
  }
  v337 = *(float64x2_t *)a2;
  v338 = *((float64x2_t *)a2 + 1);
  v339 = _Q20;
  v332 = a1[15];
  v390 = 0;
  v391 = 0;
  v392 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIdLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIdEEEEDv3_dT_S8_RdRjE5stateNS_9allocatorISC_EEE7reserveEm((uint64_t)&v390, 31 - __clz(-1431655765 * (v18 >> 5)));
  v328 = v9;
  v329 = a4;
  v20 = a1[3];
  v12 = (int64x2_t)v337;
  v11 = v338;
  v21 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v337, *(float64x2_t *)(v20 + 64)), *(float64x2_t *)(v20 + 32)), v337);
  v22 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v338.f64[0], (float64x2_t)*(unint64_t *)(v20 + 80)), (float64x2_t)*(unint64_t *)(v20 + 48)), v338);
  v23 = vmulq_f64(v22, v22).f64[0] + vaddvq_f64(vmulq_f64(v21, v21));
  v24 = v391;
  v25 = a1;
  v336 = a1;
  v330 = v14;
  v331 = v13;
  if (v391 >= v392)
  {
    v47 = (double *)v390;
    v48 = ((char *)v391 - v390) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      abort();
    v50 = (char *)v392 - v390;
    if (((char *)v392 - v390) >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v52 = (char *)operator new(16 * v51);
      v12 = (int64x2_t)v337;
      v11 = v338;
      v25 = v336;
    }
    else
    {
      v52 = 0;
    }
    v59 = (double *)&v52[16 * v48];
    *v59 = 0.0;
    v59[1] = v23;
    v26 = v59 + 2;
    if (v24 != v47)
    {
      do
      {
        *((_OWORD *)v59 - 1) = *((_OWORD *)v24 - 1);
        v59 -= 2;
        v24 -= 2;
      }
      while (v24 != v47);
      v24 = v47;
    }
    v27 = v59;
    v390 = (char *)v59;
    v392 = (double *)&v52[16 * v51];
    if (v24)
    {
      operator delete(v24);
      v25 = v336;
      v12 = (int64x2_t)v337;
      v11 = v338;
    }
  }
  else
  {
    *v391 = 0.0;
    v24[1] = v23;
    v26 = v24 + 2;
    v27 = (double *)v390;
  }
  _Q20 = v339;
  v387 = 0;
  v388 = 0;
  v389 = 0;
  if (v27 == v26)
  {
    v6.f64[0] = NAN;
    v15 = vdupq_n_s64(0x7FF8000000000000uLL);
    v335 = -1;
    v29 = INFINITY;
    goto LABEL_204;
  }
  v327 = a5;
  v365 = (float64x2_t)vdupq_lane_s64(v12.i64[0], 0);
  v6.f64[0] = NAN;
  v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  v335 = -1;
  v29 = INFINITY;
  v360 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0);
  v361 = (float64x2_t)vdupq_laneq_s64(v12, 1);
  do
  {
    v61 = v26 - 2;
    v60 = *((_DWORD *)v26 - 4);
    v62 = *(v26 - 1);
    v391 = v26 - 2;
    if (v29 <= v62)
    {
LABEL_56:
      v26 -= 2;
      goto LABEL_199;
    }
    v63 = v25[3];
    v64 = v63 + 96 * v60;
    v67 = *(_DWORD *)(v64 + 4);
    v65 = (int *)(v64 + 4);
    v66 = v67;
    v68 = v65 + 1;
    v69 = v65[1];
    if (v67 == -1 && v69 == -1)
    {
      v334 = v29;
      v340 = v6;
      v344 = v15;
      v80 = (unsigned int *)(v63 + 96 * v60);
      v82 = v80[3];
      v80 += 3;
      v81 = v82;
      v333 = v25[6];
      v83 = v80[1];
      v84 = v83 + v82 - (unint64_t)v82;
      _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v387, v84);
      v85 = *v80;
      v86 = v80[1] + v85;
      v87 = v335;
      v88 = v365;
      v89 = v360;
      v90 = v361;
      if (v85 >> 2 < (v86 + 3) >> 2)
      {
        v91 = v387;
        v92 = v85 >> 2;
        v93 = 4 * (v85 >> 2);
        while (1)
        {
          v94 = (float64x2_t *)(v332 + 288 * v92);
          v95 = v94[7];
          v96 = *v94;
          v97 = v94[1];
          v98 = v94[6];
          v99 = v94[8];
          v100 = v94[9];
          v101 = v94[2];
          v102 = v94[3];
          v104 = v94[10];
          v103 = v94[11];
          v106 = v94[4];
          v105 = v94[5];
          v373 = v94[13];
          v375 = v94[12];
          v371 = v94[15];
          v372 = v94[14];
          v107 = vsubq_f64(v371, v102);
          v108 = vsubq_f64(v372, v101);
          v109 = vsubq_f64(v88, *v94);
          v110 = vsubq_f64(v88, v97);
          v111 = v88;
          v112 = vsubq_f64(v90, v102);
          v113 = vsubq_f64(v90, v101);
          v378 = vsubq_f64(v373, v97);
          v379 = vsubq_f64(v100, v102);
          v382 = vsubq_f64(v375, *v94);
          v383 = vsubq_f64(v95, v97);
          v114 = vmlaq_f64(vmulq_f64(v379, v112), v110, v383);
          v115 = vmlaq_f64(vmulq_f64(v112, v107), v110, v378);
          v380 = vsubq_f64(v99, v101);
          v381 = vsubq_f64(v98, *v94);
          v116 = vmlaq_f64(vmulq_f64(v380, v113), v109, v381);
          v117 = vmlaq_f64(vmulq_f64(v113, v108), v109, v382);
          v118 = vsubq_f64(v89, v106);
          v119 = vsubq_f64(v104, v106);
          v120 = vmlaq_f64(v116, v118, v119);
          v369 = v94[17];
          v370 = v94[16];
          v121 = vsubq_f64(v370, v106);
          v122 = vmlaq_f64(v117, v118, v121);
          v123 = vsubq_f64(v103, v105);
          v124 = vsubq_f64(v89, v105);
          v125 = vmlaq_f64(v114, v124, v123);
          v126 = vsubq_f64(v369, v105);
          v127 = vmlaq_f64(v115, v124, v126);
          v128 = vclezq_f64(v125);
          v129 = vclezq_f64(v127);
          v130 = vclezq_f64(v120);
          v377 = v122;
          v131 = vclezq_f64(v122);
          v132 = v89;
          v133 = vand_s8(vand_s8((int8x8_t)vmovn_s64(v131), (int8x8_t)vmovn_s64(v130)), vand_s8((int8x8_t)vmovn_s64(v129), (int8x8_t)vmovn_s64(v128)));
          v134.i64[0] = v133.i32[0];
          v134.i64[1] = v133.i32[1];
          if ((vandq_s8(v134, (int8x16_t)vdupq_laneq_s64((int64x2_t)v134, 1)).u64[0] & 0x8000000000000000) != 0)
            break;
          v135 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v129), (int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v128)));
          v136 = vsubq_f64(v89, v104);
          v137 = vsubq_f64(v89, v103);
          v138 = vsubq_f64(v90, v99);
          v139 = vsubq_f64(v90, v100);
          v140 = v111;
          v141 = (int8x16_t)v94[5];
          v376 = v94[8];
          v142 = (int8x16_t)v94[4];
          v143 = v126;
          v144 = vsubq_f64(v140, v95);
          v145 = vsubq_f64(v140, v98);
          v367 = v108;
          v368 = v123;
          v146 = vmlaq_f64(vmlaq_f64(vmulq_f64(v139, v379), v144, v383), v137, v123);
          v147 = vmlaq_f64(vmlaq_f64(vmulq_f64(v138, v380), v145, v381), v136, v119);
          v363 = v143;
          v364 = v107;
          v148 = vmlaq_f64(vmlaq_f64(vmulq_f64(v139, v107), v144, v378), v137, v143);
          v366 = v121;
          v149 = vmlaq_f64(vmlaq_f64(vmulq_f64(v138, v108), v145, v382), v136, v121);
          *(int16x4_t *)&v137.f64[0] = vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v147, v149), (int32x4_t)vcgeq_f64(v146, v148)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v147), (int32x4_t)vcgezq_f64(v146))));
          v150 = vmovl_u16((uint16x4_t)vbic_s8(*(int8x8_t *)&v137.f64[0], v135));
          v151.i64[0] = v150.u32[2];
          v151.i64[1] = v150.u32[3];
          v152 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v151, 0x3FuLL));
          v362 = v94[7];
          v153 = vbslq_s8(v152, (int8x16_t)v95, (int8x16_t)v97);
          v151.i64[0] = v150.u32[0];
          v151.i64[1] = v150.u32[1];
          v154 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v151, 0x3FuLL));
          v155 = vbslq_s8(v154, (int8x16_t)v98, (int8x16_t)v96);
          v156 = vorr_s8(v135, *(int8x8_t *)&v137.f64[0]);
          v157 = (int8x16_t)vmovl_u16((uint16x4_t)v156);
          *(int8x8_t *)v157.i8 = vand_s8(*(int8x8_t *)v157.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
          v151.i64[0] = v157.u32[0];
          v151.i64[1] = v157.u32[1];
          v158 = vcltzq_s64(vshlq_n_s64(v151, 0x3FuLL));
          v159 = vbslq_s8(v152, (int8x16_t)v100, (int8x16_t)v102);
          v160 = vandq_s8((int8x16_t)v158, (int8x16_t)vdupq_laneq_s64(v158, 1)).u64[0];
          v161 = vbslq_s8(v154, (int8x16_t)v376, (int8x16_t)v101);
          v162 = vbslq_s8(v152, (int8x16_t)v103, v141);
          v106 = (float64x2_t)vbslq_s8(v154, (int8x16_t)v104, v142);
          if ((v160 & 0x8000000000000000) != 0)
          {
            v96 = (float64x2_t)v155;
            v97 = (float64x2_t)v153;
            v101 = (float64x2_t)v161;
            v102 = (float64x2_t)v159;
            v88 = v365;
            goto LABEL_68;
          }
          v163 = (float64x2_t)v141;
          v352 = v98;
          v353 = v103;
          v354 = v104;
          v355 = v100;
          v164 = vsubq_f64(v125, v146);
          v165 = vsubq_f64(v120, v147);
          v349 = vmlaq_f64(vmulq_f64(v127, vnegq_f64(v146)), v148, v125);
          v350 = vmlaq_f64(vmulq_f64(v377, vnegq_f64(v147)), v149, v120);
          v166 = (float64x2_t)v142;
          v167 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v147), (int32x4_t)vclezq_f64(v146)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v120), (int32x4_t)vcgezq_f64(v125))), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v165), (int32x4_t)vceqzq_f64(v164))), (int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v350), (int32x4_t)vclezq_f64(v349))));
          v168 = vdivq_f64(v125, v164);
          v169 = vmovl_u16((uint16x4_t)vbic_s8(v167, v156));
          v170.i64[0] = v169.u32[2];
          v170.i64[1] = v169.u32[3];
          v171 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v170, 0x3FuLL));
          v172 = vbslq_s8(v171, (int8x16_t)vaddq_f64(vmulq_f64(v383, v168), v97), v153);
          v173 = vbslq_s8(v171, (int8x16_t)vaddq_f64(v102, vmulq_f64(v379, v168)), v159);
          v162 = vbslq_s8(v171, (int8x16_t)vaddq_f64(v163, vmulq_f64(v368, v168)), v162);
          v174 = vdivq_f64(v120, v165);
          v170.i64[0] = v169.u32[0];
          v170.i64[1] = v169.u32[1];
          v175 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v170, 0x3FuLL));
          v176 = vbslq_s8(v175, (int8x16_t)vaddq_f64(vmulq_f64(v381, v174), v96), v155);
          v177 = vbslq_s8(v175, (int8x16_t)vaddq_f64(v101, vmulq_f64(v380, v174)), v161);
          v359 = v166;
          v106 = (float64x2_t)vbslq_s8(v175, (int8x16_t)vaddq_f64(v166, vmulq_f64(v119, v174)), (int8x16_t)v106);
          v178 = vorr_s8(v167, v156);
          v179 = (int8x16_t)vmovl_u16((uint16x4_t)v178);
          *(int8x8_t *)v179.i8 = vand_s8(*(int8x8_t *)v179.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v179, v179, 8uLL));
          v170.i64[0] = v179.u32[0];
          v170.i64[1] = v179.u32[1];
          v180 = vcltzq_s64(vshlq_n_s64(v170, 0x3FuLL));
          if ((vandq_s8((int8x16_t)v180, (int8x16_t)vdupq_laneq_s64(v180, 1)).u64[0] & 0x8000000000000000) != 0)
          {
            v96 = (float64x2_t)v176;
            v97 = (float64x2_t)v172;
            v101 = (float64x2_t)v177;
            v102 = (float64x2_t)v173;
          }
          else
          {
            v351 = v163;
            v181 = vsubq_f64(v365, v373);
            v182 = vsubq_f64(v365, v375);
            v183 = vsubq_f64(v361, v371);
            v184 = vsubq_f64(v361, v372);
            v357 = v177;
            v185 = vsubq_f64(v360, v369);
            v356 = v173;
            v186 = vsubq_f64(v360, v370);
            v187 = vmlaq_f64(vmulq_f64(v380, v184), v182, v381);
            v188 = vmlaq_f64(vmulq_f64(v367, v184), v182, v382);
            v189 = vmlaq_f64(vmlaq_f64(vmulq_f64(v379, v183), v181, v383), v185, v368);
            v348 = v119;
            v190 = vmlaq_f64(v187, v186, v119);
            v191 = vmlaq_f64(vmlaq_f64(vmulq_f64(v364, v183), v181, v378), v185, v363);
            v192 = vmlaq_f64(v188, v186, v366);
            *(int16x4_t *)&v186.f64[0] = vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v192), (int32x4_t)vcgezq_f64(v191)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v192, v190), (int32x4_t)vcgeq_f64(v191, v189))));
            v193 = vmovl_u16((uint16x4_t)vbic_s8(*(int8x8_t *)&v186.f64[0], v178));
            v194.i64[0] = v193.u32[2];
            v194.i64[1] = v193.u32[3];
            v195 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
            v196 = vbslq_s8(v195, (int8x16_t)v373, v172);
            v197 = vbslq_s8(v195, (int8x16_t)v371, v356);
            v162 = vbslq_s8(v195, (int8x16_t)v369, v162);
            v194.i64[0] = v193.u32[0];
            v194.i64[1] = v193.u32[1];
            v198 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
            v199 = vbslq_s8(v198, (int8x16_t)v375, v176);
            v200 = vbslq_s8(v198, (int8x16_t)v372, v357);
            v106 = (float64x2_t)vbslq_s8(v198, (int8x16_t)v370, (int8x16_t)v106);
            v201 = vorr_s8(v178, *(int8x8_t *)&v186.f64[0]);
            v202 = (int8x16_t)vmovl_u16((uint16x4_t)v201);
            *(int8x8_t *)v202.i8 = vand_s8(*(int8x8_t *)v202.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL));
            v194.i64[0] = v202.u32[0];
            v194.i64[1] = v202.u32[1];
            v203 = vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
            if ((vandq_s8((int8x16_t)v203, (int8x16_t)vdupq_laneq_s64(v203, 1)).u64[0] & 0x8000000000000000) != 0)
            {
              v96 = (float64x2_t)v199;
              v97 = (float64x2_t)v196;
              v101 = (float64x2_t)v200;
              v102 = (float64x2_t)v197;
            }
            else
            {
              v204 = vnegq_f64(v125);
              v205 = vmulq_f64(v192, vnegq_f64(v120));
              v206 = vmlaq_f64(vmulq_f64(v191, v204), v127, v189);
              v207 = vmlaq_f64(v205, v377, v190);
              *(int16x4_t *)&v204.f64[0] = vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v192), (int32x4_t)vclezq_f64(v191)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v377), (int32x4_t)vcgezq_f64(v127))), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v377, v192), (int32x4_t)vceqq_f64(v127, v191))), (int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v207), (int32x4_t)vclezq_f64(v206))));
              v208 = vdivq_f64(v127, vsubq_f64(v127, v191));
              v209 = vmovl_u16((uint16x4_t)vbic_s8(*(int8x8_t *)&v204.f64[0], v201));
              v210.i64[0] = v209.u32[2];
              v210.i64[1] = v209.u32[3];
              v211 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v210, 0x3FuLL));
              v212 = vbslq_s8(v211, (int8x16_t)vaddq_f64(vmulq_f64(v378, v208), v97), v196);
              v213 = vbslq_s8(v211, (int8x16_t)vaddq_f64(v102, vmulq_f64(v364, v208)), v197);
              v162 = vbslq_s8(v211, (int8x16_t)vaddq_f64(v351, vmulq_f64(v363, v208)), v162);
              v214 = vdivq_f64(v377, vsubq_f64(v377, v192));
              v210.i64[0] = v209.u32[0];
              v210.i64[1] = v209.u32[1];
              v215 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v210, 0x3FuLL));
              v216 = vbslq_s8(v215, (int8x16_t)vaddq_f64(vmulq_f64(v382, v214), v96), v199);
              v217 = vbslq_s8(v215, (int8x16_t)vaddq_f64(v101, vmulq_f64(v367, v214)), v200);
              v106 = (float64x2_t)vbslq_s8(v215, (int8x16_t)vaddq_f64(v359, vmulq_f64(v366, v214)), (int8x16_t)v106);
              v218 = vorr_s8(v201, *(int8x8_t *)&v204.f64[0]);
              v219 = (int8x16_t)vmovl_u16((uint16x4_t)v218);
              *(int8x8_t *)v219.i8 = vand_s8(*(int8x8_t *)v219.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL));
              v210.i64[0] = v219.u32[0];
              v210.i64[1] = v219.u32[1];
              v220 = vcltzq_s64(vshlq_n_s64(v210, 0x3FuLL));
              if ((vandq_s8((int8x16_t)v220, (int8x16_t)vdupq_laneq_s64(v220, 1)).u64[0] & 0x8000000000000000) != 0)
              {
                v96 = (float64x2_t)v216;
                v97 = (float64x2_t)v212;
                v101 = (float64x2_t)v217;
                v102 = (float64x2_t)v213;
              }
              else
              {
                v358 = v217;
                v221 = vsubq_f64(v373, v362);
                v374 = v212;
                v222 = vmlaq_f64(vmulq_f64(v148, vnegq_f64(v189)), v191, v146);
                v223 = vmlaq_f64(vmulq_f64(v149, vnegq_f64(v190)), v192, v147);
                v224 = vsubq_f64(v148, v146);
                v225 = vsubq_f64(v149, v147);
                v226 = vsubq_f64(v189, v191);
                v227 = vsubq_f64(v190, v192);
                v228 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v227), (int32x4_t)vcgezq_f64(v226)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v225), (int32x4_t)vcgezq_f64(v224))), (int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v223), (int32x4_t)vclezq_f64(v222))));
                v229 = vdivq_f64(v225, vaddq_f64(v225, v227));
                v230 = vdivq_f64(v224, vaddq_f64(v224, v226));
                v231 = vmulq_f64(vsubq_f64(v375, v352), v229);
                v232 = vmulq_f64(vsubq_f64(v371, v355), v230);
                v233 = (int8x16_t)vaddq_f64(vmulq_f64(vsubq_f64(v372, v376), v229), v376);
                v234 = (int8x16_t)vaddq_f64(vmulq_f64(vsubq_f64(v370, v354), v229), v354);
                v235 = (int8x16_t)vaddq_f64(vmulq_f64(vsubq_f64(v369, v353), v230), v353);
                v236 = vmovl_u16((uint16x4_t)vbic_s8(v228, v218));
                v237.i64[0] = v236.u32[2];
                v237.i64[1] = v236.u32[3];
                v238 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                v239 = vbslq_s8(v238, (int8x16_t)vaddq_f64(vmulq_f64(v221, v230), v362), v374);
                v237.i64[0] = v236.u32[0];
                v237.i64[1] = v236.u32[1];
                v240 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                v241 = vbslq_s8(v240, (int8x16_t)vaddq_f64(v231, v352), v216);
                v242 = vbslq_s8(v238, (int8x16_t)vaddq_f64(v232, v355), v213);
                v243 = vbslq_s8(v240, v233, v358);
                v162 = vbslq_s8(v238, v235, v162);
                v106 = (float64x2_t)vbslq_s8(v240, v234, (int8x16_t)v106);
                v244 = vmovl_u16((uint16x4_t)vorr_s8(v218, v228));
                v237.i64[0] = v244.u32[2];
                v237.i64[1] = v244.u32[3];
                v245 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                v237.i64[0] = v244.u32[0];
                v237.i64[1] = v244.u32[1];
                v246 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                v247 = (int64x2_t)vandq_s8(v246, v245);
                if ((vandq_s8((int8x16_t)v247, (int8x16_t)vdupq_laneq_s64(v247, 1)).u64[0] & 0x8000000000000000) != 0)
                {
                  v96 = (float64x2_t)v241;
                  v97 = (float64x2_t)v239;
                  v101 = (float64x2_t)v243;
                  v102 = (float64x2_t)v242;
                }
                else
                {
                  v248 = vandq_s8((int8x16_t)v106, v246);
                  v249 = vdivq_f64(v339, vaddq_f64(v349, vaddq_f64(v222, v206)));
                  v250 = vdivq_f64(v339, vaddq_f64(v350, vaddq_f64(v223, v207)));
                  v251 = vmulq_f64(v207, v250);
                  v252 = vmulq_f64(v206, v249);
                  v253 = vmulq_f64(v349, v249);
                  v254 = vmulq_f64(v350, v250);
                  v255.i64[0] = v244.u32[0];
                  v255.i64[1] = v244.u32[1];
                  v256 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v255, 0x3FuLL));
                  v96 = (float64x2_t)vbslq_s8(v256, v241, (int8x16_t)vaddq_f64(vmulq_f64(v382, v254), vaddq_f64(vmulq_f64(v381, v251), v96)));
                  v97 = (float64x2_t)vbslq_s8(v245, v239, (int8x16_t)vaddq_f64(vmulq_f64(v378, v253), vaddq_f64(vmulq_f64(v383, v252), v97)));
                  v101 = (float64x2_t)vbslq_s8(v256, v243, (int8x16_t)vaddq_f64(vmulq_f64(v367, v254), vaddq_f64(v101, vmulq_f64(v380, v251))));
                  v102 = (float64x2_t)vbslq_s8(v245, v242, (int8x16_t)vaddq_f64(vmulq_f64(v364, v253), vaddq_f64(v102, vmulq_f64(v379, v252))));
                  v257 = vbicq_s8((int8x16_t)vaddq_f64(vmulq_f64(v363, v253), vaddq_f64(v351, vmulq_f64(v368, v252))), v245);
                  v106 = (float64x2_t)vorrq_s8(v248, vbicq_s8((int8x16_t)vaddq_f64(vmulq_f64(v366, v254), vaddq_f64(v359, vmulq_f64(v348, v251))), v256));
                  v162 = vorrq_s8(vandq_s8(v162, v245), v257);
                }
              }
            }
          }
          v88 = v365;
          v89 = v360;
          v90 = v361;
LABEL_74:
          v258 = 0;
          v259 = v93 & 0xFFFFFFFC;
          do
          {
            if (v259 + v258 >= v85 && v259 + v258 < v86)
            {
              v261 = &v91[32 * ((v93 & 0xFFFFFFFC) - v85) + 32 * (int)v258];
              v386[0] = v96;
              v386[1] = v97;
              v262 = 8 * (v258 & 3);
              v385[0] = v101;
              v385[1] = v102;
              v384[0] = v106;
              v384[1] = v162;
              *(_QWORD *)&v263 = *(_QWORD *)((char *)v386 + v262);
              *((_QWORD *)&v263 + 1) = *(_QWORD *)((char *)v385 + v262);
              *((_QWORD *)v261 + 2) = *(_QWORD *)((char *)v384 + v262);
              *(_OWORD *)v261 = v263;
            }
            ++v258;
          }
          while (v258 != 4);
          ++v92;
          LODWORD(v93) = v93 + 4;
          if (v92 == (v86 + 3) >> 2)
            goto LABEL_82;
        }
        v162 = (int8x16_t)v94[5];
        v88 = v111;
LABEL_68:
        v89 = v132;
        goto LABEL_74;
      }
LABEL_82:
      v11 = v338;
      _Q20 = v339;
      v12 = (int64x2_t)v337;
      v6 = v340;
      v15 = v344;
      if (!v83)
      {
        v26 = v61;
        v25 = v336;
        v29 = v334;
        goto LABEL_199;
      }
      v264 = 0;
      v265 = v333 + 4 * v81;
      v29 = v334;
      while (1)
      {
        v266 = (float64x2_t *)&v387[32 * v264];
        v268 = *v266;
        v267 = v266[1];
        v269 = vsubq_f64(v337, *v266);
        v270 = vsubq_f64(v338, v267);
        v271 = vmulq_f64(v270, v270).f64[0] + vaddvq_f64(vmulq_f64(v269, v269));
        if (v271 >= v29)
        {
          if (v271 != v29)
            goto LABEL_89;
          v272 = *(_DWORD *)(v265 + 4 * v264);
          if (v272 >= v87)
            goto LABEL_89;
        }
        else
        {
          v272 = *(_DWORD *)(v265 + 4 * v264);
        }
        v87 = v272;
        v29 = v271;
        v15 = (int64x2_t)v268;
        v6 = v267;
LABEL_89:
        if (v84 <= ++v264)
        {
          v335 = v87;
          v26 = v61;
          v25 = v336;
          goto LABEL_199;
        }
      }
    }
    v71 = v63 + 96 * v66;
    v72 = vsubq_f64(vmaxnmq_f64(vminnmq_f64((float64x2_t)v12, *(float64x2_t *)(v71 + 64)), *(float64x2_t *)(v71 + 32)), (float64x2_t)v12);
    v73 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v338.f64[0], (float64x2_t)*(unint64_t *)(v71 + 80)), (float64x2_t)*(unint64_t *)(v71 + 48)), v11);
    v74 = vmulq_f64(v73, v73).f64[0] + vaddvq_f64(vmulq_f64(v72, v72));
    v75 = v63 + 96 * v69;
    v76 = vsubq_f64(vmaxnmq_f64(vminnmq_f64((float64x2_t)v12, *(float64x2_t *)(v75 + 64)), *(float64x2_t *)(v75 + 32)), (float64x2_t)v12);
    v77 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v338.f64[0], (float64x2_t)*(unint64_t *)(v75 + 80)), (float64x2_t)*(unint64_t *)(v75 + 48)), v11);
    v78 = vmulq_f64(v77, v77).f64[0] + vaddvq_f64(vmulq_f64(v76, v76));
    if (v74 < v29 && v78 < v29)
    {
      v273 = (char *)v392;
      v341 = v6;
      v345 = v15;
      if (v74 < v78)
      {
        if (v61 < v392)
        {
          *((_DWORD *)v26 - 4) = v69;
          *(v26 - 1) = v78;
          goto LABEL_154;
        }
        v275 = ((char *)v61 - (char *)v27) >> 4;
        v276 = v275 + 1;
        if ((unint64_t)(v275 + 1) >> 60)
          abort();
        v277 = (char *)v392 - (char *)v27;
        if (v392 - v27 > v276)
          v276 = v277 >> 3;
        if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF0)
          v278 = 0xFFFFFFFFFFFFFFFLL;
        else
          v278 = v276;
        if (v278)
        {
          if (v278 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v279 = (char *)operator new(16 * v278);
          v11 = v338;
          _Q20 = v339;
          v12 = (int64x2_t)v337;
          v6 = v341;
          v15 = v345;
          v25 = v336;
        }
        else
        {
          v279 = 0;
        }
        v295 = (double *)&v279[16 * v275];
        v273 = &v279[16 * v278];
        *(_DWORD *)v295 = v69;
        v295[1] = v78;
        v26 = v295 + 2;
        if (v61 == v27)
        {
          v390 = &v279[16 * v275];
          v391 = v295 + 2;
          v392 = (double *)v273;
        }
        else
        {
          do
          {
            *((_OWORD *)v295 - 1) = *((_OWORD *)v61 - 1);
            v295 -= 2;
            v61 -= 2;
          }
          while (v61 != v27);
          v27 = (double *)v390;
          v390 = (char *)v295;
          v391 = v26;
          v392 = (double *)v273;
          if (!v27)
          {
LABEL_154:
            v391 = v26;
            v299 = *v65;
            if (v26 < (double *)v273)
            {
              *(_DWORD *)v26 = v299;
              v26[1] = v74;
LABEL_173:
              v274 = v26 + 2;
              goto LABEL_198;
            }
            v300 = (double *)v390;
            v301 = ((char *)v26 - v390) >> 4;
            v302 = v301 + 1;
            if ((unint64_t)(v301 + 1) >> 60)
              abort();
            v303 = v273 - v390;
            if (v303 >> 3 > v302)
              v302 = v303 >> 3;
            if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFF0)
              v304 = 0xFFFFFFFFFFFFFFFLL;
            else
              v304 = v302;
            if (v304)
            {
              if (v304 >> 60)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v305 = (char *)operator new(16 * v304);
              v11 = v338;
              _Q20 = v339;
              v12 = (int64x2_t)v337;
              v6 = v341;
              v15 = v345;
              v25 = v336;
            }
            else
            {
              v305 = 0;
            }
            v306 = &v305[16 * v301];
            v307 = &v305[16 * v304];
            *(_DWORD *)v306 = v299;
            *((double *)v306 + 1) = v74;
            v274 = (double *)(v306 + 16);
            if (v26 != v300)
            {
              do
              {
                *((_OWORD *)v306 - 1) = *((_OWORD *)v26 - 1);
                v306 -= 16;
                v26 -= 2;
              }
              while (v26 != v300);
              goto LABEL_186;
            }
            goto LABEL_188;
          }
        }
        operator delete(v27);
        v25 = v336;
        v6 = v341;
        v15 = v345;
        v12 = (int64x2_t)v337;
        v11 = v338;
        _Q20 = v339;
        v273 = (char *)v392;
        goto LABEL_154;
      }
      if (v61 < v392)
      {
        *((_DWORD *)v26 - 4) = v66;
        *(v26 - 1) = v74;
        goto LABEL_171;
      }
      v285 = ((char *)v61 - (char *)v27) >> 4;
      v286 = v285 + 1;
      if ((unint64_t)(v285 + 1) >> 60)
        abort();
      v287 = (char *)v392 - (char *)v27;
      if (v392 - v27 > v286)
        v286 = v287 >> 3;
      if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF0)
        v288 = 0xFFFFFFFFFFFFFFFLL;
      else
        v288 = v286;
      if (v288)
      {
        if (v288 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v289 = (char *)operator new(16 * v288);
        v11 = v338;
        _Q20 = v339;
        v12 = (int64x2_t)v337;
        v6 = v341;
        v15 = v345;
        v25 = v336;
      }
      else
      {
        v289 = 0;
      }
      v298 = (double *)&v289[16 * v285];
      v273 = &v289[16 * v288];
      *(_DWORD *)v298 = v66;
      v298[1] = v74;
      v26 = v298 + 2;
      if (v61 == v27)
      {
        v390 = &v289[16 * v285];
        v391 = v298 + 2;
        v392 = (double *)v273;
      }
      else
      {
        do
        {
          *((_OWORD *)v298 - 1) = *((_OWORD *)v61 - 1);
          v298 -= 2;
          v61 -= 2;
        }
        while (v61 != v27);
        v27 = (double *)v390;
        v390 = (char *)v298;
        v391 = v26;
        v392 = (double *)v273;
        if (!v27)
        {
LABEL_171:
          v391 = v26;
          v308 = *v68;
          if (v26 < (double *)v273)
          {
            *(_DWORD *)v26 = v308;
            v26[1] = v78;
            goto LABEL_173;
          }
          v309 = (double *)v390;
          v310 = ((char *)v26 - v390) >> 4;
          v311 = v310 + 1;
          if ((unint64_t)(v310 + 1) >> 60)
            abort();
          v312 = v273 - v390;
          if (v312 >> 3 > v311)
            v311 = v312 >> 3;
          if ((unint64_t)v312 >= 0x7FFFFFFFFFFFFFF0)
            v313 = 0xFFFFFFFFFFFFFFFLL;
          else
            v313 = v311;
          if (v313)
          {
            if (v313 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v314 = (char *)operator new(16 * v313);
            v11 = v338;
            _Q20 = v339;
            v12 = (int64x2_t)v337;
            v6 = v341;
            v15 = v345;
            v25 = v336;
          }
          else
          {
            v314 = 0;
          }
          v306 = &v314[16 * v310];
          v307 = &v314[16 * v313];
          *(_DWORD *)v306 = v308;
          *((double *)v306 + 1) = v78;
          v274 = (double *)(v306 + 16);
          if (v26 != v309)
          {
            do
            {
              *((_OWORD *)v306 - 1) = *((_OWORD *)v26 - 1);
              v306 -= 16;
              v26 -= 2;
            }
            while (v26 != v309);
LABEL_186:
            v26 = (double *)v390;
            v390 = v306;
            v391 = v274;
            v392 = (double *)v307;
            if (!v26)
              goto LABEL_198;
            goto LABEL_189;
          }
LABEL_188:
          v390 = v306;
          v391 = v274;
          v392 = (double *)v307;
LABEL_189:
          v315 = v26;
LABEL_197:
          operator delete(v315);
          v25 = v336;
          v6 = v341;
          v15 = v345;
          v12 = (int64x2_t)v337;
          v11 = v338;
          _Q20 = v339;
          goto LABEL_198;
        }
      }
      operator delete(v27);
      v25 = v336;
      v6 = v341;
      v15 = v345;
      v12 = (int64x2_t)v337;
      v11 = v338;
      _Q20 = v339;
      v273 = (char *)v392;
      goto LABEL_171;
    }
    if (v74 >= v29)
    {
      if (v78 >= v29)
        goto LABEL_56;
      if (v61 < v392)
      {
        *((_DWORD *)v26 - 4) = v69;
        *(v26 - 1) = v78;
        goto LABEL_101;
      }
      v290 = ((char *)v61 - (char *)v27) >> 4;
      v291 = v290 + 1;
      if ((unint64_t)(v290 + 1) >> 60)
        abort();
      v292 = (char *)v392 - (char *)v27;
      if (v392 - v27 > v291)
        v291 = v292 >> 3;
      if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF0)
        v293 = 0xFFFFFFFFFFFFFFFLL;
      else
        v293 = v291;
      v341 = v6;
      v345 = v15;
      if (v293)
      {
        if (v293 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v294 = (char *)operator new(16 * v293);
        v11 = v338;
        _Q20 = v339;
        v12 = (int64x2_t)v337;
        v6 = v341;
        v15 = v345;
        v25 = v336;
      }
      else
      {
        v294 = 0;
      }
      v296 = &v294[16 * v290];
      v297 = &v294[16 * v293];
      *(_DWORD *)v296 = v69;
      *((double *)v296 + 1) = v78;
      v274 = (double *)(v296 + 16);
      if (v61 != v27)
      {
        do
        {
          *((_OWORD *)v296 - 1) = *((_OWORD *)v61 - 1);
          v296 -= 16;
          v61 -= 2;
        }
        while (v61 != v27);
        goto LABEL_193;
      }
      goto LABEL_195;
    }
    if (v61 >= v392)
    {
      v280 = ((char *)v61 - (char *)v27) >> 4;
      v281 = v280 + 1;
      if ((unint64_t)(v280 + 1) >> 60)
        abort();
      v282 = (char *)v392 - (char *)v27;
      if (v392 - v27 > v281)
        v281 = v282 >> 3;
      if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF0)
        v283 = 0xFFFFFFFFFFFFFFFLL;
      else
        v283 = v281;
      v341 = v6;
      v345 = v15;
      if (v283)
      {
        if (v283 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v284 = (char *)operator new(16 * v283);
        v11 = v338;
        _Q20 = v339;
        v12 = (int64x2_t)v337;
        v6 = v341;
        v15 = v345;
        v25 = v336;
      }
      else
      {
        v284 = 0;
      }
      v296 = &v284[16 * v280];
      v297 = &v284[16 * v283];
      *(_DWORD *)v296 = v66;
      *((double *)v296 + 1) = v74;
      v274 = (double *)(v296 + 16);
      if (v61 != v27)
      {
        do
        {
          *((_OWORD *)v296 - 1) = *((_OWORD *)v61 - 1);
          v296 -= 16;
          v61 -= 2;
        }
        while (v61 != v27);
LABEL_193:
        v27 = (double *)v390;
        v390 = v296;
        v391 = v274;
        v392 = (double *)v297;
        if (!v27)
          goto LABEL_198;
        goto LABEL_196;
      }
LABEL_195:
      v390 = v296;
      v391 = v274;
      v392 = (double *)v297;
LABEL_196:
      v315 = v27;
      goto LABEL_197;
    }
    *((_DWORD *)v26 - 4) = v66;
    *(v26 - 1) = v74;
LABEL_101:
    v274 = v26;
LABEL_198:
    v391 = v274;
    v26 = v274;
LABEL_199:
    v27 = (double *)v390;
  }
  while (v390 != (char *)v26);
  a5 = v327;
  if (v387)
  {
    v388 = v387;
    v342 = v6;
    v346 = v15;
    operator delete(v387);
    v6 = v342;
    v15 = v346;
    v12 = (int64x2_t)v337;
    v11 = v338;
    _Q20 = v339;
  }
  v27 = v26;
LABEL_204:
  v14 = v330;
  v13 = v331;
  if (v27)
  {
    v391 = v27;
    v343 = v6;
    v347 = v15;
    operator delete(v27);
    v6 = v343;
    v15 = v347;
    v12 = (int64x2_t)v337;
    v11 = v338;
    _Q20 = v339;
  }
  v9 = v328;
  a4 = v329;
  v28 = v335;
  if (v328)
LABEL_6:
    *v9 = v29;
LABEL_7:
  if (a4)
    *a4 = v28;
  if (a5)
  {
    if (v28 == -1)
    {
      v46 = vdupq_n_s64(0x7FF8000000000000uLL);
      _Q20.f64[0] = NAN;
    }
    else
    {
      v30 = 3 * v28;
      v31 = (float64x2_t *)(v13 + 32 * *(unsigned int *)(v14 + 4 * (3 * v28)));
      v33 = *v31;
      v32 = v31[1];
      v34 = (float64x2_t *)(v13 + 32 * *(unsigned int *)(v14 + 4 * (v30 + 1)));
      v35 = v34[1];
      v36 = (float64x2_t *)(v13 + 32 * *(unsigned int *)(v14 + 4 * (v30 + 2)));
      v37 = v36[1];
      v38 = vsubq_f64(*v34, v33);
      v39 = vsubq_f64(v35, v32);
      v40 = vsubq_f64(*v36, v33);
      v41 = vsubq_f64(v37, v32);
      v42 = vsubq_f64((float64x2_t)v12, v33);
      v43 = vsubq_f64(v11, v32);
      v44 = vmulq_f64(v43, v39).f64[0] + vaddvq_f64(vmulq_f64(v42, v38));
      v45 = vmulq_f64(v43, v41).f64[0] + vaddvq_f64(vmulq_f64(v42, v40));
      if (v44 <= 0.0 && v45 <= 0.0)
      {
        v46 = (int64x2_t)xmmword_2289B3FD0;
        goto LABEL_34;
      }
      v53 = vsubq_f64((float64x2_t)v12, *v34);
      v54 = vsubq_f64(v11, v35);
      v55 = vmulq_f64(v39, v54).f64[0] + vaddvq_f64(vmulq_f64(v38, v53));
      v56 = vmulq_f64(v54, v41).f64[0] + vaddvq_f64(vmulq_f64(v53, v40));
      if (v55 >= 0.0 && v56 <= v55)
      {
        v46 = (int64x2_t)xmmword_2289B3FE0;
        goto LABEL_34;
      }
      v58 = v44 * v56 - v55 * v45;
      if (v44 == v55 || v55 > 0.0 || v44 < 0.0 || v58 > 0.0)
      {
        v316 = vsubq_f64((float64x2_t)v12, *v36);
        v317 = vsubq_f64(v11, v37);
        v318 = vmulq_f64(v39, v317).f64[0] + vaddvq_f64(vmulq_f64(v38, v316));
        v319 = vmulq_f64(v41, v317).f64[0] + vaddvq_f64(vmulq_f64(v40, v316));
        v46 = 0uLL;
        if (v319 < 0.0 || v318 > v319)
        {
          v321 = v318 * v45 - v44 * v319;
          if (v319 > 0.0 || v321 > 0.0 || (v45 >= 0.0 ? (v322 = v45 == v319) : (v322 = 1), v322))
          {
            v323 = v55 * v319 - v318 * v56;
            if (v323 <= 0.0 && (v324 = v56 - v55, v324 >= 0.0) && v318 - v319 >= 0.0)
            {
              _Q20.f64[0] = v324 / (v324 + v318 - v319);
              v46.i64[0] = 0;
              *(double *)&v46.i64[1] = 1.0 - _Q20.f64[0];
            }
            else
            {
              v325 = 1.0 / (v58 + v323 + v321);
              v326 = v321 * v325;
              _Q20.f64[0] = v58 * v325;
              *(double *)v46.i64 = 1.0 - v326 - v58 * v325;
              *(double *)&v46.i64[1] = v326;
            }
          }
          else
          {
            _Q20.f64[0] = v45 / (v45 - v319);
            *(double *)v46.i64 = 1.0 - _Q20.f64[0];
          }
        }
      }
      else
      {
        *(double *)v46.i64 = 1.0 - v44 / (v44 - v55);
        *(double *)&v46.i64[1] = v44 / (v44 - v55);
LABEL_34:
        _Q20 = 0uLL;
      }
    }
    *a5 = v46;
    a5[1] = (int64x2_t)_Q20;
  }
  *a6 = v15;
  a6[1] = (int64x2_t)v6;
}

void sub_2288BF300(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 200);
  if (v4)
  {
    *(_QWORD *)(v2 - 192) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    *(_QWORD *)(v2 - 168) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double geom_bezier_curve_bvh_closest_point_2f(_QWORD *a1, float *a2, unsigned int *a3, double *a4, float32x2_t a5)
{
  int v9;
  int v10;
  double v11;
  float32x2_t *v12;
  unint64_t v13;
  unsigned int v14;
  float *v15;
  float *v16;
  int v17;
  unsigned int v19;
  float32x2_t v20;
  float v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float *v26;
  unsigned int v27;
  unsigned int v28;
  float v29;
  float v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int *v35;
  unsigned int v36;
  int *v37;
  unsigned int v38;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  float v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float v68;
  unsigned int v69;
  float *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  float *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  float *v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  float *v104;
  uint64_t v105;
  uint64_t v106;
  float *v107;
  char *v108;
  uint64_t v109;
  double *v110;
  char *v111;
  unsigned int v112;
  float *__p;
  unint64_t v114;

  if (a2)
  {
    *a2 = INFINITY;
    *(float *)&v9 = 0.0;
  }
  else
  {
    *(float *)&v9 = INFINITY;
  }
  v10 = -1;
  if (a3)
  {
    *a3 = -1;
    v10 = 0;
  }
  v11 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  if (a1[7] == a1[6] || (v12 = (float32x2_t *)a1[3], (v13 = a1[4] - (_QWORD)v12) == 0))
  {
    v17 = 2143289344;
    if (!a4)
      return v11;
LABEL_11:
    *(_DWORD *)a4 = v17;
    return v11;
  }
  v14 = __clz(-858993459 * (v13 >> 3));
  v110 = a4;
  if (v14 == 31)
  {
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v19 = 31 - v14;
    v16 = (float *)operator new(8 * (31 - v14));
    v15 = &v16[2 * v19];
  }
  v20 = vsub_f32(vmaxnm_f32(vminnm_f32(a5, v12[4]), v12[3]), a5);
  v21 = vaddv_f32(vmul_f32(v20, v20));
  if (v16 >= v15)
  {
    v23 = (char *)v15 - (char *)v16;
    v24 = v23 >> 2;
    if ((unint64_t)(v23 >> 2) <= 1)
      v24 = 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = (float *)operator new(8 * v25);
    v111 = (char *)&v26[2 * v25];
    *v26 = 0.0;
    v26[1] = v21;
    v22 = v26 + 2;
    if (v16)
      operator delete(v16);
    v16 = v26;
  }
  else
  {
    v111 = (char *)v15;
    *v16 = 0.0;
    v16[1] = v21;
    v22 = v16 + 2;
  }
  v27 = v10;
  v11 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  v28 = -1;
  v17 = 2143289344;
  v29 = INFINITY;
  do
  {
    v30 = *(float *)&v9;
    if (a2)
      v30 = *a2;
    v31 = v22 - 2;
    if (v30 <= *(v22 - 1))
    {
      v22 -= 2;
      continue;
    }
    v112 = v27;
    __p = v16;
    v32 = a1[3];
    v33 = v32 + 40 * *(unsigned int *)v31;
    v36 = *(_DWORD *)(v33 + 4);
    v35 = (int *)(v33 + 4);
    v34 = v36;
    v37 = v35 + 1;
    v38 = v35[1];
    if (v36 == -1 && v38 == -1)
    {
      v47 = v32 + 40 * *(unsigned int *)v31;
      v48 = *(_DWORD *)(v47 + 16);
      if (!v48)
      {
LABEL_79:
        v22 -= 2;
LABEL_80:
        v16 = __p;
        goto LABEL_153;
      }
      v49 = *(unsigned int *)(v47 + 12);
      v50 = (unsigned int *)(a1[6] + 4 * v49);
      v51 = 4 * (v48 + v49) - 4 * v49;
      v27 = v112;
      while (1)
      {
        v52 = *v50;
        v114 = 0;
        if ((_DWORD)v52)
        {
          v53 = a1[18];
          v54 = *(_DWORD *)(v53 + 4 * (v52 - 1));
        }
        else
        {
          v54 = 0;
          v53 = a1[18];
        }
        v55 = a1[15];
        v56 = v54 + 1;
        v57 = *(_DWORD *)(v53 + 4 * v52) - v54;
        if (v57 == 4)
        {
          geom_closest_point_to_cubic_bezier_2f((float *)&v114 + 1, (float *)&v114, a5, *(float32x2_t *)(v55 + 8 * v54), *(float32x2_t *)(v55 + 8 * v56), *(float32x2_t *)(v55 + 8 * (v54 + 2)), *(float32x2_t *)(v55 + 8 * (v54 + 3)), (uint64_t)a3, a4);
        }
        else if (v57 == 3)
        {
          geom_closest_point_to_quadratic_bezier_2f((float *)&v114 + 1, (float *)&v114, a5, *(float32x2_t *)(v55 + 8 * v54), *(float32x2_t *)(v55 + 8 * v56), *(float32x2_t *)(v55 + 8 * (v54 + 2)));
        }
        else
        {
          v58 = 0;
          if (v57 == 2)
          {
            v59 = *(float32x2_t *)(v55 + 8 * v54);
            v60 = *(float32x2_t *)(v55 + 8 * v56);
            v61 = vsub_f32(v60, v59);
            v62 = vmul_f32(v61, v61);
            v63 = 0.0;
            if (vaddv_f32(v62) != 0.0)
            {
              v64 = vmul_f32(vsub_f32(a5, v59), v61);
              v63 = fmaxf(fminf(vdiv_f32(vadd_f32(v64, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1)), vadd_f32(v62, (float32x2_t)vdup_lane_s32((int32x2_t)v62, 1))).f32[0], 1.0), 0.0);
            }
            v58 = vmla_n_f32(vmul_n_f32(v60, v63), v59, 1.0 - v63);
            v65 = vsub_f32(a5, v58);
            v114 = __PAIR64__(LODWORD(v63), COERCE_UNSIGNED_INT(vaddv_f32(vmul_f32(v65, v65))));
          }
        }
        if (*(float *)&v114 < v29 || *(float *)&v114 == v29 && v28 > v52)
        {
          v17 = HIDWORD(v114);
          v29 = *(float *)&v114;
          v28 = v52;
        }
        v66 = *(float *)&v9;
        if (a2)
          v66 = *a2;
        v67 = vsub_f32(a5, v58);
        v68 = vaddv_f32(vmul_f32(v67, v67));
        if (v68 >= v66)
        {
          v69 = v27;
          if (a3)
            v69 = *a3;
          if (v68 != v66 || v52 >= v69)
            goto LABEL_74;
        }
        if (a2)
        {
          *a2 = v68;
          if (!a3)
            goto LABEL_72;
        }
        else
        {
          *(float *)&v9 = v68;
          if (!a3)
          {
LABEL_72:
            v27 = v52;
            goto LABEL_73;
          }
        }
        *a3 = v52;
LABEL_73:
        v11 = *(double *)&v58;
LABEL_74:
        ++v50;
        v51 -= 4;
        if (!v51)
        {
          v22 = v31;
          v16 = __p;
          goto LABEL_183;
        }
      }
    }
    v40 = vsub_f32(vmaxnm_f32(vminnm_f32(a5, *(float32x2_t *)(v32 + 40 * v34 + 32)), *(float32x2_t *)(v32 + 40 * v34 + 24)), a5);
    v41 = vmul_f32(v40, v40);
    v42 = vaddv_f32(v41);
    v43 = vsub_f32(vmaxnm_f32(vminnm_f32(a5, *(float32x2_t *)(v32 + 40 * v38 + 32)), *(float32x2_t *)(v32 + 40 * v38 + 24)), a5);
    v44 = vmul_f32(v43, v43);
    v45 = vaddv_f32(v44);
    if (v42 >= v30 || v45 >= v30)
    {
      if (v42 >= v30)
      {
        if (v45 >= v30)
          goto LABEL_79;
        if (v31 < (float *)v111)
        {
          *((_DWORD *)v22 - 2) = v38;
          *(v22 - 1) = v45;
          goto LABEL_80;
        }
        v84 = ((char *)v31 - (char *)__p) >> 3;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61)
          abort();
        if ((v111 - (char *)__p) >> 2 > v85)
          v85 = (v111 - (char *)__p) >> 2;
        if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
        {
          if (v86 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v87 = (char *)operator new(8 * v86);
        }
        else
        {
          v87 = 0;
        }
        v107 = (float *)&v87[8 * v84];
        v108 = &v87[8 * v86];
        *(_DWORD *)v107 = v38;
        v107[1] = v45;
        v22 = v107 + 2;
        v111 = v108;
        if (v31 == __p)
          goto LABEL_180;
        do
        {
          v109 = *((_QWORD *)v31 - 1);
          v31 -= 2;
          *((_QWORD *)v107 - 1) = v109;
          v107 -= 2;
        }
        while (v31 != __p);
        if (__p)
LABEL_180:
          operator delete(__p);
        v16 = v107;
        goto LABEL_182;
      }
      if (v31 < (float *)v111)
      {
        *((_DWORD *)v22 - 2) = v34;
        *(v22 - 1) = v42;
        goto LABEL_80;
      }
      v76 = ((char *)v31 - (char *)__p) >> 3;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 61)
        abort();
      if ((v111 - (char *)__p) >> 2 > v77)
        v77 = (v111 - (char *)__p) >> 2;
      if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v78 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v78 = v77;
      if (v78)
      {
        if (v78 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v79 = (char *)operator new(8 * v78);
      }
      else
      {
        v79 = 0;
      }
      v95 = (float *)&v79[8 * v76];
      *(_DWORD *)v95 = v34;
      v95[1] = v42;
      v22 = v95 + 2;
      v111 = &v79[8 * v78];
      if (v31 == __p)
      {
        v27 = v112;
      }
      else
      {
        v27 = v112;
        do
        {
          v96 = *((_QWORD *)v31 - 1);
          v31 -= 2;
          *((_QWORD *)v95 - 1) = v96;
          v95 -= 2;
        }
        while (v31 != __p);
        if (!__p)
          goto LABEL_175;
      }
      operator delete(__p);
LABEL_175:
      v16 = v95;
      continue;
    }
    if ((vcgt_f32(vadd_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)), vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1))).u8[0] & 1) != 0)
    {
      if (v31 >= (float *)v111)
      {
        v72 = ((char *)v31 - (char *)__p) >> 3;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 61)
          abort();
        if ((v111 - (char *)__p) >> 2 > v73)
          v73 = (v111 - (char *)__p) >> 2;
        if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
        {
          if (v74 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v75 = (char *)operator new(8 * v74);
        }
        else
        {
          v75 = 0;
        }
        v88 = (float *)&v75[8 * v72];
        *(_DWORD *)v88 = v38;
        v88[1] = v45;
        v71 = v88 + 2;
        v111 = &v75[8 * v74];
        if (v31 == __p)
          goto LABEL_125;
        do
        {
          v89 = *((_QWORD *)v31 - 1);
          v31 -= 2;
          *((_QWORD *)v88 - 1) = v89;
          v88 -= 2;
        }
        while (v31 != __p);
        if (__p)
LABEL_125:
          operator delete(__p);
        v16 = v88;
      }
      else
      {
        *((_DWORD *)v22 - 2) = v38;
        *(v22 - 1) = v45;
        v71 = v22;
        v16 = __p;
      }
      v90 = *v35;
      if (v71 < (float *)v111)
      {
        *(_DWORD *)v71 = v90;
        v71[1] = v42;
        goto LABEL_152;
      }
      v91 = ((char *)v71 - (char *)v16) >> 3;
      v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61)
        abort();
      if ((v111 - (char *)v16) >> 2 > v92)
        v92 = (v111 - (char *)v16) >> 2;
      if ((unint64_t)(v111 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
        v93 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v93 = v92;
      if (v93)
      {
        if (v93 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v94 = (char *)operator new(8 * v93);
      }
      else
      {
        v94 = 0;
      }
      v104 = (float *)&v94[8 * v91];
      *(_DWORD *)v104 = v90;
      v104[1] = v42;
      v22 = v104 + 2;
      v111 = &v94[8 * v93];
      if (v71 == v16)
        goto LABEL_171;
      do
      {
        v105 = *((_QWORD *)v71 - 1);
        v71 -= 2;
        *((_QWORD *)v104 - 1) = v105;
        v104 -= 2;
      }
      while (v71 != v16);
    }
    else
    {
      if (v31 >= (float *)v111)
      {
        v80 = ((char *)v31 - (char *)__p) >> 3;
        v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61)
          abort();
        if ((v111 - (char *)__p) >> 2 > v81)
          v81 = (v111 - (char *)__p) >> 2;
        if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v82 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v82 = v81;
        if (v82)
        {
          if (v82 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v83 = (char *)operator new(8 * v82);
        }
        else
        {
          v83 = 0;
        }
        v97 = (float *)&v83[8 * v80];
        *(_DWORD *)v97 = v34;
        v97[1] = v42;
        v71 = v97 + 2;
        v111 = &v83[8 * v82];
        if (v31 == __p)
          goto LABEL_148;
        do
        {
          v98 = *((_QWORD *)v31 - 1);
          v31 -= 2;
          *((_QWORD *)v97 - 1) = v98;
          v97 -= 2;
        }
        while (v31 != __p);
        if (__p)
LABEL_148:
          operator delete(__p);
        v16 = v97;
      }
      else
      {
        *((_DWORD *)v22 - 2) = v34;
        *(v22 - 1) = v42;
        v71 = v22;
        v16 = __p;
      }
      v99 = *v37;
      if (v71 < (float *)v111)
      {
        *(_DWORD *)v71 = v99;
        v71[1] = v45;
LABEL_152:
        v22 = v71 + 2;
LABEL_153:
        v27 = v112;
        continue;
      }
      v100 = ((char *)v71 - (char *)v16) >> 3;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 61)
        abort();
      if ((v111 - (char *)v16) >> 2 > v101)
        v101 = (v111 - (char *)v16) >> 2;
      if ((unint64_t)(v111 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
        v102 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v102 = v101;
      if (v102)
      {
        if (v102 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v103 = (char *)operator new(8 * v102);
      }
      else
      {
        v103 = 0;
      }
      v104 = (float *)&v103[8 * v100];
      *(_DWORD *)v104 = v99;
      v104[1] = v45;
      v22 = v104 + 2;
      v111 = &v103[8 * v102];
      if (v71 == v16)
      {
LABEL_171:
        operator delete(v16);
        goto LABEL_172;
      }
      do
      {
        v106 = *((_QWORD *)v71 - 1);
        v71 -= 2;
        *((_QWORD *)v104 - 1) = v106;
        v104 -= 2;
      }
      while (v71 != v16);
    }
    if (v16)
      goto LABEL_171;
LABEL_172:
    v16 = v104;
LABEL_182:
    v27 = v112;
LABEL_183:
    ;
  }
  while (v16 != v22);
  if (v22)
    operator delete(v22);
  a4 = v110;
  if (v110)
    goto LABEL_11;
  return v11;
}

void sub_2288BFCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void geom_bezier_curve_bvh_closest_point_2d(_QWORD *a1, double *a2, unsigned int *a3, double *a4, float64x2_t a5)
{
  _QWORD *v5;
  float64x2_t v8;
  uint64_t v10;
  int v11;
  float64x2_t *v12;
  unint64_t v13;
  unsigned int v14;
  double *v15;
  double *v16;
  uint64_t v17;
  unsigned int v18;
  double *v19;
  float64x2_t v20;
  double v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double *v26;
  unsigned int v27;
  unsigned int v28;
  double v29;
  double v30;
  char *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  float64x2_t v39;
  int64x2_t v40;
  double v41;
  float64x2_t v42;
  int64x2_t v43;
  double v44;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int64x2_t v60;
  double v61;
  int64x2_t v62;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  double v66;
  unsigned int v67;
  double *v69;
  double *v70;
  double *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  double *v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  double *v94;
  double *v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  double *v101;
  double *v102;
  _QWORD *v103;
  char *v104;
  unsigned int v105;
  double *__p;
  double v108;
  uint64_t v109;

  v5 = a4;
  v8 = a5;
  if (a2)
  {
    *a2 = INFINITY;
    v10 = 0;
  }
  else
  {
    v10 = 0x7FF0000000000000;
  }
  v11 = -1;
  if (a3)
  {
    *a3 = -1;
    v11 = 0;
  }
  if (a1[7] == a1[6] || (v12 = (float64x2_t *)a1[3], (v13 = a1[4] - (_QWORD)v12) == 0))
  {
    v17 = 0x7FF8000000000000;
    if (!a4)
      return;
    goto LABEL_11;
  }
  v14 = __clz(v13 >> 6);
  if (v14 == 31)
  {
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v18 = 31 - v14;
    v19 = (double *)operator new(16 * (31 - v14));
    v8 = a5;
    v16 = v19;
    v15 = &v19[2 * v18];
  }
  v20 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v8, v12[3]), v12[2]), v8);
  v21 = vaddvq_f64(vmulq_f64(v20, v20));
  v103 = v5;
  if (v16 >= v15)
  {
    v23 = (char *)v15 - (char *)v16;
    v24 = v23 >> 3;
    if ((unint64_t)(v23 >> 3) <= 1)
      v24 = 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25 >> 60)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v26 = (double *)operator new(16 * v25);
    v104 = (char *)&v26[2 * v25];
    *v26 = 0.0;
    v22 = v26 + 2;
    v26[1] = v21;
    if (v16)
      operator delete(v16);
    v16 = v26;
    v8 = a5;
  }
  else
  {
    v104 = (char *)v15;
    *v16 = 0.0;
    v22 = v16 + 2;
    v16[1] = v21;
  }
  v27 = v11;
  v28 = -1;
  v17 = 0x7FF8000000000000;
  v29 = INFINITY;
  do
  {
    v30 = *(double *)&v10;
    if (a2)
      v30 = *a2;
    v31 = (char *)(v22 - 2);
    if (v30 <= *(v22 - 1))
    {
      v22 -= 2;
      continue;
    }
    v105 = v27;
    __p = v16;
    v32 = a1[3];
    v33 = (unsigned int *)(v32 + ((unint64_t)*(unsigned int *)v31 << 6));
    v35 = (int *)(v33 + 1);
    v34 = v33[1];
    v36 = (int *)(v33 + 2);
    v37 = v33[2];
    if (v33[1] != -1 || (_DWORD)v37 != -1)
    {
      v39 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v8, *(float64x2_t *)(v32 + (v34 << 6) + 48)), *(float64x2_t *)(v32 + (v34 << 6) + 32)), v8);
      v40 = (int64x2_t)vmulq_f64(v39, v39);
      v41 = vaddvq_f64((float64x2_t)v40);
      v42 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v8, *(float64x2_t *)(v32 + (v37 << 6) + 48)), *(float64x2_t *)(v32 + (v37 << 6) + 32)), v8);
      v43 = (int64x2_t)vmulq_f64(v42, v42);
      v44 = vaddvq_f64((float64x2_t)v43);
      if (v41 >= v30 || v44 >= v30)
      {
        if (v41 >= v30)
        {
          if (v44 < v30)
          {
            if (v31 >= v104)
            {
              v84 = (v31 - (char *)__p) >> 4;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 60)
                abort();
              if ((v104 - (char *)__p) >> 3 > v85)
                v85 = (v104 - (char *)__p) >> 3;
              if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
                v86 = 0xFFFFFFFFFFFFFFFLL;
              else
                v86 = v85;
              if (v86)
              {
                if (v86 >> 60)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v87 = (char *)operator new(16 * v86);
                v8 = a5;
              }
              else
              {
                v87 = 0;
              }
              v102 = (double *)&v87[16 * v84];
              v104 = &v87[16 * v86];
              *(_DWORD *)v102 = v37;
              v102[1] = v44;
              v22 = v102 + 2;
              if (v31 == (char *)__p)
                goto LABEL_179;
              do
              {
                *((_OWORD *)v102 - 1) = *((_OWORD *)v31 - 1);
                v102 -= 2;
                v31 -= 16;
              }
              while (v31 != (char *)__p);
              if (__p)
              {
LABEL_179:
                operator delete(__p);
                v8 = a5;
              }
              v16 = v102;
              goto LABEL_181;
            }
            *((_DWORD *)v22 - 4) = v37;
            *(v22 - 1) = v44;
            goto LABEL_80;
          }
          goto LABEL_79;
        }
        if (v31 < v104)
        {
          *((_DWORD *)v22 - 4) = v34;
          *(v22 - 1) = v41;
          goto LABEL_80;
        }
        v76 = (v31 - (char *)__p) >> 4;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 60)
          abort();
        if ((v104 - (char *)__p) >> 3 > v77)
          v77 = (v104 - (char *)__p) >> 3;
        if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v78 = 0xFFFFFFFFFFFFFFFLL;
        else
          v78 = v77;
        if (v78)
        {
          if (v78 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v79 = (char *)operator new(16 * v78);
          v8 = a5;
        }
        else
        {
          v79 = 0;
        }
        v94 = (double *)&v79[16 * v76];
        v104 = &v79[16 * v78];
        *(_DWORD *)v94 = v34;
        v94[1] = v41;
        v22 = v94 + 2;
        if (v31 == (char *)__p)
        {
          v27 = v105;
        }
        else
        {
          v27 = v105;
          do
          {
            *((_OWORD *)v94 - 1) = *((_OWORD *)v31 - 1);
            v94 -= 2;
            v31 -= 16;
          }
          while (v31 != (char *)__p);
          if (!__p)
            goto LABEL_174;
        }
        operator delete(__p);
        v8 = a5;
LABEL_174:
        v16 = v94;
        continue;
      }
      if ((vmovn_s64(vcgtq_f64(vaddq_f64((float64x2_t)v43, (float64x2_t)vdupq_laneq_s64(v43, 1)), vaddq_f64((float64x2_t)v40, (float64x2_t)vdupq_laneq_s64(v40, 1)))).u8[0] & 1) != 0)
      {
        if (v31 >= v104)
        {
          v72 = (v31 - (char *)__p) >> 4;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 60)
            abort();
          if ((v104 - (char *)__p) >> 3 > v73)
            v73 = (v104 - (char *)__p) >> 3;
          if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
            v74 = 0xFFFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          if (v74)
          {
            if (v74 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v75 = (char *)operator new(16 * v74);
            v8 = a5;
          }
          else
          {
            v75 = 0;
          }
          v88 = (double *)&v75[16 * v72];
          v70 = (double *)&v75[16 * v74];
          *(_DWORD *)v88 = v37;
          v88[1] = v44;
          v69 = v88 + 2;
          if (v31 == (char *)__p)
            goto LABEL_125;
          do
          {
            *((_OWORD *)v88 - 1) = *((_OWORD *)v31 - 1);
            v88 -= 2;
            v31 -= 16;
          }
          while (v31 != (char *)__p);
          if (__p)
          {
LABEL_125:
            operator delete(__p);
            v8 = a5;
          }
          v16 = v88;
        }
        else
        {
          *((_DWORD *)v22 - 4) = v37;
          *(v22 - 1) = v44;
          v69 = v22;
          v16 = __p;
          v70 = (double *)v104;
        }
        v89 = *v35;
        if (v69 < v70)
        {
          v104 = (char *)v70;
          *(_DWORD *)v69 = v89;
          v69[1] = v41;
LABEL_152:
          v22 = v69 + 2;
          goto LABEL_181;
        }
        v90 = ((char *)v69 - (char *)v16) >> 4;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 60)
          abort();
        if (v70 - v16 > v91)
          v91 = v70 - v16;
        if ((unint64_t)((char *)v70 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0)
          v92 = 0xFFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        if (v92)
        {
          if (v92 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v93 = (char *)operator new(16 * v92);
          v8 = a5;
        }
        else
        {
          v93 = 0;
        }
        v101 = (double *)&v93[16 * v90];
        v104 = &v93[16 * v92];
        *(_DWORD *)v101 = v89;
        v101[1] = v41;
        v22 = v101 + 2;
        if (v69 == v16)
          goto LABEL_170;
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v69 - 1);
          v101 -= 2;
          v69 -= 2;
        }
        while (v69 != v16);
      }
      else
      {
        if (v31 >= v104)
        {
          v80 = (v31 - (char *)__p) >> 4;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 60)
            abort();
          if ((v104 - (char *)__p) >> 3 > v81)
            v81 = (v104 - (char *)__p) >> 3;
          if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0)
            v82 = 0xFFFFFFFFFFFFFFFLL;
          else
            v82 = v81;
          if (v82)
          {
            if (v82 >> 60)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v83 = (char *)operator new(16 * v82);
            v8 = a5;
          }
          else
          {
            v83 = 0;
          }
          v95 = (double *)&v83[16 * v80];
          v71 = (double *)&v83[16 * v82];
          *(_DWORD *)v95 = v34;
          v95[1] = v41;
          v69 = v95 + 2;
          if (v31 == (char *)__p)
            goto LABEL_148;
          do
          {
            *((_OWORD *)v95 - 1) = *((_OWORD *)v31 - 1);
            v95 -= 2;
            v31 -= 16;
          }
          while (v31 != (char *)__p);
          if (__p)
          {
LABEL_148:
            operator delete(__p);
            v8 = a5;
          }
          v16 = v95;
        }
        else
        {
          *((_DWORD *)v22 - 4) = v34;
          *(v22 - 1) = v41;
          v69 = v22;
          v16 = __p;
          v71 = (double *)v104;
        }
        v96 = *v36;
        if (v69 < v71)
        {
          v104 = (char *)v71;
          *(_DWORD *)v69 = v96;
          v69[1] = v44;
          goto LABEL_152;
        }
        v97 = ((char *)v69 - (char *)v16) >> 4;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 60)
          abort();
        if (v71 - v16 > v98)
          v98 = v71 - v16;
        if ((unint64_t)((char *)v71 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0)
          v99 = 0xFFFFFFFFFFFFFFFLL;
        else
          v99 = v98;
        if (v99)
        {
          if (v99 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v100 = (char *)operator new(16 * v99);
          v8 = a5;
        }
        else
        {
          v100 = 0;
        }
        v101 = (double *)&v100[16 * v97];
        v104 = &v100[16 * v99];
        *(_DWORD *)v101 = v96;
        v101[1] = v44;
        v22 = v101 + 2;
        if (v69 == v16)
          goto LABEL_170;
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v69 - 1);
          v101 -= 2;
          v69 -= 2;
        }
        while (v69 != v16);
      }
      if (!v16)
      {
LABEL_171:
        v16 = v101;
        goto LABEL_181;
      }
LABEL_170:
      operator delete(v16);
      v8 = a5;
      goto LABEL_171;
    }
    v46 = v33[4];
    if (v46)
    {
      v47 = v33[3];
      v48 = (unsigned int *)(a1[6] + 4 * v47);
      v49 = 4 * (v46 + v47) - 4 * v47;
      v27 = v105;
      while (1)
      {
        v50 = *v48;
        v108 = 0.0;
        v109 = 0;
        if ((_DWORD)v50)
        {
          v51 = a1[18];
          v52 = *(_DWORD *)(v51 + 4 * (v50 - 1));
        }
        else
        {
          v52 = 0;
          v51 = a1[18];
        }
        v53 = a1[15];
        v54 = v52 + 1;
        v55 = *(_DWORD *)(v51 + 4 * v50) - v52;
        if (v55 == 4)
          break;
        if (v55 == 3)
        {
          geom_closest_point_to_quadratic_bezier_2d((double *)&v109, &v108, v8, *(float64x2_t *)(v53 + 16 * v52), *(float64x2_t *)(v53 + 16 * v54), *(float64x2_t *)(v53 + 16 * (v52 + 2)));
LABEL_55:
          v8 = a5;
          goto LABEL_56;
        }
        v56 = 0uLL;
        if (v55 == 2)
        {
          v57 = *(float64x2_t *)(v53 + 16 * v52);
          v58 = *(float64x2_t *)(v53 + 16 * v54);
          v59 = vsubq_f64(v58, v57);
          v60 = (int64x2_t)vmulq_f64(v59, v59);
          v61 = 0.0;
          if (vaddvq_f64((float64x2_t)v60) != 0.0)
          {
            v62 = (int64x2_t)vmulq_f64(vsubq_f64(v8, v57), v59);
            v61 = fmax(fmin(vdivq_f64(vaddq_f64((float64x2_t)v62, (float64x2_t)vdupq_laneq_s64(v62, 1)), vaddq_f64((float64x2_t)v60, (float64x2_t)vdupq_laneq_s64(v60, 1))).f64[0], 1.0), 0.0);
          }
          v56 = vmlaq_n_f64(vmulq_n_f64(v58, v61), v57, 1.0 - v61);
          v63 = vsubq_f64(v8, v56);
          v108 = vaddvq_f64(vmulq_f64(v63, v63));
          v109 = *(_QWORD *)&v61;
        }
LABEL_56:
        if (v108 < v29 || v108 == v29 && v28 > v50)
        {
          v17 = v109;
          v29 = v108;
          v28 = v50;
        }
        v64 = *(double *)&v10;
        if (a2)
          v64 = *a2;
        v65 = vsubq_f64(v8, v56);
        v66 = vaddvq_f64(vmulq_f64(v65, v65));
        if (v66 >= v64)
        {
          v67 = v27;
          if (a3)
            v67 = *a3;
          if (v66 != v64 || v50 >= v67)
            goto LABEL_74;
        }
        if (a2)
        {
          *a2 = v66;
          if (!a3)
            goto LABEL_73;
        }
        else
        {
          v10 = *(_QWORD *)&v66;
          if (!a3)
          {
LABEL_73:
            v27 = v50;
            goto LABEL_74;
          }
        }
        *a3 = v50;
LABEL_74:
        ++v48;
        v49 -= 4;
        if (!v49)
        {
          v22 = (double *)v31;
          v16 = __p;
          goto LABEL_182;
        }
      }
      geom_closest_point_to_cubic_bezier_2d((double *)&v109, &v108, v8, *(float64x2_t *)(v53 + 16 * v52), *(float64x2_t *)(v53 + 16 * v54), *(float64x2_t *)(v53 + 16 * (v52 + 2)), *(float64x2_t *)(v53 + 16 * (v52 + 3)), (uint64_t)a3, a4);
      goto LABEL_55;
    }
LABEL_79:
    v22 -= 2;
LABEL_80:
    v16 = __p;
LABEL_181:
    v27 = v105;
LABEL_182:
    ;
  }
  while (v16 != v22);
  if (v22)
    operator delete(v22);
  v5 = v103;
  if (v103)
LABEL_11:
    *v5 = v17;
}

void sub_2288C069C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t geom_create_kd_tree_with_default_options_2f(const void *a1, void *a2)
{
  uint64_t opt_2f_obj_alloc;

  opt_2f_obj_alloc = geom_kd_tree_create_opt_2f_obj_alloc();
  *(_QWORD *)(opt_2f_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_with_default_options_2d(const void *a1, void *a2)
{
  uint64_t opt_2d_obj_alloc;

  opt_2d_obj_alloc = geom_kd_tree_create_opt_2d_obj_alloc();
  *(_QWORD *)(opt_2d_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_with_default_options_3f(const void *a1, void *a2)
{
  uint64_t opt_3f_obj_alloc;

  opt_3f_obj_alloc = geom_kd_tree_create_opt_3f_obj_alloc();
  *(_QWORD *)(opt_3f_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_with_default_options_3d(const void *a1, void *a2)
{
  uint64_t opt_3d_obj_alloc;

  opt_3d_obj_alloc = geom_kd_tree_create_opt_3d_obj_alloc();
  *(_QWORD *)(opt_3d_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_create_opt_2f()
{
  uint64_t result;

  result = geom_kd_tree_create_opt_2f_obj_alloc();
  *(_QWORD *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_create_opt_2d()
{
  uint64_t result;

  result = geom_kd_tree_create_opt_2d_obj_alloc();
  *(_QWORD *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_create_opt_3f()
{
  uint64_t result;

  result = geom_kd_tree_create_opt_3f_obj_alloc();
  *(_QWORD *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_create_opt_3d()
{
  uint64_t result;

  result = geom_kd_tree_create_opt_3d_obj_alloc();
  *(_QWORD *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_with_options_2f(const void *a1, void *a2, uint64_t a3)
{
}

uint64_t `anonymous namespace'::create_kd_tree_with_opt<float,(unsigned char)2>(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  const void *v10[2];

  if (a4)
  {
    v7 = a4;
    geom::kd_tree<float,(unsigned char)2>::reset((_QWORD *)(a4 + 16), a2, (uint64_t)a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    v7 = geom_kd_tree_2f_obj_alloc();
    v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(_BYTE *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<float,(unsigned char)2>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_create_kd_tree_with_options_2d(const void *a1, void *a2, uint64_t a3)
{
}

uint64_t `anonymous namespace'::create_kd_tree_with_opt<double,(unsigned char)2>(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  const void *v10[2];

  if (a4)
  {
    v7 = a4;
    geom::kd_tree<float,(unsigned char)3>::reset((_QWORD *)(a4 + 16), a2, (uint64_t)a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    v7 = geom_kd_tree_2d_obj_alloc();
    v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(_BYTE *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<double,(unsigned char)2>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_create_kd_tree_with_options_3f(const void *a1, void *a2, uint64_t a3)
{
}

uint64_t `anonymous namespace'::create_kd_tree_with_opt<float,(unsigned char)3>(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  const void *v10[2];

  if (a4)
  {
    v7 = a4;
    geom::kd_tree<float,(unsigned char)3>::reset((_QWORD *)(a4 + 16), a2, (uint64_t)a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    v7 = geom_kd_tree_3f_obj_alloc();
    v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(_BYTE *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<float,(unsigned char)3>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_create_kd_tree_with_options_3d(const void *a1, void *a2, uint64_t a3)
{
}

uint64_t `anonymous namespace'::create_kd_tree_with_opt<double,(unsigned char)3>(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  const void *v10[2];

  if (a4)
  {
    v7 = a4;
    geom::kd_tree<double,(unsigned char)3>::reset((_QWORD *)(a4 + 16), a2, (uint64_t)a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    v7 = geom_kd_tree_3d_obj_alloc();
    v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(_BYTE *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<double,(unsigned char)3>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_recreate_kd_tree_with_options_2f(uint64_t a1, const void *a2, void *a3, uint64_t a4)
{
}

uint64_t geom_recreate_kd_tree_with_options_2d(uint64_t a1, const void *a2, void *a3, uint64_t a4)
{
}

uint64_t geom_recreate_kd_tree_with_options_3f(uint64_t a1, const void *a2, void *a3, uint64_t a4)
{
}

uint64_t geom_recreate_kd_tree_with_options_3d(uint64_t a1, const void *a2, void *a3, uint64_t a4)
{
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_2f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_2f(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_2d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_2d(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_3f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_3f(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_3d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_3d(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_2f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_2f(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_2d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_2d(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_3f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_3f(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_3d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_3d(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_create_kd_tree_2f(const void *a1, const void *a2, int a3)
{
  uint64_t v6;
  const void *v8[2];

  v6 = geom_kd_tree_2f_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(_BYTE *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<float,(unsigned char)2>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_create_kd_tree_2d(const void *a1, const void *a2, int a3)
{
  uint64_t v6;
  const void *v8[2];

  v6 = geom_kd_tree_2d_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(_BYTE *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<double,(unsigned char)2>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_create_kd_tree_3f(const void *a1, const void *a2, int a3)
{
  uint64_t v6;
  const void *v8[2];

  v6 = geom_kd_tree_3f_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(_BYTE *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<float,(unsigned char)3>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_create_kd_tree_3d(const void *a1, const void *a2, int a3)
{
  uint64_t v6;
  const void *v8[2];

  v6 = geom_kd_tree_3d_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(_BYTE *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<double,(unsigned char)3>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_kd_tree_find_closest_2f(uint64_t a1, float32x2_t a2)
{
  float32x2_t v3;

  v3 = a2;
  return geom::kd_tree<float,(unsigned char)2>::find_closest((_QWORD *)(a1 + 16), &v3);
}

uint64_t geom_kd_tree_find_closest_3f(uint64_t a1, float32x4_t a2)
{
  float32x4_t v3;

  v3 = a2;
  return geom::kd_tree<float,(unsigned char)3>::find_closest((_QWORD *)(a1 + 16), &v3);
}

uint64_t geom_kd_tree_find_closest_2d(uint64_t a1, float64x2_t a2)
{
  float64x2_t v3;

  v3 = a2;
  return geom::kd_tree<double,(unsigned char)2>::find_closest((_QWORD *)(a1 + 16), &v3);
}

uint64_t geom_kd_tree_find_closest_3d(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  float64x2_t v4[2];

  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return geom::kd_tree<double,(unsigned char)3>::find_closest((_QWORD *)(a1 + 16), v4);
}

uint64_t geom_kd_tree_find_within_radius_2f(uint64_t a1, uint64_t a2, float32x2_t a3, float a4)
{
  _QWORD *v5;
  char **v6;
  float32x2_t v8;

  v8 = a3;
  v5 = (_QWORD *)(a1 + 16);
  v6 = (char **)geom::collection_to_vector<float>(a2);
  return geom::kd_tree<float,(unsigned char)2>::find_within_radius(v5, &v8, v6, a4);
}

uint64_t geom_kd_tree_find_within_radius_3f(uint64_t a1, uint64_t a2, float32x4_t a3, float a4)
{
  _QWORD *v5;
  char **v6;
  float32x4_t v8;

  v8 = a3;
  v5 = (_QWORD *)(a1 + 16);
  v6 = (char **)geom::collection_to_vector<float>(a2);
  return geom::kd_tree<float,(unsigned char)3>::find_within_radius(v5, &v8, v6, a4);
}

uint64_t geom_kd_tree_find_within_radius_2d(uint64_t a1, uint64_t a2, float64x2_t a3, double a4)
{
  _QWORD *v5;
  char **v6;
  float64x2_t v8;

  v8 = a3;
  v5 = (_QWORD *)(a1 + 16);
  v6 = (char **)geom::collection_to_vector<float>(a2);
  return geom::kd_tree<double,(unsigned char)2>::find_within_radius(v5, &v8, v6, a4);
}

uint64_t geom_kd_tree_find_within_radius_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, double a4)
{
  float64x2_t v5;
  _QWORD *v6;
  char **v7;
  float64x2_t v9[2];

  v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  v6 = (_QWORD *)(a1 + 16);
  v7 = (char **)geom::collection_to_vector<float>(a3);
  return geom::kd_tree<double,(unsigned char)3>::find_within_radius(v6, v9, v7, a4);
}

BOOL geom_kd_tree_is_node_valid_2f(uint64_t a1, unsigned int a2)
{
  return a2 && *(_QWORD *)(a1 + 32) >= (unint64_t)a2;
}

BOOL geom_kd_tree_is_node_valid_2d(uint64_t a1, unsigned int a2)
{
  return a2 && *(_QWORD *)(a1 + 32) >= (unint64_t)a2;
}

BOOL geom_kd_tree_is_node_valid_3f(uint64_t a1, unsigned int a2)
{
  return a2 && *(_QWORD *)(a1 + 32) >= (unint64_t)a2;
}

BOOL geom_kd_tree_is_node_valid_3d(uint64_t a1, unsigned int a2)
{
  return a2 && *(_QWORD *)(a1 + 32) >= (unint64_t)a2;
}

uint64_t geom_kd_tree_get_node_value_index_2f(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_value_index_2d(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_value_index_3f(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_value_index_3d(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_split_axis_2f(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_get_node_split_axis_3f(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_get_node_split_axis_2d(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_get_node_split_axis_3d(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_points_2f(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t geom_kd_tree_points_3f(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t geom_kd_tree_points_2d(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t geom_kd_tree_points_3d(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t std::__throw_bad_variant_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
}

_QWORD *`anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v15[0] = &off_24F148690;
  v15[1] = v3;
  v16 = v15;
  v13[0] = &off_24F148720;
  v13[1] = &v10;
  v14 = v13;
  v12 = v11;
  v10 = a3;
  v11[0] = &off_24F148690;
  v11[1] = v3;
  geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(a1, (uint64_t)v13, (uint64_t)v11, *((_DWORD *)a2 + 2));
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2288C11C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

const void **_ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b@<X0>(const void **result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const void *v4;
  const void **v5;
  void *v6;

  v4 = result[1];
  if (v4)
  {
    v5 = result;
    if (a2)
    {
      v6 = (void *)operator new[]();
      result = (const void **)memmove(v6, *v5, 8 * (_QWORD)v4);
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    *(_QWORD *)a3 = *result;
    *(_QWORD *)(a3 + 8) = v4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148690;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148690;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::operator()(uint64_t a1, unsigned int *a2, double *a3, unsigned int *a4, double *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(a1 + 8))(*a2, *a4, *a3, a3[1], *a5, a5[1]);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::target_type()
{
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148720;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target_type()
{
}

_QWORD *`anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v15[0] = &off_24F1487B0;
  v15[1] = v3;
  v16 = v15;
  v13[0] = &off_24F148840;
  v13[1] = &v10;
  v14 = v13;
  v12 = v11;
  v10 = a3;
  v11[0] = &off_24F1487B0;
  v11[1] = v3;
  geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(a1, (uint64_t)v13, (uint64_t)v11, *((_DWORD *)a2 + 2));
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2288C157C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

const void **_ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b@<X0>(const void **result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const void *v4;
  const void **v5;
  void *v6;

  v4 = result[1];
  if (v4)
  {
    v5 = result;
    if (a2)
    {
      v6 = (void *)operator new[]();
      result = (const void **)memmove(v6, *v5, 16 * (_QWORD)v4);
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    *(_QWORD *)a3 = *result;
    *(_QWORD *)(a3 + 8) = v4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1487B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1487B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, unsigned int *a4, __n128 *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, __n128, __n128, __n128, __n128))(a1 + 8))(*a2, *a4, *a3, a3[1], *a5, a5[1]);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::target_type()
{
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148840;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148840;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target_type()
{
}

_QWORD *`anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  switch(a2)
  {
    case 0:
      v13[0] = &off_24F1488D0;
      v13[1] = &v4;
      v14 = v13;
      geom::bvh<float,(unsigned char)3>::build_middle_split((uint64_t)result, (uint64_t)v13);
      result = v14;
      if (v14 != v13)
        goto LABEL_11;
      v3 = 4;
      result = v13;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 1:
      v11[0] = &off_24F1488D0;
      v11[1] = &v4;
      v12 = v11;
      geom::bvh<float,(unsigned char)3>::build_median((uint64_t)result, (uint64_t)v11);
      result = v12;
      if (v12 != v11)
        goto LABEL_11;
      v3 = 4;
      result = v11;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 2:
      v9[0] = &off_24F1488D0;
      v9[1] = &v4;
      v10 = v9;
      geom::bvh<float,(unsigned char)3>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v9);
      result = v10;
      if (v10 != v9)
        goto LABEL_11;
      v3 = 4;
      result = v9;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 3:
      v7[0] = &off_24F1488D0;
      v7[1] = &v4;
      v8 = v7;
      geom::bvh<float,(unsigned char)3>::build_volume_heuristic((uint64_t)result, (uint64_t)v7);
      result = v8;
      if (v8 != v7)
        goto LABEL_11;
      v3 = 4;
      result = v7;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 4:
      v5[0] = &off_24F1488D0;
      v5[1] = &v4;
      v6 = v5;
      geom::bvh<float,(unsigned char)3>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
      result = v6;
      if (v6 == v5)
      {
        v3 = 4;
        result = v5;
      }
      else
      {
LABEL_11:
        if (!result)
          return result;
        v3 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    default:
      return result;
  }
}

void sub_2288C19A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 64);
  if (v23 == (_QWORD *)(v21 - 88))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 88);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *`anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v15[0] = &off_24F148950;
  v15[1] = v3;
  v16 = v15;
  v13[0] = &off_24F1489E0;
  v13[1] = &v10;
  v14 = v13;
  v12 = v11;
  v10 = a3;
  v11[0] = &off_24F148950;
  v11[1] = v3;
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(a1, (uint64_t)v13, (uint64_t)v11, *((_DWORD *)a2 + 2));
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2288C1B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1488D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1488D0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, unsigned int *a4, __n128 *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, __n128, __n128, __n128, __n128))(a1 + 8))(*a2, *a4, *a3, a3[1], *a5, a5[1]);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::target_type()
{
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F1489E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F1489E0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

_QWORD *`anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = a3;
  switch(a2)
  {
    case 0:
      v13[0] = &off_24F148A60;
      v13[1] = &v4;
      v14 = v13;
      geom::bvh<double,(unsigned char)3>::build_middle_split((uint64_t)result, (uint64_t)v13);
      result = v14;
      if (v14 != v13)
        goto LABEL_11;
      v3 = 4;
      result = v13;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 1:
      v11[0] = &off_24F148A60;
      v11[1] = &v4;
      v12 = v11;
      geom::bvh<double,(unsigned char)3>::build_median((uint64_t)result, (uint64_t)v11);
      result = v12;
      if (v12 != v11)
        goto LABEL_11;
      v3 = 4;
      result = v11;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 2:
      v9[0] = &off_24F148A60;
      v9[1] = &v4;
      v10 = v9;
      geom::bvh<double,(unsigned char)3>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v9);
      result = v10;
      if (v10 != v9)
        goto LABEL_11;
      v3 = 4;
      result = v9;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 3:
      v7[0] = &off_24F148A60;
      v7[1] = &v4;
      v8 = v7;
      geom::bvh<double,(unsigned char)3>::build_volume_heuristic((uint64_t)result, (uint64_t)v7);
      result = v8;
      if (v8 != v7)
        goto LABEL_11;
      v3 = 4;
      result = v7;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    case 4:
      v5[0] = &off_24F148A60;
      v5[1] = &v4;
      v6 = v5;
      geom::bvh<double,(unsigned char)3>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
      result = v6;
      if (v6 == v5)
      {
        v3 = 4;
        result = v5;
      }
      else
      {
LABEL_11:
        if (!result)
          return result;
        v3 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
    default:
      return result;
  }
}

void sub_2288C1FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;

  v23 = *(_QWORD **)(v21 - 64);
  if (v23 == (_QWORD *)(v21 - 88))
  {
    v24 = 4;
    v23 = (_QWORD *)(v21 - 88);
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *`anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v15[0] = &off_24F148AE0;
  v15[1] = v3;
  v16 = v15;
  v13[0] = &off_24F148B70;
  v13[1] = &v10;
  v14 = v13;
  v12 = v11;
  v10 = a3;
  v11[0] = &off_24F148AE0;
  v11[1] = v3;
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(a1, (uint64_t)v13, (uint64_t)v11, *((_DWORD *)a2 + 2));
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  result = v16;
  if (v16 == v15)
  {
    v9 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2288C21F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  create_bvh_custom_heuristic<float,(unsigned char)2,true>();
  _Unwind_Resume(a1);
}

const void **_ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b@<X0>(const void **result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const void *v4;
  const void **v5;
  void *v6;

  v4 = result[1];
  if (v4)
  {
    v5 = result;
    if (a2)
    {
      v6 = (void *)operator new[]();
      result = (const void **)memmove(v6, *v5, 32 * (_QWORD)v4);
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    *(_QWORD *)a3 = *result;
    *(_QWORD *)(a3 + 8) = v4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148A60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148A60;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148AE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148AE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::operator()(uint64_t a1, unsigned int *a2, _OWORD *a3, unsigned int *a4, _OWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _OWORD *, uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[4];
  _OWORD v14[4];

  v5 = *a2;
  v6 = *a4;
  v7 = *(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _OWORD *))(a1 + 8);
  v8 = a3[1];
  v14[0] = *a3;
  v14[1] = v8;
  v9 = a3[3];
  v14[2] = a3[2];
  v14[3] = v9;
  v10 = a5[1];
  v13[0] = *a5;
  v13[1] = v10;
  v11 = a5[3];
  v13[2] = a5[2];
  v13[3] = v11;
  return v7(v5, v14, v6, v13);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn `anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::target_type()
{
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148B70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148B70;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148BF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148BF0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148C70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148C70;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148CF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148CF0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148D70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148D70;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

uint64_t `anonymous namespace'::construct_triangle_mesh_bvh<float>(uint64_t a1, float32x4_t *a2, uint64_t a3, char *a4, int a5, uint64_t a6)
{
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  int32x4_t v26;
  uint64_t v32;
  char *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  const void *v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!a6)
  {
    v19 = geom_triangle_mesh_bvh_3f_obj_alloc();
    v56 = a2;
    v57 = a1;
    v54 = a4;
    v55 = 3 * a3;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b((const void **)&v56, a5, v19 + 144);
    geom::make_external_array<geom::slice<unsigned int>>(&v54, a5, v19 + 168);
    *(_QWORD *)(v19 + 120) = 0;
    *(_QWORD *)(v19 + 128) = 0;
    *(_QWORD *)(v19 + 136) = 0;
    if (a3)
      goto LABEL_21;
LABEL_32:
    v21 = 0;
    v20 = 0;
    v46 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    if (a6)
      goto LABEL_28;
LABEL_33:
    *(_BYTE *)(v19 + 16) = 0;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_QWORD *)(v19 + 72) = v20;
    *(_QWORD *)(v19 + 80) = a3;
    *(_BYTE *)(v19 + 88) = v46;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    *(_QWORD *)(v19 + 96) = v21;
    *(_QWORD *)(v19 + 104) = a3;
    *(_BYTE *)(v19 + 112) = v46;
    goto LABEL_34;
  }
  v12 = 0;
  v56 = a2;
  v57 = a1;
  v13 = 3 * a3;
  v54 = a4;
  v55 = 3 * a3;
  if (a1)
    v14 = a2;
  else
    v14 = 0;
  if (a1 && a5)
  {
    v14 = (void *)operator new[]();
    memcpy(v14, a2, 16 * a1);
    v12 = 1;
  }
  if (*(_BYTE *)(a6 + 160))
  {
    v15 = *(_QWORD *)(a6 + 144);
    if (v15)
      MEMORY[0x22E2B7674](v15, 0x1000C80451B5BE8);
  }
  v16 = 0;
  *(_QWORD *)(a6 + 144) = v14;
  *(_QWORD *)(a6 + 152) = a1;
  *(_BYTE *)(a6 + 160) = v12;
  if (a3)
    v17 = a4;
  else
    v17 = 0;
  if (a3 && a5)
  {
    v17 = (void *)operator new[]();
    memcpy(v17, a4, 12 * a3);
    v16 = 1;
  }
  if (*(_BYTE *)(a6 + 184))
  {
    v18 = *(_QWORD *)(a6 + 168);
    if (v18)
      MEMORY[0x22E2B7674](v18, 0x1000C8052888210);
  }
  *(_QWORD *)(a6 + 168) = v17;
  *(_QWORD *)(a6 + 176) = v13;
  *(_BYTE *)(a6 + 184) = v16;
  *(_QWORD *)(a6 + 128) = *(_QWORD *)(a6 + 120);
  v19 = a6;
  if (!a3)
    goto LABEL_32;
LABEL_21:
  v20 = operator new[]();
  v51 = v20;
  v52 = a3;
  v53 = 1;
  v21 = operator new[]();
  v22 = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v23 = 0x7F0000007FLL;
  *((_QWORD *)&v23 + 1) = 0x7F0000007FLL;
  v24 = (_OWORD *)v21;
  do
  {
    *v24 = v22;
    v24[1] = v23;
    v24 += 2;
  }
  while (v24 != (_OWORD *)(v21 + 32 * a3));
  v25 = 0;
  v48 = v21;
  v49 = a3;
  v50 = 1;
  v26 = vdupq_n_s32(0x7F800000u);
  __asm { FMOV            V1.4S, #3.0 }
  do
  {
    v32 = 0;
    v33 = &a4[12 * v25];
    v34 = a2[*(unsigned int *)v33];
    v35 = a2[*((unsigned int *)v33 + 1)];
    v36 = v34;
    v36.i32[3] = 0;
    v37 = v35;
    v37.i32[3] = 0;
    v38 = vminnmq_f32(v36, v37);
    v39 = a2[*((unsigned int *)v33 + 2)];
    v38.i32[3] = 0;
    v40 = v39;
    v40.i32[3] = 0;
    v41 = vmaxnmq_f32(v36, v37);
    v42.i32[3] = 0;
    v58[0] = vminnmq_f32(v38, v40);
    v58[1] = vmaxnmq_f32(v42, v40);
    v42.i64[0] = 0x7F0000007FLL;
    v42.i32[2] = 127;
    v43 = (float32x4_t)v26;
    do
    {
      v44 = (float32x4_t)v58[v32];
      v44.i32[3] = 0;
      v43.i32[3] = 0;
      v43 = vminnmq_f32(v44, v43);
      v42.i32[3] = 0;
      v42 = vmaxnmq_f32(v44, v42);
      ++v32;
    }
    while (v32 != 2);
    v45 = (float32x4_t *)(v21 + 32 * v25);
    *v45 = v43;
    v45[1] = v42;
    *(float32x4_t *)(v20 + 16 * v25++) = vdivq_f32(vaddq_f32(vaddq_f32(v34, v35), v39), _Q1);
  }
  while (v25 != a3);
  v46 = 1;
  if (!a6)
    goto LABEL_33;
LABEL_28:
  geom::bvh<double,(unsigned char)2>::reset(v19 + 16, (uint64_t)&v51, (uint64_t)&v48);
  if (v50 && v48)
    MEMORY[0x22E2B7674](v48, 0x1000C80E0EAB150);
LABEL_34:
  if (v53 && v51)
    MEMORY[0x22E2B7674](v51, 0x1000C80451B5BE8);
  return v19;
}

void sub_2288C2C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B7674](v1, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

void geom::`anonymous namespace'::build_soa_triangle_mesh_bvh_data<float>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;

  std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::resize((uint64_t)a4, (unint64_t)(a3[1] + 3) >> 2);
  if (a3[1])
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = 0;
      v11 = 3 * *(_DWORD *)(*a3 + 4 * v8);
      v12 = (_DWORD *)(*a4 + ((4 * (v9 & 3)) | (144 * ((unint64_t)v9 >> 2))) + 16);
      do
      {
        v13 = (_DWORD *)(*a1 + 16 * *(unsigned int *)(*a2 + 4 * (v11 + v10)));
        *(v12 - 4) = *v13;
        *v12 = v13[1];
        v12[4] = v13[2];
        ++v10;
        v12 += 12;
      }
      while (v10 != 3);
      v8 = ++v9;
    }
    while (a3[1] > (unint64_t)v9);
  }
}

const void **geom::make_external_array<geom::slice<unsigned int>>@<X0>(const void **result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const void *v4;
  const void **v5;
  void *v6;

  v4 = result[1];
  if (v4)
  {
    v5 = result;
    if (a2)
    {
      v6 = (void *)operator new[]();
      result = (const void **)memmove(v6, *v5, 4 * (_QWORD)v4);
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }
    *(_QWORD *)a3 = *result;
    *(_QWORD *)(a3 + 8) = v4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

void std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 144 * a2;
  }
}

void std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 144 * ((144 * a2 - 144) / 0x90) + 144;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1C71C71C71C71C7)
      abort();
    v10 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xE38E38E38E38E3)
      v11 = 0x1C71C71C71C71C7;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[144 * v8];
    v15 = &v12[144 * v11];
    v16 = 144 * ((144 * a2 - 144) / 0x90) + 144;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 9) = *((_OWORD *)v18 - 9);
        v20 = *((_OWORD *)v18 - 8);
        v21 = *((_OWORD *)v18 - 7);
        v22 = *((_OWORD *)v18 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v18 - 6);
        *((_OWORD *)v14 - 5) = v22;
        *((_OWORD *)v14 - 8) = v20;
        *((_OWORD *)v14 - 7) = v21;
        v23 = *((_OWORD *)v18 - 4);
        v24 = *((_OWORD *)v18 - 3);
        v25 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v25;
        *((_OWORD *)v14 - 4) = v23;
        *((_OWORD *)v14 - 3) = v24;
        v14 -= 144;
        v18 -= 144;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(144 * a2);
}

uint64_t `anonymous namespace'::construct_triangle_mesh_bvh<double>(uint64_t a1, char *a2, uint64_t a3, char *a4, int a5, uint64_t a6)
{
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int64x2_t v23;
  int64x2_t v24;
  _OWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v33;
  uint64_t v34;
  char *v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t *v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  __int128 v52;
  float64x2_t *v53;
  float64x2_t *v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  const void *v63;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  _OWORD v67[4];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!a6)
  {
    v19 = geom_triangle_mesh_bvh_3d_obj_alloc();
    v65 = a2;
    v66 = a1;
    v63 = a4;
    v64 = 3 * a3;
    _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v65, a5, v19 + 144);
    geom::make_external_array<geom::slice<unsigned int>>(&v63, a5, v19 + 168);
    *(_QWORD *)(v19 + 120) = 0;
    *(_QWORD *)(v19 + 128) = 0;
    *(_QWORD *)(v19 + 136) = 0;
    if (a3)
      goto LABEL_21;
LABEL_32:
    v21 = 0;
    v20 = 0;
    v55 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    if (a6)
      goto LABEL_28;
LABEL_33:
    *(_BYTE *)(v19 + 16) = 0;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_QWORD *)(v19 + 72) = v20;
    *(_QWORD *)(v19 + 80) = a3;
    *(_BYTE *)(v19 + 88) = v55;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    *(_QWORD *)(v19 + 96) = v21;
    *(_QWORD *)(v19 + 104) = a3;
    *(_BYTE *)(v19 + 112) = v55;
    goto LABEL_34;
  }
  v12 = 0;
  v65 = a2;
  v66 = a1;
  v13 = 3 * a3;
  v63 = a4;
  v64 = 3 * a3;
  if (a1)
    v14 = a2;
  else
    v14 = 0;
  if (a1 && a5)
  {
    v14 = (void *)operator new[]();
    memcpy(v14, a2, 32 * a1);
    v12 = 1;
  }
  if (*(_BYTE *)(a6 + 160))
  {
    v15 = *(_QWORD *)(a6 + 144);
    if (v15)
      MEMORY[0x22E2B7674](v15, 0x1000C80E0EAB150);
  }
  v16 = 0;
  *(_QWORD *)(a6 + 144) = v14;
  *(_QWORD *)(a6 + 152) = a1;
  *(_BYTE *)(a6 + 160) = v12;
  if (a3)
    v17 = a4;
  else
    v17 = 0;
  if (a3 && a5)
  {
    v17 = (void *)operator new[]();
    memcpy(v17, a4, 12 * a3);
    v16 = 1;
  }
  if (*(_BYTE *)(a6 + 184))
  {
    v18 = *(_QWORD *)(a6 + 168);
    if (v18)
      MEMORY[0x22E2B7674](v18, 0x1000C8052888210);
  }
  *(_QWORD *)(a6 + 168) = v17;
  *(_QWORD *)(a6 + 176) = v13;
  *(_BYTE *)(a6 + 184) = v16;
  *(_QWORD *)(a6 + 128) = *(_QWORD *)(a6 + 120);
  v19 = a6;
  if (!a3)
    goto LABEL_32;
LABEL_21:
  v20 = operator new[]();
  v60 = v20;
  v61 = a3;
  v62 = 1;
  v21 = operator new[]();
  v23 = vdupq_n_s64(0x7FF0000000000000uLL);
  v24 = vdupq_n_s64(0xFFF0000000000000);
  v25 = (_OWORD *)v21;
  do
  {
    *(_QWORD *)&v22 = 0x7FF0000000000000;
    *v25 = v23;
    v25[1] = v22;
    *(_QWORD *)&v22 = 0xFFF0000000000000;
    v25[2] = v24;
    v25[3] = v22;
    v25 += 4;
  }
  while (v25 != (_OWORD *)(v21 + (a3 << 6)));
  v26 = 0;
  v57 = v21;
  v58 = a3;
  v59 = 1;
  v27 = vdupq_n_s64(0x7FF0000000000000uLL);
  __asm { FMOV            V1.2D, #3.0 }
  v33 = vdupq_n_s64(0xFFF0000000000000);
  do
  {
    v34 = 0;
    v35 = &a4[12 * v26];
    v36 = (float64x2_t *)&a2[32 * *(unsigned int *)v35];
    v37 = *v36;
    v38 = v36[1];
    v39 = (float64x2_t *)&a2[32 * *((unsigned int *)v35 + 1)];
    v40 = (float64x2_t *)&a2[32 * *((unsigned int *)v35 + 2)];
    v41 = *v39;
    v42 = v39[1];
    v43 = v39[1].f64[0];
    v44 = *v40;
    v45 = v40[1];
    v46 = v40[1].f64[0];
    v67[0] = vminnmq_f64(vminnmq_f64(v37, *v39), *v40);
    v67[1] = vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v38.f64[0], (float64x2_t)*(unint64_t *)&v43), (float64x2_t)*(unint64_t *)&v46);
    v67[2] = vmaxnmq_f64(vmaxnmq_f64(v37, v41), v44);
    v67[3] = vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)*(unint64_t *)&v38.f64[0], (float64x2_t)*(unint64_t *)&v43), (float64x2_t)*(unint64_t *)&v46);
    v47.f64[0] = INFINITY;
    v48.f64[0] = -INFINITY;
    v49 = (float64x2_t)v33;
    v50 = (float64x2_t)v27;
    do
    {
      v51 = (float64x2_t)v67[v34];
      v52 = v67[v34 + 1];
      v50 = vminnmq_f64(v51, v50);
      v47 = vminnmq_f64((float64x2_t)(unint64_t)v52, (float64x2_t)*(unint64_t *)&v47.f64[0]);
      v49 = vmaxnmq_f64(v51, v49);
      v48 = vmaxnmq_f64((float64x2_t)(unint64_t)v52, (float64x2_t)*(unint64_t *)&v48.f64[0]);
      v34 += 2;
    }
    while (v34 != 4);
    v53 = (float64x2_t *)(v21 + (v26 << 6));
    *v53 = v50;
    v53[1] = v47;
    v53[2] = v49;
    v53[3] = v48;
    v54 = (float64x2_t *)(v20 + 32 * v26);
    *v54 = vdivq_f64(vaddq_f64(vaddq_f64(v37, v41), v44), _Q1);
    v54[1] = vdivq_f64(vaddq_f64(vaddq_f64(v38, v42), v45), _Q1);
    ++v26;
  }
  while (v26 != a3);
  v55 = 1;
  if (!a6)
    goto LABEL_33;
LABEL_28:
  geom::bvh<double,(unsigned char)3>::reset(v19 + 16, (uint64_t)&v60, (uint64_t)&v57);
  if (v59 && v57)
    MEMORY[0x22E2B7674](v57, 0x1000C80FA0F61DDLL);
LABEL_34:
  if (v62 && v60)
    MEMORY[0x22E2B7674](v60, 0x1000C80E0EAB150);
  return v19;
}

void sub_2288C3478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2B7674](v1, 0x1000C80E0EAB150);
  _Unwind_Resume(a1);
}

void geom::`anonymous namespace'::build_soa_triangle_mesh_bvh_data<double>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;

  std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::resize((uint64_t)a4, (unint64_t)(a3[1] + 3) >> 2);
  if (a3[1])
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = 0;
      v11 = 3 * *(_DWORD *)(*a3 + 4 * v8);
      v12 = (_QWORD *)(*a4 + ((8 * (v9 & 3)) | (288 * ((unint64_t)v9 >> 2))) + 32);
      do
      {
        v13 = (_QWORD *)(*a1 + 32 * *(unsigned int *)(*a2 + 4 * (v11 + v10)));
        *(v12 - 4) = *v13;
        *v12 = v13[1];
        v12[4] = v13[2];
        ++v10;
        v12 += 12;
      }
      while (v10 != 3);
      v8 = ++v9;
    }
    while (a3[1] > (unint64_t)v9);
  }
}

void std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 288 * a2;
  }
}

void std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = 288 * ((288 * a2 - 288) / 0x120) + 288;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - (_BYTE *)*a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0xE38E38E38E38E3)
      abort();
    v10 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x71C71C71C71C71)
      v11 = 0xE38E38E38E38E3;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[288 * v8];
    v15 = &v12[288 * v11];
    v16 = 288 * ((288 * a2 - 288) / 0x120) + 288;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v18 -= 288;
        v14 -= 288;
        memcpy(v14, v18, 0x120uLL);
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(288 * a2);
}

void std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148DF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148DF0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148E70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148E70;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type `anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148EF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148EF0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F148F70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F148F70;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void `anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F148FF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F148FF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::operator()(uint64_t a1, unsigned int *a2, double *a3, uint64_t a4)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, double, double))(a1 + 8))(*a2, **(_QWORD **)(a1 + 16), a4, *a3, a3[1]);
}

uint64_t std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::target_type()
{
}

void std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F149080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F149080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, uint64_t a4)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, __n128, __n128))(a1 + 8))(*a2, **(_QWORD **)(a1 + 16), a4, *a3, a3[1]);
}

uint64_t std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::target_type()
{
}

void std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F149110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F149110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, uint64_t a4)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, __n128, __n128))(a1 + 8))(*a2, **(_QWORD **)(a1 + 16), a4, *a3, a3[1]);
}

uint64_t std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target_type()
{
}

void std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1491A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1491A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::operator()(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, _OWORD *, _QWORD);
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = **(uint64_t (***)(uint64_t, _OWORD *, _QWORD))(a1 + 8);
  v6 = a3[1];
  v9[0] = *a3;
  v9[1] = v6;
  v7 = a3[3];
  v9[2] = a3[2];
  v9[3] = v7;
  return v5(v3, v9, *v4);
}

uint64_t std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target_type()
{
}

void std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F149230;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F149230;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::operator()(uint64_t a1, unsigned int *a2, float32x4_t *a3, float *a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float v26;
  uint64_t result;
  float v28;
  int32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  BOOL v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float *v40;
  unsigned int *v41;
  float32_t v42;
  float32_t v43;

  v4 = *a2;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 168);
  v7 = *(_QWORD *)(v5 + 144);
  v8 = *(float32x4_t *)(v7 + 16 * *(unsigned int *)(v6 + 12 * *a2));
  v9 = *(float32x4_t *)(v7 + 16 * *(unsigned int *)(v6 + 4 * (3 * *a2 + 1)));
  v10 = *(float32x4_t *)(v7 + 16 * *(unsigned int *)(v6 + 4 * (3 * *a2 + 2)));
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
  v14 = vaddq_f32(vmlaq_f32(vmulq_f32(v11, vnegq_f32(v10)), v8, v13), vaddq_f32(vmlaq_f32(vmulq_f32(v12, vnegq_f32(v8)), v9, v11), vmlaq_f32(vmulq_f32(v13, vnegq_f32(v9)), v10, v12)));
  v15 = vmulq_f32(v14, v14);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), v15)).f32[0]) <= 1.0e-10)goto LABEL_7;
  v16 = a3[1];
  v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
  v18 = vmulq_f32(v16, v17);
  v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1);
  v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, v19));
  if (fabsf(v20.f32[0]) <= 0.00001)
    goto LABEL_7;
  v19.i32[0] = 0;
  v21 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v20, v19), 0), (int8x16_t)vnegq_f32(v17), (int8x16_t)v17);
  v22 = v20.f32[0] <= 0.0 ? -v20.f32[0] : v20.f32[0];
  v23 = vsubq_f32(*a3, v8);
  v24 = 1.0 / v22;
  v25 = vmulq_f32(v23, v21);
  v26 = (float)(1.0 / v22)
      * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0];
  *a4 = v26;
  if (v26 == 0.0)
    goto LABEL_7;
  v28 = fabsf(v26);
  if (v28 != INFINITY)
  {
    if ((float)((float)((float)(v28 + 1.0) * 0.00000011921) + 0.0) < v26)
      goto LABEL_12;
LABEL_7:
    result = 0;
    *a4 = INFINITY;
    return result;
  }
  if (v26 <= 0.0)
    goto LABEL_7;
LABEL_12:
  v29 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), vnegq_f32(v23)), v16, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL));
  v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL);
  v35 = v20.f32[0] <= 0.0;
  v31 = 1.0;
  if (!v35)
    v31 = -1.0;
  v32 = vmulq_n_f32(v30, v31);
  v33 = vmulq_f32(vsubq_f32(v10, v8), v32);
  v34 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)));
  v35 = v34.f32[0] >= 0.0 && v34.f32[0] <= v22;
  if (!v35)
    goto LABEL_7;
  v36 = vmulq_f32(vsubq_f32(v8, v9), v32);
  v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1)));
  LODWORD(v38) = vaddq_f32(v34, v37).u32[0];
  if (v37.f32[0] < 0.0 || v38 > v22)
    goto LABEL_7;
  v40 = *(float **)(a1 + 16);
  if (v26 >= *v40)
  {
    if (v26 != *v40)
      return 1;
    v41 = *(unsigned int **)(a1 + 24);
    if (*v41 <= v4)
      return 1;
  }
  else
  {
    v41 = *(unsigned int **)(a1 + 24);
  }
  v42 = v24 * v34.f32[0];
  v43 = v24 * v37.f32[0];
  v34.f32[0] = (float)(1.0 - (float)(v24 * v34.f32[0])) - v43;
  v34.f32[1] = v42;
  v34.f32[2] = v43;
  *v40 = v26;
  *v41 = v4;
  *(float32x4_t *)*(_QWORD *)(a1 + 32) = v34;
  return 1;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target_type()
{
}

void std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24F1492B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1492B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::operator()(uint64_t a1, unsigned int *a2, float64x2_t *a3, double *a4)
{
  float64x2_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t *v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  double v38;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  BOOL v47;
  float64x2_t v48;
  BOOL v49;
  uint64_t result;
  double *v51;
  unsigned int *v52;
  __int128 v53;
  _OWORD *v54;

  v5 = *a2;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 168);
  v8 = *(_QWORD *)(v6 + 144);
  v9 = (float64x2_t *)(v8 + 32 * *(unsigned int *)(v7 + 12 * *a2));
  v10 = *(unsigned int *)(v7 + 4 * (3 * *a2 + 2));
  v11 = (float64x2_t *)(v8 + 32 * *(unsigned int *)(v7 + 4 * (3 * *a2 + 1)));
  v12 = (float64x2_t *)(v8 + 32 * v10);
  v14 = *v9;
  v13 = v9[1];
  v16 = *v11;
  v15 = v11[1];
  v18 = *v12;
  v17 = v12[1];
  v19.f64[0] = v9[1].f64[0];
  v19.f64[1] = v9->f64[0];
  v20.f64[0] = v11[1].f64[0];
  v20.f64[1] = v11->f64[0];
  v21.f64[0] = v12[1].f64[0];
  v21.f64[1] = v12->f64[0];
  v22 = vaddq_f64(vmlaq_f64(vmulq_f64(v19, vnegq_f64(*v12)), *v9, v21), vaddq_f64(vmlaq_f64(vmulq_f64(v20, vnegq_f64(*v9)), *v11, v19), vmlaq_f64(vmulq_f64(v21, vnegq_f64(*v11)), *v12, v20)));
  v23 = vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v17), *v9, 1), v13, *v12, 1), vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v13), *v11, 1), v15, *v9, 1), vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v15), *v12, 1), v17, *v11, 1)));
  v24 = vmulq_f64(v22, v22);
  if (fabs(v24.f64[1] + vmulq_f64(v23, v23).f64[0] + v24.f64[0]) <= 1.0e-12)
    goto LABEL_22;
  v26 = a3[2];
  v25 = a3[3];
  v23.f64[1] = v22.f64[0];
  v27 = vmulq_f64(v26, v23);
  v27.f64[0] = vmulq_laneq_f64(v25, v22, 1).f64[0] + vaddvq_f64(v27);
  if (fabs(v27.f64[0]) <= 0.000001)
    goto LABEL_22;
  v28 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v22, 1);
  v29 = -v27.f64[0];
  v4.f64[0] = 0.0;
  v30 = (int8x16_t)vcgtq_f64(v27, v4);
  v31 = vandq_s8((int8x16_t)vnegq_f64(v28), v30);
  v32 = (int8x16_t)vdupq_lane_s64(v30.i64[0], 0);
  v33 = (float64x2_t)vorrq_s8(v31, vbicq_s8((int8x16_t)v28, v32));
  v34 = (float64x2_t)vbslq_s8(v32, (int8x16_t)vnegq_f64(v23), (int8x16_t)v23);
  if (v27.f64[0] > 0.0)
    v29 = v27.f64[0];
  v35 = vsubq_f64(*a3, v14);
  v36 = vsubq_f64(a3[1], v13);
  v37 = 1.0 / v29;
  v38 = 1.0 / v29 * (vmulq_f64(v36, v33).f64[0] + vaddvq_f64(vmulq_f64(v35, v34)));
  *a4 = v38;
  if (v38 == 0.0 || v38 <= 2.22044605e-16)
    goto LABEL_22;
  v40.f64[0] = v25.f64[0];
  v40.f64[1] = v26.f64[0];
  v41 = vnegq_f64(v36);
  v36.f64[1] = v35.f64[0];
  v42 = vmlaq_f64(vmulq_f64(v40, vnegq_f64(v35)), v26, v36);
  *(_QWORD *)&v43.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v41, v26, 1), v25, v35, 1);
  v43.f64[1] = v42.f64[0];
  v26.f64[0] = v27.f64[0] <= 0.0 ? 1.0 : -1.0;
  v44 = vmulq_n_f64(v43, v26.f64[0]);
  v45 = vmulq_laneq_f64(v26, v42, 1);
  v46 = vmulq_f64(vsubq_f64(v17, v13), v45).f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v18, v14), v44));
  v47 = v46 >= 0.0 && v46 <= v29;
  if (!v47
    || ((v48 = vmulq_f64(vsubq_f64(v13, v15), v45),
         v48.f64[0] = v48.f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v14, v16), v44)),
         v48.f64[0] >= 0.0)
      ? (v49 = v46 + v48.f64[0] <= v29)
      : (v49 = 0),
        !v49))
  {
LABEL_22:
    result = 0;
    *a4 = INFINITY;
    return result;
  }
  v51 = *(double **)(a1 + 16);
  if (v38 >= *v51)
  {
    if (v38 != *v51)
      return 1;
    v52 = *(unsigned int **)(a1 + 24);
    if (*v52 <= v5)
      return 1;
  }
  else
  {
    v52 = *(unsigned int **)(a1 + 24);
  }
  v48.f64[0] = v37 * v48.f64[0];
  *(double *)&v53 = 1.0 - v37 * v46 - v48.f64[0];
  *((double *)&v53 + 1) = v37 * v46;
  *v51 = v38;
  *v52 = v5;
  v54 = *(_OWORD **)(a1 + 32);
  *v54 = v53;
  v54[1] = v48;
  return 1;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target_type()
{
}

void _ZNSt3__16vectorIZNK4geom3bvhIfLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIfEEEEDv3_fT_S8_RfRjE5stateNS_9allocatorISC_EEE7reserveEm(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
    v8 = v7;
    if (v5 != v2)
    {
      v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[8 * a2];
    if (v2)
      operator delete(v2);
  }
}

void _ZNSt3__16vectorIZNK4geom3bvhIdLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIdEEEEDv3_dT_S8_RdRjE5stateNS_9allocatorISC_EEE7reserveEm(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
    v8 = v7;
    if (v5 != v2)
    {
      v9 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v8 = v9 - 16;
        *((_OWORD *)v9 - 1) = *((_OWORD *)v5 - 1);
        v5 -= 16;
        v9 -= 16;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[16 * a2];
    if (v2)
      operator delete(v2);
  }
}

uint64_t OUTLINED_FUNCTION_0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD *))(*v1 + 8 * a1))(v1);
}

uint64_t OUTLINED_FUNCTION_1@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

uint64_t geom::intersect_lines_point_direction<float>(float *a1, float *a2, float32x2_t a3, double a4, float32x2_t a5, double a6, double a7, double a8)
{
  float32x2_t v8;
  float v9;
  float32x2_t v10;
  float v11;
  float v12;
  float32x2_t v14;
  float v15;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float32x2_t v22;
  uint64_t result;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float32x2_t v27;
  float v28;
  float32x2_t v29;
  float32x2_t v30;

  v8 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  v9 = vaddv_f32(v8);
  v10 = vmul_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a6);
  v11 = vaddv_f32(v10);
  *(float *)&a8 = fabsf(v9);
  v12 = fabsf(v11);
  if (*(float *)&a8 > 0.00000011921 || v12 > 0.00000011921)
  {
    v14 = vsub_f32(a5, a3);
    if (*(float *)&a8 > 0.00000011921)
      v15 = v9;
    else
      v15 = v11;
    if (*(float *)&a8 > 0.00000011921 && v12 > 0.00000011921)
    {
      v24 = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1));
      v25 = vadd_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1));
      v26 = vmlas_n_f32((float)-*((float *)&a4 + 1) * *(float *)&a6, *((float *)&a6 + 1), *(float *)&a4);
      if (fabsf(v26 * v26) <= (float)(1.0e-10 * vmul_f32(v24, v25).f32[0]))
      {
        v27 = vmul_f32(v14, v14);
        v28 = vmlas_n_f32(-(float)(v14.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v14.f32[0]);
        if (fabsf(v28 * v28) > (float)(1.0e-10
                                      * vmul_f32(v24, vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1))).f32[0]))
          return 0;
        if (a1)
        {
          v29 = vmul_f32(v14, *(float32x2_t *)&a4);
          *(_DWORD *)a1 = vdiv_f32(vadd_f32(v29, (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1)), v24).u32[0];
        }
        if (!a2)
          return 2;
        v30 = vmul_f32(vneg_f32(v14), *(float32x2_t *)&a6);
        LODWORD(v20) = vdiv_f32(vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1)), v25).u32[0];
        result = 2;
LABEL_39:
        *a2 = v20;
        return result;
      }
      if (a1)
        *a1 = vmlas_n_f32(-(float)(v14.f32[1] * *(float *)&a6), *((float *)&a6 + 1), v14.f32[0]) / v26;
      if (a2)
      {
        v20 = vmlas_n_f32(-(float)(v14.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v14.f32[0]) / v26;
LABEL_29:
        result = 1;
        goto LABEL_39;
      }
    }
    else
    {
      v17 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), *(int8x8_t *)&a6, *(int8x8_t *)&a4);
      v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)vneg_f32(v14), (int8x8_t)v14);
      v19 = vmlas_n_f32((float)-v17.f32[1] * v18.f32[0], v18.f32[1], v17.f32[0]);
      if ((float)(v19 * v19) > (float)(v15 * 1.0e-10))
        return 0;
      v20 = vaddv_f32(vmul_f32(v17, v18)) / v15;
      if (a1)
      {
        v21 = 0.0;
        if (*(float *)&a8 > 0.00000011921)
          v21 = v20;
        *a1 = v21;
      }
      if (a2)
      {
        if (v12 <= 0.00000011921)
          v20 = 0.0;
        goto LABEL_29;
      }
    }
    return 1;
  }
  v22 = vsub_f32(a3, a5);
  if (sqrtf(vaddv_f32(vmul_f32(v22, v22))) > 0.00001)
    return 0;
  if (a1)
    *a1 = 0.0;
  v20 = 0.0;
  result = 1;
  if (a2)
    goto LABEL_39;
  return result;
}

uint64_t geom::intersect_lines_point_direction<double>(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  double v12;
  double v13;
  float64x2_t v15;
  double v16;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  double v22;
  float64x2_t v23;
  uint64_t result;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;

  v9 = vmulq_f64(a4, a4);
  v10 = vaddvq_f64(v9);
  v11 = vmulq_f64(a6, a6);
  v12 = vaddvq_f64(v11);
  a8.f64[0] = fabs(v10);
  v13 = fabs(v12);
  if (a8.f64[0] > 2.22044605e-16 || v13 > 2.22044605e-16)
  {
    v15 = vsubq_f64(a5, a3);
    v8.f64[0] = 2.22044605e-16;
    if (a8.f64[0] > 2.22044605e-16)
      v16 = v10;
    else
      v16 = v12;
    if (a8.f64[0] > 2.22044605e-16 && v13 > 2.22044605e-16)
    {
      v25 = vaddq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1));
      v26 = vaddq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1));
      v27 = vmlad_n_f64(-a4.f64[1] * a6.f64[0], a6.f64[1], a4.f64[0]);
      if (fabs(v27 * v27) <= 1.0e-12 * vmulq_f64(v25, v26).f64[0])
      {
        v28 = vmulq_f64(v15, v15);
        v29 = vmlad_n_f64(-(v15.f64[1] * a4.f64[0]), a4.f64[1], v15.f64[0]);
        if (fabs(v29 * v29) > 1.0e-12
                             * vmulq_f64(v25, vaddq_f64(v28, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1))).f64[0])
          return 0;
        if (a1)
        {
          v30 = vmulq_f64(v15, a4);
          *(_QWORD *)a1 = *(_OWORD *)&vdivq_f64(vaddq_f64(v30, (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1)), v25);
        }
        if (!a2)
          return 2;
        v31 = vmulq_f64(vnegq_f64(v15), a6);
        *(_QWORD *)&v21 = *(_OWORD *)&vdivq_f64(vaddq_f64(v31, (float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1)), v26);
        result = 2;
LABEL_39:
        *a2 = v21;
        return result;
      }
      if (a1)
        *a1 = vmlad_n_f64(-(v15.f64[1] * a6.f64[0]), a6.f64[1], v15.f64[0]) / v27;
      if (a2)
      {
        v21 = vmlad_n_f64(-(v15.f64[1] * a4.f64[0]), a4.f64[1], v15.f64[0]) / v27;
LABEL_29:
        result = 1;
        goto LABEL_39;
      }
    }
    else
    {
      v18 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v8, a8).i64[0], 0), (int8x16_t)a6, (int8x16_t)a4);
      a6.f64[0] = 2.22044605e-16;
      v19 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(a6, a8).i64[0], 0), (int8x16_t)vnegq_f64(v15), (int8x16_t)v15);
      v20 = vmlad_n_f64(-v18.f64[1] * v19.f64[0], v19.f64[1], v18.f64[0]);
      if (v20 * v20 > v16 * 1.0e-12)
        return 0;
      v21 = vaddvq_f64(vmulq_f64(v18, v19)) / v16;
      if (a1)
      {
        v22 = 0.0;
        if (a8.f64[0] > 2.22044605e-16)
          v22 = v21;
        *a1 = v22;
      }
      if (a2)
      {
        if (v13 <= 2.22044605e-16)
          v21 = 0.0;
        goto LABEL_29;
      }
    }
    return 1;
  }
  v23 = vsubq_f64(a3, a5);
  if (sqrt(vaddvq_f64(vmulq_f64(v23, v23))) > 0.000001)
    return 0;
  if (a1)
    *a1 = 0.0;
  v21 = 0.0;
  result = 1;
  if (a2)
    goto LABEL_39;
  return result;
}

uint64_t geom::intersect_ray_line<float>(uint64_t a1, int a2, float *a3, float32x2_t a4, double a5, double a6, double a7, double a8, double a9)
{
  _BOOL8 v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float v16;
  float v17;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;
  float v29;
  unsigned int v30;
  float v31;
  float32x2_t v32;
  float v33;
  float32x2_t v34;
  uint64_t result;
  uint64_t v36;
  float32x2_t v37;

  if ((float)(*(float *)&a2 * *(float *)&a2) <= (float)(vaddv_f32(vmul_f32((float32x2_t)a1, (float32x2_t)a1)) * 1.0e-10))
  {
    v11 = 0;
  }
  else
  {
    v9 = fabsf(*((float *)&a1 + 1)) > COERCE_FLOAT(a1 & 0x7FFFFFFF);
    v36 = a1;
    v10 = (float)-*(float *)&a2 / *(float *)((unint64_t)&v36 | (4 * v9));
    v37 = 0;
    *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * v9)) = v10;
    v11 = v37;
  }
  *(float *)&a9 = -*((float *)&a1 + 1);
  v12 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a9, (int32x2_t)a1);
  v13 = vmul_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a5);
  v14 = vaddv_f32(v13);
  v15 = vmul_f32(v12, v12);
  v16 = vaddv_f32(v15);
  *(float *)&a9 = fabsf(v14);
  v17 = fabsf(v16);
  if (*(float *)&a9 <= 0.00000011921 && v17 <= 0.00000011921)
  {
    v28 = vsub_f32(a4, v11);
    v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
    v27 = 0.0;
    if (v29 > 0.00001)
    {
      v30 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v19 = vsub_f32(v11, a4);
  v20 = vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1));
  if (*(float *)&a9 <= 0.00000011921 || v17 <= 0.00000011921)
  {
    v22 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a9), 0), (int8x8_t)v12, *(int8x8_t *)&a5);
    v23 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a9), 0), (int8x8_t)vneg_f32(v19), (int8x8_t)v19);
    if (*(float *)&a9 > 0.00000011921)
      v24 = v14;
    else
      v24 = v16;
    v25 = vmlas_n_f32((float)-v22.f32[1] * v23.f32[0], v23.f32[1], v22.f32[0]);
    if ((float)(v25 * v25) <= (float)(v24 * 1.0e-10))
    {
      v26 = vmul_f32(v22, v23);
      LODWORD(v27) = vdiv_f32(vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1)), v20).u32[0];
      if (*(float *)&a9 <= 0.00000011921)
        v27 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v30 = 0;
    v27 = 0.0;
    goto LABEL_28;
  }
  v31 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), *(float32x2_t *)&a5, 1), *(float *)&a1, *(float *)&a5);
  if (fabsf(v31 * v31) > (float)(1.0e-10
                                * vmul_f32(v20, vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1))).f32[0]))
  {
    v27 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v19, 1), *(float *)&a1, v19.f32[0]) / v31;
LABEL_24:
    v30 = 1;
    goto LABEL_28;
  }
  v32 = vmul_f32(v19, v19);
  v33 = vmlas_n_f32(-(float)(v19.f32[1] * *(float *)&a5), *((float *)&a5 + 1), v19.f32[0]);
  if (fabsf(v33 * v33) > (float)(1.0e-10
                                * vmul_f32(v20, vadd_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1))).f32[0]))
    goto LABEL_26;
  v34 = vmul_f32(*(float32x2_t *)&a5, v19);
  LODWORD(v27) = vdiv_f32(vadd_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)), v20).u32[0];
  v30 = 2;
LABEL_28:
  if (v27 >= 0.0)
    result = v30;
  else
    result = 0;
  if (a3)
  {
    if (!(_DWORD)result)
      v27 = INFINITY;
    *a3 = v27;
  }
  return result;
}

uint64_t geom::intersect_ray_line<double>(float64x2_t *a1, double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6, float64x2_t a7, double a8, int64x2_t a9)
{
  double v9;
  float64x2_t v10;
  double v11;
  _BOOL8 v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  double v19;
  double v20;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v31;
  double v32;
  unsigned int v33;
  double v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  uint64_t result;
  float64x2_t v39;
  float64x2_t v40;

  v9 = a1[1].f64[0];
  v10 = *a1;
  v11 = a1->f64[1];
  if (v9 * v9 <= vaddvq_f64(vmulq_f64(v10, v10)) * 1.0e-12)
  {
    v14 = 0uLL;
  }
  else
  {
    v12 = fabs(v10.f64[1]) > fabs(v10.f64[0]);
    v39 = *a1;
    v13 = -v9 / *(double *)((unint64_t)&v39 | (8 * v12));
    a9.i8[8] = 0;
    a9.i8[9] = 0;
    a9.i8[10] = 0;
    a9.i8[11] = 0;
    a9.i8[12] = 0;
    a9.i8[13] = 0;
    a9.i8[14] = 0;
    a9.i8[15] = 0;
    v40 = 0u;
    *(double *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF7 | (8 * v12)) = v13;
    v14 = v40;
  }
  *(double *)a9.i64 = -v11;
  v15 = (float64x2_t)vzip1q_s64(a9, (int64x2_t)v10);
  v16 = vmulq_f64(a4, a4);
  v17 = vaddvq_f64(v16);
  v18 = vmulq_f64(v15, v15);
  v19 = vaddvq_f64(v18);
  *(double *)a9.i64 = fabs(v17);
  v20 = fabs(v19);
  if (*(double *)a9.i64 <= 2.22044605e-16 && v20 <= 2.22044605e-16)
  {
    v31 = vsubq_f64(a3, v14);
    v32 = sqrt(vaddvq_f64(vmulq_f64(v31, v31)));
    v30 = 0.0;
    if (v32 > 0.000001)
    {
      v33 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v22 = vsubq_f64(v14, a3);
  v23 = vaddq_f64(v16, (float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1));
  v16.f64[0] = 2.22044605e-16;
  if (*(double *)a9.i64 <= 2.22044605e-16 || v20 <= 2.22044605e-16)
  {
    v25 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v16, (float64x2_t)a9).i64[0], 0), (int8x16_t)v15, (int8x16_t)a4);
    a7.f64[0] = 2.22044605e-16;
    v26 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(a7, (float64x2_t)a9).i64[0], 0), (int8x16_t)vnegq_f64(v22), (int8x16_t)v22);
    if (*(double *)a9.i64 > 2.22044605e-16)
      v27 = v17;
    else
      v27 = v19;
    v28 = vmlad_n_f64(-v25.f64[1] * v26.f64[0], v26.f64[1], v25.f64[0]);
    if (v28 * v28 <= v27 * 1.0e-12)
    {
      v29 = vmulq_f64(v25, v26);
      *(_QWORD *)&v30 = *(_OWORD *)&vdivq_f64(vaddq_f64(v29, (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1)), v23);
      if (*(double *)a9.i64 <= 2.22044605e-16)
        v30 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v33 = 0;
    v30 = 0.0;
    goto LABEL_28;
  }
  v34 = vmlad_n_f64(vmuld_lane_f64(v11, a4, 1), v10.f64[0], a4.f64[0]);
  if (fabs(v34 * v34) > 1.0e-12
                       * vmulq_f64(v23, vaddq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1))).f64[0])
  {
    v30 = vmlad_n_f64(vmuld_lane_f64(v11, v22, 1), v10.f64[0], v22.f64[0]) / v34;
LABEL_24:
    v33 = 1;
    goto LABEL_28;
  }
  v35 = vmulq_f64(v22, v22);
  v36 = vmlad_n_f64(-(v22.f64[1] * a4.f64[0]), a4.f64[1], v22.f64[0]);
  if (fabs(v36 * v36) > 1.0e-12
                       * vmulq_f64(v23, vaddq_f64(v35, (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1))).f64[0])
    goto LABEL_26;
  v37 = vmulq_f64(a4, v22);
  *(_QWORD *)&v30 = *(_OWORD *)&vdivq_f64(vaddq_f64(v37, (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)), v23);
  v33 = 2;
LABEL_28:
  if (v30 >= 0.0)
    result = v33;
  else
    result = 0;
  if (a2)
  {
    if (!(_DWORD)result)
      v30 = INFINITY;
    *a2 = v30;
  }
  return result;
}

uint64_t geom::intersect_ray_ray<float>(float *a1, float *a2, float32x2_t a3, double a4, float32x2_t a5, double a6)
{
  int32x2_t v6;
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float v14;
  unsigned int v15;
  float32x2_t v16;
  unsigned int v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  int32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float v28;
  BOOL v29;
  int32x2_t v30;

  v6 = (int32x2_t)vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  v7 = (int32x2_t)vmul_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a6);
  v8 = vadd_f32((float32x2_t)vzip1_s32(v7, v6), (float32x2_t)vzip2_s32(v7, v6));
  v9 = vcge_f32((float32x2_t)0x3400000034000000, vabs_f32(v8));
  if ((v9.i32[1] & v9.i32[0] & 1) != 0)
  {
    v10 = vsub_f32(a3, a5);
    v11 = 0.0;
    v29 = sqrtf(vaddv_f32(vmul_f32(v10, v10))) > 0.00001;
    v12 = 0.0;
    if (!v29)
      goto LABEL_24;
LABEL_28:
    v22 = 0;
    v12 = INFINITY;
    v11 = INFINITY;
    goto LABEL_29;
  }
  v13 = vsub_f32(a5, a3);
  if ((v9.i8[4] & 1) != 0)
    v14 = v8.f32[0];
  else
    v14 = v8.f32[1];
  if ((v9.i8[4] & 1) != 0)
    v15 = -1;
  else
    v15 = 0;
  if (((v9.i8[4] | v9.i8[0]) & 1) != 0)
  {
    v16 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v15), *(int8x8_t *)&a6, *(int8x8_t *)&a4);
    if ((v9.i8[4] & 1) != 0)
      v17 = -1;
    else
      v17 = 0;
    v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v17), (int8x8_t)vneg_f32(v13), (int8x8_t)v13);
    v19 = vmlas_n_f32((float)-v16.f32[1] * v18.f32[0], v18.f32[1], v16.f32[0]);
    if ((float)(v19 * v19) > (float)(v14 * 1.0e-10))
      goto LABEL_28;
    v12 = vaddv_f32(vmul_f32(v16, v18)) / v14;
    if ((v9.i8[4] & 1) != 0)
      v11 = 0.0;
    else
      v11 = v12;
    if ((v9.i8[0] & 1) != 0)
      v12 = 0.0;
LABEL_24:
    if (v11 >= 0.0 && v12 >= 0.0)
    {
      v22 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  v20 = vmlas_n_f32((float)-*((float *)&a4 + 1) * *(float *)&a6, *((float *)&a6 + 1), *(float *)&a4);
  v21 = (float)(v8.f32[1] * v8.f32[0]) * 1.0e-10;
  if (fabsf(v20 * v20) > v21)
  {
    v11 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a6), *((float *)&a6 + 1), v13.f32[0]) / v20;
    v12 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v13.f32[0]) / v20;
    goto LABEL_24;
  }
  v23 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v13.f32[0]);
  if (fabsf(v23 * v23) > (float)((float)(v8.f32[1] * vaddv_f32(vmul_f32(v13, v13))) * 1.0e-10))
    goto LABEL_28;
  v25 = (int32x2_t)vmul_f32(*(float32x2_t *)&a4, v13);
  v26 = (int32x2_t)vmul_f32(*(float32x2_t *)&a6, vneg_f32(v13));
  v27 = vdiv_f32(vadd_f32((float32x2_t)vzip1_s32(v26, v25), (float32x2_t)vzip2_s32(v26, v25)), v8);
  v28 = fabsf(vmul_f32(v27, v27).f32[0]);
  v12 = 0.0;
  v29 = fabsf(vmuls_lane_f32(v27.f32[1], v27, 1)) > v21 || v28 > v21;
  if (!v29)
  {
    v22 = 1;
LABEL_43:
    v11 = 0.0;
    goto LABEL_29;
  }
  if (v27.f32[1] < 0.0 && v27.f32[0] < 0.0)
    goto LABEL_28;
  v30 = vcgez_f32(v27);
  if ((v30.i32[1] & v30.i32[0] & 1) != 0)
  {
    v22 = 2;
    goto LABEL_43;
  }
  if (v27.f32[1] >= 0.0)
    v11 = v27.f32[1];
  else
    v11 = 0.0;
  if (v27.f32[0] >= 0.0)
    v12 = v27.f32[0];
  v22 = 2;
LABEL_29:
  if (a1)
    *a1 = v11;
  if (a2)
    *a2 = v12;
  return v22;
}

uint64_t geom::intersect_ray_ray<double>(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  int64x2_t v6;
  int64x2_t v7;
  float64x2_t v8;
  int32x2_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  float64x2_t v13;
  double v14;
  unint64_t v15;
  float64x2_t v16;
  unint64_t v17;
  float64x2_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  int64x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  double v28;
  BOOL v29;
  int32x2_t v30;

  v6 = (int64x2_t)vmulq_f64(a4, a4);
  v7 = (int64x2_t)vmulq_f64(a6, a6);
  v8 = vaddq_f64((float64x2_t)vzip1q_s64(v7, v6), (float64x2_t)vzip2q_s64(v7, v6));
  v9 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), vabsq_f64(v8)));
  if ((v9.i32[1] & v9.i32[0] & 1) != 0)
  {
    v10 = vsubq_f64(a3, a5);
    v11 = 0.0;
    v29 = sqrt(vaddvq_f64(vmulq_f64(v10, v10))) > 0.000001;
    v12 = 0.0;
    if (!v29)
      goto LABEL_24;
LABEL_28:
    v22 = 0;
    v12 = INFINITY;
    v11 = INFINITY;
    goto LABEL_29;
  }
  v13 = vsubq_f64(a5, a3);
  if ((v9.i8[4] & 1) != 0)
    v14 = v8.f64[0];
  else
    v14 = v8.f64[1];
  if ((v9.i8[4] & 1) != 0)
    v15 = -1;
  else
    v15 = 0;
  if (((v9.i8[4] | v9.i8[0]) & 1) != 0)
  {
    v16 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v15), (int8x16_t)a6, (int8x16_t)a4);
    if ((v9.i8[4] & 1) != 0)
      v17 = -1;
    else
      v17 = 0;
    v18 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v17), (int8x16_t)vnegq_f64(v13), (int8x16_t)v13);
    v19 = vmlad_n_f64(-v16.f64[1] * v18.f64[0], v18.f64[1], v16.f64[0]);
    if (v19 * v19 > v14 * 1.0e-12)
      goto LABEL_28;
    v12 = vaddvq_f64(vmulq_f64(v16, v18)) / v14;
    if ((v9.i8[4] & 1) != 0)
      v11 = 0.0;
    else
      v11 = v12;
    if ((v9.i8[0] & 1) != 0)
      v12 = 0.0;
LABEL_24:
    if (v11 >= 0.0 && v12 >= 0.0)
    {
      v22 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  v20 = vmlad_n_f64(-a4.f64[1] * a6.f64[0], a6.f64[1], a4.f64[0]);
  v21 = v8.f64[1] * v8.f64[0] * 1.0e-12;
  if (fabs(v20 * v20) > v21)
  {
    v11 = vmlad_n_f64(-(v13.f64[1] * a6.f64[0]), a6.f64[1], v13.f64[0]) / v20;
    v12 = vmlad_n_f64(-(v13.f64[1] * a4.f64[0]), a4.f64[1], v13.f64[0]) / v20;
    goto LABEL_24;
  }
  v23 = vmlad_n_f64(-(v13.f64[1] * a4.f64[0]), a4.f64[1], v13.f64[0]);
  if (fabs(v23 * v23) > v8.f64[1] * vaddvq_f64(vmulq_f64(v13, v13)) * 1.0e-12)
    goto LABEL_28;
  v25 = (int64x2_t)vmulq_f64(a4, v13);
  v26 = (int64x2_t)vmulq_f64(a6, vnegq_f64(v13));
  v27 = vdivq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v26, v25), (float64x2_t)vzip2q_s64(v26, v25)), v8);
  v28 = fabs(vmulq_f64(v27, v27).f64[0]);
  v12 = 0.0;
  v29 = fabs(vmuld_lane_f64(v27.f64[1], v27, 1)) > v21 || v28 > v21;
  if (!v29)
  {
    v22 = 1;
LABEL_43:
    v11 = 0.0;
    goto LABEL_29;
  }
  if (v27.f64[1] < 0.0 && v27.f64[0] < 0.0)
    goto LABEL_28;
  v30 = vmovn_s64(vcgezq_f64(v27));
  if ((v30.i32[1] & v30.i32[0] & 1) != 0)
  {
    v22 = 2;
    goto LABEL_43;
  }
  if (v27.f64[1] >= 0.0)
    v11 = v27.f64[1];
  else
    v11 = 0.0;
  if (v27.f64[0] >= 0.0)
    v12 = v27.f64[0];
  v22 = 2;
LABEL_29:
  if (a1)
    *a1 = v11;
  if (a2)
    *a2 = v12;
  return v22;
}

uint64_t geom::intersect_ray_line_segment<float>(float *a1, int *a2, float32x2_t a3, double a4, float32x2_t a5, float32x2_t a6, double a7, double a8)
{
  float32x2_t v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;
  float v12;
  float v13;
  float32x2_t v15;
  float v16;
  float32x2_t v18;
  float32x2_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x2_t v24;
  uint64_t v25;
  float v26;
  int v27;
  float32x2_t v28;
  float v29;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  unsigned __int8 v37;

  v8 = vsub_f32(a6, a5);
  v9 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  v10 = vaddv_f32(v9);
  v11 = vmul_f32(v8, v8);
  v12 = vaddv_f32(v11);
  *(float *)&a8 = fabsf(v10);
  v13 = fabsf(v12);
  if (*(float *)&a8 > 0.00000011921 || v13 > 0.00000011921)
  {
    v15 = vsub_f32(a5, a3);
    if (*(float *)&a8 > 0.00000011921)
      v16 = v10;
    else
      v16 = v12;
    if (*(float *)&a8 > 0.00000011921 && v13 > 0.00000011921)
    {
      v28 = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1));
      v29 = vmlas_n_f32((float)-*((float *)&a4 + 1) * v8.f32[0], v8.f32[1], *(float *)&a4);
      if (fabsf(v29 * v29) <= (float)(1.0e-10
                                     * vmul_f32(v28, vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1))).f32[0]))
      {
        v31 = vmul_f32(v15, v15);
        v32 = vmlas_n_f32(-(float)(v15.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v15.f32[0]);
        if (fabsf(v32 * v32) > (float)(1.0e-10
                                      * vmul_f32(v28, vadd_f32(v31, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1))).f32[0]))
          goto LABEL_21;
        v33 = vmul_f32(*(float32x2_t *)&a4, v15);
        v34 = vdiv_f32(vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)), v28);
        v35 = vmul_f32(*(float32x2_t *)&a4, vadd_f32(v15, v8));
        v36 = vdiv_f32(vadd_f32(v35, (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1)), v28);
        if (v34.f32[0] < 0.0 && v36.f32[0] < 0.0)
          goto LABEL_21;
        v37 = vcgt_f32(v34, v36).u8[0];
        if ((v37 & 1) != 0)
          v23 = v36.f32[0];
        else
          v23 = v34.f32[0];
        if ((v37 & 1) != 0)
          v22 = 0.0;
        else
          v22 = 1.0;
        v25 = 2;
        goto LABEL_28;
      }
      v23 = vmlas_n_f32(-(float)(v15.f32[1] * v8.f32[0]), v8.f32[1], v15.f32[0]) / v29;
      v22 = vmlas_n_f32(-(float)(v15.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v15.f32[0]) / v29;
    }
    else
    {
      v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)v8, *(int8x8_t *)&a4);
      v19 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)vneg_f32(v15), (int8x8_t)v15);
      v20 = vmlas_n_f32((float)-v18.f32[1] * v19.f32[0], v19.f32[1], v18.f32[0]);
      if ((float)(v20 * v20) > (float)(v16 * 1.0e-10))
      {
LABEL_21:
        v25 = 0;
        v26 = INFINITY;
        v27 = 2143289344;
        goto LABEL_29;
      }
      v21 = vaddv_f32(vmul_f32(v18, v19)) / v16;
      v22 = 0.0;
      if (*(float *)&a8 > 0.00000011921)
        v23 = v21;
      else
        v23 = 0.0;
      if (v13 > 0.00000011921)
        v22 = v21;
    }
  }
  else
  {
    v24 = vsub_f32(a3, a5);
    v23 = 0.0;
    v22 = 0.0;
    if (sqrtf(vaddv_f32(vmul_f32(v24, v24))) > 0.00001)
      goto LABEL_21;
  }
  v25 = 0;
  v26 = INFINITY;
  v27 = 2143289344;
  if (v23 >= 0.0 && v22 >= 0.0 && v22 <= 1.0)
  {
    v25 = 1;
LABEL_28:
    v26 = fmaxf(v23, 0.0);
    v27 = LODWORD(v22);
  }
LABEL_29:
  if (a1)
    *a1 = v26;
  if (a2)
    *a2 = v27;
  return v25;
}

uint64_t geom::intersect_ray_line_segment<double>(double *a1, uint64_t *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  double v14;
  float64x2_t v16;
  double v17;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float64x2_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  float64x2_t v29;
  double v30;
  float64x2_t v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  unsigned __int8 v38;

  v9 = vsubq_f64(a6, a5);
  v10 = vmulq_f64(a4, a4);
  v11 = vaddvq_f64(v10);
  v12 = vmulq_f64(v9, v9);
  v13 = vaddvq_f64(v12);
  a8.f64[0] = fabs(v11);
  v14 = fabs(v13);
  if (a8.f64[0] > 2.22044605e-16 || v14 > 2.22044605e-16)
  {
    v16 = vsubq_f64(a5, a3);
    v8.f64[0] = 2.22044605e-16;
    if (a8.f64[0] > 2.22044605e-16)
      v17 = v11;
    else
      v17 = v13;
    if (a8.f64[0] > 2.22044605e-16 && v14 > 2.22044605e-16)
    {
      v29 = vaddq_f64(v10, (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1));
      v30 = vmlad_n_f64(-a4.f64[1] * v9.f64[0], v9.f64[1], a4.f64[0]);
      if (fabs(v30 * v30) <= 1.0e-12
                            * vmulq_f64(v29, vaddq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1))).f64[0])
      {
        v32 = vmulq_f64(v16, v16);
        v33 = vmlad_n_f64(-(v16.f64[1] * a4.f64[0]), a4.f64[1], v16.f64[0]);
        if (fabs(v33 * v33) > 1.0e-12
                             * vmulq_f64(v29, vaddq_f64(v32, (float64x2_t)vdupq_laneq_s64((int64x2_t)v32, 1))).f64[0])
          goto LABEL_21;
        v34 = vmulq_f64(a4, v16);
        v35 = vdivq_f64(vaddq_f64(v34, (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)), v29);
        v36 = vmulq_f64(a4, vaddq_f64(v16, v9));
        v37 = vdivq_f64(vaddq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)), v29);
        if (v35.f64[0] < 0.0 && v37.f64[0] < 0.0)
          goto LABEL_21;
        v38 = vmovn_s64(vcgtq_f64(v35, v37)).u8[0];
        if ((v38 & 1) != 0)
          v24 = v37.f64[0];
        else
          v24 = v35.f64[0];
        if ((v38 & 1) != 0)
          v23 = 0.0;
        else
          v23 = 1.0;
        v26 = 2;
        goto LABEL_28;
      }
      v24 = vmlad_n_f64(-(v16.f64[1] * v9.f64[0]), v9.f64[1], v16.f64[0]) / v30;
      v23 = vmlad_n_f64(-(v16.f64[1] * a4.f64[0]), a4.f64[1], v16.f64[0]) / v30;
    }
    else
    {
      v19 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v8, a8).i64[0], 0), (int8x16_t)v9, (int8x16_t)a4);
      v9.f64[0] = 2.22044605e-16;
      v20 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v9, a8).i64[0], 0), (int8x16_t)vnegq_f64(v16), (int8x16_t)v16);
      v21 = vmlad_n_f64(-v19.f64[1] * v20.f64[0], v20.f64[1], v19.f64[0]);
      if (v21 * v21 > v17 * 1.0e-12)
      {
LABEL_21:
        v26 = 0;
        v27 = INFINITY;
        v28 = 0x7FF8000000000000;
        goto LABEL_29;
      }
      v22 = vaddvq_f64(vmulq_f64(v19, v20)) / v17;
      v23 = 0.0;
      if (a8.f64[0] > 2.22044605e-16)
        v24 = v22;
      else
        v24 = 0.0;
      if (v14 > 2.22044605e-16)
        v23 = v22;
    }
  }
  else
  {
    v25 = vsubq_f64(a3, a5);
    v24 = 0.0;
    v23 = 0.0;
    if (sqrt(vaddvq_f64(vmulq_f64(v25, v25))) > 0.000001)
      goto LABEL_21;
  }
  v26 = 0;
  v27 = INFINITY;
  v28 = 0x7FF8000000000000;
  if (v24 >= 0.0 && v23 >= 0.0 && v23 <= 1.0)
  {
    v26 = 1;
LABEL_28:
    v27 = fmax(v24, 0.0);
    v28 = *(_QWORD *)&v23;
  }
LABEL_29:
  if (a1)
    *a1 = v27;
  if (a2)
    *a2 = v28;
  return v26;
}

uint64_t geom::intersect_line_segment_line_segment<float>(float *a1, _DWORD *a2, int8x8_t a3, int8x8_t a4, int8x8_t a5, int8x8_t a6)
{
  uint64_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  unsigned __int8 v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _BOOL4 v18;
  int v19;
  int v20;
  unsigned int v21;
  int8x8_t v22;
  float32x2_t v23;
  unsigned int v24;
  int8x8_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  float32x2_t v32;
  int32x2_t v33;
  __int8 v34;
  __int8 v35;
  float32x2_t v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  char v40;
  float v41;
  unsigned int v42;
  float32x2_t v43;
  unsigned int v44;
  float32x2_t v45;
  float v46;
  float32x2_t v47;
  float v52;
  int32x2_t v53;
  float v54;
  BOOL v56;
  uint64_t v57;
  float v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  float32x2_t v62;
  float v64;
  int8x8_t v66;
  int8x8_t v67;
  int8x8_t v68;
  int8x8_t v69;
  _QWORD v70[5];

  v6 = 0;
  v70[4] = *MEMORY[0x24BDAC8D0];
  v70[0] = a3;
  v70[1] = a4;
  v70[2] = a5;
  v70[3] = a6;
  v7 = (float32x2_t)vdup_n_s32(0x7F800000u);
  v8 = (float32x2_t)0x7F0000007FLL;
  do
  {
    v9 = (float32x2_t)v70[v6];
    v7 = vminnm_f32(v9, v7);
    v8 = vmaxnm_f32(v9, v8);
    ++v6;
  }
  while (v6 != 4);
  v10 = vsub_f32(v8, v7);
  v11 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v10, 1), v10).u8[0];
  v66 = a3;
  v12 = (float *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  v13 = *(float *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  v67 = a4;
  v14 = *(float *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = *(float *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  v68 = a5;
  v16 = *(float *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  v69 = a6;
  if (*v12 >= v16)
    v17 = v16;
  else
    v17 = *v12;
  v18 = v15 < v17;
  v19 = (v13 >= v14) ^ v18;
  v20 = (v16 >= *v12) ^ v18;
  if (v19)
    v21 = -1;
  else
    v21 = 0;
  v22 = (int8x8_t)vdup_n_s32(v21);
  v23 = (float32x2_t)vbsl_s8(v22, a4, a3);
  if (v20)
    v24 = -1;
  else
    v24 = 0;
  v25 = (int8x8_t)vdup_n_s32(v24);
  v26 = (float32x2_t)vbsl_s8(v25, a5, a6);
  v27 = (float32x2_t)vbsl_s8(v22, (int8x8_t)vsub_f32((float32x2_t)a3, (float32x2_t)a4), (int8x8_t)vsub_f32((float32x2_t)a4, (float32x2_t)a3));
  v28 = (float32x2_t)vbsl_s8(v25, (int8x8_t)vsub_f32((float32x2_t)a6, (float32x2_t)a5), (int8x8_t)vsub_f32((float32x2_t)a5, (float32x2_t)a6));
  v29 = (int32x2_t)vmul_f32(v27, v27);
  v30 = (int32x2_t)vmul_f32(v28, v28);
  _D0 = vadd_f32((float32x2_t)vzip1_s32(v30, v29), (float32x2_t)vzip2_s32(v30, v29));
  v32 = vabs_f32(_D0);
  v33 = vcge_f32((float32x2_t)0x3400000034000000, v32);
  v34 = v33.i8[4];
  v35 = v33.i8[0];
  if ((v33.i32[1] & v33.i32[0] & 1) != 0)
  {
    v36 = vsub_f32(v23, v26);
    v37 = sqrtf(vaddv_f32(vmul_f32(v36, v36)));
    v38 = 0;
    if (v37 > 0.00001)
      goto LABEL_42;
    goto LABEL_32;
  }
  v39 = vsub_f32(v26, v23);
  v40 = v34 | v35;
  if ((v34 & 1) != 0)
    v41 = _D0.f32[0];
  else
    v41 = _D0.f32[1];
  if ((v34 & 1) != 0)
    v42 = -1;
  else
    v42 = 0;
  if ((v40 & 1) != 0)
  {
    v43 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v42), (int8x8_t)v28, (int8x8_t)v27);
    if ((v34 & 1) != 0)
      v44 = -1;
    else
      v44 = 0;
    v45 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v44), (int8x8_t)vneg_f32(v39), (int8x8_t)v39);
    v46 = vmlas_n_f32((float)-v43.f32[1] * v45.f32[0], v45.f32[1], v43.f32[0]);
    if ((float)(v46 * v46) > (float)(v41 * 1.0e-10))
      goto LABEL_42;
    v47 = vmul_f32(v43, v45);
    v47.f32[0] = vaddv_f32(v47) / v41;
    v38 = (float32x2_t)vbic_s8((int8x8_t)vdup_lane_s32((int32x2_t)v47, 0), (int8x8_t)vcge_f32((float32x2_t)0x3400000034000000, v32));
    goto LABEL_32;
  }
  v26.f32[0] = vmlas_n_f32((float)-v27.f32[1] * v28.f32[0], v28.f32[1], v27.f32[0]);
  if (fabsf(v26.f32[0] * v26.f32[0]) > (float)((float)(_D0.f32[1] * _D0.f32[0]) * 1.0e-10))
  {
    v38 = vdiv_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v27, (int32x2_t)v28), -v39.f32[1]), (float32x2_t)vzip2_s32((int32x2_t)v27, (int32x2_t)v28), v39.f32[0]), (float32x2_t)vdup_lane_s32((int32x2_t)v26, 0));
LABEL_32:
    __asm { FMLA            S4, S0, V0.S[1] }
    v52 = -(float)(_S4 * 0.000005);
    v53 = vdup_n_s32(0x7FC00000u);
    if (v38.f32[1] < v52
      || ((v54 = (float)(_S4 * 0.000005) + 1.0, v38.f32[1] <= v54) ? (_NF = v38.f32[0] < v52) : (_NF = 1),
          !_NF ? (v56 = v38.f32[0] <= v54) : (v56 = 0),
          !v56))
    {
      v57 = 0;
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  v58 = vmlas_n_f32(-(float)(v39.f32[1] * v27.f32[0]), v27.f32[1], v39.f32[0]);
  if (fabsf(v58 * v58) > (float)((float)(_D0.f32[1] * vaddv_f32(vmul_f32(v39, v39))) * 1.0e-10))
  {
LABEL_42:
    v57 = 0;
    v53 = vdup_n_s32(0x7FC00000u);
    goto LABEL_47;
  }
  v59 = (int32x2_t)vmul_f32(v27, v39);
  v60 = (int32x2_t)vmul_f32(v28, vneg_f32(v39));
  v38 = vdiv_f32(vadd_f32((float32x2_t)vzip1_s32(v60, v59), (float32x2_t)vzip2_s32(v60, v59)), _D0);
  v61 = vcge_f32((float32x2_t)vdup_n_s32(0x36A7C5ACu), vabs_f32(v38));
  if (((v61.i32[1] | v61.i32[0]) & 1) != 0)
  {
    v38 = 0;
LABEL_45:
    v57 = 1;
LABEL_46:
    v62 = (float32x2_t)vbic_s8((int8x8_t)v38, (int8x8_t)vcltz_f32(v38));
    __asm { FMOV            V1.2S, #1.0 }
    v53 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v62, _D1), (int8x8_t)_D1, (int8x8_t)v62);
    goto LABEL_47;
  }
  v57 = 0;
  v53 = vdup_n_s32(0x7FC00000u);
  if (v38.f32[1] >= 0.0 && v38.f32[0] >= 0.0)
  {
    v57 = 2;
    goto LABEL_46;
  }
LABEL_47:
  if (a1)
  {
    v64 = *(float *)&v53.i32[1];
    if (v19)
      v64 = 1.0 - *(float *)&v53.i32[1];
    *a1 = v64;
  }
  if (a2)
  {
    if (!v20)
      *(float *)v53.i32 = 1.0 - *(float *)v53.i32;
    *a2 = v53.i32[0];
  }
  return v57;
}

uint64_t geom::intersect_line_segment_line_segment<double>(double *a1, _QWORD *a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  unsigned __int8 v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BOOL4 v18;
  int v19;
  int v20;
  unint64_t v21;
  int8x16_t v22;
  float64x2_t v23;
  unint64_t v24;
  int8x16_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  float64x2_t v32;
  __int8 v33;
  __int8 v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  char v39;
  double v40;
  unint64_t v41;
  float64x2_t v42;
  unint64_t v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v51;
  int64x2_t v52;
  double v53;
  BOOL v55;
  uint64_t v56;
  double v57;
  int64x2_t v58;
  int64x2_t v59;
  int32x2_t v60;
  float64x2_t v61;
  double v63;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  _OWORD v69[4];
  uint64_t v70;

  v6 = 0;
  v70 = *MEMORY[0x24BDAC8D0];
  v69[0] = a3;
  v69[1] = a4;
  v69[2] = a5;
  v69[3] = a6;
  v7 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v8 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  do
  {
    v9 = (float64x2_t)v69[v6];
    v7 = vminnmq_f64(v9, v7);
    v8 = vmaxnmq_f64(v9, v8);
    ++v6;
  }
  while (v6 != 4);
  v10 = vsubq_f64(v8, v7);
  v11 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1), v10)).u8[0];
  v65 = a3;
  v12 = (double *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  v13 = *(double *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  v66 = a4;
  v14 = *(double *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = *(double *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  v67 = a5;
  v16 = *(double *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  v68 = a6;
  if (*v12 >= v16)
    v17 = v16;
  else
    v17 = *v12;
  v18 = v15 < v17;
  v19 = (v13 >= v14) ^ v18;
  v20 = (v16 >= *v12) ^ v18;
  if (v19)
    v21 = -1;
  else
    v21 = 0;
  v22 = (int8x16_t)vdupq_n_s64(v21);
  v23 = (float64x2_t)vbslq_s8(v22, a4, a3);
  if (v20)
    v24 = -1;
  else
    v24 = 0;
  v25 = (int8x16_t)vdupq_n_s64(v24);
  v26 = (float64x2_t)vbslq_s8(v25, a5, a6);
  v27 = (float64x2_t)vbslq_s8(v22, (int8x16_t)vsubq_f64((float64x2_t)a3, (float64x2_t)a4), (int8x16_t)vsubq_f64((float64x2_t)a4, (float64x2_t)a3));
  v28 = (float64x2_t)vbslq_s8(v25, (int8x16_t)vsubq_f64((float64x2_t)a6, (float64x2_t)a5), (int8x16_t)vsubq_f64((float64x2_t)a5, (float64x2_t)a6));
  v29 = (int64x2_t)vmulq_f64(v27, v27);
  v30 = (int64x2_t)vmulq_f64(v28, v28);
  _Q0 = vaddq_f64((float64x2_t)vzip1q_s64(v30, v29), (float64x2_t)vzip2q_s64(v30, v29));
  v32 = vabsq_f64(_Q0);
  *(int32x2_t *)v30.i8 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), v32));
  v33 = v30.i8[4];
  v34 = v30.i8[0];
  if ((v30.i32[1] & v30.i32[0] & 1) != 0)
  {
    v35 = vsubq_f64(v23, v26);
    v36 = sqrt(vaddvq_f64(vmulq_f64(v35, v35)));
    v37 = 0uLL;
    if (v36 > 0.000001)
      goto LABEL_42;
    goto LABEL_32;
  }
  v38 = vsubq_f64(v26, v23);
  v39 = v33 | v34;
  if ((v33 & 1) != 0)
    v40 = _Q0.f64[0];
  else
    v40 = _Q0.f64[1];
  if ((v33 & 1) != 0)
    v41 = -1;
  else
    v41 = 0;
  if ((v39 & 1) != 0)
  {
    v42 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v41), (int8x16_t)v28, (int8x16_t)v27);
    if ((v33 & 1) != 0)
      v43 = -1;
    else
      v43 = 0;
    v44 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v43), (int8x16_t)vnegq_f64(v38), (int8x16_t)v38);
    v45 = vmlad_n_f64(-v42.f64[1] * v44.f64[0], v44.f64[1], v42.f64[0]);
    if (v45 * v45 > v40 * 1.0e-12)
      goto LABEL_42;
    v37 = (float64x2_t)vbicq_s8((int8x16_t)vdupq_lane_s64(COERCE__INT64(vaddvq_f64(vmulq_f64(v42, v44)) / v40), 0), (int8x16_t)vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), v32));
    goto LABEL_32;
  }
  v46 = vmlad_n_f64(-v27.f64[1] * v28.f64[0], v28.f64[1], v27.f64[0]);
  if (fabs(v46 * v46) > _Q0.f64[1] * _Q0.f64[0] * 1.0e-12)
  {
    v37 = vdivq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v27, (int64x2_t)v28), -v38.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v27, (int64x2_t)v28), v38.f64[0]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46, 0));
LABEL_32:
    __asm { FMLA            D4, D0, V0.D[1] }
    v51 = -(_D4 * 1.0e-10);
    v52 = vdupq_n_s64(0x7FF8000000000000uLL);
    if (v37.f64[1] < v51
      || ((v53 = _D4 * 1.0e-10 + 1.0, v37.f64[1] <= v53) ? (_NF = v37.f64[0] < v51) : (_NF = 1),
          !_NF ? (v55 = v37.f64[0] <= v53) : (v55 = 0),
          !v55))
    {
      v56 = 0;
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  v57 = vmlad_n_f64(-(v38.f64[1] * v27.f64[0]), v27.f64[1], v38.f64[0]);
  if (fabs(v57 * v57) > _Q0.f64[1] * vaddvq_f64(vmulq_f64(v38, v38)) * 1.0e-12)
  {
LABEL_42:
    v56 = 0;
    v52 = vdupq_n_s64(0x7FF8000000000000uLL);
    goto LABEL_47;
  }
  v58 = (int64x2_t)vmulq_f64(v27, v38);
  v59 = (int64x2_t)vmulq_f64(v28, vnegq_f64(v38));
  v37 = vdivq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v59, v58), (float64x2_t)vzip2q_s64(v59, v58)), _Q0);
  v60 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL), vabsq_f64(v37)));
  if (((v60.i32[1] | v60.i32[0]) & 1) != 0)
  {
    v37 = 0uLL;
LABEL_45:
    v56 = 1;
LABEL_46:
    v61 = (float64x2_t)vbicq_s8((int8x16_t)v37, (int8x16_t)vcltzq_f64(v37));
    __asm { FMOV            V1.2D, #1.0 }
    v52 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, _Q1), (int8x16_t)_Q1, (int8x16_t)v61);
    goto LABEL_47;
  }
  v56 = 0;
  v52 = vdupq_n_s64(0x7FF8000000000000uLL);
  if (v37.f64[1] >= 0.0 && v37.f64[0] >= 0.0)
  {
    v56 = 2;
    goto LABEL_46;
  }
LABEL_47:
  if (a1)
  {
    v63 = *(double *)&v52.i64[1];
    if (v19)
      v63 = 1.0 - *(double *)&v52.i64[1];
    *a1 = v63;
  }
  if (a2)
  {
    if (!v20)
      *(double *)v52.i64 = 1.0 - *(double *)v52.i64;
    *a2 = v52.i64[0];
  }
  return v56;
}

uint64_t geom::intersect_line_line_segment<float>(uint64_t a1, int a2, float *a3, float32x2_t a4, float32x2_t a5, double a6, double a7, double a8, double _D5)
{
  float32x2_t v9;
  _BOOL8 v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  float32x2_t v21;
  float v22;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  float v29;
  unsigned int v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v37;
  float v38;
  float32x2_t v39;
  uint64_t result;
  uint64_t v42;
  float32x2_t v43;

  if ((float)(*(float *)&a2 * *(float *)&a2) <= (float)(vaddv_f32(vmul_f32((float32x2_t)a1, (float32x2_t)a1)) * 1.0e-10))
  {
    v12 = 0;
  }
  else
  {
    v10 = fabsf(*((float *)&a1 + 1)) > COERCE_FLOAT(a1 & 0x7FFFFFFF);
    v42 = a1;
    v11 = (float)-*(float *)&a2 / *(float *)((unint64_t)&v42 | (4 * v10));
    v43 = 0;
    *(float *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFFBLL | (4 * v10)) = v11;
    v12 = v43;
  }
  *(float *)&_D5 = -*((float *)&a1 + 1);
  v13 = (float32x2_t)vzip1_s32(*(int32x2_t *)&_D5, (int32x2_t)a1);
  _D1 = vsub_f32(a5, a4);
  v15 = vmul_f32(v13, v13);
  v16 = vaddv_f32(v15);
  v17 = vmul_f32(_D1, _D1);
  v18 = vaddv_f32(v17);
  v9.f32[0] = fabsf(v16);
  v19 = fabsf(v18);
  if (v19 <= 0.00000011921 && v9.f32[0] <= 0.00000011921)
  {
    v28 = vsub_f32(v12, a4);
    v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
    v27 = 0.0;
    if (v29 > 0.00001)
    {
      v30 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v21 = vsub_f32(a4, v12);
  if (v9.f32[0] > 0.00000011921)
    v22 = v16;
  else
    v22 = v18;
  if (v19 <= 0.00000011921 || v9.f32[0] <= 0.00000011921)
  {
    v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v9), 0), (int8x8_t)_D1, (int8x8_t)v13);
    v25 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v9), 0), (int8x8_t)vneg_f32(v21), (int8x8_t)v21);
    v26 = vmlas_n_f32((float)-v24.f32[1] * v25.f32[0], v25.f32[1], v24.f32[0]);
    if ((float)(v26 * v26) <= (float)(v22 * 1.0e-10))
    {
      v27 = vaddv_f32(vmul_f32(v24, v25)) / v22;
      if (v19 <= 0.00000011921)
        v27 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v30 = 0;
    v27 = 0.0;
    goto LABEL_28;
  }
  v31 = vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1));
  v32 = vadd_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1));
  __asm { FMLA            S16, S5, V1.S[1] }
  if (fabsf(_S16 * _S16) > (float)(1.0e-10 * vmul_f32(v32, v31).f32[0]))
  {
    v27 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v21, 1), *(float *)&a1, v21.f32[0]) / _S16;
LABEL_24:
    v30 = 1;
    goto LABEL_28;
  }
  v37 = vmul_f32(v21, v21);
  v38 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v21, 1), *(float *)&a1, v21.f32[0]);
  if (fabsf(v38 * v38) > (float)(1.0e-10
                                * vmul_f32(v31, vadd_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)v37, 1))).f32[0]))
    goto LABEL_26;
  v39 = vmul_f32(_D1, vneg_f32(v21));
  LODWORD(v27) = vdiv_f32(vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1)), v32).u32[0];
  v30 = 2;
LABEL_28:
  if (v27 > 1.0 || v27 < 0.0)
    result = 0;
  else
    result = v30;
  if (a3)
  {
    if (!(_DWORD)result)
      v27 = NAN;
    *a3 = v27;
  }
  return result;
}

uint64_t geom::intersect_line_line_segment<double>(float64x2_t *a1, double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6, double a7, double a8, int64x2_t _Q6)
{
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  float64x2_t v12;
  double v13;
  _BOOL8 v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  double v20;
  float64x2_t v21;
  double v22;
  double v23;
  float64x2_t v25;
  double v26;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  unsigned int v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  uint64_t result;
  float64x2_t v47;
  float64x2_t v48;

  v11 = a1[1].f64[0];
  v12 = *a1;
  v13 = a1->f64[1];
  if (v11 * v11 <= vaddvq_f64(vmulq_f64(v12, v12)) * 1.0e-12)
  {
    v16 = 0uLL;
  }
  else
  {
    v14 = fabs(v12.f64[1]) > fabs(v12.f64[0]);
    v47 = *a1;
    v15 = -v11 / *(double *)((unint64_t)&v47 | (8 * v14));
    _Q6.i8[8] = 0;
    _Q6.i8[9] = 0;
    _Q6.i8[10] = 0;
    _Q6.i8[11] = 0;
    _Q6.i8[12] = 0;
    _Q6.i8[13] = 0;
    _Q6.i8[14] = 0;
    _Q6.i8[15] = 0;
    v48 = 0u;
    *(double *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF7 | (8 * v14)) = v15;
    v16 = v48;
  }
  *(double *)_Q6.i64 = -v13;
  v17 = (float64x2_t)vzip1q_s64(_Q6, (int64x2_t)v12);
  _Q1 = vsubq_f64(a4, a3);
  v19 = vmulq_f64(v17, v17);
  v20 = vaddvq_f64(v19);
  v21 = vmulq_f64(_Q1, _Q1);
  v22 = vaddvq_f64(v21);
  v9.f64[0] = fabs(v20);
  v23 = fabs(v22);
  if (v23 <= 2.22044605e-16 && v9.f64[0] <= 2.22044605e-16)
  {
    v33 = vsubq_f64(v16, a3);
    v34 = sqrt(vaddvq_f64(vmulq_f64(v33, v33)));
    v32 = 0.0;
    if (v34 > 0.000001)
    {
      v35 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v25 = vsubq_f64(a3, v16);
  v10.f64[0] = 2.22044605e-16;
  if (v9.f64[0] > 2.22044605e-16)
    v26 = v20;
  else
    v26 = v22;
  if (v23 <= 2.22044605e-16 || v9.f64[0] <= 2.22044605e-16)
  {
    v28 = (float64x2_t)vdupq_lane_s64(vcgeq_f64(v10, v9).i64[0], 0);
    v29 = (float64x2_t)vbslq_s8((int8x16_t)v28, (int8x16_t)_Q1, (int8x16_t)v17);
    v28.f64[0] = 2.22044605e-16;
    v30 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v28, v9).i64[0], 0), (int8x16_t)vnegq_f64(v25), (int8x16_t)v25);
    v31 = vmlad_n_f64(-v29.f64[1] * v30.f64[0], v30.f64[1], v29.f64[0]);
    if (v31 * v31 <= v26 * 1.0e-12)
    {
      v32 = vaddvq_f64(vmulq_f64(v29, v30)) / v26;
      if (v23 <= 2.22044605e-16)
        v32 = 0.0;
      goto LABEL_24;
    }
LABEL_26:
    v35 = 0;
    v32 = 0.0;
    goto LABEL_28;
  }
  v36 = vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1));
  v37 = vaddq_f64(v21, (float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1));
  __asm { FMLA            D16, D6, V1.D[1] }
  if (fabs(_D16 * _D16) > 1.0e-12 * vmulq_f64(v37, v36).f64[0])
  {
    v32 = vmlad_n_f64(vmuld_lane_f64(v13, v25, 1), v12.f64[0], v25.f64[0]) / _D16;
LABEL_24:
    v35 = 1;
    goto LABEL_28;
  }
  v42 = vmulq_f64(v25, v25);
  v43 = vmlad_n_f64(vmuld_lane_f64(v13, v25, 1), v12.f64[0], v25.f64[0]);
  if (fabs(v43 * v43) > 1.0e-12
                       * vmulq_f64(v36, vaddq_f64(v42, (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1))).f64[0])
    goto LABEL_26;
  v44 = vmulq_f64(_Q1, vnegq_f64(v25));
  *(_QWORD *)&v32 = *(_OWORD *)&vdivq_f64(vaddq_f64(v44, (float64x2_t)vdupq_laneq_s64((int64x2_t)v44, 1)), v37);
  v35 = 2;
LABEL_28:
  if (v32 > 1.0 || v32 < 0.0)
    result = 0;
  else
    result = v35;
  if (a2)
  {
    if (!(_DWORD)result)
      v32 = NAN;
    *a2 = v32;
  }
  return result;
}

uint64_t geom::intersect_line_line<float>(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float v10;
  float v11;
  float32x2_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float v21;
  float v22;
  float v23;
  int8x8_t v24;
  int8x8_t v25;
  _BYTE v26[4];
  int v27;
  uint64_t v28;

  v5 = vmul_f32((float32x2_t)a1, (float32x2_t)a1);
  v6 = vmul_f32((float32x2_t)a3, (float32x2_t)a3);
  v7 = vaddv_f32(v6);
  if (vaddv_f32(v5) <= 0.00000011921 || v7 <= 0.00000011921)
    return 0;
  v10 = *(float *)&a2;
  v11 = *(float *)&a1;
  v12 = vadd_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1));
  v13 = (float)(*(float *)&a1 * *((float *)&a3 + 1)) - (float)(*((float *)&a1 + 1) * *(float *)&a3);
  v14 = 1.0e-10 * vmul_f32(vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1)), v12).f32[0];
  if ((float)(v13 * v13) <= v14)
  {
    v27 = HIDWORD(a1);
    v28 = a3;
    v16 = 4;
    v17 = v26;
    do
    {
      if (v11 < *(float *)&v26[v16])
      {
        v11 = *(float *)&v26[v16];
        v17 = &v26[v16];
      }
      v16 += 4;
    }
    while (v16 != 16);
    v18 = (int8x8_t)vceqd_s64((v17 - v26) & 0x3F8, 0);
    v19 = vbsl_s8(v18, (int8x8_t)a1, (int8x8_t)a3);
    v20 = vbsl_s8(v18, (int8x8_t)a3, (int8x8_t)a1);
    if (((v17 - v26) & 0x3F8) != 0)
      v21 = *(float *)&a4;
    else
      v21 = *(float *)&a2;
    if (((v17 - v26) & 0x3F8) == 0)
      v10 = *(float *)&a4;
    v24 = v20;
    v22 = *(float *)((unint64_t)&v24 | (4 * (((v17 - v26) >> 2) & 1))) * v21;
    v25 = v19;
    v23 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((v17 - v26) >> 2) & 1)));
    return 2 * ((float)((float)(v10 - (float)(v22 / v23)) * (float)(v10 - (float)(v22 / v23))) <= v14);
  }
  else
  {
    if (a5)
    {
      *(float *)&v15 = (float)((float)(*((float *)&a1 + 1) * *(float *)&a4)
                             - (float)(*((float *)&a3 + 1) * *(float *)&a2))
                     / v13;
      *((float *)&v15 + 1) = (float)((float)(*(float *)&a1 * *(float *)&a4) - (float)(*(float *)&a3 * *(float *)&a2))
                           / (float)-v13;
      *a5 = v15;
    }
    return 1;
  }
}

uint64_t geom::intersect_line_line<double>(uint64_t a1, float64x2_t *a2, _OWORD *a3)
{
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  float64x2_t v10;
  double v16;
  double v17;
  double v18;
  float64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64_t v26;
  _BYTE v27[8];
  uint64_t v28;
  float64x2_t v29;

  _Q0 = *(float64x2_t *)a1;
  _Q2 = *a2;
  v5 = vmulq_f64(_Q0, _Q0);
  v6 = vmulq_f64(_Q2, _Q2);
  v7 = vaddvq_f64(v6);
  if (vaddvq_f64(v5) <= 2.22044605e-16 || v7 <= 2.22044605e-16)
    return 0;
  v10 = vaddq_f64(v6, (float64x2_t)vdupq_laneq_s64((int64x2_t)v6, 1));
  __asm { FMLA            D4, D0, V2.D[1] }
  v16 = 1.0e-12 * vmulq_f64(vaddq_f64(v5, (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)), v10).f64[0];
  if (_D4 * _D4 <= v16)
  {
    v28 = *(_QWORD *)(a1 + 8);
    v29 = _Q2;
    v21 = 8;
    v22 = v27;
    do
    {
      if (_Q0.f64[0] < *(double *)&v27[v21])
      {
        _Q0.f64[0] = *(float64_t *)&v27[v21];
        v22 = &v27[v21];
      }
      v21 += 8;
    }
    while (v21 != 32);
    v23 = v22 - v27;
    if (((v22 - v27) & 0x7F0) != 0)
      v24 = a2;
    else
      v24 = (float64x2_t *)a1;
    if (((v22 - v27) & 0x7F0) != 0)
      v25 = (float64x2_t *)a1;
    else
      v25 = a2;
    v26 = v25[1].f64[0]
        - *(double *)((char *)v25->f64 + (v23 & 8)) * v24[1].f64[0] / *(double *)((char *)v24->f64 + (v23 & 8));
    return 2 * (v26 * v26 <= v16);
  }
  else
  {
    if (a3)
    {
      v17 = *(double *)(a1 + 16);
      v18 = a2[1].f64[0];
      v19 = -_Q2.f64[0];
      *(double *)&v20 = (_Q0.f64[1] * v18 - _Q2.f64[1] * v17) / _D4;
      *((double *)&v20 + 1) = (v17 * v19 + _Q0.f64[0] * v18) / -_D4;
      *a3 = v20;
    }
    return 1;
  }
}

uint64_t geom_arap_deformer_create_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = 3 * a3;
  v8 = geom_arap_deformer_3f_obj_alloc();
  geom::arap_deformer<float>::arap_deformer(v8 + 16, a2, a1, a4, v7);
  return v8;
}

uint64_t geom_arap_deformer_is_valid_3f(uint64_t a1)
{
  return geom::arap_deformer<float>::is_valid(a1 + 16);
}

uint64_t geom_arap_deformer_is_initialized_3f(uint64_t a1)
{
  return geom::arap_deformer<float>::is_initialized(a1 + 16);
}

void geom_arap_deformer_reset_3f(uint64_t a1)
{
  geom::arap_deformer<float>::reset(a1 + 16);
}

uint64_t **geom_arap_deformer_add_constraints_3f(uint64_t a1, uint64_t a2, __int128 *a3, _DWORD *a4)
{
  return geom::arap_deformer<float>::add_constraints((uint64_t **)(a1 + 16), a3, a2, a4, a2);
}

uint64_t **geom_arap_deformer_add_static_constraints_3f(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return geom::arap_deformer<float>::add_static_constraints(a1 + 16, a3, a2);
}

void geom_arap_deformer_clear_constraints_3f(uint64_t a1)
{
  geom::arap_deformer<float>::clear_constraints(a1 + 16);
}

BOOL geom_arap_deformer_initialize_3f(uint64_t a1)
{
  return geom::arap_deformer<float>::initialize(a1 + 16);
}

void geom_arap_deformer_deform_3f(uint64_t a1, unsigned int a2, float a3)
{
  geom::arap_deformer<float>::deform((_QWORD *)(a1 + 16), a2, a3);
}

char *geom_arap_deformer_deformed_vertices_3f(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;

  v3 = geom::arap_deformer<float>::deformed_vertices(a1 + 16);
  result = (char *)geom::collection_to_vector<float>(a2);
  if (result != (char *)v3)
    return _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(result, *(char **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 4);
  return result;
}

uint64_t geom_arap_deformer_create_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = 3 * a3;
  v8 = geom_arap_deformer_3d_obj_alloc();
  geom::arap_deformer<double>::arap_deformer(v8 + 16, a2, a1, a4, v7);
  return v8;
}

uint64_t geom_arap_deformer_is_valid_3d(uint64_t a1)
{
  return geom::arap_deformer<float>::is_valid(a1 + 16);
}

uint64_t geom_arap_deformer_is_initialized_3d(uint64_t a1)
{
  return geom::arap_deformer<float>::is_initialized(a1 + 16);
}

void geom_arap_deformer_reset_3d(uint64_t a1)
{
  geom::arap_deformer<double>::reset(a1 + 16);
}

uint64_t **geom_arap_deformer_add_constraints_3d(uint64_t a1, uint64_t a2, __int128 *a3, _DWORD *a4)
{
  return geom::arap_deformer<double>::add_constraints((uint64_t **)(a1 + 16), a3, a2, a4, a2);
}

uint64_t **geom_arap_deformer_add_static_constraints_3d(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return geom::arap_deformer<double>::add_static_constraints(a1 + 16, a3, a2);
}

void geom_arap_deformer_clear_constraints_3d(uint64_t a1)
{
  geom::arap_deformer<float>::clear_constraints(a1 + 16);
}

BOOL geom_arap_deformer_initialize_3d(uint64_t a1)
{
  return geom::arap_deformer<double>::initialize(a1 + 16);
}

void geom_arap_deformer_deform_3d(uint64_t a1, unsigned int a2, double a3)
{
  geom::arap_deformer<double>::deform((_QWORD *)(a1 + 16), a2, a3);
}

char *geom_arap_deformer_deformed_vertices_3d(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;

  v3 = geom::arap_deformer<float>::deformed_vertices(a1 + 16);
  result = (char *)geom::collection_to_vector<float>(a2);
  if (result != (char *)v3)
    return _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(result, *(char **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 5);
  return result;
}

uint64_t geom::polynomial_roots(geom *this, uint64_t a2, const double *a3, double *a4)
{
  unsigned int v4;
  double *v5;
  const double *v6;
  double *v7;
  const double *v8;
  double *v9;
  unsigned int v10;
  unsigned __int8 v11;
  __CLPK_integer v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64x2_t v17;
  double *v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  int64x2_t v23;
  int32x2_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  double v30;
  uint64_t v31;
  __CLPK_doublereal *v32;
  uint64_t v33;
  char __jobvr;
  __CLPK_integer __lwork;
  __CLPK_integer v37;
  __CLPK_doublereal v38;
  __CLPK_integer __lda;
  __CLPK_doublereal __a;
  _QWORD v41[4096];

  v4 = MEMORY[0x24BDAC7A8](this, a2);
  v8 = v6;
  v9 = v5;
  v10 = v4;
  v11 = 0;
  v41[4095] = *MEMORY[0x24BDAC8D0];
  v12 = v4 - 1;
  __lda = v12;
  v13 = (int)(v12 + v12 * v4);
  v14 = (int)(v4 - 1);
  if (v4 >= 4 && fabs(v5[v12]) <= 0.000001)
    v11 = geom::polynomial_roots((geom *)(v4 - 1), v5, v6, v7);
  if (v13 <= 0xFFF)
  {
    if (v10 < 3)
    {
      v16 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = (uint64x2_t)vdupq_n_s64((unint64_t)v14 - 1);
      v18 = (double *)v41;
      v19 = vdupq_n_s64(2uLL);
      do
      {
        v20 = 0;
        v21 = v15 + 1;
        v22 = v18;
        v23 = (int64x2_t)xmmword_2289B6F40;
        do
        {
          v24 = vmovn_s64((int64x2_t)vcgeq_u64(v17, (uint64x2_t)v23));
          if ((v24.i8[0] & 1) != 0)
          {
            if (v21 == v20)
              v25 = 1.0;
            else
              v25 = 0.0;
            *(v22 - 1) = v25;
          }
          if ((v24.i8[4] & 1) != 0)
          {
            if (v15 == v20)
              v26 = 1.0;
            else
              v26 = 0.0;
            *v22 = v26;
          }
          v20 += 2;
          v23 = vaddq_s64(v23, v19);
          v22 += 2;
        }
        while ((v10 & 0xFE) != v20);
        v16 += v14;
        v18 += v10 - 1;
        ++v15;
      }
      while (v21 != v10 - 2);
    }
    if (v10 >= 2)
    {
      v27 = v9[v14];
      v28 = v14;
      v29 = (__CLPK_doublereal *)&v41[v16 - 1];
      do
      {
        v30 = *v9++;
        *v29++ = -v30 / v27;
        --v28;
      }
      while (v28);
    }
    v38 = 0.0;
    __lwork = -1;
    v37 = 0;
    __jobvr = 78;
    dgeev_(&__jobvr, &__jobvr, &__lda, &__a, &__lda, 0, 0, 0, &__lda, 0, &__lda, &v38, &__lwork, &v37);
    __lwork = (int)v38;
    if ((unint64_t)(v13 + (int)v38) < 0x1000)
    {
      v31 = __lda;
      v32 = (__CLPK_doublereal *)&v41[(v31 * v31) - 1];
      dgeev_(&__jobvr, &__jobvr, &__lda, &__a, &__lda, v32, &v32[__lda], 0, &__lda, 0, &__lda, &v32[__lda + __lda], &__lwork, &v37);
      if (!v37)
      {
        v33 = __lda;
        if (__lda >= 1)
        {
          do
          {
            if (v32[v31] == 0.0)
              v8[v11++] = *v32;
            ++v32;
            --v33;
          }
          while (v33);
        }
      }
    }
  }
  std::__sort<std::__less<double,double> &,double *>();
  return v11;
}

uint64_t geom_quadratic_roots_f(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if (fabsf(v3) <= 0.00001)
  {
    if (fabsf(v2) > 0.00001)
    {
      *a2 = (float)-v4 / v2;
      return 1;
    }
    return 0;
  }
  v5 = (float)((float)(v3 * -4.0) * v4) + (float)(v2 * v2);
  if (v5 < 0.0)
    return 0;
  v6 = 1.0;
  if (v2 < 0.0)
    v6 = -1.0;
  v7 = (float)(v2 + (float)(v6 * sqrtf(v5))) * -0.5;
  v8 = v4 / v7;
  *a2 = v7 / v3;
  a2[1] = v8;
  if (v8 < (float)(v7 / v3))
  {
    *a2 = v8;
    a2[1] = v7 / v3;
  }
  if (v5 <= 0.0)
    return 1;
  else
    return 2;
}

uint64_t geom_quadratic_roots_d(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if (fabs(v3) <= 0.000001)
  {
    if (fabs(v2) > 0.000001)
    {
      *a2 = -v4 / v2;
      return 1;
    }
    return 0;
  }
  v5 = v3 * -4.0 * v4 + v2 * v2;
  if (v5 < 0.0)
    return 0;
  v6 = 1.0;
  if (v2 < 0.0)
    v6 = -1.0;
  v7 = (v2 + v6 * sqrt(v5)) * -0.5;
  v8 = v4 / v7;
  *a2 = v7 / v3;
  a2[1] = v8;
  if (v8 < v7 / v3)
  {
    *a2 = v8;
    a2[1] = v7 / v3;
  }
  if (v5 <= 0.0)
    return 1;
  else
    return 2;
}

uint64_t geom::cubic_roots<float>(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  float v29;

  v3 = a1[2];
  v4 = a1[3];
  if (fabsf(v4) > 0.00001)
  {
    v5 = v3 / v4;
    v6 = a1[1] / v4;
    v7 = (float)((float)(v5 * v5) + (float)(v6 * -3.0)) / 9.0;
    v8 = v7 * (float)(v7 * v7);
    v9 = (float)((float)((float)((float)(v5 * -9.0) * v6) + (float)((float)(v5 * (float)(v5 * v5)) * 2.0))
               + (float)((float)(*a1 / v4) * 27.0))
       / 54.0;
    if ((float)(v9 * v9) < v8)
    {
      v10 = acosf(v9 / sqrtf(v8));
      v11 = sqrtf(v7) * -2.0;
      v12 = v5 / -3.0;
      *a2 = v12 + (float)(v11 * cosf(v10 / 3.0));
      v13 = v12;
      v14 = v10;
      v15 = v13 + v11 * cos((v14 + 6.28318531) / 3.0);
      a2[1] = v15;
      v16 = v13 + v11 * cos((v14 + -6.28318531) / 3.0);
      a2[2] = v16;
      std::__sort<std::__less<float,float> &,float *>();
      return 3;
    }
    v25 = powf(fabsf(v9) + sqrtf(-(float)(v8 - (float)(v9 * v9))), 0.33333);
    v26 = -v25;
    if (v9 < 0.0)
      v26 = v25;
    v27 = fabsf(v25) > 0.00001;
    v28 = 0.0;
    if (v27)
      v28 = v7 / v26;
    v29 = (float)(v26 + v28) + (float)(v5 / -3.0);
    goto LABEL_21;
  }
  v18 = *a1;
  v19 = a1[1];
  if (fabsf(v3) <= 0.00001)
  {
    if (fabsf(v19) > 0.00001)
    {
      v29 = (float)-v18 / v19;
LABEL_21:
      *a2 = v29;
      return 1;
    }
    return 0;
  }
  v20 = (float)((float)(v3 * -4.0) * v18) + (float)(v19 * v19);
  if (v20 < 0.0)
    return 0;
  v21 = 1.0;
  if (v19 < 0.0)
    v21 = -1.0;
  v22 = (float)(v19 + (float)(v21 * sqrtf(v20))) * -0.5;
  v23 = v22 / v3;
  v24 = v18 / v22;
  *a2 = v23;
  a2[1] = v24;
  if (v24 < v23)
  {
    *a2 = v24;
    a2[1] = v23;
  }
  if (v20 <= 0.0)
    return 1;
  else
    return 2;
}

uint64_t geom::cubic_roots<double>(double *a1, long double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;

  v3 = a1[2];
  v4 = a1[3];
  if (fabs(v4) > 0.000001)
  {
    v5 = v3 / v4;
    v6 = a1[1] / v4;
    v7 = (v5 * v5 + v6 * -3.0) / 9.0;
    v8 = v7 * (v7 * v7);
    v9 = (v5 * -9.0 * v6 + v5 * (v5 * v5) * 2.0 + *a1 / v4 * 27.0) / 54.0;
    if (v9 * v9 < v8)
    {
      v10 = acos(v9 / sqrt(v8));
      v11 = sqrt(v7) * -2.0;
      v12 = v5 / -3.0;
      *a2 = v12 + v11 * cos(v10 / 3.0);
      a2[1] = v12 + v11 * cos((v10 + 6.28318531) / 3.0);
      a2[2] = v12 + v11 * cos((v10 + -6.28318531) / 3.0);
      std::__sort<std::__less<double,double> &,double *>();
      return 3;
    }
    v21 = pow(fabs(v9) + sqrt(-(v8 - v9 * v9)), 0.333333333);
    v22 = -v21;
    if (v9 < 0.0)
      v22 = v21;
    v23 = fabs(v21) > 0.000001;
    v24 = 0.0;
    if (v23)
      v24 = v7 / v22;
    v25 = v22 + v24 + v5 / -3.0;
    goto LABEL_21;
  }
  v14 = *a1;
  v15 = a1[1];
  if (fabs(v3) <= 0.000001)
  {
    if (fabs(v15) > 0.000001)
    {
      v25 = -v14 / v15;
LABEL_21:
      *a2 = v25;
      return 1;
    }
    return 0;
  }
  v16 = v3 * -4.0 * v14 + v15 * v15;
  if (v16 < 0.0)
    return 0;
  v17 = 1.0;
  if (v15 < 0.0)
    v17 = -1.0;
  v18 = (v15 + v17 * sqrt(v16)) * -0.5;
  v19 = v18 / v3;
  v20 = v14 / v18;
  *a2 = v19;
  a2[1] = v20;
  if (v20 < v19)
  {
    *a2 = v20;
    a2[1] = v19;
  }
  if (v16 <= 0.0)
    return 1;
  else
    return 2;
}

float geom_polynomial_roots_f(uint64_t a1, uint64_t a2)
{
  geom *v2;
  uint64_t v3;
  double *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  unsigned int v8;
  float result;
  uint64_t v10;
  double *v11;
  double v12;
  double v13[256];
  _QWORD v14[257];

  v2 = (geom *)MEMORY[0x24BDAC7A8](a1, a2);
  v6 = v5;
  v7 = 0;
  v14[256] = *MEMORY[0x24BDAC8D0];
  do
  {
    *(double *)&v14[v7] = *(float *)(v3 + 4 * v7);
    ++v7;
  }
  while (v2 + 1 != v7);
  v8 = geom::polynomial_roots(v2, (uint64_t)v14, v13, v4);
  if (v8)
  {
    v10 = v8;
    v11 = v13;
    do
    {
      v12 = *v11++;
      result = v12;
      *v6++ = result;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t _ZN4geom23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISB_Lh2EvE5valueENS1_9allocatorISG_EEEERNSD_IjNSH_IjEEEE(uint64_t result, unsigned int a2, int32x2_t **a3, char **a4, float32x2_t a5, float32x2_t a6)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v11;
  uint64_t v12;
  float *v13;
  int v14;
  uint64_t v15;
  float v16;
  double v17;
  float32x2_t v18;
  double v19;
  float32x2_t v20;
  uint64_t v21;
  __int32 v22;
  float32x2_t v23;
  uint64_t v24;
  uint16x4_t v25;
  float v26;
  uint64_t v27;
  float32x2_t v28;
  uint64_t v29;
  float *v30;
  float32x2_t v31;
  unsigned int v32;
  uint64_t v33;
  float v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x8_t v37;
  unint64_t v38;
  char v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int8x8_t v44;
  char v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int8x8_t v50;
  unsigned __int8 v51;
  __int16 v52;
  int8x8_t v53;
  _DWORD *v54;
  uint32x2_t v55;
  double v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint16x4_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t v65;
  _BOOL8 v66;
  unsigned int v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  __int16 *v75;
  __int16 *v76;
  uint64_t v77;
  int8x8_t v78;
  int32x2_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  __int16 *v86;
  __int16 *v87;
  unint64_t v88;
  unint64_t v89;
  char **v90;
  int32x2_t **v91;
  int32x2_t *v92;
  unsigned __int16 *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  int8x8_t v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  int8x8_t v106;
  double v107;
  unsigned int v108;
  uint64_t S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP;
  uint16x4_t v110;
  double v111;
  double v112;
  double v113;
  int8x8_t v114;
  int32x2_t v115;
  unint64_t v116;
  int32x2_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  int32x2_t *v125;
  uint64_t v126;
  double v127;
  double v128;
  _BOOL8 v129;
  int v130;
  int v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  int32x2_t v136;
  unint64_t v137;
  int32x2_t *v138;
  int32x2_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  int32x2_t *v145;
  char *v146;
  int32x2_t *v147;
  int8x8_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  int32x2_t *v155;
  char *v156;
  int32x2_t *v157;
  int8x8_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  int v170;
  _DWORD *v171;
  int v172;
  int32x2_t **v173;
  char **v174;
  __int32 v175;
  int32x2_t v176;
  unsigned __int32 v177;
  __int32 v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  double v182;
  double v183;
  float32x4_t v184;
  double v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned int v189;
  double v190;
  double v191;
  unsigned int v192;
  int32x2_t v193;
  double v194;
  unsigned int v195;
  unint64_t v196;
  int32x2_t v197;
  unint64_t v198;
  float32x4_t v199;
  double v200;
  unsigned int v201;
  unint64_t v202;
  unint64_t v203;
  __int8 v204;
  __int8 v205;
  unint64_t v206;
  unint64_t v207;
  int8x8_t v208;
  int8x8_t v209;
  int32x2_t v210;
  int8x8_t v211;
  int32x2_t v212;
  unint64_t v213;
  float *v214;
  float *v215;
  uint64_t v216;
  uint64_t v217[6];
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  __int16 *v221;
  __int16 *v222;
  char *v223;
  char v224;
  __int128 *v225;
  unint64_t v226;
  uint64_t v227;
  double v228[3];

  v180 = result;
  a3[1] = *a3;
  a4[1] = *a4;
  v7 = vsub_f32(a6, a5);
  v8 = vmul_f32(v7, v7);
  if (sqrtf(vaddv_f32(v8)) > 0.00000011921)
  {
    v8.f32[0] = fminf(v7.f32[0], v7.f32[1]) / (float)a2;
    v183 = *(double *)&v8;
    v11 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
    v176 = vcvt_s32_f32(vrndp_f32(vdiv_f32(v7, v11)));
    v220 = 0;
    v219 = 0u;
    v218 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v218, 1uLL);
    memset(v217, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v217, 1uLL);
    v212 = v176;
    v12 = *(_QWORD *)&vcgt_u32((uint32x2_t)v176, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v176, 1), (int8x8_t)0xFFFF0000FFFFLL)) & 1;
    v179 = *(unsigned int *)((unint64_t)&v212 & 0xFFFFFFFFFFFFFFFBLL | (4 * v12));
    v214 = 0;
    v215 = 0;
    v216 = 0;
    std::vector<float>::__vallocate[abi:nn180100](&v214, v179 + 1);
    v13 = v215;
    bzero(v215, 4 * (v179 + 1));
    v14 = 0;
    v215 = &v13[v179 + 1];
    do
    {
      v211 = 0;
      *(_DWORD *)((unint64_t)&v211 | (4 * v12)) = v14;
      v225 = (__int128 *)vmla_f32(a5, v11, vcvt_f32_u32((uint32x2_t)vand_s8(v211, (int8x8_t)0xFFFF0000FFFFLL)));
      v15 = *(_QWORD *)(v180 + 24);
      if (!v15)
        goto LABEL_173;
      v16 = (*(float (**)(uint64_t, __int128 **))(*(_QWORD *)v15 + 48))(v15, &v225);
      v214[(unsigned __int16)v14++] = v16;
    }
    while ((unsigned __int16)v14 <= (unsigned __int16)v179);
    v173 = a3;
    v174 = a4;
    v21 = v12 ^ 1;
    v210 = v176;
    v172 = *(_DWORD *)((unint64_t)&v210 | (4 * v21));
    if (v172)
    {
      v22 = 0;
      v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v183, 0);
      v171 = (_DWORD *)((unint64_t)&v208 | (4 * v21));
      while (1)
      {
        v208 = 0;
        *v171 = v22 + 1;
        v209 = v208;
        *(_DWORD *)((unint64_t)&v209 | (4 * v12)) = 0;
        v225 = (__int128 *)vmla_f32(a5, v11, vcvt_f32_u32((uint32x2_t)vand_s8(v209, (int8x8_t)0xFFFF0000FFFFLL)));
        v24 = *(_QWORD *)(v180 + 24);
        if (!v24)
          goto LABEL_173;
        v175 = v22 + 1;
        v26 = (*(float (**)(uint64_t, __int128 **))(*(_QWORD *)v24 + 48))(v24, &v225);
        if ((_WORD)v179)
          break;
LABEL_31:
        v214[v179] = v26;
        v22 = v175;
        if ((unsigned __int16)v175 >= (unsigned __int16)v172)
          goto LABEL_32;
      }
      v27 = 0;
      v178 = v22;
      v25.i32[0] = v22;
      v177 = vmovl_u16(v25).u32[0];
      while (1)
      {
        if ((_DWORD)v12)
        {
          v31 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v27, v177), (int8x8_t)0xFFFF0000FFFFLL));
          v28 = vmla_f32(a5, v11, v31);
          v188 = __PAIR64__(v27, v177);
          v206 = __PAIR64__(v27, v177);
          v29 = *(unsigned __int16 *)((unint64_t)&v206 | (4 * v12));
          v30 = &v214[v29];
          v31.f32[0] = v26;
        }
        else
        {
          v31 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v178, v27), (int8x8_t)0xFFFF0000FFFFLL));
          v28 = vmla_f32(a5, v11, v31);
          v188 = __PAIR64__(v178, v27);
          v207 = __PAIR64__(v178, v27);
          v29 = *(unsigned __int16 *)((unint64_t)&v207 | (4 * v12));
          v30 = &v214[v29];
          v31.f32[0] = v214[v27 + 1];
        }
        v32 = *(_DWORD *)v30;
        v225 = (__int128 *)vadd_f32(v23, v28);
        v33 = *(_QWORD *)(v180 + 24);
        if (!v33)
          break;
        v181 = v32;
        v185 = *(double *)&v31;
        v18.i32[0] = (*(float (**)(uint64_t, __int128 **))(*(_QWORD *)v33 + 48))(v33, &v225);
        v34 = v26;
        if ((_DWORD)v12)
          v34 = v214[WORD2(v188) + 1];
        v214[v29] = v26;
        v20 = (float32x2_t)__PAIR64__(LODWORD(v185), v181);
        v35.i64[0] = __PAIR64__(LODWORD(v185), v181);
        v19 = v185;
        v35.i64[1] = __PAIR64__(LODWORD(v34), v18.u32[0]);
        v184 = v35;
        v182 = *(double *)&v18;
        v18.f32[1] = v34;
        v36 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v35)), (int8x8_t)0x8000400020001));
        v37 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
        *(int8x8_t *)v36.i8 = vorr_s8(*(int8x8_t *)v36.i8, v37);
        v205 = v36.i8[4];
        v204 = v36.i8[0];
                               + (((unint64_t)((float)(vaddv_f32(vadd_f32(v20, v18)) * 0.25) > 0.0) << 6) | (4 * (v36.i8[0] | v36.i8[4]))));
        v38 = vmovl_u8(*(uint8x8_t *)v36.i8).u64[0];
        v186 = v38;
        if (~(unsigned __int16)v38)
        {
          v39 = BYTE2(v38);
          LOBYTE(v213) = v38;
          v224 = BYTE2(v38);
          WORD1(v221) = WORD2(v188);
          LOWORD(v221) = v188;
          BYTE4(v221) = v38;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v218, (unsigned __int16 *)&v221, &v224, (uint64_t)&v225, *(double *)&v188, *(double *)&v37, *(double *)&v18, v19, (int8x8_t)v20);
          WORD1(v228[0]) = WORD2(v188);
          LOWORD(v228[0]) = v188;
          BYTE4(v228[0]) = v39;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v218, (unsigned __int16 *)v228, (char *)&v213, (uint64_t)&v221, v40, v41, v42, v43, v44);
          v38 = v186;
        }
        if (~WORD2(v38))
        {
          v45 = BYTE6(v38);
          LOBYTE(v213) = BYTE4(v38);
          v224 = BYTE6(v38);
          WORD1(v221) = WORD2(v188);
          LOWORD(v221) = v188;
          BYTE4(v221) = BYTE4(v38);
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v218, (unsigned __int16 *)&v221, &v224, (uint64_t)&v225, *(double *)&v188, *(double *)&v37, *(double *)&v18, v19, (int8x8_t)v20);
          WORD1(v228[0]) = WORD2(v188);
          LOWORD(v228[0]) = v188;
          BYTE4(v228[0]) = v45;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v218, (unsigned __int16 *)v228, (char *)&v213, (uint64_t)&v221, v46, v47, v48, v49, v50);
          v38 = v186;
        }
        v51 = 0;
        v17 = v182;
        v26 = *(float *)&v182;
        do
        {
          v203 = v38;
          v52 = *(_WORD *)((unint64_t)&v203 & 0xFFFFFFFFFFFFFFF9 | (2 * (v51 & 3)));
          if ((_BYTE)v52 == 0xFF)
            break;
          v53 = (int8x8_t)v188;
          if ((v52 - 1) <= 1u)
          {
            v54 = (_DWORD *)((unint64_t)&v202 | (4 * ((v52 & 0xFD) == 0)));
            v202 = v188;
            ++*v54;
            v53 = (int8x8_t)v202;
          }
          HIWORD(v201) = v53.i16[2];
          LOWORD(v201) = v53.i16[0];
          v55 = (uint32x2_t)vand_s8(v53, (int8x8_t)0xFFFF0000FFFFLL);
          HIDWORD(v56) = v184.i32[1];
          v199 = v184;
          LODWORD(v56) = *(_DWORD *)((unint64_t)&v199 | (4 * (((_BYTE)v52 + 1) & 3)));
          if ((v52 & 0xFE) == 2)
            LODWORD(v19) = *(_DWORD *)((unint64_t)&v199 | (4 * (((_BYTE)v52 + 1) & 3)));
          else
            LODWORD(v19) = *(_DWORD *)((unint64_t)&v199 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
          if ((v52 & 0xFE) == 2)
            LODWORD(v56) = *(_DWORD *)((unint64_t)&v199 & 0xFFFFFFFFFFFFFFF3 | (4 * (v52 & 3)));
          *(float *)&v56 = *(float *)&v19 / (float)(*(float *)&v19 - *(float *)&v56);
          v57 = (v52 & 0xFD) != 0;
          v221 = (__int16 *)(v201 | (unint64_t)(v57 << 32));
          *(float32x2_t *)&v200 = vmla_f32(a5, v11, vcvt_f32_u32(v55));
          *(float *)((unint64_t)&v200 | (4 * v57)) = *(float *)((unint64_t)&v200 | (4 * v57))
                                                          + (float)(*(float *)&v56 * *(float *)&v183);
          v228[0] = v200;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_(v217, (unsigned __int16 *)&v221, v228, (uint64_t)&v225, v200, v56, v183, v19, (int8x8_t)v20);
          v58 = v51++;
          v38 = v186;
        }
        while (v58 < 3);
        if (++v27 == v179)
          goto LABEL_31;
      }
LABEL_173:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_174:
      abort();
    }
LABEL_32:
    v221 = 0;
    v222 = 0;
    v223 = 0;
    v225 = &v218;
    if ((unint64_t)v219 >= 0x10)
    {
      v59 = 0;
      v60 = (unint64_t)v219 >> 4;
      v61.i32[1] = -2143281136;
      v17 = 4.74803907e-38;
      while (1)
      {
        v18 = (float32x2_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v218 + v59)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
        if (v18.i16[0] != -1)
          break;
        v59 += 16;
        if (!--v60)
          goto LABEL_63;
      }
      v62 = __clz(__rbit64((unsigned __int16)~v18.i16[0])) + v59;
      v226 = (unsigned __int16)~v18.i16[0];
      v227 = v62;
      if (v62 != -1)
      {
        v63 = 0;
        do
        {
          v64 = (uint64_t *)(*((_QWORD *)v225 + 1) + 12 * v62);
          v65 = *v64;
          v61.i32[0] = *v64;
          v66 = (HIDWORD(*v64) & 0xFD) != 1;
          v67 = BYTE4(*v64) - 3;
          v198 = vmovl_u16(v61).u64[0];
          v68 = *(_DWORD *)((unint64_t)&v198 | (4 * v66));
          v69 = v67 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v198 | (4 * v66)) == 0;
          if (v69
            || v67 >= 0xFFFFFFFE
            && (v197 = v176, *(_DWORD *)((unint64_t)&v197 | (4 * v66)) - 1 <= (unsigned __int16)v68))
          {
            if (v63 >= v223)
            {
              v70 = (v63 - (char *)v221) >> 3;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_174;
              v71 = (v223 - (char *)v221) >> 2;
              if (v71 <= v70 + 1)
                v71 = v70 + 1;
              if ((unint64_t)(v223 - (char *)v221) >= 0x7FFFFFFFFFFFFFF8)
                v72 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v72 = v71;
              if (v72)
              {
                v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v223, v72);
                v65 = *v64;
              }
              else
              {
                v73 = 0;
              }
              v74 = &v73[8 * v70];
              *(_QWORD *)v74 = v65;
              v63 = v74 + 8;
              v76 = v221;
              v75 = v222;
              if (v222 != v221)
              {
                do
                {
                  v77 = *((_QWORD *)v75 - 1);
                  v75 -= 4;
                  *((_QWORD *)v74 - 1) = v77;
                  v74 -= 8;
                }
                while (v75 != v76);
                v75 = v221;
              }
              v221 = (__int16 *)v74;
              v222 = (__int16 *)v63;
              v223 = &v73[8 * v72];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v63 = v65;
              v63 += 8;
            }
            v222 = (__int16 *)v63;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v225);
          v62 = v227;
        }
        while (v227 != -1);
      }
    }
LABEL_63:
    if (*((_QWORD *)&v219 + 1))
    {
      v187 = (uint64_t)(a3 + 2);
      v78 = (int8x8_t)0x8040201008040201;
      v79 = vdup_n_s32(0x7F800000u);
      do
      {
        v80 = v218;
        if ((unint64_t)v219 >= 0x10)
        {
          v82 = 0;
          v81 = (unint64_t)v219 >> 4;
          v83 = (unint64_t)v219 >> 4;
          while (1)
          {
            v17 = -1.79399301e-307;
            v78 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v218 + v82)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v84 = (unsigned __int16)~v78.i16[0];
            if (v78.i16[0] != -1)
              break;
            v82 += 16;
            if (!--v83)
              goto LABEL_70;
          }
          v85 = __clz(__rbit64(v84)) + v82;
        }
        else
        {
          v81 = 0;
LABEL_70:
          v84 = 0;
          v85 = -1;
        }
        v87 = v221;
        v86 = v222;
        do
        {
          if (v86 == v87)
          {
            if (v85 != -1)
              goto LABEL_81;
            v91 = v173;
            v90 = v174;
            v92 = v173[1];
            goto LABEL_150;
          }
          v86 -= 4;
          v88 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v218, v86, *(double *)&v78, v17, *(double *)&v18, v19, (int8x8_t)v20);
          if (v88 >> 4 >= v81)
          {
            v89 = 0;
          }
          else
          {
            v17 = -1.79399301e-307;
            v78 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v80 + 16 * (v88 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v89 = (unsigned __int16)~v78.i16[0];
          }
          v222 = v86;
        }
        while (v88 == -1);
        v85 = v88;
        v84 = v89;
LABEL_81:
        v91 = v173;
        v90 = v174;
        while (1)
        {
          v93 = (unsigned __int16 *)(*((_QWORD *)&v218 + 1) + 12 * v85);
          v94 = *v93;
          v95 = v93[1];
          v96 = *((unsigned __int8 *)v93 + 4);
          HIDWORD(v228[0]) = 0;
          WORD1(v228[0]) = v95;
          LOWORD(v228[0]) = v94;
          BYTE4(v228[0]) = *((_BYTE *)v93 + 8);
          v225 = &v218;
          v226 = v84;
          v227 = v85;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v225);
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v218, v85);
          v102 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v218, (__int16 *)v228, v97, v98, v99, v100, v101);
          if (v102 != -1)
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v218, v102);
          v107 = COERCE_DOUBLE(__PAIR64__(v95, v94));
          v108 = v96 & 0xFFFFFFFD;
          if ((v96 - 1) <= 1)
          {
            *(double *)&v196 = COERCE_DOUBLE(__PAIR64__(v95, v94));
            ++*(_DWORD *)((unint64_t)&v196 | (4 * (v108 == 0)));
            v107 = *(double *)&v196;
          }
          HIWORD(v195) = WORD2(v107);
          LOWORD(v195) = LOWORD(v107);
          v225 = (__int128 *)(v195 | ((unint64_t)(v108 != 0) << 32));
          S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v217, (__int16 *)&v225, v107, v103, v104, v105, v106);
          v115 = *(int32x2_t *)(v217[1]
                              + 16 * S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                              + 8);
          v117 = v173[1];
          v116 = (unint64_t)v173[2];
          if ((unint64_t)v117 >= v116)
          {
            v118 = v117 - *v173;
            if ((unint64_t)(v118 + 1) >> 61)
              goto LABEL_174;
            v119 = v116 - (_QWORD)*v173;
            v120 = v119 >> 2;
            if (v119 >> 2 <= (unint64_t)(v118 + 1))
              v120 = v118 + 1;
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
              v121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v121 = v120;
            if (v121)
              v122 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v187, v121);
            else
              v122 = 0;
            v123 = &v122[8 * v118];
            *(int32x2_t *)v123 = v115;
            v92 = (int32x2_t *)(v123 + 8);
            v125 = *v173;
            v124 = (char *)v173[1];
            if (v124 != (char *)*v173)
            {
              do
              {
                v126 = *((_QWORD *)v124 - 1);
                v124 -= 8;
                v110.i32[1] = HIDWORD(v126);
                *((_QWORD *)v123 - 1) = v126;
                v123 -= 8;
              }
              while (v124 != (char *)v125);
              v124 = (char *)*v173;
            }
            *v173 = (int32x2_t *)v123;
            v173[1] = v92;
            v173[2] = (int32x2_t *)&v122[8 * v121];
            if (v124)
              operator delete(v124);
          }
          else
          {
            *v117 = v115;
            v92 = v117 + 1;
          }
          v173[1] = v92;
          v127 = v228[0];
          v110.i32[0] = LODWORD(v228[0]);
          *(_QWORD *)&v128 = vmovl_u16(v110).u64[0];
          v129 = (BYTE4(v228[0]) & 0xFD) != 1;
          v194 = v128;
          v130 = *(_DWORD *)((unint64_t)&v194 | (4 * v129));
          if (BYTE4(v228[0]) - 3 <= 0xFFFFFFFD
            && (unsigned __int16)*(_DWORD *)((unint64_t)&v194 | (4 * v129)) == 0)
          {
            break;
          }
          if (BYTE4(v228[0]) - 3 >= 0xFFFFFFFE)
          {
            v111 = *(double *)&v176;
            v193 = v176;
            if (*(_DWORD *)((unint64_t)&v193 | (4 * v129)) - 1 <= (unsigned __int16)v130)
              break;
            v132 = 1;
          }
          else
          {
            v132 = 0xFFFF;
          }
          v191 = v128;
          *(_DWORD *)((unint64_t)&v191 | (4 * v129)) = v132 + v130;
          HIWORD(v192) = WORD2(v191);
          LOWORD(v192) = LOWORD(v191);
          v225 = (__int128 *)((*(_QWORD *)&v127 + 0x200000000) & 0x300000000 | v192);
          v133 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v218, (__int16 *)&v225, v191, v111, v112, v113, v114);
          v85 = v133;
          if (v133 >> 4 >= (unint64_t)v219 >> 4)
          {
            v84 = 0;
          }
          else
          {
            v17 = -1.79399301e-307;
            v78 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v218 + 16 * (v133 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v84 = (unsigned __int16)~v78.i16[0];
          }
          if (v133 == -1)
            goto LABEL_150;
        }
        v225 = (__int128 *)(LODWORD(v228[0]) | 0xFF00000000);
        v134 = BYTE4(v228[0]) & 0xFD;
        if (BYTE4(v228[0]) - 1 < 2)
        {
          v190 = v128;
          ++*(_DWORD *)((unint64_t)&v190 | (4 * (v134 == 0)));
          v128 = v190;
        }
        HIWORD(v189) = WORD2(v128);
        LOWORD(v189) = LOWORD(v128);
        v213 = v189 | ((unint64_t)(v134 != 0) << 32);
        v135 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v217, (__int16 *)&v213, v128, v111, v112, v113, v114);
        v136 = *(int32x2_t *)(v217[1] + 16 * v135 + 8);
        v138 = v173[1];
        v137 = (unint64_t)v173[2];
        if ((unint64_t)v138 < v137)
        {
          *v138 = v136;
          v139 = v138 + 1;
          goto LABEL_133;
        }
        v140 = v138 - *v173;
        if ((unint64_t)(v140 + 1) >> 61)
          goto LABEL_174;
        v141 = v137 - (_QWORD)*v173;
        v142 = v141 >> 2;
        if (v141 >> 2 <= (unint64_t)(v140 + 1))
          v142 = v140 + 1;
        if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
          v143 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v143 = v142;
        if (v143)
          v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v187, v143);
        else
          v144 = 0;
        v145 = (int32x2_t *)&v144[8 * v140];
        *v145 = v136;
        v139 = v145 + 1;
        v147 = *v173;
        v146 = (char *)v173[1];
        if (v146 != (char *)*v173)
        {
          do
          {
            v148 = *(int8x8_t *)(v146 - 8);
            v146 -= 8;
            v78 = v148;
            v145[-1] = (int32x2_t)v148;
            --v145;
          }
          while (v146 != (char *)v147);
          v146 = (char *)*v173;
        }
        *v173 = v145;
        v173[1] = v139;
        v173[2] = (int32x2_t *)&v144[8 * v143];
        if (v146)
          operator delete(v146);
LABEL_133:
        v173[1] = v139;
        v149 = (unint64_t)v173[2];
        if ((unint64_t)v139 < v149)
        {
          *v139 = v79;
          v92 = v139 + 1;
          goto LABEL_149;
        }
        v150 = v139 - *v173;
        if ((unint64_t)(v150 + 1) >> 61)
          goto LABEL_174;
        v151 = v149 - (_QWORD)*v173;
        v152 = v151 >> 2;
        if (v151 >> 2 <= (unint64_t)(v150 + 1))
          v152 = v150 + 1;
        if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
          v153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v153 = v152;
        if (v153)
          v154 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v187, v153);
        else
          v154 = 0;
        v155 = (int32x2_t *)&v154[8 * v150];
        *v155 = v79;
        v92 = v155 + 1;
        v157 = *v173;
        v156 = (char *)v173[1];
        if (v156 != (char *)*v173)
        {
          do
          {
            v158 = *(int8x8_t *)(v156 - 8);
            v156 -= 8;
            v78 = v158;
            v155[-1] = (int32x2_t)v158;
            --v155;
          }
          while (v156 != (char *)v157);
          v156 = (char *)*v173;
        }
        *v173 = v155;
        v173[1] = v92;
        v173[2] = (int32x2_t *)&v154[8 * v153];
        if (v156)
          operator delete(v156);
LABEL_149:
        v173[1] = v92;
LABEL_150:
        v159 = (unint64_t)((char *)v92 - (char *)*v91) >> 3;
        v161 = v90[1];
        v160 = (unint64_t)v90[2];
        if ((unint64_t)v161 >= v160)
        {
          v163 = *v90;
          v164 = (v161 - *v90) >> 2;
          v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62)
            goto LABEL_174;
          v166 = v160 - (_QWORD)v163;
          if (v166 >> 1 > v165)
            v165 = v166 >> 1;
          if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
            v167 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v167 = v165;
          if (v167)
          {
            v168 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v174 + 2), v167);
            v163 = *v90;
            v161 = v90[1];
          }
          else
          {
            v168 = 0;
          }
          v169 = &v168[4 * v164];
          *(_DWORD *)v169 = v159;
          v162 = v169 + 4;
          while (v161 != v163)
          {
            v170 = *((_DWORD *)v161 - 1);
            v161 -= 4;
            *((_DWORD *)v169 - 1) = v170;
            v169 -= 4;
          }
          *v90 = v169;
          v90[1] = v162;
          v90[2] = &v168[4 * v167];
          if (v163)
            operator delete(v163);
        }
        else
        {
          *(_DWORD *)v161 = v159;
          v162 = v161 + 4;
        }
        v90[1] = v162;
      }
      while (*((_QWORD *)&v219 + 1));
    }
    if (v221)
    {
      v222 = v221;
      operator delete(v221);
    }
    if (v214)
    {
      v215 = v214;
      operator delete(v214);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v217);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v218);
  }
  return result;
}

uint64_t _ZN4geom23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISB_Lh2EvE5valueENS1_9allocatorISG_EEEERNSD_IjNSH_IjEEEE(uint64_t result, unsigned int a2, _QWORD *a3, char **a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t v6;
  uint64_t v8;
  double *v9;
  int v10;
  int8x8_t v11;
  uint64x2_t v12;
  uint64_t v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  int8x8_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x8_t v21;
  uint64x2_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  int8x8_t v27;
  uint64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  int8x8_t v33;
  uint64x2_t v34;
  uint64_t v35;
  double v36;
  int8x16_t v37;
  int8x8_t v38;
  unint64_t v39;
  char v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int8x8_t v45;
  char v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int8x8_t v51;
  unsigned __int8 v52;
  __int16 v53;
  char v54;
  int8x8_t v55;
  _DWORD *v56;
  int8x8_t v57;
  int v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  _BOOL8 v63;
  uint64x2_t v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  uint16x4_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  _BOOL8 v73;
  unsigned int v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  int64x2_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int16 *v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  int64x2_t *v97;
  unsigned __int16 *v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  double v103;
  double v104;
  double v105;
  double v106;
  int8x8_t v107;
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  int8x8_t v112;
  double v113;
  unsigned int v114;
  uint64_t S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP;
  double v116;
  double v117;
  double v118;
  int8x8_t v119;
  int64x2_t v120;
  unint64_t v121;
  int64x2_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  _BOOL8 v133;
  unsigned int v134;
  int v135;
  int v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int64x2_t v141;
  unint64_t v142;
  int64x2_t *v143;
  int64x2_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  __int128 v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  int64x2_t *v160;
  char *v161;
  char *v162;
  int64x2_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  int v175;
  _DWORD *v176;
  _DWORD *v177;
  int v178;
  unsigned int v180;
  int32x2_t v181;
  unsigned __int32 v182;
  unsigned int v183;
  _QWORD *v184;
  float64x2_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  float64_t v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  int64x2_t v194;
  float64_t v195;
  unint64_t v196;
  uint64_t v197;
  float64_t v198;
  float64x2_t v199;
  int64x2_t v200;
  int64x2_t v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t v204;
  double v205;
  unsigned int v206;
  int32x2_t v207;
  uint64_t v208;
  unsigned int v209;
  unint64_t v210;
  int32x2_t v211;
  unint64_t v212;
  float64x2_t v213;
  _OWORD v214[2];
  _OWORD v215[2];
  int v216;
  unint64_t v217;
  unint64_t v218;
  __int8 v219;
  __int8 v220;
  unint64_t v221;
  unint64_t v222;
  int8x8_t v223;
  int8x8_t v224;
  int32x2_t v225;
  int8x8_t v226;
  int32x2_t v227;
  unint64_t v228;
  double *v229;
  double *v230;
  uint64_t v231;
  uint64_t v232[6];
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  __n128 v236;
  char *v237;
  char v238;
  float64x2_t v239;
  uint64_t v240;
  _QWORD v241[3];

  v187 = result;
  a3[1] = *a3;
  a4[1] = *a4;
  v6 = vsubq_f64(a6, a5);
  if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) > 2.22044605e-16)
  {
    v190 = vpminq_f64(v6) / (double)a2;
    v192 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v190, 0);
    v181 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v6, v192))));
    v235 = 0;
    v233 = 0u;
    v234 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v233, 1uLL);
    memset(v232, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v232, 1uLL);
    v227 = v181;
    v8 = *(_QWORD *)&vcgt_u32((uint32x2_t)v181, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v181, 1), (int8x8_t)0xFFFF0000FFFFLL)) & 1;
    v186 = *(unsigned int *)((unint64_t)&v227 & 0xFFFFFFFFFFFFFFFBLL | (4 * v8));
    v229 = 0;
    v230 = 0;
    v231 = 0;
    std::vector<double>::__vallocate[abi:nn180100](&v229, v186 + 1);
    v9 = v230;
    bzero(v230, 8 * (v186 + 1));
    v10 = 0;
    v230 = &v9[v186 + 1];
    do
    {
      v226 = 0;
      *(_DWORD *)((unint64_t)&v226 | (4 * v8)) = v10;
      v11 = vand_s8(v226, (int8x8_t)0xFFFF0000FFFFLL);
      v12.i64[0] = v11.u32[0];
      v12.i64[1] = v11.u32[1];
      v239 = vmlaq_f64(a5, v192, vcvtq_f64_u64(v12));
      v13 = *(_QWORD *)(v187 + 24);
      if (!v13)
        goto LABEL_172;
      v14 = (*(double (**)(uint64_t, float64x2_t *))(*(_QWORD *)v13 + 48))(v13, &v239);
      v229[(unsigned __int16)v10++] = v14;
    }
    while ((unsigned __int16)v10 <= (unsigned __int16)v186);
    v184 = a3;
    v19 = v8 ^ 1;
    v225 = v181;
    v178 = *(_DWORD *)((unint64_t)&v225 | (4 * v19));
    if (v178)
    {
      v20 = 0;
      v185 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v190, 0);
      v176 = (_DWORD *)((unint64_t)&v224 | (4 * v8));
      v177 = (_DWORD *)((unint64_t)&v223 | (4 * v19));
      v188 = v8;
      while (1)
      {
        v223 = 0;
        *v177 = v20 + 1;
        v224 = v223;
        *v176 = 0;
        v21 = vand_s8(v224, (int8x8_t)0xFFFF0000FFFFLL);
        v22.i64[0] = v21.u32[0];
        v22.i64[1] = v21.u32[1];
        v239 = vmlaq_f64(a5, v192, vcvtq_f64_u64(v22));
        v23 = *(_QWORD *)(v187 + 24);
        if (!v23)
          goto LABEL_172;
        v180 = v20 + 1;
        v24 = (*(double (**)(uint64_t, float64x2_t *))(*(_QWORD *)v23 + 48))(v23, &v239);
        v25 = v24;
        if ((_WORD)v186)
          break;
LABEL_31:
        v229[v186] = v25;
        v20 = v180;
        if ((unsigned __int16)v180 >= (unsigned __int16)v178)
          goto LABEL_32;
      }
      v26 = 0;
      v183 = v20;
      LODWORD(v24) = v20;
      v182 = vmovl_u16(*(uint16x4_t *)&v24).u32[0];
      while (1)
      {
        if ((_DWORD)v8)
        {
          v27 = vand_s8((int8x8_t)__PAIR64__(v26, v182), (int8x8_t)0xFFFF0000FFFFLL);
          v28.i64[0] = v27.u32[0];
          v28.i64[1] = v27.u32[1];
          v29 = vmlaq_f64(a5, v192, vcvtq_f64_u64(v28));
          v202 = __PAIR64__(v26, v182);
          v221 = __PAIR64__(v26, v182);
          v30 = *(unsigned __int16 *)((unint64_t)&v221 | (4 * v8));
          v31 = &v229[v30];
          v32 = v25;
        }
        else
        {
          v33 = vand_s8((int8x8_t)__PAIR64__(v183, v26), (int8x8_t)0xFFFF0000FFFFLL);
          v34.i64[0] = v33.u32[0];
          v34.i64[1] = v33.u32[1];
          v29 = vmlaq_f64(a5, v192, vcvtq_f64_u64(v34));
          v202 = __PAIR64__(v183, v26);
          v222 = __PAIR64__(v183, v26);
          v30 = *(unsigned __int16 *)((unint64_t)&v222 | (4 * v8));
          v31 = &v229[v30];
          v32 = v229[v26 + 1];
        }
        v198 = *v31;
        v239 = vaddq_f64(v185, v29);
        v35 = *(_QWORD *)(v187 + 24);
        if (!v35)
          break;
        v195 = v32;
        v17.f64[0] = (*(double (**)(uint64_t, float64x2_t *))(*(_QWORD *)v35 + 48))(v35, &v239);
        v36 = v25;
        if ((_DWORD)v8)
          v36 = v229[WORD2(v202) + 1];
        v229[v30] = v25;
        v189 = v17.f64[0];
        v17.f64[1] = v36;
        v16.f64[0] = v198;
        v16.f64[1] = v195;
        v199 = v16;
        v191 = v17;
        v37 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v16), (int32x4_t)vcgtzq_f64(v17))), (int8x8_t)0x8000400020001));
        v38 = (int8x8_t)vextq_s8(v37, v37, 8uLL).u64[0];
        *(int8x8_t *)v37.i8 = vorr_s8(*(int8x8_t *)v37.i8, v38);
        v220 = v37.i8[4];
        v219 = v37.i8[0];
                               + (((unint64_t)(vaddvq_f64(vaddq_f64(v16, v17)) * 0.25 > 0.0) << 6) | (4 * (v37.i8[0] | v37.i8[4]))));
        v39 = vmovl_u8(*(uint8x8_t *)v37.i8).u64[0];
        v196 = v39;
        if (~(unsigned __int16)v39)
        {
          v40 = BYTE2(v39);
          LOBYTE(v228) = v39;
          v238 = BYTE2(v39);
          v236.n128_u16[1] = WORD2(v202);
          v236.n128_u16[0] = v202;
          v236.n128_u8[4] = v39;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v233, (unsigned __int16 *)&v236, &v238, (uint64_t)&v239, *(double *)&v202, *(double *)&v38, v16.f64[0], v17.f64[0], v18);
          WORD1(v241[0]) = WORD2(v202);
          LOWORD(v241[0]) = v202;
          v8 = v188;
          BYTE4(v241[0]) = v40;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v233, (unsigned __int16 *)v241, (char *)&v228, (uint64_t)&v236, v41, v42, v43, v44, v45);
          v39 = v196;
        }
        if (~WORD2(v39))
        {
          v46 = BYTE6(v39);
          LOBYTE(v228) = BYTE4(v39);
          v238 = BYTE6(v39);
          v236.n128_u16[1] = WORD2(v202);
          v236.n128_u16[0] = v202;
          v236.n128_u8[4] = BYTE4(v39);
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v233, (unsigned __int16 *)&v236, &v238, (uint64_t)&v239, *(double *)&v202, *(double *)&v38, v16.f64[0], v17.f64[0], v18);
          WORD1(v241[0]) = WORD2(v202);
          LOWORD(v241[0]) = v202;
          v8 = v188;
          BYTE4(v241[0]) = v46;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v233, (unsigned __int16 *)v241, (char *)&v228, (uint64_t)&v236, v47, v48, v49, v50, v51);
          v39 = v196;
        }
        v52 = 0;
        v15 = v189;
        v25 = v189;
        do
        {
          v218 = v39;
          v53 = *(_WORD *)((unint64_t)&v218 & 0xFFFFFFFFFFFFFFF9 | (2 * (v52 & 3)));
          if ((_BYTE)v53 == 0xFF)
            break;
          v54 = v53 & 0xFD;
          v55 = (int8x8_t)v202;
          if ((v53 - 1) <= 1u)
          {
            v56 = (_DWORD *)((unint64_t)&v217 | (4 * ((v53 & 0xFD) == 0)));
            v217 = v202;
            ++*v56;
            v55 = (int8x8_t)v217;
          }
          HIWORD(v216) = v55.i16[2];
          LOWORD(v216) = v55.i16[0];
          v57 = vand_s8(v55, (int8x8_t)0xFFFF0000FFFFLL);
          v58 = v53 & 0xFE;
          v215[0] = v199;
          v215[1] = v191;
          v59 = *((double *)v215 + (((_BYTE)v53 + 1) & 3));
          v214[0] = v199;
          v214[1] = v191;
          v60 = v53 & 3;
          if (v58 == 2)
            v61 = v59;
          else
            v61 = *((double *)v214 + v60);
          if (v58 == 2)
            v59 = *((double *)v214 + v60);
          v62 = v61 / (v61 - v59);
          v63 = v54 != 0;
          LODWORD(v241[0]) = v216;
          HIDWORD(v241[0]) = v63;
          v64.i64[0] = v57.u32[0];
          v64.i64[1] = v57.u32[1];
          v213 = vmlaq_f64(a5, v192, vcvtq_f64_u64(v64));
          *(double *)((unint64_t)&v213 | (8 * v63)) = *(double *)((unint64_t)&v213 | (8 * v63))
                                                           + v62 * v190;
          v236 = (__n128)v213;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_(v232, (unsigned __int16 *)v241, &v236, (uint64_t)&v239, v213.f64[0], v62, v190, v192.f64[0], v18);
          v65 = v52++;
          v39 = v196;
        }
        while (v65 < 3);
        if (++v26 == v186)
          goto LABEL_31;
      }
LABEL_172:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_173:
      abort();
    }
LABEL_32:
    v236 = 0uLL;
    v237 = 0;
    *(_QWORD *)&v239.f64[0] = &v233;
    if ((unint64_t)v234 >= 0x10)
    {
      v66 = 0;
      v67 = (unint64_t)v234 >> 4;
      v68.i32[1] = -2143281136;
      v15 = 4.74803907e-38;
      while (1)
      {
        *(int8x8_t *)&v16.f64[0] = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v233 + v66)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
        if (LOWORD(v16.f64[0]) != 0xFFFF)
          break;
        v66 += 16;
        if (!--v67)
          goto LABEL_63;
      }
      v69 = __clz(__rbit64((unsigned __int16)~LOWORD(v16.f64[0]))) + v66;
      *(_QWORD *)&v239.f64[1] = (unsigned __int16)~LOWORD(v16.f64[0]);
      v240 = v69;
      if (v69 != -1)
      {
        v70 = 0;
        do
        {
          v71 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)&v239.f64[0] + 8) + 12 * v69);
          v72 = *v71;
          v68.i32[0] = *v71;
          v73 = (HIDWORD(*v71) & 0xFD) != 1;
          v74 = BYTE4(*v71) - 3;
          v212 = vmovl_u16(v68).u64[0];
          v75 = *(_DWORD *)((unint64_t)&v212 | (4 * v73));
          v76 = v74 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v212 | (4 * v73)) == 0;
          if (v76
            || v74 >= 0xFFFFFFFE
            && (v211 = v181, *(_DWORD *)((unint64_t)&v211 | (4 * v73)) - 1 <= (unsigned __int16)v75))
          {
            if (v70 >= v237)
            {
              v77 = (uint64_t)&v70[-v236.n128_u64[0]] >> 3;
              if ((unint64_t)(v77 + 1) >> 61)
                goto LABEL_173;
              v78 = (uint64_t)&v237[-v236.n128_u64[0]] >> 2;
              if (v78 <= v77 + 1)
                v78 = v77 + 1;
              if ((unint64_t)&v237[-v236.n128_u64[0]] >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v78;
              if (v79)
              {
                v80 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v237, v79);
                v72 = *v71;
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[8 * v77];
              *(_QWORD *)v81 = v72;
              v70 = v81 + 8;
              v82 = (char *)v236.n128_u64[1];
              v83 = v236.n128_u64[0];
              if (v236.n128_u64[1] != v236.n128_u64[0])
              {
                do
                {
                  v84 = *((_QWORD *)v82 - 1);
                  v82 -= 8;
                  *((_QWORD *)v81 - 1) = v84;
                  v81 -= 8;
                }
                while (v82 != (char *)v83);
                v82 = (char *)v236.n128_u64[0];
              }
              v236.n128_u64[0] = (unint64_t)v81;
              v236.n128_u64[1] = (unint64_t)v70;
              v237 = &v80[8 * v79];
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_QWORD *)v70 = v72;
              v70 += 8;
            }
            v236.n128_u64[1] = (unint64_t)v70;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v239);
          v69 = v240;
        }
        while (v240 != -1);
      }
    }
LABEL_63:
    if (*((_QWORD *)&v234 + 1))
    {
      v197 = (uint64_t)(v184 + 2);
      v85 = vdupq_n_s64(0x7FF0000000000000uLL);
      v194 = v85;
      do
      {
        v86 = v233;
        if ((unint64_t)v234 >= 0x10)
        {
          v88 = 0;
          v87 = (unint64_t)v234 >> 4;
          v89 = (unint64_t)v234 >> 4;
          while (1)
          {
            v15 = -1.79399301e-307;
            *(int8x8_t *)v85.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v233 + v88)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v90 = (unsigned __int16)~v85.i16[0];
            if (v85.i16[0] != -1)
              break;
            v88 += 16;
            if (!--v89)
              goto LABEL_70;
          }
          v91 = __clz(__rbit64(v90)) + v88;
        }
        else
        {
          v87 = 0;
LABEL_70:
          v90 = 0;
          v91 = -1;
        }
        v93 = (__int16 *)v236.n128_u64[1];
        v92 = v236.n128_u64[0];
        while (v93 != (__int16 *)v92)
        {
          v93 -= 4;
          v94 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v233, v93, *(double *)v85.i64, v15, v16.f64[0], v17.f64[0], v18);
          if (v94 >> 4 >= v87)
          {
            v95 = 0;
          }
          else
          {
            v15 = -1.79399301e-307;
            *(int8x8_t *)v85.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v86 + 16 * (v94 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v95 = (unsigned __int16)~v85.i16[0];
          }
          v236.n128_u64[1] = (unint64_t)v93;
          if (v94 != -1)
          {
            v91 = v94;
            v90 = v95;
            goto LABEL_81;
          }
        }
        if (v91 == -1)
        {
          v96 = v184;
          v97 = (int64x2_t *)v184[1];
        }
        else
        {
          while (1)
          {
LABEL_81:
            v98 = (unsigned __int16 *)(*((_QWORD *)&v233 + 1) + 12 * v91);
            v99 = *v98;
            v100 = v98[1];
            v101 = *((unsigned __int8 *)v98 + 4);
            HIDWORD(v241[0]) = 0;
            WORD1(v241[0]) = v100;
            LOWORD(v241[0]) = v99;
            v102 = *((unsigned __int8 *)v98 + 8);
            BYTE4(v241[0]) = *((_BYTE *)v98 + 8);
            *(_QWORD *)&v239.f64[0] = &v233;
            *(_QWORD *)&v239.f64[1] = v90;
            v240 = v91;
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v239);
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v233, v91);
            v108 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v233, (__int16 *)v241, v103, v104, v105, v106, v107);
            if (v108 != -1)
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v233, v108);
            v113 = COERCE_DOUBLE(__PAIR64__(v100, v99));
            v114 = v101 & 0xFFFFFFFD;
            if ((v101 - 1) <= 1)
            {
              *(double *)&v210 = COERCE_DOUBLE(__PAIR64__(v100, v99));
              ++*(_DWORD *)((unint64_t)&v210 | (4 * (v114 == 0)));
              v113 = *(double *)&v210;
            }
            v96 = v184;
            HIWORD(v209) = WORD2(v113);
            LOWORD(v209) = LOWORD(v113);
            *(_QWORD *)&v239.f64[0] = v209 | ((unint64_t)(v114 != 0) << 32);
            S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v232, (__int16 *)&v239, v113, v109, v110, v111, v112);
            v120 = *(int64x2_t *)(v232[1]
                                + 32 * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                + 16);
            v122 = (int64x2_t *)v184[1];
            v121 = v184[2];
            if ((unint64_t)v122 >= v121)
            {
              v123 = ((uint64_t)v122->i64 - *v184) >> 4;
              if ((unint64_t)(v123 + 1) >> 60)
                goto LABEL_173;
              v124 = v121 - *v184;
              v125 = v124 >> 3;
              if (v124 >> 3 <= (unint64_t)(v123 + 1))
                v125 = v123 + 1;
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0)
                v126 = 0xFFFFFFFFFFFFFFFLL;
              else
                v126 = v125;
              if (v126)
              {
                v200 = *(int64x2_t *)(v232[1]
                                    + 32
                                    * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                    + 16);
                v127 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v197, v126);
                v120 = v200;
              }
              else
              {
                v127 = 0;
              }
              v128 = &v127[16 * v123];
              *(int64x2_t *)v128 = v120;
              v97 = (int64x2_t *)(v128 + 16);
              v130 = (char *)*v184;
              v129 = (char *)v184[1];
              if (v129 != (char *)*v184)
              {
                do
                {
                  v131 = *((_OWORD *)v129 - 1);
                  v129 -= 16;
                  v120.i32[1] = DWORD1(v131);
                  *((_OWORD *)v128 - 1) = v131;
                  v128 -= 16;
                }
                while (v129 != v130);
                v129 = (char *)*v184;
              }
              *v184 = v128;
              v184[1] = v97;
              v184[2] = &v127[16 * v126];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *v122 = v120;
              v97 = v122 + 1;
            }
            v184[1] = v97;
            v132 = v241[0];
            v120.i32[0] = v241[0];
            v120.i64[0] = vmovl_u16(*(uint16x4_t *)v120.i8).u64[0];
            v133 = (BYTE4(v241[0]) & 0xFD) != 1;
            v134 = BYTE4(v241[0]) - 3;
            v208 = v120.i64[0];
            v135 = *(_DWORD *)((unint64_t)&v208 | (4 * v133));
            if (v134 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v208 | (4 * v133)) == 0)
              break;
            if (v134 >= 0xFFFFFFFE)
            {
              v116 = *(double *)&v181;
              v207 = v181;
              if (*(_DWORD *)((unint64_t)&v207 | (4 * v133)) - 1 <= (unsigned __int16)v135)
                break;
              v137 = 1;
            }
            else
            {
              v137 = 0xFFFF;
            }
            v205 = *(double *)v120.i64;
            *(_DWORD *)((unint64_t)&v205 | (4 * v133)) = v137 + v135;
            HIWORD(v206) = WORD2(v205);
            LOWORD(v206) = LOWORD(v205);
            *(_QWORD *)&v239.f64[0] = (v132 + 0x200000000) & 0x300000000 | v206;
            v138 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v233, (__int16 *)&v239, v205, v116, v117, v118, v119);
            v91 = v138;
            if (v138 >> 4 >= (unint64_t)v234 >> 4)
            {
              v90 = 0;
            }
            else
            {
              v15 = -1.79399301e-307;
              *(int8x8_t *)v85.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v233 + 16 * (v138 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
              v90 = (unsigned __int16)~v85.i16[0];
            }
            if (v138 == -1)
              goto LABEL_149;
          }
          *(_QWORD *)&v239.f64[0] = LODWORD(v241[0]) | 0xFF00000000;
          v139 = v102 & 0xFFFFFFFD;
          if ((v102 - 1) < 2)
          {
            v204 = v120.i64[0];
            ++*(_DWORD *)((unint64_t)&v204 | (4 * (v139 == 0)));
            v120.i64[0] = v204;
          }
          HIWORD(v203) = v120.i16[2];
          LOWORD(v203) = v120.i16[0];
          v228 = v203 | ((unint64_t)(v139 != 0) << 32);
          v140 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v232, (__int16 *)&v228, *(double *)v120.i64, v116, v117, v118, v119);
          v141 = *(int64x2_t *)(v232[1] + 32 * v140 + 16);
          v143 = (int64x2_t *)v184[1];
          v142 = v184[2];
          if ((unint64_t)v143 >= v142)
          {
            v145 = ((uint64_t)v143->i64 - *v184) >> 4;
            if ((unint64_t)(v145 + 1) >> 60)
              goto LABEL_173;
            v146 = v142 - *v184;
            v147 = v146 >> 3;
            if (v146 >> 3 <= (unint64_t)(v145 + 1))
              v147 = v145 + 1;
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0)
              v148 = 0xFFFFFFFFFFFFFFFLL;
            else
              v148 = v147;
            if (v148)
            {
              v201 = *(int64x2_t *)(v232[1] + 32 * v140 + 16);
              v149 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v197, v148);
              v141 = v201;
            }
            else
            {
              v149 = 0;
            }
            v150 = &v149[16 * v145];
            *(int64x2_t *)v150 = v141;
            v144 = (int64x2_t *)(v150 + 16);
            v152 = (char *)*v184;
            v151 = (char *)v184[1];
            if (v151 != (char *)*v184)
            {
              do
              {
                v153 = *((_OWORD *)v151 - 1);
                v151 -= 16;
                *((_OWORD *)v150 - 1) = v153;
                v150 -= 16;
              }
              while (v151 != v152);
              v151 = (char *)*v184;
            }
            *v184 = v150;
            v184[1] = v144;
            v184[2] = &v149[16 * v148];
            if (v151)
              operator delete(v151);
          }
          else
          {
            *v143 = v141;
            v144 = v143 + 1;
          }
          v184[1] = v144;
          v154 = v184[2];
          if ((unint64_t)v144 >= v154)
          {
            v155 = ((uint64_t)v144->i64 - *v184) >> 4;
            if ((unint64_t)(v155 + 1) >> 60)
              goto LABEL_173;
            v156 = v154 - *v184;
            v157 = v156 >> 3;
            if (v156 >> 3 <= (unint64_t)(v155 + 1))
              v157 = v155 + 1;
            if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF0)
              v158 = 0xFFFFFFFFFFFFFFFLL;
            else
              v158 = v157;
            if (v158)
              v159 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v197, v158);
            else
              v159 = 0;
            v160 = (int64x2_t *)&v159[16 * v155];
            v85.i64[0] = v194.i64[0];
            *v160 = v194;
            v97 = v160 + 1;
            v162 = (char *)*v184;
            v161 = (char *)v184[1];
            if (v161 != (char *)*v184)
            {
              do
              {
                v163 = *((int64x2_t *)v161 - 1);
                v161 -= 16;
                v85.i64[0] = v163.i64[0];
                v160[-1] = v163;
                --v160;
              }
              while (v161 != v162);
              v161 = (char *)*v184;
            }
            *v184 = v160;
            v184[1] = v97;
            v184[2] = &v159[16 * v158];
            if (v161)
              operator delete(v161);
          }
          else
          {
            v85.i64[0] = v194.i64[0];
            *v144 = v194;
            v97 = v144 + 1;
          }
          v184[1] = v97;
        }
LABEL_149:
        v164 = ((unint64_t)v97 - *v96) >> 4;
        v166 = a4[1];
        v165 = (unint64_t)a4[2];
        if ((unint64_t)v166 >= v165)
        {
          v168 = *a4;
          v169 = (v166 - *a4) >> 2;
          v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62)
            goto LABEL_173;
          v171 = v165 - (_QWORD)v168;
          if (v171 >> 1 > v170)
            v170 = v171 >> 1;
          if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
            v172 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v172 = v170;
          if (v172)
          {
            v173 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v172);
            v168 = *a4;
            v166 = a4[1];
          }
          else
          {
            v173 = 0;
          }
          v174 = &v173[4 * v169];
          *(_DWORD *)v174 = v164;
          v167 = v174 + 4;
          while (v166 != v168)
          {
            v175 = *((_DWORD *)v166 - 1);
            v166 -= 4;
            *((_DWORD *)v174 - 1) = v175;
            v174 -= 4;
          }
          *a4 = v174;
          a4[1] = v167;
          a4[2] = &v173[4 * v172];
          if (v168)
            operator delete(v168);
        }
        else
        {
          *(_DWORD *)v166 = v164;
          v167 = v166 + 4;
        }
        a4[1] = v167;
      }
      while (*((_QWORD *)&v234 + 1));
    }
    if (v236.n128_u64[0])
    {
      v236.n128_u64[1] = v236.n128_u64[0];
      operator delete((void *)v236.n128_u64[0]);
    }
    if (v229)
    {
      v230 = v229;
      operator delete(v229);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v232);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v233);
  }
  return result;
}

uint64_t geom_marching_squares_with_default_options_2f(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float32x2_t a6, float32x2_t a7)
{
  int32x2_t **v13;
  char **v14;
  _QWORD v16[2];

  v13 = (int32x2_t **)geom::collection_to_vector<float>(a4);
  v14 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v13, v14, a6, a7);
}

uint64_t _ZN4geom23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE(uint64_t result, unsigned int a2, int32x2_t **a3, char **a4, float32x2_t a5, float32x2_t a6)
{
  float32x2_t v7;
  float32x2_t v8;
  uint64_t v11;
  float32x2_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  int v17;
  float v18;
  double v19;
  float32x2_t v20;
  double v21;
  float32x2_t v22;
  uint64_t v23;
  __int32 v24;
  float32x2_t v25;
  uint16x4_t v26;
  float v27;
  uint64_t v28;
  float32x2_t v29;
  uint64_t v30;
  float *v31;
  float32x2_t v32;
  float v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x8_t v36;
  unint64_t v37;
  char v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int8x8_t v43;
  char v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int8x8_t v49;
  unsigned __int8 v50;
  __int16 v51;
  int8x8_t v52;
  _DWORD *v53;
  uint32x2_t v54;
  double v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint16x4_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  _BOOL8 v65;
  unsigned int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  __int16 *v74;
  __int16 *v75;
  uint64_t v76;
  int8x8_t v77;
  int32x2_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int16 *v85;
  __int16 *v86;
  unint64_t v87;
  unint64_t v88;
  int32x2_t **v89;
  int32x2_t *v90;
  char **v91;
  unsigned __int16 *v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  double v96;
  double v97;
  double v98;
  double v99;
  int8x8_t v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  int8x8_t v105;
  double v106;
  unsigned int v107;
  uint64_t S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP;
  uint16x4_t v109;
  double v110;
  double v111;
  double v112;
  int8x8_t v113;
  int32x2_t v114;
  unint64_t v115;
  int32x2_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  int32x2_t *v124;
  uint64_t v125;
  double v126;
  double v127;
  _BOOL8 v128;
  int v129;
  int v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  int32x2_t v135;
  unint64_t v136;
  int32x2_t *v137;
  int32x2_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  int32x2_t *v144;
  char *v145;
  int32x2_t *v146;
  int8x8_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  int32x2_t *v154;
  char *v155;
  int32x2_t *v156;
  int8x8_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  int v169;
  _DWORD *v170;
  int v171;
  char **v172;
  __int32 v173;
  int32x2_t v174;
  unsigned __int32 v175;
  int32x2_t **v176;
  __int32 v177;
  uint64_t v178;
  unsigned int v179;
  double v180;
  double v181;
  float32x4_t v182;
  double v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unsigned int v187;
  double v188;
  double v189;
  unsigned int v190;
  int32x2_t v191;
  double v192;
  unsigned int v193;
  unint64_t v194;
  int32x2_t v195;
  unint64_t v196;
  float32x4_t v197;
  double v198;
  unsigned int v199;
  unint64_t v200;
  unint64_t v201;
  __int8 v202;
  __int8 v203;
  unint64_t v204;
  unint64_t v205;
  int8x8_t v206;
  int8x8_t v207;
  int32x2_t v208;
  int8x8_t v209;
  int32x2_t v210;
  unint64_t v211;
  float *v212;
  float *v213;
  uint64_t v214;
  uint64_t v215[6];
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  __int16 *v219;
  __int16 *v220;
  char *v221;
  char v222;
  __int128 *v223;
  unint64_t v224;
  uint64_t v225;
  double v226[3];

  a3[1] = *a3;
  a4[1] = *a4;
  v7 = vsub_f32(a6, a5);
  v8 = vmul_f32(v7, v7);
  if (sqrtf(vaddv_f32(v8)) > 0.00000011921)
  {
    v11 = result;
    v8.f32[0] = fminf(v7.f32[0], v7.f32[1]) / (float)a2;
    v181 = *(double *)&v8;
    v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
    v174 = vcvt_s32_f32(vrndp_f32(vdiv_f32(v7, v12)));
    v218 = 0;
    v217 = 0u;
    v216 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v216, 1uLL);
    memset(v215, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v215, 1uLL);
    v13 = vcgt_u32((uint32x2_t)v174, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v174, 1), (int8x8_t)0xFFFF0000FFFFLL)).u8[0];
    v210 = v174;
    v14 = *(unsigned int *)((unint64_t)&v210 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1)));
    v15 = v13 & 1;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    std::vector<float>::__vallocate[abi:nn180100](&v212, v14 + 1);
    v16 = v213;
    bzero(v213, 4 * (v14 + 1));
    v17 = 0;
    v213 = &v16[v14 + 1];
    do
    {
      v209 = 0;
      *(_DWORD *)((unint64_t)&v209 | (4 * v15)) = v17;
      v18 = (*(float (**)(_QWORD, double))v11)(*(_QWORD *)(v11 + 8), COERCE_DOUBLE(vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8(v209, (int8x8_t)0xFFFF0000FFFFLL)))));
      v212[(unsigned __int16)v17++] = v18;
    }
    while ((unsigned __int16)v17 <= (unsigned __int16)v14);
    v176 = a3;
    v172 = a4;
    v23 = v15 ^ 1;
    v208 = v174;
    v171 = *(_DWORD *)((unint64_t)&v208 | (4 * v23));
    if (v171)
    {
      v24 = 0;
      v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v181, 0);
      v170 = (_DWORD *)((unint64_t)&v206 | (4 * v23));
      v178 = v11;
      do
      {
        v206 = 0;
        v173 = v24 + 1;
        *v170 = v24 + 1;
        v207 = v206;
        *(_DWORD *)((unint64_t)&v207 | (4 * v15)) = 0;
        v27 = (*(float (**)(_QWORD, double))v11)(*(_QWORD *)(v11 + 8), COERCE_DOUBLE(vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8(v207, (int8x8_t)0xFFFF0000FFFFLL)))));
        if ((_WORD)v14)
        {
          v28 = 0;
          v26.i32[0] = v24;
          v175 = vmovl_u16(v26).u32[0];
          v177 = v24;
          do
          {
            if ((_DWORD)v15)
            {
              v32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v28, v175), (int8x8_t)0xFFFF0000FFFFLL));
              v29 = vmla_f32(a5, v12, v32);
              v186 = __PAIR64__(v28, v175);
              v204 = __PAIR64__(v28, v175);
              v30 = *(unsigned __int16 *)((unint64_t)&v204 | (4 * v15));
              v31 = &v212[v30];
              v32.f32[0] = v27;
            }
            else
            {
              v32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v24, v28), (int8x8_t)0xFFFF0000FFFFLL));
              v29 = vmla_f32(a5, v12, v32);
              v186 = __PAIR64__(v24, v28);
              v205 = __PAIR64__(v24, v28);
              v30 = *(unsigned __int16 *)((unint64_t)&v205 | (4 * v15));
              v31 = &v212[v30];
              v32.f32[0] = v212[v28 + 1];
            }
            v183 = *(double *)&v32;
            v179 = *(_DWORD *)v31;
            v20.i32[0] = (*(float (**)(_QWORD, double))v178)(*(_QWORD *)(v178 + 8), COERCE_DOUBLE(vadd_f32(v25, v29)));
            v33 = v27;
            if ((_DWORD)v15)
              v33 = v212[WORD2(v186) + 1];
            v212[v30] = v27;
            v22 = (float32x2_t)__PAIR64__(LODWORD(v183), v179);
            v34.i64[0] = __PAIR64__(LODWORD(v183), v179);
            v21 = v183;
            v34.i64[1] = __PAIR64__(LODWORD(v33), v20.u32[0]);
            v182 = v34;
            v180 = *(double *)&v20;
            v20.f32[1] = v33;
            v35 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v34)), (int8x8_t)0x8000400020001));
            v36 = (int8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
            *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, v36);
            v203 = v35.i8[4];
            v202 = v35.i8[0];
                                   + (((unint64_t)((float)(vaddv_f32(vadd_f32(v22, v20)) * 0.25) > 0.0) << 6) | (4 * (v35.i8[0] | v35.i8[4]))));
            v37 = vmovl_u8(*(uint8x8_t *)v35.i8).u64[0];
            v184 = v37;
            if (~(unsigned __int16)v37)
            {
              v38 = BYTE2(v37);
              LOBYTE(v211) = v37;
              v222 = BYTE2(v37);
              WORD1(v219) = WORD2(v186);
              LOWORD(v219) = v186;
              BYTE4(v219) = v37;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)&v219, &v222, (uint64_t)&v223, *(double *)&v186, *(double *)&v36, *(double *)&v20, v21, (int8x8_t)v22);
              WORD1(v226[0]) = WORD2(v186);
              LOWORD(v226[0]) = v186;
              BYTE4(v226[0]) = v38;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)v226, (char *)&v211, (uint64_t)&v219, v39, v40, v41, v42, v43);
              v37 = v184;
            }
            if (~WORD2(v37))
            {
              v44 = BYTE6(v37);
              LOBYTE(v211) = BYTE4(v37);
              v222 = BYTE6(v37);
              WORD1(v219) = WORD2(v186);
              LOWORD(v219) = v186;
              BYTE4(v219) = BYTE4(v37);
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)&v219, &v222, (uint64_t)&v223, *(double *)&v186, *(double *)&v36, *(double *)&v20, v21, (int8x8_t)v22);
              WORD1(v226[0]) = WORD2(v186);
              LOWORD(v226[0]) = v186;
              BYTE4(v226[0]) = v44;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)v226, (char *)&v211, (uint64_t)&v219, v45, v46, v47, v48, v49);
              v37 = v184;
            }
            v50 = 0;
            v19 = v180;
            v27 = *(float *)&v180;
            do
            {
              v201 = v37;
              v51 = *(_WORD *)((unint64_t)&v201 & 0xFFFFFFFFFFFFFFF9 | (2 * (v50 & 3)));
              if ((_BYTE)v51 == 0xFF)
                break;
              v52 = (int8x8_t)v186;
              if ((v51 - 1) <= 1u)
              {
                v53 = (_DWORD *)((unint64_t)&v200 | (4 * ((v51 & 0xFD) == 0)));
                v200 = v186;
                ++*v53;
                v52 = (int8x8_t)v200;
              }
              HIWORD(v199) = v52.i16[2];
              LOWORD(v199) = v52.i16[0];
              v54 = (uint32x2_t)vand_s8(v52, (int8x8_t)0xFFFF0000FFFFLL);
              HIDWORD(v55) = v182.i32[1];
              v197 = v182;
              LODWORD(v55) = *(_DWORD *)((unint64_t)&v197 | (4 * (((_BYTE)v51 + 1) & 3)));
              if ((v51 & 0xFE) == 2)
                LODWORD(v21) = *(_DWORD *)((unint64_t)&v197 | (4 * (((_BYTE)v51 + 1) & 3)));
              else
                LODWORD(v21) = *(_DWORD *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFF3 | (4 * (v51 & 3)));
              if ((v51 & 0xFE) == 2)
                LODWORD(v55) = *(_DWORD *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFF3 | (4 * (v51 & 3)));
              *(float *)&v55 = *(float *)&v21 / (float)(*(float *)&v21 - *(float *)&v55);
              v56 = (v51 & 0xFD) != 0;
              v219 = (__int16 *)(v199 | (unint64_t)(v56 << 32));
              *(float32x2_t *)&v198 = vmla_f32(a5, v12, vcvt_f32_u32(v54));
              *(float *)((unint64_t)&v198 | (4 * v56)) = *(float *)((unint64_t)&v198 | (4 * v56))
                                                              + (float)(*(float *)&v55 * *(float *)&v181);
              v226[0] = v198;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_(v215, (unsigned __int16 *)&v219, v226, (uint64_t)&v223, v198, v55, v181, v21, (int8x8_t)v22);
              v57 = v50++;
              v37 = v184;
            }
            while (v57 < 3);
            ++v28;
            v24 = v177;
          }
          while (v28 != v14);
        }
        v11 = v178;
        v212[v14] = v27;
        v24 = v173;
      }
      while ((unsigned __int16)v173 < (unsigned __int16)v171);
    }
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v223 = &v216;
    if ((unint64_t)v217 >= 0x10)
    {
      v58 = 0;
      v59 = (unint64_t)v217 >> 4;
      v60.i32[1] = -2143281136;
      v19 = 4.74803907e-38;
      while (1)
      {
        v20 = (float32x2_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v216 + v58)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
        if (v20.i16[0] != -1)
          break;
        v58 += 16;
        if (!--v59)
          goto LABEL_60;
      }
      v61 = __clz(__rbit64((unsigned __int16)~v20.i16[0])) + v58;
      v224 = (unsigned __int16)~v20.i16[0];
      v225 = v61;
      if (v61 != -1)
      {
        v62 = 0;
        do
        {
          v63 = (uint64_t *)(*((_QWORD *)v223 + 1) + 12 * v61);
          v64 = *v63;
          v60.i32[0] = *v63;
          v65 = (HIDWORD(*v63) & 0xFD) != 1;
          v66 = BYTE4(*v63) - 3;
          v196 = vmovl_u16(v60).u64[0];
          v67 = *(_DWORD *)((unint64_t)&v196 | (4 * v65));
          v68 = v66 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v196 | (4 * v65)) == 0;
          if (v68
            || v66 >= 0xFFFFFFFE
            && (v195 = v174, *(_DWORD *)((unint64_t)&v195 | (4 * v65)) - 1 <= (unsigned __int16)v67))
          {
            if (v62 >= v221)
            {
              v69 = (v62 - (char *)v219) >> 3;
              if ((unint64_t)(v69 + 1) >> 61)
                goto LABEL_170;
              v70 = (v221 - (char *)v219) >> 2;
              if (v70 <= v69 + 1)
                v70 = v69 + 1;
              if ((unint64_t)(v221 - (char *)v219) >= 0x7FFFFFFFFFFFFFF8)
                v71 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v71 = v70;
              if (v71)
              {
                v72 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v221, v71);
                v64 = *v63;
              }
              else
              {
                v72 = 0;
              }
              v73 = &v72[8 * v69];
              *(_QWORD *)v73 = v64;
              v62 = v73 + 8;
              v75 = v219;
              v74 = v220;
              if (v220 != v219)
              {
                do
                {
                  v76 = *((_QWORD *)v74 - 1);
                  v74 -= 4;
                  *((_QWORD *)v73 - 1) = v76;
                  v73 -= 8;
                }
                while (v74 != v75);
                v74 = v219;
              }
              v219 = (__int16 *)v73;
              v220 = (__int16 *)v62;
              v221 = &v72[8 * v71];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_QWORD *)v62 = v64;
              v62 += 8;
            }
            v220 = (__int16 *)v62;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v223);
          v61 = v225;
        }
        while (v225 != -1);
      }
    }
LABEL_60:
    if (*((_QWORD *)&v217 + 1))
    {
      v185 = (uint64_t)(a3 + 2);
      v77 = (int8x8_t)0x8040201008040201;
      v78 = vdup_n_s32(0x7F800000u);
      while (1)
      {
        v79 = v216;
        if ((unint64_t)v217 >= 0x10)
        {
          v81 = 0;
          v80 = (unint64_t)v217 >> 4;
          v82 = (unint64_t)v217 >> 4;
          while (1)
          {
            v19 = -1.79399301e-307;
            v77 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v216 + v81)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v83 = (unsigned __int16)~v77.i16[0];
            if (v77.i16[0] != -1)
              break;
            v81 += 16;
            if (!--v82)
              goto LABEL_67;
          }
          v84 = __clz(__rbit64(v83)) + v81;
        }
        else
        {
          v80 = 0;
LABEL_67:
          v83 = 0;
          v84 = -1;
        }
        v85 = v219;
        v86 = v220;
        do
        {
          if (v86 == v85)
          {
            if (v84 != -1)
              goto LABEL_78;
            v89 = v176;
            v90 = v176[1];
            v91 = v172;
            goto LABEL_147;
          }
          v86 -= 4;
          v87 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v216, v86, *(double *)&v77, v19, *(double *)&v20, v21, (int8x8_t)v22);
          if (v87 >> 4 >= v80)
          {
            v88 = 0;
          }
          else
          {
            v19 = -1.79399301e-307;
            v77 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v79 + 16 * (v87 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v88 = (unsigned __int16)~v77.i16[0];
          }
          v220 = v86;
        }
        while (v87 == -1);
        v84 = v87;
        v83 = v88;
LABEL_78:
        v91 = v172;
        while (1)
        {
          v92 = (unsigned __int16 *)(*((_QWORD *)&v216 + 1) + 12 * v84);
          v93 = *v92;
          v94 = v92[1];
          v95 = *((unsigned __int8 *)v92 + 4);
          HIDWORD(v226[0]) = 0;
          WORD1(v226[0]) = v94;
          LOWORD(v226[0]) = v93;
          BYTE4(v226[0]) = *((_BYTE *)v92 + 8);
          v223 = &v216;
          v224 = v83;
          v225 = v84;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v223);
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v216, v84);
          v101 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v216, (__int16 *)v226, v96, v97, v98, v99, v100);
          if (v101 != -1)
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v216, v101);
          v106 = COERCE_DOUBLE(__PAIR64__(v94, v93));
          v107 = v95 & 0xFFFFFFFD;
          if ((v95 - 1) <= 1)
          {
            *(double *)&v194 = COERCE_DOUBLE(__PAIR64__(v94, v93));
            ++*(_DWORD *)((unint64_t)&v194 | (4 * (v107 == 0)));
            v106 = *(double *)&v194;
          }
          v89 = v176;
          HIWORD(v193) = WORD2(v106);
          LOWORD(v193) = LOWORD(v106);
          v223 = (__int128 *)(v193 | ((unint64_t)(v107 != 0) << 32));
          S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v215, (__int16 *)&v223, v106, v102, v103, v104, v105);
          v114 = *(int32x2_t *)(v215[1]
                              + 16 * S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                              + 8);
          v116 = v176[1];
          v115 = (unint64_t)v176[2];
          if ((unint64_t)v116 >= v115)
          {
            v117 = v116 - *v176;
            if ((unint64_t)(v117 + 1) >> 61)
              goto LABEL_170;
            v118 = v115 - (_QWORD)*v176;
            v119 = v118 >> 2;
            if (v118 >> 2 <= (unint64_t)(v117 + 1))
              v119 = v117 + 1;
            if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
              v120 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v120 = v119;
            if (v120)
              v121 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v185, v120);
            else
              v121 = 0;
            v122 = &v121[8 * v117];
            *(int32x2_t *)v122 = v114;
            v90 = (int32x2_t *)(v122 + 8);
            v124 = *v176;
            v123 = (char *)v176[1];
            if (v123 != (char *)*v176)
            {
              do
              {
                v125 = *((_QWORD *)v123 - 1);
                v123 -= 8;
                v109.i32[1] = HIDWORD(v125);
                *((_QWORD *)v122 - 1) = v125;
                v122 -= 8;
              }
              while (v123 != (char *)v124);
              v123 = (char *)*v176;
            }
            *v176 = (int32x2_t *)v122;
            v176[1] = v90;
            v176[2] = (int32x2_t *)&v121[8 * v120];
            if (v123)
              operator delete(v123);
          }
          else
          {
            *v116 = v114;
            v90 = v116 + 1;
          }
          v176[1] = v90;
          v126 = v226[0];
          v109.i32[0] = LODWORD(v226[0]);
          *(_QWORD *)&v127 = vmovl_u16(v109).u64[0];
          v128 = (BYTE4(v226[0]) & 0xFD) != 1;
          v192 = v127;
          v129 = *(_DWORD *)((unint64_t)&v192 | (4 * v128));
          if (BYTE4(v226[0]) - 3 <= 0xFFFFFFFD
            && (unsigned __int16)*(_DWORD *)((unint64_t)&v192 | (4 * v128)) == 0)
          {
            break;
          }
          if (BYTE4(v226[0]) - 3 >= 0xFFFFFFFE)
          {
            v110 = *(double *)&v174;
            v191 = v174;
            if (*(_DWORD *)((unint64_t)&v191 | (4 * v128)) - 1 <= (unsigned __int16)v129)
              break;
            v131 = 1;
          }
          else
          {
            v131 = 0xFFFF;
          }
          v189 = v127;
          *(_DWORD *)((unint64_t)&v189 | (4 * v128)) = v131 + v129;
          HIWORD(v190) = WORD2(v189);
          LOWORD(v190) = LOWORD(v189);
          v223 = (__int128 *)((*(_QWORD *)&v126 + 0x200000000) & 0x300000000 | v190);
          v132 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v216, (__int16 *)&v223, v189, v110, v111, v112, v113);
          v84 = v132;
          if (v132 >> 4 >= (unint64_t)v217 >> 4)
          {
            v83 = 0;
          }
          else
          {
            v19 = -1.79399301e-307;
            v77 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v216 + 16 * (v132 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v83 = (unsigned __int16)~v77.i16[0];
          }
          if (v132 == -1)
            goto LABEL_147;
        }
        v223 = (__int128 *)(LODWORD(v226[0]) | 0xFF00000000);
        v133 = BYTE4(v226[0]) & 0xFD;
        if (BYTE4(v226[0]) - 1 < 2)
        {
          v188 = v127;
          ++*(_DWORD *)((unint64_t)&v188 | (4 * (v133 == 0)));
          v127 = v188;
        }
        HIWORD(v187) = WORD2(v127);
        LOWORD(v187) = LOWORD(v127);
        v211 = v187 | ((unint64_t)(v133 != 0) << 32);
        v134 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v215, (__int16 *)&v211, v127, v110, v111, v112, v113);
        v135 = *(int32x2_t *)(v215[1] + 16 * v134 + 8);
        v137 = v176[1];
        v136 = (unint64_t)v176[2];
        if ((unint64_t)v137 < v136)
        {
          *v137 = v135;
          v138 = v137 + 1;
          goto LABEL_130;
        }
        v139 = v137 - *v176;
        if ((unint64_t)(v139 + 1) >> 61)
          break;
        v140 = v136 - (_QWORD)*v176;
        v141 = v140 >> 2;
        if (v140 >> 2 <= (unint64_t)(v139 + 1))
          v141 = v139 + 1;
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
          v142 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v142 = v141;
        if (v142)
          v143 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v185, v142);
        else
          v143 = 0;
        v144 = (int32x2_t *)&v143[8 * v139];
        *v144 = v135;
        v138 = v144 + 1;
        v146 = *v176;
        v145 = (char *)v176[1];
        if (v145 != (char *)*v176)
        {
          do
          {
            v147 = *(int8x8_t *)(v145 - 8);
            v145 -= 8;
            v77 = v147;
            v144[-1] = (int32x2_t)v147;
            --v144;
          }
          while (v145 != (char *)v146);
          v145 = (char *)*v176;
        }
        *v176 = v144;
        v176[1] = v138;
        v176[2] = (int32x2_t *)&v143[8 * v142];
        if (v145)
          operator delete(v145);
LABEL_130:
        v176[1] = v138;
        v148 = (unint64_t)v176[2];
        if ((unint64_t)v138 < v148)
        {
          *v138 = v78;
          v90 = v138 + 1;
          goto LABEL_146;
        }
        v149 = v138 - *v176;
        if ((unint64_t)(v149 + 1) >> 61)
          break;
        v150 = v148 - (_QWORD)*v176;
        v151 = v150 >> 2;
        if (v150 >> 2 <= (unint64_t)(v149 + 1))
          v151 = v149 + 1;
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v152 = v151;
        if (v152)
          v153 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v185, v152);
        else
          v153 = 0;
        v154 = (int32x2_t *)&v153[8 * v149];
        *v154 = v78;
        v90 = v154 + 1;
        v156 = *v176;
        v155 = (char *)v176[1];
        if (v155 != (char *)*v176)
        {
          do
          {
            v157 = *(int8x8_t *)(v155 - 8);
            v155 -= 8;
            v77 = v157;
            v154[-1] = (int32x2_t)v157;
            --v154;
          }
          while (v155 != (char *)v156);
          v155 = (char *)*v176;
        }
        *v176 = v154;
        v176[1] = v90;
        v176[2] = (int32x2_t *)&v153[8 * v152];
        if (v155)
          operator delete(v155);
LABEL_146:
        v176[1] = v90;
LABEL_147:
        v158 = (unint64_t)((char *)v90 - (char *)*v89) >> 3;
        v160 = v91[1];
        v159 = (unint64_t)v91[2];
        if ((unint64_t)v160 >= v159)
        {
          v162 = *v91;
          v163 = (v160 - *v91) >> 2;
          v164 = v163 + 1;
          if ((unint64_t)(v163 + 1) >> 62)
            break;
          v165 = v159 - (_QWORD)v162;
          if (v165 >> 1 > v164)
            v164 = v165 >> 1;
          if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
            v166 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v166 = v164;
          if (v166)
          {
            v167 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v172 + 2), v166);
            v162 = *v91;
            v160 = v91[1];
          }
          else
          {
            v167 = 0;
          }
          v168 = &v167[4 * v163];
          *(_DWORD *)v168 = v158;
          v161 = v168 + 4;
          while (v160 != v162)
          {
            v169 = *((_DWORD *)v160 - 1);
            v160 -= 4;
            *((_DWORD *)v168 - 1) = v169;
            v168 -= 4;
          }
          *v91 = v168;
          v91[1] = v161;
          v91[2] = &v167[4 * v166];
          if (v162)
            operator delete(v162);
        }
        else
        {
          *(_DWORD *)v160 = v158;
          v161 = v160 + 4;
        }
        v91[1] = v161;
        if (!*((_QWORD *)&v217 + 1))
          goto LABEL_164;
      }
LABEL_170:
      abort();
    }
LABEL_164:
    if (v219)
    {
      v220 = v219;
      operator delete(v219);
    }
    if (v212)
    {
      v213 = v212;
      operator delete(v212);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v215);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v216);
  }
  return result;
}

uint64_t geom_marching_squares_with_default_options_2d(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float64x2_t a6, float64x2_t a7)
{
  _QWORD *v11;
  char **v12;
  _QWORD v16[2];

  v11 = (_QWORD *)geom::collection_to_vector<float>(a4);
  v12 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v11, v12, a6, a7);
}

uint64_t _ZN4geom23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE(uint64_t result, unsigned int a2, _QWORD *a3, char **a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t v6;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  int v14;
  _DWORD *v15;
  int8x8_t v16;
  uint64x2_t v17;
  double v18;
  double v19;
  float64x2_t v20;
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t v24;
  unsigned int v25;
  int8x8_t v26;
  uint64x2_t v27;
  double v28;
  double v29;
  uint64_t v30;
  int8x8_t v31;
  uint64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  int8x8_t v37;
  uint64x2_t v38;
  double v39;
  float64x2_t v40;
  int8x16_t v41;
  int8x8_t v42;
  unint64_t v43;
  char v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int8x8_t v49;
  char v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int8x8_t v55;
  unsigned __int8 v56;
  __int16 v57;
  char v58;
  int8x8_t v59;
  _DWORD *v60;
  int8x8_t v61;
  int v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  _BOOL8 v67;
  uint64x2_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint16x4_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  _BOOL8 v77;
  unsigned int v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  int64x2_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  __int16 *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  int64x2_t *v101;
  unsigned __int16 *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  int v106;
  double v107;
  double v108;
  double v109;
  double v110;
  int8x8_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  int8x8_t v116;
  double v117;
  unsigned int v118;
  uint64_t S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP;
  double v120;
  double v121;
  double v122;
  int8x8_t v123;
  int64x2_t v124;
  unint64_t v125;
  int64x2_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  __int128 v135;
  uint64_t v136;
  _BOOL8 v137;
  unsigned int v138;
  int v139;
  int v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  int64x2_t v145;
  unint64_t v146;
  int64x2_t *v147;
  int64x2_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  int64x2_t *v164;
  char *v165;
  char *v166;
  int64x2_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  int v179;
  _DWORD *v180;
  int v181;
  char **v182;
  unsigned int v183;
  int32x2_t v184;
  unsigned __int32 v185;
  unsigned int v186;
  _QWORD *v187;
  float64x2_t v188;
  uint64_t v189;
  float64_t v190;
  double v191;
  float64x2_t v192;
  float64x2_t v194;
  int64x2_t v195;
  float64_t v196;
  unint64_t v197;
  uint64_t v198;
  float64_t v199;
  float64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  double v206;
  unsigned int v207;
  int32x2_t v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  int32x2_t v212;
  unint64_t v213;
  float64x2_t v214;
  _OWORD v215[2];
  _OWORD v216[2];
  int v217;
  unint64_t v218;
  unint64_t v219;
  __int8 v220;
  __int8 v221;
  unint64_t v222;
  unint64_t v223;
  int8x8_t v224;
  int8x8_t v225;
  int32x2_t v226;
  int8x8_t v227;
  int32x2_t v228;
  unint64_t v229;
  double *v230;
  double *v231;
  uint64_t v232;
  uint64_t v233[6];
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  __n128 v237;
  char *v238;
  char v239;
  __int128 *v240;
  unint64_t v241;
  uint64_t v242;
  _QWORD v243[3];

  a3[1] = *a3;
  a4[1] = *a4;
  v6 = vsubq_f64(a6, a5);
  if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) > 2.22044605e-16)
  {
    v9 = result;
    v191 = vpminq_f64(v6) / (double)a2;
    v194 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v191, 0);
    v184 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v6, v194))));
    v236 = 0;
    v234 = 0u;
    v235 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v234, 1uLL);
    memset(v233, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v233, 1uLL);
    v10 = vcgt_u32((uint32x2_t)v184, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v184, 1), (int8x8_t)0xFFFF0000FFFFLL)).u8[0];
    v228 = v184;
    v11 = *(unsigned int *)((unint64_t)&v228 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v10 & 1)));
    v12 = v10 & 1;
    v230 = 0;
    v231 = 0;
    v232 = 0;
    std::vector<double>::__vallocate[abi:nn180100](&v230, v11 + 1);
    v13 = v231;
    bzero(v231, 8 * (v11 + 1));
    v14 = 0;
    v231 = &v13[v11 + 1];
    v189 = v12;
    v15 = (_DWORD *)((unint64_t)&v227 | (4 * v12));
    do
    {
      v227 = 0;
      *v15 = v14;
      v16 = vand_s8(v227, (int8x8_t)0xFFFF0000FFFFLL);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      v18 = (*(double (**)(_QWORD, __n128))v9)(*(_QWORD *)(v9 + 8), (__n128)vmlaq_f64(a5, v194, vcvtq_f64_u64(v17)));
      v230[(unsigned __int16)v14++] = v18;
    }
    while ((unsigned __int16)v14 <= (unsigned __int16)v11);
    v187 = a3;
    v182 = a4;
    v22 = v189;
    v23 = v189 ^ 1;
    v226 = v184;
    v24 = v194;
    v181 = *(_DWORD *)((unint64_t)&v226 | (4 * v23));
    if (v181)
    {
      v25 = 0;
      v188 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v191, 0);
      v180 = (_DWORD *)((unint64_t)&v224 | (4 * v23));
      do
      {
        v224 = 0;
        v183 = v25 + 1;
        *v180 = v25 + 1;
        v225 = v224;
        *(_DWORD *)((unint64_t)&v225 | (4 * v189)) = 0;
        v26 = vand_s8(v225, (int8x8_t)0xFFFF0000FFFFLL);
        v27.i64[0] = v26.u32[0];
        v27.i64[1] = v26.u32[1];
        v28 = (*(double (**)(_QWORD, __n128))v9)(*(_QWORD *)(v9 + 8), (__n128)vmlaq_f64(a5, v24, vcvtq_f64_u64(v27)));
        v29 = v28;
        if ((_WORD)v11)
        {
          v30 = 0;
          v186 = v25;
          LODWORD(v28) = v25;
          v185 = vmovl_u16(*(uint16x4_t *)&v28).u32[0];
          do
          {
            if ((_DWORD)v22)
            {
              v31 = vand_s8((int8x8_t)__PAIR64__(v30, v185), (int8x8_t)0xFFFF0000FFFFLL);
              v32.i64[0] = v31.u32[0];
              v32.i64[1] = v31.u32[1];
              v33 = vmlaq_f64(a5, v194, vcvtq_f64_u64(v32));
              v203 = __PAIR64__(v30, v185);
              v222 = __PAIR64__(v30, v185);
              v34 = *(unsigned __int16 *)((unint64_t)&v222 | (4 * v22));
              v35 = &v230[v34];
              v36 = v29;
            }
            else
            {
              v37 = vand_s8((int8x8_t)__PAIR64__(v186, v30), (int8x8_t)0xFFFF0000FFFFLL);
              v38.i64[0] = v37.u32[0];
              v38.i64[1] = v37.u32[1];
              v33 = vmlaq_f64(a5, v194, vcvtq_f64_u64(v38));
              v203 = __PAIR64__(v186, v30);
              v223 = __PAIR64__(v186, v30);
              v34 = *(unsigned __int16 *)((unint64_t)&v223 | (4 * v22));
              v35 = &v230[v34];
              v36 = v230[v30 + 1];
            }
            v196 = v36;
            v199 = *v35;
            v20.f64[0] = (*(double (**)(_QWORD, __n128))v9)(*(_QWORD *)(v9 + 8), (__n128)vaddq_f64(v188, v33));
            v39 = v29;
            if ((_DWORD)v22)
              v39 = v230[WORD2(v203) + 1];
            v230[v34] = v29;
            v190 = v20.f64[0];
            v20.f64[1] = v39;
            v40.f64[0] = v199;
            v40.f64[1] = v196;
            v200 = v40;
            v192 = v20;
            v41 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v40), (int32x4_t)vcgtzq_f64(v20))), (int8x8_t)0x8000400020001));
            v42 = (int8x8_t)vextq_s8(v41, v41, 8uLL).u64[0];
            *(int8x8_t *)v41.i8 = vorr_s8(*(int8x8_t *)v41.i8, v42);
            v221 = v41.i8[4];
            v220 = v41.i8[0];
                                   + (((unint64_t)(vaddvq_f64(vaddq_f64(v40, v20)) * 0.25 > 0.0) << 6) | (4 * (v41.i8[0] | v41.i8[4]))));
            v43 = vmovl_u8(*(uint8x8_t *)v41.i8).u64[0];
            v197 = v43;
            if (~(unsigned __int16)v43)
            {
              v44 = BYTE2(v43);
              LOBYTE(v229) = v43;
              v239 = BYTE2(v43);
              v237.n128_u16[1] = WORD2(v203);
              v237.n128_u16[0] = v203;
              v237.n128_u8[4] = v43;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)&v237, &v239, (uint64_t)&v240, *(double *)&v203, *(double *)&v42, v40.f64[0], v20.f64[0], v21);
              WORD1(v243[0]) = WORD2(v203);
              v22 = v189;
              LOWORD(v243[0]) = v203;
              BYTE4(v243[0]) = v44;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)v243, (char *)&v229, (uint64_t)&v237, v45, v46, v47, v48, v49);
              v43 = v197;
            }
            if (~WORD2(v43))
            {
              v50 = BYTE6(v43);
              LOBYTE(v229) = BYTE4(v43);
              v239 = BYTE6(v43);
              v237.n128_u16[1] = WORD2(v203);
              v237.n128_u16[0] = v203;
              v237.n128_u8[4] = BYTE4(v43);
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)&v237, &v239, (uint64_t)&v240, *(double *)&v203, *(double *)&v42, v40.f64[0], v20.f64[0], v21);
              WORD1(v243[0]) = WORD2(v203);
              v22 = v189;
              LOWORD(v243[0]) = v203;
              BYTE4(v243[0]) = v50;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)v243, (char *)&v229, (uint64_t)&v237, v51, v52, v53, v54, v55);
              v43 = v197;
            }
            v56 = 0;
            v19 = v190;
            v29 = v190;
            do
            {
              v219 = v43;
              v57 = *(_WORD *)((unint64_t)&v219 & 0xFFFFFFFFFFFFFFF9 | (2 * (v56 & 3)));
              if ((_BYTE)v57 == 0xFF)
                break;
              v58 = v57 & 0xFD;
              v59 = (int8x8_t)v203;
              if ((v57 - 1) <= 1u)
              {
                v60 = (_DWORD *)((unint64_t)&v218 | (4 * ((v57 & 0xFD) == 0)));
                v218 = v203;
                ++*v60;
                v59 = (int8x8_t)v218;
              }
              HIWORD(v217) = v59.i16[2];
              LOWORD(v217) = v59.i16[0];
              v61 = vand_s8(v59, (int8x8_t)0xFFFF0000FFFFLL);
              v62 = v57 & 0xFE;
              v216[0] = v200;
              v216[1] = v192;
              v63 = *((double *)v216 + (((_BYTE)v57 + 1) & 3));
              v215[0] = v200;
              v215[1] = v192;
              v64 = v57 & 3;
              if (v62 == 2)
                v65 = v63;
              else
                v65 = *((double *)v215 + v64);
              if (v62 == 2)
                v63 = *((double *)v215 + v64);
              v66 = v65 / (v65 - v63);
              v67 = v58 != 0;
              LODWORD(v243[0]) = v217;
              HIDWORD(v243[0]) = v67;
              v68.i64[0] = v61.u32[0];
              v68.i64[1] = v61.u32[1];
              v214 = vmlaq_f64(a5, v194, vcvtq_f64_u64(v68));
              *(double *)((unint64_t)&v214 | (8 * v67)) = *(double *)((unint64_t)&v214 | (8 * v67))
                                                               + v66 * v191;
              v237 = (__n128)v214;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_(v233, (unsigned __int16 *)v243, &v237, (uint64_t)&v240, v214.f64[0], v66, v191, v194.f64[0], v21);
              v69 = v56++;
              v43 = v197;
            }
            while (v69 < 3);
            ++v30;
          }
          while (v30 != v11);
        }
        v230[v11] = v29;
        v25 = v183;
        v24 = v194;
      }
      while ((unsigned __int16)v183 < (unsigned __int16)v181);
    }
    v237 = 0uLL;
    v238 = 0;
    v240 = &v234;
    if ((unint64_t)v235 >= 0x10)
    {
      v70 = 0;
      v71 = (unint64_t)v235 >> 4;
      v72.i32[1] = -2143281136;
      v19 = 4.74803907e-38;
      while (1)
      {
        *(int8x8_t *)&v24.f64[0] = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v234 + v70)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
        if (LOWORD(v24.f64[0]) != 0xFFFF)
          break;
        v70 += 16;
        if (!--v71)
          goto LABEL_60;
      }
      v73 = __clz(__rbit64((unsigned __int16)~LOWORD(v24.f64[0]))) + v70;
      v241 = (unsigned __int16)~LOWORD(v24.f64[0]);
      v242 = v73;
      if (v73 != -1)
      {
        v74 = 0;
        do
        {
          v75 = (uint64_t *)(*((_QWORD *)v240 + 1) + 12 * v73);
          v76 = *v75;
          v72.i32[0] = *v75;
          v77 = (HIDWORD(*v75) & 0xFD) != 1;
          v78 = BYTE4(*v75) - 3;
          v213 = vmovl_u16(v72).u64[0];
          v79 = *(_DWORD *)((unint64_t)&v213 | (4 * v77));
          v80 = v78 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v213 | (4 * v77)) == 0;
          if (v80
            || v78 >= 0xFFFFFFFE
            && (v212 = v184, *(_DWORD *)((unint64_t)&v212 | (4 * v77)) - 1 <= (unsigned __int16)v79))
          {
            if (v74 >= v238)
            {
              v81 = (uint64_t)&v74[-v237.n128_u64[0]] >> 3;
              if ((unint64_t)(v81 + 1) >> 61)
LABEL_169:
                abort();
              v82 = (uint64_t)&v238[-v237.n128_u64[0]] >> 2;
              if (v82 <= v81 + 1)
                v82 = v81 + 1;
              if ((unint64_t)&v238[-v237.n128_u64[0]] >= 0x7FFFFFFFFFFFFFF8)
                v83 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v83 = v82;
              if (v83)
              {
                v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v238, v83);
                v76 = *v75;
              }
              else
              {
                v84 = 0;
              }
              v85 = &v84[8 * v81];
              *(_QWORD *)v85 = v76;
              v74 = v85 + 8;
              v86 = (char *)v237.n128_u64[1];
              v87 = v237.n128_u64[0];
              if (v237.n128_u64[1] != v237.n128_u64[0])
              {
                do
                {
                  v88 = *((_QWORD *)v86 - 1);
                  v86 -= 8;
                  *((_QWORD *)v85 - 1) = v88;
                  v85 -= 8;
                }
                while (v86 != (char *)v87);
                v86 = (char *)v237.n128_u64[0];
              }
              v237.n128_u64[0] = (unint64_t)v85;
              v237.n128_u64[1] = (unint64_t)v74;
              v238 = &v84[8 * v83];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_QWORD *)v74 = v76;
              v74 += 8;
            }
            v237.n128_u64[1] = (unint64_t)v74;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v240);
          v73 = v242;
        }
        while (v242 != -1);
      }
    }
LABEL_60:
    if (*((_QWORD *)&v235 + 1))
    {
      v198 = (uint64_t)(a3 + 2);
      v89 = vdupq_n_s64(0x7FF0000000000000uLL);
      v195 = v89;
      do
      {
        v90 = v234;
        if ((unint64_t)v235 >= 0x10)
        {
          v92 = 0;
          v91 = (unint64_t)v235 >> 4;
          v93 = (unint64_t)v235 >> 4;
          while (1)
          {
            v19 = -1.79399301e-307;
            *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v234 + v92)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v94 = (unsigned __int16)~v89.i16[0];
            if (v89.i16[0] != -1)
              break;
            v92 += 16;
            if (!--v93)
              goto LABEL_67;
          }
          v95 = __clz(__rbit64(v94)) + v92;
        }
        else
        {
          v91 = 0;
LABEL_67:
          v94 = 0;
          v95 = -1;
        }
        v96 = (__int16 *)v237.n128_u64[1];
        v97 = v237.n128_u64[0];
        while (v96 != (__int16 *)v97)
        {
          v96 -= 4;
          v98 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v234, v96, *(double *)v89.i64, v19, v24.f64[0], v20.f64[0], v21);
          if (v98 >> 4 >= v91)
          {
            v99 = 0;
          }
          else
          {
            v19 = -1.79399301e-307;
            *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v90 + 16 * (v98 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
            v99 = (unsigned __int16)~v89.i16[0];
          }
          v237.n128_u64[1] = (unint64_t)v96;
          if (v98 != -1)
          {
            v95 = v98;
            v94 = v99;
            goto LABEL_78;
          }
        }
        if (v95 == -1)
        {
          v100 = v187;
          v101 = (int64x2_t *)v187[1];
        }
        else
        {
          while (1)
          {
LABEL_78:
            v102 = (unsigned __int16 *)(*((_QWORD *)&v234 + 1) + 12 * v95);
            v103 = *v102;
            v104 = v102[1];
            v105 = *((unsigned __int8 *)v102 + 4);
            HIDWORD(v243[0]) = 0;
            WORD1(v243[0]) = v104;
            LOWORD(v243[0]) = v103;
            v106 = *((unsigned __int8 *)v102 + 8);
            BYTE4(v243[0]) = *((_BYTE *)v102 + 8);
            v240 = &v234;
            v241 = v94;
            v242 = v95;
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v240);
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v234, v95);
            v112 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v234, (__int16 *)v243, v107, v108, v109, v110, v111);
            if (v112 != -1)
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v234, v112);
            v117 = COERCE_DOUBLE(__PAIR64__(v104, v103));
            v118 = v105 & 0xFFFFFFFD;
            if ((v105 - 1) <= 1)
            {
              *(double *)&v211 = COERCE_DOUBLE(__PAIR64__(v104, v103));
              ++*(_DWORD *)((unint64_t)&v211 | (4 * (v118 == 0)));
              v117 = *(double *)&v211;
            }
            v100 = v187;
            HIWORD(v210) = WORD2(v117);
            LOWORD(v210) = LOWORD(v117);
            v240 = (__int128 *)(v210 | ((unint64_t)(v118 != 0) << 32));
            S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v233, (__int16 *)&v240, v117, v113, v114, v115, v116);
            v124 = *(int64x2_t *)(v233[1]
                                + 32 * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                + 16);
            v126 = (int64x2_t *)v187[1];
            v125 = v187[2];
            if ((unint64_t)v126 >= v125)
            {
              v127 = ((uint64_t)v126->i64 - *v187) >> 4;
              if ((unint64_t)(v127 + 1) >> 60)
                goto LABEL_169;
              v128 = v125 - *v187;
              v129 = v128 >> 3;
              if (v128 >> 3 <= (unint64_t)(v127 + 1))
                v129 = v127 + 1;
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF0)
                v130 = 0xFFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              if (v130)
              {
                v201 = *(int64x2_t *)(v233[1]
                                    + 32
                                    * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                    + 16);
                v131 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v198, v130);
                v124 = v201;
              }
              else
              {
                v131 = 0;
              }
              v132 = &v131[16 * v127];
              *(int64x2_t *)v132 = v124;
              v101 = (int64x2_t *)(v132 + 16);
              v134 = (char *)*v187;
              v133 = (char *)v187[1];
              if (v133 != (char *)*v187)
              {
                do
                {
                  v135 = *((_OWORD *)v133 - 1);
                  v133 -= 16;
                  v124.i32[1] = DWORD1(v135);
                  *((_OWORD *)v132 - 1) = v135;
                  v132 -= 16;
                }
                while (v133 != v134);
                v133 = (char *)*v187;
              }
              *v187 = v132;
              v187[1] = v101;
              v187[2] = &v131[16 * v130];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *v126 = v124;
              v101 = v126 + 1;
            }
            v187[1] = v101;
            v136 = v243[0];
            v124.i32[0] = v243[0];
            v124.i64[0] = vmovl_u16(*(uint16x4_t *)v124.i8).u64[0];
            v137 = (BYTE4(v243[0]) & 0xFD) != 1;
            v138 = BYTE4(v243[0]) - 3;
            v209 = v124.i64[0];
            v139 = *(_DWORD *)((unint64_t)&v209 | (4 * v137));
            if (v138 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v209 | (4 * v137)) == 0)
              break;
            if (v138 >= 0xFFFFFFFE)
            {
              v120 = *(double *)&v184;
              v208 = v184;
              if (*(_DWORD *)((unint64_t)&v208 | (4 * v137)) - 1 <= (unsigned __int16)v139)
                break;
              v141 = 1;
            }
            else
            {
              v141 = 0xFFFF;
            }
            v206 = *(double *)v124.i64;
            *(_DWORD *)((unint64_t)&v206 | (4 * v137)) = v141 + v139;
            HIWORD(v207) = WORD2(v206);
            LOWORD(v207) = LOWORD(v206);
            v240 = (__int128 *)((v136 + 0x200000000) & 0x300000000 | v207);
            v142 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v234, (__int16 *)&v240, v206, v120, v121, v122, v123);
            v95 = v142;
            if (v142 >> 4 >= (unint64_t)v235 >> 4)
            {
              v94 = 0;
            }
            else
            {
              v19 = -1.79399301e-307;
              *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v234 + 16 * (v142 >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
              v94 = (unsigned __int16)~v89.i16[0];
            }
            if (v142 == -1)
              goto LABEL_146;
          }
          v240 = (__int128 *)(LODWORD(v243[0]) | 0xFF00000000);
          v143 = v106 & 0xFFFFFFFD;
          if ((v106 - 1) < 2)
          {
            v205 = v124.i64[0];
            ++*(_DWORD *)((unint64_t)&v205 | (4 * (v143 == 0)));
            v124.i64[0] = v205;
          }
          HIWORD(v204) = v124.i16[2];
          LOWORD(v204) = v124.i16[0];
          v229 = v204 | ((unint64_t)(v143 != 0) << 32);
          v144 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v233, (__int16 *)&v229, *(double *)v124.i64, v120, v121, v122, v123);
          v145 = *(int64x2_t *)(v233[1] + 32 * v144 + 16);
          v147 = (int64x2_t *)v187[1];
          v146 = v187[2];
          if ((unint64_t)v147 >= v146)
          {
            v149 = ((uint64_t)v147->i64 - *v187) >> 4;
            if ((unint64_t)(v149 + 1) >> 60)
              goto LABEL_169;
            v150 = v146 - *v187;
            v151 = v150 >> 3;
            if (v150 >> 3 <= (unint64_t)(v149 + 1))
              v151 = v149 + 1;
            if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0)
              v152 = 0xFFFFFFFFFFFFFFFLL;
            else
              v152 = v151;
            if (v152)
            {
              v202 = *(int64x2_t *)(v233[1] + 32 * v144 + 16);
              v153 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v198, v152);
              v145 = v202;
            }
            else
            {
              v153 = 0;
            }
            v154 = &v153[16 * v149];
            *(int64x2_t *)v154 = v145;
            v148 = (int64x2_t *)(v154 + 16);
            v156 = (char *)*v187;
            v155 = (char *)v187[1];
            if (v155 != (char *)*v187)
            {
              do
              {
                v157 = *((_OWORD *)v155 - 1);
                v155 -= 16;
                *((_OWORD *)v154 - 1) = v157;
                v154 -= 16;
              }
              while (v155 != v156);
              v155 = (char *)*v187;
            }
            *v187 = v154;
            v187[1] = v148;
            v187[2] = &v153[16 * v152];
            if (v155)
              operator delete(v155);
          }
          else
          {
            *v147 = v145;
            v148 = v147 + 1;
          }
          v187[1] = v148;
          v158 = v187[2];
          if ((unint64_t)v148 >= v158)
          {
            v159 = ((uint64_t)v148->i64 - *v187) >> 4;
            if ((unint64_t)(v159 + 1) >> 60)
              goto LABEL_169;
            v160 = v158 - *v187;
            v161 = v160 >> 3;
            if (v160 >> 3 <= (unint64_t)(v159 + 1))
              v161 = v159 + 1;
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF0)
              v162 = 0xFFFFFFFFFFFFFFFLL;
            else
              v162 = v161;
            if (v162)
              v163 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v198, v162);
            else
              v163 = 0;
            v164 = (int64x2_t *)&v163[16 * v159];
            v89.i64[0] = v195.i64[0];
            *v164 = v195;
            v101 = v164 + 1;
            v166 = (char *)*v187;
            v165 = (char *)v187[1];
            if (v165 != (char *)*v187)
            {
              do
              {
                v167 = *((int64x2_t *)v165 - 1);
                v165 -= 16;
                v89.i64[0] = v167.i64[0];
                v164[-1] = v167;
                --v164;
              }
              while (v165 != v166);
              v165 = (char *)*v187;
            }
            *v187 = v164;
            v187[1] = v101;
            v187[2] = &v163[16 * v162];
            if (v165)
              operator delete(v165);
          }
          else
          {
            v89.i64[0] = v195.i64[0];
            *v148 = v195;
            v101 = v148 + 1;
          }
          v187[1] = v101;
        }
LABEL_146:
        v168 = ((unint64_t)v101 - *v100) >> 4;
        v170 = v182[1];
        v169 = (unint64_t)v182[2];
        if ((unint64_t)v170 >= v169)
        {
          v172 = *v182;
          v173 = (v170 - *v182) >> 2;
          v174 = v173 + 1;
          if ((unint64_t)(v173 + 1) >> 62)
            goto LABEL_169;
          v175 = v169 - (_QWORD)v172;
          if (v175 >> 1 > v174)
            v174 = v175 >> 1;
          if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL)
            v176 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v176 = v174;
          if (v176)
          {
            v177 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v182 + 2), v176);
            v172 = *v182;
            v170 = v182[1];
          }
          else
          {
            v177 = 0;
          }
          v178 = &v177[4 * v173];
          *(_DWORD *)v178 = v168;
          v171 = v178 + 4;
          while (v170 != v172)
          {
            v179 = *((_DWORD *)v170 - 1);
            v170 -= 4;
            *((_DWORD *)v178 - 1) = v179;
            v178 -= 4;
          }
          *v182 = v178;
          v182[1] = v171;
          v182[2] = &v177[4 * v176];
          if (v172)
            operator delete(v172);
        }
        else
        {
          *(_DWORD *)v170 = v168;
          v171 = v170 + 4;
        }
        v182[1] = v171;
      }
      while (*((_QWORD *)&v235 + 1));
    }
    if (v237.n128_u64[0])
    {
      v237.n128_u64[1] = v237.n128_u64[0];
      operator delete((void *)v237.n128_u64[0]);
    }
    if (v230)
    {
      v231 = v230;
      operator delete(v230);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v233);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v234);
  }
  return result;
}

uint64_t geom_marching_squares_with_options_2f(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float32x2_t a6, float32x2_t a7)
{
  int32x2_t **v13;
  char **v14;
  _QWORD v16[2];

  v13 = (int32x2_t **)geom::collection_to_vector<float>(a4);
  v14 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v13, v14, a6, a7);
}

uint64_t geom_marching_squares_with_options_2d(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float64x2_t a6, float64x2_t a7)
{
  _QWORD *v11;
  char **v12;
  _QWORD v16[2];

  v11 = (_QWORD *)geom::collection_to_vector<float>(a4);
  v12 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v11, v12, a6, a7);
}

_QWORD *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = result[2];
  v2 = v1 >> 4;
  v3 = (_QWORD *)*result;
  if (v1 >> 4 >= *(_QWORD *)(*result + 16) >> 4)
  {
LABEL_8:
    v5 = -1;
    goto LABEL_9;
  }
  v4 = __clz(__rbit64(result[1] & (-2 << (v1 & 0xF))));
  if (v4 >= 0x40)
  {
    v6 = 16 * v2;
    v7 = v2 + 1;
    while (v7 < v3[2] >> 4)
    {
      v8 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*v3 + v6 + 16)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
      result[1] = v8;
      v9 = __clz(__rbit64(v8));
      v6 += 16;
      ++v7;
      if (v9 <= 0x3F)
      {
        v5 = v9 + v6;
        goto LABEL_9;
      }
    }
    goto LABEL_8;
  }
  v5 = v4 + (v1 & 0xFFFFFFFFFFFFFFF0);
LABEL_9:
  result[2] = v5;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

_QWORD *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = result;
  result[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0)
    goto LABEL_18;
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
    v6 = 64;
  else
    v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  *result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    v7 = 0;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  v9 = ((12 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (12 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v2[1] + v10;
      *(_QWORD *)v12 = 0;
      *(_BYTE *)(v12 + 8) = 0;
      ++v11;
      v13 = v2[2];
      v10 += 12;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

_QWORD *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = result;
  result[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0)
    goto LABEL_18;
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
    v6 = 64;
  else
    v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  *result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    v7 = 0;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  v9 = ((16 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (16 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (_QWORD *)(v2[1] + v10);
      *v12 = 0;
      v12[1] = 0;
      ++v11;
      v13 = v2[2];
      v10 += 16;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

uint64_t _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(_QWORD *a1, __int16 *a2, double a3, double a4, double a5, double a6, int8x8_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x2_t v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int32x2_t v23;
  int16x4_t v24;

  v7 = a1[2];
  if (v7 < 0x10)
    return -1;
  v8 = v7 >> 4;
  v9 = ((unsigned __int16)a2[1]
      + ((unint64_t)(unsigned __int16)*a2 << 6)
      + ((unint64_t)(unsigned __int16)*a2 >> 2)
      - 0x61C8864680B583E9) ^ (unsigned __int16)*a2;
  v10 = *((unsigned __int8 *)a2 + 4);
  v11 = v10 + (v9 << 6);
  v12 = ((v11 + (v9 >> 2) - 0x61C8864680B583E9) ^ v9) % v8;
  v13 = vdupq_n_s8(((v11 + (v9 >> 2) + 23) ^ v9) & 0x7F);
  a7.i16[0] = *a2;
  a7.i16[2] = a2[1];
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  v15 = (int32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL);
  v16 = v12;
  while (1)
  {
    v17 = *(int8x16_t *)(*a1 + 16 * v16);
    v18 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v17), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v19 = __clz(__rbit64(v18));
    if (v19 <= 0x3F)
      break;
LABEL_9:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v17, v14), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v16 + 1 == v8)
      v16 = 0;
    else
      ++v16;
    v21 = -1;
    if (v16 == v12)
      return v21;
  }
  v20 = 16 * v16;
  while (1)
  {
    v21 = v19 + v20;
    v22 = (unsigned __int16 *)(a1[1] + 12 * (v19 + v20));
    v23.i32[0] = *v22;
    v23.i32[1] = v22[1];
    v24 = (int16x4_t)vceq_s32(v23, v15);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v24, v24)) & 0x8000) != 0 && *((unsigned __int8 *)v22 + 4) == (_DWORD)v10)
      return v21;
    if (v19 <= 0x3E)
    {
      v19 = __clz(__rbit64((-2 << v19) & v18));
      if (v19 < 0x40)
        continue;
    }
    goto LABEL_9;
  }
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;

  if (!a1[4])
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
  v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  v7 = *((unsigned __int8 *)a2 + 4);
  v8 = (unint64_t)a1[2] >> 4;
  v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  v10 = *a1;
  v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8)
        v9 = 0;
      else
        ++v9;
      v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  v12 = v10 + 16 * v9;
  v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(_BYTE *)(v12 + v11) = v13;
  result = v11 + 16 * v9;
  v16 = a1[1] + 12 * result;
  *(_QWORD *)v16 = *(_QWORD *)a2;
  *(_BYTE *)(v16 + 8) = a3;
  v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  v1 = *(_QWORD *)(result + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((__int128 *)result, v1);
  }
  if (!*(_QWORD *)(result + 32))
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((__int128 *)result, v1);
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  uint64_t i;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if (a2 <= 1)
    a2 = 1;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = v4 >> 4;
    v7 = (__n128)xmmword_2289B6F60;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v18[0] + 8) + 12 * v9;
      v16 = *(_QWORD *)v10;
      v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    v11 = v21;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    v20 = v12;
    v21 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v22;
    v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

uint64_t _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(_QWORD *a1, __int16 *a2, double a3, double a4, double a5, double a6, int8x8_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x2_t v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int32x2_t v23;
  int16x4_t v24;

  v7 = a1[2];
  if (v7 < 0x10)
    return -1;
  v8 = v7 >> 4;
  v9 = (unsigned __int16)*a2;
  v10 = (unsigned __int16)a2[1];
  v11 = *((unsigned __int8 *)a2 + 4);
  v12 = (v11 | (2 * ((v10 + (v9 << 6) + (v9 >> 2) + 0x1E3779B97F4A7C17) ^ v9))) % v8;
  v13 = vdupq_n_s8((v11 | (2 * ((v10 + (v9 >> 2) + 23) ^ v9))) & 0x7F);
  a7.i16[0] = *a2;
  a7.i16[2] = a2[1];
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  v15 = (int32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL);
  v16 = v12;
  while (1)
  {
    v17 = *(int8x16_t *)(*a1 + 16 * v16);
    v18 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v17), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v19 = __clz(__rbit64(v18));
    if (v19 <= 0x3F)
      break;
LABEL_9:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v17, v14), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v16 + 1 == v8)
      v16 = 0;
    else
      ++v16;
    v21 = -1;
    if (v16 == v12)
      return v21;
  }
  v20 = 16 * v16;
  while (1)
  {
    v21 = v19 + v20;
    v22 = (unsigned __int16 *)(a1[1] + 16 * (v19 + v20));
    v23.i32[0] = *v22;
    v23.i32[1] = v22[1];
    v24 = (int16x4_t)vceq_s32(v23, v15);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v24, v24)) & 0x8000) != 0 && *((unsigned __int8 *)v22 + 4) == (_DWORD)v11)
      return v21;
    if (v19 <= 0x3E)
    {
      v19 = __clz(__rbit64((-2 << v19) & v18));
      if (v19 < 0x40)
        continue;
    }
    goto LABEL_9;
  }
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, double a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  _BOOL8 v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v18;

  if (!a1[4])
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
  v6 = *a2;
  v7 = a2[1];
  v8 = *((unsigned __int8 *)a2 + 4);
  v9 = (unint64_t)a1[2] >> 4;
  v10 = (v8 | (2 * ((v7 + (v6 << 6) + (v6 >> 2) + 0x1E3779B97F4A7C17) ^ v6))) % v9;
  v11 = *a1;
  v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v10)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v12 >= 0x40)
  {
    do
    {
      if (v10 + 1 == v9)
        v10 = 0;
      else
        ++v10;
      v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v10)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v12 > 0x3F);
  }
  v13 = v11 + 16 * v10;
  v14 = (v8 | (2 * ((v7 + (v6 >> 2) + 23) ^ v6))) & 0x7F;
  v15 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(_BYTE *)(v13 + v12) = v14;
  result = v12 + 16 * v10;
  v17 = a1[1] + 16 * result;
  *(_QWORD *)v17 = *(_QWORD *)a2;
  *(double *)(v17 + 8) = a3;
  v18 = a1[4] - v15;
  ++a1[3];
  a1[4] = v18;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((__int128 *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  uint64_t i;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a2 <= 1)
    a2 = 1;
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v17, a2);
  v15[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = *(_QWORD *)a1;
    v7 = v4 >> 4;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        goto LABEL_10;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      v14 = *(_OWORD *)(*(_QWORD *)(v15[0] + 8) + 16 * v9);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(&v17, &v14, *((double *)&v14 + 1), v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v15);
    }
  }
LABEL_10:
  if (&v17 != a1)
  {
    v10 = v18;
    v11 = *a1;
    v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    v17 = v11;
    v18 = v12;
    v13 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v19;
    v19 = v13;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v17);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  int8x16_t *v2;
  int8x16_t v3;
  int8x8_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;

  if (a2 != -1)
  {
    v2 = (int8x16_t *)(*(_QWORD *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    if (v4)
      v5 = -1;
    else
      v5 = 0x80;
    v2->i8[a2 & 0xF] = v5;
    v6 = *(_QWORD *)(result + 32);
    if (v4)
      ++v6;
    v7 = *(_QWORD *)(result + 24) - 1;
    *(_QWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(_QWORD *)(result + 16) >> 2)
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(result);
  }
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
}

_QWORD *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  __int128 v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v2 = result;
  result[4] = 0;
  if (a2 <= 1)
    v3 = 1;
  else
    v3 = a2;
  v4 = 151 * v3;
  v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0)
    goto LABEL_18;
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40)
    v6 = 64;
  else
    v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  *result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    v7 = 0;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  v9 = ((32 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (32 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (_QWORD *)(v2[1] + v10);
      v12[2] = 0;
      v12[3] = 0;
      *v12 = 0;
      ++v11;
      v13 = v2[2];
      v10 += 32;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;

  if (!a1[4])
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
  v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  v7 = *((unsigned __int8 *)a2 + 4);
  v8 = (unint64_t)a1[2] >> 4;
  v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  v10 = *a1;
  v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8)
        v9 = 0;
      else
        ++v9;
      v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  v12 = v10 + 16 * v9;
  v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(_BYTE *)(v12 + v11) = v13;
  result = v11 + 16 * v9;
  v16 = a1[1] + 12 * result;
  *(_QWORD *)v16 = *(_QWORD *)a2;
  *(_BYTE *)(v16 + 8) = a3;
  v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  v1 = *(_QWORD *)(result + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((__int128 *)result, v1);
  }
  if (!*(_QWORD *)(result + 32))
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((__int128 *)result, v1);
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  uint64_t i;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if (a2 <= 1)
    a2 = 1;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = v4 >> 4;
    v7 = (__n128)xmmword_2289B6F60;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v18[0] + 8) + 12 * v9;
      v16 = *(_QWORD *)v10;
      v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    v11 = v21;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    v20 = v12;
    v21 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v22;
    v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

uint64_t _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(_QWORD *a1, __int16 *a2, double a3, double a4, double a5, double a6, int8x8_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int32x2_t v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int32x2_t v23;
  int16x4_t v24;

  v7 = a1[2];
  if (v7 < 0x10)
    return -1;
  v8 = v7 >> 4;
  v9 = (unsigned __int16)*a2;
  v10 = (unsigned __int16)a2[1];
  v11 = *((unsigned __int8 *)a2 + 4);
  v12 = (v11 | (2 * ((v10 + (v9 << 6) + (v9 >> 2) + 0x1E3779B97F4A7C17) ^ v9))) % v8;
  v13 = vdupq_n_s8((v11 | (2 * ((v10 + (v9 >> 2) + 23) ^ v9))) & 0x7F);
  a7.i16[0] = *a2;
  a7.i16[2] = a2[1];
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  v15 = (int32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL);
  v16 = v12;
  while (1)
  {
    v17 = *(int8x16_t *)(*a1 + 16 * v16);
    v18 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v17), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v19 = __clz(__rbit64(v18));
    if (v19 <= 0x3F)
      break;
LABEL_9:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v17, v14), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v16 + 1 == v8)
      v16 = 0;
    else
      ++v16;
    v21 = -1;
    if (v16 == v12)
      return v21;
  }
  v20 = 16 * v16;
  while (1)
  {
    v21 = v19 + v20;
    v22 = (unsigned __int16 *)(a1[1] + 32 * (v19 + v20));
    v23.i32[0] = *v22;
    v23.i32[1] = v22[1];
    v24 = (int16x4_t)vceq_s32(v23, v15);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v24, v24)) & 0x8000) != 0 && *((unsigned __int8 *)v22 + 4) == (_DWORD)v11)
      return v21;
    if (v19 <= 0x3E)
    {
      v19 = __clz(__rbit64((-2 << v19) & v18));
      if (v19 < 0x40)
        continue;
    }
    goto LABEL_9;
  }
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, __n128 a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 v14;
  unint64_t result;
  __n128 *v16;
  uint64_t v17;
  __n128 v18;

  if (!a1[4])
  {
    v18 = a3;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
    a3 = v18;
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 4);
  v8 = (unint64_t)a1[2] >> 4;
  v9 = (v7 | (2 * ((v6 + (v5 << 6) + (v5 >> 2) + 0x1E3779B97F4A7C17) ^ v5))) % v8;
  v10 = *a1;
  v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8)
        v9 = 0;
      else
        ++v9;
      v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  v12 = v10 + 16 * v9;
  v13 = (v7 | (2 * ((v6 + (v5 >> 2) + 23) ^ v5))) & 0x7F;
  v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(_BYTE *)(v12 + v11) = v13;
  result = v11 + 16 * v9;
  v16 = (__n128 *)(a1[1] + 32 * result);
  v16->n128_u64[0] = *(_QWORD *)a2;
  v16[1] = a3;
  v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((__int128 *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  __n128 *v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _QWORD v16[2];
  uint64_t i;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (a2 <= 1)
    a2 = 1;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v18, a2);
  v16[0] = a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v16[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; v8 = i)
    {
      v9 = (__n128 *)(*(_QWORD *)(v16[0] + 8) + 32 * v8);
      v10 = v9[1];
      v15[0] = *v9;
      v15[1] = v10;
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(&v18, v15, v10);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v16);
    }
  }
LABEL_10:
  if (&v18 != a1)
  {
    v11 = v19;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v18;
    a1[1] = v11;
    v18 = v12;
    v19 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v20;
    v20 = v14;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v18);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  int8x16_t *v2;
  int8x16_t v3;
  int8x8_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;

  if (a2 != -1)
  {
    v2 = (int8x16_t *)(*(_QWORD *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    if (v4)
      v5 = -1;
    else
      v5 = 0x80;
    v2->i8[a2 & 0xF] = v5;
    v6 = *(_QWORD *)(result + 32);
    if (v4)
      ++v6;
    v7 = *(_QWORD *)(result + 24) - 1;
    *(_QWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(_QWORD *)(result + 16) >> 2)
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(result);
  }
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;

  if (!a1[4])
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
  v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  v7 = *((unsigned __int8 *)a2 + 4);
  v8 = (unint64_t)a1[2] >> 4;
  v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  v10 = *a1;
  v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8)
        v9 = 0;
      else
        ++v9;
      v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  v12 = v10 + 16 * v9;
  v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(_BYTE *)(v12 + v11) = v13;
  result = v11 + 16 * v9;
  v16 = a1[1] + 12 * result;
  *(_QWORD *)v16 = *(_QWORD *)a2;
  *(_BYTE *)(v16 + 8) = a3;
  v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  v1 = *(_QWORD *)(result + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((__int128 *)result, v1);
  }
  if (!*(_QWORD *)(result + 32))
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((__int128 *)result, v1);
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  uint64_t i;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if (a2 <= 1)
    a2 = 1;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = v4 >> 4;
    v7 = (__n128)xmmword_2289B6F60;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v18[0] + 8) + 12 * v9;
      v16 = *(_QWORD *)v10;
      v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    v11 = v21;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    v20 = v12;
    v21 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v22;
    v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, double a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  _BOOL8 v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v18;

  if (!a1[4])
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
  v6 = *a2;
  v7 = a2[1];
  v8 = *((unsigned __int8 *)a2 + 4);
  v9 = (unint64_t)a1[2] >> 4;
  v10 = (v8 | (2 * ((v7 + (v6 << 6) + (v6 >> 2) + 0x1E3779B97F4A7C17) ^ v6))) % v9;
  v11 = *a1;
  v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v10)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v12 >= 0x40)
  {
    do
    {
      if (v10 + 1 == v9)
        v10 = 0;
      else
        ++v10;
      v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v10)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v12 > 0x3F);
  }
  v13 = v11 + 16 * v10;
  v14 = (v8 | (2 * ((v7 + (v6 >> 2) + 23) ^ v6))) & 0x7F;
  v15 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(_BYTE *)(v13 + v12) = v14;
  result = v12 + 16 * v10;
  v17 = a1[1] + 16 * result;
  *(_QWORD *)v17 = *(_QWORD *)a2;
  *(double *)(v17 + 8) = a3;
  v18 = a1[4] - v15;
  ++a1[3];
  a1[4] = v18;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((__int128 *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  uint64_t i;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a2 <= 1)
    a2 = 1;
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v17, a2);
  v15[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = *(_QWORD *)a1;
    v7 = v4 >> 4;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        goto LABEL_10;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      v14 = *(_OWORD *)(*(_QWORD *)(v15[0] + 8) + 16 * v9);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(&v17, &v14, *((double *)&v14 + 1), v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v15);
    }
  }
LABEL_10:
  if (&v17 != a1)
  {
    v10 = v18;
    v11 = *a1;
    v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    v17 = v11;
    v18 = v12;
    v13 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v19;
    v19 = v13;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v17);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  int8x16_t *v2;
  int8x16_t v3;
  int8x8_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;

  if (a2 != -1)
  {
    v2 = (int8x16_t *)(*(_QWORD *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    if (v4)
      v5 = -1;
    else
      v5 = 0x80;
    v2->i8[a2 & 0xF] = v5;
    v6 = *(_QWORD *)(result + 32);
    if (v4)
      ++v6;
    v7 = *(_QWORD *)(result + 24) - 1;
    *(_QWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(_QWORD *)(result + 16) >> 2)
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(result);
  }
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;

  if (!a1[4])
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
  v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  v7 = *((unsigned __int8 *)a2 + 4);
  v8 = (unint64_t)a1[2] >> 4;
  v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  v10 = *a1;
  v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8)
        v9 = 0;
      else
        ++v9;
      v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  v12 = v10 + 16 * v9;
  v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(_BYTE *)(v12 + v11) = v13;
  result = v11 + 16 * v9;
  v16 = a1[1] + 12 * result;
  *(_QWORD *)v16 = *(_QWORD *)a2;
  *(_BYTE *)(v16 + 8) = a3;
  v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 16);
  v1 = *(_QWORD *)(result + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((__int128 *)result, v1);
  }
  if (!*(_QWORD *)(result + 32))
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((__int128 *)result, v1);
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  __n128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  _QWORD v18[2];
  uint64_t i;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  if (a2 <= 1)
    a2 = 1;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = v4 >> 4;
    v7 = (__n128)xmmword_2289B6F60;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v5)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v18[0] + 8) + 12 * v9;
      v16 = *(_QWORD *)v10;
      v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    v11 = v21;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    v20 = v12;
    v21 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v22;
    v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  uint64_t v13;
  char v14;
  unint64_t result;

  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4)
      v13 = 0;
    else
      v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    result = -1;
  }
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v13;
  *(_QWORD *)(a4 + 16) = result;
  *(_BYTE *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, __n128 a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 v14;
  unint64_t result;
  __n128 *v16;
  uint64_t v17;
  __n128 v18;

  if (!a1[4])
  {
    v18 = a3;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
    a3 = v18;
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 4);
  v8 = (unint64_t)a1[2] >> 4;
  v9 = (v7 | (2 * ((v6 + (v5 << 6) + (v5 >> 2) + 0x1E3779B97F4A7C17) ^ v5))) % v8;
  v10 = *a1;
  v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8)
        v9 = 0;
      else
        ++v9;
      v11 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  v12 = v10 + 16 * v9;
  v13 = (v7 | (2 * ((v6 + (v5 >> 2) + 23) ^ v5))) & 0x7F;
  v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(_BYTE *)(v12 + v11) = v13;
  result = v11 + 16 * v9;
  v16 = (__n128 *)(a1[1] + 32 * result);
  v16->n128_u64[0] = *(_QWORD *)a2;
  v16[1] = a3;
  v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2)
      v1 = 150 * v1 / 0x64;
    goto LABEL_6;
  }
  if (!*(_QWORD *)(a1 + 32))
LABEL_6:
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((__int128 *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(__int128 *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  __n128 *v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[2];
  _QWORD v16[2];
  uint64_t i;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (a2 <= 1)
    a2 = 1;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v18, a2);
  v16[0] = a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3 >= 0x10)
  {
    v4 = 0;
    v5 = *(_QWORD *)a1;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800).u16[0];
      v16[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        goto LABEL_10;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; v8 = i)
    {
      v9 = (__n128 *)(*(_QWORD *)(v16[0] + 8) + 32 * v8);
      v10 = v9[1];
      v15[0] = *v9;
      v15[1] = v10;
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(&v18, v15, v10);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v16);
    }
  }
LABEL_10:
  if (&v18 != a1)
  {
    v11 = v19;
    v12 = *a1;
    v13 = a1[1];
    *a1 = v18;
    a1[1] = v11;
    v18 = v12;
    v19 = v13;
    v14 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = v20;
    v20 = v14;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v18);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  int8x16_t *v2;
  int8x16_t v3;
  int8x8_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;

  if (a2 != -1)
  {
    v2 = (int8x16_t *)(*(_QWORD *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_2289B6F60)))), (int8x8_t)0x3830282018100800);
    if (v4)
      v5 = -1;
    else
      v5 = 0x80;
    v2->i8[a2 & 0xF] = v5;
    v6 = *(_QWORD *)(result + 32);
    if (v4)
      ++v6;
    v7 = *(_QWORD *)(result + 24) - 1;
    *(_QWORD *)(result + 24) = v7;
    *(_QWORD *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(_QWORD *)(result + 16) >> 2)
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(result);
  }
  return result;
}

uint64_t geom::split_triangle_mesh_with_plane<float>(_QWORD *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
}

uint64_t geom::`anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(_QWORD *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
  uint64_t *v11;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float32x4_t v20;
  char v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  unint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  int v69;
  unint64_t v70;
  _DWORD *v71;
  _DWORD *v72;
  unint64_t v73;
  unint64_t v74;
  std::vector<unsigned int>::pointer end;
  unsigned int *v76;
  _DWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  std::vector<unsigned int>::pointer begin;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  unsigned int *v91;
  unsigned int v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  BOOL v119;
  int v121;
  int v122;
  int v123;
  char **v124;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t *v133;
  std::__compressed_pair<unsigned int *> *v134;
  std::vector<unsigned int>::pointer v135;
  unsigned int *value;
  unsigned int *v137;
  std::vector<unsigned int>::pointer v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int *v146;
  std::vector<unsigned int>::pointer v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int *v155;
  std::vector<unsigned int>::pointer v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  unsigned int *v162;
  unsigned int v163;
  std::vector<unsigned int>::pointer v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  unsigned int *v170;
  unsigned int v171;
  uint64_t p_end_cap;
  uint64_t v174;
  _QWORD *v177;
  uint64_t v179;
  uint64_t *v181;
  _QWORD v182[7];
  uint64_t *v183[7];
  char v184;
  _QWORD v185[5];
  __int128 v186;
  __int128 v187;
  int v188;

  v11 = (uint64_t *)a8;
  v14 = a1;
  v15 = (uint64_t *)a9;
  v16 = (uint64_t *)a10;
  a4[1] = *a4;
  a5[1] = *a5;
  a6[1] = *a6;
  a7[1] = *a7;
  a8[1] = *a8;
  a9->__end_ = a9->__begin_;
  a10->__end_ = a10->__begin_;
  std::vector<signed char>::reserve(a8, a1[1]);
  std::vector<unsigned int>::reserve(a9, v14[1]);
  std::vector<unsigned int>::reserve(a10, v14[1]);
  v181 = v11;
  if (v14[1])
  {
    v17 = 0;
    v18 = 0;
    p_end_cap = (uint64_t)&a9->__end_cap_;
    v174 = (uint64_t)&a10->__end_cap_;
    v177 = v14;
    do
    {
      v19 = *v14;
      v20 = vmulq_f32(*(float32x4_t *)(*v14 + 16 * v17), *a3);
      v20.f32[0] = a3[1].f32[0]
                 + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
      v21 = (v20.f32[0] > 0.00000011921) - (v20.f32[0] < -0.00000011921);
      v23 = (_BYTE *)v11[1];
      v22 = v11[2];
      if ((unint64_t)v23 >= v22)
      {
        v25 = *v11;
        v26 = &v23[-v25];
        v27 = (uint64_t)&v23[-v25 + 1];
        if (v27 < 0)
          goto LABEL_238;
        v28 = v22 - v25;
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
          v30 = (char *)operator new(v29);
        else
          v30 = 0;
        v31 = &v26[(_QWORD)v30];
        v32 = &v26[(_QWORD)v30];
        *v32 = v21;
        v24 = v32 + 1;
        if (v23 == (_BYTE *)v25)
        {
          v11 = v181;
        }
        else
        {
          v33 = &v23[~v25];
          do
          {
            v34 = *--v23;
            (v33--)[(_QWORD)v30] = v34;
          }
          while (v23 != (_BYTE *)v25);
          v11 = v181;
          v23 = (_BYTE *)*v181;
          v31 = v30;
        }
        *v11 = (uint64_t)v31;
        v11[1] = (uint64_t)v24;
        v11[2] = (uint64_t)&v30[v29];
        if (v23)
          operator delete(v23);
        v16 = (uint64_t *)a10;
        v15 = (uint64_t *)a9;
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
        v16 = (uint64_t *)a10;
      }
      v11[1] = (uint64_t)v24;
      if ((char)*(v24 - 1) < 0)
      {
        v40 = (_DWORD *)v16[1];
        v39 = v16[2];
        if ((unint64_t)v40 >= v39)
        {
          v48 = (_DWORD *)*v16;
          v49 = ((uint64_t)v40 - *v16) >> 2;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 62)
            goto LABEL_238;
          v51 = v39 - (_QWORD)v48;
          if (v51 >> 1 > v50)
            v50 = v51 >> 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
            v52 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v174, v52);
            v48 = (_DWORD *)*v16;
            v40 = (_DWORD *)v16[1];
          }
          else
          {
            v53 = 0;
          }
          v68 = &v53[4 * v49];
          *(_DWORD *)v68 = -1;
          v41 = v68 + 4;
          while (v40 != v48)
          {
            v69 = *--v40;
            *((_DWORD *)v68 - 1) = v69;
            v68 -= 4;
          }
          *v16 = (uint64_t)v68;
          v16[1] = (uint64_t)v41;
          v16[2] = (uint64_t)&v53[4 * v52];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v40 = -1;
          v41 = v40 + 1;
        }
        v16[1] = (uint64_t)v41;
      }
      else
      {
        v35 = (unint64_t)(a6[1] - *a6) >> 4;
        v37 = (_DWORD *)v16[1];
        v36 = v16[2];
        if ((unint64_t)v37 >= v36)
        {
          v42 = (_DWORD *)*v16;
          v43 = ((uint64_t)v37 - *v16) >> 2;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62)
            goto LABEL_238;
          v45 = v36 - (_QWORD)v42;
          if (v45 >> 1 > v44)
            v44 = v45 >> 1;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
            v46 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v174, v46);
            v42 = (_DWORD *)*v16;
            v37 = (_DWORD *)v16[1];
          }
          else
          {
            v47 = 0;
          }
          v54 = &v47[4 * v43];
          *(_DWORD *)v54 = v35;
          v38 = v54 + 4;
          while (v37 != v42)
          {
            v55 = *--v37;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          *v16 = (uint64_t)v54;
          v16[1] = (uint64_t)v38;
          v16[2] = (uint64_t)&v47[4 * v46];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v37 = v35;
          v38 = v37 + 1;
        }
        v16[1] = (uint64_t)v38;
        v57 = a6[1];
        v56 = (unint64_t)a6[2];
        if ((unint64_t)v57 >= v56)
        {
          v59 = (v57 - *a6) >> 4;
          v15 = (uint64_t *)a9;
          if ((unint64_t)(v59 + 1) >> 60)
            goto LABEL_238;
          v60 = v56 - (_QWORD)*a6;
          v61 = v60 >> 3;
          if (v60 >> 3 <= (unint64_t)(v59 + 1))
            v61 = v59 + 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
            v62 = 0xFFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
            v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a6 + 2), v62);
          else
            v63 = 0;
          v64 = &v63[16 * v59];
          *(_OWORD *)v64 = *(_OWORD *)(v19 + 16 * v17);
          v58 = v64 + 16;
          v66 = *a6;
          v65 = a6[1];
          if (v65 != *a6)
          {
            do
            {
              v67 = *((_OWORD *)v65 - 1);
              v65 -= 16;
              *((_OWORD *)v64 - 1) = v67;
              v64 -= 16;
            }
            while (v65 != v66);
            v65 = *a6;
          }
          *a6 = v64;
          a6[1] = v58;
          a6[2] = &v63[16 * v62];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(_OWORD *)v57 = *(_OWORD *)(v19 + 16 * v17);
          v58 = v57 + 16;
          v15 = (uint64_t *)a9;
        }
        a6[1] = v58;
      }
      if (*(char *)(v11[1] - 1) <= 0)
      {
        v73 = (unint64_t)(a4[1] - *a4) >> 4;
        end = (std::vector<unsigned int>::pointer)v15[1];
        v74 = v15[2];
        if ((unint64_t)end >= v74)
        {
          begin = (std::vector<unsigned int>::pointer)*v15;
          v84 = ((uint64_t)end - *v15) >> 2;
          v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62)
            goto LABEL_238;
          v86 = v74 - (_QWORD)begin;
          if (v86 >> 1 > v85)
            v85 = v86 >> 1;
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
            v87 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v87 = v85;
          if (v87)
          {
            v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v87);
            begin = a9->__begin_;
            end = a9->__end_;
          }
          else
          {
            v88 = 0;
          }
          v91 = (unsigned int *)&v88[4 * v84];
          *v91 = v73;
          v76 = v91 + 1;
          while (end != begin)
          {
            v92 = *--end;
            *--v91 = v92;
          }
          a9->__begin_ = v91;
          a9->__end_ = v76;
          a9->__end_cap_.__value_ = (unsigned int *)&v88[4 * v87];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v73;
          v76 = end + 1;
        }
        a9->__end_ = v76;
        v15 = (uint64_t *)a9;
        v94 = a4[1];
        v93 = (unint64_t)a4[2];
        if ((unint64_t)v94 >= v93)
        {
          v96 = (v94 - *a4) >> 4;
          if ((unint64_t)(v96 + 1) >> 60)
LABEL_238:
            abort();
          v97 = v93 - (_QWORD)*a4;
          v98 = v97 >> 3;
          if (v97 >> 3 <= (unint64_t)(v96 + 1))
            v98 = v96 + 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0)
            v99 = 0xFFFFFFFFFFFFFFFLL;
          else
            v99 = v98;
          if (v99)
            v100 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v99);
          else
            v100 = 0;
          v101 = &v100[16 * v96];
          *(_OWORD *)v101 = *(_OWORD *)(v19 + 16 * v17);
          v95 = v101 + 16;
          v103 = *a4;
          v102 = a4[1];
          if (v102 != *a4)
          {
            do
            {
              v104 = *((_OWORD *)v102 - 1);
              v102 -= 16;
              *((_OWORD *)v101 - 1) = v104;
              v101 -= 16;
            }
            while (v102 != v103);
            v102 = *a4;
          }
          *a4 = v101;
          a4[1] = v95;
          a4[2] = &v100[16 * v99];
          if (v102)
            operator delete(v102);
        }
        else
        {
          *(_OWORD *)v94 = *(_OWORD *)(v19 + 16 * v17);
          v95 = v94 + 16;
        }
        a4[1] = v95;
      }
      else
      {
        v71 = (_DWORD *)v15[1];
        v70 = v15[2];
        if ((unint64_t)v71 >= v70)
        {
          v77 = (_DWORD *)*v15;
          v78 = ((uint64_t)v71 - *v15) >> 2;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 62)
            goto LABEL_238;
          v80 = v70 - (_QWORD)v77;
          if (v80 >> 1 > v79)
            v79 = v80 >> 1;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
            v81 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          if (v81)
          {
            v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v81);
            v77 = (_DWORD *)*v15;
            v71 = (_DWORD *)v15[1];
          }
          else
          {
            v82 = 0;
          }
          v89 = &v82[4 * v78];
          *(_DWORD *)v89 = -1;
          v72 = v89 + 4;
          while (v71 != v77)
          {
            v90 = *--v71;
            *((_DWORD *)v89 - 1) = v90;
            v89 -= 4;
          }
          *v15 = (uint64_t)v89;
          v15[1] = (uint64_t)v72;
          v15[2] = (uint64_t)&v82[4 * v81];
          if (v77)
            operator delete(v77);
        }
        else
        {
          *v71 = -1;
          v72 = v71 + 1;
        }
        v15[1] = (uint64_t)v72;
      }
      v14 = v177;
      v17 = ++v18;
    }
    while (v177[1] > (unint64_t)v18);
  }
  v186 = 0u;
  v187 = 0u;
  v188 = 1065353216;
  v185[0] = &v186;
  v185[1] = a4;
  v185[2] = a6;
  v185[3] = v14;
  v185[4] = a3;
  v183[0] = v11;
  v183[1] = v15;
  v183[2] = v16;
  v183[3] = (uint64_t *)&v186;
  v183[4] = (uint64_t *)&v184;
  v183[5] = a5;
  v183[6] = a7;
  v182[0] = &v186;
  v182[1] = v11;
  v182[2] = v15;
  v182[3] = v16;
  v182[4] = &v184;
  v182[5] = a5;
  v105 = a2[1];
  v182[6] = a7;
  if ((v105 / 3))
  {
    v106 = 0;
    v179 = 3 * (v105 / 3);
    do
    {
      v107 = *a2;
      v108 = (v106 + 1);
      v109 = *(unsigned int *)(*a2 + 4 * v106);
      v110 = (v106 + 2);
      v111 = *v11;
      v112 = *(unsigned int *)(*a2 + 4 * v108);
      v113 = *(unsigned int *)(*a2 + 4 * v110);
      v114 = *(char *)(v111 + v112);
      if (v114 * *(char *)(v111 + v109) == -1)
      {
        v114 = *(char *)(v111 + v112);
      }
      v115 = *(char *)(v111 + v113);
      if (v114 * v115 == -1)
      {
        v115 = *(char *)(v111 + v113);
      }
      v116 = v115;
      if (v115 * *(char *)(v111 + v109) == -1)
      {
        v116 = *(unsigned __int8 *)(v111 + v113);
      }
      v117 = *(unsigned __int8 *)(v111 + v109);
      v118 = *(unsigned __int8 *)(v111 + v112);
      if (*(_BYTE *)(v111 + v109))
        v119 = 0;
      else
        v119 = v118 == 0;
      if (v119 && v116 == 0)
      {
        v11 = v181;
      }
      else
      {
        v11 = v181;
        if ((v117 & 0x80) == 0 && ((char)v118 & 0x80000000) == 0 && (v116 & 0x80) == 0)
        {
          v121 = a10->__begin_[*(unsigned int *)(v107 + 4 * v106)];
          v122 = a10->__begin_[*(unsigned int *)(v107 + 4 * v108)];
          v123 = a10->__begin_[*(unsigned int *)(v107 + 4 * v110)];
          v124 = (char **)a7;
LABEL_158:
          goto LABEL_168;
        }
        if ((char)v117 <= 0 && (char)v118 <= 0 && (char)v116 <= 0)
        {
          v121 = a9->__begin_[*(unsigned int *)(v107 + 4 * v106)];
          v122 = a9->__begin_[*(unsigned int *)(v107 + 4 * v108)];
          v123 = a9->__begin_[*(unsigned int *)(v107 + 4 * v110)];
          v124 = (char **)a5;
          goto LABEL_158;
        }
        if (!v117)
        {
          v130 = *(_DWORD *)(v107 + 4 * v106);
          v131 = *(_DWORD *)(v107 + 4 * v108);
          v132 = *(_DWORD *)(v107 + 4 * v110);
LABEL_162:
          goto LABEL_168;
        }
        if (!(_BYTE)v118)
        {
          v130 = *(_DWORD *)(v107 + 4 * v108);
          v131 = *(_DWORD *)(v107 + 4 * v110);
          v132 = *(_DWORD *)(v107 + 4 * v106);
          goto LABEL_162;
        }
        if (!v116)
        {
          v130 = *(_DWORD *)(v107 + 4 * v110);
          v131 = *(_DWORD *)(v107 + 4 * v106);
          v132 = *(_DWORD *)(v107 + 4 * v108);
          goto LABEL_162;
        }
        if ((char)v118 * (char)v116 == 1)
        {
          v127 = *(_DWORD *)(v107 + 4 * v106);
          v128 = *(_DWORD *)(v107 + 4 * v108);
          v129 = *(_DWORD *)(v107 + 4 * v110);
LABEL_167:
          goto LABEL_168;
        }
        if ((char)v117 * (char)v116 == 1)
        {
          v127 = *(_DWORD *)(v107 + 4 * v108);
          v128 = *(_DWORD *)(v107 + 4 * v110);
          v129 = *(_DWORD *)(v107 + 4 * v106);
          goto LABEL_167;
        }
        if ((char)v118 * (char)v117 == 1)
        {
          v127 = *(_DWORD *)(v107 + 4 * v110);
          v128 = *(_DWORD *)(v107 + 4 * v106);
          v129 = *(_DWORD *)(v107 + 4 * v108);
          goto LABEL_167;
        }
      }
LABEL_168:
      v106 += 3;
    }
    while (v179 != v106);
  }
  if (a11)
  {
    a11->__end_ = a11->__begin_;
    std::vector<unsigned int>::reserve(a11, 4 * *((_QWORD *)&v187 + 1));
    v133 = (uint64_t *)v187;
    if ((_QWORD)v187)
    {
      v134 = &a11->__end_cap_;
      v135 = a11->__end_;
      do
      {
        value = v134->__value_;
        if (v135 >= v134->__value_)
        {
          v138 = a11->__begin_;
          v139 = v135 - a11->__begin_;
          v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62)
            goto LABEL_238;
          v141 = (char *)value - (char *)v138;
          if (v141 >> 1 > v140)
            v140 = v141 >> 1;
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
            v142 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v142 = v140;
          if (v142)
          {
            v143 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v142);
            v138 = a11->__begin_;
            v135 = a11->__end_;
          }
          else
          {
            v143 = 0;
          }
          v144 = (unsigned int *)&v143[4 * v139];
          *v144 = *((_DWORD *)v133 + 4);
          v137 = v144 + 1;
          while (v135 != v138)
          {
            v145 = *--v135;
            *--v144 = v145;
          }
          value = (unsigned int *)&v143[4 * v142];
          a11->__begin_ = v144;
          a11->__end_ = v137;
          a11->__end_cap_.__value_ = value;
          if (v138)
          {
            operator delete(v138);
            value = v134->__value_;
          }
        }
        else
        {
          *v135 = *((_DWORD *)v133 + 4);
          v137 = v135 + 1;
        }
        a11->__end_ = v137;
        if (v137 >= value)
        {
          v147 = a11->__begin_;
          v148 = v137 - a11->__begin_;
          v149 = v148 + 1;
          if ((unint64_t)(v148 + 1) >> 62)
            goto LABEL_238;
          v150 = (char *)value - (char *)v147;
          if (v150 >> 1 > v149)
            v149 = v150 >> 1;
          if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
            v151 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v151 = v149;
          if (v151)
          {
            v152 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v151);
            v147 = a11->__begin_;
            v137 = a11->__end_;
          }
          else
          {
            v152 = 0;
          }
          v153 = (unsigned int *)&v152[4 * v148];
          *v153 = *((_DWORD *)v133 + 5);
          v146 = v153 + 1;
          while (v137 != v147)
          {
            v154 = *--v137;
            *--v153 = v154;
          }
          value = (unsigned int *)&v152[4 * v151];
          a11->__begin_ = v153;
          a11->__end_ = v146;
          a11->__end_cap_.__value_ = value;
          if (v147)
          {
            operator delete(v147);
            value = v134->__value_;
          }
        }
        else
        {
          *v137 = *((_DWORD *)v133 + 5);
          v146 = v137 + 1;
        }
        a11->__end_ = v146;
        if (v146 >= value)
        {
          v156 = a11->__begin_;
          v157 = v146 - a11->__begin_;
          v158 = v157 + 1;
          if ((unint64_t)(v157 + 1) >> 62)
            goto LABEL_238;
          v159 = (char *)value - (char *)v156;
          if (v159 >> 1 > v158)
            v158 = v159 >> 1;
          if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
            v160 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v160 = v158;
          if (v160)
          {
            v161 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v160);
            v156 = a11->__begin_;
            v146 = a11->__end_;
          }
          else
          {
            v161 = 0;
          }
          v162 = (unsigned int *)&v161[4 * v157];
          *v162 = *((_DWORD *)v133 + 6);
          v155 = v162 + 1;
          while (v146 != v156)
          {
            v163 = *--v146;
            *--v162 = v163;
          }
          value = (unsigned int *)&v161[4 * v160];
          a11->__begin_ = v162;
          a11->__end_ = v155;
          a11->__end_cap_.__value_ = value;
          if (v156)
          {
            operator delete(v156);
            value = v134->__value_;
          }
        }
        else
        {
          *v146 = *((_DWORD *)v133 + 6);
          v155 = v146 + 1;
        }
        a11->__end_ = v155;
        if (v155 >= value)
        {
          v164 = a11->__begin_;
          v165 = v155 - a11->__begin_;
          v166 = v165 + 1;
          if ((unint64_t)(v165 + 1) >> 62)
            goto LABEL_238;
          v167 = (char *)value - (char *)v164;
          if (v167 >> 1 > v166)
            v166 = v167 >> 1;
          if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
            v168 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v168 = v166;
          if (v168)
          {
            v169 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v168);
            v164 = a11->__begin_;
            v155 = a11->__end_;
          }
          else
          {
            v169 = 0;
          }
          v170 = (unsigned int *)&v169[4 * v165];
          *v170 = *((_DWORD *)v133 + 7);
          v135 = v170 + 1;
          while (v155 != v164)
          {
            v171 = *--v155;
            *--v170 = v171;
          }
          a11->__begin_ = v170;
          a11->__end_ = v135;
          a11->__end_cap_.__value_ = (unsigned int *)&v169[4 * v168];
          if (v164)
            operator delete(v164);
        }
        else
        {
          *v155 = *((_DWORD *)v133 + 7);
          v135 = v155 + 1;
        }
        a11->__end_ = v135;
        v133 = (uint64_t *)*v133;
      }
      while (v133);
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v186);
}

uint64_t geom::split_triangle_mesh_with_plane<double>(_QWORD *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
}

uint64_t geom::`anonymous namespace'::split_triangle_mesh_with_plane_impl<double>(_QWORD *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
  uint64_t *v11;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float64_t v20;
  char v21;
  unint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  _BYTE *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  unint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  char *v56;
  unint64_t v57;
  _OWORD *v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  _OWORD *v67;
  __int128 v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  int v75;
  unint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  unint64_t v79;
  unint64_t v80;
  std::vector<unsigned int>::pointer end;
  unsigned int *v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  std::vector<unsigned int>::pointer begin;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  int v96;
  unsigned int *v97;
  unsigned int v98;
  char *v99;
  unint64_t v100;
  _OWORD *v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  _OWORD *v110;
  __int128 v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  BOOL v131;
  int v133;
  int v134;
  int v135;
  char **v136;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t *v145;
  std::__compressed_pair<unsigned int *> *v146;
  std::vector<unsigned int>::pointer v147;
  unsigned int *value;
  unsigned int *v149;
  std::vector<unsigned int>::pointer v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  std::vector<unsigned int>::pointer v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  std::vector<unsigned int>::pointer v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  unsigned int *v174;
  unsigned int v175;
  std::vector<unsigned int>::pointer v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  unsigned int *v182;
  unsigned int v183;
  uint64_t p_end_cap;
  uint64_t v186;
  _QWORD *v189;
  uint64_t v191;
  uint64_t *v193;
  _QWORD v194[7];
  uint64_t *v195[7];
  char v196;
  _QWORD v197[5];
  __int128 v198;
  __int128 v199;
  int v200;

  v11 = (uint64_t *)a8;
  v14 = a1;
  v15 = (uint64_t *)a9;
  v16 = (uint64_t *)a10;
  a4[1] = *a4;
  a5[1] = *a5;
  a6[1] = *a6;
  a7[1] = *a7;
  a8[1] = *a8;
  a9->__end_ = a9->__begin_;
  a10->__end_ = a10->__begin_;
  std::vector<signed char>::reserve(a8, a1[1]);
  std::vector<unsigned int>::reserve(a9, v14[1]);
  std::vector<unsigned int>::reserve(a10, v14[1]);
  v193 = v11;
  if (v14[1])
  {
    v17 = 0;
    v18 = 0;
    p_end_cap = (uint64_t)&a9->__end_cap_;
    v186 = (uint64_t)&a10->__end_cap_;
    v189 = v14;
    do
    {
      v19 = *v14;
      v20 = a3[2].f64[0]
          + vmulq_f64(*(float64x2_t *)(*v14 + 32 * v17 + 16), a3[1]).f64[0]
          + vaddvq_f64(vmulq_f64(*(float64x2_t *)(*v14 + 32 * v17), *a3));
      v21 = (v20 > 2.22044605e-16) - (v20 < -2.22044605e-16);
      v23 = (_BYTE *)v11[1];
      v22 = v11[2];
      if ((unint64_t)v23 >= v22)
      {
        v25 = *v11;
        v26 = &v23[-v25];
        v27 = (uint64_t)&v23[-v25 + 1];
        if (v27 < 0)
          goto LABEL_238;
        v28 = v22 - v25;
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
          v30 = (char *)operator new(v29);
        else
          v30 = 0;
        v31 = &v26[(_QWORD)v30];
        v32 = &v26[(_QWORD)v30];
        *v32 = v21;
        v24 = v32 + 1;
        if (v23 == (_BYTE *)v25)
        {
          v11 = v193;
        }
        else
        {
          v33 = &v23[~v25];
          do
          {
            v34 = *--v23;
            (v33--)[(_QWORD)v30] = v34;
          }
          while (v23 != (_BYTE *)v25);
          v11 = v193;
          v23 = (_BYTE *)*v193;
          v31 = v30;
        }
        *v11 = (uint64_t)v31;
        v11[1] = (uint64_t)v24;
        v11[2] = (uint64_t)&v30[v29];
        if (v23)
          operator delete(v23);
        v16 = (uint64_t *)a10;
        v15 = (uint64_t *)a9;
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
        v16 = (uint64_t *)a10;
      }
      v11[1] = (uint64_t)v24;
      if ((char)*(v24 - 1) < 0)
      {
        v40 = (_DWORD *)v16[1];
        v39 = v16[2];
        if ((unint64_t)v40 >= v39)
        {
          v48 = (_DWORD *)*v16;
          v49 = ((uint64_t)v40 - *v16) >> 2;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 62)
            goto LABEL_238;
          v51 = v39 - (_QWORD)v48;
          if (v51 >> 1 > v50)
            v50 = v51 >> 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
            v52 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v186, v52);
            v48 = (_DWORD *)*v16;
            v40 = (_DWORD *)v16[1];
          }
          else
          {
            v53 = 0;
          }
          v74 = &v53[4 * v49];
          *(_DWORD *)v74 = -1;
          v41 = v74 + 4;
          while (v40 != v48)
          {
            v75 = *--v40;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *v16 = (uint64_t)v74;
          v16[1] = (uint64_t)v41;
          v16[2] = (uint64_t)&v53[4 * v52];
          if (v48)
            operator delete(v48);
        }
        else
        {
          *v40 = -1;
          v41 = v40 + 1;
        }
        v16[1] = (uint64_t)v41;
      }
      else
      {
        v35 = (unint64_t)(a6[1] - *a6) >> 5;
        v37 = (_DWORD *)v16[1];
        v36 = v16[2];
        if ((unint64_t)v37 >= v36)
        {
          v42 = (_DWORD *)*v16;
          v43 = ((uint64_t)v37 - *v16) >> 2;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62)
            goto LABEL_238;
          v45 = v36 - (_QWORD)v42;
          if (v45 >> 1 > v44)
            v44 = v45 >> 1;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
            v46 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
          {
            v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v186, v46);
            v42 = (_DWORD *)*v16;
            v37 = (_DWORD *)v16[1];
          }
          else
          {
            v47 = 0;
          }
          v54 = &v47[4 * v43];
          *(_DWORD *)v54 = v35;
          v38 = v54 + 4;
          while (v37 != v42)
          {
            v55 = *--v37;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          *v16 = (uint64_t)v54;
          v16[1] = (uint64_t)v38;
          v16[2] = (uint64_t)&v47[4 * v46];
          if (v42)
            operator delete(v42);
        }
        else
        {
          *v37 = v35;
          v38 = v37 + 1;
        }
        v16[1] = (uint64_t)v38;
        v56 = a6[1];
        v57 = (unint64_t)a6[2];
        if ((unint64_t)v56 >= v57)
        {
          v61 = (v56 - *a6) >> 5;
          v62 = v61 + 1;
          v15 = (uint64_t *)a9;
          if ((unint64_t)(v61 + 1) >> 59)
            goto LABEL_238;
          v63 = v57 - (_QWORD)*a6;
          if (v63 >> 4 > v62)
            v62 = v63 >> 4;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFE0)
            v64 = 0x7FFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
            v65 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a6 + 2), v64);
          else
            v65 = 0;
          v66 = &v65[32 * v61];
          v67 = (_OWORD *)(v19 + 32 * v17);
          v68 = v67[1];
          *(_OWORD *)v66 = *v67;
          *((_OWORD *)v66 + 1) = v68;
          v70 = *a6;
          v69 = a6[1];
          v71 = v66;
          if (v69 != *a6)
          {
            do
            {
              v72 = *((_OWORD *)v69 - 2);
              v73 = *((_OWORD *)v69 - 1);
              v69 -= 32;
              *((_OWORD *)v71 - 2) = v72;
              *((_OWORD *)v71 - 1) = v73;
              v71 -= 32;
            }
            while (v69 != v70);
            v69 = *a6;
          }
          v60 = v66 + 32;
          *a6 = v71;
          a6[1] = v66 + 32;
          a6[2] = &v65[32 * v64];
          if (v69)
            operator delete(v69);
        }
        else
        {
          v58 = (_OWORD *)(v19 + 32 * v17);
          v59 = v58[1];
          *(_OWORD *)v56 = *v58;
          *((_OWORD *)v56 + 1) = v59;
          v60 = v56 + 32;
          v15 = (uint64_t *)a9;
        }
        a6[1] = v60;
      }
      if (*(char *)(v11[1] - 1) <= 0)
      {
        v79 = (unint64_t)(a4[1] - *a4) >> 5;
        end = (std::vector<unsigned int>::pointer)v15[1];
        v80 = v15[2];
        if ((unint64_t)end >= v80)
        {
          begin = (std::vector<unsigned int>::pointer)*v15;
          v90 = ((uint64_t)end - *v15) >> 2;
          v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62)
            goto LABEL_238;
          v92 = v80 - (_QWORD)begin;
          if (v92 >> 1 > v91)
            v91 = v92 >> 1;
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
            v93 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v93 = v91;
          if (v93)
          {
            v94 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v93);
            begin = a9->__begin_;
            end = a9->__end_;
          }
          else
          {
            v94 = 0;
          }
          v97 = (unsigned int *)&v94[4 * v90];
          *v97 = v79;
          v82 = v97 + 1;
          while (end != begin)
          {
            v98 = *--end;
            *--v97 = v98;
          }
          a9->__begin_ = v97;
          a9->__end_ = v82;
          a9->__end_cap_.__value_ = (unsigned int *)&v94[4 * v93];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v79;
          v82 = end + 1;
        }
        a9->__end_ = v82;
        v15 = (uint64_t *)a9;
        v99 = a4[1];
        v100 = (unint64_t)a4[2];
        if ((unint64_t)v99 >= v100)
        {
          v104 = (v99 - *a4) >> 5;
          v105 = v104 + 1;
          if ((unint64_t)(v104 + 1) >> 59)
LABEL_238:
            abort();
          v106 = v100 - (_QWORD)*a4;
          if (v106 >> 4 > v105)
            v105 = v106 >> 4;
          if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFE0)
            v107 = 0x7FFFFFFFFFFFFFFLL;
          else
            v107 = v105;
          if (v107)
            v108 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v107);
          else
            v108 = 0;
          v109 = &v108[32 * v104];
          v110 = (_OWORD *)(v19 + 32 * v17);
          v111 = v110[1];
          *(_OWORD *)v109 = *v110;
          *((_OWORD *)v109 + 1) = v111;
          v113 = *a4;
          v112 = a4[1];
          v114 = v109;
          if (v112 != *a4)
          {
            do
            {
              v115 = *((_OWORD *)v112 - 2);
              v116 = *((_OWORD *)v112 - 1);
              v112 -= 32;
              *((_OWORD *)v114 - 2) = v115;
              *((_OWORD *)v114 - 1) = v116;
              v114 -= 32;
            }
            while (v112 != v113);
            v112 = *a4;
          }
          v103 = v109 + 32;
          *a4 = v114;
          a4[1] = v109 + 32;
          a4[2] = &v108[32 * v107];
          if (v112)
            operator delete(v112);
        }
        else
        {
          v101 = (_OWORD *)(v19 + 32 * v17);
          v102 = v101[1];
          *(_OWORD *)v99 = *v101;
          *((_OWORD *)v99 + 1) = v102;
          v103 = v99 + 32;
        }
        a4[1] = v103;
      }
      else
      {
        v77 = (_DWORD *)v15[1];
        v76 = v15[2];
        if ((unint64_t)v77 >= v76)
        {
          v83 = (_DWORD *)*v15;
          v84 = ((uint64_t)v77 - *v15) >> 2;
          v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62)
            goto LABEL_238;
          v86 = v76 - (_QWORD)v83;
          if (v86 >> 1 > v85)
            v85 = v86 >> 1;
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
            v87 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v87 = v85;
          if (v87)
          {
            v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v87);
            v83 = (_DWORD *)*v15;
            v77 = (_DWORD *)v15[1];
          }
          else
          {
            v88 = 0;
          }
          v95 = &v88[4 * v84];
          *(_DWORD *)v95 = -1;
          v78 = v95 + 4;
          while (v77 != v83)
          {
            v96 = *--v77;
            *((_DWORD *)v95 - 1) = v96;
            v95 -= 4;
          }
          *v15 = (uint64_t)v95;
          v15[1] = (uint64_t)v78;
          v15[2] = (uint64_t)&v88[4 * v87];
          if (v83)
            operator delete(v83);
        }
        else
        {
          *v77 = -1;
          v78 = v77 + 1;
        }
        v15[1] = (uint64_t)v78;
      }
      v14 = v189;
      v17 = ++v18;
    }
    while (v189[1] > (unint64_t)v18);
  }
  v198 = 0u;
  v199 = 0u;
  v200 = 1065353216;
  v197[0] = &v198;
  v197[1] = a4;
  v197[2] = a6;
  v197[3] = v14;
  v197[4] = a3;
  v195[0] = v11;
  v195[1] = v15;
  v195[2] = v16;
  v195[3] = (uint64_t *)&v198;
  v195[4] = (uint64_t *)&v196;
  v195[5] = a5;
  v195[6] = a7;
  v194[0] = &v198;
  v194[1] = v11;
  v194[2] = v15;
  v194[3] = v16;
  v194[4] = &v196;
  v194[5] = a5;
  v117 = a2[1];
  v194[6] = a7;
  if ((v117 / 3))
  {
    v118 = 0;
    v191 = 3 * (v117 / 3);
    do
    {
      v119 = *a2;
      v120 = (v118 + 1);
      v121 = *(unsigned int *)(*a2 + 4 * v118);
      v122 = (v118 + 2);
      v123 = *v11;
      v124 = *(unsigned int *)(*a2 + 4 * v120);
      v125 = *(unsigned int *)(*a2 + 4 * v122);
      v126 = *(char *)(v123 + v124);
      if (v126 * *(char *)(v123 + v121) == -1)
      {
        v126 = *(char *)(v123 + v124);
      }
      v127 = *(char *)(v123 + v125);
      if (v126 * v127 == -1)
      {
        v127 = *(char *)(v123 + v125);
      }
      v128 = v127;
      if (v127 * *(char *)(v123 + v121) == -1)
      {
        v128 = *(unsigned __int8 *)(v123 + v125);
      }
      v129 = *(unsigned __int8 *)(v123 + v121);
      v130 = *(unsigned __int8 *)(v123 + v124);
      if (*(_BYTE *)(v123 + v121))
        v131 = 0;
      else
        v131 = v130 == 0;
      if (v131 && v128 == 0)
      {
        v11 = v193;
      }
      else
      {
        v11 = v193;
        if ((v129 & 0x80) == 0 && ((char)v130 & 0x80000000) == 0 && (v128 & 0x80) == 0)
        {
          v133 = a10->__begin_[*(unsigned int *)(v119 + 4 * v118)];
          v134 = a10->__begin_[*(unsigned int *)(v119 + 4 * v120)];
          v135 = a10->__begin_[*(unsigned int *)(v119 + 4 * v122)];
          v136 = (char **)a7;
LABEL_158:
          goto LABEL_168;
        }
        if ((char)v129 <= 0 && (char)v130 <= 0 && (char)v128 <= 0)
        {
          v133 = a9->__begin_[*(unsigned int *)(v119 + 4 * v118)];
          v134 = a9->__begin_[*(unsigned int *)(v119 + 4 * v120)];
          v135 = a9->__begin_[*(unsigned int *)(v119 + 4 * v122)];
          v136 = (char **)a5;
          goto LABEL_158;
        }
        if (!v129)
        {
          v142 = *(_DWORD *)(v119 + 4 * v118);
          v143 = *(_DWORD *)(v119 + 4 * v120);
          v144 = *(_DWORD *)(v119 + 4 * v122);
LABEL_162:
          goto LABEL_168;
        }
        if (!(_BYTE)v130)
        {
          v142 = *(_DWORD *)(v119 + 4 * v120);
          v143 = *(_DWORD *)(v119 + 4 * v122);
          v144 = *(_DWORD *)(v119 + 4 * v118);
          goto LABEL_162;
        }
        if (!v128)
        {
          v142 = *(_DWORD *)(v119 + 4 * v122);
          v143 = *(_DWORD *)(v119 + 4 * v118);
          v144 = *(_DWORD *)(v119 + 4 * v120);
          goto LABEL_162;
        }
        if ((char)v130 * (char)v128 == 1)
        {
          v139 = *(_DWORD *)(v119 + 4 * v118);
          v140 = *(_DWORD *)(v119 + 4 * v120);
          v141 = *(_DWORD *)(v119 + 4 * v122);
LABEL_167:
          goto LABEL_168;
        }
        if ((char)v129 * (char)v128 == 1)
        {
          v139 = *(_DWORD *)(v119 + 4 * v120);
          v140 = *(_DWORD *)(v119 + 4 * v122);
          v141 = *(_DWORD *)(v119 + 4 * v118);
          goto LABEL_167;
        }
        if ((char)v130 * (char)v129 == 1)
        {
          v139 = *(_DWORD *)(v119 + 4 * v122);
          v140 = *(_DWORD *)(v119 + 4 * v118);
          v141 = *(_DWORD *)(v119 + 4 * v120);
          goto LABEL_167;
        }
      }
LABEL_168:
      v118 += 3;
    }
    while (v191 != v118);
  }
  if (a11)
  {
    a11->__end_ = a11->__begin_;
    std::vector<unsigned int>::reserve(a11, 4 * *((_QWORD *)&v199 + 1));
    v145 = (uint64_t *)v199;
    if ((_QWORD)v199)
    {
      v146 = &a11->__end_cap_;
      v147 = a11->__end_;
      do
      {
        value = v146->__value_;
        if (v147 >= v146->__value_)
        {
          v150 = a11->__begin_;
          v151 = v147 - a11->__begin_;
          v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62)
            goto LABEL_238;
          v153 = (char *)value - (char *)v150;
          if (v153 >> 1 > v152)
            v152 = v153 >> 1;
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
            v154 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v154 = v152;
          if (v154)
          {
            v155 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v154);
            v150 = a11->__begin_;
            v147 = a11->__end_;
          }
          else
          {
            v155 = 0;
          }
          v156 = (unsigned int *)&v155[4 * v151];
          *v156 = *((_DWORD *)v145 + 4);
          v149 = v156 + 1;
          while (v147 != v150)
          {
            v157 = *--v147;
            *--v156 = v157;
          }
          value = (unsigned int *)&v155[4 * v154];
          a11->__begin_ = v156;
          a11->__end_ = v149;
          a11->__end_cap_.__value_ = value;
          if (v150)
          {
            operator delete(v150);
            value = v146->__value_;
          }
        }
        else
        {
          *v147 = *((_DWORD *)v145 + 4);
          v149 = v147 + 1;
        }
        a11->__end_ = v149;
        if (v149 >= value)
        {
          v159 = a11->__begin_;
          v160 = v149 - a11->__begin_;
          v161 = v160 + 1;
          if ((unint64_t)(v160 + 1) >> 62)
            goto LABEL_238;
          v162 = (char *)value - (char *)v159;
          if (v162 >> 1 > v161)
            v161 = v162 >> 1;
          if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL)
            v163 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v163 = v161;
          if (v163)
          {
            v164 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v163);
            v159 = a11->__begin_;
            v149 = a11->__end_;
          }
          else
          {
            v164 = 0;
          }
          v165 = (unsigned int *)&v164[4 * v160];
          *v165 = *((_DWORD *)v145 + 5);
          v158 = v165 + 1;
          while (v149 != v159)
          {
            v166 = *--v149;
            *--v165 = v166;
          }
          value = (unsigned int *)&v164[4 * v163];
          a11->__begin_ = v165;
          a11->__end_ = v158;
          a11->__end_cap_.__value_ = value;
          if (v159)
          {
            operator delete(v159);
            value = v146->__value_;
          }
        }
        else
        {
          *v149 = *((_DWORD *)v145 + 5);
          v158 = v149 + 1;
        }
        a11->__end_ = v158;
        if (v158 >= value)
        {
          v168 = a11->__begin_;
          v169 = v158 - a11->__begin_;
          v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62)
            goto LABEL_238;
          v171 = (char *)value - (char *)v168;
          if (v171 >> 1 > v170)
            v170 = v171 >> 1;
          if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
            v172 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v172 = v170;
          if (v172)
          {
            v173 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v172);
            v168 = a11->__begin_;
            v158 = a11->__end_;
          }
          else
          {
            v173 = 0;
          }
          v174 = (unsigned int *)&v173[4 * v169];
          *v174 = *((_DWORD *)v145 + 6);
          v167 = v174 + 1;
          while (v158 != v168)
          {
            v175 = *--v158;
            *--v174 = v175;
          }
          value = (unsigned int *)&v173[4 * v172];
          a11->__begin_ = v174;
          a11->__end_ = v167;
          a11->__end_cap_.__value_ = value;
          if (v168)
          {
            operator delete(v168);
            value = v146->__value_;
          }
        }
        else
        {
          *v158 = *((_DWORD *)v145 + 6);
          v167 = v158 + 1;
        }
        a11->__end_ = v167;
        if (v167 >= value)
        {
          v176 = a11->__begin_;
          v177 = v167 - a11->__begin_;
          v178 = v177 + 1;
          if ((unint64_t)(v177 + 1) >> 62)
            goto LABEL_238;
          v179 = (char *)value - (char *)v176;
          if (v179 >> 1 > v178)
            v178 = v179 >> 1;
          if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
            v180 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v180 = v178;
          if (v180)
          {
            v181 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v180);
            v176 = a11->__begin_;
            v167 = a11->__end_;
          }
          else
          {
            v181 = 0;
          }
          v182 = (unsigned int *)&v181[4 * v177];
          *v182 = *((_DWORD *)v145 + 7);
          v147 = v182 + 1;
          while (v167 != v176)
          {
            v183 = *--v167;
            *--v182 = v183;
          }
          a11->__begin_ = v182;
          a11->__end_ = v147;
          a11->__end_cap_.__value_ = (unsigned int *)&v181[4 * v180];
          if (v176)
            operator delete(v176);
        }
        else
        {
          *v167 = *((_DWORD *)v145 + 7);
          v147 = v167 + 1;
        }
        a11->__end_ = v147;
        v145 = (uint64_t *)*v145;
      }
      while (v145);
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v198);
}

uint64_t geom::split_triangle_mesh_with_plane<float>(_QWORD *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10)
{
}

uint64_t geom::split_triangle_mesh_with_plane<double>(_QWORD *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10)
{
}

void geom::split_triangle_mesh_with_plane<float>(_QWORD *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7)
{
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  memset(&v8, 0, sizeof(v8));
  memset(&__p, 0, sizeof(__p));
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v8.__begin_)
  {
    v8.__end_ = v8.__begin_;
    operator delete(v8.__begin_);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

void geom::split_triangle_mesh_with_plane<double>(_QWORD *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7)
{
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  memset(&v8, 0, sizeof(v8));
  memset(&__p, 0, sizeof(__p));
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v8.__begin_)
  {
    v8.__end_ = v8.__begin_;
    operator delete(v8.__begin_);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

uint64_t geom_split_triangle_mesh_with_plane_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  float32x4_t v15;
  char **v16;
  uint64_t *v17;
  char **v18;
  uint64_t *v19;
  unint64_t *v20;
  std::vector<unsigned int> *v21;
  std::vector<unsigned int> *v22;
  std::vector<unsigned int> *v23;
  float32x4_t v25[2];
  uint64_t v26[2];
  _QWORD v27[2];

  v27[0] = a2;
  v27[1] = a1;
  v26[0] = a4;
  v26[1] = 3 * a3;
  v15 = a5[1];
  v25[0] = *a5;
  v25[1] = v15;
  v16 = (char **)geom::collection_to_vector<float>(a6);
  v17 = (uint64_t *)geom::collection_to_vector<float>(a7);
  v18 = (char **)geom::collection_to_vector<float>(a8);
  v19 = (uint64_t *)geom::collection_to_vector<float>(a9);
  v20 = (unint64_t *)geom::collection_to_vector<float>(a10);
  v21 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a11);
  v22 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a12);
  v23 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a13);
}

uint64_t geom_split_triangle_mesh_with_plane_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  float64x2_t v15;
  char **v16;
  uint64_t *v17;
  char **v18;
  uint64_t *v19;
  unint64_t *v20;
  std::vector<unsigned int> *v21;
  std::vector<unsigned int> *v22;
  std::vector<unsigned int> *v23;
  uint64_t v25[2];
  _QWORD v26[2];
  float64x2_t v27[3];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v26[0] = a2;
  v26[1] = a1;
  v25[0] = a4;
  v25[1] = 3 * a3;
  v15 = a5[1];
  v27[0] = *a5;
  v27[1] = v15;
  v27[2] = a5[2];
  v16 = (char **)geom::collection_to_vector<float>(a6);
  v17 = (uint64_t *)geom::collection_to_vector<float>(a7);
  v18 = (char **)geom::collection_to_vector<float>(a8);
  v19 = (uint64_t *)geom::collection_to_vector<float>(a9);
  v20 = (unint64_t *)geom::collection_to_vector<float>(a10);
  v21 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a11);
  v22 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a12);
  v23 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a13);
}

void std::vector<signed char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

_DWORD *geom::`anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  float *v6;
  _DWORD *result;
  uint64_t *v8;
  void **v9;
  float32x4_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD *f32;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  float32x4_t *v34;
  char *v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  void **v39;
  float32x4_t *v40;
  unint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  float32x4_t *v48;
  char *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t v52;
  float *v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned int v56;
  unsigned int v57;

  v6 = *(float **)a1;
  v56 = a2;
  v57 = a3;
  if (!result)
  {
    v9 = *(void ***)(a1 + 8);
    v8 = *(uint64_t **)(a1 + 16);
    v10 = (float32x4_t *)v9[1];
    v11 = *(float32x4_t **)(a1 + 32);
    v12 = **(_QWORD **)(a1 + 24);
    v13 = *(float32x4_t *)(v12 + 16 * a2);
    v14 = *(float32x4_t *)(v12 + 16 * a3);
    v15 = vsubq_f32(v14, v13);
    v16 = *v11;
    v17 = vmulq_f32(*v11, v15);
    LODWORD(v18) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
    if (fabsf(v18) <= 0.00000011921)
    {
      v23 = vmulq_f32(v13, v16);
      v21 = 0uLL;
      if ((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]+ v11[1].f32[0]) <= 0.00000011921)
      {
        v24.i64[0] = 0x3F0000003F000000;
        v24.i64[1] = 0x3F0000003F000000;
        v21 = vmulq_f32(vaddq_f32(v13, v14), v24);
      }
    }
    else
    {
      v19 = vmulq_f32(v13, v16);
      v20 = (float)((float)-v11[1].f32[0]
                  - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0])/ v18;
      v21 = 0uLL;
      if (v20 >= 0.0 && v20 <= 1.0)
        v21 = vmlaq_n_f32(v13, v15, v20);
    }
    v26 = *v8;
    v25 = v8[1];
    v27 = ((char *)v10 - (_BYTE *)*v9) >> 4;
    v28 = (unint64_t)v9[2];
    if ((unint64_t)v10 >= v28)
    {
      if ((unint64_t)(v27 + 1) >> 60)
        goto LABEL_44;
      v30 = v28 - (_QWORD)*v9;
      v31 = v30 >> 3;
      if (v30 >> 3 <= (unint64_t)(v27 + 1))
        v31 = v27 + 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      v54 = v21;
      if (v32)
      {
        v33 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v9 + 2), v32);
        v21 = v54;
      }
      else
      {
        v33 = 0;
      }
      v34 = (float32x4_t *)&v33[16 * v27];
      v35 = &v33[16 * v32];
      *v34 = v21;
      f32 = (_OWORD *)v34[1].f32;
      v37 = (float32x4_t *)*v9;
      v36 = (float32x4_t *)v9[1];
      if (v36 != *v9)
      {
        do
        {
          v38 = v36[-1];
          --v36;
          v34[-1] = v38;
          --v34;
        }
        while (v36 != v37);
        v36 = (float32x4_t *)*v9;
      }
      *v9 = v34;
      v9[1] = f32;
      v9[2] = v35;
      if (v36)
      {
        operator delete(v36);
        v21 = v54;
      }
    }
    else
    {
      *v10 = v21;
      f32 = (_OWORD *)v10[1].f32;
    }
    v9[1] = f32;
    v39 = *(void ***)(a1 + 16);
    v40 = (float32x4_t *)v39[1];
    v41 = (unint64_t)v39[2];
    if ((unint64_t)v40 < v41)
    {
      *v40 = v21;
      v42 = (_OWORD *)v40[1].f32;
LABEL_42:
      v39[1] = v42;
      v53 = *(float **)a1;
      v56 = a2;
      v57 = a3;
      *result = v27;
      result[1] = (unint64_t)(v25 - v26) >> 4;
      return result;
    }
    v43 = ((char *)v40 - (_BYTE *)*v39) >> 4;
    if (!((unint64_t)(v43 + 1) >> 60))
    {
      v44 = v41 - (_QWORD)*v39;
      v45 = v44 >> 3;
      if (v44 >> 3 <= (unint64_t)(v43 + 1))
        v45 = v43 + 1;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
      {
        v55 = v21;
        v47 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v39 + 2), v46);
        v21 = v55;
      }
      else
      {
        v47 = 0;
      }
      v48 = (float32x4_t *)&v47[16 * v43];
      v49 = &v47[16 * v46];
      *v48 = v21;
      v42 = (_OWORD *)v48[1].f32;
      v51 = (float32x4_t *)*v39;
      v50 = (float32x4_t *)v39[1];
      if (v50 != *v39)
      {
        do
        {
          v52 = v50[-1];
          --v50;
          v48[-1] = v52;
          --v48;
        }
        while (v50 != v51);
        v50 = (float32x4_t *)*v39;
      }
      *v39 = v48;
      v39[1] = v42;
      v39[2] = v49;
      if (v50)
        operator delete(v50);
      goto LABEL_42;
    }
LABEL_44:
    abort();
  }
  return result;
}

void geom::`anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(std::vector<unsigned int> &,unsigned int,unsigned int,unsigned int)#1}::operator()(char **a1, int a2, int a3, int a4)
{
  char *v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;

  v9 = a1 + 2;
  v8 = a1[2];
  v10 = a1[1];
  if (v10 >= v8)
  {
    v12 = *a1;
    v13 = (v10 - *a1) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      goto LABEL_50;
    v15 = v8 - v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v16);
      v12 = *a1;
      v10 = a1[1];
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v8 = &v17[4 * v16];
    *(_DWORD *)v18 = a2;
    v11 = v18 + 4;
    while (v10 != v12)
    {
      v19 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v18 - 1) = v19;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v11;
    a1[2] = v8;
    if (v12)
    {
      operator delete(v12);
      v8 = *v9;
    }
  }
  else
  {
    *(_DWORD *)v10 = a2;
    v11 = v10 + 4;
  }
  a1[1] = v11;
  if (v11 >= v8)
  {
    v21 = *a1;
    v22 = (v11 - *a1) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
      goto LABEL_50;
    v24 = v8 - v21;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v25);
      v21 = *a1;
      v11 = a1[1];
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[4 * v22];
    v8 = &v26[4 * v25];
    *(_DWORD *)v27 = a3;
    v20 = v27 + 4;
    while (v11 != v21)
    {
      v28 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v27 - 1) = v28;
      v27 -= 4;
    }
    *a1 = v27;
    a1[1] = v20;
    a1[2] = v8;
    if (v21)
    {
      operator delete(v21);
      v8 = *v9;
    }
  }
  else
  {
    *(_DWORD *)v11 = a3;
    v20 = v11 + 4;
  }
  a1[1] = v20;
  if (v20 < v8)
  {
    *(_DWORD *)v20 = a4;
    v29 = v20 + 4;
    goto LABEL_49;
  }
  v30 = *a1;
  v31 = (v20 - *a1) >> 2;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 62)
LABEL_50:
    abort();
  v33 = v8 - v30;
  if (v33 >> 1 > v32)
    v32 = v33 >> 1;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
    v34 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (v34)
  {
    v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v34);
    v30 = *a1;
    v20 = a1[1];
  }
  else
  {
    v35 = 0;
  }
  v36 = &v35[4 * v31];
  v37 = &v35[4 * v34];
  *(_DWORD *)v36 = a4;
  v29 = v36 + 4;
  while (v20 != v30)
  {
    v38 = *((_DWORD *)v20 - 1);
    v20 -= 4;
    *((_DWORD *)v36 - 1) = v38;
    v36 -= 4;
  }
  *a1 = v36;
  a1[1] = v29;
  a1[2] = v37;
  if (v30)
    operator delete(v30);
LABEL_49:
  a1[1] = v29;
}

void geom::`anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int,unsigned int)#1}::operator()(uint64_t **a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char **v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23[2];

  v8 = **a1;
  v9 = *a1[1];
  v11 = a1[2];
  v10 = a1[3];
  v12 = *v11;
  v23[0] = a3;
  v23[1] = a4;
  if (!v13)
    abort();
  v14 = a3;
  v15 = a2;
  v16 = *((_DWORD *)v13 + 6);
  v17 = *((_DWORD *)v13 + 7);
  v18 = (char **)a1[5];
  v19 = *(_DWORD *)(v9 + 4 * v15);
  if (*(char *)(v8 + v14) < 0)
  {
    v22 = *(_DWORD *)(v12 + 4 * a4);
  }
  else
  {
    v20 = *(_DWORD *)(v9 + 4 * a4);
    v21 = *(_DWORD *)(v12 + 4 * v14);
  }
}

void geom::`anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int,unsigned int)#2}::operator()(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;

  v8 = *(_QWORD **)a1;
  v24 = a2;
  v25 = a3;
  if (!v9
    || (v10 = *((_DWORD *)v9 + 6),
        v11 = *((_DWORD *)v9 + 7),
        v24 = a2,
        v25 = a4,
  {
    abort();
  }
  v13 = a2;
  v14 = *(char *)(**(_QWORD **)(a1 + 8) + a2);
  v15 = *((_DWORD *)v12 + 6);
  v16 = *((_DWORD *)v12 + 7);
  v17 = a4;
  if (v14 < 0)
  {
    v21 = *(_QWORD **)(a1 + 24);
    v22 = *(_DWORD *)(*v21 + 4 * a3);
    v23 = *(_DWORD *)(*v21 + 4 * v17);
  }
  else
  {
    v18 = *(_QWORD **)(a1 + 16);
    v19 = *(_DWORD *)(*v18 + 4 * a3);
    v20 = *(_DWORD *)(*v18 + 4 * v17);
  }
}

uint64_t *std::unordered_map<geom::`anonymous namespace'::edge,geom::`anonymous namespace'::edge_cut,geom::`anonymous namespace'::edge_hash,std::equal_to<geom::`anonymous namespace'::edge>,std::allocator<std::pair<geom::`anonymous namespace'::edge const,geom::`anonymous namespace'::edge_cut>>>::find[abi:nn180100](_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v3 = *a2;
  LODWORD(v2) = a2[1];
  if (v2 >= *a2)
    v4 = v3;
  else
    v4 = v2;
  if (v3 <= v2)
    v2 = v2;
  else
    v2 = v3;
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (v2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = (v2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
    if (v6 >= *(_QWORD *)&v5)
      v8 = v6 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v5 - 1);
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (result = *v9; result; result = (uint64_t *)*result)
  {
    v11 = result[1];
    if (v11 == v6)
    {
      v13 = *((_DWORD *)result + 4);
      v12 = *((_DWORD *)result + 5);
      if (v12 >= v13)
        v14 = *((_DWORD *)result + 4);
      else
        v14 = *((_DWORD *)result + 5);
      if (v12 <= v13)
        v12 = *((_DWORD *)result + 4);
      if ((_DWORD)v4 == v14 && (_DWORD)v2 == v12)
        return result;
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v5)
          v11 %= *(_QWORD *)&v5;
      }
      else
      {
        v11 &= *(_QWORD *)&v5 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return result;
}

char *std::unordered_map<geom::`anonymous namespace'::edge,geom::`anonymous namespace'::edge_cut,geom::`anonymous namespace'::edge_hash,std::equal_to<geom::`anonymous namespace'::edge>,std::allocator<std::pair<geom::`anonymous namespace'::edge const,geom::`anonymous namespace'::edge_cut>>>::operator[](float *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  float v18;
  float v19;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v40;

  v6 = *a2;
  LODWORD(v5) = a2[1];
  if (v5 >= *a2)
    v7 = v6;
  else
    v7 = v5;
  if (v6 <= v5)
    v5 = v5;
  else
    v5 = v6;
  v8 = (v5 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = (v5 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
      if (v8 >= v9)
        v2 = v8 % v9;
    }
    else
    {
      v2 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            v15 = *((_DWORD *)v12 + 4);
            v14 = *((_DWORD *)v12 + 5);
            if (v14 >= v15)
              v16 = *((_DWORD *)v12 + 4);
            else
              v16 = *((_DWORD *)v12 + 5);
            if (v14 <= v15)
              v14 = *((_DWORD *)v12 + 4);
            if ((_DWORD)v7 == v16 && (_DWORD)v5 == v14)
              return (char *)(v12 + 3);
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *(_QWORD *)a2;
  v12[3] = 0;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3)
      v20 = 0;
    v21 = (2 * v9) | !v20;
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_45;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v27)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = a1 + 4;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_70;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_70:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_74;
        }
        v40 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_74:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)a1;
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v36)
  {
    *v12 = *v36;
LABEL_87:
    *v36 = v12;
    goto LABEL_88;
  }
  v37 = *((_QWORD *)a1 + 2);
  *v12 = v37;
  *((_QWORD *)a1 + 2) = v12;
  v35[v2] = a1 + 4;
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_87;
  }
LABEL_88:
  ++*((_QWORD *)a1 + 3);
  return (char *)(v12 + 3);
}

_DWORD *geom::`anonymous namespace'::split_triangle_mesh_with_plane_impl<double>(geom::slice<geom::vector_type<double,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<double,(unsigned char)3> const&,std::vector<geom::vector_type<double,(unsigned char)3,void>::value,std::allocator<geom::vector_type<double,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<double,(unsigned char)3,void>::value,std::allocator<geom::vector_type<double,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  float *v6;
  _DWORD *result;
  uint64_t *v8;
  void **v9;
  int8x16_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  int8x16_t v24;
  BOOL v25;
  float64x2_t v26;
  int8x16_t v27;
  unint64_t v28;
  float64_t v29;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int8x16_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  int8x16_t *v44;
  char *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t v48;
  int8x16_t v49;
  void **v50;
  int8x16_t *v51;
  unint64_t v52;
  int8x16_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  int8x16_t *v59;
  char *v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t v63;
  int8x16_t v64;
  float *v65;
  float64x2_t v66;
  float64x2_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unsigned int v70;
  unsigned int v71;

  v6 = *(float **)a1;
  v70 = a2;
  v71 = a3;
  if (!result)
  {
    v9 = *(void ***)(a1 + 8);
    v8 = *(uint64_t **)(a1 + 16);
    v10 = (int8x16_t *)v9[1];
    v11 = *(float64x2_t **)(a1 + 32);
    v12 = **(_QWORD **)(a1 + 24);
    v13 = (float64x2_t *)(v12 + 32 * a2);
    v14 = (float64x2_t *)(v12 + 32 * a3);
    v16 = *v13;
    v15 = v13[1];
    v17 = *v14;
    v18 = v14[1];
    v19 = vsubq_f64(*v14, *v13);
    v20 = vsubq_f64(v18, v15);
    v21 = *v11;
    v22 = v11[1];
    v23 = vmulq_f64(v22, v20).f64[0] + vaddvq_f64(vmulq_f64(*v11, v19));
    if (fabs(v23) <= 2.22044605e-16)
    {
      v29 = vmulq_f64(v15, v22).f64[0] + vaddvq_f64(vmulq_f64(v16, v21)) + v11[2].f64[0];
      v24 = 0uLL;
      v26 = 0uLL;
      if (v29 > 2.22044605e-16)
        goto LABEL_11;
      __asm { FMOV            V2.2D, #0.5 }
      v24 = (int8x16_t)vmulq_f64(vaddq_f64(v16, v17), _Q2);
      v26 = vmulq_f64(vaddq_f64(v15, v18), _Q2);
      v28 = vextq_s8(v24, v24, 8uLL).u64[0];
    }
    else
    {
      v17.f64[0] = (-v11[2].f64[0] - (vmulq_f64(v15, v22).f64[0] + vaddvq_f64(vmulq_f64(v16, v21)))) / v23;
      v24 = 0uLL;
      v25 = v17.f64[0] < 0.0 || v17.f64[0] > 1.0;
      v26 = 0uLL;
      if (v25)
      {
LABEL_11:
        v36 = *v8;
        v35 = v8[1];
        v37 = ((char *)v10 - (_BYTE *)*v9) >> 5;
        v38 = (unint64_t)v9[2];
        if ((unint64_t)v10 >= v38)
        {
          v40 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 59)
            goto LABEL_45;
          v41 = v38 - (_QWORD)*v9;
          if (v41 >> 4 > v40)
            v40 = v41 >> 4;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
            v42 = 0x7FFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          v66 = v26;
          v68 = v24;
          if (v42)
          {
            v43 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v9 + 2), v42);
            v26 = v66;
            v24 = v68;
          }
          else
          {
            v43 = 0;
          }
          v44 = (int8x16_t *)&v43[32 * v37];
          v45 = &v43[32 * v42];
          *v44 = v24;
          v44[1] = (int8x16_t)v26;
          v39 = v44 + 2;
          v47 = (int8x16_t *)*v9;
          v46 = (int8x16_t *)v9[1];
          if (v46 != *v9)
          {
            do
            {
              v48 = v46[-2];
              v49 = v46[-1];
              v46 -= 2;
              v44[-2] = v48;
              v44[-1] = v49;
              v44 -= 2;
            }
            while (v46 != v47);
            v46 = (int8x16_t *)*v9;
          }
          *v9 = v44;
          v9[1] = v39;
          v9[2] = v45;
          if (v46)
          {
            operator delete(v46);
            v26 = v66;
            v24 = v68;
          }
        }
        else
        {
          *v10 = v24;
          v10[1] = (int8x16_t)v26;
          v39 = v10 + 2;
        }
        v9[1] = v39;
        v50 = *(void ***)(a1 + 16);
        v51 = (int8x16_t *)v50[1];
        v52 = (unint64_t)v50[2];
        if ((unint64_t)v51 < v52)
        {
          *v51 = v24;
          v51[1] = (int8x16_t)v26;
          v53 = v51 + 2;
LABEL_43:
          v50[1] = v53;
          v65 = *(float **)a1;
          v70 = a2;
          v71 = a3;
          *result = v37;
          result[1] = (unint64_t)(v35 - v36) >> 5;
          return result;
        }
        v54 = ((char *)v51 - (_BYTE *)*v50) >> 5;
        v55 = v54 + 1;
        if (!((unint64_t)(v54 + 1) >> 59))
        {
          v56 = v52 - (_QWORD)*v50;
          if (v56 >> 4 > v55)
            v55 = v56 >> 4;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0)
            v57 = 0x7FFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v67 = v26;
            v69 = v24;
            v58 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v50 + 2), v57);
            v26 = v67;
            v24 = v69;
          }
          else
          {
            v58 = 0;
          }
          v59 = (int8x16_t *)&v58[32 * v54];
          v60 = &v58[32 * v57];
          *v59 = v24;
          v59[1] = (int8x16_t)v26;
          v53 = v59 + 2;
          v62 = (int8x16_t *)*v50;
          v61 = (int8x16_t *)v50[1];
          if (v61 != *v50)
          {
            do
            {
              v63 = v61[-2];
              v64 = v61[-1];
              v61 -= 2;
              v59[-2] = v63;
              v59[-1] = v64;
              v59 -= 2;
            }
            while (v61 != v62);
            v61 = (int8x16_t *)*v50;
          }
          *v50 = v59;
          v50[1] = v53;
          v50[2] = v60;
          if (v61)
            operator delete(v61);
          goto LABEL_43;
        }
LABEL_45:
        abort();
      }
      *(_QWORD *)&v19.f64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v27 = (int8x16_t)vmlaq_n_f64(v16, v19, v17.f64[0]);
      v28 = vextq_s8(v27, v27, 8uLL).u64[0];
      v24.i64[0] = v27.i64[0];
      *(_QWORD *)&v26.f64[0] = *(_OWORD *)&vmlaq_f64(v15, v20, v17);
    }
    v24.i64[1] = v28;
    goto LABEL_11;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_1f(unint64_t a1, const void *a2)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v3 = 5 * a1;
    v4 = 20 * a1;
    std::vector<geom::interpolating_key<float>>::__vallocate[abi:nn180100](&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[4 * v3];
  }
  geom::interpolating_curve<float>::build(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_1f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D01E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_1f(unint64_t a1, const void *a2)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v3 = 5 * a1;
    v4 = 20 * a1;
    std::vector<geom::interpolating_key<float>>::__vallocate[abi:nn180100](&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[4 * v3];
  }
  geom::interpolating_curve<float>::build_arc_length_parameterized(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_1f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D02C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float geom_interpolating_curve_evaluate_at_1f(uint64_t a1, float a2)
{
  return geom::interpolating_curve<float>::evaluate_at(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_1f(uint64_t a1, float a2)
{
  return geom::interpolating_curve<float>::evaluate_tangent_at(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_1f(uint64_t a1, float a2)
{
  return geom::interpolating_curve<float>::evaluate_length_at(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_total_length_1f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_1f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_1f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_1f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_1f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  float result;
  uint64_t v10;

  v10 = 0;
  geom::interpolating_curve<float>::span_knots(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_1d(unint64_t a1, const void *a2)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[13];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v3 = 5 * a1;
    v4 = 40 * a1;
    std::vector<geom::interpolating_key<double>>::__vallocate[abi:nn180100](&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[8 * v3];
  }
  geom::interpolating_curve<double>::build(&v9, v8);
  v6 = geom_interpolating_curve_1d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_1d(unint64_t a1, const void *a2)
{
  uint64_t v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[13];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v3 = 5 * a1;
    v4 = 40 * a1;
    std::vector<geom::interpolating_key<double>>::__vallocate[abi:nn180100](&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[8 * v3];
  }
  geom::interpolating_curve<double>::build_arc_length_parameterized(&v9, v8);
  v6 = geom_interpolating_curve_1d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_1d(uint64_t a1, double a2)
{
  return geom::interpolating_curve<double>::evaluate_at(a1 + 16, a2);
}

uint64_t geom_interpolating_curve_evaluate_tangent_at_1d(uint64_t a1, double a2)
{
  return geom::interpolating_curve<double>::evaluate_tangent_at(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_length_at_1d(uint64_t a1, double a2)
{
  return geom::interpolating_curve<double>::evaluate_length_at(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_1d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_1d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_1d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_1d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_1d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double result;
  double v10;
  double v11;

  v10 = 0.0;
  v11 = 0.0;
  geom::interpolating_curve<double>::span_knots(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_2f(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = 32 * a1;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[32 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_2f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_2f(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = 32 * a1;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[32 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_2f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float32x2_t geom_interpolating_curve_evaluate_at_2f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv2_fE11evaluate_atEf(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_2f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv2_fE19evaluate_tangent_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_2f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv2_fE18evaluate_length_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_total_length_2f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_2f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_2f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_2f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_2f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  float result;
  uint64_t v10;

  v10 = 0;
  _ZNK4geom19interpolating_curveIDv2_fE10span_knotsEtRfS3_(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_2d(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[13];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, v8);
  v6 = geom_interpolating_curve_2d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D08C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_2d(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[13];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, v8);
  v6 = geom_interpolating_curve_2d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_2d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv2_dE11evaluate_atEd(a1 + 16, a2);
}

uint64_t geom_interpolating_curve_evaluate_tangent_at_2d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv2_dE19evaluate_tangent_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_length_at_2d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv2_dE18evaluate_length_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_2d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_2d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_2d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_2d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_2d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double result;
  double v10;
  double v11;

  v10 = 0.0;
  v11 = 0.0;
  _ZNK4geom19interpolating_curveIDv2_dE10span_knotsEtRdS3_(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_3f(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv3_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_3f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_3f(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv3_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_3f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_3f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE11evaluate_atEf(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_3f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE19evaluate_tangent_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_3f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE18evaluate_length_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_total_length_3f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_3f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_3f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_3f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_3f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  float result;
  uint64_t v10;

  v10 = 0;
  _ZNK4geom19interpolating_curveIDv3_fE10span_knotsEtRfS3_(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_3d(unint64_t a1, const void *a2)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  _OWORD v7[13];
  char *v8;
  char *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (a1)
  {
    v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    v4 = v9;
    memmove(v9, a2, v3);
    v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv3_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  v5 = geom_interpolating_curve_3d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_2288D0D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(_QWORD *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_3d(unint64_t a1, const void *a2)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  _OWORD v7[13];
  char *v8;
  char *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (a1)
  {
    v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    v4 = v9;
    memmove(v9, a2, v3);
    v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv3_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  v5 = geom_interpolating_curve_3d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_2288D0E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(_QWORD *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float64_t geom_interpolating_curve_evaluate_at_3d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  float64_t result;
  float64x2_t v5;
  float64x2_t v6[2];

  _ZNK4geom19interpolating_curveIDv3_dE11evaluate_atEd(a1 + 16, v6, a3);
  result = v6[0].f64[0];
  v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

float64_t geom_interpolating_curve_evaluate_tangent_at_3d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  float64_t result;
  float64x2_t v5;
  float64x2_t v6[2];

  _ZNK4geom19interpolating_curveIDv3_dE19evaluate_tangent_atEd(a1 + 16, v6, a3);
  result = v6[0].f64[0];
  v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

double geom_interpolating_curve_evaluate_length_at_3d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv3_dE18evaluate_length_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_3d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_3d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_3d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_3d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_3d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double result;
  double v10;
  double v11;

  v10 = 0.0;
  v11 = 0.0;
  _ZNK4geom19interpolating_curveIDv3_dE10span_knotsEtRdS3_(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_4f(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv4_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_4f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D0FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_4f(unint64_t a1, const void *a2)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v8[200];
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a1)
  {
    v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    v5 = v10;
    memmove(v10, a2, v4);
    v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv4_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  v6 = geom_interpolating_curve_4f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_2288D10C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(_QWORD *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_4f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE11evaluate_atEf(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_4f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv4_fE19evaluate_tangent_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_4f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv4_fE18evaluate_length_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_total_length_4f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_4f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_4f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_4f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_4f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  float result;
  uint64_t v10;

  v10 = 0;
  _ZNK4geom19interpolating_curveIDv4_fE10span_knotsEtRfS3_(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_4d(unint64_t a1, const void *a2)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  _OWORD v7[13];
  char *v8;
  char *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (a1)
  {
    v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    v4 = v9;
    memmove(v9, a2, v3);
    v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv4_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  v5 = geom_interpolating_curve_4d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_2288D1228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(_QWORD *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_4d(unint64_t a1, const void *a2)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  _OWORD v7[13];
  char *v8;
  char *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (a1)
  {
    v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    v4 = v9;
    memmove(v9, a2, v3);
    v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv4_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  v5 = geom_interpolating_curve_4d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_2288D12F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(_QWORD *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float64_t geom_interpolating_curve_evaluate_at_4d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  float64_t result;
  float64x2_t v5;
  float64x2_t v6[2];

  _ZNK4geom19interpolating_curveIDv4_dE11evaluate_atEd(a1 + 16, v6, a3);
  result = v6[0].f64[0];
  v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

float64_t geom_interpolating_curve_evaluate_tangent_at_4d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  float64_t result;
  float64x2_t v5;
  float64x2_t v6[2];

  _ZNK4geom19interpolating_curveIDv4_dE19evaluate_tangent_atEd(a1 + 16, v6, a3);
  result = v6[0].f64[0];
  v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

double geom_interpolating_curve_evaluate_length_at_4d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv4_dE18evaluate_length_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_4d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_4d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_4d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_4d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_4d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double result;
  double v10;
  double v11;

  v10 = 0.0;
  v11 = 0.0;
  _ZNK4geom19interpolating_curveIDv4_dE10span_knotsEtRdS3_(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom::interpolating_curve<float>::~interpolating_curve(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  geom::interpolating_spline<float>::~interpolating_spline(a1 + 96);
  v6 = (void **)(a1 + 72);
  std::vector<geom::interpolating_spline<float>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::vector<geom::interpolating_spline<float>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = geom::interpolating_spline<float>::~interpolating_spline(v4 - 88);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t geom::interpolating_curve<double>::~interpolating_curve(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  geom::interpolating_spline<double>::~interpolating_spline(a1 + 96);
  v6 = (void **)(a1 + 72);
  std::vector<geom::interpolating_spline<double>>::__destroy_vector::operator()[abi:nn180100](&v6);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::vector<geom::interpolating_spline<double>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = geom::interpolating_spline<double>::~interpolating_spline(v4 - 96);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<geom::interpolating_key<float>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(20 * a2);
}

uint64_t geom::interpolating_curve<float>::interpolating_curve(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  geom::interpolating_spline<float>::interpolating_spline(a1 + 96, a2 + 96);
  v4 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v4;
  return a1;
}

char *std::vector<geom::interpolating_key<double>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<double>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(40 * a2);
}

uint64_t geom::interpolating_curve<double>::interpolating_curve(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  geom::interpolating_spline<double>::interpolating_spline(a1 + 96, a2 + 96);
  v4 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v4;
  return a1;
}

char *_ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

char *_ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    abort();
  result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIN4geom17interpolating_keyIDv3_dEEEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS9_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIN4geom17interpolating_keyIDv3_dEEEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS9_m(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(112 * a2);
}

void geom::triangle_mesh_connectivity::make(std::vector<int>::size_type a1@<X0>, unsigned int **a2@<X1>, _BYTE *a3@<X8>)
{
  int v4;
  char *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  int v10;
  unsigned int v11;
  int i;
  uint64_t j;
  unsigned int half_edge_for_face_vertex;
  unsigned int half_edge_twin;
  unint64_t face_and_face_vertex_for_half_edge;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::vector<unsigned int> *v20;
  __n128 *v21;
  _OWORD v22[10];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::vector<unsigned int> __p;
  char v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[32];
  void *v41[2];
  uint64_t v42;
  void *__b[2];
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  __n128 v57;
  char v58;
  char v59;

  geom::triangle_mesh_half_edge_connectivity::make(a1, a2, &v45);
  if (v59)
  {
    v4 = HIDWORD(v45);
    __b[0] = 0;
    __b[1] = 0;
    v44 = 0;
    if (HIDWORD(v45))
    {
      std::vector<float>::__vallocate[abi:nn180100](__b, (3 * HIDWORD(v45)));
      v5 = (char *)__b[1];
      memset(__b[1], 255, 4 * (3 * v4));
      __b[1] = &v5[12 * v4];
      v6 = HIDWORD(v45);
    }
    else
    {
      v6 = 0;
    }
    v7 = 3 * v6 - v46 + (((_QWORD)v52 - *((_QWORD *)&v51 + 1)) >> 2);
    v41[1] = 0;
    v42 = 0;
    v41[0] = 0;
    if (v7 >= 2)
    {
      v8 = v7 >> 1;
      std::vector<float>::__vallocate[abi:nn180100](v41, v7 >> 1);
      v9 = (char *)v41[1];
      memset(v41[1], 255, 4 * v8);
      v41[1] = &v9[4 * v8];
    }
    if (v4)
    {
      v10 = 0;
      v11 = 0;
      for (i = 0; i != v4; ++i)
      {
        for (j = 0; j != 3; ++j)
        {
          if (*((_DWORD *)__b[0] + (v10 + j)) == -1)
          {
            half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)&v45, i, j);
            *((_DWORD *)v41[0] + v11) = v10 + j;
            *((_DWORD *)__b[0] + (v10 + j)) = v11;
            if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge((geom::triangle_mesh_half_edge_connectivity *)&v45, half_edge_for_face_vertex))
            {
              half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin((geom::triangle_mesh_half_edge_connectivity *)&v45, half_edge_for_face_vertex);
              face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge((geom::triangle_mesh_half_edge_connectivity *)&v45, half_edge_twin);
              *((_DWORD *)__b[0]
              + 3 * (_DWORD)face_and_face_vertex_for_half_edge
              + BYTE4(face_and_face_vertex_for_half_edge)) = v11;
            }
            ++v11;
          }
        }
        v10 += 3;
      }
    }
    if (!v59)
      goto LABEL_45;
    v36 = 0u;
    v37 = 0u;
    v32 = v49;
    v33 = v50;
    v49 = 0u;
    v50 = 0u;
    v34 = v51;
    v35 = v52;
    v51 = 0u;
    v52 = 0u;
    v28 = v45;
    v29 = v46;
    v46 = 0;
    v30 = v47;
    v31 = v48;
    v47 = 0u;
    v48 = 0u;
    v38 = 0u;
    v39 = *(_OWORD *)__b;
    *(_QWORD *)v40 = v44;
    *(_OWORD *)__b = 0u;
    v44 = 0;
    v45 = 0;
    *(_OWORD *)&v40[8] = *(_OWORD *)v41;
    *(_QWORD *)&v40[24] = v42;
    *(_OWORD *)v41 = 0u;
    v42 = 0;
    v27 = 0;
    memset(v22, 0, sizeof(v22));
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    LOBYTE(__p.__begin_) = 0;
    std::swap[abi:nn180100]<geom::triangle_mesh_half_edge_connectivity>((uint64_t *)v22, (uint64_t)&v28);
    v17 = v23;
    v18 = v24;
    v23 = v39;
    v24 = *(_OWORD *)v40;
    v39 = v17;
    *(_OWORD *)v40 = v18;
    v19 = v25;
    v25 = *(_OWORD *)&v40[16];
    *(_OWORD *)&v40[16] = v19;
    if (v59)
    {
      if (v58)
        std::optional<std::vector<unsigned int>>::operator=[abi:nn180100]<std::vector<unsigned int>,void>(&__p, &v57);
      std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>::pair[abi:nn180100]((uint64_t)a3, (uint64_t)v22);
      a3[240] = 1;
      if (v27 && __p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)v22);
      geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)&v28);
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      if (__b[0])
      {
        __b[1] = __b[0];
        operator delete(__b[0]);
      }
      if (v59)
      {
        if (v58 && v57.n128_u64[0])
        {
          v57.n128_u64[1] = v57.n128_u64[0];
          operator delete((void *)v57.n128_u64[0]);
        }
        if (v55)
        {
          v56 = v55;
          operator delete(v55);
        }
        if (v53)
        {
          v54 = v53;
          operator delete(v53);
        }
        if (*((_QWORD *)&v51 + 1))
        {
          *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
          operator delete(*((void **)&v51 + 1));
        }
        if ((_QWORD)v50)
        {
          *((_QWORD *)&v50 + 1) = v50;
          operator delete((void *)v50);
        }
        if (*((_QWORD *)&v48 + 1))
        {
          *(_QWORD *)&v49 = *((_QWORD *)&v48 + 1);
          operator delete(*((void **)&v48 + 1));
        }
        if ((_QWORD)v47)
        {
          *((_QWORD *)&v47 + 1) = v47;
          operator delete((void *)v47);
        }
      }
    }
    else
    {
LABEL_45:
      v20 = (std::vector<unsigned int> *)std::__throw_bad_optional_access[abi:nn180100]();
      std::optional<std::vector<unsigned int>>::operator=[abi:nn180100]<std::vector<unsigned int>,void>(v20, v21);
    }
  }
  else
  {
    *a3 = 0;
    a3[240] = 0;
  }
}

std::vector<unsigned int> *std::optional<std::vector<unsigned int>>::operator=[abi:nn180100]<std::vector<unsigned int>,void>(std::vector<unsigned int> *this, __n128 *a2)
{
  if (LOBYTE(this[1].__begin_))
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)this, a2);
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    *this = *(std::vector<unsigned int> *)a2->n128_u8;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return this;
}

void geom::triangle_mesh_connectivity::make(geom::triangle_mesh_connectivity *this@<X0>, unint64_t a2@<X1>, const void *a3@<X2>, _BYTE *a4@<X8>)
{
  char *v9;
  size_t v10;
  void *v11;
  void *__p;
  void *v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, a2);
    v9 = (char *)v13;
    v10 = 4 * a2;
    bzero(v13, 4 * a2);
    v13 = &v9[4 * a2];
    v11 = __p;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  memcpy(v11, a3, v10);
  geom::triangle_mesh_connectivity::make((std::vector<int>::size_type)this, (unsigned int **)&__p, a4);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void geom::triangle_mesh_connectivity::make(geom::triangle_mesh_connectivity *a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  geom::triangle_mesh_connectivity::make(a1, a3, a2, a4);
}

uint64_t geom::triangle_mesh_connectivity::collapse_edge(geom::triangle_mesh_connectivity *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int half_edge_for_face_vertex;
  unsigned int half_edge_twin;
  BOOL is_boundary_half_edge;
  unint64_t face_and_face_vertex_for_half_edge;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned __int8 v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  unsigned __int8 v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  unsigned __int8 v52;
  int v53;
  unsigned __int8 v54;
  unsigned __int8 v55;

  v2 = *((_QWORD *)this + 23);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 24) - v2) >> 2))
    return 0xFFFFFFFFLL;
  v3 = *(_DWORD *)(v2 + 4 * a2);
  if (v3 == -1)
    return 0xFFFFFFFFLL;
  half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v3 / 3, v3 % 3);
  half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, half_edge_for_face_vertex);
  is_boundary_half_edge = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, half_edge_for_face_vertex);
  face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, half_edge_for_face_vertex);
  v9 = face_and_face_vertex_for_half_edge;
  v10 = HIDWORD(face_and_face_vertex_for_half_edge);
  v11 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, half_edge_twin);
  v12 = v10;
  if ((_BYTE)v10)
    v13 = v10 - 1;
  else
    v13 = 2;
  if (v10 == 2)
    v14 = 0;
  else
    v14 = v10 + 1;
  if (BYTE4(v11))
    v15 = BYTE4(v11) - 1;
  else
    v15 = 2;
  if (BYTE4(v11) == 2)
    v16 = 0;
  else
    v16 = BYTE4(v11) + 1;
  v55 = v13;
  v17 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v9, v13);
  v18 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v17);
  v54 = v14;
  v19 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v9, v14);
  v20 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v19);
  v50 = is_boundary_half_edge;
  v51 = v12;
  v53 = v11;
  v52 = v16;
  if (is_boundary_half_edge)
  {
    v21 = -1;
    v22 = -1;
  }
  else
  {
    v24 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v11, v16);
    v21 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v24);
    v25 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v11, v15);
    v22 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v25);
  }
  v26 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v18);
  v27 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v20);
  v28 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v21);
  v29 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v22);
  v30 = *(_DWORD *)this;
  result = geom::triangle_mesh_half_edge_connectivity::collapse_edge(this, half_edge_for_face_vertex);
  if (*(_DWORD *)this != v30)
  {
    v31 = 3 * v9;
    v32 = *((_QWORD *)this + 20);
    v33 = *(unsigned int *)(v32 + 4 * (3 * v9 + v54));
    v34 = *(_DWORD *)(v32 + 4 * (3 * v9 + v55));
    if ((_DWORD)result == -1)
    {
      v36 = *((_QWORD *)this + 23);
      *(_DWORD *)(v36 + 4 * v33) = -1;
      v42 = v50;
      v41 = v51;
      v38 = v53;
      v43 = v15;
      v39 = v52;
    }
    else
    {
      if ((_DWORD)v27 == -1)
        v35 = *(_DWORD *)(v32 + 4 * (3 * v9 + v55));
      else
        v35 = *(_DWORD *)(v32 + 4 * (3 * v9 + v54));
      if (v35 != (_DWORD)v33)
        v34 = *(_DWORD *)(v32 + 4 * (3 * v9 + v54));
      v36 = *((_QWORD *)this + 23);
      if ((_DWORD)v26 != -1)
      {
        v37 = 3 * v26 + BYTE4(v26);
        *(_DWORD *)(v32 + 4 * v37) = v35;
        *(_DWORD *)(v36 + 4 * v35) = v37;
      }
      v38 = v53;
      v39 = v52;
      if ((_DWORD)v27 != -1)
      {
        v40 = 3 * v27 + BYTE4(v27);
        *(_DWORD *)(v32 + 4 * v40) = v33;
        *(_DWORD *)(v36 + 4 * v33) = v40;
      }
      v42 = v50;
      v41 = v51;
      v43 = v15;
    }
    *(_DWORD *)(v36 + 4 * v34) = -1;
    if (v42)
      goto LABEL_47;
    v44 = 3 * v38;
    v45 = *(unsigned int *)(v32 + 4 * (3 * v38 + v39));
    v46 = *(_DWORD *)(v32 + 4 * (3 * v38 + v43));
    if ((_DWORD)result == -1)
    {
      v49 = -1;
    }
    else
    {
      if ((_DWORD)v28 == -1)
        v47 = *(_DWORD *)(v32 + 4 * (3 * v38 + v43));
      else
        v47 = *(_DWORD *)(v32 + 4 * (3 * v38 + v39));
      if (v47 != (_DWORD)v45)
        v46 = v45;
      if ((_DWORD)v28 != -1)
      {
        v48 = 3 * v28 + BYTE4(v28);
        *(_DWORD *)(v32 + 4 * v48) = v45;
        *(_DWORD *)(v36 + 4 * v45) = v48;
      }
      if ((_DWORD)v29 == -1)
        goto LABEL_46;
      v49 = 3 * v29 + BYTE4(v29);
      *(_DWORD *)(v32 + 4 * v49) = v47;
      LODWORD(v45) = v47;
    }
    *(_DWORD *)(v36 + 4 * v45) = v49;
LABEL_46:
    *(_DWORD *)(v36 + 4 * v46) = -1;
    *(_DWORD *)(v32 + 4 * v44) = -1;
    *(_DWORD *)(v32 + 4 * (v44 + 1)) = -1;
    *(_DWORD *)(v32 + 4 * (v44 + 2)) = -1;
LABEL_47:
    *(_DWORD *)(v36 + 4 * *(unsigned int *)(v32 + 4 * (v41 + v31))) = -1;
    *(_DWORD *)(v32 + 4 * v31) = -1;
    *(_DWORD *)(v32 + 4 * (v31 + 1)) = -1;
    *(_DWORD *)(v32 + 4 * (v31 + 2)) = -1;
  }
  return result;
}

uint64_t geom::triangle_mesh_connectivity::swap_edge(geom::triangle_mesh_connectivity *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int half_edge_for_face_vertex;
  unsigned int half_edge_twin;
  unsigned int v9;
  unint64_t face_and_face_vertex_for_half_edge;
  unint64_t v11;
  uint64_t result;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v2 = a2;
  v3 = *((_QWORD *)this + 23);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 24) - v3) >> 2))
    return 0;
  v4 = *(_DWORD *)(v3 + 4 * a2);
  if (v4 == -1)
    return 0;
  half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v4 / 3, v4 % 3);
  half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, half_edge_for_face_vertex);
  if (half_edge_twin == -1)
    return 0;
  v9 = half_edge_twin;
  face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, half_edge_for_face_vertex);
  v11 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v9);
  result = geom::triangle_mesh_half_edge_connectivity::swap_edge(this, half_edge_for_face_vertex);
  if ((_DWORD)result)
  {
    v13 = 3 * v11;
    v14 = 3 * face_and_face_vertex_for_half_edge + BYTE4(face_and_face_vertex_for_half_edge);
    if (BYTE4(face_and_face_vertex_for_half_edge) == 2)
      v15 = 0;
    else
      v15 = BYTE4(face_and_face_vertex_for_half_edge) + 1;
    v16 = v15 + 3 * face_and_face_vertex_for_half_edge;
    if (BYTE4(v11) == 2)
      v17 = 0;
    else
      v17 = BYTE4(v11) + 1;
    v18 = v17 + v13;
    v19 = *((_QWORD *)this + 20);
    v20 = *(unsigned int *)(v19 + 4 * v16);
    v21 = *(unsigned int *)(v19 + 4 * v18);
    v22 = v13 + BYTE4(v11);
    v23 = *((_QWORD *)this + 23);
    *(_DWORD *)(v23 + 4 * v2) = v16;
    *(_DWORD *)(v23 + 4 * v20) = v22;
    *(_DWORD *)(v23 + 4 * v21) = v14;
    *(_DWORD *)(v19 + 4 * v14) = v21;
    *(_DWORD *)(v19 + 4 * v22) = v20;
    *(_DWORD *)(v19 + 4 * v16) = a2;
    *(_DWORD *)(v19 + 4 * v18) = a2;
    return 1;
  }
  return result;
}

uint64_t geom::triangle_mesh_connectivity::split_face(int32x2_t *this, int a2)
{
  unint64_t v2;
  int32x2_t v3;
  unint64_t v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  char *v9;
  int32x2_t *v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  char *v47;
  int32x2_t *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  char *v60;
  _BYTE *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  char *v69;
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  char *v78;
  _BYTE *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  char *v87;
  _BYTE *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  _DWORD *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  int v106;

  v2 = (3 * a2);
  v3 = this[2];
  v4 = (uint64_t)(*(_QWORD *)&this[3] - *(_QWORD *)&v3) >> 2;
  if (v4 <= v2 || *(_DWORD *)(*(_QWORD *)&v3 + 4 * v2) == -1)
    return 0;
  result = geom::triangle_mesh_half_edge_connectivity::split_face(this, a2);
  if ((_DWORD)result)
  {
    v7 = 3 * (v4 / 3);
    v8 = (v2 + 1);
    v10 = this + 25;
    v9 = (char *)this[25];
    v11 = this[20];
    v12 = *(unsigned int *)(*(_QWORD *)&v11 + 4 * v8);
    v13 = (v2 + 2);
    v14 = *(unsigned int *)(*(_QWORD *)&v11 + 4 * v13);
    v15 = (char *)this[23];
    v16 = (char *)this[24];
    *(_DWORD *)&v15[4 * v12] = v7;
    v106 = v14;
    *(_DWORD *)&v15[4 * v14] = v7 + 3;
    v17 = (v16 - v15) >> 2;
    if (v16 >= v9)
    {
      v19 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
        goto LABEL_151;
      v20 = v9 - v15;
      if (v20 >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[25], v21);
        v15 = (char *)this[23];
        v16 = (char *)this[24];
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v17];
      v9 = &v22[4 * v21];
      *(_DWORD *)v23 = v8;
      v18 = v23 + 4;
      while (v16 != v15)
      {
        v24 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      this[23] = (int32x2_t)v23;
      this[24] = (int32x2_t)v18;
      this[25] = (int32x2_t)v9;
      if (v15)
      {
        operator delete(v15);
        v9 = (char *)*v10;
      }
    }
    else
    {
      *(_DWORD *)v16 = v8;
      v18 = v16 + 4;
    }
    this[24] = (int32x2_t)v18;
    v25 = v7 + 1;
    if (v18 >= v9)
    {
      v27 = (_BYTE *)this[23];
      v28 = (v18 - v27) >> 2;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62)
        goto LABEL_151;
      v30 = v9 - v27;
      if (v30 >> 1 > v29)
        v29 = v30 >> 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v31 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[25], v31);
        v27 = (_BYTE *)this[23];
        v18 = (char *)this[24];
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[4 * v28];
      v9 = &v32[4 * v31];
      *(_DWORD *)v33 = v25;
      v26 = v33 + 4;
      while (v18 != v27)
      {
        v34 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v33 - 1) = v34;
        v33 -= 4;
      }
      this[23] = (int32x2_t)v33;
      this[24] = (int32x2_t)v26;
      this[25] = (int32x2_t)v9;
      if (v27)
      {
        operator delete(v27);
        v9 = (char *)*v10;
      }
    }
    else
    {
      *(_DWORD *)v18 = v25;
      v26 = v18 + 4;
    }
    this[24] = (int32x2_t)v26;
    v35 = v7 + 4;
    if (v26 >= v9)
    {
      v37 = (char *)this[23];
      v38 = (v26 - v37) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        goto LABEL_151;
      v40 = v9 - v37;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[25], v41);
        v37 = (char *)this[23];
        v26 = (char *)this[24];
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[4 * v38];
      v44 = &v42[4 * v41];
      *(_DWORD *)v43 = v35;
      v36 = v43 + 4;
      while (v26 != v37)
      {
        v45 = *((_DWORD *)v26 - 1);
        v26 -= 4;
        *((_DWORD *)v43 - 1) = v45;
        v43 -= 4;
      }
      this[23] = (int32x2_t)v43;
      this[24] = (int32x2_t)v36;
      this[25] = (int32x2_t)v44;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_DWORD *)v26 = v35;
      v36 = v26 + 4;
    }
    v46 = v17 + 2;
    v48 = this + 22;
    v47 = (char *)this[22];
    this[24] = (int32x2_t)v36;
    v49 = (char *)this[20];
    v50 = (char *)this[21];
    *(_DWORD *)&v49[4 * v8] = v17;
    *(_DWORD *)&v49[4 * v13] = v17 + 2;
    if (v50 >= v47)
    {
      v52 = (v50 - v49) >> 2;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 62)
        goto LABEL_151;
      v54 = v47 - v49;
      if (v54 >> 1 > v53)
        v53 = v54 >> 1;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
        v55 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
      {
        v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v55);
        v49 = (char *)this[20];
        v50 = (char *)this[21];
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[4 * v52];
      v47 = &v56[4 * v55];
      *(_DWORD *)v57 = v12;
      v51 = v57 + 4;
      while (v50 != v49)
      {
        v58 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v57 - 1) = v58;
        v57 -= 4;
      }
      this[20] = (int32x2_t)v57;
      this[21] = (int32x2_t)v51;
      this[22] = (int32x2_t)v47;
      if (v49)
      {
        operator delete(v49);
        v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)v50 = v12;
      v51 = v50 + 4;
    }
    v59 = v17 + 1;
    this[21] = (int32x2_t)v51;
    if (v51 >= v47)
    {
      v61 = (_BYTE *)this[20];
      v62 = (v51 - v61) >> 2;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62)
        goto LABEL_151;
      v64 = v47 - v61;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v65);
        v61 = (_BYTE *)this[20];
        v51 = (char *)this[21];
      }
      else
      {
        v66 = 0;
      }
      v67 = &v66[4 * v62];
      v47 = &v66[4 * v65];
      *(_DWORD *)v67 = v59;
      v60 = v67 + 4;
      while (v51 != v61)
      {
        v68 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v67 - 1) = v68;
        v67 -= 4;
      }
      this[20] = (int32x2_t)v67;
      this[21] = (int32x2_t)v60;
      this[22] = (int32x2_t)v47;
      if (v61)
      {
        operator delete(v61);
        v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)v51 = v59;
      v60 = v51 + 4;
    }
    this[21] = (int32x2_t)v60;
    if (v60 >= v47)
    {
      v70 = (_BYTE *)this[20];
      v71 = (v60 - v70) >> 2;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 62)
        goto LABEL_151;
      v73 = v47 - v70;
      if (v73 >> 1 > v72)
        v72 = v73 >> 1;
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
        v74 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
      {
        v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v74);
        v70 = (_BYTE *)this[20];
        v60 = (char *)this[21];
      }
      else
      {
        v75 = 0;
      }
      v76 = &v75[4 * v71];
      v47 = &v75[4 * v74];
      *(_DWORD *)v76 = v17;
      v69 = v76 + 4;
      while (v60 != v70)
      {
        v77 = *((_DWORD *)v60 - 1);
        v60 -= 4;
        *((_DWORD *)v76 - 1) = v77;
        v76 -= 4;
      }
      this[20] = (int32x2_t)v76;
      this[21] = (int32x2_t)v69;
      this[22] = (int32x2_t)v47;
      if (v70)
      {
        operator delete(v70);
        v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)v60 = v17;
      v69 = v60 + 4;
    }
    this[21] = (int32x2_t)v69;
    if (v69 >= v47)
    {
      v79 = (_BYTE *)this[20];
      v80 = (v69 - v79) >> 2;
      v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 62)
        goto LABEL_151;
      v82 = v47 - v79;
      if (v82 >> 1 > v81)
        v81 = v82 >> 1;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
        v83 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (v83)
      {
        v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v83);
        v79 = (_BYTE *)this[20];
        v69 = (char *)this[21];
      }
      else
      {
        v84 = 0;
      }
      v85 = &v84[4 * v80];
      v47 = &v84[4 * v83];
      *(_DWORD *)v85 = v106;
      v78 = v85 + 4;
      while (v69 != v79)
      {
        v86 = *((_DWORD *)v69 - 1);
        v69 -= 4;
        *((_DWORD *)v85 - 1) = v86;
        v85 -= 4;
      }
      this[20] = (int32x2_t)v85;
      this[21] = (int32x2_t)v78;
      this[22] = (int32x2_t)v47;
      if (v79)
      {
        operator delete(v79);
        v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)v69 = v106;
      v78 = v69 + 4;
    }
    this[21] = (int32x2_t)v78;
    if (v78 >= v47)
    {
      v88 = (_BYTE *)this[20];
      v89 = (v78 - v88) >> 2;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 62)
        goto LABEL_151;
      v91 = v47 - v88;
      if (v91 >> 1 > v90)
        v90 = v91 >> 1;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
        v92 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
      {
        v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v92);
        v88 = (_BYTE *)this[20];
        v78 = (char *)this[21];
      }
      else
      {
        v93 = 0;
      }
      v94 = &v93[4 * v89];
      v47 = &v93[4 * v92];
      *(_DWORD *)v94 = v46;
      v87 = v94 + 4;
      while (v78 != v88)
      {
        v95 = *((_DWORD *)v78 - 1);
        v78 -= 4;
        *((_DWORD *)v94 - 1) = v95;
        v94 -= 4;
      }
      this[20] = (int32x2_t)v94;
      this[21] = (int32x2_t)v87;
      this[22] = (int32x2_t)v47;
      if (v88)
      {
        operator delete(v88);
        v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)v78 = v46;
      v87 = v78 + 4;
    }
    this[21] = (int32x2_t)v87;
    if (v87 < v47)
    {
      *(_DWORD *)v87 = v59;
      v96 = v87 + 4;
LABEL_150:
      this[21] = (int32x2_t)v96;
      return 1;
    }
    v97 = (char *)this[20];
    v98 = (v87 - v97) >> 2;
    v99 = v98 + 1;
    if (!((unint64_t)(v98 + 1) >> 62))
    {
      v100 = v47 - v97;
      if (v100 >> 1 > v99)
        v99 = v100 >> 1;
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
        v101 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v101 = v99;
      if (v101)
      {
        v102 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v101);
        v97 = (char *)this[20];
        v87 = (char *)this[21];
      }
      else
      {
        v102 = 0;
      }
      v103 = &v102[4 * v98];
      v104 = &v102[4 * v101];
      *(_DWORD *)v103 = v59;
      v96 = v103 + 4;
      while (v87 != v97)
      {
        v105 = *((_DWORD *)v87 - 1);
        v87 -= 4;
        *((_DWORD *)v103 - 1) = v105;
        v103 -= 4;
      }
      this[20] = (int32x2_t)v103;
      this[21] = (int32x2_t)v96;
      this[22] = (int32x2_t)v104;
      if (v97)
        operator delete(v97);
      goto LABEL_150;
    }
LABEL_151:
    abort();
  }
  return result;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return std::swap[abi:nn180100]<geom::triangle_mesh_half_edge_connectivity>();
}

void std::swap[abi:nn180100]<geom::triangle_mesh_half_edge_connectivity>(uint64_t *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v2 = *((_OWORD *)a1 + 3);
  v3 = *((_OWORD *)a1 + 4);
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  v4 = *((_OWORD *)a1 + 5);
  v5 = *((_OWORD *)a1 + 6);
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  v6 = *a1;
  *a1 = 0;
  v7 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  v8 = *((_OWORD *)a1 + 1);
  v9 = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  if (a1 != (uint64_t *)a2)
  {
    a1[5] = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    v10 = a1[6];
    a1[6] = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = v10;
    v11 = a1[7];
    a1[7] = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v11;
    v12 = a1[8];
    a1[8] = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = v12;
    v13 = a1[9];
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = v13;
    v14 = a1[10];
    a1[10] = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 80) = v14;
    v15 = a1[11];
    a1[11] = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = v15;
    v16 = a1[12];
    a1[12] = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = v16;
    v17 = a1[13];
    a1[13] = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = v17;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = 0;
    LODWORD(v17) = *((_DWORD *)a1 + 1);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v17;
    *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
    v18 = a1[2];
    a1[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v18;
    v19 = a1[3];
    a1[3] = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v19;
    a1[4] = *(_QWORD *)(a2 + 32);
  }
  v20 = *(void **)(a2 + 40);
  v21 = *(void **)(a2 + 64);
  *(_OWORD *)(a2 + 48) = v2;
  *(_OWORD *)(a2 + 64) = v3;
  v22 = *(void **)(a2 + 88);
  *(_OWORD *)(a2 + 80) = v4;
  *(_OWORD *)(a2 + 96) = v5;
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v7;
  v23 = *(void **)(a2 + 16);
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  if (v22)
    operator delete(v22);
  if (v21)
    operator delete(v21);
  if (v20)
    operator delete(v20);
  if (v23)
    operator delete(v23);
}

__n128 std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v2;
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v3;
  v4 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v4;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v5;
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v6;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v7;
  v8 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v8;
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v9;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)a2 = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v9;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v11;
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  result = *(__n128 *)(a2 + 184);
  *(__n128 *)(a1 + 184) = result;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  if (*(_BYTE *)(a2 + 232))
  {
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    result = *(__n128 *)(a2 + 208);
    *(__n128 *)(a1 + 208) = result;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    *(_BYTE *)(a1 + 232) = 1;
  }
  return result;
}

uint64_t geom::interval<float>::interval(uint64_t result)
{
  *(_BYTE *)result |= 0x1Fu;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t geom::interval<float>::interval(uint64_t a1, float a2)
{
  *(_BYTE *)a1 &= 0xF9u;
  *(float *)(a1 + 4) = a2;
  *(float *)(a1 + 8) = a2;
  geom::interval<float>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<float>::set_singleton(uint64_t result, float a2)
{
  *(_BYTE *)result &= 0xF9u;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = a2;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::interval(uint64_t a1, float a2, float a3)
{
  *(_BYTE *)a1 &= 0xF9u;
  *(float *)(a1 + 4) = a2;
  *(float *)(a1 + 8) = a3;
  geom::interval<float>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<float>::set_closed(uint64_t result, float a2, float a3)
{
  *(_BYTE *)result &= 0xF9u;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::interval(uint64_t a1, int a2, int a3, float a4, float a5)
{
  *(_BYTE *)a1 = (2 * (a2 == 0)) | (4 * (a3 == 0)) | *(_BYTE *)a1 & 0xF9;
  *(float *)(a1 + 4) = a4;
  *(float *)(a1 + 8) = a5;
  geom::interval<float>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<float>::set(uint64_t result, int a2, int a3, float a4, float a5)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xF9 | (2 * (a2 == 0)) | (4 * (a3 == 0));
  *(float *)(result + 4) = a4;
  *(float *)(result + 8) = a5;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_lower_bound(uint64_t result, int a2, float a3)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFD | (2 * (a2 == 0));
  *(float *)(result + 4) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_flags(uint64_t result)
{
  float v1;
  float v2;
  _BOOL4 v3;
  char v4;

  v2 = *(float *)(result + 4);
  v1 = *(float *)(result + 8);
  v3 = (*(_BYTE *)result & 6) != 0;
  if (v1 != v2)
    v3 = v1 < v2;
  if (v3)
    v4 = *(_BYTE *)result & 0xFE | v3 | 0x18;
  else
    v4 = *(_BYTE *)result & 0xE6 | v3 & 0xE7 | (8 * (v2 != -INFINITY)) | (16 * (v1 != INFINITY));
  *(_BYTE *)result = v4;
  return result;
}

uint64_t geom::interval<float>::set_upper_bound(uint64_t result, int a2, float a3)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFB | (4 * (a2 == 0));
  *(float *)(result + 8) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_empty(uint64_t result)
{
  *(_BYTE *)result |= 6u;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_open(uint64_t result, float a2, float a3)
{
  *(_BYTE *)result |= 6u;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_universe(uint64_t result)
{
  *(_BYTE *)result |= 6u;
  *(_QWORD *)(result + 4) = 0x7F800000FF800000;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::lower_bound(uint64_t result, float a2)
{
  *(float *)(result + 4) = a2;
  return geom::interval<float>::set_flags(result);
}

float geom::interval<float>::lower_bound(uint64_t a1)
{
  return *(float *)(a1 + 4);
}

uint64_t geom::interval<float>::lower_type(uint64_t result, int a2)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFD | (2 * (a2 == 0));
  return geom::interval<float>::set_flags(result);
}

BOOL geom::interval<float>::lower_bound_type(_BYTE *a1)
{
  return (*a1 & 2) == 0;
}

uint64_t geom::interval<float>::upper_bound(uint64_t result, float a2)
{
  *(float *)(result + 8) = a2;
  return geom::interval<float>::set_flags(result);
}

float geom::interval<float>::upper_bound(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t geom::interval<float>::upper_type(uint64_t result, int a2)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFB | (4 * (a2 == 0));
  return geom::interval<float>::set_flags(result);
}

BOOL geom::interval<float>::upper_bound_type(_BYTE *a1)
{
  return (*a1 & 4) == 0;
}

uint64_t geom::interval<float>::is_valid()
{
  return 1;
}

uint64_t geom::interval<float>::is_empty(_BYTE *a1)
{
  return *a1 & 1;
}

BOOL geom::interval<float>::is_closed_below(_BYTE *a1)
{
  return (*a1 & 3) != 2;
}

BOOL geom::interval<float>::is_closed_above(_BYTE *a1)
{
  return (*a1 & 5) != 4;
}

BOOL geom::interval<float>::is_closed(_BYTE *a1)
{
  return (*a1 & 3) != 2 && (*a1 & 5) != 4;
}

BOOL geom::interval<float>::is_open_below(_BYTE *a1)
{
  return (*a1 & 3) != 0;
}

BOOL geom::interval<float>::is_open_above(_BYTE *a1)
{
  return (*a1 & 5) != 0;
}

BOOL geom::interval<float>::is_open(_BYTE *a1)
{
  return (*a1 & 7) != 0;
}

uint64_t geom::interval<float>::is_bounded_below(unsigned __int8 *a1)
{
  return (*a1 >> 3) & 1;
}

uint64_t geom::interval<float>::is_bounded_above(unsigned __int8 *a1)
{
  return (*a1 >> 4) & 1;
}

BOOL geom::interval<float>::is_bounded(unsigned __int8 *a1)
{
  return (~*a1 & 0x18) == 0;
}

BOOL geom::interval<float>::is_compact(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v1 = *a1;
  v2 = v1 & 3;
  v3 = v1 & 5;
  v4 = (~v1 & 0x18) == 0;
  return v2 != 2 && v3 != 4 && v4;
}

BOOL geom::interval<float>::is_universe(_BYTE *a1)
{
  return (*a1 & 0x18) == 0;
}

uint64_t geom::interval<float>::contains(uint64_t a1, float a2)
{
  float v2;
  float v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = v2 < a2;
  if ((*(_BYTE *)a1 & 2) == 0)
    v4 = v2 <= a2;
  if ((*(_BYTE *)a1 & 4) != 0)
    v5 = v3 > a2;
  else
    v5 = v3 >= a2;
  return v4 & v5;
}

float geom::interval<float>::midpoint(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 0x19) == 0x18)
    return *(float *)(a1 + 8) * 0.5 + *(float *)(a1 + 4) * 0.5;
  else
    return NAN;
}

uint64_t geom::interval<double>::interval(uint64_t result)
{
  *(_BYTE *)result |= 0x1Fu;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t geom::interval<double>::interval(uint64_t a1, double a2)
{
  *(_BYTE *)a1 &= 0xF9u;
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a2;
  geom::interval<double>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<double>::set_singleton(uint64_t result, double a2)
{
  *(_BYTE *)result &= 0xF9u;
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a2;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::interval(uint64_t a1, double a2, double a3)
{
  *(_BYTE *)a1 &= 0xF9u;
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a3;
  geom::interval<double>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<double>::set_closed(uint64_t result, double a2, double a3)
{
  *(_BYTE *)result &= 0xF9u;
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::interval(uint64_t a1, int a2, int a3, double a4, double a5)
{
  *(_BYTE *)a1 = (2 * (a2 == 0)) | (4 * (a3 == 0)) | *(_BYTE *)a1 & 0xF9;
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a5;
  geom::interval<double>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<double>::set(uint64_t result, int a2, int a3, double a4, double a5)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xF9 | (2 * (a2 == 0)) | (4 * (a3 == 0));
  *(double *)(result + 8) = a4;
  *(double *)(result + 16) = a5;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_lower_bound(uint64_t result, int a2, double a3)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFD | (2 * (a2 == 0));
  *(double *)(result + 8) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_flags(uint64_t result)
{
  double v1;
  double v2;
  _BOOL4 v3;
  char v4;

  v2 = *(double *)(result + 8);
  v1 = *(double *)(result + 16);
  v3 = (*(_BYTE *)result & 6) != 0;
  if (v1 != v2)
    v3 = v1 < v2;
  if (v3)
    v4 = *(_BYTE *)result & 0xFE | v3 | 0x18;
  else
    v4 = *(_BYTE *)result & 0xE6 | v3 & 0xE7 | (8 * (v2 != -INFINITY)) | (16 * (v1 != INFINITY));
  *(_BYTE *)result = v4;
  return result;
}

uint64_t geom::interval<double>::set_upper_bound(uint64_t result, int a2, double a3)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFB | (4 * (a2 == 0));
  *(double *)(result + 16) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_empty(uint64_t result)
{
  *(_BYTE *)result |= 6u;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_open(uint64_t result, double a2, double a3)
{
  *(_BYTE *)result |= 6u;
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_universe(uint64_t result)
{
  *(_BYTE *)result |= 6u;
  *(_OWORD *)(result + 8) = xmmword_2289B7000;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::lower_bound(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return geom::interval<double>::set_flags(result);
}

double geom::interval<double>::lower_bound(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t geom::interval<double>::lower_type(uint64_t result, int a2)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFD | (2 * (a2 == 0));
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::upper_bound(uint64_t result, double a2)
{
  *(double *)(result + 16) = a2;
  return geom::interval<double>::set_flags(result);
}

double geom::interval<double>::upper_bound(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t geom::interval<double>::upper_type(uint64_t result, int a2)
{
  *(_BYTE *)result = *(_BYTE *)result & 0xFB | (4 * (a2 == 0));
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::is_valid()
{
  return 1;
}

uint64_t geom::interval<double>::contains(uint64_t a1, double a2)
{
  double v2;
  double v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = v2 < a2;
  if ((*(_BYTE *)a1 & 2) == 0)
    v4 = v2 <= a2;
  if ((*(_BYTE *)a1 & 4) != 0)
    v5 = v3 > a2;
  else
    v5 = v3 >= a2;
  return v4 & v5;
}

double geom::interval<double>::midpoint(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 0x19) == 0x18)
    return *(double *)(a1 + 16) * 0.5 + *(double *)(a1 + 8) * 0.5;
  else
    return NAN;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::kd_tree(uint64_t a1, const void *a2, const void *a3, int a4)
{
  const void *v6[2];

  v6[0] = a2;
  v6[1] = a3;
  *(_BYTE *)a1 = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v6, a4, a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

double geom::kd_tree<float,(unsigned char)2>::kd_tree(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

double geom::kd_tree<float,(unsigned char)2>::kd_tree(uint64_t a1)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

_QWORD *geom::kd_tree<float,(unsigned char)2>::reset(_QWORD *result, void *a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  char v6;
  void *v7;

  v5 = result;
  v6 = 0;
  *(_BYTE *)result = 0;
  result[5] = result[4];
  result[8] = result[7];
  if (a3)
    v7 = a2;
  else
    v7 = 0;
  if (a3 && a4)
  {
    v7 = (void *)operator new[]();
    result = memmove(v7, a2, 8 * a3);
    v6 = 1;
  }
  if (*((_BYTE *)v5 + 24))
  {
    result = (_QWORD *)v5[1];
    if (result)
      result = (_QWORD *)MEMORY[0x22E2B7674](result, 0x1000C8000313F17);
  }
  v5[1] = v7;
  v5[2] = a3;
  *((_BYTE *)v5 + 24) = v6;
  return result;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::is_initialized(unsigned __int8 *a1)
{
  return *a1;
}

void geom::kd_tree<float,(unsigned char)2>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1)
      geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(a1);
  }
  else
  {
    geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  std::vector<int>::value_type __x[4];
  __int128 v31;
  __int128 v32;
  std::vector<int> v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v27 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v33, 0, sizeof(v33));
  std::vector<unsigned int>::resize(&v33, *(_QWORD *)(a1 + 16));
  begin = v33.__begin_;
  end = v33.__end_;
  if (v33.__begin_ != v33.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v36 = (uint64_t)&off_24F149330;
    v37 = a1;
    v38 = &v36;
    goto LABEL_34;
  }
  v36 = 1;
  LODWORD(v37) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v36);
  v9 = *((_QWORD *)&v32 + 1);
  v36 = (uint64_t)&off_24F149330;
  v37 = a1;
  v38 = &v36;
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_34:
    *(_BYTE *)a1 = 1;
    v25 = &v36;
    v26 = 4;
LABEL_35:
    (*(void (**)(void))(*v25 + 8 * v26))();
    goto LABEL_36;
  }
  do
  {
    v10 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v32 / 0x155))
                         + 12 * ((unint64_t)v32 % 0x155));
    v12 = (_anonymous_namespace_ *)*v10;
    v11 = v10[1];
    v13 = v10[2];
    *(_QWORD *)&v32 = v32 + 1;
    *((_QWORD *)&v32 + 1) = v9 - 1;
    if ((unint64_t)v32 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v32 = v32 - 341;
    }
    v14 = v13 - v11;
    if ((_DWORD)v13 - (_DWORD)v11 == 1)
    {
      *(_DWORD *)(*v27 + 4 * (_QWORD)v12) = v33.__begin_[v11];
      goto LABEL_29;
    }
    v16 = v15 & 1;
    *((_BYTE *)v12 + *(_QWORD *)(a1 + 56)) = v15 & 1;
    if ((-1 << (v17 - 1)) + v14 >= ~(-1 << v17))
      v18 = ~(-1 << v17);
    else
      v18 = (-1 << (v17 - 1)) + v14;
    v19 = v33.__begin_;
    LODWORD(v28) = v16;
    if (!v38)
      std::__throw_bad_function_call[abi:nn180100]();
    v20 = (v18 + v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v38 + 48))(v34, v38, &v28);
    if ((_DWORD)v20 != (_DWORD)v13)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v19[v11], &v19[v20], (uint64_t)&v19[v13], (uint64_t)v34);
    v21 = v35;
    if (v35 == v34)
    {
      v21 = v34;
      v22 = 4;
      goto LABEL_24;
    }
    if (v35)
    {
      v22 = 5;
LABEL_24:
      (*(void (**)(void))(*v21 + 8 * v22))();
    }
    v23 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v23 + 4 * (_QWORD)v12) = v33.__begin_[v20];
    v24 = (*(_QWORD *)(a1 + 40) - v23) >> 2;
    if (v24 > (2 * (_DWORD)v12))
    {
      LODWORD(v28) = 2 * (_DWORD)v12;
      HIDWORD(v28) = v11;
      v29 = v20;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v28);
      v24 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v24 > ((2 * (_DWORD)v12) | 1u))
    {
      LODWORD(v28) = (2 * (_DWORD)v12) | 1;
      HIDWORD(v28) = v20 + 1;
      v29 = v13;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v28);
    }
LABEL_29:
    v9 = *((_QWORD *)&v32 + 1);
  }
  while (*((_QWORD *)&v32 + 1));
  v25 = v38;
  *(_BYTE *)a1 = 1;
  if (v25 == &v36)
  {
    v26 = 4;
    v25 = &v36;
    goto LABEL_35;
  }
  if (v25)
  {
    v26 = 5;
    goto LABEL_35;
  }
LABEL_36:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
}

void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int32x2_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  unsigned int v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  char v24;
  int v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  std::vector<int>::value_type __x[4];
  __int128 v38;
  __int128 v39;
  std::vector<int> v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v34 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v40, 0, sizeof(v40));
  std::vector<unsigned int>::resize(&v40, *(_QWORD *)(a1 + 16));
  begin = v40.__begin_;
  end = v40.__end_;
  if (v40.__begin_ != v40.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v43 = (uint64_t)&off_24F149450;
    v44 = a1;
    v45 = &v43;
    goto LABEL_40;
  }
  v43 = 1;
  LODWORD(v44) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v43);
  v9 = *((_QWORD *)&v39 + 1);
  v43 = (uint64_t)&off_24F149450;
  v44 = a1;
  v45 = &v43;
  if (!*((_QWORD *)&v39 + 1))
  {
LABEL_40:
    *(_BYTE *)a1 = 1;
    v32 = &v43;
    v33 = 4;
LABEL_41:
    (*(void (**)(void))(*v32 + 8 * v33))();
    goto LABEL_42;
  }
  v10 = vdup_n_s32(0x7F800000u);
  do
  {
    v11 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v39 / 0x155))
                         + 12 * ((unint64_t)v39 % 0x155));
    v13 = *v11;
    v12 = v11[1];
    v14 = v11[2];
    *(_QWORD *)&v39 = v39 + 1;
    *((_QWORD *)&v39 + 1) = v9 - 1;
    if ((unint64_t)v39 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v39 = v39 - 341;
    }
    v15 = v14 - v12;
    if ((_DWORD)v14 - (_DWORD)v12 == 1)
    {
      *(_DWORD *)(*v34 + 4 * v13) = v40.__begin_[v12];
      goto LABEL_35;
    }
    if (v14 <= v12)
    {
      v22 = (float32x2_t)0x7F0000007FLL;
    }
    else
    {
      v16 = &v40.__begin_[v12];
      v17 = v14 - v12;
      v18 = (float32x2_t)0x7F0000007FLL;
      v19 = (float32x2_t)v10;
      do
      {
        v20 = *v16++;
        v21 = *(float32x2_t *)(*(_QWORD *)(a1 + 8) + 8 * v20);
        v19 = vminnm_f32(v19, v21);
        v18 = vmaxnm_f32(v18, v21);
        --v17;
      }
      while (v17);
      v22 = vsub_f32(v18, v19);
    }
    v23 = *(_QWORD *)&vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22) & 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13) = v23;
    if ((-1 << (v24 - 1)) + v15 >= ~(-1 << v24))
      v25 = ~(-1 << v24);
    else
      v25 = (-1 << (v24 - 1)) + v15;
    v26 = v40.__begin_;
    LODWORD(v35) = v23;
    if (!v45)
      std::__throw_bad_function_call[abi:nn180100]();
    v27 = (v25 + v12);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v45 + 48))(v41, v45, &v35);
    if ((_DWORD)v27 != (_DWORD)v14)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v26[v12], &v26[v27], (uint64_t)&v26[v14], (uint64_t)v41);
    v28 = v42;
    if (v42 == v41)
    {
      v28 = v41;
      v29 = 4;
      goto LABEL_30;
    }
    if (v42)
    {
      v29 = 5;
LABEL_30:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
    v30 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v30 + 4 * v13) = v40.__begin_[v27];
    v31 = (*(_QWORD *)(a1 + 40) - v30) >> 2;
    if (v31 > (2 * v13))
    {
      LODWORD(v35) = 2 * v13;
      HIDWORD(v35) = v12;
      v36 = v27;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v35);
      v31 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v31 > ((2 * (_DWORD)v13) | 1u))
    {
      LODWORD(v35) = (2 * v13) | 1;
      HIDWORD(v35) = v27 + 1;
      v36 = v14;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v35);
    }
LABEL_35:
    v9 = *((_QWORD *)&v39 + 1);
  }
  while (*((_QWORD *)&v39 + 1));
  v32 = v45;
  *(_BYTE *)a1 = 1;
  if (v32 == &v43)
  {
    v33 = 4;
    v32 = &v43;
    goto LABEL_41;
  }
  if (v32)
  {
    v33 = 5;
    goto LABEL_41;
  }
LABEL_42:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v40.__begin_)
  {
    v40.__end_ = v40.__begin_;
    operator delete(v40.__begin_);
  }
}

uint64_t geom::kd_tree<float,(unsigned char)2>::find_within_radius(_QWORD *a1, float32x2_t *a2, char **a3, float a4)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  float v20;
  unint64_t v21;
  int *v22;
  float32x2_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  float32x2_t v38;
  float32x2_t v39;
  unsigned int v40;
  int v41;
  _OWORD v42[2];
  __int128 v43;

  a3[1] = *a3;
  v43 = 0u;
  memset(v42, 0, sizeof(v42));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v41 = 1;
    std::deque<unsigned int>::push_back(v42, &v41);
    for (i = *((_QWORD *)&v43 + 1); *((_QWORD *)&v43 + 1); i = *((_QWORD *)&v43 + 1))
    {
      v9 = i - 1;
      v10 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v42[0] + 1)
                                        + (((unint64_t)(v43 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v43 + v9) & 0x3FF));
      *((_QWORD *)&v43 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v42, 1);
      v11 = a1[4];
      v12 = *(unsigned int *)(v11 + 4 * v10);
      v13 = *(_BYTE *)(a1[7] + v10);
      v14 = (float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1)));
      v15 = (float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1)));
      v16 = a1[1];
      v17 = *a2;
      v38 = *a2;
      v18 = *v15;
      v19 = *(float32x2_t *)(v16 + 8 * v12);
      v39 = v19;
      if (v18 == *v14)
        v20 = 0.0;
      else
        v20 = v18 - *v14;
      if (v20 >= (float)-a4)
      {
        if (v20 <= a4)
        {
          v23 = vsub_f32(v19, v17);
          if (vaddv_f32(vmul_f32(v23, v23)) <= (float)(a4 * a4))
          {
            v25 = a3[1];
            v24 = (unint64_t)a3[2];
            if ((unint64_t)v25 >= v24)
            {
              v27 = *a3;
              v28 = (v25 - *a3) >> 2;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62)
                abort();
              v30 = v24 - (_QWORD)v27;
              if (v30 >> 1 > v29)
                v29 = v30 >> 1;
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                v31 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v31 = v29;
              if (v31)
              {
                v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v31);
                v27 = *a3;
                v25 = a3[1];
              }
              else
              {
                v32 = 0;
              }
              v33 = &v32[4 * v28];
              *(_DWORD *)v33 = v12;
              v26 = v33 + 4;
              while (v25 != v27)
              {
                v34 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v33 - 1) = v34;
                v33 -= 4;
              }
              *a3 = v33;
              a3[1] = v26;
              a3[2] = &v32[4 * v31];
              if (v27)
                operator delete(v27);
            }
            else
            {
              *(_DWORD *)v25 = v12;
              v26 = v25 + 4;
            }
            a3[1] = v26;
            v11 = a1[4];
          }
          v35 = (2 * v10) | 1;
          v40 = v35;
          v41 = 2 * v10;
          v36 = (a1[5] - v11) >> 2;
          if (v36 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v42, &v41);
            v35 = v40;
            v36 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v36 <= v35)
            continue;
          v22 = (int *)&v40;
          goto LABEL_34;
        }
        v21 = (2 * (_DWORD)v10) | 1u;
      }
      else
      {
        v21 = (2 * v10);
      }
      v41 = v21;
      if (v21 < (a1[5] - v11) >> 2)
      {
        v22 = &v41;
LABEL_34:
        std::deque<unsigned int>::push_back(v42, v22);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v42);
}

uint64_t geom::kd_tree<float,(unsigned char)2>::find_closest(_QWORD *a1, float32x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  float *v12;
  float *v13;
  float32x2_t v14;
  uint32x2_t v15;
  int v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unint64_t v22;
  unsigned int *v23;
  float32x2_t v25;
  float32x2_t v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD v29[2];
  __int128 v30;

  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v28 = 1;
    std::deque<unsigned int>::push_back(v29, &v28);
    v4 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      LODWORD(v5) = -1;
      v6 = INFINITY;
      while (1)
      {
        v7 = v4 - 1;
        v8 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v29[0] + 1)
                                         + (((unint64_t)(v30 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v30 + v7) & 0x3FF));
        *((_QWORD *)&v30 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v29, 1);
        v9 = a1[4];
        v10 = *(unsigned int *)(v9 + 4 * v8);
        v11 = *(_BYTE *)(a1[7] + v8);
        v12 = (float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
        v13 = (float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
        v14 = *(float32x2_t *)(a1[1] + 8 * v10);
        v15 = (uint32x2_t)vceq_f32(*a2, v14);
        v16 = vpmin_u32(v15, v15).u32[0];
        v17 = vsub_f32(*a2, v14);
        v18 = vaddv_f32(vmul_f32(v17, v17));
        if (v16 < 0)
          v18 = 0.0;
        if (v18 >= v6)
        {
          v5 = v5;
        }
        else
        {
          v6 = v18;
          v5 = v10;
        }
        v25 = *a2;
        v19 = *v13;
        v26 = v14;
        if (v19 == *v12)
          v20 = 0.0;
        else
          v20 = v19 - *v12;
        v21 = v20 * v20;
        v27 = (2 * v8) | 1;
        v28 = 2 * v8;
        v22 = (a1[5] - v9) >> 2;
        if (v20 >= 0.0)
        {
          if (v22 > ((2 * (_DWORD)v8) | 1u))
            std::deque<unsigned int>::push_back(v29, &v27);
          if (v6 <= v21 || v28 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_24;
          v23 = &v28;
        }
        else
        {
          if (v22 > (2 * v8))
            std::deque<unsigned int>::push_back(v29, &v28);
          if (v6 <= v21 || v27 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_24;
          v23 = &v27;
        }
        std::deque<unsigned int>::push_back(v29, v23);
LABEL_24:
        v4 = *((_QWORD *)&v30 + 1);
        if (!*((_QWORD *)&v30 + 1))
          goto LABEL_27;
      }
    }
  }
  v5 = 0xFFFFFFFFLL;
LABEL_27:
  std::deque<unsigned int>::~deque[abi:nn180100](v29);
  return v5;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::node_values(uint64_t a1)
{
  return a1 + 32;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::node_split_axes(uint64_t a1)
{
  return a1 + 56;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::points(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t geom::kd_tree<float,(unsigned char)3>::kd_tree(uint64_t a1, const void *a2, const void *a3, int a4)
{
  const void *v6[2];

  v6[0] = a2;
  v6[1] = a3;
  *(_BYTE *)a1 = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v6, a4, a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

_QWORD *geom::kd_tree<float,(unsigned char)3>::reset(_QWORD *result, void *a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  char v6;
  void *v7;

  v5 = result;
  v6 = 0;
  *(_BYTE *)result = 0;
  result[5] = result[4];
  result[8] = result[7];
  if (a3)
    v7 = a2;
  else
    v7 = 0;
  if (a3 && a4)
  {
    v7 = (void *)operator new[]();
    result = memmove(v7, a2, 16 * a3);
    v6 = 1;
  }
  if (*((_BYTE *)v5 + 24))
  {
    result = (_QWORD *)v5[1];
    if (result)
      result = (_QWORD *)MEMORY[0x22E2B7674](result, 0x1000C80451B5BE8);
  }
  v5[1] = v7;
  v5[2] = a3;
  *((_BYTE *)v5 + 24) = v6;
  return result;
}

void geom::kd_tree<float,(unsigned char)3>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1)
      geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(a1);
  }
  else
  {
    geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  int v17;
  std::vector<int>::pointer v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  std::vector<int>::value_type __x[4];
  __int128 v30;
  __int128 v31;
  std::vector<int> v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v26 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v32, 0, sizeof(v32));
  std::vector<unsigned int>::resize(&v32, *(_QWORD *)(a1 + 16));
  begin = v32.__begin_;
  end = v32.__end_;
  if (v32.__begin_ != v32.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v35 = (uint64_t)&off_24F149550;
    v36 = a1;
    v37 = &v35;
    goto LABEL_34;
  }
  v35 = 1;
  LODWORD(v36) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v35);
  v9 = *((_QWORD *)&v31 + 1);
  v35 = (uint64_t)&off_24F149550;
  v36 = a1;
  v37 = &v35;
  if (!*((_QWORD *)&v31 + 1))
  {
LABEL_34:
    *(_BYTE *)a1 = 1;
    v24 = &v35;
    v25 = 4;
LABEL_35:
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_36;
  }
  do
  {
    v10 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v31 / 0x155))
                         + 12 * ((unint64_t)v31 % 0x155));
    v12 = (_anonymous_namespace_ *)*v10;
    v11 = v10[1];
    v13 = v10[2];
    *(_QWORD *)&v31 = v31 + 1;
    *((_QWORD *)&v31 + 1) = v9 - 1;
    if ((unint64_t)v31 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v31 = v31 - 341;
    }
    v14 = v13 - v11;
    if ((_DWORD)v13 - (_DWORD)v11 == 1)
    {
      *(_DWORD *)(*v26 + 4 * (_QWORD)v12) = v32.__begin_[v11];
      goto LABEL_29;
    }
    *((_BYTE *)v12 + *(_QWORD *)(a1 + 56)) = v15;
    if ((-1 << (v16 - 1)) + v14 >= ~(-1 << v16))
      v17 = ~(-1 << v16);
    else
      v17 = (-1 << (v16 - 1)) + v14;
    v18 = v32.__begin_;
    LODWORD(v27) = v15;
    if (!v37)
      std::__throw_bad_function_call[abi:nn180100]();
    v19 = (v17 + v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v37 + 48))(v33, v37, &v27);
    if ((_DWORD)v19 != (_DWORD)v13)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v18[v11], &v18[v19], (uint64_t)&v18[v13], (uint64_t)v33);
    v20 = v34;
    if (v34 == v33)
    {
      v20 = v33;
      v21 = 4;
      goto LABEL_24;
    }
    if (v34)
    {
      v21 = 5;
LABEL_24:
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
    v22 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v22 + 4 * (_QWORD)v12) = v32.__begin_[v19];
    v23 = (*(_QWORD *)(a1 + 40) - v22) >> 2;
    if (v23 > (2 * (_DWORD)v12))
    {
      LODWORD(v27) = 2 * (_DWORD)v12;
      HIDWORD(v27) = v11;
      v28 = v19;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v27);
      v23 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v23 > ((2 * (_DWORD)v12) | 1u))
    {
      LODWORD(v27) = (2 * (_DWORD)v12) | 1;
      HIDWORD(v27) = v19 + 1;
      v28 = v13;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v27);
    }
LABEL_29:
    v9 = *((_QWORD *)&v31 + 1);
  }
  while (*((_QWORD *)&v31 + 1));
  v24 = v37;
  *(_BYTE *)a1 = 1;
  if (v24 == &v35)
  {
    v25 = 4;
    v24 = &v35;
    goto LABEL_35;
  }
  if (v24)
  {
    v25 = 5;
    goto LABEL_35;
  }
LABEL_36:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
}

void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned int v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned __int8 v22;
  int v23;
  char v24;
  int v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int32x4_t v34;
  _QWORD *v35;
  float32x4_t v36;
  uint64_t v37;
  int v38;
  std::vector<int>::value_type __x[4];
  __int128 v40;
  __int128 v41;
  std::vector<int> v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v35 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v42, 0, sizeof(v42));
  std::vector<unsigned int>::resize(&v42, *(_QWORD *)(a1 + 16));
  begin = v42.__begin_;
  end = v42.__end_;
  if (v42.__begin_ != v42.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v45 = (uint64_t)&off_24F149650;
    v46 = a1;
    v47 = &v45;
    goto LABEL_43;
  }
  v45 = 1;
  LODWORD(v46) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v45);
  v9 = *((_QWORD *)&v41 + 1);
  v45 = (uint64_t)&off_24F149650;
  v46 = a1;
  v47 = &v45;
  if (!*((_QWORD *)&v41 + 1))
  {
LABEL_43:
    *(_BYTE *)a1 = 1;
    v32 = &v45;
    v33 = 4;
LABEL_44:
    (*(void (**)(void))(*v32 + 8 * v33))();
    goto LABEL_45;
  }
  v34 = vdupq_n_s32(0x7F800000u);
  do
  {
    v10 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v41 / 0x155))
                         + 12 * ((unint64_t)v41 % 0x155));
    v12 = *v10;
    v11 = v10[1];
    v13 = v10[2];
    *(_QWORD *)&v41 = v41 + 1;
    *((_QWORD *)&v41 + 1) = v9 - 1;
    if ((unint64_t)v41 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v41 = v41 - 341;
    }
    v14 = v13 - v11;
    if ((_DWORD)v13 - (_DWORD)v11 == 1)
    {
      *(_DWORD *)(*v35 + 4 * v12) = v42.__begin_[v11];
      goto LABEL_38;
    }
    if (v13 <= v11)
    {
      v17.i64[0] = 0x7F0000007FLL;
      v17.i64[1] = 0x7F0000007FLL;
      v18 = (float32x4_t)v34;
    }
    else
    {
      v15 = &v42.__begin_[v11];
      v16 = v13 - v11;
      v17.i64[0] = 0x7F0000007FLL;
      v17.i32[2] = 127;
      v18 = (float32x4_t)v34;
      do
      {
        v19 = *v15++;
        v20 = *(float32x4_t *)(*(_QWORD *)(a1 + 8) + 16 * v19);
        v18.i32[3] = 0;
        v20.i32[3] = 0;
        v18 = vminnmq_f32(v18, v20);
        v17.i32[3] = 0;
        v17 = vmaxnmq_f32(v17, v20);
        --v16;
      }
      while (v16);
    }
    v21 = vsubq_f32(v17, v18);
    v22 = vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1), v21)).u8[0];
    v36 = v21;
    if (v21.f32[2] <= *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v22 & 1))))
      v23 = v22 & 1;
    else
      v23 = 2;
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + v12) = v23;
    if ((-1 << (v24 - 1)) + v14 >= ~(-1 << v24))
      v25 = ~(-1 << v24);
    else
      v25 = (-1 << (v24 - 1)) + v14;
    v26 = v42.__begin_;
    LODWORD(v37) = v23;
    if (!v47)
      std::__throw_bad_function_call[abi:nn180100]();
    v27 = (v25 + v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v47 + 48))(v43, v47, &v37);
    if ((_DWORD)v27 != (_DWORD)v13)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v26[v11], &v26[v27], (uint64_t)&v26[v13], (uint64_t)v43);
    v28 = v44;
    if (v44 == v43)
    {
      v28 = v43;
      v29 = 4;
      goto LABEL_33;
    }
    if (v44)
    {
      v29 = 5;
LABEL_33:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
    v30 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v30 + 4 * v12) = v42.__begin_[v27];
    v31 = (*(_QWORD *)(a1 + 40) - v30) >> 2;
    if (v31 > (2 * v12))
    {
      LODWORD(v37) = 2 * v12;
      HIDWORD(v37) = v11;
      v38 = v27;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v37);
      v31 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v31 > ((2 * (_DWORD)v12) | 1u))
    {
      LODWORD(v37) = (2 * v12) | 1;
      HIDWORD(v37) = v27 + 1;
      v38 = v13;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v37);
    }
LABEL_38:
    v9 = *((_QWORD *)&v41 + 1);
  }
  while (*((_QWORD *)&v41 + 1));
  v32 = v47;
  *(_BYTE *)a1 = 1;
  if (v32 == &v45)
  {
    v33 = 4;
    v32 = &v45;
    goto LABEL_44;
  }
  if (v32)
  {
    v33 = 5;
    goto LABEL_44;
  }
LABEL_45:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v42.__begin_)
  {
    v42.__end_ = v42.__begin_;
    operator delete(v42.__begin_);
  }
}

uint64_t geom::kd_tree<float,(unsigned char)3>::find_within_radius(_QWORD *a1, float32x4_t *a2, char **a3, float a4)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float v20;
  unint64_t v21;
  int *v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  float32x4_t v39;
  float32x4_t v40;
  unsigned int v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  a3[1] = *a3;
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v42 = 1;
    std::deque<unsigned int>::push_back(v43, &v42);
    for (i = *((_QWORD *)&v44 + 1); *((_QWORD *)&v44 + 1); i = *((_QWORD *)&v44 + 1))
    {
      v9 = i - 1;
      v10 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1)
                                        + (((unint64_t)(v44 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v44 + v9) & 0x3FF));
      *((_QWORD *)&v44 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v43, 1);
      v11 = a1[4];
      v12 = *(unsigned int *)(v11 + 4 * v10);
      v13 = *(_BYTE *)(a1[7] + v10);
      v14 = (float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
      v15 = (float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
      v16 = a1[1];
      v17 = *a2;
      v39 = *a2;
      v18 = *v15;
      v19 = *(float32x4_t *)(v16 + 16 * v12);
      v40 = v19;
      if (v18 == *v14)
        v20 = 0.0;
      else
        v20 = v18 - *v14;
      if (v20 >= (float)-a4)
      {
        if (v20 <= a4)
        {
          v23 = vsubq_f32(v19, v17);
          v24 = vmulq_f32(v23, v23);
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0] <= (float)(a4 * a4))
          {
            v26 = a3[1];
            v25 = (unint64_t)a3[2];
            if ((unint64_t)v26 >= v25)
            {
              v28 = *a3;
              v29 = (v26 - *a3) >> 2;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62)
                abort();
              v31 = v25 - (_QWORD)v28;
              if (v31 >> 1 > v30)
                v30 = v31 >> 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v32);
                v28 = *a3;
                v26 = a3[1];
              }
              else
              {
                v33 = 0;
              }
              v34 = &v33[4 * v29];
              *(_DWORD *)v34 = v12;
              v27 = v34 + 4;
              while (v26 != v28)
              {
                v35 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v34 - 1) = v35;
                v34 -= 4;
              }
              *a3 = v34;
              a3[1] = v27;
              a3[2] = &v33[4 * v32];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(_DWORD *)v26 = v12;
              v27 = v26 + 4;
            }
            a3[1] = v27;
            v11 = a1[4];
          }
          v36 = (2 * v10) | 1;
          v41 = v36;
          v42 = 2 * v10;
          v37 = (a1[5] - v11) >> 2;
          if (v37 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v43, &v42);
            v36 = v41;
            v37 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v37 <= v36)
            continue;
          v22 = (int *)&v41;
          goto LABEL_34;
        }
        v21 = (2 * (_DWORD)v10) | 1u;
      }
      else
      {
        v21 = (2 * v10);
      }
      v42 = v21;
      if (v21 < (a1[5] - v11) >> 2)
      {
        v22 = &v42;
LABEL_34:
        std::deque<unsigned int>::push_back(v43, v22);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v43);
}

uint64_t geom::kd_tree<float,(unsigned char)3>::find_closest(_QWORD *a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  unsigned int v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  char v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unint64_t v22;
  unsigned int *v23;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD v29[2];
  __int128 v30;

  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v28 = 1;
    std::deque<unsigned int>::push_back(v29, &v28);
    v4 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      LODWORD(v5) = -1;
      v6 = INFINITY;
      while (1)
      {
        v7 = v4 - 1;
        v8 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v29[0] + 1)
                                         + (((unint64_t)(v30 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v30 + v7) & 0x3FF));
        *((_QWORD *)&v30 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v29, 1);
        v9 = a1[4];
        v10 = *(unsigned int *)(v9 + 4 * v8);
        v11 = *(float32x4_t *)(a1[1] + 16 * v10);
        v12 = (uint32x4_t)vceqq_f32(*a2, v11);
        v12.i32[3] = v12.i32[2];
        v13 = vminvq_u32(v12);
        v14 = 0.0;
        if ((v13 & 0x80000000) == 0)
        {
          v15 = vsubq_f32(*a2, v11);
          v16 = vmulq_f32(v15, v15);
          LODWORD(v14) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
        }
        v17 = *(_BYTE *)(a1[7] + v8);
        if (v14 >= v6)
        {
          v5 = v5;
        }
        else
        {
          v6 = v14;
          v5 = v10;
        }
        v26 = *a2;
        v18 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v17 & 3)));
        v25 = v11;
        v19 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v17 & 3)));
        if (v18 == v19)
          v20 = 0.0;
        else
          v20 = v18 - v19;
        v21 = v20 * v20;
        v27 = (2 * v8) | 1;
        v28 = 2 * v8;
        v22 = (a1[5] - v9) >> 2;
        if (v20 >= 0.0)
        {
          if (v22 > ((2 * (_DWORD)v8) | 1u))
            std::deque<unsigned int>::push_back(v29, &v27);
          if (v6 <= v21 || v28 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_24;
          v23 = &v28;
        }
        else
        {
          if (v22 > (2 * v8))
            std::deque<unsigned int>::push_back(v29, &v28);
          if (v6 <= v21 || v27 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_24;
          v23 = &v27;
        }
        std::deque<unsigned int>::push_back(v29, v23);
LABEL_24:
        v4 = *((_QWORD *)&v30 + 1);
        if (!*((_QWORD *)&v30 + 1))
          goto LABEL_27;
      }
    }
  }
  v5 = 0xFFFFFFFFLL;
LABEL_27:
  std::deque<unsigned int>::~deque[abi:nn180100](v29);
  return v5;
}

void geom::kd_tree<double,(unsigned char)2>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1)
      geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(a1);
  }
  else
  {
    geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  char v17;
  int v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  std::vector<int>::value_type __x[4];
  __int128 v31;
  __int128 v32;
  std::vector<int> v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v27 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v33, 0, sizeof(v33));
  std::vector<unsigned int>::resize(&v33, *(_QWORD *)(a1 + 16));
  begin = v33.__begin_;
  end = v33.__end_;
  if (v33.__begin_ != v33.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v36 = (uint64_t)&off_24F149750;
    v37 = a1;
    v38 = &v36;
    goto LABEL_34;
  }
  v36 = 1;
  LODWORD(v37) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v36);
  v9 = *((_QWORD *)&v32 + 1);
  v36 = (uint64_t)&off_24F149750;
  v37 = a1;
  v38 = &v36;
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_34:
    *(_BYTE *)a1 = 1;
    v25 = &v36;
    v26 = 4;
LABEL_35:
    (*(void (**)(void))(*v25 + 8 * v26))();
    goto LABEL_36;
  }
  do
  {
    v10 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v32 / 0x155))
                         + 12 * ((unint64_t)v32 % 0x155));
    v12 = (_anonymous_namespace_ *)*v10;
    v11 = v10[1];
    v13 = v10[2];
    *(_QWORD *)&v32 = v32 + 1;
    *((_QWORD *)&v32 + 1) = v9 - 1;
    if ((unint64_t)v32 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v32 = v32 - 341;
    }
    v14 = v13 - v11;
    if ((_DWORD)v13 - (_DWORD)v11 == 1)
    {
      *(_DWORD *)(*v27 + 4 * (_QWORD)v12) = v33.__begin_[v11];
      goto LABEL_29;
    }
    v16 = v15 & 1;
    *((_BYTE *)v12 + *(_QWORD *)(a1 + 56)) = v15 & 1;
    if ((-1 << (v17 - 1)) + v14 >= ~(-1 << v17))
      v18 = ~(-1 << v17);
    else
      v18 = (-1 << (v17 - 1)) + v14;
    v19 = v33.__begin_;
    LODWORD(v28) = v16;
    if (!v38)
      std::__throw_bad_function_call[abi:nn180100]();
    v20 = (v18 + v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v38 + 48))(v34, v38, &v28);
    if ((_DWORD)v20 != (_DWORD)v13)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v19[v11], &v19[v20], (uint64_t)&v19[v13], (uint64_t)v34);
    v21 = v35;
    if (v35 == v34)
    {
      v21 = v34;
      v22 = 4;
      goto LABEL_24;
    }
    if (v35)
    {
      v22 = 5;
LABEL_24:
      (*(void (**)(void))(*v21 + 8 * v22))();
    }
    v23 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v23 + 4 * (_QWORD)v12) = v33.__begin_[v20];
    v24 = (*(_QWORD *)(a1 + 40) - v23) >> 2;
    if (v24 > (2 * (_DWORD)v12))
    {
      LODWORD(v28) = 2 * (_DWORD)v12;
      HIDWORD(v28) = v11;
      v29 = v20;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v28);
      v24 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v24 > ((2 * (_DWORD)v12) | 1u))
    {
      LODWORD(v28) = (2 * (_DWORD)v12) | 1;
      HIDWORD(v28) = v20 + 1;
      v29 = v13;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v28);
    }
LABEL_29:
    v9 = *((_QWORD *)&v32 + 1);
  }
  while (*((_QWORD *)&v32 + 1));
  v25 = v38;
  *(_BYTE *)a1 = 1;
  if (v25 == &v36)
  {
    v26 = 4;
    v25 = &v36;
    goto LABEL_35;
  }
  if (v25)
  {
    v26 = 5;
    goto LABEL_35;
  }
LABEL_36:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
}

void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  unsigned int v19;
  float64x2_t v20;
  int64x2_t v21;
  uint64_t v22;
  char v23;
  int v24;
  std::vector<int>::pointer v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  std::vector<int>::value_type __x[4];
  __int128 v39;
  __int128 v40;
  std::vector<int> v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v35 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v41, 0, sizeof(v41));
  std::vector<unsigned int>::resize(&v41, *(_QWORD *)(a1 + 16));
  begin = v41.__begin_;
  end = v41.__end_;
  if (v41.__begin_ != v41.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v39 = 0u;
  v40 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v44 = (uint64_t)&off_24F149850;
    v45 = a1;
    v46 = &v44;
    goto LABEL_40;
  }
  v44 = 1;
  LODWORD(v45) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v44);
  v9 = *((_QWORD *)&v40 + 1);
  v44 = (uint64_t)&off_24F149850;
  v45 = a1;
  v46 = &v44;
  if (!*((_QWORD *)&v40 + 1))
  {
LABEL_40:
    *(_BYTE *)a1 = 1;
    v31 = &v44;
    v32 = 4;
LABEL_41:
    (*(void (**)(void))(*v31 + 8 * v32))();
    goto LABEL_42;
  }
  v33 = vdupq_n_s64(0x7FF0000000000000uLL);
  v34 = vdupq_n_s64(0xFFF0000000000000);
  do
  {
    v10 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v40 / 0x155))
                         + 12 * ((unint64_t)v40 % 0x155));
    v12 = *v10;
    v11 = v10[1];
    v13 = v10[2];
    *(_QWORD *)&v40 = v40 + 1;
    *((_QWORD *)&v40 + 1) = v9 - 1;
    if ((unint64_t)v40 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v40 = v40 - 341;
    }
    v14 = v13 - v11;
    if ((_DWORD)v13 - (_DWORD)v11 == 1)
    {
      *(_DWORD *)(*v35 + 4 * v12) = v41.__begin_[v11];
      goto LABEL_35;
    }
    if (v13 <= v11)
    {
      v21 = v34;
    }
    else
    {
      v15 = &v41.__begin_[v11];
      v16 = v13 - v11;
      v18 = (float64x2_t)v33;
      v17 = (float64x2_t)v34;
      do
      {
        v19 = *v15++;
        v20 = *(float64x2_t *)(*(_QWORD *)(a1 + 8) + 16 * v19);
        v18 = vminnmq_f64(v18, v20);
        v17 = vmaxnmq_f64(v17, v20);
        --v16;
      }
      while (v16);
      v21 = (int64x2_t)vsubq_f64(v17, v18);
    }
    v22 = *(_QWORD *)&vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v21, 1), (float64x2_t)v21)) & 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + v12) = v22;
    if ((-1 << (v23 - 1)) + v14 >= ~(-1 << v23))
      v24 = ~(-1 << v23);
    else
      v24 = (-1 << (v23 - 1)) + v14;
    v25 = v41.__begin_;
    LODWORD(v36) = v22;
    if (!v46)
      std::__throw_bad_function_call[abi:nn180100]();
    v26 = (v24 + v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v46 + 48))(v42, v46, &v36);
    if ((_DWORD)v26 != (_DWORD)v13)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v25[v11], &v25[v26], (uint64_t)&v25[v13], (uint64_t)v42);
    v27 = v43;
    if (v43 == v42)
    {
      v27 = v42;
      v28 = 4;
      goto LABEL_30;
    }
    if (v43)
    {
      v28 = 5;
LABEL_30:
      (*(void (**)(void))(*v27 + 8 * v28))();
    }
    v29 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v29 + 4 * v12) = v41.__begin_[v26];
    v30 = (*(_QWORD *)(a1 + 40) - v29) >> 2;
    if (v30 > (2 * v12))
    {
      LODWORD(v36) = 2 * v12;
      HIDWORD(v36) = v11;
      v37 = v26;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v36);
      v30 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v30 > ((2 * (_DWORD)v12) | 1u))
    {
      LODWORD(v36) = (2 * v12) | 1;
      HIDWORD(v36) = v26 + 1;
      v37 = v13;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v36);
    }
LABEL_35:
    v9 = *((_QWORD *)&v40 + 1);
  }
  while (*((_QWORD *)&v40 + 1));
  v31 = v46;
  *(_BYTE *)a1 = 1;
  if (v31 == &v44)
  {
    v32 = 4;
    v31 = &v44;
    goto LABEL_41;
  }
  if (v31)
  {
    v32 = 5;
    goto LABEL_41;
  }
LABEL_42:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v41.__begin_)
  {
    v41.__end_ = v41.__begin_;
    operator delete(v41.__begin_);
  }
}

uint64_t geom::kd_tree<double,(unsigned char)2>::find_within_radius(_QWORD *a1, float64x2_t *a2, char **a3, double a4)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double *v14;
  double *v15;
  uint64_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  double v20;
  unint64_t v21;
  int *v22;
  float64x2_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  float64x2_t v38;
  float64x2_t v39;
  unsigned int v40;
  int v41;
  _OWORD v42[2];
  __int128 v43;

  a3[1] = *a3;
  v43 = 0u;
  memset(v42, 0, sizeof(v42));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v41 = 1;
    std::deque<unsigned int>::push_back(v42, &v41);
    for (i = *((_QWORD *)&v43 + 1); *((_QWORD *)&v43 + 1); i = *((_QWORD *)&v43 + 1))
    {
      v9 = i - 1;
      v10 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v42[0] + 1)
                                        + (((unint64_t)(v43 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v43 + v9) & 0x3FF));
      *((_QWORD *)&v43 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v42, 1);
      v11 = a1[4];
      v12 = *(unsigned int *)(v11 + 4 * v10);
      v13 = *(_BYTE *)(a1[7] + v10);
      v14 = (double *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF7 | (8 * (v13 & 1)));
      v15 = (double *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF7 | (8 * (v13 & 1)));
      v16 = a1[1];
      v17 = *a2;
      v38 = *a2;
      v18 = *v15;
      v19 = *(float64x2_t *)(v16 + 16 * v12);
      v39 = v19;
      if (v18 == *v14)
        v20 = 0.0;
      else
        v20 = v18 - *v14;
      if (v20 >= -a4)
      {
        if (v20 <= a4)
        {
          v23 = vsubq_f64(v19, v17);
          if (vaddvq_f64(vmulq_f64(v23, v23)) <= a4 * a4)
          {
            v25 = a3[1];
            v24 = (unint64_t)a3[2];
            if ((unint64_t)v25 >= v24)
            {
              v27 = *a3;
              v28 = (v25 - *a3) >> 2;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62)
                abort();
              v30 = v24 - (_QWORD)v27;
              if (v30 >> 1 > v29)
                v29 = v30 >> 1;
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                v31 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v31 = v29;
              if (v31)
              {
                v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v31);
                v27 = *a3;
                v25 = a3[1];
              }
              else
              {
                v32 = 0;
              }
              v33 = &v32[4 * v28];
              *(_DWORD *)v33 = v12;
              v26 = v33 + 4;
              while (v25 != v27)
              {
                v34 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v33 - 1) = v34;
                v33 -= 4;
              }
              *a3 = v33;
              a3[1] = v26;
              a3[2] = &v32[4 * v31];
              if (v27)
                operator delete(v27);
            }
            else
            {
              *(_DWORD *)v25 = v12;
              v26 = v25 + 4;
            }
            a3[1] = v26;
            v11 = a1[4];
          }
          v35 = (2 * v10) | 1;
          v40 = v35;
          v41 = 2 * v10;
          v36 = (a1[5] - v11) >> 2;
          if (v36 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v42, &v41);
            v35 = v40;
            v36 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v36 <= v35)
            continue;
          v22 = (int *)&v40;
          goto LABEL_34;
        }
        v21 = (2 * (_DWORD)v10) | 1u;
      }
      else
      {
        v21 = (2 * v10);
      }
      v41 = v21;
      if (v21 < (a1[5] - v11) >> 2)
      {
        v22 = &v41;
LABEL_34:
        std::deque<unsigned int>::push_back(v42, v22);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v42);
}

uint64_t geom::kd_tree<double,(unsigned char)2>::find_closest(_QWORD *a1, float64x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double *v12;
  double *v13;
  float64x2_t v14;
  int64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  unsigned int *v23;
  float64x2_t v25;
  float64x2_t v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD v29[2];
  __int128 v30;

  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v28 = 1;
    std::deque<unsigned int>::push_back(v29, &v28);
    v4 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      LODWORD(v5) = -1;
      v6 = INFINITY;
      while (1)
      {
        v7 = v4 - 1;
        v8 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v29[0] + 1)
                                         + (((unint64_t)(v30 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v30 + v7) & 0x3FF));
        *((_QWORD *)&v30 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v29, 1);
        v9 = a1[4];
        v10 = *(unsigned int *)(v9 + 4 * v8);
        v11 = *(_BYTE *)(a1[7] + v8);
        v12 = (double *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
        v13 = (double *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
        v14 = *(float64x2_t *)(a1[1] + 16 * v10);
        v15 = vceqq_f64(*a2, v14);
        v16 = vandq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), (int8x16_t)v15).u64[0];
        v17 = vsubq_f64(*a2, v14);
        v18 = vaddvq_f64(vmulq_f64(v17, v17));
        if (v16 < 0)
          v18 = 0.0;
        if (v18 >= v6)
        {
          v5 = v5;
        }
        else
        {
          v6 = v18;
          v5 = v10;
        }
        v25 = *a2;
        v19 = *v13;
        v26 = v14;
        if (v19 == *v12)
          v20 = 0.0;
        else
          v20 = v19 - *v12;
        v21 = v20 * v20;
        v27 = (2 * v8) | 1;
        v28 = 2 * v8;
        v22 = (a1[5] - v9) >> 2;
        if (v20 >= 0.0)
        {
          if (v22 > ((2 * (_DWORD)v8) | 1u))
            std::deque<unsigned int>::push_back(v29, &v27);
          if (v6 <= v21 || v28 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_24;
          v23 = &v28;
        }
        else
        {
          if (v22 > (2 * v8))
            std::deque<unsigned int>::push_back(v29, &v28);
          if (v6 <= v21 || v27 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_24;
          v23 = &v27;
        }
        std::deque<unsigned int>::push_back(v29, v23);
LABEL_24:
        v4 = *((_QWORD *)&v30 + 1);
        if (!*((_QWORD *)&v30 + 1))
          goto LABEL_27;
      }
    }
  }
  v5 = 0xFFFFFFFFLL;
LABEL_27:
  std::deque<unsigned int>::~deque[abi:nn180100](v29);
  return v5;
}

uint64_t geom::kd_tree<double,(unsigned char)3>::kd_tree(uint64_t a1, const void *a2, const void *a3, int a4)
{
  const void *v6[2];

  v6[0] = a2;
  v6[1] = a3;
  *(_BYTE *)a1 = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v6, a4, a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

_QWORD *geom::kd_tree<double,(unsigned char)3>::reset(_QWORD *result, void *a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  char v6;
  void *v7;

  v5 = result;
  v6 = 0;
  *(_BYTE *)result = 0;
  result[5] = result[4];
  result[8] = result[7];
  if (a3)
    v7 = a2;
  else
    v7 = 0;
  if (a3 && a4)
  {
    v7 = (void *)operator new[]();
    result = memmove(v7, a2, 32 * a3);
    v6 = 1;
  }
  if (*((_BYTE *)v5 + 24))
  {
    result = (_QWORD *)v5[1];
    if (result)
      result = (_QWORD *)MEMORY[0x22E2B7674](result, 0x1000C80E0EAB150);
  }
  v5[1] = v7;
  v5[2] = a3;
  *((_BYTE *)v5 + 24) = v6;
  return result;
}

void geom::kd_tree<double,(unsigned char)3>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1)
      geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(a1);
  }
  else
  {
    geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  int v17;
  std::vector<int>::pointer v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  std::vector<int>::value_type __x[4];
  __int128 v30;
  __int128 v31;
  std::vector<int> v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v26 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v32, 0, sizeof(v32));
  std::vector<unsigned int>::resize(&v32, *(_QWORD *)(a1 + 16));
  begin = v32.__begin_;
  end = v32.__end_;
  if (v32.__begin_ != v32.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v35 = (uint64_t)&off_24F149950;
    v36 = a1;
    v37 = &v35;
    goto LABEL_34;
  }
  v35 = 1;
  LODWORD(v36) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v35);
  v9 = *((_QWORD *)&v31 + 1);
  v35 = (uint64_t)&off_24F149950;
  v36 = a1;
  v37 = &v35;
  if (!*((_QWORD *)&v31 + 1))
  {
LABEL_34:
    *(_BYTE *)a1 = 1;
    v24 = &v35;
    v25 = 4;
LABEL_35:
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_36;
  }
  do
  {
    v10 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v31 / 0x155))
                         + 12 * ((unint64_t)v31 % 0x155));
    v12 = (_anonymous_namespace_ *)*v10;
    v11 = v10[1];
    v13 = v10[2];
    *(_QWORD *)&v31 = v31 + 1;
    *((_QWORD *)&v31 + 1) = v9 - 1;
    if ((unint64_t)v31 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v31 = v31 - 341;
    }
    v14 = v13 - v11;
    if ((_DWORD)v13 - (_DWORD)v11 == 1)
    {
      *(_DWORD *)(*v26 + 4 * (_QWORD)v12) = v32.__begin_[v11];
      goto LABEL_29;
    }
    *((_BYTE *)v12 + *(_QWORD *)(a1 + 56)) = v15;
    if ((-1 << (v16 - 1)) + v14 >= ~(-1 << v16))
      v17 = ~(-1 << v16);
    else
      v17 = (-1 << (v16 - 1)) + v14;
    v18 = v32.__begin_;
    LODWORD(v27) = v15;
    if (!v37)
      std::__throw_bad_function_call[abi:nn180100]();
    v19 = (v17 + v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v37 + 48))(v33, v37, &v27);
    if ((_DWORD)v19 != (_DWORD)v13)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v18[v11], &v18[v19], (uint64_t)&v18[v13], (uint64_t)v33);
    v20 = v34;
    if (v34 == v33)
    {
      v20 = v33;
      v21 = 4;
      goto LABEL_24;
    }
    if (v34)
    {
      v21 = 5;
LABEL_24:
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
    v22 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v22 + 4 * (_QWORD)v12) = v32.__begin_[v19];
    v23 = (*(_QWORD *)(a1 + 40) - v22) >> 2;
    if (v23 > (2 * (_DWORD)v12))
    {
      LODWORD(v27) = 2 * (_DWORD)v12;
      HIDWORD(v27) = v11;
      v28 = v19;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v27);
      v23 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v23 > ((2 * (_DWORD)v12) | 1u))
    {
      LODWORD(v27) = (2 * (_DWORD)v12) | 1;
      HIDWORD(v27) = v19 + 1;
      v28 = v13;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v27);
    }
LABEL_29:
    v9 = *((_QWORD *)&v31 + 1);
  }
  while (*((_QWORD *)&v31 + 1));
  v24 = v37;
  *(_BYTE *)a1 = 1;
  if (v24 == &v35)
  {
    v25 = 4;
    v24 = &v35;
    goto LABEL_35;
  }
  if (v24)
  {
    v25 = 5;
    goto LABEL_35;
  }
LABEL_36:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
}

void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  std::vector<int>::size_type v2;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  std::vector<int>::pointer v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64x2_t v39;
  int64x2_t v40;
  _QWORD *v41;
  _OWORD v42[2];
  uint64_t v43;
  int v44;
  std::vector<int>::value_type __x[4];
  __int128 v46;
  __int128 v47;
  std::vector<int> v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16) + 1;
  __x[0] = -1;
  v41 = (_QWORD *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v48, 0, sizeof(v48));
  std::vector<unsigned int>::resize(&v48, *(_QWORD *)(a1 + 16));
  begin = v48.__begin_;
  end = v48.__end_;
  if (v48.__begin_ != v48.__end_)
  {
    v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8)
      *(_QWORD *)(a1 + 64) = v6 + (v7 >> 2);
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    v7 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  }
  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)__x = 0u;
  if ((unint64_t)v7 <= 4)
  {
    v51 = (uint64_t)&off_24F149A50;
    v52 = a1;
    v53 = &v51;
    goto LABEL_43;
  }
  v51 = 1;
  LODWORD(v52) = *(_QWORD *)(a1 + 16);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v51);
  v9 = *((_QWORD *)&v47 + 1);
  v51 = (uint64_t)&off_24F149A50;
  v52 = a1;
  v53 = &v51;
  if (!*((_QWORD *)&v47 + 1))
  {
LABEL_43:
    *(_BYTE *)a1 = 1;
    v37 = &v51;
    v38 = 4;
LABEL_44:
    (*(void (**)(void))(*v37 + 8 * v38))();
    goto LABEL_45;
  }
  v10 = vdupq_n_s64(0xFFF0000000000000);
  v39 = vdupq_n_s64(0x7FF0000000000000uLL);
  v40 = v10;
  do
  {
    v11 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&__x[2] + 8 * ((unint64_t)v47 / 0x155))
                         + 12 * ((unint64_t)v47 % 0x155));
    v13 = *v11;
    v12 = v11[1];
    v14 = v11[2];
    *(_QWORD *)&v47 = v47 + 1;
    *((_QWORD *)&v47 + 1) = v9 - 1;
    if ((unint64_t)v47 >= 0x2AA)
    {
      operator delete(**(void ***)&__x[2]);
      *(_QWORD *)&__x[2] += 8;
      *(_QWORD *)&v47 = v47 - 341;
    }
    v15 = v14 - v12;
    if ((_DWORD)v14 - (_DWORD)v12 == 1)
    {
      *(_DWORD *)(*v41 + 4 * v13) = v48.__begin_[v12];
      goto LABEL_38;
    }
    if (v14 <= v12)
    {
      v10.i64[0] = 0xFFF0000000000000;
      v25 = v40;
    }
    else
    {
      v16 = &v48.__begin_[v12];
      v17 = v14 - v12;
      v18.f64[0] = INFINITY;
      v19.f64[0] = -INFINITY;
      v21 = (float64x2_t)v39;
      v20 = (float64x2_t)v40;
      do
      {
        v22 = *v16++;
        v23 = *(_QWORD *)(a1 + 8) + 32 * v22;
        v24 = *(_OWORD *)(v23 + 16);
        v21 = vminnmq_f64(v21, *(float64x2_t *)v23);
        v18 = vminnmq_f64((float64x2_t)*(unint64_t *)&v18.f64[0], (float64x2_t)(unint64_t)v24);
        v20 = vmaxnmq_f64(v20, *(float64x2_t *)v23);
        v19 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v19.f64[0], (float64x2_t)(unint64_t)v24);
        --v17;
      }
      while (v17);
      v25 = (int64x2_t)vsubq_f64(v20, v21);
      v10 = (int64x2_t)vsubq_f64(v19, v18);
    }
    v26 = vcgtq_f64((float64x2_t)vdupq_laneq_s64(v25, 1), (float64x2_t)v25);
    *(int32x2_t *)v26.i8 = vmovn_s64(v26);
    v27 = *(_QWORD *)&vmovn_s32((int32x4_t)v26) & 1;
    v42[0] = v25;
    v42[1] = v10;
    if (*(double *)v10.i64 <= *(double *)((unint64_t)v42 & 0xFFFFFFFFFFFFFFF7 | (8 * v27)))
      v28 = v27;
    else
      v28 = 2;
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13) = v28;
    if ((-1 << (v29 - 1)) + v15 >= ~(-1 << v29))
      v30 = ~(-1 << v29);
    else
      v30 = (-1 << (v29 - 1)) + v15;
    v31 = v48.__begin_;
    LODWORD(v43) = v28;
    if (!v53)
      std::__throw_bad_function_call[abi:nn180100]();
    v32 = (v30 + v12);
    (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t *))(*v53 + 48))(v49, v53, &v43);
    if ((_DWORD)v32 != (_DWORD)v14)
      std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v31[v12], &v31[v32], (uint64_t)&v31[v14], (uint64_t)v49);
    v33 = v50;
    if (v50 == v49)
    {
      v33 = v49;
      v34 = 4;
      goto LABEL_33;
    }
    if (v50)
    {
      v34 = 5;
LABEL_33:
      (*(void (**)(void))(*v33 + 8 * v34))();
    }
    v35 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v35 + 4 * v13) = v48.__begin_[v32];
    v36 = (*(_QWORD *)(a1 + 40) - v35) >> 2;
    if (v36 > (2 * v13))
    {
      LODWORD(v43) = 2 * v13;
      HIDWORD(v43) = v12;
      v44 = v32;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v43);
      v36 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
    }
    if (v36 > ((2 * (_DWORD)v13) | 1u))
    {
      LODWORD(v43) = (2 * v13) | 1;
      HIDWORD(v43) = v32 + 1;
      v44 = v14;
      std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v43);
    }
LABEL_38:
    v9 = *((_QWORD *)&v47 + 1);
  }
  while (*((_QWORD *)&v47 + 1));
  v37 = v53;
  *(_BYTE *)a1 = 1;
  if (v37 == &v51)
  {
    v38 = 4;
    v37 = &v51;
    goto LABEL_44;
  }
  if (v37)
  {
    v38 = 5;
    goto LABEL_44;
  }
LABEL_45:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v48.__begin_)
  {
    v48.__end_ = v48.__begin_;
    operator delete(v48.__begin_);
  }
}

uint64_t geom::kd_tree<double,(unsigned char)3>::find_within_radius(_QWORD *a1, float64x2_t *a2, char **a3, double a4)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  double v20;
  double v21;
  unint64_t v22;
  int *v23;
  float64x2_t v24;
  float64x2_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  _OWORD v40[2];
  _OWORD v41[2];
  unsigned int v42;
  int v43;
  _OWORD v44[2];
  __int128 v45;

  a3[1] = *a3;
  v45 = 0u;
  memset(v44, 0, sizeof(v44));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v43 = 1;
    std::deque<unsigned int>::push_back(v44, &v43);
    for (i = *((_QWORD *)&v45 + 1); *((_QWORD *)&v45 + 1); i = *((_QWORD *)&v45 + 1))
    {
      v9 = i - 1;
      v10 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v44[0] + 1)
                                        + (((unint64_t)(v45 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v45 + v9) & 0x3FF));
      *((_QWORD *)&v45 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v44, 1);
      v11 = a1[4];
      v12 = *(unsigned int *)(v11 + 4 * v10);
      v13 = *(_BYTE *)(a1[7] + v10) & 3;
      v14 = (float64x2_t *)(a1[1] + 32 * v12);
      v15 = *a2;
      v16 = a2[1];
      v40[0] = *a2;
      v40[1] = v16;
      v17 = *((double *)v40 + v13);
      v18 = *v14;
      v19 = v14[1];
      v41[0] = *v14;
      v41[1] = v19;
      v20 = *((double *)v41 + v13);
      if (v17 == v20)
        v21 = 0.0;
      else
        v21 = v17 - v20;
      if (v21 >= -a4)
      {
        if (v21 <= a4)
        {
          v24 = vsubq_f64(v18, v15);
          v25 = vsubq_f64(v19, v16);
          if (vmulq_f64(v25, v25).f64[0] + vaddvq_f64(vmulq_f64(v24, v24)) <= a4 * a4)
          {
            v27 = a3[1];
            v26 = (unint64_t)a3[2];
            if ((unint64_t)v27 >= v26)
            {
              v29 = *a3;
              v30 = (v27 - *a3) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                abort();
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v33);
                v29 = *a3;
                v27 = a3[1];
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = v12;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *a3 = v35;
              a3[1] = v28;
              a3[2] = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = v12;
              v28 = v27 + 4;
            }
            a3[1] = v28;
            v11 = a1[4];
          }
          v37 = (2 * v10) | 1;
          v42 = v37;
          v43 = 2 * v10;
          v38 = (a1[5] - v11) >> 2;
          if (v38 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v44, &v43);
            v37 = v42;
            v38 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v38 <= v37)
            continue;
          v23 = (int *)&v42;
          goto LABEL_34;
        }
        v22 = (2 * (_DWORD)v10) | 1u;
      }
      else
      {
        v22 = (2 * v10);
      }
      v43 = v22;
      if (v22 < (a1[5] - v11) >> 2)
      {
        v23 = &v43;
LABEL_34:
        std::deque<unsigned int>::push_back(v44, v23);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v44);
}

uint64_t geom::kd_tree<double,(unsigned char)3>::find_closest(_QWORD *a1, float64x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int64x2_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  unsigned int *v27;
  _OWORD v29[2];
  _OWORD v30[2];
  unsigned int v31;
  unsigned int v32;
  _OWORD v33[2];
  __int128 v34;

  v34 = 0u;
  memset(v33, 0, sizeof(v33));
  if (a1[5] - a1[4] >= 5uLL)
  {
    v32 = 1;
    std::deque<unsigned int>::push_back(v33, &v32);
    v4 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      LODWORD(v5) = -1;
      v6 = INFINITY;
      while (1)
      {
        v7 = v4 - 1;
        v8 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)&v33[0] + 1)
                                         + (((unint64_t)(v34 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v34 + v7) & 0x3FF));
        *((_QWORD *)&v34 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v33, 1);
        v9 = a1[4];
        v10 = *(unsigned int *)(v9 + 4 * v8);
        v11 = a1[1] + 32 * v10;
        v12 = a2[1];
        v13 = *(float64x2_t *)v11;
        v14 = *(float64x2_t *)(v11 + 16);
        v15 = vceqq_f64(*a2, *(float64x2_t *)v11);
        v16 = 0.0;
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), vandq_s8((int8x16_t)vceqq_f64(v12, v14), (int8x16_t)v15)).u64[0] & 0x8000000000000000) == 0)
        {
          v17 = vsubq_f64(*a2, v13);
          v18 = vsubq_f64(v12, v14);
          v16 = vmulq_f64(v18, v18).f64[0] + vaddvq_f64(vmulq_f64(v17, v17));
        }
        v19 = *(_BYTE *)(a1[7] + v8);
        v20 = v16 < v6;
        if (v16 < v6)
          v6 = v16;
        v30[0] = *a2;
        v30[1] = v12;
        v21 = v19 & 3;
        v22 = *((double *)v30 + v21);
        if (v20)
          v5 = v10;
        else
          v5 = v5;
        v29[0] = v13;
        v29[1] = v14;
        v23 = *((double *)v29 + v21);
        if (v22 == v23)
          v24 = 0.0;
        else
          v24 = v22 - v23;
        v25 = v24 * v24;
        v31 = (2 * v8) | 1;
        v32 = 2 * v8;
        v26 = (a1[5] - v9) >> 2;
        if (v24 >= 0.0)
        {
          if (v26 > ((2 * (_DWORD)v8) | 1u))
            std::deque<unsigned int>::push_back(v33, &v31);
          if (v6 <= v25 || v32 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_26;
          v27 = &v32;
        }
        else
        {
          if (v26 > (2 * v8))
            std::deque<unsigned int>::push_back(v33, &v32);
          if (v6 <= v25 || v31 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2))
            goto LABEL_26;
          v27 = &v31;
        }
        std::deque<unsigned int>::push_back(v33, v27);
LABEL_26:
        v4 = *((_QWORD *)&v34 + 1);
        if (!*((_QWORD *)&v34 + 1))
          goto LABEL_29;
      }
    }
  }
  v5 = 0xFFFFFFFFLL;
LABEL_29:
  std::deque<unsigned int>::~deque[abi:nn180100](v33);
  return v5;
}

uint64_t `anonymous namespace'::uint32_log2(_anonymous_namespace_ *this)
{
  unsigned int v1;
  unsigned int v2;

  v1 = this >> 16;
  if (!(this >> 16))
    v1 = this;
  if (v1 <= 0xFF)
  {
    v2 = 16 * (this >> 16 != 0);
  }
  else
  {
    v1 >>= 8;
    v2 = (16 * (this >> 16 != 0)) | 8;
  }
  if (v1 > 0xF)
  {
    v1 >>= 4;
    v2 |= 4u;
  }
  if (v1 > 3)
  {
    v1 >>= 2;
    v2 |= 2u;
  }
  if (v1 <= 1)
    return v2;
  else
    return v2 + 1;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149330;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149330;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F1493B0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1493B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1493B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8 * *a2 + 4 * (*(_BYTE *)(a1 + 16) & 1)) < *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8 * *a3 + 4 * (*(_BYTE *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

int *std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(int *result, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v10;
  int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  int *v23;
  int *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int *v35;
  int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;

  if ((int *)a3 == a2)
    return result;
  v5 = a3;
  v7 = result;
  while (1)
  {
    v8 = (v5 - (uint64_t)v7) >> 2;
    if (v8 < 2)
      return result;
    if (v8 == 3)
    {
      v35 = v7 + 1;
      v36 = (int *)(v5 - 4);
      v37 = v7;
      v38 = a4;
      return (int *)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v37, v35, v36, v38);
    }
    if (v8 == 2)
    {
      v39 = *(_QWORD *)(a4 + 24);
      if (v39)
      {
        v40 = (int *)(v5 - 4);
        result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v39 + 48))(v39, v5 - 4, v7);
        if ((_DWORD)result)
        {
          v41 = *v7;
          *v7 = *v40;
          *v40 = v41;
        }
        return result;
      }
      goto LABEL_73;
    }
    if (v5 - (uint64_t)v7 <= 31)
      return std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v7, v5, a4);
    v9 = &v7[v8 >> 1];
    v10 = (int *)(v5 - 4);
    v11 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v7, v9, (int *)(v5 - 4), a4);
    v12 = *(_QWORD *)(a4 + 24);
    if (!v12)
      goto LABEL_73;
    result = (int *)(*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v12 + 48))(v12, v7, v9);
    if (!(_DWORD)result)
      break;
    v13 = (int *)(v5 - 4);
LABEL_15:
    v16 = v7 + 1;
    if (v7 + 1 < v13)
    {
LABEL_16:
      while (1)
      {
        v17 = *(_QWORD *)(a4 + 24);
        if (!v17)
          break;
        if (!(*(unsigned int (**)(uint64_t, int *, int *))(*(_QWORD *)v17 + 48))(v17, v16, v9))
        {
          while (1)
          {
            v18 = *(_QWORD *)(a4 + 24);
            if (!v18)
              goto LABEL_73;
            result = (int *)(*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v18 + 48))(v18, --v13, v9);
            if ((_DWORD)result)
            {
              if (v16 >= v13)
                goto LABEL_25;
              v19 = *v16;
              v20 = v16 == v9;
              *v16++ = *v13;
              *v13 = v19;
              ++v11;
              if (v20)
                v9 = v13;
              goto LABEL_16;
            }
          }
        }
        ++v16;
      }
LABEL_73:
      std::__throw_bad_function_call[abi:nn180100]();
      return (int *)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v37, v35, v36, v38);
    }
LABEL_25:
    if (v16 != v9)
    {
      v21 = *(_QWORD *)(a4 + 24);
      if (!v21)
        goto LABEL_73;
      result = (int *)(*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v21 + 48))(v21, v9, v16);
      if ((_DWORD)result)
      {
        v22 = *v16;
        *v16 = *v9;
        *v9 = v22;
        ++v11;
      }
    }
    if (v16 == a2)
      return result;
    if (!v11)
    {
      v24 = v16;
      if (v16 <= a2)
      {
        while (1)
        {
          v28 = v24 + 1;
          if (v24 + 1 == (int *)v5)
            break;
          v29 = *(_QWORD *)(a4 + 24);
          if (!v29)
            goto LABEL_73;
          result = (int *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v29 + 48))(v29, v24 + 1);
          v24 = v28;
          if ((_DWORD)result)
            goto LABEL_31;
        }
      }
      else
      {
        v25 = v7;
        while (1)
        {
          v26 = v25 + 1;
          if (v25 + 1 == v16)
            break;
          v27 = *(_QWORD *)(a4 + 24);
          if (!v27)
            goto LABEL_73;
          result = (int *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v27 + 48))(v27, v25 + 1);
          v25 = v26;
          if ((_DWORD)result)
            goto LABEL_31;
        }
      }
      return result;
    }
LABEL_31:
    if (v16 <= a2)
      v23 = v16 + 1;
    else
      v23 = v7;
    if (v16 > a2)
      v5 = (uint64_t)v16;
LABEL_36:
    v7 = v23;
    if ((int *)v5 == a2)
      return result;
  }
  v13 = (int *)(v5 - 4);
  while (1)
  {
    --v13;
    v14 = *(_QWORD *)(a4 + 24);
    if (v13 == v7)
      break;
    if (!v14)
      goto LABEL_73;
    result = (int *)(*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v14 + 48))(v14, v13, v9);
    if ((_DWORD)result)
    {
      v15 = *v7;
      *v7 = *v13;
      *v13 = v15;
      ++v11;
      goto LABEL_15;
    }
  }
  if (!v14)
    goto LABEL_73;
  v23 = v7 + 1;
  result = (int *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v14 + 48))(v14, v7, v5 - 4);
  if ((_DWORD)result)
  {
LABEL_56:
    if (v23 == v10)
      return result;
LABEL_57:
    while (1)
    {
      v32 = *(_QWORD *)(a4 + 24);
      if (!v32)
        goto LABEL_73;
      if ((*(unsigned int (**)(uint64_t, int *, int *))(*(_QWORD *)v32 + 48))(v32, v7, v23))
      {
        while (1)
        {
          v33 = *(_QWORD *)(a4 + 24);
          if (!v33)
            goto LABEL_73;
          result = (int *)(*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v33 + 48))(v33, v7, --v10);
          if (!(_DWORD)result)
          {
            if (v23 < v10)
            {
              v34 = *v23;
              *v23++ = *v10;
              *v10 = v34;
              goto LABEL_57;
            }
            if (v23 <= a2)
              goto LABEL_36;
            return result;
          }
        }
      }
      ++v23;
    }
  }
  while (v23 != v10)
  {
    v30 = *(_QWORD *)(a4 + 24);
    if (!v30)
      goto LABEL_73;
    result = (int *)(*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v30 + 48))(v30, v7, v23);
    if ((_DWORD)result)
    {
      v31 = *v23;
      *v23++ = *v10;
      *v10 = v31;
      goto LABEL_56;
    }
    ++v23;
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v5 = *(_QWORD *)(a4 + 24);
  if (!v5)
    goto LABEL_17;
  v9 = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v5 + 48))(v5, a2, a1);
  v10 = *(_QWORD *)(a4 + 24);
  if (!v9)
  {
    if (v10)
    {
      result = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v10 + 48))(v10, a3, a2);
      if (!(_DWORD)result)
        return result;
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = *(_QWORD *)(a4 + 24);
      if (v15)
      {
        if (!(*(unsigned int (**)(uint64_t, int *, int *))(*(_QWORD *)v15 + 48))(v15, a2, a1))
          return 1;
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
        return 2;
      }
    }
LABEL_17:
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>();
  }
  if (!v10)
    goto LABEL_17;
  v11 = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v10 + 48))(v10, a3, a2);
  v12 = *a1;
  if (v11)
  {
    *a1 = *a3;
    *a3 = v12;
    return 1;
  }
  *a1 = *a2;
  *a2 = v12;
  v17 = *(_QWORD *)(a4 + 24);
  if (!v17)
    goto LABEL_17;
  if (!(*(unsigned int (**)(uint64_t, int *, int *))(*(_QWORD *)v17 + 48))(v17, a3, a2))
    return 1;
  v18 = *a2;
  *a2 = *a3;
  *a3 = v18;
  return 2;
}

int *std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(int *result, uint64_t a2, uint64_t a3)
{
  int *v3;
  int *v6;
  int v7;

  v3 = (int *)(a2 - 4);
  if ((int *)(a2 - 4) != result)
  {
    v6 = result;
    do
    {
      result = (int *)std::__min_element[abi:nn180100]<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *,unsigned int *>((uint64_t)v6, a2, a3);
      if (v6 != result)
      {
        v7 = *v6;
        *v6 = *result;
        *result = v7;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t std::__min_element[abi:nn180100]<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *,unsigned int *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v9;

  v3 = a1;
  if (a1 == a2)
    return v3;
  v5 = a1 + 4;
  if (a1 + 4 == a2)
    return v3;
  while (1)
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (!v7)
      break;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v5, v3))
      v3 = v5;
    v5 += 4;
    if (v5 == a2)
      return v3;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](v9);
}

uint64_t std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149450;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F1494C0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1494C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1494C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8 * *a2 + 4 * (*(_BYTE *)(a1 + 16) & 1)) < *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8 * *a3 + 4 * (*(_BYTE *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

uint64_t std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149550;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149550;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F1495C0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1495C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1495C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a2 + 4 * (*(_BYTE *)(a1 + 16) & 3)) < *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a3 + 4 * (*(_BYTE *)(a1 + 16) & 3));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149650;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149650;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F1496C0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1496C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1496C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a2 + 4 * (*(_BYTE *)(a1 + 16) & 3)) < *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a3 + 4 * (*(_BYTE *)(a1 + 16) & 3));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149750;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149750;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F1497C0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1497C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1497C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a2 + 8 * (*(_BYTE *)(a1 + 16) & 1)) < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a3 + 8 * (*(_BYTE *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149850;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149850;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F1498C0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1498C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1498C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a2 + 8 * (*(_BYTE *)(a1 + 16) & 1)) < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * *a3 + 8 * (*(_BYTE *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F1499C0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F1499C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F1499C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD v11[2];
  _OWORD v12[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (__int128 *)(v3 + 32 * *a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_BYTE *)(a1 + 16) & 3;
  v12[0] = v5;
  v12[1] = v6;
  *(_QWORD *)&v5 = *((_QWORD *)v12 + v7);
  v8 = (_OWORD *)(v3 + 32 * *a3);
  v9 = v8[1];
  v11[0] = *v8;
  v11[1] = v9;
  return *(double *)&v5 < *((double *)v11 + v7);
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

_QWORD *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24F149A50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24F149A50;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(result + 8);
  *a3 = &off_24F149AC0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F149AC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F149AC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD v11[2];
  _OWORD v12[2];

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v4 = (__int128 *)(v3 + 32 * *a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_BYTE *)(a1 + 16) & 3;
  v12[0] = v5;
  v12[1] = v6;
  *(_QWORD *)&v5 = *((_QWORD *)v12 + v7);
  v8 = (_OWORD *)(v3 + 32 * *a3);
  v9 = v8[1];
  v11[0] = *v8;
  v11[1] = v9;
  return *(double *)&v5 < *((double *)v11 + v7);
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::triangle_mesh_decimator_interface(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 8), (const std::vector<unsigned int> *)(a2 + 8));
  if (*(_QWORD *)a2)
  {
    v4 = operator new();
    *(_QWORD *)a1 = geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator(v4, *(_QWORD *)a2);
  }
  return a1;
}

double geom::internal::triangle_mesh_decimator_interface<float>::triangle_mesh_decimator_interface(_QWORD *a1, uint64_t a2)
{
  double result;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::~triangle_mesh_decimator_interface(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)a1;
  if (v2)
  {
    v3 = geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v2);
    MEMORY[0x22E2B768C](v3, 0x10B0C40E87BB8D8);
    *(_QWORD *)a1 = 0;
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    operator delete(v4);
  return a1;
}

void geom::internal::triangle_mesh_decimator_interface<float>::make(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _OWORD v23[2];
  void *__dst[2];
  uint64_t v25;
  _QWORD v26[69];
  char v27;

  *(_QWORD *)&v23[0] = 0;
  geom::internal::triangle_mesh_decimator<float>::make(a1, a2, a3, a4, a5, a6, (uint64_t)v23, v26);
  if (v27)
  {
    v9 = *(_QWORD *)(a5 + 8);
    __dst[1] = 0;
    v25 = 0;
    __dst[0] = 0;
    if (v9)
    {
      std::vector<float>::__vallocate[abi:nn180100](__dst, v9);
      v10 = (char *)__dst[1];
      bzero(__dst[1], 4 * v9);
      __dst[1] = &v10[4 * v9];
      if (*(_QWORD *)(a5 + 8))
        memcpy(__dst[0], *(const void **)a5, &v10[4 * v9] - (char *)__dst[0]);
    }
    if (v27)
    {
      v11 = operator new();
      v12 = geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator(v11, (uint64_t)v26);
      v13 = v25;
      v14 = *(_OWORD *)__dst;
      __dst[1] = 0;
      v25 = 0;
      __dst[0] = 0;
      *(_QWORD *)a7 = v12;
      *(_OWORD *)(a7 + 8) = v14;
      *(_QWORD *)(a7 + 24) = v13;
      memset(v23, 0, sizeof(v23));
      *(_BYTE *)(a7 + 32) = 1;
      geom::internal::triangle_mesh_decimator_interface<float>::~triangle_mesh_decimator_interface((uint64_t)v23);
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      if (v27)
        geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v26);
    }
    else
    {
      v15 = std::__throw_bad_optional_access[abi:nn180100]();
      geom::internal::triangle_mesh_decimator<float>::make(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  else
  {
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 32) = 0;
  }
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator<float>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  std::vector<unsigned int>::pointer end;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  std::vector<unsigned int>::size_type v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t *v36;
  std::vector<unsigned int>::pointer v37;
  unsigned int *v38;
  std::vector<unsigned int>::pointer begin;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  std::vector<unsigned int>::pointer v48;
  std::vector<unsigned int>::pointer v49;
  unsigned int v50;
  __int128 v52;
  _BYTE v54[32];
  __int128 v55;
  void *v56[2];
  void *v57[2];
  __int128 v58;
  void *__p[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  std::vector<unsigned int> v69[5];
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  std::vector<unsigned int> v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85[2];
  uint64_t v86;
  std::vector<unsigned int> v87;
  void *v88[2];
  void *v89[2];
  __int128 v90;
  void *v91[2];
  void *v92[2];
  __int128 v93;
  void *v94[2];
  uint64_t v95;
  void *v96[3];
  void *__dst[2];
  uint64_t v98;
  std::vector<int>::size_type __sz;
  int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  std::vector<unsigned int> v111;
  unsigned __int8 v112;
  char v113;

  geom::triangle_mesh_connectivity::make((geom::triangle_mesh_connectivity *)*(unsigned int *)(a1 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), &__sz);
  if (!v113)
  {
    *a8 = 0;
    a8[552] = 0;
    return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
  }
  v14 = v103 - *((_QWORD *)&v102 + 1);
  v15 = (((_QWORD)v103 - *((_QWORD *)&v102 + 1)) >> 2);
  __dst[1] = 0;
  __dst[0] = 0;
  v98 = 0;
  if ((((_QWORD)v103 - *((_QWORD *)&v102 + 1)) >> 2))
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(__dst, (((_QWORD)v103 - *((_QWORD *)&v102 + 1)) >> 2));
    v16 = (char *)__dst[1];
    bzero(__dst[1], 16 * v15);
    __dst[1] = &v16[16 * v15];
    if (!v113)
      goto LABEL_98;
  }
  v17 = v14 >> 2;
  v18 = v112;
  if (v112)
  {
    if ((_DWORD)v17)
    {
      v19 = 0;
      do
      {
        *((_OWORD *)__dst[0] + v19) = *(_OWORD *)(*(_QWORD *)a1 + 16 * v111.__begin_[v19]);
        ++v19;
      }
      while (v15 != v19);
    }
  }
  else
  {
    memcpy(__dst[0], *(const void **)a1, 16 * *(_QWORD *)(a1 + 8));
  }
  std::vector<geom::internal::quadric>::vector(v96, v15);
  v95 = 0;
  v93 = 0u;
  *(_OWORD *)v94 = 0u;
  *(_OWORD *)v91 = 0u;
  *(_OWORD *)v92 = 0u;
  *(_OWORD *)v89 = 0u;
  v90 = 0u;
  *(_OWORD *)v88 = 0u;
  if (*(_QWORD *)(a4 + 8))
  {
    v20 = *(_QWORD *)(a5 + 8);
    memset(&v87, 0, sizeof(v87));
    if (v20)
    {
      std::vector<float>::__vallocate[abi:nn180100](&v87, v20);
      end = v87.__end_;
      bzero(v87.__end_, 4 * v20);
      v87.__end_ = &end[v20];
    }
    v22 = *(_QWORD *)(a6 + 8);
    v86 = 0;
    v85[0] = 0;
    v85[1] = 0;
    if (v22)
    {
      std::vector<float>::__vallocate[abi:nn180100](v85, v22);
      v23 = (char *)v85[1];
      bzero(v85[1], 4 * v22);
      v85[1] = &v23[4 * v22];
    }
    v24 = *(_QWORD *)(a4 + 8);
    v84 = 0;
    v82 = 0;
    v83 = 0;
    if (v24)
    {
      std::vector<double>::__vallocate[abi:nn180100](&v82, v24);
      v25 = (char *)v83;
      bzero(v83, 8 * v24);
      v83 = &v25[8 * v24];
    }
    memcpy(v87.__begin_, *(const void **)a5, 4 * *(_QWORD *)(a5 + 8));
    memcpy(v85[0], *(const void **)a6, 4 * *(_QWORD *)(a6 + 8));
    memcpy(v82, *(const void **)a4, 8 * *(_QWORD *)(a4 + 8));
    *(_QWORD *)&v60 = 0;
    v58 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v56 = 0u;
    *(_OWORD *)v57 = 0u;
    v55 = 0u;
    memset(v54, 0, sizeof(v54));
    geom::triangle_mesh_atlas::init((std::vector<int> *)v54, (uint64_t)&__sz, (uint64_t *)&v87, v85, &v82);
    geom::triangle_mesh_atlas::operator=((uint64_t)v88, (uint64_t)v54);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v57[1])
    {
      *(void **)&v58 = v57[1];
      operator delete(v57[1]);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    if (*(_QWORD *)&v54[24])
    {
      *(_QWORD *)&v55 = *(_QWORD *)&v54[24];
      operator delete(*(void **)&v54[24]);
    }
    if (*(_QWORD *)v54)
    {
      *(_QWORD *)&v54[8] = *(_QWORD *)v54;
      operator delete(*(void **)v54);
    }
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    if (v85[0])
    {
      v85[1] = v85[0];
      operator delete(v85[0]);
    }
    if (v87.__begin_)
    {
      v87.__end_ = v87.__begin_;
      operator delete(v87.__begin_);
    }
  }
  if (v18 && (v26 = *(_QWORD *)(a2 + 8)) != 0)
  {
    v27 = *(unsigned int **)a2;
    *(_QWORD *)&v54[8] = 0;
    *(_QWORD *)&v54[16] = 0;
    *(_QWORD *)v54 = &v54[8];
    v28 = 4 * v26;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v54, (uint64_t *)&v54[8], v27, v27);
      ++v27;
      v28 -= 4;
    }
    while (v28);
    memset(&v87, 0, sizeof(v87));
    std::vector<unsigned int>::reserve(&v87, v26);
    if (!v113 || !v112)
      goto LABEL_98;
    if ((_DWORD)v17)
    {
      v29 = 0;
      do
      {
        v30 = *(_QWORD *)&v54[8];
        if (*(_QWORD *)&v54[8])
        {
          v31 = v111.__begin_[v29];
          v32 = (uint64_t *)&v54[8];
          do
          {
            v33 = (uint64_t *)v30;
            v34 = v32;
            v35 = *(_DWORD *)(v30 + 28);
            v36 = (uint64_t *)(v30 + 8);
            if (v35 >= v31)
            {
              v36 = v33;
              v32 = v33;
            }
            v30 = *v36;
          }
          while (v30);
          if (v32 != (uint64_t *)&v54[8])
          {
            if (v35 < v31)
              v33 = v34;
            if (v31 >= *((_DWORD *)v33 + 7))
            {
              v37 = v87.__end_;
              if (v87.__end_ >= v87.__end_cap_.__value_)
              {
                begin = v87.__begin_;
                v40 = v87.__end_ - v87.__begin_;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62)
                  goto LABEL_99;
                v42 = (char *)v87.__end_cap_.__value_ - (char *)v87.__begin_;
                if (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 1 > v41)
                  v41 = v42 >> 1;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                  v43 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v87.__end_cap_, v43);
                  v37 = v87.__end_;
                  begin = v87.__begin_;
                }
                else
                {
                  v44 = 0;
                }
                v45 = (unsigned int *)&v44[4 * v40];
                *v45 = v29;
                v38 = v45 + 1;
                while (v37 != begin)
                {
                  v46 = *--v37;
                  *--v45 = v46;
                }
                v87.__begin_ = v45;
                v87.__end_ = v38;
                v87.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *v87.__end_ = v29;
                v38 = v37 + 1;
              }
              v87.__end_ = v38;
            }
          }
        }
        ++v29;
      }
      while (v29 != v15);
    }
    v82 = v87.__begin_;
    v83 = (void *)(v87.__end_ - v87.__begin_);
    geom::internal::compute_vertex_masks<float>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)&v82, v88, v85);
    v52 = *(_OWORD *)v85;
    v47 = v86;
    if (v87.__begin_)
    {
      v87.__end_ = v87.__begin_;
      operator delete(v87.__begin_);
    }
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE((uint64_t)v54, *(_QWORD **)&v54[8]);
  }
  else
  {
    geom::internal::compute_vertex_masks<float>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)a2, v88, v54);
    v52 = *(_OWORD *)v54;
    v47 = *(_QWORD *)&v54[16];
  }
  memset(&v87, 0, sizeof(v87));
  if (*(_BYTE *)(a7 + 4))
  {
    if (!v18)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)&v87, __sz);
      v48 = v87.__begin_;
      v49 = v87.__end_;
      if (v87.__begin_ != v87.__end_)
      {
        v50 = 0;
        do
          *v48++ = v50++;
        while (v48 != v49);
      }
      goto LABEL_81;
    }
    if (v113 && v112)
    {
      v87 = v111;
      memset(&v111, 0, sizeof(v111));
      goto LABEL_81;
    }
LABEL_98:
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_99:
    abort();
  }
LABEL_81:
  *(_QWORD *)v54 = *(_QWORD *)a7;
  *(_QWORD *)&v54[24] = v98;
  DWORD2(v55) = v100;
  v66 = v108;
  *(_OWORD *)&v54[8] = *(_OWORD *)__dst;
  *(_OWORD *)__dst = 0u;
  v98 = 0;
  v62 = 0u;
  v63 = 0u;
  v58 = v103;
  *(_OWORD *)__p = v104;
  v103 = 0u;
  v104 = 0u;
  v60 = v105;
  v61 = v106;
  v105 = 0u;
  v106 = 0u;
  *(_QWORD *)&v55 = __sz;
  __sz = 0;
  v100 = 0;
  *(_OWORD *)v56 = v101;
  *(_OWORD *)v57 = v102;
  v101 = 0u;
  v102 = 0u;
  v64 = 0u;
  v65 = v107;
  v107 = 0u;
  v67 = v109;
  v68 = v110;
  v109 = 0u;
  v108 = 0;
  v110 = 0;
  geom::triangle_mesh_atlas::triangle_mesh_atlas(v69, (const std::vector<unsigned int> *)v88);
  v70 = v52;
  v71 = v47;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = v87;
  memset(&v87, 0, sizeof(v87));
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  geom::internal::triangle_mesh_decimator<float>::initialize_quadrics(v54);
  geom::internal::triangle_mesh_decimator<float>::initialize_edge_data((uint64_t)v54);
  geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator((uint64_t)a8, (uint64_t)v54);
  a8[552] = 1;
  geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v54);
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
    operator delete(v87.__begin_);
  }
  if (v94[0])
  {
    v94[1] = v94[0];
    operator delete(v94[0]);
  }
  if (v92[1])
  {
    *(void **)&v93 = v92[1];
    operator delete(v92[1]);
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (v89[1])
  {
    *(void **)&v90 = v89[1];
    operator delete(v89[1]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
}

void geom::internal::triangle_mesh_decimator_interface<float>::make(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v3[2];
  _QWORD v4[2];
  _QWORD v5[2];
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  v3[0] = 0;
  v3[1] = 0;
  geom::internal::triangle_mesh_decimator_interface<float>::make(a1, (uint64_t)v6, a2, (uint64_t)v5, (uint64_t)v4, (uint64_t)v3, a3);
}

BOOL geom::internal::triangle_mesh_decimator_interface<float>::can_decimate_more(uint64_t a1)
{
  return *(_QWORD *)a1
      && ((*(_QWORD *)(*(_QWORD *)a1 + 440) - *(_QWORD *)(*(_QWORD *)a1 + 432)) & 0xFFFFFFFF0) != 0;
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::decimate_one_edge(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  unsigned int v3;

  v1 = *a1;
  if (!*a1)
    return 0;
  v3 = geom::indexed_priority_queue<unsigned int,double>::pop((unsigned int **)(v1 + 432));
  if (v3 == -1 && v2 == INFINITY)
    return 0;
  else
    return geom::internal::triangle_mesh_decimator<float>::decimate_edge(v1, v3);
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::decimate_edge(uint64_t *a1, unsigned int a2)
{
  uint64_t result;

  result = *a1;
  if (result)
    return geom::internal::triangle_mesh_decimator<float>::decimate_edge(result, a2);
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<float>::decimate_edge(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  geom::triangle_mesh_half_edge_connectivity *v6;
  unsigned int half_edge_for_face_vertex;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53[2];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  v3 = *(_QWORD *)(a1 + 216);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v3) >> 2))
    return 0;
  v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 32);
  half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), *(_DWORD *)(v3 + 4 * a2) / 3u, *(_DWORD *)(v3 + 4 * a2) % 3u);
  result = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v6, half_edge_for_face_vertex);
  if ((_DWORD)result)
  {
    result = geom::internal::triangle_mesh_decimator<float>::is_edge_collapse_geometrically_safe((_QWORD *)a1, a2);
    if ((_DWORD)result)
    {
      if (((*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) & 0x3FFFFFFFCLL) == 0
        || (v9 = *(_QWORD *)(a1 + 216), v2 >= (*(_QWORD *)(a1 + 224) - v9) >> 2)
        || (v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v9 + 4 * v2) / 3u, *(_DWORD *)(v9 + 4 * v2) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_safe(v6, v10, (std::vector<unsigned int> *)(a1 + 504), (std::vector<unsigned int> *)(a1 + 528)))|| (result = geom::internal::triangle_mesh_decimator<float>::update_edge_uvs(a1, a2, (float32x4_t *)(*(_QWORD *)(a1 + 408) + 32 * v2 + 16)), (_DWORD)result))
      {
        v11 = *(_QWORD *)(a1 + 216);
        if (v2 >= (*(_QWORD *)(a1 + 224) - v11) >> 2)
        {
          *(_QWORD *)v53 = -1;
        }
        else
        {
          v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v11 + 4 * v2) / 3u, *(_DWORD *)(v11 + 4 * v2) % 3u);
          geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, v12, v53);
        }
        v13 = *(_DWORD *)(a1 + 32);
        v14 = geom::triangle_mesh_connectivity::collapse_edge(v6, a2);
        v15 = v14;
        if (*(_BYTE *)(a1 + 4))
        {
          v16 = *(_QWORD *)(a1 + 8);
          v17 = *(float32x4_t *)(*(_QWORD *)(a1 + 408) + 32 * v2 + 16);
          if (v53[0] == v14
            || (v18 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v53[0]), v17),
                v19 = vmulq_f32(v18, v18),
                sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]) != 0.0))
          {
            if (v53[1] != v14)
            {
              v20 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v53[1]), v17);
              v21 = vmulq_f32(v20, v20);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]) == 0.0)*(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v53[0]) = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v53[1]);
            }
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v53[1]) = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v53[0]);
          }
        }
        if (v14 != -1)
        {
          v22 = *(unsigned int *)((unint64_t)v53 | (4 * (v14 == v53[0])));
          v23 = v14;
          v24 = *(_BYTE *)(*(_QWORD *)(a1 + 360) + v22) | *(_BYTE *)(*(_QWORD *)(a1 + 360) + v14);
          *(_OWORD *)(*(_QWORD *)(a1 + 8) + 16 * v14) = *(_OWORD *)(*(_QWORD *)(a1 + 408) + 32 * v2 + 16);
          if (*(_DWORD *)a1 == 1)
          {
            geom::internal::triangle_mesh_decimator<float>::recompute_vertex_quadric((_QWORD *)a1, v14, (_QWORD *)(a1 + 504), (uint64_t)&v48);
            v25 = *(_QWORD *)(a1 + 384);
            v26 = (__int128 *)(v25 + 80 * v23);
            if (v26 != &v48)
            {
              *v26 = v48;
              v27 = (_OWORD *)(v25 + 80 * v23);
              v27[1] = v49;
              v27[2] = v50;
              v27[3] = v51;
              v27[4] = v52;
            }
          }
          else
          {
            v28 = *(_QWORD *)(a1 + 384);
            v29 = (float64x2_t *)(v28 + 80 * v22);
            v30 = (float64x2_t *)(v28 + 80 * v14);
            v31 = vaddq_f64(v29[1], v30[1]);
            *v30 = vaddq_f64(*v29, *v30);
            v30[1] = v31;
            v32 = vaddq_f64(v29[3], v30[3]);
            v30[2] = vaddq_f64(v29[2], v30[2]);
            v30[3] = v32;
            v30[4] = vaddq_f64(v29[4], v30[4]);
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 360) + v15) = v24;
          geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(v6, v15, a1 + 528);
          v37 = *(_QWORD *)(a1 + 536) - *(_QWORD *)(a1 + 528);
          if (v37)
          {
            v38 = 0;
            v39 = v37 >> 2;
            if (v39 <= 1)
              v40 = 1;
            else
              v40 = v39;
            do
            {
              v41 = *(unsigned int *)(*(_QWORD *)(a1 + 528) + 4 * v38);
              v42 = *(_QWORD *)(a1 + 408) + 32 * v41;
              geom::internal::triangle_mesh_decimator<float>::make_edge_cost((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 528) + 4 * v38), (uint64_t)&v48, *(double *)v42, v33, v34, v35, v36);
              v43 = v49;
              *(_OWORD *)v42 = v48;
              *(_OWORD *)(v42 + 16) = v43;
              *(double *)v42 = *(double *)v42 + 1.0e-12;
              v44 = *(unsigned int *)(*(_QWORD *)(a1 + 456) + 4 * v41);
              if ((_DWORD)v44 == -1)
              {
                v47 = INFINITY;
                v46 = 0xFFFFFFFFLL;
              }
              else
              {
                v45 = *(_QWORD *)(a1 + 432) + 16 * v44;
                v46 = *(_QWORD *)v45;
                v47 = *(double *)(v45 + 8);
              }
              *(_QWORD *)&v48 = v46;
              *((double *)&v48 + 1) = v47;
              if ((_DWORD)v46 == -1 && v47 == INFINITY)
                LODWORD(v48) = v41;
              *((_QWORD *)&v48 + 1) = *(_QWORD *)v42;
              geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost((void **)(a1 + 432), (unsigned int *)&v48);
              ++v38;
            }
            while (v40 != v38);
          }
        }
        return *(_DWORD *)v6 < v13;
      }
    }
  }
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::face_count(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return *(unsigned int *)(*(_QWORD *)a1 + 36);
  else
    return 0;
}

void geom::internal::triangle_mesh_decimator_interface<float>::get_simplified_geometry(uint64_t *a1, _QWORD *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  uint64_t v4;

  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4->__end_ = a4->__begin_;
  v4 = *a1;
  if (v4)
    geom::internal::copy_simplified_geometry<float>(v4, a2, a3, a4);
}

void geom::internal::copy_simplified_geometry<float>(uint64_t a1, _QWORD *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  unint64_t v8;
  uint64_t v9;
  std::vector<int>::value_type *v10;
  std::vector<int>::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  std::vector<int>::pointer begin;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  std::vector<int>::pointer v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  std::vector<int>::pointer v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::vector<int>::pointer v42;
  uint64_t v43;
  unint64_t v44;
  std::vector<int> v45;
  void *__p;
  std::vector<int>::value_type *v47;
  uint64_t v48;
  std::vector<int>::value_type __x;

  __x = -1;
  v8 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  v9 = (v8 >> 2);
  v47 = 0;
  v48 = 0;
  __p = 0;
  if ((v8 >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, (v8 >> 2));
    v10 = v47;
    v11 = &v47[v9];
    v12 = 4 * v9;
    do
    {
      *v10++ = __x;
      v12 -= 4;
    }
    while (v12);
    v47 = v11;
  }
  memset(&v45, 0, sizeof(v45));
  std::vector<unsigned int>::resize(&v45, *(unsigned int *)(a1 + 36), &__x);
  a4->__end_ = a4->__begin_;
  std::vector<unsigned int>::resize(a4, *(unsigned int *)(a1 + 32), &__x);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80) - v13;
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = v14 >> 2;
    begin = a4->__begin_;
    v19 = __p;
    v20 = ((unint64_t)v14 >> 2);
    do
    {
      if (v17 > v15 && *(_DWORD *)(v13 + 4 * v15) != -1)
      {
        begin[v16] = v15;
        v19[v15] = v16++;
      }
      ++v15;
    }
    while (v20 != v15);
  }
  v21 = *(_QWORD *)(a1 + 48);
  v22 = (*(_QWORD *)(a1 + 56) - v21) >> 2;
  if ((v22 / 3))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v45.__begin_;
    do
    {
      if (v22 > v24 && *(_DWORD *)(v21 + 4 * v24) != -1)
        v26[v25++] = v23;
      v24 += 3;
      ++v23;
    }
    while (3 * (v22 / 3) != v24);
  }
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)a2, *(unsigned int *)(a1 + 32));
  v27 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v27)
  {
    for (i = 0; i != v27; ++i)
      *(_OWORD *)(*a2 + 16 * i) = *(_OWORD *)(*(_QWORD *)(a1 + 8) + 16 * a4->__begin_[i]);
  }
  std::vector<unsigned int>::resize(a3, (3 * *(_DWORD *)(a1 + 36)));
  v29 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v29)
  {
    v30 = 0;
    v31 = v45.__begin_;
    v32 = *(_QWORD *)(a1 + 48);
    v33 = __p;
    v34 = 3 * v29;
    v35 = a3->__begin_;
    do
    {
      v36 = *v31++;
      v37 = (unsigned int *)(v32 + 4 * (3 * v36));
      v38 = *v37;
      v39 = v37[1];
      v40 = v37[2];
      v35[v30] = v33[v38];
      v35[(v30 + 1)] = v33[v39];
      v35[(v30 + 2)] = v33[v40];
      v30 += 3;
    }
    while (v34 != v30);
  }
  v41 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(a1 + 488) != v41)
  {
    v42 = a4->__begin_;
    v43 = (char *)a4->__end_ - (char *)a4->__begin_;
    if (v43)
    {
      v44 = v43 >> 2;
      if (v44 <= 1)
        v44 = 1;
      do
      {
        *v42 = *(_DWORD *)(v41 + 4 * *v42);
        ++v42;
        --v44;
      }
      while (v44);
    }
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  if (__p)
  {
    v47 = (std::vector<int>::value_type *)__p;
    operator delete(__p);
  }
}

void geom::internal::triangle_mesh_decimator_interface<float>::get_simplified_geometry(uint64_t a1, _QWORD *a2, std::vector<int> *a3, _QWORD *a4, uint64_t a5, uint64_t a6, std::vector<int> *a7)
{
  uint64_t v8;

  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4[1] = *a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  a7->__end_ = a7->__begin_;
  v8 = *(_QWORD *)a1;
  if (v8)
  {
    geom::internal::copy_simplified_geometry<float>(v8, a2, a3, a7);
    geom::internal::copy_simplified_uvs(*(_QWORD *)a1 + 32, *(_QWORD *)a1 + 240, *(unsigned int **)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2, (uint64_t)a4, (char **)a5, (char **)a6);
  }
}

void geom::internal::copy_simplified_uvs(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, char **a6, char **a7)
{
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  int v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  float32x2_t v77;
  void **v78[2];
  void *v79[2];
  void *__p[2];
  int v81;
  void *v82;

  v14 = (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2) / 3uLL);
  LOBYTE(v79[0]) = 0;
  std::vector<BOOL>::vector(&v82, v14, (unsigned __int8 *)v79);
  if (a4)
  {
    v15 = (char *)v82;
    v16 = 4 * a4;
    do
    {
      v17 = *a3++;
      *(_QWORD *)&v15[((unint64_t)v17 >> 3) & 0x1FFFFFF8] |= 1 << v17;
      v16 -= 4;
    }
    while (v16);
  }
  *(_OWORD *)v79 = 0u;
  *(_OWORD *)__p = 0u;
  v81 = 1065353216;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  a6[1] = *a6;
  a7[1] = *a7;
  v78[0] = v79;
  v78[1] = (void **)a5;
  v18 = (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2) / 3uLL);
  if ((((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2) / 3uLL))
  {
    v19 = 0;
    v20 = 0;
    v76 = (uint64_t)(a7 + 2);
    do
    {
      v21 = (3 * v19);
      v22 = *(_QWORD *)(a1 + 16);
      if (v21 < (*(_QWORD *)(a1 + 24) - v22) >> 2 && *(_DWORD *)(v22 + 4 * v21) != -1)
      {
        if (((*(_QWORD *)((char *)v82 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
        {
          v24 = a6[1];
          v23 = (unint64_t)a6[2];
          if ((unint64_t)v24 >= v23)
          {
            v26 = *a6;
            v27 = (v24 - *a6) >> 2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
              goto LABEL_83;
            v29 = v23 - (_QWORD)v26;
            if (v29 >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v30 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a6 + 2), v30);
              v26 = *a6;
              v24 = a6[1];
            }
            else
            {
              v31 = 0;
            }
            v32 = &v31[4 * v27];
            *(_DWORD *)v32 = v20;
            v25 = v32 + 4;
            while (v24 != v26)
            {
              v33 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }
            *a6 = v32;
            a6[1] = v25;
            a6[2] = &v31[4 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_DWORD *)v24 = v20;
            v25 = v24 + 4;
          }
          a6[1] = v25;
          v77 = *(float32x2_t *)(*(_QWORD *)(a2 + 24) + 8 * v21);
          v34 = _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(v78, &v77);
          v35 = v34;
          v37 = a7[1];
          v36 = (unint64_t)a7[2];
          if ((unint64_t)v37 >= v36)
          {
            v39 = *a7;
            v40 = (v37 - *a7) >> 2;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62)
              goto LABEL_83;
            v42 = v36 - (_QWORD)v39;
            if (v42 >> 1 > v41)
              v41 = v42 >> 1;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
              v43 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v76, v43);
              v39 = *a7;
              v37 = a7[1];
            }
            else
            {
              v44 = 0;
            }
            v45 = &v44[4 * v40];
            *(_DWORD *)v45 = v35;
            v38 = v45 + 4;
            while (v37 != v39)
            {
              v46 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            *a7 = v45;
            a7[1] = v38;
            a7[2] = &v44[4 * v43];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_DWORD *)v37 = v34;
            v38 = v37 + 4;
          }
          a7[1] = v38;
          v77 = *(float32x2_t *)(*(_QWORD *)(a2 + 24) + 8 * (v21 + 1));
          v47 = _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(v78, &v77);
          v48 = v47;
          v50 = a7[1];
          v49 = (unint64_t)a7[2];
          if ((unint64_t)v50 >= v49)
          {
            v52 = *a7;
            v53 = (v50 - *a7) >> 2;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              goto LABEL_83;
            v55 = v49 - (_QWORD)v52;
            if (v55 >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v76, v56);
              v52 = *a7;
              v50 = a7[1];
            }
            else
            {
              v57 = 0;
            }
            v58 = &v57[4 * v53];
            *(_DWORD *)v58 = v48;
            v51 = v58 + 4;
            while (v50 != v52)
            {
              v59 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            *a7 = v58;
            a7[1] = v51;
            a7[2] = &v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *(_DWORD *)v50 = v47;
            v51 = v50 + 4;
          }
          a7[1] = v51;
          v77 = *(float32x2_t *)(*(_QWORD *)(a2 + 24) + 8 * (v21 + 2));
          v60 = _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(v78, &v77);
          v61 = v60;
          v63 = a7[1];
          v62 = (unint64_t)a7[2];
          if ((unint64_t)v63 >= v62)
          {
            v65 = *a7;
            v66 = (v63 - *a7) >> 2;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62)
LABEL_83:
              abort();
            v68 = v62 - (_QWORD)v65;
            if (v68 >> 1 > v67)
              v67 = v68 >> 1;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
              v69 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v76, v69);
              v65 = *a7;
              v63 = a7[1];
            }
            else
            {
              v70 = 0;
            }
            v71 = &v70[4 * v66];
            *(_DWORD *)v71 = v61;
            v64 = v71 + 4;
            while (v63 != v65)
            {
              v72 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *((_DWORD *)v71 - 1) = v72;
              v71 -= 4;
            }
            *a7 = v71;
            a7[1] = v64;
            a7[2] = &v70[4 * v69];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *(_DWORD *)v63 = v60;
            v64 = v63 + 4;
          }
          a7[1] = v64;
        }
        ++v20;
      }
      ++v19;
    }
    while (v19 != v18);
    v73 = __p[0];
    if (__p[0])
    {
      do
      {
        v74 = (_QWORD *)*v73;
        operator delete(v73);
        v73 = v74;
      }
      while (v74);
    }
  }
  v75 = v79[0];
  v79[0] = 0;
  if (v75)
    operator delete(v75);
  if (v82)
    operator delete(v82);
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v5 = geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v4);
      MEMORY[0x22E2B768C](v5, 0x10B0C40E87BB8D8);
      *(_QWORD *)a1 = 0;
    }
    if (*(_QWORD *)a2)
    {
      v6 = operator new();
      *(_QWORD *)a1 = geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator(v6, *(_QWORD *)a2);
    }
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t *geom::internal::triangle_mesh_decimator_interface<float>::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result != a2)
  {
    v2 = *result;
    *result = *a2;
    *a2 = v2;
    v3 = result[1];
    result[1] = a2[1];
    a2[1] = v3;
    v4 = result[2];
    result[2] = a2[2];
    a2[2] = v4;
    v5 = result[3];
    result[3] = a2[3];
    a2[3] = v5;
  }
  return result;
}

_QWORD *geom::internal::triangle_mesh_decimator_interface<float>::copy_connectivity@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result)
    return (_QWORD *)std::__optional_destruct_base<geom::triangle_mesh_connectivity const,false>::__optional_destruct_base[abi:nn180100]<geom::triangle_mesh_connectivity const&>((uint64_t)a2, *result + 32);
  *a2 = 0;
  a2[208] = 0;
  return result;
}

uint64_t *geom::internal::triangle_mesh_decimator_interface<float>::triangle_mesh_decimator_interface(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  *a1 = geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator(v6, a2);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a3;
  a1[3] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return a1;
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::triangle_mesh_decimator_interface(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 8), (const std::vector<unsigned int> *)(a2 + 8));
  if (*(_QWORD *)a2)
  {
    v4 = operator new();
    *(_QWORD *)a1 = geom::internal::triangle_mesh_decimator<double>::triangle_mesh_decimator(v4, *(_QWORD *)a2);
  }
  return a1;
}

void geom::internal::triangle_mesh_decimator_interface<double>::make(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _OWORD v23[2];
  void *__dst[2];
  uint64_t v25;
  _QWORD v26[69];
  char v27;

  *(_QWORD *)&v23[0] = 0;
  geom::internal::triangle_mesh_decimator<double>::make(a1, a2, a3, a4, a5, a6, (uint64_t)v23, v26);
  if (v27)
  {
    v9 = *(_QWORD *)(a5 + 8);
    __dst[1] = 0;
    v25 = 0;
    __dst[0] = 0;
    if (v9)
    {
      std::vector<float>::__vallocate[abi:nn180100](__dst, v9);
      v10 = (char *)__dst[1];
      bzero(__dst[1], 4 * v9);
      __dst[1] = &v10[4 * v9];
      if (*(_QWORD *)(a5 + 8))
        memcpy(__dst[0], *(const void **)a5, &v10[4 * v9] - (char *)__dst[0]);
    }
    if (v27)
    {
      v11 = operator new();
      v12 = geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator(v11, (uint64_t)v26);
      v13 = v25;
      v14 = *(_OWORD *)__dst;
      __dst[1] = 0;
      v25 = 0;
      __dst[0] = 0;
      *(_QWORD *)a7 = v12;
      *(_OWORD *)(a7 + 8) = v14;
      *(_QWORD *)(a7 + 24) = v13;
      memset(v23, 0, sizeof(v23));
      *(_BYTE *)(a7 + 32) = 1;
      geom::internal::triangle_mesh_decimator_interface<float>::~triangle_mesh_decimator_interface((uint64_t)v23);
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      if (v27)
        geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v26);
    }
    else
    {
      v15 = std::__throw_bad_optional_access[abi:nn180100]();
      geom::internal::triangle_mesh_decimator<double>::make(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  else
  {
    *(_BYTE *)a7 = 0;
    *(_BYTE *)(a7 + 32) = 0;
  }
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator<double>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  std::vector<unsigned int>::pointer end;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  std::vector<unsigned int>::size_type v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t *v41;
  std::vector<unsigned int>::pointer v42;
  unsigned int *v43;
  std::vector<unsigned int>::pointer begin;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  std::vector<unsigned int>::pointer v53;
  std::vector<unsigned int>::pointer v54;
  unsigned int v55;
  __int128 v57;
  _BYTE v59[32];
  __int128 v60;
  void *v61[2];
  void *v62[2];
  __int128 v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  std::vector<unsigned int> v74[5];
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  std::vector<unsigned int> v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90[2];
  uint64_t v91;
  std::vector<unsigned int> v92;
  void *v93[2];
  void *v94[2];
  __int128 v95;
  void *v96[2];
  void *v97[2];
  __int128 v98;
  void *v99[2];
  uint64_t v100;
  void *v101[3];
  void *__dst[2];
  uint64_t v103;
  std::vector<int>::size_type __sz;
  int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  std::vector<unsigned int> v116;
  unsigned __int8 v117;
  char v118;

  geom::triangle_mesh_connectivity::make((geom::triangle_mesh_connectivity *)*(unsigned int *)(a1 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), &__sz);
  if (!v118)
  {
    *a8 = 0;
    a8[552] = 0;
    return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
  }
  v14 = v108 - *((_QWORD *)&v107 + 1);
  v15 = (((_QWORD)v108 - *((_QWORD *)&v107 + 1)) >> 2);
  __dst[1] = 0;
  __dst[0] = 0;
  v103 = 0;
  if ((((_QWORD)v108 - *((_QWORD *)&v107 + 1)) >> 2))
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(__dst, (((_QWORD)v108 - *((_QWORD *)&v107 + 1)) >> 2));
    v16 = (char *)__dst[1];
    bzero(__dst[1], 32 * v15);
    __dst[1] = &v16[32 * v15];
    if (!v118)
      goto LABEL_98;
  }
  v17 = v14 >> 2;
  v18 = v117;
  if (v117)
  {
    if ((_DWORD)v17)
    {
      v19 = 0;
      v20 = (char *)__dst[0];
      do
      {
        v21 = (__int128 *)(*(_QWORD *)a1 + 32 * v116.__begin_[v19]);
        v22 = *v21;
        v23 = v21[1];
        v24 = &v20[32 * v19];
        *(_OWORD *)v24 = v22;
        *((_OWORD *)v24 + 1) = v23;
        ++v19;
      }
      while (v15 != v19);
    }
  }
  else
  {
    memcpy(__dst[0], *(const void **)a1, 32 * *(_QWORD *)(a1 + 8));
  }
  std::vector<geom::internal::quadric>::vector(v101, v15);
  v100 = 0;
  v98 = 0u;
  *(_OWORD *)v99 = 0u;
  *(_OWORD *)v96 = 0u;
  *(_OWORD *)v97 = 0u;
  *(_OWORD *)v94 = 0u;
  v95 = 0u;
  *(_OWORD *)v93 = 0u;
  if (*(_QWORD *)(a4 + 8))
  {
    v25 = *(_QWORD *)(a5 + 8);
    memset(&v92, 0, sizeof(v92));
    if (v25)
    {
      std::vector<float>::__vallocate[abi:nn180100](&v92, v25);
      end = v92.__end_;
      bzero(v92.__end_, 4 * v25);
      v92.__end_ = &end[v25];
    }
    v27 = *(_QWORD *)(a6 + 8);
    v91 = 0;
    v90[0] = 0;
    v90[1] = 0;
    if (v27)
    {
      std::vector<float>::__vallocate[abi:nn180100](v90, v27);
      v28 = (char *)v90[1];
      bzero(v90[1], 4 * v27);
      v90[1] = &v28[4 * v27];
    }
    v29 = *(_QWORD *)(a4 + 8);
    v89 = 0;
    v87 = 0;
    v88 = 0;
    if (v29)
    {
      std::vector<double>::__vallocate[abi:nn180100](&v87, v29);
      v30 = (char *)v88;
      bzero(v88, 8 * v29);
      v88 = &v30[8 * v29];
    }
    memcpy(v92.__begin_, *(const void **)a5, 4 * *(_QWORD *)(a5 + 8));
    memcpy(v90[0], *(const void **)a6, 4 * *(_QWORD *)(a6 + 8));
    memcpy(v87, *(const void **)a4, 8 * *(_QWORD *)(a4 + 8));
    *(_QWORD *)&v65 = 0;
    v63 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v61 = 0u;
    *(_OWORD *)v62 = 0u;
    v60 = 0u;
    memset(v59, 0, sizeof(v59));
    geom::triangle_mesh_atlas::init((std::vector<int> *)v59, (uint64_t)&__sz, (uint64_t *)&v92, v90, &v87);
    geom::triangle_mesh_atlas::operator=((uint64_t)v93, (uint64_t)v59);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v62[1])
    {
      *(void **)&v63 = v62[1];
      operator delete(v62[1]);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    if (*(_QWORD *)&v59[24])
    {
      *(_QWORD *)&v60 = *(_QWORD *)&v59[24];
      operator delete(*(void **)&v59[24]);
    }
    if (*(_QWORD *)v59)
    {
      *(_QWORD *)&v59[8] = *(_QWORD *)v59;
      operator delete(*(void **)v59);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    if (v92.__begin_)
    {
      v92.__end_ = v92.__begin_;
      operator delete(v92.__begin_);
    }
  }
  if (v18 && (v31 = *(_QWORD *)(a2 + 8)) != 0)
  {
    v32 = *(unsigned int **)a2;
    *(_QWORD *)&v59[8] = 0;
    *(_QWORD *)&v59[16] = 0;
    *(_QWORD *)v59 = &v59[8];
    v33 = 4 * v31;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v59, (uint64_t *)&v59[8], v32, v32);
      ++v32;
      v33 -= 4;
    }
    while (v33);
    memset(&v92, 0, sizeof(v92));
    std::vector<unsigned int>::reserve(&v92, v31);
    if (!v118 || !v117)
      goto LABEL_98;
    if ((_DWORD)v17)
    {
      v34 = 0;
      do
      {
        v35 = *(_QWORD *)&v59[8];
        if (*(_QWORD *)&v59[8])
        {
          v36 = v116.__begin_[v34];
          v37 = (uint64_t *)&v59[8];
          do
          {
            v38 = (uint64_t *)v35;
            v39 = v37;
            v40 = *(_DWORD *)(v35 + 28);
            v41 = (uint64_t *)(v35 + 8);
            if (v40 >= v36)
            {
              v41 = v38;
              v37 = v38;
            }
            v35 = *v41;
          }
          while (v35);
          if (v37 != (uint64_t *)&v59[8])
          {
            if (v40 < v36)
              v38 = v39;
            if (v36 >= *((_DWORD *)v38 + 7))
            {
              v42 = v92.__end_;
              if (v92.__end_ >= v92.__end_cap_.__value_)
              {
                begin = v92.__begin_;
                v45 = v92.__end_ - v92.__begin_;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62)
                  goto LABEL_99;
                v47 = (char *)v92.__end_cap_.__value_ - (char *)v92.__begin_;
                if (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 1 > v46)
                  v46 = v47 >> 1;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                  v48 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v92.__end_cap_, v48);
                  v42 = v92.__end_;
                  begin = v92.__begin_;
                }
                else
                {
                  v49 = 0;
                }
                v50 = (unsigned int *)&v49[4 * v45];
                *v50 = v34;
                v43 = v50 + 1;
                while (v42 != begin)
                {
                  v51 = *--v42;
                  *--v50 = v51;
                }
                v92.__begin_ = v50;
                v92.__end_ = v43;
                v92.__end_cap_.__value_ = (unsigned int *)&v49[4 * v48];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *v92.__end_ = v34;
                v43 = v42 + 1;
              }
              v92.__end_ = v43;
            }
          }
        }
        ++v34;
      }
      while (v34 != v15);
    }
    v87 = v92.__begin_;
    v88 = (void *)(v92.__end_ - v92.__begin_);
    geom::internal::compute_vertex_masks<double>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)&v87, v93, v90);
    v57 = *(_OWORD *)v90;
    v52 = v91;
    if (v92.__begin_)
    {
      v92.__end_ = v92.__begin_;
      operator delete(v92.__begin_);
    }
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE((uint64_t)v59, *(_QWORD **)&v59[8]);
  }
  else
  {
    geom::internal::compute_vertex_masks<double>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)a2, v93, v59);
    v57 = *(_OWORD *)v59;
    v52 = *(_QWORD *)&v59[16];
  }
  memset(&v92, 0, sizeof(v92));
  if (*(_BYTE *)(a7 + 4))
  {
    if (!v18)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)&v92, __sz);
      v53 = v92.__begin_;
      v54 = v92.__end_;
      if (v92.__begin_ != v92.__end_)
      {
        v55 = 0;
        do
          *v53++ = v55++;
        while (v53 != v54);
      }
      goto LABEL_81;
    }
    if (v118 && v117)
    {
      v92 = v116;
      memset(&v116, 0, sizeof(v116));
      goto LABEL_81;
    }
LABEL_98:
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_99:
    abort();
  }
LABEL_81:
  *(_QWORD *)v59 = *(_QWORD *)a7;
  *(_QWORD *)&v59[24] = v103;
  DWORD2(v60) = v105;
  v71 = v113;
  *(_OWORD *)&v59[8] = *(_OWORD *)__dst;
  *(_OWORD *)__dst = 0u;
  v103 = 0;
  v67 = 0u;
  v68 = 0u;
  v63 = v108;
  *(_OWORD *)__p = v109;
  v108 = 0u;
  v109 = 0u;
  v65 = v110;
  v66 = v111;
  v110 = 0u;
  v111 = 0u;
  *(_QWORD *)&v60 = __sz;
  __sz = 0;
  v105 = 0;
  *(_OWORD *)v61 = v106;
  *(_OWORD *)v62 = v107;
  v106 = 0u;
  v107 = 0u;
  v69 = 0u;
  v70 = v112;
  v112 = 0u;
  v72 = v114;
  v73 = v115;
  v114 = 0u;
  v113 = 0;
  v115 = 0;
  geom::triangle_mesh_atlas::triangle_mesh_atlas(v74, (const std::vector<unsigned int> *)v93);
  v75 = v57;
  v76 = v52;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = v92;
  memset(&v92, 0, sizeof(v92));
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  geom::internal::triangle_mesh_decimator<double>::initialize_quadrics(v59);
  geom::internal::triangle_mesh_decimator<double>::initialize_edge_data((uint64_t)v59);
  geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator((uint64_t)a8, (uint64_t)v59);
  a8[552] = 1;
  geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v59);
  if (v92.__begin_)
  {
    v92.__end_ = v92.__begin_;
    operator delete(v92.__begin_);
  }
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
  if (v97[1])
  {
    *(void **)&v98 = v97[1];
    operator delete(v97[1]);
  }
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  if (v94[1])
  {
    *(void **)&v95 = v94[1];
    operator delete(v94[1]);
  }
  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
}

void geom::internal::triangle_mesh_decimator_interface<double>::make(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v3[2];
  _QWORD v4[2];
  _QWORD v5[2];
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  v3[0] = 0;
  v3[1] = 0;
  geom::internal::triangle_mesh_decimator_interface<double>::make(a1, (uint64_t)v6, a2, (uint64_t)v5, (uint64_t)v4, (uint64_t)v3, a3);
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::decimate_one_edge(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  unsigned int v3;

  v1 = *a1;
  if (!*a1)
    return 0;
  v3 = geom::indexed_priority_queue<unsigned int,double>::pop((unsigned int **)(v1 + 432));
  if (v3 == -1 && v2 == INFINITY)
    return 0;
  else
    return geom::internal::triangle_mesh_decimator<double>::decimate_edge(v1, v3);
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::decimate_edge(uint64_t *a1, unsigned int a2)
{
  uint64_t result;

  result = *a1;
  if (result)
    return geom::internal::triangle_mesh_decimator<double>::decimate_edge(result, a2);
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<double>::decimate_edge(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  geom::triangle_mesh_half_edge_connectivity *v6;
  unsigned int half_edge_for_face_vertex;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  float64x2_t *v33;
  _OWORD *v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float64x2_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  unsigned int v56;
  float64x2_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unsigned int v62[2];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  v3 = *(_QWORD *)(a1 + 216);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v3) >> 2))
    return 0;
  v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 32);
  half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), *(_DWORD *)(v3 + 4 * a2) / 3u, *(_DWORD *)(v3 + 4 * a2) % 3u);
  result = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v6, half_edge_for_face_vertex);
  if ((_DWORD)result)
  {
    result = geom::internal::triangle_mesh_decimator<double>::is_edge_collapse_geometrically_safe((_QWORD *)a1, a2);
    if ((_DWORD)result)
    {
      if (((*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) & 0x3FFFFFFFCLL) == 0
        || (v9 = *(_QWORD *)(a1 + 216), v2 >= (*(_QWORD *)(a1 + 224) - v9) >> 2)
        || (v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v9 + 4 * v2) / 3u, *(_DWORD *)(v9 + 4 * v2) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_safe(v6, v10, (std::vector<unsigned int> *)(a1 + 504), (std::vector<unsigned int> *)(a1 + 528)))|| (result = geom::internal::triangle_mesh_decimator<double>::update_edge_uvs(a1, a2, (float64x2_t *)(*(_QWORD *)(a1 + 408) + 48 * v2 + 16)), (_DWORD)result))
      {
        v11 = *(_QWORD *)(a1 + 216);
        if (v2 >= (*(_QWORD *)(a1 + 224) - v11) >> 2)
        {
          *(_QWORD *)v62 = -1;
        }
        else
        {
          v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v11 + 4 * v2) / 3u, *(_DWORD *)(v11 + 4 * v2) % 3u);
          geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, v12, v62);
        }
        v56 = *(_DWORD *)(a1 + 32);
        v13 = geom::triangle_mesh_connectivity::collapse_edge(v6, a2);
        v14 = v13;
        if (*(_BYTE *)(a1 + 4))
        {
          v15 = *(_QWORD *)(a1 + 408) + 48 * v2;
          v16 = *(_QWORD *)(a1 + 8);
          v18 = *(float64x2_t *)(v15 + 16);
          v17 = *(float64x2_t *)(v15 + 32);
          if (v62[0] == v13
            || (v19 = (float64x2_t *)(v16 + 32 * v62[0]),
                v20 = vsubq_f64(*v19, v18),
                v21 = vsubq_f64(v19[1], v17),
                sqrt(vmulq_f64(v21, v21).f64[0] + vaddvq_f64(vmulq_f64(v20, v20))) != 0.0))
          {
            if (v62[1] != v13)
            {
              v22 = (float64x2_t *)(v16 + 32 * v62[1]);
              v23 = vsubq_f64(*v22, v18);
              v24 = vsubq_f64(v22[1], v17);
              if (sqrt(vmulq_f64(v24, v24).f64[0] + vaddvq_f64(vmulq_f64(v23, v23))) == 0.0)
                *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v62[0]) = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v62[1]);
            }
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v62[1]) = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v62[0]);
          }
        }
        if (v13 != -1)
        {
          v25 = *(unsigned int *)((unint64_t)v62 | (4 * (v13 == v62[0])));
          v26 = v13;
          v27 = *(_BYTE *)(*(_QWORD *)(a1 + 360) + v25) | *(_BYTE *)(*(_QWORD *)(a1 + 360) + v13);
          v28 = *(_QWORD *)(a1 + 408) + 48 * v2;
          v29 = *(_OWORD *)(v28 + 16);
          v30 = *(_OWORD *)(v28 + 32);
          v31 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 32 * v13);
          *v31 = v29;
          v31[1] = v30;
          if (*(_DWORD *)a1 == 1)
          {
            geom::internal::triangle_mesh_decimator<double>::recompute_vertex_quadric((_QWORD *)a1, v13, (_QWORD *)(a1 + 504), (uint64_t)&v57);
            v32 = *(_QWORD *)(a1 + 384);
            v33 = (float64x2_t *)(v32 + 80 * v26);
            if (v33 != &v57)
            {
              *v33 = v57;
              v34 = (_OWORD *)(v32 + 80 * v26);
              v34[1] = v58;
              v34[2] = v59;
              v34[3] = v60;
              v34[4] = v61;
            }
          }
          else
          {
            v35 = *(_QWORD *)(a1 + 384);
            v36 = (float64x2_t *)(v35 + 80 * v25);
            v37 = (float64x2_t *)(v35 + 80 * v13);
            v38 = vaddq_f64(v36[1], v37[1]);
            *v37 = vaddq_f64(*v36, *v37);
            v37[1] = v38;
            v39 = vaddq_f64(v36[3], v37[3]);
            v37[2] = vaddq_f64(v36[2], v37[2]);
            v37[3] = v39;
            v37[4] = vaddq_f64(v36[4], v37[4]);
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 360) + v14) = v27;
          geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(v6, v14, a1 + 528);
          v44 = *(_QWORD *)(a1 + 536) - *(_QWORD *)(a1 + 528);
          if (v44)
          {
            v45 = 0;
            v46 = v44 >> 2;
            if (v46 <= 1)
              v47 = 1;
            else
              v47 = v46;
            do
            {
              v48 = *(unsigned int *)(*(_QWORD *)(a1 + 528) + 4 * v45);
              v49 = *(_QWORD *)(a1 + 408) + 48 * v48;
              geom::internal::triangle_mesh_decimator<double>::make_edge_cost((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 528) + 4 * v45), &v57, *(double *)v49, v40, v41, v42, v43);
              v50 = v57;
              v51 = v59;
              *(_OWORD *)(v49 + 16) = v58;
              *(_OWORD *)(v49 + 32) = v51;
              *(float64x2_t *)v49 = v50;
              *(double *)v49 = *(double *)v49 + 1.0e-12;
              v52 = *(unsigned int *)(*(_QWORD *)(a1 + 456) + 4 * v48);
              if ((_DWORD)v52 == -1)
              {
                v55 = INFINITY;
                v54 = 0xFFFFFFFFLL;
              }
              else
              {
                v53 = *(_QWORD *)(a1 + 432) + 16 * v52;
                v54 = *(_QWORD *)v53;
                v55 = *(double *)(v53 + 8);
              }
              *(_QWORD *)&v57.f64[0] = v54;
              v57.f64[1] = v55;
              if ((_DWORD)v54 == -1 && v55 == INFINITY)
                LODWORD(v57.f64[0]) = v48;
              v57.f64[1] = *(float64_t *)v49;
              geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost((void **)(a1 + 432), (unsigned int *)&v57);
              ++v45;
            }
            while (v47 != v45);
          }
        }
        return *(_DWORD *)v6 < v56;
      }
    }
  }
  return result;
}

void geom::internal::triangle_mesh_decimator_interface<double>::get_simplified_geometry(uint64_t *a1, _QWORD *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  uint64_t v4;

  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4->__end_ = a4->__begin_;
  v4 = *a1;
  if (v4)
    geom::internal::copy_simplified_geometry<double>(v4, a2, a3, a4);
}

void geom::internal::copy_simplified_geometry<double>(uint64_t a1, _QWORD *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  unint64_t v8;
  uint64_t v9;
  std::vector<int>::value_type *v10;
  std::vector<int>::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  std::vector<int>::pointer begin;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  uint64_t i;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  std::vector<int>::pointer v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  std::vector<int>::pointer v39;
  int v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::vector<int>::pointer v46;
  uint64_t v47;
  unint64_t v48;
  std::vector<int> v49;
  void *__p;
  std::vector<int>::value_type *v51;
  uint64_t v52;
  std::vector<int>::value_type __x;

  __x = -1;
  v8 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  v9 = (v8 >> 2);
  v51 = 0;
  v52 = 0;
  __p = 0;
  if ((v8 >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, (v8 >> 2));
    v10 = v51;
    v11 = &v51[v9];
    v12 = 4 * v9;
    do
    {
      *v10++ = __x;
      v12 -= 4;
    }
    while (v12);
    v51 = v11;
  }
  memset(&v49, 0, sizeof(v49));
  std::vector<unsigned int>::resize(&v49, *(unsigned int *)(a1 + 36), &__x);
  a4->__end_ = a4->__begin_;
  std::vector<unsigned int>::resize(a4, *(unsigned int *)(a1 + 32), &__x);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80) - v13;
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = v14 >> 2;
    begin = a4->__begin_;
    v19 = __p;
    v20 = ((unint64_t)v14 >> 2);
    do
    {
      if (v17 > v15 && *(_DWORD *)(v13 + 4 * v15) != -1)
      {
        begin[v16] = v15;
        v19[v15] = v16++;
      }
      ++v15;
    }
    while (v20 != v15);
  }
  v21 = *(_QWORD *)(a1 + 48);
  v22 = (*(_QWORD *)(a1 + 56) - v21) >> 2;
  if ((v22 / 3))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = v49.__begin_;
    do
    {
      if (v22 > v24 && *(_DWORD *)(v21 + 4 * v24) != -1)
        v26[v25++] = v23;
      v24 += 3;
      ++v23;
    }
    while (3 * (v22 / 3) != v24);
  }
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)a2, *(unsigned int *)(a1 + 32));
  v27 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v27)
  {
    for (i = 0; i != v27; ++i)
    {
      v29 = (__int128 *)(*(_QWORD *)(a1 + 8) + 32 * a4->__begin_[i]);
      v30 = *v29;
      v31 = v29[1];
      v32 = (_OWORD *)(*a2 + 32 * i);
      *v32 = v30;
      v32[1] = v31;
    }
  }
  std::vector<unsigned int>::resize(a3, (3 * *(_DWORD *)(a1 + 36)));
  v33 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v35 = v49.__begin_;
    v36 = *(_QWORD *)(a1 + 48);
    v37 = __p;
    v38 = 3 * v33;
    v39 = a3->__begin_;
    do
    {
      v40 = *v35++;
      v41 = (unsigned int *)(v36 + 4 * (3 * v40));
      v42 = *v41;
      v43 = v41[1];
      v44 = v41[2];
      v39[v34] = v37[v42];
      v39[(v34 + 1)] = v37[v43];
      v39[(v34 + 2)] = v37[v44];
      v34 += 3;
    }
    while (v38 != v34);
  }
  v45 = *(_QWORD *)(a1 + 480);
  if (*(_QWORD *)(a1 + 488) != v45)
  {
    v46 = a4->__begin_;
    v47 = (char *)a4->__end_ - (char *)a4->__begin_;
    if (v47)
    {
      v48 = v47 >> 2;
      if (v48 <= 1)
        v48 = 1;
      do
      {
        *v46 = *(_DWORD *)(v45 + 4 * *v46);
        ++v46;
        --v48;
      }
      while (v48);
    }
  }
  if (v49.__begin_)
  {
    v49.__end_ = v49.__begin_;
    operator delete(v49.__begin_);
  }
  if (__p)
  {
    v51 = (std::vector<int>::value_type *)__p;
    operator delete(__p);
  }
}

void geom::internal::triangle_mesh_decimator_interface<double>::get_simplified_geometry(uint64_t a1, _QWORD *a2, std::vector<int> *a3, _QWORD *a4, uint64_t a5, uint64_t a6, std::vector<int> *a7)
{
  uint64_t v8;

  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4[1] = *a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  a7->__end_ = a7->__begin_;
  v8 = *(_QWORD *)a1;
  if (v8)
  {
    geom::internal::copy_simplified_geometry<double>(v8, a2, a3, a7);
    geom::internal::copy_simplified_uvs(*(_QWORD *)a1 + 32, *(_QWORD *)a1 + 240, *(unsigned int **)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2, (uint64_t)a4, (char **)a5, (char **)a6);
  }
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::operator=(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v5 = geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v4);
      MEMORY[0x22E2B768C](v5, 0x10B0C40E87BB8D8);
      *(_QWORD *)a1 = 0;
    }
    if (*(_QWORD *)a2)
    {
      v6 = operator new();
      *(_QWORD *)a1 = geom::internal::triangle_mesh_decimator<double>::triangle_mesh_decimator(v6, *(_QWORD *)a2);
    }
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

void geom::internal::simplify_triangle_mesh<float>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4)
{
  std::vector<int> __p;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[69];
  char v12;

  __p.__begin_ = 0;
  __p.__end_ = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v8 = 0;
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, (uint64_t)&__p, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v8, v11);
  if (v12)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v11);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v11, a3, a4, &__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v12)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v11);
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
  }
}

uint64_t geom::internal::decimate_mesh<float>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int **v6;
  double v7;

  v2 = *(_DWORD *)(a2 + 36);
  if (v2 >= result)
    v3 = result;
  else
    v3 = *(_DWORD *)(a2 + 36);
  if (((*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && v2 > result)
  {
    v6 = (unsigned int **)(a2 + 432);
    do
    {
      result = geom::indexed_priority_queue<unsigned int,double>::pop(v6);
      if ((_DWORD)result != -1 || v7 != INFINITY)
        result = geom::internal::triangle_mesh_decimator<float>::decimate_edge(a2, result);
    }
    while (((*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && *(_DWORD *)(a2 + 36) > v3);
  }
  return result;
}

void geom::internal::simplify_triangle_mesh<double>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4)
{
  std::vector<int> __p;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[69];
  char v12;

  __p.__begin_ = 0;
  __p.__end_ = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v8 = 0;
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, (uint64_t)&__p, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v8, v11);
  if (v12)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v11);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v11, a3, a4, &__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v12)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v11);
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
  }
}

uint64_t geom::internal::decimate_mesh<double>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int **v6;
  double v7;

  v2 = *(_DWORD *)(a2 + 36);
  if (v2 >= result)
    v3 = result;
  else
    v3 = *(_DWORD *)(a2 + 36);
  if (((*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && v2 > result)
  {
    v6 = (unsigned int **)(a2 + 432);
    do
    {
      result = geom::indexed_priority_queue<unsigned int,double>::pop(v6);
      if ((_DWORD)result != -1 || v7 != INFINITY)
        result = geom::internal::triangle_mesh_decimator<double>::decimate_edge(a2, result);
    }
    while (((*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && *(_DWORD *)(a2 + 36) > v3);
  }
  return result;
}

void geom::internal::simplify_triangle_mesh<float>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  char *v14;
  std::vector<int> __p;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  char v22;

  v20 = 0;
  v21 = 0;
  v22 = *(_BYTE *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v20, v16);
  if (v19)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v16);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v16, a3, a4, &__p);
    geom::internal::copy_simplified_uvs((uint64_t)&v17, (uint64_t)&v18, *(unsigned int **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v19)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v16);
  }
  else
  {
    a3[1] = *a3;
    v14 = *(char **)a7;
    a5[1] = *a5;
    *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
    *(_QWORD *)(a7 + 8) = v14;
  }
}

void geom::internal::simplify_triangle_mesh<double>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  char *v14;
  std::vector<int> __p;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  char v22;

  v20 = 0;
  v21 = 0;
  v22 = *(_BYTE *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v20, v16);
  if (v19)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v16);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v16, a3, a4, &__p);
    geom::internal::copy_simplified_uvs((uint64_t)&v17, (uint64_t)&v18, *(unsigned int **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v19)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v16);
  }
  else
  {
    a3[1] = *a3;
    v14 = *(char **)a7;
    a5[1] = *a5;
    *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
    *(_QWORD *)(a7 + 8) = v14;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<float>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4, std::vector<int> *a5)
{
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[69];
  char v13;
  int v14;
  __int16 v15;

  v14 = 2;
  v15 = 1;
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v14, v12);
  if (v13)
  {
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v12);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v12, a3, a4, a5);
    if (v13)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v12);
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
    a5->__end_ = a5->__begin_;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<double>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4, std::vector<int> *a5)
{
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[69];
  char v13;
  int v14;
  __int16 v15;

  v14 = 2;
  v15 = 1;
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v14, v12);
  if (v13)
  {
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v12);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v12, a3, a4, a5);
    if (v13)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v12);
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
    a5->__end_ = a5->__begin_;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<float>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4, _QWORD *a5, uint64_t a6, uint64_t a7, std::vector<int> *a8)
{
  char *v16;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  char v23;

  v21 = 2;
  v22 = 1;
  v23 = *(_BYTE *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v21, v17);
  if (v20)
  {
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v17);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v17, a3, a4, a8);
    geom::internal::copy_simplified_uvs((uint64_t)&v18, (uint64_t)&v19, *(unsigned int **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (v20)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v17);
  }
  else
  {
    a3[1] = *a3;
    v16 = *(char **)a7;
    a5[1] = *a5;
    *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
    *(_QWORD *)(a7 + 8) = v16;
    a8->__end_ = a8->__begin_;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<double>(uint64_t a1, uint64_t a2, _QWORD *a3, std::vector<int> *a4, _QWORD *a5, uint64_t a6, uint64_t a7, std::vector<int> *a8)
{
  char *v16;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  char v23;

  v21 = 2;
  v22 = 1;
  v23 = *(_BYTE *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v21, v17);
  if (v20)
  {
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v17);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v17, a3, a4, a8);
    geom::internal::copy_simplified_uvs((uint64_t)&v18, (uint64_t)&v19, *(unsigned int **)(a1 + 64), *(_QWORD *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (v20)
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v17);
  }
  else
  {
    a3[1] = *a3;
    v16 = *(char **)a7;
    a5[1] = *a5;
    *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
    *(_QWORD *)(a7 + 8) = v16;
    a8->__end_ = a8->__begin_;
  }
}

unint64_t _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(void ***a1, float32x2_t *a2)
{
  unint64_t v2;
  float32x2_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void ***v10;
  unint64_t v11;
  float32x2_t **v12;
  float32x2_t *i;
  unint64_t v14;
  float32x2_t v15;
  void **v16;
  float32x2_t **v17;
  float32x2_t *j;
  unint64_t v19;
  float32x2_t v20;
  float v21;
  float v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  float32x2_t **v39;
  float32x2_t v40;
  unint64_t v41;
  unint64_t v42;
  float32x2_t *v43;
  float32x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  float32x2_t *v50;
  char *v51;
  char *v52;
  char *v53;
  float32x2_t v54;
  void *v56;
  float32x2_t v57;

  v4 = *a2;
  v5 = *a1;
  v6 = vcvts_n_u32_f32(COERCE_FLOAT(HIDWORD(*(unint64_t *)a2)), 0x20uLL) | (vcvts_n_u32_f32(COERCE_FLOAT(*a2), 0x20uLL) << 32);
  v7 = (unint64_t)(*a1)[1];
  v57 = *a2;
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = v6;
      if (v6 >= v7)
        v9 = v6 % v7;
    }
    else
    {
      v9 = v6 & (v7 - 1);
    }
    v12 = (float32x2_t **)*((_QWORD *)*v5 + v9);
    if (v12)
    {
      for (i = *v12; i; i = (float32x2_t *)*i)
      {
        v14 = (unint64_t)i[1];
        if (v14 == v6)
        {
          v15 = vsub_f32(i[2], v4);
          if (sqrtf(vaddv_f32(vmul_f32(v15, v15))) <= 0.00001)
            return i[3].u32[0];
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v14 >= v7)
              v14 %= v7;
          }
          else
          {
            v14 &= v7 - 1;
          }
          if (v14 != v9)
            break;
        }
      }
    }
    v10 = a1 + 1;
    v16 = a1[1];
    v11 = (unint64_t)((_BYTE *)v16[1] - (_BYTE *)*v16) >> 3;
    if (v8.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v6 >= v7)
        v2 = v6 % v7;
    }
    else
    {
      v2 = v6 & (v7 - 1);
    }
    v17 = (float32x2_t **)*((_QWORD *)*v5 + v2);
    if (v17)
    {
      for (j = *v17; j; j = (float32x2_t *)*j)
      {
        v19 = (unint64_t)j[1];
        if (v19 == v6)
        {
          v20 = vsub_f32(j[2], v4);
          if (sqrtf(vaddv_f32(vmul_f32(v20, v20))) <= 0.00001)
            goto LABEL_89;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v19 >= v7)
              v19 %= v7;
          }
          else
          {
            v19 &= v7 - 1;
          }
          if (v19 != v2)
            break;
        }
      }
    }
  }
  else
  {
    v10 = a1 + 1;
    v11 = (unint64_t)((_BYTE *)a1[1][1] - (_BYTE *)*a1[1]) >> 3;
  }
  j = (float32x2_t *)operator new(0x20uLL);
  *j = 0;
  j[1] = (float32x2_t)v6;
  j[2] = v57;
  j[3].i32[0] = 0;
  v21 = (float)((unint64_t)v5[3] + 1);
  v22 = *((float *)v5 + 8);
  if (!v7 || (float)(v22 * (float)v7) < v21)
  {
    v23 = (v7 & (v7 - 1)) == 0;
    if (v7 < 3)
      v23 = 0;
    v24 = (2 * v7) | !v23;
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = (unint64_t)v5[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_45;
    if (*(_QWORD *)&prime < v7)
    {
      v33 = vcvtps_u32_f32((float)(unint64_t)v5[3] / *((float *)v5 + 8));
      if (v7 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = (unint64_t)v5[1];
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *v5;
          *v5 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          v5[1] = (void *)prime;
          do
            *((_QWORD *)*v5 + v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = v5[2];
          if (v30)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v5 + v31) = v5 + 2;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*((_QWORD *)*v5 + v37))
                  {
                    *((_QWORD *)*v5 + v37) = v30;
                    goto LABEL_70;
                  }
                  *v30 = *v36;
                  *v36 = **((_QWORD **)*v5 + v37);
                  **((_QWORD **)*v5 + v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_70:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_74;
        }
        v56 = *v5;
        *v5 = 0;
        if (v56)
          operator delete(v56);
        v7 = 0;
        v5[1] = 0;
      }
    }
LABEL_74:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v7 - 1) & v6;
    }
  }
  v38 = *v5;
  v39 = (float32x2_t **)*((_QWORD *)*v5 + v2);
  if (v39)
  {
    *j = (float32x2_t)*v39;
  }
  else
  {
    v40 = (float32x2_t)v5[2];
    *j = v40;
    v5[2] = j;
    v38[v2] = v5 + 2;
    if (!*(_QWORD *)&v40)
      goto LABEL_88;
    v41 = *(_QWORD *)(*(_QWORD *)&v40 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
    v39 = (float32x2_t **)((char *)*v5 + 8 * v41);
  }
  *v39 = j;
LABEL_88:
  v5[3] = (char *)v5[3] + 1;
  v16 = *v10;
LABEL_89:
  j[3].i32[0] = v11;
  v42 = (unint64_t)v16[2];
  v43 = (float32x2_t *)v16[1];
  if ((unint64_t)v43 >= v42)
  {
    v45 = ((char *)v43 - (_BYTE *)*v16) >> 3;
    if ((unint64_t)(v45 + 1) >> 61)
      abort();
    v46 = v42 - (_QWORD)*v16;
    v47 = v46 >> 2;
    if (v46 >> 2 <= (unint64_t)(v45 + 1))
      v47 = v45 + 1;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v47;
    if (v48)
      v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v16 + 2), v48);
    else
      v49 = 0;
    v50 = (float32x2_t *)&v49[8 * v45];
    v51 = &v49[8 * v48];
    *v50 = *a2;
    v44 = v50 + 1;
    v53 = (char *)*v16;
    v52 = (char *)v16[1];
    if (v52 != *v16)
    {
      do
      {
        v54 = *(float32x2_t *)(v52 - 8);
        v52 -= 8;
        v50[-1] = v54;
        --v50;
      }
      while (v52 != v53);
      v52 = (char *)*v16;
    }
    *v16 = v50;
    v16[1] = v44;
    v16[2] = v51;
    if (v52)
      operator delete(v52);
  }
  else
  {
    *v43 = *a2;
    v44 = v43 + 1;
  }
  v16[1] = v44;
  return v11;
}

uint64_t geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)(a1 + 8), a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 48), (const std::vector<unsigned int> *)(a2 + 48));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 72), (const std::vector<unsigned int> *)(a2 + 72));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 96), (const std::vector<unsigned int> *)(a2 + 96));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 120), (const std::vector<unsigned int> *)(a2 + 120));
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 192), (const std::vector<unsigned int> *)(a2 + 192));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 216), (const std::vector<unsigned int> *)(a2 + 216));
  geom::triangle_mesh_atlas::triangle_mesh_atlas((std::vector<unsigned int> *)(a1 + 240), (const std::vector<unsigned int> *)(a2 + 240));
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v5 = *(_BYTE **)(a2 + 360);
  v4 = *(_BYTE **)(a2 + 368);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100]((_QWORD *)(a1 + 360), v4 - v5);
    v7 = *(char **)(a1 + 368);
    memmove(v7, v5, v6);
    *(_QWORD *)(a1 + 368) = &v7[v6];
  }
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  std::vector<geom::internal::quadric>::__init_with_size[abi:nn180100]<geom::internal::quadric*,geom::internal::quadric*>((_QWORD *)(a1 + 384), *(_OWORD **)(a2 + 384), *(_OWORD **)(a2 + 392), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 392) - *(_QWORD *)(a2 + 384)) >> 4));
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)(a1 + 408), a2 + 408);
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__init_with_size[abi:nn180100]<geom::indexed_priority_queue<unsigned int,double>::key*,geom::indexed_priority_queue<unsigned int,double>::key*>((char *)(a1 + 432), *(__int128 **)(a2 + 432), *(__int128 **)(a2 + 440), (uint64_t)(*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) >> 4);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 456), (const std::vector<unsigned int> *)(a2 + 456));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 480), (const std::vector<unsigned int> *)(a2 + 480));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 504), (const std::vector<unsigned int> *)(a2 + 504));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 528), (const std::vector<unsigned int> *)(a2 + 528));
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v4;
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v5;
  v6 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v6;
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v7;
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v8;
  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v9;
  v10 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v10;
  v11 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v11;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  LODWORD(v11) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v11;
  LODWORD(v11) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v11;
  v12 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v12;
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v13;
  v14 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v14;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  geom::triangle_mesh_atlas::triangle_mesh_atlas((_QWORD *)(a1 + 240), a2 + 240);
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  v15 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v15;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  v16 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v16;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 424) = 0;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 432) = 0;
  v17 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = v17;
  v18 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = v18;
  v19 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = v19;
  v20 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = v20;
  v21 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a2 + 472) = v21;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  v22 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v22;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  return a1;
}

std::vector<unsigned int> *geom::triangle_mesh_atlas::triangle_mesh_atlas(std::vector<unsigned int> *this, const std::vector<unsigned int> *a2)
{
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  size_t v6;
  std::vector<unsigned int>::pointer v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = a2->__begin_;
  end = a2->__end_;
  v6 = (char *)end - (char *)a2->__begin_;
  if (end != a2->__begin_)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](this, (char *)end - (char *)a2->__begin_);
    v7 = this->__end_;
    memmove(v7, begin, v6);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v7 + v6);
  }
  std::vector<double>::vector(&this[1].__begin_, (uint64_t)&a2[1]);
  std::vector<float>::vector(this + 2, a2 + 2);
  std::vector<float>::vector(this + 3, a2 + 3);
  std::vector<float>::vector(this + 4, a2 + 4);
  return this;
}

char *std::vector<unsigned char>::__vallocate[abi:nn180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    abort();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<geom::internal::quadric>::__init_with_size[abi:nn180100]<geom::internal::quadric*,geom::internal::quadric*>(_QWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<geom::internal::quadric>::__vallocate[abi:nn180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<geom::internal::quadric>,geom::internal::quadric*,geom::internal::quadric*,geom::internal::quadric*>((uint64_t)(v6 + 2), a2, a3, (_OWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

char *std::vector<geom::internal::quadric>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::internal::quadric>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::internal::quadric>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(80 * a2);
}

_OWORD *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<geom::internal::quadric>,geom::internal::quadric*,geom::internal::quadric*,geom::internal::quadric*>(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  _OWORD *result;

  result = a4;
  while (a2 != a3)
  {
    *result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    result[3] = a2[3];
    result[4] = a2[4];
    result += 5;
    a2 += 5;
  }
  return result;
}

char *std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__init_with_size[abi:nn180100]<geom::indexed_priority_queue<unsigned int,double>::key*,geom::indexed_priority_queue<unsigned int,double>::key*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

_QWORD *geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = (void *)a1[66];
  if (v2)
  {
    a1[67] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[63];
  if (v3)
  {
    a1[64] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[60];
  if (v4)
  {
    a1[61] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[57];
  if (v5)
  {
    a1[58] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[54];
  if (v6)
  {
    a1[55] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[51];
  if (v7)
  {
    a1[52] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[48];
  if (v8)
  {
    a1[49] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[45];
  if (v9)
  {
    a1[46] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[30];
  if (v14)
  {
    a1[31] = v14;
    operator delete(v14);
  }
  geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)(a1 + 4));
  v15 = (void *)a1[1];
  if (v15)
  {
    a1[2] = v15;
    operator delete(v15);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<geom::triangle_mesh_connectivity const,false>::__optional_destruct_base[abi:nn180100]<geom::triangle_mesh_connectivity const&>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 16), (const std::vector<unsigned int> *)(a2 + 16));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 40), (const std::vector<unsigned int> *)(a2 + 40));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 88), (const std::vector<unsigned int> *)(a2 + 88));
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 160), (const std::vector<unsigned int> *)(a2 + 160));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 184), (const std::vector<unsigned int> *)(a2 + 184));
  *(_BYTE *)(a1 + 208) = 1;
  return a1;
}

__n128 geom::triangle_mesh_atlas::triangle_mesh_atlas(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  result = *(__n128 *)(a2 + 96);
  *((__n128 *)a1 + 6) = result;
  a1[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<double>::triangle_mesh_decimator(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_((_QWORD *)(a1 + 8), a2 + 8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 48), (const std::vector<unsigned int> *)(a2 + 48));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 72), (const std::vector<unsigned int> *)(a2 + 72));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 96), (const std::vector<unsigned int> *)(a2 + 96));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 120), (const std::vector<unsigned int> *)(a2 + 120));
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 192), (const std::vector<unsigned int> *)(a2 + 192));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 216), (const std::vector<unsigned int> *)(a2 + 216));
  geom::triangle_mesh_atlas::triangle_mesh_atlas((std::vector<unsigned int> *)(a1 + 240), (const std::vector<unsigned int> *)(a2 + 240));
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v5 = *(_BYTE **)(a2 + 360);
  v4 = *(_BYTE **)(a2 + 368);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100]((_QWORD *)(a1 + 360), v4 - v5);
    v7 = *(char **)(a1 + 368);
    memmove(v7, v5, v6);
    *(_QWORD *)(a1 + 368) = &v7[v6];
  }
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  std::vector<geom::internal::quadric>::__init_with_size[abi:nn180100]<geom::internal::quadric*,geom::internal::quadric*>((_QWORD *)(a1 + 384), *(_OWORD **)(a2 + 384), *(_OWORD **)(a2 + 392), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 392) - *(_QWORD *)(a2 + 384)) >> 4));
  std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::vector((_QWORD *)(a1 + 408), a2 + 408);
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__init_with_size[abi:nn180100]<geom::indexed_priority_queue<unsigned int,double>::key*,geom::indexed_priority_queue<unsigned int,double>::key*>((char *)(a1 + 432), *(__int128 **)(a2 + 432), *(__int128 **)(a2 + 440), (uint64_t)(*(_QWORD *)(a2 + 440) - *(_QWORD *)(a2 + 432)) >> 4);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 456), (const std::vector<unsigned int> *)(a2 + 456));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 480), (const std::vector<unsigned int> *)(a2 + 480));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 504), (const std::vector<unsigned int> *)(a2 + 504));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 528), (const std::vector<unsigned int> *)(a2 + 528));
  return a1;
}

_QWORD *std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::__vallocate[abi:nn180100](a1, 0xAAAAAAAAAAAAAAABLL * (v5 >> 4));
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t geom::triangle_mesh_atlas::operator=(uint64_t a1, uint64_t a2)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1, (__n128 *)a2);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 24, (__n128 *)(a2 + 24));
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 48, (__n128 *)(a2 + 48));
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 72, (__n128 *)(a2 + 72));
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 96, (__n128 *)(a2 + 96));
  return a1;
}

void geom::internal::compute_vertex_masks<float>(geom::triangle_mesh_half_edge_connectivity *this@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t face_and_face_vertex_for_half_edge;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int half_edge_for_face_vertex;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  char v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  char v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  uint64_t v35;
  int v36;
  char v37;
  unsigned int *v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v45[4];
  float32x4_t v46;
  _DWORD v47[2];
  _DWORD v48[2];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  a5[1] = 0;
  a5[2] = 0;
  v8 = (v7 >> 2);
  *a5 = 0;
  if ((v7 >> 2))
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a5, (v7 >> 2));
    v9 = (char *)a5[1];
    bzero(v9, (v7 >> 2));
    a5[1] = &v9[v8];
  }
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    v10 = 0;
    do
    {
      if (geom::triangle_mesh_half_edge_connectivity::is_boundary_vertex(this, v10))
      {
        *(_BYTE *)(*a5 + v10) = 1;
        geom::triangle_mesh_half_edge_connectivity::get_incident_boundary_half_edges_to_boundary_vertex(this, v10, v45);
        if (v45[0] == -1)
        {
          v14 = -1;
          v48[0] = -1;
        }
        else
        {
          face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v45[0]);
          if (v45[1] == -1)
          {
            v13 = 0xFFFFFFFFLL;
          }
          else
          {
            v12 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v45[1]);
            v13 = 3 * (_DWORD)v12 + BYTE4(v12);
          }
          v15 = *((_QWORD *)this + 20);
          v48[0] = *(_DWORD *)(v15
                             + 4
                             * (3 * (_DWORD)face_and_face_vertex_for_half_edge
                              + BYTE4(face_and_face_vertex_for_half_edge)));
          v14 = *(_DWORD *)(v15 + 4 * v13);
        }
        v16 = 0;
        v48[1] = v14;
        v17 = 1;
        do
        {
          v18 = v17;
          v19 = v48[v16];
          v20 = *((_QWORD *)this + 23);
          if (v19 >= (*((_QWORD *)this + 24) - v20) >> 2)
          {
            *(_QWORD *)v45 = -1;
            v22 = 0xFFFFFFFFLL;
          }
          else
          {
            half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, *(_DWORD *)(v20 + 4 * v19) / 3u, *(_DWORD *)(v20 + 4 * v19) % 3u);
            geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(this, half_edge_for_face_vertex, v45);
            v22 = v45[0];
          }
          v17 = 0;
          v47[v16] = *(_DWORD *)((unint64_t)v45 | (4 * (v10 == v22)));
          v16 = 1;
        }
        while ((v18 & 1) != 0);
        v23 = 0;
        v24 = *a2;
        v25 = *(float32x4_t *)(*a2 + 16 * v10);
        v26 = 1;
        while (1)
        {
          v27 = vsubq_f32(v25, *(float32x4_t *)(v24 + 16 * v47[v23]));
          v28 = vmulq_f32(v27, v27);
          *(float32x4_t *)&v45[4 * v23] = v27;
          v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
          if (v29 <= 0.0)
            break;
          v30 = v26;
          v26 = 0;
          v31 = v29;
          v32 = vrsqrte_f32((float32x2_t)LODWORD(v29));
          v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v32, v32)));
          *(float32x4_t *)&v45[4 * v23] = vmulq_n_f32(v27, vmul_f32(v33, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v33, v33))).f32[0]);
          v23 = 1;
          if ((v30 & 1) == 0)
          {
            v34 = vmulq_f32(*(float32x4_t *)v45, v46);
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0] >= -0.5)*(_BYTE *)(*a5 + v10) |= 2u;
            break;
          }
        }
      }
      ++v10;
    }
    while (v10 != v8);
  }
  if (((a4[7] - a4[6]) & 0x3FFFFFFFCLL) != 0 && ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) & 0x3FFFFFFFCLL) != 0)
  {
    v35 = 0;
    while (1)
    {
      v36 = *(unsigned __int8 *)(*a4 + v35);
      if (v36 == 2)
        break;
      if ((v36 - 1) <= 1)
      {
        v37 = 4;
        goto LABEL_30;
      }
LABEL_31:
      if (++v35 >= (unint64_t)((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2))
        goto LABEL_32;
    }
    v37 = 8;
LABEL_30:
    *(_BYTE *)(*a5 + v35) |= v37;
    goto LABEL_31;
  }
LABEL_32:
  v38 = a3[1];
  if (v38)
  {
    v39 = *a3;
    v40 = 4 * (_QWORD)v38;
    do
    {
      v41 = *v39++;
      *(_BYTE *)(*a5 + v41) |= 0x10u;
      v40 -= 4;
    }
    while (v40);
  }
}

void geom::internal::triangle_mesh_decimator<float>::initialize_quadrics(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  float *v7;
  char v8;
  float v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  float64x2_t *v21;
  float64x2_t v22;
  float32x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  float32x4_t *v41;
  float32x4_t v42;
  float32x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float32x4_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float32x4_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v66;
  float32x4_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float32x4_t *v71;
  float64x2_t v72;
  float32x4_t *v73;
  float64x2_t v74;
  _BYTE v75[3];
  void *__p;
  void *v77;
  uint64_t v78;
  float32x4_t v79;
  _OWORD v80[3];
  _DWORD v81[2];
  unsigned int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v1 = a1[10] - a1[9];
  v2 = ((unint64_t)((uint64_t)(a1[7] - a1[6]) >> 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
  v3 = a1 + 48;
  a1[49] = a1[48];
  v4 = (v1 >> 2);
  std::vector<geom::internal::quadric>::resize(a1 + 48, v4);
  __p = 0;
  v77 = 0;
  v78 = 0;
  if ((v1 >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, (v1 >> 2));
    v5 = (char *)v77;
    bzero(v77, 4 * v4);
    v77 = &v5[4 * v4];
  }
  if ((v1 & 0x3FFFFFFFCLL) != 0)
  {
    v6 = (char *)a1[45];
    v7 = (float *)__p;
    do
    {
      v8 = *v6++;
      if ((v8 & 0xF) != 0)
        v9 = 1.0;
      else
        v9 = 0.0;
      *v7++ = v9;
      --v4;
    }
    while (v4);
  }
  v64 = (v2 >> 1);
  if ((v2 >> 1))
  {
    v10 = 0;
    while (1)
    {
      v11 = (_DWORD *)(a1[6] + 4 * (3 * v10));
      v13 = v11[1];
      v81[0] = *v11;
      v12 = v81[0];
      v81[1] = v13;
      v14 = a1[1];
      v15 = (float32x4_t *)(v14 + 16 * v81[0]);
      v82 = v11[2];
      v16 = v82;
      v71 = (float32x4_t *)(v14 + 16 * v13);
      v73 = (float32x4_t *)(v14 + 16 * v82);
      v17 = geom::internal::compute_plane_from_triangle<float>(v15, v71, v73);
      v18 = a1[48];
      v19 = (float64x2_t *)(v18 + 80 * v12);
      v20 = (float64x2_t *)(v18 + 80 * v13);
      v21 = (float64x2_t *)(v18 + 80 * v16);
      v22 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)v17.f32, v17.f32[0]));
      v23 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      v24 = vcvtq_f64_f32(vmul_n_f32(v23, v17.f32[0]));
      v25 = vaddq_f64(v19[1], v24);
      *v19 = vaddq_f64(*v19, v22);
      v19[1] = v25;
      v26 = vaddq_f64(v20[1], v24);
      *v20 = vaddq_f64(*v20, v22);
      v20[1] = v26;
      v27 = vaddq_f64(v21[1], v24);
      *v21 = vaddq_f64(*v21, v22);
      v21[1] = v27;
      *(int8x8_t *)&v24.f64[0] = vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v23, 4uLL);
      v28 = vcvtq_f64_f32(vmul_lane_f32(*(float32x2_t *)&v24.f64[0], *(float32x2_t *)v17.f32, 1));
      v29 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24.f64[0], (float32x2_t)vrev64_s32((int32x2_t)v23)));
      v30 = vaddq_f64(v19[3], v29);
      v19[2] = vaddq_f64(v19[2], v28);
      v19[3] = v30;
      v31 = vaddq_f64(v20[3], v29);
      v20[2] = vaddq_f64(v20[2], v28);
      v20[3] = v31;
      v32 = vaddq_f64(v21[3], v29);
      v21[2] = vaddq_f64(v21[2], v28);
      v21[3] = v32;
      v67 = v17;
      v33 = vcvtq_f64_f32(vmul_laneq_f32(v23, v17, 3));
      v19[4] = vaddq_f64(v19[4], v33);
      v20[4] = vaddq_f64(v20[4], v33);
      v21[4] = vaddq_f64(v21[4], v33);
      v66 = v10;
      if (geom::triangle_mesh_half_edge_connectivity::is_boundary_face((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), v10))
      {
        break;
      }
LABEL_29:
      v10 = v66 + 1;
      if (v66 + 1 == v64)
        goto LABEL_30;
    }
    v34 = 0;
    v80[0] = *v15;
    v80[1] = *v71;
    v80[2] = *v73;
    v35 = a1[45];
    v75[0] = (*(_BYTE *)(v35 + v12) & 0xF) != 0;
    v75[1] = (*(_BYTE *)(v35 + v13) & 0xF) != 0;
    v75[2] = (*(_BYTE *)(v35 + v16) & 0xF) != 0;
    while (1)
    {
      v36 = v81[v34];
      v37 = *((float *)__p + v36);
      if (!v75[v34])
        break;
      v38 = v34 + 1;
      if (v34 == 2)
        v39 = 0;
      else
        v39 = v34 + 1;
      if (v39 == 2)
        v40 = 0;
      else
        v40 = v39 + 1;
      if (!v75[v39])
      {
        v52 = v40;
        if (v75[v40])
        {
          v41 = (float32x4_t *)&v80[v34];
          v79 = vaddq_f32(v67, *v41);
          v72 = 0u;
          v74 = 0u;
          v69 = 0u;
          v70 = 0u;
          v68 = 0u;
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      v41 = (float32x4_t *)&v80[v34];
      v79 = vaddq_f32(v67, *v41);
      v42 = geom::internal::compute_plane_from_triangle<float>(v41, (float32x4_t *)&v80[v39], &v79);
      v43 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
      v44 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v43, 4uLL), v42.f32[0]));
      v45 = vcvtq_f64_f32(vmul_lane_f32(v43, *(float32x2_t *)v42.f32, 1));
      v46 = vmulq_f32(v42, v42);
      v42.i32[1] = v43.i32[1];
      v47 = vcvt_hight_f64_f32(v46);
      v48 = vcvtq_f64_f32(*(float32x2_t *)v46.f32);
      v49 = vaddq_f64(v44, (float64x2_t)0);
      v50 = vaddq_f64(v45, (float64x2_t)0);
      v51 = vaddq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v43), *(float32x2_t *)v42.f32)), (float64x2_t)0);
      v52 = v40;
      if (v75[v40])
      {
        v72 = v50;
        v74 = v49;
        v69 = v47;
        v70 = v48;
        v68 = v51;
LABEL_27:
        v53 = geom::internal::compute_plane_from_triangle<float>(v41, (float32x4_t *)&v80[v52], &v79);
        v54 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
        v55 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)vext_s8(*(int8x8_t *)v53.f32, (int8x8_t)v54, 4uLL), v53.f32[0]));
        v56 = vcvtq_f64_f32(vmul_lane_f32(v54, *(float32x2_t *)v53.f32, 1));
        v57 = vmulq_f32(v53, v53);
        v53.i32[1] = v54.i32[1];
        v58 = vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v54), *(float32x2_t *)v53.f32));
        v59 = vcvtq_f64_f32(*(float32x2_t *)v57.f32);
        v60 = vcvt_hight_f64_f32(v57);
        v49 = vaddq_f64(v74, v55);
        v50 = vaddq_f64(v72, v56);
        v51 = vaddq_f64(v68, v58);
        v47 = vaddq_f64(v69, v60);
        v48 = vaddq_f64(v70, v59);
      }
LABEL_28:
      v61 = *v3 + 80 * v36;
      *(double *)v61 = v37 * v48.f64[0] + *(double *)v61;
      *(float64x2_t *)(v61 + 8) = vaddq_f64(vmulq_n_f64(v49, v37), *(float64x2_t *)(v61 + 8));
      v62 = vmuld_lane_f64(v37, v48, 1) + *(double *)(v61 + 32);
      *(double *)(v61 + 24) = v37 * v51.f64[0] + *(double *)(v61 + 24);
      *(double *)(v61 + 32) = v62;
      *(float64x2_t *)(v61 + 40) = vaddq_f64(vmulq_n_f64(v50, v37), *(float64x2_t *)(v61 + 40));
      v63 = vmuld_lane_f64(v37, v51, 1) + *(double *)(v61 + 64);
      *(double *)(v61 + 56) = v37 * v47.f64[0] + *(double *)(v61 + 56);
      *(double *)(v61 + 64) = v63;
      *(double *)(v61 + 72) = vmuld_lane_f64(v37, v47, 1) + *(double *)(v61 + 72);
      v34 = v38;
      if (v38 == 3)
        goto LABEL_29;
    }
    v38 = v34 + 1;
LABEL_24:
    v49 = 0uLL;
    v50 = 0uLL;
    v48 = 0uLL;
    v47 = 0uLL;
    v51 = 0uLL;
    goto LABEL_28;
  }
LABEL_30:
  if (__p)
  {
    v77 = __p;
    operator delete(__p);
  }
}

void geom::internal::triangle_mesh_decimator<float>::initialize_edge_data(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  char **v11;
  float64x2_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  unsigned int v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  void *__p[2];
  _OWORD v35[2];

  v2 = (*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2;
  memset(v35, 0, sizeof(v35));
  *(_OWORD *)__p = 0u;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::reserve(__p, v2);
  std::vector<unsigned int>::resize((std::vector<int> *)((char *)v35 + 8), v2, &geom::indexed_priority_queue<unsigned int,double>::k_invalid_index);
  v3 = (void **)(a1 + 432);
  v4 = *(_OWORD *)(a1 + 432);
  v5 = *(_OWORD *)__p;
  v6 = v35[0];
  *(_OWORD *)__p = v4;
  *(_QWORD *)&v35[0] = *(_QWORD *)(a1 + 448);
  v7 = *(_QWORD *)(a1 + 472);
  v8 = v35[1];
  v9 = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(a1 + 432) = v5;
  *(_OWORD *)(a1 + 448) = v6;
  *(_OWORD *)((char *)v35 + 8) = v9;
  *((_QWORD *)&v35[1] + 1) = v7;
  *(_OWORD *)(a1 + 464) = v8;
  if ((_QWORD)v9)
  {
    *(_QWORD *)&v35[1] = v9;
    operator delete((void *)v9);
    v10 = __p[0];
    if (!__p[0])
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = (void *)v4;
  if ((_QWORD)v4)
  {
LABEL_3:
    __p[1] = v10;
    operator delete(v10);
  }
LABEL_4:
  v11 = (char **)(a1 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 408);
  std::vector<geom::internal::triangle_mesh_decimator<float>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<float>::edge_cost>>::reserve((void **)(a1 + 408), v2);
  if ((_DWORD)v2)
  {
    v16 = 0;
    do
    {
      geom::internal::triangle_mesh_decimator<float>::make_edge_cost((_QWORD *)a1, v16, (uint64_t)__p, INFINITY, v12, v13, v14, v15);
      v17 = *(_OWORD **)(a1 + 416);
      v18 = *(_QWORD *)(a1 + 424);
      if ((unint64_t)v17 >= v18)
      {
        v21 = ((char *)v17 - *v11) >> 5;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 59)
          abort();
        v23 = v18 - (_QWORD)*v11;
        if (v23 >> 4 > v22)
          v22 = v23 >> 4;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
          v24 = 0x7FFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
          v25 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 424, v24);
        else
          v25 = 0;
        v26 = &v25[32 * v21];
        v27 = v35[0];
        *(_OWORD *)v26 = *(_OWORD *)__p;
        *((_OWORD *)v26 + 1) = v27;
        v29 = *(char **)(a1 + 408);
        v28 = *(char **)(a1 + 416);
        v30 = v26;
        if (v28 != v29)
        {
          do
          {
            v31 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 32;
            v28 -= 32;
          }
          while (v28 != v29);
          v28 = *v11;
        }
        v20 = v26 + 32;
        *(_QWORD *)(a1 + 408) = v30;
        *(_QWORD *)(a1 + 416) = v26 + 32;
        *(_QWORD *)(a1 + 424) = &v25[32 * v24];
        if (v28)
          operator delete(v28);
      }
      else
      {
        v19 = v35[0];
        *v17 = *(_OWORD *)__p;
        v17[1] = v19;
        v20 = v17 + 2;
      }
      *(_QWORD *)(a1 + 416) = v20;
      ++v16;
    }
    while (v16 != (_DWORD)v2);
    v32 = 0;
    v33 = 0;
    do
    {
      LODWORD(__p[0]) = v32;
      __p[1] = *(void **)&(*v11)[v33];
      geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost(v3, (unsigned int *)__p);
      v33 += 32;
      ++v32;
    }
    while (32 * v2 != v33);
  }
}

_QWORD *std::vector<geom::internal::quadric>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<geom::internal::quadric>::__vallocate[abi:nn180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::vector<geom::internal::quadric>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<geom::internal::quadric>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 80 * a2;
  }
}

float32x4_t geom::internal::compute_plane_from_triangle<float>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t result;
  float32x4_t v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;

  v3 = vsubq_f32(*a2, *a1);
  v4 = vsubq_f32(*a3, *a1);
  v5 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), vnegq_f32(v3)), v4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL));
  v6 = vmulq_f32(v5, v5);
  v7 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), v6)).f32[0];
  result = 0uLL;
  if (v7 > 0.0)
  {
    v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL);
    v10 = v7;
    v11 = vrsqrte_f32((float32x2_t)LODWORD(v7));
    v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v11, v11)));
    return vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v12, v12))).f32[0]);
  }
  return result;
}

void std::vector<geom::internal::quadric>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::internal::quadric>>(v4, v11);
    else
      v12 = 0;
    __p = v12;
    v16 = &v12[80 * v8];
    v18 = &v12[80 * v11];
    v14 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<geom::internal::quadric>::__swap_out_circular_buffer(a1, &__p);
    if (v17 != v16)
      v17 = &v16[(v17 - v16 - 80) % 0x50uLL];
    if (__p)
      operator delete(__p);
  }
}

void std::vector<geom::internal::quadric>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::internal::quadric>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::internal::quadric>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a7 - 32;
    do
    {
      v9 = *(_OWORD *)(a3 - 80);
      a3 -= 80;
      *(_OWORD *)(v8 - 48) = v9;
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)v8 = *(_OWORD *)(a3 + 48);
      result = *(__n128 *)(a3 + 64);
      *(__n128 *)(v8 + 16) = result;
      v8 -= 80;
      v7 -= 80;
    }
    while (a3 != a5);
  }
  return result;
}

void std::vector<geom::internal::triangle_mesh_decimator<float>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<float>::edge_cost>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void geom::internal::triangle_mesh_decimator<float>::make_edge_cost(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, float64x2_t a5@<Q4>, double a6@<D5>, float64x2_t a7@<Q6>, float64x2_t a8@<Q7>)
{
  uint64_t v12;
  unsigned int half_edge_for_face_vertex;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  unsigned int v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v32 = -1;
  v12 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v12) >> 2))
  {
    *(_QWORD *)v32 = -1;
    v14 = 0xFFFFFFFFLL;
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v12 + 4 * a2) / 3u, *(_DWORD *)(v12 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), half_edge_for_face_vertex, v32);
    v15 = v32[0];
    v14 = v32[1];
  }
  v16 = a1[1];
  v17 = *(float32x4_t *)(v16 + 16 * v15);
  v18 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v14), v17);
  v19 = vmulq_f32(v18, v18);
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1);
  v20 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
  v19.f32[0] = fabsf(vaddq_f32(v20, vaddq_f32(v19, v21)).f32[0]);
  v21.i32[0] = 730643660;
  if (v19.f32[0] <= 1.0e-12)
  {
    v26 = 0.0;
  }
  else
  {
    v22 = a1[48];
    v23 = (float64x2_t *)(v22 + 80 * v15);
    v24 = (float64x2_t *)(v22 + 80 * v14);
    v27 = vaddq_f64(*v23, *v24);
    v28 = vaddq_f64(v23[1], v24[1]);
    v29 = vaddq_f64(v23[2], v24[2]);
    v30 = vaddq_f64(v23[3], v24[3]);
    v25 = v24[4];
    v31 = vaddq_f64(v23[4], v25);
    geom::internal::triangle_mesh_decimator<float>::make_contracted_position(a1, a2, v27.f64, a4, v25, (float64x2_t)v21, (float64x2_t)v20, a5, a6, a7, a8);
    v26 = v31.f64[1]
        + v29.f64[0] * v17.f32[1] * v17.f32[1]
        + v27.f64[0] * v17.f32[0] * v17.f32[0]
        + v30.f64[1] * v17.f32[2] * v17.f32[2]
        + (v28.f64[0] * v17.f32[0] * v17.f32[2]
         + v27.f64[1] * v17.f32[0] * v17.f32[1]
         + v29.f64[1] * v17.f32[1] * v17.f32[2]
         + v28.f64[1] * v17.f32[0]
         + v30.f64[0] * v17.f32[1]
         + v31.f64[0] * v17.f32[2])
        * 2.0;
    if (v26 < 0.0)
      v26 = 0.0;
  }
  *(double *)a3 = v26;
  *(float32x4_t *)(a3 + 16) = v17;
}

double geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost(void **a1, unsigned int *a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  __int128 v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  double v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  double v48;
  double v49;
  char *v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;

  v4 = *a2;
  v5 = a1[3];
  v6 = v5[v4];
  if ((_DWORD)v6 == -1)
  {
    v21 = (char *)*a1;
    v22 = a1[1];
    v23 = (char *)v22 - (_BYTE *)*a1;
    v24 = v23 >> 4;
    v5[v4] = v23 >> 4;
    v25 = (uint64_t)(a1 + 2);
    v26 = (unint64_t)a1[2];
    if ((unint64_t)v22 >= v26)
    {
      if ((unint64_t)(v24 + 1) >> 60)
        abort();
      v35 = v26 - (_QWORD)v21;
      v36 = v35 >> 3;
      if (v35 >> 3 <= (unint64_t)(v24 + 1))
        v36 = v24 + 1;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
        v37 = 0xFFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v25, v37);
      else
        v38 = 0;
      v39 = &v38[16 * v24];
      v40 = &v38[16 * v37];
      v11 = *(_OWORD *)a2;
      *(_OWORD *)v39 = *(_OWORD *)a2;
      v27 = v39 + 16;
      v42 = (char *)*a1;
      v41 = (char *)a1[1];
      if (v41 != *a1)
      {
        do
        {
          v11 = *((_OWORD *)v41 - 1);
          *((_OWORD *)v39 - 1) = v11;
          v39 -= 16;
          v41 -= 16;
        }
        while (v41 != v42);
        v41 = (char *)*a1;
      }
      *a1 = v39;
      a1[1] = v27;
      a1[2] = v40;
      if (v41)
        operator delete(v41);
    }
    else
    {
      v11 = *(_OWORD *)a2;
      *v22 = *(_OWORD *)a2;
      v27 = v22 + 1;
    }
    a1[1] = v27;
    if ((_DWORD)v24)
    {
      v43 = (char *)*a1;
      *(_QWORD *)&v11 = *(_QWORD *)((char *)*a1 + (v23 & 0xFFFFFFFF0) + 8);
      do
      {
        v44 = v24 - 1;
        v45 = (v24 - 1) >> 1;
        v46 = &v43[16 * v45];
        v48 = *((double *)v46 + 1);
        v47 = v46 + 8;
        v49 = v48;
        if (v48 <= *(double *)&v11)
          break;
        v50 = &v43[16 * v24];
        v51 = *(_DWORD *)v50;
        *(_QWORD *)&v11 = *((_QWORD *)v50 + 1);
        *(_DWORD *)v50 = *(_DWORD *)&v43[16 * v45];
        *(_DWORD *)&v43[16 * v45] = v51;
        *((double *)v50 + 1) = v49;
        *v47 = v11;
        v52 = *(unsigned int *)v50;
        v53 = a1[3];
        v53[v52] = v24;
        v53[*(unsigned int *)&v43[16 * v45]] = v45;
        LODWORD(v24) = v44 >> 1;
      }
      while (v44 >= 2);
    }
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)*a1 + 16 * v6;
    v10 = *(double *)(v8 + 8);
    v9 = (_QWORD *)(v8 + 8);
    *(_QWORD *)&v11 = *((_QWORD *)a2 + 1);
    v12 = v10 < *(double *)&v11;
    if (v10 <= *(double *)&v11)
    {
      *(_DWORD *)v8 = v4;
      *v9 = v11;
      if (v12)
      {
        v28 = (unint64_t)((_BYTE *)a1[1] - v7) >> 4;
        while (1)
        {
          v29 = (2 * v6) | 1;
          v30 = v6;
          if (v29 < v28)
          {
            v30 = v6;
            if (*(double *)&v7[16 * v29 + 8] < *(double *)&v11)
              v30 = (2 * (_DWORD)v6) | 1u;
          }
          v31 = 2 * v6 + 2;
          if (v31 < v28)
          {
            *(_QWORD *)&v11 = *(_QWORD *)&v7[16 * v31 + 8];
            if (*(double *)&v11 < *(double *)&v7[16 * v30 + 8])
              v30 = (2 * v6 + 2);
          }
          if ((_DWORD)v30 == (_DWORD)v6)
            break;
          v32 = &v7[16 * v6];
          v33 = &v7[16 * v30];
          v34 = *(_DWORD *)v32;
          *(_QWORD *)&v11 = *((_QWORD *)v32 + 1);
          *(_DWORD *)v32 = *(_DWORD *)v33;
          *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
          *(_DWORD *)v33 = v34;
          *((_QWORD *)v33 + 1) = v11;
          v5[*(unsigned int *)v32] = v6;
          v5[*(unsigned int *)v33] = v30;
          v6 = v30;
        }
      }
    }
    else
    {
      *(_DWORD *)v8 = v4;
      *v9 = v11;
      if ((_DWORD)v6)
      {
        do
        {
          v13 = v6 - 1;
          v14 = (v6 - 1) >> 1;
          v15 = &v7[16 * v14];
          v17 = *((double *)v15 + 1);
          v16 = v15 + 8;
          *(double *)&v11 = v17;
          if (v17 <= *((double *)a2 + 1))
            break;
          v18 = &v7[16 * v6];
          v19 = *(_DWORD *)v18;
          v20 = *((_QWORD *)v18 + 1);
          *(_DWORD *)v18 = *(_DWORD *)&v7[16 * v14];
          *((_QWORD *)v18 + 1) = v11;
          *(_DWORD *)&v7[16 * v14] = v19;
          *v16 = v20;
          v5[*(unsigned int *)v18] = v6;
          v5[*(unsigned int *)&v7[16 * v14]] = v14;
          LODWORD(v6) = v13 >> 1;
        }
        while (v13 >= 2);
      }
    }
  }
  return *(double *)&v11;
}

void std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void geom::internal::triangle_mesh_decimator<float>::make_contracted_position(_QWORD *a1, unsigned int a2, double *a3, double a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v15;
  unsigned int half_edge_for_face_vertex;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  uint64_t v22;
  char v23;
  char v24;
  float32x2_t *v25;
  int v26;
  int v27;
  int v30;
  int v31;
  BOOL v32;
  char v33;
  BOOL v34;
  int8x16_t v35;
  int8x8_t v36;
  int8x16_t v37;
  unsigned int v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v15 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v15) >> 2))
  {
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    *(_QWORD *)v38 = -1;
    v19 = 0xFFFFFFFFLL;
    v18 = 0xFFFFFFFFLL;
  }
  else
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v15 + 4 * a2) / 3u, *(_DWORD *)(v15 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), half_edge_for_face_vertex, v38);
    v18 = v38[0];
    v19 = v38[1];
  }
  v20 = a1[1];
  v21 = (float32x2_t *)(v20 + 16 * v18);
  v22 = a1[45];
  v23 = *(_BYTE *)(v22 + v18);
  v24 = *(_BYTE *)(v22 + v19);
  if ((v23 & 0x10) == 0 || (v24 & 0x10) != 0)
  {
    v25 = (float32x2_t *)(v20 + 16 * v19);
    if ((v23 & 0x10) != 0 || (v24 & 0x10) == 0)
    {
      v26 = v23 & 0xA;
      v27 = v24 & 0xA;
      if (((v23 & 0xA) == 0 || v27 != 0) && ((v24 & 0xA) == 0 || v26 != 0))
      {
        v30 = v24 & 5;
        v31 = v23 & 5;
        if ((!v31 || v30) && (!v30 || v31))
        {
          if (*(_DWORD *)a1 >= 2u)
          {
            if (*(_DWORD *)a1 == 2)
            {
              geom::internal::quadric::cost<float>(a3, (float *)v21);
              geom::internal::quadric::cost<float>(a3, (float *)v25);
            }
          }
          else
          {
            if (v26)
              v32 = v27 == 0;
            else
              v32 = 1;
            v33 = v32;
            if (v30)
              v34 = v31 == 0;
            else
              v34 = 1;
            if (v34 && (v33 & 1) != 0)
            {
              v17.f64[0] = fabs(a4);
              if (v17.f64[0] <= 1.0e-12)
              {
                geom::internal::triangle_mesh_decimator<float>::optimize_position_for_aspect_ratio(a1, a2);
              }
              else
              {
                v37.i32[2] = 0;
                v37.i64[0] = 0;
                if ((geom::internal::quadric::optimal_position<float>(a3, (uint64_t)&v37, v17, 1.0e-12, a6, a7.f64[0], a8, a9, a10) & 1) == 0)
                {
                  *(double *)v35.i64 = geom::internal::triangle_mesh_decimator<float>::optimize_position_for_area_and_volume_preservation(a1, a2, (uint64_t)a3);
                  v37 = v35;
                  v35.i32[0] = vextq_s8(v35, v35, 8uLL).u32[0];
                  v36 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v35.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)v35.i8)));
                  if ((v36.i8[4] & 1) != 0 || (v36.i8[0] & 1) != 0)
                    geom::internal::triangle_mesh_decimator<float>::optimize_position_for_area_and_volume_preservation(a1, a2, (uint64_t)a3);
                }
              }
            }
            else
            {
              geom::internal::quadric::compute_optimal_position_along_edge<float>((uint64_t)a3, v21, v25, v17.f64[0], a5, a6.f64[0], a7, a8.f64[0], a9, a10, a11);
            }
          }
        }
      }
    }
  }
}

double geom::internal::quadric::cost<float>(double *a1, float *a2)
{
  double v2;
  double v3;
  double v4;
  double result;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  result = a1[9]
         + a1[4] * v3 * v3
         + *a1 * v2 * v2
         + a1[7] * v4 * v4
         + (a1[2] * v2 * v4 + a1[1] * v2 * v3 + a1[5] * v3 * v4 + a1[3] * v2 + a1[6] * v3 + a1[8] * v4) * 2.0;
  if (result < 0.0)
    return 0.0;
  return result;
}

double geom::internal::quadric::compute_optimal_position_along_edge<float>(uint64_t a1, float32x2_t *a2, float32x2_t *a3, double a4, float64x2_t a5, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  float v18;
  float64x2_t v19;
  float64x2_t v20;
  float v21;
  float v22;
  float v23;
  double result;

  v12 = vcvtq_f64_f32(vsub_f32(*a3, *a2));
  LODWORD(a5.f64[0]) = a2[1].i32[0];
  a7.f64[0] = (float)(a3[1].f32[0] - *(float *)a5.f64);
  *(_QWORD *)&v13.f64[0] = vdupq_laneq_s64(*(int64x2_t *)a1, 1).u64[0];
  v13.f64[1] = *(float64_t *)(a1 + 32);
  a10.f64[0] = *(float64_t *)(a1 + 16);
  a11.f64[0] = *(float64_t *)(a1 + 40);
  v11.f64[0] = *(float64_t *)(a1 + 56);
  v14 = vmulq_f64(a10, a7).f64[0];
  a10.f64[1] = a11.f64[0];
  v15.f64[0] = v14 + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v12));
  v16 = vmulq_f64(v13, v12);
  v15.f64[1] = vmulq_f64(a11, a7).f64[0] + vaddvq_f64(v16);
  v16.f64[0] = vmulq_f64(a7, v11).f64[0] + vaddvq_f64(vmulq_f64(v12, a10));
  v19 = vmulq_f64(v12, v15);
  v17 = -(vmulq_f64(a7, v16).f64[0] + vaddvq_f64(v19));
  *(float *)v19.f64 = v17;
  v18 = fabsf(*(float *)v19.f64);
  v19.f64[0] = 0.5;
  if (v18 > 0.000001)
  {
    v19.f64[0] = *(float64_t *)(a1 + 64);
    v20.f64[0] = *(float64_t *)(a1 + 24);
    v20.f64[1] = *(float64_t *)(a1 + 48);
    a5.f64[0] = *(float *)a5.f64;
    v21 = (vmulq_f64(a5, v16).f64[0]
         + vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*a2), v15))
         + vmulq_f64(a7, v19).f64[0]
         + vaddvq_f64(vmulq_f64(v12, v20)))
        / v17;
    v19.f64[0] = 0.0;
    if (v21 >= 0.0)
    {
      if (v21 <= 1.0)
        v19.f64[0] = v21;
      else
        v19.f64[0] = 1.0;
    }
  }
  v22 = 1.0 - v19.f64[0];
  v23 = v19.f64[0];
  *(_QWORD *)&result = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)a3->f32, v23), *(float32x4_t *)a2->f32, v22).u64[0];
  return result;
}

double geom::internal::triangle_mesh_decimator<float>::optimize_position_for_aspect_ratio(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  geom::triangle_mesh_half_edge_connectivity *v5;
  double result;
  float32x4_t v7;
  uint64_t v8;
  unsigned int half_edge_for_face_vertex;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  simd_float2x2 v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  _QWORD v22[2];
  unsigned int v23[4];
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  char v27;
  uint64_t v28;
  simd_float3x3 v29;
  simd_float3x3 v30;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v5 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v22[0] = a1 + 4;
  v22[1] = v4;
  v27 = 0;
  if (geom::vertex_placement_constraint_factory<float>::add_shape_optimization((uint64_t)v22, a2, (uint64_t)v23) == 3)
  {
    if (v27 == 3)
    {
      v13 = vzip1q_s32(*(int32x4_t *)v23, v25);
      v29.columns[0] = (simd_float3)vzip1q_s32(v13, v24);
      v29.columns[2] = (simd_float3)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v23, v25), vdupq_laneq_s32(v24, 2));
      v29.columns[1] = (simd_float3)vzip2q_s32(v13, vdupq_lane_s32(*(int32x2_t *)v24.i8, 1));
      v30 = __invert_f3(v29);
      *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v30.columns[0], v26.f32[0]), (float32x4_t)v30.columns[1], *(float32x2_t *)v26.f32, 1), (float32x4_t)v30.columns[2], v26, 2).u64[0];
    }
    else if (v27 == 2)
    {
      v20 = (float32x4_t)v24;
      v21 = *(float32x4_t *)v23;
      v14 = (int32x4_t)vmulq_f32(v21, v21);
      v15 = (int8x16_t)vmulq_f32(*(float32x4_t *)v23, (float32x4_t)v24);
      v16 = (int8x16_t)vmulq_f32(v20, v20);
      *(float32x2_t *)v15.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8)));
      *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))), *(int32x2_t *)v15.i8);
      v19 = *(float32x2_t *)v26.f32;
      v17 = __invert_f2((simd_float2x2)v14);
      v18 = vmla_lane_f32(vmul_n_f32((float32x2_t)v17.columns[0], v19.f32[0]), (float32x2_t)v17.columns[1], v19, 1);
      *(_QWORD *)&result = vmlaq_n_f32(vmulq_lane_f32(v20, v18, 1), v21, v18.f32[0]).u64[0];
    }
    else
    {
      result = 0.0;
      if (v27 == 1)
      {
        v7 = vmulq_f32(*(float32x4_t *)v23, *(float32x4_t *)v23);
        *(_QWORD *)&result = vmulq_n_f32(*(float32x4_t *)v23, v26.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]).u64[0];
      }
    }
  }
  else
  {
    v8 = a1[27];
    if (a2 >= (unint64_t)((a1[28] - v8) >> 2))
    {
      v10 = 0xFFFFFFFFLL;
      v11 = 0xFFFFFFFFLL;
    }
    else
    {
      half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v8 + 4 * a2) / 3u, *(_DWORD *)(v8 + 4 * a2) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v23);
      v11 = v23[0];
      v10 = v23[1];
    }
    v12.i64[0] = 0x3F0000003F000000;
    v12.i64[1] = 0x3F0000003F000000;
    *(_QWORD *)&result = vmulq_f32(vaddq_f32(*(float32x4_t *)(a1[1] + 16 * v11), *(float32x4_t *)(a1[1] + 16 * v10)), v12).u64[0];
  }
  return result;
}

uint64_t geom::internal::quadric::optimal_position<float>(double *a1, uint64_t a2, float64x2_t a3, double a4, float64x2_t a5, double a6, float64x2_t a7, double a8, float64x2_t a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;

  v9 = *a1;
  v10 = a1[1];
  v12 = a1[4];
  v11 = a1[5];
  v13 = *a1 * v12;
  v14 = a1[7];
  v15 = a1[2];
  v16 = v10 * v11 * v15 + v13 * v14 + v10 * v15 * v11 + -(*a1 * v11) * v11 + -(v10 * v10) * v14 + -(v15 * v12) * v15;
  v17 = 0;
  if (v16 > 0.0)
  {
    v18 = 1.0 / v16;
    v19.f64[0] = (v12 * v14 - v11 * v11) * (1.0 / v16);
    v20.f64[0] = (v14 * -v10 + v15 * v11) * (1.0 / v16);
    a3.f64[0] = (v10 * v11 + -v15 * v12) * v18;
    v21 = (v9 * v14 + -v15 * v15) * v18;
    a7.f64[0] = (v10 * v15 - *a1 * v11) * v18;
    a5.f64[0] = (v13 + -v10 * v10) * v18;
    v22 = fabs(v10);
    v23 = fabs(v15);
    v24 = fabs(v9) + v22 + v23;
    v25 = fabs(v11);
    v26 = fabs(v12) + v22 + v25;
    if (v24 >= v26)
      v26 = v24;
    v27 = fabs(v14) + v25 + v23;
    if (v26 >= v27)
      v27 = v26;
    v28 = fabs(v20.f64[0]);
    v29 = fabs(a3.f64[0]);
    v30 = v29 + fabs(v19.f64[0]) + v28;
    v31 = fabs(a7.f64[0]);
    v32 = v31 + v28 + fabs(v21);
    if (v30 < v32)
      v30 = v32;
    v33 = fabs(a5.f64[0]) + v29 + v31;
    if (v30 < v33)
      v30 = v33;
    v34 = v27 * v30;
    if (v34 > 0.0 && v34 <= 1000000.0)
    {
      v19.f64[1] = v20.f64[0];
      v20.f64[1] = v21;
      v35.f64[0] = a1[3];
      a9.f64[0] = a1[8];
      v35.f64[1] = a1[6];
      v36 = vmulq_f64(a3, a9).f64[0];
      a3.f64[1] = a7.f64[0];
      v37 = v36 + vaddvq_f64(vmulq_f64(v19, v35));
      *(float *)&v38 = -v37;
      v39 = vmulq_f64(a7, a9).f64[0] + vaddvq_f64(vmulq_f64(v20, v35));
      v40 = vmulq_f64(a5, a9).f64[0] + vaddvq_f64(vmulq_f64(a3, v35));
      *((float *)&v38 + 1) = -v39;
      *(float *)(a2 + 8) = -v40;
      *(_QWORD *)a2 = v38;
      return 1;
    }
  }
  return v17;
}

double geom::internal::triangle_mesh_decimator<float>::optimize_position_for_area_and_volume_preservation(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  geom::triangle_mesh_half_edge_connectivity *v6;
  geom::triangle_mesh_half_edge_connectivity *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int half_edge_for_face_vertex;
  int v11;
  geom::triangle_mesh_half_edge_connectivity *v12;
  uint64_t v13;
  unsigned int v14;
  float32x4_t *v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  double result;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  int v25;
  geom::triangle_mesh_half_edge_connectivity *v26[2];
  float32x4_t v27;
  float32x4_t v28;
  __int128 v29;
  __int128 v30;
  unsigned int v31[4];
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  unsigned __int8 v35;
  float32x4_t v36;
  float32x4_t *v37;
  float64x2_t *v38;
  uint64_t v39;
  simd_float3x3 v40;
  simd_float3x3 v41;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v7 = (geom::triangle_mesh_half_edge_connectivity *)a1[1];
  v26[0] = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v26[1] = v7;
  v35 = 0;
  v8 = a2;
  v9 = a1[27];
  if (a2 < (unint64_t)((a1[28] - v9) >> 2))
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v9 + 4 * a2) / 3u, *(_DWORD *)(v9 + 4 * a2) % 3u);
    if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v6, half_edge_for_face_vertex))
    {
      geom::vertex_placement_constraint_factory<float>::add_boundary_preservation(v26, a2, (uint64_t)v31);
      v11 = v35;
      if (v35 > 2u)
        goto LABEL_16;
      v12 = v26[0];
      v13 = *((_QWORD *)v26[0] + 23);
      if (v8 >= (*((_QWORD *)v26[0] + 24) - v13) >> 2)
        goto LABEL_15;
      v14 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v26[0], *(_DWORD *)(v13 + 4 * v8) / 3u, *(_DWORD *)(v13 + 4 * v8) % 3u);
      if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v12, v14))
        goto LABEL_15;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      v27 = 0uLL;
      v36.i64[0] = (uint64_t)&off_24F149BE0;
      v36.i64[1] = (uint64_t)&v28;
      v37 = &v27;
      v38 = (float64x2_t *)&v36;
      geom::vertex_placement_constraint_factory<float>::loop_edge_boundaries((uint64_t)v26, a2, (uint64_t)&v36);
      v15 = (float32x4_t *)v38;
      if (v38 == (float64x2_t *)&v36)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  geom::vertex_placement_constraint_factory<float>::add_volume_preservation(v26, a2, (uint64_t)v31);
  v11 = v35;
  if (v35 <= 2u)
  {
    *(uint64_t *)((char *)v36.i64 + 4) = 0;
    v36.i32[0] = 0;
    v25 = 0;
    geom::internal::quadric::convert_to_quadratic_form<float>(a3, (uint64_t)&v28, (float64x2_t *)&v36, (float *)&v25, v17);
    v27 = vnegq_f32(v36);
    geom::vertex_placement_constraints<float>::add_objective_function((uint64_t)v31, &v28, &v27);
    v11 = v35;
    if (v35 <= 2u)
    {
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      v27 = 0uLL;
      v36.i64[0] = (uint64_t)&off_24F149CE0;
      v36.i64[1] = (uint64_t)&v28;
      v37 = &v27;
      v38 = (float64x2_t *)&v36;
      geom::vertex_placement_constraint_factory<float>::loop_edge_triangles(v26, a2, (uint64_t)&v36);
      v15 = (float32x4_t *)v38;
      if (v38 == (float64x2_t *)&v36)
      {
LABEL_7:
        v16 = 4;
        v15 = &v36;
        goto LABEL_13;
      }
LABEL_11:
      if (!v15)
      {
LABEL_14:
        geom::vertex_placement_constraints<float>::add_objective_function((uint64_t)v31, &v28, &v27);
LABEL_15:
        v11 = v35;
        goto LABEL_16;
      }
      v16 = 5;
LABEL_13:
      (*(void (**)(void))(v15->i64[0] + 8 * v16))();
      goto LABEL_14;
    }
  }
LABEL_16:
  if (v11 == 3)
  {
    v18 = vzip1q_s32(*(int32x4_t *)v31, v33);
    v40.columns[0] = (simd_float3)vzip1q_s32(v18, v32);
    v40.columns[2] = (simd_float3)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v31, v33), vdupq_laneq_s32(v32, 2));
    v40.columns[1] = (simd_float3)vzip2q_s32(v18, vdupq_lane_s32(*(int32x2_t *)v32.i8, 1));
    v41 = __invert_f3(v40);
    *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v41.columns[0], v34.f32[0]), (float32x4_t)v41.columns[1], *(float32x2_t *)v34.f32, 1), (float32x4_t)v41.columns[2], v34, 2).u64[0];
  }
  else
  {
    v20 = a1[27];
    if (v8 >= (a1[28] - v20) >> 2)
    {
      v22 = 0xFFFFFFFFLL;
      v23 = 0xFFFFFFFFLL;
    }
    else
    {
      v21 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v20 + 4 * v8) / 3u, *(_DWORD *)(v20 + 4 * v8) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, v21, v31);
      v23 = v31[0];
      v22 = v31[1];
    }
    v24.i64[0] = 0x3F0000003F000000;
    v24.i64[1] = 0x3F0000003F000000;
    *(_QWORD *)&result = vmulq_f32(vaddq_f32(*(float32x4_t *)(a1[1] + 16 * v23), *(float32x4_t *)(a1[1] + 16 * v22)), v24).u64[0];
  }
  return result;
}

uint64_t geom::vertex_placement_constraint_factory<float>::add_shape_optimization(uint64_t a1, unsigned int a2, uint64_t a3)
{
  geom::triangle_mesh_half_edge_connectivity *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int half_edge_for_face_vertex;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int half_edge_face;
  unsigned int half_edge_twin;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int32 v18;
  uint64_t v20;
  geom::triangle_mesh_half_edge_connectivity *v21;
  uint64_t v22;
  __int32 v23;
  unsigned int *v25;
  float v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int *v29;
  float32x4_t v30;
  float v31;
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v38;
  float v39;
  void *__p;
  unsigned int *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  float v48;
  unsigned int v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v5 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  v6 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  v8 = (*(_QWORD *)(*(_QWORD *)a1 + 192) - v7) >> 2;
  if (v8 <= a2)
  {
    *(_QWORD *)v49 = -1;
  }
  else
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v49);
    v5 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 184);
    v8 = (*(_QWORD *)(*(_QWORD *)a1 + 192) - v7) >> 2;
  }
  if (v8 <= v6
    || (v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v7 + 4 * v6) / 3u, *(_DWORD *)(v7 + 4 * v6) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v5, v10)))
  {
    half_edge_face = -1;
    goto LABEL_16;
  }
  v11 = *(_DWORD *)(*((_QWORD *)v5 + 23) + 4 * v6);
  v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, v11 / 3, v11 % 3);
  half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, v12);
  if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v5, v12))
  {
LABEL_16:
    v18 = -1;
    goto LABEL_17;
  }
  half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v5, v12);
  v15 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, half_edge_twin);
  v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 16) + 4 * (3 * v15);
  v44.i64[0] = *(_QWORD *)v17;
  v44.i32[2] = *(_DWORD *)(v17 + 8);
  while (1)
  {
    v18 = v44.i32[v16];
    if (v18 != v49[0] && v18 != v49[1])
      break;
    if (++v16 == 3)
      goto LABEL_16;
  }
LABEL_17:
  v20 = 0;
  v21 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  v22 = *(_QWORD *)(*(_QWORD *)a1 + 16) + 4 * (3 * half_edge_face);
  v44.i64[0] = *(_QWORD *)v22;
  v44.i32[2] = *(_DWORD *)(v22 + 8);
  while (1)
  {
    v23 = v44.i32[v20];
    if (v23 != v49[0] && v23 != v49[1])
      break;
    if (++v20 == 3)
    {
      v23 = -1;
      break;
    }
  }
  v43 = 0uLL;
  __p = 0;
  v41 = 0;
  v42 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(v21, v49[0], (uint64_t)&__p);
  v25 = (unsigned int *)__p;
  v26 = 0.0;
  v27 = 0uLL;
  if (__p != v41)
  {
    do
    {
      v28 = *v25;
      if ((_DWORD)v28 != v49[1])
      {
        v27 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 8) + 16 * v28), v27);
        v43 = v27;
        v26 = v26 + 1.0;
      }
      ++v25;
    }
    while (v25 != v41);
  }
  v38 = v27;
  v39 = v26;
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, v49[1], (uint64_t)&__p);
  v29 = (unsigned int *)__p;
  if (__p == v41)
  {
    v31 = v39;
  }
  else
  {
    v30 = v38;
    v31 = v39;
    do
    {
      v32 = *v29;
      if ((_DWORD)v32 != v18 && (_DWORD)v32 != v23 && (_DWORD)v32 != v49[0])
      {
        v30 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 8) + 16 * v32), v30);
        v43 = v30;
        v31 = v31 + 1.0;
      }
      ++v29;
    }
    while (v29 != v41);
  }
  LODWORD(v35) = 0;
  *((float *)&v35 + 1) = v31;
  v44.i32[2] = 0;
  v44.i64[0] = LODWORD(v31);
  v46 = 0;
  v45 = v35;
  v48 = v31;
  v47 = 0;
  geom::vertex_placement_constraints<float>::add_objective_function(a3, &v44, &v43);
  v36 = *(unsigned __int8 *)(a3 + 64);
  if (__p)
  {
    v41 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v36;
}

uint64_t geom::vertex_placement_constraints<float>::add_objective_function(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3;
  __int32 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unsigned __int8 v21;
  float32x4_t v22;
  unsigned __int8 v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unsigned __int8 v51;
  float32x4_t v52;
  float32x4_t v53;
  unsigned __int8 v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  __int32 v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  unsigned __int8 v101;
  float32x4_t v102;
  unsigned __int8 v103;
  float32x4_t v104;
  uint64_t v105;
  float32x4_t v106;
  int v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;
  __int32 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  uint64_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  uint64_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  float32x4_t v178;
  int8x16_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float v184;
  float v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  __int32 v196;
  __int32 v197;
  float32x4_t v198;
  float32x4_t v199;
  __int32 v200;
  __int32 v201;
  __int32 v202;
  __int32 v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int v208;
  int v209;
  float32x4_t v210;
  float32x4_t v211;
  int v212;
  int v213;
  float32x4_t *v214;
  float32x4_t *v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t *v218;
  float32x4_t *v219;
  float32x4_t *v220;
  float32x4_t *v221;
  float32x4_t v222;
  float32x4_t v223;
  int v224;
  int v225;
  float32x4_t *v226;
  float32x4_t *v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t *v230;
  float32x4_t *v231;
  float32x4_t *v232;
  float32x4_t *v233;
  int v234;
  int v235;
  float32x4_t *v236;
  float32x4_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;

  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 == 2)
  {
    v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
    v13 = (int32x4_t)vmulq_f32(v11, v11);
    v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
    v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
    v16 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
    v17 = a2[1];
    v18 = a2[2];
    v19 = vmulq_n_f32(*a2, v16.f32[0]);
    v20 = *a3;
    v21 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    if ((v21 & 1) == 0)
    {
      v240 = a1;
      v216 = v16;
      v228 = v19;
      v192 = a2[2];
      v204 = *a3;
      v187 = a2[1];
      v158 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v17 = v187;
      v18 = v192;
      v20 = v204;
      v16 = v216;
      v19 = v228;
      v159 = v158;
      a1 = v240;
      if (v159)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
        v17 = v187;
        v18 = v192;
        v20 = v204;
        v16 = v216;
        v19 = v228;
        a1 = v240;
      }
    }
    v22 = vmlaq_lane_f32(v19, v17, *(float32x2_t *)v16.f32, 1);
    v23 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    if ((v23 & 1) == 0)
    {
      v241 = a1;
      v217 = v16;
      v229 = v22;
      v193 = v18;
      v205 = v20;
      v160 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v18 = v193;
      v20 = v205;
      v16 = v217;
      v22 = v229;
      v161 = v160;
      a1 = v241;
      if (v161)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
        v18 = v193;
        v20 = v205;
        v16 = v217;
        v22 = v229;
        a1 = v241;
      }
    }
    v24 = vmlaq_laneq_f32(v22, v18, v16, 2);
    v25 = *(unsigned __int8 *)(a1 + 64);
    if ((_DWORD)v25 == 2)
    {
      v79 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
      v80 = vmulq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL));
      v81 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 2), vaddq_f32(v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1)));
      v82 = vmulq_f32(v79, v79);
      v83 = vmulq_f32(v24, v24);
      if (vmulq_f32(v81, v81).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                               * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2), v82))).f32[0]))return 0;
    }
    else if ((_DWORD)v25 == 1)
    {
      v86 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
      v87 = vmulq_f32(v24, v24);
      v88 = vmulq_f32(v24, *(float32x4_t *)a1);
      v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1)));
      if (vmulq_f32(v89, v89).f32[0] >= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                               * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).f32[0])))return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 64))
        return 0;
      v26 = vmulq_f32(v24, v24);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]) <= 0.00001)return 0;
    }
    v84 = vmulq_f32(v16, v20);
    *(float32x4_t *)(a1 + 16 * v25) = v24;
    v85 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)(a1 + 4 * v85 + 48) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1))).u32[0];
    *(_BYTE *)(a1 + 64) = v85 + 1;
    return 1;
  }
  if (v3 == 1)
  {
    v28 = *(float32x4_t *)a1;
    v29 = COERCE_FLOAT(*(_QWORD *)(a1 + 8));
    v30 = fabsf(v29);
    LODWORD(v31) = HIDWORD(*(_QWORD *)a1);
    v32 = -v29;
    if (v30 <= 0.00000011921)
    {
      v33 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v31), (int32x4_t)v28);
    }
    else
    {
      v33.i32[0] = 0;
      v33.f32[1] = v32;
      v33.i64[1] = v28.u32[1];
    }
    v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    v37 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    if (v30 <= 0.00000011921)
    {
      v38 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v31), (int32x4_t)v28);
    }
    else
    {
      v38.i32[0] = 0;
      v38.f32[1] = v32;
      v38.i64[1] = v28.u32[1];
    }
    v39 = (int32x4_t)vmulq_f32(v38, v38);
    v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
    v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
    v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
    v42 = vmulq_n_f32(v38, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]);
    v43 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL), vnegq_f32(v28)), v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL));
    v44 = (int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43);
    v45 = (int32x4_t)vmulq_f32(v43, v43);
    v45.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), *(float32x2_t *)v45.i8)).u32[0];
    *(float32x2_t *)v42.f32 = vrsqrte_f32((float32x2_t)v45.u32[0]);
    *(float32x2_t *)v42.f32 = vmul_f32(*(float32x2_t *)v42.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32)));
    LODWORD(v46) = vmul_f32(*(float32x2_t *)v42.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32))).u32[0];
    v47 = a2[1];
    v48 = a2[2];
    v49 = vmulq_n_f32(*a2, v37.f32[0]);
    v50 = *a3;
    v51 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    if ((v51 & 1) == 0)
    {
      v242 = a1;
      v230 = a2;
      v218 = a3;
      v194 = v49;
      v206 = v37;
      v184 = v46;
      v188 = *a3;
      v180 = v43;
      v182 = a2[2];
      v178 = a2[1];
      v179 = v44;
      v162 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v47 = v178;
      v44 = v179;
      v43 = v180;
      v48 = v182;
      v46 = v184;
      v50 = v188;
      v49 = v194;
      v37 = v206;
      a3 = v218;
      a2 = v230;
      v163 = v162;
      a1 = v242;
      if (v163)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
        v47 = v178;
        v44 = v179;
        v43 = v180;
        v48 = v182;
        v46 = v184;
        v50 = v188;
        v49 = v194;
        v37 = v206;
        a3 = v218;
        a2 = v230;
        a1 = v242;
      }
    }
    v52 = vmlaq_lane_f32(v49, v47, *(float32x2_t *)v37.f32, 1);
    v53 = (float32x4_t)vextq_s8(v44, (int8x16_t)v43, 0xCuLL);
    v54 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    if ((v54 & 1) == 0)
    {
      v243 = a1;
      v231 = a2;
      v219 = a3;
      v195 = v52;
      v207 = v37;
      v185 = v46;
      v189 = v50;
      v181 = v53;
      v183 = v48;
      v164 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v53 = v181;
      v48 = v183;
      v46 = v185;
      v50 = v189;
      v52 = v195;
      v37 = v207;
      a3 = v219;
      a2 = v231;
      v165 = v164;
      a1 = v243;
      if (v165)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
        v53 = v181;
        v48 = v183;
        v46 = v185;
        v50 = v189;
        v52 = v195;
        v37 = v207;
        a3 = v219;
        a2 = v231;
        a1 = v243;
      }
    }
    v55 = vmlaq_laneq_f32(v52, v48, v37, 2);
    v56 = vmulq_n_f32(v53, v46);
    v57 = *(unsigned __int8 *)(a1 + 64);
    if ((_DWORD)v57 == 2)
    {
      v90 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
      v91 = vmulq_f32(v55, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL));
      v92 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 2), vaddq_f32(v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 1)));
      v93 = vmulq_f32(v90, v90);
      v94 = vmulq_f32(v55, v55);
      if (vmulq_f32(v92, v92).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                              * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), v93))).f32[0]))goto LABEL_47;
    }
    else
    {
      if ((_DWORD)v57 != 1)
      {
        if (*(_BYTE *)(a1 + 64))
          goto LABEL_30;
        v58 = vmulq_f32(v55, v55);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]) <= 0.00001)goto LABEL_30;
LABEL_47:
        v95 = vmulq_f32(v37, v50);
        *(float32x4_t *)(a1 + 16 * v57) = v55;
        v96 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)(a1 + 4 * v96 + 48) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 2), vaddq_f32(v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.f32, 1))).u32[0];
        *(_BYTE *)(a1 + 64) = v96 + 1;
        v59 = 1;
        goto LABEL_48;
      }
      v108 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
      v109 = vmulq_f32(v55, v55);
      v110 = vmulq_f32(v55, *(float32x4_t *)a1);
      v111 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 2), vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1)));
      if (vmulq_f32(v111, v111).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                                * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 2), vaddq_f32(v109, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).f32[0])))goto LABEL_47;
    }
LABEL_30:
    v59 = 0;
LABEL_48:
    v97 = a2[1];
    v98 = a2[2];
    v99 = vmulq_n_f32(*a2, v56.f32[0]);
    v100 = *a3;
    v101 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    if ((v101 & 1) == 0)
    {
      v246 = a1;
      v234 = v59;
      v210 = v99;
      v222 = v56;
      v198 = *a3;
      v186 = a2[1];
      v190 = a2[2];
      v170 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v97 = v186;
      v98 = v190;
      v100 = v198;
      v99 = v210;
      v56 = v222;
      v59 = v234;
      v171 = v170;
      a1 = v246;
      if (v171)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
        v97 = v186;
        v98 = v190;
        v100 = v198;
        v99 = v210;
        v56 = v222;
        v59 = v234;
        a1 = v246;
      }
    }
    v102 = vmlaq_lane_f32(v99, v97, *(float32x2_t *)v56.f32, 1);
    v103 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    if ((v103 & 1) == 0)
    {
      v247 = a1;
      v235 = v59;
      v211 = v102;
      v223 = v56;
      v199 = v100;
      v191 = v98;
      v172 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v98 = v191;
      v100 = v199;
      v102 = v211;
      v56 = v223;
      v59 = v235;
      v173 = v172;
      a1 = v247;
      if (v173)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
        v98 = v191;
        v100 = v199;
        v102 = v211;
        v56 = v223;
        v59 = v235;
        a1 = v247;
      }
    }
    v104 = vmlaq_laneq_f32(v102, v98, v56, 2);
    v105 = *(unsigned __int8 *)(a1 + 64);
    if ((_DWORD)v105 == 2)
    {
      v131 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
      v132 = vmulq_f32(v104, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL));
      v133 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1)));
      v134 = vmulq_f32(v131, v131);
      v135 = vmulq_f32(v104, v104);
      if (vmulq_f32(v133, v133).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                                * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), v134))).f32[0]))goto LABEL_69;
    }
    else
    {
      if ((_DWORD)v105 != 1)
      {
        if (*(_BYTE *)(a1 + 64))
          goto LABEL_54;
        v106 = vmulq_f32(v104, v104);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).f32[0]) <= 0.00001)goto LABEL_54;
LABEL_69:
        v136 = vmulq_f32(v56, v100);
        *(float32x4_t *)(a1 + 16 * v105) = v104;
        v137 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)(a1 + 4 * v137 + 48) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).u32[0];
        *(_BYTE *)(a1 + 64) = v137 + 1;
        v107 = 1;
        return v59 | v107;
      }
      v138 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
      v139 = vmulq_f32(v104, v104);
      v140 = vmulq_f32(v104, *(float32x4_t *)a1);
      v141 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v140, 2), vaddq_f32(v140, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v140.f32, 1)));
      if (vmulq_f32(v141, v141).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                                * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2), vaddq_f32(v139, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).f32[0])))goto LABEL_69;
    }
LABEL_54:
    v107 = 0;
    return v59 | v107;
  }
  if (*(_BYTE *)(a1 + 64))
    return 0;
  v4 = a3->i32[0];
  v5 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
  if ((v5 & 1) == 0)
  {
    v238 = a1;
    v226 = a2;
    v214 = a3;
    v202 = a3->i32[0];
    v154 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    v4 = v202;
    a3 = v214;
    a2 = v226;
    v155 = v154;
    a1 = v238;
    if (v155)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v4 = v202;
      a3 = v214;
      a2 = v226;
      a1 = v238;
    }
  }
  v6 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
  if ((v6 & 1) == 0)
  {
    v239 = a1;
    v227 = a2;
    v215 = a3;
    v203 = v4;
    v156 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    v4 = v203;
    a3 = v215;
    a2 = v227;
    v157 = v156;
    a1 = v239;
    if (v157)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v4 = v203;
      a3 = v215;
      a2 = v227;
      a1 = v239;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + 64);
  if ((_DWORD)v7 == 2)
  {
    v60 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    v8 = *a2;
    v61 = vmulq_f32(*a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL));
    v62 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1)));
    v63 = vmulq_f32(v60, v60);
    v64 = vmulq_f32(v8, v8);
    if (vmulq_f32(v62, v62).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                            * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), v63)).f32[0])))goto LABEL_32;
  }
  else
  {
    if ((_DWORD)v7 != 1)
    {
      if (*(_BYTE *)(a1 + 64))
        goto LABEL_10;
      v8 = *a2;
      v9 = vmulq_f32(v8, v8);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]) <= 0.00001)goto LABEL_10;
LABEL_32:
      *(float32x4_t *)(a1 + 16 * v7) = v8;
      v65 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)(a1 + 4 * v65 + 48) = v4;
      *(_BYTE *)(a1 + 64) = v65 + 1;
      v10 = 1;
      goto LABEL_33;
    }
    v73 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
    v74 = vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1));
    v75 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2);
    v8 = *a2;
    v76 = vmulq_f32(v8, v8);
    v77 = vmulq_f32(*(float32x4_t *)a1, *a2);
    v78 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1)));
    if (vmulq_f32(v78, v78).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                            * vmulq_f32(vaddq_f32(v75, v74), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)))).f32[0]))goto LABEL_32;
  }
LABEL_10:
  v10 = 0;
LABEL_33:
  v66 = a3->i32[1];
  v67 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
  if ((v67 & 1) == 0)
  {
    v244 = a1;
    v232 = a2;
    v220 = a3;
    v208 = v10;
    v196 = a3->i32[1];
    v166 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    v66 = v196;
    v10 = v208;
    a3 = v220;
    a2 = v232;
    v167 = v166;
    a1 = v244;
    if (v167)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v66 = v196;
      v10 = v208;
      a3 = v220;
      a2 = v232;
      a1 = v244;
    }
  }
  v68 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
  if ((v68 & 1) == 0)
  {
    v245 = a1;
    v233 = a2;
    v221 = a3;
    v209 = v10;
    v197 = v66;
    v168 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    v66 = v197;
    v10 = v209;
    a3 = v221;
    a2 = v233;
    v169 = v168;
    a1 = v245;
    if (v169)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v66 = v197;
      v10 = v209;
      a3 = v221;
      a2 = v233;
      a1 = v245;
    }
  }
  v69 = *(unsigned __int8 *)(a1 + 64);
  if ((_DWORD)v69 == 2)
  {
    v112 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    v70 = a2[1];
    v113 = vmulq_f32(v70, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL));
    v114 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1)));
    v115 = vmulq_f32(v112, v112);
    v116 = vmulq_f32(v70, v70);
    if (vmulq_f32(v114, v114).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                              * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), v115)).f32[0])))goto LABEL_58;
  }
  else
  {
    if ((_DWORD)v69 != 1)
    {
      if (*(_BYTE *)(a1 + 64))
        goto LABEL_39;
      v70 = a2[1];
      v71 = vmulq_f32(v70, v70);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0]) <= 0.00001)goto LABEL_39;
LABEL_58:
      *(float32x4_t *)(a1 + 16 * v69) = v70;
      v117 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)(a1 + 4 * v117 + 48) = v66;
      *(_BYTE *)(a1 + 64) = v117 + 1;
      v72 = 1;
      goto LABEL_59;
    }
    v125 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
    v126 = vaddq_f32(v125, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.f32, 1));
    v127 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 2);
    v70 = a2[1];
    v128 = vmulq_f32(v70, v70);
    v129 = vmulq_f32(*(float32x4_t *)a1, v70);
    v130 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v129, 2), vaddq_f32(v129, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v129.f32, 1)));
    if (vmulq_f32(v130, v130).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                              * vmulq_f32(vaddq_f32(v127, v126), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2), vaddq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1)))).f32[0]))goto LABEL_58;
  }
LABEL_39:
  v72 = 0;
LABEL_59:
  v118 = a3->i32[2];
  v119 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
  if ((v119 & 1) == 0)
  {
    v248 = a1;
    v236 = a2;
    v212 = v10;
    v200 = a3->i32[2];
    v224 = v72;
    v174 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    v72 = v224;
    v118 = v200;
    v10 = v212;
    a2 = v236;
    v175 = v174;
    a1 = v248;
    if (v175)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v72 = v224;
      v118 = v200;
      v10 = v212;
      a2 = v236;
      a1 = v248;
    }
  }
  v120 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
  if ((v120 & 1) == 0)
  {
    v249 = a1;
    v237 = a2;
    v213 = v10;
    v201 = v118;
    v225 = v72;
    v176 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    v72 = v225;
    v118 = v201;
    v10 = v213;
    a2 = v237;
    v177 = v176;
    a1 = v249;
    if (v177)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v72 = v225;
      v118 = v201;
      v10 = v213;
      a2 = v237;
      a1 = v249;
    }
  }
  v121 = *(unsigned __int8 *)(a1 + 64);
  if ((_DWORD)v121 == 2)
  {
    v142 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    v122 = a2[2];
    v143 = vmulq_f32(v122, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v142, (int32x4_t)v142), (int8x16_t)v142, 0xCuLL));
    v144 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2), vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1)));
    v145 = vmulq_f32(v142, v142);
    v146 = vmulq_f32(v122, v122);
    if (vmulq_f32(v144, v144).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                              * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v146, 2), vaddq_f32(v146, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 2), v145)).f32[0])))goto LABEL_74;
  }
  else
  {
    if ((_DWORD)v121 != 1)
    {
      if (*(_BYTE *)(a1 + 64))
        goto LABEL_65;
      v122 = a2[2];
      v123 = vmulq_f32(v122, v122);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 2), vaddq_f32(v123, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v123.f32, 1))).f32[0]) <= 0.00001)goto LABEL_65;
LABEL_74:
      *(float32x4_t *)(a1 + 16 * v121) = v122;
      v147 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)(a1 + 4 * v147 + 48) = v118;
      *(_BYTE *)(a1 + 64) = v147 + 1;
      v124 = 1;
      return v10 | v72 | v124;
    }
    v148 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
    v149 = vaddq_f32(v148, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 1));
    v150 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 2);
    v122 = a2[2];
    v151 = vmulq_f32(v122, v122);
    v152 = vmulq_f32(*(float32x4_t *)a1, v122);
    v153 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1)));
    if (vmulq_f32(v153, v153).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                              * vmulq_f32(vaddq_f32(v150, v149), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v151, 2), vaddq_f32(v151, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v151.f32, 1)))).f32[0]))goto LABEL_74;
  }
LABEL_65:
  v124 = 0;
  return v10 | v72 | v124;
}

uint64_t geom::vertex_placement_constraint_factory<float>::add_boundary_preservation(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  geom::triangle_mesh_half_edge_connectivity *v4;
  uint64_t v5;
  unsigned int half_edge_for_face_vertex;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned __int8 v19;
  float32x4_t v20;
  float v21;
  unsigned __int8 v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  unsigned __int8 v34;
  int8x16_t v35;
  unsigned __int8 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  int8x16_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 23);
  if (a2 >= (unint64_t)((*((_QWORD *)*a1 + 24) - v5) >> 2)
    || (half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*a1, *(_DWORD *)(v5 + 4 * a2) / 3u, *(_DWORD *)(v5 + 4 * a2) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v4, half_edge_for_face_vertex)))
  {
    LOBYTE(v11) = *(_BYTE *)(a3 + 64);
    return v11;
  }
  v67 = 0uLL;
  v66 = 0uLL;
  v68[0] = &off_24F149B50;
  v68[1] = &v67;
  v68[2] = &v66;
  v69 = v68;
  geom::vertex_placement_constraint_factory<float>::loop_edge_boundaries((uint64_t)a1, a2, (uint64_t)v68);
  v9 = v69;
  if (v69 == v68)
  {
    v10 = 4;
    v9 = v68;
    goto LABEL_9;
  }
  if (v69)
  {
    v10 = 5;
LABEL_9:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13 = v67;
  v14 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v66, 0xCuLL), vnegq_f32(v67)), (float32x4_t)v66, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v67, 0xCuLL));
  v15 = (int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14);
  v16 = vmulq_f32(v13, v13);
  v17 = vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1));
  v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2);
  v19 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
  if ((v19 & 1) == 0)
  {
    v59 = v15;
    v62 = v14;
    v56 = v18;
    v57 = v17;
    v52 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    v18 = v56;
    v17 = v57;
    v15 = v59;
    v14 = v62;
    if (v52)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v18 = v56;
      v17 = v57;
      v15 = v59;
      v14 = v62;
    }
  }
  v20 = (float32x4_t)vextq_s8(v15, (int8x16_t)v14, 0xCuLL);
  LODWORD(v21) = vaddq_f32(v18, v17).u32[0];
  v22 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
  if ((v22 & 1) == 0)
  {
    v60 = v20;
    v63 = v14;
    v58 = v21;
    v53 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    v21 = v58;
    v20 = v60;
    v14 = v63;
    if (v53)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v21 = v58;
      v20 = v60;
      v14 = v63;
    }
  }
  v23 = vmulq_n_f32(v20, v21);
  v24 = *(unsigned __int8 *)(a3 + 64);
  if ((_DWORD)v24 == 2)
  {
    v26 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a3 + 16), *(int32x4_t *)(a3 + 16)), *(int8x16_t *)(a3 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a3)), *(float32x4_t *)(a3 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
    v27 = vmulq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL));
    v28 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1)));
    v29 = vmulq_f32(v26, v26);
    v30 = vmulq_f32(v23, v23);
    if (vmulq_f32(v28, v28).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                             * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), v29))).f32[0]))goto LABEL_19;
    goto LABEL_18;
  }
  if ((_DWORD)v24 != 1)
  {
    if (*(_BYTE *)(a3 + 64))
      goto LABEL_19;
    v25 = vmulq_f32(v23, v23);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]) <= 0.00001)goto LABEL_19;
    goto LABEL_18;
  }
  v39 = vmulq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
  v40 = vmulq_f32(v23, v23);
  v41 = vmulq_f32(v23, *(float32x4_t *)a3);
  v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)));
  if (vmulq_f32(v42, v42).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                          * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0])))
  {
LABEL_18:
    v31 = vmulq_f32(v14, v14);
    *(float32x4_t *)(a3 + 16 * v24) = v23;
    v32 = *(unsigned __int8 *)(a3 + 64);
    *(float *)(a3 + 4 * v32 + 48) = -vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), v31)).f32[0];
    *(_BYTE *)(a3 + 64) = v32 + 1;
  }
LABEL_19:
  v33 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v67)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL));
  v34 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
  if ((v34 & 1) == 0)
  {
    v64 = v33;
    v54 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    v33 = v64;
    if (v54)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v33 = v64;
    }
  }
  v35 = (int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33);
  v36 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
  if ((v36 & 1) == 0)
  {
    v61 = v35;
    v65 = v33;
    v55 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    v35 = v61;
    v33 = v65;
    if (v55)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v35 = v61;
      v33 = v65;
    }
  }
  v37 = (float32x4_t)vextq_s8(v35, (int8x16_t)v33, 0xCuLL);
  v11 = *(unsigned __int8 *)(a3 + 64);
  if ((_DWORD)v11 == 2)
  {
    v43 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a3 + 16), *(int32x4_t *)(a3 + 16)), *(int8x16_t *)(a3 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a3)), *(float32x4_t *)(a3 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
    v44 = vmulq_f32(v33, v43);
    v45 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), v44));
    v46 = vmulq_f32(v43, v43);
    v47 = vmulq_f32(v33, v33);
    if (vmulq_f32(v45, v45).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                             * vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), v47)), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), v46))).f32[0]))
    {
      LOBYTE(v11) = 2;
      return v11;
    }
    goto LABEL_31;
  }
  if ((_DWORD)v11 == 1)
  {
    v48 = vmulq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
    v49 = vmulq_f32(v33, v33);
    v50 = vmulq_f32(v37, *(float32x4_t *)a3);
    v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1)));
    if (vmulq_f32(v51, v51).f32[0] >= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                             * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), v49)).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).f32[0])))
    {
      LOBYTE(v11) = 1;
      return v11;
    }
    goto LABEL_31;
  }
  if (!*(_BYTE *)(a3 + 64))
  {
    v38 = vmulq_f32(v33, v33);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), v38)).f32[0]) <= 0.00001)
    {
      LOBYTE(v11) = 0;
      return v11;
    }
LABEL_31:
    *(float32x4_t *)(a3 + 16 * v11) = v37;
    v11 = *(unsigned __int8 *)(a3 + 64);
    *(_DWORD *)(a3 + 4 * v11 + 48) = 0;
    LOBYTE(v11) = v11 + 1;
    *(_BYTE *)(a3 + 64) = v11;
  }
  return v11;
}

uint64_t geom::vertex_placement_constraint_factory<float>::add_volume_preservation(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float32x4_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v29 = 0uLL;
  v28 = 0;
  v30[0] = &off_24F149C60;
  v30[1] = &v29;
  v30[2] = &v28;
  v31 = v30;
  geom::vertex_placement_constraint_factory<float>::loop_edge_triangles(a1, a2, (uint64_t)v30);
  v4 = v31;
  if (v31 == v30)
  {
    v5 = 4;
    v4 = v30;
    goto LABEL_5;
  }
  if (v31)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  v6 = v28;
  v7 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
  if ((v7 & 1) == 0)
  {
    v26 = v28;
    v24 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    v6 = v26;
    if (v24)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      v6 = v26;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
  if ((v8 & 1) == 0)
  {
    v27 = v6;
    v25 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    v6 = v27;
    if (v25)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      v6 = v27;
    }
  }
  v9 = *(unsigned __int8 *)(a3 + 64);
  if ((_DWORD)v9 == 2)
  {
    v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a3 + 16), *(int32x4_t *)(a3 + 16)), *(int8x16_t *)(a3 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a3)), *(float32x4_t *)(a3 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
    v10 = v29;
    v13 = vmulq_f32(v29, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
    v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
    v15 = vmulq_f32(v12, v12);
    v16 = vmulq_f32(v10, v10);
    if (vmulq_f32(v14, v14).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                             * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), v15)).f32[0])))
    {
      LOBYTE(v9) = 2;
      return v9;
    }
    goto LABEL_16;
  }
  if ((_DWORD)v9 == 1)
  {
    v17 = vmulq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
    v18 = vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1));
    v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2);
    v10 = v29;
    v20 = vmulq_f32(v10, v10);
    v21 = vmulq_f32(*(float32x4_t *)a3, v29);
    v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
    if (vmulq_f32(v22, v22).f32[0] >= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                             * vmulq_f32(vaddq_f32(v19, v18), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)))).f32[0]))
    {
      LOBYTE(v9) = 1;
      return v9;
    }
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a3 + 64))
  {
    v10 = v29;
    v11 = vmulq_f32(v10, v10);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]) <= 0.00001)
    {
      LOBYTE(v9) = 0;
      return v9;
    }
LABEL_16:
    *(float32x4_t *)(a3 + 16 * v9) = v10;
    v9 = *(unsigned __int8 *)(a3 + 64);
    *(_DWORD *)(a3 + 4 * v9 + 48) = v6;
    LOBYTE(v9) = v9 + 1;
    *(_BYTE *)(a3 + 64) = v9;
  }
  return v9;
}

float geom::internal::quadric::convert_to_quadratic_form<float>(uint64_t a1, uint64_t a2, float64x2_t *a3, float *a4, int32x4_t a5)
{
  float64x2_t v5;
  float64x2_t v6;
  float v7;
  float64x2_t v8;
  float result;

  a5.i64[0] = *(_QWORD *)a1;
  v5.f64[0] = *(float64_t *)(a1 + 8);
  *(float *)a5.i32 = *(double *)a1;
  v6.f64[0] = *(float64_t *)(a1 + 16);
  v5.f64[1] = *(float64_t *)(a1 + 32);
  *(float32x2_t *)&v5.f64[0] = vcvt_f32_f64(v5);
  v6.f64[1] = *(float64_t *)(a1 + 40);
  *(float32x2_t *)&v6.f64[0] = vcvt_f32_f64(v6);
  v7 = *(double *)(a1 + 56);
  *(_DWORD *)(a2 + 8) = LODWORD(v6.f64[0]);
  *(_DWORD *)(a2 + 24) = HIDWORD(v6.f64[0]);
  HIDWORD(v6.f64[0]) = vdup_lane_s32(*(int32x2_t *)&v6.f64[0], 1).u32[0];
  *(_QWORD *)a2 = vzip1q_s32(a5, (int32x4_t)v5).u64[0];
  *(float64_t *)(a2 + 16) = v5.f64[0];
  *(float *)(a2 + 40) = v7;
  *(float64_t *)(a2 + 32) = v6.f64[0];
  v8.f64[0] = *(float64_t *)(a1 + 24);
  v8.f64[1] = *(float64_t *)(a1 + 48);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64(v8);
  *(float *)v5.f64 = *(double *)(a1 + 64);
  LODWORD(v8.f64[1]) = LODWORD(v5.f64[0]);
  *a3 = v8;
  result = *(double *)(a1 + 72);
  *a4 = result;
  return result;
}

void geom::vertex_placement_constraint_factory<float>::loop_edge_boundaries(uint64_t a1, unsigned int a2, uint64_t a3)
{
  geom::triangle_mesh_half_edge_connectivity *v6;
  uint64_t v7;
  unsigned int half_edge_for_face_vertex;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  char v17;
  geom::triangle_mesh_half_edge_connectivity *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t i;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  void *__p;
  _BYTE *v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD v32[14];
  _DWORD v33[2];
  unsigned int v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 184);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 192) - v7) >> 2))
  {
    *(_QWORD *)v34 = -1;
    v9 = -1;
  }
  else
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, half_edge_for_face_vertex, v34);
    v6 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    v9 = v34[0];
  }
  __p = 0;
  v29 = 0;
  v30 = 0;
  geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(v6, v9, (uint64_t)&__p);
  v10 = ((unint64_t)(v29 - (_BYTE *)__p) >> 2) - 1;
  if (*(_DWORD *)__p != a2)
    v10 = 0;
  v33[0] = *((_DWORD *)__p + v10);
  geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, v34[1], (uint64_t)&__p);
  v11 = 0;
  v12 = ((unint64_t)(v29 - (_BYTE *)__p) >> 2) - 1;
  if (*(_DWORD *)__p != a2)
    v12 = 0;
  v33[1] = *((_DWORD *)__p + v12);
  v13 = v34[0];
  v14 = v34[1];
  v32[11] = v34[0];
  v32[12] = v34[1];
  v27 = -1;
  v15 = 1;
  v16 = 0xFFFFFFFFLL;
  do
  {
    v17 = v15;
    v18 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    v19 = v33[v11];
    v20 = *(_QWORD *)(*(_QWORD *)a1 + 184);
    if (v19 >= (*(_QWORD *)(*(_QWORD *)a1 + 192) - v20) >> 2)
    {
      *(_QWORD *)v34 = -1;
      v22 = -1;
    }
    else
    {
      v21 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v20 + 4 * v19) / 3u, *(_DWORD *)(v20 + 4 * v19) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v18, v21, v34);
      v22 = v34[0];
    }
    if (v22 == v13 || v34[1] == v13)
    {
      v16 = *(unsigned int *)((unint64_t)v34 | (4 * (v22 == v13)));
    }
    else if (v22 == v14 || v34[1] == v14)
    {
      v27 = *(_DWORD *)((unint64_t)v34 | (4 * (v22 == v14)));
    }
    v15 = 0;
    v11 = 1;
  }
  while ((v17 & 1) != 0);
  v32[13] = v27;
  for (i = 1; i != 4; ++i)
  {
    v24 = *(_QWORD *)(a1 + 8);
    v25 = *(_OWORD *)(v24 + 16 * v16);
    v16 = v32[i + 10];
    *(_OWORD *)v32 = v25;
    *(_OWORD *)&v32[4] = *(_OWORD *)(v24 + 16 * v16);
    v31 = v32;
    v26 = *(_QWORD *)(a3 + 24);
    if (!v26)
      std::__throw_bad_function_call[abi:nn180100]();
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v26 + 48))(v26, &v31);
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(geom::triangle_mesh_half_edge_connectivity *a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v5;
  _BOOL4 is_boundary_half_edge;
  unint64_t face_and_face_vertex_for_half_edge;
  unsigned __int8 v8;
  unsigned int half_edge_for_face_vertex;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;

  geom::triangle_mesh_half_edge_connectivity::get_incident_outgoing_half_edges_to_vertex(a1, a2, a3);
  v5 = *(_DWORD **)(a3 + 8);
  if (v5 != *(_DWORD **)a3)
  {
    is_boundary_half_edge = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(a1, **(_DWORD **)a3);
    v5 = *(_DWORD **)(a3 + 8);
    if (is_boundary_half_edge)
    {
      face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(a1, *(v5 - 1));
      v8 = BYTE4(face_and_face_vertex_for_half_edge) - 1;
      if ((face_and_face_vertex_for_half_edge & 0xFF00000000) == 0)
        v8 = 2;
      half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(a1, face_and_face_vertex_for_half_edge, v8);
      v10 = half_edge_for_face_vertex;
      v11 = *(_QWORD *)(a3 + 16);
      v12 = *(unsigned int **)(a3 + 8);
      if ((unint64_t)v12 >= v11)
      {
        v13 = *(unsigned int **)a3;
        v14 = ((uint64_t)v12 - *(_QWORD *)a3) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          abort();
        v16 = v11 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v17);
          v13 = *(unsigned int **)a3;
          v12 = *(unsigned int **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        v20 = &v18[4 * v17];
        *(_DWORD *)v19 = v10;
        v5 = v19 + 4;
        while (v12 != v13)
        {
          v21 = *--v12;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v5;
        *(_QWORD *)(a3 + 16) = v20;
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v12 = half_edge_for_face_vertex;
        v5 = v12 + 1;
      }
      *(_QWORD *)(a3 + 8) = v5;
    }
  }
  if (v5 != *(_DWORD **)a3)
  {
    v22 = 0;
    if ((unint64_t)(((uint64_t)v5 - *(_QWORD *)a3) >> 2) <= 1)
      v23 = 1;
    else
      v23 = ((uint64_t)v5 - *(_QWORD *)a3) >> 2;
    do
    {
      v24 = *(unsigned int **)a3;
      v25 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v22);
      if (v25 == -1)
      {
        v27 = -1;
      }
      else
      {
        v26 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(a1, v25);
        v27 = 3 * v26 + BYTE4(v26);
        v24 = *(unsigned int **)a3;
      }
      v24[v22++] = *(_DWORD *)(*((_QWORD *)a1 + 20) + 4 * v27);
    }
    while (v23 != v22);
  }
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F149B50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F149B50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float32x4_t **a2)
{
  float32x4_t *v2;
  int32x4_t v3;
  float32x4_t *v4;
  float32x4_t result;

  v2 = *a2;
  *(float32x4_t *)*(_QWORD *)(a1 + 8) = vaddq_f32(vsubq_f32((*a2)[1], **a2), *(float32x4_t *)*(_QWORD *)(a1 + 8));
  v3 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v2, *(int32x4_t *)v2), *(int8x16_t *)v2, 0xCuLL), vnegq_f32(v2[1])), *v2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2[1], (int32x4_t)v2[1]), (int8x16_t)v2[1], 0xCuLL));
  v4 = *(float32x4_t **)(a1 + 16);
  result = vaddq_f32(*v4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL));
  *v4 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_;
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
  JUMPOUT(0x22E2B768CLL);
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24F149BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24F149BE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float32x4_t **a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  double result;

  *(_QWORD *)&result = _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_((float32x4_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9).u64[0];
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_;
}

float32x4_t _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_(float32x4_t **a1, float32x4_t **a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  int32x4_t v24;
  float32x4_t result;

  _Q2 = **a2;
  v9 = (*a2)[1];
  _Q0 = vsubq_f32(v9, _Q2);
  v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL), vnegq_f32(v9)), _Q2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
  _Q2.i32[0] = _Q0.i32[1];
  __asm { FMLA            S4, S2, V0.S[1] }
  *(float32x2_t *)a8.f32 = vneg_f32(*(float32x2_t *)_Q0.f32);
  a9.f32[0] = vmuls_lane_f32(a8.f32[0], *(float32x2_t *)_Q0.f32, 1);
  *(float32x2_t *)a8.f32 = vmul_laneq_f32(*(float32x2_t *)a8.f32, _Q0, 2);
  _Q4.i32[1] = a9.i32[0];
  _Q4.i64[1] = a8.i64[0];
  a9.i32[1] = vmlas_n_f32(COERCE_FLOAT(vmulq_f32(_Q0, _Q0).i32[2]), _Q0.f32[0], _Q0.f32[0]);
  a9.i32[2] = a8.i32[1];
  a8.i32[2] = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[1], *(float32x2_t *)_Q0.f32, 1), _Q0.f32[0], _Q0.f32[0]);
  v19 = *a1;
  v20 = vaddq_f32(**a1, _Q4);
  v21 = vaddq_f32((*a1)[1], a9);
  v22 = vaddq_f32((*a1)[2], a8);
  (*a1)->i32[2] = v20.i32[2];
  v19->i64[0] = v20.i64[0];
  v19[1].i32[2] = v21.i32[2];
  v19[1].i64[0] = v21.i64[0];
  v19[2].i32[2] = v22.i32[2];
  v19[2].i64[0] = v22.i64[0];
  v23 = a1[1];
  v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), vnegq_f32(_Q0)), v13, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  result = vsubq_f32(*v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL));
  *v23 = result;
  return result;
}

void geom::vertex_placement_constraint_factory<float>::loop_edge_triangles(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  geom::triangle_mesh_half_edge_connectivity *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int half_edge_for_face_vertex;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int half_edge_face;
  unsigned int half_edge_twin;
  int v15;
  _DWORD *v16;
  _DWORD *i;
  geom::triangle_mesh_half_edge_connectivity *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  geom::triangle_mesh_half_edge_connectivity *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = a2;
  v7 = *((_QWORD *)*a1 + 23);
  v8 = (*((_QWORD *)*a1 + 24) - v7) >> 2;
  if (v8 <= a2)
  {
    *(_QWORD *)v41 = -1;
  }
  else
  {
    half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v41);
    v5 = *a1;
    v7 = *((_QWORD *)*a1 + 23);
    v8 = (*((_QWORD *)*a1 + 24) - v7) >> 2;
  }
  if (v8 > v6
    && (v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v7 + 4 * v6) / 3u, *(_DWORD *)(v7 + 4 * v6) % 3u), geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v5, v10)))
  {
    v11 = *(_DWORD *)(*((_QWORD *)v5 + 23) + 4 * v6);
    v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, v11 / 3, v11 % 3);
    half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, v12);
    if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v5, v12))
    {
      half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v5, v12);
      v15 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, half_edge_twin);
      goto LABEL_10;
    }
  }
  else
  {
    half_edge_face = -1;
  }
  v15 = -1;
LABEL_10:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(*a1, v41[0], (uint64_t)&v34);
  v16 = v34;
  for (i = v35; v16 != i; ++v16)
  {
    v18 = a1[1];
    v19 = (unsigned int *)(*((_QWORD *)*a1 + 2) + 4 * (3 * *v16));
    v20 = *v19;
    v21 = v19[1];
    v22 = v19[2];
    v38 = *((_OWORD *)v18 + v20);
    v39 = *((_OWORD *)v18 + v21);
    v40 = *((_OWORD *)v18 + v22);
    v37 = &v38;
    v23 = *(_QWORD *)(a3 + 24);
    if (!v23)
LABEL_25:
      std::__throw_bad_function_call[abi:nn180100]();
    (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)v23 + 48))(v23, &v37);
  }
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(*a1, v41[1], (uint64_t)&v34);
  v24 = v34;
  v25 = v35;
  if (v34 != v35)
  {
    do
    {
      v26 = *v24;
      if (*v24 != half_edge_face && v26 != v15)
      {
        v28 = a1[1];
        v29 = (unsigned int *)(*((_QWORD *)*a1 + 2) + 4 * (3 * v26));
        v30 = *v29;
        v31 = v29[1];
        v32 = v29[2];
        v38 = *((_OWORD *)v28 + v30);
        v39 = *((_OWORD *)v28 + v31);
        v40 = *((_OWORD *)v28 + v32);
        v37 = &v38;
        v33 = *(_QWORD *)(a3 + 24);
        if (!v33)
          goto LABEL_25;
        (*(void (**)(uint64_t, __int128 **))(*(_QWORD *)v33 + 48))(v33, &v37);
      }
      ++v24;
    }
    while (v24 != v25);
    v24 = v34;
  }
  if (v24)
  {
    v35 = v24;
    operator delete(v24);
  }
}

